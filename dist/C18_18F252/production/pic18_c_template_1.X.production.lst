

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Wed May 11 09:41:38 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	eeprom_data
    77  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    78  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    79  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    80  0000                     
    81                           	psect	idataCOMRAM
    82  0025D8                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _curEventNum
    86  0025D8  FF                 	db	255
    87                           
    88                           ;initializer for _globalHours
    89  0025D9  FF                 	db	255
    90                           
    91                           ;initializer for _oldEventNum
    92  0025DA  FF                 	db	255
    93                           
    94                           	psect	idataBANK0
    95  0025D4                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _buzzerOnOffDuration
    99  0025D4  0100               	dw	256
   100                           
   101                           ;initializer for _buzzerOnOffPeriod
   102  0025D6  0400               	dw	1024
   103                           
   104                           	psect	mediumconst
   105  007D9C                     __pmediumconst:
   106                           	opt stack 0
   107  007D9C  00                 	db	0
   108  007D9D                     _fctsupported:
   109                           	opt stack 0
   110  007D9D  01                 	db	1
   111  007D9E  02                 	db	2
   112  007D9F  03                 	db	3
   113  007DA0  04                 	db	4
   114  007DA1  05                 	db	5
   115  007DA2  06                 	db	6
   116  007DA3  0F                 	db	15
   117  007DA4  10                 	db	16
   118  007DA5  11                 	db	17
   119  007DA6  15                 	db	21
   120  007DA7                     __end_of_fctsupported:
   121                           	opt stack 0
   122  0000                     _CCP1CONbits	set	4029
   123  0000                     _CCPR1L	set	4030
   124  0000                     _EEADR	set	4009
   125  0000                     _EECON2	set	4007
   126  0000                     _EEDATA	set	4008
   127  0000                     _INTCON2bits	set	4081
   128  0000                     _INTCONbits	set	4082
   129  0000                     _IPR1bits	set	3999
   130  0000                     _LATA	set	3977
   131  0000                     _LATAbits	set	3977
   132  0000                     _LATB	set	3978
   133  0000                     _LATCbits	set	3979
   134  0000                     _PIE1bits	set	3997
   135  0000                     _PIR1bits	set	3998
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PR2	set	4043
   138  0000                     _RCONbits	set	4048
   139  0000                     _RCREG	set	4014
   140  0000                     _RCSTA	set	4011
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _SPBRG	set	4015
   143  0000                     _T0CONbits	set	4053
   144  0000                     _T1CONbits	set	4045
   145  0000                     _T2CONbits	set	4042
   146  0000                     _TMR0H	set	4055
   147  0000                     _TMR0L	set	4054
   148  0000                     _TMR1H	set	4047
   149  0000                     _TMR1L	set	4046
   150  0000                     _TRISAbits	set	3986
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISCbits	set	3988
   153  0000                     _TXREG	set	4013
   154  0000                     _TXSTA	set	4012
   155  0000                     _TXSTAbits	set	4012
   156  0000                     _CARRY	set	32448
   157  0000                     _GIE	set	32663
   158  0000                     _RCIF	set	31989
   159  0000                     _RD	set	32048
   160  0000                     _TRMT	set	32097
   161  0000                     _WR	set	32049
   162  0000                     _WREN	set	32050
   163  007DA7                     STR_3:
   164  007DA7  54                 	db	84	;'T'
   165  007DA8  61                 	db	97	;'a'
   166  007DA9  62                 	db	98	;'b'
   167  007DAA  6C                 	db	108	;'l'
   168  007DAB  6F                 	db	111	;'o'
   169  007DAC  20                 	db	32
   170  007DAD  73                 	db	115	;'s'
   171  007DAE  20                 	db	32
   172  007DAF  72                 	db	114	;'r'
   173  007DB0  61                 	db	97	;'a'
   174  007DB1  73                 	db	115	;'s'
   175  007DB2  70                 	db	112	;'p'
   176  007DB3  69                 	db	105	;'i'
   177  007DB4  73                 	db	115	;'s'
   178  007DB5  61                 	db	97	;'a'
   179  007DB6  6E                 	db	110	;'n'
   180  007DB7  69                 	db	105	;'i'
   181  007DB8  65                 	db	101	;'e'
   182  007DB9  6D                 	db	109	;'m'
   183  007DBA  00                 	db	0
   184                           
   185                           ; #config settings
   186  007DBB  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  001FA6                     __pcinit:
   190                           	opt stack 0
   191  001FA6                     start_initialization:
   192                           	opt stack 0
   193  001FA6                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Clear objects allocated to BANK2 (256 bytes)
   197  001FA6  EE02  F000         	lfsr	0,__pbssBANK2
   198  001FAA  EE11 F000          	lfsr	1,256
   199  001FAE                     clear_0:
   200  001FAE  6AEE               	clrf	postinc0,c
   201  001FB0  50E5               	movf	postdec1,w,c
   202  001FB2  50E1               	movf	fsr1l,w,c
   203  001FB4  E1FC               	bnz	clear_0
   204  001FB6  50E2               	movf	fsr1h,w,c
   205  001FB8  E1FA               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to BANK1 (200 bytes)
   208  001FBA  EE01  F000         	lfsr	0,__pbssBANK1
   209  001FBE  0EC8               	movlw	200
   210  001FC0                     clear_1:
   211  001FC0  6AEE               	clrf	postinc0,c
   212  001FC2  06E8               	decf	wreg,f,c
   213  001FC4  E1FD               	bnz	clear_1
   214                           
   215                           ; Clear objects allocated to BANK0 (89 bytes)
   216  001FC6  EE00  F080         	lfsr	0,__pbssBANK0
   217  001FCA  0E59               	movlw	89
   218  001FCC                     clear_2:
   219  001FCC  6AEE               	clrf	postinc0,c
   220  001FCE  06E8               	decf	wreg,f,c
   221  001FD0  E1FD               	bnz	clear_2
   222                           
   223                           ; Clear objects allocated to COMRAM (8 bytes)
   224  001FD2  EE00  F06F         	lfsr	0,__pbssCOMRAM
   225  001FD6  0E08               	movlw	8
   226  001FD8                     clear_3:
   227  001FD8  6AEE               	clrf	postinc0,c
   228  001FDA  06E8               	decf	wreg,f,c
   229  001FDC  E1FD               	bnz	clear_3
   230                           
   231                           ; Initialize objects allocated to BANK0 (4 bytes)
   232                           ; load TBLPTR registers with __pidataBANK0
   233  001FDE  0ED4               	movlw	low __pidataBANK0
   234  001FE0  6EF6               	movwf	tblptrl,c
   235  001FE2  0E25               	movlw	high __pidataBANK0
   236  001FE4  6EF7               	movwf	tblptrh,c
   237  001FE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   238  001FE8  6EF8               	movwf	tblptru,c
   239  001FEA  EE00  F0ED         	lfsr	0,__pdataBANK0
   240  001FEE  EE10 F004          	lfsr	1,4
   241  001FF2                     copy_data0:
   242  001FF2  0009               	tblrd		*+
   243  001FF4  CFF5 FFEE          	movff	tablat,postinc0
   244  001FF8  50E5               	movf	postdec1,w,c
   245  001FFA  50E1               	movf	fsr1l,w,c
   246  001FFC  E1FA               	bnz	copy_data0
   247                           
   248                           ; Initialize objects allocated to COMRAM (3 bytes)
   249                           ; load TBLPTR registers with __pidataCOMRAM
   250  001FFE  0ED8               	movlw	low __pidataCOMRAM
   251  002000  6EF6               	movwf	tblptrl,c
   252  002002  0E25               	movlw	high __pidataCOMRAM
   253  002004  6EF7               	movwf	tblptrh,c
   254  002006  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   255  002008  6EF8               	movwf	tblptru,c
   256  00200A  0009               	tblrd		*+	;fetch initializer
   257  00200C  CFF5 F077          	movff	tablat,__pdataCOMRAM
   258  002010  0009               	tblrd		*+	;fetch initializer
   259  002012  CFF5 F078          	movff	tablat,__pdataCOMRAM+1
   260  002016  0009               	tblrd		*+	;fetch initializer
   261  002018  CFF5 F079          	movff	tablat,__pdataCOMRAM+2
   262  00201C                     end_of_initialization:
   263                           	opt stack 0
   264  00201C                     __end_of__initialization:
   265                           	opt stack 0
   266  00201C  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267  00201E  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268  002020  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  002022  6EF8               	movwf	tblptru,c
   270  002024  0100               	movlb	0
   271  002026  EF2C  F008         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           postdec1	equ	0xFE5
   279                           fsr1h	equ	0xFE2
   280                           fsr1l	equ	0xFE1
   281                           
   282                           	psect	bssCOMRAM
   283  00006F                     __pbssCOMRAM:
   284                           	opt stack 0
   285  00006F                     _UartBufferLen:
   286                           	opt stack 0
   287  00006F                     	ds	1
   288  000070                     _UartBufferTail:
   289                           	opt stack 0
   290  000070                     	ds	1
   291  000071                     __u8BufferSize:
   292                           	opt stack 0
   293  000071                     	ds	1
   294  000072                     _blinkOn:
   295                           	opt stack 0
   296  000072                     	ds	1
   297  000073                     _buzzeLoudDuration:
   298                           	opt stack 0
   299  000073                     	ds	1
   300  000074                     _buzzerAlarmPeriod:
   301                           	opt stack 0
   302  000074                     	ds	1
   303  000075                     _eventCount:
   304                           	opt stack 0
   305  000075                     	ds	1
   306  000076                     _globalMinutes:
   307                           	opt stack 0
   308  000076                     	ds	1
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           postdec1	equ	0xFE5
   316                           fsr1h	equ	0xFE2
   317                           fsr1l	equ	0xFE1
   318                           
   319                           	psect	dataCOMRAM
   320  000077                     __pdataCOMRAM:
   321                           	opt stack 0
   322  000077                     _curEventNum:
   323                           	opt stack 0
   324  000077                     	ds	1
   325  000078                     _globalHours:
   326                           	opt stack 0
   327  000078                     	ds	1
   328  000079                     _oldEventNum:
   329                           	opt stack 0
   330  000079                     	ds	1
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           postdec1	equ	0xFE5
   338                           fsr1h	equ	0xFE2
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	bssBANK0
   342  000080                     __pbssBANK0:
   343                           	opt stack 0
   344  000080                     _ledBlink:
   345                           	opt stack 0
   346  000080                     	ds	16
   347  000090                     _ledStatuses:
   348                           	opt stack 0
   349  000090                     	ds	16
   350  0000A0                     __u32time:
   351                           	opt stack 0
   352  0000A0                     	ds	4
   353  0000A4                     _diffTime:
   354                           	opt stack 0
   355  0000A4                     	ds	4
   356  0000A8                     _eventResetSecond:
   357                           	opt stack 0
   358  0000A8                     	ds	4
   359  0000AC                     _millisecondsFromStart:
   360                           	opt stack 0
   361  0000AC                     	ds	4
   362  0000B0                     _oldBlinkOnTime:
   363                           	opt stack 0
   364  0000B0                     	ds	4
   365  0000B4                     __MODBUSDiscreteInputs:
   366                           	opt stack 0
   367  0000B4                     	ds	2
   368  0000B6                     __lastAddress:
   369                           	opt stack 0
   370  0000B6                     	ds	2
   371  0000B8                     __lastCount:
   372                           	opt stack 0
   373  0000B8                     	ds	2
   374  0000BA                     _blinkDuration:
   375                           	opt stack 0
   376  0000BA                     	ds	2
   377  0000BC                     _blinkPeriod:
   378                           	opt stack 0
   379  0000BC                     	ds	2
   380  0000BE                     _IsBusserOn:
   381                           	opt stack 0
   382  0000BE                     	ds	1
   383  0000BF                     _UartBufferHead:
   384                           	opt stack 0
   385  0000BF                     	ds	1
   386  0000C0                     __6sCounter:
   387                           	opt stack 0
   388  0000C0                     	ds	1
   389  0000C1                     __holdingRegsCount:
   390                           	opt stack 0
   391  0000C1                     	ds	1
   392  0000C2                     __inputRegsCount:
   393                           	opt stack 0
   394  0000C2                     	ds	1
   395  0000C3                     __u8id:
   396                           	opt stack 0
   397  0000C3                     	ds	1
   398  0000C4                     __u8lastRec:
   399                           	opt stack 0
   400  0000C4                     	ds	1
   401  0000C5                     _buzzeEscaladeTime:
   402                           	opt stack 0
   403  0000C5                     	ds	1
   404  0000C6                     _buzzeQuietDuration:
   405                           	opt stack 0
   406  0000C6                     	ds	1
   407  0000C7                     _buzzerInfoPeriod:
   408                           	opt stack 0
   409  0000C7                     	ds	1
   410  0000C8                     _buzzerStartDurationDiv:
   411                           	opt stack 0
   412  0000C8                     	ds	1
   413  0000C9                     _curEventHour:
   414                           	opt stack 0
   415  0000C9                     	ds	1
   416  0000CA                     _curEventMinute:
   417                           	opt stack 0
   418  0000CA                     	ds	1
   419  0000CB                     _curEventType:
   420                           	opt stack 0
   421  0000CB                     	ds	1
   422  0000CC                     _currentLedBlock:
   423                           	opt stack 0
   424  0000CC                     	ds	1
   425  0000CD                     _eveningTimeHour:
   426                           	opt stack 0
   427  0000CD                     	ds	1
   428  0000CE                     _eventAcceptTime:
   429                           	opt stack 0
   430  0000CE                     	ds	1
   431  0000CF                     _morningTimeHour:
   432                           	opt stack 0
   433  0000CF                     	ds	1
   434  0000D0                     _nightEndHour:
   435                           	opt stack 0
   436  0000D0                     	ds	1
   437  0000D1                     _nightStartHour:
   438                           	opt stack 0
   439  0000D1                     	ds	1
   440  0000D2                     _currentTime:
   441                           	opt stack 0
   442  0000D2                     	ds	4
   443  0000D6                     __MODBUSCoils:
   444                           	opt stack 0
   445  0000D6                     	ds	2
   446  0000D8                     __lastCommand:
   447                           	opt stack 0
   448  0000D8                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1h	equ	0xFE2
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	dataBANK0
   460  0000ED                     __pdataBANK0:
   461                           	opt stack 0
   462  0000ED                     _buzzerOnOffDuration:
   463                           	opt stack 0
   464  0000ED                     	ds	2
   465  0000EF                     _buzzerOnOffPeriod:
   466                           	opt stack 0
   467  0000EF                     	ds	2
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1h	equ	0xFE2
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	bssBANK1
   479  000100                     __pbssBANK1:
   480                           	opt stack 0
   481  000100                     __au8Buffer:
   482                           	opt stack 0
   483  000100                     	ds	140
   484  00018C                     __MODBUSHoldingRegs:
   485                           	opt stack 0
   486  00018C                     	ds	30
   487  0001AA                     __MODBUSInputRegs:
   488                           	opt stack 0
   489  0001AA                     	ds	30
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1h	equ	0xFE2
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	bssBANK2
   501  000200                     __pbssBANK2:
   502                           	opt stack 0
   503  000200                     _UartRingBuffer:
   504                           	opt stack 0
   505  000200                     	ds	256
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	cstackBANK0
   517  0000D9                     __pcstackBANK0:
   518                           	opt stack 0
   519  0000D9                     ??_main:
   520                           
   521                           ; 1 bytes @ 0x0
   522  0000D9                     	ds	5
   523  0000DE                     main@lastMs:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x5
   527  0000DE                     	ds	4
   528  0000E2                     main@oldBuzzerOnTime:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x9
   532  0000E2                     	ds	4
   533  0000E6                     main@oldMinute:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0xD
   537  0000E6                     	ds	1
   538  0000E7                     main@hour:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0xE
   542  0000E7                     	ds	1
   543  0000E8                     main@curMs:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0xF
   547  0000E8                     	ds	4
   548  0000EC                     main@minute:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x13
   552  0000EC                     	ds	1
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	cstackCOMRAM
   564  000001                     __pcstackCOMRAM:
   565                           	opt stack 0
   566  000001                     ??_high_isr:
   567  000001                     
   568                           ; 1 bytes @ 0x0
   569  000001                     	ds	2
   570  000003                     high_isr@c:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x2
   574  000003                     	ds	1
   575  000004                     ??_low_isr:
   576                           
   577                           ; 1 bytes @ 0x3
   578  000004                     	ds	1
   579  000005                     ?_ModbusCalcCRC:
   580                           	opt stack 0
   581  000005                     ?___lwdiv:
   582                           	opt stack 0
   583  000005                     ?___lwmod:
   584                           	opt stack 0
   585  000005                     ?_millis:
   586                           	opt stack 0
   587  000005                     PortRead@ret:
   588                           	opt stack 0
   589  000005                     getHourMin@min:
   590                           	opt stack 0
   591  000005                     SetHourMin@newMin:
   592                           	opt stack 0
   593  000005                     UpdateLedRegister@regIndex:
   594                           	opt stack 0
   595  000005                     SwitchOffAllLeds@i:
   596                           	opt stack 0
   597  000005                     LightLed@ledState:
   598                           	opt stack 0
   599  000005                     LightStatusLed@on:
   600                           	opt stack 0
   601  000005                     InitApp@i:
   602                           	opt stack 0
   603  000005                     SetTime@newTime:
   604                           	opt stack 0
   605  000005                     ModbusInit@u8serno:
   606                           	opt stack 0
   607  000005                     ModbusBuildException@u8exception:
   608                           	opt stack 0
   609  000005                     ModbusGetLastCommand@count:
   610                           	opt stack 0
   611  000005                     PortWrite@buf:
   612                           	opt stack 0
   613  000005                     SetBuzzerDuty@dc:
   614                           	opt stack 0
   615  000005                     ___lwdiv@dividend:
   616                           	opt stack 0
   617  000005                     ___lwmod@dividend:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x4
   621  000005                     	ds	1
   622  000006                     ??_ModbusGetRxBuffer:
   623  000006                     ??_ProcessLightBlock:
   624  000006                     getHourMin@hour:
   625                           	opt stack 0
   626  000006                     SetHourMin@newHour:
   627                           	opt stack 0
   628  000006                     LightLed@blink:
   629                           	opt stack 0
   630  000006                     LightStatusLed@blink:
   631                           	opt stack 0
   632  000006                     ModbusInit@u8txenpin:
   633                           	opt stack 0
   634  000006                     ModbusBuildException@u8func:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x5
   638  000006                     	ds	1
   639  000007                     ??_LoadNextEvent:
   640  000007                     ??_ModbusCalcCRC:
   641  000007                     ??_LightLed:
   642  000007                     ??_LightStatusLed:
   643  000007                     ??_SetBuzzerDuty:
   644  000007                     PortWrite@buflen:
   645                           	opt stack 0
   646  000007                     ModbusGetRxBuffer@bBuffOverflow:
   647                           	opt stack 0
   648  000007                     ModbusGetLastCommand@address:
   649                           	opt stack 0
   650  000007                     ___lwdiv@divisor:
   651                           	opt stack 0
   652  000007                     ___lwmod@divisor:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x6
   656  000007                     	ds	1
   657  000008                     PortWrite@i:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x7
   661  000008                     	ds	1
   662  000009                     LoadNextEvent@v1:
   663                           	opt stack 0
   664  000009                     ModbusInit@u8id:
   665                           	opt stack 0
   666  000009                     ___lwmod@counter:
   667                           	opt stack 0
   668  000009                     ModbusCalcCRC@temp2:
   669                           	opt stack 0
   670  000009                     ___lwdiv@quotient:
   671                           	opt stack 0
   672  000009                     millis@ret:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x8
   676  000009                     	ds	1
   677  00000A                     ?_isleap:
   678                           	opt stack 0
   679  00000A                     LightLed@ledNum:
   680                           	opt stack 0
   681  00000A                     ProcessLightBlock@curMs:
   682                           	opt stack 0
   683  00000A                     LoadNextEvent@hour:
   684                           	opt stack 0
   685  00000A                     Modbus@u8serno:
   686                           	opt stack 0
   687  00000A                     isleap@yr:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x9
   691  00000A                     	ds	1
   692  00000B                     LightLed@ststusIndex:
   693                           	opt stack 0
   694  00000B                     LoadNextEvent@minute:
   695                           	opt stack 0
   696  00000B                     Modbus@u8txenpin:
   697                           	opt stack 0
   698  00000B                     ___lwdiv@counter:
   699                           	opt stack 0
   700  00000B                     ModbusCalcCRC@flag:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0xA
   704  00000B                     	ds	1
   705  00000C                     ??_isleap:
   706  00000C                     ?_months_to_days:
   707                           	opt stack 0
   708  00000C                     ?_years_to_days:
   709                           	opt stack 0
   710  00000C                     LightLed@statusShift:
   711                           	opt stack 0
   712  00000C                     LightStatusLed@row:
   713                           	opt stack 0
   714  00000C                     Modbus@u8id:
   715                           	opt stack 0
   716  00000C                     months_to_days@month:
   717                           	opt stack 0
   718  00000C                     years_to_days@yr:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0xB
   722  00000C                     	ds	1
   723  00000D                     ??_InitFromEeprom:
   724  00000D                     ??_ResetEvent:
   725  00000D                     ??_ProcessDiary:
   726  00000D                     ModbusCalcCRC@u8length:
   727                           	opt stack 0
   728  00000D                     _isleap$2109:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0xC
   732  00000D                     	ds	1
   733  00000E                     ??_months_to_days:
   734  00000E                     ModbusCalcCRC@i:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0xD
   738  00000E                     	ds	1
   739  00000F                     ResetEvent@state:
   740                           	opt stack 0
   741  00000F                     ModbusCalcCRC@j:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0xE
   745  00000F                     	ds	1
   746  000010                     ??_years_to_days:
   747  000010                     _ResetEvent$825:
   748                           	opt stack 0
   749  000010                     ModbusCalcCRC@temp:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xF
   753  000010                     	ds	1
   754  000011                     ProcessDiary@hour:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x10
   758  000011                     	ds	1
   759  000012                     ??_ModbusValidateRequest:
   760  000012                     ProcessDiary@minute:
   761                           	opt stack 0
   762  000012                     ModbusSendTxBuffer@u16crc:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x11
   766  000012                     	ds	2
   767  000014                     ??_ModbusProcess_FC5:
   768  000014                     ??_ModbusProcess_FC15:
   769  000014                     ??_ModbusProcess_FC21:
   770  000014                     ModbusProcess_FC17@u8CopyBufferSize:
   771                           	opt stack 0
   772  000014                     ModbusProcess_FC1@regs:
   773                           	opt stack 0
   774  000014                     ModbusProcess_FC3@regs:
   775                           	opt stack 0
   776  000014                     ModbusProcess_FC6@regs:
   777                           	opt stack 0
   778  000014                     ModbusProcess_FC16@regs:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x13
   782  000014                     	ds	1
   783  000015                     ModbusProcess_FC17@i:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x14
   787  000015                     	ds	1
   788  000016                     ??_ModbusProcess_FC1:
   789  000016                     ModbusProcess_FC3@u8size:
   790                           	opt stack 0
   791  000016                     ModbusProcess_FC6@u8size:
   792                           	opt stack 0
   793  000016                     ModbusProcess_FC16@u8size:
   794                           	opt stack 0
   795  000016                     ModbusProcess_FC21@requestDataLen:
   796                           	opt stack 0
   797  000016                     ModbusValidateRequest@startAddrBytes:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x15
   801  000016                     	ds	1
   802  000017                     ??_ModbusProcess_FC3:
   803  000017                     ??_ModbusProcess_FC6:
   804  000017                     ??_ModbusProcess_FC16:
   805  000017                     ModbusProcess_FC21@u8CopyBufferSize:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x16
   809  000017                     	ds	1
   810  000018                     ModbusProcess_FC21@startAddrsBytes:
   811                           	opt stack 0
   812  000018                     years_to_days@ret:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x17
   816  000018                     	ds	1
   817  000019                     ModbusProcess_FC5@u8CopyBufferSize:
   818                           	opt stack 0
   819  000019                     ModbusProcess_FC1@u16coil:
   820                           	opt stack 0
   821  000019                     ModbusProcess_FC6@u16val:
   822                           	opt stack 0
   823  000019                     ModbusProcess_FC15@u16coil:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x18
   827  000019                     	ds	1
   828  00001A                     ModbusProcess_FC5@u16coil:
   829                           	opt stack 0
   830  00001A                     ModbusProcess_FC21@recLenBytes:
   831                           	opt stack 0
   832  00001A                     ModbusValidateRequest@recLenBytes:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x19
   836  00001A                     	ds	1
   837  00001B                     ModbusProcess_FC1@u8currentBit:
   838                           	opt stack 0
   839  00001B                     ModbusProcess_FC3@u8CopyBufferSize:
   840                           	opt stack 0
   841  00001B                     ModbusProcess_FC6@u8CopyBufferSize:
   842                           	opt stack 0
   843  00001B                     ModbusProcess_FC15@u8CopyBufferSize:
   844                           	opt stack 0
   845  00001B                     ModbusProcess_FC16@temp:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1A
   849  00001B                     	ds	1
   850  00001C                     ?_ymd_to_scalar:
   851                           	opt stack 0
   852  00001C                     ModbusProcess_FC1@u8CopyBufferSize:
   853                           	opt stack 0
   854  00001C                     ModbusProcess_FC5@u8currentBit:
   855                           	opt stack 0
   856  00001C                     ModbusProcess_FC15@bTemp:
   857                           	opt stack 0
   858  00001C                     ModbusProcess_FC21@i:
   859                           	opt stack 0
   860  00001C                     ModbusProcess_FC3@u16regsno:
   861                           	opt stack 0
   862  00001C                     ModbusProcess_FC6@u16add:
   863                           	opt stack 0
   864  00001C                     ymd_to_scalar@yr:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x1B
   868  00001C                     	ds	1
   869  00001D                     ModbusProcess_FC1@u8bytesno:
   870                           	opt stack 0
   871  00001D                     ModbusProcess_FC5@regs:
   872                           	opt stack 0
   873  00001D                     ModbusProcess_FC15@u8frameByte:
   874                           	opt stack 0
   875  00001D                     ModbusProcess_FC16@u8CopyBufferSize:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1C
   879  00001D                     	ds	1
   880  00001E                     ModbusProcess_FC3@u8StartAdd:
   881                           	opt stack 0
   882  00001E                     ModbusValidateRequest@u16MsgCRC:
   883                           	opt stack 0
   884  00001E                     ModbusProcess_FC1@u16StartCoil:
   885                           	opt stack 0
   886  00001E                     ModbusProcess_FC15@u16StartCoil:
   887                           	opt stack 0
   888  00001E                     ModbusProcess_FC16@u16StartAdd:
   889                           	opt stack 0
   890  00001E                     ymd_to_scalar@mo:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x1D
   894  00001E                     	ds	1
   895  00001F                     ModbusProcess_FC3@i:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x1E
   899  00001F                     	ds	1
   900  000020                     ModbusValidateRequest@isSupported:
   901                           	opt stack 0
   902  000020                     ModbusProcess_FC16@u8regsno:
   903                           	opt stack 0
   904  000020                     ModbusProcess_FC1@u16currentCoil:
   905                           	opt stack 0
   906  000020                     ModbusProcess_FC15@u16Coilno:
   907                           	opt stack 0
   908  000020                     ymd_to_scalar@day:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x1F
   912  000020                     	ds	1
   913  000021                     ModbusProcess_FC16@i:
   914                           	opt stack 0
   915  000021                     ModbusValidateRequest@u16count:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x20
   919  000021                     	ds	1
   920  000022                     ??_ymd_to_scalar:
   921  000022                     ModbusProcess_FC1@u8bitsno:
   922                           	opt stack 0
   923  000022                     ModbusProcess_FC15@u16currentCoil:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x21
   927  000022                     	ds	1
   928  000023                     ModbusValidateRequest@i:
   929                           	opt stack 0
   930  000023                     ModbusProcess_FC1@u16Coilno:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x22
   934  000023                     	ds	1
   935  000024                     ModbusValidateRequest@u8regs:
   936                           	opt stack 0
   937  000024                     ModbusProcess_FC15@u8currentBit:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x23
   941  000024                     	ds	1
   942  000025                     ModbusProcess_FC15@regs:
   943                           	opt stack 0
   944  000025                     ModbusValidateRequest@u16regs:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x24
   948  000025                     	ds	1
   949  000026                     ModbusProcess_FC15@u8bitsno:
   950                           	opt stack 0
   951  000026                     _ymd_to_scalar$2122:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x25
   955  000026                     	ds	1
   956  000027                     ModbusPoll@discreteInputs:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x26
   960  000027                     	ds	1
   961  000028                     ymd_to_scalar@scalar:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x27
   965  000028                     	ds	1
   966  000029                     ModbusPoll@coils:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x28
   970  000029                     	ds	1
   971  00002A                     ModbusPoll@inputRegs:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x29
   975  00002A                     	ds	2
   976  00002C                     ?_mktime:
   977                           	opt stack 0
   978  00002C                     ModbusPoll@inputRegsCount:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x2B
   982  00002C                     	ds	1
   983  00002D                     ModbusPoll@holdingRegs:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x2C
   987  00002D                     	ds	2
   988  00002F                     ModbusPoll@holdingRegsCount:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x2E
   992  00002F                     	ds	1
   993  000030                     ??_mktime:
   994  000030                     ModbusPoll@u8current:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x2F
   998  000030                     	ds	1
   999  000031                     ModbusPoll@i8state:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x30
  1003  000031                     	ds	1
  1004  000032                     ModbusPoll@u8exception:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x31
  1008  000032                     	ds	12
  1009  00003E                     mktime@tt:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0x3D
  1013  00003E                     	ds	4
  1014  000042                     mktime@timeptr:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x41
  1018  000042                     	ds	1
  1019  000043                     SetTimeFromRegs@daySec:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x42
  1023  000043                     	ds	1
  1024  000044                     SetTimeFromRegs@yearMonth:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x43
  1028  000044                     	ds	1
  1029  000045                     ??_SetTimeFromRegs:
  1030                           
  1031                           ; 1 bytes @ 0x44
  1032  000045                     	ds	2
  1033  000047                     SetTimeFromRegs@newRawTime:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x46
  1037  000047                     	ds	4
  1038  00004B                     SetTimeFromRegs@hourMin:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x4A
  1042  00004B                     	ds	1
  1043  00004C                     SetTimeFromRegs@newTime:
  1044                           	opt stack 0
  1045                           
  1046                           ; 18 bytes @ 0x4B
  1047  00004C                     	ds	18
  1048  00005E                     ??_io_poll:
  1049                           
  1050                           ; 1 bytes @ 0x5D
  1051  00005E                     	ds	4
  1052  000062                     io_poll@hourMin:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x61
  1056  000062                     	ds	2
  1057  000064                     io_poll@daySec:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x63
  1061  000064                     	ds	2
  1062  000066                     io_poll@yearMonth:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x65
  1066  000066                     	ds	2
  1067  000068                     io_poll@eventEeAddr:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x67
  1071  000068                     	ds	1
  1072  000069                     io_poll@v1:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x68
  1076  000069                     	ds	1
  1077  00006A                     io_poll@lastCommand:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x69
  1081  00006A                     	ds	1
  1082  00006B                     io_poll@lastEndAddress:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x6A
  1086  00006B                     	ds	2
  1087  00006D                     io_poll@lastAddress:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x6C
  1091  00006D                     	ds	2
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           postdec1	equ	0xFE5
  1099                           fsr1h	equ	0xFE2
  1100                           fsr1l	equ	0xFE1
  1101                           
  1102 ;;
  1103 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1104 ;;
  1105 ;; *************** function _main *****************
  1106 ;; Defined at:
  1107 ;;		line 669 in file "main.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;  minute          1   19[BANK0 ] unsigned char 
  1112 ;;  hour            1   14[BANK0 ] unsigned char 
  1113 ;;  curMs           4   15[BANK0 ] unsigned long 
  1114 ;;  oldBuzzerOnT    4    9[BANK0 ] unsigned long 
  1115 ;;  lastMs          4    5[BANK0 ] unsigned long 
  1116 ;;  oldMinute       1   13[BANK0 ] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1126 ;;      Params:         0       0       0       0       0       0       0
  1127 ;;      Locals:         0      15       0       0       0       0       0
  1128 ;;      Temps:          0       5       0       0       0       0       0
  1129 ;;      Totals:         0      20       0       0       0       0       0
  1130 ;;Total ram usage:       20 bytes
  1131 ;; Hardware stack levels required when called:    8
  1132 ;; This function calls:
  1133 ;;		_AddSecond
  1134 ;;		_ConfigureOscillator
  1135 ;;		_GetTime
  1136 ;;		_InitApp
  1137 ;;		_InitFromEeprom
  1138 ;;		_LightStatusLed
  1139 ;;		_ModbusPoll
  1140 ;;		_ProcessDiary
  1141 ;;		_ProcessLightBlock
  1142 ;;		_ResetEvent
  1143 ;;		_SetBuzzerDuty
  1144 ;;		_getHourMin
  1145 ;;		_io_poll
  1146 ;;		_millis
  1147 ;;		_pwm_init
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  001058                     __ptext0:
  1155                           	opt stack 0
  1156  001058                     _main:
  1157                           	opt stack 23
  1158                           
  1159                           ;incstack = 0
  1160  001058  FFFF               	dw	65535
  1161                           
  1162                           ;main.c: 672: ConfigureOscillator();
  1163  00105A  ECE7  F012         	call	_ConfigureOscillator	;wreg free
  1164                           
  1165                           ;main.c: 675: InitApp();
  1166  00105E  EC90  F00F         	call	_InitApp	;wreg free
  1167                           
  1168                           ;main.c: 679: InitFromEeprom();
  1169  001062  EC83  F00B         	call	_InitFromEeprom	;wreg free
  1170                           
  1171                           ;main.c: 688: unsigned long lastMs = millis();
  1172  001066  EC5A  F012         	call	_millis	;wreg free
  1173  00106A  C005  F0DE         	movff	?_millis,main@lastMs
  1174  00106E  C006  F0DF         	movff	?_millis+1,main@lastMs+1
  1175  001072  C007  F0E0         	movff	?_millis+2,main@lastMs+2
  1176  001076  C008  F0E1         	movff	?_millis+3,main@lastMs+3
  1177  00107A                     i1L__ptext1:
  1178                           	opt stack 0
  1179  00107A                     i1L_pwm_init:
  1180                           	opt stack 28
  1181                           
  1182                           ;incstack = 0
  1183  00107A  FFFF               	dw	65535
  1184  00107C                     i1Ll4404:
  1185                           	opt stack 0
  1186  00107C  FFFF               	dw	65535	; assembler added errata NOP
  1187                           
  1188                           ;main.c: 413: CCP1CONbits.CCP1M = 0x0f;
  1189  00107E  0E0F               	movlw	15
  1190  001080  12BD               	iorwf	4029,f,c	;volatile
  1191  001082                     i1Ll4406:
  1192                           	opt stack 0
  1193  001082  FFFF               	dw	65535	; assembler added errata NOP
  1194                           
  1195                           ;main.c: 418: PR2 = 255;
  1196  001084  68CB               	setf	4043,c	;volatile
  1197  001086                     i1Ll4408:
  1198                           	opt stack 0
  1199  001086  FFFF               	dw	65535	; assembler added errata NOP
  1200                           
  1201                           ;main.c: 421: T2CONbits.T2CKPS1 = 1;
  1202  001088  82CA               	bsf	4042,1,c	;volatile
  1203  00108A                     i1Ll4410:
  1204                           	opt stack 0
  1205  00108A  FFFF               	dw	65535	; assembler added errata NOP
  1206                           
  1207                           ;main.c: 422: T2CONbits.T2CKPS0 = 0;
  1208  00108C  90CA               	bcf	4042,0,c	;volatile
  1209  00108E                     i1Ll4412:
  1210                           	opt stack 0
  1211  00108E  FFFF               	dw	65535	; assembler added errata NOP
  1212                           
  1213                           ;main.c: 425: TRISCbits.RC2 = 0;
  1214  001090  9494               	bcf	3988,2,c	;volatile
  1215  001092                     i1Ll305:
  1216                           	opt stack 0
  1217  001092  FFFF               	dw	65535	; assembler added errata NOP
  1218  001094  D001               	goto	l5452
  1219  001096  FFFF               	dw	65535	; errata NOP
  1220  001098                     l5452:
  1221  001098  FFFF               	dw	65535	; assembler added errata NOP
  1222                           
  1223                           ;main.c: 697: unsigned long oldBuzzerOnTime = 0;
  1224  00109A  0100               	movlb	0	; () banked
  1225  00109C  6BE2               	clrf	main@oldBuzzerOnTime& (0+255),b
  1226  00109E  6BE3               	clrf	(main@oldBuzzerOnTime+1)& (0+255),b
  1227  0010A0  6BE4               	clrf	(main@oldBuzzerOnTime+2)& (0+255),b
  1228  0010A2  6BE5               	clrf	(main@oldBuzzerOnTime+3)& (0+255),b
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 698: uint8_t oldMinute = 0xff;
  1232  0010A4  69E6               	setf	main@oldMinute& (0+255),b
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 700: LightStatusLed(0x07, 1, 0);
  1236  0010A6  0E01               	movlw	1
  1237  0010A8  6E05               	movwf	LightStatusLed@on,c
  1238  0010AA  0E00               	movlw	0
  1239  0010AC  6E06               	movwf	LightStatusLed@blink,c
  1240  0010AE  0E07               	movlw	7
  1241  0010B0  EC03  F00C         	call	_LightStatusLed
  1242                           
  1243                           ;main.c: 701: LightStatusLed(0x05, 1, 1);
  1244  0010B4  0E01               	movlw	1
  1245  0010B6  6E05               	movwf	LightStatusLed@on,c
  1246  0010B8  6E06               	movwf	LightStatusLed@blink,c
  1247  0010BA  0E05               	movlw	5
  1248  0010BC  EC03  F00C         	call	_LightStatusLed
  1249  0010C0                     l5460:
  1250  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  1251                           
  1252                           ;main.c: 703: {
  1253                           ;main.c: 704: unsigned long curMs = millis();
  1254  0010C2  EC5A  F012         	call	_millis	;wreg free
  1255  0010C6  C005  F0E8         	movff	?_millis,main@curMs
  1256  0010CA  C006  F0E9         	movff	?_millis+1,main@curMs+1
  1257  0010CE  C007  F0EA         	movff	?_millis+2,main@curMs+2
  1258  0010D2  C008  F0EB         	movff	?_millis+3,main@curMs+3
  1259                           
  1260                           ;main.c: 705: ProcessLightBlock(&curMs);
  1261  0010D6  0EE8               	movlw	main@curMs& (0+255)
  1262  0010D8  ECB8  F004         	call	_ProcessLightBlock
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 708: if(PORTCbits.RC1 == 0)
  1266  0010DC  B282               	btfsc	3970,1,c	;volatile
  1267  0010DE  D047               	goto	l397
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 709: {
  1271                           ;main.c: 711: if(oldEventNum != 0xff)
  1272  0010E0  2879               	incf	_oldEventNum,w,c
  1273  0010E2  E003               	bz	l5470
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 712: {
  1277                           ;main.c: 713: ResetEvent(1);
  1278  0010E4  0E01               	movlw	1
  1279  0010E6  ECD3  F011         	call	_ResetEvent
  1280  0010EA                     l5470:
  1281                           
  1282                           ;main.c: 714: }
  1283                           ;main.c: 718: diffTime = curMs - oldBuzzerOnTime;
  1284  0010EA  0100               	movlb	0	; () banked
  1285  0010EC  51E2               	movf	main@oldBuzzerOnTime& (0+255),w,b
  1286  0010EE  5DE8               	subwf	main@curMs& (0+255),w,b
  1287  0010F0  6FA4               	movwf	_diffTime& (0+255),b
  1288  0010F2  51E3               	movf	(main@oldBuzzerOnTime+1)& (0+255),w,b
  1289  0010F4  59E9               	subwfb	(main@curMs+1)& (0+255),w,b
  1290  0010F6  6FA5               	movwf	(_diffTime+1)& (0+255),b
  1291  0010F8  51E4               	movf	(main@oldBuzzerOnTime+2)& (0+255),w,b
  1292  0010FA  59EA               	subwfb	(main@curMs+2)& (0+255),w,b
  1293  0010FC  6FA6               	movwf	(_diffTime+2)& (0+255),b
  1294  0010FE  51E5               	movf	(main@oldBuzzerOnTime+3)& (0+255),w,b
  1295  001100  59EB               	subwfb	(main@curMs+3)& (0+255),w,b
  1296  001102  6FA7               	movwf	(_diffTime+3)& (0+255),b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 719: if(diffTime > buzzerOnOffPeriod)
  1300  001104  51EF               	movf	_buzzerOnOffPeriod& (0+255),w,b
  1301  001106  6FD9               	movwf	??_main& (0+255),b
  1302  001108  51F0               	movf	(_buzzerOnOffPeriod+1)& (0+255),w,b
  1303  00110A  6FDA               	movwf	(??_main+1)& (0+255),b
  1304  00110C  6BDB               	clrf	(??_main+2)& (0+255),b
  1305  00110E  6BDC               	clrf	(??_main+3)& (0+255),b
  1306  001110  51A4               	movf	_diffTime& (0+255),w,b
  1307  001112  5DD9               	subwf	??_main& (0+255),w,b
  1308  001114  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1309  001116  59DA               	subwfb	(??_main+1)& (0+255),w,b
  1310  001118  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1311  00111A  59DB               	subwfb	(??_main+2)& (0+255),w,b
  1312  00111C  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1313  00111E  59DC               	subwfb	(??_main+3)& (0+255),w,b
  1314  001120  E215               	bc	l5486
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 720: {
  1318                           ;main.c: 721: SetBuzzerDuty(buzzeLoudDuration);
  1319  001122  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  1320  001126  6A06               	clrf	SetBuzzerDuty@dc+1,c
  1321  001128  EC80  F010         	call	_SetBuzzerDuty	;wreg free
  1322                           
  1323                           ;main.c: 722: PR2 = buzzerAlarmPeriod;
  1324  00112C  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  1325                           
  1326                           ;main.c: 723: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  1327  001130  9494               	bcf	3988,2,c	;volatile
  1328  001132  84CA               	bsf	4042,2,c	;volatile
  1329  001134  0E01               	movlw	1
  1330  001136  0100               	movlb	0	; () banked
  1331  001138  6FBE               	movwf	_IsBusserOn& (0+255),b
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 724: oldBuzzerOnTime = curMs;
  1335  00113A  C0E8  F0E2         	movff	main@curMs,main@oldBuzzerOnTime
  1336  00113E  C0E9  F0E3         	movff	main@curMs+1,main@oldBuzzerOnTime+1
  1337  001142  C0EA  F0E4         	movff	main@curMs+2,main@oldBuzzerOnTime+2
  1338  001146  C0EB  F0E5         	movff	main@curMs+3,main@oldBuzzerOnTime+3
  1339                           
  1340                           ;main.c: 725: }
  1341  00114A  D015               	goto	l5492
  1342  00114C                     l5486:
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 726: else if(IsBusserOn && diffTime > buzzerOnOffDuration)
  1346  00114C  51BE               	movf	_IsBusserOn& (0+255),w,b
  1347  00114E  E013               	bz	l5492
  1348                           
  1349                           ; BSR set to: 0
  1350  001150  51ED               	movf	_buzzerOnOffDuration& (0+255),w,b
  1351  001152  6FD9               	movwf	??_main& (0+255),b
  1352  001154  51EE               	movf	(_buzzerOnOffDuration+1)& (0+255),w,b
  1353  001156  6FDA               	movwf	(??_main+1)& (0+255),b
  1354  001158  6BDB               	clrf	(??_main+2)& (0+255),b
  1355  00115A  6BDC               	clrf	(??_main+3)& (0+255),b
  1356  00115C  51A4               	movf	_diffTime& (0+255),w,b
  1357  00115E  5DD9               	subwf	??_main& (0+255),w,b
  1358  001160  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1359  001162  59DA               	subwfb	(??_main+1)& (0+255),w,b
  1360  001164  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1361  001166  59DB               	subwfb	(??_main+2)& (0+255),w,b
  1362  001168  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1363  00116A  59DC               	subwfb	(??_main+3)& (0+255),w,b
  1364  00116C  E204               	bc	l5492
  1365  00116E                     l397:
  1366  00116E  FFFF               	dw	65535	; assembler added errata NOP
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 732: else
  1370                           ;main.c: 733: {
  1371                           ;main.c: 734: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  1372  001170  94CA               	bcf	4042,2,c	;volatile
  1373  001172  8494               	bsf	3988,2,c	;volatile
  1374  001174  6BBE               	clrf	_IsBusserOn& (0+255),b
  1375  001176                     l5492:
  1376  001176  FFFF               	dw	65535	; assembler added errata NOP
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 735: }
  1380                           ;main.c: 738: if(curMs - lastMs >= 1000)
  1381  001178  51DE               	movf	main@lastMs& (0+255),w,b
  1382  00117A  5DE8               	subwf	main@curMs& (0+255),w,b
  1383  00117C  6FD9               	movwf	??_main& (0+255),b
  1384  00117E  51DF               	movf	(main@lastMs+1)& (0+255),w,b
  1385  001180  59E9               	subwfb	(main@curMs+1)& (0+255),w,b
  1386  001182  6FDA               	movwf	(??_main+1)& (0+255),b
  1387  001184  51E0               	movf	(main@lastMs+2)& (0+255),w,b
  1388  001186  59EA               	subwfb	(main@curMs+2)& (0+255),w,b
  1389  001188  6FDB               	movwf	(??_main+2)& (0+255),b
  1390  00118A  51E1               	movf	(main@lastMs+3)& (0+255),w,b
  1391  00118C  59EB               	subwfb	(main@curMs+3)& (0+255),w,b
  1392  00118E  6FDC               	movwf	(??_main+3)& (0+255),b
  1393  001190  51DC               	movf	(??_main+3)& (0+255),w,b
  1394  001192  11DB               	iorwf	(??_main+2)& (0+255),w,b
  1395  001194  E105               	bnz	u5300
  1396  001196  0EE8               	movlw	232
  1397  001198  5DD9               	subwf	??_main& (0+255),w,b
  1398  00119A  0E03               	movlw	3
  1399  00119C  59DA               	subwfb	(??_main+1)& (0+255),w,b
  1400  00119E  E34A               	bnc	l5522
  1401  0011A0                     u5300:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;main.c: 739: {
  1405                           ;main.c: 740: AddSecond();
  1406  0011A0  ECD0  F012         	call	_AddSecond	;wreg free
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;main.c: 742: if(oldEventNum != 0xff && *GetTime() >= eventResetSecond)
  1410  0011A4  2879               	incf	_oldEventNum,w,c
  1411  0011A6  E015               	bz	l5502
  1412                           
  1413                           ; BSR set to: 0
  1414  0011A8  ECDF  F012         	call	_GetTime	;wreg free
  1415  0011AC  6ED9               	movwf	fsr2l,c
  1416  0011AE  6ADA               	clrf	fsr2h,c
  1417  0011B0  0100               	movlb	0	; () banked
  1418  0011B2  51A8               	movf	_eventResetSecond& (0+255),w,b
  1419  0011B4  5CDE               	subwf	postinc2,w,c
  1420  0011B6  51A9               	movf	(_eventResetSecond+1)& (0+255),w,b
  1421  0011B8  58DE               	subwfb	postinc2,w,c
  1422  0011BA  51AA               	movf	(_eventResetSecond+2)& (0+255),w,b
  1423  0011BC  58DE               	subwfb	postinc2,w,c
  1424  0011BE  50DE               	movf	postinc2,w,c
  1425  0011C0  0A80               	xorlw	128
  1426  0011C2  6FDD               	movwf	(??_main+4)& (0+255),b
  1427  0011C4  51AB               	movf	(_eventResetSecond+3)& (0+255),w,b
  1428  0011C6  0A80               	xorlw	128
  1429  0011C8  59DD               	subwfb	(??_main+4)& (0+255),w,b
  1430  0011CA  E303               	bnc	l5502
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 743: {
  1434                           ;main.c: 744: ResetEvent(0);
  1435  0011CC  0E00               	movlw	0
  1436  0011CE  ECD3  F011         	call	_ResetEvent
  1437  0011D2                     l5502:
  1438                           
  1439                           ;main.c: 745: }
  1440                           ;main.c: 747: _MODBUSInputRegs[5] = *GetTime();
  1441  0011D2  ECDF  F012         	call	_GetTime	;wreg free
  1442  0011D6  6ED9               	movwf	fsr2l,c
  1443  0011D8  6ADA               	clrf	fsr2h,c
  1444  0011DA  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1445  0011DE  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1446                           
  1447                           ;main.c: 748: uint8_t hour = 0, minute = 0;
  1448  0011E2  0100               	movlb	0	; () banked
  1449  0011E4  6BE7               	clrf	main@hour& (0+255),b
  1450                           
  1451                           ; BSR set to: 0
  1452  0011E6  6BEC               	clrf	main@minute& (0+255),b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;main.c: 750: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1456  0011E8  0EEC               	movlw	low main@minute
  1457  0011EA  6E05               	movwf	getHourMin@min,c
  1458  0011EC  0EE7               	movlw	main@hour& (0+255)
  1459  0011EE  EC44  F012         	call	_getHourMin
  1460  0011F2  0900               	iorlw	0
  1461  0011F4  E00F               	bz	l5518
  1462  0011F6  0100               	movlb	0	; () banked
  1463  0011F8  51EC               	movf	main@minute& (0+255),w,b
  1464  0011FA  19E6               	xorwf	main@oldMinute& (0+255),w,b
  1465  0011FC  E00B               	bz	l5518
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 751: {
  1469                           ;main.c: 752: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1470  0011FE  51E7               	movf	main@hour& (0+255),w,b
  1471  001200  6FD9               	movwf	??_main& (0+255),b
  1472  001202  51EC               	movf	main@minute& (0+255),w,b
  1473  001204  0101               	movlb	1	; () banked
  1474  001206  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1475  001208  C0D9  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1476                           
  1477                           ; BSR set to: 1
  1478                           ;main.c: 753: oldMinute = minute;
  1479  00120C  C0EC  F0E6         	movff	main@minute,main@oldMinute
  1480                           
  1481                           ; BSR set to: 1
  1482                           ;main.c: 754: ProcessDiary();
  1483  001210  EC47  F00D         	call	_ProcessDiary	;wreg free
  1484  001214                     l5518:
  1485                           
  1486                           ;main.c: 755: }
  1487                           ;main.c: 757: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1488  001214  0100               	movlb	0	; () banked
  1489  001216  51E7               	movf	main@hour& (0+255),w,b
  1490  001218  6FD9               	movwf	??_main& (0+255),b
  1491  00121A  51EC               	movf	main@minute& (0+255),w,b
  1492  00121C  0101               	movlb	1	; () banked
  1493  00121E  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1494  001220  C0D9  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1495                           
  1496                           ; BSR set to: 1
  1497                           ;main.c: 759: lastMs = curMs;
  1498  001224  C0E8  F0DE         	movff	main@curMs,main@lastMs
  1499  001228  C0E9  F0DF         	movff	main@curMs+1,main@lastMs+1
  1500  00122C  C0EA  F0E0         	movff	main@curMs+2,main@lastMs+2
  1501  001230  C0EB  F0E1         	movff	main@curMs+3,main@lastMs+3
  1502  001234                     l5522:
  1503                           
  1504                           ;main.c: 761: }
  1505                           ;main.c: 762: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1506  001234  C0B4  F027         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1507  001238  C0B5  F028         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1508  00123C  0ED6               	movlw	low __MODBUSCoils
  1509  00123E  6E29               	movwf	ModbusPoll@coils,c
  1510  001240  0EAA               	movlw	low __MODBUSInputRegs
  1511  001242  6E2A               	movwf	ModbusPoll@inputRegs,c
  1512  001244  0E01               	movlw	high __MODBUSInputRegs
  1513  001246  6E2B               	movwf	ModbusPoll@inputRegs+1,c
  1514  001248  0E0F               	movlw	15
  1515  00124A  6E2C               	movwf	ModbusPoll@inputRegsCount,c
  1516  00124C  0E8C               	movlw	low __MODBUSHoldingRegs
  1517  00124E  6E2D               	movwf	ModbusPoll@holdingRegs,c
  1518  001250  0E01               	movlw	high __MODBUSHoldingRegs
  1519  001252  6E2E               	movwf	ModbusPoll@holdingRegs+1,c
  1520  001254  0E0F               	movlw	15
  1521  001256  6E2F               	movwf	ModbusPoll@holdingRegsCount,c
  1522  001258  EC31  F009         	call	_ModbusPoll	;wreg free
  1523                           
  1524                           ;main.c: 763: io_poll();
  1525  00125C  EC18  F000         	call	_io_poll	;wreg free
  1526  001260  D72F               	goto	l5460
  1527  001262                     __end_of_main:
  1528                           	opt stack 0
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1h	equ	0xFE2
  1537                           fsr1l	equ	0xFE1
  1538                           postinc2	equ	0xFDE
  1539                           postdec2	equ	0xFDD
  1540                           fsr2h	equ	0xFDA
  1541                           fsr2l	equ	0xFD9
  1542                           
  1543 ;; *************** function _pwm_init *****************
  1544 ;; Defined at:
  1545 ;;		line 401 in file "main.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    2
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text1
  1574  000000                     __ptext1:
  1575                           	opt stack 0
  1576  000000                     _pwm_init:
  1577                           	opt stack 0
  1578  000000                     __end_of_pwm_init:
  1579                           	opt stack 0
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1h	equ	0xFE2
  1588                           fsr1l	equ	0xFE1
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           
  1594 ;; *************** function _io_poll *****************
  1595 ;; Defined at:
  1596 ;;		line 786 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  eventEeAddr     1  103[COMRAM] unsigned char 
  1601 ;;  yearMonth       2  101[COMRAM] unsigned int 
  1602 ;;  daySec          2   99[COMRAM] unsigned int 
  1603 ;;  hourMin         2   97[COMRAM] unsigned int 
  1604 ;;  lastAddress     2  108[COMRAM] unsigned int 
  1605 ;;  lastEndAddre    2  106[COMRAM] unsigned int 
  1606 ;;  lastCommand     1  105[COMRAM] PTR enum E2336
  1607 ;;		 -> _lastCommand(1), 
  1608 ;;  v1              1  104[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         0       0       0       0       0       0       0
  1619 ;;      Locals:        13       0       0       0       0       0       0
  1620 ;;      Temps:          4       0       0       0       0       0       0
  1621 ;;      Totals:        17       0       0       0       0       0       0
  1622 ;;Total ram usage:       17 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    7
  1625 ;; This function calls:
  1626 ;;		_InitFromEeprom
  1627 ;;		_LightLed
  1628 ;;		_ModbusGetLastCommand
  1629 ;;		_SetBuzzerDuty
  1630 ;;		_SetTimeFromRegs
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text2
  1637  000030                     __ptext2:
  1638                           	opt stack 0
  1639  000030                     _io_poll:
  1640                           	opt stack 23
  1641                           
  1642                           ;incstack = 0
  1643  000030  FFFF               	dw	65535
  1644                           
  1645                           ;main.c: 788: uint16_t lastAddress;
  1646                           ;main.c: 789: uint16_t lastEndAddress;
  1647                           ;main.c: 791: MODBUS_COMMANDS_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastE
      +                          ndAddress);
  1648  000032  0E6B               	movlw	low io_poll@lastEndAddress
  1649  000034  6E05               	movwf	ModbusGetLastCommand@count,c
  1650  000036  0E6D               	movlw	io_poll@lastAddress& (0+255)
  1651  000038  EC2D  F012         	call	_ModbusGetLastCommand
  1652  00003C  6E6A               	movwf	io_poll@lastCommand,c
  1653                           
  1654                           ;main.c: 792: if(*lastCommand == MODBUS_COM_NONE)
  1655  00003E  506A               	movf	io_poll@lastCommand,w,c
  1656  000040  6ED9               	movwf	fsr2l,c
  1657  000042  6ADA               	clrf	fsr2h,c
  1658  000044  50DF               	movf	indf2,w,c
  1659  000046  E101 D307          	bz	l415
  1660                           
  1661                           ;main.c: 795: lastEndAddress += lastAddress - 1;
  1662  00004A  685E               	setf	??_io_poll& (0+255),c
  1663  00004C  685F               	setf	(??_io_poll+1)& (0+255),c
  1664  00004E  C06D  F060         	movff	io_poll@lastAddress,??_io_poll+2
  1665  000052  C06E  F061         	movff	io_poll@lastAddress+1,??_io_poll+3
  1666  000056  505E               	movf	??_io_poll,w,c
  1667  000058  2660               	addwf	??_io_poll+2,f,c
  1668  00005A  505F               	movf	??_io_poll+1,w,c
  1669  00005C  2261               	addwfc	??_io_poll+3,f,c
  1670  00005E  5060               	movf	??_io_poll+2,w,c
  1671  000060  266B               	addwf	io_poll@lastEndAddress,f,c
  1672  000062  5061               	movf	??_io_poll+3,w,c
  1673  000064  226C               	addwfc	io_poll@lastEndAddress+1,f,c
  1674                           
  1675                           ;main.c: 797: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_COIL || *lastCommand == MODBUS_
      +                          COM_WRITE_MULTIPLE_COILS)
  1676  000066  506A               	movf	io_poll@lastCommand,w,c
  1677  000068  6ED9               	movwf	fsr2l,c
  1678  00006A  6ADA               	clrf	fsr2h,c
  1679  00006C  0E05               	movlw	5
  1680  00006E  18DE               	xorwf	postinc2,w,c
  1681  000070  E006               	bz	l4792
  1682  000072  506A               	movf	io_poll@lastCommand,w,c
  1683  000074  6ED9               	movwf	fsr2l,c
  1684  000076  6ADA               	clrf	fsr2h,c
  1685  000078  0E0F               	movlw	15
  1686  00007A  18DE               	xorwf	postinc2,w,c
  1687  00007C  E13C               	bnz	l4812
  1688  00007E                     l4792:
  1689                           
  1690                           ;main.c: 798: {
  1691                           ;main.c: 799: if ((0x0f >= lastAddress && 0x0f <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x0f)) & 0x01))
  1692  00007E  506E               	movf	io_poll@lastAddress+1,w,c
  1693  000080  E118               	bnz	l4800
  1694  000082  0E10               	movlw	16
  1695  000084  5C6D               	subwf	io_poll@lastAddress,w,c
  1696  000086  E215               	bc	l4800
  1697  000088  506C               	movf	io_poll@lastEndAddress+1,w,c
  1698  00008A  E103               	bnz	u4130
  1699  00008C  0E0F               	movlw	15
  1700  00008E  5C6B               	subwf	io_poll@lastEndAddress,w,c
  1701  000090  E310               	bnc	l4800
  1702  000092                     u4130:
  1703  000092  C0D6  F05E         	movff	__MODBUSCoils,??_io_poll
  1704  000096  C0D7  F05F         	movff	__MODBUSCoils+1,??_io_poll+1
  1705  00009A  0E0F               	movlw	15
  1706  00009C  6E60               	movwf	(??_io_poll+2)& (0+255),c
  1707  00009E                     u4145:
  1708  00009E  FFFF               	dw	65535	; assembler added errata NOP
  1709  0000A0  90D8               	bcf	status,0,c
  1710  0000A2  325F               	rrcf	??_io_poll+1,f,c
  1711  0000A4  325E               	rrcf	??_io_poll,f,c
  1712  0000A6  2E60               	decfsz	(??_io_poll+2)& (0+255),f,c
  1713  0000A8  D7FA               	goto	u4145
  1714  0000AA  A05E               	btfss	??_io_poll,0,c
  1715  0000AC  D002               	goto	l4800
  1716  0000AE  00FF               	reset		; ;# 
  1717                           
  1718                           ;main.c: 804: return;
  1719  0000B0  D2D3               	goto	l415
  1720  0000B2                     l4800:
  1721  0000B2  FFFF               	dw	65535	; assembler added errata NOP
  1722                           
  1723                           ;main.c: 805: }
  1724                           ;main.c: 806: if ((0x09 >= lastAddress && 0x09 <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x09)) & 0x01))
  1725  0000B4  506E               	movf	io_poll@lastAddress+1,w,c
  1726  0000B6  E103               	bnz	u4161
  1727  0000B8  0E0A               	movlw	10
  1728  0000BA  5C6D               	subwf	io_poll@lastAddress,w,c
  1729  0000BC  B0D8               	btfsc	status,0,c
  1730  0000BE                     u4161:
  1731  0000BE  D2CC               	goto	l415
  1732  0000C0  506C               	movf	io_poll@lastEndAddress+1,w,c
  1733  0000C2  E104               	bnz	u4170
  1734  0000C4  0E09               	movlw	9
  1735  0000C6  5C6B               	subwf	io_poll@lastEndAddress,w,c
  1736  0000C8  E201 D2C6          	bnc	l415
  1737  0000CC                     u4170:
  1738  0000CC  C0D6  F05E         	movff	__MODBUSCoils,??_io_poll
  1739  0000D0  C0D7  F05F         	movff	__MODBUSCoils+1,??_io_poll+1
  1740  0000D4  0E09               	movlw	9
  1741  0000D6  6E60               	movwf	(??_io_poll+2)& (0+255),c
  1742  0000D8                     u4185:
  1743  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  1744  0000DA  90D8               	bcf	status,0,c
  1745  0000DC  325F               	rrcf	??_io_poll+1,f,c
  1746  0000DE  325E               	rrcf	??_io_poll,f,c
  1747  0000E0  2E60               	decfsz	(??_io_poll+2)& (0+255),f,c
  1748  0000E2  D7FA               	goto	u4185
  1749  0000E4  A05E               	btfss	??_io_poll,0,c
  1750  0000E6  D2B8               	goto	l415
  1751                           
  1752                           ;main.c: 807: {
  1753                           ;main.c: 808: eventCount = 0;
  1754  0000E8  6A75               	clrf	_eventCount,c
  1755  0000EA                     l4808:
  1756  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  1757                           
  1758                           ;main.c: 809: _MODBUSInputRegs[0] = 0x8080;
  1759  0000EC  0E80               	movlw	128
  1760  0000EE  0101               	movlb	1	; () banked
  1761  0000F0  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1762  0000F2  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  1763  0000F4  D2B1               	goto	l415
  1764  0000F6                     l4812:
  1765                           
  1766                           ;main.c: 813: }
  1767                           ;main.c: 814: uint8_t v1;
  1768                           ;main.c: 815: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_REGISTER || *lastCommand == MOD
      +                          BUS_COM_WRITE_MULTIPLE_REGISTERS)
  1769  0000F6  506A               	movf	io_poll@lastCommand,w,c
  1770  0000F8  6ED9               	movwf	fsr2l,c
  1771  0000FA  6ADA               	clrf	fsr2h,c
  1772  0000FC  0E06               	movlw	6
  1773  0000FE  18DE               	xorwf	postinc2,w,c
  1774  000100  E007               	bz	l4816
  1775  000102  506A               	movf	io_poll@lastCommand,w,c
  1776  000104  6ED9               	movwf	fsr2l,c
  1777  000106  6ADA               	clrf	fsr2h,c
  1778  000108  0E10               	movlw	16
  1779  00010A  18DE               	xorwf	postinc2,w,c
  1780  00010C  E001 D29B          	bnz	l5296
  1781  000110                     l4816:
  1782                           
  1783                           ;main.c: 816: {
  1784                           ;main.c: 818: if((13 >= lastAddress && 13 <= lastEndAddress) && _MODBUSHoldingRegs[13] >
      +                           0)
  1785  000110  506E               	movf	io_poll@lastAddress+1,w,c
  1786  000112  E168               	bnz	l4888
  1787  000114  0E0E               	movlw	14
  1788  000116  5C6D               	subwf	io_poll@lastAddress,w,c
  1789  000118  E265               	bc	l4888
  1790  00011A  506C               	movf	io_poll@lastEndAddress+1,w,c
  1791  00011C  E103               	bnz	u4230
  1792  00011E  0E0D               	movlw	13
  1793  000120  5C6B               	subwf	io_poll@lastEndAddress,w,c
  1794  000122  E360               	bnc	l4888
  1795  000124                     u4230:
  1796  000124  0101               	movlb	1	; () banked
  1797  000126  51A6               	movf	(__MODBUSHoldingRegs+26)& (0+255),w,b
  1798  000128  11A7               	iorwf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  1799  00012A  E05C               	bz	l4888
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 819: {
  1803                           ;main.c: 820: if(eventCount < 60)
  1804  00012C  0E3C               	movlw	60
  1805  00012E  6075               	cpfslt	_eventCount,c
  1806  000130  D055               	goto	l4886
  1807                           
  1808                           ; BSR set to: 1
  1809                           ;main.c: 821: {
  1810                           ;main.c: 822: uint8_t eventEeAddr = 18 + 1 + (eventCount << 1);
  1811  000132  5075               	movf	_eventCount,w,c
  1812  000134  0D02               	mullw	2
  1813  000136  50F3               	movf	prodl,w,c
  1814  000138  0F13               	addlw	19
  1815  00013A  6E68               	movwf	io_poll@eventEeAddr,c
  1816                           
  1817                           ; BSR set to: 1
  1818                           ;main.c: 823: v1 = ((unsigned char)(((_MODBUSHoldingRegs[13])>>8)&0xFF));
  1819  00013C  51A7               	movf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  1820  00013E  6E69               	movwf	io_poll@v1,c
  1821  000140                     l427:
  1822  000140  FFFF               	dw	65535	; assembler added errata NOP
  1823  000142  B2A6               	btfsc	4006,1,c	;volatile
  1824  000144  D7FD               	goto	l427
  1825  000146  C068  FFA9         	movff	io_poll@eventEeAddr,4009	;volatile
  1826  00014A  C069  FFA8         	movff	io_poll@v1,4008	;volatile
  1827  00014E  90D8               	bcf	status,0,c	;volatile
  1828  000150  BEF2               	btfsc	intcon,7,c	;volatile
  1829  000152  80D8               	bsf	status,0,c	;volatile
  1830  000154  9EF2               	bcf	intcon,7,c	;volatile
  1831  000156  84A6               	bsf	4006,2,c	;volatile
  1832  000158  0E55               	movlw	85
  1833  00015A  6EA7               	movwf	4007,c	;volatile
  1834  00015C  0EAA               	movlw	170
  1835  00015E  6EA7               	movwf	4007,c	;volatile
  1836  000160  82A6               	bsf	4006,1,c	;volatile
  1837  000162  94A6               	bcf	4006,2,c	;volatile
  1838  000164  E301               	bnc	l432
  1839  000166  8EF2               	bsf	intcon,7,c	;volatile
  1840  000168                     l432:
  1841                           
  1842                           ;main.c: 825: v1 = ((unsigned char)((_MODBUSHoldingRegs[13])&0xFF));
  1843  000168  C1A6  F069         	movff	__MODBUSHoldingRegs+26,io_poll@v1
  1844  00016C                     l434:
  1845  00016C  FFFF               	dw	65535	; assembler added errata NOP
  1846  00016E  B2A6               	btfsc	4006,1,c	;volatile
  1847  000170  D7FD               	goto	l434
  1848  000172  2868               	incf	io_poll@eventEeAddr,w,c
  1849  000174  6EA9               	movwf	4009,c	;volatile
  1850  000176  C069  FFA8         	movff	io_poll@v1,4008	;volatile
  1851  00017A  90D8               	bcf	status,0,c	;volatile
  1852  00017C  BEF2               	btfsc	intcon,7,c	;volatile
  1853  00017E  80D8               	bsf	status,0,c	;volatile
  1854  000180  9EF2               	bcf	intcon,7,c	;volatile
  1855  000182  84A6               	bsf	4006,2,c	;volatile
  1856  000184  0E55               	movlw	85
  1857  000186  6EA7               	movwf	4007,c	;volatile
  1858  000188  0EAA               	movlw	170
  1859  00018A  6EA7               	movwf	4007,c	;volatile
  1860  00018C  82A6               	bsf	4006,1,c	;volatile
  1861  00018E  94A6               	bcf	4006,2,c	;volatile
  1862  000190  E301               	bnc	l439
  1863  000192  8EF2               	bsf	intcon,7,c	;volatile
  1864  000194                     l439:
  1865                           
  1866                           ;main.c: 828: _MODBUSHoldingRegs[13] = 0;
  1867  000194  0101               	movlb	1	; () banked
  1868  000196  6BA6               	clrf	(__MODBUSHoldingRegs+26)& (0+255),b
  1869  000198  6BA7               	clrf	(__MODBUSHoldingRegs+27)& (0+255),b
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;main.c: 830: LightLed(eventCount, LED_GREEN, 0);
  1873  00019A  0E01               	movlw	1
  1874  00019C  6E05               	movwf	LightLed@ledState,c
  1875  00019E  0E00               	movlw	0
  1876  0001A0  6E06               	movwf	LightLed@blink,c
  1877  0001A2  5075               	movf	_eventCount,w,c
  1878  0001A4  ECF1  F005         	call	_LightLed
  1879                           
  1880                           ;main.c: 832: eventCount++;
  1881  0001A8  2A75               	incf	_eventCount,f,c
  1882  0001AA                     l441:
  1883  0001AA  FFFF               	dw	65535	; assembler added errata NOP
  1884  0001AC  B2A6               	btfsc	4006,1,c	;volatile
  1885  0001AE  D7FD               	goto	l441
  1886  0001B0  0E12               	movlw	18
  1887  0001B2  6EA9               	movwf	4009,c	;volatile
  1888  0001B4  C075  FFA8         	movff	_eventCount,4008	;volatile
  1889  0001B8  90D8               	bcf	status,0,c	;volatile
  1890  0001BA  BEF2               	btfsc	intcon,7,c	;volatile
  1891  0001BC  80D8               	bsf	status,0,c	;volatile
  1892  0001BE  9EF2               	bcf	intcon,7,c	;volatile
  1893  0001C0  84A6               	bsf	4006,2,c	;volatile
  1894  0001C2  0E55               	movlw	85
  1895  0001C4  6EA7               	movwf	4007,c	;volatile
  1896  0001C6  0EAA               	movlw	170
  1897  0001C8  6EA7               	movwf	4007,c	;volatile
  1898  0001CA  82A6               	bsf	4006,1,c	;volatile
  1899  0001CC  94A6               	bcf	4006,2,c	;volatile
  1900  0001CE  E301               	bnc	l4884
  1901  0001D0  8EF2               	bsf	intcon,7,c	;volatile
  1902  0001D2                     l4884:
  1903                           
  1904                           ;main.c: 835: _MODBUSInputRegs[0] = 0x8080;
  1905  0001D2  0E80               	movlw	128
  1906  0001D4  0101               	movlb	1	; () banked
  1907  0001D6  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1908  0001D8  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  1909                           
  1910                           ;main.c: 836: }
  1911  0001DA  D004               	goto	l4888
  1912  0001DC                     l4886:
  1913  0001DC  FFFF               	dw	65535	; assembler added errata NOP
  1914                           
  1915                           ; BSR set to: 1
  1916                           ;main.c: 837: else
  1917                           ;main.c: 838: _MODBUSInputRegs[0] = 0x0100;
  1918  0001DE  0E01               	movlw	1
  1919  0001E0  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1920  0001E2  6BAA               	clrf	__MODBUSInputRegs& (0+255),b
  1921  0001E4                     l4888:
  1922  0001E4  FFFF               	dw	65535	; assembler added errata NOP
  1923                           
  1924                           ;main.c: 839: }
  1925                           ;main.c: 842: if((0 >= lastAddress && 0 <= lastEndAddress) && _MODBUSHoldingRegs[0] > 0)
  1926  0001E6  506D               	movf	io_poll@lastAddress,w,c
  1927  0001E8  106E               	iorwf	io_poll@lastAddress+1,w,c
  1928  0001EA  E117               	bnz	l4900
  1929  0001EC  0101               	movlb	1	; () banked
  1930  0001EE  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1931  0001F0  118D               	iorwf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  1932  0001F2  E013               	bz	l4900
  1933                           
  1934                           ; BSR set to: 1
  1935                           ;main.c: 843: {
  1936                           ;main.c: 844: v1 = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  1937  0001F4  C18C  F069         	movff	__MODBUSHoldingRegs,io_poll@v1
  1938                           
  1939                           ; BSR set to: 1
  1940                           ;main.c: 846: LightLed(((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1941  0001F8  5069               	movf	io_poll@v1,w,c
  1942  0001FA  0B03               	andlw	3
  1943  0001FC  6E05               	movwf	LightLed@ledState,c
  1944  0001FE  4069               	rrncf	io_poll@v1,w,c
  1945  000200  42E8               	rrncf	wreg,f,c
  1946  000202  0B3F               	andlw	63
  1947  000204  0B01               	andlw	1
  1948  000206  6E06               	movwf	LightLed@blink,c
  1949  000208  518D               	movf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  1950  00020A  ECF1  F005         	call	_LightLed
  1951                           
  1952                           ;main.c: 847: _MODBUSHoldingRegs[0] = 0;
  1953  00020E  0101               	movlb	1	; () banked
  1954  000210  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1955  000212  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1956                           
  1957                           ; BSR set to: 1
  1958                           ;main.c: 848: _MODBUSInputRegs[0] = 0x8080;
  1959  000214  0E80               	movlw	128
  1960  000216  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1961  000218  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  1962  00021A                     l4900:
  1963                           
  1964                           ;main.c: 849: }
  1965                           ;main.c: 850: if((1 >= lastAddress && 1 <= lastEndAddress)) { buzzeLoudDuration = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (2)
      +                          ; EEDATA = (buzzeLoudDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  1966  00021A  506E               	movf	io_poll@lastAddress+1,w,c
  1967  00021C  E137               	bnz	l4948
  1968  00021E  0E02               	movlw	2
  1969  000220  5C6D               	subwf	io_poll@lastAddress,w,c
  1970  000222  E234               	bc	l4948
  1971  000224  506B               	movf	io_poll@lastEndAddress,w,c
  1972  000226  106C               	iorwf	io_poll@lastEndAddress+1,w,c
  1973  000228  E031               	bz	l4948
  1974  00022A  0101               	movlb	1	; () banked
  1975  00022C  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1976  00022E  6E73               	movwf	_buzzeLoudDuration,c
  1977  000230                     l451:
  1978  000230  FFFF               	dw	65535	; assembler added errata NOP
  1979  000232  B2A6               	btfsc	4006,1,c	;volatile
  1980  000234  D7FD               	goto	l451
  1981  000236  0E02               	movlw	2
  1982  000238  6EA9               	movwf	4009,c	;volatile
  1983  00023A  C073  FFA8         	movff	_buzzeLoudDuration,4008	;volatile
  1984  00023E  90D8               	bcf	status,0,c	;volatile
  1985  000240  BEF2               	btfsc	intcon,7,c	;volatile
  1986  000242  80D8               	bsf	status,0,c	;volatile
  1987  000244  9EF2               	bcf	intcon,7,c	;volatile
  1988  000246  84A6               	bsf	4006,2,c	;volatile
  1989  000248  0E55               	movlw	85
  1990  00024A  6EA7               	movwf	4007,c	;volatile
  1991  00024C  0EAA               	movlw	170
  1992  00024E  6EA7               	movwf	4007,c	;volatile
  1993  000250  82A6               	bsf	4006,1,c	;volatile
  1994  000252  94A6               	bcf	4006,2,c	;volatile
  1995  000254  E301               	bnc	l456
  1996  000256  8EF2               	bsf	intcon,7,c	;volatile
  1997  000258                     l456:
  1998  000258  C18E  F0C6         	movff	__MODBUSHoldingRegs+2,_buzzeQuietDuration
  1999  00025C                     l458:
  2000  00025C  FFFF               	dw	65535	; assembler added errata NOP
  2001  00025E  B2A6               	btfsc	4006,1,c	;volatile
  2002  000260  D7FD               	goto	l458
  2003  000262  0E03               	movlw	3
  2004  000264  6EA9               	movwf	4009,c	;volatile
  2005  000266  C0C6  FFA8         	movff	_buzzeQuietDuration,4008	;volatile
  2006  00026A  90D8               	bcf	status,0,c	;volatile
  2007  00026C  BEF2               	btfsc	intcon,7,c	;volatile
  2008  00026E  80D8               	bsf	status,0,c	;volatile
  2009  000270  9EF2               	bcf	intcon,7,c	;volatile
  2010  000272  84A6               	bsf	4006,2,c	;volatile
  2011  000274  0E55               	movlw	85
  2012  000276  6EA7               	movwf	4007,c	;volatile
  2013  000278  0EAA               	movlw	170
  2014  00027A  6EA7               	movwf	4007,c	;volatile
  2015  00027C  82A6               	bsf	4006,1,c	;volatile
  2016  00027E  94A6               	bcf	4006,2,c	;volatile
  2017  000280  E301               	bnc	l4946
  2018  000282  8EF2               	bsf	intcon,7,c	;volatile
  2019  000284                     l4946:
  2020  000284  0E80               	movlw	128
  2021  000286  0101               	movlb	1	; () banked
  2022  000288  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2023  00028A  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2024  00028C                     l4948:
  2025                           
  2026                           ;main.c: 851: if((2 >= lastAddress && 2 <= lastEndAddress)) { buzzerInfoPeriod = ((unsig
      +                          ned char)(((_MODBUSHoldingRegs[2])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (4);
      +                           EEDATA = (buzzerInfoPeriod); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN 
  2027  00028C  506E               	movf	io_poll@lastAddress+1,w,c
  2028  00028E  E13A               	bnz	l4996
  2029  000290  0E03               	movlw	3
  2030  000292  5C6D               	subwf	io_poll@lastAddress,w,c
  2031  000294  E237               	bc	l4996
  2032  000296  506C               	movf	io_poll@lastEndAddress+1,w,c
  2033  000298  E103               	bnz	u4460
  2034  00029A  0E02               	movlw	2
  2035  00029C  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2036  00029E  E332               	bnc	l4996
  2037  0002A0                     u4460:
  2038  0002A0  0101               	movlb	1	; () banked
  2039  0002A2  5191               	movf	(__MODBUSHoldingRegs+5)& (0+255),w,b
  2040  0002A4  0100               	movlb	0	; () banked
  2041  0002A6  6FC7               	movwf	_buzzerInfoPeriod& (0+255),b
  2042  0002A8                     l466:
  2043  0002A8  FFFF               	dw	65535	; assembler added errata NOP
  2044  0002AA  B2A6               	btfsc	4006,1,c	;volatile
  2045  0002AC  D7FD               	goto	l466
  2046  0002AE  0E04               	movlw	4
  2047  0002B0  6EA9               	movwf	4009,c	;volatile
  2048  0002B2  C0C7  FFA8         	movff	_buzzerInfoPeriod,4008	;volatile
  2049  0002B6  90D8               	bcf	status,0,c	;volatile
  2050  0002B8  BEF2               	btfsc	intcon,7,c	;volatile
  2051  0002BA  80D8               	bsf	status,0,c	;volatile
  2052  0002BC  9EF2               	bcf	intcon,7,c	;volatile
  2053  0002BE  84A6               	bsf	4006,2,c	;volatile
  2054  0002C0  0E55               	movlw	85
  2055  0002C2  6EA7               	movwf	4007,c	;volatile
  2056  0002C4  0EAA               	movlw	170
  2057  0002C6  6EA7               	movwf	4007,c	;volatile
  2058  0002C8  82A6               	bsf	4006,1,c	;volatile
  2059  0002CA  94A6               	bcf	4006,2,c	;volatile
  2060  0002CC  E301               	bnc	l471
  2061  0002CE  8EF2               	bsf	intcon,7,c	;volatile
  2062  0002D0                     l471:
  2063  0002D0  C190  F074         	movff	__MODBUSHoldingRegs+4,_buzzerAlarmPeriod
  2064  0002D4                     l473:
  2065  0002D4  FFFF               	dw	65535	; assembler added errata NOP
  2066  0002D6  B2A6               	btfsc	4006,1,c	;volatile
  2067  0002D8  D7FD               	goto	l473
  2068  0002DA  0E05               	movlw	5
  2069  0002DC  6EA9               	movwf	4009,c	;volatile
  2070  0002DE  C074  FFA8         	movff	_buzzerAlarmPeriod,4008	;volatile
  2071  0002E2  90D8               	bcf	status,0,c	;volatile
  2072  0002E4  BEF2               	btfsc	intcon,7,c	;volatile
  2073  0002E6  80D8               	bsf	status,0,c	;volatile
  2074  0002E8  9EF2               	bcf	intcon,7,c	;volatile
  2075  0002EA  84A6               	bsf	4006,2,c	;volatile
  2076  0002EC  0E55               	movlw	85
  2077  0002EE  6EA7               	movwf	4007,c	;volatile
  2078  0002F0  0EAA               	movlw	170
  2079  0002F2  6EA7               	movwf	4007,c	;volatile
  2080  0002F4  82A6               	bsf	4006,1,c	;volatile
  2081  0002F6  94A6               	bcf	4006,2,c	;volatile
  2082  0002F8  E301               	bnc	l4994
  2083  0002FA  8EF2               	bsf	intcon,7,c	;volatile
  2084  0002FC                     l4994:
  2085  0002FC  0E80               	movlw	128
  2086  0002FE  0101               	movlb	1	; () banked
  2087  000300  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2088  000302  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2089  000304                     l4996:
  2090                           
  2091                           ;main.c: 852: SetBuzzerDuty(buzzeLoudDuration);
  2092  000304  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  2093  000308  6A06               	clrf	SetBuzzerDuty@dc+1,c
  2094  00030A  EC80  F010         	call	_SetBuzzerDuty	;wreg free
  2095                           
  2096                           ;main.c: 853: PR2 = buzzerAlarmPeriod;
  2097  00030E  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  2098                           
  2099                           ;main.c: 854: if((3 >= lastAddress && 3 <= lastEndAddress)) { buzzerOnOffDuration = ((un
      +                          signed char)(((_MODBUSHoldingRegs[3])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (
      +                          6); EEDATA = (buzzerOnOffDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0;
  2100  000312  506E               	movf	io_poll@lastAddress+1,w,c
  2101  000314  E144               	bnz	l5052
  2102  000316  0E04               	movlw	4
  2103  000318  5C6D               	subwf	io_poll@lastAddress,w,c
  2104  00031A  E241               	bc	l5052
  2105  00031C  506C               	movf	io_poll@lastEndAddress+1,w,c
  2106  00031E  E103               	bnz	u4540
  2107  000320  0E03               	movlw	3
  2108  000322  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2109  000324  E33C               	bnc	l5052
  2110  000326                     u4540:
  2111  000326  0101               	movlb	1	; () banked
  2112  000328  5193               	movf	(__MODBUSHoldingRegs+7)& (0+255),w,b
  2113  00032A  0100               	movlb	0	; () banked
  2114  00032C  6FED               	movwf	_buzzerOnOffDuration& (0+255),b
  2115  00032E  6BEE               	clrf	(_buzzerOnOffDuration+1)& (0+255),b
  2116  000330                     l481:
  2117  000330  FFFF               	dw	65535	; assembler added errata NOP
  2118  000332  B2A6               	btfsc	4006,1,c	;volatile
  2119  000334  D7FD               	goto	l481
  2120  000336  0E06               	movlw	6
  2121  000338  6EA9               	movwf	4009,c	;volatile
  2122  00033A  C0ED  FFA8         	movff	_buzzerOnOffDuration,4008	;volatile
  2123  00033E  90D8               	bcf	status,0,c	;volatile
  2124  000340  BEF2               	btfsc	intcon,7,c	;volatile
  2125  000342  80D8               	bsf	status,0,c	;volatile
  2126  000344  9EF2               	bcf	intcon,7,c	;volatile
  2127  000346  84A6               	bsf	4006,2,c	;volatile
  2128  000348  0E55               	movlw	85
  2129  00034A  6EA7               	movwf	4007,c	;volatile
  2130  00034C  0EAA               	movlw	170
  2131  00034E  6EA7               	movwf	4007,c	;volatile
  2132  000350  82A6               	bsf	4006,1,c	;volatile
  2133  000352  94A6               	bcf	4006,2,c	;volatile
  2134  000354  E301               	bnc	l5026
  2135  000356  8EF2               	bsf	intcon,7,c	;volatile
  2136  000358                     l5026:
  2137  000358  0100               	movlb	0	; () banked
  2138  00035A  51ED               	movf	_buzzerOnOffDuration& (0+255),w,b
  2139  00035C  6FEE               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  2140  00035E  6BED               	clrf	_buzzerOnOffDuration& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143  000360  C192  F0EF         	movff	__MODBUSHoldingRegs+6,_buzzerOnOffPeriod
  2144  000364  6BF0               	clrf	(_buzzerOnOffPeriod+1)& (0+255),b
  2145  000366                     l488:
  2146  000366  FFFF               	dw	65535	; assembler added errata NOP
  2147  000368  B2A6               	btfsc	4006,1,c	;volatile
  2148  00036A  D7FD               	goto	l488
  2149  00036C  0E07               	movlw	7
  2150  00036E  6EA9               	movwf	4009,c	;volatile
  2151  000370  C0EF  FFA8         	movff	_buzzerOnOffPeriod,4008	;volatile
  2152  000374  90D8               	bcf	status,0,c	;volatile
  2153  000376  BEF2               	btfsc	intcon,7,c	;volatile
  2154  000378  80D8               	bsf	status,0,c	;volatile
  2155  00037A  9EF2               	bcf	intcon,7,c	;volatile
  2156  00037C  84A6               	bsf	4006,2,c	;volatile
  2157  00037E  0E55               	movlw	85
  2158  000380  6EA7               	movwf	4007,c	;volatile
  2159  000382  0EAA               	movlw	170
  2160  000384  6EA7               	movwf	4007,c	;volatile
  2161  000386  82A6               	bsf	4006,1,c	;volatile
  2162  000388  94A6               	bcf	4006,2,c	;volatile
  2163  00038A  E301               	bnc	l5050
  2164  00038C  8EF2               	bsf	intcon,7,c	;volatile
  2165  00038E                     l5050:
  2166  00038E  0100               	movlb	0	; () banked
  2167  000390  51EF               	movf	_buzzerOnOffPeriod& (0+255),w,b
  2168  000392  6FF0               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  2169  000394  6BEF               	clrf	_buzzerOnOffPeriod& (0+255),b
  2170  000396  0E80               	movlw	128
  2171  000398  0101               	movlb	1	; () banked
  2172  00039A  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2173  00039C  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2174  00039E                     l5052:
  2175                           
  2176                           ;main.c: 857: if((4 >= lastAddress && 4 <= lastEndAddress)) { eventAcceptTime = ((unsign
      +                          ed char)((_MODBUSHoldingRegs[4])&0xFF)); do{ while (WR) { continue; } EEADR = (10); EEDA
      +                          TA = (eventAcceptTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; E
  2177  00039E  506E               	movf	io_poll@lastAddress+1,w,c
  2178  0003A0  E126               	bnz	l5080
  2179  0003A2  0E05               	movlw	5
  2180  0003A4  5C6D               	subwf	io_poll@lastAddress,w,c
  2181  0003A6  E223               	bc	l5080
  2182  0003A8  506C               	movf	io_poll@lastEndAddress+1,w,c
  2183  0003AA  E103               	bnz	u4620
  2184  0003AC  0E04               	movlw	4
  2185  0003AE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2186  0003B0  E31E               	bnc	l5080
  2187  0003B2                     u4620:
  2188  0003B2  C194  F0CE         	movff	__MODBUSHoldingRegs+8,_eventAcceptTime
  2189  0003B6                     l496:
  2190  0003B6  FFFF               	dw	65535	; assembler added errata NOP
  2191  0003B8  B2A6               	btfsc	4006,1,c	;volatile
  2192  0003BA  D7FD               	goto	l496
  2193  0003BC  0E0A               	movlw	10
  2194  0003BE  6EA9               	movwf	4009,c	;volatile
  2195  0003C0  C0CE  FFA8         	movff	_eventAcceptTime,4008	;volatile
  2196  0003C4  90D8               	bcf	status,0,c	;volatile
  2197  0003C6  BEF2               	btfsc	intcon,7,c	;volatile
  2198  0003C8  80D8               	bsf	status,0,c	;volatile
  2199  0003CA  9EF2               	bcf	intcon,7,c	;volatile
  2200  0003CC  84A6               	bsf	4006,2,c	;volatile
  2201  0003CE  0E55               	movlw	85
  2202  0003D0  6EA7               	movwf	4007,c	;volatile
  2203  0003D2  0EAA               	movlw	170
  2204  0003D4  6EA7               	movwf	4007,c	;volatile
  2205  0003D6  82A6               	bsf	4006,1,c	;volatile
  2206  0003D8  94A6               	bcf	4006,2,c	;volatile
  2207  0003DA  E301               	bnc	l501
  2208  0003DC  8EF2               	bsf	intcon,7,c	;volatile
  2209  0003DE                     l501:
  2210  0003DE  C194  F1B2         	movff	__MODBUSHoldingRegs+8,__MODBUSInputRegs+8
  2211  0003E2  C195  F1B3         	movff	__MODBUSHoldingRegs+9,__MODBUSInputRegs+9
  2212  0003E6  0E80               	movlw	128
  2213  0003E8  0101               	movlb	1	; () banked
  2214  0003EA  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2215  0003EC  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2216  0003EE                     l5080:
  2217                           
  2218                           ;main.c: 858: if((5 >= lastAddress && 5 <= lastEndAddress)) { buzzeEscaladeTime = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[5])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (8)
      +                          ; EEDATA = (buzzeEscaladeTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  2219  0003EE  506E               	movf	io_poll@lastAddress+1,w,c
  2220  0003F0  E13A               	bnz	l5128
  2221  0003F2  0E06               	movlw	6
  2222  0003F4  5C6D               	subwf	io_poll@lastAddress,w,c
  2223  0003F6  E237               	bc	l5128
  2224  0003F8  506C               	movf	io_poll@lastEndAddress+1,w,c
  2225  0003FA  E103               	bnz	u4670
  2226  0003FC  0E05               	movlw	5
  2227  0003FE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2228  000400  E332               	bnc	l5128
  2229  000402                     u4670:
  2230  000402  0101               	movlb	1	; () banked
  2231  000404  5197               	movf	(__MODBUSHoldingRegs+11)& (0+255),w,b
  2232  000406  0100               	movlb	0	; () banked
  2233  000408  6FC5               	movwf	_buzzeEscaladeTime& (0+255),b
  2234  00040A                     l504:
  2235  00040A  FFFF               	dw	65535	; assembler added errata NOP
  2236  00040C  B2A6               	btfsc	4006,1,c	;volatile
  2237  00040E  D7FD               	goto	l504
  2238  000410  0E08               	movlw	8
  2239  000412  6EA9               	movwf	4009,c	;volatile
  2240  000414  C0C5  FFA8         	movff	_buzzeEscaladeTime,4008	;volatile
  2241  000418  90D8               	bcf	status,0,c	;volatile
  2242  00041A  BEF2               	btfsc	intcon,7,c	;volatile
  2243  00041C  80D8               	bsf	status,0,c	;volatile
  2244  00041E  9EF2               	bcf	intcon,7,c	;volatile
  2245  000420  84A6               	bsf	4006,2,c	;volatile
  2246  000422  0E55               	movlw	85
  2247  000424  6EA7               	movwf	4007,c	;volatile
  2248  000426  0EAA               	movlw	170
  2249  000428  6EA7               	movwf	4007,c	;volatile
  2250  00042A  82A6               	bsf	4006,1,c	;volatile
  2251  00042C  94A6               	bcf	4006,2,c	;volatile
  2252  00042E  E301               	bnc	l509
  2253  000430  8EF2               	bsf	intcon,7,c	;volatile
  2254  000432                     l509:
  2255  000432  C196  F0C8         	movff	__MODBUSHoldingRegs+10,_buzzerStartDurationDiv
  2256  000436                     l511:
  2257  000436  FFFF               	dw	65535	; assembler added errata NOP
  2258  000438  B2A6               	btfsc	4006,1,c	;volatile
  2259  00043A  D7FD               	goto	l511
  2260  00043C  0E09               	movlw	9
  2261  00043E  6EA9               	movwf	4009,c	;volatile
  2262  000440  C0C8  FFA8         	movff	_buzzerStartDurationDiv,4008	;volatile
  2263  000444  90D8               	bcf	status,0,c	;volatile
  2264  000446  BEF2               	btfsc	intcon,7,c	;volatile
  2265  000448  80D8               	bsf	status,0,c	;volatile
  2266  00044A  9EF2               	bcf	intcon,7,c	;volatile
  2267  00044C  84A6               	bsf	4006,2,c	;volatile
  2268  00044E  0E55               	movlw	85
  2269  000450  6EA7               	movwf	4007,c	;volatile
  2270  000452  0EAA               	movlw	170
  2271  000454  6EA7               	movwf	4007,c	;volatile
  2272  000456  82A6               	bsf	4006,1,c	;volatile
  2273  000458  94A6               	bcf	4006,2,c	;volatile
  2274  00045A  E301               	bnc	l5126
  2275  00045C  8EF2               	bsf	intcon,7,c	;volatile
  2276  00045E                     l5126:
  2277  00045E  0E80               	movlw	128
  2278  000460  0101               	movlb	1	; () banked
  2279  000462  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2280  000464  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2281  000466                     l5128:
  2282                           
  2283                           ;main.c: 859: if((6 >= lastAddress && 6 <= lastEndAddress)) { eveningTimeHour = ((unsign
      +                          ed char)(((_MODBUSHoldingRegs[6])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (11);
      +                           EEDATA = (eveningTimeHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN =
  2284  000466  506E               	movf	io_poll@lastAddress+1,w,c
  2285  000468  E13A               	bnz	l5176
  2286  00046A  0E07               	movlw	7
  2287  00046C  5C6D               	subwf	io_poll@lastAddress,w,c
  2288  00046E  E237               	bc	l5176
  2289  000470  506C               	movf	io_poll@lastEndAddress+1,w,c
  2290  000472  E103               	bnz	u4750
  2291  000474  0E06               	movlw	6
  2292  000476  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2293  000478  E332               	bnc	l5176
  2294  00047A                     u4750:
  2295  00047A  0101               	movlb	1	; () banked
  2296  00047C  5199               	movf	(__MODBUSHoldingRegs+13)& (0+255),w,b
  2297  00047E  0100               	movlb	0	; () banked
  2298  000480  6FCD               	movwf	_eveningTimeHour& (0+255),b
  2299  000482                     l519:
  2300  000482  FFFF               	dw	65535	; assembler added errata NOP
  2301  000484  B2A6               	btfsc	4006,1,c	;volatile
  2302  000486  D7FD               	goto	l519
  2303  000488  0E0B               	movlw	11
  2304  00048A  6EA9               	movwf	4009,c	;volatile
  2305  00048C  C0CD  FFA8         	movff	_eveningTimeHour,4008	;volatile
  2306  000490  90D8               	bcf	status,0,c	;volatile
  2307  000492  BEF2               	btfsc	intcon,7,c	;volatile
  2308  000494  80D8               	bsf	status,0,c	;volatile
  2309  000496  9EF2               	bcf	intcon,7,c	;volatile
  2310  000498  84A6               	bsf	4006,2,c	;volatile
  2311  00049A  0E55               	movlw	85
  2312  00049C  6EA7               	movwf	4007,c	;volatile
  2313  00049E  0EAA               	movlw	170
  2314  0004A0  6EA7               	movwf	4007,c	;volatile
  2315  0004A2  82A6               	bsf	4006,1,c	;volatile
  2316  0004A4  94A6               	bcf	4006,2,c	;volatile
  2317  0004A6  E301               	bnc	l524
  2318  0004A8  8EF2               	bsf	intcon,7,c	;volatile
  2319  0004AA                     l524:
  2320  0004AA  C198  F0CF         	movff	__MODBUSHoldingRegs+12,_morningTimeHour
  2321  0004AE                     l526:
  2322  0004AE  FFFF               	dw	65535	; assembler added errata NOP
  2323  0004B0  B2A6               	btfsc	4006,1,c	;volatile
  2324  0004B2  D7FD               	goto	l526
  2325  0004B4  0E0E               	movlw	14
  2326  0004B6  6EA9               	movwf	4009,c	;volatile
  2327  0004B8  C0CF  FFA8         	movff	_morningTimeHour,4008	;volatile
  2328  0004BC  90D8               	bcf	status,0,c	;volatile
  2329  0004BE  BEF2               	btfsc	intcon,7,c	;volatile
  2330  0004C0  80D8               	bsf	status,0,c	;volatile
  2331  0004C2  9EF2               	bcf	intcon,7,c	;volatile
  2332  0004C4  84A6               	bsf	4006,2,c	;volatile
  2333  0004C6  0E55               	movlw	85
  2334  0004C8  6EA7               	movwf	4007,c	;volatile
  2335  0004CA  0EAA               	movlw	170
  2336  0004CC  6EA7               	movwf	4007,c	;volatile
  2337  0004CE  82A6               	bsf	4006,1,c	;volatile
  2338  0004D0  94A6               	bcf	4006,2,c	;volatile
  2339  0004D2  E301               	bnc	l5174
  2340  0004D4  8EF2               	bsf	intcon,7,c	;volatile
  2341  0004D6                     l5174:
  2342  0004D6  0E80               	movlw	128
  2343  0004D8  0101               	movlb	1	; () banked
  2344  0004DA  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2345  0004DC  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2346  0004DE                     l5176:
  2347                           
  2348                           ;main.c: 860: if((7 >= lastAddress && 7 <= lastEndAddress)) { nightStartHour = ((unsigne
      +                          d char)(((_MODBUSHoldingRegs[7])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (12); 
      +                          EEDATA = (nightStartHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1
  2349  0004DE  506E               	movf	io_poll@lastAddress+1,w,c
  2350  0004E0  E13A               	bnz	l5224
  2351  0004E2  0E08               	movlw	8
  2352  0004E4  5C6D               	subwf	io_poll@lastAddress,w,c
  2353  0004E6  E237               	bc	l5224
  2354  0004E8  506C               	movf	io_poll@lastEndAddress+1,w,c
  2355  0004EA  E103               	bnz	u4830
  2356  0004EC  0E07               	movlw	7
  2357  0004EE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2358  0004F0  E332               	bnc	l5224
  2359  0004F2                     u4830:
  2360  0004F2  0101               	movlb	1	; () banked
  2361  0004F4  519B               	movf	(__MODBUSHoldingRegs+15)& (0+255),w,b
  2362  0004F6  0100               	movlb	0	; () banked
  2363  0004F8  6FD1               	movwf	_nightStartHour& (0+255),b
  2364  0004FA                     l534:
  2365  0004FA  FFFF               	dw	65535	; assembler added errata NOP
  2366  0004FC  B2A6               	btfsc	4006,1,c	;volatile
  2367  0004FE  D7FD               	goto	l534
  2368  000500  0E0C               	movlw	12
  2369  000502  6EA9               	movwf	4009,c	;volatile
  2370  000504  C0D1  FFA8         	movff	_nightStartHour,4008	;volatile
  2371  000508  90D8               	bcf	status,0,c	;volatile
  2372  00050A  BEF2               	btfsc	intcon,7,c	;volatile
  2373  00050C  80D8               	bsf	status,0,c	;volatile
  2374  00050E  9EF2               	bcf	intcon,7,c	;volatile
  2375  000510  84A6               	bsf	4006,2,c	;volatile
  2376  000512  0E55               	movlw	85
  2377  000514  6EA7               	movwf	4007,c	;volatile
  2378  000516  0EAA               	movlw	170
  2379  000518  6EA7               	movwf	4007,c	;volatile
  2380  00051A  82A6               	bsf	4006,1,c	;volatile
  2381  00051C  94A6               	bcf	4006,2,c	;volatile
  2382  00051E  E301               	bnc	l539
  2383  000520  8EF2               	bsf	intcon,7,c	;volatile
  2384  000522                     l539:
  2385  000522  C19A  F0D0         	movff	__MODBUSHoldingRegs+14,_nightEndHour
  2386  000526                     l541:
  2387  000526  FFFF               	dw	65535	; assembler added errata NOP
  2388  000528  B2A6               	btfsc	4006,1,c	;volatile
  2389  00052A  D7FD               	goto	l541
  2390  00052C  0E0D               	movlw	13
  2391  00052E  6EA9               	movwf	4009,c	;volatile
  2392  000530  C0D0  FFA8         	movff	_nightEndHour,4008	;volatile
  2393  000534  90D8               	bcf	status,0,c	;volatile
  2394  000536  BEF2               	btfsc	intcon,7,c	;volatile
  2395  000538  80D8               	bsf	status,0,c	;volatile
  2396  00053A  9EF2               	bcf	intcon,7,c	;volatile
  2397  00053C  84A6               	bsf	4006,2,c	;volatile
  2398  00053E  0E55               	movlw	85
  2399  000540  6EA7               	movwf	4007,c	;volatile
  2400  000542  0EAA               	movlw	170
  2401  000544  6EA7               	movwf	4007,c	;volatile
  2402  000546  82A6               	bsf	4006,1,c	;volatile
  2403  000548  94A6               	bcf	4006,2,c	;volatile
  2404  00054A  E301               	bnc	l5222
  2405  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2406  00054E                     l5222:
  2407  00054E  0E80               	movlw	128
  2408  000550  0101               	movlb	1	; () banked
  2409  000552  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2410  000554  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2411  000556                     l5224:
  2412                           
  2413                           ;main.c: 862: if((8 >= lastAddress && 8 <= lastEndAddress)) { blinkDuration = ((unsigned
      +                           char)(((_MODBUSHoldingRegs[8])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (15); E
      +                          EDATA = (blinkDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; 
  2414  000556  506E               	movf	io_poll@lastAddress+1,w,c
  2415  000558  E14C               	bnz	l5278
  2416  00055A  0E09               	movlw	9
  2417  00055C  5C6D               	subwf	io_poll@lastAddress,w,c
  2418  00055E  E249               	bc	l5278
  2419  000560  506C               	movf	io_poll@lastEndAddress+1,w,c
  2420  000562  E103               	bnz	u4910
  2421  000564  0E08               	movlw	8
  2422  000566  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2423  000568  E344               	bnc	l5278
  2424  00056A                     u4910:
  2425  00056A  0101               	movlb	1	; () banked
  2426  00056C  519D               	movf	(__MODBUSHoldingRegs+17)& (0+255),w,b
  2427  00056E  0100               	movlb	0	; () banked
  2428  000570  6FBA               	movwf	_blinkDuration& (0+255),b
  2429  000572  6BBB               	clrf	(_blinkDuration+1)& (0+255),b
  2430  000574                     l549:
  2431  000574  FFFF               	dw	65535	; assembler added errata NOP
  2432  000576  B2A6               	btfsc	4006,1,c	;volatile
  2433  000578  D7FD               	goto	l549
  2434  00057A  0E0F               	movlw	15
  2435  00057C  6EA9               	movwf	4009,c	;volatile
  2436  00057E  C0BA  FFA8         	movff	_blinkDuration,4008	;volatile
  2437  000582  90D8               	bcf	status,0,c	;volatile
  2438  000584  BEF2               	btfsc	intcon,7,c	;volatile
  2439  000586  80D8               	bsf	status,0,c	;volatile
  2440  000588  9EF2               	bcf	intcon,7,c	;volatile
  2441  00058A  84A6               	bsf	4006,2,c	;volatile
  2442  00058C  0E55               	movlw	85
  2443  00058E  6EA7               	movwf	4007,c	;volatile
  2444  000590  0EAA               	movlw	170
  2445  000592  6EA7               	movwf	4007,c	;volatile
  2446  000594  82A6               	bsf	4006,1,c	;volatile
  2447  000596  94A6               	bcf	4006,2,c	;volatile
  2448  000598  E301               	bnc	l5250
  2449  00059A  8EF2               	bsf	intcon,7,c	;volatile
  2450  00059C                     l5250:
  2451  00059C  0100               	movlb	0	; () banked
  2452  00059E  0E06               	movlw	6
  2453  0005A0                     u4955:
  2454  0005A0  FFFF               	dw	65535	; assembler added errata NOP
  2455  0005A2  90D8               	bcf	status,0,c
  2456  0005A4  37BA               	rlcf	_blinkDuration& (0+255),f,b
  2457  0005A6  37BB               	rlcf	(_blinkDuration+1)& (0+255),f,b
  2458  0005A8  2EE8               	decfsz	wreg,f,c
  2459  0005AA  D7FA               	goto	u4955
  2460                           
  2461                           ; BSR set to: 0
  2462  0005AC  C19C  F0BC         	movff	__MODBUSHoldingRegs+16,_blinkPeriod
  2463  0005B0  6BBD               	clrf	(_blinkPeriod+1)& (0+255),b
  2464  0005B2                     l556:
  2465  0005B2  FFFF               	dw	65535	; assembler added errata NOP
  2466  0005B4  B2A6               	btfsc	4006,1,c	;volatile
  2467  0005B6  D7FD               	goto	l556
  2468  0005B8  0E10               	movlw	16
  2469  0005BA  6EA9               	movwf	4009,c	;volatile
  2470  0005BC  C0BC  FFA8         	movff	_blinkPeriod,4008	;volatile
  2471  0005C0  90D8               	bcf	status,0,c	;volatile
  2472  0005C2  BEF2               	btfsc	intcon,7,c	;volatile
  2473  0005C4  80D8               	bsf	status,0,c	;volatile
  2474  0005C6  9EF2               	bcf	intcon,7,c	;volatile
  2475  0005C8  84A6               	bsf	4006,2,c	;volatile
  2476  0005CA  0E55               	movlw	85
  2477  0005CC  6EA7               	movwf	4007,c	;volatile
  2478  0005CE  0EAA               	movlw	170
  2479  0005D0  6EA7               	movwf	4007,c	;volatile
  2480  0005D2  82A6               	bsf	4006,1,c	;volatile
  2481  0005D4  94A6               	bcf	4006,2,c	;volatile
  2482  0005D6  E301               	bnc	l5274
  2483  0005D8  8EF2               	bsf	intcon,7,c	;volatile
  2484  0005DA                     l5274:
  2485  0005DA  0100               	movlb	0	; () banked
  2486  0005DC  0E06               	movlw	6
  2487  0005DE                     u4995:
  2488  0005DE  FFFF               	dw	65535	; assembler added errata NOP
  2489  0005E0  90D8               	bcf	status,0,c
  2490  0005E2  37BC               	rlcf	_blinkPeriod& (0+255),f,b
  2491  0005E4  37BD               	rlcf	(_blinkPeriod+1)& (0+255),f,b
  2492  0005E6  2EE8               	decfsz	wreg,f,c
  2493  0005E8  D7FA               	goto	u4995
  2494                           
  2495                           ; BSR set to: 0
  2496  0005EA  0E80               	movlw	128
  2497  0005EC  0101               	movlb	1	; () banked
  2498  0005EE  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2499  0005F0  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2500  0005F2                     l5278:
  2501                           
  2502                           ;main.c: 866: if((9 >= lastAddress && 9 <= lastEndAddress) && (11 >= lastAddress && 11 <
      +                          = lastEndAddress))
  2503  0005F2  506E               	movf	io_poll@lastAddress+1,w,c
  2504  0005F4  E131               	bnz	l415
  2505  0005F6  0E0A               	movlw	10
  2506  0005F8  5C6D               	subwf	io_poll@lastAddress,w,c
  2507  0005FA  E22E               	bc	l415
  2508  0005FC  506C               	movf	io_poll@lastEndAddress+1,w,c
  2509  0005FE  E103               	bnz	u5010
  2510  000600  0E09               	movlw	9
  2511  000602  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2512  000604  E329               	bnc	l415
  2513  000606                     u5010:
  2514  000606  506E               	movf	io_poll@lastAddress+1,w,c
  2515  000608  E127               	bnz	l415
  2516  00060A  0E0C               	movlw	12
  2517  00060C  5C6D               	subwf	io_poll@lastAddress,w,c
  2518  00060E  E224               	bc	l415
  2519  000610  506C               	movf	io_poll@lastEndAddress+1,w,c
  2520  000612  E103               	bnz	u5030
  2521  000614  0E0B               	movlw	11
  2522  000616  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2523  000618  E31F               	bnc	l415
  2524  00061A                     u5030:
  2525                           
  2526                           ;main.c: 867: {
  2527                           ;main.c: 868: uint16_t hourMin = _MODBUSHoldingRegs[9];
  2528  00061A  C19E  F062         	movff	__MODBUSHoldingRegs+18,io_poll@hourMin
  2529  00061E  C19F  F063         	movff	__MODBUSHoldingRegs+19,io_poll@hourMin+1
  2530                           
  2531                           ;main.c: 869: uint16_t daySec = _MODBUSHoldingRegs[10];
  2532  000622  C1A0  F064         	movff	__MODBUSHoldingRegs+20,io_poll@daySec
  2533  000626  C1A1  F065         	movff	__MODBUSHoldingRegs+21,io_poll@daySec+1
  2534                           
  2535                           ;main.c: 870: uint16_t yearMonth = _MODBUSHoldingRegs[11];
  2536  00062A  C1A2  F066         	movff	__MODBUSHoldingRegs+22,io_poll@yearMonth
  2537  00062E  C1A3  F067         	movff	__MODBUSHoldingRegs+23,io_poll@yearMonth+1
  2538                           
  2539                           ;main.c: 871: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  2540  000632  0E64               	movlw	low io_poll@daySec
  2541  000634  6E43               	movwf	SetTimeFromRegs@daySec,c
  2542  000636  0E66               	movlw	low io_poll@yearMonth
  2543  000638  6E44               	movwf	SetTimeFromRegs@yearMonth,c
  2544  00063A  0E62               	movlw	io_poll@hourMin& (0+255)
  2545  00063C  ECE6  F00C         	call	_SetTimeFromRegs
  2546                           
  2547                           ;main.c: 872: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  2548  000640  0100               	movlb	0	; () banked
  2549  000642  81B4               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  2550  000644  D552               	goto	l4808
  2551  000646                     l5296:
  2552                           
  2553                           ;main.c: 880: }
  2554                           ;main.c: 881: if(*lastCommand == MODBUS_COM_WRITE_FILE_RECORD)
  2555  000646  506A               	movf	io_poll@lastCommand,w,c
  2556  000648  6ED9               	movwf	fsr2l,c
  2557  00064A  6ADA               	clrf	fsr2h,c
  2558  00064C  0E15               	movlw	21
  2559  00064E  18DE               	xorwf	postinc2,w,c
  2560  000650  E103               	bnz	l415
  2561                           
  2562                           ;main.c: 882: {
  2563                           ;main.c: 883: InitFromEeprom();
  2564  000652  EC83  F00B         	call	_InitFromEeprom	;wreg free
  2565  000656  D549               	goto	l4808
  2566  000658                     l415:
  2567  000658  FFFF               	dw	65535	; assembler added errata NOP
  2568  00065A  0012               	return		;funcret
  2569  00065C  FFFF               	dw	65535	; errata NOP
  2570  00065E                     __end_of_io_poll:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodl	equ	0xFF3
  2577                           intcon	equ	0xFF2
  2578                           postinc0	equ	0xFEE
  2579                           wreg	equ	0xFE8
  2580                           postdec1	equ	0xFE5
  2581                           fsr1h	equ	0xFE2
  2582                           fsr1l	equ	0xFE1
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _SetTimeFromRegs *****************
  2591 ;; Defined at:
  2592 ;;		line 769 in file "main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  hourMin         1    wreg     PTR unsigned int 
  2595 ;;		 -> io_poll@hourMin(2), 
  2596 ;;  daySec          1   66[COMRAM] PTR unsigned int 
  2597 ;;		 -> io_poll@daySec(2), 
  2598 ;;  yearMonth       1   67[COMRAM] PTR unsigned int 
  2599 ;;		 -> io_poll@yearMonth(2), 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  hourMin         1   74[COMRAM] PTR unsigned int 
  2602 ;;		 -> io_poll@hourMin(2), 
  2603 ;;  newTime        18   75[COMRAM] struct tm
  2604 ;;  newRawTime      4   70[COMRAM] long 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2614 ;;      Params:         2       0       0       0       0       0       0
  2615 ;;      Locals:        23       0       0       0       0       0       0
  2616 ;;      Temps:          2       0       0       0       0       0       0
  2617 ;;      Totals:        27       0       0       0       0       0       0
  2618 ;;Total ram usage:       27 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    6
  2621 ;; This function calls:
  2622 ;;		_LightStatusLed
  2623 ;;		_LoadNextEvent
  2624 ;;		_SetHourMin
  2625 ;;		_SetTime
  2626 ;;		_mktime
  2627 ;; This function is called by:
  2628 ;;		_io_poll
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text3
  2633  0019CC                     __ptext3:
  2634                           	opt stack 0
  2635  0019CC                     _SetTimeFromRegs:
  2636                           	opt stack 23
  2637                           
  2638                           ;incstack = 0
  2639  0019CC  FFFF               	dw	65535
  2640                           
  2641                           ;SetTimeFromRegs@hourMin stored from wreg
  2642  0019CE  6E4B               	movwf	SetTimeFromRegs@hourMin,c
  2643                           
  2644                           ;main.c: 771: struct tm newTime;
  2645                           ;main.c: 772: newTime.tm_year = (*yearMonth >> 8) + 100;
  2646  0019D0  5044               	movf	SetTimeFromRegs@yearMonth,w,c
  2647  0019D2  6ED9               	movwf	fsr2l,c
  2648  0019D4  6ADA               	clrf	fsr2h,c
  2649  0019D6  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2650  0019DA  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2651  0019DE  C046  F045         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2652  0019E2  6A46               	clrf	??_SetTimeFromRegs+1,c
  2653  0019E4  0E64               	movlw	100
  2654  0019E6  2445               	addwf	??_SetTimeFromRegs,w,c
  2655  0019E8  6E56               	movwf	SetTimeFromRegs@newTime+10,c
  2656  0019EA  0E00               	movlw	0
  2657  0019EC  2046               	addwfc	??_SetTimeFromRegs+1,w,c
  2658  0019EE  6E57               	movwf	SetTimeFromRegs@newTime+11,c
  2659                           
  2660                           ;main.c: 773: newTime.tm_mon = *yearMonth & 0xFF;
  2661  0019F0  5044               	movf	SetTimeFromRegs@yearMonth,w,c
  2662  0019F2  6ED9               	movwf	fsr2l,c
  2663  0019F4  6ADA               	clrf	fsr2h,c
  2664  0019F6  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2665  0019FA  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2666  0019FE  5045               	movf	??_SetTimeFromRegs,w,c
  2667  001A00  6E54               	movwf	SetTimeFromRegs@newTime+8,c
  2668  001A02  6A55               	clrf	SetTimeFromRegs@newTime+9,c
  2669                           
  2670                           ;main.c: 774: newTime.tm_mday = *daySec >> 8;
  2671  001A04  5043               	movf	SetTimeFromRegs@daySec,w,c
  2672  001A06  6ED9               	movwf	fsr2l,c
  2673  001A08  6ADA               	clrf	fsr2h,c
  2674  001A0A  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2675  001A0E  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2676  001A12  5046               	movf	??_SetTimeFromRegs+1,w,c
  2677  001A14  6E52               	movwf	SetTimeFromRegs@newTime+6,c
  2678  001A16  6A53               	clrf	SetTimeFromRegs@newTime+7,c
  2679                           
  2680                           ;main.c: 775: newTime.tm_hour = *hourMin >> 8;
  2681  001A18  504B               	movf	SetTimeFromRegs@hourMin,w,c
  2682  001A1A  6ED9               	movwf	fsr2l,c
  2683  001A1C  6ADA               	clrf	fsr2h,c
  2684  001A1E  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2685  001A22  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2686  001A26  5046               	movf	??_SetTimeFromRegs+1,w,c
  2687  001A28  6E50               	movwf	SetTimeFromRegs@newTime+4,c
  2688  001A2A  6A51               	clrf	SetTimeFromRegs@newTime+5,c
  2689                           
  2690                           ;main.c: 776: newTime.tm_min = *hourMin & 0xFF;
  2691  001A2C  504B               	movf	SetTimeFromRegs@hourMin,w,c
  2692  001A2E  6ED9               	movwf	fsr2l,c
  2693  001A30  6ADA               	clrf	fsr2h,c
  2694  001A32  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2695  001A36  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2696  001A3A  5045               	movf	??_SetTimeFromRegs,w,c
  2697  001A3C  6E4E               	movwf	SetTimeFromRegs@newTime+2,c
  2698  001A3E  6A4F               	clrf	SetTimeFromRegs@newTime+3,c
  2699                           
  2700                           ;main.c: 777: newTime.tm_sec = *daySec & 0xFF;
  2701  001A40  5043               	movf	SetTimeFromRegs@daySec,w,c
  2702  001A42  6ED9               	movwf	fsr2l,c
  2703  001A44  6ADA               	clrf	fsr2h,c
  2704  001A46  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  2705  001A4A  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  2706  001A4E  5045               	movf	??_SetTimeFromRegs,w,c
  2707  001A50  6E4C               	movwf	SetTimeFromRegs@newTime,c
  2708  001A52  6A4D               	clrf	SetTimeFromRegs@newTime+1,c
  2709                           
  2710                           ;main.c: 778: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  2711  001A54  0E4E               	movlw	low (SetTimeFromRegs@newTime+2)
  2712  001A56  6E05               	movwf	SetHourMin@newMin,c
  2713  001A58  0E4C               	movlw	SetTimeFromRegs@newTime& (0+255)
  2714  001A5A  0F04               	addlw	4
  2715  001A5C  ECA1  F012         	call	_SetHourMin
  2716                           
  2717                           ;main.c: 779: time_t newRawTime = mktime(&newTime);
  2718  001A60  0E4C               	movlw	SetTimeFromRegs@newTime& (0+255)
  2719  001A62  EC2F  F003         	call	_mktime
  2720  001A66  C02C  F047         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2721  001A6A  C02D  F048         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2722  001A6E  C02E  F049         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2723  001A72  C02F  F04A         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2724                           
  2725                           ;main.c: 780: SetTime(&newRawTime);
  2726  001A76  0E47               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2727  001A78  EC92  F012         	call	_SetTime
  2728                           
  2729                           ;main.c: 781: LightStatusLed(0x05, 0, 0);
  2730  001A7C  0E00               	movlw	0
  2731  001A7E  6E05               	movwf	LightStatusLed@on,c
  2732  001A80  6E06               	movwf	LightStatusLed@blink,c
  2733  001A82  0E05               	movlw	5
  2734  001A84  EC03  F00C         	call	_LightStatusLed
  2735                           
  2736                           ;main.c: 782: LoadNextEvent();
  2737  001A88  EF4D  F00F         	goto	_LoadNextEvent	;wreg free
  2738  001A8C  FFFF               	dw	65535	; errata NOP
  2739  001A8E                     __end_of_SetTimeFromRegs:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           prodl	equ	0xFF3
  2746                           intcon	equ	0xFF2
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1h	equ	0xFE2
  2751                           fsr1l	equ	0xFE1
  2752                           indf2	equ	0xFDF
  2753                           postinc2	equ	0xFDE
  2754                           postdec2	equ	0xFDD
  2755                           fsr2h	equ	0xFDA
  2756                           fsr2l	equ	0xFD9
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _mktime *****************
  2760 ;; Defined at:
  2761 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  timeptr         1    wreg     PTR struct tm
  2764 ;;		 -> SetTimeFromRegs@newTime(18), 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  timeptr         1   65[COMRAM] PTR struct tm
  2767 ;;		 -> SetTimeFromRegs@newTime(18), 
  2768 ;;  tt              4   61[COMRAM] long 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  4   43[COMRAM] long 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2778 ;;      Params:         4       0       0       0       0       0       0
  2779 ;;      Locals:         5       0       0       0       0       0       0
  2780 ;;      Temps:         14       0       0       0       0       0       0
  2781 ;;      Totals:        23       0       0       0       0       0       0
  2782 ;;Total ram usage:       23 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    5
  2785 ;; This function calls:
  2786 ;;		_ymd_to_scalar
  2787 ;; This function is called by:
  2788 ;;		_SetTimeFromRegs
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           	psect	text4
  2793  00065E                     __ptext4:
  2794                           	opt stack 0
  2795  00065E                     _mktime:
  2796                           	opt stack 23
  2797                           
  2798                           ;incstack = 0
  2799  00065E  FFFF               	dw	65535
  2800                           
  2801                           ;mktime@timeptr stored from wreg
  2802  000660  6E42               	movwf	mktime@timeptr,c
  2803  000662  5042               	movf	mktime@timeptr,w,c
  2804  000664  6ED9               	movwf	fsr2l,c
  2805  000666  6ADA               	clrf	fsr2h,c
  2806  000668  0E0A               	movlw	10
  2807  00066A  26D9               	addwf	fsr2l,f,c
  2808  00066C  0E01               	movlw	1
  2809  00066E  BEDB               	btfsc	plusw2,7,c
  2810  000670  D012               	goto	l1371
  2811  000672  50DB               	movf	plusw2,w,c
  2812  000674  E103               	bnz	u3050
  2813  000676  0E46               	movlw	70
  2814  000678  5CDE               	subwf	postinc2,w,c
  2815  00067A  E30D               	bnc	l1371
  2816  00067C                     u3050:
  2817  00067C  5042               	movf	mktime@timeptr,w,c
  2818  00067E  6ED9               	movwf	fsr2l,c
  2819  000680  6ADA               	clrf	fsr2h,c
  2820  000682  0E0A               	movlw	10
  2821  000684  26D9               	addwf	fsr2l,f,c
  2822  000686  0E01               	movlw	1
  2823  000688  BEDB               	btfsc	plusw2,7,c
  2824  00068A  D00B               	goto	l3776
  2825  00068C  50DB               	movf	plusw2,w,c
  2826  00068E  E103               	bnz	u3060
  2827  000690  0E8B               	movlw	139
  2828  000692  5CDE               	subwf	postinc2,w,c
  2829  000694  E306               	bnc	l3776
  2830  000696                     u3060:
  2831  000696                     l1371:
  2832  000696  FFFF               	dw	65535	; assembler added errata NOP
  2833  000698  683E               	setf	mktime@tt,c
  2834  00069A  683F               	setf	mktime@tt+1,c
  2835  00069C  6840               	setf	mktime@tt+2,c
  2836  00069E  6841               	setf	mktime@tt+3,c
  2837  0006A0  D15C               	goto	l3786
  2838  0006A2                     l3776:
  2839  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  2840  0006A4  5042               	movf	mktime@timeptr,w,c
  2841  0006A6  6ED9               	movwf	fsr2l,c
  2842  0006A8  6ADA               	clrf	fsr2h,c
  2843  0006AA  0E0A               	movlw	10
  2844  0006AC  26D9               	addwf	fsr2l,f,c
  2845  0006AE  CFDE F030          	movff	postinc2,??_mktime
  2846  0006B2  CFDD F031          	movff	postdec2,??_mktime+1
  2847  0006B6  0E6C               	movlw	108
  2848  0006B8  2430               	addwf	??_mktime,w,c
  2849  0006BA  6E1C               	movwf	ymd_to_scalar@yr,c
  2850  0006BC  0E07               	movlw	7
  2851  0006BE  2031               	addwfc	??_mktime+1,w,c
  2852  0006C0  6E1D               	movwf	ymd_to_scalar@yr+1,c
  2853  0006C2  5042               	movf	mktime@timeptr,w,c
  2854  0006C4  6ED9               	movwf	fsr2l,c
  2855  0006C6  6ADA               	clrf	fsr2h,c
  2856  0006C8  0E08               	movlw	8
  2857  0006CA  26D9               	addwf	fsr2l,f,c
  2858  0006CC  CFDE F032          	movff	postinc2,??_mktime+2
  2859  0006D0  CFDD F033          	movff	postdec2,??_mktime+3
  2860  0006D4  2832               	incf	??_mktime+2,w,c
  2861  0006D6  6E1E               	movwf	ymd_to_scalar@mo,c
  2862  0006D8  0E00               	movlw	0
  2863  0006DA  2033               	addwfc	??_mktime+3,w,c
  2864  0006DC  6E1F               	movwf	ymd_to_scalar@mo+1,c
  2865  0006DE  5042               	movf	mktime@timeptr,w,c
  2866  0006E0  6ED9               	movwf	fsr2l,c
  2867  0006E2  6ADA               	clrf	fsr2h,c
  2868  0006E4  0E06               	movlw	6
  2869  0006E6  26D9               	addwf	fsr2l,f,c
  2870  0006E8  CFDE F020          	movff	postinc2,ymd_to_scalar@day
  2871  0006EC  CFDD F021          	movff	postdec2,ymd_to_scalar@day+1
  2872  0006F0  ECB0  F00E         	call	_ymd_to_scalar	;wreg free
  2873  0006F4  C01C  F03E         	movff	?_ymd_to_scalar,mktime@tt
  2874  0006F8  C01D  F03F         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2875  0006FC  C01E  F040         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2876  000700  C01F  F041         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2877  000704  0E07               	movlw	7
  2878  000706  6E1D               	movwf	ymd_to_scalar@yr+1,c
  2879  000708  0EB2               	movlw	178
  2880  00070A  6E1C               	movwf	ymd_to_scalar@yr,c
  2881  00070C  6A1F               	clrf	ymd_to_scalar@mo+1,c
  2882  00070E  0E01               	movlw	1
  2883  000710  6E1E               	movwf	ymd_to_scalar@mo,c
  2884  000712  6A21               	clrf	ymd_to_scalar@day+1,c
  2885  000714  6E20               	movwf	ymd_to_scalar@day,c
  2886  000716  ECB0  F00E         	call	_ymd_to_scalar	;wreg free
  2887  00071A  501C               	movf	?_ymd_to_scalar,w,c
  2888  00071C  5E3E               	subwf	mktime@tt,f,c
  2889  00071E  501D               	movf	?_ymd_to_scalar+1,w,c
  2890  000720  5A3F               	subwfb	mktime@tt+1,f,c
  2891  000722  501E               	movf	?_ymd_to_scalar+2,w,c
  2892  000724  5A40               	subwfb	mktime@tt+2,f,c
  2893  000726  501F               	movf	?_ymd_to_scalar+3,w,c
  2894  000728  5A41               	subwfb	mktime@tt+3,f,c
  2895  00072A  5042               	movf	mktime@timeptr,w,c
  2896  00072C  6ED9               	movwf	fsr2l,c
  2897  00072E  6ADA               	clrf	fsr2h,c
  2898  000730  0E04               	movlw	4
  2899  000732  26D9               	addwf	fsr2l,f,c
  2900  000734  CFDE F030          	movff	postinc2,??_mktime
  2901  000738  CFDD F031          	movff	postdec2,??_mktime+1
  2902  00073C  C030  F032         	movff	??_mktime,??_mktime+2
  2903  000740  C031  F033         	movff	??_mktime+1,??_mktime+3
  2904  000744  0E00               	movlw	0
  2905  000746  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  2906  000748  0EFF               	movlw	255
  2907  00074A  6E34               	movwf	(??_mktime+4)& (0+255),c
  2908  00074C  6E35               	movwf	(??_mktime+5)& (0+255),c
  2909  00074E  C03E  F036         	movff	mktime@tt,??_mktime+6
  2910  000752  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  2911  000756  C040  F038         	movff	mktime@tt+2,??_mktime+8
  2912  00075A  C041  F039         	movff	mktime@tt+3,??_mktime+9
  2913  00075E  0E18               	movlw	24
  2914  000760  0236               	mulwf	(??_mktime+6)& (0+255),c
  2915  000762  CFF3 F03A          	movff	prodl,??_mktime+10
  2916  000766  CFF4 F03B          	movff	prodh,??_mktime+11
  2917  00076A  6A3C               	clrf	(??_mktime+12)& (0+255),c
  2918  00076C  6A3D               	clrf	(??_mktime+13)& (0+255),c
  2919  00076E  0237               	mulwf	(??_mktime+7)& (0+255),c
  2920  000770  50F3               	movf	prodl,w,c
  2921  000772  263B               	addwf	(??_mktime+11)& (0+255),f,c
  2922  000774  50F4               	movf	prodh,w,c
  2923  000776  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  2924  000778  0E00               	movlw	0
  2925  00077A  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  2926  00077C  0236               	mulwf	(??_mktime+6)& (0+255),c
  2927  00077E  50F3               	movf	prodl,w,c
  2928  000780  263B               	addwf	(??_mktime+11)& (0+255),f,c
  2929  000782  50F4               	movf	prodh,w,c
  2930  000784  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  2931  000786  0E00               	movlw	0
  2932  000788  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  2933  00078A  0E18               	movlw	24
  2934  00078C  0238               	mulwf	(??_mktime+8)& (0+255),c
  2935  00078E  50F3               	movf	prodl,w,c
  2936  000790  263C               	addwf	(??_mktime+12)& (0+255),f,c
  2937  000792  50F4               	movf	prodh,w,c
  2938  000794  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  2939  000796  0E00               	movlw	0
  2940  000798  0237               	mulwf	(??_mktime+7)& (0+255),c
  2941  00079A  50F3               	movf	prodl,w,c
  2942  00079C  263C               	addwf	(??_mktime+12)& (0+255),f,c
  2943  00079E  50F4               	movf	prodh,w,c
  2944  0007A0  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  2945  0007A2  0E00               	movlw	0
  2946  0007A4  0236               	mulwf	(??_mktime+6)& (0+255),c
  2947  0007A6  50F3               	movf	prodl,w,c
  2948  0007A8  263C               	addwf	(??_mktime+12)& (0+255),f,c
  2949  0007AA  50F4               	movf	prodh,w,c
  2950  0007AC  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  2951  0007AE  0E18               	movlw	24
  2952  0007B0  0239               	mulwf	(??_mktime+9)& (0+255),c
  2953  0007B2  50F3               	movf	prodl,w,c
  2954  0007B4  263D               	addwf	(??_mktime+13)& (0+255),f,c
  2955  0007B6  0E00               	movlw	0
  2956  0007B8  0238               	mulwf	(??_mktime+8)& (0+255),c
  2957  0007BA  50F3               	movf	prodl,w,c
  2958  0007BC  263D               	addwf	(??_mktime+13)& (0+255),f,c
  2959  0007BE  0E00               	movlw	0
  2960  0007C0  0237               	mulwf	(??_mktime+7)& (0+255),c
  2961  0007C2  50F3               	movf	prodl,w,c
  2962  0007C4  263D               	addwf	(??_mktime+13)& (0+255),f,c
  2963  0007C6  0E00               	movlw	0
  2964  0007C8  0236               	mulwf	(??_mktime+6)& (0+255),c
  2965  0007CA  50F3               	movf	prodl,w,c
  2966  0007CC  263D               	addwf	(??_mktime+13)& (0+255),f,c
  2967  0007CE  5032               	movf	??_mktime+2,w,c
  2968  0007D0  243A               	addwf	??_mktime+10,w,c
  2969  0007D2  6E3E               	movwf	mktime@tt,c
  2970  0007D4  5033               	movf	??_mktime+3,w,c
  2971  0007D6  203B               	addwfc	??_mktime+11,w,c
  2972  0007D8  6E3F               	movwf	mktime@tt+1,c
  2973  0007DA  5034               	movf	??_mktime+4,w,c
  2974  0007DC  203C               	addwfc	??_mktime+12,w,c
  2975  0007DE  6E40               	movwf	mktime@tt+2,c
  2976  0007E0  5035               	movf	??_mktime+5,w,c
  2977  0007E2  203D               	addwfc	??_mktime+13,w,c
  2978  0007E4  6E41               	movwf	mktime@tt+3,c
  2979  0007E6  5042               	movf	mktime@timeptr,w,c
  2980  0007E8  6ED9               	movwf	fsr2l,c
  2981  0007EA  6ADA               	clrf	fsr2h,c
  2982  0007EC  0E02               	movlw	2
  2983  0007EE  26D9               	addwf	fsr2l,f,c
  2984  0007F0  CFDE F030          	movff	postinc2,??_mktime
  2985  0007F4  CFDD F031          	movff	postdec2,??_mktime+1
  2986  0007F8  C030  F032         	movff	??_mktime,??_mktime+2
  2987  0007FC  C031  F033         	movff	??_mktime+1,??_mktime+3
  2988  000800  0E00               	movlw	0
  2989  000802  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  2990  000804  0EFF               	movlw	255
  2991  000806  6E34               	movwf	(??_mktime+4)& (0+255),c
  2992  000808  6E35               	movwf	(??_mktime+5)& (0+255),c
  2993  00080A  C03E  F036         	movff	mktime@tt,??_mktime+6
  2994  00080E  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  2995  000812  C040  F038         	movff	mktime@tt+2,??_mktime+8
  2996  000816  C041  F039         	movff	mktime@tt+3,??_mktime+9
  2997  00081A  0E3C               	movlw	60
  2998  00081C  0236               	mulwf	(??_mktime+6)& (0+255),c
  2999  00081E  CFF3 F03A          	movff	prodl,??_mktime+10
  3000  000822  CFF4 F03B          	movff	prodh,??_mktime+11
  3001  000826  6A3C               	clrf	(??_mktime+12)& (0+255),c
  3002  000828  6A3D               	clrf	(??_mktime+13)& (0+255),c
  3003  00082A  0237               	mulwf	(??_mktime+7)& (0+255),c
  3004  00082C  50F3               	movf	prodl,w,c
  3005  00082E  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3006  000830  50F4               	movf	prodh,w,c
  3007  000832  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3008  000834  0E00               	movlw	0
  3009  000836  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3010  000838  0236               	mulwf	(??_mktime+6)& (0+255),c
  3011  00083A  50F3               	movf	prodl,w,c
  3012  00083C  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3013  00083E  50F4               	movf	prodh,w,c
  3014  000840  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3015  000842  0E00               	movlw	0
  3016  000844  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3017  000846  0E3C               	movlw	60
  3018  000848  0238               	mulwf	(??_mktime+8)& (0+255),c
  3019  00084A  50F3               	movf	prodl,w,c
  3020  00084C  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3021  00084E  50F4               	movf	prodh,w,c
  3022  000850  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3023  000852  0E00               	movlw	0
  3024  000854  0237               	mulwf	(??_mktime+7)& (0+255),c
  3025  000856  50F3               	movf	prodl,w,c
  3026  000858  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3027  00085A  50F4               	movf	prodh,w,c
  3028  00085C  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3029  00085E  0E00               	movlw	0
  3030  000860  0236               	mulwf	(??_mktime+6)& (0+255),c
  3031  000862  50F3               	movf	prodl,w,c
  3032  000864  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3033  000866  50F4               	movf	prodh,w,c
  3034  000868  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3035  00086A  0E3C               	movlw	60
  3036  00086C  0239               	mulwf	(??_mktime+9)& (0+255),c
  3037  00086E  50F3               	movf	prodl,w,c
  3038  000870  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3039  000872  0E00               	movlw	0
  3040  000874  0238               	mulwf	(??_mktime+8)& (0+255),c
  3041  000876  50F3               	movf	prodl,w,c
  3042  000878  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3043  00087A  0E00               	movlw	0
  3044  00087C  0237               	mulwf	(??_mktime+7)& (0+255),c
  3045  00087E  50F3               	movf	prodl,w,c
  3046  000880  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3047  000882  0E00               	movlw	0
  3048  000884  0236               	mulwf	(??_mktime+6)& (0+255),c
  3049  000886  50F3               	movf	prodl,w,c
  3050  000888  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3051  00088A  5032               	movf	??_mktime+2,w,c
  3052  00088C  243A               	addwf	??_mktime+10,w,c
  3053  00088E  6E3E               	movwf	mktime@tt,c
  3054  000890  5033               	movf	??_mktime+3,w,c
  3055  000892  203B               	addwfc	??_mktime+11,w,c
  3056  000894  6E3F               	movwf	mktime@tt+1,c
  3057  000896  5034               	movf	??_mktime+4,w,c
  3058  000898  203C               	addwfc	??_mktime+12,w,c
  3059  00089A  6E40               	movwf	mktime@tt+2,c
  3060  00089C  5035               	movf	??_mktime+5,w,c
  3061  00089E  203D               	addwfc	??_mktime+13,w,c
  3062  0008A0  6E41               	movwf	mktime@tt+3,c
  3063  0008A2  5042               	movf	mktime@timeptr,w,c
  3064  0008A4  6ED9               	movwf	fsr2l,c
  3065  0008A6  6ADA               	clrf	fsr2h,c
  3066  0008A8  CFDE F030          	movff	postinc2,??_mktime
  3067  0008AC  CFDD F031          	movff	postdec2,??_mktime+1
  3068  0008B0  C030  F032         	movff	??_mktime,??_mktime+2
  3069  0008B4  C031  F033         	movff	??_mktime+1,??_mktime+3
  3070  0008B8  0E00               	movlw	0
  3071  0008BA  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  3072  0008BC  0EFF               	movlw	255
  3073  0008BE  6E34               	movwf	(??_mktime+4)& (0+255),c
  3074  0008C0  6E35               	movwf	(??_mktime+5)& (0+255),c
  3075  0008C2  C03E  F036         	movff	mktime@tt,??_mktime+6
  3076  0008C6  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  3077  0008CA  C040  F038         	movff	mktime@tt+2,??_mktime+8
  3078  0008CE  C041  F039         	movff	mktime@tt+3,??_mktime+9
  3079  0008D2  0E3C               	movlw	60
  3080  0008D4  0236               	mulwf	(??_mktime+6)& (0+255),c
  3081  0008D6  CFF3 F03A          	movff	prodl,??_mktime+10
  3082  0008DA  CFF4 F03B          	movff	prodh,??_mktime+11
  3083  0008DE  6A3C               	clrf	(??_mktime+12)& (0+255),c
  3084  0008E0  6A3D               	clrf	(??_mktime+13)& (0+255),c
  3085  0008E2  0237               	mulwf	(??_mktime+7)& (0+255),c
  3086  0008E4  50F3               	movf	prodl,w,c
  3087  0008E6  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3088  0008E8  50F4               	movf	prodh,w,c
  3089  0008EA  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3090  0008EC  0E00               	movlw	0
  3091  0008EE  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3092  0008F0  0236               	mulwf	(??_mktime+6)& (0+255),c
  3093  0008F2  50F3               	movf	prodl,w,c
  3094  0008F4  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3095  0008F6  50F4               	movf	prodh,w,c
  3096  0008F8  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3097  0008FA  0E00               	movlw	0
  3098  0008FC  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3099  0008FE  0E3C               	movlw	60
  3100  000900  0238               	mulwf	(??_mktime+8)& (0+255),c
  3101  000902  50F3               	movf	prodl,w,c
  3102  000904  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3103  000906  50F4               	movf	prodh,w,c
  3104  000908  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3105  00090A  0E00               	movlw	0
  3106  00090C  0237               	mulwf	(??_mktime+7)& (0+255),c
  3107  00090E  50F3               	movf	prodl,w,c
  3108  000910  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3109  000912  50F4               	movf	prodh,w,c
  3110  000914  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3111  000916  0E00               	movlw	0
  3112  000918  0236               	mulwf	(??_mktime+6)& (0+255),c
  3113  00091A  50F3               	movf	prodl,w,c
  3114  00091C  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3115  00091E  50F4               	movf	prodh,w,c
  3116  000920  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3117  000922  0E3C               	movlw	60
  3118  000924  0239               	mulwf	(??_mktime+9)& (0+255),c
  3119  000926  50F3               	movf	prodl,w,c
  3120  000928  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3121  00092A  0E00               	movlw	0
  3122  00092C  0238               	mulwf	(??_mktime+8)& (0+255),c
  3123  00092E  50F3               	movf	prodl,w,c
  3124  000930  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3125  000932  0E00               	movlw	0
  3126  000934  0237               	mulwf	(??_mktime+7)& (0+255),c
  3127  000936  50F3               	movf	prodl,w,c
  3128  000938  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3129  00093A  0E00               	movlw	0
  3130  00093C  0236               	mulwf	(??_mktime+6)& (0+255),c
  3131  00093E  50F3               	movf	prodl,w,c
  3132  000940  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3133  000942  5032               	movf	??_mktime+2,w,c
  3134  000944  243A               	addwf	??_mktime+10,w,c
  3135  000946  6E3E               	movwf	mktime@tt,c
  3136  000948  5033               	movf	??_mktime+3,w,c
  3137  00094A  203B               	addwfc	??_mktime+11,w,c
  3138  00094C  6E3F               	movwf	mktime@tt+1,c
  3139  00094E  5034               	movf	??_mktime+4,w,c
  3140  000950  203C               	addwfc	??_mktime+12,w,c
  3141  000952  6E40               	movwf	mktime@tt+2,c
  3142  000954  5035               	movf	??_mktime+5,w,c
  3143  000956  203D               	addwfc	??_mktime+13,w,c
  3144  000958  6E41               	movwf	mktime@tt+3,c
  3145  00095A                     l3786:
  3146  00095A  FFFF               	dw	65535	; assembler added errata NOP
  3147  00095C  C03E  F02C         	movff	mktime@tt,?_mktime
  3148  000960  C03F  F02D         	movff	mktime@tt+1,?_mktime+1
  3149  000964  C040  F02E         	movff	mktime@tt+2,?_mktime+2
  3150  000968  C041  F02F         	movff	mktime@tt+3,?_mktime+3
  3151  00096C  0012               	return		;funcret
  3152  00096E  FFFF               	dw	65535	; errata NOP
  3153  000970                     __end_of_mktime:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           postdec1	equ	0xFE5
  3165                           fsr1h	equ	0xFE2
  3166                           fsr1l	equ	0xFE1
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _ymd_to_scalar *****************
  3176 ;; Defined at:
  3177 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  yr              2   27[COMRAM] unsigned int 
  3180 ;;  mo              2   29[COMRAM] unsigned int 
  3181 ;;  day             2   31[COMRAM] unsigned int 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  scalar          4   39[COMRAM] long 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  4   27[COMRAM] long 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3193 ;;      Params:         6       0       0       0       0       0       0
  3194 ;;      Locals:         6       0       0       0       0       0       0
  3195 ;;      Temps:          4       0       0       0       0       0       0
  3196 ;;      Totals:        16       0       0       0       0       0       0
  3197 ;;Total ram usage:       16 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    4
  3200 ;; This function calls:
  3201 ;;		_isleap
  3202 ;;		_months_to_days
  3203 ;;		_years_to_days
  3204 ;; This function is called by:
  3205 ;;		_mktime
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text5
  3210  001D60                     __ptext5:
  3211                           	opt stack 0
  3212  001D60                     _ymd_to_scalar:
  3213                           	opt stack 23
  3214                           
  3215                           ;incstack = 0
  3216  001D60  FFFF               	dw	65535
  3217  001D62  C01E  F00C         	movff	ymd_to_scalar@mo,months_to_days@month
  3218  001D66  C01F  F00D         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  3219  001D6A  EC6B  F011         	call	_months_to_days	;wreg free
  3220  001D6E  5020               	movf	ymd_to_scalar@day,w,c
  3221  001D70  260C               	addwf	?_months_to_days,f,c
  3222  001D72  5021               	movf	ymd_to_scalar@day+1,w,c
  3223  001D74  220D               	addwfc	?_months_to_days+1,f,c
  3224  001D76  C00C  F028         	movff	?_months_to_days,ymd_to_scalar@scalar
  3225  001D7A  C00D  F029         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  3226  001D7E  6A2A               	clrf	ymd_to_scalar@scalar+2,c
  3227  001D80  6A2B               	clrf	ymd_to_scalar@scalar+3,c
  3228  001D82  501F               	movf	ymd_to_scalar@mo+1,w,c
  3229  001D84  E103               	bnz	u2800
  3230  001D86  0E03               	movlw	3
  3231  001D88  5C1E               	subwf	ymd_to_scalar@mo,w,c
  3232  001D8A  E321               	bnc	l3654
  3233  001D8C                     u2800:
  3234  001D8C  C01C  F00A         	movff	ymd_to_scalar@yr,isleap@yr
  3235  001D90  C01D  F00B         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  3236  001D94  ECD6  F010         	call	_isleap	;wreg free
  3237  001D98  500A               	movf	?_isleap,w,c
  3238  001D9A  100B               	iorwf	?_isleap+1,w,c
  3239  001D9C  E103               	bnz	l3650
  3240  001D9E  6A27               	clrf	_ymd_to_scalar$2122+1,c
  3241  001DA0  0E02               	movlw	2
  3242  001DA2  D002               	goto	L1
  3243  001DA4                     l3650:
  3244  001DA4  6A27               	clrf	_ymd_to_scalar$2122+1,c
  3245  001DA6  0E01               	movlw	1
  3246  001DA8                     L1:
  3247  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  3248  001DAA  6E26               	movwf	_ymd_to_scalar$2122,c
  3249  001DAC  C026  F022         	movff	_ymd_to_scalar$2122,??_ymd_to_scalar
  3250  001DB0  C027  F023         	movff	_ymd_to_scalar$2122+1,??_ymd_to_scalar+1
  3251  001DB4  0E00               	movlw	0
  3252  001DB6  BE23               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  3253  001DB8  0EFF               	movlw	255
  3254  001DBA  6E24               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  3255  001DBC  6E25               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  3256  001DBE  5022               	movf	??_ymd_to_scalar,w,c
  3257  001DC0  5E28               	subwf	ymd_to_scalar@scalar,f,c
  3258  001DC2  5023               	movf	??_ymd_to_scalar+1,w,c
  3259  001DC4  5A29               	subwfb	ymd_to_scalar@scalar+1,f,c
  3260  001DC6  5024               	movf	??_ymd_to_scalar+2,w,c
  3261  001DC8  5A2A               	subwfb	ymd_to_scalar@scalar+2,f,c
  3262  001DCA  5025               	movf	??_ymd_to_scalar+3,w,c
  3263  001DCC  5A2B               	subwfb	ymd_to_scalar@scalar+3,f,c
  3264  001DCE                     l3654:
  3265  001DCE  061C               	decf	ymd_to_scalar@yr,f,c
  3266  001DD0  A0D8               	btfss	status,0,c
  3267  001DD2  061D               	decf	ymd_to_scalar@yr+1,f,c
  3268  001DD4  C01C  F00C         	movff	ymd_to_scalar@yr,years_to_days@yr
  3269  001DD8  C01D  F00D         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  3270  001DDC  EC02  F00B         	call	_years_to_days	;wreg free
  3271  001DE0  500C               	movf	?_years_to_days,w,c
  3272  001DE2  2628               	addwf	ymd_to_scalar@scalar,f,c
  3273  001DE4  500D               	movf	?_years_to_days+1,w,c
  3274  001DE6  2229               	addwfc	ymd_to_scalar@scalar+1,f,c
  3275  001DE8  500E               	movf	?_years_to_days+2,w,c
  3276  001DEA  222A               	addwfc	ymd_to_scalar@scalar+2,f,c
  3277  001DEC  500F               	movf	?_years_to_days+3,w,c
  3278  001DEE  222B               	addwfc	ymd_to_scalar@scalar+3,f,c
  3279  001DF0  C028  F01C         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  3280  001DF4  C029  F01D         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  3281  001DF8  C02A  F01E         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  3282  001DFC  C02B  F01F         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  3283  001E00  0012               	return		;funcret
  3284  001E02  FFFF               	dw	65535	; errata NOP
  3285  001E04                     __end_of_ymd_to_scalar:
  3286                           	opt stack 0
  3287                           tblptru	equ	0xFF8
  3288                           tblptrh	equ	0xFF7
  3289                           tblptrl	equ	0xFF6
  3290                           tablat	equ	0xFF5
  3291                           prodh	equ	0xFF4
  3292                           prodl	equ	0xFF3
  3293                           intcon	equ	0xFF2
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           postdec1	equ	0xFE5
  3297                           fsr1h	equ	0xFE2
  3298                           fsr1l	equ	0xFE1
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           plusw2	equ	0xFDB
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _years_to_days *****************
  3308 ;; Defined at:
  3309 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  yr              2   11[COMRAM] unsigned int 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  ret             4   23[COMRAM] long 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  4   11[COMRAM] long 
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3323 ;;      Params:         4       0       0       0       0       0       0
  3324 ;;      Locals:         4       0       0       0       0       0       0
  3325 ;;      Temps:          8       0       0       0       0       0       0
  3326 ;;      Totals:        16       0       0       0       0       0       0
  3327 ;;Total ram usage:       16 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    3
  3330 ;; This function calls:
  3331 ;;		___lwdiv
  3332 ;; This function is called by:
  3333 ;;		_ymd_to_scalar
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text6
  3338  001604                     __ptext6:
  3339                           	opt stack 0
  3340  001604                     _years_to_days:
  3341                           	opt stack 23
  3342                           
  3343                           ;incstack = 0
  3344  001604  FFFF               	dw	65535
  3345  001606  500C               	movf	years_to_days@yr,w,c
  3346  001608  6E10               	movwf	??_years_to_days& (0+255),c
  3347  00160A  500D               	movf	years_to_days@yr+1,w,c
  3348  00160C  6E11               	movwf	(??_years_to_days+1)& (0+255),c
  3349  00160E  6A12               	clrf	(??_years_to_days+2)& (0+255),c
  3350  001610  6A13               	clrf	(??_years_to_days+3)& (0+255),c
  3351  001612  0E6D               	movlw	109
  3352  001614  0210               	mulwf	??_years_to_days& (0+255),c
  3353  001616  CFF3 F014          	movff	prodl,??_years_to_days+4
  3354  00161A  CFF4 F015          	movff	prodh,??_years_to_days+5
  3355  00161E  6A16               	clrf	(??_years_to_days+6)& (0+255),c
  3356  001620  6A17               	clrf	(??_years_to_days+7)& (0+255),c
  3357  001622  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  3358  001624  50F3               	movf	prodl,w,c
  3359  001626  2615               	addwf	(??_years_to_days+5)& (0+255),f,c
  3360  001628  50F4               	movf	prodh,w,c
  3361  00162A  2216               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3362  00162C  0E00               	movlw	0
  3363  00162E  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3364  001630  0E01               	movlw	1
  3365  001632  0210               	mulwf	??_years_to_days& (0+255),c
  3366  001634  50F3               	movf	prodl,w,c
  3367  001636  2615               	addwf	(??_years_to_days+5)& (0+255),f,c
  3368  001638  50F4               	movf	prodh,w,c
  3369  00163A  2216               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3370  00163C  0E00               	movlw	0
  3371  00163E  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3372  001640  0E6D               	movlw	109
  3373  001642  0212               	mulwf	(??_years_to_days+2)& (0+255),c
  3374  001644  50F3               	movf	prodl,w,c
  3375  001646  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  3376  001648  50F4               	movf	prodh,w,c
  3377  00164A  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3378  00164C  0E01               	movlw	1
  3379  00164E  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  3380  001650  50F3               	movf	prodl,w,c
  3381  001652  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  3382  001654  50F4               	movf	prodh,w,c
  3383  001656  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3384  001658  0E00               	movlw	0
  3385  00165A  0210               	mulwf	??_years_to_days& (0+255),c
  3386  00165C  50F3               	movf	prodl,w,c
  3387  00165E  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  3388  001660  50F4               	movf	prodh,w,c
  3389  001662  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3390  001664  0E6D               	movlw	109
  3391  001666  0213               	mulwf	(??_years_to_days+3)& (0+255),c
  3392  001668  50F3               	movf	prodl,w,c
  3393  00166A  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  3394  00166C  0E01               	movlw	1
  3395  00166E  0212               	mulwf	(??_years_to_days+2)& (0+255),c
  3396  001670  50F3               	movf	prodl,w,c
  3397  001672  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  3398  001674  0E00               	movlw	0
  3399  001676  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  3400  001678  50F3               	movf	prodl,w,c
  3401  00167A  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  3402  00167C  0E00               	movlw	0
  3403  00167E  0210               	mulwf	??_years_to_days& (0+255),c
  3404  001680  50F3               	movf	prodl,w,c
  3405  001682  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  3406  001684  C014  F018         	movff	??_years_to_days+4,years_to_days@ret
  3407  001688  C015  F019         	movff	??_years_to_days+5,years_to_days@ret+1
  3408  00168C  C016  F01A         	movff	??_years_to_days+6,years_to_days@ret+2
  3409  001690  C017  F01B         	movff	??_years_to_days+7,years_to_days@ret+3
  3410  001694  C00C  F005         	movff	years_to_days@yr,___lwdiv@dividend
  3411  001698  C00D  F006         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3412  00169C  6A08               	clrf	___lwdiv@divisor+1,c
  3413  00169E  0E64               	movlw	100
  3414  0016A0  6E07               	movwf	___lwdiv@divisor,c
  3415  0016A2  ECAC  F010         	call	___lwdiv	;wreg free
  3416  0016A6  C00C  F010         	movff	years_to_days@yr,??_years_to_days
  3417  0016AA  C00D  F011         	movff	years_to_days@yr+1,??_years_to_days+1
  3418  0016AE  90D8               	bcf	status,0,c
  3419  0016B0  3211               	rrcf	??_years_to_days+1,f,c
  3420  0016B2  3210               	rrcf	??_years_to_days,f,c
  3421  0016B4  90D8               	bcf	status,0,c
  3422  0016B6  3211               	rrcf	??_years_to_days+1,f,c
  3423  0016B8  3210               	rrcf	??_years_to_days,f,c
  3424  0016BA  5005               	movf	?___lwdiv,w,c
  3425  0016BC  5E10               	subwf	??_years_to_days,f,c
  3426  0016BE  5006               	movf	?___lwdiv+1,w,c
  3427  0016C0  5A11               	subwfb	??_years_to_days+1,f,c
  3428  0016C2  5010               	movf	??_years_to_days,w,c
  3429  0016C4  2618               	addwf	years_to_days@ret,f,c
  3430  0016C6  5011               	movf	??_years_to_days+1,w,c
  3431  0016C8  2219               	addwfc	years_to_days@ret+1,f,c
  3432  0016CA  0E00               	movlw	0
  3433  0016CC  221A               	addwfc	years_to_days@ret+2,f,c
  3434  0016CE  221B               	addwfc	years_to_days@ret+3,f,c
  3435  0016D0  C00C  F005         	movff	years_to_days@yr,___lwdiv@dividend
  3436  0016D4  C00D  F006         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3437  0016D8  0E01               	movlw	1
  3438  0016DA  6E08               	movwf	___lwdiv@divisor+1,c
  3439  0016DC  0E90               	movlw	144
  3440  0016DE  6E07               	movwf	___lwdiv@divisor,c
  3441  0016E0  ECAC  F010         	call	___lwdiv	;wreg free
  3442  0016E4  5005               	movf	?___lwdiv,w,c
  3443  0016E6  2618               	addwf	years_to_days@ret,f,c
  3444  0016E8  5006               	movf	?___lwdiv+1,w,c
  3445  0016EA  2219               	addwfc	years_to_days@ret+1,f,c
  3446  0016EC  0E00               	movlw	0
  3447  0016EE  221A               	addwfc	years_to_days@ret+2,f,c
  3448  0016F0  221B               	addwfc	years_to_days@ret+3,f,c
  3449  0016F2  C018  F00C         	movff	years_to_days@ret,?_years_to_days
  3450  0016F6  C019  F00D         	movff	years_to_days@ret+1,?_years_to_days+1
  3451  0016FA  C01A  F00E         	movff	years_to_days@ret+2,?_years_to_days+2
  3452  0016FE  C01B  F00F         	movff	years_to_days@ret+3,?_years_to_days+3
  3453  001702  0C00               	retlw	0	;funcret
  3454  001704  FFFF               	dw	65535	; errata NOP
  3455  001706                     __end_of_years_to_days:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           intcon	equ	0xFF2
  3464                           postinc0	equ	0xFEE
  3465                           wreg	equ	0xFE8
  3466                           postdec1	equ	0xFE5
  3467                           fsr1h	equ	0xFE2
  3468                           fsr1l	equ	0xFE1
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           plusw2	equ	0xFDB
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _months_to_days *****************
  3478 ;; Defined at:
  3479 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  month           2   11[COMRAM] unsigned int 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  2   11[COMRAM] unsigned int 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3493 ;;      Params:         2       0       0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0
  3495 ;;      Temps:          4       0       0       0       0       0       0
  3496 ;;      Totals:         6       0       0       0       0       0       0
  3497 ;;Total ram usage:        6 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		___lwdiv
  3502 ;; This function is called by:
  3503 ;;		_ymd_to_scalar
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text7
  3508  0022D6                     __ptext7:
  3509                           	opt stack 0
  3510  0022D6                     _months_to_days:
  3511                           	opt stack 23
  3512                           
  3513                           ;incstack = 0
  3514  0022D6  FFFF               	dw	65535
  3515  0022D8  0EF1               	movlw	241
  3516  0022DA  6E0E               	movwf	??_months_to_days& (0+255),c
  3517  0022DC  0E0B               	movlw	11
  3518  0022DE  6E0F               	movwf	(??_months_to_days+1)& (0+255),c
  3519  0022E0  500E               	movf	??_months_to_days& (0+255),w,c
  3520  0022E2  020C               	mulwf	months_to_days@month,c
  3521  0022E4  CFF3 F010          	movff	prodl,??_months_to_days+2
  3522  0022E8  CFF4 F011          	movff	prodh,??_months_to_days+3
  3523  0022EC  020D               	mulwf	months_to_days@month+1,c
  3524  0022EE  50F3               	movf	prodl,w,c
  3525  0022F0  2611               	addwf	(??_months_to_days+3)& (0+255),f,c
  3526  0022F2  500F               	movf	(??_months_to_days+1)& (0+255),w,c
  3527  0022F4  020C               	mulwf	months_to_days@month,c
  3528  0022F6  50F3               	movf	prodl,w,c
  3529  0022F8  2611               	addwf	(??_months_to_days+3)& (0+255),f,c
  3530  0022FA  0E41               	movlw	65
  3531  0022FC  2410               	addwf	??_months_to_days+2,w,c
  3532  0022FE  6E05               	movwf	___lwdiv@dividend,c
  3533  002300  0EF4               	movlw	244
  3534  002302  2011               	addwfc	??_months_to_days+3,w,c
  3535  002304  6E06               	movwf	___lwdiv@dividend+1,c
  3536  002306  6A08               	clrf	___lwdiv@divisor+1,c
  3537  002308  0E64               	movlw	100
  3538  00230A  6E07               	movwf	___lwdiv@divisor,c
  3539  00230C  ECAC  F010         	call	___lwdiv	;wreg free
  3540  002310  C005  F00C         	movff	?___lwdiv,?_months_to_days
  3541  002314  C006  F00D         	movff	?___lwdiv+1,?_months_to_days+1
  3542  002318  0012               	return		;funcret
  3543  00231A  FFFF               	dw	65535	; errata NOP
  3544  00231C                     __end_of_months_to_days:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           postinc0	equ	0xFEE
  3554                           wreg	equ	0xFE8
  3555                           postdec1	equ	0xFE5
  3556                           fsr1h	equ	0xFE2
  3557                           fsr1l	equ	0xFE1
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           plusw2	equ	0xFDB
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function ___lwdiv *****************
  3567 ;; Defined at:
  3568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  dividend        2    4[COMRAM] unsigned int 
  3571 ;;  divisor         2    6[COMRAM] unsigned int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  quotient        2    8[COMRAM] unsigned int 
  3574 ;;  counter         1   10[COMRAM] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  2    4[COMRAM] unsigned int 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3584 ;;      Params:         4       0       0       0       0       0       0
  3585 ;;      Locals:         3       0       0       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0       0
  3587 ;;      Totals:         7       0       0       0       0       0       0
  3588 ;;Total ram usage:        7 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    2
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_months_to_days
  3595 ;;		_years_to_days
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text8
  3600  002158                     __ptext8:
  3601                           	opt stack 0
  3602  002158                     ___lwdiv:
  3603                           	opt stack 23
  3604                           
  3605                           ;incstack = 0
  3606  002158  FFFF               	dw	65535
  3607  00215A  6A09               	clrf	___lwdiv@quotient,c
  3608  00215C  6A0A               	clrf	___lwdiv@quotient+1,c
  3609  00215E  5007               	movf	___lwdiv@divisor,w,c
  3610  002160  1008               	iorwf	___lwdiv@divisor+1,w,c
  3611  002162  E01E               	bz	l1325
  3612  002164  0E01               	movlw	1
  3613  002166  6E0B               	movwf	___lwdiv@counter,c
  3614  002168  D005               	goto	l3524
  3615  00216A                     l3522:
  3616  00216A  FFFF               	dw	65535	; assembler added errata NOP
  3617  00216C  90D8               	bcf	status,0,c
  3618  00216E  3607               	rlcf	___lwdiv@divisor,f,c
  3619  002170  3608               	rlcf	___lwdiv@divisor+1,f,c
  3620  002172  2A0B               	incf	___lwdiv@counter,f,c
  3621  002174                     l3524:
  3622  002174  FFFF               	dw	65535	; assembler added errata NOP
  3623  002176  AE08               	btfss	___lwdiv@divisor+1,7,c
  3624  002178  D7F8               	goto	l3522
  3625  00217A                     l3526:
  3626  00217A  FFFF               	dw	65535	; assembler added errata NOP
  3627  00217C  90D8               	bcf	status,0,c
  3628  00217E  3609               	rlcf	___lwdiv@quotient,f,c
  3629  002180  360A               	rlcf	___lwdiv@quotient+1,f,c
  3630  002182  5007               	movf	___lwdiv@divisor,w,c
  3631  002184  5C05               	subwf	___lwdiv@dividend,w,c
  3632  002186  5008               	movf	___lwdiv@divisor+1,w,c
  3633  002188  5806               	subwfb	___lwdiv@dividend+1,w,c
  3634  00218A  E305               	bnc	l3534
  3635  00218C  5007               	movf	___lwdiv@divisor,w,c
  3636  00218E  5E05               	subwf	___lwdiv@dividend,f,c
  3637  002190  5008               	movf	___lwdiv@divisor+1,w,c
  3638  002192  5A06               	subwfb	___lwdiv@dividend+1,f,c
  3639  002194  8009               	bsf	___lwdiv@quotient,0,c
  3640  002196                     l3534:
  3641  002196  90D8               	bcf	status,0,c
  3642  002198  3208               	rrcf	___lwdiv@divisor+1,f,c
  3643  00219A  3207               	rrcf	___lwdiv@divisor,f,c
  3644  00219C  2E0B               	decfsz	___lwdiv@counter,f,c
  3645  00219E  D7ED               	goto	l3526
  3646  0021A0                     l1325:
  3647  0021A0  C009  F005         	movff	___lwdiv@quotient,?___lwdiv
  3648  0021A4  C00A  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3649  0021A8  0012               	return		;funcret
  3650  0021AA  FFFF               	dw	65535	; errata NOP
  3651  0021AC                     __end_of___lwdiv:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           prodh	equ	0xFF4
  3658                           prodl	equ	0xFF3
  3659                           intcon	equ	0xFF2
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postdec1	equ	0xFE5
  3663                           fsr1h	equ	0xFE2
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           plusw2	equ	0xFDB
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _isleap *****************
  3674 ;; Defined at:
  3675 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  yr              2    9[COMRAM] unsigned int 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2    9[COMRAM] int 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3689 ;;      Params:         2       0       0       0       0       0       0
  3690 ;;      Locals:         1       0       0       0       0       0       0
  3691 ;;      Temps:          1       0       0       0       0       0       0
  3692 ;;      Totals:         4       0       0       0       0       0       0
  3693 ;;Total ram usage:        4 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    3
  3696 ;; This function calls:
  3697 ;;		___lwmod
  3698 ;; This function is called by:
  3699 ;;		_ymd_to_scalar
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text9
  3704  0021AC                     __ptext9:
  3705                           	opt stack 0
  3706  0021AC                     _isleap:
  3707                           	opt stack 23
  3708                           
  3709                           ;incstack = 0
  3710  0021AC  FFFF               	dw	65535
  3711  0021AE  0E01               	movlw	1
  3712  0021B0  6E0D               	movwf	_isleap$2109,c
  3713  0021B2  C00A  F005         	movff	isleap@yr,___lwmod@dividend
  3714  0021B6  C00B  F006         	movff	isleap@yr+1,___lwmod@dividend+1
  3715  0021BA  6E08               	movwf	___lwmod@divisor+1,c
  3716  0021BC  0E90               	movlw	144
  3717  0021BE  6E07               	movwf	___lwmod@divisor,c
  3718  0021C0  EC47  F011         	call	___lwmod	;wreg free
  3719  0021C4  5005               	movf	?___lwmod,w,c
  3720  0021C6  1006               	iorwf	?___lwmod+1,w,c
  3721  0021C8  E012               	bz	l1351
  3722  0021CA  C00A  F00C         	movff	isleap@yr,??_isleap
  3723  0021CE  0E03               	movlw	3
  3724  0021D0  160C               	andwf	??_isleap,f,c
  3725  0021D2  E10C               	bnz	l3514
  3726  0021D4  C00A  F005         	movff	isleap@yr,___lwmod@dividend
  3727  0021D8  C00B  F006         	movff	isleap@yr+1,___lwmod@dividend+1
  3728  0021DC  6A08               	clrf	___lwmod@divisor+1,c
  3729  0021DE  0E64               	movlw	100
  3730  0021E0  6E07               	movwf	___lwmod@divisor,c
  3731  0021E2  EC47  F011         	call	___lwmod	;wreg free
  3732  0021E6  5005               	movf	?___lwmod,w,c
  3733  0021E8  1006               	iorwf	?___lwmod+1,w,c
  3734  0021EA  E101               	bnz	l1351
  3735  0021EC                     l3514:
  3736  0021EC  6A0D               	clrf	_isleap$2109,c
  3737  0021EE                     l1351:
  3738  0021EE  C00D  F00A         	movff	_isleap$2109,?_isleap
  3739  0021F2  6A0B               	clrf	?_isleap+1,c
  3740  0021F4  0012               	return		;funcret
  3741  0021F6  FFFF               	dw	65535	; errata NOP
  3742  0021F8                     __end_of_isleap:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           plusw2	equ	0xFDB
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function ___lwmod *****************
  3765 ;; Defined at:
  3766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  dividend        2    4[COMRAM] unsigned int 
  3769 ;;  divisor         2    6[COMRAM] unsigned int 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  counter         1    8[COMRAM] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  2    4[COMRAM] unsigned int 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3781 ;;      Params:         4       0       0       0       0       0       0
  3782 ;;      Locals:         1       0       0       0       0       0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0
  3784 ;;      Totals:         5       0       0       0       0       0       0
  3785 ;;Total ram usage:        5 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    2
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_isleap
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text10
  3796  00228E                     __ptext10:
  3797                           	opt stack 0
  3798  00228E                     ___lwmod:
  3799                           	opt stack 23
  3800                           
  3801                           ;incstack = 0
  3802  00228E  FFFF               	dw	65535
  3803  002290  5007               	movf	___lwmod@divisor,w,c
  3804  002292  1008               	iorwf	___lwmod@divisor+1,w,c
  3805  002294  E01A               	bz	l1335
  3806  002296  0E01               	movlw	1
  3807  002298  6E09               	movwf	___lwmod@counter,c
  3808  00229A  D005               	goto	l3544
  3809  00229C                     l3542:
  3810  00229C  FFFF               	dw	65535	; assembler added errata NOP
  3811  00229E  90D8               	bcf	status,0,c
  3812  0022A0  3607               	rlcf	___lwmod@divisor,f,c
  3813  0022A2  3608               	rlcf	___lwmod@divisor+1,f,c
  3814  0022A4  2A09               	incf	___lwmod@counter,f,c
  3815  0022A6                     l3544:
  3816  0022A6  FFFF               	dw	65535	; assembler added errata NOP
  3817  0022A8  AE08               	btfss	___lwmod@divisor+1,7,c
  3818  0022AA  D7F8               	goto	l3542
  3819  0022AC                     l3546:
  3820  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  3821  0022AE  5007               	movf	___lwmod@divisor,w,c
  3822  0022B0  5C05               	subwf	___lwmod@dividend,w,c
  3823  0022B2  5008               	movf	___lwmod@divisor+1,w,c
  3824  0022B4  5806               	subwfb	___lwmod@dividend+1,w,c
  3825  0022B6  E304               	bnc	l3550
  3826  0022B8  5007               	movf	___lwmod@divisor,w,c
  3827  0022BA  5E05               	subwf	___lwmod@dividend,f,c
  3828  0022BC  5008               	movf	___lwmod@divisor+1,w,c
  3829  0022BE  5A06               	subwfb	___lwmod@dividend+1,f,c
  3830  0022C0                     l3550:
  3831  0022C0  90D8               	bcf	status,0,c
  3832  0022C2  3208               	rrcf	___lwmod@divisor+1,f,c
  3833  0022C4  3207               	rrcf	___lwmod@divisor,f,c
  3834  0022C6  2E09               	decfsz	___lwmod@counter,f,c
  3835  0022C8  D7F1               	goto	l3546
  3836  0022CA                     l1335:
  3837  0022CA  C005  F005         	movff	___lwmod@dividend,?___lwmod
  3838  0022CE  C006  F006         	movff	___lwmod@dividend+1,?___lwmod+1
  3839  0022D2  0012               	return		;funcret
  3840  0022D4  FFFF               	dw	65535	; errata NOP
  3841  0022D6                     __end_of___lwmod:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1h	equ	0xFE2
  3854                           fsr1l	equ	0xFE1
  3855                           indf2	equ	0xFDF
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           plusw2	equ	0xFDB
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _SetTime *****************
  3864 ;; Defined at:
  3865 ;;		line 168 in file "user.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  newTime         1    wreg     PTR long 
  3868 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  newTime         1    4[COMRAM] PTR long 
  3871 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr2l, fsr2h, status,2
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3881 ;;      Params:         0       0       0       0       0       0       0
  3882 ;;      Locals:         1       0       0       0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0
  3884 ;;      Totals:         1       0       0       0       0       0       0
  3885 ;;Total ram usage:        1 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    2
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_SetTimeFromRegs
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text11
  3896  002524                     __ptext11:
  3897                           	opt stack 0
  3898  002524                     _SetTime:
  3899                           	opt stack 26
  3900                           
  3901                           ;incstack = 0
  3902  002524  FFFF               	dw	65535
  3903                           
  3904                           ;SetTime@newTime stored from wreg
  3905  002526  6E05               	movwf	SetTime@newTime,c
  3906                           
  3907                           ;user.c: 170: currentTime = *newTime;
  3908  002528  5005               	movf	SetTime@newTime,w,c
  3909  00252A  6ED9               	movwf	fsr2l,c
  3910  00252C  6ADA               	clrf	fsr2h,c
  3911  00252E  CFDE F0D2          	movff	postinc2,_currentTime
  3912  002532  CFDE F0D3          	movff	postinc2,_currentTime+1
  3913  002536  CFDE F0D4          	movff	postinc2,_currentTime+2
  3914  00253A  CFDE F0D5          	movff	postinc2,_currentTime+3
  3915  00253E  0012               	return		;funcret
  3916  002540  FFFF               	dw	65535	; errata NOP
  3917  002542                     __end_of_SetTime:
  3918                           	opt stack 0
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           plusw2	equ	0xFDB
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _SetHourMin *****************
  3940 ;; Defined at:
  3941 ;;		line 254 in file "interrupts.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  newHour         1    wreg     PTR int 
  3944 ;;		 -> SetTimeFromRegs@newTime(18), 
  3945 ;;  newMin          1    4[COMRAM] PTR int 
  3946 ;;		 -> SetTimeFromRegs@newTime(18), 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  newHour         1    5[COMRAM] PTR int 
  3949 ;;		 -> SetTimeFromRegs@newTime(18), 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, fsr2l, fsr2h, status,2
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3959 ;;      Params:         1       0       0       0       0       0       0
  3960 ;;      Locals:         1       0       0       0       0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0
  3962 ;;      Totals:         2       0       0       0       0       0       0
  3963 ;;Total ram usage:        2 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_SetTimeFromRegs
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text12
  3974  002542                     __ptext12:
  3975                           	opt stack 0
  3976  002542                     _SetHourMin:
  3977                           	opt stack 26
  3978                           
  3979                           ;incstack = 0
  3980  002542  FFFF               	dw	65535
  3981                           
  3982                           ;SetHourMin@newHour stored from wreg
  3983  002544  6E06               	movwf	SetHourMin@newHour,c
  3984                           
  3985                           ;interrupts.c: 256: globalHours = *newHour;
  3986  002546  5006               	movf	SetHourMin@newHour,w,c
  3987  002548  6ED9               	movwf	fsr2l,c
  3988  00254A  6ADA               	clrf	fsr2h,c
  3989  00254C  50DF               	movf	indf2,w,c
  3990  00254E  6E78               	movwf	_globalHours,c	;volatile
  3991                           
  3992                           ;interrupts.c: 257: globalMinutes = *newMin;
  3993  002550  5005               	movf	SetHourMin@newMin,w,c
  3994  002552  6ED9               	movwf	fsr2l,c
  3995  002554  6ADA               	clrf	fsr2h,c
  3996  002556  50DF               	movf	indf2,w,c
  3997  002558  6E76               	movwf	_globalMinutes,c	;volatile
  3998  00255A  0012               	return		;funcret
  3999  00255C  FFFF               	dw	65535	; errata NOP
  4000  00255E                     __end_of_SetHourMin:
  4001                           	opt stack 0
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           postdec2	equ	0xFDD
  4017                           plusw2	equ	0xFDB
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _LightStatusLed *****************
  4023 ;; Defined at:
  4024 ;;		line 390 in file "main.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  row             1    wreg     unsigned char 
  4027 ;;  on              1    4[COMRAM] unsigned char 
  4028 ;;  blink           1    5[COMRAM] unsigned char 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  row             1   11[COMRAM] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4040 ;;      Params:         2       0       0       0       0       0       0
  4041 ;;      Locals:         1       0       0       0       0       0       0
  4042 ;;      Temps:          5       0       0       0       0       0       0
  4043 ;;      Totals:         8       0       0       0       0       0       0
  4044 ;;Total ram usage:        8 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_main
  4051 ;;		_SetTimeFromRegs
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text13
  4056  001806                     __ptext13:
  4057                           	opt stack 0
  4058  001806                     _LightStatusLed:
  4059                           	opt stack 26
  4060                           
  4061                           ;incstack = 0
  4062  001806  FFFF               	dw	65535
  4063                           
  4064                           ;LightStatusLed@row stored from wreg
  4065  001808  6E0C               	movwf	LightStatusLed@row,c
  4066                           
  4067                           ;main.c: 392: if(row > 7)
  4068  00180A  0E07               	movlw	7
  4069  00180C  640C               	cpfsgt	LightStatusLed@row,c
  4070  00180E  D001               	goto	l3710
  4071  001810  D072               	goto	l290
  4072  001812                     l3710:
  4073  001812  FFFF               	dw	65535	; assembler added errata NOP
  4074                           
  4075                           ;main.c: 394: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4076  001814  5005               	movf	LightStatusLed@on,w,c
  4077  001816  E010               	bz	l3714
  4078  001818  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4079  00181C  0E01               	movlw	1
  4080  00181E  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4081  001820  2A07               	incf	??_LightStatusLed,f,c
  4082  001822  D003               	goto	u2874
  4083  001824                     u2875:
  4084  001824  FFFF               	dw	65535	; assembler added errata NOP
  4085  001826  90D8               	bcf	status,0,c
  4086  001828  3608               	rlcf	??_LightStatusLed+1,f,c
  4087  00182A                     u2874:
  4088  00182A  FFFF               	dw	65535	; assembler added errata NOP
  4089  00182C  2E07               	decfsz	??_LightStatusLed,f,c
  4090  00182E  D7FA               	goto	u2875
  4091  001830  5008               	movf	??_LightStatusLed+1,w,c
  4092  001832  0100               	movlb	0	; () banked
  4093  001834  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4094  001836  D00F               	goto	l3716
  4095  001838                     l3714:
  4096  001838  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4097  00183C  0E01               	movlw	1
  4098  00183E  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4099  001840  2A07               	incf	??_LightStatusLed,f,c
  4100  001842  D003               	goto	u2884
  4101  001844                     u2885:
  4102  001844  FFFF               	dw	65535	; assembler added errata NOP
  4103  001846  90D8               	bcf	status,0,c
  4104  001848  3608               	rlcf	??_LightStatusLed+1,f,c
  4105  00184A                     u2884:
  4106  00184A  FFFF               	dw	65535	; assembler added errata NOP
  4107  00184C  2E07               	decfsz	??_LightStatusLed,f,c
  4108  00184E  D7FA               	goto	u2885
  4109  001850  1C08               	comf	??_LightStatusLed+1,w,c
  4110  001852  0100               	movlb	0	; () banked
  4111  001854  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4112  001856                     l3716:
  4113  001856  FFFF               	dw	65535	; assembler added errata NOP
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;main.c: 395: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4117  001858  5006               	movf	LightStatusLed@blink,w,c
  4118  00185A  E010               	bz	l3720
  4119                           
  4120                           ; BSR set to: 0
  4121  00185C  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4122  001860  0E01               	movlw	1
  4123  001862  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4124  001864  2A07               	incf	??_LightStatusLed,f,c
  4125  001866  D003               	goto	u2904
  4126  001868                     u2905:
  4127  001868  FFFF               	dw	65535	; assembler added errata NOP
  4128  00186A  90D8               	bcf	status,0,c
  4129  00186C  3608               	rlcf	??_LightStatusLed+1,f,c
  4130  00186E                     u2904:
  4131  00186E  FFFF               	dw	65535	; assembler added errata NOP
  4132  001870  2E07               	decfsz	??_LightStatusLed,f,c
  4133  001872  D7FA               	goto	u2905
  4134  001874  5008               	movf	??_LightStatusLed+1,w,c
  4135  001876  0100               	movlb	0	; () banked
  4136  001878  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4137  00187A  D00F               	goto	l3722
  4138  00187C                     l3720:
  4139                           
  4140                           ; BSR set to: 0
  4141  00187C  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4142  001880  0E01               	movlw	1
  4143  001882  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4144  001884  2A07               	incf	??_LightStatusLed,f,c
  4145  001886  D003               	goto	u2914
  4146  001888                     u2915:
  4147  001888  FFFF               	dw	65535	; assembler added errata NOP
  4148  00188A  90D8               	bcf	status,0,c
  4149  00188C  3608               	rlcf	??_LightStatusLed+1,f,c
  4150  00188E                     u2914:
  4151  00188E  FFFF               	dw	65535	; assembler added errata NOP
  4152  001890  2E07               	decfsz	??_LightStatusLed,f,c
  4153  001892  D7FA               	goto	u2915
  4154  001894  1C08               	comf	??_LightStatusLed+1,w,c
  4155  001896  0100               	movlb	0	; () banked
  4156  001898  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4157  00189A                     l3722:
  4158  00189A  FFFF               	dw	65535	; assembler added errata NOP
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;main.c: 396: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4162  00189C  5005               	movf	LightStatusLed@on,w,c
  4163  00189E  E014               	bz	l3726
  4164                           
  4165                           ; BSR set to: 0
  4166  0018A0  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4167  0018A4  0E01               	movlw	1
  4168  0018A6  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4169  0018A8  6A09               	clrf	(??_LightStatusLed+2)& (0+255),c
  4170  0018AA  2A07               	incf	??_LightStatusLed,f,c
  4171  0018AC  D004               	goto	u2934
  4172  0018AE                     u2935:
  4173  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  4174  0018B0  90D8               	bcf	status,0,c
  4175  0018B2  3608               	rlcf	??_LightStatusLed+1,f,c
  4176  0018B4  3609               	rlcf	??_LightStatusLed+2,f,c
  4177  0018B6                     u2934:
  4178  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  4179  0018B8  2E07               	decfsz	??_LightStatusLed,f,c
  4180  0018BA  D7F9               	goto	u2935
  4181  0018BC  5008               	movf	??_LightStatusLed+1,w,c
  4182  0018BE  0100               	movlb	0	; () banked
  4183  0018C0  13D6               	iorwf	__MODBUSCoils& (0+255),f,b
  4184  0018C2  5009               	movf	??_LightStatusLed+2,w,c
  4185  0018C4  13D7               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4186  0018C6  D017               	goto	l290
  4187  0018C8                     l3726:
  4188                           
  4189                           ; BSR set to: 0
  4190  0018C8  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4191  0018CC  0E01               	movlw	1
  4192  0018CE  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4193  0018D0  6A09               	clrf	(??_LightStatusLed+2)& (0+255),c
  4194  0018D2  2A07               	incf	??_LightStatusLed,f,c
  4195  0018D4  D004               	goto	u2944
  4196  0018D6                     u2945:
  4197  0018D6  FFFF               	dw	65535	; assembler added errata NOP
  4198  0018D8  90D8               	bcf	status,0,c
  4199  0018DA  3608               	rlcf	??_LightStatusLed+1,f,c
  4200  0018DC  3609               	rlcf	??_LightStatusLed+2,f,c
  4201  0018DE                     u2944:
  4202  0018DE  FFFF               	dw	65535	; assembler added errata NOP
  4203  0018E0  2E07               	decfsz	??_LightStatusLed,f,c
  4204  0018E2  D7F9               	goto	u2945
  4205  0018E4  1C08               	comf	??_LightStatusLed+1,w,c
  4206  0018E6  6E0A               	movwf	(??_LightStatusLed+3)& (0+255),c
  4207  0018E8  1C09               	comf	??_LightStatusLed+2,w,c
  4208  0018EA  6E0B               	movwf	(??_LightStatusLed+4)& (0+255),c
  4209  0018EC  500A               	movf	??_LightStatusLed+3,w,c
  4210  0018EE  0100               	movlb	0	; () banked
  4211  0018F0  17D6               	andwf	__MODBUSCoils& (0+255),f,b
  4212  0018F2  500B               	movf	??_LightStatusLed+4,w,c
  4213  0018F4  17D7               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4214  0018F6                     l290:
  4215  0018F6  FFFF               	dw	65535	; assembler added errata NOP
  4216  0018F8  0012               	return		;funcret
  4217  0018FA  FFFF               	dw	65535	; errata NOP
  4218  0018FC                     __end_of_LightStatusLed:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           postinc0	equ	0xFEE
  4228                           wreg	equ	0xFE8
  4229                           postdec1	equ	0xFE5
  4230                           fsr1h	equ	0xFE2
  4231                           fsr1l	equ	0xFE1
  4232                           indf2	equ	0xFDF
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           plusw2	equ	0xFDB
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           
  4240 ;; *************** function _ModbusGetLastCommand *****************
  4241 ;; Defined at:
  4242 ;;		line 853 in file "ModbusRtu.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  address         1    wreg     PTR unsigned short 
  4245 ;;		 -> io_poll@lastAddress(2), 
  4246 ;;  count           1    4[COMRAM] PTR unsigned short 
  4247 ;;		 -> io_poll@lastEndAddress(2), 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  address         1    6[COMRAM] PTR unsigned short 
  4250 ;;		 -> io_poll@lastAddress(2), 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      PTR enum E2336
  4253 ;; Registers used:
  4254 ;;		wreg, fsr2l, fsr2h, status,2
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4260 ;;      Params:         2       0       0       0       0       0       0
  4261 ;;      Locals:         1       0       0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0
  4263 ;;      Totals:         3       0       0       0       0       0       0
  4264 ;;Total ram usage:        3 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    2
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_io_poll
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text14
  4275  00245A                     __ptext14:
  4276                           	opt stack 0
  4277  00245A                     _ModbusGetLastCommand:
  4278                           	opt stack 27
  4279                           
  4280                           ;incstack = 0
  4281  00245A  FFFF               	dw	65535
  4282                           
  4283                           ;ModbusGetLastCommand@address stored from wreg
  4284  00245C  6E07               	movwf	ModbusGetLastCommand@address,c
  4285                           
  4286                           ;ModbusRtu.c: 855: if(address != (0))
  4287  00245E  5007               	movf	ModbusGetLastCommand@address,w,c
  4288  002460  E007               	bz	l3954
  4289                           
  4290                           ;ModbusRtu.c: 856: *address = _lastAddress;
  4291  002462  5007               	movf	ModbusGetLastCommand@address,w,c
  4292  002464  6ED9               	movwf	fsr2l,c
  4293  002466  6ADA               	clrf	fsr2h,c
  4294  002468  C0B6  FFDE         	movff	__lastAddress,postinc2
  4295  00246C  C0B7  FFDD         	movff	__lastAddress+1,postdec2
  4296  002470                     l3954:
  4297                           
  4298                           ;ModbusRtu.c: 857: if(count != (0))
  4299  002470  5005               	movf	ModbusGetLastCommand@count,w,c
  4300  002472  E007               	bz	l3958
  4301                           
  4302                           ;ModbusRtu.c: 858: *count = _lastCount;
  4303  002474  5005               	movf	ModbusGetLastCommand@count,w,c
  4304  002476  6ED9               	movwf	fsr2l,c
  4305  002478  6ADA               	clrf	fsr2h,c
  4306  00247A  C0B8  FFDE         	movff	__lastCount,postinc2
  4307  00247E  C0B9  FFDD         	movff	__lastCount+1,postdec2
  4308  002482                     l3958:
  4309                           
  4310                           ;ModbusRtu.c: 859: return &_lastCommand;
  4311  002482  0ED8               	movlw	__lastCommand& (0+255)
  4312  002484  0012               	return		;funcret
  4313  002486  FFFF               	dw	65535	; errata NOP
  4314  002488                     __end_of_ModbusGetLastCommand:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _InitFromEeprom *****************
  4337 ;; Defined at:
  4338 ;;		line 459 in file "main.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4352 ;;      Params:         0       0       0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0
  4354 ;;      Temps:          2       0       0       0       0       0       0
  4355 ;;      Totals:         2       0       0       0       0       0       0
  4356 ;;Total ram usage:        2 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    4
  4359 ;; This function calls:
  4360 ;;		_LoadNextEvent
  4361 ;;		_Modbus
  4362 ;;		_SetBuzzerDuty
  4363 ;;		_SwitchOffAllLeds
  4364 ;; This function is called by:
  4365 ;;		_main
  4366 ;;		_io_poll
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text15
  4371  001706                     __ptext15:
  4372                           	opt stack 0
  4373  001706                     _InitFromEeprom:
  4374                           	opt stack 25
  4375                           
  4376                           ;incstack = 0
  4377  001706  FFFF               	dw	65535
  4378                           
  4379                           ;main.c: 461: buzzeLoudDuration = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  4380  001708  0E02               	movlw	2
  4381  00170A  6EA9               	movwf	4009,c	;volatile
  4382  00170C  80A6               	bsf	4006,0,c	;volatile
  4383  00170E  CFA8 F073          	movff	4008,_buzzeLoudDuration	;volatile
  4384                           
  4385                           ;main.c: 462: buzzeQuietDuration = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  4386  001712  0E03               	movlw	3
  4387  001714  6EA9               	movwf	4009,c	;volatile
  4388  001716  80A6               	bsf	4006,0,c	;volatile
  4389  001718  CFA8 F0C6          	movff	4008,_buzzeQuietDuration	;volatile
  4390                           
  4391                           ;main.c: 463: buzzerInfoPeriod = ( EEADR = 4, (void)0, RD = 1, EEDATA);
  4392  00171C  0E04               	movlw	4
  4393  00171E  6EA9               	movwf	4009,c	;volatile
  4394  001720  80A6               	bsf	4006,0,c	;volatile
  4395  001722  CFA8 F0C7          	movff	4008,_buzzerInfoPeriod	;volatile
  4396                           
  4397                           ;main.c: 464: buzzerAlarmPeriod = ( EEADR = 5, (void)0, RD = 1, EEDATA);
  4398  001726  0E05               	movlw	5
  4399  001728  6EA9               	movwf	4009,c	;volatile
  4400  00172A  80A6               	bsf	4006,0,c	;volatile
  4401  00172C  CFA8 F074          	movff	4008,_buzzerAlarmPeriod	;volatile
  4402                           
  4403                           ;main.c: 465: buzzerOnOffDuration = (((uint16_t)( EEADR = 6, (void)0, RD = 1, EEDATA)<<8
      +                          )|0);
  4404  001730  0E06               	movlw	6
  4405  001732  6EA9               	movwf	4009,c	;volatile
  4406  001734  80A6               	bsf	4006,0,c	;volatile
  4407  001736  50A8               	movf	4008,w,c	;volatile
  4408  001738  0100               	movlb	0	; () banked
  4409  00173A  6FEE               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  4410  00173C  6BED               	clrf	_buzzerOnOffDuration& (0+255),b
  4411                           
  4412                           ;main.c: 466: buzzerOnOffPeriod = (((uint16_t)( EEADR = 7, (void)0, RD = 1, EEDATA)<<8)|
      +                          0);
  4413  00173E  0E07               	movlw	7
  4414  001740  6EA9               	movwf	4009,c	;volatile
  4415                           
  4416                           ; BSR set to: 0
  4417  001742  80A6               	bsf	4006,0,c	;volatile
  4418  001744  50A8               	movf	4008,w,c	;volatile
  4419  001746  6FF0               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  4420  001748  6BEF               	clrf	_buzzerOnOffPeriod& (0+255),b
  4421                           
  4422                           ;main.c: 467: buzzeEscaladeTime = ( EEADR = 8, (void)0, RD = 1, EEDATA);
  4423  00174A  0E08               	movlw	8
  4424  00174C  6EA9               	movwf	4009,c	;volatile
  4425                           
  4426                           ; BSR set to: 0
  4427  00174E  80A6               	bsf	4006,0,c	;volatile
  4428                           
  4429                           ; BSR set to: 0
  4430  001750  CFA8 F0C5          	movff	4008,_buzzeEscaladeTime	;volatile
  4431                           
  4432                           ;main.c: 468: buzzerStartDurationDiv = ( EEADR = 9, (void)0, RD = 1, EEDATA);
  4433  001754  0E09               	movlw	9
  4434  001756  6EA9               	movwf	4009,c	;volatile
  4435                           
  4436                           ; BSR set to: 0
  4437  001758  80A6               	bsf	4006,0,c	;volatile
  4438                           
  4439                           ; BSR set to: 0
  4440  00175A  CFA8 F0C8          	movff	4008,_buzzerStartDurationDiv	;volatile
  4441                           
  4442                           ;main.c: 469: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  4443  00175E  0E0A               	movlw	10
  4444  001760  6EA9               	movwf	4009,c	;volatile
  4445                           
  4446                           ; BSR set to: 0
  4447  001762  80A6               	bsf	4006,0,c	;volatile
  4448                           
  4449                           ; BSR set to: 0
  4450  001764  CFA8 F0CE          	movff	4008,_eventAcceptTime	;volatile
  4451                           
  4452                           ;main.c: 470: eveningTimeHour = ( EEADR = 11, (void)0, RD = 1, EEDATA);
  4453  001768  0E0B               	movlw	11
  4454  00176A  6EA9               	movwf	4009,c	;volatile
  4455                           
  4456                           ; BSR set to: 0
  4457  00176C  80A6               	bsf	4006,0,c	;volatile
  4458                           
  4459                           ; BSR set to: 0
  4460  00176E  CFA8 F0CD          	movff	4008,_eveningTimeHour	;volatile
  4461                           
  4462                           ;main.c: 471: nightStartHour = ( EEADR = 12, (void)0, RD = 1, EEDATA);
  4463  001772  0E0C               	movlw	12
  4464  001774  6EA9               	movwf	4009,c	;volatile
  4465                           
  4466                           ; BSR set to: 0
  4467  001776  80A6               	bsf	4006,0,c	;volatile
  4468                           
  4469                           ; BSR set to: 0
  4470  001778  CFA8 F0D1          	movff	4008,_nightStartHour	;volatile
  4471                           
  4472                           ;main.c: 472: nightEndHour = ( EEADR = 13, (void)0, RD = 1, EEDATA);
  4473  00177C  0E0D               	movlw	13
  4474  00177E  6EA9               	movwf	4009,c	;volatile
  4475                           
  4476                           ; BSR set to: 0
  4477  001780  80A6               	bsf	4006,0,c	;volatile
  4478                           
  4479                           ; BSR set to: 0
  4480  001782  CFA8 F0D0          	movff	4008,_nightEndHour	;volatile
  4481                           
  4482                           ;main.c: 473: morningTimeHour = ( EEADR = 14, (void)0, RD = 1, EEDATA);
  4483  001786  0E0E               	movlw	14
  4484  001788  6EA9               	movwf	4009,c	;volatile
  4485                           
  4486                           ; BSR set to: 0
  4487  00178A  80A6               	bsf	4006,0,c	;volatile
  4488                           
  4489                           ; BSR set to: 0
  4490  00178C  CFA8 F0CF          	movff	4008,_morningTimeHour	;volatile
  4491                           
  4492                           ;main.c: 474: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  4493  001790  0E0F               	movlw	15
  4494  001792  6EA9               	movwf	4009,c	;volatile
  4495                           
  4496                           ; BSR set to: 0
  4497  001794  80A6               	bsf	4006,0,c	;volatile
  4498                           
  4499                           ; BSR set to: 0
  4500  001796  50A8               	movf	4008,w,c	;volatile
  4501  001798  6E0D               	movwf	??_InitFromEeprom& (0+255),c
  4502  00179A  6A0E               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4503  00179C  0E06               	movlw	6
  4504  00179E                     u3245:
  4505  00179E  FFFF               	dw	65535	; assembler added errata NOP
  4506  0017A0  90D8               	bcf	status,0,c
  4507  0017A2  360D               	rlcf	??_InitFromEeprom,f,c
  4508  0017A4  360E               	rlcf	??_InitFromEeprom+1,f,c
  4509  0017A6  2EE8               	decfsz	wreg,f,c
  4510  0017A8  D7FA               	goto	u3245
  4511  0017AA  C00D  F0BA         	movff	??_InitFromEeprom,_blinkDuration
  4512  0017AE  C00E  F0BB         	movff	??_InitFromEeprom+1,_blinkDuration+1
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;main.c: 475: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  4516  0017B2  0E10               	movlw	16
  4517  0017B4  6EA9               	movwf	4009,c	;volatile
  4518                           
  4519                           ; BSR set to: 0
  4520  0017B6  80A6               	bsf	4006,0,c	;volatile
  4521  0017B8  50A8               	movf	4008,w,c	;volatile
  4522  0017BA  6E0D               	movwf	??_InitFromEeprom& (0+255),c
  4523  0017BC  6A0E               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4524  0017BE  0E06               	movlw	6
  4525  0017C0                     u3255:
  4526  0017C0  FFFF               	dw	65535	; assembler added errata NOP
  4527  0017C2  90D8               	bcf	status,0,c
  4528  0017C4  360D               	rlcf	??_InitFromEeprom,f,c
  4529  0017C6  360E               	rlcf	??_InitFromEeprom+1,f,c
  4530  0017C8  2EE8               	decfsz	wreg,f,c
  4531  0017CA  D7FA               	goto	u3255
  4532  0017CC  C00D  F0BC         	movff	??_InitFromEeprom,_blinkPeriod
  4533  0017D0  C00E  F0BD         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;main.c: 477: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  4537  0017D4  0E12               	movlw	18
  4538  0017D6  6EA9               	movwf	4009,c	;volatile
  4539                           
  4540                           ; BSR set to: 0
  4541  0017D8  80A6               	bsf	4006,0,c	;volatile
  4542                           
  4543                           ; BSR set to: 0
  4544  0017DA  CFA8 F075          	movff	4008,_eventCount	;volatile
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;main.c: 479: SetBuzzerDuty(buzzeLoudDuration);
  4548  0017DE  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  4549  0017E2  6A06               	clrf	SetBuzzerDuty@dc+1,c
  4550  0017E4  EC80  F010         	call	_SetBuzzerDuty	;wreg free
  4551                           
  4552                           ;main.c: 480: PR2 = buzzerAlarmPeriod;
  4553  0017E8  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  4554                           
  4555                           ;main.c: 483: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  4556  0017EC  0E01               	movlw	1
  4557  0017EE  6EA9               	movwf	4009,c	;volatile
  4558  0017F0  80A6               	bsf	4006,0,c	;volatile
  4559  0017F2  6A0A               	clrf	Modbus@u8serno,c
  4560  0017F4  6A0B               	clrf	Modbus@u8txenpin,c
  4561  0017F6  50A8               	movf	4008,w,c	;volatile
  4562  0017F8  ECBC  F012         	call	_Modbus
  4563                           
  4564                           ;main.c: 484: SwitchOffAllLeds();
  4565  0017FC  EC6F  F012         	call	_SwitchOffAllLeds	;wreg free
  4566                           
  4567                           ;main.c: 486: LoadNextEvent();
  4568  001800  EF4D  F00F         	goto	_LoadNextEvent	;wreg free
  4569  001804  FFFF               	dw	65535	; errata NOP
  4570  001806                     __end_of_InitFromEeprom:
  4571                           	opt stack 0
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           prodh	equ	0xFF4
  4577                           prodl	equ	0xFF3
  4578                           intcon	equ	0xFF2
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           postdec1	equ	0xFE5
  4582                           fsr1h	equ	0xFE2
  4583                           fsr1l	equ	0xFE1
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           plusw2	equ	0xFDB
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _SetBuzzerDuty *****************
  4593 ;; Defined at:
  4594 ;;		line 436 in file "main.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  dc              2    4[COMRAM] unsigned int 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4608 ;;      Params:         2       0       0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0
  4610 ;;      Temps:          2       0       0       0       0       0       0
  4611 ;;      Totals:         4       0       0       0       0       0       0
  4612 ;;Total ram usage:        4 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    2
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_InitFromEeprom
  4619 ;;		_main
  4620 ;;		_io_poll
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text16
  4625  002100                     __ptext16:
  4626                           	opt stack 0
  4627  002100                     _SetBuzzerDuty:
  4628                           	opt stack 27
  4629                           
  4630                           ;incstack = 0
  4631  002100  FFFF               	dw	65535
  4632                           
  4633                           ;main.c: 441: CCP1CONbits.DC1B0 = (dc & 0x01) != 0 ? 1 : 0;
  4634  002102  A005               	btfss	SetBuzzerDuty@dc,0,c
  4635  002104  D003               	goto	u2950
  4636  002106  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  4637  002108  2A07               	incf	??_SetBuzzerDuty& (0+255),f,c
  4638  00210A  D002               	goto	u2968
  4639  00210C                     u2950:
  4640  00210C  FFFF               	dw	65535	; assembler added errata NOP
  4641  00210E  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  4642  002110                     u2968:
  4643  002110  FFFF               	dw	65535	; assembler added errata NOP
  4644  002112  3A07               	swapf	??_SetBuzzerDuty,f,c
  4645  002114  50BD               	movf	4029,w,c	;volatile
  4646  002116  1807               	xorwf	??_SetBuzzerDuty,w,c
  4647  002118  0BEF               	andlw	-17
  4648  00211A  1807               	xorwf	??_SetBuzzerDuty,w,c
  4649  00211C  6EBD               	movwf	4029,c	;volatile
  4650                           
  4651                           ;main.c: 442: CCP1CONbits.DC1B1 = (dc & 0x02) != 0 ? 1 : 0;
  4652  00211E  A205               	btfss	SetBuzzerDuty@dc,1,c
  4653  002120  D003               	goto	u2970
  4654  002122  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  4655  002124  2A07               	incf	??_SetBuzzerDuty& (0+255),f,c
  4656  002126  D002               	goto	u2988
  4657  002128                     u2970:
  4658  002128  FFFF               	dw	65535	; assembler added errata NOP
  4659  00212A  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  4660  00212C                     u2988:
  4661  00212C  FFFF               	dw	65535	; assembler added errata NOP
  4662  00212E  3A07               	swapf	??_SetBuzzerDuty,f,c
  4663  002130  4607               	rlncf	??_SetBuzzerDuty,f,c
  4664  002132  50BD               	movf	4029,w,c	;volatile
  4665  002134  1807               	xorwf	??_SetBuzzerDuty,w,c
  4666  002136  0BDF               	andlw	-33
  4667  002138  1807               	xorwf	??_SetBuzzerDuty,w,c
  4668  00213A  6EBD               	movwf	4029,c	;volatile
  4669                           
  4670                           ;main.c: 444: CCPR1L = (uint8_t)(dc >> 2);
  4671  00213C  C005  F007         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4672  002140  C006  F008         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  4673  002144  90D8               	bcf	status,0,c
  4674  002146  3208               	rrcf	??_SetBuzzerDuty+1,f,c
  4675  002148  3207               	rrcf	??_SetBuzzerDuty,f,c
  4676  00214A  90D8               	bcf	status,0,c
  4677  00214C  3208               	rrcf	??_SetBuzzerDuty+1,f,c
  4678  00214E  3207               	rrcf	??_SetBuzzerDuty,f,c
  4679  002150  5007               	movf	??_SetBuzzerDuty,w,c
  4680  002152  6EBE               	movwf	4030,c	;volatile
  4681  002154  0012               	return		;funcret
  4682  002156  FFFF               	dw	65535	; errata NOP
  4683  002158                     __end_of_SetBuzzerDuty:
  4684                           	opt stack 0
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           postinc0	equ	0xFEE
  4693                           wreg	equ	0xFE8
  4694                           postdec1	equ	0xFE5
  4695                           fsr1h	equ	0xFE2
  4696                           fsr1l	equ	0xFE1
  4697                           indf2	equ	0xFDF
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           plusw2	equ	0xFDB
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _Modbus *****************
  4706 ;; Defined at:
  4707 ;;		line 172 in file "ModbusRtu.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  u8id            1    wreg     unsigned char 
  4710 ;;  u8serno         1    9[COMRAM] unsigned char 
  4711 ;;  u8txenpin       1   10[COMRAM] unsigned char 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  u8id            1   11[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  2    9[COMRAM] int 
  4716 ;; Registers used:
  4717 ;;		wreg, status,2, status,0, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         2       0       0       0       0       0       0
  4724 ;;      Locals:         1       0       0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0
  4726 ;;      Totals:         3       0       0       0       0       0       0
  4727 ;;Total ram usage:        3 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    3
  4730 ;; This function calls:
  4731 ;;		_ModbusInit
  4732 ;; This function is called by:
  4733 ;;		_InitFromEeprom
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text17
  4738  002578                     __ptext17:
  4739                           	opt stack 0
  4740  002578                     _Modbus:
  4741                           	opt stack 25
  4742                           
  4743                           ;incstack = 0
  4744  002578  FFFF               	dw	65535
  4745                           
  4746                           ;Modbus@u8id stored from wreg
  4747  00257A  6E0C               	movwf	Modbus@u8id,c
  4748                           
  4749                           ;ModbusRtu.c: 174: ModbusInit(u8id, u8serno, u8txenpin);
  4750  00257C  C00A  F005         	movff	Modbus@u8serno,ModbusInit@u8serno
  4751  002580  C00B  F006         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4752  002584  500C               	movf	Modbus@u8id,w,c
  4753  002586  EFC6  F012         	goto	_ModbusInit
  4754  00258A  FFFF               	dw	65535	; errata NOP
  4755  00258C                     __end_of_Modbus:
  4756                           	opt stack 0
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           intcon	equ	0xFF2
  4764                           postinc0	equ	0xFEE
  4765                           wreg	equ	0xFE8
  4766                           postdec1	equ	0xFE5
  4767                           fsr1h	equ	0xFE2
  4768                           fsr1l	equ	0xFE1
  4769                           indf2	equ	0xFDF
  4770                           postinc2	equ	0xFDE
  4771                           postdec2	equ	0xFDD
  4772                           plusw2	equ	0xFDB
  4773                           fsr2h	equ	0xFDA
  4774                           fsr2l	equ	0xFD9
  4775                           status	equ	0xFD8
  4776                           
  4777 ;; *************** function _ModbusInit *****************
  4778 ;; Defined at:
  4779 ;;		line 479 in file "ModbusRtu.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  u8id            1    wreg     unsigned char 
  4782 ;;  u8serno         1    4[COMRAM] unsigned char 
  4783 ;;  u8txenpin       1    5[COMRAM] unsigned char 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  u8id            1    8[COMRAM] unsigned char 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         2       0       0       0       0       0       0
  4796 ;;      Locals:         3       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0
  4798 ;;      Totals:         5       0       0       0       0       0       0
  4799 ;;Total ram usage:        5 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    2
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_Modbus
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text18
  4810  00258C                     __ptext18:
  4811                           	opt stack 0
  4812  00258C                     _ModbusInit:
  4813                           	opt stack 25
  4814                           
  4815                           ;incstack = 0
  4816  00258C  FFFF               	dw	65535
  4817                           
  4818                           ;ModbusInit@u8id stored from wreg
  4819  00258E  6E09               	movwf	ModbusInit@u8id,c
  4820                           
  4821                           ;ModbusRtu.c: 480: _u8id = u8id;
  4822  002590  C009  F0C3         	movff	ModbusInit@u8id,__u8id
  4823                           
  4824                           ;ModbusRtu.c: 481: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4825  002594  0E04               	movlw	4
  4826  002596  6005               	cpfslt	ModbusInit@u8serno,c
  4827  002598  D000               	goto	l796
  4828  00259A                     l796:
  4829  00259A  FFFF               	dw	65535	; assembler added errata NOP
  4830  00259C  0012               	return		;funcret
  4831  00259E  FFFF               	dw	65535	; errata NOP
  4832  0025A0                     __end_of_ModbusInit:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           postdec1	equ	0xFE5
  4844                           fsr1h	equ	0xFE2
  4845                           fsr1l	equ	0xFE1
  4846                           indf2	equ	0xFDF
  4847                           postinc2	equ	0xFDE
  4848                           postdec2	equ	0xFDD
  4849                           plusw2	equ	0xFDB
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _ResetEvent *****************
  4855 ;; Defined at:
  4856 ;;		line 567 in file "main.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  state           1    wreg     unsigned char 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  state           1   14[COMRAM] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : F/0
  4867 ;;		On exit  : F/1
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4870 ;;      Params:         0       0       0       0       0       0       0
  4871 ;;      Locals:         3       0       0       0       0       0       0
  4872 ;;      Temps:          2       0       0       0       0       0       0
  4873 ;;      Totals:         5       0       0       0       0       0       0
  4874 ;;Total ram usage:        5 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    3
  4877 ;; This function calls:
  4878 ;;		_LightLed
  4879 ;; This function is called by:
  4880 ;;		_main
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text19
  4885  0023A6                     __ptext19:
  4886                           	opt stack 0
  4887  0023A6                     _ResetEvent:
  4888                           	opt stack 27
  4889                           
  4890                           ;incstack = 0
  4891  0023A6  FFFF               	dw	65535
  4892                           
  4893                           ;ResetEvent@state stored from wreg
  4894  0023A8  6E0F               	movwf	ResetEvent@state,c
  4895                           
  4896                           ;main.c: 569: LightLed(oldEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4897  0023AA  500F               	movf	ResetEvent@state,w,c
  4898  0023AC  E103               	bnz	l4582
  4899  0023AE  6A11               	clrf	_ResetEvent$825+1,c
  4900  0023B0  0E02               	movlw	2
  4901  0023B2  D002               	goto	L2
  4902  0023B4                     l4582:
  4903  0023B4  6A11               	clrf	_ResetEvent$825+1,c
  4904  0023B6  0E01               	movlw	1
  4905  0023B8                     L2:
  4906  0023B8  FFFF               	dw	65535	; assembler added errata NOP
  4907  0023BA  6E10               	movwf	_ResetEvent$825,c
  4908  0023BC  C010  F005         	movff	_ResetEvent$825,LightLed@ledState
  4909  0023C0  6A06               	clrf	LightLed@blink,c
  4910  0023C2  2879               	incf	_oldEventNum,w,c
  4911  0023C4  ECF1  F005         	call	_LightLed
  4912                           
  4913                           ;main.c: 570: oldEventNum = 0xff;
  4914  0023C8  6879               	setf	_oldEventNum,c
  4915                           
  4916                           ;main.c: 571: eventResetSecond = 0;
  4917  0023CA  0100               	movlb	0	; () banked
  4918  0023CC  6BA8               	clrf	_eventResetSecond& (0+255),b
  4919  0023CE  6BA9               	clrf	(_eventResetSecond+1)& (0+255),b
  4920  0023D0  6BAA               	clrf	(_eventResetSecond+2)& (0+255),b
  4921  0023D2  6BAB               	clrf	(_eventResetSecond+3)& (0+255),b
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;main.c: 572: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  4925  0023D4  5079               	movf	_oldEventNum,w,c
  4926  0023D6  6E0D               	movwf	??_ResetEvent& (0+255),c
  4927  0023D8  5077               	movf	_curEventNum,w,c
  4928  0023DA  0101               	movlb	1	; () banked
  4929  0023DC  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4930  0023DE  C00D  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4931                           
  4932                           ; BSR set to: 1
  4933  0023E2  0012               	return		;funcret
  4934  0023E4  FFFF               	dw	65535	; errata NOP
  4935  0023E6                     __end_of_ResetEvent:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           intcon	equ	0xFF2
  4944                           postinc0	equ	0xFEE
  4945                           wreg	equ	0xFE8
  4946                           postdec1	equ	0xFE5
  4947                           fsr1h	equ	0xFE2
  4948                           fsr1l	equ	0xFE1
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           plusw2	equ	0xFDB
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function _ProcessLightBlock *****************
  4958 ;; Defined at:
  4959 ;;		line 502 in file "main.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  curMs           1    wreg     PTR unsigned long 
  4962 ;;		 -> main@curMs(4), 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  curMs           1    9[COMRAM] PTR unsigned long 
  4965 ;;		 -> main@curMs(4), 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : F/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4975 ;;      Params:         0       0       0       0       0       0       0
  4976 ;;      Locals:         1       0       0       0       0       0       0
  4977 ;;      Temps:          4       0       0       0       0       0       0
  4978 ;;      Totals:         5       0       0       0       0       0       0
  4979 ;;Total ram usage:        5 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    3
  4982 ;; This function calls:
  4983 ;;		_UpdateLedRegister
  4984 ;; This function is called by:
  4985 ;;		_main
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text20
  4990  000970                     __ptext20:
  4991                           	opt stack 0
  4992  000970                     _ProcessLightBlock:
  4993                           	opt stack 27
  4994                           
  4995                           ; BSR set to: 1
  4996                           ;incstack = 0
  4997  000970  FFFF               	dw	65535
  4998                           
  4999                           ;ProcessLightBlock@curMs stored from wreg
  5000  000972  6E0A               	movwf	ProcessLightBlock@curMs,c
  5001                           
  5002                           ;main.c: 504: diffTime = *curMs - oldBlinkOnTime;
  5003  000974  500A               	movf	ProcessLightBlock@curMs,w,c
  5004  000976  6ED9               	movwf	fsr2l,c
  5005  000978  6ADA               	clrf	fsr2h,c
  5006  00097A  CFDE F006          	movff	postinc2,??_ProcessLightBlock
  5007  00097E  CFDE F007          	movff	postinc2,??_ProcessLightBlock+1
  5008  000982  CFDE F008          	movff	postinc2,??_ProcessLightBlock+2
  5009  000986  CFDE F009          	movff	postinc2,??_ProcessLightBlock+3
  5010  00098A  0100               	movlb	0	; () banked
  5011  00098C  51B0               	movf	_oldBlinkOnTime& (0+255),w,b
  5012  00098E  5C06               	subwf	??_ProcessLightBlock,w,c
  5013  000990  6FA4               	movwf	_diffTime& (0+255),b
  5014  000992  51B1               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  5015  000994  5807               	subwfb	??_ProcessLightBlock+1,w,c
  5016  000996  6FA5               	movwf	(_diffTime+1)& (0+255),b
  5017  000998  51B2               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  5018  00099A  5808               	subwfb	??_ProcessLightBlock+2,w,c
  5019  00099C  6FA6               	movwf	(_diffTime+2)& (0+255),b
  5020  00099E  51B3               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  5021  0009A0  5809               	subwfb	??_ProcessLightBlock+3,w,c
  5022  0009A2  6FA7               	movwf	(_diffTime+3)& (0+255),b
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;main.c: 505: if(diffTime > blinkPeriod)
  5026  0009A4  51BC               	movf	_blinkPeriod& (0+255),w,b
  5027  0009A6  6E06               	movwf	??_ProcessLightBlock& (0+255),c
  5028  0009A8  51BD               	movf	(_blinkPeriod+1)& (0+255),w,b
  5029  0009AA  6E07               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5030  0009AC  6A08               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5031  0009AE  6A09               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5032  0009B0  51A4               	movf	_diffTime& (0+255),w,b
  5033  0009B2  5C06               	subwf	??_ProcessLightBlock,w,c
  5034  0009B4  51A5               	movf	(_diffTime+1)& (0+255),w,b
  5035  0009B6  5807               	subwfb	??_ProcessLightBlock+1,w,c
  5036  0009B8  51A6               	movf	(_diffTime+2)& (0+255),w,b
  5037  0009BA  5808               	subwfb	??_ProcessLightBlock+2,w,c
  5038  0009BC  51A7               	movf	(_diffTime+3)& (0+255),w,b
  5039  0009BE  5809               	subwfb	??_ProcessLightBlock+3,w,c
  5040  0009C0  E20E               	bc	l4422
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;main.c: 506: {
  5044                           ;main.c: 507: blinkOn = 1;
  5045  0009C2  0E01               	movlw	1
  5046  0009C4  6E72               	movwf	_blinkOn,c
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;main.c: 508: oldBlinkOnTime = *curMs;
  5050  0009C6  500A               	movf	ProcessLightBlock@curMs,w,c
  5051  0009C8  6ED9               	movwf	fsr2l,c
  5052  0009CA  6ADA               	clrf	fsr2h,c
  5053  0009CC  CFDE F0B0          	movff	postinc2,_oldBlinkOnTime
  5054  0009D0  CFDE F0B1          	movff	postinc2,_oldBlinkOnTime+1
  5055  0009D4  CFDE F0B2          	movff	postinc2,_oldBlinkOnTime+2
  5056  0009D8  CFDE F0B3          	movff	postinc2,_oldBlinkOnTime+3
  5057                           
  5058                           ;main.c: 509: }
  5059  0009DC  D0F1               	goto	l4574
  5060  0009DE                     l4422:
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;main.c: 510: else if(blinkOn && diffTime > blinkDuration)
  5064  0009DE  5072               	movf	_blinkOn,w,c
  5065  0009E0  E101 D0EE          	bz	l4574
  5066                           
  5067                           ; BSR set to: 0
  5068  0009E4  51BA               	movf	_blinkDuration& (0+255),w,b
  5069  0009E6  6E06               	movwf	??_ProcessLightBlock& (0+255),c
  5070  0009E8  51BB               	movf	(_blinkDuration+1)& (0+255),w,b
  5071  0009EA  6E07               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5072  0009EC  6A08               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5073  0009EE  6A09               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5074  0009F0  51A4               	movf	_diffTime& (0+255),w,b
  5075  0009F2  5C06               	subwf	??_ProcessLightBlock,w,c
  5076  0009F4  51A5               	movf	(_diffTime+1)& (0+255),w,b
  5077  0009F6  5807               	subwfb	??_ProcessLightBlock+1,w,c
  5078  0009F8  51A6               	movf	(_diffTime+2)& (0+255),w,b
  5079  0009FA  5808               	subwfb	??_ProcessLightBlock+2,w,c
  5080  0009FC  51A7               	movf	(_diffTime+3)& (0+255),w,b
  5081  0009FE  5809               	subwfb	??_ProcessLightBlock+3,w,c
  5082  000A00  E301 D0DE          	bc	l4574
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;main.c: 511: {
  5086                           ;main.c: 512: blinkOn = 0;
  5087  000A04  6A72               	clrf	_blinkOn,c
  5088  000A06  D0DC               	goto	l4574
  5089  000A08                     l4428:
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;main.c: 520: LATA &= 0xF0;
  5093  000A08  0EF0               	movlw	240
  5094  000A0A  1689               	andwf	3977,f,c	;volatile
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;main.c: 521: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  5098  000A0C  5072               	movf	_blinkOn,w,c
  5099  000A0E  E003               	bz	l4434
  5100                           
  5101                           ; BSR set to: 0
  5102  000A10  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  5103  000A14  D003               	goto	l4436
  5104  000A16                     l4434:
  5105                           
  5106                           ; BSR set to: 0
  5107  000A16  5190               	movf	_ledStatuses& (0+255),w,b
  5108  000A18  1980               	xorwf	_ledBlink& (0+255),w,b
  5109  000A1A  6E8A               	movwf	3978,c	;volatile
  5110  000A1C                     l4436:
  5111  000A1C  FFFF               	dw	65535	; assembler added errata NOP
  5112                           
  5113                           ; BSR set to: 0
  5114  000A1E  0E00               	movlw	0
  5115  000A20  EC8E  F011         	call	_UpdateLedRegister
  5116                           
  5117                           ;main.c: 522: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  5118  000A24  5072               	movf	_blinkOn,w,c
  5119  000A26  E003               	bz	l4442
  5120  000A28  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  5121  000A2C  D004               	goto	l4444
  5122  000A2E                     l4442:
  5123  000A2E  0100               	movlb	0	; () banked
  5124  000A30  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  5125  000A32  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  5126  000A34  6E8A               	movwf	3978,c	;volatile
  5127  000A36                     l4444:
  5128  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5129  000A38  0E01               	movlw	1
  5130  000A3A  EC8E  F011         	call	_UpdateLedRegister
  5131                           
  5132                           ;main.c: 523: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5133  000A3E  5072               	movf	_blinkOn,w,c
  5134  000A40  E003               	bz	l4450
  5135  000A42  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5136  000A46  D004               	goto	l4452
  5137  000A48                     l4450:
  5138  000A48  0100               	movlb	0	; () banked
  5139  000A4A  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  5140  000A4C  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  5141  000A4E  6E8A               	movwf	3978,c	;volatile
  5142  000A50                     l4452:
  5143  000A50  FFFF               	dw	65535	; assembler added errata NOP
  5144  000A52  0E02               	movlw	2
  5145  000A54  EC8E  F011         	call	_UpdateLedRegister
  5146                           
  5147                           ;main.c: 524: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5148  000A58  5072               	movf	_blinkOn,w,c
  5149  000A5A  E003               	bz	l4458
  5150  000A5C  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5151  000A60  D004               	goto	l4460
  5152  000A62                     l4458:
  5153  000A62  0100               	movlb	0	; () banked
  5154  000A64  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  5155  000A66  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5156  000A68  6E8A               	movwf	3978,c	;volatile
  5157  000A6A                     l4460:
  5158  000A6A  FFFF               	dw	65535	; assembler added errata NOP
  5159  000A6C  0E03               	movlw	3
  5160  000A6E  EC8E  F011         	call	_UpdateLedRegister
  5161                           
  5162                           ;main.c: 525: LATAbits.LATA0 = 1;
  5163  000A72  8089               	bsf	3977,0,c	;volatile
  5164                           
  5165                           ;main.c: 526: break;
  5166  000A74  D0B0               	goto	l4576
  5167  000A76                     l4464:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;main.c: 528: LATA &= 0xF0;
  5171  000A76  0EF0               	movlw	240
  5172  000A78  1689               	andwf	3977,f,c	;volatile
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;main.c: 529: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5176  000A7A  5072               	movf	_blinkOn,w,c
  5177  000A7C  E003               	bz	l4470
  5178                           
  5179                           ; BSR set to: 0
  5180  000A7E  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5181  000A82  D003               	goto	l4472
  5182  000A84                     l4470:
  5183                           
  5184                           ; BSR set to: 0
  5185  000A84  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  5186  000A86  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  5187  000A88  6E8A               	movwf	3978,c	;volatile
  5188  000A8A                     l4472:
  5189  000A8A  FFFF               	dw	65535	; assembler added errata NOP
  5190                           
  5191                           ; BSR set to: 0
  5192  000A8C  0E00               	movlw	0
  5193  000A8E  EC8E  F011         	call	_UpdateLedRegister
  5194                           
  5195                           ;main.c: 530: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5196  000A92  5072               	movf	_blinkOn,w,c
  5197  000A94  E003               	bz	l4478
  5198  000A96  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5199  000A9A  D004               	goto	l4480
  5200  000A9C                     l4478:
  5201  000A9C  0100               	movlb	0	; () banked
  5202  000A9E  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  5203  000AA0  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  5204  000AA2  6E8A               	movwf	3978,c	;volatile
  5205  000AA4                     l4480:
  5206  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5207  000AA6  0E01               	movlw	1
  5208  000AA8  EC8E  F011         	call	_UpdateLedRegister
  5209                           
  5210                           ;main.c: 531: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5211  000AAC  5072               	movf	_blinkOn,w,c
  5212  000AAE  E003               	bz	l4486
  5213  000AB0  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5214  000AB4  D004               	goto	l4488
  5215  000AB6                     l4486:
  5216  000AB6  0100               	movlb	0	; () banked
  5217  000AB8  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  5218  000ABA  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  5219  000ABC  6E8A               	movwf	3978,c	;volatile
  5220  000ABE                     l4488:
  5221  000ABE  FFFF               	dw	65535	; assembler added errata NOP
  5222  000AC0  0E02               	movlw	2
  5223  000AC2  EC8E  F011         	call	_UpdateLedRegister
  5224                           
  5225                           ;main.c: 532: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5226  000AC6  5072               	movf	_blinkOn,w,c
  5227  000AC8  E003               	bz	l4494
  5228  000ACA  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5229  000ACE  D004               	goto	l4496
  5230  000AD0                     l4494:
  5231  000AD0  0100               	movlb	0	; () banked
  5232  000AD2  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  5233  000AD4  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5234  000AD6  6E8A               	movwf	3978,c	;volatile
  5235  000AD8                     l4496:
  5236  000AD8  FFFF               	dw	65535	; assembler added errata NOP
  5237  000ADA  0E03               	movlw	3
  5238  000ADC  EC8E  F011         	call	_UpdateLedRegister
  5239                           
  5240                           ;main.c: 533: LATAbits.LATA1 = 1;
  5241  000AE0  8289               	bsf	3977,1,c	;volatile
  5242                           
  5243                           ;main.c: 534: break;
  5244  000AE2  D079               	goto	l4576
  5245  000AE4                     l4500:
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;main.c: 536: LATA &= 0xF0;
  5249  000AE4  0EF0               	movlw	240
  5250  000AE6  1689               	andwf	3977,f,c	;volatile
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;main.c: 537: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5254  000AE8  5072               	movf	_blinkOn,w,c
  5255  000AEA  E003               	bz	l4506
  5256                           
  5257                           ; BSR set to: 0
  5258  000AEC  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5259  000AF0  D003               	goto	l4508
  5260  000AF2                     l4506:
  5261                           
  5262                           ; BSR set to: 0
  5263  000AF2  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5264  000AF4  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5265  000AF6  6E8A               	movwf	3978,c	;volatile
  5266  000AF8                     l4508:
  5267  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  5268                           
  5269                           ; BSR set to: 0
  5270  000AFA  0E00               	movlw	0
  5271  000AFC  EC8E  F011         	call	_UpdateLedRegister
  5272                           
  5273                           ;main.c: 538: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5274  000B00  5072               	movf	_blinkOn,w,c
  5275  000B02  E003               	bz	l4514
  5276  000B04  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5277  000B08  D004               	goto	l4516
  5278  000B0A                     l4514:
  5279  000B0A  0100               	movlb	0	; () banked
  5280  000B0C  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5281  000B0E  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5282  000B10  6E8A               	movwf	3978,c	;volatile
  5283  000B12                     l4516:
  5284  000B12  FFFF               	dw	65535	; assembler added errata NOP
  5285  000B14  0E01               	movlw	1
  5286  000B16  EC8E  F011         	call	_UpdateLedRegister
  5287                           
  5288                           ;main.c: 539: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5289  000B1A  5072               	movf	_blinkOn,w,c
  5290  000B1C  E003               	bz	l4522
  5291  000B1E  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5292  000B22  D004               	goto	l4524
  5293  000B24                     l4522:
  5294  000B24  0100               	movlb	0	; () banked
  5295  000B26  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5296  000B28  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5297  000B2A  6E8A               	movwf	3978,c	;volatile
  5298  000B2C                     l4524:
  5299  000B2C  FFFF               	dw	65535	; assembler added errata NOP
  5300  000B2E  0E02               	movlw	2
  5301  000B30  EC8E  F011         	call	_UpdateLedRegister
  5302                           
  5303                           ;main.c: 540: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5304  000B34  5072               	movf	_blinkOn,w,c
  5305  000B36  E003               	bz	l4530
  5306  000B38  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5307  000B3C  D004               	goto	l4532
  5308  000B3E                     l4530:
  5309  000B3E  0100               	movlb	0	; () banked
  5310  000B40  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5311  000B42  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5312  000B44  6E8A               	movwf	3978,c	;volatile
  5313  000B46                     l4532:
  5314  000B46  FFFF               	dw	65535	; assembler added errata NOP
  5315  000B48  0E03               	movlw	3
  5316  000B4A  EC8E  F011         	call	_UpdateLedRegister
  5317                           
  5318                           ;main.c: 541: LATAbits.LATA2 = 1;
  5319  000B4E  8489               	bsf	3977,2,c	;volatile
  5320                           
  5321                           ;main.c: 542: break;
  5322  000B50  D042               	goto	l4576
  5323  000B52                     l4536:
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;main.c: 544: LATA &= 0xF0;
  5327  000B52  0EF0               	movlw	240
  5328  000B54  1689               	andwf	3977,f,c	;volatile
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;main.c: 545: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5332  000B56  5072               	movf	_blinkOn,w,c
  5333  000B58  E003               	bz	l4542
  5334                           
  5335                           ; BSR set to: 0
  5336  000B5A  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5337  000B5E  D003               	goto	l4544
  5338  000B60                     l4542:
  5339                           
  5340                           ; BSR set to: 0
  5341  000B60  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5342  000B62  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5343  000B64  6E8A               	movwf	3978,c	;volatile
  5344  000B66                     l4544:
  5345  000B66  FFFF               	dw	65535	; assembler added errata NOP
  5346                           
  5347                           ; BSR set to: 0
  5348  000B68  0E00               	movlw	0
  5349  000B6A  EC8E  F011         	call	_UpdateLedRegister
  5350                           
  5351                           ;main.c: 546: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5352  000B6E  5072               	movf	_blinkOn,w,c
  5353  000B70  E003               	bz	l4550
  5354  000B72  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5355  000B76  D004               	goto	l4552
  5356  000B78                     l4550:
  5357  000B78  0100               	movlb	0	; () banked
  5358  000B7A  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5359  000B7C  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5360  000B7E  6E8A               	movwf	3978,c	;volatile
  5361  000B80                     l4552:
  5362  000B80  FFFF               	dw	65535	; assembler added errata NOP
  5363  000B82  0E01               	movlw	1
  5364  000B84  EC8E  F011         	call	_UpdateLedRegister
  5365                           
  5366                           ;main.c: 547: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5367  000B88  5072               	movf	_blinkOn,w,c
  5368  000B8A  E003               	bz	l4558
  5369  000B8C  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5370  000B90  D004               	goto	l4560
  5371  000B92                     l4558:
  5372  000B92  0100               	movlb	0	; () banked
  5373  000B94  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5374  000B96  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5375  000B98  6E8A               	movwf	3978,c	;volatile
  5376  000B9A                     l4560:
  5377  000B9A  FFFF               	dw	65535	; assembler added errata NOP
  5378  000B9C  0E02               	movlw	2
  5379  000B9E  EC8E  F011         	call	_UpdateLedRegister
  5380                           
  5381                           ;main.c: 548: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5382  000BA2  5072               	movf	_blinkOn,w,c
  5383  000BA4  E003               	bz	l4566
  5384  000BA6  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5385  000BAA  D004               	goto	l4568
  5386  000BAC                     l4566:
  5387  000BAC  0100               	movlb	0	; () banked
  5388  000BAE  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5389  000BB0  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5390  000BB2  6E8A               	movwf	3978,c	;volatile
  5391  000BB4                     l4568:
  5392  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  5393  000BB6  0E03               	movlw	3
  5394  000BB8  EC8E  F011         	call	_UpdateLedRegister
  5395                           
  5396                           ;main.c: 549: LATAbits.LATA3 = 1;
  5397  000BBC  8689               	bsf	3977,3,c	;volatile
  5398                           
  5399                           ;main.c: 550: break;
  5400  000BBE  D00B               	goto	l4576
  5401  000BC0                     l4574:
  5402  000BC0  FFFF               	dw	65535	; assembler added errata NOP
  5403                           
  5404                           ; BSR set to: 0
  5405  000BC2  51CC               	movf	_currentLedBlock& (0+255),w,b
  5406                           
  5407                           ; Switch size 1, requested type "speed"
  5408                           ; Number of cases is 4, Range of values is 0 to 3
  5409                           ; switch strategies available:
  5410                           ; Name         Instructions Cycles
  5411                           ; simple_byte           13     7 (average)
  5412                           ;	Chosen strategy is simple_byte
  5413  000BC4  E101 D720          	bz	l4428
  5414  000BC8  0A01               	xorlw	1	; case 1
  5415  000BCA  E101 D754          	bz	l4464
  5416  000BCE  0A03               	xorlw	3	; case 2
  5417  000BD0  E089               	bz	l4500
  5418  000BD2  0A01               	xorlw	1	; case 3
  5419  000BD4  E0BE               	bz	l4536
  5420  000BD6                     l4576:
  5421  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  5422                           
  5423                           ;main.c: 553: currentLedBlock++;
  5424  000BD8  0100               	movlb	0	; () banked
  5425  000BDA  2BCC               	incf	_currentLedBlock& (0+255),f,b
  5426                           
  5427                           ;main.c: 556: currentLedBlock &= 0xFB;
  5428  000BDC  95CC               	bcf	_currentLedBlock& (0+255),2,b
  5429                           
  5430                           ; BSR set to: 0
  5431  000BDE  0012               	return		;funcret
  5432  000BE0  FFFF               	dw	65535	; errata NOP
  5433  000BE2                     __end_of_ProcessLightBlock:
  5434                           	opt stack 0
  5435                           tblptru	equ	0xFF8
  5436                           tblptrh	equ	0xFF7
  5437                           tblptrl	equ	0xFF6
  5438                           tablat	equ	0xFF5
  5439                           prodh	equ	0xFF4
  5440                           prodl	equ	0xFF3
  5441                           intcon	equ	0xFF2
  5442                           postinc0	equ	0xFEE
  5443                           wreg	equ	0xFE8
  5444                           postdec1	equ	0xFE5
  5445                           fsr1h	equ	0xFE2
  5446                           fsr1l	equ	0xFE1
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           plusw2	equ	0xFDB
  5451                           fsr2h	equ	0xFDA
  5452                           fsr2l	equ	0xFD9
  5453                           status	equ	0xFD8
  5454                           
  5455 ;; *************** function _UpdateLedRegister *****************
  5456 ;; Defined at:
  5457 ;;		line 260 in file "main.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  regIndex        1    wreg     unsigned char 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  regIndex        1    4[COMRAM] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5471 ;;      Params:         0       0       0       0       0       0       0
  5472 ;;      Locals:         1       0       0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0
  5474 ;;      Totals:         1       0       0       0       0       0       0
  5475 ;;Total ram usage:        1 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    2
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_ProcessLightBlock
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text21
  5486  00231C                     __ptext21:
  5487                           	opt stack 0
  5488  00231C                     _UpdateLedRegister:
  5489                           	opt stack 27
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;incstack = 0
  5493  00231C  FFFF               	dw	65535
  5494                           
  5495                           ;UpdateLedRegister@regIndex stored from wreg
  5496  00231E  6E05               	movwf	UpdateLedRegister@regIndex,c
  5497                           
  5498                           ;main.c: 262: switch(regIndex)
  5499  002320  D014               	goto	l3812
  5500  002322                     l254:
  5501                           
  5502                           ;main.c: 265: LATAbits.LATA4 = 0;
  5503  002322  9889               	bcf	3977,4,c	;volatile
  5504                           
  5505                           ;main.c: 266: TRISAbits.RA4 = 0;
  5506  002324  9892               	bcf	3986,4,c	;volatile
  5507                           
  5508                           ;main.c: 267: LATAbits.LATA4 = 1;
  5509  002326  8889               	bsf	3977,4,c	;volatile
  5510                           
  5511                           ;main.c: 268: TRISAbits.RA4 = 1;
  5512  002328  8892               	bsf	3986,4,c	;volatile
  5513                           
  5514                           ;main.c: 269: break;
  5515  00232A  D018               	goto	l259
  5516  00232C                     l256:
  5517                           
  5518                           ;main.c: 271: LATCbits.LATC3 = 0;
  5519  00232C  968B               	bcf	3979,3,c	;volatile
  5520                           
  5521                           ;main.c: 272: TRISCbits.RC3 = 0;
  5522  00232E  9694               	bcf	3988,3,c	;volatile
  5523                           
  5524                           ;main.c: 273: LATCbits.LATC3 = 1;
  5525  002330  868B               	bsf	3979,3,c	;volatile
  5526                           
  5527                           ;main.c: 274: TRISCbits.RC3 = 1;
  5528  002332  8694               	bsf	3988,3,c	;volatile
  5529                           
  5530                           ;main.c: 275: break;
  5531  002334  D013               	goto	l259
  5532  002336                     l257:
  5533                           
  5534                           ;main.c: 277: LATCbits.LATC0 = 0;
  5535  002336  908B               	bcf	3979,0,c	;volatile
  5536                           
  5537                           ;main.c: 278: TRISCbits.RC0 = 0;
  5538  002338  9094               	bcf	3988,0,c	;volatile
  5539                           
  5540                           ;main.c: 279: LATCbits.LATC0 = 1;
  5541  00233A  808B               	bsf	3979,0,c	;volatile
  5542                           
  5543                           ;main.c: 280: TRISCbits.RC0 = 1;
  5544  00233C  8094               	bsf	3988,0,c	;volatile
  5545                           
  5546                           ;main.c: 281: break;
  5547  00233E  D00E               	goto	l259
  5548  002340                     l258:
  5549                           
  5550                           ;main.c: 283: LATCbits.LATC1 = 0;
  5551  002340  928B               	bcf	3979,1,c	;volatile
  5552                           
  5553                           ;main.c: 284: TRISCbits.RC1 = 0;
  5554  002342  9294               	bcf	3988,1,c	;volatile
  5555                           
  5556                           ;main.c: 285: LATCbits.LATC1 = 1;
  5557  002344  828B               	bsf	3979,1,c	;volatile
  5558                           
  5559                           ;main.c: 286: TRISCbits.RC1 = 1;
  5560  002346  8294               	bsf	3988,1,c	;volatile
  5561                           
  5562                           ;main.c: 287: break;
  5563  002348  D009               	goto	l259
  5564  00234A                     l3812:
  5565  00234A  FFFF               	dw	65535	; assembler added errata NOP
  5566  00234C  5005               	movf	UpdateLedRegister@regIndex,w,c
  5567                           
  5568                           ; Switch size 1, requested type "speed"
  5569                           ; Number of cases is 4, Range of values is 0 to 3
  5570                           ; switch strategies available:
  5571                           ; Name         Instructions Cycles
  5572                           ; simple_byte           13     7 (average)
  5573                           ;	Chosen strategy is simple_byte
  5574  00234E  E0E9               	bz	l254
  5575  002350  0A01               	xorlw	1	; case 1
  5576  002352  E0EC               	bz	l256
  5577  002354  0A03               	xorlw	3	; case 2
  5578  002356  E0EF               	bz	l257
  5579  002358  0A01               	xorlw	1	; case 3
  5580  00235A  E0F2               	bz	l258
  5581  00235C                     l259:
  5582  00235C  FFFF               	dw	65535	; assembler added errata NOP
  5583  00235E  0012               	return		;funcret
  5584  002360  FFFF               	dw	65535	; errata NOP
  5585  002362                     __end_of_UpdateLedRegister:
  5586                           	opt stack 0
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           postinc0	equ	0xFEE
  5595                           wreg	equ	0xFE8
  5596                           postdec1	equ	0xFE5
  5597                           fsr1h	equ	0xFE2
  5598                           fsr1l	equ	0xFE1
  5599                           indf2	equ	0xFDF
  5600                           postinc2	equ	0xFDE
  5601                           postdec2	equ	0xFDD
  5602                           plusw2	equ	0xFDB
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _ProcessDiary *****************
  5608 ;; Defined at:
  5609 ;;		line 610 in file "main.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  minute          1   17[COMRAM] unsigned char 
  5614 ;;  hour            1   16[COMRAM] unsigned char 
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  1    wreg      void 
  5617 ;; Registers used:
  5618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5619 ;; Tracked objects:
  5620 ;;		On entry : F/1
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5624 ;;      Params:         0       0       0       0       0       0       0
  5625 ;;      Locals:         2       0       0       0       0       0       0
  5626 ;;      Temps:          4       0       0       0       0       0       0
  5627 ;;      Totals:         6       0       0       0       0       0       0
  5628 ;;Total ram usage:        6 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    4
  5631 ;; This function calls:
  5632 ;;		_GetTime
  5633 ;;		_LightLed
  5634 ;;		_LoadNextEvent
  5635 ;;		_SwitchOffAllLeds
  5636 ;;		_getHourMin
  5637 ;; This function is called by:
  5638 ;;		_main
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text22
  5643  001A8E                     __ptext22:
  5644                           	opt stack 0
  5645  001A8E                     _ProcessDiary:
  5646                           	opt stack 26
  5647                           
  5648                           ;incstack = 0
  5649  001A8E  FFFF               	dw	65535
  5650                           
  5651                           ; BSR set to: 1
  5652                           ;main.c: 613: if(curEventNum == 0xff)
  5653  001A90  2877               	incf	_curEventNum,w,c
  5654  001A92  E05A               	bz	l387
  5655                           
  5656                           ; BSR set to: 1
  5657                           ;main.c: 615: uint8_t hour, minute;
  5658                           ;main.c: 616: if(!getHourMin(&hour, &minute))
  5659  001A94  0E12               	movlw	low ProcessDiary@minute
  5660  001A96  6E05               	movwf	getHourMin@min,c
  5661  001A98  0E11               	movlw	ProcessDiary@hour& (0+255)
  5662  001A9A  EC44  F012         	call	_getHourMin
  5663  001A9E  0900               	iorlw	0
  5664  001AA0  E053               	bz	l387
  5665                           
  5666                           ;main.c: 619: if(hour == 0 && minute == 0)
  5667  001AA2  5011               	movf	ProcessDiary@hour,w,c
  5668  001AA4  E10C               	bnz	l4610
  5669  001AA6  5012               	movf	ProcessDiary@minute,w,c
  5670  001AA8  E10A               	bnz	l4610
  5671                           
  5672                           ;main.c: 620: {
  5673                           ;main.c: 621: SwitchOffAllLeds();
  5674  001AAA  EC6F  F012         	call	_SwitchOffAllLeds	;wreg free
  5675                           
  5676                           ;main.c: 622: curEventNum = 0xff;
  5677  001AAE  6877               	setf	_curEventNum,c
  5678                           
  5679                           ;main.c: 623: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  5680  001AB0  5079               	movf	_oldEventNum,w,c
  5681  001AB2  6E0D               	movwf	??_ProcessDiary& (0+255),c
  5682  001AB4  5077               	movf	_curEventNum,w,c
  5683  001AB6  0101               	movlb	1	; () banked
  5684  001AB8  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5685  001ABA  C00D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5686  001ABE                     l4610:
  5687                           
  5688                           ;main.c: 625: }
  5689                           ;main.c: 628: if(curEventHour == hour && curEventMinute == minute)
  5690  001ABE  5011               	movf	ProcessDiary@hour,w,c
  5691  001AC0  0100               	movlb	0	; () banked
  5692  001AC2  19C9               	xorwf	_curEventHour& (0+255),w,b
  5693  001AC4  E141               	bnz	l387
  5694                           
  5695                           ; BSR set to: 0
  5696  001AC6  5012               	movf	ProcessDiary@minute,w,c
  5697  001AC8  19CA               	xorwf	_curEventMinute& (0+255),w,b
  5698  001ACA  E13E               	bnz	l387
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;main.c: 629: {
  5702                           ;main.c: 631: if(oldEventNum != 0xff)
  5703  001ACC  2879               	incf	_oldEventNum,w,c
  5704  001ACE  E006               	bz	l4618
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;main.c: 632: {
  5708                           ;main.c: 633: LightLed(oldEventNum + 1, LED_RED, 0);
  5709  001AD0  0E02               	movlw	2
  5710  001AD2  6E05               	movwf	LightLed@ledState,c
  5711  001AD4  6A06               	clrf	LightLed@blink,c
  5712  001AD6  2879               	incf	_oldEventNum,w,c
  5713  001AD8  ECF1  F005         	call	_LightLed
  5714  001ADC                     l4618:
  5715                           
  5716                           ;main.c: 634: }
  5717                           ;main.c: 636: {
  5718                           ;main.c: 637: oldEventNum = curEventNum;
  5719  001ADC  C077  F079         	movff	_curEventNum,_oldEventNum
  5720                           
  5721                           ;main.c: 639: if(curEventType == 0)
  5722  001AE0  0100               	movlb	0	; () banked
  5723  001AE2  51CB               	movf	_curEventType& (0+255),w,b
  5724  001AE4  E107               	bnz	l4624
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;main.c: 640: {
  5728                           ;main.c: 641: LightLed(oldEventNum + 1, LED_GREEN, 1);
  5729  001AE6  0E01               	movlw	1
  5730  001AE8  6E05               	movwf	LightLed@ledState,c
  5731  001AEA  6E06               	movwf	LightLed@blink,c
  5732  001AEC  2879               	incf	_oldEventNum,w,c
  5733  001AEE  ECF1  F005         	call	_LightLed
  5734                           
  5735                           ;main.c: 642: }
  5736  001AF2  D007               	goto	l393
  5737  001AF4                     l4624:
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;main.c: 643: else
  5741                           ;main.c: 644: {
  5742                           ;main.c: 645: LightLed(oldEventNum + 1, LED_RED, 1);
  5743  001AF4  0E02               	movlw	2
  5744  001AF6  6E05               	movwf	LightLed@ledState,c
  5745  001AF8  0E01               	movlw	1
  5746  001AFA  6E06               	movwf	LightLed@blink,c
  5747  001AFC  2879               	incf	_oldEventNum,w,c
  5748  001AFE  ECF1  F005         	call	_LightLed
  5749  001B02                     l393:
  5750  001B02  FFFF               	dw	65535	; assembler added errata NOP
  5751                           
  5752                           ;main.c: 646: }
  5753                           ;main.c: 647: eventResetSecond = *GetTime() + eventAcceptTime;
  5754  001B04  ECDF  F012         	call	_GetTime	;wreg free
  5755  001B08  6ED9               	movwf	fsr2l,c
  5756  001B0A  6ADA               	clrf	fsr2h,c
  5757  001B0C  CFDE F00D          	movff	postinc2,??_ProcessDiary
  5758  001B10  CFDE F00E          	movff	postinc2,??_ProcessDiary+1
  5759  001B14  CFDE F00F          	movff	postinc2,??_ProcessDiary+2
  5760  001B18  CFDE F010          	movff	postinc2,??_ProcessDiary+3
  5761  001B1C  0100               	movlb	0	; () banked
  5762  001B1E  51CE               	movf	_eventAcceptTime& (0+255),w,b
  5763  001B20  240D               	addwf	??_ProcessDiary,w,c
  5764  001B22  6FA8               	movwf	_eventResetSecond& (0+255),b
  5765  001B24  0E00               	movlw	0
  5766  001B26  200E               	addwfc	??_ProcessDiary+1,w,c
  5767  001B28  6FA9               	movwf	(_eventResetSecond+1)& (0+255),b
  5768  001B2A  0E00               	movlw	0
  5769  001B2C  200F               	addwfc	??_ProcessDiary+2,w,c
  5770  001B2E  6FAA               	movwf	(_eventResetSecond+2)& (0+255),b
  5771  001B30  0E00               	movlw	0
  5772  001B32  2010               	addwfc	??_ProcessDiary+3,w,c
  5773  001B34  6FAB               	movwf	(_eventResetSecond+3)& (0+255),b
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;main.c: 648: LoadNextEvent();
  5777  001B36  EC4D  F00F         	call	_LoadNextEvent	;wreg free
  5778                           
  5779                           ;main.c: 649: }
  5780                           ;main.c: 650: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  5781  001B3A  5079               	movf	_oldEventNum,w,c
  5782  001B3C  6E0D               	movwf	??_ProcessDiary& (0+255),c
  5783  001B3E  5077               	movf	_curEventNum,w,c
  5784  001B40  0101               	movlb	1	; () banked
  5785  001B42  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5786  001B44  C00D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5787  001B48                     l387:
  5788  001B48  0012               	return		;funcret
  5789  001B4A  FFFF               	dw	65535	; errata NOP
  5790  001B4C                     __end_of_ProcessDiary:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           prodh	equ	0xFF4
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           postinc0	equ	0xFEE
  5800                           wreg	equ	0xFE8
  5801                           postdec1	equ	0xFE5
  5802                           fsr1h	equ	0xFE2
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           plusw2	equ	0xFDB
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _SwitchOffAllLeds *****************
  5813 ;; Defined at:
  5814 ;;		line 333 in file "main.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  i               1    4[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         0       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         1       0       0       0       0       0       0
  5832 ;;Total ram usage:        1 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    2
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_InitFromEeprom
  5839 ;;		_ProcessDiary
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text23
  5844  0024DE                     __ptext23:
  5845                           	opt stack 0
  5846  0024DE                     _SwitchOffAllLeds:
  5847                           	opt stack 26
  5848                           
  5849                           ;incstack = 0
  5850  0024DE  FFFF               	dw	65535
  5851                           
  5852                           ;main.c: 335: for(uint8_t i = 0; i < 16 - 1; i++)
  5853  0024E0  6A05               	clrf	SwitchOffAllLeds@i,c
  5854  0024E2                     l3700:
  5855  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  5856                           
  5857                           ;main.c: 336: {
  5858                           ;main.c: 337: ledStatuses[i] = 0;
  5859  0024E4  5005               	movf	SwitchOffAllLeds@i,w,c
  5860  0024E6  0F90               	addlw	low _ledStatuses
  5861  0024E8  6ED9               	movwf	fsr2l,c
  5862  0024EA  6ADA               	clrf	fsr2h,c
  5863  0024EC  6ADF               	clrf	indf2,c
  5864                           
  5865                           ;main.c: 338: ledBlink[i] = 0;
  5866  0024EE  5005               	movf	SwitchOffAllLeds@i,w,c
  5867  0024F0  0F80               	addlw	low _ledBlink
  5868  0024F2  6ED9               	movwf	fsr2l,c
  5869  0024F4  6ADA               	clrf	fsr2h,c
  5870  0024F6  6ADF               	clrf	indf2,c
  5871  0024F8  2A05               	incf	SwitchOffAllLeds@i,f,c
  5872  0024FA  0E0E               	movlw	14
  5873  0024FC  6405               	cpfsgt	SwitchOffAllLeds@i,c
  5874  0024FE  D7F1               	goto	l3700
  5875  002500  0C0E               	retlw	14	;funcret
  5876  002502  FFFF               	dw	65535	; errata NOP
  5877  002504                     __end_of_SwitchOffAllLeds:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1h	equ	0xFE2
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           plusw2	equ	0xFDB
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _LoadNextEvent *****************
  5900 ;; Defined at:
  5901 ;;		line 577 in file "main.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  v1              1    8[COMRAM] unsigned char 
  5906 ;;  minute          1   10[COMRAM] unsigned char 
  5907 ;;  hour            1    9[COMRAM] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  1    wreg      void 
  5910 ;; Registers used:
  5911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5917 ;;      Params:         0       0       0       0       0       0       0
  5918 ;;      Locals:         3       0       0       0       0       0       0
  5919 ;;      Temps:          2       0       0       0       0       0       0
  5920 ;;      Totals:         5       0       0       0       0       0       0
  5921 ;;Total ram usage:        5 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    3
  5924 ;; This function calls:
  5925 ;;		_getHourMin
  5926 ;; This function is called by:
  5927 ;;		_InitFromEeprom
  5928 ;;		_ProcessDiary
  5929 ;;		_SetTimeFromRegs
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text24
  5934  001E9A                     __ptext24:
  5935                           	opt stack 0
  5936  001E9A                     _LoadNextEvent:
  5937                           	opt stack 25
  5938                           
  5939                           ;incstack = 0
  5940  001E9A  FFFF               	dw	65535
  5941                           
  5942                           ;main.c: 579: if(eventCount == 0)
  5943  001E9C  5075               	movf	_eventCount,w,c
  5944  001E9E  E03E               	bz	l377
  5945                           
  5946                           ;main.c: 581: uint8_t hour, minute;
  5947                           ;main.c: 582: if(!getHourMin(&hour, &minute))
  5948  001EA0  0E0B               	movlw	low LoadNextEvent@minute
  5949  001EA2  6E05               	movwf	getHourMin@min,c
  5950  001EA4  0E0A               	movlw	LoadNextEvent@hour& (0+255)
  5951  001EA6  EC44  F012         	call	_getHourMin
  5952  001EAA  0900               	iorlw	0
  5953  001EAC  E037               	bz	l377
  5954  001EAE                     l3740:
  5955                           
  5956                           ;main.c: 592: {
  5957                           ;main.c: 593: if(curEventNum == 0xff)
  5958  001EAE  2877               	incf	_curEventNum,w,c
  5959  001EB0  E102               	bnz	l3744
  5960                           
  5961                           ;main.c: 594: curEventNum = 0;
  5962  001EB2  6A77               	clrf	_curEventNum,c
  5963  001EB4  D001               	goto	l3746
  5964  001EB6                     l3744:
  5965                           
  5966                           ;main.c: 595: else
  5967                           ;main.c: 596: curEventNum++;
  5968  001EB6  2A77               	incf	_curEventNum,f,c
  5969  001EB8                     l3746:
  5970  001EB8  FFFF               	dw	65535	; assembler added errata NOP
  5971                           
  5972                           ;main.c: 597: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  5973  001EBA  5079               	movf	_oldEventNum,w,c
  5974  001EBC  6E07               	movwf	??_LoadNextEvent& (0+255),c
  5975  001EBE  5077               	movf	_curEventNum,w,c
  5976  001EC0  0101               	movlb	1	; () banked
  5977  001EC2  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5978  001EC4  C007  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5979                           
  5980                           ; BSR set to: 1
  5981                           ;main.c: 598: if(curEventNum >= eventCount)
  5982  001EC8  5075               	movf	_eventCount,w,c
  5983  001ECA  5C77               	subwf	_curEventNum,w,c
  5984  001ECC  E227               	bc	l377
  5985                           
  5986                           ; BSR set to: 1
  5987                           ;main.c: 601: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  5988  001ECE  5077               	movf	_curEventNum,w,c
  5989  001ED0  0D02               	mullw	2
  5990  001ED2  50F3               	movf	prodl,w,c
  5991  001ED4  0F13               	addlw	19
  5992  001ED6  6EA9               	movwf	4009,c	;volatile
  5993                           
  5994                           ; BSR set to: 1
  5995  001ED8  80A6               	bsf	4006,0,c	;volatile
  5996                           
  5997                           ; BSR set to: 1
  5998  001EDA  CFA8 F009          	movff	4008,LoadNextEvent@v1	;volatile
  5999                           
  6000                           ; BSR set to: 1
  6001                           ;main.c: 602: curEventHour = v1 & 0x1F;
  6002  001EDE  5009               	movf	LoadNextEvent@v1,w,c
  6003  001EE0  0B1F               	andlw	31
  6004  001EE2  0100               	movlb	0	; () banked
  6005  001EE4  6FC9               	movwf	_curEventHour& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;main.c: 603: curEventType = (((v1) >> (5)) & 0x01);
  6009  001EE6  3809               	swapf	LoadNextEvent@v1,w,c
  6010  001EE8  42E8               	rrncf	wreg,f,c
  6011  001EEA  0B07               	andlw	7
  6012  001EEC  0B01               	andlw	1
  6013  001EEE  6FCB               	movwf	_curEventType& (0+255),b
  6014                           
  6015                           ;main.c: 604: curEventMinute = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, 
      +                          EEDATA);
  6016  001EF0  5077               	movf	_curEventNum,w,c
  6017  001EF2  0D02               	mullw	2
  6018  001EF4  50F3               	movf	prodl,w,c
  6019  001EF6  0F14               	addlw	20
  6020  001EF8  6EA9               	movwf	4009,c	;volatile
  6021                           
  6022                           ; BSR set to: 0
  6023  001EFA  80A6               	bsf	4006,0,c	;volatile
  6024                           
  6025                           ; BSR set to: 0
  6026  001EFC  CFA8 F0CA          	movff	4008,_curEventMinute	;volatile
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;main.c: 605: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6030  001F00  51C9               	movf	_curEventHour& (0+255),w,b
  6031  001F02  6E07               	movwf	??_LoadNextEvent& (0+255),c
  6032  001F04  51CA               	movf	_curEventMinute& (0+255),w,b
  6033  001F06  0101               	movlb	1	; () banked
  6034  001F08  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6035  001F0A  C007  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6036                           
  6037                           ; BSR set to: 1
  6038                           ;main.c: 606: }while(curEventHour < hour || curEventMinute <= minute);
  6039  001F0E  500A               	movf	LoadNextEvent@hour,w,c
  6040  001F10  0100               	movlb	0	; () banked
  6041  001F12  5DC9               	subwf	_curEventHour& (0+255),w,b
  6042  001F14  E3CC               	bnc	l3740
  6043                           
  6044                           ; BSR set to: 0
  6045  001F16  51CA               	movf	_curEventMinute& (0+255),w,b
  6046  001F18  5C0B               	subwf	LoadNextEvent@minute,w,c
  6047  001F1A  E2C9               	bc	l3740
  6048  001F1C                     l377:
  6049  001F1C  0012               	return		;funcret
  6050  001F1E  FFFF               	dw	65535	; errata NOP
  6051  001F20                     __end_of_LoadNextEvent:
  6052                           	opt stack 0
  6053                           tblptru	equ	0xFF8
  6054                           tblptrh	equ	0xFF7
  6055                           tblptrl	equ	0xFF6
  6056                           tablat	equ	0xFF5
  6057                           prodh	equ	0xFF4
  6058                           prodl	equ	0xFF3
  6059                           intcon	equ	0xFF2
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1h	equ	0xFE2
  6064                           fsr1l	equ	0xFE1
  6065                           indf2	equ	0xFDF
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           plusw2	equ	0xFDB
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function _getHourMin *****************
  6074 ;; Defined at:
  6075 ;;		line 243 in file "interrupts.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  hour            1    wreg     PTR unsigned char 
  6078 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6079 ;;  min             1    4[COMRAM] PTR unsigned char 
  6080 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  hour            1    5[COMRAM] PTR unsigned char 
  6083 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      unsigned char 
  6086 ;; Registers used:
  6087 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6093 ;;      Params:         1       0       0       0       0       0       0
  6094 ;;      Locals:         1       0       0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0
  6096 ;;      Totals:         2       0       0       0       0       0       0
  6097 ;;Total ram usage:        2 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    2
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_LoadNextEvent
  6104 ;;		_ProcessDiary
  6105 ;;		_main
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text25
  6110  002488                     __ptext25:
  6111                           	opt stack 0
  6112  002488                     _getHourMin:
  6113                           	opt stack 25
  6114                           
  6115                           ;incstack = 0
  6116  002488  FFFF               	dw	65535
  6117                           
  6118                           ;getHourMin@hour stored from wreg
  6119  00248A  6E06               	movwf	getHourMin@hour,c
  6120                           
  6121                           ;interrupts.c: 245: if(globalHours == 0xFF)
  6122  00248C  2878               	incf	_globalHours,w,c	;volatile
  6123  00248E  E102               	bnz	l110
  6124                           
  6125                           ;interrupts.c: 246: return 0;
  6126  002490  0E00               	movlw	0
  6127  002492  D00D               	goto	l111
  6128  002494                     l110:
  6129                           
  6130                           ;interrupts.c: 247: (INTCONbits.GIE = 0);
  6131  002494  9EF2               	bcf	intcon,7,c	;volatile
  6132                           
  6133                           ;interrupts.c: 248: *hour = globalHours;
  6134  002496  5006               	movf	getHourMin@hour,w,c
  6135  002498  6ED9               	movwf	fsr2l,c
  6136  00249A  6ADA               	clrf	fsr2h,c
  6137  00249C  C078  FFDF         	movff	_globalHours,indf2	;volatile
  6138                           
  6139                           ;interrupts.c: 249: *min = globalMinutes;
  6140  0024A0  5005               	movf	getHourMin@min,w,c
  6141  0024A2  6ED9               	movwf	fsr2l,c
  6142  0024A4  6ADA               	clrf	fsr2h,c
  6143  0024A6  C076  FFDF         	movff	_globalMinutes,indf2	;volatile
  6144                           
  6145                           ;interrupts.c: 250: (INTCONbits.GIE = 1);
  6146  0024AA  8EF2               	bsf	intcon,7,c	;volatile
  6147                           
  6148                           ;interrupts.c: 251: return 1;
  6149  0024AC  0E01               	movlw	1
  6150  0024AE                     l111:
  6151  0024AE  FFFF               	dw	65535	; assembler added errata NOP
  6152  0024B0  0012               	return		;funcret
  6153  0024B2  FFFF               	dw	65535	; errata NOP
  6154  0024B4                     __end_of_getHourMin:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           postdec1	equ	0xFE5
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           plusw2	equ	0xFDB
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _LightLed *****************
  6177 ;; Defined at:
  6178 ;;		line 344 in file "main.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  ledNum          1    wreg     unsigned char 
  6181 ;;  ledState        1    4[COMRAM] enum E2427
  6182 ;;  blink           1    5[COMRAM] unsigned char 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  ledNum          1    9[COMRAM] unsigned char 
  6185 ;;  statusShift     1   11[COMRAM] unsigned char 
  6186 ;;  ststusIndex     1   10[COMRAM] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      void 
  6189 ;; Registers used:
  6190 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/1
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6196 ;;      Params:         2       0       0       0       0       0       0
  6197 ;;      Locals:         3       0       0       0       0       0       0
  6198 ;;      Temps:          3       0       0       0       0       0       0
  6199 ;;      Totals:         8       0       0       0       0       0       0
  6200 ;;Total ram usage:        8 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:    2
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_ResetEvent
  6207 ;;		_ProcessDiary
  6208 ;;		_io_poll
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text26
  6213  000BE2                     __ptext26:
  6214                           	opt stack 0
  6215  000BE2                     _LightLed:
  6216                           	opt stack 27
  6217                           
  6218                           ;incstack = 0
  6219  000BE2  FFFF               	dw	65535
  6220                           
  6221                           ;LightLed@ledNum stored from wreg
  6222  000BE4  6E0A               	movwf	LightLed@ledNum,c
  6223                           
  6224                           ;main.c: 346: if(ledNum < 1 || ledNum > 60)
  6225  000BE6  500A               	movf	LightLed@ledNum,w,c
  6226  000BE8  E101 D120          	bz	l270
  6227  000BEC  0E3C               	movlw	60
  6228  000BEE  640A               	cpfsgt	LightLed@ledNum,c
  6229  000BF0  D001               	goto	l3818
  6230  000BF2  D11C               	goto	l270
  6231  000BF4                     l3818:
  6232  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  6233                           
  6234                           ;main.c: 348: ledNum--;
  6235  000BF6  060A               	decf	LightLed@ledNum,f,c
  6236                           
  6237                           ;main.c: 350: uint8_t ststusIndex = ledNum >> 2;
  6238  000BF8  400A               	rrncf	LightLed@ledNum,w,c
  6239  000BFA  42E8               	rrncf	wreg,f,c
  6240  000BFC  0B3F               	andlw	63
  6241  000BFE  6E0B               	movwf	LightLed@ststusIndex,c
  6242                           
  6243                           ;main.c: 351: uint8_t statusShift = (ledNum & 0x03) << 1;
  6244  000C00  C00A  F007         	movff	LightLed@ledNum,??_LightLed
  6245  000C04  0E03               	movlw	3
  6246  000C06  1607               	andwf	??_LightLed,f,c
  6247  000C08  90D8               	bcf	status,0,c
  6248  000C0A  3407               	rlcf	??_LightLed,w,c
  6249  000C0C  6E0C               	movwf	LightLed@statusShift,c
  6250                           
  6251                           ;main.c: 353: switch(ledState)
  6252  000C0E  D105               	goto	l3844
  6253  000C10                     l3824:
  6254                           
  6255                           ;main.c: 356: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6256  000C10  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6257  000C14  2A07               	incf	??_LightLed,f,c
  6258  000C16  0E01               	movlw	1
  6259  000C18  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6260  000C1A  2A07               	incf	??_LightLed,f,c
  6261  000C1C  D003               	goto	u3094
  6262  000C1E                     u3095:
  6263  000C1E  FFFF               	dw	65535	; assembler added errata NOP
  6264  000C20  90D8               	bcf	status,0,c
  6265  000C22  3608               	rlcf	??_LightLed+1,f,c
  6266  000C24                     u3094:
  6267  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6268  000C26  2E07               	decfsz	??_LightLed,f,c
  6269  000C28  D7FA               	goto	u3095
  6270  000C2A  1C08               	comf	??_LightLed+1,w,c
  6271  000C2C  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6272  000C2E  500B               	movf	LightLed@ststusIndex,w,c
  6273  000C30  0F90               	addlw	low _ledStatuses
  6274  000C32  6ED9               	movwf	fsr2l,c
  6275  000C34  6ADA               	clrf	fsr2h,c
  6276  000C36  5009               	movf	??_LightLed+2,w,c
  6277  000C38  16DF               	andwf	indf2,f,c
  6278                           
  6279                           ;main.c: 357: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6280  000C3A  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6281  000C3E  0E01               	movlw	1
  6282  000C40  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6283  000C42  2A07               	incf	??_LightLed,f,c
  6284  000C44  D003               	goto	u3104
  6285  000C46                     u3105:
  6286  000C46  FFFF               	dw	65535	; assembler added errata NOP
  6287  000C48  90D8               	bcf	status,0,c
  6288  000C4A  3608               	rlcf	??_LightLed+1,f,c
  6289  000C4C                     u3104:
  6290  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6291  000C4E  2E07               	decfsz	??_LightLed,f,c
  6292  000C50  D7FA               	goto	u3105
  6293  000C52  1C08               	comf	??_LightLed+1,w,c
  6294  000C54  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6295  000C56  500B               	movf	LightLed@ststusIndex,w,c
  6296  000C58  0F90               	addlw	low _ledStatuses
  6297  000C5A  6ED9               	movwf	fsr2l,c
  6298  000C5C  6ADA               	clrf	fsr2h,c
  6299  000C5E  5009               	movf	??_LightLed+2,w,c
  6300  000C60  16DF               	andwf	indf2,f,c
  6301                           
  6302                           ;main.c: 358: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6303  000C62  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6304  000C66  2A07               	incf	??_LightLed,f,c
  6305  000C68  0E01               	movlw	1
  6306  000C6A  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6307  000C6C  2A07               	incf	??_LightLed,f,c
  6308  000C6E  D003               	goto	u3114
  6309  000C70                     u3115:
  6310  000C70  FFFF               	dw	65535	; assembler added errata NOP
  6311  000C72  90D8               	bcf	status,0,c
  6312  000C74  3608               	rlcf	??_LightLed+1,f,c
  6313  000C76                     u3114:
  6314  000C76  FFFF               	dw	65535	; assembler added errata NOP
  6315  000C78  2E07               	decfsz	??_LightLed,f,c
  6316  000C7A  D7FA               	goto	u3115
  6317  000C7C  1C08               	comf	??_LightLed+1,w,c
  6318  000C7E  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6319  000C80  500B               	movf	LightLed@ststusIndex,w,c
  6320  000C82  0F80               	addlw	low _ledBlink
  6321  000C84  6ED9               	movwf	fsr2l,c
  6322  000C86  6ADA               	clrf	fsr2h,c
  6323  000C88  5009               	movf	??_LightLed+2,w,c
  6324  000C8A  16DF               	andwf	indf2,f,c
  6325                           
  6326                           ;main.c: 359: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6327  000C8C  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6328  000C90  0E01               	movlw	1
  6329  000C92  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6330  000C94  2A07               	incf	??_LightLed,f,c
  6331  000C96  D003               	goto	u3124
  6332  000C98                     u3125:
  6333  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6334  000C9A  90D8               	bcf	status,0,c
  6335  000C9C  3608               	rlcf	??_LightLed+1,f,c
  6336  000C9E                     u3124:
  6337  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6338  000CA0  2E07               	decfsz	??_LightLed,f,c
  6339  000CA2  D7FA               	goto	u3125
  6340  000CA4  D05F               	goto	L3
  6341  000CA6                     l3826:
  6342                           
  6343                           ;main.c: 362: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6344  000CA6  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6345  000CAA  2A07               	incf	??_LightLed,f,c
  6346  000CAC  0E01               	movlw	1
  6347  000CAE  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6348  000CB0  2A07               	incf	??_LightLed,f,c
  6349  000CB2  D003               	goto	u3134
  6350  000CB4                     u3135:
  6351  000CB4  FFFF               	dw	65535	; assembler added errata NOP
  6352  000CB6  90D8               	bcf	status,0,c
  6353  000CB8  3608               	rlcf	??_LightLed+1,f,c
  6354  000CBA                     u3134:
  6355  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  6356  000CBC  2E07               	decfsz	??_LightLed,f,c
  6357  000CBE  D7FA               	goto	u3135
  6358  000CC0  500B               	movf	LightLed@ststusIndex,w,c
  6359  000CC2  0F90               	addlw	low _ledStatuses
  6360  000CC4  6ED9               	movwf	fsr2l,c
  6361  000CC6  6ADA               	clrf	fsr2h,c
  6362  000CC8  5008               	movf	??_LightLed+1,w,c
  6363  000CCA  12DF               	iorwf	indf2,f,c
  6364                           
  6365                           ;main.c: 363: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6366  000CCC  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6367  000CD0  0E01               	movlw	1
  6368  000CD2  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6369  000CD4  2A07               	incf	??_LightLed,f,c
  6370  000CD6  D003               	goto	u3144
  6371  000CD8                     u3145:
  6372  000CD8  FFFF               	dw	65535	; assembler added errata NOP
  6373  000CDA  90D8               	bcf	status,0,c
  6374  000CDC  3608               	rlcf	??_LightLed+1,f,c
  6375  000CDE                     u3144:
  6376  000CDE  FFFF               	dw	65535	; assembler added errata NOP
  6377  000CE0  2E07               	decfsz	??_LightLed,f,c
  6378  000CE2  D7FA               	goto	u3145
  6379  000CE4  1C08               	comf	??_LightLed+1,w,c
  6380  000CE6  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6381  000CE8  500B               	movf	LightLed@ststusIndex,w,c
  6382  000CEA  0F90               	addlw	low _ledStatuses
  6383  000CEC  6ED9               	movwf	fsr2l,c
  6384  000CEE  6ADA               	clrf	fsr2h,c
  6385  000CF0  5009               	movf	??_LightLed+2,w,c
  6386  000CF2  16DF               	andwf	indf2,f,c
  6387                           
  6388                           ;main.c: 364: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6389  000CF4  5006               	movf	LightLed@blink,w,c
  6390  000CF6  E014               	bz	l3832
  6391  000CF8  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6392  000CFC  2A07               	incf	??_LightLed,f,c
  6393  000CFE  0E01               	movlw	1
  6394  000D00  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6395  000D02  2A07               	incf	??_LightLed,f,c
  6396  000D04  D003               	goto	u3164
  6397  000D06                     u3165:
  6398  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6399  000D08  90D8               	bcf	status,0,c
  6400  000D0A  3608               	rlcf	??_LightLed+1,f,c
  6401  000D0C                     u3164:
  6402  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6403  000D0E  2E07               	decfsz	??_LightLed,f,c
  6404  000D10  D7FA               	goto	u3165
  6405  000D12  500B               	movf	LightLed@ststusIndex,w,c
  6406  000D14  0F80               	addlw	low _ledBlink
  6407  000D16  6ED9               	movwf	fsr2l,c
  6408  000D18  6ADA               	clrf	fsr2h,c
  6409  000D1A  5008               	movf	??_LightLed+1,w,c
  6410  000D1C  12DF               	iorwf	indf2,f,c
  6411  000D1E  D015               	goto	l278
  6412  000D20                     l3832:
  6413  000D20  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6414  000D24  2A07               	incf	??_LightLed,f,c
  6415  000D26  0E01               	movlw	1
  6416  000D28  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6417  000D2A  2A07               	incf	??_LightLed,f,c
  6418  000D2C  D003               	goto	u3174
  6419  000D2E                     u3175:
  6420  000D2E  FFFF               	dw	65535	; assembler added errata NOP
  6421  000D30  90D8               	bcf	status,0,c
  6422  000D32  3608               	rlcf	??_LightLed+1,f,c
  6423  000D34                     u3174:
  6424  000D34  FFFF               	dw	65535	; assembler added errata NOP
  6425  000D36  2E07               	decfsz	??_LightLed,f,c
  6426  000D38  D7FA               	goto	u3175
  6427  000D3A  1C08               	comf	??_LightLed+1,w,c
  6428  000D3C  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6429  000D3E  500B               	movf	LightLed@ststusIndex,w,c
  6430  000D40  0F80               	addlw	low _ledBlink
  6431  000D42  6ED9               	movwf	fsr2l,c
  6432  000D44  6ADA               	clrf	fsr2h,c
  6433  000D46  5009               	movf	??_LightLed+2,w,c
  6434  000D48  16DF               	andwf	indf2,f,c
  6435  000D4A                     l278:
  6436  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  6437                           
  6438                           ;main.c: 365: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6439  000D4C  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6440  000D50  0E01               	movlw	1
  6441  000D52  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6442  000D54  2A07               	incf	??_LightLed,f,c
  6443  000D56  D003               	goto	u3184
  6444  000D58                     u3185:
  6445  000D58  FFFF               	dw	65535	; assembler added errata NOP
  6446  000D5A  90D8               	bcf	status,0,c
  6447  000D5C  3608               	rlcf	??_LightLed+1,f,c
  6448  000D5E                     u3184:
  6449  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6450  000D60  2E07               	decfsz	??_LightLed,f,c
  6451  000D62  D7FA               	goto	u3185
  6452  000D64                     L3:
  6453  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6454  000D66  1C08               	comf	??_LightLed+1,w,c
  6455  000D68  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6456  000D6A  500B               	movf	LightLed@ststusIndex,w,c
  6457  000D6C  0F80               	addlw	low _ledBlink
  6458  000D6E  6ED9               	movwf	fsr2l,c
  6459  000D70  6ADA               	clrf	fsr2h,c
  6460  000D72  5009               	movf	??_LightLed+2,w,c
  6461  000D74  16DF               	andwf	indf2,f,c
  6462                           
  6463                           ;main.c: 366: break;
  6464  000D76  D05A               	goto	l270
  6465  000D78                     l3834:
  6466                           
  6467                           ;main.c: 368: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6468  000D78  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6469  000D7C  2A07               	incf	??_LightLed,f,c
  6470  000D7E  0E01               	movlw	1
  6471  000D80  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6472  000D82  2A07               	incf	??_LightLed,f,c
  6473  000D84  D003               	goto	u3194
  6474  000D86                     u3195:
  6475  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6476  000D88  90D8               	bcf	status,0,c
  6477  000D8A  3608               	rlcf	??_LightLed+1,f,c
  6478  000D8C                     u3194:
  6479  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6480  000D8E  2E07               	decfsz	??_LightLed,f,c
  6481  000D90  D7FA               	goto	u3195
  6482  000D92  1C08               	comf	??_LightLed+1,w,c
  6483  000D94  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6484  000D96  500B               	movf	LightLed@ststusIndex,w,c
  6485  000D98  0F90               	addlw	low _ledStatuses
  6486  000D9A  6ED9               	movwf	fsr2l,c
  6487  000D9C  6ADA               	clrf	fsr2h,c
  6488  000D9E  5009               	movf	??_LightLed+2,w,c
  6489  000DA0  16DF               	andwf	indf2,f,c
  6490                           
  6491                           ;main.c: 369: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6492  000DA2  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6493  000DA6  0E01               	movlw	1
  6494  000DA8  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6495  000DAA  2A07               	incf	??_LightLed,f,c
  6496  000DAC  D003               	goto	u3204
  6497  000DAE                     u3205:
  6498  000DAE  FFFF               	dw	65535	; assembler added errata NOP
  6499  000DB0  90D8               	bcf	status,0,c
  6500  000DB2  3608               	rlcf	??_LightLed+1,f,c
  6501  000DB4                     u3204:
  6502  000DB4  FFFF               	dw	65535	; assembler added errata NOP
  6503  000DB6  2E07               	decfsz	??_LightLed,f,c
  6504  000DB8  D7FA               	goto	u3205
  6505  000DBA  500B               	movf	LightLed@ststusIndex,w,c
  6506  000DBC  0F90               	addlw	low _ledStatuses
  6507  000DBE  6ED9               	movwf	fsr2l,c
  6508  000DC0  6ADA               	clrf	fsr2h,c
  6509  000DC2  5008               	movf	??_LightLed+1,w,c
  6510  000DC4  12DF               	iorwf	indf2,f,c
  6511                           
  6512                           ;main.c: 370: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6513  000DC6  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6514  000DCA  2A07               	incf	??_LightLed,f,c
  6515  000DCC  0E01               	movlw	1
  6516  000DCE  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6517  000DD0  2A07               	incf	??_LightLed,f,c
  6518  000DD2  D003               	goto	u3214
  6519  000DD4                     u3215:
  6520  000DD4  FFFF               	dw	65535	; assembler added errata NOP
  6521  000DD6  90D8               	bcf	status,0,c
  6522  000DD8  3608               	rlcf	??_LightLed+1,f,c
  6523  000DDA                     u3214:
  6524  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  6525  000DDC  2E07               	decfsz	??_LightLed,f,c
  6526  000DDE  D7FA               	goto	u3215
  6527  000DE0  1C08               	comf	??_LightLed+1,w,c
  6528  000DE2  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6529  000DE4  500B               	movf	LightLed@ststusIndex,w,c
  6530  000DE6  0F80               	addlw	low _ledBlink
  6531  000DE8  6ED9               	movwf	fsr2l,c
  6532  000DEA  6ADA               	clrf	fsr2h,c
  6533  000DEC  5009               	movf	??_LightLed+2,w,c
  6534  000DEE  16DF               	andwf	indf2,f,c
  6535                           
  6536                           ;main.c: 371: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6537  000DF0  5006               	movf	LightLed@blink,w,c
  6538  000DF2  E0AB               	bz	l278
  6539  000DF4  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6540  000DF8  0E01               	movlw	1
  6541  000DFA  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6542  000DFC  2A07               	incf	??_LightLed,f,c
  6543  000DFE  D003               	goto	u3234
  6544  000E00                     u3235:
  6545  000E00  FFFF               	dw	65535	; assembler added errata NOP
  6546  000E02  90D8               	bcf	status,0,c
  6547  000E04  3608               	rlcf	??_LightLed+1,f,c
  6548  000E06                     u3234:
  6549  000E06  FFFF               	dw	65535	; assembler added errata NOP
  6550  000E08  2E07               	decfsz	??_LightLed,f,c
  6551  000E0A  D7FA               	goto	u3235
  6552  000E0C  500B               	movf	LightLed@ststusIndex,w,c
  6553  000E0E  0F80               	addlw	low _ledBlink
  6554  000E10  6ED9               	movwf	fsr2l,c
  6555  000E12  6ADA               	clrf	fsr2h,c
  6556  000E14  5008               	movf	??_LightLed+1,w,c
  6557  000E16  12DF               	iorwf	indf2,f,c
  6558  000E18  D009               	goto	l270
  6559  000E1A                     l3844:
  6560  000E1A  FFFF               	dw	65535	; assembler added errata NOP
  6561  000E1C  5005               	movf	LightLed@ledState,w,c
  6562                           
  6563                           ; Switch size 1, requested type "speed"
  6564                           ; Number of cases is 3, Range of values is 0 to 2
  6565                           ; switch strategies available:
  6566                           ; Name         Instructions Cycles
  6567                           ; simple_byte           10     6 (average)
  6568                           ;	Chosen strategy is simple_byte
  6569  000E1E  E101 D6F7          	bz	l3824
  6570  000E22  0A01               	xorlw	1	; case 1
  6571  000E24  E101 D73F          	bz	l3826
  6572  000E28  0A03               	xorlw	3	; case 2
  6573  000E2A  E0A6               	bz	l3834
  6574  000E2C                     l270:
  6575  000E2C  FFFF               	dw	65535	; assembler added errata NOP
  6576  000E2E  0012               	return		;funcret
  6577  000E30  FFFF               	dw	65535	; errata NOP
  6578  000E32                     __end_of_LightLed:
  6579                           	opt stack 0
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           postinc0	equ	0xFEE
  6588                           wreg	equ	0xFE8
  6589                           postdec1	equ	0xFE5
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           plusw2	equ	0xFDB
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function _GetTime *****************
  6601 ;; Defined at:
  6602 ;;		line 206 in file "user.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;		None
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;		None
  6607 ;; Return value:  Size  Location     Type
  6608 ;;                  1    wreg      PTR long 
  6609 ;; Registers used:
  6610 ;;		wreg
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6616 ;;      Params:         2       0       0       0       0       0       0
  6617 ;;      Locals:         0       0       0       0       0       0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0
  6619 ;;      Totals:         2       0       0       0       0       0       0
  6620 ;;Total ram usage:        2 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; Hardware stack levels required when called:    2
  6623 ;; This function calls:
  6624 ;;		Nothing
  6625 ;; This function is called by:
  6626 ;;		_ProcessDiary
  6627 ;;		_main
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text27
  6632  0025BE                     __ptext27:
  6633                           	opt stack 0
  6634  0025BE                     _GetTime:
  6635                           	opt stack 27
  6636                           
  6637                           ;incstack = 0
  6638  0025BE  FFFF               	dw	65535
  6639                           
  6640                           ;user.c: 208: return &currentTime;
  6641  0025C0  0ED2               	movlw	_currentTime& (0+255)
  6642  0025C2  0012               	return		;funcret
  6643  0025C4  FFFF               	dw	65535	; errata NOP
  6644  0025C6                     __end_of_GetTime:
  6645                           	opt stack 0
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           postinc0	equ	0xFEE
  6654                           wreg	equ	0xFE8
  6655                           postdec1	equ	0xFE5
  6656                           fsr1h	equ	0xFE2
  6657                           fsr1l	equ	0xFE1
  6658                           indf2	equ	0xFDF
  6659                           postinc2	equ	0xFDE
  6660                           postdec2	equ	0xFDD
  6661                           plusw2	equ	0xFDB
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _ModbusPoll *****************
  6667 ;; Defined at:
  6668 ;;		line 397 in file "ModbusRtu.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  discreteInpu    2   38[COMRAM] unsigned short 
  6671 ;;  coils           1   40[COMRAM] PTR unsigned short 
  6672 ;;		 -> _MODBUSCoils(2), 
  6673 ;;  inputRegs       2   41[COMRAM] PTR unsigned short 
  6674 ;;		 -> _MODBUSInputRegs(30), 
  6675 ;;  inputRegsCou    1   43[COMRAM] const unsigned char 
  6676 ;;  holdingRegs     2   44[COMRAM] PTR unsigned short 
  6677 ;;		 -> _MODBUSHoldingRegs(30), 
  6678 ;;  holdingRegsC    1   46[COMRAM] const unsigned char 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  u8exception     1   49[COMRAM] unsigned char 
  6681 ;;  i8state         1   48[COMRAM] unsigned char 
  6682 ;;  u8current       1   47[COMRAM] unsigned char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      char 
  6685 ;; Registers used:
  6686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : E/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6692 ;;      Params:         9       0       0       0       0       0       0
  6693 ;;      Locals:         3       0       0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0
  6695 ;;      Totals:        12       0       0       0       0       0       0
  6696 ;;Total ram usage:       12 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    5
  6699 ;; This function calls:
  6700 ;;		_ModbusBuildException
  6701 ;;		_ModbusGetRxBuffer
  6702 ;;		_ModbusProcess_FC1
  6703 ;;		_ModbusProcess_FC15
  6704 ;;		_ModbusProcess_FC16
  6705 ;;		_ModbusProcess_FC17
  6706 ;;		_ModbusProcess_FC21
  6707 ;;		_ModbusProcess_FC3
  6708 ;;		_ModbusProcess_FC5
  6709 ;;		_ModbusProcess_FC6
  6710 ;;		_ModbusSendTxBuffer
  6711 ;;		_ModbusValidateRequest
  6712 ;;		_PortAvailable
  6713 ;;		_millis
  6714 ;; This function is called by:
  6715 ;;		_main
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text28
  6720  001262                     __ptext28:
  6721                           	opt stack 0
  6722  001262                     _ModbusPoll:
  6723                           	opt stack 25
  6724                           
  6725                           ;incstack = 0
  6726  001262  FFFF               	dw	65535
  6727                           
  6728                           ;ModbusRtu.c: 402: _holdingRegs = holdingRegs;
  6729  001264  0100               	movlb	0	; () banked
  6730  001266  6BD8               	clrf	__lastCommand& (0+255),b
  6731                           
  6732                           ;ModbusRtu.c: 403: _inputRegsCount = inputRegsCount;
  6733  001268  C02C  F0C2         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6734                           
  6735                           ;ModbusRtu.c: 404: _holdingRegsCount = holdingRegsCount;
  6736  00126C  C02F  F0C1         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;ModbusRtu.c: 409: uint8_t u8current = PortAvailable();
  6740  001270  ECE3  F012         	call	_PortAvailable	;wreg free
  6741  001274  6E30               	movwf	ModbusPoll@u8current,c
  6742                           
  6743                           ;ModbusRtu.c: 413: if (u8current == 0) return 0;
  6744  001276  5030               	movf	ModbusPoll@u8current,w,c
  6745  001278  E103               	bnz	l4686
  6746  00127A                     l4682:
  6747  00127A  FFFF               	dw	65535	; assembler added errata NOP
  6748  00127C  0E00               	movlw	0
  6749  00127E  D09E               	goto	l770
  6750  001280                     l4686:
  6751                           
  6752                           ;ModbusRtu.c: 416: if (u8current != _u8lastRec)
  6753  001280  0100               	movlb	0	; () banked
  6754  001282  51C4               	movf	__u8lastRec& (0+255),w,b
  6755  001284  1830               	xorwf	ModbusPoll@u8current,w,c
  6756  001286  E012               	bz	l4696
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;ModbusRtu.c: 417: {
  6760                           ;ModbusRtu.c: 418: _u8lastRec = u8current;
  6761  001288  C030  F0C4         	movff	ModbusPoll@u8current,__u8lastRec
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;ModbusRtu.c: 419: _u32time = millis() + 5;
  6765  00128C  0E05               	movlw	5
  6766  00128E  EC5A  F012         	call	_millis	;wreg free
  6767  001292  2405               	addwf	?_millis,w,c
  6768  001294  0100               	movlb	0	; () banked
  6769  001296  6FA0               	movwf	__u32time& (0+255),b
  6770  001298  0E00               	movlw	0
  6771  00129A  2006               	addwfc	?_millis+1,w,c
  6772  00129C  6FA1               	movwf	(__u32time+1)& (0+255),b
  6773  00129E  0E00               	movlw	0
  6774  0012A0  2007               	addwfc	?_millis+2,w,c
  6775  0012A2  6FA2               	movwf	(__u32time+2)& (0+255),b
  6776  0012A4  0E00               	movlw	0
  6777  0012A6  2008               	addwfc	?_millis+3,w,c
  6778  0012A8  6FA3               	movwf	(__u32time+3)& (0+255),b
  6779  0012AA  D7E7               	goto	l4682
  6780  0012AC                     l4696:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;ModbusRtu.c: 421: }
  6784                           ;ModbusRtu.c: 422: if (millis() < _u32time)
  6785  0012AC  EC5A  F012         	call	_millis	;wreg free
  6786  0012B0  0100               	movlb	0	; () banked
  6787  0012B2  51A0               	movf	__u32time& (0+255),w,b
  6788  0012B4  5C05               	subwf	?_millis,w,c
  6789  0012B6  51A1               	movf	(__u32time+1)& (0+255),w,b
  6790  0012B8  5806               	subwfb	?_millis+1,w,c
  6791  0012BA  51A2               	movf	(__u32time+2)& (0+255),w,b
  6792  0012BC  5807               	subwfb	?_millis+2,w,c
  6793  0012BE  51A3               	movf	(__u32time+3)& (0+255),w,b
  6794  0012C0  5808               	subwfb	?_millis+3,w,c
  6795  0012C2  E3DB               	bnc	l4682
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;ModbusRtu.c: 425: _u8lastRec = 0;
  6799  0012C4  6BC4               	clrf	__u8lastRec& (0+255),b
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;ModbusRtu.c: 427: _u8lastError = i8state;
  6803  0012C6  ECB1  F011         	call	_ModbusGetRxBuffer	;wreg free
  6804  0012CA  6E31               	movwf	ModbusPoll@i8state,c
  6805                           
  6806                           ;ModbusRtu.c: 428: if (i8state < 4)
  6807  0012CC  0E04               	movlw	4
  6808  0012CE  6031               	cpfslt	ModbusPoll@i8state,c
  6809  0012D0  D003               	goto	l4710
  6810  0012D2                     l4706:
  6811  0012D2  FFFF               	dw	65535	; assembler added errata NOP
  6812                           
  6813                           ;ModbusRtu.c: 429: return i8state;
  6814  0012D4  5031               	movf	ModbusPoll@i8state,w,c
  6815  0012D6  D072               	goto	l770
  6816  0012D8                     l4710:
  6817  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  6818                           
  6819                           ;ModbusRtu.c: 432: if (_au8Buffer[ ID ] != _u8id)
  6820  0012DA  0100               	movlb	0	; () banked
  6821  0012DC  51C3               	movf	__u8id& (0+255),w,b
  6822  0012DE  0101               	movlb	1	; () banked
  6823  0012E0  1900               	xorwf	__au8Buffer& (0+255),w,b
  6824  0012E2  E1CB               	bnz	l4682
  6825                           
  6826                           ; BSR set to: 1
  6827                           ;ModbusRtu.c: 436: uint8_t u8exception = ModbusValidateRequest();
  6828  0012E4  EC19  F007         	call	_ModbusValidateRequest	;wreg free
  6829  0012E8  6E32               	movwf	ModbusPoll@u8exception,c
  6830                           
  6831                           ;ModbusRtu.c: 437: if (u8exception > 0) {
  6832  0012EA  5032               	movf	ModbusPoll@u8exception,w,c
  6833  0012EC  E009               	bz	l4730
  6834                           
  6835                           ;ModbusRtu.c: 438: if (u8exception != NO_REPLY) {
  6836  0012EE  2832               	incf	ModbusPoll@u8exception,w,c
  6837  0012F0  E005               	bz	l4726
  6838                           
  6839                           ;ModbusRtu.c: 439: ModbusBuildException( u8exception );
  6840  0012F2  5032               	movf	ModbusPoll@u8exception,w,c
  6841  0012F4  EC82  F012         	call	_ModbusBuildException
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;ModbusRtu.c: 440: ModbusSendTxBuffer();
  6845  0012F8  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  6846  0012FC                     l4726:
  6847                           
  6848                           ;ModbusRtu.c: 443: return u8exception;
  6849  0012FC  5032               	movf	ModbusPoll@u8exception,w,c
  6850  0012FE  D05E               	goto	l770
  6851  001300                     l4730:
  6852                           
  6853                           ;ModbusRtu.c: 447: _u8lastError = 0;
  6854  001300  EC5A  F012         	call	_millis	;wreg free
  6855                           
  6856                           ;ModbusRtu.c: 450: switch( _au8Buffer[ FUNC ] ) {
  6857  001304  D043               	goto	l4774
  6858  001306                     l4732:
  6859                           
  6860                           ; BSR set to: 1
  6861                           ;ModbusRtu.c: 452: return ModbusProcess_FC1( *coils );
  6862  001306  5029               	movf	ModbusPoll@coils,w,c
  6863  001308  6ED9               	movwf	fsr2l,c
  6864  00130A  6ADA               	clrf	fsr2h,c
  6865  00130C  CFDE F014          	movff	postinc2,ModbusProcess_FC1@regs
  6866  001310  CFDD F015          	movff	postdec2,ModbusProcess_FC1@regs+1
  6867  001314  ECE1  F009         	call	_ModbusProcess_FC1	;wreg free
  6868  001318  D051               	goto	l770
  6869  00131A                     l4736:
  6870                           
  6871                           ; BSR set to: 1
  6872                           ;ModbusRtu.c: 454: return ModbusProcess_FC1( discreteInputs );
  6873  00131A  C027  F014         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6874  00131E  C028  F015         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6875  001322  ECE1  F009         	call	_ModbusProcess_FC1	;wreg free
  6876  001326  D04A               	goto	l770
  6877  001328                     l4740:
  6878                           
  6879                           ; BSR set to: 1
  6880                           ;ModbusRtu.c: 456: return ModbusProcess_FC3( holdingRegs, holdingRegsCount );
  6881  001328  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6882  00132C  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6883  001330  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6884  001334  ECA6  F00D         	call	_ModbusProcess_FC3	;wreg free
  6885  001338  D041               	goto	l770
  6886  00133A                     l4744:
  6887                           
  6888                           ; BSR set to: 1
  6889                           ;ModbusRtu.c: 458: return ModbusProcess_FC3( inputRegs, inputRegsCount );
  6890  00133A  C02A  F014         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6891  00133E  C02B  F015         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6892  001342  C02C  F016         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6893  001346  ECA6  F00D         	call	_ModbusProcess_FC3	;wreg free
  6894  00134A  D038               	goto	l770
  6895  00134C                     l4748:
  6896                           
  6897                           ; BSR set to: 1
  6898                           ;ModbusRtu.c: 460: return ModbusProcess_FC5( coils );
  6899  00134C  5029               	movf	ModbusPoll@coils,w,c
  6900  00134E  EC5C  F00E         	call	_ModbusProcess_FC5
  6901  001352  D034               	goto	l770
  6902  001354                     l4752:
  6903                           
  6904                           ; BSR set to: 1
  6905                           ;ModbusRtu.c: 462: return ModbusProcess_FC6( holdingRegs, holdingRegsCount );
  6906  001354  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  6907  001358  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  6908  00135C  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  6909  001360  EC4F  F010         	call	_ModbusProcess_FC6	;wreg free
  6910  001364  D02B               	goto	l770
  6911  001366                     l4756:
  6912                           
  6913                           ; BSR set to: 1
  6914                           ;ModbusRtu.c: 464: return ModbusProcess_FC15( coils );
  6915  001366  5029               	movf	ModbusPoll@coils,w,c
  6916  001368  EC7A  F00A         	call	_ModbusProcess_FC15
  6917  00136C  D027               	goto	l770
  6918  00136E                     l4760:
  6919                           
  6920                           ; BSR set to: 1
  6921                           ;ModbusRtu.c: 466: return ModbusProcess_FC16( holdingRegs, holdingRegsCount );
  6922  00136E  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  6923  001372  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  6924  001376  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  6925  00137A  EC7E  F00C         	call	_ModbusProcess_FC16	;wreg free
  6926  00137E  D01E               	goto	l770
  6927  001380                     l4764:
  6928                           
  6929                           ; BSR set to: 1
  6930                           ;ModbusRtu.c: 468: return ModbusProcess_FC17();
  6931  001380  EC22  F011         	call	_ModbusProcess_FC17	;wreg free
  6932  001384  D01B               	goto	l770
  6933  001386                     l4768:
  6934                           
  6935                           ; BSR set to: 1
  6936                           ;ModbusRtu.c: 470: return ModbusProcess_FC21();
  6937  001386  EC03  F00E         	call	_ModbusProcess_FC21	;wreg free
  6938  00138A  D018               	goto	l770
  6939  00138C                     l4774:
  6940  00138C  FFFF               	dw	65535	; assembler added errata NOP
  6941  00138E  0101               	movlb	1	; () banked
  6942  001390  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6943                           
  6944                           ; Switch size 1, requested type "speed"
  6945                           ; Number of cases is 10, Range of values is 1 to 21
  6946                           ; switch strategies available:
  6947                           ; Name         Instructions Cycles
  6948                           ; simple_byte           31    16 (average)
  6949                           ;	Chosen strategy is simple_byte
  6950  001392  0A01               	xorlw	1	; case 1
  6951  001394  E0B8               	bz	l4732
  6952  001396  0A03               	xorlw	3	; case 2
  6953  001398  E0C0               	bz	l4736
  6954  00139A  0A01               	xorlw	1	; case 3
  6955  00139C  E0C5               	bz	l4740
  6956  00139E  0A07               	xorlw	7	; case 4
  6957  0013A0  E0CC               	bz	l4744
  6958  0013A2  0A01               	xorlw	1	; case 5
  6959  0013A4  E0D3               	bz	l4748
  6960  0013A6  0A03               	xorlw	3	; case 6
  6961  0013A8  E0D5               	bz	l4752
  6962  0013AA  0A09               	xorlw	9	; case 15
  6963  0013AC  E0DC               	bz	l4756
  6964  0013AE  0A1F               	xorlw	31	; case 16
  6965  0013B0  E0DE               	bz	l4760
  6966  0013B2  0A01               	xorlw	1	; case 17
  6967  0013B4  E0E5               	bz	l4764
  6968  0013B6  0A04               	xorlw	4	; case 21
  6969  0013B8  E0E6               	bz	l4768
  6970  0013BA  D78B               	goto	l4706
  6971  0013BC                     l770:
  6972  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  6973  0013BE  0012               	return		;funcret
  6974  0013C0  FFFF               	dw	65535	; errata NOP
  6975  0013C2                     __end_of_ModbusPoll:
  6976                           	opt stack 0
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           postdec1	equ	0xFE5
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _ModbusValidateRequest *****************
  6998 ;; Defined at:
  6999 ;;		line 674 in file "ModbusRtu.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  recLenBytes     4   25[COMRAM] unsigned long 
  7004 ;;  startAddrByt    4   21[COMRAM] unsigned long 
  7005 ;;  i               1   34[COMRAM] unsigned char 
  7006 ;;  u16regs         2   36[COMRAM] unsigned short 
  7007 ;;  u16count        2   32[COMRAM] unsigned short 
  7008 ;;  u16MsgCRC       2   29[COMRAM] unsigned short 
  7009 ;;  u8regs          1   35[COMRAM] unsigned char 
  7010 ;;  isSupported     1   31[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      unsigned char 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : F/1
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         0       0       0       0       0       0       0
  7021 ;;      Locals:        17       0       0       0       0       0       0
  7022 ;;      Temps:          4       0       0       0       0       0       0
  7023 ;;      Totals:        21       0       0       0       0       0       0
  7024 ;;Total ram usage:       21 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    3
  7027 ;; This function calls:
  7028 ;;		_ModbusCalcCRC
  7029 ;; This function is called by:
  7030 ;;		_ModbusPoll
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text29
  7035  000E32                     __ptext29:
  7036                           	opt stack 0
  7037  000E32                     _ModbusValidateRequest:
  7038                           	opt stack 26
  7039                           
  7040                           ;incstack = 0
  7041  000E32  FFFF               	dw	65535
  7042                           
  7043                           ; BSR set to: 1
  7044                           ;ModbusRtu.c: 676: uint16_t u16MsgCRC =
  7045                           ;ModbusRtu.c: 677: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7046                           ;ModbusRtu.c: 678: | _au8Buffer[_u8BufferSize - 1]);
  7047  000E34  0EFE               	movlw	low (__au8Buffer+65534)
  7048  000E36  2471               	addwf	__u8BufferSize,w,c
  7049  000E38  6ED9               	movwf	fsr2l,c
  7050  000E3A  6ADA               	clrf	fsr2h,c
  7051  000E3C  0E00               	movlw	high (__au8Buffer+65534)
  7052  000E3E  22DA               	addwfc	fsr2h,f,c
  7053  000E40  50DF               	movf	indf2,w,c
  7054  000E42  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7055  000E44  6A12               	clrf	??_ModbusValidateRequest& (0+255),c
  7056  000E46  0EFF               	movlw	low (__au8Buffer+65535)
  7057  000E48  2471               	addwf	__u8BufferSize,w,c
  7058  000E4A  6ED9               	movwf	fsr2l,c
  7059  000E4C  6ADA               	clrf	fsr2h,c
  7060  000E4E  0E00               	movlw	high (__au8Buffer+65535)
  7061  000E50  22DA               	addwfc	fsr2h,f,c
  7062  000E52  50DF               	movf	indf2,w,c
  7063  000E54  1012               	iorwf	??_ModbusValidateRequest,w,c
  7064  000E56  6E1E               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7065  000E58  5013               	movf	??_ModbusValidateRequest+1,w,c
  7066  000E5A  6E1F               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7067                           
  7068                           ; BSR set to: 1
  7069                           ;ModbusRtu.c: 680: {
  7070                           ;ModbusRtu.c: 681: _u16errCnt ++;
  7071  000E5C  5071               	movf	__u8BufferSize,w,c
  7072  000E5E  0FFE               	addlw	254
  7073  000E60  EC15  F010         	call	_ModbusCalcCRC
  7074  000E64  501E               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7075  000E66  1805               	xorwf	?_ModbusCalcCRC,w,c
  7076  000E68  E103               	bnz	u3310
  7077  000E6A  501F               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7078  000E6C  1806               	xorwf	?_ModbusCalcCRC+1,w,c
  7079  000E6E  E002               	bz	l823
  7080  000E70                     u3310:
  7081                           
  7082                           ;ModbusRtu.c: 682: return NO_REPLY;
  7083  000E70  0EFF               	movlw	255
  7084  000E72  D0EF               	goto	l824
  7085  000E74                     l823:
  7086                           
  7087                           ;ModbusRtu.c: 683: }
  7088                           ;ModbusRtu.c: 686: bool isSupported = 0;
  7089  000E74  6A20               	clrf	ModbusValidateRequest@isSupported,c
  7090                           
  7091                           ;ModbusRtu.c: 687: for (uint8_t i = 0; i< sizeof( fctsupported ); i++) {
  7092  000E76  6A23               	clrf	ModbusValidateRequest@i,c
  7093  000E78                     l4010:
  7094  000E78  FFFF               	dw	65535	; assembler added errata NOP
  7095                           
  7096                           ;ModbusRtu.c: 688: if (fctsupported[i] == _au8Buffer[FUNC]) {
  7097  000E7A  0E9D               	movlw	low _fctsupported
  7098  000E7C  2423               	addwf	ModbusValidateRequest@i,w,c
  7099  000E7E  6EF6               	movwf	tblptrl,c
  7100  000E80  6AF7               	clrf	tblptrh,c
  7101  000E82  0E7D               	movlw	high _fctsupported
  7102  000E84  22F7               	addwfc	tblptrh,f,c
  7103  000E86                     	if	0	;There are less than 3 active tblptr bytes
  7104  000E86                     	endif
  7105  000E86  0008               	tblrd		*
  7106  000E88  FFFF               	dw	65535	; errata NOP
  7107  000E8A  50F5               	movf	tablat,w,c
  7108  000E8C  0101               	movlb	1	; () banked
  7109  000E8E  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7110  000E90  E103               	bnz	l4014
  7111                           
  7112                           ; BSR set to: 1
  7113                           ;ModbusRtu.c: 689: isSupported = 1;
  7114  000E92  0E01               	movlw	1
  7115  000E94  6E20               	movwf	ModbusValidateRequest@isSupported,c
  7116                           
  7117                           ;ModbusRtu.c: 690: break;
  7118  000E96  D004               	goto	l4018
  7119  000E98                     l4014:
  7120                           
  7121                           ; BSR set to: 1
  7122  000E98  2A23               	incf	ModbusValidateRequest@i,f,c
  7123                           
  7124                           ; BSR set to: 1
  7125  000E9A  0E09               	movlw	9
  7126  000E9C  6423               	cpfsgt	ModbusValidateRequest@i,c
  7127  000E9E  D7EC               	goto	l4010
  7128  000EA0                     l4018:
  7129  000EA0  FFFF               	dw	65535	; assembler added errata NOP
  7130                           
  7131                           ; BSR set to: 1
  7132                           ;ModbusRtu.c: 694: _u16errCnt ++;
  7133  000EA2  5020               	movf	ModbusValidateRequest@isSupported,w,c
  7134  000EA4  E102               	bnz	l828
  7135                           
  7136                           ; BSR set to: 1
  7137                           ;ModbusRtu.c: 695: return EXC_FUNC_CODE;
  7138  000EA6  0E01               	movlw	1
  7139  000EA8  D0D4               	goto	l824
  7140  000EAA                     l828:
  7141                           
  7142                           ; BSR set to: 1
  7143                           ;ModbusRtu.c: 700: uint16_t u16count = 0;
  7144  000EAA  6A21               	clrf	ModbusValidateRequest@u16count,c
  7145  000EAC  6A22               	clrf	ModbusValidateRequest@u16count+1,c
  7146                           
  7147                           ;ModbusRtu.c: 701: uint8_t u8regs;
  7148                           ;ModbusRtu.c: 702: switch ( _au8Buffer[ FUNC ] ) {
  7149  000EAE  D0B4               	goto	l4112
  7150  000EB0                     l4024:
  7151                           
  7152                           ; BSR set to: 1
  7153                           ;ModbusRtu.c: 704: case MB_FC_READ_DISCRETE_INPUT:
  7154                           ;ModbusRtu.c: 705: case MB_FC_WRITE_MULTIPLE_COILS:
  7155                           ;ModbusRtu.c: 707: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7156  000EB0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7157  000EB2  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7158  000EB4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7159  000EB6  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7160  000EB8  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7161                           
  7162                           ;ModbusRtu.c: 708: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7163  000EBC  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7164  000EBE  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7165  000EC0  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7166  000EC2  6E21               	movwf	ModbusValidateRequest@u16count,c
  7167  000EC4  C012  F022         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7168                           
  7169                           ; BSR set to: 1
  7170                           ;ModbusRtu.c: 709: if(u16count > 16)
  7171  000EC8  5022               	movf	ModbusValidateRequest@u16count+1,w,c
  7172  000ECA  E103               	bnz	u3350
  7173  000ECC  0E11               	movlw	17
  7174  000ECE  5C21               	subwf	ModbusValidateRequest@u16count,w,c
  7175  000ED0  E302               	bnc	l4032
  7176  000ED2                     u3350:
  7177  000ED2                     l4028:
  7178                           
  7179                           ; BSR set to: 1
  7180                           ;ModbusRtu.c: 710: return EXC_REGS_QUANT;
  7181  000ED2  0E03               	movlw	3
  7182  000ED4  D0BE               	goto	l824
  7183  000ED6                     l4032:
  7184                           
  7185                           ; BSR set to: 1
  7186                           ;ModbusRtu.c: 711: if(u16regs > 15 || u16regs + u16count > 16)
  7187  000ED6  5026               	movf	ModbusValidateRequest@u16regs+1,w,c
  7188  000ED8  E110               	bnz	l4036
  7189  000EDA  0E10               	movlw	16
  7190  000EDC  5C25               	subwf	ModbusValidateRequest@u16regs,w,c
  7191  000EDE  E20D               	bc	l4036
  7192                           
  7193                           ; BSR set to: 1
  7194  000EE0  5021               	movf	ModbusValidateRequest@u16count,w,c
  7195  000EE2  2425               	addwf	ModbusValidateRequest@u16regs,w,c
  7196  000EE4  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7197  000EE6  5022               	movf	ModbusValidateRequest@u16count+1,w,c
  7198  000EE8  2026               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7199  000EEA  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7200  000EEC  5013               	movf	??_ModbusValidateRequest+1,w,c
  7201  000EEE  E105               	bnz	u3370
  7202  000EF0  0E11               	movlw	17
  7203  000EF2  5C12               	subwf	??_ModbusValidateRequest,w,c
  7204  000EF4                     L4:
  7205  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  7206  000EF6  E201 D0AA          	bnc	l4114
  7207  000EFA                     u3370:
  7208  000EFA                     l4036:
  7209  000EFA  FFFF               	dw	65535	; assembler added errata NOP
  7210                           
  7211                           ;ModbusRtu.c: 712: return EXC_ADDR_RANGE;
  7212  000EFC  0E02               	movlw	2
  7213  000EFE  D0A9               	goto	l824
  7214  000F00                     l4040:
  7215                           
  7216                           ; BSR set to: 1
  7217                           ;ModbusRtu.c: 715: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7218  000F00  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7219  000F02  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7220  000F04  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7221  000F06  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7222  000F08  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7223                           
  7224                           ; BSR set to: 1
  7225                           ;ModbusRtu.c: 716: u8regs = _au8Buffer[ NB_HI ];
  7226  000F0C  C104  F024         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7227                           
  7228                           ;ModbusRtu.c: 717: if(u8regs != 0x00 && u8regs != 0xFF)
  7229  000F10  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7230  000F12  E002               	bz	l4050
  7231                           
  7232                           ; BSR set to: 1
  7233  000F14  2824               	incf	ModbusValidateRequest@u8regs,w,c
  7234  000F16  E1DD               	bnz	l4028
  7235  000F18                     l4050:
  7236                           
  7237                           ; BSR set to: 1
  7238                           ;ModbusRtu.c: 719: if (u16regs > 15)
  7239  000F18  5026               	movf	ModbusValidateRequest@u16regs+1,w,c
  7240  000F1A  E1EF               	bnz	l4036
  7241  000F1C  0E10               	movlw	16
  7242  000F1E  5C25               	subwf	ModbusValidateRequest@u16regs,w,c
  7243  000F20  D7E9               	goto	L4
  7244  000F22                     l4056:
  7245                           
  7246                           ; BSR set to: 1
  7247                           ;ModbusRtu.c: 723: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7248  000F22  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7249  000F24  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7250  000F26  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7251  000F28  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7252  000F2A  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7253  000F2E                     l4058:
  7254  000F2E  FFFF               	dw	65535	; assembler added errata NOP
  7255                           
  7256                           ; BSR set to: 1
  7257                           ;ModbusRtu.c: 724: u8regs = (uint8_t) u16regs;
  7258  000F30  C025  F024         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7259                           
  7260                           ; BSR set to: 1
  7261                           ;ModbusRtu.c: 725: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7262  000F34  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7263  000F36  0100               	movlb	0	; () banked
  7264  000F38  5DC1               	subwf	__holdingRegsCount& (0+255),w,b
  7265  000F3A  FFFF               	dw	65535	; assembler added errata NOP
  7266  000F3C  E3DE               	bnc	l4036
  7267  000F3E  D087               	goto	l4114
  7268  000F40                     l4066:
  7269                           
  7270                           ; BSR set to: 1
  7271                           ;ModbusRtu.c: 728: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7272  000F40  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7273  000F42  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7274  000F44  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7275  000F46  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7276  000F48  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7277                           
  7278                           ; BSR set to: 1
  7279                           ;ModbusRtu.c: 729: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7280  000F4C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7281  000F4E  C104  F012         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7282  000F52  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7283  000F54  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7284  000F58  6A12               	clrf	??_ModbusValidateRequest,c
  7285  000F5A  1212               	iorwf	??_ModbusValidateRequest,f,c
  7286  000F5C  5012               	movf	??_ModbusValidateRequest,w,c
  7287  000F5E  2625               	addwf	ModbusValidateRequest@u16regs,f,c
  7288  000F60  5013               	movf	??_ModbusValidateRequest+1,w,c
  7289  000F62  2226               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;ModbusRtu.c: 730: u8regs = (uint8_t) u16regs;
  7293  000F64  C025  F024         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7294                           
  7295                           ; BSR set to: 1
  7296                           ;ModbusRtu.c: 731: if (u8regs > _inputRegsCount)
  7297  000F68  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7298  000F6A  0100               	movlb	0	; () banked
  7299  000F6C  5DC2               	subwf	__inputRegsCount& (0+255),w,b
  7300  000F6E  D7E5               	goto	L5
  7301  000F70                     l4078:
  7302                           
  7303                           ; BSR set to: 1
  7304                           ;ModbusRtu.c: 735: case MB_FC_WRITE_MULTIPLE_REGISTERS :
  7305                           ;ModbusRtu.c: 736: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7306  000F70  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7307  000F72  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7308  000F74  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7309  000F76  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7310  000F78  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;ModbusRtu.c: 737: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7314  000F7C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7315  000F7E  C104  F012         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7316  000F82  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7317  000F84  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7318  000F88  6A12               	clrf	??_ModbusValidateRequest,c
  7319  000F8A  1212               	iorwf	??_ModbusValidateRequest,f,c
  7320  000F8C  5012               	movf	??_ModbusValidateRequest,w,c
  7321  000F8E  2625               	addwf	ModbusValidateRequest@u16regs,f,c
  7322  000F90  5013               	movf	??_ModbusValidateRequest+1,w,c
  7323  000F92  2226               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7324  000F94  D7CC               	goto	l4058
  7325  000F96                     l4090:
  7326                           
  7327                           ; BSR set to: 1
  7328                           ;ModbusRtu.c: 746: if(_au8Buffer[ FILE_REF_TYPE ] != 6)
  7329  000F96  0E06               	movlw	6
  7330  000F98  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7331  000F9A  E1AF               	bnz	l4036
  7332                           
  7333                           ; BSR set to: 1
  7334                           ;ModbusRtu.c: 749: if(_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] != 
      +                          0x01)
  7335  000F9C  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7336  000F9E  E1AD               	bnz	l4036
  7337                           
  7338                           ; BSR set to: 1
  7339  000FA0  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7340  000FA2  E1AB               	bnz	l4036
  7341                           
  7342                           ; BSR set to: 1
  7343                           ;ModbusRtu.c: 752: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7344  000FA4  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7345  000FA6  C106  F012         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7346  000FAA  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7347  000FAC  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7348  000FB0  6A12               	clrf	??_ModbusValidateRequest,c
  7349  000FB2  1212               	iorwf	??_ModbusValidateRequest,f,c
  7350  000FB4  0E00               	movlw	0
  7351  000FB6  90D8               	bcf	status,0,c
  7352  000FB8  3612               	rlcf	??_ModbusValidateRequest,f,c
  7353  000FBA  3613               	rlcf	??_ModbusValidateRequest+1,f,c
  7354  000FBC  C012  F016         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7355  000FC0  C013  F017         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7356  000FC4  BE17               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7357  000FC6  0EFF               	movlw	-1
  7358  000FC8  6E18               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7359  000FCA  6E19               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7360                           
  7361                           ;ModbusRtu.c: 753: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7362  000FCC  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7363  000FCE  C108  F012         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7364  000FD2  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7365  000FD4  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7366  000FD8  6A12               	clrf	??_ModbusValidateRequest,c
  7367  000FDA  1212               	iorwf	??_ModbusValidateRequest,f,c
  7368  000FDC  0E00               	movlw	0
  7369  000FDE  90D8               	bcf	status,0,c
  7370  000FE0  3612               	rlcf	??_ModbusValidateRequest,f,c
  7371  000FE2  3613               	rlcf	??_ModbusValidateRequest+1,f,c
  7372  000FE4  C012  F01A         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7373  000FE8  C013  F01B         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7374  000FEC  BE1B               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7375  000FEE  0EFF               	movlw	-1
  7376  000FF0  6E1C               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7377  000FF2  6E1D               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7378                           
  7379                           ;ModbusRtu.c: 755: if(startAddrBytes + recLenBytes >= 256)
  7380  000FF4  501A               	movf	ModbusValidateRequest@recLenBytes,w,c
  7381  000FF6  2416               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7382  000FF8  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7383  000FFA  501B               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7384  000FFC  2017               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7385  000FFE  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7386  001000  501C               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7387  001002  2018               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7388  001004  6E14               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7389  001006  501D               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7390  001008  2019               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7391  00100A  6E15               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7392  00100C  5015               	movf	??_ModbusValidateRequest+3,w,c
  7393  00100E  1014               	iorwf	??_ModbusValidateRequest+2,w,c
  7394  001010  E102               	bnz	u3470
  7395  001012  0413               	decf	??_ModbusValidateRequest+1,w,c
  7396  001014  D76F               	goto	L4
  7397  001016                     u3470:
  7398  001016  D771               	goto	l4036
  7399  001018                     l4112:
  7400  001018  FFFF               	dw	65535	; assembler added errata NOP
  7401                           
  7402                           ; BSR set to: 1
  7403  00101A  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7404                           
  7405                           ; Switch size 1, requested type "speed"
  7406                           ; Number of cases is 10, Range of values is 1 to 21
  7407                           ; switch strategies available:
  7408                           ; Name         Instructions Cycles
  7409                           ; simple_byte           31    16 (average)
  7410                           ;	Chosen strategy is simple_byte
  7411  00101C  0A01               	xorlw	1	; case 1
  7412  00101E  E101 D747          	bz	l4024
  7413  001022  0A03               	xorlw	3	; case 2
  7414  001024  E101 D744          	bz	l4024
  7415  001028  0A01               	xorlw	1	; case 3
  7416  00102A  E0A2               	bz	l4078
  7417  00102C  0A07               	xorlw	7	; case 4
  7418  00102E  E088               	bz	l4066
  7419  001030  0A01               	xorlw	1	; case 5
  7420  001032  E101 D765          	bz	l4040
  7421  001036  0A03               	xorlw	3	; case 6
  7422  001038  E101 D773          	bz	l4056
  7423  00103C  0A09               	xorlw	9	; case 15
  7424  00103E  E101 D737          	bz	l4024
  7425  001042  0A1F               	xorlw	31	; case 16
  7426  001044  E095               	bz	l4078
  7427  001046  0A01               	xorlw	1	; case 17
  7428  001048  E002               	bz	l4114
  7429  00104A  0A04               	xorlw	4	; case 21
  7430  00104C  E0A4               	bz	l4090
  7431  00104E                     l4114:
  7432  00104E  FFFF               	dw	65535	; assembler added errata NOP
  7433                           
  7434                           ;ModbusRtu.c: 759: return 0;
  7435  001050  0E00               	movlw	0
  7436  001052                     l824:
  7437  001052  FFFF               	dw	65535	; assembler added errata NOP
  7438  001054  0012               	return		;funcret
  7439  001056  FFFF               	dw	65535	; errata NOP
  7440  001058                     __end_of_ModbusValidateRequest:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1h	equ	0xFE2
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           plusw2	equ	0xFDB
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function _ModbusProcess_FC6 *****************
  7463 ;; Defined at:
  7464 ;;		line 999 in file "ModbusRtu.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  regs            2   19[COMRAM] PTR unsigned short 
  7467 ;;		 -> _MODBUSHoldingRegs(30), 
  7468 ;;  u8size          1   21[COMRAM] unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  u16add          2   27[COMRAM] unsigned short 
  7471 ;;  u16val          2   24[COMRAM] unsigned short 
  7472 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : E/1
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7482 ;;      Params:         3       0       0       0       0       0       0
  7483 ;;      Locals:         5       0       0       0       0       0       0
  7484 ;;      Temps:          2       0       0       0       0       0       0
  7485 ;;      Totals:        10       0       0       0       0       0       0
  7486 ;;Total ram usage:       10 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    4
  7489 ;; This function calls:
  7490 ;;		_ModbusSendTxBuffer
  7491 ;; This function is called by:
  7492 ;;		_ModbusPoll
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text30
  7497  00209E                     __ptext30:
  7498                           	opt stack 0
  7499  00209E                     _ModbusProcess_FC6:
  7500                           	opt stack 25
  7501                           
  7502                           ;incstack = 0
  7503  00209E  FFFF               	dw	65535
  7504                           
  7505                           ;ModbusRtu.c: 1001: _lastCommand = MODBUS_COM_WRITE_SINGLE_REGISTER;
  7506  0020A0  0E06               	movlw	6
  7507  0020A2  0100               	movlb	0	; () banked
  7508  0020A4  6FD8               	movwf	__lastCommand& (0+255),b
  7509                           
  7510                           ;ModbusRtu.c: 1003: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7511  0020A6  0101               	movlb	1	; () banked
  7512  0020A8  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7513  0020AA  6E17               	movwf	??_ModbusProcess_FC6& (0+255),c
  7514  0020AC  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7515  0020AE  6E1C               	movwf	ModbusProcess_FC6@u16add,c
  7516  0020B0  C017  F01D         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7517                           
  7518                           ; BSR set to: 1
  7519                           ;ModbusRtu.c: 1004: _lastAddress = u16add;
  7520  0020B4  C01C  F0B6         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7521  0020B8  C01D  F0B7         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7522                           
  7523                           ;ModbusRtu.c: 1005: _lastCount = 1;
  7524  0020BC  0100               	movlb	0	; () banked
  7525  0020BE  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7526  0020C0  0E01               	movlw	1
  7527  0020C2  6FB8               	movwf	__lastCount& (0+255),b
  7528                           
  7529                           ;ModbusRtu.c: 1006: uint8_t u8CopyBufferSize;
  7530                           ;ModbusRtu.c: 1007: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7531  0020C4  0101               	movlb	1	; () banked
  7532  0020C6  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7533  0020C8  6E17               	movwf	??_ModbusProcess_FC6& (0+255),c
  7534  0020CA  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7535  0020CC  6E19               	movwf	ModbusProcess_FC6@u16val,c
  7536  0020CE  C017  F01A         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7537                           
  7538                           ; BSR set to: 1
  7539                           ;ModbusRtu.c: 1009: regs[ u16add ] = u16val;
  7540  0020D2  90D8               	bcf	status,0,c
  7541  0020D4  341C               	rlcf	ModbusProcess_FC6@u16add,w,c
  7542  0020D6  6ED9               	movwf	fsr2l,c
  7543  0020D8  341D               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7544  0020DA  6EDA               	movwf	fsr2h,c
  7545  0020DC  5014               	movf	ModbusProcess_FC6@regs,w,c
  7546  0020DE  26D9               	addwf	fsr2l,f,c
  7547  0020E0  5015               	movf	ModbusProcess_FC6@regs+1,w,c
  7548  0020E2  22DA               	addwfc	fsr2h,f,c
  7549  0020E4  C019  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7550  0020E8  C01A  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7551                           
  7552                           ; BSR set to: 1
  7553                           ;ModbusRtu.c: 1012: _u8BufferSize = RESPONSE_SIZE;
  7554  0020EC  0E06               	movlw	6
  7555  0020EE  6E71               	movwf	__u8BufferSize,c
  7556                           
  7557                           ; BSR set to: 1
  7558                           ;ModbusRtu.c: 1014: u8CopyBufferSize = _u8BufferSize +2;
  7559  0020F0  5071               	movf	__u8BufferSize,w,c
  7560  0020F2  0F02               	addlw	2
  7561  0020F4  6E1B               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7562                           
  7563                           ; BSR set to: 1
  7564                           ;ModbusRtu.c: 1015: ModbusSendTxBuffer();
  7565  0020F6  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  7566                           
  7567                           ;ModbusRtu.c: 1017: return u8CopyBufferSize;
  7568  0020FA  501B               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7569  0020FC  0012               	return		;funcret
  7570  0020FE  FFFF               	dw	65535	; errata NOP
  7571  002100                     __end_of_ModbusProcess_FC6:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           postinc0	equ	0xFEE
  7581                           wreg	equ	0xFE8
  7582                           postdec1	equ	0xFE5
  7583                           fsr1h	equ	0xFE2
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           postdec2	equ	0xFDD
  7588                           plusw2	equ	0xFDB
  7589                           fsr2h	equ	0xFDA
  7590                           fsr2l	equ	0xFD9
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _ModbusProcess_FC5 *****************
  7594 ;; Defined at:
  7595 ;;		line 962 in file "ModbusRtu.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  regs            1    wreg     PTR unsigned short 
  7598 ;;		 -> _MODBUSCoils(2), 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  regs            1   28[COMRAM] PTR unsigned short 
  7601 ;;		 -> _MODBUSCoils(2), 
  7602 ;;  u16coil         2   25[COMRAM] unsigned short 
  7603 ;;  u8currentBit    1   27[COMRAM] unsigned char 
  7604 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7609 ;; Tracked objects:
  7610 ;;		On entry : E/1
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7614 ;;      Params:         0       0       0       0       0       0       0
  7615 ;;      Locals:         5       0       0       0       0       0       0
  7616 ;;      Temps:          5       0       0       0       0       0       0
  7617 ;;      Totals:        10       0       0       0       0       0       0
  7618 ;;Total ram usage:       10 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    4
  7621 ;; This function calls:
  7622 ;;		_ModbusSendTxBuffer
  7623 ;; This function is called by:
  7624 ;;		_ModbusPoll
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text31
  7629  001CB8                     __ptext31:
  7630                           	opt stack 0
  7631  001CB8                     _ModbusProcess_FC5:
  7632                           	opt stack 25
  7633                           
  7634                           ;incstack = 0
  7635  001CB8  FFFF               	dw	65535
  7636                           
  7637                           ;ModbusProcess_FC5@regs stored from wreg
  7638  001CBA  6E1D               	movwf	ModbusProcess_FC5@regs,c
  7639                           
  7640                           ;ModbusRtu.c: 964: _lastCommand = MODBUS_COM_WRITE_SINGLE_COIL;
  7641  001CBC  0E05               	movlw	5
  7642  001CBE  0100               	movlb	0	; () banked
  7643  001CC0  6FD8               	movwf	__lastCommand& (0+255),b
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;ModbusRtu.c: 967: uint8_t u8currentBit;
  7647                           ;ModbusRtu.c: 968: uint8_t u8CopyBufferSize;
  7648                           ;ModbusRtu.c: 969: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7649  001CC2  0101               	movlb	1	; () banked
  7650  001CC4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7651  001CC6  6E14               	movwf	??_ModbusProcess_FC5& (0+255),c
  7652  001CC8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7653  001CCA  6E1A               	movwf	ModbusProcess_FC5@u16coil,c
  7654  001CCC  C014  F01B         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;ModbusRtu.c: 970: _lastAddress = u16coil;
  7658  001CD0  C01A  F0B6         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7659  001CD4  C01B  F0B7         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7660                           
  7661                           ; BSR set to: 1
  7662                           ;ModbusRtu.c: 971: _lastCount = 1;
  7663  001CD8  0100               	movlb	0	; () banked
  7664  001CDA  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7665  001CDC  0E01               	movlw	1
  7666  001CDE  6FB8               	movwf	__lastCount& (0+255),b
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;ModbusRtu.c: 974: u8currentBit = (uint8_t) (u16coil % 16);
  7670  001CE0  501A               	movf	ModbusProcess_FC5@u16coil,w,c
  7671  001CE2  0B0F               	andlw	15
  7672  001CE4  6E1C               	movwf	ModbusProcess_FC5@u8currentBit,c
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;ModbusRtu.c: 977: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7676  001CE6  0101               	movlb	1	; () banked
  7677  001CE8  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7678  001CEA  E116               	bnz	l4222
  7679                           
  7680                           ; BSR set to: 1
  7681  001CEC  C01C  F014         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7682  001CF0  0E01               	movlw	1
  7683  001CF2  6E15               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7684  001CF4  6A16               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7685  001CF6  2A14               	incf	??_ModbusProcess_FC5,f,c
  7686  001CF8  D004               	goto	u3584
  7687  001CFA                     u3585:
  7688  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  7689  001CFC  90D8               	bcf	status,0,c
  7690  001CFE  3615               	rlcf	??_ModbusProcess_FC5+1,f,c
  7691  001D00  3616               	rlcf	??_ModbusProcess_FC5+2,f,c
  7692  001D02                     u3584:
  7693  001D02  FFFF               	dw	65535	; assembler added errata NOP
  7694  001D04  2E14               	decfsz	??_ModbusProcess_FC5,f,c
  7695  001D06  D7F9               	goto	u3585
  7696  001D08  501D               	movf	ModbusProcess_FC5@regs,w,c
  7697  001D0A  6ED9               	movwf	fsr2l,c
  7698  001D0C  6ADA               	clrf	fsr2h,c
  7699  001D0E  5015               	movf	??_ModbusProcess_FC5+1,w,c
  7700  001D10  12DE               	iorwf	postinc2,f,c
  7701  001D12  5016               	movf	??_ModbusProcess_FC5+2,w,c
  7702  001D14  12DD               	iorwf	postdec2,f,c
  7703  001D16  D019               	goto	l4224
  7704  001D18                     l4222:
  7705                           
  7706                           ; BSR set to: 1
  7707  001D18  C01C  F014         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7708  001D1C  0E01               	movlw	1
  7709  001D1E  6E15               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7710  001D20  6A16               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7711  001D22  2A14               	incf	??_ModbusProcess_FC5,f,c
  7712  001D24  D004               	goto	u3594
  7713  001D26                     u3595:
  7714  001D26  FFFF               	dw	65535	; assembler added errata NOP
  7715  001D28  90D8               	bcf	status,0,c
  7716  001D2A  3615               	rlcf	??_ModbusProcess_FC5+1,f,c
  7717  001D2C  3616               	rlcf	??_ModbusProcess_FC5+2,f,c
  7718  001D2E                     u3594:
  7719  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  7720  001D30  2E14               	decfsz	??_ModbusProcess_FC5,f,c
  7721  001D32  D7F9               	goto	u3595
  7722  001D34  1C15               	comf	??_ModbusProcess_FC5+1,w,c
  7723  001D36  6E17               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7724  001D38  1C16               	comf	??_ModbusProcess_FC5+2,w,c
  7725  001D3A  6E18               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7726  001D3C  501D               	movf	ModbusProcess_FC5@regs,w,c
  7727  001D3E  6ED9               	movwf	fsr2l,c
  7728  001D40  6ADA               	clrf	fsr2h,c
  7729  001D42  5017               	movf	??_ModbusProcess_FC5+3,w,c
  7730  001D44  16DE               	andwf	postinc2,f,c
  7731  001D46  5018               	movf	??_ModbusProcess_FC5+4,w,c
  7732  001D48  16DD               	andwf	postdec2,f,c
  7733  001D4A                     l4224:
  7734  001D4A  FFFF               	dw	65535	; assembler added errata NOP
  7735                           
  7736                           ;ModbusRtu.c: 984: _u8BufferSize = 6;
  7737  001D4C  0E06               	movlw	6
  7738  001D4E  6E71               	movwf	__u8BufferSize,c
  7739                           
  7740                           ;ModbusRtu.c: 985: u8CopyBufferSize = _u8BufferSize +2;
  7741  001D50  5071               	movf	__u8BufferSize,w,c
  7742  001D52  0F02               	addlw	2
  7743  001D54  6E19               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7744                           
  7745                           ;ModbusRtu.c: 986: ModbusSendTxBuffer();
  7746  001D56  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  7747                           
  7748                           ;ModbusRtu.c: 988: return u8CopyBufferSize;
  7749  001D5A  5019               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7750  001D5C  0012               	return		;funcret
  7751  001D5E  FFFF               	dw	65535	; errata NOP
  7752  001D60                     __end_of_ModbusProcess_FC5:
  7753                           	opt stack 0
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           postinc0	equ	0xFEE
  7762                           wreg	equ	0xFE8
  7763                           postdec1	equ	0xFE5
  7764                           fsr1h	equ	0xFE2
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           plusw2	equ	0xFDB
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function _ModbusProcess_FC3 *****************
  7775 ;; Defined at:
  7776 ;;		line 928 in file "ModbusRtu.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  regs            2   19[COMRAM] PTR unsigned short 
  7779 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  7780 ;;  u8size          1   21[COMRAM] unsigned char 
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  u16regsno       2   27[COMRAM] unsigned short 
  7783 ;;  i               1   30[COMRAM] unsigned char 
  7784 ;;  u8StartAdd      1   29[COMRAM] unsigned char 
  7785 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      unsigned char 
  7788 ;; Registers used:
  7789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7790 ;; Tracked objects:
  7791 ;;		On entry : E/1
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7795 ;;      Params:         3       0       0       0       0       0       0
  7796 ;;      Locals:         5       0       0       0       0       0       0
  7797 ;;      Temps:          4       0       0       0       0       0       0
  7798 ;;      Totals:        12       0       0       0       0       0       0
  7799 ;;Total ram usage:       12 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    4
  7802 ;; This function calls:
  7803 ;;		_ModbusSendTxBuffer
  7804 ;; This function is called by:
  7805 ;;		_ModbusPoll
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text32
  7810  001B4C                     __ptext32:
  7811                           	opt stack 0
  7812  001B4C                     _ModbusProcess_FC3:
  7813                           	opt stack 25
  7814                           
  7815                           ;incstack = 0
  7816  001B4C  FFFF               	dw	65535
  7817                           
  7818                           ;ModbusRtu.c: 930: _lastCommand = MODBUS_COM_READ_HOLDING;
  7819  001B4E  0E03               	movlw	3
  7820  001B50  0100               	movlb	0	; () banked
  7821  001B52  6FD8               	movwf	__lastCommand& (0+255),b
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;ModbusRtu.c: 932: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  7825  001B54  C103  F01E         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;ModbusRtu.c: 933: _lastAddress = u8StartAdd;
  7829  001B58  C01E  F0B6         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  7830  001B5C  6BB7               	clrf	(__lastAddress+1)& (0+255),b
  7831                           
  7832                           ;ModbusRtu.c: 934: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  7833  001B5E  0101               	movlb	1	; () banked
  7834  001B60  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7835  001B62  6E17               	movwf	??_ModbusProcess_FC3& (0+255),c
  7836  001B64  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7837  001B66  6E1C               	movwf	ModbusProcess_FC3@u16regsno,c
  7838  001B68  C017  F01D         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  7839                           
  7840                           ; BSR set to: 1
  7841                           ;ModbusRtu.c: 935: _lastCount = u16regsno;
  7842  001B6C  C01C  F0B8         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  7843  001B70  C01D  F0B9         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  7844                           
  7845                           ; BSR set to: 1
  7846                           ;ModbusRtu.c: 936: uint8_t u8CopyBufferSize;
  7847                           ;ModbusRtu.c: 937: uint8_t i;
  7848                           ;ModbusRtu.c: 939: _au8Buffer[ 2 ] = u16regsno * 2;
  7849  001B74  501C               	movf	ModbusProcess_FC3@u16regsno,w,c
  7850  001B76  241C               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7851  001B78  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  7852                           
  7853                           ; BSR set to: 1
  7854                           ;ModbusRtu.c: 940: _u8BufferSize = 3;
  7855  001B7A  0E03               	movlw	3
  7856  001B7C  6E71               	movwf	__u8BufferSize,c
  7857                           
  7858                           ; BSR set to: 1
  7859                           ;ModbusRtu.c: 942: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++) {
  7860  001B7E  C01E  F01F         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  7861  001B82  D02A               	goto	l4198
  7862  001B84                     l4192:
  7863                           
  7864                           ; BSR set to: 1
  7865                           ;ModbusRtu.c: 943: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  7866  001B84  0E00               	movlw	low __au8Buffer
  7867  001B86  2471               	addwf	__u8BufferSize,w,c
  7868  001B88  6ED9               	movwf	fsr2l,c
  7869  001B8A  6ADA               	clrf	fsr2h,c
  7870  001B8C  0E01               	movlw	high __au8Buffer
  7871  001B8E  22DA               	addwfc	fsr2h,f,c
  7872  001B90  501F               	movf	ModbusProcess_FC3@i,w,c
  7873  001B92  0D02               	mullw	2
  7874  001B94  50F3               	movf	prodl,w,c
  7875  001B96  2414               	addwf	ModbusProcess_FC3@regs,w,c
  7876  001B98  6EE1               	movwf	fsr1l,c
  7877  001B9A  50F4               	movf	prodh,w,c
  7878  001B9C  2015               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7879  001B9E  6EE2               	movwf	fsr1h,c
  7880  001BA0  CFE6 F017          	movff	postinc1,??_ModbusProcess_FC3
  7881  001BA4  CFE5 F018          	movff	postdec1,??_ModbusProcess_FC3+1
  7882  001BA8  C018  F017         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  7883  001BAC  6A18               	clrf	??_ModbusProcess_FC3+1,c
  7884  001BAE  5017               	movf	??_ModbusProcess_FC3,w,c
  7885  001BB0  6EDF               	movwf	indf2,c
  7886                           
  7887                           ; BSR set to: 1
  7888                           ;ModbusRtu.c: 944: _u8BufferSize++;
  7889  001BB2  2A71               	incf	__u8BufferSize,f,c
  7890                           
  7891                           ; BSR set to: 1
  7892                           ;ModbusRtu.c: 945: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  7893  001BB4  501F               	movf	ModbusProcess_FC3@i,w,c
  7894  001BB6  0D02               	mullw	2
  7895  001BB8  50F3               	movf	prodl,w,c
  7896  001BBA  2414               	addwf	ModbusProcess_FC3@regs,w,c
  7897  001BBC  6ED9               	movwf	fsr2l,c
  7898  001BBE  50F4               	movf	prodh,w,c
  7899  001BC0  2015               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7900  001BC2  6EDA               	movwf	fsr2h,c
  7901  001BC4  0E00               	movlw	low __au8Buffer
  7902  001BC6  2471               	addwf	__u8BufferSize,w,c
  7903  001BC8  6EE1               	movwf	fsr1l,c
  7904  001BCA  6AE2               	clrf	fsr1h,c
  7905  001BCC  0E01               	movlw	high __au8Buffer
  7906  001BCE  22E2               	addwfc	fsr1h,f,c
  7907  001BD0  CFDF FFE7          	movff	indf2,indf1
  7908                           
  7909                           ;ModbusRtu.c: 946: _u8BufferSize++;
  7910  001BD4  2A71               	incf	__u8BufferSize,f,c
  7911  001BD6  2A1F               	incf	ModbusProcess_FC3@i,f,c
  7912  001BD8                     l4198:
  7913  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ; BSR set to: 1
  7916  001BDA  501E               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  7917  001BDC  241C               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7918  001BDE  6E17               	movwf	??_ModbusProcess_FC3& (0+255),c
  7919  001BE0  0E00               	movlw	0
  7920  001BE2  201D               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  7921  001BE4  6E18               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  7922  001BE6  501F               	movf	ModbusProcess_FC3@i,w,c
  7923  001BE8  6E19               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  7924  001BEA  6A1A               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  7925  001BEC  5017               	movf	??_ModbusProcess_FC3,w,c
  7926  001BEE  5C19               	subwf	??_ModbusProcess_FC3+2,w,c
  7927  001BF0  5018               	movf	??_ModbusProcess_FC3+1,w,c
  7928  001BF2  581A               	subwfb	??_ModbusProcess_FC3+3,w,c
  7929  001BF4  E3C7               	bnc	l4192
  7930                           
  7931                           ; BSR set to: 1
  7932                           ;ModbusRtu.c: 947: }
  7933                           ;ModbusRtu.c: 948: u8CopyBufferSize = _u8BufferSize +2;
  7934  001BF6  5071               	movf	__u8BufferSize,w,c
  7935  001BF8  0F02               	addlw	2
  7936  001BFA  6E1B               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  7937                           
  7938                           ; BSR set to: 1
  7939                           ;ModbusRtu.c: 949: ModbusSendTxBuffer();
  7940  001BFC  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  7941                           
  7942                           ;ModbusRtu.c: 951: return u8CopyBufferSize;
  7943  001C00  501B               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  7944  001C02  0012               	return		;funcret
  7945  001C04  FFFF               	dw	65535	; errata NOP
  7946  001C06                     __end_of_ModbusProcess_FC3:
  7947                           	opt stack 0
  7948                           tblptru	equ	0xFF8
  7949                           tblptrh	equ	0xFF7
  7950                           tblptrl	equ	0xFF6
  7951                           tablat	equ	0xFF5
  7952                           prodh	equ	0xFF4
  7953                           prodl	equ	0xFF3
  7954                           intcon	equ	0xFF2
  7955                           postinc0	equ	0xFEE
  7956                           wreg	equ	0xFE8
  7957                           indf1	equ	0xFE7
  7958                           postinc1	equ	0xFE6
  7959                           postdec1	equ	0xFE5
  7960                           fsr1h	equ	0xFE2
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           plusw2	equ	0xFDB
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function _ModbusProcess_FC21 *****************
  7971 ;; Defined at:
  7972 ;;		line 1148 in file "ModbusRtu.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  recLenBytes     2   25[COMRAM] unsigned short 
  7977 ;;  startAddrsBy    2   23[COMRAM] unsigned short 
  7978 ;;  i               1   27[COMRAM] unsigned char 
  7979 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  7980 ;;  requestDataL    1   21[COMRAM] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      unsigned char 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : E/1
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7990 ;;      Params:         0       0       0       0       0       0       0
  7991 ;;      Locals:         7       0       0       0       0       0       0
  7992 ;;      Temps:          2       0       0       0       0       0       0
  7993 ;;      Totals:         9       0       0       0       0       0       0
  7994 ;;Total ram usage:        9 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    4
  7997 ;; This function calls:
  7998 ;;		_ModbusSendTxBuffer
  7999 ;; This function is called by:
  8000 ;;		_ModbusPoll
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text33
  8005  001C06                     __ptext33:
  8006                           	opt stack 0
  8007  001C06                     _ModbusProcess_FC21:
  8008                           	opt stack 25
  8009                           
  8010                           ;incstack = 0
  8011  001C06  FFFF               	dw	65535
  8012                           
  8013                           ;ModbusRtu.c: 1150: _lastCommand = MODBUS_COM_WRITE_FILE_RECORD;
  8014  001C08  0E15               	movlw	21
  8015  001C0A  0100               	movlb	0	; () banked
  8016  001C0C  6FD8               	movwf	__lastCommand& (0+255),b
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;ModbusRtu.c: 1153: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8020  001C0E  C102  F016         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;ModbusRtu.c: 1155: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8024  001C12  0101               	movlb	1	; () banked
  8025  001C14  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8026  001C16  C106  F014         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8027  001C1A  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8028  001C1C  C014  F015         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8029  001C20  6A14               	clrf	??_ModbusProcess_FC21,c
  8030  001C22  1214               	iorwf	??_ModbusProcess_FC21,f,c
  8031  001C24  90D8               	bcf	status,0,c
  8032  001C26  3414               	rlcf	??_ModbusProcess_FC21,w,c
  8033  001C28  6E18               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8034  001C2A  3415               	rlcf	??_ModbusProcess_FC21+1,w,c
  8035  001C2C  6E19               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8036                           
  8037                           ; BSR set to: 1
  8038                           ;ModbusRtu.c: 1156: _lastAddress = startAddrsBytes;
  8039  001C2E  C018  F0B6         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8040  001C32  C019  F0B7         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8041                           
  8042                           ; BSR set to: 1
  8043                           ;ModbusRtu.c: 1157: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8044  001C36  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8045  001C38  C108  F014         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8046  001C3C  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8047  001C3E  C014  F015         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8048  001C42  6A14               	clrf	??_ModbusProcess_FC21,c
  8049  001C44  1214               	iorwf	??_ModbusProcess_FC21,f,c
  8050  001C46  90D8               	bcf	status,0,c
  8051  001C48  3414               	rlcf	??_ModbusProcess_FC21,w,c
  8052  001C4A  6E1A               	movwf	ModbusProcess_FC21@recLenBytes,c
  8053  001C4C  3415               	rlcf	??_ModbusProcess_FC21+1,w,c
  8054  001C4E  6E1B               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8055                           
  8056                           ; BSR set to: 1
  8057                           ;ModbusRtu.c: 1158: _lastCount = recLenBytes;
  8058  001C50  C01A  F0B8         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8059  001C54  C01B  F0B9         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8060                           
  8061                           ; BSR set to: 1
  8062                           ;ModbusRtu.c: 1159: uint8_t u8CopyBufferSize;
  8063                           ;ModbusRtu.c: 1160: uint8_t i;
  8064                           ;ModbusRtu.c: 1166: _u8BufferSize = requestDataLen + 1;
  8065  001C58  2816               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8066  001C5A  6E71               	movwf	__u8BufferSize,c
  8067                           
  8068                           ; BSR set to: 1
  8069                           ;ModbusRtu.c: 1170: for (i = 0; i < recLenBytes; i++)
  8070  001C5C  6A1C               	clrf	ModbusProcess_FC21@i,c
  8071  001C5E  D01C               	goto	l4396
  8072  001C60                     l921:
  8073  001C60  FFFF               	dw	65535	; assembler added errata NOP
  8074                           
  8075                           ; BSR set to: 1
  8076  001C62  B2A6               	btfsc	4006,1,c	;volatile
  8077  001C64  D7FD               	goto	l921
  8078                           
  8079                           ; BSR set to: 1
  8080  001C66  501C               	movf	ModbusProcess_FC21@i,w,c
  8081  001C68  2418               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8082  001C6A  6EA9               	movwf	4009,c	;volatile
  8083                           
  8084                           ; BSR set to: 1
  8085  001C6C  0E0A               	movlw	low (__au8Buffer+10)
  8086  001C6E  241C               	addwf	ModbusProcess_FC21@i,w,c
  8087  001C70  6ED9               	movwf	fsr2l,c
  8088  001C72  6ADA               	clrf	fsr2h,c
  8089  001C74  0E01               	movlw	high (__au8Buffer+10)
  8090  001C76  22DA               	addwfc	fsr2h,f,c
  8091  001C78  50DF               	movf	indf2,w,c
  8092  001C7A  6EA8               	movwf	4008,c	;volatile
  8093                           
  8094                           ; BSR set to: 1
  8095  001C7C  90D8               	bcf	status,0,c	;volatile
  8096                           
  8097                           ; BSR set to: 1
  8098  001C7E  BEF2               	btfsc	intcon,7,c	;volatile
  8099                           
  8100                           ; BSR set to: 1
  8101  001C80  80D8               	bsf	status,0,c	;volatile
  8102                           
  8103                           ; BSR set to: 1
  8104  001C82  9EF2               	bcf	intcon,7,c	;volatile
  8105  001C84  84A6               	bsf	4006,2,c	;volatile
  8106                           
  8107                           ; BSR set to: 1
  8108  001C86  0E55               	movlw	85
  8109  001C88  6EA7               	movwf	4007,c	;volatile
  8110  001C8A  0EAA               	movlw	170
  8111  001C8C  6EA7               	movwf	4007,c	;volatile
  8112                           
  8113                           ; BSR set to: 1
  8114  001C8E  82A6               	bsf	4006,1,c	;volatile
  8115                           
  8116                           ; BSR set to: 1
  8117  001C90  94A6               	bcf	4006,2,c	;volatile
  8118                           
  8119                           ; BSR set to: 1
  8120  001C92  E301               	bnc	l4394
  8121                           
  8122                           ; BSR set to: 1
  8123  001C94  8EF2               	bsf	intcon,7,c	;volatile
  8124  001C96                     l4394:
  8125                           
  8126                           ; BSR set to: 1
  8127  001C96  2A1C               	incf	ModbusProcess_FC21@i,f,c
  8128  001C98                     l4396:
  8129  001C98  FFFF               	dw	65535	; assembler added errata NOP
  8130                           
  8131                           ; BSR set to: 1
  8132  001C9A  501C               	movf	ModbusProcess_FC21@i,w,c
  8133  001C9C  6E14               	movwf	??_ModbusProcess_FC21& (0+255),c
  8134  001C9E  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8135  001CA0  501A               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8136  001CA2  5C14               	subwf	??_ModbusProcess_FC21,w,c
  8137  001CA4  501B               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8138  001CA6  5815               	subwfb	??_ModbusProcess_FC21+1,w,c
  8139  001CA8  E3DB               	bnc	l921
  8140                           
  8141                           ; BSR set to: 1
  8142                           ;ModbusRtu.c: 1173: }
  8143                           ;ModbusRtu.c: 1175: u8CopyBufferSize = _u8BufferSize;
  8144  001CAA  C071  F017         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8145                           
  8146                           ; BSR set to: 1
  8147                           ;ModbusRtu.c: 1176: ModbusSendTxBuffer();
  8148  001CAE  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  8149                           
  8150                           ;ModbusRtu.c: 1178: return u8CopyBufferSize;
  8151  001CB2  5017               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8152  001CB4  0012               	return		;funcret
  8153  001CB6  FFFF               	dw	65535	; errata NOP
  8154  001CB8                     __end_of_ModbusProcess_FC21:
  8155                           	opt stack 0
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           intcon	equ	0xFF2
  8163                           postinc0	equ	0xFEE
  8164                           wreg	equ	0xFE8
  8165                           indf1	equ	0xFE7
  8166                           postinc1	equ	0xFE6
  8167                           postdec1	equ	0xFE5
  8168                           fsr1h	equ	0xFE2
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           plusw2	equ	0xFDB
  8174                           fsr2h	equ	0xFDA
  8175                           fsr2l	equ	0xFD9
  8176                           status	equ	0xFD8
  8177                           
  8178 ;; *************** function _ModbusProcess_FC17 *****************
  8179 ;; Defined at:
  8180 ;;		line 1125 in file "ModbusRtu.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;		None
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  i               1   20[COMRAM] unsigned char 
  8185 ;;  u8CopyBuffer    1   19[COMRAM] unsigned char 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  1    wreg      unsigned char 
  8188 ;; Registers used:
  8189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : E/1
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8195 ;;      Params:         0       0       0       0       0       0       0
  8196 ;;      Locals:         2       0       0       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0
  8198 ;;      Totals:         2       0       0       0       0       0       0
  8199 ;;Total ram usage:        2 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    4
  8202 ;; This function calls:
  8203 ;;		_ModbusSendTxBuffer
  8204 ;; This function is called by:
  8205 ;;		_ModbusPoll
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text34
  8210  002244                     __ptext34:
  8211                           	opt stack 0
  8212  002244                     _ModbusProcess_FC17:
  8213                           	opt stack 25
  8214                           
  8215                           ;incstack = 0
  8216  002244  FFFF               	dw	65535
  8217                           
  8218                           ;ModbusRtu.c: 1127: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem") + 1 + 1;
  8219  002246  0E16               	movlw	22
  8220  002248  0101               	movlb	1	; () banked
  8221  00224A  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8222                           
  8223                           ;ModbusRtu.c: 1129: _u8BufferSize = 3;
  8224  00224C  0E03               	movlw	3
  8225  00224E  6E71               	movwf	__u8BufferSize,c
  8226                           
  8227                           ; BSR set to: 1
  8228                           ;ModbusRtu.c: 1131: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem"); i++, _u8Buffer
      +                          Size++)
  8229  002250  6A15               	clrf	ModbusProcess_FC17@i,c
  8230  002252                     l4342:
  8231  002252  FFFF               	dw	65535	; assembler added errata NOP
  8232                           
  8233                           ; BSR set to: 1
  8234                           ;ModbusRtu.c: 1132: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem"[i];
  8235  002254  0EA7               	movlw	low STR_3
  8236  002256  2415               	addwf	ModbusProcess_FC17@i,w,c
  8237  002258  6EF6               	movwf	tblptrl,c
  8238  00225A  6AF7               	clrf	tblptrh,c
  8239  00225C  0E7D               	movlw	high STR_3
  8240  00225E  22F7               	addwfc	tblptrh,f,c
  8241  002260                     	if	0	;There are less than 3 active tblptr bytes
  8242  002260                     	endif
  8243  002260  0E00               	movlw	low __au8Buffer
  8244  002262  2471               	addwf	__u8BufferSize,w,c
  8245  002264  6ED9               	movwf	fsr2l,c
  8246  002266  6ADA               	clrf	fsr2h,c
  8247  002268  0E01               	movlw	high __au8Buffer
  8248  00226A  22DA               	addwfc	fsr2h,f,c
  8249  00226C  0008               	tblrd		*
  8250  00226E  FFFF               	dw	65535	; errata NOP
  8251  002270  CFF5 FFDF          	movff	tablat,indf2
  8252                           
  8253                           ; BSR set to: 1
  8254  002274  2A15               	incf	ModbusProcess_FC17@i,f,c
  8255                           
  8256                           ; BSR set to: 1
  8257  002276  2A71               	incf	__u8BufferSize,f,c
  8258                           
  8259                           ; BSR set to: 1
  8260  002278  0E13               	movlw	19
  8261  00227A  6415               	cpfsgt	ModbusProcess_FC17@i,c
  8262  00227C  D7EA               	goto	l4342
  8263                           
  8264                           ; BSR set to: 1
  8265                           ;ModbusRtu.c: 1134: uint8_t u8CopyBufferSize = _u8BufferSize +2;
  8266  00227E  5071               	movf	__u8BufferSize,w,c
  8267  002280  0F02               	addlw	2
  8268  002282  6E14               	movwf	ModbusProcess_FC17@u8CopyBufferSize,c
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;ModbusRtu.c: 1135: ModbusSendTxBuffer();
  8272  002284  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  8273                           
  8274                           ;ModbusRtu.c: 1137: return u8CopyBufferSize;
  8275  002288  5014               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8276  00228A  0012               	return		;funcret
  8277  00228C  FFFF               	dw	65535	; errata NOP
  8278  00228E                     __end_of_ModbusProcess_FC17:
  8279                           	opt stack 0
  8280                           tblptru	equ	0xFF8
  8281                           tblptrh	equ	0xFF7
  8282                           tblptrl	equ	0xFF6
  8283                           tablat	equ	0xFF5
  8284                           prodh	equ	0xFF4
  8285                           prodl	equ	0xFF3
  8286                           intcon	equ	0xFF2
  8287                           postinc0	equ	0xFEE
  8288                           wreg	equ	0xFE8
  8289                           indf1	equ	0xFE7
  8290                           postinc1	equ	0xFE6
  8291                           postdec1	equ	0xFE5
  8292                           fsr1h	equ	0xFE2
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           plusw2	equ	0xFDB
  8298                           fsr2h	equ	0xFDA
  8299                           fsr2l	equ	0xFD9
  8300                           status	equ	0xFD8
  8301                           
  8302 ;; *************** function _ModbusProcess_FC16 *****************
  8303 ;; Defined at:
  8304 ;;		line 1085 in file "ModbusRtu.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;  regs            2   19[COMRAM] PTR unsigned short 
  8307 ;;		 -> _MODBUSHoldingRegs(30), 
  8308 ;;  u8size          1   21[COMRAM] unsigned char 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  u16StartAdd     2   29[COMRAM] unsigned short 
  8311 ;;  temp            2   26[COMRAM] unsigned short 
  8312 ;;  i               1   32[COMRAM] unsigned char 
  8313 ;;  u8regsno        1   31[COMRAM] unsigned char 
  8314 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  1    wreg      unsigned char 
  8317 ;; Registers used:
  8318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : E/1
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8324 ;;      Params:         3       0       0       0       0       0       0
  8325 ;;      Locals:         7       0       0       0       0       0       0
  8326 ;;      Temps:          4       0       0       0       0       0       0
  8327 ;;      Totals:        14       0       0       0       0       0       0
  8328 ;;Total ram usage:       14 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    4
  8331 ;; This function calls:
  8332 ;;		_ModbusSendTxBuffer
  8333 ;; This function is called by:
  8334 ;;		_ModbusPoll
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text35
  8339  0018FC                     __ptext35:
  8340                           	opt stack 0
  8341  0018FC                     _ModbusProcess_FC16:
  8342                           	opt stack 25
  8343                           
  8344                           ;incstack = 0
  8345  0018FC  FFFF               	dw	65535
  8346                           
  8347                           ;ModbusRtu.c: 1087: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_REGISTERS;
  8348  0018FE  0E10               	movlw	16
  8349  001900  0100               	movlb	0	; () banked
  8350  001902  6FD8               	movwf	__lastCommand& (0+255),b
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;ModbusRtu.c: 1089: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8354  001904  0101               	movlb	1	; () banked
  8355  001906  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8356  001908  C102  F017         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8357  00190C  6A18               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8358  00190E  C017  F018         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8359  001912  6A17               	clrf	??_ModbusProcess_FC16,c
  8360  001914  1017               	iorwf	??_ModbusProcess_FC16,w,c
  8361  001916  6E1E               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8362  001918  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8363  00191A  6E1F               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8364                           
  8365                           ; BSR set to: 1
  8366                           ;ModbusRtu.c: 1090: _lastAddress = u16StartAdd;
  8367  00191C  C01E  F0B6         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8368  001920  C01F  F0B7         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8369                           
  8370                           ; BSR set to: 1
  8371                           ;ModbusRtu.c: 1091: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8372  001924  C105  F020         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8373                           
  8374                           ; BSR set to: 1
  8375                           ;ModbusRtu.c: 1092: _lastCount = u8regsno;
  8376  001928  C020  F0B8         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8377  00192C  0100               	movlb	0	; () banked
  8378  00192E  6BB9               	clrf	(__lastCount+1)& (0+255),b
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;ModbusRtu.c: 1093: uint8_t u8CopyBufferSize;
  8382                           ;ModbusRtu.c: 1094: uint8_t i;
  8383                           ;ModbusRtu.c: 1095: uint16_t temp;
  8384                           ;ModbusRtu.c: 1098: _au8Buffer[ NB_HI ] = 0;
  8385  001930  0101               	movlb	1	; () banked
  8386  001932  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8387                           
  8388                           ; BSR set to: 1
  8389                           ;ModbusRtu.c: 1099: _au8Buffer[ NB_LO ] = u8regsno;
  8390  001934  C020  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8391                           
  8392                           ; BSR set to: 1
  8393                           ;ModbusRtu.c: 1100: _u8BufferSize = RESPONSE_SIZE;
  8394  001938  0E06               	movlw	6
  8395  00193A  6E71               	movwf	__u8BufferSize,c
  8396                           
  8397                           ; BSR set to: 1
  8398                           ;ModbusRtu.c: 1103: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8399  00193C  6A21               	clrf	ModbusProcess_FC16@i,c
  8400  00193E  D02C               	goto	l4322
  8401  001940                     l4316:
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;ModbusRtu.c: 1104: {
  8405                           ;ModbusRtu.c: 1105: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8406  001940  5021               	movf	ModbusProcess_FC16@i,w,c
  8407  001942  0D02               	mullw	2
  8408  001944  0E08               	movlw	low (__au8Buffer+8)
  8409  001946  24F3               	addwf	prodl,w,c
  8410  001948  6ED9               	movwf	fsr2l,c
  8411  00194A  0E01               	movlw	high (__au8Buffer+8)
  8412  00194C  20F4               	addwfc	prodh,w,c
  8413  00194E  6EDA               	movwf	fsr2h,c
  8414  001950  50DF               	movf	indf2,w,c
  8415  001952  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8416  001954  5021               	movf	ModbusProcess_FC16@i,w,c
  8417  001956  0D02               	mullw	2
  8418  001958  0E07               	movlw	low (__au8Buffer+7)
  8419  00195A  24F3               	addwf	prodl,w,c
  8420  00195C  6ED9               	movwf	fsr2l,c
  8421  00195E  0E01               	movlw	high (__au8Buffer+7)
  8422  001960  20F4               	addwfc	prodh,w,c
  8423  001962  6EDA               	movwf	fsr2h,c
  8424  001964  50DF               	movf	indf2,w,c
  8425  001966  6E18               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8426  001968  5017               	movf	??_ModbusProcess_FC16,w,c
  8427  00196A  6E1B               	movwf	ModbusProcess_FC16@temp,c
  8428  00196C  C018  F01C         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8429                           
  8430                           ; BSR set to: 1
  8431                           ;ModbusRtu.c: 1109: regs[ u16StartAdd + i ] = temp;
  8432  001970  5021               	movf	ModbusProcess_FC16@i,w,c
  8433  001972  241E               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8434  001974  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8435  001976  0E00               	movlw	0
  8436  001978  201F               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8437  00197A  6E18               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8438  00197C  90D8               	bcf	status,0,c
  8439  00197E  3617               	rlcf	??_ModbusProcess_FC16,f,c
  8440  001980  3618               	rlcf	??_ModbusProcess_FC16+1,f,c
  8441  001982  5017               	movf	??_ModbusProcess_FC16,w,c
  8442  001984  2414               	addwf	ModbusProcess_FC16@regs,w,c
  8443  001986  6ED9               	movwf	fsr2l,c
  8444  001988  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8445  00198A  2015               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8446  00198C  6EDA               	movwf	fsr2h,c
  8447  00198E  C01B  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8448  001992  C01C  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8449                           
  8450                           ; BSR set to: 1
  8451  001996  2A21               	incf	ModbusProcess_FC16@i,f,c
  8452  001998                     l4322:
  8453  001998  FFFF               	dw	65535	; assembler added errata NOP
  8454                           
  8455                           ; BSR set to: 1
  8456  00199A  5020               	movf	ModbusProcess_FC16@u8regsno,w,c
  8457  00199C  5C21               	subwf	ModbusProcess_FC16@i,w,c
  8458  00199E  E20E               	bc	l4326
  8459                           
  8460                           ; BSR set to: 1
  8461  0019A0  5016               	movf	ModbusProcess_FC16@u8size,w,c
  8462  0019A2  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8463  0019A4  6A18               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8464  0019A6  5021               	movf	ModbusProcess_FC16@i,w,c
  8465  0019A8  241E               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8466  0019AA  6E19               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8467  0019AC  0E00               	movlw	0
  8468  0019AE  201F               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8469  0019B0  6E1A               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8470  0019B2  5017               	movf	??_ModbusProcess_FC16,w,c
  8471  0019B4  5C19               	subwf	??_ModbusProcess_FC16+2,w,c
  8472  0019B6  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8473  0019B8  581A               	subwfb	??_ModbusProcess_FC16+3,w,c
  8474  0019BA  E3C2               	bnc	l4316
  8475  0019BC                     l4326:
  8476                           
  8477                           ; BSR set to: 1
  8478                           ;ModbusRtu.c: 1110: }
  8479                           ;ModbusRtu.c: 1111: u8CopyBufferSize = _u8BufferSize + 2;
  8480  0019BC  5071               	movf	__u8BufferSize,w,c
  8481  0019BE  0F02               	addlw	2
  8482  0019C0  6E1D               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8483                           
  8484                           ; BSR set to: 1
  8485                           ;ModbusRtu.c: 1112: ModbusSendTxBuffer();
  8486  0019C2  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  8487                           
  8488                           ;ModbusRtu.c: 1114: return u8CopyBufferSize;
  8489  0019C6  501D               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8490  0019C8  0012               	return		;funcret
  8491  0019CA  FFFF               	dw	65535	; errata NOP
  8492  0019CC                     __end_of_ModbusProcess_FC16:
  8493                           	opt stack 0
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           postinc0	equ	0xFEE
  8502                           wreg	equ	0xFE8
  8503                           indf1	equ	0xFE7
  8504                           postinc1	equ	0xFE6
  8505                           postdec1	equ	0xFE5
  8506                           fsr1h	equ	0xFE2
  8507                           fsr1l	equ	0xFE1
  8508                           indf2	equ	0xFDF
  8509                           postinc2	equ	0xFDE
  8510                           postdec2	equ	0xFDD
  8511                           plusw2	equ	0xFDB
  8512                           fsr2h	equ	0xFDA
  8513                           fsr2l	equ	0xFD9
  8514                           status	equ	0xFD8
  8515                           
  8516 ;; *************** function _ModbusProcess_FC15 *****************
  8517 ;; Defined at:
  8518 ;;		line 1028 in file "ModbusRtu.c"
  8519 ;; Parameters:    Size  Location     Type
  8520 ;;  regs            1    wreg     PTR unsigned short 
  8521 ;;		 -> _MODBUSCoils(2), 
  8522 ;; Auto vars:     Size  Location     Type
  8523 ;;  regs            1   36[COMRAM] PTR unsigned short 
  8524 ;;		 -> _MODBUSCoils(2), 
  8525 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  8526 ;;  u16Coilno       2   31[COMRAM] unsigned short 
  8527 ;;  u16StartCoil    2   29[COMRAM] unsigned short 
  8528 ;;  u16coil         2   24[COMRAM] unsigned short 
  8529 ;;  u8bitsno        1   37[COMRAM] unsigned char 
  8530 ;;  u8currentBit    1   35[COMRAM] unsigned char 
  8531 ;;  u8frameByte     1   28[COMRAM] unsigned char 
  8532 ;;  bTemp           1   27[COMRAM] unsigned char 
  8533 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      unsigned char 
  8536 ;; Registers used:
  8537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : E/1
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8543 ;;      Params:         0       0       0       0       0       0       0
  8544 ;;      Locals:        14       0       0       0       0       0       0
  8545 ;;      Temps:          5       0       0       0       0       0       0
  8546 ;;      Totals:        19       0       0       0       0       0       0
  8547 ;;Total ram usage:       19 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    4
  8550 ;; This function calls:
  8551 ;;		_ModbusSendTxBuffer
  8552 ;; This function is called by:
  8553 ;;		_ModbusPoll
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text36
  8558  0014F4                     __ptext36:
  8559                           	opt stack 0
  8560  0014F4                     _ModbusProcess_FC15:
  8561                           	opt stack 25
  8562                           
  8563                           ;incstack = 0
  8564  0014F4  FFFF               	dw	65535
  8565                           
  8566                           ;ModbusProcess_FC15@regs stored from wreg
  8567  0014F6  6E25               	movwf	ModbusProcess_FC15@regs,c
  8568                           
  8569                           ;ModbusRtu.c: 1030: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_COILS;
  8570  0014F8  0E0F               	movlw	15
  8571  0014FA  0100               	movlb	0	; () banked
  8572  0014FC  6FD8               	movwf	__lastCommand& (0+255),b
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;ModbusRtu.c: 1032: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8576                           ;ModbusRtu.c: 1033: uint8_t u8CopyBufferSize;
  8577                           ;ModbusRtu.c: 1034: uint16_t u16currentCoil, u16coil;
  8578                           ;ModbusRtu.c: 1035: boolean bTemp;
  8579                           ;ModbusRtu.c: 1038: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8580  0014FE  0101               	movlb	1	; () banked
  8581  001500  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8582  001502  6E14               	movwf	??_ModbusProcess_FC15& (0+255),c
  8583  001504  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8584  001506  6E1E               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8585  001508  C014  F01F         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8586                           
  8587                           ; BSR set to: 1
  8588                           ;ModbusRtu.c: 1039: _lastAddress = u16StartCoil;
  8589  00150C  C01E  F0B6         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8590  001510  C01F  F0B7         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8591                           
  8592                           ; BSR set to: 1
  8593                           ;ModbusRtu.c: 1040: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8594  001514  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8595  001516  6E14               	movwf	??_ModbusProcess_FC15& (0+255),c
  8596  001518  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8597  00151A  6E20               	movwf	ModbusProcess_FC15@u16Coilno,c
  8598  00151C  C014  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8599                           
  8600                           ; BSR set to: 1
  8601                           ;ModbusRtu.c: 1041: _lastCount = u16Coilno;
  8602  001520  C020  F0B8         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8603  001524  C021  F0B9         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8604                           
  8605                           ; BSR set to: 1
  8606                           ;ModbusRtu.c: 1044: u8bitsno = 0;
  8607  001528  6A26               	clrf	ModbusProcess_FC15@u8bitsno,c
  8608                           
  8609                           ; BSR set to: 1
  8610                           ;ModbusRtu.c: 1045: u8frameByte = 7;
  8611  00152A  0E07               	movlw	7
  8612  00152C  6E1D               	movwf	ModbusProcess_FC15@u8frameByte,c
  8613                           
  8614                           ; BSR set to: 1
  8615                           ;ModbusRtu.c: 1046: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +) {
  8616  00152E  6A22               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8617  001530  6A23               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8618  001532  D058               	goto	l4286
  8619  001534                     l4266:
  8620                           
  8621                           ;ModbusRtu.c: 1048: u16coil = u16StartCoil + u16currentCoil;
  8622  001534  5022               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8623  001536  241E               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8624  001538  6E19               	movwf	ModbusProcess_FC15@u16coil,c
  8625  00153A  5023               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8626  00153C  201F               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8627  00153E  6E1A               	movwf	ModbusProcess_FC15@u16coil+1,c
  8628                           
  8629                           ;ModbusRtu.c: 1050: u8currentBit = (uint8_t) u16coil;
  8630  001540  C019  F024         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8631                           
  8632                           ;ModbusRtu.c: 1052: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8633  001544  C026  F014         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8634  001548  0E00               	movlw	low __au8Buffer
  8635  00154A  241D               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8636  00154C  6ED9               	movwf	fsr2l,c
  8637  00154E  6ADA               	clrf	fsr2h,c
  8638  001550  0E01               	movlw	high __au8Buffer
  8639  001552  22DA               	addwfc	fsr2h,f,c
  8640  001554  50DF               	movf	indf2,w,c
  8641  001556  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8642  001558  2A14               	incf	??_ModbusProcess_FC15,f,c
  8643  00155A  D003               	goto	u3604
  8644  00155C                     u3605:
  8645  00155C  FFFF               	dw	65535	; assembler added errata NOP
  8646  00155E  90D8               	bcf	status,0,c
  8647  001560  3215               	rrcf	??_ModbusProcess_FC15+1,f,c
  8648  001562                     u3604:
  8649  001562  FFFF               	dw	65535	; assembler added errata NOP
  8650  001564  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8651  001566  D7FA               	goto	u3605
  8652  001568  5015               	movf	??_ModbusProcess_FC15+1,w,c
  8653  00156A  0B01               	andlw	1
  8654  00156C  6E1C               	movwf	ModbusProcess_FC15@bTemp,c
  8655                           
  8656                           ;ModbusRtu.c: 1056: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  8657  00156E  501C               	movf	ModbusProcess_FC15@bTemp,w,c
  8658  001570  E016               	bz	l4276
  8659  001572  C024  F014         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8660  001576  0E01               	movlw	1
  8661  001578  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8662  00157A  6A16               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8663  00157C  2A14               	incf	??_ModbusProcess_FC15,f,c
  8664  00157E  D004               	goto	u3624
  8665  001580                     u3625:
  8666  001580  FFFF               	dw	65535	; assembler added errata NOP
  8667  001582  90D8               	bcf	status,0,c
  8668  001584  3615               	rlcf	??_ModbusProcess_FC15+1,f,c
  8669  001586  3616               	rlcf	??_ModbusProcess_FC15+2,f,c
  8670  001588                     u3624:
  8671  001588  FFFF               	dw	65535	; assembler added errata NOP
  8672  00158A  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8673  00158C  D7F9               	goto	u3625
  8674  00158E  5025               	movf	ModbusProcess_FC15@regs,w,c
  8675  001590  6ED9               	movwf	fsr2l,c
  8676  001592  6ADA               	clrf	fsr2h,c
  8677  001594  5015               	movf	??_ModbusProcess_FC15+1,w,c
  8678  001596  12DE               	iorwf	postinc2,f,c
  8679  001598  5016               	movf	??_ModbusProcess_FC15+2,w,c
  8680  00159A  12DD               	iorwf	postdec2,f,c
  8681  00159C  D019               	goto	l4278
  8682  00159E                     l4276:
  8683  00159E  C024  F014         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8684  0015A2  0E01               	movlw	1
  8685  0015A4  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8686  0015A6  6A16               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8687  0015A8  2A14               	incf	??_ModbusProcess_FC15,f,c
  8688  0015AA  D004               	goto	u3634
  8689  0015AC                     u3635:
  8690  0015AC  FFFF               	dw	65535	; assembler added errata NOP
  8691  0015AE  90D8               	bcf	status,0,c
  8692  0015B0  3615               	rlcf	??_ModbusProcess_FC15+1,f,c
  8693  0015B2  3616               	rlcf	??_ModbusProcess_FC15+2,f,c
  8694  0015B4                     u3634:
  8695  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  8696  0015B6  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8697  0015B8  D7F9               	goto	u3635
  8698  0015BA  1C15               	comf	??_ModbusProcess_FC15+1,w,c
  8699  0015BC  6E17               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  8700  0015BE  1C16               	comf	??_ModbusProcess_FC15+2,w,c
  8701  0015C0  6E18               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  8702  0015C2  5025               	movf	ModbusProcess_FC15@regs,w,c
  8703  0015C4  6ED9               	movwf	fsr2l,c
  8704  0015C6  6ADA               	clrf	fsr2h,c
  8705  0015C8  5017               	movf	??_ModbusProcess_FC15+3,w,c
  8706  0015CA  16DE               	andwf	postinc2,f,c
  8707  0015CC  5018               	movf	??_ModbusProcess_FC15+4,w,c
  8708  0015CE  16DD               	andwf	postdec2,f,c
  8709  0015D0                     l4278:
  8710  0015D0  FFFF               	dw	65535	; assembler added errata NOP
  8711                           
  8712                           ;ModbusRtu.c: 1061: u8bitsno ++;
  8713  0015D2  2A26               	incf	ModbusProcess_FC15@u8bitsno,f,c
  8714                           
  8715                           ;ModbusRtu.c: 1063: if (u8bitsno > 7) {
  8716  0015D4  0E07               	movlw	7
  8717  0015D6  6426               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  8718  0015D8  D002               	goto	l900
  8719                           
  8720                           ;ModbusRtu.c: 1064: u8bitsno = 0;
  8721  0015DA  6A26               	clrf	ModbusProcess_FC15@u8bitsno,c
  8722                           
  8723                           ;ModbusRtu.c: 1065: u8frameByte++;
  8724  0015DC  2A1D               	incf	ModbusProcess_FC15@u8frameByte,f,c
  8725  0015DE                     l900:
  8726  0015DE  FFFF               	dw	65535	; assembler added errata NOP
  8727  0015E0  4A22               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  8728  0015E2  2A23               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  8729  0015E4                     l4286:
  8730  0015E4  FFFF               	dw	65535	; assembler added errata NOP
  8731  0015E6  5020               	movf	ModbusProcess_FC15@u16Coilno,w,c
  8732  0015E8  5C22               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  8733  0015EA  5021               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  8734  0015EC  5823               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  8735  0015EE  E3A2               	bnc	l4266
  8736                           
  8737                           ;ModbusRtu.c: 1066: }
  8738                           ;ModbusRtu.c: 1067: }
  8739                           ;ModbusRtu.c: 1071: _u8BufferSize = 6;
  8740  0015F0  0E06               	movlw	6
  8741  0015F2  6E71               	movwf	__u8BufferSize,c
  8742                           
  8743                           ;ModbusRtu.c: 1072: u8CopyBufferSize = _u8BufferSize +2;
  8744  0015F4  5071               	movf	__u8BufferSize,w,c
  8745  0015F6  0F02               	addlw	2
  8746  0015F8  6E1B               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  8747                           
  8748                           ;ModbusRtu.c: 1073: ModbusSendTxBuffer();
  8749  0015FA  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  8750                           
  8751                           ;ModbusRtu.c: 1074: return u8CopyBufferSize;
  8752  0015FE  501B               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  8753  001600  0012               	return		;funcret
  8754  001602  FFFF               	dw	65535	; errata NOP
  8755  001604                     __end_of_ModbusProcess_FC15:
  8756                           	opt stack 0
  8757                           tblptru	equ	0xFF8
  8758                           tblptrh	equ	0xFF7
  8759                           tblptrl	equ	0xFF6
  8760                           tablat	equ	0xFF5
  8761                           prodh	equ	0xFF4
  8762                           prodl	equ	0xFF3
  8763                           intcon	equ	0xFF2
  8764                           postinc0	equ	0xFEE
  8765                           wreg	equ	0xFE8
  8766                           indf1	equ	0xFE7
  8767                           postinc1	equ	0xFE6
  8768                           postdec1	equ	0xFE5
  8769                           fsr1h	equ	0xFE2
  8770                           fsr1l	equ	0xFE1
  8771                           indf2	equ	0xFDF
  8772                           postinc2	equ	0xFDE
  8773                           postdec2	equ	0xFDD
  8774                           plusw2	equ	0xFDB
  8775                           fsr2h	equ	0xFDA
  8776                           fsr2l	equ	0xFD9
  8777                           status	equ	0xFD8
  8778                           
  8779 ;; *************** function _ModbusProcess_FC1 *****************
  8780 ;; Defined at:
  8781 ;;		line 870 in file "ModbusRtu.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  regs            2   19[COMRAM] unsigned short 
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;  u16Coilno       2   34[COMRAM] unsigned short 
  8786 ;;  u16currentCo    2   31[COMRAM] unsigned short 
  8787 ;;  u16StartCoil    2   29[COMRAM] unsigned short 
  8788 ;;  u16coil         2   24[COMRAM] unsigned short 
  8789 ;;  u8bitsno        1   33[COMRAM] unsigned char 
  8790 ;;  u8bytesno       1   28[COMRAM] unsigned char 
  8791 ;;  u8CopyBuffer    1   27[COMRAM] unsigned char 
  8792 ;;  u8currentBit    1   26[COMRAM] unsigned char 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;                  1    wreg      unsigned char 
  8795 ;; Registers used:
  8796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : E/1
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8802 ;;      Params:         2       0       0       0       0       0       0
  8803 ;;      Locals:        12       0       0       0       0       0       0
  8804 ;;      Temps:          3       0       0       0       0       0       0
  8805 ;;      Totals:        17       0       0       0       0       0       0
  8806 ;;Total ram usage:       17 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    4
  8809 ;; This function calls:
  8810 ;;		_ModbusSendTxBuffer
  8811 ;; This function is called by:
  8812 ;;		_ModbusPoll
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           	psect	text37
  8817  0013C2                     __ptext37:
  8818                           	opt stack 0
  8819  0013C2                     _ModbusProcess_FC1:
  8820                           	opt stack 25
  8821                           
  8822                           ;incstack = 0
  8823  0013C2  FFFF               	dw	65535
  8824                           
  8825                           ;ModbusRtu.c: 872: _lastCommand = MODBUS_COM_READ_COILS;
  8826  0013C4  0E01               	movlw	1
  8827  0013C6  0100               	movlb	0	; () banked
  8828  0013C8  6FD8               	movwf	__lastCommand& (0+255),b
  8829                           
  8830                           ;ModbusRtu.c: 875: uint8_t u8currentBit, u8bytesno, u8bitsno;
  8831                           ;ModbusRtu.c: 876: uint8_t u8CopyBufferSize;
  8832                           ;ModbusRtu.c: 877: uint16_t u16currentCoil, u16coil;
  8833                           ;ModbusRtu.c: 880: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  8834  0013CA  0101               	movlb	1	; () banked
  8835  0013CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8836  0013CE  6E16               	movwf	??_ModbusProcess_FC1& (0+255),c
  8837  0013D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8838  0013D2  6E1E               	movwf	ModbusProcess_FC1@u16StartCoil,c
  8839  0013D4  C016  F01F         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
  8840                           
  8841                           ; BSR set to: 1
  8842                           ;ModbusRtu.c: 881: _lastAddress = u16StartCoil;
  8843  0013D8  C01E  F0B6         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
  8844  0013DC  C01F  F0B7         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
  8845                           
  8846                           ;ModbusRtu.c: 882: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8847  0013E0  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8848  0013E2  6E16               	movwf	??_ModbusProcess_FC1& (0+255),c
  8849  0013E4  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8850  0013E6  6E23               	movwf	ModbusProcess_FC1@u16Coilno,c
  8851  0013E8  C016  F024         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
  8852                           
  8853                           ; BSR set to: 1
  8854                           ;ModbusRtu.c: 883: _lastCount = u16Coilno;
  8855  0013EC  C023  F0B8         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
  8856  0013F0  C024  F0B9         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
  8857                           
  8858                           ; BSR set to: 1
  8859                           ;ModbusRtu.c: 885: u8bytesno = (uint8_t) (u16Coilno / 8);
  8860  0013F4  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  8861  0013F8  C024  F017         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
  8862  0013FC  90D8               	bcf	status,0,c
  8863  0013FE  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  8864  001400  3216               	rrcf	??_ModbusProcess_FC1,f,c
  8865  001402  90D8               	bcf	status,0,c
  8866  001404  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  8867  001406  3216               	rrcf	??_ModbusProcess_FC1,f,c
  8868  001408  90D8               	bcf	status,0,c
  8869  00140A  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  8870  00140C  3216               	rrcf	??_ModbusProcess_FC1,f,c
  8871  00140E  5016               	movf	??_ModbusProcess_FC1,w,c
  8872  001410  6E1D               	movwf	ModbusProcess_FC1@u8bytesno,c
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;ModbusRtu.c: 886: if (u16Coilno % 8 != 0)
  8876  001412  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  8877  001416  0E07               	movlw	7
  8878  001418  1616               	andwf	??_ModbusProcess_FC1,f,c
  8879  00141A  E001               	bz	l4138
  8880                           
  8881                           ; BSR set to: 1
  8882                           ;ModbusRtu.c: 887: u8bytesno ++;
  8883  00141C  2A1D               	incf	ModbusProcess_FC1@u8bytesno,f,c
  8884  00141E                     l4138:
  8885                           
  8886                           ; BSR set to: 1
  8887                           ;ModbusRtu.c: 888: _au8Buffer[ ADD_HI ] = u8bytesno;
  8888  00141E  C01D  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
  8889                           
  8890                           ; BSR set to: 1
  8891                           ;ModbusRtu.c: 889: _u8BufferSize = ADD_LO;
  8892  001422  0E03               	movlw	3
  8893  001424  6E71               	movwf	__u8BufferSize,c
  8894                           
  8895                           ; BSR set to: 1
  8896                           ;ModbusRtu.c: 892: u8bitsno = 0;
  8897  001426  6A22               	clrf	ModbusProcess_FC1@u8bitsno,c
  8898                           
  8899                           ; BSR set to: 1
  8900                           ;ModbusRtu.c: 894: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
  8901  001428  6A20               	clrf	ModbusProcess_FC1@u16currentCoil,c
  8902  00142A  6A21               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
  8903  00142C  D04F               	goto	l4164
  8904  00142E                     l4146:
  8905                           
  8906                           ;ModbusRtu.c: 895: {
  8907                           ;ModbusRtu.c: 896: u16coil = u16StartCoil + u16currentCoil;
  8908  00142E  5020               	movf	ModbusProcess_FC1@u16currentCoil,w,c
  8909  001430  241E               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
  8910  001432  6E19               	movwf	ModbusProcess_FC1@u16coil,c
  8911  001434  5021               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
  8912  001436  201F               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
  8913  001438  6E1A               	movwf	ModbusProcess_FC1@u16coil+1,c
  8914                           
  8915                           ;ModbusRtu.c: 898: u8currentBit = (uint8_t) u16coil;
  8916  00143A  C019  F01B         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
  8917                           
  8918                           ;ModbusRtu.c: 900: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
  8919  00143E  C01B  F016         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
  8920  001442  C014  F017         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
  8921  001446  C015  F018         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
  8922  00144A  2A16               	incf	??_ModbusProcess_FC1,f,c
  8923  00144C  D004               	goto	u3494
  8924  00144E                     u3495:
  8925  00144E  FFFF               	dw	65535	; assembler added errata NOP
  8926  001450  90D8               	bcf	status,0,c
  8927  001452  3218               	rrcf	??_ModbusProcess_FC1+2,f,c
  8928  001454  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  8929  001456                     u3494:
  8930  001456  FFFF               	dw	65535	; assembler added errata NOP
  8931  001458  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  8932  00145A  D7F9               	goto	u3495
  8933  00145C  A017               	btfss	??_ModbusProcess_FC1+1,0,c
  8934  00145E  D015               	goto	l4154
  8935  001460  C022  F016         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  8936  001464  0E01               	movlw	1
  8937  001466  6E17               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  8938  001468  2A16               	incf	??_ModbusProcess_FC1,f,c
  8939  00146A  D003               	goto	u3514
  8940  00146C                     u3515:
  8941  00146C  FFFF               	dw	65535	; assembler added errata NOP
  8942  00146E  90D8               	bcf	status,0,c
  8943  001470  3617               	rlcf	??_ModbusProcess_FC1+1,f,c
  8944  001472                     u3514:
  8945  001472  FFFF               	dw	65535	; assembler added errata NOP
  8946  001474  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  8947  001476  D7FA               	goto	u3515
  8948  001478  0E00               	movlw	low __au8Buffer
  8949  00147A  2471               	addwf	__u8BufferSize,w,c
  8950  00147C  6ED9               	movwf	fsr2l,c
  8951  00147E  6ADA               	clrf	fsr2h,c
  8952  001480  0E01               	movlw	high __au8Buffer
  8953  001482  22DA               	addwfc	fsr2h,f,c
  8954  001484  5017               	movf	??_ModbusProcess_FC1+1,w,c
  8955  001486  12DF               	iorwf	indf2,f,c
  8956  001488  D017               	goto	l4156
  8957  00148A                     l4154:
  8958  00148A  FFFF               	dw	65535	; assembler added errata NOP
  8959  00148C  C022  F016         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  8960  001490  0E01               	movlw	1
  8961  001492  6E17               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  8962  001494  2A16               	incf	??_ModbusProcess_FC1,f,c
  8963  001496  D003               	goto	u3524
  8964  001498                     u3525:
  8965  001498  FFFF               	dw	65535	; assembler added errata NOP
  8966  00149A  90D8               	bcf	status,0,c
  8967  00149C  3617               	rlcf	??_ModbusProcess_FC1+1,f,c
  8968  00149E                     u3524:
  8969  00149E  FFFF               	dw	65535	; assembler added errata NOP
  8970  0014A0  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  8971  0014A2  D7FA               	goto	u3525
  8972  0014A4  1C17               	comf	??_ModbusProcess_FC1+1,w,c
  8973  0014A6  6E18               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
  8974  0014A8  0E00               	movlw	low __au8Buffer
  8975  0014AA  2471               	addwf	__u8BufferSize,w,c
  8976  0014AC  6ED9               	movwf	fsr2l,c
  8977  0014AE  6ADA               	clrf	fsr2h,c
  8978  0014B0  0E01               	movlw	high __au8Buffer
  8979  0014B2  22DA               	addwfc	fsr2h,f,c
  8980  0014B4  5018               	movf	??_ModbusProcess_FC1+2,w,c
  8981  0014B6  16DF               	andwf	indf2,f,c
  8982  0014B8                     l4156:
  8983  0014B8  FFFF               	dw	65535	; assembler added errata NOP
  8984                           
  8985                           ;ModbusRtu.c: 904: u8bitsno ++;
  8986  0014BA  2A22               	incf	ModbusProcess_FC1@u8bitsno,f,c
  8987                           
  8988                           ;ModbusRtu.c: 906: if (u8bitsno > 7) {
  8989  0014BC  0E07               	movlw	7
  8990  0014BE  6422               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
  8991  0014C0  D002               	goto	l872
  8992                           
  8993                           ;ModbusRtu.c: 907: u8bitsno = 0;
  8994  0014C2  6A22               	clrf	ModbusProcess_FC1@u8bitsno,c
  8995                           
  8996                           ;ModbusRtu.c: 908: _u8BufferSize++;
  8997  0014C4  2A71               	incf	__u8BufferSize,f,c
  8998  0014C6                     l872:
  8999  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  9000  0014C8  4A20               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
  9001  0014CA  2A21               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
  9002  0014CC                     l4164:
  9003  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  9004  0014CE  5023               	movf	ModbusProcess_FC1@u16Coilno,w,c
  9005  0014D0  5C20               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
  9006  0014D2  5024               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
  9007  0014D4  5821               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
  9008  0014D6  E3AB               	bnc	l4146
  9009                           
  9010                           ;ModbusRtu.c: 909: }
  9011                           ;ModbusRtu.c: 910: }
  9012                           ;ModbusRtu.c: 913: if (u16Coilno % 8 != 0)
  9013  0014D8  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9014  0014DC  0E07               	movlw	7
  9015  0014DE  1616               	andwf	??_ModbusProcess_FC1,f,c
  9016  0014E0  E001               	bz	l4170
  9017                           
  9018                           ;ModbusRtu.c: 914: _u8BufferSize ++;
  9019  0014E2  2A71               	incf	__u8BufferSize,f,c
  9020  0014E4                     l4170:
  9021                           
  9022                           ;ModbusRtu.c: 915: u8CopyBufferSize = _u8BufferSize +2;
  9023  0014E4  5071               	movf	__u8BufferSize,w,c
  9024  0014E6  0F02               	addlw	2
  9025  0014E8  6E1C               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
  9026                           
  9027                           ;ModbusRtu.c: 916: ModbusSendTxBuffer();
  9028  0014EA  ECFC  F010         	call	_ModbusSendTxBuffer	;wreg free
  9029                           
  9030                           ;ModbusRtu.c: 917: return u8CopyBufferSize;
  9031  0014EE  501C               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
  9032  0014F0  0012               	return		;funcret
  9033  0014F2  FFFF               	dw	65535	; errata NOP
  9034  0014F4                     __end_of_ModbusProcess_FC1:
  9035                           	opt stack 0
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           postinc0	equ	0xFEE
  9044                           wreg	equ	0xFE8
  9045                           indf1	equ	0xFE7
  9046                           postinc1	equ	0xFE6
  9047                           postdec1	equ	0xFE5
  9048                           fsr1h	equ	0xFE2
  9049                           fsr1l	equ	0xFE1
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           postdec2	equ	0xFDD
  9053                           plusw2	equ	0xFDB
  9054                           fsr2h	equ	0xFDA
  9055                           fsr2l	equ	0xFD9
  9056                           status	equ	0xFD8
  9057                           
  9058 ;; *************** function _ModbusSendTxBuffer *****************
  9059 ;; Defined at:
  9060 ;;		line 533 in file "ModbusRtu.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;		None
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  u16crc          2   17[COMRAM] unsigned short 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  1    wreg      void 
  9067 ;; Registers used:
  9068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/1
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9074 ;;      Params:         0       0       0       0       0       0       0
  9075 ;;      Locals:         2       0       0       0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0       0       0
  9077 ;;      Totals:         2       0       0       0       0       0       0
  9078 ;;Total ram usage:        2 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    3
  9081 ;; This function calls:
  9082 ;;		_ModbusCalcCRC
  9083 ;;		_PortWrite
  9084 ;;		_millis
  9085 ;; This function is called by:
  9086 ;;		_ModbusPoll
  9087 ;;		_ModbusProcess_FC1
  9088 ;;		_ModbusProcess_FC3
  9089 ;;		_ModbusProcess_FC5
  9090 ;;		_ModbusProcess_FC6
  9091 ;;		_ModbusProcess_FC15
  9092 ;;		_ModbusProcess_FC16
  9093 ;;		_ModbusProcess_FC17
  9094 ;;		_ModbusProcess_FC21
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text38
  9099  0021F8                     __ptext38:
  9100                           	opt stack 0
  9101  0021F8                     _ModbusSendTxBuffer:
  9102                           	opt stack 26
  9103                           
  9104                           ;incstack = 0
  9105  0021F8  FFFF               	dw	65535
  9106                           
  9107                           ;ModbusRtu.c: 538: uint16_t u16crc = ModbusCalcCRC( _u8BufferSize );
  9108  0021FA  5071               	movf	__u8BufferSize,w,c
  9109  0021FC  EC15  F010         	call	_ModbusCalcCRC
  9110  002200  C005  F012         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
  9111  002204  C006  F013         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
  9112                           
  9113                           ;ModbusRtu.c: 539: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
  9114  002208  0E00               	movlw	low __au8Buffer
  9115  00220A  2471               	addwf	__u8BufferSize,w,c
  9116  00220C  6ED9               	movwf	fsr2l,c
  9117  00220E  6ADA               	clrf	fsr2h,c
  9118  002210  0E01               	movlw	high __au8Buffer
  9119  002212  22DA               	addwfc	fsr2h,f,c
  9120  002214  C013  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
  9121                           
  9122                           ;ModbusRtu.c: 540: _u8BufferSize++;
  9123  002218  2A71               	incf	__u8BufferSize,f,c
  9124                           
  9125                           ;ModbusRtu.c: 541: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
  9126  00221A  0E00               	movlw	low __au8Buffer
  9127  00221C  2471               	addwf	__u8BufferSize,w,c
  9128  00221E  6ED9               	movwf	fsr2l,c
  9129  002220  6ADA               	clrf	fsr2h,c
  9130  002222  0E01               	movlw	high __au8Buffer
  9131  002224  22DA               	addwfc	fsr2h,f,c
  9132  002226  C012  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
  9133                           
  9134                           ;ModbusRtu.c: 542: _u8BufferSize++;
  9135  00222A  2A71               	incf	__u8BufferSize,f,c
  9136                           
  9137                           ;ModbusRtu.c: 546: PortWrite( _au8Buffer, _u8BufferSize );
  9138  00222C  0E00               	movlw	low __au8Buffer
  9139  00222E  6E05               	movwf	PortWrite@buf,c
  9140  002230  0E01               	movlw	high __au8Buffer
  9141  002232  6E06               	movwf	PortWrite@buf+1,c
  9142  002234  C071  F007         	movff	__u8BufferSize,PortWrite@buflen
  9143  002238  ECF3  F011         	call	_PortWrite	;wreg free
  9144                           
  9145                           ;ModbusRtu.c: 552: _u8BufferSize = 0;
  9146  00223C  6A71               	clrf	__u8BufferSize,c
  9147                           
  9148                           ;ModbusRtu.c: 558: _u16OutCnt++;
  9149  00223E  EF5A  F012         	goto	_millis	;wreg free
  9150  002242  FFFF               	dw	65535	; errata NOP
  9151  002244                     __end_of_ModbusSendTxBuffer:
  9152                           	opt stack 0
  9153                           tblptru	equ	0xFF8
  9154                           tblptrh	equ	0xFF7
  9155                           tblptrl	equ	0xFF6
  9156                           tablat	equ	0xFF5
  9157                           prodh	equ	0xFF4
  9158                           prodl	equ	0xFF3
  9159                           intcon	equ	0xFF2
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           indf1	equ	0xFE7
  9163                           postinc1	equ	0xFE6
  9164                           postdec1	equ	0xFE5
  9165                           fsr1h	equ	0xFE2
  9166                           fsr1l	equ	0xFE1
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           plusw2	equ	0xFDB
  9171                           fsr2h	equ	0xFDA
  9172                           fsr2l	equ	0xFD9
  9173                           status	equ	0xFD8
  9174                           
  9175 ;; *************** function _millis *****************
  9176 ;; Defined at:
  9177 ;;		line 234 in file "interrupts.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  ret             4    8[COMRAM] unsigned long 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;                  4    4[COMRAM] unsigned long 
  9184 ;; Registers used:
  9185 ;;		None
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9191 ;;      Params:         4       0       0       0       0       0       0
  9192 ;;      Locals:         4       0       0       0       0       0       0
  9193 ;;      Temps:          0       0       0       0       0       0       0
  9194 ;;      Totals:         8       0       0       0       0       0       0
  9195 ;;Total ram usage:        8 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    2
  9198 ;; This function calls:
  9199 ;;		Nothing
  9200 ;; This function is called by:
  9201 ;;		_main
  9202 ;;		_ModbusPoll
  9203 ;;		_ModbusSendTxBuffer
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text39
  9208  0024B4                     __ptext39:
  9209                           	opt stack 0
  9210  0024B4                     _millis:
  9211                           	opt stack 28
  9212                           
  9213                           ;incstack = 0
  9214  0024B4  FFFF               	dw	65535
  9215                           
  9216                           ;interrupts.c: 237: (INTCONbits.GIE = 0);
  9217  0024B6  9EF2               	bcf	intcon,7,c	;volatile
  9218                           
  9219                           ;interrupts.c: 238: unsigned long ret = millisecondsFromStart;
  9220  0024B8  C0AC  F009         	movff	_millisecondsFromStart,millis@ret	;volatile
  9221  0024BC  C0AD  F00A         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
  9222  0024C0  C0AE  F00B         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
  9223  0024C4  C0AF  F00C         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
  9224                           
  9225                           ;interrupts.c: 239: (INTCONbits.GIE = 1);
  9226  0024C8  8EF2               	bsf	intcon,7,c	;volatile
  9227                           
  9228                           ;interrupts.c: 240: return ret;
  9229  0024CA  C009  F005         	movff	millis@ret,?_millis
  9230  0024CE  C00A  F006         	movff	millis@ret+1,?_millis+1
  9231  0024D2  C00B  F007         	movff	millis@ret+2,?_millis+2
  9232  0024D6  C00C  F008         	movff	millis@ret+3,?_millis+3
  9233  0024DA  0012               	return		;funcret
  9234  0024DC  FFFF               	dw	65535	; errata NOP
  9235  0024DE                     __end_of_millis:
  9236                           	opt stack 0
  9237                           tblptru	equ	0xFF8
  9238                           tblptrh	equ	0xFF7
  9239                           tblptrl	equ	0xFF6
  9240                           tablat	equ	0xFF5
  9241                           prodh	equ	0xFF4
  9242                           prodl	equ	0xFF3
  9243                           intcon	equ	0xFF2
  9244                           postinc0	equ	0xFEE
  9245                           wreg	equ	0xFE8
  9246                           indf1	equ	0xFE7
  9247                           postinc1	equ	0xFE6
  9248                           postdec1	equ	0xFE5
  9249                           fsr1h	equ	0xFE2
  9250                           fsr1l	equ	0xFE1
  9251                           indf2	equ	0xFDF
  9252                           postinc2	equ	0xFDE
  9253                           postdec2	equ	0xFDD
  9254                           plusw2	equ	0xFDB
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _PortWrite *****************
  9260 ;; Defined at:
  9261 ;;		line 91 in file "interrupts.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;  buf             2    4[COMRAM] PTR unsigned char 
  9264 ;;		 -> _au8Buffer(140), 
  9265 ;;  buflen          1    6[COMRAM] unsigned char 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  i               1    7[COMRAM] unsigned char 
  9268 ;; Return value:  Size  Location     Type
  9269 ;;                  1    wreg      void 
  9270 ;; Registers used:
  9271 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/1
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9277 ;;      Params:         3       0       0       0       0       0       0
  9278 ;;      Locals:         1       0       0       0       0       0       0
  9279 ;;      Temps:          0       0       0       0       0       0       0
  9280 ;;      Totals:         4       0       0       0       0       0       0
  9281 ;;Total ram usage:        4 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:    2
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		_ModbusSendTxBuffer
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           	psect	text40
  9292  0023E6                     __ptext40:
  9293                           	opt stack 0
  9294  0023E6                     _PortWrite:
  9295                           	opt stack 26
  9296                           
  9297                           ;incstack = 0
  9298  0023E6  FFFF               	dw	65535
  9299                           
  9300                           ;interrupts.c: 93: LATCbits.LATC5 = 1;
  9301  0023E8  8A8B               	bsf	3979,5,c	;volatile
  9302                           
  9303                           ;interrupts.c: 94: _delay((unsigned long)((10)*(10000000L/4000000.0)));
  9304  0023EA  0E06               	movlw	6
  9305  0023EC                     u5357:
  9306  0023EC  FFFF               	dw	65535	; errata NOP
  9307  0023EE  2EE8               	decfsz	wreg,f,c
  9308  0023F0  D7FD               	goto	u5357
  9309  0023F2  F000               	nop	
  9310                           
  9311                           ;interrupts.c: 95: for(uint8_t i = 0; i < buflen; i++)
  9312  0023F4  6A08               	clrf	PortWrite@i,c
  9313  0023F6  D00C               	goto	l3586
  9314  0023F8                     l76:
  9315  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  9316  0023FA  A2AC               	btfss	4012,1,c	;volatile
  9317  0023FC  D7FD               	goto	l76
  9318                           
  9319                           ;interrupts.c: 98: TXREG = buf[i];
  9320  0023FE  5008               	movf	PortWrite@i,w,c
  9321  002400  2405               	addwf	PortWrite@buf,w,c
  9322  002402  6ED9               	movwf	fsr2l,c
  9323  002404  0E00               	movlw	0
  9324  002406  2006               	addwfc	PortWrite@buf+1,w,c
  9325  002408  6EDA               	movwf	fsr2h,c
  9326  00240A  50DF               	movf	indf2,w,c
  9327  00240C  6EAD               	movwf	4013,c	;volatile
  9328  00240E  2A08               	incf	PortWrite@i,f,c
  9329  002410                     l3586:
  9330  002410  FFFF               	dw	65535	; assembler added errata NOP
  9331  002412  5007               	movf	PortWrite@buflen,w,c
  9332  002414  5C08               	subwf	PortWrite@i,w,c
  9333  002416  E3F0               	bnc	l76
  9334  002418                     l80:
  9335  002418  FFFF               	dw	65535	; assembler added errata NOP
  9336  00241A  A2AC               	btfss	4012,1,c	;volatile
  9337  00241C  D7FD               	goto	l80
  9338                           
  9339                           ;interrupts.c: 101: LATCbits.LATC5 = 0;
  9340  00241E  9A8B               	bcf	3979,5,c	;volatile
  9341  002420  0012               	return		;funcret
  9342  002422  FFFF               	dw	65535	; errata NOP
  9343  002424                     __end_of_PortWrite:
  9344                           	opt stack 0
  9345                           tblptru	equ	0xFF8
  9346                           tblptrh	equ	0xFF7
  9347                           tblptrl	equ	0xFF6
  9348                           tablat	equ	0xFF5
  9349                           prodh	equ	0xFF4
  9350                           prodl	equ	0xFF3
  9351                           intcon	equ	0xFF2
  9352                           postinc0	equ	0xFEE
  9353                           wreg	equ	0xFE8
  9354                           indf1	equ	0xFE7
  9355                           postinc1	equ	0xFE6
  9356                           postdec1	equ	0xFE5
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           plusw2	equ	0xFDB
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367 ;; *************** function _ModbusCalcCRC *****************
  9368 ;; Defined at:
  9369 ;;		line 644 in file "ModbusRtu.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;  u8length        1    wreg     unsigned char 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  u8length        1   12[COMRAM] unsigned char 
  9374 ;;  j               1   14[COMRAM] unsigned char 
  9375 ;;  i               1   13[COMRAM] unsigned char 
  9376 ;;  temp            2   15[COMRAM] unsigned int 
  9377 ;;  flag            2   10[COMRAM] unsigned int 
  9378 ;;  temp2           2    8[COMRAM] unsigned int 
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  2    4[COMRAM] unsigned short 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/1
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9388 ;;      Params:         2       0       0       0       0       0       0
  9389 ;;      Locals:         9       0       0       0       0       0       0
  9390 ;;      Temps:          2       0       0       0       0       0       0
  9391 ;;      Totals:        13       0       0       0       0       0       0
  9392 ;;Total ram usage:       13 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    2
  9395 ;; This function calls:
  9396 ;;		Nothing
  9397 ;; This function is called by:
  9398 ;;		_ModbusSendTxBuffer
  9399 ;;		_ModbusValidateRequest
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text41
  9404  00202A                     __ptext41:
  9405                           	opt stack 0
  9406  00202A                     _ModbusCalcCRC:
  9407                           	opt stack 26
  9408                           
  9409                           ;incstack = 0
  9410  00202A  FFFF               	dw	65535
  9411                           
  9412                           ;ModbusCalcCRC@u8length stored from wreg
  9413  00202C  6E0D               	movwf	ModbusCalcCRC@u8length,c
  9414                           
  9415                           ;ModbusRtu.c: 645: unsigned int temp, temp2, flag;
  9416                           ;ModbusRtu.c: 646: temp = 0xFFFF;
  9417  00202E  6810               	setf	ModbusCalcCRC@temp,c
  9418  002030  6811               	setf	ModbusCalcCRC@temp+1,c
  9419                           
  9420                           ;ModbusRtu.c: 647: for (uint8_t i = 0; i < u8length; i++)
  9421  002032  6A0E               	clrf	ModbusCalcCRC@i,c
  9422  002034  D01E               	goto	l3634
  9423  002036                     l3612:
  9424                           
  9425                           ;ModbusRtu.c: 648: {
  9426                           ;ModbusRtu.c: 649: temp = temp ^ _au8Buffer[i];
  9427  002036  0E00               	movlw	low __au8Buffer
  9428  002038  240E               	addwf	ModbusCalcCRC@i,w,c
  9429  00203A  6ED9               	movwf	fsr2l,c
  9430  00203C  6ADA               	clrf	fsr2h,c
  9431  00203E  0E01               	movlw	high __au8Buffer
  9432  002040  22DA               	addwfc	fsr2h,f,c
  9433  002042  50DF               	movf	indf2,w,c
  9434  002044  1A10               	xorwf	ModbusCalcCRC@temp,f,c
  9435                           
  9436                           ;ModbusRtu.c: 650: for (uint8_t j = 1; j <= 8; j++)
  9437  002046  0E01               	movlw	1
  9438  002048  6E0F               	movwf	ModbusCalcCRC@j,c
  9439  00204A                     l3620:
  9440  00204A  FFFF               	dw	65535	; assembler added errata NOP
  9441                           
  9442                           ;ModbusRtu.c: 651: {
  9443                           ;ModbusRtu.c: 652: flag = temp & 0x0001;
  9444  00204C  0E01               	movlw	1
  9445  00204E  1410               	andwf	ModbusCalcCRC@temp,w,c
  9446  002050  6E0B               	movwf	ModbusCalcCRC@flag,c
  9447  002052  6A0C               	clrf	ModbusCalcCRC@flag+1,c
  9448                           
  9449                           ;ModbusRtu.c: 653: temp >>=1;
  9450  002054  90D8               	bcf	status,0,c
  9451  002056  3211               	rrcf	ModbusCalcCRC@temp+1,f,c
  9452  002058  3210               	rrcf	ModbusCalcCRC@temp,f,c
  9453                           
  9454                           ;ModbusRtu.c: 654: if (flag)
  9455  00205A  500B               	movf	ModbusCalcCRC@flag,w,c
  9456  00205C  100C               	iorwf	ModbusCalcCRC@flag+1,w,c
  9457  00205E  E004               	bz	l3628
  9458                           
  9459                           ;ModbusRtu.c: 655: temp ^= 0xA001;
  9460  002060  0E01               	movlw	1
  9461  002062  1A10               	xorwf	ModbusCalcCRC@temp,f,c
  9462  002064  0EA0               	movlw	160
  9463  002066  1A11               	xorwf	ModbusCalcCRC@temp+1,f,c
  9464  002068                     l3628:
  9465  002068  2A0F               	incf	ModbusCalcCRC@j,f,c
  9466  00206A  0E08               	movlw	8
  9467  00206C  640F               	cpfsgt	ModbusCalcCRC@j,c
  9468  00206E  D7ED               	goto	l3620
  9469  002070  2A0E               	incf	ModbusCalcCRC@i,f,c
  9470  002072                     l3634:
  9471  002072  FFFF               	dw	65535	; assembler added errata NOP
  9472  002074  500D               	movf	ModbusCalcCRC@u8length,w,c
  9473  002076  5C0E               	subwf	ModbusCalcCRC@i,w,c
  9474  002078  E3DE               	bnc	l3612
  9475                           
  9476                           ;ModbusRtu.c: 656: }
  9477                           ;ModbusRtu.c: 657: }
  9478                           ;ModbusRtu.c: 659: temp2 = temp >> 8;
  9479  00207A  C011  F009         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
  9480  00207E  6A0A               	clrf	ModbusCalcCRC@temp2+1,c
  9481                           
  9482                           ;ModbusRtu.c: 660: temp = (temp << 8) | temp2;
  9483  002080  5010               	movf	ModbusCalcCRC@temp,w,c
  9484  002082  6E08               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
  9485  002084  6A07               	clrf	??_ModbusCalcCRC& (0+255),c
  9486  002086  5009               	movf	ModbusCalcCRC@temp2,w,c
  9487  002088  1007               	iorwf	??_ModbusCalcCRC,w,c
  9488  00208A  6E10               	movwf	ModbusCalcCRC@temp,c
  9489  00208C  500A               	movf	ModbusCalcCRC@temp2+1,w,c
  9490  00208E  1008               	iorwf	??_ModbusCalcCRC+1,w,c
  9491  002090  6E11               	movwf	ModbusCalcCRC@temp+1,c
  9492                           
  9493                           ;ModbusRtu.c: 664: return temp;
  9494  002092  C010  F005         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
  9495  002096  C011  F006         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
  9496  00209A  0012               	return		;funcret
  9497  00209C  FFFF               	dw	65535	; errata NOP
  9498  00209E                     __end_of_ModbusCalcCRC:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           postinc0	equ	0xFEE
  9508                           wreg	equ	0xFE8
  9509                           indf1	equ	0xFE7
  9510                           postinc1	equ	0xFE6
  9511                           postdec1	equ	0xFE5
  9512                           fsr1h	equ	0xFE2
  9513                           fsr1l	equ	0xFE1
  9514                           indf2	equ	0xFDF
  9515                           postinc2	equ	0xFDE
  9516                           postdec2	equ	0xFDD
  9517                           plusw2	equ	0xFDB
  9518                           fsr2h	equ	0xFDA
  9519                           fsr2l	equ	0xFD9
  9520                           status	equ	0xFD8
  9521                           
  9522 ;; *************** function _ModbusGetRxBuffer *****************
  9523 ;; Defined at:
  9524 ;;		line 493 in file "ModbusRtu.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;		None
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;  bBuffOverflo    1    6[COMRAM] unsigned char 
  9529 ;; Return value:  Size  Location     Type
  9530 ;;                  1    wreg      unsigned char 
  9531 ;; Registers used:
  9532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9533 ;; Tracked objects:
  9534 ;;		On entry : F/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9538 ;;      Params:         0       0       0       0       0       0       0
  9539 ;;      Locals:         1       0       0       0       0       0       0
  9540 ;;      Temps:          1       0       0       0       0       0       0
  9541 ;;      Totals:         2       0       0       0       0       0       0
  9542 ;;Total ram usage:        2 bytes
  9543 ;; Hardware stack levels used:    1
  9544 ;; Hardware stack levels required when called:    3
  9545 ;; This function calls:
  9546 ;;		_PortAvailable
  9547 ;;		_PortRead
  9548 ;; This function is called by:
  9549 ;;		_ModbusPoll
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           	psect	text42
  9554  002362                     __ptext42:
  9555                           	opt stack 0
  9556  002362                     _ModbusGetRxBuffer:
  9557                           	opt stack 26
  9558                           
  9559                           ;incstack = 0
  9560  002362  FFFF               	dw	65535
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;ModbusRtu.c: 495: bool bBuffOverflow = 0;
  9564  002364  6A07               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
  9565                           
  9566                           ;ModbusRtu.c: 500: _u8BufferSize = 0;
  9567  002366  6A71               	clrf	__u8BufferSize,c
  9568                           
  9569                           ;ModbusRtu.c: 502: while ( PortAvailable())
  9570  002368  D011               	goto	l3986
  9571  00236A                     l3978:
  9572                           
  9573                           ;ModbusRtu.c: 503: {
  9574                           ;ModbusRtu.c: 504: _au8Buffer[ _u8BufferSize ] = PortRead();
  9575  00236A  EC12  F012         	call	_PortRead	;wreg free
  9576  00236E  6E06               	movwf	??_ModbusGetRxBuffer& (0+255),c
  9577  002370  0E00               	movlw	low __au8Buffer
  9578  002372  2471               	addwf	__u8BufferSize,w,c
  9579  002374  6ED9               	movwf	fsr2l,c
  9580  002376  6ADA               	clrf	fsr2h,c
  9581  002378  0E01               	movlw	high __au8Buffer
  9582  00237A  22DA               	addwfc	fsr2h,f,c
  9583  00237C  C006  FFDF         	movff	??_ModbusGetRxBuffer,indf2
  9584                           
  9585                           ;ModbusRtu.c: 506: _u8BufferSize ++;
  9586  002380  2A71               	incf	__u8BufferSize,f,c
  9587                           
  9588                           ;ModbusRtu.c: 508: if (_u8BufferSize >= 140)
  9589  002382  0E8B               	movlw	139
  9590  002384  6471               	cpfsgt	__u8BufferSize,c
  9591  002386  D002               	goto	l3986
  9592                           
  9593                           ;ModbusRtu.c: 509: bBuffOverflow = 1;
  9594  002388  0E01               	movlw	1
  9595  00238A  6E07               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
  9596  00238C                     l3986:
  9597  00238C  FFFF               	dw	65535	; assembler added errata NOP
  9598  00238E  ECE3  F012         	call	_PortAvailable	;wreg free
  9599  002392  0900               	iorlw	0
  9600  002394  E1EA               	bnz	l3978
  9601                           
  9602                           ;ModbusRtu.c: 514: {
  9603                           ;ModbusRtu.c: 515: _u16errCnt++;
  9604  002396  5007               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
  9605  002398  E002               	bz	l3994
  9606                           
  9607                           ;ModbusRtu.c: 516: return ERR_BUFF_OVERFLOW;
  9608  00239A  0EFD               	movlw	253
  9609  00239C  D001               	goto	l804
  9610  00239E                     l3994:
  9611                           
  9612                           ;ModbusRtu.c: 517: }
  9613                           ;ModbusRtu.c: 518: return _u8BufferSize;
  9614  00239E  5071               	movf	__u8BufferSize,w,c
  9615  0023A0                     l804:
  9616  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  9617  0023A2  0012               	return		;funcret
  9618  0023A4  FFFF               	dw	65535	; errata NOP
  9619  0023A6                     __end_of_ModbusGetRxBuffer:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           intcon	equ	0xFF2
  9628                           postinc0	equ	0xFEE
  9629                           wreg	equ	0xFE8
  9630                           indf1	equ	0xFE7
  9631                           postinc1	equ	0xFE6
  9632                           postdec1	equ	0xFE5
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           indf2	equ	0xFDF
  9636                           postinc2	equ	0xFDE
  9637                           postdec2	equ	0xFDD
  9638                           plusw2	equ	0xFDB
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function _PortRead *****************
  9644 ;; Defined at:
  9645 ;;		line 57 in file "interrupts.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  ret             1    4[COMRAM] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      unsigned char 
  9652 ;; Registers used:
  9653 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9659 ;;      Params:         0       0       0       0       0       0       0
  9660 ;;      Locals:         1       0       0       0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0
  9662 ;;      Totals:         1       0       0       0       0       0       0
  9663 ;;Total ram usage:        1 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    2
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_ModbusGetRxBuffer
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text43
  9674  002424                     __ptext43:
  9675                           	opt stack 0
  9676  002424                     _PortRead:
  9677                           	opt stack 26
  9678                           
  9679                           ;incstack = 0
  9680  002424  FFFF               	dw	65535
  9681                           
  9682                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
  9683  002426  9EF2               	bcf	intcon,7,c	;volatile
  9684                           
  9685                           ;interrupts.c: 60: if(UartBufferLen > 0)
  9686  002428  506F               	movf	_UartBufferLen,w,c	;volatile
  9687  00242A  E012               	bz	l59
  9688                           
  9689                           ;interrupts.c: 61: {
  9690                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
  9691  00242C  0E00               	movlw	low _UartRingBuffer
  9692  00242E  2470               	addwf	_UartBufferTail,w,c	;volatile
  9693  002430  6ED9               	movwf	fsr2l,c
  9694  002432  6ADA               	clrf	fsr2h,c
  9695  002434  0E02               	movlw	high _UartRingBuffer
  9696  002436  22DA               	addwfc	fsr2h,f,c
  9697  002438  50DF               	movf	indf2,w,c
  9698  00243A  6E05               	movwf	PortRead@ret,c
  9699                           
  9700                           ;interrupts.c: 64: UartBufferLen--;
  9701  00243C  066F               	decf	_UartBufferLen,f,c	;volatile
  9702                           
  9703                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
  9704  00243E  2870               	incf	_UartBufferTail,w,c
  9705  002440  E102               	bnz	l3678
  9706                           
  9707                           ;interrupts.c: 66: UartBufferTail = 0;
  9708  002442  6A70               	clrf	_UartBufferTail,c	;volatile
  9709  002444  D001               	goto	l3680
  9710  002446                     l3678:
  9711                           
  9712                           ;interrupts.c: 67: else
  9713                           ;interrupts.c: 68: UartBufferTail++;
  9714  002446  2A70               	incf	_UartBufferTail,f,c	;volatile
  9715  002448                     l3680:
  9716  002448  FFFF               	dw	65535	; assembler added errata NOP
  9717                           
  9718                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
  9719  00244A  8EF2               	bsf	intcon,7,c	;volatile
  9720                           
  9721                           ;interrupts.c: 70: return ret;
  9722  00244C  5005               	movf	PortRead@ret,w,c
  9723  00244E  D002               	goto	l62
  9724  002450                     l59:
  9725                           
  9726                           ;interrupts.c: 71: }
  9727                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
  9728  002450  8EF2               	bsf	intcon,7,c	;volatile
  9729                           
  9730                           ;interrupts.c: 73: return 0;
  9731  002452  0E00               	movlw	0
  9732  002454                     l62:
  9733  002454  FFFF               	dw	65535	; assembler added errata NOP
  9734  002456  0012               	return		;funcret
  9735  002458  FFFF               	dw	65535	; errata NOP
  9736  00245A                     __end_of_PortRead:
  9737                           	opt stack 0
  9738                           tblptru	equ	0xFF8
  9739                           tblptrh	equ	0xFF7
  9740                           tblptrl	equ	0xFF6
  9741                           tablat	equ	0xFF5
  9742                           prodh	equ	0xFF4
  9743                           prodl	equ	0xFF3
  9744                           intcon	equ	0xFF2
  9745                           postinc0	equ	0xFEE
  9746                           wreg	equ	0xFE8
  9747                           indf1	equ	0xFE7
  9748                           postinc1	equ	0xFE6
  9749                           postdec1	equ	0xFE5
  9750                           fsr1h	equ	0xFE2
  9751                           fsr1l	equ	0xFE1
  9752                           indf2	equ	0xFDF
  9753                           postinc2	equ	0xFDE
  9754                           postdec2	equ	0xFDD
  9755                           plusw2	equ	0xFDB
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function _PortAvailable *****************
  9761 ;; Defined at:
  9762 ;;		line 52 in file "interrupts.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  1    wreg      unsigned char 
  9769 ;; Registers used:
  9770 ;;		wreg, status,2
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9776 ;;      Params:         0       0       0       0       0       0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0
  9779 ;;      Totals:         0       0       0       0       0       0       0
  9780 ;;Total ram usage:        0 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    2
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_ModbusPoll
  9787 ;;		_ModbusGetRxBuffer
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text44
  9792  0025C6                     __ptext44:
  9793                           	opt stack 0
  9794  0025C6                     _PortAvailable:
  9795                           	opt stack 27
  9796                           
  9797                           ;incstack = 0
  9798  0025C6  FFFF               	dw	65535
  9799                           
  9800                           ;interrupts.c: 54: return UartBufferLen;
  9801  0025C8  506F               	movf	_UartBufferLen,w,c	;volatile
  9802  0025CA  0012               	return		;funcret
  9803  0025CC  FFFF               	dw	65535	; errata NOP
  9804  0025CE                     __end_of_PortAvailable:
  9805                           	opt stack 0
  9806                           tblptru	equ	0xFF8
  9807                           tblptrh	equ	0xFF7
  9808                           tblptrl	equ	0xFF6
  9809                           tablat	equ	0xFF5
  9810                           prodh	equ	0xFF4
  9811                           prodl	equ	0xFF3
  9812                           intcon	equ	0xFF2
  9813                           postinc0	equ	0xFEE
  9814                           wreg	equ	0xFE8
  9815                           indf1	equ	0xFE7
  9816                           postinc1	equ	0xFE6
  9817                           postdec1	equ	0xFE5
  9818                           fsr1h	equ	0xFE2
  9819                           fsr1l	equ	0xFE1
  9820                           indf2	equ	0xFDF
  9821                           postinc2	equ	0xFDE
  9822                           postdec2	equ	0xFDD
  9823                           plusw2	equ	0xFDB
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _ModbusBuildException *****************
  9829 ;; Defined at:
  9830 ;;		line 807 in file "ModbusRtu.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  u8exception     1    wreg     unsigned char 
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;  u8exception     1    4[COMRAM] unsigned char 
  9835 ;;  u8func          1    5[COMRAM] unsigned char 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  1    wreg      void 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/1
  9842 ;;		On exit  : F/1
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9845 ;;      Params:         0       0       0       0       0       0       0
  9846 ;;      Locals:         2       0       0       0       0       0       0
  9847 ;;      Temps:          0       0       0       0       0       0       0
  9848 ;;      Totals:         2       0       0       0       0       0       0
  9849 ;;Total ram usage:        2 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; Hardware stack levels required when called:    2
  9852 ;; This function calls:
  9853 ;;		Nothing
  9854 ;; This function is called by:
  9855 ;;		_ModbusPoll
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           	psect	text45
  9860  002504                     __ptext45:
  9861                           	opt stack 0
  9862  002504                     _ModbusBuildException:
  9863                           	opt stack 27
  9864                           
  9865                           ;incstack = 0
  9866  002504  FFFF               	dw	65535
  9867                           
  9868                           ;ModbusBuildException@u8exception stored from wreg
  9869  002506  6E05               	movwf	ModbusBuildException@u8exception,c
  9870                           
  9871                           ;ModbusRtu.c: 808: uint8_t u8func = _au8Buffer[ FUNC ];
  9872  002508  C101  F006         	movff	__au8Buffer+1,ModbusBuildException@u8func
  9873                           
  9874                           ;ModbusRtu.c: 810: _au8Buffer[ ID ] = _u8id;
  9875  00250C  C0C3  F100         	movff	__u8id,__au8Buffer
  9876                           
  9877                           ;ModbusRtu.c: 811: _au8Buffer[ FUNC ] = u8func + 0x80;
  9878  002510  5006               	movf	ModbusBuildException@u8func,w,c
  9879  002512  0F80               	addlw	128
  9880  002514  0101               	movlb	1	; () banked
  9881  002516  6F01               	movwf	(__au8Buffer+1)& (0+255),b
  9882                           
  9883                           ; BSR set to: 1
  9884                           ;ModbusRtu.c: 812: _au8Buffer[ 2 ] = u8exception;
  9885  002518  C005  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
  9886                           
  9887                           ; BSR set to: 1
  9888                           ;ModbusRtu.c: 813: _u8BufferSize = EXCEPTION_SIZE;
  9889  00251C  0E03               	movlw	3
  9890  00251E  6E71               	movwf	__u8BufferSize,c
  9891                           
  9892                           ; BSR set to: 1
  9893  002520  0C03               	retlw	3	;funcret
  9894  002522  FFFF               	dw	65535	; errata NOP
  9895  002524                     __end_of_ModbusBuildException:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           intcon	equ	0xFF2
  9904                           postinc0	equ	0xFEE
  9905                           wreg	equ	0xFE8
  9906                           indf1	equ	0xFE7
  9907                           postinc1	equ	0xFE6
  9908                           postdec1	equ	0xFE5
  9909                           fsr1h	equ	0xFE2
  9910                           fsr1l	equ	0xFE1
  9911                           indf2	equ	0xFDF
  9912                           postinc2	equ	0xFDE
  9913                           postdec2	equ	0xFDD
  9914                           plusw2	equ	0xFDB
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _InitApp *****************
  9920 ;; Defined at:
  9921 ;;		line 66 in file "user.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  i               1    4[COMRAM] unsigned char 
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      void 
  9928 ;; Registers used:
  9929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9935 ;;      Params:         0       0       0       0       0       0       0
  9936 ;;      Locals:         1       0       0       0       0       0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0
  9938 ;;      Totals:         1       0       0       0       0       0       0
  9939 ;;Total ram usage:        1 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    3
  9942 ;; This function calls:
  9943 ;;		_InitUartBuffer
  9944 ;;		_PortBegin
  9945 ;; This function is called by:
  9946 ;;		_main
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text46
  9951  001F20                     __ptext46:
  9952                           	opt stack 0
  9953  001F20                     _InitApp:
  9954                           	opt stack 27
  9955                           
  9956                           ; BSR set to: 1
  9957                           ;incstack = 0
  9958  001F20  FFFF               	dw	65535
  9959                           
  9960                           ;user.c: 77: INTCONbits.PEIE = 1;
  9961  001F22  8CF2               	bsf	intcon,6,c	;volatile
  9962                           
  9963                           ;user.c: 78: (INTCONbits.GIE = 1);
  9964  001F24  8EF2               	bsf	intcon,7,c	;volatile
  9965                           
  9966                           ;user.c: 79: RCONbits.IPEN = 1;
  9967  001F26  8ED0               	bsf	4048,7,c	;volatile
  9968                           
  9969                           ;user.c: 84: T1CONbits.RD16 = 1;
  9970  001F28  8ECD               	bsf	4045,7,c	;volatile
  9971                           
  9972                           ;user.c: 85: T1CONbits.T1SYNC = 0;
  9973  001F2A  94CD               	bcf	4045,2,c	;volatile
  9974                           
  9975                           ;user.c: 86: T1CONbits.TMR1CS = 0;
  9976  001F2C  92CD               	bcf	4045,1,c	;volatile
  9977                           
  9978                           ;user.c: 88: T1CONbits.T1CKPS = 0;
  9979  001F2E  0ECF               	movlw	-49
  9980  001F30  16CD               	andwf	4045,f,c	;volatile
  9981                           
  9982                           ;user.c: 92: PIE1bits.TMR1IE = 1;
  9983  001F32  809D               	bsf	3997,0,c	;volatile
  9984                           
  9985                           ;user.c: 93: IPR1bits.TMR1IP = 1;
  9986  001F34  809F               	bsf	3999,0,c	;volatile
  9987                           
  9988                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
  9989  001F36  0EF6               	movlw	246
  9990  001F38  6ECF               	movwf	4047,c	;volatile
  9991  001F3A  0E3C               	movlw	60
  9992  001F3C  6ECE               	movwf	4046,c	;volatile
  9993                           
  9994                           ;user.c: 97: PIR1bits.TMR1IF = 0;
  9995  001F3E  909E               	bcf	3998,0,c	;volatile
  9996                           
  9997                           ;user.c: 99: T1CONbits.TMR1ON = 1;
  9998  001F40  80CD               	bsf	4045,0,c	;volatile
  9999                           
 10000                           ;user.c: 102: T0CONbits.T08BIT = 0;
 10001  001F42  9CD5               	bcf	4053,6,c	;volatile
 10002                           
 10003                           ;user.c: 103: T0CONbits.T0CS = 0;
 10004  001F44  9AD5               	bcf	4053,5,c	;volatile
 10005                           
 10006                           ;user.c: 105: T0CONbits.PSA = 0;
 10007  001F46  96D5               	bcf	4053,3,c	;volatile
 10008                           
 10009                           ;user.c: 116: T0CONbits.T0PS = 7;
 10010  001F48  0E07               	movlw	7
 10011  001F4A  12D5               	iorwf	4053,f,c	;volatile
 10012                           
 10013                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 10014  001F4C  8AF2               	bsf	intcon,5,c	;volatile
 10015                           
 10016                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 10017  001F4E  84F1               	bsf	intcon2,2,c	;volatile
 10018                           
 10019                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10020  001F50  0E1B               	movlw	27
 10021  001F52  6ED7               	movwf	4055,c	;volatile
 10022  001F54  0E1F               	movlw	31
 10023  001F56  6ED6               	movwf	4054,c	;volatile
 10024                           
 10025                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 10026  001F58  94F2               	bcf	intcon,2,c	;volatile
 10027                           
 10028                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 10029  001F5A  8ED5               	bsf	4053,7,c	;volatile
 10030                           
 10031                           ;user.c: 132: InitUartBuffer();
 10032  001F5C  ECD8  F012         	call	_InitUartBuffer	;wreg free
 10033                           
 10034                           ;user.c: 134: PortBegin();
 10035  001F60  ECAF  F012         	call	_PortBegin	;wreg free
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;user.c: 135: PIE1bits.RCIE = 1;
 10039  001F64  8A9D               	bsf	3997,5,c	;volatile
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;user.c: 137: IPR1bits.RCIP = 1;
 10043  001F66  8A9F               	bsf	3999,5,c	;volatile
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 10047  001F68  6A05               	clrf	InitApp@i,c
 10048  001F6A                     l4668:
 10049  001F6A  FFFF               	dw	65535	; assembler added errata NOP
 10050                           
 10051                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 10052  001F6C  5005               	movf	InitApp@i,w,c
 10053  001F6E  0D02               	mullw	2
 10054  001F70  0EAA               	movlw	low __MODBUSInputRegs
 10055  001F72  24F3               	addwf	prodl,w,c
 10056  001F74  6ED9               	movwf	fsr2l,c
 10057  001F76  0E01               	movlw	high __MODBUSInputRegs
 10058  001F78  20F4               	addwfc	prodh,w,c
 10059  001F7A  6EDA               	movwf	fsr2h,c
 10060  001F7C  6ADE               	clrf	postinc2,c
 10061  001F7E  6ADD               	clrf	postdec2,c
 10062  001F80  2A05               	incf	InitApp@i,f,c
 10063  001F82  0E0E               	movlw	14
 10064  001F84  6405               	cpfsgt	InitApp@i,c
 10065  001F86  D7F1               	goto	l4668
 10066                           
 10067                           ;user.c: 148: TRISB = 0;
 10068  001F88  6A93               	clrf	3987,c	;volatile
 10069                           
 10070                           ;user.c: 151: LATAbits.LATA0 = 0;
 10071  001F8A  9089               	bcf	3977,0,c	;volatile
 10072                           
 10073                           ;user.c: 152: LATAbits.LATA1 = 0;
 10074  001F8C  9289               	bcf	3977,1,c	;volatile
 10075                           
 10076                           ;user.c: 153: LATAbits.LATA2 = 0;
 10077  001F8E  9489               	bcf	3977,2,c	;volatile
 10078                           
 10079                           ;user.c: 154: LATAbits.LATA3 = 0;
 10080  001F90  9689               	bcf	3977,3,c	;volatile
 10081                           
 10082                           ;user.c: 155: TRISAbits.RA0 = 0;
 10083  001F92  9092               	bcf	3986,0,c	;volatile
 10084                           
 10085                           ;user.c: 156: TRISAbits.RA1 = 0;
 10086  001F94  9292               	bcf	3986,1,c	;volatile
 10087                           
 10088                           ;user.c: 157: TRISAbits.RA2 = 0;
 10089  001F96  9492               	bcf	3986,2,c	;volatile
 10090                           
 10091                           ;user.c: 158: TRISAbits.RA3 = 0;
 10092  001F98  9692               	bcf	3986,3,c	;volatile
 10093                           
 10094                           ;user.c: 160: TRISCbits.RC3 = 1;
 10095  001F9A  8694               	bsf	3988,3,c	;volatile
 10096                           
 10097                           ;user.c: 161: TRISCbits.RC1 = 1;
 10098  001F9C  8294               	bsf	3988,1,c	;volatile
 10099                           
 10100                           ;user.c: 162: TRISCbits.RC0 = 0;
 10101  001F9E  9094               	bcf	3988,0,c	;volatile
 10102                           
 10103                           ;user.c: 164: LATCbits.LATC2 = 0;
 10104  001FA0  948B               	bcf	3979,2,c	;volatile
 10105  001FA2  0012               	return		;funcret
 10106  001FA4  FFFF               	dw	65535	; errata NOP
 10107  001FA6                     __end_of_InitApp:
 10108                           	opt stack 0
 10109                           tblptru	equ	0xFF8
 10110                           tblptrh	equ	0xFF7
 10111                           tblptrl	equ	0xFF6
 10112                           tablat	equ	0xFF5
 10113                           prodh	equ	0xFF4
 10114                           prodl	equ	0xFF3
 10115                           intcon	equ	0xFF2
 10116                           intcon2	equ	0xFF1
 10117                           postinc0	equ	0xFEE
 10118                           wreg	equ	0xFE8
 10119                           indf1	equ	0xFE7
 10120                           postinc1	equ	0xFE6
 10121                           postdec1	equ	0xFE5
 10122                           fsr1h	equ	0xFE2
 10123                           fsr1l	equ	0xFE1
 10124                           indf2	equ	0xFDF
 10125                           postinc2	equ	0xFDE
 10126                           postdec2	equ	0xFDD
 10127                           plusw2	equ	0xFDB
 10128                           fsr2h	equ	0xFDA
 10129                           fsr2l	equ	0xFD9
 10130                           status	equ	0xFD8
 10131                           
 10132 ;; *************** function _PortBegin *****************
 10133 ;; Defined at:
 10134 ;;		line 48 in file "user.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;		None
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;		None
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      void 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2
 10143 ;; Tracked objects:
 10144 ;;		On entry : F/0
 10145 ;;		On exit  : F/0
 10146 ;;		Unchanged: F/0
 10147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10148 ;;      Params:         0       0       0       0       0       0       0
 10149 ;;      Locals:         0       0       0       0       0       0       0
 10150 ;;      Temps:          0       0       0       0       0       0       0
 10151 ;;      Totals:         0       0       0       0       0       0       0
 10152 ;;Total ram usage:        0 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    2
 10155 ;; This function calls:
 10156 ;;		Nothing
 10157 ;; This function is called by:
 10158 ;;		_InitApp
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           	psect	text47
 10163  00255E                     __ptext47:
 10164                           	opt stack 0
 10165  00255E                     _PortBegin:
 10166                           	opt stack 27
 10167                           
 10168                           ;incstack = 0
 10169  00255E  FFFF               	dw	65535
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;user.c: 50: TXSTA = 0;
 10173  002560  6AAC               	clrf	4012,c	;volatile
 10174                           
 10175                           ;user.c: 51: TXSTAbits.TXEN = 1;
 10176  002562  8AAC               	bsf	4012,5,c	;volatile
 10177                           
 10178                           ;user.c: 52: TXSTAbits.BRGH = 1;
 10179  002564  84AC               	bsf	4012,2,c	;volatile
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 10183  002566  0E40               	movlw	64
 10184  002568  6EAF               	movwf	4015,c	;volatile
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;user.c: 55: RCSTA = 0;
 10188  00256A  6AAB               	clrf	4011,c	;volatile
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;user.c: 56: RCSTAbits.SPEN = 1;
 10192  00256C  8EAB               	bsf	4011,7,c	;volatile
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;user.c: 57: RCSTAbits.CREN = 1;
 10196  00256E  88AB               	bsf	4011,4,c	;volatile
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;user.c: 59: TRISCbits.RC5 = 0;
 10200  002570  9A94               	bcf	3988,5,c	;volatile
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;user.c: 60: LATCbits.LATC5 = 0;
 10204  002572  9A8B               	bcf	3979,5,c	;volatile
 10205                           
 10206                           ; BSR set to: 0
 10207  002574  0012               	return		;funcret
 10208  002576  FFFF               	dw	65535	; errata NOP
 10209  002578                     __end_of_PortBegin:
 10210                           	opt stack 0
 10211                           tblptru	equ	0xFF8
 10212                           tblptrh	equ	0xFF7
 10213                           tblptrl	equ	0xFF6
 10214                           tablat	equ	0xFF5
 10215                           prodh	equ	0xFF4
 10216                           prodl	equ	0xFF3
 10217                           intcon	equ	0xFF2
 10218                           intcon2	equ	0xFF1
 10219                           postinc0	equ	0xFEE
 10220                           wreg	equ	0xFE8
 10221                           indf1	equ	0xFE7
 10222                           postinc1	equ	0xFE6
 10223                           postdec1	equ	0xFE5
 10224                           fsr1h	equ	0xFE2
 10225                           fsr1l	equ	0xFE1
 10226                           indf2	equ	0xFDF
 10227                           postinc2	equ	0xFDE
 10228                           postdec2	equ	0xFDD
 10229                           plusw2	equ	0xFDB
 10230                           fsr2h	equ	0xFDA
 10231                           fsr2l	equ	0xFD9
 10232                           status	equ	0xFD8
 10233                           
 10234 ;; *************** function _InitUartBuffer *****************
 10235 ;; Defined at:
 10236 ;;		line 43 in file "interrupts.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;		None
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;		None
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      void 
 10243 ;; Registers used:
 10244 ;;		None
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/0
 10247 ;;		On exit  : F/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10250 ;;      Params:         0       0       0       0       0       0       0
 10251 ;;      Locals:         0       0       0       0       0       0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0
 10253 ;;      Totals:         0       0       0       0       0       0       0
 10254 ;;Total ram usage:        0 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    2
 10257 ;; This function calls:
 10258 ;;		Nothing
 10259 ;; This function is called by:
 10260 ;;		_InitApp
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           	psect	text48
 10265  0025B0                     __ptext48:
 10266                           	opt stack 0
 10267  0025B0                     _InitUartBuffer:
 10268                           	opt stack 27
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;incstack = 0
 10272  0025B0  FFFF               	dw	65535
 10273                           
 10274                           ;interrupts.c: 45: UartBufferHead = 0;
 10275  0025B2  0100               	movlb	0	; () banked
 10276  0025B4  6BBF               	clrf	_UartBufferHead& (0+255),b
 10277                           
 10278                           ;interrupts.c: 46: UartBufferTail = 0;
 10279  0025B6  6A70               	clrf	_UartBufferTail,c	;volatile
 10280                           
 10281                           ;interrupts.c: 47: UartBufferLen = 0;
 10282  0025B8  6A6F               	clrf	_UartBufferLen,c	;volatile
 10283                           
 10284                           ; BSR set to: 0
 10285  0025BA  0012               	return		;funcret
 10286  0025BC  FFFF               	dw	65535	; errata NOP
 10287  0025BE                     __end_of_InitUartBuffer:
 10288                           	opt stack 0
 10289                           tblptru	equ	0xFF8
 10290                           tblptrh	equ	0xFF7
 10291                           tblptrl	equ	0xFF6
 10292                           tablat	equ	0xFF5
 10293                           prodh	equ	0xFF4
 10294                           prodl	equ	0xFF3
 10295                           intcon	equ	0xFF2
 10296                           intcon2	equ	0xFF1
 10297                           postinc0	equ	0xFEE
 10298                           wreg	equ	0xFE8
 10299                           indf1	equ	0xFE7
 10300                           postinc1	equ	0xFE6
 10301                           postdec1	equ	0xFE5
 10302                           fsr1h	equ	0xFE2
 10303                           fsr1l	equ	0xFE1
 10304                           indf2	equ	0xFDF
 10305                           postinc2	equ	0xFDE
 10306                           postdec2	equ	0xFDD
 10307                           plusw2	equ	0xFDB
 10308                           fsr2h	equ	0xFDA
 10309                           fsr2l	equ	0xFD9
 10310                           status	equ	0xFD8
 10311                           
 10312 ;; *************** function _ConfigureOscillator *****************
 10313 ;; Defined at:
 10314 ;;		line 50 in file "system.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;		None
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;		None
 10319 ;; Return value:  Size  Location     Type
 10320 ;;                  1    wreg      void 
 10321 ;; Registers used:
 10322 ;;		None
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10328 ;;      Params:         0       0       0       0       0       0       0
 10329 ;;      Locals:         0       0       0       0       0       0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0
 10331 ;;      Totals:         0       0       0       0       0       0       0
 10332 ;;Total ram usage:        0 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    2
 10335 ;; This function calls:
 10336 ;;		Nothing
 10337 ;; This function is called by:
 10338 ;;		_main
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           	psect	text49
 10343  0025CE                     __ptext49:
 10344                           	opt stack 0
 10345  0025CE                     _ConfigureOscillator:
 10346                           	opt stack 28
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;incstack = 0
 10350  0025CE  FFFF               	dw	65535
 10351  0025D0  0012               	return		;funcret
 10352  0025D2  FFFF               	dw	65535	; errata NOP
 10353  0025D4                     __end_of_ConfigureOscillator:
 10354                           	opt stack 0
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           prodh	equ	0xFF4
 10360                           prodl	equ	0xFF3
 10361                           intcon	equ	0xFF2
 10362                           intcon2	equ	0xFF1
 10363                           postinc0	equ	0xFEE
 10364                           wreg	equ	0xFE8
 10365                           indf1	equ	0xFE7
 10366                           postinc1	equ	0xFE6
 10367                           postdec1	equ	0xFE5
 10368                           fsr1h	equ	0xFE2
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           plusw2	equ	0xFDB
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378 ;; *************** function _AddSecond *****************
 10379 ;; Defined at:
 10380 ;;		line 179 in file "user.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, status,2, status,0
 10389 ;; Tracked objects:
 10390 ;;		On entry : F/0
 10391 ;;		On exit  : F/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10394 ;;      Params:         0       0       0       0       0       0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0
 10397 ;;      Totals:         0       0       0       0       0       0       0
 10398 ;;Total ram usage:        0 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    2
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_main
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           	psect	text50
 10409  0025A0                     __ptext50:
 10410                           	opt stack 0
 10411  0025A0                     _AddSecond:
 10412                           	opt stack 28
 10413                           
 10414                           ;incstack = 0
 10415  0025A0  FFFF               	dw	65535
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;user.c: 181: currentTime++;
 10419  0025A2  2BD2               	incf	_currentTime& (0+255),f,b
 10420  0025A4  0E00               	movlw	0
 10421  0025A6  23D3               	addwfc	(_currentTime+1)& (0+255),f,b
 10422  0025A8  23D4               	addwfc	(_currentTime+2)& (0+255),f,b
 10423  0025AA  23D5               	addwfc	(_currentTime+3)& (0+255),f,b
 10424                           
 10425                           ; BSR set to: 0
 10426  0025AC  0C00               	retlw	0	;funcret
 10427  0025AE  FFFF               	dw	65535	; errata NOP
 10428  0025B0                     __end_of_AddSecond:
 10429                           	opt stack 0
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           intcon2	equ	0xFF1
 10438                           postinc0	equ	0xFEE
 10439                           wreg	equ	0xFE8
 10440                           indf1	equ	0xFE7
 10441                           postinc1	equ	0xFE6
 10442                           postdec1	equ	0xFE5
 10443                           fsr1h	equ	0xFE2
 10444                           fsr1l	equ	0xFE1
 10445                           indf2	equ	0xFDF
 10446                           postinc2	equ	0xFDE
 10447                           postdec2	equ	0xFDD
 10448                           plusw2	equ	0xFDB
 10449                           fsr2h	equ	0xFDA
 10450                           fsr2l	equ	0xFD9
 10451                           status	equ	0xFD8
 10452                           
 10453 ;; *************** function _low_isr *****************
 10454 ;; Defined at:
 10455 ;;		line 197 in file "interrupts.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      void 
 10462 ;; Registers used:
 10463 ;;		None
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10469 ;;      Params:         0       0       0       0       0       0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0
 10471 ;;      Temps:          1       0       0       0       0       0       0
 10472 ;;      Totals:         1       0       0       0       0       0       0
 10473 ;;Total ram usage:        1 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    1
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		Interrupt level 1
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           	psect	intcodelo
 10484  000018                     __pintcodelo:
 10485                           	opt stack 0
 10486  000018                     _low_isr:
 10487                           	opt stack 0
 10488  000018  FFFF               	dw	65535	; assembler added errata NOP
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;incstack = 0
 10492  00001A  807A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10493  00001C  FFFF               	dw	65535	; errata NOP
 10494  00001E  CFE0 F004          	movff	bsr,??_low_isr
 10495  000022  C004  FFE0         	movff	??_low_isr,bsr
 10496  000026  907A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10497  000028  0010               	retfie	
 10498  00002A  FFFF               	dw	65535	; errata NOP
 10499  00002C                     __end_of_low_isr:
 10500                           	opt stack 0
 10501                           tblptru	equ	0xFF8
 10502                           tblptrh	equ	0xFF7
 10503                           tblptrl	equ	0xFF6
 10504                           tablat	equ	0xFF5
 10505                           prodh	equ	0xFF4
 10506                           prodl	equ	0xFF3
 10507                           intcon	equ	0xFF2
 10508                           intcon2	equ	0xFF1
 10509                           postinc0	equ	0xFEE
 10510                           wreg	equ	0xFE8
 10511                           indf1	equ	0xFE7
 10512                           postinc1	equ	0xFE6
 10513                           postdec1	equ	0xFE5
 10514                           fsr1h	equ	0xFE2
 10515                           fsr1l	equ	0xFE1
 10516                           bsr	equ	0xFE0
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _high_isr *****************
 10526 ;; Defined at:
 10527 ;;		line 111 in file "interrupts.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  c               1    2[COMRAM] unsigned char 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10541 ;;      Params:         0       0       0       0       0       0       0
 10542 ;;      Locals:         1       0       0       0       0       0       0
 10543 ;;      Temps:          2       0       0       0       0       0       0
 10544 ;;      Totals:         3       0       0       0       0       0       0
 10545 ;;Total ram usage:        3 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; This function calls:
 10548 ;;		Nothing
 10549 ;; This function is called by:
 10550 ;;		Interrupt level 2
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	intcode
 10555  000008                     __pintcode:
 10556                           	opt stack 0
 10557  000008                     _high_isr:
 10558                           	opt stack 0
 10559  000008  FFFF               	dw	65535	; assembler added errata NOP
 10560                           
 10561                           ;incstack = 0
 10562  00000A  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10563  00000C  FFFF               	dw	65535	; errata NOP
 10564  00000E  CFD9 F001          	movff	fsr2l,??_high_isr
 10565  000012  CFDA F002          	movff	fsr2h,??_high_isr+1
 10566  000016  EF02  F00F         	goto	int_func
 10567                           tblptru	equ	0xFF8
 10568                           tblptrh	equ	0xFF7
 10569                           tblptrl	equ	0xFF6
 10570                           tablat	equ	0xFF5
 10571                           prodh	equ	0xFF4
 10572                           prodl	equ	0xFF3
 10573                           intcon	equ	0xFF2
 10574                           intcon2	equ	0xFF1
 10575                           postinc0	equ	0xFEE
 10576                           wreg	equ	0xFE8
 10577                           indf1	equ	0xFE7
 10578                           postinc1	equ	0xFE6
 10579                           postdec1	equ	0xFE5
 10580                           fsr1h	equ	0xFE2
 10581                           fsr1l	equ	0xFE1
 10582                           bsr	equ	0xFE0
 10583                           indf2	equ	0xFDF
 10584                           postinc2	equ	0xFDE
 10585                           postdec2	equ	0xFDD
 10586                           plusw2	equ	0xFDB
 10587                           fsr2h	equ	0xFDA
 10588                           fsr2l	equ	0xFD9
 10589                           status	equ	0xFD8
 10590                           
 10591                           	psect	intcode_body
 10592  001E04                     __pintcode_body:
 10593                           	opt stack 23
 10594  001E04                     int_func:
 10595                           	opt stack 23
 10596  001E04  FFFF               	dw	65535	; errata NOP
 10597                           
 10598                           ;interrupts.c: 132: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 10599  001E06  B09E               	btfsc	3998,0,c	;volatile
 10600  001E08  A09D               	btfss	3997,0,c	;volatile
 10601  001E0A  D00C               	goto	i2l86
 10602                           
 10603                           ;interrupts.c: 133: {
 10604                           ;interrupts.c: 134: PIR1bits.TMR1IF = 0;
 10605  001E0C  909E               	bcf	3998,0,c	;volatile
 10606                           
 10607                           ;interrupts.c: 135: millisecondsFromStart++;
 10608  001E0E  0100               	movlb	0	; () banked
 10609  001E10  2BAC               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 10610  001E12  0E00               	movlw	0
 10611  001E14  23AD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 10612  001E16  23AE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 10613  001E18  23AF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;interrupts.c: 136: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 10617  001E1A  0EF6               	movlw	246
 10618  001E1C  6ECF               	movwf	4047,c	;volatile
 10619                           
 10620                           ; BSR set to: 0
 10621  001E1E  0E3C               	movlw	60
 10622  001E20  6ECE               	movwf	4046,c	;volatile
 10623  001E22  D033               	goto	i2l87
 10624  001E24                     i2l86:
 10625  001E24  FFFF               	dw	65535	; assembler added errata NOP
 10626                           
 10627                           ;interrupts.c: 138: }
 10628                           ;interrupts.c: 140: if(INTCONbits.TMR0IF)
 10629  001E26  A4F2               	btfss	intcon,2,c	;volatile
 10630  001E28  D016               	goto	i2l88
 10631                           
 10632                           ;interrupts.c: 141: {
 10633                           ;interrupts.c: 142: INTCONbits.TMR0IF = 0;
 10634  001E2A  94F2               	bcf	intcon,2,c	;volatile
 10635                           
 10636                           ;interrupts.c: 143: _6sCounter++;
 10637  001E2C  0100               	movlb	0	; () banked
 10638  001E2E  2BC0               	incf	__6sCounter& (0+255),f,b	;volatile
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;interrupts.c: 144: if(_6sCounter == 10)
 10642  001E30  0E0A               	movlw	10
 10643  001E32  19C0               	xorwf	__6sCounter& (0+255),w,b	;volatile
 10644  001E34  E10B               	bnz	i2l5338
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;interrupts.c: 145: {
 10648                           ;interrupts.c: 146: _6sCounter = 0;
 10649  001E36  6BC0               	clrf	__6sCounter& (0+255),b	;volatile
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;interrupts.c: 147: globalMinutes++;
 10653  001E38  2A76               	incf	_globalMinutes,f,c	;volatile
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;interrupts.c: 148: if(globalMinutes == 60)
 10657  001E3A  0E3C               	movlw	60
 10658  001E3C  1876               	xorwf	_globalMinutes,w,c	;volatile
 10659  001E3E  E106               	bnz	i2l5338
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;interrupts.c: 149: {
 10663                           ;interrupts.c: 150: globalMinutes = 0;
 10664  001E40  6A76               	clrf	_globalMinutes,c	;volatile
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;interrupts.c: 151: globalHours++;
 10668  001E42  2A78               	incf	_globalHours,f,c	;volatile
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;interrupts.c: 152: if(globalHours == 24)
 10672  001E44  0E18               	movlw	24
 10673  001E46  1878               	xorwf	_globalHours,w,c	;volatile
 10674  001E48  E101               	bnz	i2l5338
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;interrupts.c: 153: {
 10678                           ;interrupts.c: 154: globalHours = 0;
 10679  001E4A  6A78               	clrf	_globalHours,c	;volatile
 10680  001E4C                     i2l5338:
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;interrupts.c: 155: }
 10684                           ;interrupts.c: 156: }
 10685                           ;interrupts.c: 157: }
 10686                           ;interrupts.c: 158: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10687  001E4C  0E1B               	movlw	27
 10688  001E4E  6ED7               	movwf	4055,c	;volatile
 10689  001E50  0E1F               	movlw	31
 10690  001E52  6ED6               	movwf	4054,c	;volatile
 10691  001E54  D01A               	goto	i2l87
 10692  001E56                     i2l88:
 10693  001E56  FFFF               	dw	65535	; assembler added errata NOP
 10694                           
 10695                           ;interrupts.c: 160: }
 10696                           ;interrupts.c: 162: if (PIR1bits.RCIF && PIE1bits.RCIE)
 10697  001E58  BA9E               	btfsc	3998,5,c	;volatile
 10698  001E5A  AA9D               	btfss	3997,5,c	;volatile
 10699  001E5C  D016               	goto	i2l87
 10700  001E5E                     i2l97:
 10701  001E5E  FFFF               	dw	65535	; assembler added errata NOP
 10702  001E60  AA9E               	btfss	3998,5,c	;volatile
 10703  001E62  D7FD               	goto	i2l97
 10704                           
 10705                           ;interrupts.c: 176: uint8_t c = RCREG;
 10706  001E64  CFAE F003          	movff	4014,high_isr@c	;volatile
 10707                           
 10708                           ;interrupts.c: 179: UartRingBuffer[UartBufferHead] = c;
 10709  001E68  0E00               	movlw	low _UartRingBuffer
 10710  001E6A  0100               	movlb	0	; () banked
 10711  001E6C  25BF               	addwf	_UartBufferHead& (0+255),w,b
 10712  001E6E  6ED9               	movwf	fsr2l,c
 10713  001E70  6ADA               	clrf	fsr2h,c
 10714  001E72  0E02               	movlw	high _UartRingBuffer
 10715  001E74  22DA               	addwfc	fsr2h,f,c
 10716  001E76  C003  FFDF         	movff	high_isr@c,indf2
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;interrupts.c: 180: UartBufferLen++;
 10720  001E7A  2A6F               	incf	_UartBufferLen,f,c	;volatile
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;interrupts.c: 181: if(UartBufferHead == 256u - 1)
 10724  001E7C  29BF               	incf	_UartBufferHead& (0+255),w,b
 10725  001E7E  E102               	bnz	i2l5356
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;interrupts.c: 182: UartBufferHead = 0;
 10729  001E80  6BBF               	clrf	_UartBufferHead& (0+255),b
 10730  001E82  D001               	goto	i2l5358
 10731  001E84                     i2l5356:
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;interrupts.c: 183: else
 10735                           ;interrupts.c: 184: UartBufferHead++;
 10736  001E84  2BBF               	incf	_UartBufferHead& (0+255),f,b
 10737  001E86                     i2l5358:
 10738  001E86  FFFF               	dw	65535	; assembler added errata NOP
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;interrupts.c: 187: PIR1bits.RCIF = 0;
 10742  001E88  9A9E               	bcf	3998,5,c	;volatile
 10743  001E8A                     i2l87:
 10744  001E8A  FFFF               	dw	65535	; assembler added errata NOP
 10745  001E8C  C002  FFDA         	movff	??_high_isr+1,fsr2h
 10746  001E90  C001  FFD9         	movff	??_high_isr,fsr2l
 10747  001E94  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10748  001E96  0011               	retfie		f
 10749  001E98  FFFF               	dw	65535	; errata NOP
 10750  001E9A                     __end_of_high_isr:
 10751                           	opt stack 0
 10752                           tblptru	equ	0xFF8
 10753                           tblptrh	equ	0xFF7
 10754                           tblptrl	equ	0xFF6
 10755                           tablat	equ	0xFF5
 10756                           prodh	equ	0xFF4
 10757                           prodl	equ	0xFF3
 10758                           intcon	equ	0xFF2
 10759                           intcon2	equ	0xFF1
 10760                           postinc0	equ	0xFEE
 10761                           wreg	equ	0xFE8
 10762                           indf1	equ	0xFE7
 10763                           postinc1	equ	0xFE6
 10764                           postdec1	equ	0xFE5
 10765                           fsr1h	equ	0xFE2
 10766                           fsr1l	equ	0xFE1
 10767                           bsr	equ	0xFE0
 10768                           indf2	equ	0xFDF
 10769                           postinc2	equ	0xFDE
 10770                           postdec2	equ	0xFDD
 10771                           plusw2	equ	0xFDB
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           intcon	equ	0xFF2
 10782                           intcon2	equ	0xFF1
 10783                           postinc0	equ	0xFEE
 10784                           wreg	equ	0xFE8
 10785                           indf1	equ	0xFE7
 10786                           postinc1	equ	0xFE6
 10787                           postdec1	equ	0xFE5
 10788                           fsr1h	equ	0xFE2
 10789                           fsr1l	equ	0xFE1
 10790                           bsr	equ	0xFE0
 10791                           indf2	equ	0xFDF
 10792                           postinc2	equ	0xFDE
 10793                           postdec2	equ	0xFDD
 10794                           plusw2	equ	0xFDB
 10795                           fsr2h	equ	0xFDA
 10796                           fsr2l	equ	0xFD9
 10797                           status	equ	0xFD8
 10798                           
 10799                           	psect	rparam
 10800  0000                     tblptru	equ	0xFF8
 10801                           tblptrh	equ	0xFF7
 10802                           tblptrl	equ	0xFF6
 10803                           tablat	equ	0xFF5
 10804                           prodh	equ	0xFF4
 10805                           prodl	equ	0xFF3
 10806                           intcon	equ	0xFF2
 10807                           intcon2	equ	0xFF1
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           indf1	equ	0xFE7
 10811                           postinc1	equ	0xFE6
 10812                           postdec1	equ	0xFE5
 10813                           fsr1h	equ	0xFE2
 10814                           fsr1l	equ	0xFE1
 10815                           bsr	equ	0xFE0
 10816                           indf2	equ	0xFDF
 10817                           postinc2	equ	0xFDE
 10818                           postdec2	equ	0xFDD
 10819                           plusw2	equ	0xFDB
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824                           	psect	temp
 10825  00007A                     btemp:
 10826                           	opt stack 0
 10827  00007A                     	ds	1
 10828  0000                     int$flags	set	btemp
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           intcon2	equ	0xFF1
 10837                           postinc0	equ	0xFEE
 10838                           wreg	equ	0xFE8
 10839                           indf1	equ	0xFE7
 10840                           postinc1	equ	0xFE6
 10841                           postdec1	equ	0xFE5
 10842                           fsr1h	equ	0xFE2
 10843                           fsr1l	equ	0xFE1
 10844                           bsr	equ	0xFE0
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           plusw2	equ	0xFDB
 10849                           fsr2h	equ	0xFDA
 10850                           fsr2l	equ	0xFD9
 10851                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        7
    BSS         553
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     121
    BANK0           128     20     113
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    minutes	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    _holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> NULL(NULL[0]), _MODBUSHoldingRegs(BANK1[30]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_LightLed
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusProcess_FC15
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   25167
                                              0 BANK0     20    20      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                      _SetBuzzerDuty
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             17    17      0    8749
                                             93 COMRAM    17    17      0
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
                      _SetBuzzerDuty
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (2) _SetTimeFromRegs                                     27    25      2    4536
                                             66 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    2768
                                             43 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    2468
                                             27 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     723
                                             11 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     632
                                             11 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     546
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     569
                                              9 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     415
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      52
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                           2     1      1     138
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _LightStatusLed                                       8     6      2     604
                                              4 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     182
                                              4 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1223
                                             12 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                      _SetBuzzerDuty
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (2) _SetBuzzerDuty                                        4     2      2     258
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     412
                                              9 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     218
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    1587
                                             12 COMRAM     5     5      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              5 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    2556
                                             12 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0      90
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LoadNextEvent                                        5     5      0     463
                                              6 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (4) _getHourMin                                           2     1      1     326
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    1541
                                              4 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9    9136
                                             38 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               21    21      0     715
                                             17 COMRAM    21    21      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     749
                                             19 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     728
                                             19 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1000
                                             19 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     745
                                             19 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   2     2      0     632
                                             19 COMRAM     2     2      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3     972
                                             19 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0     936
                                             19 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1055
                                             19 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     541
                                             17 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      23
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              4 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              4 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              5 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              4 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             3     3      0      23
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SetBuzzerDuty
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
   _SetBuzzerDuty
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SetBuzzerDuty
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _SetBuzzerDuty
     _SetTimeFromRegs
       _LightStatusLed
       _LoadNextEvent
         _getHourMin
       _SetHourMin
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     14      71       5       88.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      79       1       96.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B2      15        0.0%
DATA                 0      0     2B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed May 11 09:41:38 2016

                                                         LoadNextEvent@minute 000B  
                                                               _years_to_days 1604  
                                          ModbusProcess_FC15@u8CopyBufferSize 001B  
                                                              _ResetEvent$825 0010  
                                                  ModbusProcess_FC16@u8regsno 0020  
                                                                          l62 2454  
                                                                          l80 2418  
                                                                          l59 2450  
                                                                          l76 23F8  
                                                                          _RD 007D30  
                                                                          _WR 007D31  
                                                         months_to_days@month 000C  
                                                                 __CFG_BOR$ON 000000  
                                                                          bsr 000FE0  
                                               ModbusProcess_FC5@u8currentBit 001C  
                                              ModbusProcess_FC15@u16StartCoil 001E  
                                                                __CFG_CP0$OFF 000000  
                                                                __CFG_CP1$OFF 000000  
                                                                __CFG_CP2$OFF 000000  
                                                                __CFG_CP3$OFF 000000  
                                                                 __CFG_OSC$HS 000000  
                                                                         l110 2494  
                                                                         l111 24AE  
                                                         ModbusPoll@inputRegs 002A  
                                                                         l305 000E  
                                                                         l501 03DE  
                                                                         l270 0E2C  
                                                                         l254 2322  
                                                                         l511 0436  
                                                                         l415 0658  
                                                                         l256 232C  
                                                                         l504 040A  
                                                                         l432 0168  
                                                                         l257 2336  
                                                                         l441 01AA  
                                                                         l258 2340  
                                                                         l290 18F6  
                                                                         l434 016C  
                                                                         l259 235C  
                                                                         l451 0230  
                                                                         l427 0140  
                                                                         l524 04AA  
                                                                         l541 0526  
                                                                         l509 0432  
                                                                         l278 0D4A  
                                                                         l534 04FA  
                                                                         l526 04AE  
                                                                         l519 0482  
                                                                         l471 02D0  
                                                                         l439 0194  
                                                                         l456 0258  
                                                                         l377 1F1C  
                                                                         l393 1B02  
                                                                         l481 0330  
                                                                         l473 02D4  
                                                                         l466 02A8  
                                                                         l458 025C  
                                                                         l387 1B48  
                                                                         l539 0522  
                                                                         l804 23A0  
                                                                         l900 15DE  
                                                                         l556 05B2  
                                                                         l549 0574  
                                                                         l397 116E  
                                                                         l823 0E74  
                                                                         l824 1052  
                                                                         l496 03B6  
                                                                         l488 0366  
                                                                         l921 1C60  
                                                                         l770 13BC  
                                                                         l828 0EAA  
                                                                         l872 14C6  
                                                                         l796 259A  
                                                                         _GIE 007F97  
                                                                __CFG_CPB$OFF 000000  
                                                                         _PR2 000FCB  
                                                                __CFG_CPD$OFF 000000  
                                                    __end_of_SwitchOffAllLeds 2504  
                                                            ProcessDiary@hour 0011  
                                            ModbusValidateRequest@recLenBytes 001A  
                                                       ModbusPoll@holdingRegs 002D  
                                                                __CFG_BORV$42 000000  
                                                                __CFG_IDLOC0$ 000000  
                                                                __CFG_IDLOC1$ 000001  
                                                                __CFG_IDLOC2$ 000000  
                                                                         prod 000FF3  
                                                                         wreg 000FE8  
                                            ModbusValidateRequest@isSupported 0020  
                                                      SetTimeFromRegs@newTime 004C  
                                                      SetTimeFromRegs@hourMin 004B  
                                                               _LoadNextEvent 1E9A  
                                                           _buzzeLoudDuration 0073  
                                                         main@oldBuzzerOnTime 00E2  
                                                               _globalMinutes 0076  
                                                                __CFG_WDT$OFF 000000  
                                                                        l1325 21A0  
                                                                        l1335 22CA  
                                                                        l1351 21EE  
                                                                        l4010 0E78  
                                                                        l1371 0696  
                                                                        l4014 0E98  
                                                                        l4040 0F00  
                                                                        l4032 0ED6  
                                                                        l4024 0EB0  
                                                                        l4112 1018  
                                                                        l4050 0F18  
                                                                        l4114 104E  
                                                                        l4018 0EA0  
                                                                        l4036 0EFA  
                                                                        l4028 0ED2  
                                                                        l4222 1D18  
                                                                        l4224 1D4A  
                                                                        l4056 0F22  
                                                                        l4170 14E4  
                                                                        l4154 148A  
                                                                        l4146 142E  
                                                                        l4138 141E  
                                                                        l4322 1998  
                                                                        l4090 0F96  
                                                                        l4066 0F40  
                                                                        l4058 0F2E  
                                                                        l3514 21EC  
                                                                        l3522 216A  
                                                                        l5050 038E  
                                                                        l5026 0358  
                                                                        l4410 000A  
                                                                        l3620 204A  
                                                                        l3612 2036  
                                                                        l4156 14B8  
                                                                        l4164 14CC  
                                                                        l4316 1940  
                                                                        l3700 24E2  
                                                                        l4500 0AE4  
                                                                        l3524 2174  
                                                                        l5052 039E  
                                                                        l4412 000C  
                                                                        l4404 0002  
                                                                        l4326 19BC  
                                                                        l4342 2252  
                                                                        l4078 0F70  
                                                                        l4422 09DE  
                                                                        l3710 1812  
                                                                        l3550 22C0  
                                                                        l3542 229C  
                                                                        l3534 2196  
                                                                        l3526 217A  
                                                                        l5222 054E  
                                                                        l5126 045E  
                                                                        l4406 0006  
                                                                        l4192 1B84  
                                                                        l3720 187C  
                                                                        l3544 22A6  
                                                                        l5224 0556  
                                                                        l5128 0466  
                                                                        l5080 03EE  
                                                                        l4408 0008  
                                                                        l3634 2072  
                                                                        l4266 1534  
                                                                        l4610 1ABE  
                                                                        l4530 0B3E  
                                                                        l4522 0B24  
                                                                        l4514 0B0A  
                                                                        l4506 0AF2  
                                                                        l4450 0A48  
                                                                        l4442 0A2E  
                                                                        l4434 0A16  
                                                                        l3722 189A  
                                                                        l3714 1838  
                                                                        l3546 22AC  
                                                                        l3650 1DA4  
                                                                        l5250 059C  
                                                                        l3628 2068  
                                                                        l4276 159E  
                                                                        l3740 1EAE  
                                                                        l3812 234A  
                                                                        l4532 0B46  
                                                                        l4524 0B2C  
                                                                        l4516 0B12  
                                                                        l4508 0AF8  
                                                                        l4460 0A6A  
                                                                        l4452 0A50  
                                                                        l4444 0A36  
                                                                        l4436 0A1C  
                                                                        l4428 0A08  
                                                                        l3716 1856  
                                                                        l4278 15D0  
                                                                        l4286 15E4  
                                                                        l4198 1BD8  
                                                                        l4710 12D8  
                                                                        l4550 0B78  
                                                                        l4542 0B60  
                                                                        l4470 0A84  
                                                                        l3726 18C8  
                                                                        l3654 1DCE  
                                                                        l5174 04D6  
                                                                        l5502 11D2  
                                                                        l3680 2448  
                                                                        l3832 0D20  
                                                                        l3824 0C10  
                                                                        l3744 1EB6  
                                                                        l4624 1AF4  
                                                                        l4560 0B9A  
                                                                        l4552 0B80  
                                                                        l4544 0B66  
                                                                        l4536 0B52  
                                                                        l4480 0AA4  
                                                                        l4472 0A8A  
                                                                        l4464 0A76  
                                                                        l5176 04DE  
                                                                        l4800 00B2  
                                                                        l3586 2410  
                                                                        l4394 1C96  
                                                                        l4730 1300  
                                                                        l4706 12D2  
                                                                        l3834 0D78  
                                                                        l3826 0CA6  
                                                                        l3818 0BF4  
                                                                        l3746 1EB8  
                                                                        l4618 1ADC  
                                                                        l4458 0A62  
                                                                        l5274 05DA  
                                                                        l5522 1234  
                                                                        l4396 1C98  
                                                                        l4740 1328  
                                                                        l4732 1306  
                                                                        l3844 0E1A  
                                                                        l4900 021A  
                                                                        l4812 00F6  
                                                                        l5460 10C0  
                                                                        l5452 1098  
                                                                        l3678 2446  
                                                                        l4726 12FC  
                                                                        l4566 0BAC  
                                                                        l4558 0B92  
                                                                        l4494 0AD0  
                                                                        l4486 0AB6  
                                                                        l4478 0A9C  
                                                                        l4574 0BC0  
                                                                        l4582 23B4  
                                                                        l5278 05F2  
                                                                        l5518 1214  
                                                                        l5470 10EA  
                                                                        l4760 136E  
                                                                        l4752 1354  
                                                                        l4744 133A  
                                                                        l4736 131A  
                                                                        l4568 0BB4  
                                                                        l4496 0AD8  
                                                                        l4488 0ABE  
                                                                        l4576 0BD6  
                                                                        l3776 06A2  
                                                                        l5296 0646  
                                                                        l4816 0110  
                                                                        l4808 00EA  
                                                                        l4682 127A  
                                                                        l3954 2470  
                                                                        l3786 095A  
                                                                        l4668 1F6A  
                                                                        l4764 1380  
                                                                        l4756 1366  
                                                                        l4748 134C  
                                                                        l5492 1176  
                                                                        l4774 138C  
                                                                        l4686 1280  
                                                                        l3958 2482  
                                                                        l5486 114C  
                                                                        l4768 1386  
                                                                        l4696 12AC  
                                                                        l4792 007E  
                                                                        l3994 239E  
                                                                        l3978 236A  
                                                                        l3986 238C  
                                                                        l4946 0284  
                                                                        l4948 028C  
                                                                        l4884 01D2  
                                                                        l4886 01DC  
                                                                        l4888 01E4  
                                                                        l4994 02FC  
                                                                        l4996 0304  
                                                                        STR_3 7DA7  
                                                           _UpdateLedRegister 231C  
                                                                        _LATA 000F89  
                                                                        _LATB 000F8A  
                                                                        u3104 0C4C  
                                                                        u3105 0C46  
                                                                        u3114 0C76  
                                                                        u3050 067C  
                                                                        u3115 0C70  
                                                                        u3204 0DB4  
                                                                        u3124 0C9E  
                                                                        u3060 0696  
                                                                        u3205 0DAE  
                                                                        u3125 0C98  
                                                                        u3310 0E70  
                                                                        u3214 0DDA  
                                                                        u3134 0CBA  
                                                                        u3215 0DD4  
                                                                        u3135 0CB4  
                                                                        u3144 0CDE  
                                                                        u3145 0CD8  
                                                                        u3234 0E06  
                                                                        u5010 0606  
                                                                        u4130 0092  
                                                                        u3235 0E00  
                                                                        u3164 0D0C  
                                                                        u3165 0D06  
                                                                        u3245 179E  
                                                                        u3350 0ED2  
                                                                        u3174 0D34  
                                                                        u3094 0C24  
                                                                        u5030 061A  
                                                                        u4230 0124  
                                                                        u3175 0D2E  
                                                                        u3095 0C1E  
                                                                        u3255 17C0  
                                                                        u3184 0D5E  
                                                                        u2800 1D8C  
                                                                        u3185 0D58  
                                                                        u4161 00BE  
                                                                        u4145 009E  
                                                                        u3514 1472  
                                                                        u3370 0EFA  
                                                                        u3194 0D8C  
                                                                        u4170 00CC  
                                                                        u3515 146C  
                                                                        u3195 0D86  
                                                                        u3524 149E  
                                                                        u3604 1562  
                                                                        u5300 11A0  
                                                                        u3525 1498  
                                                                        u3605 155C  
                                                                        u3470 1016  
                                                                        u3624 1588  
                                                                        u2904 186E  
                                                                        u3625 1580  
                                                                        u2905 1868  
                                                                        u4185 00D8  
                                                                        u3634 15B4  
                                                                        u2914 188E  
                                                                        u3635 15AC  
                                                                        u2915 1888  
                                                                        u4620 03B2  
                                                                        u4540 0326  
                                                                        u4460 02A0  
                                                                        u3494 1456  
                                                                        u2950 210C  
                                                                        u2934 18B6  
                                                                        u3495 144E  
                                                                        u2935 18AE  
                                                                        u3584 1D02  
                                                                        u2944 18DE  
                                                                        u3585 1CFA  
                                                                        u2945 18D6  
                                                                        u3594 1D2E  
                                                                        u2970 2128  
                                                                        u2874 182A  
                                                                        u3595 1D26  
                                                                        u2875 1824  
                                                                        u2884 184A  
                                                                        _RCIF 007CF5  
                                                                        u5357 23EC  
                                                                        u2885 1844  
                                                                        u4910 056A  
                                                                        u4830 04F2  
                                                                        u4750 047A  
                                                                        u4670 0402  
                                                                        u2968 2110  
                                                                        u2988 212C  
                                                                        u4955 05A0  
                                                                        i2l86 1E24  
                                                                        i2l87 1E8A  
                                                                        i2l88 1E56  
                                                                        i2l97 1E5E  
                                                                        u4995 05DE  
                                                      ??_ModbusGetLastCommand 0007  
                                                                        _TRMT 007D61  
                                                                        _WREN 007D32  
                                               ModbusValidateRequest@u16count 0021  
                                                          ?_UpdateLedRegister 0001  
                                                                        _main 1058  
                                                                        fsr1h 000FE2  
                                                                        fsr2h 000FDA  
                                                                        indf1 000FE7  
                                                                        fsr1l 000FE1  
                                                                        indf2 000FDF  
                                                                        fsr2l 000FD9  
                                                                        btemp 007A  
                                                                        prodh 000FF4  
                                                                        prodl 000FF3  
                                                                        start 002C  
                                                             __end_of_GetTime 25C6  
                                                                ___param_bank 000010  
                                                         ??_UpdateLedRegister 0005  
                                                              ?_years_to_days 000C  
                                                             __end_of_InitApp 1FA6  
                                                                  __6sCounter 00C0  
                                                            ?_SetTimeFromRegs 0043  
                                                             __end_of_SetTime 2542  
                                                                       ?_main 0001  
                                                      __size_of_ymd_to_scalar 00A4  
                                                                       _EEADR 000FA9  
                                                                       _CARRY 007EC0  
                                                             __end_of___lwdiv 21AC  
                                                             __end_of___lwmod 22D6  
                                                  __end_of_ModbusSendTxBuffer 2244  
                                                                       _RCREG 000FAE  
                                                                       _RCSTA 000FAB  
                                                                       _TMR0H 000FD7  
                                                                       _TMR1H 000FCF  
                                                                       _TMR0L 000FD6  
                                                                       _TMR1L 000FCE  
                                                                       _SPBRG 000FAF  
                                                                       _TRISB 000F93  
                                                                  _IsBusserOn 00BE  
                                                                       _TXREG 000FAD  
                                                                       _TXSTA 000FAC  
                                                         _ConfigureOscillator 25CE  
                                                 ModbusProcess_FC3@u8StartAdd 001E  
                                                               __CFG_WRT0$OFF 000000  
                                                               __CFG_WRT1$OFF 000000  
                                                               __CFG_WRT2$OFF 000000  
                                                               __CFG_WRT3$OFF 000000  
                                                              __CFG_EBTR0$OFF 000000  
                                                              __CFG_EBTR1$OFF 000000  
                                                              __CFG_EBTR2$OFF 000000  
                                                              __CFG_EBTR3$OFF 000000  
                                                              _InitFromEeprom 1706  
                                                              ?_LoadNextEvent 0001  
                                                          ProcessDiary@minute 0012  
                                                                  Modbus@u8id 000C  
                                                                       __u8id 00C3  
                                                               __CFG_WRTB$OFF 000000  
                                                               __CFG_WRTC$OFF 000000  
                                                               __CFG_WRTD$OFF 000000  
                                                   __end_of_UpdateLedRegister 2362  
                                                  ModbusBuildException@u8func 0006  
                                                              __CFG_EBTRB$OFF 000000  
                                                             __end_of_io_poll 065E  
                                                             __end_of_low_isr 002C  
                                                          __size_of_AddSecond 0010  
                                                                       tablat 000FF5  
                                                            ymd_to_scalar@day 0020  
                                                              _UartBufferHead 00BF  
                                                              _UartBufferTail 0070  
                                                                       plusw2 000FDB  
                                                   ModbusProcess_FC1@u8bitsno 0022  
                                                                       status 000FD8  
                                                             years_to_days@yr 000C  
                                                  __size_of_ProcessLightBlock 0272  
                                                        ?_ConfigureOscillator 0001  
                                                __end_of_ModbusBuildException 2524  
                                                             __initialization 1FA6  
                                                                __end_of_main 1262  
                                                            __end_of_LightLed 0E32  
                                           ModbusProcess_FC5@u8CopyBufferSize 0019  
                                                  ModbusProcess_FC1@u16Coilno 0023  
                                                                      ??_main 00D9  
                                                             ResetEvent@state 000F  
                                                               __activetblptr 000002  
                                                      __end_of_InitFromEeprom 1806  
                                                                  _ModbusInit 258C  
                                                                  _ModbusPoll 1262  
                                                            __end_of_PortRead 245A  
                                                              _InitUartBuffer 25B0  
                                                      __size_of_ModbusCalcCRC 0074  
                                          ModbusProcess_FC16@u8CopyBufferSize 001D  
                                                    ModbusSendTxBuffer@u16crc 0012  
                                                                      _EEDATA 000FA8  
                                                                      _CCPR1L 000FBE  
                                                                      _EECON2 000FA7  
                                                                  _SetHourMin 2542  
                                                    SetTimeFromRegs@yearMonth 0044  
                                                              _LightStatusLed 1806  
                                                                      i2l5338 1E4C  
                                                                      i2l5356 1E84  
                                                                      i2l5358 1E86  
                                                               _ymd_to_scalar 1D60  
                                                                   ??_GetTime 0007  
                                                           LightStatusLed@row 000C  
                                                                  _ResetEvent 23A6  
                                                               main@oldMinute 00E6  
                                            ModbusProcess_FC15@u16currentCoil 0022  
                                                                   ??_InitApp 0005  
                                                       ??_ConfigureOscillator 0005  
                                                             _currentLedBlock 00CC  
                                                             ??_years_to_days 0010  
                                                                      _Modbus 2578  
                                                                   ??_SetTime 0005  
                                                            __end_of_high_isr 1E9A  
                                                              _UartRingBuffer 0200  
                                                                __lastAddress 00B6  
                                                  ModbusProcess_FC3@u16regsno 001C  
                                                    ModbusProcess_FC16@u8size 0016  
                                                                   ??___lwdiv 0009  
                                                                   ??___lwmod 0009  
                                                                      _isleap 21AC  
                                                                      _millis 24B4  
                                                                      clear_0 1FAE  
                                                                      clear_1 1FC0  
                                                                      clear_2 1FCC  
                                                                      clear_3 1FD8  
                                                           __end_of_AddSecond 25B0  
                                                                      _mktime 065E  
                                                                __lastCommand 00D8  
                                                       __end_of_PortAvailable 25CE  
                                                                  __au8Buffer 0100  
                                                          __size_of_PortBegin 001A  
                                                                   ??_io_poll 005E  
                                                             ?_InitFromEeprom 0001  
                                                             ??_LoadNextEvent 0007  
                                                                __pdataCOMRAM 0077  
                                                      __end_of_InitUartBuffer 25BE  
                                                                __MODBUSCoils 00D6  
                                                                  PortWrite@i 0008  
                                                          __size_of_PortWrite 003E  
                                                                __mediumconst 7D9C  
                                             ModbusBuildException@u8exception 0005  
                                                                   ??_low_isr 0004  
                                                                      tblptrh 000FF7  
                                                                      tblptrl 000FF6  
                                                                      tblptru 000FF8  
                                                  __size_of_UpdateLedRegister 0046  
                                                            __end_of_pwm_init 0000  
                                                      __end_of_LightStatusLed 18FC  
                                                  ModbusProcess_FC1@u8bytesno 001D  
                                                            years_to_days@ret 0018  
                                                    ModbusProcess_FC1@u16coil 0019  
                                                              ?_ymd_to_scalar 001C  
                                                                  __u8lastRec 00C4  
                                                                  __accesstop 0080  
                                                     __end_of__initialization 201C  
                                                  __end_of_ModbusProcess_FC21 1CB8  
                                                  __end_of_ModbusProcess_FC15 1604  
                                                  __end_of_ModbusProcess_FC16 19CC  
                                                  __end_of_ModbusProcess_FC17 228E  
                                                             Modbus@u8txenpin 000B  
                                                            io_poll@yearMonth 0066  
                                                               ___rparam_used 000001  
                                                    ModbusProcess_FC5@u16coil 001A  
                                              __size_of_ModbusValidateRequest 0226  
                                           ModbusProcess_FC21@startAddrsBytes 0018  
                                               __end_of_ModbusValidateRequest 1058  
                                         ModbusValidateRequest@startAddrBytes 0016  
                                                              __pcstackCOMRAM 0001  
                                                               _ModbusCalcCRC 202A  
                                                                __pidataBANK0 25D4  
                                                        __end_of_fctsupported 7DA7  
                                               ModbusProcess_FC16@u16StartAdd 001E  
                                                           ?_SwitchOffAllLeds 0001  
                                                                 ?_ModbusInit 0005  
                                                                 ?_ModbusPoll 0027  
                                                             ?_InitUartBuffer 0001  
                                                     __size_of_months_to_days 0046  
                                                        _ModbusBuildException 2504  
                                                          ??_SwitchOffAllLeds 0005  
                                                                  __lastCount 00B8  
                                                             ?_LightStatusLed 0005  
                                                              io_poll@hourMin 0062  
                                                                 ?_SetHourMin 0005  
                                                                  __pbssBANK0 0080  
                                                                  __pbssBANK1 0100  
                                                                  __pbssBANK2 0200  
                                           ModbusProcess_FC6@u8CopyBufferSize 001B  
                                                                   ?_LightLed 0005  
                                                      __size_of_SetBuzzerDuty 0058  
                                                                 ?_ResetEvent 0001  
                                                           __end_of_PortBegin 2578  
                                                                     ?_Modbus 000A  
                                                           __end_of_PortWrite 2424  
                                                              ?_ModbusCalcCRC 0005  
                                                             PortWrite@buflen 0007  
                                                                   ?_PortRead 0001  
                                                            _buzzerInfoPeriod 00C7  
                                          ModbusProcess_FC17@u8CopyBufferSize 0014  
                                                       _millisecondsFromStart 00AC  
                                                              SetTime@newTime 0005  
                                                                  _getHourMin 2488  
                                                                     ?_isleap 000A  
                                                                     ?_millis 0005  
                                                                     ?_mktime 002C  
                                            ModbusProcess_FC21@requestDataLen 0016  
                                                               LightLed@blink 0006  
                                                       ?_ModbusBuildException 0001  
                                                             ??_ymd_to_scalar 0022  
                                                             LoadNextEvent@v1 0009  
                                                                   ?_high_isr 0001  
                                                              _oldBlinkOnTime 00B0  
                                              ModbusGetRxBuffer@bBuffOverflow 0007  
                                                                  ??_LightLed 0007  
                                                          _ModbusSendTxBuffer 21F8  
                                                                     _GetTime 25BE  
                                               __size_of_ModbusGetLastCommand 002E  
                                                             __inputRegsCount 00C2  
                                                                     _InitApp 1F20  
                                                         LightLed@statusShift 000C  
                                                                     __Hparam 0000  
                                                                     _SetTime 2524  
                                                                     __Lparam 0000  
                                                         __size_of_ModbusInit 0014  
                                                         ?_ModbusSendTxBuffer 0001  
                                                         __size_of_ModbusPoll 0160  
                                                             __size_of_Modbus 0014  
                                                                  _eventCount 0075  
                                                               ?_ProcessDiary 0001  
                                                                  ??_PortRead 0005  
                                                                   ?_pwm_init 0001  
                                                                     ___lwdiv 2158  
                                                                     ___lwmod 228E  
                                                             SetBuzzerDuty@dc 0005  
                                             ModbusProcess_FC1@u16currentCoil 0020  
                                                         __size_of_SetHourMin 001C  
                                                                     __pcinit 1FA6  
                                                             __size_of_isleap 004C  
                                                               _SetBuzzerDuty 2100  
                                                             __size_of_millis 002A  
                                                                     __ramtop 0600  
                                                                     _blinkOn 0072  
                                                             __size_of_mktime 0312  
                                                                     __ptext0 1058  
                                                                     __ptext1 0000  
                                                                     __ptext2 0030  
                                                                     __ptext3 19CC  
                                                                     __ptext4 065E  
                                                                     __ptext5 1D60  
                                                                     __ptext6 1604  
                                                                     __ptext7 22D6  
                                                                     __ptext8 2158  
                                                                     __ptext9 21AC  
                                                                   _T0CONbits 000FD5  
                                                                   _T1CONbits 000FCD  
                                                                 PortRead@ret 0005  
                                                                     _io_poll 0030  
                                                                   _T2CONbits 000FCA  
                                                           SetHourMin@newHour 0006  
                                                         __size_of_ResetEvent 0040  
                                                    __size_of_SetTimeFromRegs 00C2  
                                                               mktime@timeptr 0042  
                                                        ??_ModbusSendTxBuffer 0012  
                                                                     _low_isr 0018  
                                                             ModbusPoll@coils 0029  
                                                                  ??_high_isr 0001  
                                                              __pintcode_body 1E04  
                                                        end_of_initialization 201C  
                                                               __Lmediumconst 7D9C  
                                                                     int_func 1E04  
                                                   UpdateLedRegister@regIndex 0005  
                                                             ??_ModbusCalcCRC 0007  
                                                              ??_ProcessDiary 000D  
                                                         LightLed@ststusIndex 000B  
                                                                   _RCSTAbits 000FAB  
                                                                     postdec1 000FE5  
                                                                     postdec2 000FDD  
                                                                     postinc0 000FEE  
                                                                     postinc1 000FE6  
                                                                     postinc2 000FDE  
                                               ModbusProcess_FC1@u8currentBit 001B  
                                                         ModbusProcess_FC21@i 001C  
                                                         ModbusProcess_FC16@i 0021  
                                                         ModbusProcess_FC17@i 0015  
                                                                  ??_pwm_init 0005  
                                                           SwitchOffAllLeds@i 0005  
                                                            ??_InitFromEeprom 000D  
                                                                 ?_getHourMin 0005  
                                                              ?_SetBuzzerDuty 0005  
                                           ModbusProcess_FC1@u8CopyBufferSize 001C  
                                                                   _PORTCbits 000F82  
                                                                _curEventHour 00C9  
                                                      ??_ModbusBuildException 0005  
                                                                _curEventType 00CB  
                                                           ModbusInit@u8serno 0005  
                                                                   _AddSecond 25A0  
                                                              _months_to_days 22D6  
                                                           _ModbusGetRxBuffer 2362  
                                                                   _TRISAbits 000F92  
                                                                   _TRISCbits 000F94  
                                                 ModbusProcess_FC15@u16Coilno 0020  
                                                           LoadNextEvent@hour 000A  
                                                          ?_ModbusGetRxBuffer 0001  
                                                 __end_of_ConfigureOscillator 25D4  
                                                       SetTimeFromRegs@daySec 0043  
                                                                _fctsupported 7D9D  
                                                                 _CCP1CONbits 000FBD  
                                               ModbusProcess_FC15@u8frameByte 001D  
                                                         ??_ModbusGetRxBuffer 0006  
                                                                   _TXSTAbits 000FAC  
                                                                  main@lastMs 00DE  
                                                ModbusValidateRequest@u16regs 0025  
                                                                  main@minute 00EC  
                                                           _buzzerAlarmPeriod 0074  
                                                   ModbusGetLastCommand@count 0005  
                                                          _buzzeQuietDuration 00C6  
                                                       __end_of_years_to_days 1706  
                                                              __end_of_Modbus 258C  
                                                            ??_InitUartBuffer 0005  
                                                          _ModbusProcess_FC21 1C06  
                                                          _ModbusProcess_FC15 14F4  
                                                          _ModbusProcess_FC16 18FC  
                                                          _ModbusProcess_FC17 2244  
                                                               __pidataCOMRAM 25D8  
                                                    ModbusPoll@discreteInputs 0027  
                                                              __end_of_isleap 21F8  
                                                              __end_of_millis 24DE  
                                                      __end_of_months_to_days 231C  
                                                   __end_of_ModbusGetRxBuffer 23A6  
                                                              __end_of_mktime 0970  
                                                            ??_LightStatusLed 0007  
                                                             ymd_to_scalar@mo 001E  
                                                               _UartBufferLen 006F  
                                                             ymd_to_scalar@yr 001C  
                                                                ??_ModbusInit 0007  
                                                                ??_ModbusPoll 0030  
                                                                  ?_AddSecond 0001  
                                                         start_initialization 1FA6  
                                                         ?_ModbusProcess_FC21 0001  
                                                         ?_ModbusProcess_FC15 0001  
                                                         ?_ModbusProcess_FC16 0014  
                                                         ?_ModbusProcess_FC17 0001  
                                                       __end_of_LoadNextEvent 1F20  
                                                                ??_SetHourMin 0006  
                                                           ??_SetTimeFromRegs 0045  
                                                         __size_of_getHourMin 002C  
                                                                ??_ResetEvent 000D  
                                                   __size_of_SwitchOffAllLeds 0026  
                                                      __size_of_PortAvailable 0008  
                                                           __size_of_LightLed 0250  
                                                            LightStatusLed@on 0005  
                                                              getHourMin@hour 0006  
                                                        ??_ModbusProcess_FC21 0014  
                                                        ??_ModbusProcess_FC15 0014  
                                                        ??_ModbusProcess_FC16 0017  
                                                        ??_ModbusProcess_FC17 0014  
                                                                    ??_Modbus 000C  
                                                     ModbusProcess_FC15@bTemp 001C  
                                                          __end_of_ModbusInit 25A0  
                                                          __end_of_ModbusPoll 13C2  
                                                                   _PortBegin 255E  
                                                             ??_SetBuzzerDuty 0007  
                                                       _ModbusValidateRequest 0E32  
                                                                 __pdataBANK0 00ED  
                                                                   _PortWrite 23E6  
                                                           __size_of_PortRead 0036  
                                                                    ??_isleap 000C  
                                                                    ??_millis 0009  
                                                                    ??_mktime 0030  
                                                          __end_of_SetHourMin 255E  
                                                           __holdingRegsCount 00C1  
                                                             ?_months_to_days 000C  
                                                              ModbusCalcCRC@i 000E  
                                                              ModbusCalcCRC@j 000F  
                                               ModbusProcess_FC21@recLenBytes 001A  
                                                                 __pbssCOMRAM 006F  
                                                          __end_of_ResetEvent 23E6  
                                                               __pcstackBANK0 00D9  
                                                     ModbusProcess_FC6@u16add 001C  
                                                     ModbusProcess_FC6@u16val 0019  
                                                        __end_of_ProcessDiary 1B4C  
                                                     ModbusProcess_FC3@u8size 0016  
                                                     ModbusProcess_FC6@u8size 0016  
                                                               io_poll@daySec 0064  
                                                           __size_of_high_isr 1E92  
                                                                    ?_GetTime 0005  
                                                                    ?_InitApp 0001  
                                                                    ?_SetTime 0001  
                                                            ___lwdiv@dividend 0005  
                                              ModbusProcess_FC15@u8currentBit 0024  
                                              ModbusValidateRequest@u16MsgCRC 001E  
                                                                   __pintcode 0008  
                                                                  ?_PortBegin 0001  
                                                               __pmediumconst 7D9C  
                                          ModbusProcess_FC21@u8CopyBufferSize 0017  
                                                           _buzzerOnOffPeriod 00EF  
                                                                _nightEndHour 00D0  
                                                                    ?___lwdiv 0005  
                                                                    ?___lwmod 0005  
                                                                 _blinkPeriod 00BC  
                                                                  ?_PortWrite 0005  
                                                                 __pintcodelo 0018  
                                                         _buzzerOnOffDuration 00ED  
                                                __end_of_ModbusGetLastCommand 2488  
                                                           __size_of_pwm_init 0000  
                                                              ModbusInit@u8id 0009  
                                                    ModbusPoll@inputRegsCount 002C  
                                                  __size_of_ModbusGetRxBuffer 0044  
                                                 ModbusGetLastCommand@address 0007  
                                                               _PortAvailable 25C6  
                                                            __MODBUSInputRegs 01AA  
                                                                    ?_io_poll 0001  
                                                               __u8BufferSize 0071  
                                                                 ??_AddSecond 0005  
                                                          __MODBUSHoldingRegs 018C  
                                                                    ?_low_isr 0001  
                                                               _blinkDuration 00BA  
                                                       io_poll@lastEndAddress 006B  
                                                            ___lwdiv@quotient 0009  
                                                            SetHourMin@newMin 0005  
                                                       __end_of_ymd_to_scalar 1E04  
                                                      ModbusValidateRequest@i 0023  
                                                                    _LATAbits 000F89  
                                                                    _LATCbits 000F8B  
                                                             _eventAcceptTime 00CE  
                                                              LightLed@ledNum 000A  
                                                                    _IPR1bits 000F9F  
                                                                    _PIE1bits 000F9D  
                                                           ModbusPoll@i8state 0031  
                                                                    _PIR1bits 000F9E  
                                                                 _ledStatuses 0090  
                                                                    _RCONbits 000FD0  
                                                      ?_ModbusValidateRequest 0001  
                                                          ModbusProcess_FC3@i 001F  
                                                       ModbusCalcCRC@u8length 000D  
                                                         LightStatusLed@blink 0006  
                                                                ??_getHourMin 0006  
                                                                 _curEventNum 0077  
                                                              ?_PortAvailable 0001  
                                                           _buzzeEscaladeTime 00C5  
                                                                   high_isr@c 0003  
                                                                    InitApp@i 0005  
                                                                 _globalHours 0078  
                                                                   main@curMs 00E8  
                                                 __size_of_ModbusSendTxBuffer 004C  
                                                           _ModbusProcess_FC1 13C2  
                                                           _ModbusProcess_FC3 1B4C  
                                                           _ModbusProcess_FC5 1CB8  
                                                           _ModbusProcess_FC6 209E  
                                                                 _INTCON2bits 000FF1  
                                                                   copy_data0 1FF2  
                                                              _nightStartHour 00D1  
                                                          ?_ModbusProcess_FC1 0014  
                                                          ?_ModbusProcess_FC3 0014  
                                                          ?_ModbusProcess_FC5 0001  
                                                          ?_ModbusProcess_FC6 0014  
                                                                    _LightLed 0BE2  
                                                          __end_of_getHourMin 24B4  
                                                       ModbusPoll@u8exception 0032  
                                                            _SwitchOffAllLeds 24DE  
                                                            __size_of_GetTime 0008  
                                                                   io_poll@v1 0069  
                                                            __size_of_InitApp 0086  
                                                                    __Hrparam 0000  
                                                                    __u32time 00A0  
                                                               getHourMin@min 0005  
                                                         ??_ModbusProcess_FC1 0016  
                                                         ??_ModbusProcess_FC3 0017  
                                                         ??_ModbusProcess_FC5 0014  
                                                         ??_ModbusProcess_FC6 0017  
                                                       __end_of_ModbusCalcCRC 209E  
                                                                    __Lrparam 0000  
                                                            __size_of_SetTime 001E  
                                                                 ??_PortBegin 0005  
                                                      ModbusProcess_FC15@regs 0025  
                                                                    _PortRead 2424  
                                                      ModbusProcess_FC16@regs 0014  
                                                      ModbusProcess_FC16@temp 001B  
                                                            _eventResetSecond 00A8  
                                                                 ??_PortWrite 0008  
                                                               Modbus@u8serno 000A  
                                                                 _oldEventNum 0079  
                                                            __size_of___lwdiv 0054  
                                                            __size_of___lwmod 0048  
                                           ModbusProcess_FC3@u8CopyBufferSize 001B  
                                                                   millis@ret 0009  
                                               ModbusProcess_FC1@u16StartCoil 001E  
                                                       __size_of_ProcessDiary 00BE  
                                                                 _isleap$2109 000D  
                                                             _SetTimeFromRegs 19CC  
                                                                 _currentTime 00D2  
                                                            __size_of_io_poll 062E  
                                                                    _diffTime 00A4  
                                                   __end_of_ModbusProcess_FC1 14F4  
                                                   __end_of_ModbusProcess_FC3 1C06  
                                                   __end_of_ModbusProcess_FC5 1D60  
                                                   __end_of_ModbusProcess_FC6 2100  
                                               __size_of_ModbusBuildException 0020  
                                                             ___lwdiv@divisor 0007  
                                                          io_poll@lastAddress 006D  
                                                             ___lwdiv@counter 000B  
                                                                    _ledBlink 0080  
                                                            __size_of_low_isr 0014  
                                                                    __ptext10 228E  
                                                                    __ptext11 2524  
                                                                    __ptext20 0970  
                                                                    __ptext12 2542  
                                                                    __ptext21 231C  
                                                                    __ptext13 1806  
                                                                    __ptext30 209E  
                                                                    __ptext22 1A8E  
                                                                    __ptext14 245A  
                                                                    __ptext31 1CB8  
                                                                    __ptext23 24DE  
                                                                    __ptext15 1706  
                                                                    __ptext40 23E6  
                                                                    __ptext32 1B4C  
                                                                    __ptext24 1E9A  
                                                                    __ptext16 2100  
                                                                    __ptext41 202A  
                                                                    __ptext33 1C06  
                                                                    __ptext25 2488  
                                                                    __ptext17 2578  
                                                                    __ptext50 25A0  
                                                                    __ptext42 2362  
                                                                    __ptext34 2244  
                                                                    __ptext26 0BE2  
                                                                    __ptext18 258C  
                                                                    __ptext43 2424  
                                                                    __ptext35 18FC  
                                                                    __ptext27 25BE  
                                                                    __ptext19 23A6  
                                                                    __ptext44 25C6  
                                                                    __ptext36 14F4  
                                                                    __ptext28 1262  
                                                                    __ptext45 2504  
                                                                    __ptext37 13C2  
                                                                    __ptext29 0E32  
                                                                    __ptext46 1F20  
                                                                    __ptext38 21F8  
                                                                    __ptext47 255E  
                                                                    __ptext39 24B4  
                                                                    __ptext48 25B0  
                                                                    __ptext49 25CE  
                                                                    _high_isr 0008  
                                                          io_poll@lastCommand 006A  
                                                          io_poll@eventEeAddr 0068  
                                                               __size_of_main 020A  
                                                        _ModbusGetLastCommand 245A  
                                                __size_of_ConfigureOscillator 0006  
                                                                _ProcessDiary 1A8E  
                                                   SetTimeFromRegs@newRawTime 0047  
                                                                    int$flags 007A  
                                                            ??_months_to_days 000E  
                                                                    _pwm_init 0000  
                                                             ??_PortAvailable 0005  
                                                                    main@hour 00E7  
                                                            LightLed@ledState 0005  
                                                          _ymd_to_scalar$2122 0026  
                                                                  _INTCONbits 000FF2  
                                                             _eveningTimeHour 00CD  
                                                     __size_of_InitFromEeprom 0100  
                                                      ProcessLightBlock@curMs 000A  
                                                      __size_of_years_to_days 0102  
                                                                    isleap@yr 000A  
                                                       ModbusProcess_FC1@regs 0014  
                                                       ModbusProcess_FC3@regs 0014  
                                                                    intlevel1 25DC  
                                                                    intlevel2 25DC  
                                                       ModbusProcess_FC5@regs 001D  
                                                       ModbusProcess_FC6@regs 0014  
                                                                PortWrite@buf 0005  
                                                            ___lwmod@dividend 0005  
                                                       ?_ModbusGetLastCommand 0005  
                                                                    mktime@tt 003E  
                                                         ymd_to_scalar@scalar 0028  
                                                 __size_of_ModbusProcess_FC21 00B2  
                                                 __size_of_ModbusProcess_FC15 0110  
                                                 __size_of_ModbusProcess_FC16 00D0  
                                                 __size_of_ModbusProcess_FC17 004A  
                                                           _ProcessLightBlock 0970  
                                                       __MODBUSDiscreteInputs 00B4  
                                                      __size_of_LoadNextEvent 0086  
                                                          ?_ProcessLightBlock 0001  
                                                     __end_of_SetTimeFromRegs 1A8E  
                                                       __end_of_SetBuzzerDuty 2158  
                                                         ModbusPoll@u8current 0030  
                                                         ??_ProcessLightBlock 0006  
                                                             ___lwmod@divisor 0007  
                                                             ___lwmod@counter 0009  
                                                      _buzzerStartDurationDiv 00C8  
                                                              _curEventMinute 00CA  
                                                  __size_of_ModbusProcess_FC1 0132  
                                                  __size_of_ModbusProcess_FC3 00BA  
                                                  __size_of_ModbusProcess_FC5 00A8  
                                                  __size_of_ModbusProcess_FC6 0062  
                                                     __size_of_InitUartBuffer 000E  
                                                          ModbusCalcCRC@temp2 0009  
                                                 ModbusValidateRequest@u8regs 0024  
                                                   ModbusProcess_FC15@u16coil 0019  
                                                     __size_of_LightStatusLed 00F6  
                                                         ModbusInit@u8txenpin 0006  
                                                           ModbusCalcCRC@flag 000B  
                                                           ModbusCalcCRC@temp 0010  
                                                   __end_of_ProcessLightBlock 0BE2  
                                                     ??_ModbusValidateRequest 0012  
                                                  ModbusPoll@holdingRegsCount 002F  
                                                  ModbusProcess_FC15@u8bitsno 0026  
                                                             _morningTimeHour 00CF  
