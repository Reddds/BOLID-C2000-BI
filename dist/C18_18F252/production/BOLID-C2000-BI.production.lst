

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Wed May 18 20:12:53 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	eeprom_data
    84  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    85  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    86  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    87  0000                     
    88                           	psect	idataCOMRAM
    89  002B96                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _curEventNum
    93  002B96  FF                 	db	255
    94                           
    95                           ;initializer for _currentAlarmedEventNum
    96  002B97  FF                 	db	255
    97                           
    98                           ;initializer for _globalHours
    99  002B98  FF                 	db	255
   100                           
   101                           	psect	smallconst
   102  000600                     __psmallconst:
   103                           	opt stack 0
   104  000600  00                 	db	0
   105  000601                     _fctsupported:
   106                           	opt stack 0
   107  000601  01                 	db	1
   108  000602  02                 	db	2
   109  000603  03                 	db	3
   110  000604  04                 	db	4
   111  000605  05                 	db	5
   112  000606  06                 	db	6
   113  000607  07                 	db	7
   114  000608  0F                 	db	15
   115  000609  10                 	db	16
   116  00060A  11                 	db	17
   117  00060B  15                 	db	21
   118  00060C  2B                 	db	43
   119  00060D                     __end_of_fctsupported:
   120                           	opt stack 0
   121  0000                     _CCP1CONbits	set	4029
   122  0000                     _CCPR1L	set	4030
   123  0000                     _EEADR	set	4009
   124  0000                     _EECON2	set	4007
   125  0000                     _EEDATA	set	4008
   126  0000                     _INTCON2bits	set	4081
   127  0000                     _INTCONbits	set	4082
   128  0000                     _IPR1bits	set	3999
   129  0000                     _LATA	set	3977
   130  0000                     _LATAbits	set	3977
   131  0000                     _LATB	set	3978
   132  0000                     _LATCbits	set	3979
   133  0000                     _PIE1bits	set	3997
   134  0000                     _PIR1bits	set	3998
   135  0000                     _PORTCbits	set	3970
   136  0000                     _PR2	set	4043
   137  0000                     _RCONbits	set	4048
   138  0000                     _RCREG	set	4014
   139  0000                     _RCSTA	set	4011
   140  0000                     _RCSTAbits	set	4011
   141  0000                     _SPBRG	set	4015
   142  0000                     _T0CONbits	set	4053
   143  0000                     _T1CONbits	set	4045
   144  0000                     _T2CONbits	set	4042
   145  0000                     _TMR0H	set	4055
   146  0000                     _TMR0L	set	4054
   147  0000                     _TMR1H	set	4047
   148  0000                     _TMR1L	set	4046
   149  0000                     _TRISAbits	set	3986
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISCbits	set	3988
   152  0000                     _TXREG	set	4013
   153  0000                     _TXSTA	set	4012
   154  0000                     _TXSTAbits	set	4012
   155  0000                     _CARRY	set	32448
   156  0000                     _GIE	set	32663
   157  0000                     _RCIF	set	31989
   158  0000                     _RD	set	32048
   159  0000                     _TRMT	set	32097
   160  0000                     _WR	set	32049
   161  0000                     _WREN	set	32050
   162  00060D                     STR_3:
   163  00060D  54                 	db	84	;'T'
   164  00060E  61                 	db	97	;'a'
   165  00060F  62                 	db	98	;'b'
   166  000610  6C                 	db	108	;'l'
   167  000611  6F                 	db	111	;'o'
   168  000612  20                 	db	32
   169  000613  73                 	db	115	;'s'
   170  000614  20                 	db	32
   171  000615  72                 	db	114	;'r'
   172  000616  61                 	db	97	;'a'
   173  000617  73                 	db	115	;'s'
   174  000618  70                 	db	112	;'p'
   175  000619  69                 	db	105	;'i'
   176  00061A  73                 	db	115	;'s'
   177  00061B  61                 	db	97	;'a'
   178  00061C  6E                 	db	110	;'n'
   179  00061D  69                 	db	105	;'i'
   180  00061E  65                 	db	101	;'e'
   181  00061F  6D                 	db	109	;'m'
   182  000620  20                 	db	32
   183  000621  74                 	db	116	;'t'
   184  000622  75                 	db	117	;'u'
   185  000623  72                 	db	114	;'r'
   186  000624  6F                 	db	111	;'o'
   187  000625  00                 	db	0
   188  000626                     STR_12:
   189  000626  54                 	db	84	;'T'
   190  000627  61                 	db	97	;'a'
   191  000628  62                 	db	98	;'b'
   192  000629  6C                 	db	108	;'l'
   193  00062A  6F                 	db	111	;'o'
   194  00062B  20                 	db	32
   195  00062C  73                 	db	115	;'s'
   196  00062D  20                 	db	32
   197  00062E  72                 	db	114	;'r'
   198  00062F  61                 	db	97	;'a'
   199  000630  73                 	db	115	;'s'
   200  000631  70                 	db	112	;'p'
   201  000632  69                 	db	105	;'i'
   202  000633  73                 	db	115	;'s'
   203  000634  61                 	db	97	;'a'
   204  000635  6E                 	db	110	;'n'
   205  000636  69                 	db	105	;'i'
   206  000637  65                 	db	101	;'e'
   207  000638  6D                 	db	109	;'m'
   208  000639  00                 	db	0
   209  00063A                     STR_10:
   210  00063A  68                 	db	104	;'h'
   211  00063B  74                 	db	116	;'t'
   212  00063C  74                 	db	116	;'t'
   213  00063D  70                 	db	112	;'p'
   214  00063E  3A                 	db	58	;':'
   215  00063F  2F                 	db	47
   216  000640  2F                 	db	47
   217  000641  62                 	db	98	;'b'
   218  000642  6F                 	db	111	;'o'
   219  000643  6C                 	db	108	;'l'
   220  000644  69                 	db	105	;'i'
   221  000645  64                 	db	100	;'d'
   222  000646  2E                 	db	46
   223  000647  72                 	db	114	;'r'
   224  000648  75                 	db	117	;'u'
   225  000649  00                 	db	0
   226  00064A                     STR_16:
   227  00064A  52                 	db	82	;'R'
   228  00064B  61                 	db	97	;'a'
   229  00064C  73                 	db	115	;'s'
   230  00064D  70                 	db	112	;'p'
   231  00064E  69                 	db	105	;'i'
   232  00064F  73                 	db	115	;'s'
   233  000650  61                 	db	97	;'a'
   234  000651  6E                 	db	110	;'n'
   235  000652  69                 	db	105	;'i'
   236  000653  65                 	db	101	;'e'
   237  000654  00                 	db	0
   238  000655                     STR_6:
   239  000655  43                 	db	67	;'C'
   240  000656  32                 	db	50	;'2'
   241  000657  30                 	db	48	;'0'
   242  000658  30                 	db	48	;'0'
   243  000659  30                 	db	48	;'0'
   244  00065A  2D                 	db	45
   245  00065B  42                 	db	66	;'B'
   246  00065C  49                 	db	73	;'I'
   247  00065D  00                 	db	0
   248  00065E                     STR_4:
   249  00065E  42                 	db	66	;'B'
   250  00065F  4F                 	db	79	;'O'
   251  000660  4C                 	db	76	;'L'
   252  000661  49                 	db	73	;'I'
   253  000662  44                 	db	68	;'D'
   254  000663  00                 	db	0
   255  000664                     STR_8:
   256  000664  31                 	db	49	;'1'
   257  000665  2E                 	db	46
   258  000666  30                 	db	48	;'0'
   259  000667  31                 	db	49	;'1'
   260  000668  00                 	db	0
   261  000669                     STR_14:
   262  000669  4D                 	db	77	;'M'
   263  00066A  4D                 	db	77	;'M'
   264  00066B  4D                 	db	77	;'M'
   265  00066C  00                 	db	0
   266  0000                     
   267                           ; #config settings
   268  00066D  00                 	db	0	; dummy byte at the end
   269  0000                     
   270                           	psect	cinit
   271  0024F6                     __pcinit:
   272                           	opt stack 0
   273  0024F6                     start_initialization:
   274                           	opt stack 0
   275  0024F6                     __initialization:
   276                           	opt stack 0
   277                           
   278                           ; Clear objects allocated to BANK2 (256 bytes)
   279  0024F6  EE02  F000         	lfsr	0,__pbssBANK2
   280  0024FA  EE11 F000          	lfsr	1,256
   281  0024FE                     clear_0:
   282  0024FE  6AEE               	clrf	postinc0,c
   283  002500  50E5               	movf	postdec1,w,c
   284  002502  50E1               	movf	fsr1l,w,c
   285  002504  E1FC               	bnz	clear_0
   286  002506  50E2               	movf	fsr1h,w,c
   287  002508  E1FA               	bnz	clear_0
   288                           
   289                           ; Clear objects allocated to BANK1 (200 bytes)
   290  00250A  EE01  F000         	lfsr	0,__pbssBANK1
   291  00250E  0EC8               	movlw	200
   292  002510                     clear_1:
   293  002510  6AEE               	clrf	postinc0,c
   294  002512  06E8               	decf	wreg,f,c
   295  002514  E1FD               	bnz	clear_1
   296                           
   297                           ; Clear objects allocated to BANK0 (96 bytes)
   298  002516  EE00  F080         	lfsr	0,__pbssBANK0
   299  00251A  0E60               	movlw	96
   300  00251C                     clear_2:
   301  00251C  6AEE               	clrf	postinc0,c
   302  00251E  06E8               	decf	wreg,f,c
   303  002520  E1FD               	bnz	clear_2
   304                           
   305                           ; Clear objects allocated to COMRAM (6 bytes)
   306  002522  6A74               	clrf	(__pbssCOMRAM+5)& (0+255),c
   307  002524  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   308  002526  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   309  002528  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   310  00252A  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   311  00252C  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   312                           
   313                           ; Initialize objects allocated to COMRAM (3 bytes)
   314                           ; load TBLPTR registers with __pidataCOMRAM
   315  00252E  0E96               	movlw	low __pidataCOMRAM
   316  002530  6EF6               	movwf	tblptrl,c
   317  002532  0E2B               	movlw	high __pidataCOMRAM
   318  002534  6EF7               	movwf	tblptrh,c
   319  002536  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   320  002538  6EF8               	movwf	tblptru,c
   321  00253A  0009               	tblrd		*+	;fetch initializer
   322  00253C  CFF5 F075          	movff	tablat,__pdataCOMRAM
   323  002540  0009               	tblrd		*+	;fetch initializer
   324  002542  CFF5 F076          	movff	tablat,__pdataCOMRAM+1
   325  002546  0009               	tblrd		*+	;fetch initializer
   326  002548  CFF5 F077          	movff	tablat,__pdataCOMRAM+2
   327  00254C                     end_of_initialization:
   328                           	opt stack 0
   329  00254C                     __end_of__initialization:
   330                           	opt stack 0
   331  00254C  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   332  00254E  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   333  002550  0E00               	movlw	low (__Lmediumconst shr (0+16))
   334  002552  6EF8               	movwf	tblptru,c
   335  002554  0100               	movlb	0
   336  002556  EFA2  F008         	goto	_main	;jump to C main() function
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           postdec1	equ	0xFE5
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	bssCOMRAM
   348  00006F                     __pbssCOMRAM:
   349                           	opt stack 0
   350  00006F                     _UartBufferTail:
   351                           	opt stack 0
   352  00006F                     	ds	1
   353  000070                     __playingSoundStartPosInEe:
   354                           	opt stack 0
   355  000070                     	ds	1
   356  000071                     __soundCount:
   357                           	opt stack 0
   358  000071                     	ds	1
   359  000072                     __u8BufferSize:
   360                           	opt stack 0
   361  000072                     	ds	1
   362  000073                     _blinkOn:
   363                           	opt stack 0
   364  000073                     	ds	1
   365  000074                     _globalMinutes:
   366                           	opt stack 0
   367  000074                     	ds	1
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1h	equ	0xFE2
   376                           fsr1l	equ	0xFE1
   377                           
   378                           	psect	dataCOMRAM
   379  000075                     __pdataCOMRAM:
   380                           	opt stack 0
   381  000075                     _curEventNum:
   382                           	opt stack 0
   383  000075                     	ds	1
   384  000076                     _currentAlarmedEventNum:
   385                           	opt stack 0
   386  000076                     	ds	1
   387  000077                     _globalHours:
   388                           	opt stack 0
   389  000077                     	ds	1
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           postdec1	equ	0xFE5
   397                           fsr1h	equ	0xFE2
   398                           fsr1l	equ	0xFE1
   399                           
   400                           	psect	bssBANK0
   401  000080                     __pbssBANK0:
   402                           	opt stack 0
   403  000080                     _ledBlink:
   404                           	opt stack 0
   405  000080                     	ds	16
   406  000090                     _ledStatuses:
   407                           	opt stack 0
   408  000090                     	ds	16
   409  0000A0                     __playingEndMs:
   410                           	opt stack 0
   411  0000A0                     	ds	4
   412  0000A4                     __u32time:
   413                           	opt stack 0
   414  0000A4                     	ds	4
   415  0000A8                     _diffTime:
   416                           	opt stack 0
   417  0000A8                     	ds	4
   418  0000AC                     _eventResetSecond:
   419                           	opt stack 0
   420  0000AC                     	ds	4
   421  0000B0                     _millisecondsFromStart:
   422                           	opt stack 0
   423  0000B0                     	ds	4
   424  0000B4                     _oldBlinkOnTime:
   425                           	opt stack 0
   426  0000B4                     	ds	4
   427  0000B8                     _soundTestEnd:
   428                           	opt stack 0
   429  0000B8                     	ds	4
   430  0000BC                     __MODBUSDiscreteInputs:
   431                           	opt stack 0
   432  0000BC                     	ds	2
   433  0000BE                     __lastAddress:
   434                           	opt stack 0
   435  0000BE                     	ds	2
   436  0000C0                     __lastCount:
   437                           	opt stack 0
   438  0000C0                     	ds	2
   439  0000C2                     __nextEventPlayDuration:
   440                           	opt stack 0
   441  0000C2                     	ds	2
   442  0000C4                     _blinkDuration:
   443                           	opt stack 0
   444  0000C4                     	ds	2
   445  0000C6                     _blinkPeriod:
   446                           	opt stack 0
   447  0000C6                     	ds	2
   448  0000C8                     _UartBufferHead:
   449                           	opt stack 0
   450  0000C8                     	ds	1
   451  0000C9                     _UartBufferLen:
   452                           	opt stack 0
   453  0000C9                     	ds	1
   454  0000CA                     __6sCounter:
   455                           	opt stack 0
   456  0000CA                     	ds	1
   457  0000CB                     __exceptionStatus:
   458                           	opt stack 0
   459  0000CB                     	ds	1
   460  0000CC                     __holdingRegsCount:
   461                           	opt stack 0
   462  0000CC                     	ds	1
   463  0000CD                     __inputRegsCount:
   464                           	opt stack 0
   465  0000CD                     	ds	1
   466  0000CE                     __isSoundPlaying:
   467                           	opt stack 0
   468  0000CE                     	ds	1
   469  0000CF                     __nextEventSoundId:
   470                           	opt stack 0
   471  0000CF                     	ds	1
   472  0000D0                     __playingSoundCurPos:
   473                           	opt stack 0
   474  0000D0                     	ds	1
   475  0000D1                     __playingSoundSteps:
   476                           	opt stack 0
   477  0000D1                     	ds	1
   478  0000D2                     __u8id:
   479                           	opt stack 0
   480  0000D2                     	ds	1
   481  0000D3                     __u8lastRec:
   482                           	opt stack 0
   483  0000D3                     	ds	1
   484  0000D4                     _curEventHour:
   485                           	opt stack 0
   486  0000D4                     	ds	1
   487  0000D5                     _curEventMinute:
   488                           	opt stack 0
   489  0000D5                     	ds	1
   490  0000D6                     _currentLedBlock:
   491                           	opt stack 0
   492  0000D6                     	ds	1
   493  0000D7                     _eventAcceptTime:
   494                           	opt stack 0
   495  0000D7                     	ds	1
   496  0000D8                     _eventCount:
   497                           	opt stack 0
   498  0000D8                     	ds	1
   499  0000D9                     _currentTime:
   500                           	opt stack 0
   501  0000D9                     	ds	4
   502  0000DD                     __MODBUSCoils:
   503                           	opt stack 0
   504  0000DD                     	ds	2
   505  0000DF                     __lastCommand:
   506                           	opt stack 0
   507  0000DF                     	ds	1
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           postdec1	equ	0xFE5
   515                           fsr1h	equ	0xFE2
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	bssBANK1
   519  000100                     __pbssBANK1:
   520                           	opt stack 0
   521  000100                     __au8Buffer:
   522                           	opt stack 0
   523  000100                     	ds	140
   524  00018C                     __MODBUSHoldingRegs:
   525                           	opt stack 0
   526  00018C                     	ds	30
   527  0001AA                     __MODBUSInputRegs:
   528                           	opt stack 0
   529  0001AA                     	ds	30
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1h	equ	0xFE2
   538                           fsr1l	equ	0xFE1
   539                           
   540                           	psect	bssBANK2
   541  000200                     __pbssBANK2:
   542                           	opt stack 0
   543  000200                     _UartRingBuffer:
   544                           	opt stack 0
   545  000200                     	ds	256
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1h	equ	0xFE2
   554                           fsr1l	equ	0xFE1
   555                           
   556                           	psect	cstackBANK0
   557  0000E0                     __pcstackBANK0:
   558                           	opt stack 0
   559  0000E0                     io_poll@command:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x0
   563  0000E0                     	ds	1
   564  0000E1                     io_poll@lastEndAddress:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x1
   568  0000E1                     	ds	2
   569  0000E3                     io_poll@v1:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x3
   573  0000E3                     	ds	1
   574  0000E4                     io_poll@lastAddress:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x4
   578  0000E4                     	ds	2
   579  0000E6                     io_poll@lastCommand:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x6
   583  0000E6                     	ds	1
   584  0000E7                     main@lastMs:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x7
   588  0000E7                     	ds	4
   589  0000EB                     main@oldMinute:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0xB
   593  0000EB                     	ds	1
   594  0000EC                     main@hour:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xC
   598  0000EC                     	ds	1
   599  0000ED                     main@curMs:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0xD
   603  0000ED                     	ds	4
   604  0000F1                     main@minute:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x11
   608  0000F1                     	ds	1
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1h	equ	0xFE2
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	cstackCOMRAM
   620  000001                     __pcstackCOMRAM:
   621                           	opt stack 0
   622  000001                     ??_low_isr:
   623  000001                     
   624                           ; 1 bytes @ 0x0
   625  000001                     	ds	5
   626  000006                     low_isr@c:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x5
   630  000006                     	ds	1
   631  000007                     ??_StopPlaying:
   632  000007                     ?_ModbusCalcCRC:
   633                           	opt stack 0
   634  000007                     ?___lwdiv:
   635                           	opt stack 0
   636  000007                     ?___lwmod:
   637                           	opt stack 0
   638  000007                     ?_millis:
   639                           	opt stack 0
   640  000007                     PortRead@ret:
   641                           	opt stack 0
   642  000007                     getHourMin@min:
   643                           	opt stack 0
   644  000007                     SetHourMin@newMin:
   645                           	opt stack 0
   646  000007                     UpdateLedRegister@regIndex:
   647                           	opt stack 0
   648  000007                     SwitchOffAllLeds@i:
   649                           	opt stack 0
   650  000007                     LightLed@ledState:
   651                           	opt stack 0
   652  000007                     LightStatusLed@on:
   653                           	opt stack 0
   654  000007                     InitApp@i:
   655                           	opt stack 0
   656  000007                     SetTime@newTime:
   657                           	opt stack 0
   658  000007                     ModbusSetExceptionStatusBit@value:
   659                           	opt stack 0
   660  000007                     ModbusInit@u8serno:
   661                           	opt stack 0
   662  000007                     ModbusBuildException@u8exception:
   663                           	opt stack 0
   664  000007                     ModbusGetLastCommand@count:
   665                           	opt stack 0
   666  000007                     CopyStringToBuffer@src:
   667                           	opt stack 0
   668  000007                     PortWrite@buf:
   669                           	opt stack 0
   670  000007                     SetBuzzerDuty@dc:
   671                           	opt stack 0
   672  000007                     ___lwdiv@dividend:
   673                           	opt stack 0
   674  000007                     ___lwmod@dividend:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x6
   678  000007                     	ds	1
   679  000008                     ??_ModbusSetExceptionStatusBit:
   680  000008                     ??_ModbusGetRxBuffer:
   681  000008                     ??_ProcessLightBlock:
   682  000008                     getHourMin@hour:
   683                           	opt stack 0
   684  000008                     SetHourMin@newHour:
   685                           	opt stack 0
   686  000008                     LightLed@blink:
   687                           	opt stack 0
   688  000008                     LightStatusLed@blink:
   689                           	opt stack 0
   690  000008                     ModbusInit@u8txenpin:
   691                           	opt stack 0
   692  000008                     ModbusBuildException@u8func:
   693                           	opt stack 0
   694  000008                     CopyStringToBuffer@len:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x7
   698  000008                     	ds	1
   699  000009                     ??_LoadNextEvent:
   700  000009                     ??_ModbusCalcCRC:
   701  000009                     ??_LightLed:
   702  000009                     ??_LightStatusLed:
   703  000009                     ??_SetBuzzerDuty:
   704  000009                     ??_CopyStringToBuffer:
   705  000009                     PortWrite@buflen:
   706                           	opt stack 0
   707  000009                     ModbusGetRxBuffer@bBuffOverflow:
   708                           	opt stack 0
   709  000009                     ModbusGetLastCommand@address:
   710                           	opt stack 0
   711  000009                     ___lwdiv@divisor:
   712                           	opt stack 0
   713  000009                     ___lwmod@divisor:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x8
   717  000009                     	ds	1
   718  00000A                     PortWrite@i:
   719                           	opt stack 0
   720  00000A                     ModbusSetExceptionStatusBit@bitNum:
   721                           	opt stack 0
   722  00000A                     CopyStringToBuffer@objId:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x9
   726  00000A                     	ds	1
   727  00000B                     LoadNextEvent@hour:
   728                           	opt stack 0
   729  00000B                     ModbusInit@u8id:
   730                           	opt stack 0
   731  00000B                     CopyStringToBuffer@i:
   732                           	opt stack 0
   733  00000B                     ___lwdiv@counter:
   734                           	opt stack 0
   735  00000B                     ___lwmod@counter:
   736                           	opt stack 0
   737  00000B                     ModbusCalcCRC@temp2:
   738                           	opt stack 0
   739  00000B                     millis@ret:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0xA
   743  00000B                     	ds	1
   744  00000C                     ?_isleap:
   745                           	opt stack 0
   746  00000C                     LightLed@ledNum:
   747                           	opt stack 0
   748  00000C                     ProcessLightBlock@curMs:
   749                           	opt stack 0
   750  00000C                     LoadNextEvent@minute:
   751                           	opt stack 0
   752  00000C                     Modbus@u8serno:
   753                           	opt stack 0
   754  00000C                     ___lwdiv@quotient:
   755                           	opt stack 0
   756  00000C                     isleap@yr:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0xB
   760  00000C                     	ds	1
   761  00000D                     LightLed@ststusIndex:
   762                           	opt stack 0
   763  00000D                     LoadNextEvent@v1:
   764                           	opt stack 0
   765  00000D                     Modbus@u8txenpin:
   766                           	opt stack 0
   767  00000D                     ModbusCalcCRC@flag:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0xC
   771  00000D                     	ds	1
   772  00000E                     ??_isleap:
   773  00000E                     ?_months_to_days:
   774                           	opt stack 0
   775  00000E                     ?_years_to_days:
   776                           	opt stack 0
   777  00000E                     LightLed@statusShift:
   778                           	opt stack 0
   779  00000E                     LightStatusLed@row:
   780                           	opt stack 0
   781  00000E                     Modbus@u8id:
   782                           	opt stack 0
   783  00000E                     months_to_days@month:
   784                           	opt stack 0
   785  00000E                     years_to_days@yr:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0xD
   789  00000E                     	ds	1
   790  00000F                     ??_InitFromEeprom:
   791  00000F                     ??_SoundPlayNextStep:
   792  00000F                     ??_ResetEvent:
   793  00000F                     ModbusCalcCRC@u8length:
   794                           	opt stack 0
   795  00000F                     _isleap$2147:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0xE
   799  00000F                     	ds	1
   800  000010                     ??_months_to_days:
   801  000010                     ModbusCalcCRC@i:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0xF
   805  000010                     	ds	1
   806  000011                     ResetEvent@state:
   807                           	opt stack 0
   808  000011                     ModbusCalcCRC@j:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x10
   812  000011                     	ds	1
   813  000012                     ??_years_to_days:
   814  000012                     _ResetEvent$841:
   815                           	opt stack 0
   816  000012                     ModbusCalcCRC@temp:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x11
   820  000012                     	ds	2
   821  000014                     ??_ModbusValidateRequest:
   822  000014                     SoundPlayNextStep@duration:
   823                           	opt stack 0
   824  000014                     ModbusSendTxBuffer@u16crc:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x13
   828  000014                     	ds	1
   829  000015                     PlaySound@playDuration:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x14
   833  000015                     	ds	1
   834  000016                     ??_ModbusProcess_FC5:
   835  000016                     ??_ModbusProcess_FC15:
   836  000016                     ??_ModbusProcess_FC17:
   837  000016                     ??_ModbusProcess_FC21:
   838  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   839                           	opt stack 0
   840  000016                     ModbusProcess_FC43@devIdCode:
   841                           	opt stack 0
   842  000016                     ModbusProcess_FC1@regs:
   843                           	opt stack 0
   844  000016                     ModbusProcess_FC3@regs:
   845                           	opt stack 0
   846  000016                     ModbusProcess_FC6@regs:
   847                           	opt stack 0
   848  000016                     ModbusProcess_FC16@regs:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x15
   852  000016                     	ds	1
   853  000017                     ??_PlaySound:
   854  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   855                           	opt stack 0
   856  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x16
   860  000017                     	ds	1
   861  000018                     ??_ModbusProcess_FC1:
   862  000018                     ModbusProcess_FC3@u8size:
   863                           	opt stack 0
   864  000018                     ModbusProcess_FC6@u8size:
   865                           	opt stack 0
   866  000018                     ModbusProcess_FC16@u8size:
   867                           	opt stack 0
   868  000018                     ModbusProcess_FC17@i:
   869                           	opt stack 0
   870  000018                     ModbusProcess_FC21@requestDataLen:
   871                           	opt stack 0
   872  000018                     ModbusProcess_FC43@objId:
   873                           	opt stack 0
   874  000018                     ModbusValidateRequest@startAddrBytes:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x17
   878  000018                     	ds	1
   879  000019                     ??_ModbusProcess_FC3:
   880  000019                     ??_ModbusProcess_FC6:
   881  000019                     ??_ModbusProcess_FC16:
   882  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x18
   886  000019                     	ds	1
   887  00001A                     ModbusProcess_FC21@startAddrsBytes:
   888                           	opt stack 0
   889  00001A                     years_to_days@ret:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x19
   893  00001A                     	ds	1
   894  00001B                     PlaySound@soundId:
   895                           	opt stack 0
   896  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   897                           	opt stack 0
   898  00001B                     ModbusProcess_FC1@u16coil:
   899                           	opt stack 0
   900  00001B                     ModbusProcess_FC6@u16val:
   901                           	opt stack 0
   902  00001B                     ModbusProcess_FC15@u16coil:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x1A
   906  00001B                     	ds	1
   907  00001C                     PlaySound@soundAddr:
   908                           	opt stack 0
   909  00001C                     ModbusProcess_FC5@u16coil:
   910                           	opt stack 0
   911  00001C                     ModbusProcess_FC21@recLenBytes:
   912                           	opt stack 0
   913  00001C                     ModbusValidateRequest@recLenBytes:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x1B
   917  00001C                     	ds	1
   918  00001D                     ??_ProcessDiary:
   919  00001D                     ??_CommandSetStatusLed:
   920  00001D                     ModbusProcess_FC1@u8currentBit:
   921                           	opt stack 0
   922  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   923                           	opt stack 0
   924  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   925                           	opt stack 0
   926  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   927                           	opt stack 0
   928  00001D                     ModbusProcess_FC16@temp:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1C
   932  00001D                     	ds	1
   933  00001E                     ?_ymd_to_scalar:
   934                           	opt stack 0
   935  00001E                     CommandSetStatusLed@commandData:
   936                           	opt stack 0
   937  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   938                           	opt stack 0
   939  00001E                     ModbusProcess_FC5@regs:
   940                           	opt stack 0
   941  00001E                     ModbusProcess_FC15@bTemp:
   942                           	opt stack 0
   943  00001E                     ModbusProcess_FC21@i:
   944                           	opt stack 0
   945  00001E                     ModbusProcess_FC3@u16regsno:
   946                           	opt stack 0
   947  00001E                     ModbusProcess_FC6@u16add:
   948                           	opt stack 0
   949  00001E                     ymd_to_scalar@yr:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x1D
   953  00001E                     	ds	1
   954  00001F                     CommandSetStatusLed@led:
   955                           	opt stack 0
   956  00001F                     ModbusProcess_FC1@u8bytesno:
   957                           	opt stack 0
   958  00001F                     ModbusProcess_FC5@u8currentBit:
   959                           	opt stack 0
   960  00001F                     ModbusProcess_FC15@u8frameByte:
   961                           	opt stack 0
   962  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1E
   966  00001F                     	ds	1
   967  000020                     ModbusProcess_FC3@u8StartAdd:
   968                           	opt stack 0
   969  000020                     ModbusValidateRequest@u16MsgCRC:
   970                           	opt stack 0
   971  000020                     ModbusProcess_FC1@u16StartCoil:
   972                           	opt stack 0
   973  000020                     ModbusProcess_FC15@u16StartCoil:
   974                           	opt stack 0
   975  000020                     ModbusProcess_FC16@u16StartAdd:
   976                           	opt stack 0
   977  000020                     ymd_to_scalar@mo:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x1F
   981  000020                     	ds	1
   982  000021                     ProcessDiary@hour:
   983                           	opt stack 0
   984  000021                     ModbusProcess_FC3@i:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x20
   988  000021                     	ds	1
   989  000022                     ProcessDiary@minute:
   990                           	opt stack 0
   991  000022                     ModbusValidateRequest@isSupported:
   992                           	opt stack 0
   993  000022                     ModbusProcess_FC16@u8regsno:
   994                           	opt stack 0
   995  000022                     ModbusProcess_FC1@u16currentCoil:
   996                           	opt stack 0
   997  000022                     ModbusProcess_FC15@u16Coilno:
   998                           	opt stack 0
   999  000022                     ymd_to_scalar@day:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x21
  1003  000022                     	ds	1
  1004  000023                     ModbusProcess_FC16@i:
  1005                           	opt stack 0
  1006  000023                     ModbusValidateRequest@u16count:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x22
  1010  000023                     	ds	1
  1011  000024                     ??_ymd_to_scalar:
  1012  000024                     ModbusProcess_FC1@u8bitsno:
  1013                           	opt stack 0
  1014  000024                     ModbusProcess_FC15@regs:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x23
  1018  000024                     	ds	1
  1019  000025                     ModbusValidateRequest@i:
  1020                           	opt stack 0
  1021  000025                     ModbusProcess_FC15@u8currentBit:
  1022                           	opt stack 0
  1023  000025                     ModbusProcess_FC1@u16Coilno:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x24
  1027  000025                     	ds	1
  1028  000026                     ModbusValidateRequest@readDevId:
  1029                           	opt stack 0
  1030  000026                     ModbusProcess_FC15@u16currentCoil:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x25
  1034  000026                     	ds	1
  1035  000027                     ModbusValidateRequest@u8regs:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x26
  1039  000027                     	ds	1
  1040  000028                     ModbusProcess_FC15@u8bitsno:
  1041                           	opt stack 0
  1042  000028                     ModbusValidateRequest@u16regs:
  1043                           	opt stack 0
  1044  000028                     _ymd_to_scalar$2160:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x27
  1048  000028                     	ds	2
  1049  00002A                     ModbusPoll@discreteInputs:
  1050                           	opt stack 0
  1051  00002A                     ymd_to_scalar@scalar:
  1052                           	opt stack 0
  1053                           
  1054                           ; 4 bytes @ 0x29
  1055  00002A                     	ds	2
  1056  00002C                     ModbusPoll@coils:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x2B
  1060  00002C                     	ds	1
  1061  00002D                     ModbusPoll@inputRegs:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x2C
  1065  00002D                     	ds	1
  1066  00002E                     ?_mktime:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x2D
  1070  00002E                     	ds	1
  1071  00002F                     ModbusPoll@inputRegsCount:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x2E
  1075  00002F                     	ds	1
  1076  000030                     ModbusPoll@holdingRegs:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x2F
  1080  000030                     	ds	2
  1081  000032                     ??_mktime:
  1082  000032                     ModbusPoll@holdingRegsCount:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x31
  1086  000032                     	ds	1
  1087  000033                     ModbusPoll@u8current:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x32
  1091  000033                     	ds	1
  1092  000034                     ModbusPoll@i8state:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x33
  1096  000034                     	ds	1
  1097  000035                     ModbusPoll@u8exception:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x34
  1101  000035                     	ds	11
  1102  000040                     mktime@tt:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x3F
  1106  000040                     	ds	4
  1107  000044                     mktime@timeptr:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x43
  1111  000044                     	ds	1
  1112  000045                     SetTimeFromRegs@daySec:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x44
  1116  000045                     	ds	1
  1117  000046                     SetTimeFromRegs@yearMonth:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x45
  1121  000046                     	ds	1
  1122  000047                     ??_SetTimeFromRegs:
  1123                           
  1124                           ; 1 bytes @ 0x46
  1125  000047                     	ds	2
  1126  000049                     SetTimeFromRegs@newRawTime:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x48
  1130  000049                     	ds	4
  1131  00004D                     SetTimeFromRegs@hourMin:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x4C
  1135  00004D                     	ds	1
  1136  00004E                     SetTimeFromRegs@newTime:
  1137                           	opt stack 0
  1138                           
  1139                           ; 18 bytes @ 0x4D
  1140  00004E                     	ds	18
  1141  000060                     SetTimeCommand@hourMin:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x5F
  1145  000060                     	ds	2
  1146  000062                     SetTimeCommand@daySec:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x61
  1150  000062                     	ds	2
  1151  000064                     SetTimeCommand@yearMonth:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x63
  1155  000064                     	ds	2
  1156  000066                     ??_io_poll:
  1157                           
  1158                           ; 1 bytes @ 0x65
  1159  000066                     	ds	4
  1160  00006A                     ??_main:
  1161                           
  1162                           ; 1 bytes @ 0x69
  1163  00006A                     	ds	5
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1h	equ	0xFE2
  1172                           fsr1l	equ	0xFE1
  1173                           
  1174 ;;
  1175 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1176 ;;
  1177 ;; *************** function _main *****************
  1178 ;; Defined at:
  1179 ;;		line 775 in file "main.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  minute          1   17[BANK0 ] unsigned char 
  1184 ;;  hour            1   12[BANK0 ] unsigned char 
  1185 ;;  curMs           4   13[BANK0 ] unsigned long 
  1186 ;;  lastMs          4    7[BANK0 ] unsigned long 
  1187 ;;  oldBuzzerOnT    4    0        unsigned long 
  1188 ;;  oldMinute       1   11[BANK0 ] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1198 ;;      Params:         0       0       0       0       0       0       0
  1199 ;;      Locals:         0      11       0       0       0       0       0
  1200 ;;      Temps:          5       0       0       0       0       0       0
  1201 ;;      Totals:         5      11       0       0       0       0       0
  1202 ;;Total ram usage:       16 bytes
  1203 ;; Hardware stack levels required when called:    9
  1204 ;; This function calls:
  1205 ;;		_AddSecond
  1206 ;;		_ConfigureOscillator
  1207 ;;		_GetTime
  1208 ;;		_InitApp
  1209 ;;		_InitFromEeprom
  1210 ;;		_LightStatusLed
  1211 ;;		_ModbusPoll
  1212 ;;		_ProcessDiary
  1213 ;;		_ProcessLightBlock
  1214 ;;		_ResetEvent
  1215 ;;		_SoundPlayNextStep
  1216 ;;		_StopPlaying
  1217 ;;		_getHourMin
  1218 ;;		_io_poll
  1219 ;;		_millis
  1220 ;;		_pwm_init
  1221 ;; This function is called by:
  1222 ;;		Startup code after reset
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text0
  1227  001144                     __ptext0:
  1228                           	opt stack 0
  1229  001144                     _main:
  1230                           	opt stack 22
  1231                           
  1232                           ;incstack = 0
  1233  001144  FFFF               	dw	65535
  1234                           
  1235                           ;main.c: 778: ConfigureOscillator();
  1236  001146  ECC8  F015         	call	_ConfigureOscillator	;wreg free
  1237                           
  1238                           ;main.c: 781: InitApp();
  1239  00114A  EC93  F011         	call	_InitApp	;wreg free
  1240                           
  1241                           ;main.c: 785: InitFromEeprom();
  1242  00114E  EC44  F011         	call	_InitFromEeprom	;wreg free
  1243                           
  1244                           ;main.c: 794: unsigned long lastMs = millis();
  1245  001152  EC18  F015         	call	_millis	;wreg free
  1246  001156  C007  F0E7         	movff	?_millis,main@lastMs
  1247  00115A  C008  F0E8         	movff	?_millis+1,main@lastMs+1
  1248  00115E  C009  F0E9         	movff	?_millis+2,main@lastMs+2
  1249  001162  C00A  F0EA         	movff	?_millis+3,main@lastMs+3
  1250                           
  1251                           ;main.c: 803: unsigned long oldBuzzerOnTime = 0;
  1252  001166  ECA8  F015         	call	_pwm_init	;wreg free
  1253                           
  1254                           ;main.c: 804: uint8_t oldMinute = 0xff;
  1255  00116A  0100               	movlb	0	; () banked
  1256  00116C  69EB               	setf	main@oldMinute& (0+255),b
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 806: LightStatusLed(0x07, 1, 0);
  1260  00116E  0E01               	movlw	1
  1261  001170  6E07               	movwf	LightStatusLed@on,c
  1262  001172  0E00               	movlw	0
  1263  001174  6E08               	movwf	LightStatusLed@blink,c
  1264  001176  0E07               	movlw	7
  1265  001178  EC85  F00D         	call	_LightStatusLed
  1266                           
  1267                           ;main.c: 807: LightStatusLed(0x05, 1, 1);
  1268  00117C  0E01               	movlw	1
  1269  00117E  6E07               	movwf	LightStatusLed@on,c
  1270  001180  6E08               	movwf	LightStatusLed@blink,c
  1271  001182  0E05               	movlw	5
  1272  001184  EC85  F00D         	call	_LightStatusLed
  1273  001188                     l6008:
  1274  001188  FFFF               	dw	65535	; assembler added errata NOP
  1275                           
  1276                           ;main.c: 809: {
  1277                           ;main.c: 810: unsigned long curMs = millis();
  1278  00118A  EC18  F015         	call	_millis	;wreg free
  1279  00118E  C007  F0ED         	movff	?_millis,main@curMs
  1280  001192  C008  F0EE         	movff	?_millis+1,main@curMs+1
  1281  001196  C009  F0EF         	movff	?_millis+2,main@curMs+2
  1282  00119A  C00A  F0F0         	movff	?_millis+3,main@curMs+3
  1283                           
  1284                           ;main.c: 811: ProcessLightBlock(&curMs);
  1285  00119E  0EED               	movlw	main@curMs& (0+255)
  1286  0011A0  EC39  F006         	call	_ProcessLightBlock
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 831: if(_isSoundPlaying && curMs >= _playingEndMs)
  1290  0011A4  51CE               	movf	__isSoundPlaying& (0+255),w,b
  1291  0011A6  E00B               	bz	l6018
  1292                           
  1293                           ; BSR set to: 0
  1294  0011A8  51A0               	movf	__playingEndMs& (0+255),w,b
  1295  0011AA  5DED               	subwf	main@curMs& (0+255),w,b
  1296  0011AC  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1297  0011AE  59EE               	subwfb	(main@curMs+1)& (0+255),w,b
  1298  0011B0  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1299  0011B2  59EF               	subwfb	(main@curMs+2)& (0+255),w,b
  1300  0011B4  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1301  0011B6  59F0               	subwfb	(main@curMs+3)& (0+255),w,b
  1302  0011B8  E302               	bnc	l6018
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;main.c: 832: {
  1306                           ;main.c: 833: SoundPlayNextStep();
  1307  0011BA  ECF4  F00F         	call	_SoundPlayNextStep	;wreg free
  1308  0011BE                     l6018:
  1309                           
  1310                           ;main.c: 834: }
  1311                           ;main.c: 837: if(PORTCbits.RC1 == 0)
  1312  0011BE  B282               	btfsc	3970,1,c	;volatile
  1313  0011C0  D008               	goto	l6026
  1314                           
  1315                           ;main.c: 838: {
  1316                           ;main.c: 840: if(currentAlarmedEventNum != 0xff)
  1317  0011C2  2876               	incf	_currentAlarmedEventNum,w,c
  1318  0011C4  E004               	bz	l6024
  1319                           
  1320                           ;main.c: 841: {
  1321                           ;main.c: 842: ResetEvent(1);
  1322  0011C6  0E01               	movlw	1
  1323  0011C8  EC5F  F014         	call	_ResetEvent
  1324                           
  1325                           ;main.c: 843: }
  1326  0011CC  D002               	goto	l6026
  1327  0011CE                     l6024:
  1328                           
  1329                           ;main.c: 844: else
  1330                           ;main.c: 845: {
  1331                           ;main.c: 846: StopPlaying();
  1332  0011CE  EC6D  F015         	call	_StopPlaying	;wreg free
  1333  0011D2                     l6026:
  1334  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  1335                           
  1336                           ;main.c: 847: }
  1337                           ;main.c: 864: }
  1338                           ;main.c: 871: if(curMs - lastMs >= 1000)
  1339  0011D4  0100               	movlb	0	; () banked
  1340  0011D6  51E7               	movf	main@lastMs& (0+255),w,b
  1341  0011D8  5DED               	subwf	main@curMs& (0+255),w,b
  1342  0011DA  6E6A               	movwf	??_main& (0+255),c
  1343  0011DC  51E8               	movf	(main@lastMs+1)& (0+255),w,b
  1344  0011DE  59EE               	subwfb	(main@curMs+1)& (0+255),w,b
  1345  0011E0  6E6B               	movwf	(??_main+1)& (0+255),c
  1346  0011E2  51E9               	movf	(main@lastMs+2)& (0+255),w,b
  1347  0011E4  59EF               	subwfb	(main@curMs+2)& (0+255),w,b
  1348  0011E6  6E6C               	movwf	(??_main+2)& (0+255),c
  1349  0011E8  51EA               	movf	(main@lastMs+3)& (0+255),w,b
  1350  0011EA  59F0               	subwfb	(main@curMs+3)& (0+255),w,b
  1351  0011EC  6E6D               	movwf	(??_main+3)& (0+255),c
  1352  0011EE  506D               	movf	??_main+3,w,c
  1353  0011F0  106C               	iorwf	??_main+2,w,c
  1354  0011F2  E105               	bnz	u5250
  1355  0011F4  0EE8               	movlw	232
  1356  0011F6  5C6A               	subwf	??_main,w,c
  1357  0011F8  0E03               	movlw	3
  1358  0011FA  586B               	subwfb	??_main+1,w,c
  1359  0011FC  E34A               	bnc	l6056
  1360  0011FE                     u5250:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;main.c: 872: {
  1364                           ;main.c: 873: AddSecond();
  1365  0011FE  ECB1  F015         	call	_AddSecond	;wreg free
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 875: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1369  001202  2876               	incf	_currentAlarmedEventNum,w,c
  1370  001204  E015               	bz	l6036
  1371                           
  1372                           ; BSR set to: 0
  1373  001206  ECC0  F015         	call	_GetTime	;wreg free
  1374  00120A  6ED9               	movwf	fsr2l,c
  1375  00120C  6ADA               	clrf	fsr2h,c
  1376  00120E  0100               	movlb	0	; () banked
  1377  001210  51AC               	movf	_eventResetSecond& (0+255),w,b
  1378  001212  5CDE               	subwf	postinc2,w,c
  1379  001214  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1380  001216  58DE               	subwfb	postinc2,w,c
  1381  001218  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1382  00121A  58DE               	subwfb	postinc2,w,c
  1383  00121C  50DE               	movf	postinc2,w,c
  1384  00121E  0A80               	xorlw	128
  1385  001220  6E6E               	movwf	(??_main+4)& (0+255),c
  1386  001222  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1387  001224  0A80               	xorlw	128
  1388  001226  586E               	subwfb	(??_main+4)& (0+255),w,c
  1389  001228  E303               	bnc	l6036
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 876: {
  1393                           ;main.c: 877: ResetEvent(0);
  1394  00122A  0E00               	movlw	0
  1395  00122C  EC5F  F014         	call	_ResetEvent
  1396  001230                     l6036:
  1397                           
  1398                           ;main.c: 878: }
  1399                           ;main.c: 880: _MODBUSInputRegs[5] = *GetTime();
  1400  001230  ECC0  F015         	call	_GetTime	;wreg free
  1401  001234  6ED9               	movwf	fsr2l,c
  1402  001236  6ADA               	clrf	fsr2h,c
  1403  001238  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1404  00123C  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1405                           
  1406                           ;main.c: 881: uint8_t hour = 0, minute = 0;
  1407  001240  0100               	movlb	0	; () banked
  1408  001242  6BEC               	clrf	main@hour& (0+255),b
  1409                           
  1410                           ; BSR set to: 0
  1411  001244  6BF1               	clrf	main@minute& (0+255),b
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;main.c: 883: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1415  001246  0EF1               	movlw	low main@minute
  1416  001248  6E07               	movwf	getHourMin@min,c
  1417  00124A  0EEC               	movlw	main@hour& (0+255)
  1418  00124C  EC02  F015         	call	_getHourMin
  1419  001250  0900               	iorlw	0
  1420  001252  E00F               	bz	l6052
  1421  001254  0100               	movlb	0	; () banked
  1422  001256  51F1               	movf	main@minute& (0+255),w,b
  1423  001258  19EB               	xorwf	main@oldMinute& (0+255),w,b
  1424  00125A  E00B               	bz	l6052
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 884: {
  1428                           ;main.c: 885: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1429  00125C  51EC               	movf	main@hour& (0+255),w,b
  1430  00125E  6E6A               	movwf	??_main& (0+255),c
  1431  001260  51F1               	movf	main@minute& (0+255),w,b
  1432  001262  0101               	movlb	1	; () banked
  1433  001264  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1434  001266  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1435                           
  1436                           ; BSR set to: 1
  1437                           ;main.c: 887: oldMinute = minute;
  1438  00126A  C0F1  F0EB         	movff	main@minute,main@oldMinute
  1439                           
  1440                           ; BSR set to: 1
  1441                           ;main.c: 888: ProcessDiary();
  1442  00126E  EC3B  F00F         	call	_ProcessDiary	;wreg free
  1443  001272                     l6052:
  1444                           
  1445                           ;main.c: 889: }
  1446                           ;main.c: 891: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1447  001272  0100               	movlb	0	; () banked
  1448  001274  51EC               	movf	main@hour& (0+255),w,b
  1449  001276  6E6A               	movwf	??_main& (0+255),c
  1450  001278  51F1               	movf	main@minute& (0+255),w,b
  1451  00127A  0101               	movlb	1	; () banked
  1452  00127C  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1453  00127E  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1454                           
  1455                           ; BSR set to: 1
  1456                           ;main.c: 893: lastMs = curMs;
  1457  001282  C0ED  F0E7         	movff	main@curMs,main@lastMs
  1458  001286  C0EE  F0E8         	movff	main@curMs+1,main@lastMs+1
  1459  00128A  C0EF  F0E9         	movff	main@curMs+2,main@lastMs+2
  1460  00128E  C0F0  F0EA         	movff	main@curMs+3,main@lastMs+3
  1461  001292                     l6056:
  1462                           
  1463                           ;main.c: 900: }
  1464                           ;main.c: 901: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1465  001292  C0BC  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1466  001296  C0BD  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1467  00129A  0EDD               	movlw	low __MODBUSCoils
  1468  00129C  6E2C               	movwf	ModbusPoll@coils,c
  1469  00129E  0EAA               	movlw	low __MODBUSInputRegs
  1470  0012A0  6E2D               	movwf	ModbusPoll@inputRegs,c
  1471  0012A2  0E01               	movlw	high __MODBUSInputRegs
  1472  0012A4  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1473  0012A6  0E0F               	movlw	15
  1474  0012A8  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1475  0012AA  0E8C               	movlw	low __MODBUSHoldingRegs
  1476  0012AC  6E30               	movwf	ModbusPoll@holdingRegs,c
  1477  0012AE  0E01               	movlw	high __MODBUSHoldingRegs
  1478  0012B0  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1479  0012B2  0E0F               	movlw	15
  1480  0012B4  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1481  0012B6  EC60  F009         	call	_ModbusPoll	;wreg free
  1482                           
  1483                           ;main.c: 902: io_poll();
  1484  0012BA  ECC9  F00A         	call	_io_poll	;wreg free
  1485  0012BE  D764               	goto	l6008
  1486  0012C0                     __end_of_main:
  1487                           	opt stack 0
  1488                           tblptru	equ	0xFF8
  1489                           tblptrh	equ	0xFF7
  1490                           tblptrl	equ	0xFF6
  1491                           tablat	equ	0xFF5
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           postdec1	equ	0xFE5
  1495                           fsr1h	equ	0xFE2
  1496                           fsr1l	equ	0xFE1
  1497                           postinc2	equ	0xFDE
  1498                           postdec2	equ	0xFDD
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           
  1502 ;; *************** function _pwm_init *****************
  1503 ;; Defined at:
  1504 ;;		line 355 in file "main.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1518 ;;      Params:         0       0       0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0
  1521 ;;      Totals:         0       0       0       0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    2
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_main
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text1
  1533  002B50                     __ptext1:
  1534                           	opt stack 0
  1535  002B50                     _pwm_init:
  1536                           	opt stack 28
  1537                           
  1538                           ;incstack = 0
  1539  002B50  FFFF               	dw	65535
  1540                           
  1541                           ;main.c: 367: CCP1CONbits.CCP1M = 0x0f;
  1542  002B52  0E0F               	movlw	15
  1543  002B54  12BD               	iorwf	4029,f,c	;volatile
  1544                           
  1545                           ;main.c: 374: PR2 = 255;
  1546  002B56  68CB               	setf	4043,c	;volatile
  1547                           
  1548                           ;main.c: 377: T2CONbits.T2CKPS1 = 1;
  1549  002B58  82CA               	bsf	4042,1,c	;volatile
  1550                           
  1551                           ;main.c: 378: T2CONbits.T2CKPS0 = 0;
  1552  002B5A  90CA               	bcf	4042,0,c	;volatile
  1553                           
  1554                           ;main.c: 381: TRISCbits.RC2 = 0;
  1555  002B5C  9494               	bcf	3988,2,c	;volatile
  1556  002B5E  0012               	return		;funcret
  1557  002B60  FFFF               	dw	65535	; errata NOP
  1558  002B62                     __end_of_pwm_init:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1h	equ	0xFE2
  1568                           fsr1l	equ	0xFE1
  1569                           postinc2	equ	0xFDE
  1570                           postdec2	equ	0xFDD
  1571                           fsr2h	equ	0xFDA
  1572                           fsr2l	equ	0xFD9
  1573                           
  1574 ;; *************** function _io_poll *****************
  1575 ;; Defined at:
  1576 ;;		line 954 in file "main.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  hourMin         2    0        unsigned int 
  1581 ;;  command         1    0[BANK0 ] unsigned char 
  1582 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1583 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1584 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1585 ;;		 -> _lastCommand(1), 
  1586 ;;  v1              1    3[BANK0 ] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1596 ;;      Params:         0       0       0       0       0       0       0
  1597 ;;      Locals:         0       7       0       0       0       0       0
  1598 ;;      Temps:          4       0       0       0       0       0       0
  1599 ;;      Totals:         4       7       0       0       0       0       0
  1600 ;;Total ram usage:       11 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    8
  1603 ;; This function calls:
  1604 ;;		_CommandSetStatusLed
  1605 ;;		_InitFromEeprom
  1606 ;;		_LightLed
  1607 ;;		_ModbusGetLastCommand
  1608 ;;		_ModbusSetExceptionStatusBit
  1609 ;;		_PlaySound
  1610 ;;		_SetTimeCommand
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text2
  1617  001592                     __ptext2:
  1618                           	opt stack 0
  1619  001592                     _io_poll:
  1620                           	opt stack 22
  1621                           
  1622                           ;incstack = 0
  1623  001592  FFFF               	dw	65535
  1624                           
  1625                           ;main.c: 956: uint16_t lastAddress;
  1626                           ;main.c: 957: uint16_t lastEndAddress;
  1627                           ;main.c: 959: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1628  001594  0EE1               	movlw	low io_poll@lastEndAddress
  1629  001596  6E07               	movwf	ModbusGetLastCommand@count,c
  1630  001598  0EE4               	movlw	io_poll@lastAddress& (0+255)
  1631  00159A  ECEB  F014         	call	_ModbusGetLastCommand
  1632  00159E  0100               	movlb	0	; () banked
  1633  0015A0  6FE6               	movwf	io_poll@lastCommand& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 960: if(*lastCommand == MB_FC_NONE)
  1637  0015A2  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1638  0015A4  6ED9               	movwf	fsr2l,c
  1639  0015A6  6ADA               	clrf	fsr2h,c
  1640  0015A8  50DF               	movf	indf2,w,c
  1641  0015AA  E101 D08A          	bz	l437
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;main.c: 963: lastEndAddress += lastAddress - 1;
  1645  0015AE  6866               	setf	??_io_poll& (0+255),c
  1646  0015B0  6867               	setf	(??_io_poll+1)& (0+255),c
  1647  0015B2  C0E4  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1648  0015B6  C0E5  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1649  0015BA  5066               	movf	??_io_poll,w,c
  1650  0015BC  2668               	addwf	??_io_poll+2,f,c
  1651  0015BE  5067               	movf	??_io_poll+1,w,c
  1652  0015C0  2269               	addwfc	??_io_poll+3,f,c
  1653  0015C2  5068               	movf	??_io_poll+2,w,c
  1654  0015C4  27E1               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1655  0015C6  5069               	movf	??_io_poll+3,w,c
  1656  0015C8  23E2               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;main.c: 965: uint8_t v1;
  1660                           ;main.c: 966: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1661  0015CA  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1662  0015CC  6ED9               	movwf	fsr2l,c
  1663  0015CE  6ADA               	clrf	fsr2h,c
  1664  0015D0  0E06               	movlw	6
  1665  0015D2  18DE               	xorwf	postinc2,w,c
  1666  0015D4  E006               	bz	l5942
  1667                           
  1668                           ; BSR set to: 0
  1669  0015D6  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1670  0015D8  6ED9               	movwf	fsr2l,c
  1671  0015DA  6ADA               	clrf	fsr2h,c
  1672  0015DC  0E10               	movlw	16
  1673  0015DE  18DE               	xorwf	postinc2,w,c
  1674  0015E0  E162               	bnz	l5986
  1675  0015E2                     l5942:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 967: {
  1679                           ;main.c: 969: if(lastAddress == 0)
  1680  0015E2  51E4               	movf	io_poll@lastAddress& (0+255),w,b
  1681  0015E4  11E5               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1682  0015E6  E15F               	bnz	l5986
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 970: {
  1686                           ;main.c: 971: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1687  0015E8  C18D  F0E0         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1688                           
  1689                           ;main.c: 972: uint16_t hourMin;
  1690                           ;main.c: 973: switch(command)
  1691  0015EC  D046               	goto	l5984
  1692  0015EE                     l443:
  1693                           
  1694                           ; BSR set to: 0
  1695  0015EE  00FF               	reset		; ;# 
  1696                           
  1697                           ;main.c: 979: return;
  1698  0015F0  D068               	goto	l437
  1699  0015F2                     l5946:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 983: SetTimeCommand();
  1703  0015F2  ECD3  F014         	call	_SetTimeCommand	;wreg free
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 984: ModbusSetExceptionStatusBit(0, 1);
  1707  0015F6  0E01               	movlw	1
  1708  0015F8  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1709  0015FA  0E00               	movlw	0
  1710  0015FC  EC87  F013         	call	_ModbusSetExceptionStatusBit
  1711                           
  1712                           ;main.c: 985: break;
  1713  001600  D04C               	goto	l445
  1714  001602                     l447:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 989: eventCount = 0;
  1718  001602  6BD8               	clrf	_eventCount& (0+255),b
  1719  001604                     l449:
  1720  001604  FFFF               	dw	65535	; assembler added errata NOP
  1721  001606  B2A6               	btfsc	4006,1,c	;volatile
  1722  001608  D7FD               	goto	l449
  1723  00160A  0E12               	movlw	18
  1724  00160C  6EA9               	movwf	4009,c	;volatile
  1725  00160E  6AA8               	clrf	4008,c	;volatile
  1726  001610  90D8               	bcf	status,0,c	;volatile
  1727  001612  BEF2               	btfsc	intcon,7,c	;volatile
  1728  001614  80D8               	bsf	status,0,c	;volatile
  1729  001616  9EF2               	bcf	intcon,7,c	;volatile
  1730  001618  84A6               	bsf	4006,2,c	;volatile
  1731  00161A  0E55               	movlw	85
  1732  00161C  6EA7               	movwf	4007,c	;volatile
  1733  00161E  0EAA               	movlw	170
  1734  001620  6EA7               	movwf	4007,c	;volatile
  1735  001622  82A6               	bsf	4006,1,c	;volatile
  1736  001624  94A6               	bcf	4006,2,c	;volatile
  1737  001626  E301               	bnc	l5970
  1738  001628  8EF2               	bsf	intcon,7,c	;volatile
  1739  00162A                     l5970:
  1740                           
  1741                           ;main.c: 991: ModbusSetExceptionStatusBit(0, 1);
  1742  00162A  0E01               	movlw	1
  1743  00162C  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1744  00162E  0E00               	movlw	0
  1745  001630  EC87  F013         	call	_ModbusSetExceptionStatusBit
  1746                           
  1747                           ;main.c: 992: break;
  1748  001634  D032               	goto	l445
  1749  001636                     l455:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 1018: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1753  001636  C18E  F0E3         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 1020: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03,
      +                           (((v1) >> (2)) & 0x01));
  1757  00163A  51E3               	movf	io_poll@v1& (0+255),w,b
  1758  00163C  0B03               	andlw	3
  1759  00163E  6E07               	movwf	LightLed@ledState,c
  1760  001640  41E3               	rrncf	io_poll@v1& (0+255),w,b
  1761  001642  42E8               	rrncf	wreg,f,c
  1762  001644  0B3F               	andlw	63
  1763  001646  0B01               	andlw	1
  1764  001648  6E08               	movwf	LightLed@blink,c
  1765  00164A  0101               	movlb	1	; () banked
  1766  00164C  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1767  00164E  ECC0  F004         	call	_LightLed
  1768                           
  1769                           ;main.c: 1021: _MODBUSHoldingRegs[1] = 0;
  1770  001652  0101               	movlb	1	; () banked
  1771  001654  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1772  001656  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1773                           
  1774                           ; BSR set to: 1
  1775                           ;main.c: 1022: ModbusSetExceptionStatusBit(0, 1);
  1776  001658  0E01               	movlw	1
  1777  00165A  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1778  00165C  0E00               	movlw	0
  1779  00165E  EC87  F013         	call	_ModbusSetExceptionStatusBit
  1780                           
  1781                           ;main.c: 1023: break;
  1782  001662  D01B               	goto	l445
  1783  001664                     l5978:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 1032: PlaySound(((unsigned char)((_MODBUSHoldingRegs[0])&0xFF)), ((unsigned cha
      +                          r)((_MODBUSHoldingRegs[1])&0xFF)));
  1787  001664  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  1788  001668  6A16               	clrf	PlaySound@playDuration+1,c
  1789  00166A  0101               	movlb	1	; () banked
  1790  00166C  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1791  00166E  EC00  F00E         	call	_PlaySound
  1792                           
  1793                           ;main.c: 1033: break;
  1794  001672  D013               	goto	l445
  1795  001674                     l5980:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 1036: CommandSetStatusLed();
  1799  001674  EC47  F012         	call	_CommandSetStatusLed	;wreg free
  1800                           
  1801                           ;main.c: 1037: break;
  1802  001678  D010               	goto	l445
  1803  00167A                     l5984:
  1804  00167A  FFFF               	dw	65535	; assembler added errata NOP
  1805                           
  1806                           ; BSR set to: 0
  1807  00167C  51E0               	movf	io_poll@command& (0+255),w,b
  1808                           
  1809                           ; Switch size 1, requested type "speed"
  1810                           ; Number of cases is 7, Range of values is 1 to 145
  1811                           ; switch strategies available:
  1812                           ; Name         Instructions Cycles
  1813                           ; simple_byte           22    12 (average)
  1814                           ;	Chosen strategy is simple_byte
  1815  00167E  0A01               	xorlw	1	; case 1
  1816  001680  E00C               	bz	l445
  1817  001682  0A11               	xorlw	17	; case 16
  1818  001684  E0B6               	bz	l5946
  1819  001686  0A6F               	xorlw	111	; case 127
  1820  001688  E0B2               	bz	l443
  1821  00168A  0AFF               	xorlw	255	; case 128
  1822  00168C  E0BA               	bz	l447
  1823  00168E  0A02               	xorlw	2	; case 130
  1824  001690  E0D2               	bz	l455
  1825  001692  0A01               	xorlw	1	; case 131
  1826  001694  E0EF               	bz	l5980
  1827  001696  0A12               	xorlw	18	; case 145
  1828  001698  E0E5               	bz	l5978
  1829  00169A                     l445:
  1830  00169A  FFFF               	dw	65535	; assembler added errata NOP
  1831                           
  1832                           ;main.c: 1039: _MODBUSHoldingRegs[0] = 0;
  1833  00169C  0101               	movlb	1	; () banked
  1834  00169E  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1835  0016A0  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1836                           
  1837                           ;main.c: 1040: _MODBUSHoldingRegs[1] = 0;
  1838  0016A2  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1839  0016A4  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1840  0016A6                     l5986:
  1841                           
  1842                           ;main.c: 1041: }
  1843                           ;main.c: 1042: }
  1844                           ;main.c: 1045: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  1845  0016A6  0100               	movlb	0	; () banked
  1846  0016A8  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1847  0016AA  6ED9               	movwf	fsr2l,c
  1848  0016AC  6ADA               	clrf	fsr2h,c
  1849  0016AE  0E15               	movlw	21
  1850  0016B0  18DE               	xorwf	postinc2,w,c
  1851  0016B2  E107               	bnz	l437
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 1046: {
  1855                           ;main.c: 1047: InitFromEeprom();
  1856  0016B4  EC44  F011         	call	_InitFromEeprom	;wreg free
  1857                           
  1858                           ; BSR set to: 1
  1859                           ;main.c: 1048: ModbusSetExceptionStatusBit(0, 1);
  1860  0016B8  0E01               	movlw	1
  1861  0016BA  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1862  0016BC  0E00               	movlw	0
  1863  0016BE  EC87  F013         	call	_ModbusSetExceptionStatusBit
  1864  0016C2                     l437:
  1865  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  1866  0016C4  0012               	return		;funcret
  1867  0016C6  FFFF               	dw	65535	; errata NOP
  1868  0016C8                     __end_of_io_poll:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           intcon	equ	0xFF2
  1875                           postinc0	equ	0xFEE
  1876                           wreg	equ	0xFE8
  1877                           postdec1	equ	0xFE5
  1878                           fsr1h	equ	0xFE2
  1879                           fsr1l	equ	0xFE1
  1880                           indf2	equ	0xFDF
  1881                           postinc2	equ	0xFDE
  1882                           postdec2	equ	0xFDD
  1883                           fsr2h	equ	0xFDA
  1884                           fsr2l	equ	0xFD9
  1885                           status	equ	0xFD8
  1886                           
  1887 ;; *************** function _SetTimeCommand *****************
  1888 ;; Defined at:
  1889 ;;		line 925 in file "main.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  yearMonth       2   99[COMRAM] unsigned int 
  1894 ;;  daySec          2   97[COMRAM] unsigned int 
  1895 ;;  hourMin         2   95[COMRAM] unsigned int 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : F/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1905 ;;      Params:         0       0       0       0       0       0       0
  1906 ;;      Locals:         6       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0
  1908 ;;      Totals:         6       0       0       0       0       0       0
  1909 ;;Total ram usage:        6 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    7
  1912 ;; This function calls:
  1913 ;;		_SetTimeFromRegs
  1914 ;; This function is called by:
  1915 ;;		_io_poll
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text3
  1920  0029A6                     __ptext3:
  1921                           	opt stack 0
  1922  0029A6                     _SetTimeCommand:
  1923                           	opt stack 22
  1924                           
  1925                           ;incstack = 0
  1926  0029A6  FFFF               	dw	65535
  1927                           
  1928                           ;main.c: 927: uint16_t hourMin = _MODBUSHoldingRegs[1];
  1929  0029A8  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  1930  0029AC  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  1931                           
  1932                           ;main.c: 929: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  1933  0029B0  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  1934  0029B4  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  1935                           
  1936                           ;main.c: 930: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  1937  0029B8  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  1938  0029BC  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  1939                           
  1940                           ;main.c: 931: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  1941  0029C0  0E62               	movlw	low SetTimeCommand@daySec
  1942  0029C2  6E45               	movwf	SetTimeFromRegs@daySec,c
  1943  0029C4  0E64               	movlw	low SetTimeCommand@yearMonth
  1944  0029C6  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  1945  0029C8  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  1946  0029CA  ECDA  F00E         	call	_SetTimeFromRegs
  1947                           
  1948                           ;main.c: 932: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  1949  0029CE  0100               	movlb	0	; () banked
  1950  0029D0  81BC               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  1951                           
  1952                           ; BSR set to: 0
  1953  0029D2  0012               	return		;funcret
  1954  0029D4  FFFF               	dw	65535	; errata NOP
  1955  0029D6                     __end_of_SetTimeCommand:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           intcon	equ	0xFF2
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _SetTimeFromRegs *****************
  1975 ;; Defined at:
  1976 ;;		line 908 in file "main.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  hourMin         1    wreg     PTR unsigned int 
  1979 ;;		 -> SetTimeCommand@hourMin(2), 
  1980 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  1981 ;;		 -> SetTimeCommand@daySec(2), 
  1982 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  1983 ;;		 -> SetTimeCommand@yearMonth(2), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  1986 ;;		 -> SetTimeCommand@hourMin(2), 
  1987 ;;  newTime        18   77[COMRAM] struct tm
  1988 ;;  newRawTime      4   72[COMRAM] long 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         2       0       0       0       0       0       0
  1999 ;;      Locals:        23       0       0       0       0       0       0
  2000 ;;      Temps:          2       0       0       0       0       0       0
  2001 ;;      Totals:        27       0       0       0       0       0       0
  2002 ;;Total ram usage:       27 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    6
  2005 ;; This function calls:
  2006 ;;		_LightStatusLed
  2007 ;;		_LoadNextEvent
  2008 ;;		_SetHourMin
  2009 ;;		_SetTime
  2010 ;;		_mktime
  2011 ;; This function is called by:
  2012 ;;		_SetTimeCommand
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text4
  2017  001DB4                     __ptext4:
  2018                           	opt stack 0
  2019  001DB4                     _SetTimeFromRegs:
  2020                           	opt stack 22
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;incstack = 0
  2024  001DB4  FFFF               	dw	65535
  2025                           
  2026                           ;SetTimeFromRegs@hourMin stored from wreg
  2027  001DB6  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2028                           
  2029                           ;main.c: 910: struct tm newTime;
  2030                           ;main.c: 911: newTime.tm_year = (*yearMonth >> 8) + 100;
  2031  001DB8  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2032  001DBA  6ED9               	movwf	fsr2l,c
  2033  001DBC  6ADA               	clrf	fsr2h,c
  2034  001DBE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2035  001DC2  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2036  001DC6  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2037  001DCA  6A48               	clrf	??_SetTimeFromRegs+1,c
  2038  001DCC  0E64               	movlw	100
  2039  001DCE  2447               	addwf	??_SetTimeFromRegs,w,c
  2040  001DD0  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2041  001DD2  0E00               	movlw	0
  2042  001DD4  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2043  001DD6  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2044                           
  2045                           ;main.c: 912: newTime.tm_mon = *yearMonth & 0xFF;
  2046  001DD8  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2047  001DDA  6ED9               	movwf	fsr2l,c
  2048  001DDC  6ADA               	clrf	fsr2h,c
  2049  001DDE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2050  001DE2  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2051  001DE6  5047               	movf	??_SetTimeFromRegs,w,c
  2052  001DE8  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2053  001DEA  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2054                           
  2055                           ;main.c: 913: newTime.tm_mday = *daySec >> 8;
  2056  001DEC  5045               	movf	SetTimeFromRegs@daySec,w,c
  2057  001DEE  6ED9               	movwf	fsr2l,c
  2058  001DF0  6ADA               	clrf	fsr2h,c
  2059  001DF2  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2060  001DF6  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2061  001DFA  5048               	movf	??_SetTimeFromRegs+1,w,c
  2062  001DFC  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2063  001DFE  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2064                           
  2065                           ;main.c: 914: newTime.tm_hour = *hourMin >> 8;
  2066  001E00  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2067  001E02  6ED9               	movwf	fsr2l,c
  2068  001E04  6ADA               	clrf	fsr2h,c
  2069  001E06  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2070  001E0A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2071  001E0E  5048               	movf	??_SetTimeFromRegs+1,w,c
  2072  001E10  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2073  001E12  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2074                           
  2075                           ;main.c: 915: newTime.tm_min = *hourMin & 0xFF;
  2076  001E14  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2077  001E16  6ED9               	movwf	fsr2l,c
  2078  001E18  6ADA               	clrf	fsr2h,c
  2079  001E1A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2080  001E1E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2081  001E22  5047               	movf	??_SetTimeFromRegs,w,c
  2082  001E24  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2083  001E26  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2084                           
  2085                           ;main.c: 916: newTime.tm_sec = *daySec & 0xFF;
  2086  001E28  5045               	movf	SetTimeFromRegs@daySec,w,c
  2087  001E2A  6ED9               	movwf	fsr2l,c
  2088  001E2C  6ADA               	clrf	fsr2h,c
  2089  001E2E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2090  001E32  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2091  001E36  5047               	movf	??_SetTimeFromRegs,w,c
  2092  001E38  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2093  001E3A  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2094                           
  2095                           ;main.c: 917: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  2096  001E3C  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2097  001E3E  6E07               	movwf	SetHourMin@newMin,c
  2098  001E40  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2099  001E42  0F04               	addlw	4
  2100  001E44  EC5F  F015         	call	_SetHourMin
  2101                           
  2102                           ;main.c: 918: time_t newRawTime = mktime(&newTime);
  2103  001E48  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2104  001E4A  EC37  F003         	call	_mktime
  2105  001E4E  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2106  001E52  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2107  001E56  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2108  001E5A  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2109                           
  2110                           ;main.c: 919: SetTime(&newRawTime);
  2111  001E5E  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2112  001E60  EC50  F015         	call	_SetTime
  2113                           
  2114                           ;main.c: 920: LightStatusLed(0x05, 0, 0);
  2115  001E64  0E00               	movlw	0
  2116  001E66  6E07               	movwf	LightStatusLed@on,c
  2117  001E68  6E08               	movwf	LightStatusLed@blink,c
  2118  001E6A  0E05               	movlw	5
  2119  001E6C  EC85  F00D         	call	_LightStatusLed
  2120                           
  2121                           ;main.c: 921: LoadNextEvent();
  2122  001E70  EFFA  F00B         	goto	_LoadNextEvent	;wreg free
  2123  001E74  FFFF               	dw	65535	; errata NOP
  2124  001E76                     __end_of_SetTimeFromRegs:
  2125                           	opt stack 0
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           intcon	equ	0xFF2
  2131                           postinc0	equ	0xFEE
  2132                           wreg	equ	0xFE8
  2133                           postdec1	equ	0xFE5
  2134                           fsr1h	equ	0xFE2
  2135                           fsr1l	equ	0xFE1
  2136                           indf2	equ	0xFDF
  2137                           postinc2	equ	0xFDE
  2138                           postdec2	equ	0xFDD
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _mktime *****************
  2144 ;; Defined at:
  2145 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  timeptr         1    wreg     PTR struct tm
  2148 ;;		 -> SetTimeFromRegs@newTime(18), 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2151 ;;		 -> SetTimeFromRegs@newTime(18), 
  2152 ;;  tt              4   63[COMRAM] long 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  4   45[COMRAM] long 
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2162 ;;      Params:         4       0       0       0       0       0       0
  2163 ;;      Locals:         5       0       0       0       0       0       0
  2164 ;;      Temps:         14       0       0       0       0       0       0
  2165 ;;      Totals:        23       0       0       0       0       0       0
  2166 ;;Total ram usage:       23 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    5
  2169 ;; This function calls:
  2170 ;;		_ymd_to_scalar
  2171 ;; This function is called by:
  2172 ;;		_SetTimeFromRegs
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text5
  2177  00066E                     __ptext5:
  2178                           	opt stack 0
  2179  00066E                     _mktime:
  2180                           	opt stack 22
  2181                           
  2182                           ;incstack = 0
  2183  00066E  FFFF               	dw	65535
  2184                           
  2185                           ;mktime@timeptr stored from wreg
  2186  000670  6E44               	movwf	mktime@timeptr,c
  2187  000672  5044               	movf	mktime@timeptr,w,c
  2188  000674  6ED9               	movwf	fsr2l,c
  2189  000676  6ADA               	clrf	fsr2h,c
  2190  000678  0E0A               	movlw	10
  2191  00067A  26D9               	addwf	fsr2l,f,c
  2192  00067C  0E01               	movlw	1
  2193  00067E  BEDB               	btfsc	plusw2,7,c
  2194  000680  D012               	goto	l1281
  2195  000682  50DB               	movf	plusw2,w,c
  2196  000684  E103               	bnz	u4290
  2197  000686  0E46               	movlw	70
  2198  000688  5CDE               	subwf	postinc2,w,c
  2199  00068A  E30D               	bnc	l1281
  2200  00068C                     u4290:
  2201  00068C  5044               	movf	mktime@timeptr,w,c
  2202  00068E  6ED9               	movwf	fsr2l,c
  2203  000690  6ADA               	clrf	fsr2h,c
  2204  000692  0E0A               	movlw	10
  2205  000694  26D9               	addwf	fsr2l,f,c
  2206  000696  0E01               	movlw	1
  2207  000698  BEDB               	btfsc	plusw2,7,c
  2208  00069A  D00B               	goto	l5170
  2209  00069C  50DB               	movf	plusw2,w,c
  2210  00069E  E103               	bnz	u4300
  2211  0006A0  0E8B               	movlw	139
  2212  0006A2  5CDE               	subwf	postinc2,w,c
  2213  0006A4  E306               	bnc	l5170
  2214  0006A6                     u4300:
  2215  0006A6                     l1281:
  2216  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2217  0006A8  6840               	setf	mktime@tt,c
  2218  0006AA  6841               	setf	mktime@tt+1,c
  2219  0006AC  6842               	setf	mktime@tt+2,c
  2220  0006AE  6843               	setf	mktime@tt+3,c
  2221  0006B0  D15C               	goto	l5180
  2222  0006B2                     l5170:
  2223  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2224  0006B4  5044               	movf	mktime@timeptr,w,c
  2225  0006B6  6ED9               	movwf	fsr2l,c
  2226  0006B8  6ADA               	clrf	fsr2h,c
  2227  0006BA  0E0A               	movlw	10
  2228  0006BC  26D9               	addwf	fsr2l,f,c
  2229  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2230  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2231  0006C6  0E6C               	movlw	108
  2232  0006C8  2432               	addwf	??_mktime,w,c
  2233  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2234  0006CC  0E07               	movlw	7
  2235  0006CE  2033               	addwfc	??_mktime+1,w,c
  2236  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2237  0006D2  5044               	movf	mktime@timeptr,w,c
  2238  0006D4  6ED9               	movwf	fsr2l,c
  2239  0006D6  6ADA               	clrf	fsr2h,c
  2240  0006D8  0E08               	movlw	8
  2241  0006DA  26D9               	addwf	fsr2l,f,c
  2242  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2243  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2244  0006E4  2834               	incf	??_mktime+2,w,c
  2245  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2246  0006E8  0E00               	movlw	0
  2247  0006EA  2035               	addwfc	??_mktime+3,w,c
  2248  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2249  0006EE  5044               	movf	mktime@timeptr,w,c
  2250  0006F0  6ED9               	movwf	fsr2l,c
  2251  0006F2  6ADA               	clrf	fsr2h,c
  2252  0006F4  0E06               	movlw	6
  2253  0006F6  26D9               	addwf	fsr2l,f,c
  2254  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2255  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2256  000700  ECA1  F010         	call	_ymd_to_scalar	;wreg free
  2257  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2258  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2259  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2260  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2261  000714  0E07               	movlw	7
  2262  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2263  000718  0EB2               	movlw	178
  2264  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2265  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2266  00071E  0E01               	movlw	1
  2267  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2268  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2269  000724  6E22               	movwf	ymd_to_scalar@day,c
  2270  000726  ECA1  F010         	call	_ymd_to_scalar	;wreg free
  2271  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2272  00072C  5E40               	subwf	mktime@tt,f,c
  2273  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2274  000730  5A41               	subwfb	mktime@tt+1,f,c
  2275  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2276  000734  5A42               	subwfb	mktime@tt+2,f,c
  2277  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2278  000738  5A43               	subwfb	mktime@tt+3,f,c
  2279  00073A  5044               	movf	mktime@timeptr,w,c
  2280  00073C  6ED9               	movwf	fsr2l,c
  2281  00073E  6ADA               	clrf	fsr2h,c
  2282  000740  0E04               	movlw	4
  2283  000742  26D9               	addwf	fsr2l,f,c
  2284  000744  CFDE F032          	movff	postinc2,??_mktime
  2285  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2286  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2287  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2288  000754  0E00               	movlw	0
  2289  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2290  000758  0EFF               	movlw	255
  2291  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2292  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2293  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2294  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2295  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2296  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2297  00076E  0E18               	movlw	24
  2298  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2299  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2300  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2301  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2302  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2303  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2304  000780  50F3               	movf	prodl,w,c
  2305  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2306  000784  50F4               	movf	prodh,w,c
  2307  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2308  000788  0E00               	movlw	0
  2309  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2310  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2311  00078E  50F3               	movf	prodl,w,c
  2312  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2313  000792  50F4               	movf	prodh,w,c
  2314  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2315  000796  0E00               	movlw	0
  2316  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2317  00079A  0E18               	movlw	24
  2318  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2319  00079E  50F3               	movf	prodl,w,c
  2320  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2321  0007A2  50F4               	movf	prodh,w,c
  2322  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2323  0007A6  0E00               	movlw	0
  2324  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2325  0007AA  50F3               	movf	prodl,w,c
  2326  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2327  0007AE  50F4               	movf	prodh,w,c
  2328  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2329  0007B2  0E00               	movlw	0
  2330  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2331  0007B6  50F3               	movf	prodl,w,c
  2332  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2333  0007BA  50F4               	movf	prodh,w,c
  2334  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2335  0007BE  0E18               	movlw	24
  2336  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2337  0007C2  50F3               	movf	prodl,w,c
  2338  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2339  0007C6  0E00               	movlw	0
  2340  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2341  0007CA  50F3               	movf	prodl,w,c
  2342  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2343  0007CE  0E00               	movlw	0
  2344  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2345  0007D2  50F3               	movf	prodl,w,c
  2346  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2347  0007D6  0E00               	movlw	0
  2348  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2349  0007DA  50F3               	movf	prodl,w,c
  2350  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2351  0007DE  5034               	movf	??_mktime+2,w,c
  2352  0007E0  243C               	addwf	??_mktime+10,w,c
  2353  0007E2  6E40               	movwf	mktime@tt,c
  2354  0007E4  5035               	movf	??_mktime+3,w,c
  2355  0007E6  203D               	addwfc	??_mktime+11,w,c
  2356  0007E8  6E41               	movwf	mktime@tt+1,c
  2357  0007EA  5036               	movf	??_mktime+4,w,c
  2358  0007EC  203E               	addwfc	??_mktime+12,w,c
  2359  0007EE  6E42               	movwf	mktime@tt+2,c
  2360  0007F0  5037               	movf	??_mktime+5,w,c
  2361  0007F2  203F               	addwfc	??_mktime+13,w,c
  2362  0007F4  6E43               	movwf	mktime@tt+3,c
  2363  0007F6  5044               	movf	mktime@timeptr,w,c
  2364  0007F8  6ED9               	movwf	fsr2l,c
  2365  0007FA  6ADA               	clrf	fsr2h,c
  2366  0007FC  0E02               	movlw	2
  2367  0007FE  26D9               	addwf	fsr2l,f,c
  2368  000800  CFDE F032          	movff	postinc2,??_mktime
  2369  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2370  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2371  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2372  000810  0E00               	movlw	0
  2373  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2374  000814  0EFF               	movlw	255
  2375  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2376  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2377  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2378  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2379  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2380  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2381  00082A  0E3C               	movlw	60
  2382  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2383  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2384  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2385  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2386  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2387  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2388  00083C  50F3               	movf	prodl,w,c
  2389  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2390  000840  50F4               	movf	prodh,w,c
  2391  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2392  000844  0E00               	movlw	0
  2393  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2394  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2395  00084A  50F3               	movf	prodl,w,c
  2396  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2397  00084E  50F4               	movf	prodh,w,c
  2398  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2399  000852  0E00               	movlw	0
  2400  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2401  000856  0E3C               	movlw	60
  2402  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2403  00085A  50F3               	movf	prodl,w,c
  2404  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2405  00085E  50F4               	movf	prodh,w,c
  2406  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2407  000862  0E00               	movlw	0
  2408  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2409  000866  50F3               	movf	prodl,w,c
  2410  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2411  00086A  50F4               	movf	prodh,w,c
  2412  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2413  00086E  0E00               	movlw	0
  2414  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2415  000872  50F3               	movf	prodl,w,c
  2416  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2417  000876  50F4               	movf	prodh,w,c
  2418  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2419  00087A  0E3C               	movlw	60
  2420  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2421  00087E  50F3               	movf	prodl,w,c
  2422  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2423  000882  0E00               	movlw	0
  2424  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2425  000886  50F3               	movf	prodl,w,c
  2426  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2427  00088A  0E00               	movlw	0
  2428  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2429  00088E  50F3               	movf	prodl,w,c
  2430  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2431  000892  0E00               	movlw	0
  2432  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2433  000896  50F3               	movf	prodl,w,c
  2434  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2435  00089A  5034               	movf	??_mktime+2,w,c
  2436  00089C  243C               	addwf	??_mktime+10,w,c
  2437  00089E  6E40               	movwf	mktime@tt,c
  2438  0008A0  5035               	movf	??_mktime+3,w,c
  2439  0008A2  203D               	addwfc	??_mktime+11,w,c
  2440  0008A4  6E41               	movwf	mktime@tt+1,c
  2441  0008A6  5036               	movf	??_mktime+4,w,c
  2442  0008A8  203E               	addwfc	??_mktime+12,w,c
  2443  0008AA  6E42               	movwf	mktime@tt+2,c
  2444  0008AC  5037               	movf	??_mktime+5,w,c
  2445  0008AE  203F               	addwfc	??_mktime+13,w,c
  2446  0008B0  6E43               	movwf	mktime@tt+3,c
  2447  0008B2  5044               	movf	mktime@timeptr,w,c
  2448  0008B4  6ED9               	movwf	fsr2l,c
  2449  0008B6  6ADA               	clrf	fsr2h,c
  2450  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2451  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2452  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2453  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2454  0008C8  0E00               	movlw	0
  2455  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2456  0008CC  0EFF               	movlw	255
  2457  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2458  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2459  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2460  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2461  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2462  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2463  0008E2  0E3C               	movlw	60
  2464  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2465  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2466  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2467  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2468  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2469  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2470  0008F4  50F3               	movf	prodl,w,c
  2471  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2472  0008F8  50F4               	movf	prodh,w,c
  2473  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2474  0008FC  0E00               	movlw	0
  2475  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2476  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2477  000902  50F3               	movf	prodl,w,c
  2478  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2479  000906  50F4               	movf	prodh,w,c
  2480  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2481  00090A  0E00               	movlw	0
  2482  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2483  00090E  0E3C               	movlw	60
  2484  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2485  000912  50F3               	movf	prodl,w,c
  2486  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2487  000916  50F4               	movf	prodh,w,c
  2488  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2489  00091A  0E00               	movlw	0
  2490  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2491  00091E  50F3               	movf	prodl,w,c
  2492  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2493  000922  50F4               	movf	prodh,w,c
  2494  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2495  000926  0E00               	movlw	0
  2496  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2497  00092A  50F3               	movf	prodl,w,c
  2498  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2499  00092E  50F4               	movf	prodh,w,c
  2500  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2501  000932  0E3C               	movlw	60
  2502  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2503  000936  50F3               	movf	prodl,w,c
  2504  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2505  00093A  0E00               	movlw	0
  2506  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2507  00093E  50F3               	movf	prodl,w,c
  2508  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2509  000942  0E00               	movlw	0
  2510  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2511  000946  50F3               	movf	prodl,w,c
  2512  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2513  00094A  0E00               	movlw	0
  2514  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2515  00094E  50F3               	movf	prodl,w,c
  2516  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2517  000952  5034               	movf	??_mktime+2,w,c
  2518  000954  243C               	addwf	??_mktime+10,w,c
  2519  000956  6E40               	movwf	mktime@tt,c
  2520  000958  5035               	movf	??_mktime+3,w,c
  2521  00095A  203D               	addwfc	??_mktime+11,w,c
  2522  00095C  6E41               	movwf	mktime@tt+1,c
  2523  00095E  5036               	movf	??_mktime+4,w,c
  2524  000960  203E               	addwfc	??_mktime+12,w,c
  2525  000962  6E42               	movwf	mktime@tt+2,c
  2526  000964  5037               	movf	??_mktime+5,w,c
  2527  000966  203F               	addwfc	??_mktime+13,w,c
  2528  000968  6E43               	movwf	mktime@tt+3,c
  2529  00096A                     l5180:
  2530  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2531  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2532  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2533  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2534  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2535  00097C  0012               	return		;funcret
  2536  00097E  FFFF               	dw	65535	; errata NOP
  2537  000980                     __end_of_mktime:
  2538                           	opt stack 0
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           postdec1	equ	0xFE5
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           plusw2	equ	0xFDB
  2555                           fsr2h	equ	0xFDA
  2556                           fsr2l	equ	0xFD9
  2557                           status	equ	0xFD8
  2558                           
  2559 ;; *************** function _ymd_to_scalar *****************
  2560 ;; Defined at:
  2561 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;  yr              2   29[COMRAM] unsigned int 
  2564 ;;  mo              2   31[COMRAM] unsigned int 
  2565 ;;  day             2   33[COMRAM] unsigned int 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  scalar          4   41[COMRAM] long 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  4   29[COMRAM] long 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2577 ;;      Params:         6       0       0       0       0       0       0
  2578 ;;      Locals:         6       0       0       0       0       0       0
  2579 ;;      Temps:          4       0       0       0       0       0       0
  2580 ;;      Totals:        16       0       0       0       0       0       0
  2581 ;;Total ram usage:       16 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    4
  2584 ;; This function calls:
  2585 ;;		_isleap
  2586 ;;		_months_to_days
  2587 ;;		_years_to_days
  2588 ;; This function is called by:
  2589 ;;		_mktime
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text6
  2594  002142                     __ptext6:
  2595                           	opt stack 0
  2596  002142                     _ymd_to_scalar:
  2597                           	opt stack 22
  2598                           
  2599                           ;incstack = 0
  2600  002142  FFFF               	dw	65535
  2601  002144  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2602  002148  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2603  00214C  ECF7  F013         	call	_months_to_days	;wreg free
  2604  002150  5022               	movf	ymd_to_scalar@day,w,c
  2605  002152  260E               	addwf	?_months_to_days,f,c
  2606  002154  5023               	movf	ymd_to_scalar@day+1,w,c
  2607  002156  220F               	addwfc	?_months_to_days+1,f,c
  2608  002158  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2609  00215C  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2610  002160  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2611  002162  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2612  002164  5021               	movf	ymd_to_scalar@mo+1,w,c
  2613  002166  E103               	bnz	u4070
  2614  002168  0E03               	movlw	3
  2615  00216A  5C20               	subwf	ymd_to_scalar@mo,w,c
  2616  00216C  E321               	bnc	l5026
  2617  00216E                     u4070:
  2618  00216E  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2619  002172  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2620  002176  EC61  F013         	call	_isleap	;wreg free
  2621  00217A  500C               	movf	?_isleap,w,c
  2622  00217C  100D               	iorwf	?_isleap+1,w,c
  2623  00217E  E103               	bnz	l5022
  2624  002180  6A29               	clrf	_ymd_to_scalar$2160+1,c
  2625  002182  0E02               	movlw	2
  2626  002184  D002               	goto	L1
  2627  002186                     l5022:
  2628  002186  6A29               	clrf	_ymd_to_scalar$2160+1,c
  2629  002188  0E01               	movlw	1
  2630  00218A                     L1:
  2631  00218A  FFFF               	dw	65535	; assembler added errata NOP
  2632  00218C  6E28               	movwf	_ymd_to_scalar$2160,c
  2633  00218E  C028  F024         	movff	_ymd_to_scalar$2160,??_ymd_to_scalar
  2634  002192  C029  F025         	movff	_ymd_to_scalar$2160+1,??_ymd_to_scalar+1
  2635  002196  0E00               	movlw	0
  2636  002198  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2637  00219A  0EFF               	movlw	255
  2638  00219C  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2639  00219E  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2640  0021A0  5024               	movf	??_ymd_to_scalar,w,c
  2641  0021A2  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2642  0021A4  5025               	movf	??_ymd_to_scalar+1,w,c
  2643  0021A6  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2644  0021A8  5026               	movf	??_ymd_to_scalar+2,w,c
  2645  0021AA  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2646  0021AC  5027               	movf	??_ymd_to_scalar+3,w,c
  2647  0021AE  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2648  0021B0                     l5026:
  2649  0021B0  061E               	decf	ymd_to_scalar@yr,f,c
  2650  0021B2  A0D8               	btfss	status,0,c
  2651  0021B4  061F               	decf	ymd_to_scalar@yr+1,f,c
  2652  0021B6  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2653  0021BA  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2654  0021BE  EC04  F00D         	call	_years_to_days	;wreg free
  2655  0021C2  500E               	movf	?_years_to_days,w,c
  2656  0021C4  262A               	addwf	ymd_to_scalar@scalar,f,c
  2657  0021C6  500F               	movf	?_years_to_days+1,w,c
  2658  0021C8  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2659  0021CA  5010               	movf	?_years_to_days+2,w,c
  2660  0021CC  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2661  0021CE  5011               	movf	?_years_to_days+3,w,c
  2662  0021D0  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2663  0021D2  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2664  0021D6  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2665  0021DA  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2666  0021DE  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2667  0021E2  0012               	return		;funcret
  2668  0021E4  FFFF               	dw	65535	; errata NOP
  2669  0021E6                     __end_of_ymd_to_scalar:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           intcon	equ	0xFF2
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1h	equ	0xFE2
  2682                           fsr1l	equ	0xFE1
  2683                           indf2	equ	0xFDF
  2684                           postinc2	equ	0xFDE
  2685                           postdec2	equ	0xFDD
  2686                           plusw2	equ	0xFDB
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _years_to_days *****************
  2692 ;; Defined at:
  2693 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  yr              2   13[COMRAM] unsigned int 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  ret             4   25[COMRAM] long 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  4   13[COMRAM] long 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2707 ;;      Params:         4       0       0       0       0       0       0
  2708 ;;      Locals:         4       0       0       0       0       0       0
  2709 ;;      Temps:          8       0       0       0       0       0       0
  2710 ;;      Totals:        16       0       0       0       0       0       0
  2711 ;;Total ram usage:       16 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    3
  2714 ;; This function calls:
  2715 ;;		___lwdiv
  2716 ;; This function is called by:
  2717 ;;		_ymd_to_scalar
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text7
  2722  001A08                     __ptext7:
  2723                           	opt stack 0
  2724  001A08                     _years_to_days:
  2725                           	opt stack 22
  2726                           
  2727                           ;incstack = 0
  2728  001A08  FFFF               	dw	65535
  2729  001A0A  500E               	movf	years_to_days@yr,w,c
  2730  001A0C  6E12               	movwf	??_years_to_days& (0+255),c
  2731  001A0E  500F               	movf	years_to_days@yr+1,w,c
  2732  001A10  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  2733  001A12  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  2734  001A14  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  2735  001A16  0E6D               	movlw	109
  2736  001A18  0212               	mulwf	??_years_to_days& (0+255),c
  2737  001A1A  CFF3 F016          	movff	prodl,??_years_to_days+4
  2738  001A1E  CFF4 F017          	movff	prodh,??_years_to_days+5
  2739  001A22  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  2740  001A24  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  2741  001A26  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2742  001A28  50F3               	movf	prodl,w,c
  2743  001A2A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2744  001A2C  50F4               	movf	prodh,w,c
  2745  001A2E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2746  001A30  0E00               	movlw	0
  2747  001A32  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2748  001A34  0E01               	movlw	1
  2749  001A36  0212               	mulwf	??_years_to_days& (0+255),c
  2750  001A38  50F3               	movf	prodl,w,c
  2751  001A3A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2752  001A3C  50F4               	movf	prodh,w,c
  2753  001A3E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2754  001A40  0E00               	movlw	0
  2755  001A42  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2756  001A44  0E6D               	movlw	109
  2757  001A46  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2758  001A48  50F3               	movf	prodl,w,c
  2759  001A4A  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2760  001A4C  50F4               	movf	prodh,w,c
  2761  001A4E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2762  001A50  0E01               	movlw	1
  2763  001A52  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2764  001A54  50F3               	movf	prodl,w,c
  2765  001A56  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2766  001A58  50F4               	movf	prodh,w,c
  2767  001A5A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2768  001A5C  0E00               	movlw	0
  2769  001A5E  0212               	mulwf	??_years_to_days& (0+255),c
  2770  001A60  50F3               	movf	prodl,w,c
  2771  001A62  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2772  001A64  50F4               	movf	prodh,w,c
  2773  001A66  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2774  001A68  0E6D               	movlw	109
  2775  001A6A  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  2776  001A6C  50F3               	movf	prodl,w,c
  2777  001A6E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2778  001A70  0E01               	movlw	1
  2779  001A72  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2780  001A74  50F3               	movf	prodl,w,c
  2781  001A76  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2782  001A78  0E00               	movlw	0
  2783  001A7A  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2784  001A7C  50F3               	movf	prodl,w,c
  2785  001A7E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2786  001A80  0E00               	movlw	0
  2787  001A82  0212               	mulwf	??_years_to_days& (0+255),c
  2788  001A84  50F3               	movf	prodl,w,c
  2789  001A86  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2790  001A88  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  2791  001A8C  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  2792  001A90  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  2793  001A94  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  2794  001A98  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2795  001A9C  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2796  001AA0  6A0A               	clrf	___lwdiv@divisor+1,c
  2797  001AA2  0E64               	movlw	100
  2798  001AA4  6E09               	movwf	___lwdiv@divisor,c
  2799  001AA6  EC37  F013         	call	___lwdiv	;wreg free
  2800  001AAA  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  2801  001AAE  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  2802  001AB2  90D8               	bcf	status,0,c
  2803  001AB4  3213               	rrcf	??_years_to_days+1,f,c
  2804  001AB6  3212               	rrcf	??_years_to_days,f,c
  2805  001AB8  90D8               	bcf	status,0,c
  2806  001ABA  3213               	rrcf	??_years_to_days+1,f,c
  2807  001ABC  3212               	rrcf	??_years_to_days,f,c
  2808  001ABE  5007               	movf	?___lwdiv,w,c
  2809  001AC0  5E12               	subwf	??_years_to_days,f,c
  2810  001AC2  5008               	movf	?___lwdiv+1,w,c
  2811  001AC4  5A13               	subwfb	??_years_to_days+1,f,c
  2812  001AC6  5012               	movf	??_years_to_days,w,c
  2813  001AC8  261A               	addwf	years_to_days@ret,f,c
  2814  001ACA  5013               	movf	??_years_to_days+1,w,c
  2815  001ACC  221B               	addwfc	years_to_days@ret+1,f,c
  2816  001ACE  0E00               	movlw	0
  2817  001AD0  221C               	addwfc	years_to_days@ret+2,f,c
  2818  001AD2  221D               	addwfc	years_to_days@ret+3,f,c
  2819  001AD4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2820  001AD8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2821  001ADC  0E01               	movlw	1
  2822  001ADE  6E0A               	movwf	___lwdiv@divisor+1,c
  2823  001AE0  0E90               	movlw	144
  2824  001AE2  6E09               	movwf	___lwdiv@divisor,c
  2825  001AE4  EC37  F013         	call	___lwdiv	;wreg free
  2826  001AE8  5007               	movf	?___lwdiv,w,c
  2827  001AEA  261A               	addwf	years_to_days@ret,f,c
  2828  001AEC  5008               	movf	?___lwdiv+1,w,c
  2829  001AEE  221B               	addwfc	years_to_days@ret+1,f,c
  2830  001AF0  0E00               	movlw	0
  2831  001AF2  221C               	addwfc	years_to_days@ret+2,f,c
  2832  001AF4  221D               	addwfc	years_to_days@ret+3,f,c
  2833  001AF6  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  2834  001AFA  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  2835  001AFE  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  2836  001B02  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  2837  001B06  0C00               	retlw	0	;funcret
  2838  001B08  FFFF               	dw	65535	; errata NOP
  2839  001B0A                     __end_of_years_to_days:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           postdec1	equ	0xFE5
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           postinc2	equ	0xFDE
  2855                           postdec2	equ	0xFDD
  2856                           plusw2	equ	0xFDB
  2857                           fsr2h	equ	0xFDA
  2858                           fsr2l	equ	0xFD9
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _months_to_days *****************
  2862 ;; Defined at:
  2863 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  month           2   13[COMRAM] unsigned int 
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  2   13[COMRAM] unsigned int 
  2870 ;; Registers used:
  2871 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         2       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0
  2879 ;;      Temps:          4       0       0       0       0       0       0
  2880 ;;      Totals:         6       0       0       0       0       0       0
  2881 ;;Total ram usage:        6 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    3
  2884 ;; This function calls:
  2885 ;;		___lwdiv
  2886 ;; This function is called by:
  2887 ;;		_ymd_to_scalar
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text8
  2892  0027EE                     __ptext8:
  2893                           	opt stack 0
  2894  0027EE                     _months_to_days:
  2895                           	opt stack 22
  2896                           
  2897                           ;incstack = 0
  2898  0027EE  FFFF               	dw	65535
  2899  0027F0  0EF1               	movlw	241
  2900  0027F2  6E10               	movwf	??_months_to_days& (0+255),c
  2901  0027F4  0E0B               	movlw	11
  2902  0027F6  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  2903  0027F8  5010               	movf	??_months_to_days& (0+255),w,c
  2904  0027FA  020E               	mulwf	months_to_days@month,c
  2905  0027FC  CFF3 F012          	movff	prodl,??_months_to_days+2
  2906  002800  CFF4 F013          	movff	prodh,??_months_to_days+3
  2907  002804  020F               	mulwf	months_to_days@month+1,c
  2908  002806  50F3               	movf	prodl,w,c
  2909  002808  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2910  00280A  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  2911  00280C  020E               	mulwf	months_to_days@month,c
  2912  00280E  50F3               	movf	prodl,w,c
  2913  002810  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2914  002812  0E41               	movlw	65
  2915  002814  2412               	addwf	??_months_to_days+2,w,c
  2916  002816  6E07               	movwf	___lwdiv@dividend,c
  2917  002818  0EF4               	movlw	244
  2918  00281A  2013               	addwfc	??_months_to_days+3,w,c
  2919  00281C  6E08               	movwf	___lwdiv@dividend+1,c
  2920  00281E  6A0A               	clrf	___lwdiv@divisor+1,c
  2921  002820  0E64               	movlw	100
  2922  002822  6E09               	movwf	___lwdiv@divisor,c
  2923  002824  EC37  F013         	call	___lwdiv	;wreg free
  2924  002828  C007  F00E         	movff	?___lwdiv,?_months_to_days
  2925  00282C  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  2926  002830  0012               	return		;funcret
  2927  002832  FFFF               	dw	65535	; errata NOP
  2928  002834                     __end_of_months_to_days:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           prodh	equ	0xFF4
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           postinc0	equ	0xFEE
  2938                           wreg	equ	0xFE8
  2939                           postdec1	equ	0xFE5
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           plusw2	equ	0xFDB
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function ___lwdiv *****************
  2951 ;; Defined at:
  2952 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  dividend        2    6[COMRAM] unsigned int 
  2955 ;;  divisor         2    8[COMRAM] unsigned int 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  quotient        2   11[COMRAM] unsigned int 
  2958 ;;  counter         1   10[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  2    6[COMRAM] unsigned int 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2968 ;;      Params:         4       0       0       0       0       0       0
  2969 ;;      Locals:         3       0       0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0
  2971 ;;      Totals:         7       0       0       0       0       0       0
  2972 ;;Total ram usage:        7 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    2
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_months_to_days
  2979 ;;		_years_to_days
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text9
  2984  00266E                     __ptext9:
  2985                           	opt stack 0
  2986  00266E                     ___lwdiv:
  2987                           	opt stack 22
  2988                           
  2989                           ;incstack = 0
  2990  00266E  FFFF               	dw	65535
  2991  002670  6A0C               	clrf	___lwdiv@quotient,c
  2992  002672  6A0D               	clrf	___lwdiv@quotient+1,c
  2993  002674  5009               	movf	___lwdiv@divisor,w,c
  2994  002676  100A               	iorwf	___lwdiv@divisor+1,w,c
  2995  002678  E01E               	bz	l1235
  2996  00267A  0E01               	movlw	1
  2997  00267C  6E0B               	movwf	___lwdiv@counter,c
  2998  00267E  D005               	goto	l4936
  2999  002680                     l4934:
  3000  002680  FFFF               	dw	65535	; assembler added errata NOP
  3001  002682  90D8               	bcf	status,0,c
  3002  002684  3609               	rlcf	___lwdiv@divisor,f,c
  3003  002686  360A               	rlcf	___lwdiv@divisor+1,f,c
  3004  002688  2A0B               	incf	___lwdiv@counter,f,c
  3005  00268A                     l4936:
  3006  00268A  FFFF               	dw	65535	; assembler added errata NOP
  3007  00268C  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3008  00268E  D7F8               	goto	l4934
  3009  002690                     l4938:
  3010  002690  FFFF               	dw	65535	; assembler added errata NOP
  3011  002692  90D8               	bcf	status,0,c
  3012  002694  360C               	rlcf	___lwdiv@quotient,f,c
  3013  002696  360D               	rlcf	___lwdiv@quotient+1,f,c
  3014  002698  5009               	movf	___lwdiv@divisor,w,c
  3015  00269A  5C07               	subwf	___lwdiv@dividend,w,c
  3016  00269C  500A               	movf	___lwdiv@divisor+1,w,c
  3017  00269E  5808               	subwfb	___lwdiv@dividend+1,w,c
  3018  0026A0  E305               	bnc	l4946
  3019  0026A2  5009               	movf	___lwdiv@divisor,w,c
  3020  0026A4  5E07               	subwf	___lwdiv@dividend,f,c
  3021  0026A6  500A               	movf	___lwdiv@divisor+1,w,c
  3022  0026A8  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3023  0026AA  800C               	bsf	___lwdiv@quotient,0,c
  3024  0026AC                     l4946:
  3025  0026AC  90D8               	bcf	status,0,c
  3026  0026AE  320A               	rrcf	___lwdiv@divisor+1,f,c
  3027  0026B0  3209               	rrcf	___lwdiv@divisor,f,c
  3028  0026B2  2E0B               	decfsz	___lwdiv@counter,f,c
  3029  0026B4  D7ED               	goto	l4938
  3030  0026B6                     l1235:
  3031  0026B6  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3032  0026BA  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3033  0026BE  0012               	return		;funcret
  3034  0026C0  FFFF               	dw	65535	; errata NOP
  3035  0026C2                     __end_of___lwdiv:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           intcon	equ	0xFF2
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           indf2	equ	0xFDF
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           plusw2	equ	0xFDB
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _isleap *****************
  3058 ;; Defined at:
  3059 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  yr              2   11[COMRAM] unsigned int 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  2   11[COMRAM] int 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         2       0       0       0       0       0       0
  3074 ;;      Locals:         1       0       0       0       0       0       0
  3075 ;;      Temps:          1       0       0       0       0       0       0
  3076 ;;      Totals:         4       0       0       0       0       0       0
  3077 ;;Total ram usage:        4 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		___lwmod
  3082 ;; This function is called by:
  3083 ;;		_ymd_to_scalar
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text10
  3088  0026C2                     __ptext10:
  3089                           	opt stack 0
  3090  0026C2                     _isleap:
  3091                           	opt stack 22
  3092                           
  3093                           ;incstack = 0
  3094  0026C2  FFFF               	dw	65535
  3095  0026C4  0E01               	movlw	1
  3096  0026C6  6E0F               	movwf	_isleap$2147,c
  3097  0026C8  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3098  0026CC  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3099  0026D0  6E0A               	movwf	___lwmod@divisor+1,c
  3100  0026D2  0E90               	movlw	144
  3101  0026D4  6E09               	movwf	___lwmod@divisor,c
  3102  0026D6  ECD3  F013         	call	___lwmod	;wreg free
  3103  0026DA  5007               	movf	?___lwmod,w,c
  3104  0026DC  1008               	iorwf	?___lwmod+1,w,c
  3105  0026DE  E012               	bz	l1261
  3106  0026E0  C00C  F00E         	movff	isleap@yr,??_isleap
  3107  0026E4  0E03               	movlw	3
  3108  0026E6  160E               	andwf	??_isleap,f,c
  3109  0026E8  E10C               	bnz	l4926
  3110  0026EA  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3111  0026EE  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3112  0026F2  6A0A               	clrf	___lwmod@divisor+1,c
  3113  0026F4  0E64               	movlw	100
  3114  0026F6  6E09               	movwf	___lwmod@divisor,c
  3115  0026F8  ECD3  F013         	call	___lwmod	;wreg free
  3116  0026FC  5007               	movf	?___lwmod,w,c
  3117  0026FE  1008               	iorwf	?___lwmod+1,w,c
  3118  002700  E101               	bnz	l1261
  3119  002702                     l4926:
  3120  002702  6A0F               	clrf	_isleap$2147,c
  3121  002704                     l1261:
  3122  002704  C00F  F00C         	movff	_isleap$2147,?_isleap
  3123  002708  6A0D               	clrf	?_isleap+1,c
  3124  00270A  0012               	return		;funcret
  3125  00270C  FFFF               	dw	65535	; errata NOP
  3126  00270E                     __end_of_isleap:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           intcon	equ	0xFF2
  3135                           postinc0	equ	0xFEE
  3136                           wreg	equ	0xFE8
  3137                           postdec1	equ	0xFE5
  3138                           fsr1h	equ	0xFE2
  3139                           fsr1l	equ	0xFE1
  3140                           indf2	equ	0xFDF
  3141                           postinc2	equ	0xFDE
  3142                           postdec2	equ	0xFDD
  3143                           plusw2	equ	0xFDB
  3144                           fsr2h	equ	0xFDA
  3145                           fsr2l	equ	0xFD9
  3146                           status	equ	0xFD8
  3147                           
  3148 ;; *************** function ___lwmod *****************
  3149 ;; Defined at:
  3150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;  dividend        2    6[COMRAM] unsigned int 
  3153 ;;  divisor         2    8[COMRAM] unsigned int 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  counter         1   10[COMRAM] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  2    6[COMRAM] unsigned int 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3165 ;;      Params:         4       0       0       0       0       0       0
  3166 ;;      Locals:         1       0       0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0
  3168 ;;      Totals:         5       0       0       0       0       0       0
  3169 ;;Total ram usage:        5 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    2
  3172 ;; This function calls:
  3173 ;;		Nothing
  3174 ;; This function is called by:
  3175 ;;		_isleap
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text11
  3180  0027A6                     __ptext11:
  3181                           	opt stack 0
  3182  0027A6                     ___lwmod:
  3183                           	opt stack 22
  3184                           
  3185                           ;incstack = 0
  3186  0027A6  FFFF               	dw	65535
  3187  0027A8  5009               	movf	___lwmod@divisor,w,c
  3188  0027AA  100A               	iorwf	___lwmod@divisor+1,w,c
  3189  0027AC  E01A               	bz	l1245
  3190  0027AE  0E01               	movlw	1
  3191  0027B0  6E0B               	movwf	___lwmod@counter,c
  3192  0027B2  D005               	goto	l4956
  3193  0027B4                     l4954:
  3194  0027B4  FFFF               	dw	65535	; assembler added errata NOP
  3195  0027B6  90D8               	bcf	status,0,c
  3196  0027B8  3609               	rlcf	___lwmod@divisor,f,c
  3197  0027BA  360A               	rlcf	___lwmod@divisor+1,f,c
  3198  0027BC  2A0B               	incf	___lwmod@counter,f,c
  3199  0027BE                     l4956:
  3200  0027BE  FFFF               	dw	65535	; assembler added errata NOP
  3201  0027C0  AE0A               	btfss	___lwmod@divisor+1,7,c
  3202  0027C2  D7F8               	goto	l4954
  3203  0027C4                     l4958:
  3204  0027C4  FFFF               	dw	65535	; assembler added errata NOP
  3205  0027C6  5009               	movf	___lwmod@divisor,w,c
  3206  0027C8  5C07               	subwf	___lwmod@dividend,w,c
  3207  0027CA  500A               	movf	___lwmod@divisor+1,w,c
  3208  0027CC  5808               	subwfb	___lwmod@dividend+1,w,c
  3209  0027CE  E304               	bnc	l4962
  3210  0027D0  5009               	movf	___lwmod@divisor,w,c
  3211  0027D2  5E07               	subwf	___lwmod@dividend,f,c
  3212  0027D4  500A               	movf	___lwmod@divisor+1,w,c
  3213  0027D6  5A08               	subwfb	___lwmod@dividend+1,f,c
  3214  0027D8                     l4962:
  3215  0027D8  90D8               	bcf	status,0,c
  3216  0027DA  320A               	rrcf	___lwmod@divisor+1,f,c
  3217  0027DC  3209               	rrcf	___lwmod@divisor,f,c
  3218  0027DE  2E0B               	decfsz	___lwmod@counter,f,c
  3219  0027E0  D7F1               	goto	l4958
  3220  0027E2                     l1245:
  3221  0027E2  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3222  0027E6  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3223  0027EA  0012               	return		;funcret
  3224  0027EC  FFFF               	dw	65535	; errata NOP
  3225  0027EE                     __end_of___lwmod:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           intcon	equ	0xFF2
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _SetTime *****************
  3248 ;; Defined at:
  3249 ;;		line 168 in file "user.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  newTime         1    wreg     PTR long 
  3252 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  newTime         1    6[COMRAM] PTR long 
  3255 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr2l, fsr2h, status,2
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3265 ;;      Params:         0       0       0       0       0       0       0
  3266 ;;      Locals:         1       0       0       0       0       0       0
  3267 ;;      Temps:          0       0       0       0       0       0       0
  3268 ;;      Totals:         1       0       0       0       0       0       0
  3269 ;;Total ram usage:        1 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    2
  3272 ;; This function calls:
  3273 ;;		Nothing
  3274 ;; This function is called by:
  3275 ;;		_SetTimeFromRegs
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text12
  3280  002AA0                     __ptext12:
  3281                           	opt stack 0
  3282  002AA0                     _SetTime:
  3283                           	opt stack 25
  3284                           
  3285                           ;incstack = 0
  3286  002AA0  FFFF               	dw	65535
  3287                           
  3288                           ;SetTime@newTime stored from wreg
  3289  002AA2  6E07               	movwf	SetTime@newTime,c
  3290                           
  3291                           ;user.c: 170: currentTime = *newTime;
  3292  002AA4  5007               	movf	SetTime@newTime,w,c
  3293  002AA6  6ED9               	movwf	fsr2l,c
  3294  002AA8  6ADA               	clrf	fsr2h,c
  3295  002AAA  CFDE F0D9          	movff	postinc2,_currentTime
  3296  002AAE  CFDE F0DA          	movff	postinc2,_currentTime+1
  3297  002AB2  CFDE F0DB          	movff	postinc2,_currentTime+2
  3298  002AB6  CFDE F0DC          	movff	postinc2,_currentTime+3
  3299  002ABA  0012               	return		;funcret
  3300  002ABC  FFFF               	dw	65535	; errata NOP
  3301  002ABE                     __end_of_SetTime:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           postinc0	equ	0xFEE
  3311                           wreg	equ	0xFE8
  3312                           postdec1	equ	0xFE5
  3313                           fsr1h	equ	0xFE2
  3314                           fsr1l	equ	0xFE1
  3315                           indf2	equ	0xFDF
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           plusw2	equ	0xFDB
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _SetHourMin *****************
  3324 ;; Defined at:
  3325 ;;		line 256 in file "interrupts.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  newHour         1    wreg     PTR int 
  3328 ;;		 -> SetTimeFromRegs@newTime(18), 
  3329 ;;  newMin          1    6[COMRAM] PTR int 
  3330 ;;		 -> SetTimeFromRegs@newTime(18), 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  newHour         1    7[COMRAM] PTR int 
  3333 ;;		 -> SetTimeFromRegs@newTime(18), 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, fsr2l, fsr2h, status,2
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3343 ;;      Params:         1       0       0       0       0       0       0
  3344 ;;      Locals:         1       0       0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0
  3346 ;;      Totals:         2       0       0       0       0       0       0
  3347 ;;Total ram usage:        2 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_SetTimeFromRegs
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text13
  3358  002ABE                     __ptext13:
  3359                           	opt stack 0
  3360  002ABE                     _SetHourMin:
  3361                           	opt stack 25
  3362                           
  3363                           ;incstack = 0
  3364  002ABE  FFFF               	dw	65535
  3365                           
  3366                           ;SetHourMin@newHour stored from wreg
  3367  002AC0  6E08               	movwf	SetHourMin@newHour,c
  3368                           
  3369                           ;interrupts.c: 258: globalHours = *newHour;
  3370  002AC2  5008               	movf	SetHourMin@newHour,w,c
  3371  002AC4  6ED9               	movwf	fsr2l,c
  3372  002AC6  6ADA               	clrf	fsr2h,c
  3373  002AC8  50DF               	movf	indf2,w,c
  3374  002ACA  6E77               	movwf	_globalHours,c	;volatile
  3375                           
  3376                           ;interrupts.c: 259: globalMinutes = *newMin;
  3377  002ACC  5007               	movf	SetHourMin@newMin,w,c
  3378  002ACE  6ED9               	movwf	fsr2l,c
  3379  002AD0  6ADA               	clrf	fsr2h,c
  3380  002AD2  50DF               	movf	indf2,w,c
  3381  002AD4  6E74               	movwf	_globalMinutes,c	;volatile
  3382  002AD6  0012               	return		;funcret
  3383  002AD8  FFFF               	dw	65535	; errata NOP
  3384  002ADA                     __end_of_SetHourMin:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1h	equ	0xFE2
  3397                           fsr1l	equ	0xFE1
  3398                           indf2	equ	0xFDF
  3399                           postinc2	equ	0xFDE
  3400                           postdec2	equ	0xFDD
  3401                           plusw2	equ	0xFDB
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _ModbusGetLastCommand *****************
  3407 ;; Defined at:
  3408 ;;		line 811 in file "ModbusRtu.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  address         1    wreg     PTR unsigned short 
  3411 ;;		 -> io_poll@lastAddress(2), 
  3412 ;;  count           1    6[COMRAM] PTR unsigned short 
  3413 ;;		 -> io_poll@lastEndAddress(2), 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  address         1    8[COMRAM] PTR unsigned short 
  3416 ;;		 -> io_poll@lastAddress(2), 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      PTR unsigned char 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr2l, fsr2h, status,2
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3426 ;;      Params:         2       0       0       0       0       0       0
  3427 ;;      Locals:         1       0       0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0
  3429 ;;      Totals:         3       0       0       0       0       0       0
  3430 ;;Total ram usage:        3 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    2
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_io_poll
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text14
  3441  0029D6                     __ptext14:
  3442                           	opt stack 0
  3443  0029D6                     _ModbusGetLastCommand:
  3444                           	opt stack 27
  3445                           
  3446                           ;incstack = 0
  3447  0029D6  FFFF               	dw	65535
  3448                           
  3449                           ;ModbusGetLastCommand@address stored from wreg
  3450  0029D8  6E09               	movwf	ModbusGetLastCommand@address,c
  3451                           
  3452                           ;ModbusRtu.c: 813: if (address != (0))
  3453  0029DA  5009               	movf	ModbusGetLastCommand@address,w,c
  3454  0029DC  E007               	bz	l5414
  3455                           
  3456                           ;ModbusRtu.c: 814: *address = _lastAddress;
  3457  0029DE  5009               	movf	ModbusGetLastCommand@address,w,c
  3458  0029E0  6ED9               	movwf	fsr2l,c
  3459  0029E2  6ADA               	clrf	fsr2h,c
  3460  0029E4  C0BE  FFDE         	movff	__lastAddress,postinc2
  3461  0029E8  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3462  0029EC                     l5414:
  3463                           
  3464                           ;ModbusRtu.c: 815: if (count != (0))
  3465  0029EC  5007               	movf	ModbusGetLastCommand@count,w,c
  3466  0029EE  E007               	bz	l5418
  3467                           
  3468                           ;ModbusRtu.c: 816: *count = _lastCount;
  3469  0029F0  5007               	movf	ModbusGetLastCommand@count,w,c
  3470  0029F2  6ED9               	movwf	fsr2l,c
  3471  0029F4  6ADA               	clrf	fsr2h,c
  3472  0029F6  C0C0  FFDE         	movff	__lastCount,postinc2
  3473  0029FA  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3474  0029FE                     l5418:
  3475                           
  3476                           ;ModbusRtu.c: 817: return &_lastCommand;
  3477  0029FE  0EDF               	movlw	__lastCommand& (0+255)
  3478  002A00  0012               	return		;funcret
  3479  002A02  FFFF               	dw	65535	; errata NOP
  3480  002A04                     __end_of_ModbusGetLastCommand:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           postdec1	equ	0xFE5
  3492                           fsr1h	equ	0xFE2
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           postdec2	equ	0xFDD
  3497                           plusw2	equ	0xFDB
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _InitFromEeprom *****************
  3503 ;; Defined at:
  3504 ;;		line 418 in file "main.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;		None
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;		None
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : F/1
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3518 ;;      Params:         0       0       0       0       0       0       0
  3519 ;;      Locals:         0       0       0       0       0       0       0
  3520 ;;      Temps:          2       0       0       0       0       0       0
  3521 ;;      Totals:         2       0       0       0       0       0       0
  3522 ;;Total ram usage:        2 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    4
  3525 ;; This function calls:
  3526 ;;		_LoadNextEvent
  3527 ;;		_Modbus
  3528 ;;		_SwitchOffAllLeds
  3529 ;; This function is called by:
  3530 ;;		_main
  3531 ;;		_io_poll
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text15
  3536  002288                     __ptext15:
  3537                           	opt stack 0
  3538  002288                     _InitFromEeprom:
  3539                           	opt stack 25
  3540                           
  3541                           ;incstack = 0
  3542  002288  FFFF               	dw	65535
  3543                           
  3544                           ;main.c: 428: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  3545  00228A  0E0A               	movlw	10
  3546  00228C  6EA9               	movwf	4009,c	;volatile
  3547  00228E  80A6               	bsf	4006,0,c	;volatile
  3548  002290  CFA8 F0D7          	movff	4008,_eventAcceptTime	;volatile
  3549                           
  3550                           ;main.c: 433: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  3551  002294  0E0F               	movlw	15
  3552  002296  6EA9               	movwf	4009,c	;volatile
  3553  002298  80A6               	bsf	4006,0,c	;volatile
  3554  00229A  50A8               	movf	4008,w,c	;volatile
  3555  00229C  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3556  00229E  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3557  0022A0  0E06               	movlw	6
  3558  0022A2                     u4645:
  3559  0022A2  FFFF               	dw	65535	; assembler added errata NOP
  3560  0022A4  90D8               	bcf	status,0,c
  3561  0022A6  360F               	rlcf	??_InitFromEeprom,f,c
  3562  0022A8  3610               	rlcf	??_InitFromEeprom+1,f,c
  3563  0022AA  2EE8               	decfsz	wreg,f,c
  3564  0022AC  D7FA               	goto	u4645
  3565  0022AE  C00F  F0C4         	movff	??_InitFromEeprom,_blinkDuration
  3566  0022B2  C010  F0C5         	movff	??_InitFromEeprom+1,_blinkDuration+1
  3567                           
  3568                           ;main.c: 434: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  3569  0022B6  0E10               	movlw	16
  3570  0022B8  6EA9               	movwf	4009,c	;volatile
  3571  0022BA  80A6               	bsf	4006,0,c	;volatile
  3572  0022BC  50A8               	movf	4008,w,c	;volatile
  3573  0022BE  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3574  0022C0  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3575  0022C2  0E06               	movlw	6
  3576  0022C4                     u4655:
  3577  0022C4  FFFF               	dw	65535	; assembler added errata NOP
  3578  0022C6  90D8               	bcf	status,0,c
  3579  0022C8  360F               	rlcf	??_InitFromEeprom,f,c
  3580  0022CA  3610               	rlcf	??_InitFromEeprom+1,f,c
  3581  0022CC  2EE8               	decfsz	wreg,f,c
  3582  0022CE  D7FA               	goto	u4655
  3583  0022D0  C00F  F0C6         	movff	??_InitFromEeprom,_blinkPeriod
  3584  0022D4  C010  F0C7         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  3585                           
  3586                           ;main.c: 436: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  3587  0022D8  0E12               	movlw	18
  3588  0022DA  6EA9               	movwf	4009,c	;volatile
  3589  0022DC  80A6               	bsf	4006,0,c	;volatile
  3590  0022DE  CFA8 F0D8          	movff	4008,_eventCount	;volatile
  3591                           
  3592                           ;main.c: 442: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  3593  0022E2  0E8C               	movlw	140
  3594  0022E4  6EA9               	movwf	4009,c	;volatile
  3595  0022E6  80A6               	bsf	4006,0,c	;volatile
  3596  0022E8  CFA8 F071          	movff	4008,__soundCount	;volatile
  3597                           
  3598                           ;main.c: 443: if(_soundCount == 0xFF)
  3599  0022EC  2871               	incf	__soundCount,w,c
  3600  0022EE  E101               	bnz	l5366
  3601                           
  3602                           ;main.c: 444: _soundCount = 0;
  3603  0022F0  6A71               	clrf	__soundCount,c
  3604  0022F2                     l5366:
  3605                           
  3606                           ;main.c: 446: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  3607  0022F2  0E01               	movlw	1
  3608  0022F4  6EA9               	movwf	4009,c	;volatile
  3609  0022F6  80A6               	bsf	4006,0,c	;volatile
  3610  0022F8  6A0C               	clrf	Modbus@u8serno,c
  3611  0022FA  6A0D               	clrf	Modbus@u8txenpin,c
  3612  0022FC  50A8               	movf	4008,w,c	;volatile
  3613  0022FE  EC94  F015         	call	_Modbus
  3614                           
  3615                           ;main.c: 447: SwitchOffAllLeds();
  3616  002302  EC2D  F015         	call	_SwitchOffAllLeds	;wreg free
  3617                           
  3618                           ;main.c: 450: curEventNum = 0xff;
  3619  002306  6875               	setf	_curEventNum,c
  3620                           
  3621                           ;main.c: 451: curEventMinute = 0;
  3622  002308  0100               	movlb	0	; () banked
  3623  00230A  6BD5               	clrf	_curEventMinute& (0+255),b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;main.c: 452: currentAlarmedEventNum = 0xff;
  3627  00230C  6876               	setf	_currentAlarmedEventNum,c
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;main.c: 453: LoadNextEvent();
  3631  00230E  ECFA  F00B         	call	_LoadNextEvent	;wreg free
  3632                           
  3633                           ;main.c: 455: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  3634  002312  5071               	movf	__soundCount,w,c
  3635  002314  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3636  002316  0100               	movlb	0	; () banked
  3637  002318  51CE               	movf	__isSoundPlaying& (0+255),w,b
  3638  00231A  0101               	movlb	1	; () banked
  3639  00231C  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3640  00231E  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3641                           
  3642                           ; BSR set to: 1
  3643  002322  0012               	return		;funcret
  3644  002324  FFFF               	dw	65535	; errata NOP
  3645  002326                     __end_of_InitFromEeprom:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           intcon	equ	0xFF2
  3654                           postinc0	equ	0xFEE
  3655                           wreg	equ	0xFE8
  3656                           postdec1	equ	0xFE5
  3657                           fsr1h	equ	0xFE2
  3658                           fsr1l	equ	0xFE1
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           plusw2	equ	0xFDB
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _Modbus *****************
  3668 ;; Defined at:
  3669 ;;		line 170 in file "ModbusRtu.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  u8id            1    wreg     unsigned char 
  3672 ;;  u8serno         1   11[COMRAM] unsigned char 
  3673 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  u8id            1   13[COMRAM] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3685 ;;      Params:         2       0       0       0       0       0       0
  3686 ;;      Locals:         1       0       0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0
  3688 ;;      Totals:         3       0       0       0       0       0       0
  3689 ;;Total ram usage:        3 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    3
  3692 ;; This function calls:
  3693 ;;		_ModbusInit
  3694 ;; This function is called by:
  3695 ;;		_InitFromEeprom
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text16
  3700  002B28                     __ptext16:
  3701                           	opt stack 0
  3702  002B28                     _Modbus:
  3703                           	opt stack 25
  3704                           
  3705                           ; BSR set to: 1
  3706                           ;incstack = 0
  3707  002B28  FFFF               	dw	65535
  3708                           
  3709                           ;Modbus@u8id stored from wreg
  3710  002B2A  6E0E               	movwf	Modbus@u8id,c
  3711                           
  3712                           ;ModbusRtu.c: 172: ModbusInit(u8id, u8serno, u8txenpin);
  3713  002B2C  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  3714  002B30  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3715  002B34  500E               	movf	Modbus@u8id,w,c
  3716  002B36  EF9E  F015         	goto	_ModbusInit
  3717  002B3A  FFFF               	dw	65535	; errata NOP
  3718  002B3C                     __end_of_Modbus:
  3719                           	opt stack 0
  3720                           tblptru	equ	0xFF8
  3721                           tblptrh	equ	0xFF7
  3722                           tblptrl	equ	0xFF6
  3723                           tablat	equ	0xFF5
  3724                           prodh	equ	0xFF4
  3725                           prodl	equ	0xFF3
  3726                           intcon	equ	0xFF2
  3727                           postinc0	equ	0xFEE
  3728                           wreg	equ	0xFE8
  3729                           postdec1	equ	0xFE5
  3730                           fsr1h	equ	0xFE2
  3731                           fsr1l	equ	0xFE1
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           plusw2	equ	0xFDB
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _ModbusInit *****************
  3741 ;; Defined at:
  3742 ;;		line 494 in file "ModbusRtu.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  u8id            1    wreg     unsigned char 
  3745 ;;  u8serno         1    6[COMRAM] unsigned char 
  3746 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  u8id            1   10[COMRAM] unsigned char 
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg, status,2, status,0
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3758 ;;      Params:         2       0       0       0       0       0       0
  3759 ;;      Locals:         3       0       0       0       0       0       0
  3760 ;;      Temps:          0       0       0       0       0       0       0
  3761 ;;      Totals:         5       0       0       0       0       0       0
  3762 ;;Total ram usage:        5 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    2
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_Modbus
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text17
  3773  002B3C                     __ptext17:
  3774                           	opt stack 0
  3775  002B3C                     _ModbusInit:
  3776                           	opt stack 25
  3777                           
  3778                           ;incstack = 0
  3779  002B3C  FFFF               	dw	65535
  3780                           
  3781                           ;ModbusInit@u8id stored from wreg
  3782  002B3E  6E0B               	movwf	ModbusInit@u8id,c
  3783                           
  3784                           ;ModbusRtu.c: 496: _u8id = u8id;
  3785  002B40  C00B  F0D2         	movff	ModbusInit@u8id,__u8id
  3786                           
  3787                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3788  002B44  0E04               	movlw	4
  3789  002B46  6007               	cpfslt	ModbusInit@u8serno,c
  3790  002B48  D000               	goto	l680
  3791  002B4A                     l680:
  3792  002B4A  FFFF               	dw	65535	; assembler added errata NOP
  3793  002B4C  0012               	return		;funcret
  3794  002B4E  FFFF               	dw	65535	; errata NOP
  3795  002B50                     __end_of_ModbusInit:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           prodh	equ	0xFF4
  3802                           prodl	equ	0xFF3
  3803                           intcon	equ	0xFF2
  3804                           postinc0	equ	0xFEE
  3805                           wreg	equ	0xFE8
  3806                           postdec1	equ	0xFE5
  3807                           fsr1h	equ	0xFE2
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           postdec2	equ	0xFDD
  3812                           plusw2	equ	0xFDB
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function _CommandSetStatusLed *****************
  3818 ;; Defined at:
  3819 ;;		line 935 in file "main.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;		None
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  led             1   30[COMRAM] unsigned char 
  3824 ;;  commandData     1   29[COMRAM] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3834 ;;      Params:         0       0       0       0       0       0       0
  3835 ;;      Locals:         2       0       0       0       0       0       0
  3836 ;;      Temps:          1       0       0       0       0       0       0
  3837 ;;      Totals:         3       0       0       0       0       0       0
  3838 ;;Total ram usage:        3 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    5
  3841 ;; This function calls:
  3842 ;;		_LightStatusLed
  3843 ;;		_ModbusSetExceptionStatusBit
  3844 ;;		_PlaySound
  3845 ;;		_StopPlaying
  3846 ;; This function is called by:
  3847 ;;		_io_poll
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text18
  3852  00248E                     __ptext18:
  3853                           	opt stack 0
  3854  00248E                     _CommandSetStatusLed:
  3855                           	opt stack 24
  3856                           
  3857                           ;incstack = 0
  3858  00248E  FFFF               	dw	65535
  3859                           
  3860                           ;main.c: 939: uint8_t commandData = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  3861  002490  C18C  F01E         	movff	__MODBUSHoldingRegs,CommandSetStatusLed@commandData
  3862                           
  3863                           ;main.c: 940: uint8_t led = commandData & 0x07;
  3864  002494  501E               	movf	CommandSetStatusLed@commandData,w,c
  3865  002496  0B07               	andlw	7
  3866  002498  6E1F               	movwf	CommandSetStatusLed@led,c
  3867                           
  3868                           ;main.c: 941: if(led >= 0x05)
  3869  00249A  0E04               	movlw	4
  3870  00249C  641F               	cpfsgt	CommandSetStatusLed@led,c
  3871  00249E  D001               	goto	l5396
  3872  0024A0  D027               	goto	l432
  3873  0024A2                     l5396:
  3874  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  3875                           
  3876                           ;main.c: 943: if((((commandData) >> (7)) & 0x01) == 0)
  3877  0024A4  6A1D               	clrf	??_CommandSetStatusLed& (0+255),c
  3878  0024A6  AE1E               	btfss	CommandSetStatusLed@commandData,7,c
  3879  0024A8  D001               	bra	u4685
  3880  0024AA  2A1D               	incf	??_CommandSetStatusLed& (0+255),f,c
  3881  0024AC                     u4685:
  3882  0024AC  B01D               	btfsc	??_CommandSetStatusLed,0,c
  3883  0024AE  D009               	goto	l5404
  3884                           
  3885                           ;main.c: 944: {
  3886                           ;main.c: 945: LightStatusLed(led, 0, 0);
  3887  0024B0  0E00               	movlw	0
  3888  0024B2  6E07               	movwf	LightStatusLed@on,c
  3889  0024B4  6E08               	movwf	LightStatusLed@blink,c
  3890  0024B6  501F               	movf	CommandSetStatusLed@led,w,c
  3891  0024B8  EC85  F00D         	call	_LightStatusLed
  3892                           
  3893                           ;main.c: 946: StopPlaying();
  3894  0024BC  EC6D  F015         	call	_StopPlaying	;wreg free
  3895  0024C0  D017               	goto	l432
  3896  0024C2                     l5404:
  3897  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  3898                           
  3899                           ;main.c: 948: }
  3900                           ;main.c: 949: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  3901  0024C4  0E01               	movlw	1
  3902  0024C6  6E07               	movwf	LightStatusLed@on,c
  3903  0024C8  441E               	rlncf	CommandSetStatusLed@commandData,w,c
  3904  0024CA  46E8               	rlncf	wreg,f,c
  3905  0024CC  0B03               	andlw	3
  3906  0024CE  0B01               	andlw	1
  3907  0024D0  6E08               	movwf	LightStatusLed@blink,c
  3908  0024D2  501F               	movf	CommandSetStatusLed@led,w,c
  3909  0024D4  EC85  F00D         	call	_LightStatusLed
  3910                           
  3911                           ;main.c: 950: PlaySound(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), ((unsigned
      +                           char)((_MODBUSHoldingRegs[1])&0xFF)));
  3912  0024D8  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  3913  0024DC  6A16               	clrf	PlaySound@playDuration+1,c
  3914  0024DE  0101               	movlb	1	; () banked
  3915  0024E0  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  3916  0024E2  EC00  F00E         	call	_PlaySound
  3917                           
  3918                           ;main.c: 951: ModbusSetExceptionStatusBit(0, 1);
  3919  0024E6  0E01               	movlw	1
  3920  0024E8  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  3921  0024EA  0E00               	movlw	0
  3922  0024EC  EC87  F013         	call	_ModbusSetExceptionStatusBit
  3923  0024F0                     l432:
  3924  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  3925  0024F2  0012               	return		;funcret
  3926  0024F4  FFFF               	dw	65535	; errata NOP
  3927  0024F6                     __end_of_CommandSetStatusLed:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           tblptrh	equ	0xFF7
  3931                           tblptrl	equ	0xFF6
  3932                           tablat	equ	0xFF5
  3933                           prodh	equ	0xFF4
  3934                           prodl	equ	0xFF3
  3935                           intcon	equ	0xFF2
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _ModbusSetExceptionStatusBit *****************
  3950 ;; Defined at:
  3951 ;;		line 175 in file "ModbusRtu.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  bitNum          1    wreg     unsigned char 
  3954 ;;  value           1    6[COMRAM] unsigned char 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  bitNum          1    9[COMRAM] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : F/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3966 ;;      Params:         1       0       0       0       0       0       0
  3967 ;;      Locals:         1       0       0       0       0       0       0
  3968 ;;      Temps:          2       0       0       0       0       0       0
  3969 ;;      Totals:         4       0       0       0       0       0       0
  3970 ;;Total ram usage:        4 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    2
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_CommandSetStatusLed
  3977 ;;		_io_poll
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text19
  3982  00270E                     __ptext19:
  3983                           	opt stack 0
  3984  00270E                     _ModbusSetExceptionStatusBit:
  3985                           	opt stack 27
  3986                           
  3987                           ;incstack = 0
  3988  00270E  FFFF               	dw	65535
  3989                           
  3990                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  3991  002710  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  3992                           
  3993                           ;ModbusRtu.c: 177: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  3994  002712  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  3995  002714  E010               	bz	l5276
  3996  002716  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  3997  00271A  0E01               	movlw	1
  3998  00271C  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  3999  00271E  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4000  002720  D003               	goto	u4394
  4001  002722                     u4395:
  4002  002722  FFFF               	dw	65535	; assembler added errata NOP
  4003  002724  90D8               	bcf	status,0,c
  4004  002726  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4005  002728                     u4394:
  4006  002728  FFFF               	dw	65535	; assembler added errata NOP
  4007  00272A  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4008  00272C  D7FA               	goto	u4395
  4009  00272E  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  4010  002730  0100               	movlb	0	; () banked
  4011  002732  13CB               	iorwf	__exceptionStatus& (0+255),f,b
  4012  002734  D00F               	goto	l648
  4013  002736                     l5276:
  4014  002736  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4015  00273A  0E01               	movlw	1
  4016  00273C  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4017  00273E  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4018  002740  D003               	goto	u4404
  4019  002742                     u4405:
  4020  002742  FFFF               	dw	65535	; assembler added errata NOP
  4021  002744  90D8               	bcf	status,0,c
  4022  002746  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4023  002748                     u4404:
  4024  002748  FFFF               	dw	65535	; assembler added errata NOP
  4025  00274A  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4026  00274C  D7FA               	goto	u4405
  4027  00274E  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  4028  002750  0100               	movlb	0	; () banked
  4029  002752  17CB               	andwf	__exceptionStatus& (0+255),f,b
  4030  002754                     l648:
  4031  002754  FFFF               	dw	65535	; assembler added errata NOP
  4032                           
  4033                           ; BSR set to: 0
  4034  002756  0012               	return		;funcret
  4035  002758  FFFF               	dw	65535	; errata NOP
  4036  00275A                     __end_of_ModbusSetExceptionStatusBit:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           postdec1	equ	0xFE5
  4048                           fsr1h	equ	0xFE2
  4049                           fsr1l	equ	0xFE1
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           plusw2	equ	0xFDB
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _LightStatusLed *****************
  4059 ;; Defined at:
  4060 ;;		line 344 in file "main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  row             1    wreg     unsigned char 
  4063 ;;  on              1    6[COMRAM] unsigned char 
  4064 ;;  blink           1    7[COMRAM] unsigned char 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  row             1   13[COMRAM] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4076 ;;      Params:         2       0       0       0       0       0       0
  4077 ;;      Locals:         1       0       0       0       0       0       0
  4078 ;;      Temps:          5       0       0       0       0       0       0
  4079 ;;      Totals:         8       0       0       0       0       0       0
  4080 ;;Total ram usage:        8 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    2
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_main
  4087 ;;		_SetTimeFromRegs
  4088 ;;		_CommandSetStatusLed
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text20
  4093  001B0A                     __ptext20:
  4094                           	opt stack 0
  4095  001B0A                     _LightStatusLed:
  4096                           	opt stack 25
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;incstack = 0
  4100  001B0A  FFFF               	dw	65535
  4101                           
  4102                           ;LightStatusLed@row stored from wreg
  4103  001B0C  6E0E               	movwf	LightStatusLed@row,c
  4104                           
  4105                           ;main.c: 346: if(row > 7)
  4106  001B0E  0E07               	movlw	7
  4107  001B10  640E               	cpfsgt	LightStatusLed@row,c
  4108  001B12  D001               	goto	l5042
  4109  001B14  D072               	goto	l277
  4110  001B16                     l5042:
  4111  001B16  FFFF               	dw	65535	; assembler added errata NOP
  4112                           
  4113                           ;main.c: 348: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4114  001B18  5007               	movf	LightStatusLed@on,w,c
  4115  001B1A  E010               	bz	l5046
  4116  001B1C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4117  001B20  0E01               	movlw	1
  4118  001B22  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4119  001B24  2A09               	incf	??_LightStatusLed,f,c
  4120  001B26  D003               	goto	u4114
  4121  001B28                     u4115:
  4122  001B28  FFFF               	dw	65535	; assembler added errata NOP
  4123  001B2A  90D8               	bcf	status,0,c
  4124  001B2C  360A               	rlcf	??_LightStatusLed+1,f,c
  4125  001B2E                     u4114:
  4126  001B2E  FFFF               	dw	65535	; assembler added errata NOP
  4127  001B30  2E09               	decfsz	??_LightStatusLed,f,c
  4128  001B32  D7FA               	goto	u4115
  4129  001B34  500A               	movf	??_LightStatusLed+1,w,c
  4130  001B36  0100               	movlb	0	; () banked
  4131  001B38  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4132  001B3A  D00F               	goto	l5048
  4133  001B3C                     l5046:
  4134  001B3C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4135  001B40  0E01               	movlw	1
  4136  001B42  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4137  001B44  2A09               	incf	??_LightStatusLed,f,c
  4138  001B46  D003               	goto	u4124
  4139  001B48                     u4125:
  4140  001B48  FFFF               	dw	65535	; assembler added errata NOP
  4141  001B4A  90D8               	bcf	status,0,c
  4142  001B4C  360A               	rlcf	??_LightStatusLed+1,f,c
  4143  001B4E                     u4124:
  4144  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  4145  001B50  2E09               	decfsz	??_LightStatusLed,f,c
  4146  001B52  D7FA               	goto	u4125
  4147  001B54  1C0A               	comf	??_LightStatusLed+1,w,c
  4148  001B56  0100               	movlb	0	; () banked
  4149  001B58  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4150  001B5A                     l5048:
  4151  001B5A  FFFF               	dw	65535	; assembler added errata NOP
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;main.c: 349: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4155  001B5C  5008               	movf	LightStatusLed@blink,w,c
  4156  001B5E  E010               	bz	l5052
  4157                           
  4158                           ; BSR set to: 0
  4159  001B60  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4160  001B64  0E01               	movlw	1
  4161  001B66  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4162  001B68  2A09               	incf	??_LightStatusLed,f,c
  4163  001B6A  D003               	goto	u4144
  4164  001B6C                     u4145:
  4165  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  4166  001B6E  90D8               	bcf	status,0,c
  4167  001B70  360A               	rlcf	??_LightStatusLed+1,f,c
  4168  001B72                     u4144:
  4169  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4170  001B74  2E09               	decfsz	??_LightStatusLed,f,c
  4171  001B76  D7FA               	goto	u4145
  4172  001B78  500A               	movf	??_LightStatusLed+1,w,c
  4173  001B7A  0100               	movlb	0	; () banked
  4174  001B7C  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4175  001B7E  D00F               	goto	l5054
  4176  001B80                     l5052:
  4177                           
  4178                           ; BSR set to: 0
  4179  001B80  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4180  001B84  0E01               	movlw	1
  4181  001B86  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4182  001B88  2A09               	incf	??_LightStatusLed,f,c
  4183  001B8A  D003               	goto	u4154
  4184  001B8C                     u4155:
  4185  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  4186  001B8E  90D8               	bcf	status,0,c
  4187  001B90  360A               	rlcf	??_LightStatusLed+1,f,c
  4188  001B92                     u4154:
  4189  001B92  FFFF               	dw	65535	; assembler added errata NOP
  4190  001B94  2E09               	decfsz	??_LightStatusLed,f,c
  4191  001B96  D7FA               	goto	u4155
  4192  001B98  1C0A               	comf	??_LightStatusLed+1,w,c
  4193  001B9A  0100               	movlb	0	; () banked
  4194  001B9C  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4195  001B9E                     l5054:
  4196  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;main.c: 350: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4200  001BA0  5007               	movf	LightStatusLed@on,w,c
  4201  001BA2  E014               	bz	l5058
  4202                           
  4203                           ; BSR set to: 0
  4204  001BA4  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4205  001BA8  0E01               	movlw	1
  4206  001BAA  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4207  001BAC  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4208  001BAE  2A09               	incf	??_LightStatusLed,f,c
  4209  001BB0  D004               	goto	u4174
  4210  001BB2                     u4175:
  4211  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  4212  001BB4  90D8               	bcf	status,0,c
  4213  001BB6  360A               	rlcf	??_LightStatusLed+1,f,c
  4214  001BB8  360B               	rlcf	??_LightStatusLed+2,f,c
  4215  001BBA                     u4174:
  4216  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  4217  001BBC  2E09               	decfsz	??_LightStatusLed,f,c
  4218  001BBE  D7F9               	goto	u4175
  4219  001BC0  500A               	movf	??_LightStatusLed+1,w,c
  4220  001BC2  0100               	movlb	0	; () banked
  4221  001BC4  13DD               	iorwf	__MODBUSCoils& (0+255),f,b
  4222  001BC6  500B               	movf	??_LightStatusLed+2,w,c
  4223  001BC8  13DE               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4224  001BCA  D017               	goto	l277
  4225  001BCC                     l5058:
  4226                           
  4227                           ; BSR set to: 0
  4228  001BCC  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4229  001BD0  0E01               	movlw	1
  4230  001BD2  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4231  001BD4  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4232  001BD6  2A09               	incf	??_LightStatusLed,f,c
  4233  001BD8  D004               	goto	u4184
  4234  001BDA                     u4185:
  4235  001BDA  FFFF               	dw	65535	; assembler added errata NOP
  4236  001BDC  90D8               	bcf	status,0,c
  4237  001BDE  360A               	rlcf	??_LightStatusLed+1,f,c
  4238  001BE0  360B               	rlcf	??_LightStatusLed+2,f,c
  4239  001BE2                     u4184:
  4240  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  4241  001BE4  2E09               	decfsz	??_LightStatusLed,f,c
  4242  001BE6  D7F9               	goto	u4185
  4243  001BE8  1C0A               	comf	??_LightStatusLed+1,w,c
  4244  001BEA  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  4245  001BEC  1C0B               	comf	??_LightStatusLed+2,w,c
  4246  001BEE  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  4247  001BF0  500C               	movf	??_LightStatusLed+3,w,c
  4248  001BF2  0100               	movlb	0	; () banked
  4249  001BF4  17DD               	andwf	__MODBUSCoils& (0+255),f,b
  4250  001BF6  500D               	movf	??_LightStatusLed+4,w,c
  4251  001BF8  17DE               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4252  001BFA                     l277:
  4253  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  4254  001BFC  0012               	return		;funcret
  4255  001BFE  FFFF               	dw	65535	; errata NOP
  4256  001C00                     __end_of_LightStatusLed:
  4257                           	opt stack 0
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           postdec1	equ	0xFE5
  4268                           fsr1h	equ	0xFE2
  4269                           fsr1l	equ	0xFE1
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           plusw2	equ	0xFDB
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _ResetEvent *****************
  4279 ;; Defined at:
  4280 ;;		line 624 in file "main.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  state           1    wreg     unsigned char 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  state           1   16[COMRAM] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : E/0
  4291 ;;		On exit  : F/1
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4294 ;;      Params:         0       0       0       0       0       0       0
  4295 ;;      Locals:         3       0       0       0       0       0       0
  4296 ;;      Temps:          2       0       0       0       0       0       0
  4297 ;;      Totals:         5       0       0       0       0       0       0
  4298 ;;Total ram usage:        5 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    3
  4301 ;; This function calls:
  4302 ;;		_LightLed
  4303 ;;		_StopPlaying
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text21
  4310  0028BE                     __ptext21:
  4311                           	opt stack 0
  4312  0028BE                     _ResetEvent:
  4313                           	opt stack 27
  4314                           
  4315                           ;incstack = 0
  4316  0028BE  FFFF               	dw	65535
  4317                           
  4318                           ;ResetEvent@state stored from wreg
  4319  0028C0  6E11               	movwf	ResetEvent@state,c
  4320                           
  4321                           ;main.c: 626: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4322  0028C2  5011               	movf	ResetEvent@state,w,c
  4323  0028C4  E103               	bnz	l5768
  4324  0028C6  6A13               	clrf	_ResetEvent$841+1,c
  4325  0028C8  0E02               	movlw	2
  4326  0028CA  D002               	goto	L2
  4327  0028CC                     l5768:
  4328  0028CC  6A13               	clrf	_ResetEvent$841+1,c
  4329  0028CE  0E01               	movlw	1
  4330  0028D0                     L2:
  4331  0028D0  FFFF               	dw	65535	; assembler added errata NOP
  4332  0028D2  6E12               	movwf	_ResetEvent$841,c
  4333  0028D4  C012  F007         	movff	_ResetEvent$841,LightLed@ledState
  4334  0028D8  6A08               	clrf	LightLed@blink,c
  4335  0028DA  2876               	incf	_currentAlarmedEventNum,w,c
  4336  0028DC  ECC0  F004         	call	_LightLed
  4337                           
  4338                           ;main.c: 627: currentAlarmedEventNum = 0xff;
  4339  0028E0  6876               	setf	_currentAlarmedEventNum,c
  4340                           
  4341                           ;main.c: 628: eventResetSecond = 0;
  4342  0028E2  0100               	movlb	0	; () banked
  4343  0028E4  6BAC               	clrf	_eventResetSecond& (0+255),b
  4344  0028E6  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  4345  0028E8  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  4346  0028EA  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;main.c: 629: StopPlaying();
  4350  0028EC  EC6D  F015         	call	_StopPlaying	;wreg free
  4351                           
  4352                           ; BSR set to: 1
  4353                           ;main.c: 630: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4354  0028F0  5076               	movf	_currentAlarmedEventNum,w,c
  4355  0028F2  6E0F               	movwf	??_ResetEvent& (0+255),c
  4356  0028F4  5075               	movf	_curEventNum,w,c
  4357  0028F6  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4358  0028F8  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4359                           
  4360                           ; BSR set to: 1
  4361  0028FC  0012               	return		;funcret
  4362  0028FE  FFFF               	dw	65535	; errata NOP
  4363  002900                     __end_of_ResetEvent:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           postinc0	equ	0xFEE
  4373                           wreg	equ	0xFE8
  4374                           postdec1	equ	0xFE5
  4375                           fsr1h	equ	0xFE2
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           plusw2	equ	0xFDB
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _ProcessLightBlock *****************
  4386 ;; Defined at:
  4387 ;;		line 471 in file "main.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  curMs           1    wreg     PTR unsigned long 
  4390 ;;		 -> main@curMs(4), 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  4393 ;;		 -> main@curMs(4), 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : F/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4403 ;;      Params:         0       0       0       0       0       0       0
  4404 ;;      Locals:         1       0       0       0       0       0       0
  4405 ;;      Temps:          4       0       0       0       0       0       0
  4406 ;;      Totals:         5       0       0       0       0       0       0
  4407 ;;Total ram usage:        5 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    3
  4410 ;; This function calls:
  4411 ;;		_UpdateLedRegister
  4412 ;; This function is called by:
  4413 ;;		_main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text22
  4418  000C72                     __ptext22:
  4419                           	opt stack 0
  4420  000C72                     _ProcessLightBlock:
  4421                           	opt stack 27
  4422                           
  4423                           ; BSR set to: 1
  4424                           ;incstack = 0
  4425  000C72  FFFF               	dw	65535
  4426                           
  4427                           ;ProcessLightBlock@curMs stored from wreg
  4428  000C74  6E0C               	movwf	ProcessLightBlock@curMs,c
  4429                           
  4430                           ;main.c: 473: diffTime = *curMs - oldBlinkOnTime;
  4431  000C76  500C               	movf	ProcessLightBlock@curMs,w,c
  4432  000C78  6ED9               	movwf	fsr2l,c
  4433  000C7A  6ADA               	clrf	fsr2h,c
  4434  000C7C  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  4435  000C80  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  4436  000C84  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  4437  000C88  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  4438  000C8C  0100               	movlb	0	; () banked
  4439  000C8E  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  4440  000C90  5C08               	subwf	??_ProcessLightBlock,w,c
  4441  000C92  6FA8               	movwf	_diffTime& (0+255),b
  4442  000C94  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4443  000C96  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4444  000C98  6FA9               	movwf	(_diffTime+1)& (0+255),b
  4445  000C9A  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4446  000C9C  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4447  000C9E  6FAA               	movwf	(_diffTime+2)& (0+255),b
  4448  000CA0  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4449  000CA2  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4450  000CA4  6FAB               	movwf	(_diffTime+3)& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;main.c: 474: if(diffTime > blinkPeriod)
  4454  000CA6  51C6               	movf	_blinkPeriod& (0+255),w,b
  4455  000CA8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4456  000CAA  51C7               	movf	(_blinkPeriod+1)& (0+255),w,b
  4457  000CAC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4458  000CAE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4459  000CB0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4460  000CB2  51A8               	movf	_diffTime& (0+255),w,b
  4461  000CB4  5C08               	subwf	??_ProcessLightBlock,w,c
  4462  000CB6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4463  000CB8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4464  000CBA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4465  000CBC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4466  000CBE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4467  000CC0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4468  000CC2  E20E               	bc	l4348
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;main.c: 475: {
  4472                           ;main.c: 476: blinkOn = 1;
  4473  000CC4  0E01               	movlw	1
  4474  000CC6  6E73               	movwf	_blinkOn,c
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;main.c: 477: oldBlinkOnTime = *curMs;
  4478  000CC8  500C               	movf	ProcessLightBlock@curMs,w,c
  4479  000CCA  6ED9               	movwf	fsr2l,c
  4480  000CCC  6ADA               	clrf	fsr2h,c
  4481  000CCE  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  4482  000CD2  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  4483  000CD6  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  4484  000CDA  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  4485                           
  4486                           ;main.c: 478: }
  4487  000CDE  D0F1               	goto	l4500
  4488  000CE0                     l4348:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;main.c: 479: else if(blinkOn && diffTime > blinkDuration)
  4492  000CE0  5073               	movf	_blinkOn,w,c
  4493  000CE2  E101 D0EE          	bz	l4500
  4494                           
  4495                           ; BSR set to: 0
  4496  000CE6  51C4               	movf	_blinkDuration& (0+255),w,b
  4497  000CE8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4498  000CEA  51C5               	movf	(_blinkDuration+1)& (0+255),w,b
  4499  000CEC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4500  000CEE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4501  000CF0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4502  000CF2  51A8               	movf	_diffTime& (0+255),w,b
  4503  000CF4  5C08               	subwf	??_ProcessLightBlock,w,c
  4504  000CF6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4505  000CF8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4506  000CFA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4507  000CFC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4508  000CFE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4509  000D00  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4510  000D02  E301 D0DE          	bc	l4500
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;main.c: 480: {
  4514                           ;main.c: 481: blinkOn = 0;
  4515  000D06  6A73               	clrf	_blinkOn,c
  4516  000D08  D0DC               	goto	l4500
  4517  000D0A                     l4354:
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;main.c: 489: LATA &= 0xF0;
  4521  000D0A  0EF0               	movlw	240
  4522  000D0C  1689               	andwf	3977,f,c	;volatile
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;main.c: 490: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4526  000D0E  5073               	movf	_blinkOn,w,c
  4527  000D10  E003               	bz	l4360
  4528                           
  4529                           ; BSR set to: 0
  4530  000D12  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4531  000D16  D003               	goto	l4362
  4532  000D18                     l4360:
  4533                           
  4534                           ; BSR set to: 0
  4535  000D18  5190               	movf	_ledStatuses& (0+255),w,b
  4536  000D1A  1980               	xorwf	_ledBlink& (0+255),w,b
  4537  000D1C  6E8A               	movwf	3978,c	;volatile
  4538  000D1E                     l4362:
  4539  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  4540                           
  4541                           ; BSR set to: 0
  4542  000D20  0E00               	movlw	0
  4543  000D22  EC1A  F014         	call	_UpdateLedRegister
  4544                           
  4545                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4546  000D26  5073               	movf	_blinkOn,w,c
  4547  000D28  E003               	bz	l4368
  4548  000D2A  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4549  000D2E  D004               	goto	l4370
  4550  000D30                     l4368:
  4551  000D30  0100               	movlb	0	; () banked
  4552  000D32  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  4553  000D34  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  4554  000D36  6E8A               	movwf	3978,c	;volatile
  4555  000D38                     l4370:
  4556  000D38  FFFF               	dw	65535	; assembler added errata NOP
  4557  000D3A  0E01               	movlw	1
  4558  000D3C  EC1A  F014         	call	_UpdateLedRegister
  4559                           
  4560                           ;main.c: 492: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  4561  000D40  5073               	movf	_blinkOn,w,c
  4562  000D42  E003               	bz	l4376
  4563  000D44  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  4564  000D48  D004               	goto	l4378
  4565  000D4A                     l4376:
  4566  000D4A  0100               	movlb	0	; () banked
  4567  000D4C  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  4568  000D4E  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  4569  000D50  6E8A               	movwf	3978,c	;volatile
  4570  000D52                     l4378:
  4571  000D52  FFFF               	dw	65535	; assembler added errata NOP
  4572  000D54  0E02               	movlw	2
  4573  000D56  EC1A  F014         	call	_UpdateLedRegister
  4574                           
  4575                           ;main.c: 493: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  4576  000D5A  5073               	movf	_blinkOn,w,c
  4577  000D5C  E003               	bz	l4384
  4578  000D5E  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  4579  000D62  D004               	goto	l4386
  4580  000D64                     l4384:
  4581  000D64  0100               	movlb	0	; () banked
  4582  000D66  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  4583  000D68  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  4584  000D6A  6E8A               	movwf	3978,c	;volatile
  4585  000D6C                     l4386:
  4586  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  4587  000D6E  0E03               	movlw	3
  4588  000D70  EC1A  F014         	call	_UpdateLedRegister
  4589                           
  4590                           ;main.c: 494: LATAbits.LATA0 = 1;
  4591  000D74  8089               	bsf	3977,0,c	;volatile
  4592                           
  4593                           ;main.c: 495: break;
  4594  000D76  D0B0               	goto	l4502
  4595  000D78                     l4390:
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;main.c: 497: LATA &= 0xF0;
  4599  000D78  0EF0               	movlw	240
  4600  000D7A  1689               	andwf	3977,f,c	;volatile
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;main.c: 498: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  4604  000D7C  5073               	movf	_blinkOn,w,c
  4605  000D7E  E003               	bz	l4396
  4606                           
  4607                           ; BSR set to: 0
  4608  000D80  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  4609  000D84  D003               	goto	l4398
  4610  000D86                     l4396:
  4611                           
  4612                           ; BSR set to: 0
  4613  000D86  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  4614  000D88  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  4615  000D8A  6E8A               	movwf	3978,c	;volatile
  4616  000D8C                     l4398:
  4617  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4618                           
  4619                           ; BSR set to: 0
  4620  000D8E  0E00               	movlw	0
  4621  000D90  EC1A  F014         	call	_UpdateLedRegister
  4622                           
  4623                           ;main.c: 499: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  4624  000D94  5073               	movf	_blinkOn,w,c
  4625  000D96  E003               	bz	l4404
  4626  000D98  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  4627  000D9C  D004               	goto	l4406
  4628  000D9E                     l4404:
  4629  000D9E  0100               	movlb	0	; () banked
  4630  000DA0  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  4631  000DA2  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  4632  000DA4  6E8A               	movwf	3978,c	;volatile
  4633  000DA6                     l4406:
  4634  000DA6  FFFF               	dw	65535	; assembler added errata NOP
  4635  000DA8  0E01               	movlw	1
  4636  000DAA  EC1A  F014         	call	_UpdateLedRegister
  4637                           
  4638                           ;main.c: 500: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  4639  000DAE  5073               	movf	_blinkOn,w,c
  4640  000DB0  E003               	bz	l4412
  4641  000DB2  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  4642  000DB6  D004               	goto	l4414
  4643  000DB8                     l4412:
  4644  000DB8  0100               	movlb	0	; () banked
  4645  000DBA  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  4646  000DBC  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  4647  000DBE  6E8A               	movwf	3978,c	;volatile
  4648  000DC0                     l4414:
  4649  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  4650  000DC2  0E02               	movlw	2
  4651  000DC4  EC1A  F014         	call	_UpdateLedRegister
  4652                           
  4653                           ;main.c: 501: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  4654  000DC8  5073               	movf	_blinkOn,w,c
  4655  000DCA  E003               	bz	l4420
  4656  000DCC  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  4657  000DD0  D004               	goto	l4422
  4658  000DD2                     l4420:
  4659  000DD2  0100               	movlb	0	; () banked
  4660  000DD4  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  4661  000DD6  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  4662  000DD8  6E8A               	movwf	3978,c	;volatile
  4663  000DDA                     l4422:
  4664  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  4665  000DDC  0E03               	movlw	3
  4666  000DDE  EC1A  F014         	call	_UpdateLedRegister
  4667                           
  4668                           ;main.c: 502: LATAbits.LATA1 = 1;
  4669  000DE2  8289               	bsf	3977,1,c	;volatile
  4670                           
  4671                           ;main.c: 503: break;
  4672  000DE4  D079               	goto	l4502
  4673  000DE6                     l4426:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;main.c: 505: LATA &= 0xF0;
  4677  000DE6  0EF0               	movlw	240
  4678  000DE8  1689               	andwf	3977,f,c	;volatile
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;main.c: 506: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  4682  000DEA  5073               	movf	_blinkOn,w,c
  4683  000DEC  E003               	bz	l4432
  4684                           
  4685                           ; BSR set to: 0
  4686  000DEE  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  4687  000DF2  D003               	goto	l4434
  4688  000DF4                     l4432:
  4689                           
  4690                           ; BSR set to: 0
  4691  000DF4  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  4692  000DF6  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  4693  000DF8  6E8A               	movwf	3978,c	;volatile
  4694  000DFA                     l4434:
  4695  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  4696                           
  4697                           ; BSR set to: 0
  4698  000DFC  0E00               	movlw	0
  4699  000DFE  EC1A  F014         	call	_UpdateLedRegister
  4700                           
  4701                           ;main.c: 507: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  4702  000E02  5073               	movf	_blinkOn,w,c
  4703  000E04  E003               	bz	l4440
  4704  000E06  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  4705  000E0A  D004               	goto	l4442
  4706  000E0C                     l4440:
  4707  000E0C  0100               	movlb	0	; () banked
  4708  000E0E  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  4709  000E10  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  4710  000E12  6E8A               	movwf	3978,c	;volatile
  4711  000E14                     l4442:
  4712  000E14  FFFF               	dw	65535	; assembler added errata NOP
  4713  000E16  0E01               	movlw	1
  4714  000E18  EC1A  F014         	call	_UpdateLedRegister
  4715                           
  4716                           ;main.c: 508: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  4717  000E1C  5073               	movf	_blinkOn,w,c
  4718  000E1E  E003               	bz	l4448
  4719  000E20  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  4720  000E24  D004               	goto	l4450
  4721  000E26                     l4448:
  4722  000E26  0100               	movlb	0	; () banked
  4723  000E28  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  4724  000E2A  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  4725  000E2C  6E8A               	movwf	3978,c	;volatile
  4726  000E2E                     l4450:
  4727  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  4728  000E30  0E02               	movlw	2
  4729  000E32  EC1A  F014         	call	_UpdateLedRegister
  4730                           
  4731                           ;main.c: 509: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  4732  000E36  5073               	movf	_blinkOn,w,c
  4733  000E38  E003               	bz	l4456
  4734  000E3A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  4735  000E3E  D004               	goto	l4458
  4736  000E40                     l4456:
  4737  000E40  0100               	movlb	0	; () banked
  4738  000E42  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  4739  000E44  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  4740  000E46  6E8A               	movwf	3978,c	;volatile
  4741  000E48                     l4458:
  4742  000E48  FFFF               	dw	65535	; assembler added errata NOP
  4743  000E4A  0E03               	movlw	3
  4744  000E4C  EC1A  F014         	call	_UpdateLedRegister
  4745                           
  4746                           ;main.c: 510: LATAbits.LATA2 = 1;
  4747  000E50  8489               	bsf	3977,2,c	;volatile
  4748                           
  4749                           ;main.c: 511: break;
  4750  000E52  D042               	goto	l4502
  4751  000E54                     l4462:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;main.c: 513: LATA &= 0xF0;
  4755  000E54  0EF0               	movlw	240
  4756  000E56  1689               	andwf	3977,f,c	;volatile
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 514: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  4760  000E58  5073               	movf	_blinkOn,w,c
  4761  000E5A  E003               	bz	l4468
  4762                           
  4763                           ; BSR set to: 0
  4764  000E5C  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  4765  000E60  D003               	goto	l4470
  4766  000E62                     l4468:
  4767                           
  4768                           ; BSR set to: 0
  4769  000E62  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  4770  000E64  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  4771  000E66  6E8A               	movwf	3978,c	;volatile
  4772  000E68                     l4470:
  4773  000E68  FFFF               	dw	65535	; assembler added errata NOP
  4774                           
  4775                           ; BSR set to: 0
  4776  000E6A  0E00               	movlw	0
  4777  000E6C  EC1A  F014         	call	_UpdateLedRegister
  4778                           
  4779                           ;main.c: 515: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  4780  000E70  5073               	movf	_blinkOn,w,c
  4781  000E72  E003               	bz	l4476
  4782  000E74  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  4783  000E78  D004               	goto	l4478
  4784  000E7A                     l4476:
  4785  000E7A  0100               	movlb	0	; () banked
  4786  000E7C  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  4787  000E7E  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  4788  000E80  6E8A               	movwf	3978,c	;volatile
  4789  000E82                     l4478:
  4790  000E82  FFFF               	dw	65535	; assembler added errata NOP
  4791  000E84  0E01               	movlw	1
  4792  000E86  EC1A  F014         	call	_UpdateLedRegister
  4793                           
  4794                           ;main.c: 516: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  4795  000E8A  5073               	movf	_blinkOn,w,c
  4796  000E8C  E003               	bz	l4484
  4797  000E8E  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  4798  000E92  D004               	goto	l4486
  4799  000E94                     l4484:
  4800  000E94  0100               	movlb	0	; () banked
  4801  000E96  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  4802  000E98  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  4803  000E9A  6E8A               	movwf	3978,c	;volatile
  4804  000E9C                     l4486:
  4805  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  4806  000E9E  0E02               	movlw	2
  4807  000EA0  EC1A  F014         	call	_UpdateLedRegister
  4808                           
  4809                           ;main.c: 517: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  4810  000EA4  5073               	movf	_blinkOn,w,c
  4811  000EA6  E003               	bz	l4492
  4812  000EA8  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  4813  000EAC  D004               	goto	l4494
  4814  000EAE                     l4492:
  4815  000EAE  0100               	movlb	0	; () banked
  4816  000EB0  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  4817  000EB2  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  4818  000EB4  6E8A               	movwf	3978,c	;volatile
  4819  000EB6                     l4494:
  4820  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  4821  000EB8  0E03               	movlw	3
  4822  000EBA  EC1A  F014         	call	_UpdateLedRegister
  4823                           
  4824                           ;main.c: 518: LATAbits.LATA3 = 1;
  4825  000EBE  8689               	bsf	3977,3,c	;volatile
  4826                           
  4827                           ;main.c: 519: break;
  4828  000EC0  D00B               	goto	l4502
  4829  000EC2                     l4500:
  4830  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  4831                           
  4832                           ; BSR set to: 0
  4833  000EC4  51D6               	movf	_currentLedBlock& (0+255),w,b
  4834                           
  4835                           ; Switch size 1, requested type "speed"
  4836                           ; Number of cases is 4, Range of values is 0 to 3
  4837                           ; switch strategies available:
  4838                           ; Name         Instructions Cycles
  4839                           ; simple_byte           13     7 (average)
  4840                           ;	Chosen strategy is simple_byte
  4841  000EC6  E101 D720          	bz	l4354
  4842  000ECA  0A01               	xorlw	1	; case 1
  4843  000ECC  E101 D754          	bz	l4390
  4844  000ED0  0A03               	xorlw	3	; case 2
  4845  000ED2  E089               	bz	l4426
  4846  000ED4  0A01               	xorlw	1	; case 3
  4847  000ED6  E0BE               	bz	l4462
  4848  000ED8                     l4502:
  4849  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  4850                           
  4851                           ;main.c: 522: currentLedBlock++;
  4852  000EDA  0100               	movlb	0	; () banked
  4853  000EDC  2BD6               	incf	_currentLedBlock& (0+255),f,b
  4854                           
  4855                           ;main.c: 525: currentLedBlock &= 0xFB;
  4856  000EDE  95D6               	bcf	_currentLedBlock& (0+255),2,b
  4857                           
  4858                           ; BSR set to: 0
  4859  000EE0  0012               	return		;funcret
  4860  000EE2  FFFF               	dw	65535	; errata NOP
  4861  000EE4                     __end_of_ProcessLightBlock:
  4862                           	opt stack 0
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           intcon	equ	0xFF2
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           plusw2	equ	0xFDB
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _UpdateLedRegister *****************
  4884 ;; Defined at:
  4885 ;;		line 260 in file "main.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  regIndex        1    wreg     unsigned char 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  regIndex        1    6[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      void 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4899 ;;      Params:         0       0       0       0       0       0       0
  4900 ;;      Locals:         1       0       0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0
  4902 ;;      Totals:         1       0       0       0       0       0       0
  4903 ;;Total ram usage:        1 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    2
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_ProcessLightBlock
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text23
  4914  002834                     __ptext23:
  4915                           	opt stack 0
  4916  002834                     _UpdateLedRegister:
  4917                           	opt stack 27
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;incstack = 0
  4921  002834  FFFF               	dw	65535
  4922                           
  4923                           ;UpdateLedRegister@regIndex stored from wreg
  4924  002836  6E07               	movwf	UpdateLedRegister@regIndex,c
  4925                           
  4926                           ;main.c: 262: switch(regIndex)
  4927  002838  D014               	goto	l3668
  4928  00283A                     l235:
  4929                           
  4930                           ;main.c: 265: LATAbits.LATA4 = 0;
  4931  00283A  9889               	bcf	3977,4,c	;volatile
  4932                           
  4933                           ;main.c: 266: TRISAbits.RA4 = 0;
  4934  00283C  9892               	bcf	3986,4,c	;volatile
  4935                           
  4936                           ;main.c: 267: LATAbits.LATA4 = 1;
  4937  00283E  8889               	bsf	3977,4,c	;volatile
  4938                           
  4939                           ;main.c: 268: TRISAbits.RA4 = 1;
  4940  002840  8892               	bsf	3986,4,c	;volatile
  4941                           
  4942                           ;main.c: 269: break;
  4943  002842  D018               	goto	l240
  4944  002844                     l237:
  4945                           
  4946                           ;main.c: 271: LATCbits.LATC3 = 0;
  4947  002844  968B               	bcf	3979,3,c	;volatile
  4948                           
  4949                           ;main.c: 272: TRISCbits.RC3 = 0;
  4950  002846  9694               	bcf	3988,3,c	;volatile
  4951                           
  4952                           ;main.c: 273: LATCbits.LATC3 = 1;
  4953  002848  868B               	bsf	3979,3,c	;volatile
  4954                           
  4955                           ;main.c: 274: TRISCbits.RC3 = 1;
  4956  00284A  8694               	bsf	3988,3,c	;volatile
  4957                           
  4958                           ;main.c: 275: break;
  4959  00284C  D013               	goto	l240
  4960  00284E                     l238:
  4961                           
  4962                           ;main.c: 277: LATCbits.LATC0 = 0;
  4963  00284E  908B               	bcf	3979,0,c	;volatile
  4964                           
  4965                           ;main.c: 278: TRISCbits.RC0 = 0;
  4966  002850  9094               	bcf	3988,0,c	;volatile
  4967                           
  4968                           ;main.c: 279: LATCbits.LATC0 = 1;
  4969  002852  808B               	bsf	3979,0,c	;volatile
  4970                           
  4971                           ;main.c: 280: TRISCbits.RC0 = 1;
  4972  002854  8094               	bsf	3988,0,c	;volatile
  4973                           
  4974                           ;main.c: 281: break;
  4975  002856  D00E               	goto	l240
  4976  002858                     l239:
  4977                           
  4978                           ;main.c: 283: LATCbits.LATC1 = 0;
  4979  002858  928B               	bcf	3979,1,c	;volatile
  4980                           
  4981                           ;main.c: 284: TRISCbits.RC1 = 0;
  4982  00285A  9294               	bcf	3988,1,c	;volatile
  4983                           
  4984                           ;main.c: 285: LATCbits.LATC1 = 1;
  4985  00285C  828B               	bsf	3979,1,c	;volatile
  4986                           
  4987                           ;main.c: 286: TRISCbits.RC1 = 1;
  4988  00285E  8294               	bsf	3988,1,c	;volatile
  4989                           
  4990                           ;main.c: 287: break;
  4991  002860  D009               	goto	l240
  4992  002862                     l3668:
  4993  002862  FFFF               	dw	65535	; assembler added errata NOP
  4994  002864  5007               	movf	UpdateLedRegister@regIndex,w,c
  4995                           
  4996                           ; Switch size 1, requested type "speed"
  4997                           ; Number of cases is 4, Range of values is 0 to 3
  4998                           ; switch strategies available:
  4999                           ; Name         Instructions Cycles
  5000                           ; simple_byte           13     7 (average)
  5001                           ;	Chosen strategy is simple_byte
  5002  002866  E0E9               	bz	l235
  5003  002868  0A01               	xorlw	1	; case 1
  5004  00286A  E0EC               	bz	l237
  5005  00286C  0A03               	xorlw	3	; case 2
  5006  00286E  E0EF               	bz	l238
  5007  002870  0A01               	xorlw	1	; case 3
  5008  002872  E0F2               	bz	l239
  5009  002874                     l240:
  5010  002874  FFFF               	dw	65535	; assembler added errata NOP
  5011  002876  0012               	return		;funcret
  5012  002878  FFFF               	dw	65535	; errata NOP
  5013  00287A                     __end_of_UpdateLedRegister:
  5014                           	opt stack 0
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1h	equ	0xFE2
  5026                           fsr1l	equ	0xFE1
  5027                           indf2	equ	0xFDF
  5028                           postinc2	equ	0xFDE
  5029                           postdec2	equ	0xFDD
  5030                           plusw2	equ	0xFDB
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _ProcessDiary *****************
  5036 ;; Defined at:
  5037 ;;		line 711 in file "main.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;		None
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  minute          1   33[COMRAM] unsigned char 
  5042 ;;  hour            1   32[COMRAM] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : F/1
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5052 ;;      Params:         0       0       0       0       0       0       0
  5053 ;;      Locals:         2       0       0       0       0       0       0
  5054 ;;      Temps:          4       0       0       0       0       0       0
  5055 ;;      Totals:         6       0       0       0       0       0       0
  5056 ;;Total ram usage:        6 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    5
  5059 ;; This function calls:
  5060 ;;		_GetTime
  5061 ;;		_LightLed
  5062 ;;		_LoadNextEvent
  5063 ;;		_PlaySound
  5064 ;;		_SwitchOffAllLeds
  5065 ;;		_getHourMin
  5066 ;; This function is called by:
  5067 ;;		_main
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text24
  5072  001E76                     __ptext24:
  5073                           	opt stack 0
  5074  001E76                     _ProcessDiary:
  5075                           	opt stack 25
  5076                           
  5077                           ;incstack = 0
  5078  001E76  FFFF               	dw	65535
  5079                           
  5080                           ; BSR set to: 1
  5081                           ;main.c: 714: if(curEventNum == 0xff)
  5082  001E78  2875               	incf	_curEventNum,w,c
  5083  001E7A  E059               	bz	l404
  5084                           
  5085                           ; BSR set to: 1
  5086                           ;main.c: 716: uint8_t hour, minute;
  5087                           ;main.c: 717: if(!getHourMin(&hour, &minute))
  5088  001E7C  0E22               	movlw	low ProcessDiary@minute
  5089  001E7E  6E07               	movwf	getHourMin@min,c
  5090  001E80  0E21               	movlw	ProcessDiary@hour& (0+255)
  5091  001E82  EC02  F015         	call	_getHourMin
  5092  001E86  0900               	iorlw	0
  5093  001E88  E052               	bz	l404
  5094                           
  5095                           ;main.c: 720: if(hour == 0 && minute == 0)
  5096  001E8A  5021               	movf	ProcessDiary@hour,w,c
  5097  001E8C  E10C               	bnz	l5798
  5098  001E8E  5022               	movf	ProcessDiary@minute,w,c
  5099  001E90  E10A               	bnz	l5798
  5100                           
  5101                           ;main.c: 721: {
  5102                           ;main.c: 722: SwitchOffAllLeds();
  5103  001E92  EC2D  F015         	call	_SwitchOffAllLeds	;wreg free
  5104                           
  5105                           ;main.c: 723: curEventNum = 0xff;
  5106  001E96  6875               	setf	_curEventNum,c
  5107                           
  5108                           ;main.c: 724: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5109  001E98  5076               	movf	_currentAlarmedEventNum,w,c
  5110  001E9A  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5111  001E9C  5075               	movf	_curEventNum,w,c
  5112  001E9E  0101               	movlb	1	; () banked
  5113  001EA0  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5114  001EA2  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5115  001EA6                     l5798:
  5116                           
  5117                           ;main.c: 726: }
  5118                           ;main.c: 729: if(curEventHour == hour && curEventMinute == minute)
  5119  001EA6  5021               	movf	ProcessDiary@hour,w,c
  5120  001EA8  0100               	movlb	0	; () banked
  5121  001EAA  19D4               	xorwf	_curEventHour& (0+255),w,b
  5122  001EAC  E140               	bnz	l404
  5123                           
  5124                           ; BSR set to: 0
  5125  001EAE  5022               	movf	ProcessDiary@minute,w,c
  5126  001EB0  19D5               	xorwf	_curEventMinute& (0+255),w,b
  5127  001EB2  E13D               	bnz	l404
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;main.c: 730: {
  5131                           ;main.c: 732: if(currentAlarmedEventNum != 0xff)
  5132  001EB4  2876               	incf	_currentAlarmedEventNum,w,c
  5133  001EB6  E006               	bz	l5806
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;main.c: 733: {
  5137                           ;main.c: 734: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5138  001EB8  0E02               	movlw	2
  5139  001EBA  6E07               	movwf	LightLed@ledState,c
  5140  001EBC  6A08               	clrf	LightLed@blink,c
  5141  001EBE  2876               	incf	_currentAlarmedEventNum,w,c
  5142  001EC0  ECC0  F004         	call	_LightLed
  5143  001EC4                     l5806:
  5144                           
  5145                           ;main.c: 735: }
  5146                           ;main.c: 737: {
  5147                           ;main.c: 738: currentAlarmedEventNum = curEventNum;
  5148  001EC4  C075  F076         	movff	_curEventNum,_currentAlarmedEventNum
  5149                           
  5150                           ;main.c: 740: LightLed(currentAlarmedEventNum + 1, LED_ORANGE, 1);
  5151  001EC8  0E03               	movlw	3
  5152  001ECA  6E07               	movwf	LightLed@ledState,c
  5153  001ECC  0E01               	movlw	1
  5154  001ECE  6E08               	movwf	LightLed@blink,c
  5155  001ED0  2876               	incf	_currentAlarmedEventNum,w,c
  5156  001ED2  ECC0  F004         	call	_LightLed
  5157                           
  5158                           ;main.c: 741: if(_nextEventSoundId != 0)
  5159  001ED6  0100               	movlb	0	; () banked
  5160  001ED8  51CF               	movf	__nextEventSoundId& (0+255),w,b
  5161  001EDA  E007               	bz	l5812
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;main.c: 742: {
  5165                           ;main.c: 743: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5166  001EDC  C0C2  F015         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5167  001EE0  C0C3  F016         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5168  001EE4  05CF               	decf	__nextEventSoundId& (0+255),w,b
  5169  001EE6  EC00  F00E         	call	_PlaySound
  5170  001EEA                     l5812:
  5171                           
  5172                           ;main.c: 744: }
  5173                           ;main.c: 753: eventResetSecond = *GetTime() + eventAcceptTime;
  5174  001EEA  ECC0  F015         	call	_GetTime	;wreg free
  5175  001EEE  6ED9               	movwf	fsr2l,c
  5176  001EF0  6ADA               	clrf	fsr2h,c
  5177  001EF2  CFDE F01D          	movff	postinc2,??_ProcessDiary
  5178  001EF6  CFDE F01E          	movff	postinc2,??_ProcessDiary+1
  5179  001EFA  CFDE F01F          	movff	postinc2,??_ProcessDiary+2
  5180  001EFE  CFDE F020          	movff	postinc2,??_ProcessDiary+3
  5181  001F02  0100               	movlb	0	; () banked
  5182  001F04  51D7               	movf	_eventAcceptTime& (0+255),w,b
  5183  001F06  241D               	addwf	??_ProcessDiary,w,c
  5184  001F08  6FAC               	movwf	_eventResetSecond& (0+255),b
  5185  001F0A  0E00               	movlw	0
  5186  001F0C  201E               	addwfc	??_ProcessDiary+1,w,c
  5187  001F0E  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  5188  001F10  0E00               	movlw	0
  5189  001F12  201F               	addwfc	??_ProcessDiary+2,w,c
  5190  001F14  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  5191  001F16  0E00               	movlw	0
  5192  001F18  2020               	addwfc	??_ProcessDiary+3,w,c
  5193  001F1A  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;main.c: 754: LoadNextEvent();
  5197  001F1C  ECFA  F00B         	call	_LoadNextEvent	;wreg free
  5198                           
  5199                           ;main.c: 755: }
  5200                           ;main.c: 756: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5201  001F20  5076               	movf	_currentAlarmedEventNum,w,c
  5202  001F22  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5203  001F24  5075               	movf	_curEventNum,w,c
  5204  001F26  0101               	movlb	1	; () banked
  5205  001F28  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5206  001F2A  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5207  001F2E                     l404:
  5208  001F2E  0012               	return		;funcret
  5209  001F30  FFFF               	dw	65535	; errata NOP
  5210  001F32                     __end_of_ProcessDiary:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           intcon	equ	0xFF2
  5219                           postinc0	equ	0xFEE
  5220                           wreg	equ	0xFE8
  5221                           postdec1	equ	0xFE5
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           postinc2	equ	0xFDE
  5226                           postdec2	equ	0xFDD
  5227                           plusw2	equ	0xFDB
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function _SwitchOffAllLeds *****************
  5233 ;; Defined at:
  5234 ;;		line 292 in file "main.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  i               1    6[COMRAM] unsigned char 
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5248 ;;      Params:         0       0       0       0       0       0       0
  5249 ;;      Locals:         1       0       0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0       0       0
  5251 ;;      Totals:         1       0       0       0       0       0       0
  5252 ;;Total ram usage:        1 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    2
  5255 ;; This function calls:
  5256 ;;		Nothing
  5257 ;; This function is called by:
  5258 ;;		_InitFromEeprom
  5259 ;;		_ProcessDiary
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text25
  5264  002A5A                     __ptext25:
  5265                           	opt stack 0
  5266  002A5A                     _SwitchOffAllLeds:
  5267                           	opt stack 26
  5268                           
  5269                           ;incstack = 0
  5270  002A5A  FFFF               	dw	65535
  5271                           
  5272                           ;main.c: 294: for(uint8_t i = 0; i < 16 - 1; i++)
  5273  002A5C  6A07               	clrf	SwitchOffAllLeds@i,c
  5274  002A5E                     l5198:
  5275  002A5E  FFFF               	dw	65535	; assembler added errata NOP
  5276                           
  5277                           ;main.c: 295: {
  5278                           ;main.c: 296: ledStatuses[i] = 0;
  5279  002A60  5007               	movf	SwitchOffAllLeds@i,w,c
  5280  002A62  0F90               	addlw	low _ledStatuses
  5281  002A64  6ED9               	movwf	fsr2l,c
  5282  002A66  6ADA               	clrf	fsr2h,c
  5283  002A68  6ADF               	clrf	indf2,c
  5284                           
  5285                           ;main.c: 297: ledBlink[i] = 0;
  5286  002A6A  5007               	movf	SwitchOffAllLeds@i,w,c
  5287  002A6C  0F80               	addlw	low _ledBlink
  5288  002A6E  6ED9               	movwf	fsr2l,c
  5289  002A70  6ADA               	clrf	fsr2h,c
  5290  002A72  6ADF               	clrf	indf2,c
  5291  002A74  2A07               	incf	SwitchOffAllLeds@i,f,c
  5292  002A76  0E0E               	movlw	14
  5293  002A78  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5294  002A7A  D7F1               	goto	l5198
  5295  002A7C  0C0E               	retlw	14	;funcret
  5296  002A7E  FFFF               	dw	65535	; errata NOP
  5297  002A80                     __end_of_SwitchOffAllLeds:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1h	equ	0xFE2
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           plusw2	equ	0xFDB
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _PlaySound *****************
  5320 ;; Defined at:
  5321 ;;		line 589 in file "main.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  soundId         1    wreg     unsigned char 
  5324 ;;  playDuration    2   20[COMRAM] unsigned int 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  soundId         1   26[COMRAM] unsigned char 
  5327 ;;  soundAddr       1   27[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      unsigned char 
  5330 ;; Registers used:
  5331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : E/1
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5337 ;;      Params:         2       0       0       0       0       0       0
  5338 ;;      Locals:         2       0       0       0       0       0       0
  5339 ;;      Temps:          4       0       0       0       0       0       0
  5340 ;;      Totals:         8       0       0       0       0       0       0
  5341 ;;Total ram usage:        8 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		_GetTime
  5346 ;;		_SoundPlayNextStep
  5347 ;; This function is called by:
  5348 ;;		_ProcessDiary
  5349 ;;		_CommandSetStatusLed
  5350 ;;		_io_poll
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text26
  5355  001C00                     __ptext26:
  5356                           	opt stack 0
  5357  001C00                     _PlaySound:
  5358                           	opt stack 25
  5359                           
  5360                           ;incstack = 0
  5361  001C00  FFFF               	dw	65535
  5362                           
  5363                           ;PlaySound@soundId stored from wreg
  5364  001C02  6E1B               	movwf	PlaySound@soundId,c
  5365                           
  5366                           ;main.c: 591: if(soundId >= _soundCount)
  5367  001C04  5071               	movf	__soundCount,w,c
  5368  001C06  5C1B               	subwf	PlaySound@soundId,w,c
  5369  001C08  E26E               	bc	l368
  5370                           
  5371                           ;main.c: 594: if(playDuration == 0)
  5372  001C0A  5015               	movf	PlaySound@playDuration,w,c
  5373  001C0C  1016               	iorwf	PlaySound@playDuration+1,w,c
  5374  001C0E  E106               	bnz	l5214
  5375                           
  5376                           ;main.c: 595: soundTestEnd = 0;
  5377  001C10  0100               	movlb	0	; () banked
  5378  001C12  6BB8               	clrf	_soundTestEnd& (0+255),b
  5379  001C14  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  5380  001C16  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  5381  001C18  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  5382  001C1A  D023               	goto	l5220
  5383  001C1C                     l5214:
  5384                           
  5385                           ;main.c: 596: else if(playDuration == 65535)
  5386  001C1C  2815               	incf	PlaySound@playDuration,w,c
  5387  001C1E  E108               	bnz	l5218
  5388  001C20  2816               	incf	PlaySound@playDuration+1,w,c
  5389  001C22  E106               	bnz	l5218
  5390                           
  5391                           ;main.c: 597: soundTestEnd = 4294967295;
  5392  001C24  0100               	movlb	0	; () banked
  5393  001C26  69B8               	setf	_soundTestEnd& (0+255),b
  5394  001C28  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  5395  001C2A  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  5396  001C2C  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  5397  001C2E  D019               	goto	l5220
  5398  001C30                     l5218:
  5399                           
  5400                           ;main.c: 598: else
  5401                           ;main.c: 599: soundTestEnd = *GetTime() + playDuration;
  5402  001C30  ECC0  F015         	call	_GetTime	;wreg free
  5403  001C34  6ED9               	movwf	fsr2l,c
  5404  001C36  6ADA               	clrf	fsr2h,c
  5405  001C38  CFDE F017          	movff	postinc2,??_PlaySound
  5406  001C3C  CFDE F018          	movff	postinc2,??_PlaySound+1
  5407  001C40  CFDE F019          	movff	postinc2,??_PlaySound+2
  5408  001C44  CFDE F01A          	movff	postinc2,??_PlaySound+3
  5409  001C48  5015               	movf	PlaySound@playDuration,w,c
  5410  001C4A  2417               	addwf	??_PlaySound,w,c
  5411  001C4C  0100               	movlb	0	; () banked
  5412  001C4E  6FB8               	movwf	_soundTestEnd& (0+255),b
  5413  001C50  5016               	movf	PlaySound@playDuration+1,w,c
  5414  001C52  2018               	addwfc	??_PlaySound+1,w,c
  5415  001C54  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  5416  001C56  0E00               	movlw	0
  5417  001C58  2019               	addwfc	??_PlaySound+2,w,c
  5418  001C5A  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  5419  001C5C  0E00               	movlw	0
  5420  001C5E  201A               	addwfc	??_PlaySound+3,w,c
  5421  001C60  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  5422  001C62                     l5220:
  5423  001C62  FFFF               	dw	65535	; assembler added errata NOP
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;main.c: 601: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  5427  001C64  501B               	movf	PlaySound@soundId,w,c
  5428  001C66  0F8D               	addlw	141
  5429  001C68  6EA9               	movwf	4009,c	;volatile
  5430                           
  5431                           ; BSR set to: 0
  5432  001C6A  80A6               	bsf	4006,0,c	;volatile
  5433                           
  5434                           ; BSR set to: 0
  5435  001C6C  CFA8 F01C          	movff	4008,PlaySound@soundAddr	;volatile
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;main.c: 602: if(140 + _soundCount + soundAddr >= 256)
  5439  001C70  501C               	movf	PlaySound@soundAddr,w,c
  5440  001C72  C071  F017         	movff	__soundCount,??_PlaySound
  5441  001C76  6A18               	clrf	(??_PlaySound+1)& (0+255),c
  5442  001C78  2617               	addwf	??_PlaySound,f,c
  5443  001C7A  0E00               	movlw	0
  5444  001C7C  2218               	addwfc	??_PlaySound+1,f,c
  5445  001C7E  0E8C               	movlw	140
  5446  001C80  2617               	addwf	??_PlaySound,f,c
  5447  001C82  0E00               	movlw	0
  5448  001C84  2218               	addwfc	??_PlaySound+1,f,c
  5449  001C86  BE18               	btfsc	??_PlaySound+1,7,c
  5450  001C88  D002               	goto	l5230
  5451  001C8A  0418               	decf	??_PlaySound+1,w,c
  5452  001C8C  E22C               	bc	l368
  5453  001C8E                     l5230:
  5454  001C8E  FFFF               	dw	65535	; assembler added errata NOP
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;main.c: 605: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  5458  001C90  5071               	movf	__soundCount,w,c
  5459  001C92  241C               	addwf	PlaySound@soundAddr,w,c
  5460  001C94  0F8D               	addlw	141
  5461  001C96  6EA9               	movwf	4009,c	;volatile
  5462                           
  5463                           ; BSR set to: 0
  5464  001C98  80A6               	bsf	4006,0,c	;volatile
  5465                           
  5466                           ; BSR set to: 0
  5467  001C9A  CFA8 F0D1          	movff	4008,__playingSoundSteps	;volatile
  5468                           
  5469                           ;main.c: 607: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  5470  001C9E  5071               	movf	__soundCount,w,c
  5471  001CA0  241C               	addwf	PlaySound@soundAddr,w,c
  5472  001CA2  0F8E               	addlw	142
  5473  001CA4  6E70               	movwf	__playingSoundStartPosInEe,c
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;main.c: 608: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5477  001CA6  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5478  001CA8  6E17               	movwf	??_PlaySound& (0+255),c
  5479  001CAA  5070               	movf	__playingSoundStartPosInEe,w,c
  5480  001CAC  0101               	movlb	1	; () banked
  5481  001CAE  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5482  001CB0  C017  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5483                           
  5484                           ; BSR set to: 1
  5485                           ;main.c: 609: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5486  001CB4  0100               	movlb	0	; () banked
  5487  001CB6  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5488  001CB8  0D03               	mullw	3
  5489  001CBA  5070               	movf	__playingSoundStartPosInEe,w,c
  5490  001CBC  26F3               	addwf	prodl,f,c
  5491  001CBE  0E00               	movlw	0
  5492  001CC0  22F4               	addwfc	prodh,f,c
  5493  001CC2  BEF4               	btfsc	prodh,7,c
  5494  001CC4  D002               	goto	l374
  5495  001CC6  04F4               	decf	prodh,w,c
  5496  001CC8  E20E               	bc	l368
  5497  001CCA                     l374:
  5498  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;main.c: 612: _playingSoundCurPos = 0;
  5502  001CCC  6BD0               	clrf	__playingSoundCurPos& (0+255),b
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;main.c: 613: _isSoundPlaying = 1;
  5506  001CCE  0E01               	movlw	1
  5507  001CD0  6FCE               	movwf	__isSoundPlaying& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;main.c: 614: SoundPlayNextStep();
  5511  001CD2  ECF4  F00F         	call	_SoundPlayNextStep	;wreg free
  5512                           
  5513                           ;main.c: 616: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  5514  001CD6  5071               	movf	__soundCount,w,c
  5515  001CD8  6E17               	movwf	??_PlaySound& (0+255),c
  5516  001CDA  0100               	movlb	0	; () banked
  5517  001CDC  51CE               	movf	__isSoundPlaying& (0+255),w,b
  5518  001CDE  0101               	movlb	1	; () banked
  5519  001CE0  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  5520  001CE2  C017  F1B7         	movff	??_PlaySound,__MODBUSInputRegs+13
  5521  001CE6                     l368:
  5522  001CE6  0012               	return		;funcret
  5523  001CE8  FFFF               	dw	65535	; errata NOP
  5524  001CEA                     __end_of_PlaySound:
  5525                           	opt stack 0
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           postinc0	equ	0xFEE
  5534                           wreg	equ	0xFE8
  5535                           postdec1	equ	0xFE5
  5536                           fsr1h	equ	0xFE2
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           plusw2	equ	0xFDB
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _SoundPlayNextStep *****************
  5547 ;; Defined at:
  5548 ;;		line 546 in file "main.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  duration        1   19[COMRAM] unsigned char 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : F/0
  5559 ;;		On exit  : E/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5562 ;;      Params:         0       0       0       0       0       0       0
  5563 ;;      Locals:         1       0       0       0       0       0       0
  5564 ;;      Temps:          5       0       0       0       0       0       0
  5565 ;;      Totals:         6       0       0       0       0       0       0
  5566 ;;Total ram usage:        6 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    3
  5569 ;; This function calls:
  5570 ;;		_GetTime
  5571 ;;		_SetBuzzerDuty
  5572 ;;		_StopPlaying
  5573 ;;		_millis
  5574 ;; This function is called by:
  5575 ;;		_PlaySound
  5576 ;;		_main
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text27
  5581  001FE8                     __ptext27:
  5582                           	opt stack 0
  5583  001FE8                     _SoundPlayNextStep:
  5584                           	opt stack 25
  5585                           
  5586                           ;incstack = 0
  5587  001FE8  FFFF               	dw	65535
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;main.c: 548: if(_playingSoundCurPos >= _playingSoundSteps)
  5591  001FEA  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5592  001FEC  5DD0               	subwf	__playingSoundCurPos& (0+255),w,b
  5593  001FEE  E316               	bnc	l5136
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;main.c: 549: {
  5597                           ;main.c: 550: _playingSoundCurPos = 0;
  5598  001FF0  6BD0               	clrf	__playingSoundCurPos& (0+255),b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;main.c: 551: if(*GetTime() >= soundTestEnd)
  5602  001FF2  ECC0  F015         	call	_GetTime	;wreg free
  5603  001FF6  6ED9               	movwf	fsr2l,c
  5604  001FF8  6ADA               	clrf	fsr2h,c
  5605  001FFA  0100               	movlb	0	; () banked
  5606  001FFC  51B8               	movf	_soundTestEnd& (0+255),w,b
  5607  001FFE  5CDE               	subwf	postinc2,w,c
  5608  002000  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  5609  002002  58DE               	subwfb	postinc2,w,c
  5610  002004  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  5611  002006  58DE               	subwfb	postinc2,w,c
  5612  002008  50DE               	movf	postinc2,w,c
  5613  00200A  0A80               	xorlw	128
  5614  00200C  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  5615  00200E  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  5616  002010  0A80               	xorlw	128
  5617  002012  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  5618  002014  E303               	bnc	l5136
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;main.c: 552: {
  5622                           ;main.c: 553: StopPlaying();
  5623  002016  EC6D  F015         	call	_StopPlaying	;wreg free
  5624  00201A  D03A               	goto	l361
  5625  00201C                     l5136:
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;main.c: 555: }
  5629                           ;main.c: 556: }
  5630                           ;main.c: 557: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  5631  00201C  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  5632  00201E  0D03               	mullw	3
  5633  002020  50F3               	movf	prodl,w,c
  5634  002022  2470               	addwf	__playingSoundStartPosInEe,w,c
  5635  002024  6EA9               	movwf	4009,c	;volatile
  5636                           
  5637                           ; BSR set to: 0
  5638  002026  80A6               	bsf	4006,0,c	;volatile
  5639                           
  5640                           ; BSR set to: 0
  5641  002028  50A8               	movf	4008,w,c	;volatile
  5642  00202A  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  5643  00202C  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  5644  00202E  EC18  F015         	call	_millis	;wreg free
  5645  002032  500F               	movf	??_SoundPlayNextStep,w,c
  5646  002034  2407               	addwf	?_millis,w,c
  5647  002036  0100               	movlb	0	; () banked
  5648  002038  6FA0               	movwf	__playingEndMs& (0+255),b
  5649  00203A  5010               	movf	??_SoundPlayNextStep+1,w,c
  5650  00203C  2008               	addwfc	?_millis+1,w,c
  5651  00203E  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  5652  002040  0E00               	movlw	0
  5653  002042  2009               	addwfc	?_millis+2,w,c
  5654  002044  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  5655  002046  0E00               	movlw	0
  5656  002048  200A               	addwfc	?_millis+3,w,c
  5657  00204A  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;main.c: 558: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  5661  00204C  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  5662  00204E  0D03               	mullw	3
  5663  002050  50F3               	movf	prodl,w,c
  5664  002052  2470               	addwf	__playingSoundStartPosInEe,w,c
  5665  002054  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  5666  002056  280F               	incf	??_SoundPlayNextStep,w,c
  5667  002058  6EA9               	movwf	4009,c	;volatile
  5668                           
  5669                           ; BSR set to: 0
  5670  00205A  80A6               	bsf	4006,0,c	;volatile
  5671                           
  5672                           ; BSR set to: 0
  5673  00205C  CFA8 FFCB          	movff	4008,4043	;volatile
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;main.c: 559: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  5677  002060  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  5678  002062  0D03               	mullw	3
  5679  002064  50F3               	movf	prodl,w,c
  5680  002066  2470               	addwf	__playingSoundStartPosInEe,w,c
  5681  002068  0F02               	addlw	2
  5682  00206A  6EA9               	movwf	4009,c	;volatile
  5683                           
  5684                           ; BSR set to: 0
  5685  00206C  80A6               	bsf	4006,0,c	;volatile
  5686                           
  5687                           ; BSR set to: 0
  5688  00206E  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;main.c: 560: _playingSoundCurPos++;
  5692  002072  2BD0               	incf	__playingSoundCurPos& (0+255),f,b
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;main.c: 561: if(duration == 0 || PR2 == 0)
  5696  002074  5014               	movf	SoundPlayNextStep@duration,w,c
  5697  002076  E002               	bz	l364
  5698                           
  5699                           ; BSR set to: 0
  5700  002078  50CB               	movf	4043,w,c	;volatile
  5701  00207A  E103               	bnz	l5160
  5702  00207C                     l364:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;main.c: 562: {
  5706                           ;main.c: 563: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5707  00207C  94CA               	bcf	4042,2,c	;volatile
  5708  00207E  8494               	bsf	3988,2,c	;volatile
  5709                           
  5710                           ;main.c: 564: return;
  5711  002080  D007               	goto	l361
  5712  002082                     l5160:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;main.c: 565: }
  5716                           ;main.c: 566: SetBuzzerDuty(duration);
  5717  002082  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  5718  002086  6A08               	clrf	SetBuzzerDuty@dc+1,c
  5719  002088  ECBA  F014         	call	_SetBuzzerDuty	;wreg free
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;main.c: 567: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  5723  00208C  9494               	bcf	3988,2,c	;volatile
  5724                           
  5725                           ; BSR set to: 0
  5726  00208E  84CA               	bsf	4042,2,c	;volatile
  5727  002090                     l361:
  5728  002090  FFFF               	dw	65535	; assembler added errata NOP
  5729  002092  0012               	return		;funcret
  5730  002094  FFFF               	dw	65535	; errata NOP
  5731  002096                     __end_of_SoundPlayNextStep:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           postdec1	equ	0xFE5
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _StopPlaying *****************
  5754 ;; Defined at:
  5755 ;;		line 538 in file "main.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  1    wreg      void 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : F/1
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5769 ;;      Params:         0       0       0       0       0       0       0
  5770 ;;      Locals:         0       0       0       0       0       0       0
  5771 ;;      Temps:          2       0       0       0       0       0       0
  5772 ;;      Totals:         2       0       0       0       0       0       0
  5773 ;;Total ram usage:        2 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    2
  5776 ;; This function calls:
  5777 ;;		Nothing
  5778 ;; This function is called by:
  5779 ;;		_SoundPlayNextStep
  5780 ;;		_ResetEvent
  5781 ;;		_main
  5782 ;;		_CommandSetStatusLed
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text28
  5787  002ADA                     __ptext28:
  5788                           	opt stack 0
  5789  002ADA                     _StopPlaying:
  5790                           	opt stack 25
  5791                           
  5792                           ;incstack = 0
  5793  002ADA  FFFF               	dw	65535
  5794                           
  5795                           ;main.c: 540: _isSoundPlaying = 0;
  5796  002ADC  0100               	movlb	0	; () banked
  5797  002ADE  6BCE               	clrf	__isSoundPlaying& (0+255),b
  5798                           
  5799                           ;main.c: 541: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5800  002AE0  94CA               	bcf	4042,2,c	;volatile
  5801  002AE2  8494               	bsf	3988,2,c	;volatile
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;main.c: 543: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  5805  002AE4  5071               	movf	__soundCount,w,c
  5806  002AE6  6E07               	movwf	??_StopPlaying& (0+255),c
  5807  002AE8  51CE               	movf	__isSoundPlaying& (0+255),w,b
  5808  002AEA  0101               	movlb	1	; () banked
  5809  002AEC  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  5810  002AEE  C007  F1B7         	movff	??_StopPlaying,__MODBUSInputRegs+13
  5811                           
  5812                           ; BSR set to: 1
  5813  002AF2  0012               	return		;funcret
  5814  002AF4  FFFF               	dw	65535	; errata NOP
  5815  002AF6                     __end_of_StopPlaying:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           intcon	equ	0xFF2
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1h	equ	0xFE2
  5828                           fsr1l	equ	0xFE1
  5829                           indf2	equ	0xFDF
  5830                           postinc2	equ	0xFDE
  5831                           postdec2	equ	0xFDD
  5832                           plusw2	equ	0xFDB
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _SetBuzzerDuty *****************
  5838 ;; Defined at:
  5839 ;;		line 392 in file "main.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;  dc              2    6[COMRAM] unsigned int 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0
  5848 ;; Tracked objects:
  5849 ;;		On entry : F/0
  5850 ;;		On exit  : F/0
  5851 ;;		Unchanged: F/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5853 ;;      Params:         2       0       0       0       0       0       0
  5854 ;;      Locals:         0       0       0       0       0       0       0
  5855 ;;      Temps:          2       0       0       0       0       0       0
  5856 ;;      Totals:         4       0       0       0       0       0       0
  5857 ;;Total ram usage:        4 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    2
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_SoundPlayNextStep
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text29
  5868  002974                     __ptext29:
  5869                           	opt stack 0
  5870  002974                     _SetBuzzerDuty:
  5871                           	opt stack 25
  5872                           
  5873                           ; BSR set to: 1
  5874                           ;incstack = 0
  5875  002974  FFFF               	dw	65535
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;main.c: 397: CCP1CONbits.DC1B = dc & 0x03;
  5879  002976  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5880  00297A  0E03               	movlw	3
  5881  00297C  1609               	andwf	??_SetBuzzerDuty,f,c
  5882  00297E  3A09               	swapf	??_SetBuzzerDuty,f,c
  5883  002980  50BD               	movf	4029,w,c	;volatile
  5884  002982  1809               	xorwf	??_SetBuzzerDuty,w,c
  5885  002984  0BCF               	andlw	-49
  5886  002986  1809               	xorwf	??_SetBuzzerDuty,w,c
  5887  002988  6EBD               	movwf	4029,c	;volatile
  5888                           
  5889                           ;main.c: 401: CCPR1L = (uint8_t)(dc >> 2);
  5890  00298A  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5891  00298E  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  5892  002992  90D8               	bcf	status,0,c
  5893  002994  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5894  002996  3209               	rrcf	??_SetBuzzerDuty,f,c
  5895  002998  90D8               	bcf	status,0,c
  5896  00299A  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5897  00299C  3209               	rrcf	??_SetBuzzerDuty,f,c
  5898  00299E  5009               	movf	??_SetBuzzerDuty,w,c
  5899  0029A0  6EBE               	movwf	4030,c	;volatile
  5900                           
  5901                           ; BSR set to: 0
  5902  0029A2  0012               	return		;funcret
  5903  0029A4  FFFF               	dw	65535	; errata NOP
  5904  0029A6                     __end_of_SetBuzzerDuty:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1h	equ	0xFE2
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _GetTime *****************
  5927 ;; Defined at:
  5928 ;;		line 206 in file "user.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      PTR long 
  5935 ;; Registers used:
  5936 ;;		wreg
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5942 ;;      Params:         2       0       0       0       0       0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0
  5945 ;;      Totals:         2       0       0       0       0       0       0
  5946 ;;Total ram usage:        2 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    2
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		_SoundPlayNextStep
  5953 ;;		_PlaySound
  5954 ;;		_ProcessDiary
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text30
  5960  002B80                     __ptext30:
  5961                           	opt stack 0
  5962  002B80                     _GetTime:
  5963                           	opt stack 25
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;incstack = 0
  5967  002B80  FFFF               	dw	65535
  5968                           
  5969                           ;user.c: 208: return &currentTime;
  5970  002B82  0ED9               	movlw	_currentTime& (0+255)
  5971  002B84  0012               	return		;funcret
  5972  002B86  FFFF               	dw	65535	; errata NOP
  5973  002B88                     __end_of_GetTime:
  5974                           	opt stack 0
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           postinc0	equ	0xFEE
  5983                           wreg	equ	0xFE8
  5984                           postdec1	equ	0xFE5
  5985                           fsr1h	equ	0xFE2
  5986                           fsr1l	equ	0xFE1
  5987                           indf2	equ	0xFDF
  5988                           postinc2	equ	0xFDE
  5989                           postdec2	equ	0xFDD
  5990                           plusw2	equ	0xFDB
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function _LoadNextEvent *****************
  5996 ;; Defined at:
  5997 ;;		line 635 in file "main.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;		None
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  v1              1   12[COMRAM] unsigned char 
  6002 ;;  minute          1   11[COMRAM] unsigned char 
  6003 ;;  hour            1   10[COMRAM] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6013 ;;      Params:         0       0       0       0       0       0       0
  6014 ;;      Locals:         3       0       0       0       0       0       0
  6015 ;;      Temps:          2       0       0       0       0       0       0
  6016 ;;      Totals:         5       0       0       0       0       0       0
  6017 ;;Total ram usage:        5 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    3
  6020 ;; This function calls:
  6021 ;;		_getHourMin
  6022 ;; This function is called by:
  6023 ;;		_InitFromEeprom
  6024 ;;		_ProcessDiary
  6025 ;;		_SetTimeFromRegs
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text31
  6030  0017F4                     __ptext31:
  6031                           	opt stack 0
  6032  0017F4                     _LoadNextEvent:
  6033                           	opt stack 24
  6034                           
  6035                           ;incstack = 0
  6036  0017F4  FFFF               	dw	65535
  6037                           
  6038                           ;main.c: 637: if(eventCount == 0)
  6039  0017F6  0100               	movlb	0	; () banked
  6040  0017F8  51D8               	movf	_eventCount& (0+255),w,b
  6041  0017FA  E07E               	bz	l385
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;main.c: 639: uint8_t hour, minute;
  6045                           ;main.c: 640: if(!getHourMin(&hour, &minute))
  6046  0017FC  0E0C               	movlw	low LoadNextEvent@minute
  6047  0017FE  6E07               	movwf	getHourMin@min,c
  6048  001800  0E0B               	movlw	LoadNextEvent@hour& (0+255)
  6049  001802  EC02  F015         	call	_getHourMin
  6050  001806  0900               	iorlw	0
  6051  001808  E077               	bz	l385
  6052  00180A                     l5068:
  6053                           
  6054                           ;main.c: 650: {
  6055                           ;main.c: 651: if(curEventNum == 0xff)
  6056  00180A  2875               	incf	_curEventNum,w,c
  6057  00180C  E102               	bnz	l5072
  6058                           
  6059                           ;main.c: 652: curEventNum = 0;
  6060  00180E  6A75               	clrf	_curEventNum,c
  6061  001810  D001               	goto	l5074
  6062  001812                     l5072:
  6063                           
  6064                           ;main.c: 653: else
  6065                           ;main.c: 654: curEventNum++;
  6066  001812  2A75               	incf	_curEventNum,f,c
  6067  001814                     l5074:
  6068  001814  FFFF               	dw	65535	; assembler added errata NOP
  6069                           
  6070                           ;main.c: 655: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6071  001816  5076               	movf	_currentAlarmedEventNum,w,c
  6072  001818  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6073  00181A  5075               	movf	_curEventNum,w,c
  6074  00181C  0101               	movlb	1	; () banked
  6075  00181E  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6076  001820  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6077                           
  6078                           ; BSR set to: 1
  6079                           ;main.c: 656: if(curEventNum >= eventCount)
  6080  001824  0100               	movlb	0	; () banked
  6081  001826  51D8               	movf	_eventCount& (0+255),w,b
  6082  001828  5C75               	subwf	_curEventNum,w,c
  6083  00182A  E307               	bnc	l5080
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;main.c: 657: {
  6087                           ;main.c: 658: curEventNum = 0xff;
  6088  00182C  6875               	setf	_curEventNum,c
  6089                           
  6090                           ;main.c: 659: curEventMinute = 0;
  6091  00182E  6BD5               	clrf	_curEventMinute& (0+255),b
  6092                           
  6093                           ;main.c: 660: curEventHour = 0;
  6094  001830  6BD4               	clrf	_curEventHour& (0+255),b
  6095                           
  6096                           ;main.c: 661: _MODBUSInputRegs[3] = (((uint16_t)0<<8)|0);
  6097  001832  0101               	movlb	1	; () banked
  6098  001834  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  6099  001836  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  6100                           
  6101                           ;main.c: 662: return;
  6102  001838  D05F               	goto	l385
  6103  00183A                     l5080:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;main.c: 663: }
  6107                           ;main.c: 674: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6108  00183A  5075               	movf	_curEventNum,w,c
  6109  00183C  0D02               	mullw	2
  6110  00183E  50F3               	movf	prodl,w,c
  6111  001840  0F13               	addlw	19
  6112  001842  6EA9               	movwf	4009,c	;volatile
  6113                           
  6114                           ; BSR set to: 0
  6115  001844  80A6               	bsf	4006,0,c	;volatile
  6116                           
  6117                           ; BSR set to: 0
  6118  001846  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;main.c: 675: curEventHour = v1 & 0x1F;
  6122  00184A  500D               	movf	LoadNextEvent@v1,w,c
  6123  00184C  0B1F               	andlw	31
  6124  00184E  6FD4               	movwf	_curEventHour& (0+255),b
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;main.c: 677: _nextEventPlayDuration = (v1 >> 5);
  6128  001850  380D               	swapf	LoadNextEvent@v1,w,c
  6129  001852  42E8               	rrncf	wreg,f,c
  6130  001854  0B07               	andlw	7
  6131  001856  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6132  001858  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6133                           
  6134                           ;main.c: 678: switch(_nextEventPlayDuration)
  6135  00185A  D01A               	goto	l5104
  6136  00185C                     l5090:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;main.c: 681: _nextEventPlayDuration = 10;
  6140  00185C  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6141  00185E  0E0A               	movlw	10
  6142  001860  D011               	goto	L7
  6143  001862                     l5092:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;main.c: 684: _nextEventPlayDuration = 30;
  6147  001862  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6148  001864  0E1E               	movlw	30
  6149  001866  D00E               	goto	L7
  6150  001868                     l5094:
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;main.c: 687: _nextEventPlayDuration = 60;
  6154  001868  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6155  00186A  0E3C               	movlw	60
  6156  00186C  D00B               	goto	L7
  6157  00186E                     l5096:
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;main.c: 690: _nextEventPlayDuration = 60*5;
  6161  00186E  0E01               	movlw	1
  6162  001870  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6163  001872  0E2C               	movlw	44
  6164  001874  D007               	goto	L7
  6165  001876                     l5098:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;main.c: 693: _nextEventPlayDuration = 60*12;
  6169  001876  0E02               	movlw	2
  6170  001878  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6171  00187A  0ED0               	movlw	208
  6172  00187C  D003               	goto	L7
  6173  00187E                     l5100:
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 696: _nextEventPlayDuration = 60*30;
  6177  00187E  0E07               	movlw	7
  6178  001880  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6179  001882  0E08               	movlw	8
  6180  001884                     L7:
  6181  001884  FFFF               	dw	65535	; assembler added errata NOP
  6182  001886  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6183                           
  6184                           ;main.c: 697: break;
  6185  001888  D019               	goto	l5106
  6186  00188A                     l399:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;main.c: 699: _nextEventPlayDuration = 65535;
  6190  00188A  69C2               	setf	__nextEventPlayDuration& (0+255),b
  6191  00188C  69C3               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6192                           
  6193                           ;main.c: 700: break;
  6194  00188E  D016               	goto	l5106
  6195  001890                     l5104:
  6196  001890  FFFF               	dw	65535	; assembler added errata NOP
  6197                           
  6198                           ; BSR set to: 0
  6199  001892  C0C2  F009         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6200  001896  C0C3  F00A         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6201                           
  6202                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6203                           ; Switch size 1, requested type "speed"
  6204                           ; Number of cases is 1, Range of values is 0 to 0
  6205                           ; switch strategies available:
  6206                           ; Name         Instructions Cycles
  6207                           ; simple_byte            4     3 (average)
  6208                           ;	Chosen strategy is simple_byte
  6209  00189A  500A               	movf	??_LoadNextEvent+1,w,c
  6210  00189C  E10F               	bnz	l5106
  6211                           
  6212                           ; BSR set to: 0
  6213                           ; Switch size 1, requested type "speed"
  6214                           ; Number of cases is 7, Range of values is 1 to 7
  6215                           ; switch strategies available:
  6216                           ; Name         Instructions Cycles
  6217                           ; simple_byte           22    12 (average)
  6218                           ;	Chosen strategy is simple_byte
  6219  00189E  5009               	movf	??_LoadNextEvent,w,c
  6220  0018A0  0A01               	xorlw	1	; case 1
  6221  0018A2  E0DC               	bz	l5090
  6222  0018A4  0A03               	xorlw	3	; case 2
  6223  0018A6  E0DD               	bz	l5092
  6224  0018A8  0A01               	xorlw	1	; case 3
  6225  0018AA  E0DE               	bz	l5094
  6226  0018AC  0A07               	xorlw	7	; case 4
  6227  0018AE  E0DF               	bz	l5096
  6228  0018B0  0A01               	xorlw	1	; case 5
  6229  0018B2  E0E1               	bz	l5098
  6230  0018B4  0A03               	xorlw	3	; case 6
  6231  0018B6  E0E3               	bz	l5100
  6232  0018B8  0A01               	xorlw	1	; case 7
  6233  0018BA  E0E7               	bz	l399
  6234  0018BC                     l5106:
  6235  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 702: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  6239  0018BE  5075               	movf	_curEventNum,w,c
  6240  0018C0  0D02               	mullw	2
  6241  0018C2  50F3               	movf	prodl,w,c
  6242  0018C4  0F14               	addlw	20
  6243  0018C6  6EA9               	movwf	4009,c	;volatile
  6244                           
  6245                           ; BSR set to: 0
  6246  0018C8  80A6               	bsf	4006,0,c	;volatile
  6247                           
  6248                           ; BSR set to: 0
  6249  0018CA  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;main.c: 703: curEventMinute = v1 & 0x3F;
  6253  0018CE  500D               	movf	LoadNextEvent@v1,w,c
  6254  0018D0  0B3F               	andlw	63
  6255  0018D2  6FD5               	movwf	_curEventMinute& (0+255),b
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 704: _nextEventSoundId = v1 >> 6;
  6259  0018D4  440D               	rlncf	LoadNextEvent@v1,w,c
  6260  0018D6  46E8               	rlncf	wreg,f,c
  6261  0018D8  0B03               	andlw	3
  6262  0018DA  6FCF               	movwf	__nextEventSoundId& (0+255),b
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;main.c: 706: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6266  0018DC  51D4               	movf	_curEventHour& (0+255),w,b
  6267  0018DE  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6268  0018E0  51D5               	movf	_curEventMinute& (0+255),w,b
  6269  0018E2  0101               	movlb	1	; () banked
  6270  0018E4  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6271  0018E6  C009  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;main.c: 707: }while(curEventHour < hour || curEventMinute <= minute);
  6275  0018EA  500B               	movf	LoadNextEvent@hour,w,c
  6276  0018EC  0100               	movlb	0	; () banked
  6277  0018EE  5DD4               	subwf	_curEventHour& (0+255),w,b
  6278  0018F0  E38C               	bnc	l5068
  6279                           
  6280                           ; BSR set to: 0
  6281  0018F2  51D5               	movf	_curEventMinute& (0+255),w,b
  6282  0018F4  5C0C               	subwf	LoadNextEvent@minute,w,c
  6283  0018F6  E289               	bc	l5068
  6284  0018F8                     l385:
  6285  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  6286  0018FA  0012               	return		;funcret
  6287  0018FC  FFFF               	dw	65535	; errata NOP
  6288  0018FE                     __end_of_LoadNextEvent:
  6289                           	opt stack 0
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon	equ	0xFF2
  6297                           postinc0	equ	0xFEE
  6298                           wreg	equ	0xFE8
  6299                           postdec1	equ	0xFE5
  6300                           fsr1h	equ	0xFE2
  6301                           fsr1l	equ	0xFE1
  6302                           indf2	equ	0xFDF
  6303                           postinc2	equ	0xFDE
  6304                           postdec2	equ	0xFDD
  6305                           plusw2	equ	0xFDB
  6306                           fsr2h	equ	0xFDA
  6307                           fsr2l	equ	0xFD9
  6308                           status	equ	0xFD8
  6309                           
  6310 ;; *************** function _getHourMin *****************
  6311 ;; Defined at:
  6312 ;;		line 245 in file "interrupts.c"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;  hour            1    wreg     PTR unsigned char 
  6315 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6316 ;;  min             1    6[COMRAM] PTR unsigned char 
  6317 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  hour            1    7[COMRAM] PTR unsigned char 
  6320 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      unsigned char 
  6323 ;; Registers used:
  6324 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6325 ;; Tracked objects:
  6326 ;;		On entry : E/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6330 ;;      Params:         1       0       0       0       0       0       0
  6331 ;;      Locals:         1       0       0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0
  6333 ;;      Totals:         2       0       0       0       0       0       0
  6334 ;;Total ram usage:        2 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    2
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_LoadNextEvent
  6341 ;;		_ProcessDiary
  6342 ;;		_main
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text32
  6347  002A04                     __ptext32:
  6348                           	opt stack 0
  6349  002A04                     _getHourMin:
  6350                           	opt stack 24
  6351                           
  6352                           ;incstack = 0
  6353  002A04  FFFF               	dw	65535
  6354                           
  6355                           ;getHourMin@hour stored from wreg
  6356  002A06  6E08               	movwf	getHourMin@hour,c
  6357                           
  6358                           ;interrupts.c: 247: if(globalHours == 0xFF)
  6359  002A08  2877               	incf	_globalHours,w,c	;volatile
  6360  002A0A  E102               	bnz	l101
  6361                           
  6362                           ;interrupts.c: 248: return 0;
  6363  002A0C  0E00               	movlw	0
  6364  002A0E  D00D               	goto	l102
  6365  002A10                     l101:
  6366                           
  6367                           ;interrupts.c: 249: (INTCONbits.GIE = 0);
  6368  002A10  9EF2               	bcf	intcon,7,c	;volatile
  6369                           
  6370                           ;interrupts.c: 250: *hour = globalHours;
  6371  002A12  5008               	movf	getHourMin@hour,w,c
  6372  002A14  6ED9               	movwf	fsr2l,c
  6373  002A16  6ADA               	clrf	fsr2h,c
  6374  002A18  C077  FFDF         	movff	_globalHours,indf2	;volatile
  6375                           
  6376                           ;interrupts.c: 251: *min = globalMinutes;
  6377  002A1C  5007               	movf	getHourMin@min,w,c
  6378  002A1E  6ED9               	movwf	fsr2l,c
  6379  002A20  6ADA               	clrf	fsr2h,c
  6380  002A22  C074  FFDF         	movff	_globalMinutes,indf2	;volatile
  6381                           
  6382                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
  6383  002A26  8EF2               	bsf	intcon,7,c	;volatile
  6384                           
  6385                           ;interrupts.c: 253: return 1;
  6386  002A28  0E01               	movlw	1
  6387  002A2A                     l102:
  6388  002A2A  FFFF               	dw	65535	; assembler added errata NOP
  6389  002A2C  0012               	return		;funcret
  6390  002A2E  FFFF               	dw	65535	; errata NOP
  6391  002A30                     __end_of_getHourMin:
  6392                           	opt stack 0
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           intcon	equ	0xFF2
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1h	equ	0xFE2
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           postinc2	equ	0xFDE
  6407                           postdec2	equ	0xFDD
  6408                           plusw2	equ	0xFDB
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function _LightLed *****************
  6414 ;; Defined at:
  6415 ;;		line 303 in file "main.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  ledNum          1    wreg     unsigned char 
  6418 ;;  ledState        1    6[COMRAM] enum E2428
  6419 ;;  blink           1    7[COMRAM] unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  ledNum          1   11[COMRAM] unsigned char 
  6422 ;;  statusShift     1   13[COMRAM] unsigned char 
  6423 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/1
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6433 ;;      Params:         2       0       0       0       0       0       0
  6434 ;;      Locals:         3       0       0       0       0       0       0
  6435 ;;      Temps:          3       0       0       0       0       0       0
  6436 ;;      Totals:         8       0       0       0       0       0       0
  6437 ;;Total ram usage:        8 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    2
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_ResetEvent
  6444 ;;		_ProcessDiary
  6445 ;;		_io_poll
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text33
  6450  000980                     __ptext33:
  6451                           	opt stack 0
  6452  000980                     _LightLed:
  6453                           	opt stack 27
  6454                           
  6455                           ;incstack = 0
  6456  000980  FFFF               	dw	65535
  6457                           
  6458                           ;LightLed@ledNum stored from wreg
  6459  000982  6E0C               	movwf	LightLed@ledNum,c
  6460                           
  6461                           ;main.c: 305: if(ledNum < 1 || ledNum > 60)
  6462  000984  500C               	movf	LightLed@ledNum,w,c
  6463  000986  E101 D171          	bz	l251
  6464  00098A  0E3C               	movlw	60
  6465  00098C  640C               	cpfsgt	LightLed@ledNum,c
  6466  00098E  D001               	goto	l5296
  6467  000990  D16D               	goto	l251
  6468  000992                     l5296:
  6469  000992  FFFF               	dw	65535	; assembler added errata NOP
  6470                           
  6471                           ;main.c: 307: ledNum--;
  6472  000994  060C               	decf	LightLed@ledNum,f,c
  6473                           
  6474                           ;main.c: 309: uint8_t ststusIndex = ledNum >> 2;
  6475  000996  400C               	rrncf	LightLed@ledNum,w,c
  6476  000998  42E8               	rrncf	wreg,f,c
  6477  00099A  0B3F               	andlw	63
  6478  00099C  6E0D               	movwf	LightLed@ststusIndex,c
  6479                           
  6480                           ;main.c: 310: uint8_t statusShift = (ledNum & 0x03) << 1;
  6481  00099E  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6482  0009A2  0E03               	movlw	3
  6483  0009A4  1609               	andwf	??_LightLed,f,c
  6484  0009A6  90D8               	bcf	status,0,c
  6485  0009A8  3409               	rlcf	??_LightLed,w,c
  6486  0009AA  6E0E               	movwf	LightLed@statusShift,c
  6487                           
  6488                           ;main.c: 312: switch(ledState)
  6489  0009AC  D153               	goto	l5336
  6490  0009AE                     l5302:
  6491                           
  6492                           ;main.c: 315: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6493  0009AE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6494  0009B2  2A09               	incf	??_LightLed,f,c
  6495  0009B4  0E01               	movlw	1
  6496  0009B6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6497  0009B8  2A09               	incf	??_LightLed,f,c
  6498  0009BA  D003               	goto	u4434
  6499  0009BC                     u4435:
  6500  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  6501  0009BE  90D8               	bcf	status,0,c
  6502  0009C0  360A               	rlcf	??_LightLed+1,f,c
  6503  0009C2                     u4434:
  6504  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  6505  0009C4  2E09               	decfsz	??_LightLed,f,c
  6506  0009C6  D7FA               	goto	u4435
  6507  0009C8  1C0A               	comf	??_LightLed+1,w,c
  6508  0009CA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6509  0009CC  500D               	movf	LightLed@ststusIndex,w,c
  6510  0009CE  0F90               	addlw	low _ledStatuses
  6511  0009D0  6ED9               	movwf	fsr2l,c
  6512  0009D2  6ADA               	clrf	fsr2h,c
  6513  0009D4  500B               	movf	??_LightLed+2,w,c
  6514  0009D6  16DF               	andwf	indf2,f,c
  6515                           
  6516                           ;main.c: 316: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6517  0009D8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6518  0009DC  0E01               	movlw	1
  6519  0009DE  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6520  0009E0  2A09               	incf	??_LightLed,f,c
  6521  0009E2  D003               	goto	u4444
  6522  0009E4                     u4445:
  6523  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  6524  0009E6  90D8               	bcf	status,0,c
  6525  0009E8  360A               	rlcf	??_LightLed+1,f,c
  6526  0009EA                     u4444:
  6527  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  6528  0009EC  2E09               	decfsz	??_LightLed,f,c
  6529  0009EE  D7FA               	goto	u4445
  6530  0009F0  1C0A               	comf	??_LightLed+1,w,c
  6531  0009F2  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6532  0009F4  500D               	movf	LightLed@ststusIndex,w,c
  6533  0009F6  0F90               	addlw	low _ledStatuses
  6534  0009F8  6ED9               	movwf	fsr2l,c
  6535  0009FA  6ADA               	clrf	fsr2h,c
  6536  0009FC  500B               	movf	??_LightLed+2,w,c
  6537  0009FE  16DF               	andwf	indf2,f,c
  6538                           
  6539                           ;main.c: 317: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6540  000A00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6541  000A04  2A09               	incf	??_LightLed,f,c
  6542  000A06  0E01               	movlw	1
  6543  000A08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6544  000A0A  2A09               	incf	??_LightLed,f,c
  6545  000A0C  D003               	goto	u4454
  6546  000A0E                     u4455:
  6547  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  6548  000A10  90D8               	bcf	status,0,c
  6549  000A12  360A               	rlcf	??_LightLed+1,f,c
  6550  000A14                     u4454:
  6551  000A14  FFFF               	dw	65535	; assembler added errata NOP
  6552  000A16  2E09               	decfsz	??_LightLed,f,c
  6553  000A18  D7FA               	goto	u4455
  6554  000A1A  1C0A               	comf	??_LightLed+1,w,c
  6555  000A1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6556  000A1E  500D               	movf	LightLed@ststusIndex,w,c
  6557  000A20  0F80               	addlw	low _ledBlink
  6558  000A22  6ED9               	movwf	fsr2l,c
  6559  000A24  6ADA               	clrf	fsr2h,c
  6560  000A26  500B               	movf	??_LightLed+2,w,c
  6561  000A28  16DF               	andwf	indf2,f,c
  6562                           
  6563                           ;main.c: 318: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6564  000A2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6565  000A2E  0E01               	movlw	1
  6566  000A30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6567  000A32  2A09               	incf	??_LightLed,f,c
  6568  000A34  D003               	goto	u4464
  6569  000A36                     u4465:
  6570  000A36  FFFF               	dw	65535	; assembler added errata NOP
  6571  000A38  90D8               	bcf	status,0,c
  6572  000A3A  360A               	rlcf	??_LightLed+1,f,c
  6573  000A3C                     u4464:
  6574  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  6575  000A3E  2E09               	decfsz	??_LightLed,f,c
  6576  000A40  D7FA               	goto	u4465
  6577  000A42  D05F               	goto	L8
  6578  000A44                     l5304:
  6579                           
  6580                           ;main.c: 321: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6581  000A44  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6582  000A48  2A09               	incf	??_LightLed,f,c
  6583  000A4A  0E01               	movlw	1
  6584  000A4C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6585  000A4E  2A09               	incf	??_LightLed,f,c
  6586  000A50  D003               	goto	u4474
  6587  000A52                     u4475:
  6588  000A52  FFFF               	dw	65535	; assembler added errata NOP
  6589  000A54  90D8               	bcf	status,0,c
  6590  000A56  360A               	rlcf	??_LightLed+1,f,c
  6591  000A58                     u4474:
  6592  000A58  FFFF               	dw	65535	; assembler added errata NOP
  6593  000A5A  2E09               	decfsz	??_LightLed,f,c
  6594  000A5C  D7FA               	goto	u4475
  6595  000A5E  500D               	movf	LightLed@ststusIndex,w,c
  6596  000A60  0F90               	addlw	low _ledStatuses
  6597  000A62  6ED9               	movwf	fsr2l,c
  6598  000A64  6ADA               	clrf	fsr2h,c
  6599  000A66  500A               	movf	??_LightLed+1,w,c
  6600  000A68  12DF               	iorwf	indf2,f,c
  6601                           
  6602                           ;main.c: 322: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6603  000A6A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6604  000A6E  0E01               	movlw	1
  6605  000A70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6606  000A72  2A09               	incf	??_LightLed,f,c
  6607  000A74  D003               	goto	u4484
  6608  000A76                     u4485:
  6609  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6610  000A78  90D8               	bcf	status,0,c
  6611  000A7A  360A               	rlcf	??_LightLed+1,f,c
  6612  000A7C                     u4484:
  6613  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  6614  000A7E  2E09               	decfsz	??_LightLed,f,c
  6615  000A80  D7FA               	goto	u4485
  6616  000A82  1C0A               	comf	??_LightLed+1,w,c
  6617  000A84  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6618  000A86  500D               	movf	LightLed@ststusIndex,w,c
  6619  000A88  0F90               	addlw	low _ledStatuses
  6620  000A8A  6ED9               	movwf	fsr2l,c
  6621  000A8C  6ADA               	clrf	fsr2h,c
  6622  000A8E  500B               	movf	??_LightLed+2,w,c
  6623  000A90  16DF               	andwf	indf2,f,c
  6624                           
  6625                           ;main.c: 323: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6626  000A92  5008               	movf	LightLed@blink,w,c
  6627  000A94  E014               	bz	l5310
  6628  000A96  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6629  000A9A  2A09               	incf	??_LightLed,f,c
  6630  000A9C  0E01               	movlw	1
  6631  000A9E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6632  000AA0  2A09               	incf	??_LightLed,f,c
  6633  000AA2  D003               	goto	u4504
  6634  000AA4                     u4505:
  6635  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  6636  000AA6  90D8               	bcf	status,0,c
  6637  000AA8  360A               	rlcf	??_LightLed+1,f,c
  6638  000AAA                     u4504:
  6639  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  6640  000AAC  2E09               	decfsz	??_LightLed,f,c
  6641  000AAE  D7FA               	goto	u4505
  6642  000AB0  500D               	movf	LightLed@ststusIndex,w,c
  6643  000AB2  0F80               	addlw	low _ledBlink
  6644  000AB4  6ED9               	movwf	fsr2l,c
  6645  000AB6  6ADA               	clrf	fsr2h,c
  6646  000AB8  500A               	movf	??_LightLed+1,w,c
  6647  000ABA  12DF               	iorwf	indf2,f,c
  6648  000ABC  D015               	goto	l259
  6649  000ABE                     l5310:
  6650  000ABE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6651  000AC2  2A09               	incf	??_LightLed,f,c
  6652  000AC4  0E01               	movlw	1
  6653  000AC6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6654  000AC8  2A09               	incf	??_LightLed,f,c
  6655  000ACA  D003               	goto	u4514
  6656  000ACC                     u4515:
  6657  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  6658  000ACE  90D8               	bcf	status,0,c
  6659  000AD0  360A               	rlcf	??_LightLed+1,f,c
  6660  000AD2                     u4514:
  6661  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  6662  000AD4  2E09               	decfsz	??_LightLed,f,c
  6663  000AD6  D7FA               	goto	u4515
  6664  000AD8  1C0A               	comf	??_LightLed+1,w,c
  6665  000ADA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6666  000ADC  500D               	movf	LightLed@ststusIndex,w,c
  6667  000ADE  0F80               	addlw	low _ledBlink
  6668  000AE0  6ED9               	movwf	fsr2l,c
  6669  000AE2  6ADA               	clrf	fsr2h,c
  6670  000AE4  500B               	movf	??_LightLed+2,w,c
  6671  000AE6  16DF               	andwf	indf2,f,c
  6672  000AE8                     l259:
  6673  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  6674                           
  6675                           ;main.c: 324: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6676  000AEA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6677  000AEE  0E01               	movlw	1
  6678  000AF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6679  000AF2  2A09               	incf	??_LightLed,f,c
  6680  000AF4  D003               	goto	u4524
  6681  000AF6                     u4525:
  6682  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6683  000AF8  90D8               	bcf	status,0,c
  6684  000AFA  360A               	rlcf	??_LightLed+1,f,c
  6685  000AFC                     u4524:
  6686  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6687  000AFE  2E09               	decfsz	??_LightLed,f,c
  6688  000B00  D7FA               	goto	u4525
  6689  000B02                     L8:
  6690  000B02  FFFF               	dw	65535	; assembler added errata NOP
  6691  000B04  1C0A               	comf	??_LightLed+1,w,c
  6692  000B06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6693  000B08  500D               	movf	LightLed@ststusIndex,w,c
  6694  000B0A  0F80               	addlw	low _ledBlink
  6695  000B0C  6ED9               	movwf	fsr2l,c
  6696  000B0E  6ADA               	clrf	fsr2h,c
  6697  000B10  500B               	movf	??_LightLed+2,w,c
  6698  000B12  16DF               	andwf	indf2,f,c
  6699                           
  6700                           ;main.c: 325: break;
  6701  000B14  D0AB               	goto	l251
  6702  000B16                     l5312:
  6703                           
  6704                           ;main.c: 327: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6705  000B16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6706  000B1A  2A09               	incf	??_LightLed,f,c
  6707  000B1C  0E01               	movlw	1
  6708  000B1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6709  000B20  2A09               	incf	??_LightLed,f,c
  6710  000B22  D003               	goto	u4534
  6711  000B24                     u4535:
  6712  000B24  FFFF               	dw	65535	; assembler added errata NOP
  6713  000B26  90D8               	bcf	status,0,c
  6714  000B28  360A               	rlcf	??_LightLed+1,f,c
  6715  000B2A                     u4534:
  6716  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  6717  000B2C  2E09               	decfsz	??_LightLed,f,c
  6718  000B2E  D7FA               	goto	u4535
  6719  000B30  1C0A               	comf	??_LightLed+1,w,c
  6720  000B32  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6721  000B34  500D               	movf	LightLed@ststusIndex,w,c
  6722  000B36  0F90               	addlw	low _ledStatuses
  6723  000B38  6ED9               	movwf	fsr2l,c
  6724  000B3A  6ADA               	clrf	fsr2h,c
  6725  000B3C  500B               	movf	??_LightLed+2,w,c
  6726  000B3E  16DF               	andwf	indf2,f,c
  6727                           
  6728                           ;main.c: 328: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6729  000B40  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6730  000B44  0E01               	movlw	1
  6731  000B46  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6732  000B48  2A09               	incf	??_LightLed,f,c
  6733  000B4A  D003               	goto	u4544
  6734  000B4C                     u4545:
  6735  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  6736  000B4E  90D8               	bcf	status,0,c
  6737  000B50  360A               	rlcf	??_LightLed+1,f,c
  6738  000B52                     u4544:
  6739  000B52  FFFF               	dw	65535	; assembler added errata NOP
  6740  000B54  2E09               	decfsz	??_LightLed,f,c
  6741  000B56  D7FA               	goto	u4545
  6742  000B58  500D               	movf	LightLed@ststusIndex,w,c
  6743  000B5A  0F90               	addlw	low _ledStatuses
  6744  000B5C  6ED9               	movwf	fsr2l,c
  6745  000B5E  6ADA               	clrf	fsr2h,c
  6746  000B60  500A               	movf	??_LightLed+1,w,c
  6747  000B62  12DF               	iorwf	indf2,f,c
  6748                           
  6749                           ;main.c: 329: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6750  000B64  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6751  000B68  2A09               	incf	??_LightLed,f,c
  6752  000B6A  0E01               	movlw	1
  6753  000B6C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6754  000B6E  2A09               	incf	??_LightLed,f,c
  6755  000B70  D003               	goto	u4554
  6756  000B72                     u4555:
  6757  000B72  FFFF               	dw	65535	; assembler added errata NOP
  6758  000B74  90D8               	bcf	status,0,c
  6759  000B76  360A               	rlcf	??_LightLed+1,f,c
  6760  000B78                     u4554:
  6761  000B78  FFFF               	dw	65535	; assembler added errata NOP
  6762  000B7A  2E09               	decfsz	??_LightLed,f,c
  6763  000B7C  D7FA               	goto	u4555
  6764  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  6765  000B80  1C0A               	comf	??_LightLed+1,w,c
  6766  000B82  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6767  000B84  500D               	movf	LightLed@ststusIndex,w,c
  6768  000B86  0F80               	addlw	low _ledBlink
  6769  000B88  6ED9               	movwf	fsr2l,c
  6770  000B8A  6ADA               	clrf	fsr2h,c
  6771  000B8C  500B               	movf	??_LightLed+2,w,c
  6772  000B8E  16DF               	andwf	indf2,f,c
  6773                           
  6774                           ;main.c: 330: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6775  000B90  5008               	movf	LightLed@blink,w,c
  6776  000B92  E0AA               	bz	l259
  6777  000B94                     l5316:
  6778  000B94  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6779  000B98  0E01               	movlw	1
  6780  000B9A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6781  000B9C  2A09               	incf	??_LightLed,f,c
  6782  000B9E  D003               	goto	u4574
  6783  000BA0                     u4575:
  6784  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6785  000BA2  90D8               	bcf	status,0,c
  6786  000BA4  360A               	rlcf	??_LightLed+1,f,c
  6787  000BA6                     u4574:
  6788  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  6789  000BA8  2E09               	decfsz	??_LightLed,f,c
  6790  000BAA  D7FA               	goto	u4575
  6791  000BAC  500D               	movf	LightLed@ststusIndex,w,c
  6792  000BAE  0F80               	addlw	low _ledBlink
  6793  000BB0  6ED9               	movwf	fsr2l,c
  6794  000BB2  6ADA               	clrf	fsr2h,c
  6795  000BB4  500A               	movf	??_LightLed+1,w,c
  6796  000BB6  12DF               	iorwf	indf2,f,c
  6797  000BB8  D059               	goto	l251
  6798  000BBA                     l5320:
  6799                           
  6800                           ;main.c: 333: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6801  000BBA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6802  000BBE  2A09               	incf	??_LightLed,f,c
  6803  000BC0  0E01               	movlw	1
  6804  000BC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6805  000BC4  2A09               	incf	??_LightLed,f,c
  6806  000BC6  D003               	goto	u4584
  6807  000BC8                     u4585:
  6808  000BC8  FFFF               	dw	65535	; assembler added errata NOP
  6809  000BCA  90D8               	bcf	status,0,c
  6810  000BCC  360A               	rlcf	??_LightLed+1,f,c
  6811  000BCE                     u4584:
  6812  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  6813  000BD0  2E09               	decfsz	??_LightLed,f,c
  6814  000BD2  D7FA               	goto	u4585
  6815  000BD4  500D               	movf	LightLed@ststusIndex,w,c
  6816  000BD6  0F90               	addlw	low _ledStatuses
  6817  000BD8  6ED9               	movwf	fsr2l,c
  6818  000BDA  6ADA               	clrf	fsr2h,c
  6819  000BDC  500A               	movf	??_LightLed+1,w,c
  6820  000BDE  12DF               	iorwf	indf2,f,c
  6821                           
  6822                           ;main.c: 334: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6823  000BE0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6824  000BE4  0E01               	movlw	1
  6825  000BE6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6826  000BE8  2A09               	incf	??_LightLed,f,c
  6827  000BEA  D003               	goto	u4594
  6828  000BEC                     u4595:
  6829  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  6830  000BEE  90D8               	bcf	status,0,c
  6831  000BF0  360A               	rlcf	??_LightLed+1,f,c
  6832  000BF2                     u4594:
  6833  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6834  000BF4  2E09               	decfsz	??_LightLed,f,c
  6835  000BF6  D7FA               	goto	u4595
  6836  000BF8  500D               	movf	LightLed@ststusIndex,w,c
  6837  000BFA  0F90               	addlw	low _ledStatuses
  6838  000BFC  6ED9               	movwf	fsr2l,c
  6839  000BFE  6ADA               	clrf	fsr2h,c
  6840  000C00  500A               	movf	??_LightLed+1,w,c
  6841  000C02  12DF               	iorwf	indf2,f,c
  6842                           
  6843                           ;main.c: 335: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6844  000C04  5008               	movf	LightLed@blink,w,c
  6845  000C06  E014               	bz	l5326
  6846  000C08  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6847  000C0C  2A09               	incf	??_LightLed,f,c
  6848  000C0E  0E01               	movlw	1
  6849  000C10  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6850  000C12  2A09               	incf	??_LightLed,f,c
  6851  000C14  D003               	goto	u4614
  6852  000C16                     u4615:
  6853  000C16  FFFF               	dw	65535	; assembler added errata NOP
  6854  000C18  90D8               	bcf	status,0,c
  6855  000C1A  360A               	rlcf	??_LightLed+1,f,c
  6856  000C1C                     u4614:
  6857  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  6858  000C1E  2E09               	decfsz	??_LightLed,f,c
  6859  000C20  D7FA               	goto	u4615
  6860  000C22  500D               	movf	LightLed@ststusIndex,w,c
  6861  000C24  0F80               	addlw	low _ledBlink
  6862  000C26  6ED9               	movwf	fsr2l,c
  6863  000C28  6ADA               	clrf	fsr2h,c
  6864  000C2A  500A               	movf	??_LightLed+1,w,c
  6865  000C2C  12DF               	iorwf	indf2,f,c
  6866  000C2E  D00E               	goto	l5328
  6867  000C30                     l5326:
  6868  000C30  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6869  000C34  2A09               	incf	??_LightLed,f,c
  6870  000C36  0E01               	movlw	1
  6871  000C38  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6872  000C3A  2A09               	incf	??_LightLed,f,c
  6873  000C3C  D003               	goto	u4624
  6874  000C3E                     u4625:
  6875  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6876  000C40  90D8               	bcf	status,0,c
  6877  000C42  360A               	rlcf	??_LightLed+1,f,c
  6878  000C44                     u4624:
  6879  000C44  FFFF               	dw	65535	; assembler added errata NOP
  6880  000C46  2E09               	decfsz	??_LightLed,f,c
  6881  000C48  D7FA               	goto	u4625
  6882  000C4A  D799               	goto	L9
  6883  000C4C                     l5328:
  6884  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6885                           
  6886                           ;main.c: 336: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6887  000C4E  5008               	movf	LightLed@blink,w,c
  6888  000C50  E1A1               	bnz	l5316
  6889  000C52  D74A               	goto	l259
  6890  000C54                     l5336:
  6891  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6892  000C56  5007               	movf	LightLed@ledState,w,c
  6893                           
  6894                           ; Switch size 1, requested type "speed"
  6895                           ; Number of cases is 4, Range of values is 0 to 3
  6896                           ; switch strategies available:
  6897                           ; Name         Instructions Cycles
  6898                           ; simple_byte           13     7 (average)
  6899                           ;	Chosen strategy is simple_byte
  6900  000C58  E101 D6A9          	bz	l5302
  6901  000C5C  0A01               	xorlw	1	; case 1
  6902  000C5E  E101 D6F1          	bz	l5304
  6903  000C62  0A03               	xorlw	3	; case 2
  6904  000C64  E101 D757          	bz	l5312
  6905  000C68  0A01               	xorlw	1	; case 3
  6906  000C6A  E0A7               	bz	l5320
  6907  000C6C                     l251:
  6908  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6909  000C6E  0012               	return		;funcret
  6910  000C70  FFFF               	dw	65535	; errata NOP
  6911  000C72                     __end_of_LightLed:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           postinc0	equ	0xFEE
  6921                           wreg	equ	0xFE8
  6922                           postdec1	equ	0xFE5
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           postdec2	equ	0xFDD
  6928                           plusw2	equ	0xFDB
  6929                           fsr2h	equ	0xFDA
  6930                           fsr2l	equ	0xFD9
  6931                           status	equ	0xFD8
  6932                           
  6933 ;; *************** function _ModbusPoll *****************
  6934 ;; Defined at:
  6935 ;;		line 404 in file "ModbusRtu.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  6938 ;;  coils           1   43[COMRAM] PTR unsigned short 
  6939 ;;		 -> _MODBUSCoils(2), 
  6940 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  6941 ;;		 -> _MODBUSInputRegs(30), 
  6942 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  6943 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  6944 ;;		 -> _MODBUSHoldingRegs(30), 
  6945 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  u8exception     1   52[COMRAM] unsigned char 
  6948 ;;  i8state         1   51[COMRAM] unsigned char 
  6949 ;;  u8current       1   50[COMRAM] unsigned char 
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      char 
  6952 ;; Registers used:
  6953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : E/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6959 ;;      Params:         9       0       0       0       0       0       0
  6960 ;;      Locals:         3       0       0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0
  6962 ;;      Totals:        12       0       0       0       0       0       0
  6963 ;;Total ram usage:       12 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    5
  6966 ;; This function calls:
  6967 ;;		_ModbusBuildException
  6968 ;;		_ModbusGetRxBuffer
  6969 ;;		_ModbusProcess_FC1
  6970 ;;		_ModbusProcess_FC15
  6971 ;;		_ModbusProcess_FC16
  6972 ;;		_ModbusProcess_FC17
  6973 ;;		_ModbusProcess_FC21
  6974 ;;		_ModbusProcess_FC3
  6975 ;;		_ModbusProcess_FC43
  6976 ;;		_ModbusProcess_FC5
  6977 ;;		_ModbusProcess_FC6
  6978 ;;		_ModbusProcess_FC7
  6979 ;;		_ModbusSendTxBuffer
  6980 ;;		_ModbusValidateRequest
  6981 ;;		_PortAvailable
  6982 ;;		_millis
  6983 ;; This function is called by:
  6984 ;;		_main
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text34
  6989  0012C0                     __ptext34:
  6990                           	opt stack 0
  6991  0012C0                     _ModbusPoll:
  6992                           	opt stack 25
  6993                           
  6994                           ;incstack = 0
  6995  0012C0  FFFF               	dw	65535
  6996                           
  6997                           ;ModbusRtu.c: 407: _lastCommand = MB_FC_NONE;
  6998  0012C2  0100               	movlb	0	; () banked
  6999  0012C4  6BDF               	clrf	__lastCommand& (0+255),b
  7000                           
  7001                           ;ModbusRtu.c: 411: _inputRegsCount = inputRegsCount;
  7002  0012C6  C02F  F0CD         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7003                           
  7004                           ;ModbusRtu.c: 412: _holdingRegsCount = holdingRegsCount;
  7005  0012CA  C032  F0CC         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;ModbusRtu.c: 417: uint8_t u8current = PortAvailable();
  7009  0012CE  ECC4  F015         	call	_PortAvailable	;wreg free
  7010  0012D2  6E33               	movwf	ModbusPoll@u8current,c
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;ModbusRtu.c: 421: if (u8current == 0) return 0;
  7014  0012D4  5033               	movf	ModbusPoll@u8current,w,c
  7015  0012D6  E103               	bnz	l5828
  7016  0012D8                     l5824:
  7017  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  7018  0012DA  0E00               	movlw	0
  7019  0012DC  D0A6               	goto	l652
  7020  0012DE                     l5828:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;ModbusRtu.c: 424: if (u8current != _u8lastRec)
  7024  0012DE  51D3               	movf	__u8lastRec& (0+255),w,b
  7025  0012E0  1833               	xorwf	ModbusPoll@u8current,w,c
  7026  0012E2  E012               	bz	l5838
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;ModbusRtu.c: 425: {
  7030                           ;ModbusRtu.c: 426: _u8lastRec = u8current;
  7031  0012E4  C033  F0D3         	movff	ModbusPoll@u8current,__u8lastRec
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;ModbusRtu.c: 427: _u32time = millis() + 5;
  7035  0012E8  0E05               	movlw	5
  7036  0012EA  EC18  F015         	call	_millis	;wreg free
  7037  0012EE  2407               	addwf	?_millis,w,c
  7038  0012F0  0100               	movlb	0	; () banked
  7039  0012F2  6FA4               	movwf	__u32time& (0+255),b
  7040  0012F4  0E00               	movlw	0
  7041  0012F6  2008               	addwfc	?_millis+1,w,c
  7042  0012F8  6FA5               	movwf	(__u32time+1)& (0+255),b
  7043  0012FA  0E00               	movlw	0
  7044  0012FC  2009               	addwfc	?_millis+2,w,c
  7045  0012FE  6FA6               	movwf	(__u32time+2)& (0+255),b
  7046  001300  0E00               	movlw	0
  7047  001302  200A               	addwfc	?_millis+3,w,c
  7048  001304  6FA7               	movwf	(__u32time+3)& (0+255),b
  7049  001306  D7E8               	goto	l5824
  7050  001308                     l5838:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;ModbusRtu.c: 429: }
  7054                           ;ModbusRtu.c: 430: if (millis() < _u32time)
  7055  001308  EC18  F015         	call	_millis	;wreg free
  7056  00130C  0100               	movlb	0	; () banked
  7057  00130E  51A4               	movf	__u32time& (0+255),w,b
  7058  001310  5C07               	subwf	?_millis,w,c
  7059  001312  51A5               	movf	(__u32time+1)& (0+255),w,b
  7060  001314  5808               	subwfb	?_millis+1,w,c
  7061  001316  51A6               	movf	(__u32time+2)& (0+255),w,b
  7062  001318  5809               	subwfb	?_millis+2,w,c
  7063  00131A  51A7               	movf	(__u32time+3)& (0+255),w,b
  7064  00131C  580A               	subwfb	?_millis+3,w,c
  7065  00131E  E3DC               	bnc	l5824
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;ModbusRtu.c: 433: _u8lastRec = 0;
  7069  001320  6BD3               	clrf	__u8lastRec& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;ModbusRtu.c: 435: _u8lastError = i8state;
  7073  001322  EC3D  F014         	call	_ModbusGetRxBuffer	;wreg free
  7074  001326  6E34               	movwf	ModbusPoll@i8state,c
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;ModbusRtu.c: 436: if (i8state < 4)
  7078  001328  0E04               	movlw	4
  7079  00132A  6034               	cpfslt	ModbusPoll@i8state,c
  7080  00132C  D003               	goto	l5852
  7081  00132E                     l5848:
  7082  00132E  FFFF               	dw	65535	; assembler added errata NOP
  7083                           
  7084                           ;ModbusRtu.c: 437: return i8state;
  7085  001330  5034               	movf	ModbusPoll@i8state,w,c
  7086  001332  D07B               	goto	l652
  7087  001334                     l5852:
  7088  001334  FFFF               	dw	65535	; assembler added errata NOP
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;ModbusRtu.c: 440: if (_au8Buffer[ ID ] != _u8id)
  7092  001336  51D2               	movf	__u8id& (0+255),w,b
  7093  001338  0101               	movlb	1	; () banked
  7094  00133A  1900               	xorwf	__au8Buffer& (0+255),w,b
  7095  00133C  E1CD               	bnz	l5824
  7096                           
  7097                           ; BSR set to: 1
  7098                           ;ModbusRtu.c: 444: uint8_t u8exception = ModbusValidateRequest();
  7099  00133E  EC72  F007         	call	_ModbusValidateRequest	;wreg free
  7100  001342  6E35               	movwf	ModbusPoll@u8exception,c
  7101                           
  7102                           ;ModbusRtu.c: 445: if (u8exception > 0)
  7103  001344  5035               	movf	ModbusPoll@u8exception,w,c
  7104  001346  E009               	bz	l5872
  7105                           
  7106                           ;ModbusRtu.c: 446: {
  7107                           ;ModbusRtu.c: 447: if (u8exception != NO_REPLY)
  7108  001348  2835               	incf	ModbusPoll@u8exception,w,c
  7109  00134A  E005               	bz	l5868
  7110                           
  7111                           ;ModbusRtu.c: 448: {
  7112                           ;ModbusRtu.c: 449: ModbusBuildException(u8exception);
  7113  00134C  5035               	movf	ModbusPoll@u8exception,w,c
  7114  00134E  EC40  F015         	call	_ModbusBuildException
  7115                           
  7116                           ; BSR set to: 1
  7117                           ;ModbusRtu.c: 450: ModbusSendTxBuffer();
  7118  001352  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  7119  001356                     l5868:
  7120                           
  7121                           ;ModbusRtu.c: 453: return u8exception;
  7122  001356  5035               	movf	ModbusPoll@u8exception,w,c
  7123  001358  D068               	goto	l652
  7124  00135A                     l5872:
  7125                           
  7126                           ;ModbusRtu.c: 457: _u8lastError = 0;
  7127  00135A  EC18  F015         	call	_millis	;wreg free
  7128                           
  7129                           ;ModbusRtu.c: 460: switch (_au8Buffer[ FUNC ])
  7130  00135E  D049               	goto	l5924
  7131  001360                     l5874:
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;ModbusRtu.c: 463: return ModbusProcess_FC1(*coils);
  7135  001360  502C               	movf	ModbusPoll@coils,w,c
  7136  001362  6ED9               	movwf	fsr2l,c
  7137  001364  6ADA               	clrf	fsr2h,c
  7138  001366  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  7139  00136A  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  7140  00136E  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7141  001372  D05B               	goto	l652
  7142  001374                     l5878:
  7143                           
  7144                           ; BSR set to: 1
  7145                           ;ModbusRtu.c: 465: return ModbusProcess_FC1(discreteInputs);
  7146  001374  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7147  001378  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7148  00137C  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7149  001380  D054               	goto	l652
  7150  001382                     l5882:
  7151                           
  7152                           ; BSR set to: 1
  7153                           ;ModbusRtu.c: 467: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7154  001382  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7155  001386  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7156  00138A  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7157  00138E  EC99  F00F         	call	_ModbusProcess_FC3	;wreg free
  7158  001392  D04B               	goto	l652
  7159  001394                     l5886:
  7160                           
  7161                           ; BSR set to: 1
  7162                           ;ModbusRtu.c: 469: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7163  001394  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7164  001398  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7165  00139C  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7166  0013A0  EC99  F00F         	call	_ModbusProcess_FC3	;wreg free
  7167  0013A4  D042               	goto	l652
  7168  0013A6                     l5890:
  7169                           
  7170                           ; BSR set to: 1
  7171                           ;ModbusRtu.c: 471: return ModbusProcess_FC5(coils);
  7172  0013A6  502C               	movf	ModbusPoll@coils,w,c
  7173  0013A8  ECF3  F010         	call	_ModbusProcess_FC5
  7174  0013AC  D03E               	goto	l652
  7175  0013AE                     l5894:
  7176                           
  7177                           ; BSR set to: 1
  7178                           ;ModbusRtu.c: 473: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7179  0013AE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7180  0013B2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7181  0013B6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7182  0013BA  ECDD  F012         	call	_ModbusProcess_FC6	;wreg free
  7183  0013BE  D035               	goto	l652
  7184  0013C0                     l5898:
  7185                           
  7186                           ; BSR set to: 1
  7187                           ;ModbusRtu.c: 475: return ModbusProcess_FC7();
  7188  0013C0  EC88  F015         	call	_ModbusProcess_FC7	;wreg free
  7189  0013C4  D032               	goto	l652
  7190  0013C6                     l5902:
  7191                           
  7192                           ; BSR set to: 1
  7193                           ;ModbusRtu.c: 477: return ModbusProcess_FC15(coils);
  7194  0013C6  502C               	movf	ModbusPoll@coils,w,c
  7195  0013C8  EC7F  F00C         	call	_ModbusProcess_FC15
  7196  0013CC  D02E               	goto	l652
  7197  0013CE                     l5906:
  7198                           
  7199                           ; BSR set to: 1
  7200                           ;ModbusRtu.c: 479: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7201  0013CE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7202  0013D2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7203  0013D6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7204  0013DA  EC75  F00E         	call	_ModbusProcess_FC16	;wreg free
  7205  0013DE  D025               	goto	l652
  7206  0013E0                     l5910:
  7207                           
  7208                           ; BSR set to: 1
  7209                           ;ModbusRtu.c: 481: return ModbusProcess_FC17();
  7210  0013E0  EC10  F012         	call	_ModbusProcess_FC17	;wreg free
  7211  0013E4  D022               	goto	l652
  7212  0013E6                     l5914:
  7213                           
  7214                           ; BSR set to: 1
  7215                           ;ModbusRtu.c: 483: return ModbusProcess_FC21();
  7216  0013E6  EC4B  F010         	call	_ModbusProcess_FC21	;wreg free
  7217  0013EA  D01F               	goto	l652
  7218  0013EC                     l5918:
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;ModbusRtu.c: 485: return ModbusProcess_FC43();
  7222  0013EC  EC18  F00A         	call	_ModbusProcess_FC43	;wreg free
  7223  0013F0  D01C               	goto	l652
  7224  0013F2                     l5924:
  7225  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  7226  0013F4  0101               	movlb	1	; () banked
  7227  0013F6  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7228                           
  7229                           ; Switch size 1, requested type "speed"
  7230                           ; Number of cases is 12, Range of values is 1 to 43
  7231                           ; switch strategies available:
  7232                           ; Name         Instructions Cycles
  7233                           ; simple_byte           37    19 (average)
  7234                           ;	Chosen strategy is simple_byte
  7235  0013F8  0A01               	xorlw	1	; case 1
  7236  0013FA  E0B2               	bz	l5874
  7237  0013FC  0A03               	xorlw	3	; case 2
  7238  0013FE  E0BA               	bz	l5878
  7239  001400  0A01               	xorlw	1	; case 3
  7240  001402  E0BF               	bz	l5882
  7241  001404  0A07               	xorlw	7	; case 4
  7242  001406  E0C6               	bz	l5886
  7243  001408  0A01               	xorlw	1	; case 5
  7244  00140A  E0CD               	bz	l5890
  7245  00140C  0A03               	xorlw	3	; case 6
  7246  00140E  E0CF               	bz	l5894
  7247  001410  0A01               	xorlw	1	; case 7
  7248  001412  E0D6               	bz	l5898
  7249  001414  0A08               	xorlw	8	; case 15
  7250  001416  E0D7               	bz	l5902
  7251  001418  0A1F               	xorlw	31	; case 16
  7252  00141A  E0D9               	bz	l5906
  7253  00141C  0A01               	xorlw	1	; case 17
  7254  00141E  E0E0               	bz	l5910
  7255  001420  0A04               	xorlw	4	; case 21
  7256  001422  E0E1               	bz	l5914
  7257  001424  0A3E               	xorlw	62	; case 43
  7258  001426  E0E2               	bz	l5918
  7259  001428  D782               	goto	l5848
  7260  00142A                     l652:
  7261  00142A  FFFF               	dw	65535	; assembler added errata NOP
  7262  00142C  0012               	return		;funcret
  7263  00142E  FFFF               	dw	65535	; errata NOP
  7264  001430                     __end_of_ModbusPoll:
  7265                           	opt stack 0
  7266                           tblptru	equ	0xFF8
  7267                           tblptrh	equ	0xFF7
  7268                           tblptrl	equ	0xFF6
  7269                           tablat	equ	0xFF5
  7270                           prodh	equ	0xFF4
  7271                           prodl	equ	0xFF3
  7272                           intcon	equ	0xFF2
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           postdec1	equ	0xFE5
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           plusw2	equ	0xFDB
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           
  7286 ;; *************** function _ModbusValidateRequest *****************
  7287 ;; Defined at:
  7288 ;;		line 691 in file "ModbusRtu.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;		None
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7293 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7294 ;;  readDevId       1   37[COMRAM] unsigned char 
  7295 ;;  i               1   36[COMRAM] unsigned char 
  7296 ;;  u16regs         2   39[COMRAM] unsigned short 
  7297 ;;  u16count        2   34[COMRAM] unsigned short 
  7298 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7299 ;;  u8regs          1   38[COMRAM] unsigned char 
  7300 ;;  isSupported     1   33[COMRAM] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      unsigned char 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : F/1
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       0       0       0       0       0       0
  7311 ;;      Locals:        18       0       0       0       0       0       0
  7312 ;;      Temps:          4       0       0       0       0       0       0
  7313 ;;      Totals:        22       0       0       0       0       0       0
  7314 ;;Total ram usage:       22 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    3
  7317 ;; This function calls:
  7318 ;;		_ModbusCalcCRC
  7319 ;; This function is called by:
  7320 ;;		_ModbusPoll
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text35
  7325  000EE4                     __ptext35:
  7326                           	opt stack 0
  7327  000EE4                     _ModbusValidateRequest:
  7328                           	opt stack 26
  7329                           
  7330                           ;incstack = 0
  7331  000EE4  FFFF               	dw	65535
  7332                           
  7333                           ; BSR set to: 1
  7334                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  7335                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7336                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  7337  000EE6  0EFE               	movlw	low (__au8Buffer+65534)
  7338  000EE8  2472               	addwf	__u8BufferSize,w,c
  7339  000EEA  6ED9               	movwf	fsr2l,c
  7340  000EEC  6ADA               	clrf	fsr2h,c
  7341  000EEE  0E00               	movlw	high (__au8Buffer+65534)
  7342  000EF0  22DA               	addwfc	fsr2h,f,c
  7343  000EF2  50DF               	movf	indf2,w,c
  7344  000EF4  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7345  000EF6  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7346  000EF8  0EFF               	movlw	low (__au8Buffer+65535)
  7347  000EFA  2472               	addwf	__u8BufferSize,w,c
  7348  000EFC  6ED9               	movwf	fsr2l,c
  7349  000EFE  6ADA               	clrf	fsr2h,c
  7350  000F00  0E00               	movlw	high (__au8Buffer+65535)
  7351  000F02  22DA               	addwfc	fsr2h,f,c
  7352  000F04  50DF               	movf	indf2,w,c
  7353  000F06  1014               	iorwf	??_ModbusValidateRequest,w,c
  7354  000F08  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7355  000F0A  5015               	movf	??_ModbusValidateRequest+1,w,c
  7356  000F0C  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7357                           
  7358                           ; BSR set to: 1
  7359                           ;ModbusRtu.c: 698: {
  7360                           ;ModbusRtu.c: 699: _u16errCnt++;
  7361  000F0E  5072               	movf	__u8BufferSize,w,c
  7362  000F10  0FFE               	addlw	254
  7363  000F12  ECD6  F011         	call	_ModbusCalcCRC
  7364  000F16  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7365  000F18  1807               	xorwf	?_ModbusCalcCRC,w,c
  7366  000F1A  E103               	bnz	u2860
  7367  000F1C  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7368  000F1E  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7369  000F20  E002               	bz	l703
  7370  000F22                     u2860:
  7371                           
  7372                           ;ModbusRtu.c: 700: return NO_REPLY;
  7373  000F22  0EFF               	movlw	255
  7374  000F24  D10C               	goto	l704
  7375  000F26                     l703:
  7376                           
  7377                           ;ModbusRtu.c: 701: }
  7378                           ;ModbusRtu.c: 704: bool isSupported = 0;
  7379  000F26  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7380                           
  7381                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7382  000F28  6A25               	clrf	ModbusValidateRequest@i,c
  7383  000F2A                     l3848:
  7384  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  7385                           
  7386                           ;ModbusRtu.c: 706: {
  7387                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  7388  000F2C  5025               	movf	ModbusValidateRequest@i,w,c
  7389  000F2E  0F01               	addlw	low _fctsupported
  7390  000F30  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7391  000F32  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7392  000F36                     	if	1	;There is more than 1 active tblptr byte
  7393  000F36  0E06               	movlw	high __smallconst
  7394  000F38  6EF7               	movwf	tblptrh,c
  7395  000F3A                     	endif
  7396  000F3A                     	if	0	;tblptru may be non-zero
  7397  000F3A                     	endif
  7398  000F3A                     	if	0	;tblptru may be non-zero
  7399  000F3A                     	endif
  7400  000F3A  0008               	tblrd		*
  7401  000F3C  FFFF               	dw	65535	; errata NOP
  7402  000F3E  50F5               	movf	tablat,w,c
  7403  000F40  0101               	movlb	1	; () banked
  7404  000F42  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7405  000F44  E103               	bnz	l3852
  7406                           
  7407                           ; BSR set to: 1
  7408                           ;ModbusRtu.c: 708: {
  7409                           ;ModbusRtu.c: 709: isSupported = 1;
  7410  000F46  0E01               	movlw	1
  7411  000F48  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7412                           
  7413                           ;ModbusRtu.c: 710: break;
  7414  000F4A  D004               	goto	l3856
  7415  000F4C                     l3852:
  7416                           
  7417                           ; BSR set to: 1
  7418  000F4C  2A25               	incf	ModbusValidateRequest@i,f,c
  7419                           
  7420                           ; BSR set to: 1
  7421  000F4E  0E0B               	movlw	11
  7422  000F50  6425               	cpfsgt	ModbusValidateRequest@i,c
  7423  000F52  D7EB               	goto	l3848
  7424  000F54                     l3856:
  7425  000F54  FFFF               	dw	65535	; assembler added errata NOP
  7426                           
  7427                           ; BSR set to: 1
  7428                           ;ModbusRtu.c: 714: {
  7429                           ;ModbusRtu.c: 715: _u16errCnt++;
  7430  000F56  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7431  000F58  E102               	bnz	l708
  7432  000F5A                     l3858:
  7433                           
  7434                           ; BSR set to: 1
  7435                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  7436  000F5A  0E01               	movlw	1
  7437  000F5C  D0F0               	goto	l704
  7438  000F5E                     l708:
  7439                           
  7440                           ; BSR set to: 1
  7441                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  7442  000F5E  6A23               	clrf	ModbusValidateRequest@u16count,c
  7443  000F60  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7444                           
  7445                           ;ModbusRtu.c: 722: uint8_t u8regs;
  7446                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  7447  000F62  D0CA               	goto	l3974
  7448  000F64                     l3862:
  7449                           
  7450                           ; BSR set to: 1
  7451                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  7452                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  7453                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7454  000F64  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7455  000F66  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7456  000F68  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7457  000F6A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7458  000F6C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7459                           
  7460                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7461  000F70  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7462  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7463  000F74  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7464  000F76  6E23               	movwf	ModbusValidateRequest@u16count,c
  7465  000F78  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7466                           
  7467                           ; BSR set to: 1
  7468                           ;ModbusRtu.c: 731: if (u16count > 16)
  7469  000F7C  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7470  000F7E  E103               	bnz	u2900
  7471  000F80  0E11               	movlw	17
  7472  000F82  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7473  000F84  E302               	bnc	l3870
  7474  000F86                     u2900:
  7475  000F86                     l3866:
  7476                           
  7477                           ; BSR set to: 1
  7478                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  7479  000F86  0E03               	movlw	3
  7480  000F88  D0DA               	goto	l704
  7481  000F8A                     l3870:
  7482                           
  7483                           ; BSR set to: 1
  7484                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  7485  000F8A  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7486  000F8C  E110               	bnz	l3874
  7487  000F8E  0E10               	movlw	16
  7488  000F90  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7489  000F92  E20D               	bc	l3874
  7490                           
  7491                           ; BSR set to: 1
  7492  000F94  5023               	movf	ModbusValidateRequest@u16count,w,c
  7493  000F96  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7494  000F98  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7495  000F9A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7496  000F9C  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7497  000F9E  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7498  000FA0  5015               	movf	??_ModbusValidateRequest+1,w,c
  7499  000FA2  E105               	bnz	u2920
  7500  000FA4  0E11               	movlw	17
  7501  000FA6  5C14               	subwf	??_ModbusValidateRequest,w,c
  7502  000FA8                     L10:
  7503  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  7504  000FAA  E201 D0C4          	bnc	l717
  7505  000FAE                     u2920:
  7506  000FAE                     l3874:
  7507  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  7508                           
  7509                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  7510  000FB0  0E02               	movlw	2
  7511  000FB2  D0C5               	goto	l704
  7512  000FB4                     l3878:
  7513                           
  7514                           ; BSR set to: 1
  7515                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7516  000FB4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7517  000FB6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7518  000FB8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7519  000FBA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7520  000FBC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7521                           
  7522                           ; BSR set to: 1
  7523                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  7524  000FC0  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7525                           
  7526                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  7527  000FC4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7528  000FC6  E002               	bz	l3888
  7529                           
  7530                           ; BSR set to: 1
  7531  000FC8  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7532  000FCA  E1DD               	bnz	l3866
  7533  000FCC                     l3888:
  7534                           
  7535                           ; BSR set to: 1
  7536                           ;ModbusRtu.c: 741: if (u16regs > 15)
  7537  000FCC  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7538  000FCE  E1EF               	bnz	l3874
  7539  000FD0  0E10               	movlw	16
  7540  000FD2  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7541  000FD4  D7E9               	goto	L10
  7542  000FD6                     l3894:
  7543                           
  7544                           ; BSR set to: 1
  7545                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7546  000FD6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7547  000FD8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7548  000FDA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7549  000FDC  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7550  000FDE  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7551  000FE2                     l3896:
  7552  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  7553                           
  7554                           ; BSR set to: 1
  7555                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7556  000FE4  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7557                           
  7558                           ; BSR set to: 1
  7559                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7560  000FE8  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7561  000FEA  0100               	movlb	0	; () banked
  7562  000FEC  5DCC               	subwf	__holdingRegsCount& (0+255),w,b
  7563  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  7564  000FF0  E3DE               	bnc	l3874
  7565  000FF2  D0A1               	goto	l717
  7566  000FF4                     l3904:
  7567                           
  7568                           ; BSR set to: 1
  7569                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7570  000FF4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7571  000FF6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7572  000FF8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7573  000FFA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7574  000FFC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7575                           
  7576                           ; BSR set to: 1
  7577                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7578  001000  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7579  001002  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7580  001006  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7581  001008  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7582  00100C  6A14               	clrf	??_ModbusValidateRequest,c
  7583  00100E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7584  001010  5014               	movf	??_ModbusValidateRequest,w,c
  7585  001012  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7586  001014  5015               	movf	??_ModbusValidateRequest+1,w,c
  7587  001016  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7588                           
  7589                           ; BSR set to: 1
  7590                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  7591  001018  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7592                           
  7593                           ; BSR set to: 1
  7594                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  7595  00101C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7596  00101E  0100               	movlb	0	; () banked
  7597  001020  5DCD               	subwf	__inputRegsCount& (0+255),w,b
  7598  001022  D7E5               	goto	L11
  7599  001024                     l3916:
  7600                           
  7601                           ; BSR set to: 1
  7602                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7603                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7604  001024  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7605  001026  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7606  001028  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7607  00102A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7608  00102C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7609                           
  7610                           ; BSR set to: 1
  7611                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7612  001030  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7613  001032  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7614  001036  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7615  001038  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7616  00103C  6A14               	clrf	??_ModbusValidateRequest,c
  7617  00103E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7618  001040  5014               	movf	??_ModbusValidateRequest,w,c
  7619  001042  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7620  001044  5015               	movf	??_ModbusValidateRequest+1,w,c
  7621  001046  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7622  001048  D7CC               	goto	l3896
  7623  00104A                     l3928:
  7624                           
  7625                           ; BSR set to: 1
  7626                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7627  00104A  0E06               	movlw	6
  7628  00104C  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7629  00104E  E1AF               	bnz	l3874
  7630                           
  7631                           ; BSR set to: 1
  7632                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7633  001050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7634  001052  E1AD               	bnz	l3874
  7635                           
  7636                           ; BSR set to: 1
  7637  001054  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7638  001056  E1AB               	bnz	l3874
  7639                           
  7640                           ; BSR set to: 1
  7641                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7642  001058  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7643  00105A  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7644  00105E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7645  001060  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7646  001064  6A14               	clrf	??_ModbusValidateRequest,c
  7647  001066  1214               	iorwf	??_ModbusValidateRequest,f,c
  7648  001068  0E00               	movlw	0
  7649  00106A  90D8               	bcf	status,0,c
  7650  00106C  3614               	rlcf	??_ModbusValidateRequest,f,c
  7651  00106E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7652  001070  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7653  001074  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7654  001078  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7655  00107A  0EFF               	movlw	-1
  7656  00107C  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7657  00107E  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7658                           
  7659                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7660  001080  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7661  001082  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7662  001086  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7663  001088  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7664  00108C  6A14               	clrf	??_ModbusValidateRequest,c
  7665  00108E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7666  001090  0E00               	movlw	0
  7667  001092  90D8               	bcf	status,0,c
  7668  001094  3614               	rlcf	??_ModbusValidateRequest,f,c
  7669  001096  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7670  001098  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7671  00109C  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7672  0010A0  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7673  0010A2  0EFF               	movlw	-1
  7674  0010A4  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7675  0010A6  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7676                           
  7677                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  7678  0010A8  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7679  0010AA  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7680  0010AC  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7681  0010AE  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7682  0010B0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7683  0010B2  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7684  0010B4  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7685  0010B6  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7686  0010B8  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7687  0010BA  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7688  0010BC  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7689  0010BE  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7690  0010C0  5017               	movf	??_ModbusValidateRequest+3,w,c
  7691  0010C2  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7692  0010C4  E102               	bnz	u3020
  7693  0010C6  0415               	decf	??_ModbusValidateRequest+1,w,c
  7694  0010C8  D76F               	goto	L10
  7695  0010CA                     u3020:
  7696  0010CA  D771               	goto	l3874
  7697  0010CC                     l3948:
  7698                           
  7699                           ; BSR set to: 1
  7700                           ;ModbusRtu.c: 781: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  7701  0010CC  0E0E               	movlw	14
  7702  0010CE  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7703  0010D0  E001 D743          	bnz	l3858
  7704                           
  7705                           ; BSR set to: 1
  7706                           ;ModbusRtu.c: 783: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  7707  0010D4  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  7708                           
  7709                           ; BSR set to: 1
  7710                           ;ModbusRtu.c: 784: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  7711  0010D8  0426               	decf	ModbusValidateRequest@readDevId,w,c
  7712  0010DA  E007               	bz	l3964
  7713                           
  7714                           ; BSR set to: 1
  7715  0010DC  0E02               	movlw	2
  7716  0010DE  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7717  0010E0  E004               	bz	l3964
  7718                           
  7719                           ; BSR set to: 1
  7720  0010E2  0E04               	movlw	4
  7721  0010E4  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7722  0010E6  E001 D74E          	bnz	l3866
  7723  0010EA                     l3964:
  7724                           
  7725                           ; BSR set to: 1
  7726                           ;ModbusRtu.c: 786: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  7727  0010EA  0E04               	movlw	4
  7728  0010EC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7729  0010EE  E123               	bnz	l717
  7730                           
  7731                           ; BSR set to: 1
  7732  0010F0  0E06               	movlw	6
  7733  0010F2  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  7734  0010F4  D020               	goto	l717
  7735  0010F6  D75B               	goto	l3874
  7736  0010F8                     l3974:
  7737  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  7738                           
  7739                           ; BSR set to: 1
  7740  0010FA  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7741                           
  7742                           ; Switch size 1, requested type "speed"
  7743                           ; Number of cases is 11, Range of values is 1 to 43
  7744                           ; switch strategies available:
  7745                           ; Name         Instructions Cycles
  7746                           ; simple_byte           34    18 (average)
  7747                           ;	Chosen strategy is simple_byte
  7748  0010FC  0A01               	xorlw	1	; case 1
  7749  0010FE  E101 D731          	bz	l3862
  7750  001102  0A03               	xorlw	3	; case 2
  7751  001104  E101 D72E          	bz	l3862
  7752  001108  0A01               	xorlw	1	; case 3
  7753  00110A  E08C               	bz	l3916
  7754  00110C  0A07               	xorlw	7	; case 4
  7755  00110E  E101 D771          	bz	l3904
  7756  001112  0A01               	xorlw	1	; case 5
  7757  001114  E101 D74E          	bz	l3878
  7758  001118  0A03               	xorlw	3	; case 6
  7759  00111A  E101 D75C          	bz	l3894
  7760  00111E  0A09               	xorlw	9	; case 15
  7761  001120  E101 D720          	bz	l3862
  7762  001124  0A1F               	xorlw	31	; case 16
  7763  001126  E101 D77D          	bz	l3916
  7764  00112A  0A01               	xorlw	1	; case 17
  7765  00112C  E004               	bz	l717
  7766  00112E  0A04               	xorlw	4	; case 21
  7767  001130  E08C               	bz	l3928
  7768  001132  0A3E               	xorlw	62	; case 43
  7769  001134  E0CB               	bz	l3948
  7770  001136                     l717:
  7771  001136  FFFF               	dw	65535	; assembler added errata NOP
  7772                           
  7773                           ;ModbusRtu.c: 790: _lastCommand = _au8Buffer[ FUNC ];
  7774  001138  C101  F0DF         	movff	__au8Buffer+1,__lastCommand
  7775                           
  7776                           ;ModbusRtu.c: 791: return 0;
  7777  00113C  0E00               	movlw	0
  7778  00113E                     l704:
  7779  00113E  FFFF               	dw	65535	; assembler added errata NOP
  7780  001140  0012               	return		;funcret
  7781  001142  FFFF               	dw	65535	; errata NOP
  7782  001144                     __end_of_ModbusValidateRequest:
  7783                           	opt stack 0
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           intcon	equ	0xFF2
  7791                           postinc0	equ	0xFEE
  7792                           wreg	equ	0xFE8
  7793                           postdec1	equ	0xFE5
  7794                           fsr1h	equ	0xFE2
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           plusw2	equ	0xFDB
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function _ModbusProcess_FC7 *****************
  7805 ;; Defined at:
  7806 ;;		line 973 in file "ModbusRtu.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      unsigned char 
  7813 ;; Registers used:
  7814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : E/1
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7820 ;;      Params:         0       0       0       0       0       0       0
  7821 ;;      Locals:         1       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0
  7823 ;;      Totals:         1       0       0       0       0       0       0
  7824 ;;Total ram usage:        1 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    4
  7827 ;; This function calls:
  7828 ;;		_ModbusSendTxBuffer
  7829 ;; This function is called by:
  7830 ;;		_ModbusPoll
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text36
  7835  002B10                     __ptext36:
  7836                           	opt stack 0
  7837  002B10                     _ModbusProcess_FC7:
  7838                           	opt stack 25
  7839                           
  7840                           ;incstack = 0
  7841  002B10  FFFF               	dw	65535
  7842                           
  7843                           ;ModbusRtu.c: 975: _au8Buffer[ 2 ] = _exceptionStatus;
  7844  002B12  C0CB  F102         	movff	__exceptionStatus,__au8Buffer+2
  7845                           
  7846                           ;ModbusRtu.c: 976: _u8BufferSize = 3;
  7847  002B16  0E03               	movlw	3
  7848  002B18  6E72               	movwf	__u8BufferSize,c
  7849                           
  7850                           ;ModbusRtu.c: 977: uint8_t u8CopyBufferSize = _u8BufferSize;
  7851  002B1A  C072  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  7852                           
  7853                           ;ModbusRtu.c: 978: ModbusSendTxBuffer();
  7854  002B1E  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  7855                           
  7856                           ;ModbusRtu.c: 979: return u8CopyBufferSize;
  7857  002B22  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  7858  002B24  0012               	return		;funcret
  7859  002B26  FFFF               	dw	65535	; errata NOP
  7860  002B28                     __end_of_ModbusProcess_FC7:
  7861                           	opt stack 0
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           postinc0	equ	0xFEE
  7870                           wreg	equ	0xFE8
  7871                           postdec1	equ	0xFE5
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           plusw2	equ	0xFDB
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882 ;; *************** function _ModbusProcess_FC6 *****************
  7883 ;; Defined at:
  7884 ;;		line 953 in file "ModbusRtu.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7887 ;;		 -> _MODBUSHoldingRegs(30), 
  7888 ;;  u8size          1   23[COMRAM] unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  u16add          2   29[COMRAM] unsigned short 
  7891 ;;  u16val          2   26[COMRAM] unsigned short 
  7892 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      unsigned char 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : E/1
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7902 ;;      Params:         3       0       0       0       0       0       0
  7903 ;;      Locals:         5       0       0       0       0       0       0
  7904 ;;      Temps:          2       0       0       0       0       0       0
  7905 ;;      Totals:        10       0       0       0       0       0       0
  7906 ;;Total ram usage:       10 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    4
  7909 ;; This function calls:
  7910 ;;		_ModbusSendTxBuffer
  7911 ;; This function is called by:
  7912 ;;		_ModbusPoll
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text37
  7917  0025BA                     __ptext37:
  7918                           	opt stack 0
  7919  0025BA                     _ModbusProcess_FC6:
  7920                           	opt stack 25
  7921                           
  7922                           ;incstack = 0
  7923  0025BA  FFFF               	dw	65535
  7924                           
  7925                           ;ModbusRtu.c: 955: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ AD
      +                          D_LO ]);
  7926  0025BC  0101               	movlb	1	; () banked
  7927  0025BE  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7928  0025C0  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7929  0025C2  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7930  0025C4  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7931  0025C6  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7932                           
  7933                           ; BSR set to: 1
  7934                           ;ModbusRtu.c: 956: _lastAddress = u16add;
  7935  0025CA  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7936  0025CE  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7937                           
  7938                           ;ModbusRtu.c: 957: _lastCount = 1;
  7939  0025D2  0100               	movlb	0	; () banked
  7940  0025D4  6BC1               	clrf	(__lastCount+1)& (0+255),b
  7941  0025D6  0E01               	movlw	1
  7942  0025D8  6FC0               	movwf	__lastCount& (0+255),b
  7943                           
  7944                           ;ModbusRtu.c: 958: uint8_t u8CopyBufferSize;
  7945                           ;ModbusRtu.c: 959: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_
      +                          LO ]);
  7946  0025DA  0101               	movlb	1	; () banked
  7947  0025DC  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7948  0025DE  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7949  0025E0  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7950  0025E2  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7951  0025E4  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7952                           
  7953                           ; BSR set to: 1
  7954                           ;ModbusRtu.c: 961: regs[ u16add ] = u16val;
  7955  0025E8  90D8               	bcf	status,0,c
  7956  0025EA  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7957  0025EC  6ED9               	movwf	fsr2l,c
  7958  0025EE  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7959  0025F0  6EDA               	movwf	fsr2h,c
  7960  0025F2  5016               	movf	ModbusProcess_FC6@regs,w,c
  7961  0025F4  26D9               	addwf	fsr2l,f,c
  7962  0025F6  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7963  0025F8  22DA               	addwfc	fsr2h,f,c
  7964  0025FA  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7965  0025FE  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7966                           
  7967                           ; BSR set to: 1
  7968                           ;ModbusRtu.c: 964: _u8BufferSize = RESPONSE_SIZE;
  7969  002602  0E06               	movlw	6
  7970  002604  6E72               	movwf	__u8BufferSize,c
  7971                           
  7972                           ; BSR set to: 1
  7973                           ;ModbusRtu.c: 966: u8CopyBufferSize = _u8BufferSize + 2;
  7974  002606  5072               	movf	__u8BufferSize,w,c
  7975  002608  0F02               	addlw	2
  7976  00260A  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7977                           
  7978                           ; BSR set to: 1
  7979                           ;ModbusRtu.c: 967: ModbusSendTxBuffer();
  7980  00260C  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  7981                           
  7982                           ;ModbusRtu.c: 969: return u8CopyBufferSize;
  7983  002610  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7984  002612  0012               	return		;funcret
  7985  002614  FFFF               	dw	65535	; errata NOP
  7986  002616                     __end_of_ModbusProcess_FC6:
  7987                           	opt stack 0
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodh	equ	0xFF4
  7993                           prodl	equ	0xFF3
  7994                           intcon	equ	0xFF2
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           postdec1	equ	0xFE5
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           plusw2	equ	0xFDB
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function _ModbusProcess_FC5 *****************
  8009 ;; Defined at:
  8010 ;;		line 918 in file "ModbusRtu.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  regs            1    wreg     PTR unsigned short 
  8013 ;;		 -> _MODBUSCoils(2), 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  regs            1   29[COMRAM] PTR unsigned short 
  8016 ;;		 -> _MODBUSCoils(2), 
  8017 ;;  u16coil         2   27[COMRAM] unsigned short 
  8018 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  8019 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      unsigned char 
  8022 ;; Registers used:
  8023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : E/1
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8029 ;;      Params:         0       0       0       0       0       0       0
  8030 ;;      Locals:         5       0       0       0       0       0       0
  8031 ;;      Temps:          5       0       0       0       0       0       0
  8032 ;;      Totals:        10       0       0       0       0       0       0
  8033 ;;Total ram usage:       10 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    4
  8036 ;; This function calls:
  8037 ;;		_ModbusSendTxBuffer
  8038 ;; This function is called by:
  8039 ;;		_ModbusPoll
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text38
  8044  0021E6                     __ptext38:
  8045                           	opt stack 0
  8046  0021E6                     _ModbusProcess_FC5:
  8047                           	opt stack 25
  8048                           
  8049                           ;incstack = 0
  8050  0021E6  FFFF               	dw	65535
  8051                           
  8052                           ;ModbusProcess_FC5@regs stored from wreg
  8053  0021E8  6E1E               	movwf	ModbusProcess_FC5@regs,c
  8054                           
  8055                           ;ModbusRtu.c: 921: uint8_t u8currentBit;
  8056                           ;ModbusRtu.c: 922: uint8_t u8CopyBufferSize;
  8057                           ;ModbusRtu.c: 923: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  8058  0021EA  0101               	movlb	1	; () banked
  8059  0021EC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8060  0021EE  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8061  0021F0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8062  0021F2  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8063  0021F4  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8064                           
  8065                           ; BSR set to: 1
  8066                           ;ModbusRtu.c: 924: _lastAddress = u16coil;
  8067  0021F8  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8068  0021FC  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8069                           
  8070                           ;ModbusRtu.c: 925: _lastCount = 1;
  8071  002200  0100               	movlb	0	; () banked
  8072  002202  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8073  002204  0E01               	movlw	1
  8074  002206  6FC0               	movwf	__lastCount& (0+255),b
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;ModbusRtu.c: 928: u8currentBit = (uint8_t) (u16coil % 16);
  8078  002208  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8079  00220A  0B0F               	andlw	15
  8080  00220C  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;ModbusRtu.c: 931: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8084  00220E  0101               	movlb	1	; () banked
  8085  002210  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8086  002212  E116               	bnz	l5512
  8087                           
  8088                           ; BSR set to: 1
  8089  002214  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8090  002218  0E01               	movlw	1
  8091  00221A  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8092  00221C  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8093  00221E  2A16               	incf	??_ModbusProcess_FC5,f,c
  8094  002220  D004               	goto	u4824
  8095  002222                     u4825:
  8096  002222  FFFF               	dw	65535	; assembler added errata NOP
  8097  002224  90D8               	bcf	status,0,c
  8098  002226  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8099  002228  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8100  00222A                     u4824:
  8101  00222A  FFFF               	dw	65535	; assembler added errata NOP
  8102  00222C  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8103  00222E  D7F9               	goto	u4825
  8104  002230  501E               	movf	ModbusProcess_FC5@regs,w,c
  8105  002232  6ED9               	movwf	fsr2l,c
  8106  002234  6ADA               	clrf	fsr2h,c
  8107  002236  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8108  002238  12DE               	iorwf	postinc2,f,c
  8109  00223A  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8110  00223C  12DD               	iorwf	postdec2,f,c
  8111  00223E  D019               	goto	l5514
  8112  002240                     l5512:
  8113                           
  8114                           ; BSR set to: 1
  8115  002240  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8116  002244  0E01               	movlw	1
  8117  002246  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8118  002248  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8119  00224A  2A16               	incf	??_ModbusProcess_FC5,f,c
  8120  00224C  D004               	goto	u4834
  8121  00224E                     u4835:
  8122  00224E  FFFF               	dw	65535	; assembler added errata NOP
  8123  002250  90D8               	bcf	status,0,c
  8124  002252  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8125  002254  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8126  002256                     u4834:
  8127  002256  FFFF               	dw	65535	; assembler added errata NOP
  8128  002258  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8129  00225A  D7F9               	goto	u4835
  8130  00225C  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8131  00225E  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8132  002260  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8133  002262  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8134  002264  501E               	movf	ModbusProcess_FC5@regs,w,c
  8135  002266  6ED9               	movwf	fsr2l,c
  8136  002268  6ADA               	clrf	fsr2h,c
  8137  00226A  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8138  00226C  16DE               	andwf	postinc2,f,c
  8139  00226E  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8140  002270  16DD               	andwf	postdec2,f,c
  8141  002272                     l5514:
  8142  002272  FFFF               	dw	65535	; assembler added errata NOP
  8143                           
  8144                           ;ModbusRtu.c: 938: _u8BufferSize = 6;
  8145  002274  0E06               	movlw	6
  8146  002276  6E72               	movwf	__u8BufferSize,c
  8147                           
  8148                           ;ModbusRtu.c: 939: u8CopyBufferSize = _u8BufferSize + 2;
  8149  002278  5072               	movf	__u8BufferSize,w,c
  8150  00227A  0F02               	addlw	2
  8151  00227C  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8152                           
  8153                           ;ModbusRtu.c: 940: ModbusSendTxBuffer();
  8154  00227E  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  8155                           
  8156                           ;ModbusRtu.c: 942: return u8CopyBufferSize;
  8157  002282  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8158  002284  0012               	return		;funcret
  8159  002286  FFFF               	dw	65535	; errata NOP
  8160  002288                     __end_of_ModbusProcess_FC5:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           postinc0	equ	0xFEE
  8170                           wreg	equ	0xFE8
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           plusw2	equ	0xFDB
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _ModbusProcess_FC43 *****************
  8183 ;; Defined at:
  8184 ;;		line 1152 in file "ModbusRtu.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  objId           1   23[COMRAM] unsigned char 
  8189 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8190 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      unsigned char 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : E/1
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8200 ;;      Params:         0       0       0       0       0       0       0
  8201 ;;      Locals:         3       0       0       0       0       0       0
  8202 ;;      Temps:          0       0       0       0       0       0       0
  8203 ;;      Totals:         3       0       0       0       0       0       0
  8204 ;;Total ram usage:        3 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    4
  8207 ;; This function calls:
  8208 ;;		_CopyStringToBuffer
  8209 ;;		_ModbusSendTxBuffer
  8210 ;; This function is called by:
  8211 ;;		_ModbusPoll
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text39
  8216  001430                     __ptext39:
  8217                           	opt stack 0
  8218  001430                     _ModbusProcess_FC43:
  8219                           	opt stack 25
  8220                           
  8221                           ;incstack = 0
  8222  001430  FFFF               	dw	65535
  8223                           
  8224                           ;ModbusRtu.c: 1154: uint8_t devIdCode = _au8Buffer[ 3 ];
  8225  001432  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8226                           
  8227                           ;ModbusRtu.c: 1162: uint8_t objId = _au8Buffer[ 4 ];
  8228  001436  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8229                           
  8230                           ;ModbusRtu.c: 1173: _au8Buffer[ 5 ] = 0x00;
  8231  00143A  0101               	movlb	1	; () banked
  8232  00143C  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8233                           
  8234                           ;ModbusRtu.c: 1174: _au8Buffer[ 6 ] = 0x00;
  8235  00143E  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8236                           
  8237                           ; BSR set to: 1
  8238                           ;ModbusRtu.c: 1176: _u8BufferSize = 8;
  8239  001440  0E08               	movlw	8
  8240  001442  6E72               	movwf	__u8BufferSize,c
  8241                           
  8242                           ;ModbusRtu.c: 1177: switch(devIdCode)
  8243  001444  D094               	goto	l5756
  8244  001446                     l5702:
  8245                           
  8246                           ; BSR set to: 1
  8247                           ;ModbusRtu.c: 1180: _au8Buffer[ 4 ] = 0x81;
  8248  001446  0E81               	movlw	129
  8249  001448  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8250                           
  8251                           ;ModbusRtu.c: 1181: _au8Buffer[ 7 ] = 3;
  8252  00144A  0E03               	movlw	3
  8253  00144C  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8254                           
  8255                           ; BSR set to: 1
  8256                           ;ModbusRtu.c: 1182: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8257  00144E  0E5E               	movlw	low STR_4
  8258  001450  6E07               	movwf	CopyStringToBuffer@src,c
  8259  001452  0E06               	movlw	6
  8260  001454  6E08               	movwf	CopyStringToBuffer@len,c
  8261  001456  0E00               	movlw	0
  8262  001458  ECAD  F012         	call	_CopyStringToBuffer
  8263                           
  8264                           ;ModbusRtu.c: 1183: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8265  00145C  0E55               	movlw	low STR_6
  8266  00145E  6E07               	movwf	CopyStringToBuffer@src,c
  8267  001460  0E09               	movlw	9
  8268  001462  6E08               	movwf	CopyStringToBuffer@len,c
  8269  001464  0E01               	movlw	1
  8270  001466  ECAD  F012         	call	_CopyStringToBuffer
  8271                           
  8272                           ;ModbusRtu.c: 1184: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8273  00146A  0E64               	movlw	low STR_8
  8274  00146C  6E07               	movwf	CopyStringToBuffer@src,c
  8275  00146E  0E05               	movlw	5
  8276  001470  6E08               	movwf	CopyStringToBuffer@len,c
  8277  001472  0E02               	movlw	2
  8278  001474  ECAD  F012         	call	_CopyStringToBuffer
  8279                           
  8280                           ;ModbusRtu.c: 1185: break;
  8281  001478  D084               	goto	l826
  8282  00147A                     l5710:
  8283                           
  8284                           ; BSR set to: 1
  8285                           ;ModbusRtu.c: 1187: _au8Buffer[ 4 ] = 0x82;
  8286  00147A  0E82               	movlw	130
  8287  00147C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8288                           
  8289                           ;ModbusRtu.c: 1188: _au8Buffer[ 7 ] = 4;
  8290  00147E  0E04               	movlw	4
  8291  001480  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8292                           
  8293                           ; BSR set to: 1
  8294                           ;ModbusRtu.c: 1189: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8295  001482  0E3A               	movlw	low STR_10
  8296  001484  6E07               	movwf	CopyStringToBuffer@src,c
  8297  001486  0E10               	movlw	16
  8298  001488  6E08               	movwf	CopyStringToBuffer@len,c
  8299  00148A  0E03               	movlw	3
  8300  00148C  ECAD  F012         	call	_CopyStringToBuffer
  8301                           
  8302                           ;ModbusRtu.c: 1190: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8303  001490  0E26               	movlw	low STR_12
  8304  001492  6E07               	movwf	CopyStringToBuffer@src,c
  8305  001494  0E14               	movlw	20
  8306  001496  6E08               	movwf	CopyStringToBuffer@len,c
  8307  001498  0E04               	movlw	4
  8308  00149A  ECAD  F012         	call	_CopyStringToBuffer
  8309                           
  8310                           ;ModbusRtu.c: 1191: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8311  00149E  0E69               	movlw	low STR_14
  8312  0014A0  6E07               	movwf	CopyStringToBuffer@src,c
  8313  0014A2  0E04               	movlw	4
  8314  0014A4  6E08               	movwf	CopyStringToBuffer@len,c
  8315  0014A6  0E05               	movlw	5
  8316  0014A8  ECAD  F012         	call	_CopyStringToBuffer
  8317                           
  8318                           ;ModbusRtu.c: 1192: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8319  0014AC  0E4A               	movlw	low STR_16
  8320  0014AE  6E07               	movwf	CopyStringToBuffer@src,c
  8321  0014B0  0E0B               	movlw	11
  8322  0014B2  6E08               	movwf	CopyStringToBuffer@len,c
  8323  0014B4  0E06               	movlw	6
  8324  0014B6  ECAD  F012         	call	_CopyStringToBuffer
  8325                           
  8326                           ;ModbusRtu.c: 1193: break;
  8327  0014BA  D063               	goto	l826
  8328  0014BC                     l5720:
  8329                           
  8330                           ; BSR set to: 1
  8331                           ;ModbusRtu.c: 1195: _au8Buffer[ 7 ] = 1;
  8332  0014BC  0E01               	movlw	1
  8333  0014BE  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8334                           
  8335                           ;ModbusRtu.c: 1196: switch(objId)
  8336  0014C0  D046               	goto	l5752
  8337  0014C2                     l5722:
  8338                           
  8339                           ; BSR set to: 1
  8340                           ;ModbusRtu.c: 1199: _au8Buffer[ 4 ] = 0x81;
  8341  0014C2  0E81               	movlw	129
  8342  0014C4  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8343                           
  8344                           ; BSR set to: 1
  8345                           ;ModbusRtu.c: 1200: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8346  0014C6  0E5E               	movlw	low STR_4
  8347  0014C8  6E07               	movwf	CopyStringToBuffer@src,c
  8348  0014CA  0E06               	movlw	6
  8349  0014CC  6E08               	movwf	CopyStringToBuffer@len,c
  8350  0014CE  5018               	movf	ModbusProcess_FC43@objId,w,c
  8351  0014D0  ECAD  F012         	call	_CopyStringToBuffer
  8352                           
  8353                           ;ModbusRtu.c: 1201: break;
  8354  0014D4  D056               	goto	l826
  8355  0014D6                     l5726:
  8356                           
  8357                           ; BSR set to: 1
  8358                           ;ModbusRtu.c: 1203: _au8Buffer[ 4 ] = 0x81;
  8359  0014D6  0E81               	movlw	129
  8360  0014D8  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8361                           
  8362                           ; BSR set to: 1
  8363                           ;ModbusRtu.c: 1204: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8364  0014DA  0E55               	movlw	low STR_6
  8365  0014DC  6E07               	movwf	CopyStringToBuffer@src,c
  8366  0014DE  0E09               	movlw	9
  8367  0014E0  6E08               	movwf	CopyStringToBuffer@len,c
  8368  0014E2  5018               	movf	ModbusProcess_FC43@objId,w,c
  8369  0014E4  ECAD  F012         	call	_CopyStringToBuffer
  8370                           
  8371                           ;ModbusRtu.c: 1205: break;
  8372  0014E8  D04C               	goto	l826
  8373  0014EA                     l5730:
  8374                           
  8375                           ; BSR set to: 1
  8376                           ;ModbusRtu.c: 1207: _au8Buffer[ 4 ] = 0x81;
  8377  0014EA  0E81               	movlw	129
  8378  0014EC  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8379                           
  8380                           ; BSR set to: 1
  8381                           ;ModbusRtu.c: 1208: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8382  0014EE  0E64               	movlw	low STR_8
  8383  0014F0  6E07               	movwf	CopyStringToBuffer@src,c
  8384  0014F2  0E05               	movlw	5
  8385  0014F4  6E08               	movwf	CopyStringToBuffer@len,c
  8386  0014F6  5018               	movf	ModbusProcess_FC43@objId,w,c
  8387  0014F8  ECAD  F012         	call	_CopyStringToBuffer
  8388                           
  8389                           ;ModbusRtu.c: 1209: break;
  8390  0014FC  D042               	goto	l826
  8391  0014FE                     l5734:
  8392                           
  8393                           ; BSR set to: 1
  8394                           ;ModbusRtu.c: 1211: _au8Buffer[ 4 ] = 0x82;
  8395  0014FE  0E82               	movlw	130
  8396  001500  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8397                           
  8398                           ; BSR set to: 1
  8399                           ;ModbusRtu.c: 1212: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8400  001502  0E3A               	movlw	low STR_10
  8401  001504  6E07               	movwf	CopyStringToBuffer@src,c
  8402  001506  0E10               	movlw	16
  8403  001508  6E08               	movwf	CopyStringToBuffer@len,c
  8404  00150A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8405  00150C  ECAD  F012         	call	_CopyStringToBuffer
  8406                           
  8407                           ;ModbusRtu.c: 1213: break;
  8408  001510  D038               	goto	l826
  8409  001512                     l5738:
  8410                           
  8411                           ; BSR set to: 1
  8412                           ;ModbusRtu.c: 1215: _au8Buffer[ 4 ] = 0x82;
  8413  001512  0E82               	movlw	130
  8414  001514  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8415                           
  8416                           ; BSR set to: 1
  8417                           ;ModbusRtu.c: 1216: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8418  001516  0E26               	movlw	low STR_12
  8419  001518  6E07               	movwf	CopyStringToBuffer@src,c
  8420  00151A  0E14               	movlw	20
  8421  00151C  6E08               	movwf	CopyStringToBuffer@len,c
  8422  00151E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8423  001520  ECAD  F012         	call	_CopyStringToBuffer
  8424                           
  8425                           ;ModbusRtu.c: 1217: break;
  8426  001524  D02E               	goto	l826
  8427  001526                     l5742:
  8428                           
  8429                           ; BSR set to: 1
  8430                           ;ModbusRtu.c: 1219: _au8Buffer[ 4 ] = 0x82;
  8431  001526  0E82               	movlw	130
  8432  001528  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8433                           
  8434                           ; BSR set to: 1
  8435                           ;ModbusRtu.c: 1220: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8436  00152A  0E69               	movlw	low STR_14
  8437  00152C  6E07               	movwf	CopyStringToBuffer@src,c
  8438  00152E  0E04               	movlw	4
  8439  001530  6E08               	movwf	CopyStringToBuffer@len,c
  8440  001532  5018               	movf	ModbusProcess_FC43@objId,w,c
  8441  001534  ECAD  F012         	call	_CopyStringToBuffer
  8442                           
  8443                           ;ModbusRtu.c: 1221: break;
  8444  001538  D024               	goto	l826
  8445  00153A                     l5746:
  8446                           
  8447                           ; BSR set to: 1
  8448                           ;ModbusRtu.c: 1223: _au8Buffer[ 4 ] = 0x82;
  8449  00153A  0E82               	movlw	130
  8450  00153C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8451                           
  8452                           ; BSR set to: 1
  8453                           ;ModbusRtu.c: 1224: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8454  00153E  0E4A               	movlw	low STR_16
  8455  001540  6E07               	movwf	CopyStringToBuffer@src,c
  8456  001542  0E0B               	movlw	11
  8457  001544  6E08               	movwf	CopyStringToBuffer@len,c
  8458  001546  5018               	movf	ModbusProcess_FC43@objId,w,c
  8459  001548  ECAD  F012         	call	_CopyStringToBuffer
  8460                           
  8461                           ;ModbusRtu.c: 1225: break;
  8462  00154C  D01A               	goto	l826
  8463  00154E                     l5752:
  8464  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8465                           
  8466                           ; BSR set to: 1
  8467  001550  5018               	movf	ModbusProcess_FC43@objId,w,c
  8468                           
  8469                           ; Switch size 1, requested type "speed"
  8470                           ; Number of cases is 7, Range of values is 0 to 6
  8471                           ; switch strategies available:
  8472                           ; Name         Instructions Cycles
  8473                           ; simple_byte           22    12 (average)
  8474                           ;	Chosen strategy is simple_byte
  8475  001552  E0B7               	bz	l5722
  8476  001554  0A01               	xorlw	1	; case 1
  8477  001556  E0BF               	bz	l5726
  8478  001558  0A03               	xorlw	3	; case 2
  8479  00155A  E0C7               	bz	l5730
  8480  00155C  0A01               	xorlw	1	; case 3
  8481  00155E  E0CF               	bz	l5734
  8482  001560  0A07               	xorlw	7	; case 4
  8483  001562  E0D7               	bz	l5738
  8484  001564  0A01               	xorlw	1	; case 5
  8485  001566  E0DF               	bz	l5742
  8486  001568  0A03               	xorlw	3	; case 6
  8487  00156A  E0E7               	bz	l5746
  8488  00156C  D00A               	goto	l826
  8489  00156E                     l5756:
  8490  00156E  FFFF               	dw	65535	; assembler added errata NOP
  8491                           
  8492                           ; BSR set to: 1
  8493  001570  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8494                           
  8495                           ; Switch size 1, requested type "speed"
  8496                           ; Number of cases is 3, Range of values is 1 to 4
  8497                           ; switch strategies available:
  8498                           ; Name         Instructions Cycles
  8499                           ; simple_byte           10     6 (average)
  8500                           ;	Chosen strategy is simple_byte
  8501  001572  0A01               	xorlw	1	; case 1
  8502  001574  E101 D767          	bz	l5702
  8503  001578  0A03               	xorlw	3	; case 2
  8504  00157A  E101 D77E          	bz	l5710
  8505  00157E  0A06               	xorlw	6	; case 4
  8506  001580  E09D               	bz	l5720
  8507  001582                     l826:
  8508  001582  FFFF               	dw	65535	; assembler added errata NOP
  8509                           
  8510                           ;ModbusRtu.c: 1229: uint8_t u8CopyBufferSize = _u8BufferSize;
  8511  001584  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8512                           
  8513                           ;ModbusRtu.c: 1230: ModbusSendTxBuffer();
  8514  001588  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  8515                           
  8516                           ;ModbusRtu.c: 1232: return u8CopyBufferSize;
  8517  00158C  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8518  00158E  0012               	return		;funcret
  8519  001590  FFFF               	dw	65535	; errata NOP
  8520  001592                     __end_of_ModbusProcess_FC43:
  8521                           	opt stack 0
  8522                           tblptru	equ	0xFF8
  8523                           tblptrh	equ	0xFF7
  8524                           tblptrl	equ	0xFF6
  8525                           tablat	equ	0xFF5
  8526                           prodh	equ	0xFF4
  8527                           prodl	equ	0xFF3
  8528                           intcon	equ	0xFF2
  8529                           postinc0	equ	0xFEE
  8530                           wreg	equ	0xFE8
  8531                           postdec1	equ	0xFE5
  8532                           fsr1h	equ	0xFE2
  8533                           fsr1l	equ	0xFE1
  8534                           indf2	equ	0xFDF
  8535                           postinc2	equ	0xFDE
  8536                           postdec2	equ	0xFDD
  8537                           plusw2	equ	0xFDB
  8538                           fsr2h	equ	0xFDA
  8539                           fsr2l	equ	0xFD9
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function _CopyStringToBuffer *****************
  8543 ;; Defined at:
  8544 ;;		line 1143 in file "ModbusRtu.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;  objId           1    wreg     unsigned char 
  8547 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8548 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  8549 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  8550 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  8551 ;;		 -> STR_6(9), STR_4(6), 
  8552 ;;  len             1    7[COMRAM] unsigned char 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  objId           1    9[COMRAM] unsigned char 
  8555 ;;  i               1   10[COMRAM] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      void 
  8558 ;; Registers used:
  8559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/1
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8565 ;;      Params:         2       0       0       0       0       0       0
  8566 ;;      Locals:         2       0       0       0       0       0       0
  8567 ;;      Temps:          1       0       0       0       0       0       0
  8568 ;;      Totals:         5       0       0       0       0       0       0
  8569 ;;Total ram usage:        5 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    2
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_ModbusProcess_FC43
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text40
  8580  00255A                     __ptext40:
  8581                           	opt stack 0
  8582  00255A                     _CopyStringToBuffer:
  8583                           	opt stack 26
  8584                           
  8585                           ;incstack = 0
  8586  00255A  FFFF               	dw	65535
  8587                           
  8588                           ;CopyStringToBuffer@objId stored from wreg
  8589  00255C  6E0A               	movwf	CopyStringToBuffer@objId,c
  8590                           
  8591                           ;ModbusRtu.c: 1145: len--;
  8592  00255E  0608               	decf	CopyStringToBuffer@len,f,c
  8593                           
  8594                           ;ModbusRtu.c: 1146: _au8Buffer[_u8BufferSize++] = objId;
  8595  002560  0E00               	movlw	low __au8Buffer
  8596  002562  2472               	addwf	__u8BufferSize,w,c
  8597  002564  6ED9               	movwf	fsr2l,c
  8598  002566  6ADA               	clrf	fsr2h,c
  8599  002568  0E01               	movlw	high __au8Buffer
  8600  00256A  22DA               	addwfc	fsr2h,f,c
  8601  00256C  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8602  002570  2A72               	incf	__u8BufferSize,f,c
  8603                           
  8604                           ;ModbusRtu.c: 1147: _au8Buffer[_u8BufferSize++] = len;
  8605  002572  0E00               	movlw	low __au8Buffer
  8606  002574  2472               	addwf	__u8BufferSize,w,c
  8607  002576  6ED9               	movwf	fsr2l,c
  8608  002578  6ADA               	clrf	fsr2h,c
  8609  00257A  0E01               	movlw	high __au8Buffer
  8610  00257C  22DA               	addwfc	fsr2h,f,c
  8611  00257E  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8612  002582  2A72               	incf	__u8BufferSize,f,c
  8613                           
  8614                           ;ModbusRtu.c: 1148: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8615  002584  6A0B               	clrf	CopyStringToBuffer@i,c
  8616  002586  D013               	goto	l3660
  8617  002588                     l3654:
  8618                           
  8619                           ;ModbusRtu.c: 1149: _au8Buffer[_u8BufferSize] = src[i];
  8620  002588  5007               	movf	CopyStringToBuffer@src,w,c
  8621  00258A  240B               	addwf	CopyStringToBuffer@i,w,c
  8622  00258C  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8623  00258E  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8624  002592                     	if	1	;There is more than 1 active tblptr byte
  8625  002592  0E06               	movlw	high __smallconst
  8626  002594  6EF7               	movwf	tblptrh,c
  8627  002596                     	endif
  8628  002596                     	if	0	;tblptru may be non-zero
  8629  002596                     	endif
  8630  002596                     	if	0	;tblptru may be non-zero
  8631  002596                     	endif
  8632  002596  0E00               	movlw	low __au8Buffer
  8633  002598  2472               	addwf	__u8BufferSize,w,c
  8634  00259A  6ED9               	movwf	fsr2l,c
  8635  00259C  6ADA               	clrf	fsr2h,c
  8636  00259E  0E01               	movlw	high __au8Buffer
  8637  0025A0  22DA               	addwfc	fsr2h,f,c
  8638  0025A2  0008               	tblrd		*
  8639  0025A4  FFFF               	dw	65535	; errata NOP
  8640  0025A6  CFF5 FFDF          	movff	tablat,indf2
  8641  0025AA  2A0B               	incf	CopyStringToBuffer@i,f,c
  8642  0025AC  2A72               	incf	__u8BufferSize,f,c
  8643  0025AE                     l3660:
  8644  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  8645  0025B0  5008               	movf	CopyStringToBuffer@len,w,c
  8646  0025B2  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8647  0025B4  E3E9               	bnc	l3654
  8648  0025B6  0012               	return		;funcret
  8649  0025B8  FFFF               	dw	65535	; errata NOP
  8650  0025BA                     __end_of_CopyStringToBuffer:
  8651                           	opt stack 0
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           postinc0	equ	0xFEE
  8660                           wreg	equ	0xFE8
  8661                           postdec1	equ	0xFE5
  8662                           fsr1h	equ	0xFE2
  8663                           fsr1l	equ	0xFE1
  8664                           indf2	equ	0xFDF
  8665                           postinc2	equ	0xFDE
  8666                           postdec2	equ	0xFDD
  8667                           plusw2	equ	0xFDB
  8668                           fsr2h	equ	0xFDA
  8669                           fsr2l	equ	0xFD9
  8670                           status	equ	0xFD8
  8671                           
  8672 ;; *************** function _ModbusProcess_FC3 *****************
  8673 ;; Defined at:
  8674 ;;		line 885 in file "ModbusRtu.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8677 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8678 ;;  u8size          1   23[COMRAM] unsigned char 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  u16regsno       2   29[COMRAM] unsigned short 
  8681 ;;  i               1   32[COMRAM] unsigned char 
  8682 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  8683 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      unsigned char 
  8686 ;; Registers used:
  8687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : E/1
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8693 ;;      Params:         3       0       0       0       0       0       0
  8694 ;;      Locals:         5       0       0       0       0       0       0
  8695 ;;      Temps:          4       0       0       0       0       0       0
  8696 ;;      Totals:        12       0       0       0       0       0       0
  8697 ;;Total ram usage:       12 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    4
  8700 ;; This function calls:
  8701 ;;		_ModbusSendTxBuffer
  8702 ;; This function is called by:
  8703 ;;		_ModbusPoll
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text41
  8708  001F32                     __ptext41:
  8709                           	opt stack 0
  8710  001F32                     _ModbusProcess_FC3:
  8711                           	opt stack 25
  8712                           
  8713                           ;incstack = 0
  8714  001F32  FFFF               	dw	65535
  8715                           
  8716                           ;ModbusRtu.c: 887: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  8717  001F34  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  8718                           
  8719                           ;ModbusRtu.c: 888: _lastAddress = u8StartAdd;
  8720  001F38  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  8721  001F3C  0100               	movlb	0	; () banked
  8722  001F3E  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;ModbusRtu.c: 889: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8726  001F40  0101               	movlb	1	; () banked
  8727  001F42  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8728  001F44  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8729  001F46  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8730  001F48  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  8731  001F4A  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  8732                           
  8733                           ; BSR set to: 1
  8734                           ;ModbusRtu.c: 890: _lastCount = u16regsno;
  8735  001F4E  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  8736  001F52  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  8737                           
  8738                           ; BSR set to: 1
  8739                           ;ModbusRtu.c: 891: uint8_t u8CopyBufferSize;
  8740                           ;ModbusRtu.c: 892: uint8_t i;
  8741                           ;ModbusRtu.c: 894: _au8Buffer[ 2 ] = u16regsno * 2;
  8742  001F56  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  8743  001F58  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8744  001F5A  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8745                           
  8746                           ; BSR set to: 1
  8747                           ;ModbusRtu.c: 895: _u8BufferSize = 3;
  8748  001F5C  0E03               	movlw	3
  8749  001F5E  6E72               	movwf	__u8BufferSize,c
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;ModbusRtu.c: 897: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  8753  001F60  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  8754  001F64  D02A               	goto	l5492
  8755  001F66                     l5486:
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;ModbusRtu.c: 898: {
  8759                           ;ModbusRtu.c: 899: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  8760  001F66  0E00               	movlw	low __au8Buffer
  8761  001F68  2472               	addwf	__u8BufferSize,w,c
  8762  001F6A  6ED9               	movwf	fsr2l,c
  8763  001F6C  6ADA               	clrf	fsr2h,c
  8764  001F6E  0E01               	movlw	high __au8Buffer
  8765  001F70  22DA               	addwfc	fsr2h,f,c
  8766  001F72  5021               	movf	ModbusProcess_FC3@i,w,c
  8767  001F74  0D02               	mullw	2
  8768  001F76  50F3               	movf	prodl,w,c
  8769  001F78  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8770  001F7A  6EE1               	movwf	fsr1l,c
  8771  001F7C  50F4               	movf	prodh,w,c
  8772  001F7E  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8773  001F80  6EE2               	movwf	fsr1h,c
  8774  001F82  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  8775  001F86  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  8776  001F8A  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  8777  001F8E  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  8778  001F90  5019               	movf	??_ModbusProcess_FC3,w,c
  8779  001F92  6EDF               	movwf	indf2,c
  8780                           
  8781                           ; BSR set to: 1
  8782                           ;ModbusRtu.c: 900: _u8BufferSize++;
  8783  001F94  2A72               	incf	__u8BufferSize,f,c
  8784                           
  8785                           ; BSR set to: 1
  8786                           ;ModbusRtu.c: 901: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  8787  001F96  5021               	movf	ModbusProcess_FC3@i,w,c
  8788  001F98  0D02               	mullw	2
  8789  001F9A  50F3               	movf	prodl,w,c
  8790  001F9C  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8791  001F9E  6ED9               	movwf	fsr2l,c
  8792  001FA0  50F4               	movf	prodh,w,c
  8793  001FA2  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8794  001FA4  6EDA               	movwf	fsr2h,c
  8795  001FA6  0E00               	movlw	low __au8Buffer
  8796  001FA8  2472               	addwf	__u8BufferSize,w,c
  8797  001FAA  6EE1               	movwf	fsr1l,c
  8798  001FAC  6AE2               	clrf	fsr1h,c
  8799  001FAE  0E01               	movlw	high __au8Buffer
  8800  001FB0  22E2               	addwfc	fsr1h,f,c
  8801  001FB2  CFDF FFE7          	movff	indf2,indf1
  8802                           
  8803                           ;ModbusRtu.c: 902: _u8BufferSize++;
  8804  001FB6  2A72               	incf	__u8BufferSize,f,c
  8805  001FB8  2A21               	incf	ModbusProcess_FC3@i,f,c
  8806  001FBA                     l5492:
  8807  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  8808                           
  8809                           ; BSR set to: 1
  8810  001FBC  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8811  001FBE  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8812  001FC0  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8813  001FC2  0E00               	movlw	0
  8814  001FC4  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8815  001FC6  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8816  001FC8  5021               	movf	ModbusProcess_FC3@i,w,c
  8817  001FCA  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8818  001FCC  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8819  001FCE  5019               	movf	??_ModbusProcess_FC3,w,c
  8820  001FD0  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  8821  001FD2  501A               	movf	??_ModbusProcess_FC3+1,w,c
  8822  001FD4  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  8823  001FD6  E3C7               	bnc	l5486
  8824                           
  8825                           ; BSR set to: 1
  8826                           ;ModbusRtu.c: 903: }
  8827                           ;ModbusRtu.c: 904: u8CopyBufferSize = _u8BufferSize + 2;
  8828  001FD8  5072               	movf	__u8BufferSize,w,c
  8829  001FDA  0F02               	addlw	2
  8830  001FDC  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8831                           
  8832                           ; BSR set to: 1
  8833                           ;ModbusRtu.c: 905: ModbusSendTxBuffer();
  8834  001FDE  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  8835                           
  8836                           ;ModbusRtu.c: 907: return u8CopyBufferSize;
  8837  001FE2  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8838  001FE4  0012               	return		;funcret
  8839  001FE6  FFFF               	dw	65535	; errata NOP
  8840  001FE8                     __end_of_ModbusProcess_FC3:
  8841                           	opt stack 0
  8842                           tblptru	equ	0xFF8
  8843                           tblptrh	equ	0xFF7
  8844                           tblptrl	equ	0xFF6
  8845                           tablat	equ	0xFF5
  8846                           prodh	equ	0xFF4
  8847                           prodl	equ	0xFF3
  8848                           intcon	equ	0xFF2
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           indf1	equ	0xFE7
  8852                           postinc1	equ	0xFE6
  8853                           postdec1	equ	0xFE5
  8854                           fsr1h	equ	0xFE2
  8855                           fsr1l	equ	0xFE1
  8856                           indf2	equ	0xFDF
  8857                           postinc2	equ	0xFDE
  8858                           postdec2	equ	0xFDD
  8859                           plusw2	equ	0xFDB
  8860                           fsr2h	equ	0xFDA
  8861                           fsr2l	equ	0xFD9
  8862                           status	equ	0xFD8
  8863                           
  8864 ;; *************** function _ModbusProcess_FC21 *****************
  8865 ;; Defined at:
  8866 ;;		line 1111 in file "ModbusRtu.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;		None
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8871 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8872 ;;  i               1   29[COMRAM] unsigned char 
  8873 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8874 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      unsigned char 
  8877 ;; Registers used:
  8878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : E/1
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8884 ;;      Params:         0       0       0       0       0       0       0
  8885 ;;      Locals:         7       0       0       0       0       0       0
  8886 ;;      Temps:          2       0       0       0       0       0       0
  8887 ;;      Totals:         9       0       0       0       0       0       0
  8888 ;;Total ram usage:        9 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    4
  8891 ;; This function calls:
  8892 ;;		_ModbusSendTxBuffer
  8893 ;; This function is called by:
  8894 ;;		_ModbusPoll
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text42
  8899  002096                     __ptext42:
  8900                           	opt stack 0
  8901  002096                     _ModbusProcess_FC21:
  8902                           	opt stack 25
  8903                           
  8904                           ;incstack = 0
  8905  002096  FFFF               	dw	65535
  8906                           
  8907                           ;ModbusRtu.c: 1115: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8908  002098  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8909                           
  8910                           ;ModbusRtu.c: 1117: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8911  00209C  0101               	movlb	1	; () banked
  8912  00209E  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8913  0020A0  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8914  0020A4  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8915  0020A6  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8916  0020AA  6A16               	clrf	??_ModbusProcess_FC21,c
  8917  0020AC  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8918  0020AE  90D8               	bcf	status,0,c
  8919  0020B0  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8920  0020B2  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8921  0020B4  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8922  0020B6  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8923                           
  8924                           ; BSR set to: 1
  8925                           ;ModbusRtu.c: 1118: _lastAddress = startAddrsBytes;
  8926  0020B8  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8927  0020BC  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8928                           
  8929                           ;ModbusRtu.c: 1119: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8930  0020C0  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8931  0020C2  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8932  0020C6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8933  0020C8  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8934  0020CC  6A16               	clrf	??_ModbusProcess_FC21,c
  8935  0020CE  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8936  0020D0  90D8               	bcf	status,0,c
  8937  0020D2  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8938  0020D4  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8939  0020D6  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8940  0020D8  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8941                           
  8942                           ; BSR set to: 1
  8943                           ;ModbusRtu.c: 1120: _lastCount = recLenBytes;
  8944  0020DA  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8945  0020DE  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8946                           
  8947                           ;ModbusRtu.c: 1121: uint8_t u8CopyBufferSize;
  8948                           ;ModbusRtu.c: 1122: uint8_t i;
  8949                           ;ModbusRtu.c: 1128: _u8BufferSize = requestDataLen + 1;
  8950  0020E2  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8951  0020E4  6E72               	movwf	__u8BufferSize,c
  8952                           
  8953                           ; BSR set to: 1
  8954                           ;ModbusRtu.c: 1132: for (i = 0; i < recLenBytes; i++)
  8955  0020E6  6A1E               	clrf	ModbusProcess_FC21@i,c
  8956  0020E8  D01C               	goto	l5690
  8957  0020EA                     l808:
  8958  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  8959                           
  8960                           ; BSR set to: 1
  8961  0020EC  B2A6               	btfsc	4006,1,c	;volatile
  8962  0020EE  D7FD               	goto	l808
  8963                           
  8964                           ; BSR set to: 1
  8965  0020F0  501E               	movf	ModbusProcess_FC21@i,w,c
  8966  0020F2  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8967  0020F4  6EA9               	movwf	4009,c	;volatile
  8968                           
  8969                           ; BSR set to: 1
  8970  0020F6  0E0A               	movlw	low (__au8Buffer+10)
  8971  0020F8  241E               	addwf	ModbusProcess_FC21@i,w,c
  8972  0020FA  6ED9               	movwf	fsr2l,c
  8973  0020FC  6ADA               	clrf	fsr2h,c
  8974  0020FE  0E01               	movlw	high (__au8Buffer+10)
  8975  002100  22DA               	addwfc	fsr2h,f,c
  8976  002102  50DF               	movf	indf2,w,c
  8977  002104  6EA8               	movwf	4008,c	;volatile
  8978                           
  8979                           ; BSR set to: 1
  8980  002106  90D8               	bcf	status,0,c	;volatile
  8981                           
  8982                           ; BSR set to: 1
  8983  002108  BEF2               	btfsc	intcon,7,c	;volatile
  8984                           
  8985                           ; BSR set to: 1
  8986  00210A  80D8               	bsf	status,0,c	;volatile
  8987                           
  8988                           ; BSR set to: 1
  8989  00210C  9EF2               	bcf	intcon,7,c	;volatile
  8990  00210E  84A6               	bsf	4006,2,c	;volatile
  8991                           
  8992                           ; BSR set to: 1
  8993  002110  0E55               	movlw	85
  8994  002112  6EA7               	movwf	4007,c	;volatile
  8995  002114  0EAA               	movlw	170
  8996  002116  6EA7               	movwf	4007,c	;volatile
  8997                           
  8998                           ; BSR set to: 1
  8999  002118  82A6               	bsf	4006,1,c	;volatile
  9000                           
  9001                           ; BSR set to: 1
  9002  00211A  94A6               	bcf	4006,2,c	;volatile
  9003                           
  9004                           ; BSR set to: 1
  9005  00211C  E301               	bnc	l5688
  9006                           
  9007                           ; BSR set to: 1
  9008  00211E  8EF2               	bsf	intcon,7,c	;volatile
  9009  002120                     l5688:
  9010                           
  9011                           ; BSR set to: 1
  9012  002120  2A1E               	incf	ModbusProcess_FC21@i,f,c
  9013  002122                     l5690:
  9014  002122  FFFF               	dw	65535	; assembler added errata NOP
  9015                           
  9016                           ; BSR set to: 1
  9017  002124  501E               	movf	ModbusProcess_FC21@i,w,c
  9018  002126  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  9019  002128  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9020  00212A  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  9021  00212C  5C16               	subwf	??_ModbusProcess_FC21,w,c
  9022  00212E  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  9023  002130  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  9024  002132  E3DB               	bnc	l808
  9025                           
  9026                           ; BSR set to: 1
  9027                           ;ModbusRtu.c: 1135: }
  9028                           ;ModbusRtu.c: 1137: u8CopyBufferSize = _u8BufferSize;
  9029  002134  C072  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  9030                           
  9031                           ; BSR set to: 1
  9032                           ;ModbusRtu.c: 1138: ModbusSendTxBuffer();
  9033  002138  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  9034                           
  9035                           ;ModbusRtu.c: 1140: return u8CopyBufferSize;
  9036  00213C  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  9037  00213E  0012               	return		;funcret
  9038  002140  FFFF               	dw	65535	; errata NOP
  9039  002142                     __end_of_ModbusProcess_FC21:
  9040                           	opt stack 0
  9041                           tblptru	equ	0xFF8
  9042                           tblptrh	equ	0xFF7
  9043                           tblptrl	equ	0xFF6
  9044                           tablat	equ	0xFF5
  9045                           prodh	equ	0xFF4
  9046                           prodl	equ	0xFF3
  9047                           intcon	equ	0xFF2
  9048                           postinc0	equ	0xFEE
  9049                           wreg	equ	0xFE8
  9050                           indf1	equ	0xFE7
  9051                           postinc1	equ	0xFE6
  9052                           postdec1	equ	0xFE5
  9053                           fsr1h	equ	0xFE2
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           plusw2	equ	0xFDB
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function _ModbusProcess_FC17 *****************
  9064 ;; Defined at:
  9065 ;;		line 1086 in file "ModbusRtu.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;		None
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  i               1   23[COMRAM] unsigned char 
  9070 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  1    wreg      unsigned char 
  9073 ;; Registers used:
  9074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9075 ;; Tracked objects:
  9076 ;;		On entry : E/1
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9080 ;;      Params:         0       0       0       0       0       0       0
  9081 ;;      Locals:         2       0       0       0       0       0       0
  9082 ;;      Temps:          1       0       0       0       0       0       0
  9083 ;;      Totals:         3       0       0       0       0       0       0
  9084 ;;Total ram usage:        3 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    4
  9087 ;; This function calls:
  9088 ;;		_ModbusSendTxBuffer
  9089 ;; This function is called by:
  9090 ;;		_ModbusPoll
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text43
  9095  002420                     __ptext43:
  9096                           	opt stack 0
  9097  002420                     _ModbusProcess_FC17:
  9098                           	opt stack 25
  9099                           
  9100                           ;incstack = 0
  9101  002420  FFFF               	dw	65535
  9102                           
  9103                           ;ModbusRtu.c: 1088: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  9104  002422  0E1B               	movlw	27
  9105  002424  0101               	movlb	1	; () banked
  9106  002426  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9107                           
  9108                           ;ModbusRtu.c: 1090: _u8BufferSize = 3;
  9109  002428  0E03               	movlw	3
  9110  00242A  6E72               	movwf	__u8BufferSize,c
  9111                           
  9112                           ; BSR set to: 1
  9113                           ;ModbusRtu.c: 1092: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  9114  00242C  6A18               	clrf	ModbusProcess_FC17@i,c
  9115  00242E                     l5636:
  9116  00242E  FFFF               	dw	65535	; assembler added errata NOP
  9117                           
  9118                           ; BSR set to: 1
  9119                           ;ModbusRtu.c: 1093: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  9120  002430  5018               	movf	ModbusProcess_FC17@i,w,c
  9121  002432  0F0D               	addlw	low STR_3
  9122  002434  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  9123  002436  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  9124  00243A                     	if	1	;There is more than 1 active tblptr byte
  9125  00243A  0E06               	movlw	high __smallconst
  9126  00243C  6EF7               	movwf	tblptrh,c
  9127  00243E                     	endif
  9128  00243E                     	if	0	;tblptru may be non-zero
  9129  00243E                     	endif
  9130  00243E                     	if	0	;tblptru may be non-zero
  9131  00243E                     	endif
  9132  00243E  0E00               	movlw	low __au8Buffer
  9133  002440  2472               	addwf	__u8BufferSize,w,c
  9134  002442  6ED9               	movwf	fsr2l,c
  9135  002444  6ADA               	clrf	fsr2h,c
  9136  002446  0E01               	movlw	high __au8Buffer
  9137  002448  22DA               	addwfc	fsr2h,f,c
  9138  00244A  0008               	tblrd		*
  9139  00244C  FFFF               	dw	65535	; errata NOP
  9140  00244E  CFF5 FFDF          	movff	tablat,indf2
  9141                           
  9142                           ; BSR set to: 1
  9143  002452  2A18               	incf	ModbusProcess_FC17@i,f,c
  9144                           
  9145                           ; BSR set to: 1
  9146  002454  2A72               	incf	__u8BufferSize,f,c
  9147                           
  9148                           ; BSR set to: 1
  9149  002456  0E18               	movlw	24
  9150  002458  6418               	cpfsgt	ModbusProcess_FC17@i,c
  9151  00245A  D7E9               	goto	l5636
  9152                           
  9153                           ; BSR set to: 1
  9154                           ;ModbusRtu.c: 1095: _au8Buffer[_u8BufferSize++] = '!';
  9155  00245C  0E00               	movlw	low __au8Buffer
  9156  00245E  2472               	addwf	__u8BufferSize,w,c
  9157  002460  6ED9               	movwf	fsr2l,c
  9158  002462  6ADA               	clrf	fsr2h,c
  9159  002464  0E01               	movlw	high __au8Buffer
  9160  002466  22DA               	addwfc	fsr2h,f,c
  9161  002468  0E21               	movlw	33
  9162  00246A  6EDF               	movwf	indf2,c
  9163                           
  9164                           ; BSR set to: 1
  9165  00246C  2A72               	incf	__u8BufferSize,f,c
  9166                           
  9167                           ; BSR set to: 1
  9168                           ;ModbusRtu.c: 1096: _au8Buffer[_u8BufferSize++] = '>';
  9169  00246E  0E00               	movlw	low __au8Buffer
  9170  002470  2472               	addwf	__u8BufferSize,w,c
  9171  002472  6ED9               	movwf	fsr2l,c
  9172  002474  6ADA               	clrf	fsr2h,c
  9173  002476  0E01               	movlw	high __au8Buffer
  9174  002478  22DA               	addwfc	fsr2h,f,c
  9175  00247A  0E3E               	movlw	62
  9176  00247C  6EDF               	movwf	indf2,c
  9177  00247E  2A72               	incf	__u8BufferSize,f,c
  9178                           
  9179                           ; BSR set to: 1
  9180                           ;ModbusRtu.c: 1097: uint8_t u8CopyBufferSize = _u8BufferSize;
  9181  002480  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9182                           
  9183                           ; BSR set to: 1
  9184                           ;ModbusRtu.c: 1098: ModbusSendTxBuffer();
  9185  002484  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  9186                           
  9187                           ;ModbusRtu.c: 1100: return u8CopyBufferSize;
  9188  002488  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9189  00248A  0012               	return		;funcret
  9190  00248C  FFFF               	dw	65535	; errata NOP
  9191  00248E                     __end_of_ModbusProcess_FC17:
  9192                           	opt stack 0
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           intcon	equ	0xFF2
  9200                           postinc0	equ	0xFEE
  9201                           wreg	equ	0xFE8
  9202                           indf1	equ	0xFE7
  9203                           postinc1	equ	0xFE6
  9204                           postdec1	equ	0xFE5
  9205                           fsr1h	equ	0xFE2
  9206                           fsr1l	equ	0xFE1
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           plusw2	equ	0xFDB
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function _ModbusProcess_FC16 *****************
  9216 ;; Defined at:
  9217 ;;		line 1047 in file "ModbusRtu.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9220 ;;		 -> _MODBUSHoldingRegs(30), 
  9221 ;;  u8size          1   23[COMRAM] unsigned char 
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9224 ;;  temp            2   28[COMRAM] unsigned short 
  9225 ;;  i               1   34[COMRAM] unsigned char 
  9226 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9227 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      unsigned char 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : E/1
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9237 ;;      Params:         3       0       0       0       0       0       0
  9238 ;;      Locals:         7       0       0       0       0       0       0
  9239 ;;      Temps:          4       0       0       0       0       0       0
  9240 ;;      Totals:        14       0       0       0       0       0       0
  9241 ;;Total ram usage:       14 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    4
  9244 ;; This function calls:
  9245 ;;		_ModbusSendTxBuffer
  9246 ;; This function is called by:
  9247 ;;		_ModbusPoll
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text44
  9252  001CEA                     __ptext44:
  9253                           	opt stack 0
  9254  001CEA                     _ModbusProcess_FC16:
  9255                           	opt stack 25
  9256                           
  9257                           ;incstack = 0
  9258  001CEA  FFFF               	dw	65535
  9259                           
  9260                           ;ModbusRtu.c: 1050: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9261  001CEC  0101               	movlb	1	; () banked
  9262  001CEE  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9263  001CF0  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9264  001CF4  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9265  001CF6  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9266  001CFA  6A19               	clrf	??_ModbusProcess_FC16,c
  9267  001CFC  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9268  001CFE  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9269  001D00  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9270  001D02  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9271                           
  9272                           ; BSR set to: 1
  9273                           ;ModbusRtu.c: 1051: _lastAddress = u16StartAdd;
  9274  001D04  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9275  001D08  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9276                           
  9277                           ; BSR set to: 1
  9278                           ;ModbusRtu.c: 1052: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9279  001D0C  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9280                           
  9281                           ; BSR set to: 1
  9282                           ;ModbusRtu.c: 1053: _lastCount = u8regsno;
  9283  001D10  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9284  001D14  0100               	movlb	0	; () banked
  9285  001D16  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;ModbusRtu.c: 1054: uint8_t u8CopyBufferSize;
  9289                           ;ModbusRtu.c: 1055: uint8_t i;
  9290                           ;ModbusRtu.c: 1056: uint16_t temp;
  9291                           ;ModbusRtu.c: 1059: _au8Buffer[ NB_HI ] = 0;
  9292  001D18  0101               	movlb	1	; () banked
  9293  001D1A  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9294                           
  9295                           ; BSR set to: 1
  9296                           ;ModbusRtu.c: 1060: _au8Buffer[ NB_LO ] = u8regsno;
  9297  001D1C  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9298                           
  9299                           ; BSR set to: 1
  9300                           ;ModbusRtu.c: 1061: _u8BufferSize = RESPONSE_SIZE;
  9301  001D20  0E06               	movlw	6
  9302  001D22  6E72               	movwf	__u8BufferSize,c
  9303                           
  9304                           ; BSR set to: 1
  9305                           ;ModbusRtu.c: 1064: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9306  001D24  6A23               	clrf	ModbusProcess_FC16@i,c
  9307  001D26  D02C               	goto	l5616
  9308  001D28                     l5610:
  9309                           
  9310                           ; BSR set to: 1
  9311                           ;ModbusRtu.c: 1065: {
  9312                           ;ModbusRtu.c: 1066: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9313  001D28  5023               	movf	ModbusProcess_FC16@i,w,c
  9314  001D2A  0D02               	mullw	2
  9315  001D2C  0E08               	movlw	low (__au8Buffer+8)
  9316  001D2E  24F3               	addwf	prodl,w,c
  9317  001D30  6ED9               	movwf	fsr2l,c
  9318  001D32  0E01               	movlw	high (__au8Buffer+8)
  9319  001D34  20F4               	addwfc	prodh,w,c
  9320  001D36  6EDA               	movwf	fsr2h,c
  9321  001D38  50DF               	movf	indf2,w,c
  9322  001D3A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9323  001D3C  5023               	movf	ModbusProcess_FC16@i,w,c
  9324  001D3E  0D02               	mullw	2
  9325  001D40  0E07               	movlw	low (__au8Buffer+7)
  9326  001D42  24F3               	addwf	prodl,w,c
  9327  001D44  6ED9               	movwf	fsr2l,c
  9328  001D46  0E01               	movlw	high (__au8Buffer+7)
  9329  001D48  20F4               	addwfc	prodh,w,c
  9330  001D4A  6EDA               	movwf	fsr2h,c
  9331  001D4C  50DF               	movf	indf2,w,c
  9332  001D4E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9333  001D50  5019               	movf	??_ModbusProcess_FC16,w,c
  9334  001D52  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9335  001D54  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9336                           
  9337                           ; BSR set to: 1
  9338                           ;ModbusRtu.c: 1070: regs[ u16StartAdd + i ] = temp;
  9339  001D58  5023               	movf	ModbusProcess_FC16@i,w,c
  9340  001D5A  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9341  001D5C  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9342  001D5E  0E00               	movlw	0
  9343  001D60  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9344  001D62  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9345  001D64  90D8               	bcf	status,0,c
  9346  001D66  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9347  001D68  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9348  001D6A  5019               	movf	??_ModbusProcess_FC16,w,c
  9349  001D6C  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9350  001D6E  6ED9               	movwf	fsr2l,c
  9351  001D70  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9352  001D72  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9353  001D74  6EDA               	movwf	fsr2h,c
  9354  001D76  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9355  001D7A  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9356                           
  9357                           ; BSR set to: 1
  9358  001D7E  2A23               	incf	ModbusProcess_FC16@i,f,c
  9359  001D80                     l5616:
  9360  001D80  FFFF               	dw	65535	; assembler added errata NOP
  9361                           
  9362                           ; BSR set to: 1
  9363  001D82  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9364  001D84  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9365  001D86  E20E               	bc	l5620
  9366                           
  9367                           ; BSR set to: 1
  9368  001D88  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9369  001D8A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9370  001D8C  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9371  001D8E  5023               	movf	ModbusProcess_FC16@i,w,c
  9372  001D90  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9373  001D92  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9374  001D94  0E00               	movlw	0
  9375  001D96  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9376  001D98  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9377  001D9A  5019               	movf	??_ModbusProcess_FC16,w,c
  9378  001D9C  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9379  001D9E  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9380  001DA0  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9381  001DA2  E3C2               	bnc	l5610
  9382  001DA4                     l5620:
  9383                           
  9384                           ; BSR set to: 1
  9385                           ;ModbusRtu.c: 1071: }
  9386                           ;ModbusRtu.c: 1072: u8CopyBufferSize = _u8BufferSize + 2;
  9387  001DA4  5072               	movf	__u8BufferSize,w,c
  9388  001DA6  0F02               	addlw	2
  9389  001DA8  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9390                           
  9391                           ; BSR set to: 1
  9392                           ;ModbusRtu.c: 1073: ModbusSendTxBuffer();
  9393  001DAA  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  9394                           
  9395                           ;ModbusRtu.c: 1075: return u8CopyBufferSize;
  9396  001DAE  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9397  001DB0  0012               	return		;funcret
  9398  001DB2  FFFF               	dw	65535	; errata NOP
  9399  001DB4                     __end_of_ModbusProcess_FC16:
  9400                           	opt stack 0
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           postinc0	equ	0xFEE
  9409                           wreg	equ	0xFE8
  9410                           indf1	equ	0xFE7
  9411                           postinc1	equ	0xFE6
  9412                           postdec1	equ	0xFE5
  9413                           fsr1h	equ	0xFE2
  9414                           fsr1l	equ	0xFE1
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           postdec2	equ	0xFDD
  9418                           plusw2	equ	0xFDB
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function _ModbusProcess_FC15 *****************
  9424 ;; Defined at:
  9425 ;;		line 989 in file "ModbusRtu.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  regs            1    wreg     PTR unsigned short 
  9428 ;;		 -> _MODBUSCoils(2), 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9431 ;;		 -> _MODBUSCoils(2), 
  9432 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9433 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9434 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9435 ;;  u16coil         2   26[COMRAM] unsigned short 
  9436 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9437 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9438 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9439 ;;  bTemp           1   29[COMRAM] unsigned char 
  9440 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  1    wreg      unsigned char 
  9443 ;; Registers used:
  9444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : E/1
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9450 ;;      Params:         0       0       0       0       0       0       0
  9451 ;;      Locals:        14       0       0       0       0       0       0
  9452 ;;      Temps:          5       0       0       0       0       0       0
  9453 ;;      Totals:        19       0       0       0       0       0       0
  9454 ;;Total ram usage:       19 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    4
  9457 ;; This function calls:
  9458 ;;		_ModbusSendTxBuffer
  9459 ;; This function is called by:
  9460 ;;		_ModbusPoll
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           	psect	text45
  9465  0018FE                     __ptext45:
  9466                           	opt stack 0
  9467  0018FE                     _ModbusProcess_FC15:
  9468                           	opt stack 25
  9469                           
  9470                           ;incstack = 0
  9471  0018FE  FFFF               	dw	65535
  9472                           
  9473                           ;ModbusProcess_FC15@regs stored from wreg
  9474  001900  6E24               	movwf	ModbusProcess_FC15@regs,c
  9475                           
  9476                           ;ModbusRtu.c: 992: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9477                           ;ModbusRtu.c: 993: uint8_t u8CopyBufferSize;
  9478                           ;ModbusRtu.c: 994: uint16_t u16currentCoil, u16coil;
  9479                           ;ModbusRtu.c: 995: boolean bTemp;
  9480                           ;ModbusRtu.c: 998: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9481  001902  0101               	movlb	1	; () banked
  9482  001904  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9483  001906  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9484  001908  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9485  00190A  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9486  00190C  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9487                           
  9488                           ; BSR set to: 1
  9489                           ;ModbusRtu.c: 999: _lastAddress = u16StartCoil;
  9490  001910  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9491  001914  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9492                           
  9493                           ;ModbusRtu.c: 1000: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9494  001918  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9495  00191A  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9496  00191C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9497  00191E  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9498  001920  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9499                           
  9500                           ; BSR set to: 1
  9501                           ;ModbusRtu.c: 1001: _lastCount = u16Coilno;
  9502  001924  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9503  001928  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9504                           
  9505                           ; BSR set to: 1
  9506                           ;ModbusRtu.c: 1004: u8bitsno = 0;
  9507  00192C  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9508                           
  9509                           ;ModbusRtu.c: 1005: u8frameByte = 7;
  9510  00192E  0E07               	movlw	7
  9511  001930  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9512                           
  9513                           ; BSR set to: 1
  9514                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9515  001932  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9516  001934  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9517  001936  D058               	goto	l5582
  9518  001938                     l5562:
  9519                           
  9520                           ;ModbusRtu.c: 1007: {
  9521                           ;ModbusRtu.c: 1009: u16coil = u16StartCoil + u16currentCoil;
  9522  001938  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9523  00193A  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9524  00193C  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9525  00193E  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9526  001940  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9527  001942  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9528                           
  9529                           ;ModbusRtu.c: 1011: u8currentBit = (uint8_t) u16coil;
  9530  001944  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9531                           
  9532                           ;ModbusRtu.c: 1013: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9533  001948  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9534  00194C  0E00               	movlw	low __au8Buffer
  9535  00194E  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9536  001950  6ED9               	movwf	fsr2l,c
  9537  001952  6ADA               	clrf	fsr2h,c
  9538  001954  0E01               	movlw	high __au8Buffer
  9539  001956  22DA               	addwfc	fsr2h,f,c
  9540  001958  50DF               	movf	indf2,w,c
  9541  00195A  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9542  00195C  2A16               	incf	??_ModbusProcess_FC15,f,c
  9543  00195E  D003               	goto	u4844
  9544  001960                     u4845:
  9545  001960  FFFF               	dw	65535	; assembler added errata NOP
  9546  001962  90D8               	bcf	status,0,c
  9547  001964  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9548  001966                     u4844:
  9549  001966  FFFF               	dw	65535	; assembler added errata NOP
  9550  001968  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9551  00196A  D7FA               	goto	u4845
  9552  00196C  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9553  00196E  0B01               	andlw	1
  9554  001970  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9555                           
  9556                           ;ModbusRtu.c: 1017: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9557  001972  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9558  001974  E016               	bz	l5572
  9559  001976  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9560  00197A  0E01               	movlw	1
  9561  00197C  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9562  00197E  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9563  001980  2A16               	incf	??_ModbusProcess_FC15,f,c
  9564  001982  D004               	goto	u4864
  9565  001984                     u4865:
  9566  001984  FFFF               	dw	65535	; assembler added errata NOP
  9567  001986  90D8               	bcf	status,0,c
  9568  001988  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9569  00198A  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9570  00198C                     u4864:
  9571  00198C  FFFF               	dw	65535	; assembler added errata NOP
  9572  00198E  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9573  001990  D7F9               	goto	u4865
  9574  001992  5024               	movf	ModbusProcess_FC15@regs,w,c
  9575  001994  6ED9               	movwf	fsr2l,c
  9576  001996  6ADA               	clrf	fsr2h,c
  9577  001998  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9578  00199A  12DE               	iorwf	postinc2,f,c
  9579  00199C  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9580  00199E  12DD               	iorwf	postdec2,f,c
  9581  0019A0  D019               	goto	l5574
  9582  0019A2                     l5572:
  9583  0019A2  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9584  0019A6  0E01               	movlw	1
  9585  0019A8  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9586  0019AA  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9587  0019AC  2A16               	incf	??_ModbusProcess_FC15,f,c
  9588  0019AE  D004               	goto	u4874
  9589  0019B0                     u4875:
  9590  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  9591  0019B2  90D8               	bcf	status,0,c
  9592  0019B4  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9593  0019B6  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9594  0019B8                     u4874:
  9595  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  9596  0019BA  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9597  0019BC  D7F9               	goto	u4875
  9598  0019BE  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9599  0019C0  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9600  0019C2  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9601  0019C4  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9602  0019C6  5024               	movf	ModbusProcess_FC15@regs,w,c
  9603  0019C8  6ED9               	movwf	fsr2l,c
  9604  0019CA  6ADA               	clrf	fsr2h,c
  9605  0019CC  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9606  0019CE  16DE               	andwf	postinc2,f,c
  9607  0019D0  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9608  0019D2  16DD               	andwf	postdec2,f,c
  9609  0019D4                     l5574:
  9610  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  9611                           
  9612                           ;ModbusRtu.c: 1022: u8bitsno++;
  9613  0019D6  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9614                           
  9615                           ;ModbusRtu.c: 1024: if (u8bitsno > 7)
  9616  0019D8  0E07               	movlw	7
  9617  0019DA  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9618  0019DC  D002               	goto	l787
  9619                           
  9620                           ;ModbusRtu.c: 1025: {
  9621                           ;ModbusRtu.c: 1026: u8bitsno = 0;
  9622  0019DE  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9623                           
  9624                           ;ModbusRtu.c: 1027: u8frameByte++;
  9625  0019E0  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9626  0019E2                     l787:
  9627  0019E2  FFFF               	dw	65535	; assembler added errata NOP
  9628  0019E4  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9629  0019E6  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9630  0019E8                     l5582:
  9631  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  9632  0019EA  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9633  0019EC  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9634  0019EE  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9635  0019F0  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9636  0019F2  E3A2               	bnc	l5562
  9637                           
  9638                           ;ModbusRtu.c: 1028: }
  9639                           ;ModbusRtu.c: 1029: }
  9640                           ;ModbusRtu.c: 1033: _u8BufferSize = 6;
  9641  0019F4  0E06               	movlw	6
  9642  0019F6  6E72               	movwf	__u8BufferSize,c
  9643                           
  9644                           ;ModbusRtu.c: 1034: u8CopyBufferSize = _u8BufferSize + 2;
  9645  0019F8  5072               	movf	__u8BufferSize,w,c
  9646  0019FA  0F02               	addlw	2
  9647  0019FC  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9648                           
  9649                           ;ModbusRtu.c: 1035: ModbusSendTxBuffer();
  9650  0019FE  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  9651                           
  9652                           ;ModbusRtu.c: 1036: return u8CopyBufferSize;
  9653  001A02  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9654  001A04  0012               	return		;funcret
  9655  001A06  FFFF               	dw	65535	; errata NOP
  9656  001A08                     __end_of_ModbusProcess_FC15:
  9657                           	opt stack 0
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           indf1	equ	0xFE7
  9668                           postinc1	equ	0xFE6
  9669                           postdec1	equ	0xFE5
  9670                           fsr1h	equ	0xFE2
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           plusw2	equ	0xFDB
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _ModbusProcess_FC1 *****************
  9681 ;; Defined at:
  9682 ;;		line 828 in file "ModbusRtu.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;  regs            2   21[COMRAM] unsigned short 
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;  u16Coilno       2   36[COMRAM] unsigned short 
  9687 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  9688 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9689 ;;  u16coil         2   26[COMRAM] unsigned short 
  9690 ;;  u8bitsno        1   35[COMRAM] unsigned char 
  9691 ;;  u8bytesno       1   30[COMRAM] unsigned char 
  9692 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
  9693 ;;  u8currentBit    1   28[COMRAM] unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      unsigned char 
  9696 ;; Registers used:
  9697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : E/1
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9703 ;;      Params:         2       0       0       0       0       0       0
  9704 ;;      Locals:        12       0       0       0       0       0       0
  9705 ;;      Temps:          3       0       0       0       0       0       0
  9706 ;;      Totals:        17       0       0       0       0       0       0
  9707 ;;Total ram usage:       17 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    4
  9710 ;; This function calls:
  9711 ;;		_ModbusSendTxBuffer
  9712 ;; This function is called by:
  9713 ;;		_ModbusPoll
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text46
  9718  0016C8                     __ptext46:
  9719                           	opt stack 0
  9720  0016C8                     _ModbusProcess_FC1:
  9721                           	opt stack 25
  9722                           
  9723                           ;incstack = 0
  9724  0016C8  FFFF               	dw	65535
  9725                           
  9726                           ;ModbusRtu.c: 831: uint8_t u8currentBit, u8bytesno, u8bitsno;
  9727                           ;ModbusRtu.c: 832: uint8_t u8CopyBufferSize;
  9728                           ;ModbusRtu.c: 833: uint16_t u16currentCoil, u16coil;
  9729                           ;ModbusRtu.c: 836: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9730  0016CA  0101               	movlb	1	; () banked
  9731  0016CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9732  0016CE  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  9733  0016D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9734  0016D2  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
  9735  0016D4  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
  9736                           
  9737                           ; BSR set to: 1
  9738                           ;ModbusRtu.c: 837: _lastAddress = u16StartCoil;
  9739  0016D8  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
  9740  0016DC  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
  9741                           
  9742                           ;ModbusRtu.c: 838: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9743  0016E0  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9744  0016E2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  9745  0016E4  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9746  0016E6  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
  9747  0016E8  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
  9748                           
  9749                           ; BSR set to: 1
  9750                           ;ModbusRtu.c: 839: _lastCount = u16Coilno;
  9751  0016EC  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
  9752  0016F0  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
  9753                           
  9754                           ; BSR set to: 1
  9755                           ;ModbusRtu.c: 841: u8bytesno = (uint8_t) (u16Coilno / 8);
  9756  0016F4  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9757  0016F8  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
  9758  0016FC  90D8               	bcf	status,0,c
  9759  0016FE  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9760  001700  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9761  001702  90D8               	bcf	status,0,c
  9762  001704  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9763  001706  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9764  001708  90D8               	bcf	status,0,c
  9765  00170A  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9766  00170C  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9767  00170E  5018               	movf	??_ModbusProcess_FC1,w,c
  9768  001710  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
  9769                           
  9770                           ; BSR set to: 1
  9771                           ;ModbusRtu.c: 842: if (u16Coilno % 8 != 0)
  9772  001712  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9773  001716  0E07               	movlw	7
  9774  001718  1618               	andwf	??_ModbusProcess_FC1,f,c
  9775  00171A  E001               	bz	l5434
  9776                           
  9777                           ; BSR set to: 1
  9778                           ;ModbusRtu.c: 843: u8bytesno++;
  9779  00171C  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
  9780  00171E                     l5434:
  9781                           
  9782                           ; BSR set to: 1
  9783                           ;ModbusRtu.c: 844: _au8Buffer[ ADD_HI ] = u8bytesno;
  9784  00171E  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
  9785                           
  9786                           ; BSR set to: 1
  9787                           ;ModbusRtu.c: 845: _u8BufferSize = ADD_LO;
  9788  001722  0E03               	movlw	3
  9789  001724  6E72               	movwf	__u8BufferSize,c
  9790                           
  9791                           ; BSR set to: 1
  9792                           ;ModbusRtu.c: 848: u8bitsno = 0;
  9793  001726  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9794                           
  9795                           ; BSR set to: 1
  9796                           ;ModbusRtu.c: 850: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
  9797  001728  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
  9798  00172A  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
  9799  00172C  D04F               	goto	l5460
  9800  00172E                     l5442:
  9801                           
  9802                           ;ModbusRtu.c: 851: {
  9803                           ;ModbusRtu.c: 852: u16coil = u16StartCoil + u16currentCoil;
  9804  00172E  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
  9805  001730  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
  9806  001732  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
  9807  001734  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
  9808  001736  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
  9809  001738  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
  9810                           
  9811                           ;ModbusRtu.c: 854: u8currentBit = (uint8_t) u16coil;
  9812  00173A  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
  9813                           
  9814                           ;ModbusRtu.c: 856: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
  9815  00173E  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
  9816  001742  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
  9817  001746  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
  9818  00174A  2A18               	incf	??_ModbusProcess_FC1,f,c
  9819  00174C  D004               	goto	u4734
  9820  00174E                     u4735:
  9821  00174E  FFFF               	dw	65535	; assembler added errata NOP
  9822  001750  90D8               	bcf	status,0,c
  9823  001752  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
  9824  001754  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9825  001756                     u4734:
  9826  001756  FFFF               	dw	65535	; assembler added errata NOP
  9827  001758  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9828  00175A  D7F9               	goto	u4735
  9829  00175C  A019               	btfss	??_ModbusProcess_FC1+1,0,c
  9830  00175E  D015               	goto	l5450
  9831  001760  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9832  001764  0E01               	movlw	1
  9833  001766  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9834  001768  2A18               	incf	??_ModbusProcess_FC1,f,c
  9835  00176A  D003               	goto	u4754
  9836  00176C                     u4755:
  9837  00176C  FFFF               	dw	65535	; assembler added errata NOP
  9838  00176E  90D8               	bcf	status,0,c
  9839  001770  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9840  001772                     u4754:
  9841  001772  FFFF               	dw	65535	; assembler added errata NOP
  9842  001774  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9843  001776  D7FA               	goto	u4755
  9844  001778  0E00               	movlw	low __au8Buffer
  9845  00177A  2472               	addwf	__u8BufferSize,w,c
  9846  00177C  6ED9               	movwf	fsr2l,c
  9847  00177E  6ADA               	clrf	fsr2h,c
  9848  001780  0E01               	movlw	high __au8Buffer
  9849  001782  22DA               	addwfc	fsr2h,f,c
  9850  001784  5019               	movf	??_ModbusProcess_FC1+1,w,c
  9851  001786  12DF               	iorwf	indf2,f,c
  9852  001788  D017               	goto	l5452
  9853  00178A                     l5450:
  9854  00178A  FFFF               	dw	65535	; assembler added errata NOP
  9855  00178C  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9856  001790  0E01               	movlw	1
  9857  001792  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9858  001794  2A18               	incf	??_ModbusProcess_FC1,f,c
  9859  001796  D003               	goto	u4764
  9860  001798                     u4765:
  9861  001798  FFFF               	dw	65535	; assembler added errata NOP
  9862  00179A  90D8               	bcf	status,0,c
  9863  00179C  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9864  00179E                     u4764:
  9865  00179E  FFFF               	dw	65535	; assembler added errata NOP
  9866  0017A0  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9867  0017A2  D7FA               	goto	u4765
  9868  0017A4  1C19               	comf	??_ModbusProcess_FC1+1,w,c
  9869  0017A6  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
  9870  0017A8  0E00               	movlw	low __au8Buffer
  9871  0017AA  2472               	addwf	__u8BufferSize,w,c
  9872  0017AC  6ED9               	movwf	fsr2l,c
  9873  0017AE  6ADA               	clrf	fsr2h,c
  9874  0017B0  0E01               	movlw	high __au8Buffer
  9875  0017B2  22DA               	addwfc	fsr2h,f,c
  9876  0017B4  501A               	movf	??_ModbusProcess_FC1+2,w,c
  9877  0017B6  16DF               	andwf	indf2,f,c
  9878  0017B8                     l5452:
  9879  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  9880                           
  9881                           ;ModbusRtu.c: 860: u8bitsno++;
  9882  0017BA  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
  9883                           
  9884                           ;ModbusRtu.c: 862: if (u8bitsno > 7)
  9885  0017BC  0E07               	movlw	7
  9886  0017BE  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
  9887  0017C0  D002               	goto	l756
  9888                           
  9889                           ;ModbusRtu.c: 863: {
  9890                           ;ModbusRtu.c: 864: u8bitsno = 0;
  9891  0017C2  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9892                           
  9893                           ;ModbusRtu.c: 865: _u8BufferSize++;
  9894  0017C4  2A72               	incf	__u8BufferSize,f,c
  9895  0017C6                     l756:
  9896  0017C6  FFFF               	dw	65535	; assembler added errata NOP
  9897  0017C8  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
  9898  0017CA  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
  9899  0017CC                     l5460:
  9900  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  9901  0017CE  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
  9902  0017D0  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
  9903  0017D2  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
  9904  0017D4  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
  9905  0017D6  E3AB               	bnc	l5442
  9906                           
  9907                           ;ModbusRtu.c: 866: }
  9908                           ;ModbusRtu.c: 867: }
  9909                           ;ModbusRtu.c: 870: if (u16Coilno % 8 != 0)
  9910  0017D8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9911  0017DC  0E07               	movlw	7
  9912  0017DE  1618               	andwf	??_ModbusProcess_FC1,f,c
  9913  0017E0  E001               	bz	l5466
  9914                           
  9915                           ;ModbusRtu.c: 871: _u8BufferSize++;
  9916  0017E2  2A72               	incf	__u8BufferSize,f,c
  9917  0017E4                     l5466:
  9918                           
  9919                           ;ModbusRtu.c: 872: u8CopyBufferSize = _u8BufferSize + 2;
  9920  0017E4  5072               	movf	__u8BufferSize,w,c
  9921  0017E6  0F02               	addlw	2
  9922  0017E8  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
  9923                           
  9924                           ;ModbusRtu.c: 873: ModbusSendTxBuffer();
  9925  0017EA  ECAD  F013         	call	_ModbusSendTxBuffer	;wreg free
  9926                           
  9927                           ;ModbusRtu.c: 874: return u8CopyBufferSize;
  9928  0017EE  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
  9929  0017F0  0012               	return		;funcret
  9930  0017F2  FFFF               	dw	65535	; errata NOP
  9931  0017F4                     __end_of_ModbusProcess_FC1:
  9932                           	opt stack 0
  9933                           tblptru	equ	0xFF8
  9934                           tblptrh	equ	0xFF7
  9935                           tblptrl	equ	0xFF6
  9936                           tablat	equ	0xFF5
  9937                           prodh	equ	0xFF4
  9938                           prodl	equ	0xFF3
  9939                           intcon	equ	0xFF2
  9940                           postinc0	equ	0xFEE
  9941                           wreg	equ	0xFE8
  9942                           indf1	equ	0xFE7
  9943                           postinc1	equ	0xFE6
  9944                           postdec1	equ	0xFE5
  9945                           fsr1h	equ	0xFE2
  9946                           fsr1l	equ	0xFE1
  9947                           indf2	equ	0xFDF
  9948                           postinc2	equ	0xFDE
  9949                           postdec2	equ	0xFDD
  9950                           plusw2	equ	0xFDB
  9951                           fsr2h	equ	0xFDA
  9952                           fsr2l	equ	0xFD9
  9953                           status	equ	0xFD8
  9954                           
  9955 ;; *************** function _ModbusSendTxBuffer *****************
  9956 ;; Defined at:
  9957 ;;		line 549 in file "ModbusRtu.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  u16crc          2   19[COMRAM] unsigned short 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/1
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9971 ;;      Params:         0       0       0       0       0       0       0
  9972 ;;      Locals:         2       0       0       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0
  9974 ;;      Totals:         2       0       0       0       0       0       0
  9975 ;;Total ram usage:        2 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    3
  9978 ;; This function calls:
  9979 ;;		_ModbusCalcCRC
  9980 ;;		_PortWrite
  9981 ;;		_millis
  9982 ;; This function is called by:
  9983 ;;		_ModbusPoll
  9984 ;;		_ModbusProcess_FC1
  9985 ;;		_ModbusProcess_FC3
  9986 ;;		_ModbusProcess_FC5
  9987 ;;		_ModbusProcess_FC6
  9988 ;;		_ModbusProcess_FC7
  9989 ;;		_ModbusProcess_FC15
  9990 ;;		_ModbusProcess_FC16
  9991 ;;		_ModbusProcess_FC17
  9992 ;;		_ModbusProcess_FC21
  9993 ;;		_ModbusProcess_FC43
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           	psect	text47
  9998  00275A                     __ptext47:
  9999                           	opt stack 0
 10000  00275A                     _ModbusSendTxBuffer:
 10001                           	opt stack 26
 10002                           
 10003                           ;incstack = 0
 10004  00275A  FFFF               	dw	65535
 10005                           
 10006                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10007  00275C  5072               	movf	__u8BufferSize,w,c
 10008  00275E  ECD6  F011         	call	_ModbusCalcCRC
 10009  002762  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10010  002766  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10011                           
 10012                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10013  00276A  0E00               	movlw	low __au8Buffer
 10014  00276C  2472               	addwf	__u8BufferSize,w,c
 10015  00276E  6ED9               	movwf	fsr2l,c
 10016  002770  6ADA               	clrf	fsr2h,c
 10017  002772  0E01               	movlw	high __au8Buffer
 10018  002774  22DA               	addwfc	fsr2h,f,c
 10019  002776  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10020                           
 10021                           ;ModbusRtu.c: 556: _u8BufferSize++;
 10022  00277A  2A72               	incf	__u8BufferSize,f,c
 10023                           
 10024                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10025  00277C  0E00               	movlw	low __au8Buffer
 10026  00277E  2472               	addwf	__u8BufferSize,w,c
 10027  002780  6ED9               	movwf	fsr2l,c
 10028  002782  6ADA               	clrf	fsr2h,c
 10029  002784  0E01               	movlw	high __au8Buffer
 10030  002786  22DA               	addwfc	fsr2h,f,c
 10031  002788  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10032                           
 10033                           ;ModbusRtu.c: 558: _u8BufferSize++;
 10034  00278C  2A72               	incf	__u8BufferSize,f,c
 10035                           
 10036                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
 10037  00278E  0E00               	movlw	low __au8Buffer
 10038  002790  6E07               	movwf	PortWrite@buf,c
 10039  002792  0E01               	movlw	high __au8Buffer
 10040  002794  6E08               	movwf	PortWrite@buf+1,c
 10041  002796  C072  F009         	movff	__u8BufferSize,PortWrite@buflen
 10042  00279A  EC80  F014         	call	_PortWrite	;wreg free
 10043                           
 10044                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
 10045  00279E  6A72               	clrf	__u8BufferSize,c
 10046                           
 10047                           ;ModbusRtu.c: 574: _u16OutCnt++;
 10048  0027A0  EF18  F015         	goto	_millis	;wreg free
 10049  0027A4  FFFF               	dw	65535	; errata NOP
 10050  0027A6                     __end_of_ModbusSendTxBuffer:
 10051                           	opt stack 0
 10052                           tblptru	equ	0xFF8
 10053                           tblptrh	equ	0xFF7
 10054                           tblptrl	equ	0xFF6
 10055                           tablat	equ	0xFF5
 10056                           prodh	equ	0xFF4
 10057                           prodl	equ	0xFF3
 10058                           intcon	equ	0xFF2
 10059                           postinc0	equ	0xFEE
 10060                           wreg	equ	0xFE8
 10061                           indf1	equ	0xFE7
 10062                           postinc1	equ	0xFE6
 10063                           postdec1	equ	0xFE5
 10064                           fsr1h	equ	0xFE2
 10065                           fsr1l	equ	0xFE1
 10066                           indf2	equ	0xFDF
 10067                           postinc2	equ	0xFDE
 10068                           postdec2	equ	0xFDD
 10069                           plusw2	equ	0xFDB
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _millis *****************
 10075 ;; Defined at:
 10076 ;;		line 236 in file "interrupts.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;		None
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  ret             4   10[COMRAM] unsigned long 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  4    6[COMRAM] unsigned long 
 10083 ;; Registers used:
 10084 ;;		None
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/1
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10090 ;;      Params:         4       0       0       0       0       0       0
 10091 ;;      Locals:         4       0       0       0       0       0       0
 10092 ;;      Temps:          0       0       0       0       0       0       0
 10093 ;;      Totals:         8       0       0       0       0       0       0
 10094 ;;Total ram usage:        8 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    2
 10097 ;; This function calls:
 10098 ;;		Nothing
 10099 ;; This function is called by:
 10100 ;;		_SoundPlayNextStep
 10101 ;;		_main
 10102 ;;		_ModbusPoll
 10103 ;;		_ModbusSendTxBuffer
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text48
 10108  002A30                     __ptext48:
 10109                           	opt stack 0
 10110  002A30                     _millis:
 10111                           	opt stack 28
 10112                           
 10113                           ;incstack = 0
 10114  002A30  FFFF               	dw	65535
 10115                           
 10116                           ;interrupts.c: 239: (INTCONbits.GIE = 0);
 10117  002A32  9EF2               	bcf	intcon,7,c	;volatile
 10118                           
 10119                           ;interrupts.c: 240: unsigned long ret = millisecondsFromStart;
 10120  002A34  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 10121  002A38  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 10122  002A3C  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 10123  002A40  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 10124                           
 10125                           ;interrupts.c: 241: (INTCONbits.GIE = 1);
 10126  002A44  8EF2               	bsf	intcon,7,c	;volatile
 10127                           
 10128                           ;interrupts.c: 242: return ret;
 10129  002A46  C00B  F007         	movff	millis@ret,?_millis
 10130  002A4A  C00C  F008         	movff	millis@ret+1,?_millis+1
 10131  002A4E  C00D  F009         	movff	millis@ret+2,?_millis+2
 10132  002A52  C00E  F00A         	movff	millis@ret+3,?_millis+3
 10133  002A56  0012               	return		;funcret
 10134  002A58  FFFF               	dw	65535	; errata NOP
 10135  002A5A                     __end_of_millis:
 10136                           	opt stack 0
 10137                           tblptru	equ	0xFF8
 10138                           tblptrh	equ	0xFF7
 10139                           tblptrl	equ	0xFF6
 10140                           tablat	equ	0xFF5
 10141                           prodh	equ	0xFF4
 10142                           prodl	equ	0xFF3
 10143                           intcon	equ	0xFF2
 10144                           postinc0	equ	0xFEE
 10145                           wreg	equ	0xFE8
 10146                           indf1	equ	0xFE7
 10147                           postinc1	equ	0xFE6
 10148                           postdec1	equ	0xFE5
 10149                           fsr1h	equ	0xFE2
 10150                           fsr1l	equ	0xFE1
 10151                           indf2	equ	0xFDF
 10152                           postinc2	equ	0xFDE
 10153                           postdec2	equ	0xFDD
 10154                           plusw2	equ	0xFDB
 10155                           fsr2h	equ	0xFDA
 10156                           fsr2l	equ	0xFD9
 10157                           status	equ	0xFD8
 10158                           
 10159 ;; *************** function _PortWrite *****************
 10160 ;; Defined at:
 10161 ;;		line 93 in file "interrupts.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  buf             2    6[COMRAM] PTR unsigned char 
 10164 ;;		 -> _au8Buffer(140), 
 10165 ;;  buflen          1    8[COMRAM] unsigned char 
 10166 ;; Auto vars:     Size  Location     Type
 10167 ;;  i               1    9[COMRAM] unsigned char 
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      void 
 10170 ;; Registers used:
 10171 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/1
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10177 ;;      Params:         3       0       0       0       0       0       0
 10178 ;;      Locals:         1       0       0       0       0       0       0
 10179 ;;      Temps:          0       0       0       0       0       0       0
 10180 ;;      Totals:         4       0       0       0       0       0       0
 10181 ;;Total ram usage:        4 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    2
 10184 ;; This function calls:
 10185 ;;		Nothing
 10186 ;; This function is called by:
 10187 ;;		_ModbusSendTxBuffer
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           	psect	text49
 10192  002900                     __ptext49:
 10193                           	opt stack 0
 10194  002900                     _PortWrite:
 10195                           	opt stack 26
 10196                           
 10197                           ;incstack = 0
 10198  002900  FFFF               	dw	65535
 10199                           
 10200                           ;interrupts.c: 95: LATCbits.LATC5 = 1;
 10201  002902  8A8B               	bsf	3979,5,c	;volatile
 10202                           
 10203                           ;interrupts.c: 96: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 10204  002904  0E06               	movlw	6
 10205  002906                     u5307:
 10206  002906  FFFF               	dw	65535	; errata NOP
 10207  002908  2EE8               	decfsz	wreg,f,c
 10208  00290A  D7FD               	goto	u5307
 10209  00290C  F000               	nop	
 10210                           
 10211                           ;interrupts.c: 97: for(uint8_t i = 0; i < buflen; i++)
 10212  00290E  6A0A               	clrf	PortWrite@i,c
 10213  002910  D00C               	goto	l3324
 10214  002912                     l67:
 10215  002912  FFFF               	dw	65535	; assembler added errata NOP
 10216  002914  A2AC               	btfss	4012,1,c	;volatile
 10217  002916  D7FD               	goto	l67
 10218                           
 10219                           ;interrupts.c: 100: TXREG = buf[i];
 10220  002918  500A               	movf	PortWrite@i,w,c
 10221  00291A  2407               	addwf	PortWrite@buf,w,c
 10222  00291C  6ED9               	movwf	fsr2l,c
 10223  00291E  0E00               	movlw	0
 10224  002920  2008               	addwfc	PortWrite@buf+1,w,c
 10225  002922  6EDA               	movwf	fsr2h,c
 10226  002924  50DF               	movf	indf2,w,c
 10227  002926  6EAD               	movwf	4013,c	;volatile
 10228  002928  2A0A               	incf	PortWrite@i,f,c
 10229  00292A                     l3324:
 10230  00292A  FFFF               	dw	65535	; assembler added errata NOP
 10231  00292C  5009               	movf	PortWrite@buflen,w,c
 10232  00292E  5C0A               	subwf	PortWrite@i,w,c
 10233  002930  E3F0               	bnc	l67
 10234  002932                     l71:
 10235  002932  FFFF               	dw	65535	; assembler added errata NOP
 10236  002934  A2AC               	btfss	4012,1,c	;volatile
 10237  002936  D7FD               	goto	l71
 10238                           
 10239                           ;interrupts.c: 103: LATCbits.LATC5 = 0;
 10240  002938  9A8B               	bcf	3979,5,c	;volatile
 10241  00293A  0012               	return		;funcret
 10242  00293C  FFFF               	dw	65535	; errata NOP
 10243  00293E                     __end_of_PortWrite:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           postinc0	equ	0xFEE
 10253                           wreg	equ	0xFE8
 10254                           indf1	equ	0xFE7
 10255                           postinc1	equ	0xFE6
 10256                           postdec1	equ	0xFE5
 10257                           fsr1h	equ	0xFE2
 10258                           fsr1l	equ	0xFE1
 10259                           indf2	equ	0xFDF
 10260                           postinc2	equ	0xFDE
 10261                           postdec2	equ	0xFDD
 10262                           plusw2	equ	0xFDB
 10263                           fsr2h	equ	0xFDA
 10264                           fsr2l	equ	0xFD9
 10265                           status	equ	0xFD8
 10266                           
 10267 ;; *************** function _ModbusCalcCRC *****************
 10268 ;; Defined at:
 10269 ;;		line 659 in file "ModbusRtu.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;  u8length        1    wreg     unsigned char 
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  u8length        1   14[COMRAM] unsigned char 
 10274 ;;  j               1   16[COMRAM] unsigned char 
 10275 ;;  i               1   15[COMRAM] unsigned char 
 10276 ;;  temp            2   17[COMRAM] unsigned int 
 10277 ;;  flag            2   12[COMRAM] unsigned int 
 10278 ;;  temp2           2   10[COMRAM] unsigned int 
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  2    6[COMRAM] unsigned short 
 10281 ;; Registers used:
 10282 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/1
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10288 ;;      Params:         2       0       0       0       0       0       0
 10289 ;;      Locals:         9       0       0       0       0       0       0
 10290 ;;      Temps:          2       0       0       0       0       0       0
 10291 ;;      Totals:        13       0       0       0       0       0       0
 10292 ;;Total ram usage:       13 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    2
 10295 ;; This function calls:
 10296 ;;		Nothing
 10297 ;; This function is called by:
 10298 ;;		_ModbusSendTxBuffer
 10299 ;;		_ModbusValidateRequest
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           	psect	text50
 10304  0023AC                     __ptext50:
 10305                           	opt stack 0
 10306  0023AC                     _ModbusCalcCRC:
 10307                           	opt stack 26
 10308                           
 10309                           ;incstack = 0
 10310  0023AC  FFFF               	dw	65535
 10311                           
 10312                           ;ModbusCalcCRC@u8length stored from wreg
 10313  0023AE  6E0F               	movwf	ModbusCalcCRC@u8length,c
 10314                           
 10315                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
 10316                           ;ModbusRtu.c: 662: temp = 0xFFFF;
 10317  0023B0  6812               	setf	ModbusCalcCRC@temp,c
 10318  0023B2  6813               	setf	ModbusCalcCRC@temp+1,c
 10319                           
 10320                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
 10321  0023B4  6A10               	clrf	ModbusCalcCRC@i,c
 10322  0023B6  D01E               	goto	l3508
 10323  0023B8                     l3486:
 10324                           
 10325                           ;ModbusRtu.c: 664: {
 10326                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
 10327  0023B8  0E00               	movlw	low __au8Buffer
 10328  0023BA  2410               	addwf	ModbusCalcCRC@i,w,c
 10329  0023BC  6ED9               	movwf	fsr2l,c
 10330  0023BE  6ADA               	clrf	fsr2h,c
 10331  0023C0  0E01               	movlw	high __au8Buffer
 10332  0023C2  22DA               	addwfc	fsr2h,f,c
 10333  0023C4  50DF               	movf	indf2,w,c
 10334  0023C6  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10335                           
 10336                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
 10337  0023C8  0E01               	movlw	1
 10338  0023CA  6E11               	movwf	ModbusCalcCRC@j,c
 10339  0023CC                     l3494:
 10340  0023CC  FFFF               	dw	65535	; assembler added errata NOP
 10341                           
 10342                           ;ModbusRtu.c: 667: {
 10343                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
 10344  0023CE  0E01               	movlw	1
 10345  0023D0  1412               	andwf	ModbusCalcCRC@temp,w,c
 10346  0023D2  6E0D               	movwf	ModbusCalcCRC@flag,c
 10347  0023D4  6A0E               	clrf	ModbusCalcCRC@flag+1,c
 10348                           
 10349                           ;ModbusRtu.c: 669: temp >>= 1;
 10350  0023D6  90D8               	bcf	status,0,c
 10351  0023D8  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 10352  0023DA  3212               	rrcf	ModbusCalcCRC@temp,f,c
 10353                           
 10354                           ;ModbusRtu.c: 670: if (flag)
 10355  0023DC  500D               	movf	ModbusCalcCRC@flag,w,c
 10356  0023DE  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
 10357  0023E0  E004               	bz	l3502
 10358                           
 10359                           ;ModbusRtu.c: 671: temp ^= 0xA001;
 10360  0023E2  0E01               	movlw	1
 10361  0023E4  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10362  0023E6  0EA0               	movlw	160
 10363  0023E8  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 10364  0023EA                     l3502:
 10365  0023EA  2A11               	incf	ModbusCalcCRC@j,f,c
 10366  0023EC  0E08               	movlw	8
 10367  0023EE  6411               	cpfsgt	ModbusCalcCRC@j,c
 10368  0023F0  D7ED               	goto	l3494
 10369  0023F2  2A10               	incf	ModbusCalcCRC@i,f,c
 10370  0023F4                     l3508:
 10371  0023F4  FFFF               	dw	65535	; assembler added errata NOP
 10372  0023F6  500F               	movf	ModbusCalcCRC@u8length,w,c
 10373  0023F8  5C10               	subwf	ModbusCalcCRC@i,w,c
 10374  0023FA  E3DE               	bnc	l3486
 10375                           
 10376                           ;ModbusRtu.c: 672: }
 10377                           ;ModbusRtu.c: 673: }
 10378                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
 10379  0023FC  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 10380  002400  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
 10381                           
 10382                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
 10383  002402  5012               	movf	ModbusCalcCRC@temp,w,c
 10384  002404  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 10385  002406  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 10386  002408  500B               	movf	ModbusCalcCRC@temp2,w,c
 10387  00240A  1009               	iorwf	??_ModbusCalcCRC,w,c
 10388  00240C  6E12               	movwf	ModbusCalcCRC@temp,c
 10389  00240E  500C               	movf	ModbusCalcCRC@temp2+1,w,c
 10390  002410  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 10391  002412  6E13               	movwf	ModbusCalcCRC@temp+1,c
 10392                           
 10393                           ;ModbusRtu.c: 680: return temp;
 10394  002414  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 10395  002418  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 10396  00241C  0012               	return		;funcret
 10397  00241E  FFFF               	dw	65535	; errata NOP
 10398  002420                     __end_of_ModbusCalcCRC:
 10399                           	opt stack 0
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           postinc0	equ	0xFEE
 10408                           wreg	equ	0xFE8
 10409                           indf1	equ	0xFE7
 10410                           postinc1	equ	0xFE6
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           plusw2	equ	0xFDB
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function _ModbusGetRxBuffer *****************
 10423 ;; Defined at:
 10424 ;;		line 509 in file "ModbusRtu.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      unsigned char 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : F/0
 10435 ;;		On exit  : F/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10438 ;;      Params:         0       0       0       0       0       0       0
 10439 ;;      Locals:         1       0       0       0       0       0       0
 10440 ;;      Temps:          1       0       0       0       0       0       0
 10441 ;;      Totals:         2       0       0       0       0       0       0
 10442 ;;Total ram usage:        2 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    3
 10445 ;; This function calls:
 10446 ;;		_PortAvailable
 10447 ;;		_PortRead
 10448 ;; This function is called by:
 10449 ;;		_ModbusPoll
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text51
 10454  00287A                     __ptext51:
 10455                           	opt stack 0
 10456  00287A                     _ModbusGetRxBuffer:
 10457                           	opt stack 26
 10458                           
 10459                           ;incstack = 0
 10460  00287A  FFFF               	dw	65535
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
 10464  00287C  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 10465                           
 10466                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
 10467  00287E  6A72               	clrf	__u8BufferSize,c
 10468                           
 10469                           ;ModbusRtu.c: 518: while (PortAvailable())
 10470  002880  D011               	goto	l3824
 10471  002882                     l3816:
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;ModbusRtu.c: 519: {
 10475                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
 10476  002882  EC9F  F014         	call	_PortRead	;wreg free
 10477  002886  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 10478  002888  0E00               	movlw	low __au8Buffer
 10479  00288A  2472               	addwf	__u8BufferSize,w,c
 10480  00288C  6ED9               	movwf	fsr2l,c
 10481  00288E  6ADA               	clrf	fsr2h,c
 10482  002890  0E01               	movlw	high __au8Buffer
 10483  002892  22DA               	addwfc	fsr2h,f,c
 10484  002894  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;ModbusRtu.c: 522: _u8BufferSize++;
 10488  002898  2A72               	incf	__u8BufferSize,f,c
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
 10492  00289A  0E8B               	movlw	139
 10493  00289C  6472               	cpfsgt	__u8BufferSize,c
 10494  00289E  D002               	goto	l3824
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
 10498  0028A0  0E01               	movlw	1
 10499  0028A2  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 10500  0028A4                     l3824:
 10501  0028A4  FFFF               	dw	65535	; assembler added errata NOP
 10502                           
 10503                           ; BSR set to: 0
 10504  0028A6  ECC4  F015         	call	_PortAvailable	;wreg free
 10505  0028AA  0900               	iorlw	0
 10506  0028AC  E1EA               	bnz	l3816
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;ModbusRtu.c: 530: {
 10510                           ;ModbusRtu.c: 531: _u16errCnt++;
 10511  0028AE  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 10512  0028B0  E002               	bz	l3832
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
 10516  0028B2  0EFD               	movlw	253
 10517  0028B4  D001               	goto	l688
 10518  0028B6                     l3832:
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;ModbusRtu.c: 533: }
 10522                           ;ModbusRtu.c: 534: return _u8BufferSize;
 10523  0028B6  5072               	movf	__u8BufferSize,w,c
 10524  0028B8                     l688:
 10525  0028B8  FFFF               	dw	65535	; assembler added errata NOP
 10526                           
 10527                           ; BSR set to: 0
 10528  0028BA  0012               	return		;funcret
 10529  0028BC  FFFF               	dw	65535	; errata NOP
 10530  0028BE                     __end_of_ModbusGetRxBuffer:
 10531                           	opt stack 0
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           postinc0	equ	0xFEE
 10540                           wreg	equ	0xFE8
 10541                           indf1	equ	0xFE7
 10542                           postinc1	equ	0xFE6
 10543                           postdec1	equ	0xFE5
 10544                           fsr1h	equ	0xFE2
 10545                           fsr1l	equ	0xFE1
 10546                           indf2	equ	0xFDF
 10547                           postinc2	equ	0xFDE
 10548                           postdec2	equ	0xFDD
 10549                           plusw2	equ	0xFDB
 10550                           fsr2h	equ	0xFDA
 10551                           fsr2l	equ	0xFD9
 10552                           status	equ	0xFD8
 10553                           
 10554 ;; *************** function _PortRead *****************
 10555 ;; Defined at:
 10556 ;;		line 57 in file "interrupts.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  ret             1    6[COMRAM] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      unsigned char 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10565 ;; Tracked objects:
 10566 ;;		On entry : F/0
 10567 ;;		On exit  : F/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10570 ;;      Params:         0       0       0       0       0       0       0
 10571 ;;      Locals:         1       0       0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0
 10573 ;;      Totals:         1       0       0       0       0       0       0
 10574 ;;Total ram usage:        1 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    2
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_ModbusGetRxBuffer
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text52
 10585  00293E                     __ptext52:
 10586                           	opt stack 0
 10587  00293E                     _PortRead:
 10588                           	opt stack 26
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;incstack = 0
 10592  00293E  FFFF               	dw	65535
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 10596  002940  9EF2               	bcf	intcon,7,c	;volatile
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;interrupts.c: 60: if(UartBufferLen > 0)
 10600  002942  51C9               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10601  002944  E012               	bz	l59
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;interrupts.c: 61: {
 10605                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 10606  002946  0E00               	movlw	low _UartRingBuffer
 10607  002948  246F               	addwf	_UartBufferTail,w,c	;volatile
 10608  00294A  6ED9               	movwf	fsr2l,c
 10609  00294C  6ADA               	clrf	fsr2h,c
 10610  00294E  0E02               	movlw	high _UartRingBuffer
 10611  002950  22DA               	addwfc	fsr2h,f,c
 10612  002952  50DF               	movf	indf2,w,c
 10613  002954  6E07               	movwf	PortRead@ret,c
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;interrupts.c: 64: UartBufferLen--;
 10617  002956  07C9               	decf	_UartBufferLen& (0+255),f,b	;volatile
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 10621  002958  286F               	incf	_UartBufferTail,w,c
 10622  00295A  E102               	bnz	l3532
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;interrupts.c: 66: UartBufferTail = 0;
 10626  00295C  6A6F               	clrf	_UartBufferTail,c	;volatile
 10627  00295E  D001               	goto	l3534
 10628  002960                     l3532:
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;interrupts.c: 67: else
 10632                           ;interrupts.c: 68: UartBufferTail++;
 10633  002960  2A6F               	incf	_UartBufferTail,f,c	;volatile
 10634  002962                     l3534:
 10635  002962  FFFF               	dw	65535	; assembler added errata NOP
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 10639  002964  8EF2               	bsf	intcon,7,c	;volatile
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;interrupts.c: 70: return ret;
 10643  002966  5007               	movf	PortRead@ret,w,c
 10644  002968  D002               	goto	l62
 10645  00296A                     l59:
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;interrupts.c: 71: }
 10649                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 10650  00296A  8EF2               	bsf	intcon,7,c	;volatile
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;interrupts.c: 73: return 0;
 10654  00296C  0E00               	movlw	0
 10655  00296E                     l62:
 10656  00296E  FFFF               	dw	65535	; assembler added errata NOP
 10657                           
 10658                           ; BSR set to: 0
 10659  002970  0012               	return		;funcret
 10660  002972  FFFF               	dw	65535	; errata NOP
 10661  002974                     __end_of_PortRead:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           postinc0	equ	0xFEE
 10671                           wreg	equ	0xFE8
 10672                           indf1	equ	0xFE7
 10673                           postinc1	equ	0xFE6
 10674                           postdec1	equ	0xFE5
 10675                           fsr1h	equ	0xFE2
 10676                           fsr1l	equ	0xFE1
 10677                           indf2	equ	0xFDF
 10678                           postinc2	equ	0xFDE
 10679                           postdec2	equ	0xFDD
 10680                           plusw2	equ	0xFDB
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function _PortAvailable *****************
 10686 ;; Defined at:
 10687 ;;		line 52 in file "interrupts.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;		None
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      unsigned char 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2
 10696 ;; Tracked objects:
 10697 ;;		On entry : F/0
 10698 ;;		On exit  : F/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10701 ;;      Params:         0       0       0       0       0       0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    2
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_ModbusPoll
 10712 ;;		_ModbusGetRxBuffer
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           	psect	text53
 10717  002B88                     __ptext53:
 10718                           	opt stack 0
 10719  002B88                     _PortAvailable:
 10720                           	opt stack 27
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;incstack = 0
 10724  002B88  FFFF               	dw	65535
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;interrupts.c: 54: return UartBufferLen;
 10728  002B8A  51C9               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10729                           
 10730                           ; BSR set to: 0
 10731  002B8C  0012               	return		;funcret
 10732  002B8E  FFFF               	dw	65535	; errata NOP
 10733  002B90                     __end_of_PortAvailable:
 10734                           	opt stack 0
 10735                           tblptru	equ	0xFF8
 10736                           tblptrh	equ	0xFF7
 10737                           tblptrl	equ	0xFF6
 10738                           tablat	equ	0xFF5
 10739                           prodh	equ	0xFF4
 10740                           prodl	equ	0xFF3
 10741                           intcon	equ	0xFF2
 10742                           postinc0	equ	0xFEE
 10743                           wreg	equ	0xFE8
 10744                           indf1	equ	0xFE7
 10745                           postinc1	equ	0xFE6
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           plusw2	equ	0xFDB
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _ModbusBuildException *****************
 10758 ;; Defined at:
 10759 ;;		line 800 in file "ModbusRtu.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  u8exception     1    wreg     unsigned char 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  u8exception     1    6[COMRAM] unsigned char 
 10764 ;;  u8func          1    7[COMRAM] unsigned char 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		wreg, status,2, status,0
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/1
 10771 ;;		On exit  : F/1
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10774 ;;      Params:         0       0       0       0       0       0       0
 10775 ;;      Locals:         2       0       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0
 10777 ;;      Totals:         2       0       0       0       0       0       0
 10778 ;;Total ram usage:        2 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    2
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_ModbusPoll
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text54
 10789  002A80                     __ptext54:
 10790                           	opt stack 0
 10791  002A80                     _ModbusBuildException:
 10792                           	opt stack 27
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;incstack = 0
 10796  002A80  FFFF               	dw	65535
 10797                           
 10798                           ;ModbusBuildException@u8exception stored from wreg
 10799  002A82  6E07               	movwf	ModbusBuildException@u8exception,c
 10800                           
 10801                           ;ModbusRtu.c: 802: uint8_t u8func = _au8Buffer[ FUNC ];
 10802  002A84  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 10803                           
 10804                           ;ModbusRtu.c: 804: _au8Buffer[ ID ] = _u8id;
 10805  002A88  C0D2  F100         	movff	__u8id,__au8Buffer
 10806                           
 10807                           ;ModbusRtu.c: 805: _au8Buffer[ FUNC ] = u8func + 0x80;
 10808  002A8C  5008               	movf	ModbusBuildException@u8func,w,c
 10809  002A8E  0F80               	addlw	128
 10810  002A90  0101               	movlb	1	; () banked
 10811  002A92  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 10812                           
 10813                           ; BSR set to: 1
 10814                           ;ModbusRtu.c: 806: _au8Buffer[ 2 ] = u8exception;
 10815  002A94  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 10816                           
 10817                           ; BSR set to: 1
 10818                           ;ModbusRtu.c: 807: _u8BufferSize = EXCEPTION_SIZE;
 10819  002A98  0E03               	movlw	3
 10820  002A9A  6E72               	movwf	__u8BufferSize,c
 10821                           
 10822                           ; BSR set to: 1
 10823  002A9C  0C03               	retlw	3	;funcret
 10824  002A9E  FFFF               	dw	65535	; errata NOP
 10825  002AA0                     __end_of_ModbusBuildException:
 10826                           	opt stack 0
 10827                           tblptru	equ	0xFF8
 10828                           tblptrh	equ	0xFF7
 10829                           tblptrl	equ	0xFF6
 10830                           tablat	equ	0xFF5
 10831                           prodh	equ	0xFF4
 10832                           prodl	equ	0xFF3
 10833                           intcon	equ	0xFF2
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           indf1	equ	0xFE7
 10837                           postinc1	equ	0xFE6
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _InitApp *****************
 10850 ;; Defined at:
 10851 ;;		line 66 in file "user.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;  i               1    6[COMRAM] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      void 
 10858 ;; Registers used:
 10859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10865 ;;      Params:         0       0       0       0       0       0       0
 10866 ;;      Locals:         1       0       0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0
 10868 ;;      Totals:         1       0       0       0       0       0       0
 10869 ;;Total ram usage:        1 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    3
 10872 ;; This function calls:
 10873 ;;		_InitUartBuffer
 10874 ;;		_PortBegin
 10875 ;; This function is called by:
 10876 ;;		_main
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text55
 10881  002326                     __ptext55:
 10882                           	opt stack 0
 10883  002326                     _InitApp:
 10884                           	opt stack 27
 10885                           
 10886                           ; BSR set to: 1
 10887                           ;incstack = 0
 10888  002326  FFFF               	dw	65535
 10889                           
 10890                           ;user.c: 77: INTCONbits.PEIE = 1;
 10891  002328  8CF2               	bsf	intcon,6,c	;volatile
 10892                           
 10893                           ;user.c: 78: (INTCONbits.GIE = 1);
 10894  00232A  8EF2               	bsf	intcon,7,c	;volatile
 10895                           
 10896                           ;user.c: 79: RCONbits.IPEN = 1;
 10897  00232C  8ED0               	bsf	4048,7,c	;volatile
 10898                           
 10899                           ;user.c: 84: T1CONbits.RD16 = 1;
 10900  00232E  8ECD               	bsf	4045,7,c	;volatile
 10901                           
 10902                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 10903  002330  94CD               	bcf	4045,2,c	;volatile
 10904                           
 10905                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 10906  002332  92CD               	bcf	4045,1,c	;volatile
 10907                           
 10908                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 10909  002334  0ECF               	movlw	-49
 10910  002336  16CD               	andwf	4045,f,c	;volatile
 10911                           
 10912                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 10913  002338  809D               	bsf	3997,0,c	;volatile
 10914                           
 10915                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 10916  00233A  809F               	bsf	3999,0,c	;volatile
 10917                           
 10918                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 10919  00233C  0EF6               	movlw	246
 10920  00233E  6ECF               	movwf	4047,c	;volatile
 10921  002340  0E3C               	movlw	60
 10922  002342  6ECE               	movwf	4046,c	;volatile
 10923                           
 10924                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 10925  002344  909E               	bcf	3998,0,c	;volatile
 10926                           
 10927                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 10928  002346  80CD               	bsf	4045,0,c	;volatile
 10929                           
 10930                           ;user.c: 102: T0CONbits.T08BIT = 0;
 10931  002348  9CD5               	bcf	4053,6,c	;volatile
 10932                           
 10933                           ;user.c: 103: T0CONbits.T0CS = 0;
 10934  00234A  9AD5               	bcf	4053,5,c	;volatile
 10935                           
 10936                           ;user.c: 105: T0CONbits.PSA = 0;
 10937  00234C  96D5               	bcf	4053,3,c	;volatile
 10938                           
 10939                           ;user.c: 116: T0CONbits.T0PS = 7;
 10940  00234E  0E07               	movlw	7
 10941  002350  12D5               	iorwf	4053,f,c	;volatile
 10942                           
 10943                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 10944  002352  8AF2               	bsf	intcon,5,c	;volatile
 10945                           
 10946                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 10947  002354  84F1               	bsf	intcon2,2,c	;volatile
 10948                           
 10949                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10950  002356  0E1B               	movlw	27
 10951  002358  6ED7               	movwf	4055,c	;volatile
 10952  00235A  0E1F               	movlw	31
 10953  00235C  6ED6               	movwf	4054,c	;volatile
 10954                           
 10955                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 10956  00235E  94F2               	bcf	intcon,2,c	;volatile
 10957                           
 10958                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 10959  002360  8ED5               	bsf	4053,7,c	;volatile
 10960                           
 10961                           ;user.c: 132: InitUartBuffer();
 10962  002362  ECB9  F015         	call	_InitUartBuffer	;wreg free
 10963                           
 10964                           ;user.c: 134: PortBegin();
 10965  002366  EC7B  F015         	call	_PortBegin	;wreg free
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;user.c: 135: PIE1bits.RCIE = 1;
 10969  00236A  8A9D               	bsf	3997,5,c	;volatile
 10970                           
 10971                           ; BSR set to: 0
 10972                           ;user.c: 137: IPR1bits.RCIP = 0;
 10973  00236C  9A9F               	bcf	3999,5,c	;volatile
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 10977  00236E  6A07               	clrf	InitApp@i,c
 10978  002370                     l4596:
 10979  002370  FFFF               	dw	65535	; assembler added errata NOP
 10980                           
 10981                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 10982  002372  5007               	movf	InitApp@i,w,c
 10983  002374  0D02               	mullw	2
 10984  002376  0EAA               	movlw	low __MODBUSInputRegs
 10985  002378  24F3               	addwf	prodl,w,c
 10986  00237A  6ED9               	movwf	fsr2l,c
 10987  00237C  0E01               	movlw	high __MODBUSInputRegs
 10988  00237E  20F4               	addwfc	prodh,w,c
 10989  002380  6EDA               	movwf	fsr2h,c
 10990  002382  6ADE               	clrf	postinc2,c
 10991  002384  6ADD               	clrf	postdec2,c
 10992  002386  2A07               	incf	InitApp@i,f,c
 10993  002388  0E0E               	movlw	14
 10994  00238A  6407               	cpfsgt	InitApp@i,c
 10995  00238C  D7F1               	goto	l4596
 10996                           
 10997                           ;user.c: 148: TRISB = 0;
 10998  00238E  6A93               	clrf	3987,c	;volatile
 10999                           
 11000                           ;user.c: 151: LATAbits.LATA0 = 0;
 11001  002390  9089               	bcf	3977,0,c	;volatile
 11002                           
 11003                           ;user.c: 152: LATAbits.LATA1 = 0;
 11004  002392  9289               	bcf	3977,1,c	;volatile
 11005                           
 11006                           ;user.c: 153: LATAbits.LATA2 = 0;
 11007  002394  9489               	bcf	3977,2,c	;volatile
 11008                           
 11009                           ;user.c: 154: LATAbits.LATA3 = 0;
 11010  002396  9689               	bcf	3977,3,c	;volatile
 11011                           
 11012                           ;user.c: 155: TRISAbits.RA0 = 0;
 11013  002398  9092               	bcf	3986,0,c	;volatile
 11014                           
 11015                           ;user.c: 156: TRISAbits.RA1 = 0;
 11016  00239A  9292               	bcf	3986,1,c	;volatile
 11017                           
 11018                           ;user.c: 157: TRISAbits.RA2 = 0;
 11019  00239C  9492               	bcf	3986,2,c	;volatile
 11020                           
 11021                           ;user.c: 158: TRISAbits.RA3 = 0;
 11022  00239E  9692               	bcf	3986,3,c	;volatile
 11023                           
 11024                           ;user.c: 160: TRISCbits.RC3 = 1;
 11025  0023A0  8694               	bsf	3988,3,c	;volatile
 11026                           
 11027                           ;user.c: 161: TRISCbits.RC1 = 1;
 11028  0023A2  8294               	bsf	3988,1,c	;volatile
 11029                           
 11030                           ;user.c: 162: TRISCbits.RC0 = 0;
 11031  0023A4  9094               	bcf	3988,0,c	;volatile
 11032                           
 11033                           ;user.c: 164: LATCbits.LATC2 = 0;
 11034  0023A6  948B               	bcf	3979,2,c	;volatile
 11035  0023A8  0012               	return		;funcret
 11036  0023AA  FFFF               	dw	65535	; errata NOP
 11037  0023AC                     __end_of_InitApp:
 11038                           	opt stack 0
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           intcon	equ	0xFF2
 11046                           intcon2	equ	0xFF1
 11047                           postinc0	equ	0xFEE
 11048                           wreg	equ	0xFE8
 11049                           indf1	equ	0xFE7
 11050                           postinc1	equ	0xFE6
 11051                           postdec1	equ	0xFE5
 11052                           fsr1h	equ	0xFE2
 11053                           fsr1l	equ	0xFE1
 11054                           indf2	equ	0xFDF
 11055                           postinc2	equ	0xFDE
 11056                           postdec2	equ	0xFDD
 11057                           plusw2	equ	0xFDB
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _PortBegin *****************
 11063 ;; Defined at:
 11064 ;;		line 48 in file "user.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;		None
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;		None
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      void 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2
 11073 ;; Tracked objects:
 11074 ;;		On entry : F/0
 11075 ;;		On exit  : F/0
 11076 ;;		Unchanged: F/0
 11077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11078 ;;      Params:         0       0       0       0       0       0       0
 11079 ;;      Locals:         0       0       0       0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0
 11081 ;;      Totals:         0       0       0       0       0       0       0
 11082 ;;Total ram usage:        0 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    2
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_InitApp
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           	psect	text56
 11093  002AF6                     __ptext56:
 11094                           	opt stack 0
 11095  002AF6                     _PortBegin:
 11096                           	opt stack 27
 11097                           
 11098                           ;incstack = 0
 11099  002AF6  FFFF               	dw	65535
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;user.c: 50: TXSTA = 0;
 11103  002AF8  6AAC               	clrf	4012,c	;volatile
 11104                           
 11105                           ;user.c: 51: TXSTAbits.TXEN = 1;
 11106  002AFA  8AAC               	bsf	4012,5,c	;volatile
 11107                           
 11108                           ;user.c: 52: TXSTAbits.BRGH = 1;
 11109  002AFC  84AC               	bsf	4012,2,c	;volatile
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 11113  002AFE  0E40               	movlw	64
 11114  002B00  6EAF               	movwf	4015,c	;volatile
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;user.c: 55: RCSTA = 0;
 11118  002B02  6AAB               	clrf	4011,c	;volatile
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;user.c: 56: RCSTAbits.SPEN = 1;
 11122  002B04  8EAB               	bsf	4011,7,c	;volatile
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;user.c: 57: RCSTAbits.CREN = 1;
 11126  002B06  88AB               	bsf	4011,4,c	;volatile
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;user.c: 59: TRISCbits.RC5 = 0;
 11130  002B08  9A94               	bcf	3988,5,c	;volatile
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;user.c: 60: LATCbits.LATC5 = 0;
 11134  002B0A  9A8B               	bcf	3979,5,c	;volatile
 11135                           
 11136                           ; BSR set to: 0
 11137  002B0C  0012               	return		;funcret
 11138  002B0E  FFFF               	dw	65535	; errata NOP
 11139  002B10                     __end_of_PortBegin:
 11140                           	opt stack 0
 11141                           tblptru	equ	0xFF8
 11142                           tblptrh	equ	0xFF7
 11143                           tblptrl	equ	0xFF6
 11144                           tablat	equ	0xFF5
 11145                           prodh	equ	0xFF4
 11146                           prodl	equ	0xFF3
 11147                           intcon	equ	0xFF2
 11148                           intcon2	equ	0xFF1
 11149                           postinc0	equ	0xFEE
 11150                           wreg	equ	0xFE8
 11151                           indf1	equ	0xFE7
 11152                           postinc1	equ	0xFE6
 11153                           postdec1	equ	0xFE5
 11154                           fsr1h	equ	0xFE2
 11155                           fsr1l	equ	0xFE1
 11156                           indf2	equ	0xFDF
 11157                           postinc2	equ	0xFDE
 11158                           postdec2	equ	0xFDD
 11159                           plusw2	equ	0xFDB
 11160                           fsr2h	equ	0xFDA
 11161                           fsr2l	equ	0xFD9
 11162                           status	equ	0xFD8
 11163                           
 11164 ;; *************** function _InitUartBuffer *****************
 11165 ;; Defined at:
 11166 ;;		line 43 in file "interrupts.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;		None
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;		None
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  1    wreg      void 
 11173 ;; Registers used:
 11174 ;;		None
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : F/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11180 ;;      Params:         0       0       0       0       0       0       0
 11181 ;;      Locals:         0       0       0       0       0       0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0
 11183 ;;      Totals:         0       0       0       0       0       0       0
 11184 ;;Total ram usage:        0 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    2
 11187 ;; This function calls:
 11188 ;;		Nothing
 11189 ;; This function is called by:
 11190 ;;		_InitApp
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	text57
 11195  002B72                     __ptext57:
 11196                           	opt stack 0
 11197  002B72                     _InitUartBuffer:
 11198                           	opt stack 27
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;incstack = 0
 11202  002B72  FFFF               	dw	65535
 11203                           
 11204                           ;interrupts.c: 45: UartBufferHead = 0;
 11205  002B74  0100               	movlb	0	; () banked
 11206  002B76  6BC8               	clrf	_UartBufferHead& (0+255),b
 11207                           
 11208                           ;interrupts.c: 46: UartBufferTail = 0;
 11209  002B78  6A6F               	clrf	_UartBufferTail,c	;volatile
 11210                           
 11211                           ;interrupts.c: 47: UartBufferLen = 0;
 11212  002B7A  6BC9               	clrf	_UartBufferLen& (0+255),b	;volatile
 11213                           
 11214                           ; BSR set to: 0
 11215  002B7C  0012               	return		;funcret
 11216  002B7E  FFFF               	dw	65535	; errata NOP
 11217  002B80                     __end_of_InitUartBuffer:
 11218                           	opt stack 0
 11219                           tblptru	equ	0xFF8
 11220                           tblptrh	equ	0xFF7
 11221                           tblptrl	equ	0xFF6
 11222                           tablat	equ	0xFF5
 11223                           prodh	equ	0xFF4
 11224                           prodl	equ	0xFF3
 11225                           intcon	equ	0xFF2
 11226                           intcon2	equ	0xFF1
 11227                           postinc0	equ	0xFEE
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           plusw2	equ	0xFDB
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _ConfigureOscillator *****************
 11243 ;; Defined at:
 11244 ;;		line 86 in file "system.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;		None
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;		None
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      void 
 11251 ;; Registers used:
 11252 ;;		None
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11258 ;;      Params:         0       0       0       0       0       0       0
 11259 ;;      Locals:         0       0       0       0       0       0       0
 11260 ;;      Temps:          0       0       0       0       0       0       0
 11261 ;;      Totals:         0       0       0       0       0       0       0
 11262 ;;Total ram usage:        0 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    2
 11265 ;; This function calls:
 11266 ;;		Nothing
 11267 ;; This function is called by:
 11268 ;;		_main
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           	psect	text58
 11273  002B90                     __ptext58:
 11274                           	opt stack 0
 11275  002B90                     _ConfigureOscillator:
 11276                           	opt stack 28
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;incstack = 0
 11280  002B90  FFFF               	dw	65535
 11281  002B92  0012               	return		;funcret
 11282  002B94  FFFF               	dw	65535	; errata NOP
 11283  002B96                     __end_of_ConfigureOscillator:
 11284                           	opt stack 0
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           intcon2	equ	0xFF1
 11293                           postinc0	equ	0xFEE
 11294                           wreg	equ	0xFE8
 11295                           indf1	equ	0xFE7
 11296                           postinc1	equ	0xFE6
 11297                           postdec1	equ	0xFE5
 11298                           fsr1h	equ	0xFE2
 11299                           fsr1l	equ	0xFE1
 11300                           indf2	equ	0xFDF
 11301                           postinc2	equ	0xFDE
 11302                           postdec2	equ	0xFDD
 11303                           plusw2	equ	0xFDB
 11304                           fsr2h	equ	0xFDA
 11305                           fsr2l	equ	0xFD9
 11306                           status	equ	0xFD8
 11307                           
 11308 ;; *************** function _AddSecond *****************
 11309 ;; Defined at:
 11310 ;;		line 179 in file "user.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;		None
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;		None
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      void 
 11317 ;; Registers used:
 11318 ;;		wreg, status,2, status,0
 11319 ;; Tracked objects:
 11320 ;;		On entry : F/0
 11321 ;;		On exit  : F/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11324 ;;      Params:         0       0       0       0       0       0       0
 11325 ;;      Locals:         0       0       0       0       0       0       0
 11326 ;;      Temps:          0       0       0       0       0       0       0
 11327 ;;      Totals:         0       0       0       0       0       0       0
 11328 ;;Total ram usage:        0 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    2
 11331 ;; This function calls:
 11332 ;;		Nothing
 11333 ;; This function is called by:
 11334 ;;		_main
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text59
 11339  002B62                     __ptext59:
 11340                           	opt stack 0
 11341  002B62                     _AddSecond:
 11342                           	opt stack 28
 11343                           
 11344                           ;incstack = 0
 11345  002B62  FFFF               	dw	65535
 11346                           
 11347                           ; BSR set to: 0
 11348                           ;user.c: 181: currentTime++;
 11349  002B64  2BD9               	incf	_currentTime& (0+255),f,b
 11350  002B66  0E00               	movlw	0
 11351  002B68  23DA               	addwfc	(_currentTime+1)& (0+255),f,b
 11352  002B6A  23DB               	addwfc	(_currentTime+2)& (0+255),f,b
 11353  002B6C  23DC               	addwfc	(_currentTime+3)& (0+255),f,b
 11354                           
 11355                           ; BSR set to: 0
 11356  002B6E  0C00               	retlw	0	;funcret
 11357  002B70  FFFF               	dw	65535	; errata NOP
 11358  002B72                     __end_of_AddSecond:
 11359                           	opt stack 0
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           intcon2	equ	0xFF1
 11368                           postinc0	equ	0xFEE
 11369                           wreg	equ	0xFE8
 11370                           indf1	equ	0xFE7
 11371                           postinc1	equ	0xFE6
 11372                           postdec1	equ	0xFE5
 11373                           fsr1h	equ	0xFE2
 11374                           fsr1l	equ	0xFE1
 11375                           indf2	equ	0xFDF
 11376                           postinc2	equ	0xFDE
 11377                           postdec2	equ	0xFDD
 11378                           plusw2	equ	0xFDB
 11379                           fsr2h	equ	0xFDA
 11380                           fsr2l	equ	0xFD9
 11381                           status	equ	0xFD8
 11382                           
 11383 ;; *************** function _low_isr *****************
 11384 ;; Defined at:
 11385 ;;		line 172 in file "interrupts.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  c               1    5[COMRAM] unsigned char 
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      void 
 11392 ;; Registers used:
 11393 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11399 ;;      Params:         0       0       0       0       0       0       0
 11400 ;;      Locals:         1       0       0       0       0       0       0
 11401 ;;      Temps:          5       0       0       0       0       0       0
 11402 ;;      Totals:         6       0       0       0       0       0       0
 11403 ;;Total ram usage:        6 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    1
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		Interrupt level 1
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           	psect	intcodelo
 11414  000018                     __pintcodelo:
 11415                           	opt stack 0
 11416  000018                     _low_isr:
 11417                           	opt stack 0
 11418  000018  FFFF               	dw	65535	; assembler added errata NOP
 11419                           
 11420                           ; BSR set to: 0
 11421                           ;incstack = 0
 11422  00001A  8078               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11423  00001C  FFFF               	dw	65535	; errata NOP
 11424  00001E  CFD8 F001          	movff	status,??_low_isr
 11425  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 11426  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 11427  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 11428  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 11429                           
 11430                           ;interrupts.c: 186: if (PIR1bits.RCIF && PIE1bits.RCIE)
 11431  000032  BA9E               	btfsc	3998,5,c	;volatile
 11432  000034  AA9D               	btfss	3997,5,c	;volatile
 11433  000036  D016               	goto	i1l90
 11434  000038                     i1l91:
 11435  000038  FFFF               	dw	65535	; assembler added errata NOP
 11436  00003A  AA9E               	btfss	3998,5,c	;volatile
 11437  00003C  D7FD               	goto	i1l91
 11438                           
 11439                           ;interrupts.c: 200: uint8_t c = RCREG;
 11440  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 11441                           
 11442                           ;interrupts.c: 203: UartRingBuffer[UartBufferHead] = c;
 11443  000042  0E00               	movlw	low _UartRingBuffer
 11444  000044  0100               	movlb	0	; () banked
 11445  000046  25C8               	addwf	_UartBufferHead& (0+255),w,b
 11446  000048  6ED9               	movwf	fsr2l,c
 11447  00004A  6ADA               	clrf	fsr2h,c
 11448  00004C  0E02               	movlw	high _UartRingBuffer
 11449  00004E  22DA               	addwfc	fsr2h,f,c
 11450  000050  C006  FFDF         	movff	low_isr@c,indf2
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;interrupts.c: 204: UartBufferLen++;
 11454  000054  2BC9               	incf	_UartBufferLen& (0+255),f,b	;volatile
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;interrupts.c: 205: if(UartBufferHead == 256u - 1)
 11458  000056  29C8               	incf	_UartBufferHead& (0+255),w,b
 11459  000058  E102               	bnz	i1l4834
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;interrupts.c: 206: UartBufferHead = 0;
 11463  00005A  6BC8               	clrf	_UartBufferHead& (0+255),b
 11464  00005C  D001               	goto	i1l4836
 11465  00005E                     i1l4834:
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;interrupts.c: 207: else
 11469                           ;interrupts.c: 208: UartBufferHead++;
 11470  00005E  2BC8               	incf	_UartBufferHead& (0+255),f,b
 11471  000060                     i1l4836:
 11472  000060  FFFF               	dw	65535	; assembler added errata NOP
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;interrupts.c: 211: PIR1bits.RCIF = 0;
 11476  000062  9A9E               	bcf	3998,5,c	;volatile
 11477  000064                     i1l90:
 11478  000064  FFFF               	dw	65535	; assembler added errata NOP
 11479  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 11480  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 11481  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 11482  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 11483  000076  C001  FFD8         	movff	??_low_isr,status
 11484  00007A  9078               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11485  00007C  0010               	retfie	
 11486  00007E  FFFF               	dw	65535	; errata NOP
 11487  000080                     __end_of_low_isr:
 11488                           	opt stack 0
 11489                           tblptru	equ	0xFF8
 11490                           tblptrh	equ	0xFF7
 11491                           tblptrl	equ	0xFF6
 11492                           tablat	equ	0xFF5
 11493                           prodh	equ	0xFF4
 11494                           prodl	equ	0xFF3
 11495                           intcon	equ	0xFF2
 11496                           intcon2	equ	0xFF1
 11497                           postinc0	equ	0xFEE
 11498                           wreg	equ	0xFE8
 11499                           indf1	equ	0xFE7
 11500                           postinc1	equ	0xFE6
 11501                           postdec1	equ	0xFE5
 11502                           fsr1h	equ	0xFE2
 11503                           fsr1l	equ	0xFE1
 11504                           bsr	equ	0xFE0
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           plusw2	equ	0xFDB
 11509                           fsr2h	equ	0xFDA
 11510                           fsr2l	equ	0xFD9
 11511                           status	equ	0xFD8
 11512                           
 11513 ;; *************** function _high_isr *****************
 11514 ;; Defined at:
 11515 ;;		line 113 in file "interrupts.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;		None
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  1    wreg      void 
 11522 ;; Registers used:
 11523 ;;		wreg, status,2, status,0
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11529 ;;      Params:         0       0       0       0       0       0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0
 11532 ;;      Totals:         0       0       0       0       0       0       0
 11533 ;;Total ram usage:        0 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		Interrupt level 2
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	intcode
 11543  000008                     __pintcode:
 11544                           	opt stack 0
 11545  000008                     _high_isr:
 11546                           	opt stack 0
 11547  000008  FFFF               	dw	65535	; assembler added errata NOP
 11548                           
 11549                           ;incstack = 0
 11550  00000A  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11551  00000C  FFFF               	dw	65535	; errata NOP
 11552  00000E  EF0B  F013         	goto	int_func
 11553                           tblptru	equ	0xFF8
 11554                           tblptrh	equ	0xFF7
 11555                           tblptrl	equ	0xFF6
 11556                           tablat	equ	0xFF5
 11557                           prodh	equ	0xFF4
 11558                           prodl	equ	0xFF3
 11559                           intcon	equ	0xFF2
 11560                           intcon2	equ	0xFF1
 11561                           postinc0	equ	0xFEE
 11562                           wreg	equ	0xFE8
 11563                           indf1	equ	0xFE7
 11564                           postinc1	equ	0xFE6
 11565                           postdec1	equ	0xFE5
 11566                           fsr1h	equ	0xFE2
 11567                           fsr1l	equ	0xFE1
 11568                           bsr	equ	0xFE0
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577                           	psect	intcode_body
 11578  002616                     __pintcode_body:
 11579                           	opt stack 22
 11580  002616                     int_func:
 11581                           	opt stack 22
 11582  002616  FFFF               	dw	65535	; errata NOP
 11583                           
 11584                           ;interrupts.c: 134: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 11585  002618  B09E               	btfsc	3998,0,c	;volatile
 11586  00261A  A09D               	btfss	3997,0,c	;volatile
 11587  00261C  D00C               	goto	i2l77
 11588                           
 11589                           ;interrupts.c: 135: {
 11590                           ;interrupts.c: 136: PIR1bits.TMR1IF = 0;
 11591  00261E  909E               	bcf	3998,0,c	;volatile
 11592                           
 11593                           ;interrupts.c: 137: millisecondsFromStart++;
 11594  002620  0100               	movlb	0	; () banked
 11595  002622  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 11596  002624  0E00               	movlw	0
 11597  002626  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 11598  002628  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 11599  00262A  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;interrupts.c: 138: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 11603  00262C  0EF6               	movlw	246
 11604  00262E  6ECF               	movwf	4047,c	;volatile
 11605                           
 11606                           ; BSR set to: 0
 11607  002630  0E3C               	movlw	60
 11608  002632  6ECE               	movwf	4046,c	;volatile
 11609  002634  D018               	goto	i2l78
 11610  002636                     i2l77:
 11611  002636  FFFF               	dw	65535	; assembler added errata NOP
 11612                           
 11613                           ;interrupts.c: 140: }
 11614                           ;interrupts.c: 142: if(INTCONbits.TMR0IF)
 11615  002638  A4F2               	btfss	intcon,2,c	;volatile
 11616  00263A  D015               	goto	i2l78
 11617                           
 11618                           ;interrupts.c: 143: {
 11619                           ;interrupts.c: 144: INTCONbits.TMR0IF = 0;
 11620  00263C  94F2               	bcf	intcon,2,c	;volatile
 11621                           
 11622                           ;interrupts.c: 145: _6sCounter++;
 11623  00263E  0100               	movlb	0	; () banked
 11624  002640  2BCA               	incf	__6sCounter& (0+255),f,b	;volatile
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;interrupts.c: 146: if(_6sCounter == 10)
 11628  002642  0E0A               	movlw	10
 11629  002644  19CA               	xorwf	__6sCounter& (0+255),w,b	;volatile
 11630  002646  E10B               	bnz	i2l4814
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;interrupts.c: 147: {
 11634                           ;interrupts.c: 148: _6sCounter = 0;
 11635  002648  6BCA               	clrf	__6sCounter& (0+255),b	;volatile
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;interrupts.c: 149: globalMinutes++;
 11639  00264A  2A74               	incf	_globalMinutes,f,c	;volatile
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;interrupts.c: 150: if(globalMinutes == 60)
 11643  00264C  0E3C               	movlw	60
 11644  00264E  1874               	xorwf	_globalMinutes,w,c	;volatile
 11645  002650  E106               	bnz	i2l4814
 11646                           
 11647                           ; BSR set to: 0
 11648                           ;interrupts.c: 151: {
 11649                           ;interrupts.c: 152: globalMinutes = 0;
 11650  002652  6A74               	clrf	_globalMinutes,c	;volatile
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;interrupts.c: 153: globalHours++;
 11654  002654  2A77               	incf	_globalHours,f,c	;volatile
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;interrupts.c: 154: if(globalHours == 24)
 11658  002656  0E18               	movlw	24
 11659  002658  1877               	xorwf	_globalHours,w,c	;volatile
 11660  00265A  E101               	bnz	i2l4814
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;interrupts.c: 155: {
 11664                           ;interrupts.c: 156: globalHours = 0;
 11665  00265C  6A77               	clrf	_globalHours,c	;volatile
 11666  00265E                     i2l4814:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;interrupts.c: 157: }
 11670                           ;interrupts.c: 158: }
 11671                           ;interrupts.c: 159: }
 11672                           ;interrupts.c: 160: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 11673  00265E  0E1B               	movlw	27
 11674  002660  6ED7               	movwf	4055,c	;volatile
 11675  002662  0E1F               	movlw	31
 11676  002664  6ED6               	movwf	4054,c	;volatile
 11677  002666                     i2l78:
 11678  002666  FFFF               	dw	65535	; assembler added errata NOP
 11679  002668  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11680  00266A  0011               	retfie		f
 11681  00266C  FFFF               	dw	65535	; errata NOP
 11682  00266E                     __end_of_high_isr:
 11683                           	opt stack 0
 11684                           tblptru	equ	0xFF8
 11685                           tblptrh	equ	0xFF7
 11686                           tblptrl	equ	0xFF6
 11687                           tablat	equ	0xFF5
 11688                           prodh	equ	0xFF4
 11689                           prodl	equ	0xFF3
 11690                           intcon	equ	0xFF2
 11691                           intcon2	equ	0xFF1
 11692                           postinc0	equ	0xFEE
 11693                           wreg	equ	0xFE8
 11694                           indf1	equ	0xFE7
 11695                           postinc1	equ	0xFE6
 11696                           postdec1	equ	0xFE5
 11697                           fsr1h	equ	0xFE2
 11698                           fsr1l	equ	0xFE1
 11699                           bsr	equ	0xFE0
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           plusw2	equ	0xFDB
 11704                           fsr2h	equ	0xFDA
 11705                           fsr2l	equ	0xFD9
 11706                           status	equ	0xFD8
 11707                           tblptru	equ	0xFF8
 11708                           tblptrh	equ	0xFF7
 11709                           tblptrl	equ	0xFF6
 11710                           tablat	equ	0xFF5
 11711                           prodh	equ	0xFF4
 11712                           prodl	equ	0xFF3
 11713                           intcon	equ	0xFF2
 11714                           intcon2	equ	0xFF1
 11715                           postinc0	equ	0xFEE
 11716                           wreg	equ	0xFE8
 11717                           indf1	equ	0xFE7
 11718                           postinc1	equ	0xFE6
 11719                           postdec1	equ	0xFE5
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           bsr	equ	0xFE0
 11723                           indf2	equ	0xFDF
 11724                           postinc2	equ	0xFDE
 11725                           postdec2	equ	0xFDD
 11726                           plusw2	equ	0xFDB
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731                           	psect	rparam
 11732  0000                     tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           intcon2	equ	0xFF1
 11740                           postinc0	equ	0xFEE
 11741                           wreg	equ	0xFE8
 11742                           indf1	equ	0xFE7
 11743                           postinc1	equ	0xFE6
 11744                           postdec1	equ	0xFE5
 11745                           fsr1h	equ	0xFE2
 11746                           fsr1l	equ	0xFE1
 11747                           bsr	equ	0xFE0
 11748                           indf2	equ	0xFDF
 11749                           postinc2	equ	0xFDE
 11750                           postdec2	equ	0xFDD
 11751                           plusw2	equ	0xFDB
 11752                           fsr2h	equ	0xFDA
 11753                           fsr2l	equ	0xFD9
 11754                           status	equ	0xFD8
 11755                           
 11756                           	psect	temp
 11757  000078                     btemp:
 11758                           	opt stack 0
 11759  000078                     	ds	1
 11760  0000                     int$flags	set	btemp
 11761                           tblptru	equ	0xFF8
 11762                           tblptrh	equ	0xFF7
 11763                           tblptrl	equ	0xFF6
 11764                           tablat	equ	0xFF5
 11765                           prodh	equ	0xFF4
 11766                           prodl	equ	0xFF3
 11767                           intcon	equ	0xFF2
 11768                           intcon2	equ	0xFF1
 11769                           postinc0	equ	0xFEE
 11770                           wreg	equ	0xFE8
 11771                           indf1	equ	0xFE7
 11772                           postinc1	equ	0xFE6
 11773                           postdec1	equ	0xFE5
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           bsr	equ	0xFE0
 11777                           indf2	equ	0xFDF
 11778                           postinc2	equ	0xFDE
 11779                           postdec2	equ	0xFDD
 11780                           plusw2	equ	0xFDB
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        3
    BSS         558
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     119
    BANK0           128     18     114
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   38540
                                            105 COMRAM     5     5      0
                                              7 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             13    13      0   14162
                                            101 COMRAM     4     4      0
                                              0 BANK0      7     7      0
                _CommandSetStatusLed
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                          _PlaySound
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    6437
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    6317
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1314
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CommandSetStatusLed                                  3     3      0    2470
                                             28 COMRAM     3     3      0
                     _LightStatusLed
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     478
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2212
                                             14 COMRAM     5     5      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4242
                                             28 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PlaySound                                            8     6      2     720
                                             20 COMRAM     8     6      2
                            _GetTime
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (3) _SoundPlayNextStep                                    6     6      0     238
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (4) _StopPlaying                                          2     2      0       0
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     658
                                              8 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (5) _getHourMin                                           2     1      1     392
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2144
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   14229
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     608
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     852
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     833
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2820
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1189
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     871
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     707
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1171
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1142
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1291
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     574
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _CommandSetStatusLed
       _LightStatusLed
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _SoundPlayNextStep
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
       _StopPlaying
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getHourMin
         _SetHourMin
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      72       5       89.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      77       1       94.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B1      15        0.0%
DATA                 0      0     2B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed May 18 20:12:53 2016

                                                   LoadNextEvent@minute 000C  
                                                         _years_to_days 1A08  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$841 0012  
                                           __end_of_CommandSetStatusLed 24F6  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l62 296E  
                                                                    l71 2932  
                                                                    l59 296A  
                                                                    l67 2912  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l101 2A10  
                                                                   l102 2A2A  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l240 2874  
                                                                   l251 0C6C  
                                                                   l235 283A  
                                                                   l404 1F2E  
                                                                   l237 2844  
                                                                   l238 284E  
                                                                   l239 2858  
                                                                   l432 24F0  
                                                                   l361 2090  
                                                                   l259 0AE8  
                                                                   l443 15EE  
                                                                   l364 207C  
                                                                   l277 1BFA  
                                                                   l445 169A  
                                                                   l437 16C2  
                                                                   l374 1CCA  
                                                                   l703 0F26  
                                                                   l455 1636  
                                                                   l447 1602  
                                                                   l704 113E  
                                                                   l368 1CE6  
                                                                   l385 18F8  
                                                                   l449 1604  
                                                                   l708 0F5E  
                                                                   l652 142A  
                                                                   l717 1136  
                                                                   l399 188A  
                                                                   l808 20EA  
                                                                   l648 2754  
                                                                   l680 2B4A  
                                                                   l826 1582  
                                                                   l756 17C6  
                                                                   l688 28B8  
                                                                   l787 19E2  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2A80  
                                                      ProcessDiary@hour 0021  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 255A  
                                                                   wreg 000FE8  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 17F4  
                                                         _globalMinutes 0074  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1235 26B6  
                                                                  l1245 27E2  
                                                                  l1261 2704  
                                                                  l1281 06A6  
                                                                  l3324 292A  
                                                                  l5100 187E  
                                                                  l3502 23EA  
                                                                  l5022 2186  
                                                                  l5104 1890  
                                                                  l5106 18BC  
                                                                  l5042 1B16  
                                                                  l5026 21B0  
                                                                  l3532 2960  
                                                                  l3508 23F4  
                                                                  l5220 1C62  
                                                                  l4420 0DD2  
                                                                  l4412 0DB8  
                                                                  l4404 0D9E  
                                                                  l4500 0EC2  
                                                                  l5052 1B80  
                                                                  l3534 2962  
                                                                  l5310 0ABE  
                                                                  l5302 09AE  
                                                                  l5230 1C8E  
                                                                  l5214 1C1C  
                                                                  l4422 0DDA  
                                                                  l4414 0DC0  
                                                                  l4406 0DA6  
                                                                  l4502 0ED8  
                                                                  l5054 1B9E  
                                                                  l5046 1B3C  
                                                                  l5320 0BBA  
                                                                  l5312 0B16  
                                                                  l5304 0A44  
                                                                  l5080 183A  
                                                                  l5072 1812  
                                                                  l5160 2082  
                                                                  l5136 201C  
                                                                  l4440 0E0C  
                                                                  l4432 0DF4  
                                                                  l4360 0D18  
                                                                  l5048 1B5A  
                                                                  l6024 11CE  
                                                                  l6008 1188  
                                                                  l5090 185C  
                                                                  l5074 1814  
                                                                  l5218 1C30  
                                                                  l4450 0E2E  
                                                                  l4442 0E14  
                                                                  l4434 0DFA  
                                                                  l4426 0DE6  
                                                                  l4370 0D38  
                                                                  l4362 0D1E  
                                                                  l4354 0D0A  
                                                                  l5058 1BCC  
                                                                  l5170 06B2  
                                                                  l6026 11D2  
                                                                  l6018 11BE  
                                                                  l3660 25AE  
                                                                  l5316 0B94  
                                                                  l5092 1862  
                                                                  l5068 180A  
                                                                  l4348 0CE0  
                                                                  l5404 24C2  
                                                                  l5180 096A  
                                                                  l6052 1272  
                                                                  l6036 1230  
                                                                  l3494 23CC  
                                                                  l3486 23B8  
                                                                  l3654 2588  
                                                                  l5326 0C30  
                                                                  l5094 1868  
                                                                  l4470 0E68  
                                                                  l4462 0E54  
                                                                  l4390 0D78  
                                                                  l5414 29EC  
                                                                  l3832 28B6  
                                                                  l3816 2882  
                                                                  l3824 28A4  
                                                                  l5512 2240  
                                                                  l3904 0FF4  
                                                                  l5328 0C4C  
                                                                  l5336 0C54  
                                                                  l5096 186E  
                                                                  l4456 0E40  
                                                                  l4448 0E26  
                                                                  l4384 0D64  
                                                                  l4376 0D4A  
                                                                  l4368 0D30  
                                                                  l6056 1292  
                                                                  l5450 178A  
                                                                  l5442 172E  
                                                                  l5434 171E  
                                                                  l5610 1D28  
                                                                  l5514 2272  
                                                                  l5098 1876  
                                                                  l4458 0E48  
                                                                  l4386 0D6C  
                                                                  l4378 0D52  
                                                                  l5418 29FE  
                                                                  l5452 17B8  
                                                                  l5460 17CC  
                                                                  l5620 1DA4  
                                                                  l3916 1024  
                                                                  l3852 0F4C  
                                                                  l3668 2862  
                                                                  l4492 0EAE  
                                                                  l4484 0E94  
                                                                  l4476 0E7A  
                                                                  l4468 0E62  
                                                                  l4396 0D86  
                                                                  l5276 2736  
                                                                  l5710 147A  
                                                                  l5702 1446  
                                                                  l3870 0F8A  
                                                                  l3862 0F64  
                                                                  l5198 2A5E  
                                                                  l4494 0EB6  
                                                                  l4486 0E9C  
                                                                  l4478 0E82  
                                                                  l4398 0D8C  
                                                                  l5366 22F2  
                                                                  l5616 1D80  
                                                                  l5720 14BC  
                                                                  l3928 104A  
                                                                  l3856 0F54  
                                                                  l3848 0F2A  
                                                                  l5296 0992  
                                                                  l5466 17E4  
                                                                  l5562 1938  
                                                                  l5730 14EA  
                                                                  l5722 14C2  
                                                                  l3874 0FAE  
                                                                  l3866 0F86  
                                                                  l3858 0F5A  
                                                                  l4596 2370  
                                                                  l5572 19A2  
                                                                  l5636 242E  
                                                                  l5492 1FBA  
                                                                  l3964 10EA  
                                                                  l3948 10CC  
                                                                  l5812 1EEA  
                                                                  l5396 24A2  
                                                                  l5574 19D4  
                                                                  l5582 19E8  
                                                                  l5486 1F66  
                                                                  l5742 1526  
                                                                  l5734 14FE  
                                                                  l5726 14D6  
                                                                  l3894 0FD6  
                                                                  l3878 0FB4  
                                                                  l3974 10F8  
                                                                  l5910 13E0  
                                                                  l5902 13C6  
                                                                  l5806 1EC4  
                                                                  l4926 2702  
                                                                  l4934 2680  
                                                                  l5752 154E  
                                                                  l3896 0FE2  
                                                                  l3888 0FCC  
                                                                  l5824 12D8  
                                                                  l4936 268A  
                                                                  l5690 2122  
                                                                  l5746 153A  
                                                                  l5738 1512  
                                                                  l5914 13E6  
                                                                  l5906 13CE  
                                                                  l4962 27D8  
                                                                  l4954 27B4  
                                                                  l4946 26AC  
                                                                  l4938 2690  
                                                                  l5756 156E  
                                                                  l5924 13F2  
                                                                  l5852 1334  
                                                                  l5828 12DE  
                                                                  l4956 27BE  
                                                                  l5918 13EC  
                                                                  l5838 1308  
                                                                  l4958 27C4  
                                                                  l5942 15E2  
                                                                  l5688 2120  
                                                                  l5872 135A  
                                                                  l5848 132E  
                                                                  l5768 28CC  
                                                                  l5890 13A6  
                                                                  l5882 1382  
                                                                  l5874 1360  
                                                                  l5970 162A  
                                                                  l5946 15F2  
                                                                  l5868 1356  
                                                                  l5980 1674  
                                                                  l5894 13AE  
                                                                  l5886 1394  
                                                                  l5878 1374  
                                                                  l5798 1EA6  
                                                                  l5984 167A  
                                                                  l5898 13C0  
                                                                  l5978 1664  
                                                                  l5986 16A6  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 2834  
                                                                  u3020 10CA  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u4114 1B2E  
                                                                  u4115 1B28  
                                                                  u4124 1B4E  
                                                                  u4300 06A6  
                                                                  u4125 1B48  
                                                                  u4070 216E  
                                                                  u4144 1B72  
                                                                  u4145 1B6C  
                                                                  u4154 1B92  
                                                                  u4155 1B8C  
                                                                  u2900 0F86  
                                                                  u4404 2748  
                                                                  u4405 2742  
                                                                  u4174 1BBA  
                                                                  u4175 1BB2  
                                                                  u2920 0FAE  
                                                                  u4504 0AAA  
                                                                  u4184 1BE2  
                                                                  u4505 0AA4  
                                                                  u4185 1BDA  
                                                                  u4514 0AD2  
                                                                  u4434 09C2  
                                                                  u4290 068C  
                                                                  u5250 11FE  
                                                                  u5307 2906  
                                                                  u4515 0ACC  
                                                                  u4435 09BC  
                                                                  u2860 0F22  
                                                                  u4524 0AFC  
                                                                  u4444 09EA  
                                                                  u4525 0AF6  
                                                                  u4445 09E4  
                                                                  u4614 0C1C  
                                                                  u4534 0B2A  
                                                                  u4454 0A14  
                                                                  u4615 0C16  
                                                                  u4535 0B24  
                                                                  u4455 0A0E  
                                                                  u4624 0C44  
                                                                  u4544 0B52  
                                                                  u4464 0A3C  
                                                                  u4625 0C3E  
                                                                  u4545 0B4C  
                                                                  u4465 0A36  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u4554 0B78  
                                                                  u4474 0A58  
                                                                  u4394 2728  
                                                                  u4555 0B72  
                                                                  u4475 0A52  
                                                                  u4395 2722  
                                                                  u4484 0A7C  
                                                                  _RCIF 007CF5  
                                                                  u4485 0A76  
                                                                  u4645 22A2  
                                                                  u4734 1756  
                                                                  u4574 0BA6  
                                                                  u4735 174E  
                                                                  u4575 0BA0  
                                                                  u4655 22C4  
                                                                  u4824 222A  
                                                                  u4584 0BCE  
                                                                  u4825 2222  
                                                                  u4585 0BC8  
                                                                  i1l90 0064  
                                                                  u4754 1772  
                                                                  u4834 2256  
                                                                  u4594 0BF2  
                                                                  i1l91 0038  
                                                                  u4755 176C  
                                                                  u4835 224E  
                                                                  u4595 0BEC  
                                                                  u4764 179E  
                                                                  u4844 1966  
                                                                  u4765 1798  
                                                                  u4845 1960  
                                                                  u4685 24AC  
                                                                  u4864 198C  
                                                                  u4865 1984  
                                                                  u4874 19B8  
                                                                  u4875 19B0  
                                                                  i2l77 2636  
                                                                  i2l78 2666  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 1144  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0078  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2B88  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0076  
                                                       __end_of_InitApp 23AC  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CA  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2ABE  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                                 _CARRY 007EC0  
                                                       __end_of___lwdiv 26C2  
                                                       __end_of___lwmod 27EE  
                                            __end_of_ModbusSendTxBuffer 27A6  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2B90  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2288  
                                                        ?_LoadNextEvent 0001  
                                                    ProcessDiary@minute 0022  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D2  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 287A  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 16C8  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00C8  
                                                        _UartBufferTail 006F  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2AA0  
                                                       __initialization 24F6  
                                                          __end_of_main 12C0  
                                                      __end_of_LightLed 0C72  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 2326  
                                                            _ModbusInit 2B3C  
                                                            _ModbusPoll 12C0  
                                                      __end_of_PortRead 2974  
                                                        _InitUartBuffer 2B72  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 2ABE  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1B0A  
                                                                i1l4834 005E  
                                                                i1l4836 0060  
                                                                i2l4814 265E  
                                                         _ymd_to_scalar 2142  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 28BE  
                                                         main@oldMinute 00EB  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D6  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2B28  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 266E  
                                             __playingSoundStartPosInEe 0070  
                                                        _UartRingBuffer 0200  
                                                          __lastAddress 00BE  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00EA  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 26C2  
                                                                _millis 2A30  
                                                                clear_0 24FE  
                                                                clear_1 2510  
                                                                clear_2 251C  
                                                     __end_of_AddSecond 2B72  
                                                                _mktime 066E  
                                                          __lastCommand 00DF  
                                                 __end_of_PortAvailable 2B90  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 0075  
                                                __end_of_InitUartBuffer 2B80  
                                                          __MODBUSCoils 00DD  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D1  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2B62  
                                                __end_of_LightStatusLed 1C00  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D3  
                                                            __accesstop 0080  
                                               __end_of__initialization 254C  
                                            __end_of_ModbusProcess_FC21 2142  
                                            __end_of_ModbusProcess_FC15 1A08  
                                            __end_of_ModbusProcess_FC16 1DB4  
                                            __end_of_ModbusProcess_FC17 248E  
                                            __end_of_ModbusProcess_FC43 1592  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1144  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 23AC  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00E0  
                                                  _ModbusBuildException 2A80  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                                           ?_SetHourMin 0007  
                                                     __end_of_PlaySound 1CEA  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2B10  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 293E  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2A04  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0068  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000D  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 275A  
                                                               _GetTime 2B80  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00CD  
                                                   __end_of_StopPlaying 2AF6  
                                                               _InitApp 2326  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2AA0  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0170  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 00D8  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 266E  
                                                               ___lwmod 27A6  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 001C  
                                                               __pcinit 24F6  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2974  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0073  
                                                       __size_of_mktime 0312  
                                                               __ptext0 1144  
                                                               __ptext1 2B50  
                                                               __ptext2 1592  
                                                               __ptext3 29A6  
                                                               __ptext4 1DB4  
                                                               __ptext5 066E  
                                                               __ptext6 2142  
                                                               __ptext7 1A08  
                                                               __ptext8 27EE  
                                                               __ptext9 266E  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 1592  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0008  
                                                   __size_of_ResetEvent 0042  
                                              __size_of_SetTimeFromRegs 00C2  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2616  
                                                  end_of_initialization 254C  
                                                         __Lmediumconst 0000  
                                                               int_func 2616  
                                                   __playingSoundCurPos 00D0  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                                        ??_ProcessDiary 001D  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                          _curEventHour 00D4  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2B62  
                                                        _months_to_days 27EE  
                                                     _ModbusGetRxBuffer 287A  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     LoadNextEvent@hour 000B  
                                                     _SoundPlayNextStep 1FE8  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2ADA  
                                           __end_of_ConfigureOscillator 2B96  
                                                    ?_SoundPlayNextStep 0001  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E7  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F1  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1B0A  
                                                        __end_of_Modbus 2B3C  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 2096  
                                                    _ModbusProcess_FC15 18FE  
                                                    _ModbusProcess_FC16 1CEA  
                                                    _ModbusProcess_FC17 2420  
                                                    _ModbusProcess_FC43 1430  
                                                         __pidataCOMRAM 2B96  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 270E  
                                                        __end_of_millis 2A5A  
                                                __end_of_months_to_days 2834  
                                             __end_of_ModbusGetRxBuffer 28BE  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00C9  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                             __end_of_SoundPlayNextStep 2096  
                                                            ?_AddSecond 0001  
                                                   start_initialization 24F6  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 18FE  
                                                          ??_SetHourMin 0008  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1C00  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 248E  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 2B50  
                                                    __end_of_ModbusPoll 1430  
                                                             _PortBegin 2AF6  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EE4  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2900  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 2ADA  
                                                     __holdingRegsCount 00CC  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 2900  
                                                         __pcstackBANK0 00E0  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 1F32  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2666  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001C  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C6  
                                                            ?_PortWrite 0007  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2A04  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2B88  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001D  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0072  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00AE  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C4  
                                                 io_poll@lastEndAddress 00E1  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 0007  
                                                 __end_of_ymd_to_scalar 21E6  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D7  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                           __soundCount 0071  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 25BA  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0075  
                                                       __isSoundPlaying 00CE  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 275A  
                                           _ModbusSetExceptionStatusBit 270E  
                                                __nextEventPlayDuration 00C2  
                                                              InitApp@i 0007  
                                                           _globalHours 0077  
                                                             main@curMs 00ED  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 16C8  
                                                     _ModbusProcess_FC3 1F32  
                                                     _ModbusProcess_FC5 21E6  
                                                     _ModbusProcess_FC6 25BA  
                                                     _ModbusProcess_FC7 2B10  
                                                           _INTCON2bits 000FF1  
                                        CommandSetStatusLed@commandData 001E  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0980  
                                                    __end_of_getHourMin 2A30  
                                                           ??_PlaySound 0017  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 2A5A  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E3  
                                                      __size_of_InitApp 0086  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 2420  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001F  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 293E  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BC  
                                                           _isleap$2147 000F  
                                                       _SetTimeFromRegs 1DB4  
                                                           _currentTime 00D9  
                                                      __size_of_io_poll 0136  
                                                              _diffTime 00A8  
                                             __end_of_ModbusProcess_FC1 17F4  
                                             __end_of_ModbusProcess_FC3 1FE8  
                                             __end_of_ModbusProcess_FC5 2288  
                                             __end_of_ModbusProcess_FC6 2616  
                                             __end_of_ModbusProcess_FC7 2B28  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E4  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 26C2  
                                                              __ptext11 27A6  
                                                              __ptext20 1B0A  
                                                              __ptext12 2AA0  
                                                              __ptext21 28BE  
                                                              __ptext13 2ABE  
                                                              __ptext30 2B80  
                                                              __ptext22 0C72  
                                                              __ptext14 29D6  
                                                              __ptext31 17F4  
                                                              __ptext23 2834  
                                                              __ptext15 2288  
                                                              __ptext40 255A  
                                                              __ptext32 2A04  
                                                              __ptext24 1E76  
                                                              __ptext16 2B28  
                                                              __ptext41 1F32  
                                                              __ptext33 0980  
                                                              __ptext25 2A5A  
                                                              __ptext17 2B3C  
                                                              __ptext50 23AC  
                                                              __ptext42 2096  
                                                              __ptext34 12C0  
                                                              __ptext26 1C00  
                                                              __ptext18 248E  
                                                              __ptext51 287A  
                                                              __ptext43 2420  
                                                              __ptext35 0EE4  
                                                              __ptext27 1FE8  
                                                              __ptext19 270E  
                                                              __ptext52 293E  
                                                              __ptext44 1CEA  
                                                              __ptext36 2B10  
                                                              __ptext28 2ADA  
                                                              __ptext53 2B88  
                                                              __ptext45 18FE  
                                                              __ptext37 25BA  
                                                              __ptext29 2974  
                                                              __ptext54 2A80  
                                                              __ptext46 16C8  
                                                              __ptext38 21E6  
                                                              __ptext55 2326  
                                                              __ptext47 275A  
                                                              __ptext39 1430  
                                                              __ptext56 2AF6  
                                                              __ptext48 2A30  
                                                              __ptext57 2B72  
                                                              __ptext49 2900  
                                                              __ptext58 2B90  
                                                              __ptext59 2B62  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E6  
                                                         __size_of_main 017C  
                                                  _ModbusGetLastCommand 29D6  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1E76  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0078  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2B50  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00EC  
                                                      __exceptionStatus 00CB  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2160 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 009E  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00CF  
                                                        _SetTimeCommand 29A6  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2B9A  
                                                              intlevel2 2B9A  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001B  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0C72  
                                                 __MODBUSDiscreteInputs 00BC  
                                                __size_of_LoadNextEvent 010A  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1E76  
                                                 __end_of_SetBuzzerDuty 29A6  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                                        _curEventMinute 00D5  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 29D6  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 001C  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0EE4  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                            ModbusProcess_FC15@u8bitsno 0028  
