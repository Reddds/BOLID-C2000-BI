

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat May 28 12:51:44 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	eeprom_data
    97  F00000  11 7F FF 06 09 FF 01 04 	db	17,127,255,6,9,255,1,4	;# 
    98  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    99  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
   100  0000                     
   101                           	psect	idataCOMRAM
   102  002E8C                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _curEventNum
   106  002E8C  FF                 	db	255
   107                           
   108                           ;initializer for _currentAlarmedEventNum
   109  002E8D  FF                 	db	255
   110                           
   111                           ;initializer for _globalHours
   112  002E8E  FF                 	db	255
   113                           
   114                           	psect	smallconst
   115  000600                     __psmallconst:
   116                           	opt stack 0
   117  000600  00                 	db	0
   118  000601                     _fctsupported:
   119                           	opt stack 0
   120  000601  01                 	db	1
   121  000602  02                 	db	2
   122  000603  03                 	db	3
   123  000604  04                 	db	4
   124  000605  05                 	db	5
   125  000606  06                 	db	6
   126  000607  07                 	db	7
   127  000608  0F                 	db	15
   128  000609  10                 	db	16
   129  00060A  11                 	db	17
   130  00060B  15                 	db	21
   131  00060C  2B                 	db	43
   132  00060D  64                 	db	100
   133  00060E  65                 	db	101
   134  00060F  66                 	db	102
   135  000610                     __end_of_fctsupported:
   136                           	opt stack 0
   137  0000                     _CCP1CONbits	set	4029
   138  0000                     _CCPR1L	set	4030
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCON2bits	set	4081
   143  0000                     _INTCONbits	set	4082
   144  0000                     _IPR1bits	set	3999
   145  0000                     _LATA	set	3977
   146  0000                     _LATAbits	set	3977
   147  0000                     _LATB	set	3978
   148  0000                     _LATCbits	set	3979
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _PORTCbits	set	3970
   152  0000                     _PR2	set	4043
   153  0000                     _RCONbits	set	4048
   154  0000                     _RCREG	set	4014
   155  0000                     _RCSTA	set	4011
   156  0000                     _RCSTAbits	set	4011
   157  0000                     _SPBRG	set	4015
   158  0000                     _T0CONbits	set	4053
   159  0000                     _T1CONbits	set	4045
   160  0000                     _T2CONbits	set	4042
   161  0000                     _TMR0H	set	4055
   162  0000                     _TMR0L	set	4054
   163  0000                     _TMR1H	set	4047
   164  0000                     _TMR1L	set	4046
   165  0000                     _TRISAbits	set	3986
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISCbits	set	3988
   168  0000                     _TXREG	set	4013
   169  0000                     _TXSTA	set	4012
   170  0000                     _TXSTAbits	set	4012
   171  0000                     _CARRY	set	32448
   172  0000                     _GIE	set	32663
   173  0000                     _RCIF	set	31989
   174  0000                     _RD	set	32048
   175  0000                     _TRMT	set	32097
   176  0000                     _WR	set	32049
   177  0000                     _WREN	set	32050
   178  000610                     STR_9:
   179  000610  54                 	db	84	;'T'
   180  000611  61                 	db	97	;'a'
   181  000612  62                 	db	98	;'b'
   182  000613  6C                 	db	108	;'l'
   183  000614  6F                 	db	111	;'o'
   184  000615  20                 	db	32
   185  000616  73                 	db	115	;'s'
   186  000617  20                 	db	32
   187  000618  72                 	db	114	;'r'
   188  000619  61                 	db	97	;'a'
   189  00061A  73                 	db	115	;'s'
   190  00061B  70                 	db	112	;'p'
   191  00061C  69                 	db	105	;'i'
   192  00061D  73                 	db	115	;'s'
   193  00061E  61                 	db	97	;'a'
   194  00061F  6E                 	db	110	;'n'
   195  000620  69                 	db	105	;'i'
   196  000621  65                 	db	101	;'e'
   197  000622  6D                 	db	109	;'m'
   198  000623  00                 	db	0
   199  000624                     STR_7:
   200  000624  68                 	db	104	;'h'
   201  000625  74                 	db	116	;'t'
   202  000626  74                 	db	116	;'t'
   203  000627  70                 	db	112	;'p'
   204  000628  3A                 	db	58	;':'
   205  000629  2F                 	db	47
   206  00062A  2F                 	db	47
   207  00062B  62                 	db	98	;'b'
   208  00062C  6F                 	db	111	;'o'
   209  00062D  6C                 	db	108	;'l'
   210  00062E  69                 	db	105	;'i'
   211  00062F  64                 	db	100	;'d'
   212  000630  2E                 	db	46
   213  000631  72                 	db	114	;'r'
   214  000632  75                 	db	117	;'u'
   215  000633  00                 	db	0
   216  000634                     STR_13:
   217  000634  52                 	db	82	;'R'
   218  000635  61                 	db	97	;'a'
   219  000636  73                 	db	115	;'s'
   220  000637  70                 	db	112	;'p'
   221  000638  69                 	db	105	;'i'
   222  000639  73                 	db	115	;'s'
   223  00063A  61                 	db	97	;'a'
   224  00063B  6E                 	db	110	;'n'
   225  00063C  69                 	db	105	;'i'
   226  00063D  65                 	db	101	;'e'
   227  00063E  00                 	db	0
   228  00063F                     STR_3:
   229  00063F  43                 	db	67	;'C'
   230  000640  32                 	db	50	;'2'
   231  000641  30                 	db	48	;'0'
   232  000642  30                 	db	48	;'0'
   233  000643  30                 	db	48	;'0'
   234  000644  2D                 	db	45
   235  000645  42                 	db	66	;'B'
   236  000646  49                 	db	73	;'I'
   237  000647  00                 	db	0
   238  000648                     STR_1:
   239  000648  42                 	db	66	;'B'
   240  000649  4F                 	db	79	;'O'
   241  00064A  4C                 	db	76	;'L'
   242  00064B  49                 	db	73	;'I'
   243  00064C  44                 	db	68	;'D'
   244  00064D  00                 	db	0
   245  00064E                     STR_5:
   246  00064E  31                 	db	49	;'1'
   247  00064F  2E                 	db	46
   248  000650  30                 	db	48	;'0'
   249  000651  31                 	db	49	;'1'
   250  000652  00                 	db	0
   251  000653                     STR_11:
   252  000653  4D                 	db	77	;'M'
   253  000654  4D                 	db	77	;'M'
   254  000655  4D                 	db	77	;'M'
   255  000656  00                 	db	0
   256  0000                     
   257                           ; #config settings
   258  000657  00                 	db	0	; dummy byte at the end
   259  0000                     
   260                           	psect	cinit
   261  0026AC                     __pcinit:
   262                           	opt stack 0
   263  0026AC                     start_initialization:
   264                           	opt stack 0
   265  0026AC                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Clear objects allocated to BANK2 (256 bytes)
   269  0026AC  EE02  F000         	lfsr	0,__pbssBANK2
   270  0026B0  EE11 F000          	lfsr	1,256
   271  0026B4                     clear_0:
   272  0026B4  6AEE               	clrf	postinc0,c
   273  0026B6  50E5               	movf	postdec1,w,c
   274  0026B8  50E1               	movf	fsr1l,w,c
   275  0026BA  E1FC               	bnz	clear_0
   276  0026BC  50E2               	movf	fsr1h,w,c
   277  0026BE  E1FA               	bnz	clear_0
   278                           
   279                           ; Clear objects allocated to BANK1 (200 bytes)
   280  0026C0  EE01  F000         	lfsr	0,__pbssBANK1
   281  0026C4  0EC8               	movlw	200
   282  0026C6                     clear_1:
   283  0026C6  6AEE               	clrf	postinc0,c
   284  0026C8  06E8               	decf	wreg,f,c
   285  0026CA  E1FD               	bnz	clear_1
   286                           
   287                           ; Clear objects allocated to BANK0 (105 bytes)
   288  0026CC  EE00  F080         	lfsr	0,__pbssBANK0
   289  0026D0  0E69               	movlw	105
   290  0026D2                     clear_2:
   291  0026D2  6AEE               	clrf	postinc0,c
   292  0026D4  06E8               	decf	wreg,f,c
   293  0026D6  E1FD               	bnz	clear_2
   294                           
   295                           ; Clear objects allocated to COMRAM (6 bytes)
   296  0026D8  6A72               	clrf	(__pbssCOMRAM+5)& (0+255),c
   297  0026DA  6A71               	clrf	(__pbssCOMRAM+4)& (0+255),c
   298  0026DC  6A70               	clrf	(__pbssCOMRAM+3)& (0+255),c
   299  0026DE  6A6F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   300  0026E0  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   301  0026E2  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   302                           
   303                           ; Initialize objects allocated to COMRAM (3 bytes)
   304                           ; load TBLPTR registers with __pidataCOMRAM
   305  0026E4  0E8C               	movlw	low __pidataCOMRAM
   306  0026E6  6EF6               	movwf	tblptrl,c
   307  0026E8  0E2E               	movlw	high __pidataCOMRAM
   308  0026EA  6EF7               	movwf	tblptrh,c
   309  0026EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   310  0026EE  6EF8               	movwf	tblptru,c
   311  0026F0  0009               	tblrd		*+	;fetch initializer
   312  0026F2  CFF5 F073          	movff	tablat,__pdataCOMRAM
   313  0026F6  0009               	tblrd		*+	;fetch initializer
   314  0026F8  CFF5 F074          	movff	tablat,__pdataCOMRAM+1
   315  0026FC  0009               	tblrd		*+	;fetch initializer
   316  0026FE  CFF5 F075          	movff	tablat,__pdataCOMRAM+2
   317  002702                     end_of_initialization:
   318                           	opt stack 0
   319  002702                     __end_of__initialization:
   320                           	opt stack 0
   321  002702  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   322  002704  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   323  002706  0E00               	movlw	low (__Lmediumconst shr (0+16))
   324  002708  6EF8               	movwf	tblptru,c
   325  00270A  0100               	movlb	0
   326  00270C  EF69  F009         	goto	_main	;jump to C main() function
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1h	equ	0xFE2
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	bssCOMRAM
   338  00006D                     __pbssCOMRAM:
   339                           	opt stack 0
   340  00006D                     __maxDiaryEvents:
   341                           	opt stack 0
   342  00006D                     	ds	1
   343  00006E                     __playingSoundStartPosInEe:
   344                           	opt stack 0
   345  00006E                     	ds	1
   346  00006F                     __u8BufferSize:
   347                           	opt stack 0
   348  00006F                     	ds	1
   349  000070                     _blinkOn:
   350                           	opt stack 0
   351  000070                     	ds	1
   352  000071                     _eventCount:
   353                           	opt stack 0
   354  000071                     	ds	1
   355  000072                     _globalMinutes:
   356                           	opt stack 0
   357  000072                     	ds	1
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           postdec1	equ	0xFE5
   365                           fsr1h	equ	0xFE2
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	dataCOMRAM
   369  000073                     __pdataCOMRAM:
   370                           	opt stack 0
   371  000073                     _curEventNum:
   372                           	opt stack 0
   373  000073                     	ds	1
   374  000074                     _currentAlarmedEventNum:
   375                           	opt stack 0
   376  000074                     	ds	1
   377  000075                     _globalHours:
   378                           	opt stack 0
   379  000075                     	ds	1
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           postdec1	equ	0xFE5
   387                           fsr1h	equ	0xFE2
   388                           fsr1l	equ	0xFE1
   389                           
   390                           	psect	bssBANK0
   391  000080                     __pbssBANK0:
   392                           	opt stack 0
   393  000080                     _ledBlink:
   394                           	opt stack 0
   395  000080                     	ds	16
   396  000090                     _ledStatuses:
   397                           	opt stack 0
   398  000090                     	ds	16
   399  0000A0                     __playingEndMs:
   400                           	opt stack 0
   401  0000A0                     	ds	4
   402  0000A4                     __u32time:
   403                           	opt stack 0
   404  0000A4                     	ds	4
   405  0000A8                     _diffTime:
   406                           	opt stack 0
   407  0000A8                     	ds	4
   408  0000AC                     _eventResetSecond:
   409                           	opt stack 0
   410  0000AC                     	ds	4
   411  0000B0                     _millisecondsFromStart:
   412                           	opt stack 0
   413  0000B0                     	ds	4
   414  0000B4                     _oldBlinkOnTime:
   415                           	opt stack 0
   416  0000B4                     	ds	4
   417  0000B8                     _soundTestEnd:
   418                           	opt stack 0
   419  0000B8                     	ds	4
   420  0000BC                     __lastAddress:
   421                           	opt stack 0
   422  0000BC                     	ds	2
   423  0000BE                     __lastCount:
   424                           	opt stack 0
   425  0000BE                     	ds	2
   426  0000C0                     __nextEventPlayDuration:
   427                           	opt stack 0
   428  0000C0                     	ds	2
   429  0000C2                     __totalMinutesFromDayStart:
   430                           	opt stack 0
   431  0000C2                     	ds	2
   432  0000C4                     _curEventTotalMinutes:
   433                           	opt stack 0
   434  0000C4                     	ds	2
   435  0000C6                     _UartBufferHead:
   436                           	opt stack 0
   437  0000C6                     	ds	1
   438  0000C7                     _UartBufferLen:
   439                           	opt stack 0
   440  0000C7                     	ds	1
   441  0000C8                     _UartBufferTail:
   442                           	opt stack 0
   443  0000C8                     	ds	1
   444  0000C9                     __6sCounter:
   445                           	opt stack 0
   446  0000C9                     	ds	1
   447  0000CA                     __deviceStatus:
   448                           	opt stack 0
   449  0000CA                     	ds	1
   450  0000CB                     __eeFirstSoundAddress:
   451                           	opt stack 0
   452  0000CB                     	ds	1
   453  0000CC                     __eeSoundAddressesList:
   454                           	opt stack 0
   455  0000CC                     	ds	1
   456  0000CD                     __exceptionStatus:
   457                           	opt stack 0
   458  0000CD                     	ds	1
   459  0000CE                     __holdingRegsCount:
   460                           	opt stack 0
   461  0000CE                     	ds	1
   462  0000CF                     __inputRegsCount:
   463                           	opt stack 0
   464  0000CF                     	ds	1
   465  0000D0                     __isSoundPlaying:
   466                           	opt stack 0
   467  0000D0                     	ds	1
   468  0000D1                     __lastCommand:
   469                           	opt stack 0
   470  0000D1                     	ds	1
   471  0000D2                     __nextEventSoundId:
   472                           	opt stack 0
   473  0000D2                     	ds	1
   474  0000D3                     __playingSoundCurPos:
   475                           	opt stack 0
   476  0000D3                     	ds	1
   477  0000D4                     __playingSoundSteps:
   478                           	opt stack 0
   479  0000D4                     	ds	1
   480  0000D5                     __soundCount:
   481                           	opt stack 0
   482  0000D5                     	ds	1
   483  0000D6                     __u8id:
   484                           	opt stack 0
   485  0000D6                     	ds	1
   486  0000D7                     __u8lastRec:
   487                           	opt stack 0
   488  0000D7                     	ds	1
   489  0000D8                     _currentLedBlock:
   490                           	opt stack 0
   491  0000D8                     	ds	1
   492  0000D9                     _eventAcceptTime:
   493                           	opt stack 0
   494  0000D9                     	ds	1
   495  0000DA                     _currentTime:
   496                           	opt stack 0
   497  0000DA                     	ds	4
   498  0000DE                     __MODBUSCoils:
   499                           	opt stack 0
   500  0000DE                     	ds	2
   501  0000E0                     _ModbusUserCommandAdditional1Hi:
   502                           	opt stack 0
   503  0000E0                     	ds	1
   504  0000E1                     _ModbusUserCommandAdditional1Lo:
   505                           	opt stack 0
   506  0000E1                     	ds	1
   507  0000E2                     _ModbusUserCommandAdditional2Hi:
   508                           	opt stack 0
   509  0000E2                     	ds	1
   510  0000E3                     _ModbusUserCommandAdditional2Lo:
   511                           	opt stack 0
   512  0000E3                     	ds	1
   513  0000E4                     _ModbusUserCommandAdditional3Hi:
   514                           	opt stack 0
   515  0000E4                     	ds	1
   516  0000E5                     _ModbusUserCommandAdditional3Lo:
   517                           	opt stack 0
   518  0000E5                     	ds	1
   519  0000E6                     _ModbusUserCommandData:
   520                           	opt stack 0
   521  0000E6                     	ds	1
   522  0000E7                     _ModbusUserCommandId:
   523                           	opt stack 0
   524  0000E7                     	ds	1
   525  0000E8                     __lastFunction:
   526                           	opt stack 0
   527  0000E8                     	ds	1
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1h	equ	0xFE2
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	bssBANK1
   539  000100                     __pbssBANK1:
   540                           	opt stack 0
   541  000100                     __au8Buffer:
   542                           	opt stack 0
   543  000100                     	ds	140
   544  00018C                     __MODBUSHoldingRegs:
   545                           	opt stack 0
   546  00018C                     	ds	30
   547  0001AA                     __MODBUSInputRegs:
   548                           	opt stack 0
   549  0001AA                     	ds	30
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1h	equ	0xFE2
   558                           fsr1l	equ	0xFE1
   559                           
   560                           	psect	bssBANK2
   561  000200                     __pbssBANK2:
   562                           	opt stack 0
   563  000200                     _UartRingBuffer:
   564                           	opt stack 0
   565  000200                     	ds	256
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1h	equ	0xFE2
   574                           fsr1l	equ	0xFE1
   575                           
   576                           	psect	cstackBANK0
   577  0000E9                     __pcstackBANK0:
   578                           	opt stack 0
   579  0000E9                     main@lastMs:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0x0
   583  0000E9                     	ds	4
   584  0000ED                     main@oldMinute:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x4
   588  0000ED                     	ds	1
   589  0000EE                     main@hour:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x5
   593  0000EE                     	ds	1
   594  0000EF                     main@curMs:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x6
   598  0000EF                     	ds	4
   599  0000F3                     main@minute:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xA
   603  0000F3                     	ds	1
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           postdec1	equ	0xFE5
   611                           fsr1h	equ	0xFE2
   612                           fsr1l	equ	0xFE1
   613                           
   614                           	psect	cstackCOMRAM
   615  000001                     __pcstackCOMRAM:
   616                           	opt stack 0
   617  000001                     ??_low_isr:
   618  000001                     
   619                           ; 1 bytes @ 0x0
   620  000001                     	ds	5
   621  000006                     low_isr@c:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x5
   625  000006                     	ds	1
   626  000007                     ?_ModbusCalcCRC:
   627                           	opt stack 0
   628  000007                     ?___lwdiv:
   629                           	opt stack 0
   630  000007                     ?___lwmod:
   631                           	opt stack 0
   632  000007                     ?_millis:
   633                           	opt stack 0
   634  000007                     PortRead@ret:
   635                           	opt stack 0
   636  000007                     getHourMin@min:
   637                           	opt stack 0
   638  000007                     getTotalMinutes@totalMinutes:
   639                           	opt stack 0
   640  000007                     UpdateLedRegister@regIndex:
   641                           	opt stack 0
   642  000007                     SwitchOffAllLeds@i:
   643                           	opt stack 0
   644  000007                     LightLed@ledState:
   645                           	opt stack 0
   646  000007                     LightStatusLed@on:
   647                           	opt stack 0
   648  000007                     InitApp@i:
   649                           	opt stack 0
   650  000007                     SetTime@newTime:
   651                           	opt stack 0
   652  000007                     ModbusSetExceptionStatusBit@value:
   653                           	opt stack 0
   654  000007                     ModbusInit@u8serno:
   655                           	opt stack 0
   656  000007                     ModbusBuildException@u8exception:
   657                           	opt stack 0
   658  000007                     ModbusGetLastCommand@count:
   659                           	opt stack 0
   660  000007                     CopyStringToBuffer@src:
   661                           	opt stack 0
   662  000007                     ___lbdiv@divisor:
   663                           	opt stack 0
   664  000007                     ___lbmod@divisor:
   665                           	opt stack 0
   666  000007                     PortWrite@buf:
   667                           	opt stack 0
   668  000007                     SetBuzzerDuty@dc:
   669                           	opt stack 0
   670  000007                     ___lwdiv@dividend:
   671                           	opt stack 0
   672  000007                     ___lwmod@dividend:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x6
   676  000007                     	ds	1
   677  000008                     ??_LoadNextEvent:
   678  000008                     ??_ModbusSetExceptionStatusBit:
   679  000008                     ??_ModbusGetRxBufferHeader:
   680  000008                     ??_ModbusGetRxBuffer:
   681  000008                     ??_ProcessLightBlock:
   682  000008                     getHourMin@hour:
   683                           	opt stack 0
   684  000008                     LightLed@blink:
   685                           	opt stack 0
   686  000008                     LightStatusLed@blink:
   687                           	opt stack 0
   688  000008                     ModbusInit@u8txenpin:
   689                           	opt stack 0
   690  000008                     ModbusBuildException@u8func:
   691                           	opt stack 0
   692  000008                     ModbusGetLastCommand@command:
   693                           	opt stack 0
   694  000008                     CopyStringToBuffer@len:
   695                           	opt stack 0
   696  000008                     ___lbdiv@dividend:
   697                           	opt stack 0
   698  000008                     ___lbmod@dividend:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x7
   702  000008                     	ds	1
   703  000009                     ??_ModbusCalcCRC:
   704  000009                     ??_LightLed:
   705  000009                     ??_LightStatusLed:
   706  000009                     ??_SetBuzzerDuty:
   707  000009                     ??_CopyStringToBuffer:
   708  000009                     PortWrite@buflen:
   709                           	opt stack 0
   710  000009                     ModbusGetRxBufferHeader@i:
   711                           	opt stack 0
   712  000009                     ModbusGetRxBuffer@bBuffOverflow:
   713                           	opt stack 0
   714  000009                     ModbusGetLastCommand@address:
   715                           	opt stack 0
   716  000009                     ___lbdiv@counter:
   717                           	opt stack 0
   718  000009                     ___lbmod@counter:
   719                           	opt stack 0
   720  000009                     ___lwdiv@divisor:
   721                           	opt stack 0
   722  000009                     ___lwmod@divisor:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x8
   726  000009                     	ds	1
   727  00000A                     PortWrite@i:
   728                           	opt stack 0
   729  00000A                     ModbusSetExceptionStatusBit@bitNum:
   730                           	opt stack 0
   731  00000A                     CopyStringToBuffer@objId:
   732                           	opt stack 0
   733  00000A                     ___lbdiv@quotient:
   734                           	opt stack 0
   735  00000A                     ___lbmod@rem:
   736                           	opt stack 0
   737  00000A                     LoadNextEvent@totalMinutes:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x9
   741  00000A                     	ds	1
   742  00000B                     ModbusInit@u8id:
   743                           	opt stack 0
   744  00000B                     ModbusCalcCRC@u8length:
   745                           	opt stack 0
   746  00000B                     CopyStringToBuffer@i:
   747                           	opt stack 0
   748  00000B                     ___lwdiv@counter:
   749                           	opt stack 0
   750  00000B                     ___lwmod@counter:
   751                           	opt stack 0
   752  00000B                     SetHourMin@newHour:
   753                           	opt stack 0
   754  00000B                     millis@ret:
   755                           	opt stack 0
   756                           
   757                           ; 4 bytes @ 0xA
   758  00000B                     	ds	1
   759  00000C                     ?_isleap:
   760                           	opt stack 0
   761  00000C                     LightLed@ledNum:
   762                           	opt stack 0
   763  00000C                     ProcessLightBlock@curMs:
   764                           	opt stack 0
   765  00000C                     LoadNextEvent@v1:
   766                           	opt stack 0
   767  00000C                     Modbus@u8serno:
   768                           	opt stack 0
   769  00000C                     ModbusCalcCRC@temp2:
   770                           	opt stack 0
   771  00000C                     ___lwdiv@quotient:
   772                           	opt stack 0
   773  00000C                     isleap@yr:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0xB
   777  00000C                     	ds	1
   778  00000D                     LightLed@ststusIndex:
   779                           	opt stack 0
   780  00000D                     Modbus@u8txenpin:
   781                           	opt stack 0
   782  00000D                     SetHourMin@newMin:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0xC
   786  00000D                     	ds	1
   787  00000E                     ??_isleap:
   788  00000E                     ?_months_to_days:
   789                           	opt stack 0
   790  00000E                     ?_years_to_days:
   791                           	opt stack 0
   792  00000E                     LightLed@statusShift:
   793                           	opt stack 0
   794  00000E                     LightStatusLed@row:
   795                           	opt stack 0
   796  00000E                     Modbus@u8id:
   797                           	opt stack 0
   798  00000E                     ModbusCalcCRC@flag:
   799                           	opt stack 0
   800  00000E                     months_to_days@month:
   801                           	opt stack 0
   802  00000E                     years_to_days@yr:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0xD
   806  00000E                     	ds	1
   807  00000F                     ??_SoundPlayNextStep:
   808  00000F                     ??_ResetEvent:
   809  00000F                     ShowFailure@additionalLed:
   810                           	opt stack 0
   811  00000F                     _isleap$2254:
   812                           	opt stack 0
   813  00000F                     SetHourMin@sec:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0xE
   817  00000F                     	ds	1
   818  000010                     ??_InitFromEeprom:
   819  000010                     ??_months_to_days:
   820  000010                     ModbusCalcCRC@i:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0xF
   824  000010                     	ds	1
   825  000011                     ??_SetHourMin:
   826  000011                     ResetEvent@state:
   827                           	opt stack 0
   828  000011                     ModbusCalcCRC@j:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x10
   832  000011                     	ds	1
   833  000012                     ??_years_to_days:
   834  000012                     InitFromEeprom@eeSoundCountAddress:
   835                           	opt stack 0
   836  000012                     _ResetEvent$890:
   837                           	opt stack 0
   838  000012                     ModbusCalcCRC@temp:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x11
   842  000012                     	ds	1
   843  000013                     InitFromEeprom@tmpModbusId:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x12
   847  000013                     	ds	1
   848  000014                     ??_ModbusValidateRequest:
   849  000014                     SoundPlayNextStep@stepDuty:
   850                           	opt stack 0
   851  000014                     ModbusSendTxBuffer@u16crc:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x13
   855  000014                     	ds	2
   856  000016                     ??_ModbusProcess_FC5:
   857  000016                     ??_ModbusProcess_FC15:
   858  000016                     ??_ModbusProcess_FC21:
   859  000016                     SoundPlayNextStep@duration:
   860                           	opt stack 0
   861  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   862                           	opt stack 0
   863  000016                     ModbusProcess_FC17@u8CopyBufferSize:
   864                           	opt stack 0
   865  000016                     ModbusProcess_FC43@devIdCode:
   866                           	opt stack 0
   867  000016                     ModbusProcess_FC101@u8CopyBufferSize:
   868                           	opt stack 0
   869  000016                     ModbusProcess_FC102@u8CopyBufferSize:
   870                           	opt stack 0
   871  000016                     ModbusProcess_FC1@regs:
   872                           	opt stack 0
   873  000016                     ModbusProcess_FC3@regs:
   874                           	opt stack 0
   875  000016                     ModbusProcess_FC6@regs:
   876                           	opt stack 0
   877  000016                     ModbusProcess_FC16@regs:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x15
   881  000016                     	ds	1
   882  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   883                           	opt stack 0
   884  000017                     PlaySound@playDuration:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x16
   888  000017                     	ds	1
   889  000018                     ??_ModbusProcess_FC1:
   890  000018                     ModbusProcess_FC3@u8size:
   891                           	opt stack 0
   892  000018                     ModbusProcess_FC6@u8size:
   893                           	opt stack 0
   894  000018                     ModbusProcess_FC16@u8size:
   895                           	opt stack 0
   896  000018                     ModbusProcess_FC21@requestDataLen:
   897                           	opt stack 0
   898  000018                     ModbusProcess_FC43@objId:
   899                           	opt stack 0
   900  000018                     ModbusValidateRequest@startAddrBytes:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x17
   904  000018                     	ds	1
   905  000019                     ??_ModbusProcess_FC3:
   906  000019                     ??_ModbusProcess_FC6:
   907  000019                     ??_ModbusProcess_FC16:
   908  000019                     ??_PlaySound:
   909  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x18
   913  000019                     	ds	1
   914  00001A                     ModbusProcess_FC21@startAddrsBytes:
   915                           	opt stack 0
   916  00001A                     years_to_days@ret:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x19
   920  00001A                     	ds	1
   921  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   922                           	opt stack 0
   923  00001B                     ModbusProcess_FC1@u16coil:
   924                           	opt stack 0
   925  00001B                     ModbusProcess_FC6@u16val:
   926                           	opt stack 0
   927  00001B                     ModbusProcess_FC15@u16coil:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x1A
   931  00001B                     	ds	1
   932  00001C                     ModbusProcess_FC5@u16coil:
   933                           	opt stack 0
   934  00001C                     ModbusProcess_FC21@recLenBytes:
   935                           	opt stack 0
   936  00001C                     ModbusValidateRequest@recLenBytes:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x1B
   940  00001C                     	ds	1
   941  00001D                     SetHourMin@tmpSec:
   942                           	opt stack 0
   943  00001D                     PlaySound@soundId:
   944                           	opt stack 0
   945  00001D                     ModbusProcess_FC1@u8currentBit:
   946                           	opt stack 0
   947  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   948                           	opt stack 0
   949  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   950                           	opt stack 0
   951  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   952                           	opt stack 0
   953  00001D                     ModbusProcess_FC16@temp:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1C
   957  00001D                     	ds	1
   958  00001E                     ?_ymd_to_scalar:
   959                           	opt stack 0
   960  00001E                     SetHourMin@secToNext6Sec:
   961                           	opt stack 0
   962  00001E                     PlaySound@soundAddr:
   963                           	opt stack 0
   964  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   965                           	opt stack 0
   966  00001E                     ModbusProcess_FC5@regs:
   967                           	opt stack 0
   968  00001E                     ModbusProcess_FC15@bTemp:
   969                           	opt stack 0
   970  00001E                     ModbusProcess_FC21@i:
   971                           	opt stack 0
   972  00001E                     ModbusProcess_FC3@u16regsno:
   973                           	opt stack 0
   974  00001E                     ModbusProcess_FC6@u16add:
   975                           	opt stack 0
   976  00001E                     ymd_to_scalar@yr:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x1D
   980  00001E                     	ds	1
   981  00001F                     ??_ProcessDiary:
   982  00001F                     ??_CommandSetStatusLed:
   983  00001F                     ModbusProcess_FC1@u8bytesno:
   984                           	opt stack 0
   985  00001F                     ModbusProcess_FC5@u8currentBit:
   986                           	opt stack 0
   987  00001F                     ModbusProcess_FC15@u8frameByte:
   988                           	opt stack 0
   989  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x1E
   993  00001F                     	ds	1
   994  000020                     CommandSetStatusLed@commandData:
   995                           	opt stack 0
   996  000020                     ModbusProcess_FC3@u8StartAdd:
   997                           	opt stack 0
   998  000020                     ModbusValidateRequest@u16MsgCRC:
   999                           	opt stack 0
  1000  000020                     ModbusProcess_FC1@u16StartCoil:
  1001                           	opt stack 0
  1002  000020                     ModbusProcess_FC15@u16StartCoil:
  1003                           	opt stack 0
  1004  000020                     ModbusProcess_FC16@u16StartAdd:
  1005                           	opt stack 0
  1006  000020                     ymd_to_scalar@mo:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x1F
  1010  000020                     	ds	1
  1011  000021                     CommandSetStatusLed@led:
  1012                           	opt stack 0
  1013  000021                     ModbusProcess_FC3@i:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x20
  1017  000021                     	ds	1
  1018  000022                     ??_ProcessUserCommands:
  1019  000022                     ModbusValidateRequest@isSupported:
  1020                           	opt stack 0
  1021  000022                     ModbusProcess_FC16@u8regsno:
  1022                           	opt stack 0
  1023  000022                     ModbusProcess_FC1@u16currentCoil:
  1024                           	opt stack 0
  1025  000022                     ModbusProcess_FC15@u16Coilno:
  1026                           	opt stack 0
  1027  000022                     ymd_to_scalar@day:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x21
  1031  000022                     	ds	1
  1032  000023                     ModbusProcess_FC16@i:
  1033                           	opt stack 0
  1034  000023                     ProcessDiary@totalMinutes:
  1035                           	opt stack 0
  1036  000023                     ModbusValidateRequest@u16count:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x22
  1040  000023                     	ds	1
  1041  000024                     ??_ymd_to_scalar:
  1042  000024                     ModbusProcess_FC1@u8bitsno:
  1043                           	opt stack 0
  1044  000024                     ModbusProcess_FC15@regs:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x23
  1048  000024                     	ds	1
  1049  000025                     ModbusValidateRequest@i:
  1050                           	opt stack 0
  1051  000025                     ModbusProcess_FC15@u8currentBit:
  1052                           	opt stack 0
  1053  000025                     ModbusProcess_FC1@u16Coilno:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x24
  1057  000025                     	ds	1
  1058  000026                     ModbusValidateRequest@readDevId:
  1059                           	opt stack 0
  1060  000026                     ModbusProcess_FC15@u16currentCoil:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x25
  1064  000026                     	ds	1
  1065  000027                     ProcessUserCommands@v1:
  1066                           	opt stack 0
  1067  000027                     ModbusValidateRequest@u8regs:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x26
  1071  000027                     	ds	1
  1072  000028                     ProcessUserCommands@ledNum:
  1073                           	opt stack 0
  1074  000028                     ModbusProcess_FC15@u8bitsno:
  1075                           	opt stack 0
  1076  000028                     ModbusValidateRequest@u16regs:
  1077                           	opt stack 0
  1078  000028                     _ymd_to_scalar$2267:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x27
  1082  000028                     	ds	1
  1083  000029                     ??_io_poll:
  1084                           
  1085                           ; 1 bytes @ 0x28
  1086  000029                     	ds	1
  1087  00002A                     ymd_to_scalar@scalar:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x29
  1091  00002A                     	ds	3
  1092  00002D                     io_poll@lastEndAddress:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x2C
  1096  00002D                     	ds	1
  1097  00002E                     ?_mktime:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0x2D
  1101  00002E                     	ds	1
  1102  00002F                     io_poll@lastAddress:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2E
  1106  00002F                     	ds	2
  1107  000031                     io_poll@lastCommand:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x30
  1111  000031                     	ds	1
  1112  000032                     ??_mktime:
  1113  000032                     io_poll@lastFunction:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x31
  1117  000032                     	ds	14
  1118  000040                     mktime@tt:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x3F
  1122  000040                     	ds	4
  1123  000044                     mktime@timeptr:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x43
  1127  000044                     	ds	1
  1128  000045                     ModbusProcess_FC100@newRawTime:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x44
  1132  000045                     	ds	4
  1133  000049                     ModbusProcess_FC100@u8CopyBufferSize:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x48
  1137  000049                     	ds	1
  1138  00004A                     ModbusProcess_FC100@newTime:
  1139                           	opt stack 0
  1140                           
  1141                           ; 18 bytes @ 0x49
  1142  00004A                     	ds	18
  1143  00005C                     ModbusPoll@discreteInputs:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x5B
  1147  00005C                     	ds	2
  1148  00005E                     ModbusPoll@coils:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x5D
  1152  00005E                     	ds	1
  1153  00005F                     ModbusPoll@inputRegs:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x5E
  1157  00005F                     	ds	2
  1158  000061                     ModbusPoll@inputRegsCount:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x60
  1162  000061                     	ds	1
  1163  000062                     ModbusPoll@holdingRegs:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x61
  1167  000062                     	ds	2
  1168  000064                     ModbusPoll@holdingRegsCount:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x63
  1172  000064                     	ds	1
  1173  000065                     ModbusPoll@u8current:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x64
  1177  000065                     	ds	1
  1178  000066                     ModbusPoll@i8state:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x65
  1182  000066                     	ds	1
  1183  000067                     ModbusPoll@u8exception:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x66
  1187  000067                     	ds	1
  1188  000068                     ??_main:
  1189                           
  1190                           ; 1 bytes @ 0x67
  1191  000068                     	ds	5
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           postinc0	equ	0xFEE
  1197                           wreg	equ	0xFE8
  1198                           postdec1	equ	0xFE5
  1199                           fsr1h	equ	0xFE2
  1200                           fsr1l	equ	0xFE1
  1201                           
  1202 ;;
  1203 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1204 ;;
  1205 ;; *************** function _main *****************
  1206 ;; Defined at:
  1207 ;;		line 795 in file "main.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  minute          1   10[BANK0 ] unsigned char 
  1212 ;;  hour            1    5[BANK0 ] unsigned char 
  1213 ;;  curMs           4    6[BANK0 ] unsigned long 
  1214 ;;  lastMs          4    0[BANK0 ] unsigned long 
  1215 ;;  oldMinute       1    4[BANK0 ] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1225 ;;      Params:         0       0       0       0       0       0       0
  1226 ;;      Locals:         0      11       0       0       0       0       0
  1227 ;;      Temps:          5       0       0       0       0       0       0
  1228 ;;      Totals:         5      11       0       0       0       0       0
  1229 ;;Total ram usage:       16 bytes
  1230 ;; Hardware stack levels required when called:    8
  1231 ;; This function calls:
  1232 ;;		_AddSecond
  1233 ;;		_ConfigureOscillator
  1234 ;;		_GetTime
  1235 ;;		_InitApp
  1236 ;;		_InitFromEeprom
  1237 ;;		_LightStatusLed
  1238 ;;		_ModbusPoll
  1239 ;;		_ProcessDiary
  1240 ;;		_ProcessLightBlock
  1241 ;;		_ResetEvent
  1242 ;;		_SoundPlayNextStep
  1243 ;;		_StopPlaying
  1244 ;;		_getHourMin
  1245 ;;		_io_poll
  1246 ;;		_millis
  1247 ;;		_pwm_init
  1248 ;; This function is called by:
  1249 ;;		Startup code after reset
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text0
  1254  0012D2                     __ptext0:
  1255                           	opt stack 0
  1256  0012D2                     _main:
  1257                           	opt stack 23
  1258                           
  1259                           ;incstack = 0
  1260  0012D2  FFFF               	dw	65535
  1261                           
  1262                           ;main.c: 798: ConfigureOscillator();
  1263  0012D4  EC43  F017         	call	_ConfigureOscillator	;wreg free
  1264                           
  1265                           ;main.c: 801: InitApp();
  1266  0012D8  EC62  F012         	call	_InitApp	;wreg free
  1267                           
  1268                           ;main.c: 805: InitFromEeprom();
  1269  0012DC  ECC8  F010         	call	_InitFromEeprom	;wreg free
  1270                           
  1271                           ;main.c: 814: unsigned long lastMs = millis();
  1272  0012E0  EC58  F016         	call	_millis	;wreg free
  1273  0012E4  C007  F0E9         	movff	?_millis,main@lastMs
  1274  0012E8  C008  F0EA         	movff	?_millis+1,main@lastMs+1
  1275  0012EC  C009  F0EB         	movff	?_millis+2,main@lastMs+2
  1276  0012F0  C00A  F0EC         	movff	?_millis+3,main@lastMs+3
  1277                           
  1278                           ;main.c: 817: pwm_init();
  1279  0012F4  ECFE  F016         	call	_pwm_init	;wreg free
  1280                           
  1281                           ;main.c: 824: uint8_t oldMinute = 0xff;
  1282  0012F8  0100               	movlb	0	; () banked
  1283  0012FA  69ED               	setf	main@oldMinute& (0+255),b
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;main.c: 826: LightStatusLed(0x07, 1, 0);
  1287  0012FC  0E01               	movlw	1
  1288  0012FE  6E07               	movwf	LightStatusLed@on,c
  1289  001300  0E00               	movlw	0
  1290  001302  6E08               	movwf	LightStatusLed@blink,c
  1291  001304  0E07               	movlw	7
  1292  001306  EC87  F00D         	call	_LightStatusLed
  1293                           
  1294                           ;main.c: 827: LightStatusLed(0x05, 1, 1);
  1295  00130A  0E01               	movlw	1
  1296  00130C  6E07               	movwf	LightStatusLed@on,c
  1297  00130E  6E08               	movwf	LightStatusLed@blink,c
  1298  001310  0E05               	movlw	5
  1299  001312  EC87  F00D         	call	_LightStatusLed
  1300  001316                     l7474:
  1301  001316  FFFF               	dw	65535	; assembler added errata NOP
  1302                           
  1303                           ;main.c: 829: {
  1304                           ;main.c: 830: unsigned long curMs = millis();
  1305  001318  EC58  F016         	call	_millis	;wreg free
  1306  00131C  C007  F0EF         	movff	?_millis,main@curMs
  1307  001320  C008  F0F0         	movff	?_millis+1,main@curMs+1
  1308  001324  C009  F0F1         	movff	?_millis+2,main@curMs+2
  1309  001328  C00A  F0F2         	movff	?_millis+3,main@curMs+3
  1310                           
  1311                           ;main.c: 831: ProcessLightBlock(&curMs);
  1312  00132C  0EEF               	movlw	main@curMs& (0+255)
  1313  00132E  EC6D  F007         	call	_ProcessLightBlock
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 833: if(_isSoundPlaying && curMs >= _playingEndMs)
  1317  001332  51D0               	movf	__isSoundPlaying& (0+255),w,b
  1318  001334  E00B               	bz	l7484
  1319                           
  1320                           ; BSR set to: 0
  1321  001336  51A0               	movf	__playingEndMs& (0+255),w,b
  1322  001338  5DEF               	subwf	main@curMs& (0+255),w,b
  1323  00133A  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1324  00133C  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1325  00133E  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1326  001340  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1327  001342  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1328  001344  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1329  001346  E302               	bnc	l7484
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 834: {
  1333                           ;main.c: 835: SoundPlayNextStep();
  1334  001348  EC0F  F010         	call	_SoundPlayNextStep	;wreg free
  1335  00134C                     l7484:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 836: }
  1339                           ;main.c: 839: if(PORTCbits.RC1 == 0)
  1340  00134C  B282               	btfsc	3970,1,c	;volatile
  1341  00134E  D008               	goto	l7492
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;main.c: 840: {
  1345                           ;main.c: 842: if(currentAlarmedEventNum != 0xff)
  1346  001350  2874               	incf	_currentAlarmedEventNum,w,c
  1347  001352  E004               	bz	l7490
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;main.c: 843: {
  1351                           ;main.c: 844: ResetEvent(1);
  1352  001354  0E01               	movlw	1
  1353  001356  ECD6  F014         	call	_ResetEvent
  1354                           
  1355                           ;main.c: 845: }
  1356  00135A  D002               	goto	l7492
  1357  00135C                     l7490:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 846: else
  1361                           ;main.c: 847: {
  1362                           ;main.c: 848: StopPlaying();
  1363  00135C  EC0F  F017         	call	_StopPlaying	;wreg free
  1364  001360                     l7492:
  1365  001360  FFFF               	dw	65535	; assembler added errata NOP
  1366                           
  1367                           ;main.c: 849: }
  1368                           ;main.c: 851: }
  1369                           ;main.c: 854: if(curMs - lastMs >= 1000)
  1370  001362  0100               	movlb	0	; () banked
  1371  001364  51E9               	movf	main@lastMs& (0+255),w,b
  1372  001366  5DEF               	subwf	main@curMs& (0+255),w,b
  1373  001368  6E68               	movwf	??_main& (0+255),c
  1374  00136A  51EA               	movf	(main@lastMs+1)& (0+255),w,b
  1375  00136C  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1376  00136E  6E69               	movwf	(??_main+1)& (0+255),c
  1377  001370  51EB               	movf	(main@lastMs+2)& (0+255),w,b
  1378  001372  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1379  001374  6E6A               	movwf	(??_main+2)& (0+255),c
  1380  001376  51EC               	movf	(main@lastMs+3)& (0+255),w,b
  1381  001378  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1382  00137A  6E6B               	movwf	(??_main+3)& (0+255),c
  1383  00137C  506B               	movf	??_main+3,w,c
  1384  00137E  106A               	iorwf	??_main+2,w,c
  1385  001380  E105               	bnz	u6280
  1386  001382  0EE8               	movlw	232
  1387  001384  5C68               	subwf	??_main,w,c
  1388  001386  0E03               	movlw	3
  1389  001388  5869               	subwfb	??_main+1,w,c
  1390  00138A  E34A               	bnc	l7522
  1391  00138C                     u6280:
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 855: {
  1395                           ;main.c: 856: AddSecond();
  1396  00138C  EC07  F017         	call	_AddSecond	;wreg free
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 858: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1400  001390  2874               	incf	_currentAlarmedEventNum,w,c
  1401  001392  E015               	bz	l7502
  1402                           
  1403                           ; BSR set to: 0
  1404  001394  EC3F  F017         	call	_GetTime	;wreg free
  1405  001398  6ED9               	movwf	fsr2l,c
  1406  00139A  6ADA               	clrf	fsr2h,c
  1407  00139C  0100               	movlb	0	; () banked
  1408  00139E  51AC               	movf	_eventResetSecond& (0+255),w,b
  1409  0013A0  5CDE               	subwf	postinc2,w,c
  1410  0013A2  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1411  0013A4  58DE               	subwfb	postinc2,w,c
  1412  0013A6  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1413  0013A8  58DE               	subwfb	postinc2,w,c
  1414  0013AA  50DE               	movf	postinc2,w,c
  1415  0013AC  0A80               	xorlw	128
  1416  0013AE  6E6C               	movwf	(??_main+4)& (0+255),c
  1417  0013B0  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1418  0013B2  0A80               	xorlw	128
  1419  0013B4  586C               	subwfb	(??_main+4)& (0+255),w,c
  1420  0013B6  E303               	bnc	l7502
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;main.c: 859: {
  1424                           ;main.c: 860: ResetEvent(0);
  1425  0013B8  0E00               	movlw	0
  1426  0013BA  ECD6  F014         	call	_ResetEvent
  1427  0013BE                     l7502:
  1428                           
  1429                           ;main.c: 861: }
  1430                           ;main.c: 863: _MODBUSInputRegs[5] = *GetTime();
  1431  0013BE  EC3F  F017         	call	_GetTime	;wreg free
  1432  0013C2  6ED9               	movwf	fsr2l,c
  1433  0013C4  6ADA               	clrf	fsr2h,c
  1434  0013C6  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1435  0013CA  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1436                           
  1437                           ;main.c: 864: uint8_t hour = 0, minute = 0;
  1438  0013CE  0100               	movlb	0	; () banked
  1439  0013D0  6BEE               	clrf	main@hour& (0+255),b
  1440                           
  1441                           ; BSR set to: 0
  1442  0013D2  6BF3               	clrf	main@minute& (0+255),b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 866: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1446  0013D4  0EF3               	movlw	low main@minute
  1447  0013D6  6E07               	movwf	getHourMin@min,c
  1448  0013D8  0EEE               	movlw	main@hour& (0+255)
  1449  0013DA  EC2C  F016         	call	_getHourMin
  1450  0013DE  0900               	iorlw	0
  1451  0013E0  E00F               	bz	l7518
  1452  0013E2  0100               	movlb	0	; () banked
  1453  0013E4  51F3               	movf	main@minute& (0+255),w,b
  1454  0013E6  19ED               	xorwf	main@oldMinute& (0+255),w,b
  1455  0013E8  E00B               	bz	l7518
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 867: {
  1459                           ;main.c: 868: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1460  0013EA  51EE               	movf	main@hour& (0+255),w,b
  1461  0013EC  6E68               	movwf	??_main& (0+255),c
  1462  0013EE  51F3               	movf	main@minute& (0+255),w,b
  1463  0013F0  0101               	movlb	1	; () banked
  1464  0013F2  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1465  0013F4  C068  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1466                           
  1467                           ; BSR set to: 1
  1468                           ;main.c: 870: oldMinute = minute;
  1469  0013F8  C0F3  F0ED         	movff	main@minute,main@oldMinute
  1470                           
  1471                           ; BSR set to: 1
  1472                           ;main.c: 871: ProcessDiary();
  1473  0013FC  ECB0  F00F         	call	_ProcessDiary	;wreg free
  1474  001400                     l7518:
  1475                           
  1476                           ;main.c: 872: }
  1477                           ;main.c: 874: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1478  001400  0100               	movlb	0	; () banked
  1479  001402  51EE               	movf	main@hour& (0+255),w,b
  1480  001404  6E68               	movwf	??_main& (0+255),c
  1481  001406  51F3               	movf	main@minute& (0+255),w,b
  1482  001408  0101               	movlb	1	; () banked
  1483  00140A  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1484  00140C  C068  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1485                           
  1486                           ; BSR set to: 1
  1487                           ;main.c: 876: lastMs = curMs;
  1488  001410  C0EF  F0E9         	movff	main@curMs,main@lastMs
  1489  001414  C0F0  F0EA         	movff	main@curMs+1,main@lastMs+1
  1490  001418  C0F1  F0EB         	movff	main@curMs+2,main@lastMs+2
  1491  00141C  C0F2  F0EC         	movff	main@curMs+3,main@lastMs+3
  1492  001420                     l7522:
  1493                           
  1494                           ;main.c: 878: }
  1495                           ;main.c: 879: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1496  001420  6A5D               	clrf	ModbusPoll@discreteInputs+1,c
  1497  001422  6A5C               	clrf	ModbusPoll@discreteInputs,c
  1498  001424  0EDE               	movlw	low __MODBUSCoils
  1499  001426  6E5E               	movwf	ModbusPoll@coils,c
  1500  001428  0EAA               	movlw	low __MODBUSInputRegs
  1501  00142A  6E5F               	movwf	ModbusPoll@inputRegs,c
  1502  00142C  0E01               	movlw	high __MODBUSInputRegs
  1503  00142E  6E60               	movwf	ModbusPoll@inputRegs+1,c
  1504  001430  0E0F               	movlw	15
  1505  001432  6E61               	movwf	ModbusPoll@inputRegsCount,c
  1506  001434  0E8C               	movlw	low __MODBUSHoldingRegs
  1507  001436  6E62               	movwf	ModbusPoll@holdingRegs,c
  1508  001438  0E01               	movlw	high __MODBUSHoldingRegs
  1509  00143A  6E63               	movwf	ModbusPoll@holdingRegs+1,c
  1510  00143C  0E0F               	movlw	15
  1511  00143E  6E64               	movwf	ModbusPoll@holdingRegsCount,c
  1512  001440  EC98  F008         	call	_ModbusPoll	;wreg free
  1513                           
  1514                           ;main.c: 880: io_poll();
  1515  001444  EC1B  F012         	call	_io_poll	;wreg free
  1516  001448  D766               	goto	l7474
  1517  00144A                     __end_of_main:
  1518                           	opt stack 0
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1h	equ	0xFE2
  1527                           fsr1l	equ	0xFE1
  1528                           postinc2	equ	0xFDE
  1529                           postdec2	equ	0xFDD
  1530                           fsr2h	equ	0xFDA
  1531                           fsr2l	equ	0xFD9
  1532                           
  1533 ;; *************** function _pwm_init *****************
  1534 ;; Defined at:
  1535 ;;		line 351 in file "main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    2
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text1
  1564  002DFC                     __ptext1:
  1565                           	opt stack 0
  1566  002DFC                     _pwm_init:
  1567                           	opt stack 28
  1568                           
  1569                           ;incstack = 0
  1570  002DFC  FFFF               	dw	65535
  1571                           
  1572                           ;main.c: 363: CCP1CONbits.CCP1M = 0x0f;
  1573  002DFE  0E0F               	movlw	15
  1574  002E00  12BD               	iorwf	4029,f,c	;volatile
  1575                           
  1576                           ;main.c: 370: PR2 = 255;
  1577  002E02  68CB               	setf	4043,c	;volatile
  1578                           
  1579                           ;main.c: 373: T2CONbits.T2CKPS1 = 1;
  1580  002E04  82CA               	bsf	4042,1,c	;volatile
  1581                           
  1582                           ;main.c: 374: T2CONbits.T2CKPS0 = 0;
  1583  002E06  90CA               	bcf	4042,0,c	;volatile
  1584                           
  1585                           ;main.c: 377: TRISCbits.RC2 = 0;
  1586  002E08  9494               	bcf	3988,2,c	;volatile
  1587  002E0A  0012               	return		;funcret
  1588  002E0C  FFFF               	dw	65535	; errata NOP
  1589  002E0E                     __end_of_pwm_init:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1h	equ	0xFE2
  1599                           fsr1l	equ	0xFE1
  1600                           postinc2	equ	0xFDE
  1601                           postdec2	equ	0xFDD
  1602                           fsr2h	equ	0xFDA
  1603                           fsr2l	equ	0xFD9
  1604                           
  1605 ;; *************** function _io_poll *****************
  1606 ;; Defined at:
  1607 ;;		line 987 in file "main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  lastAddress     2   46[COMRAM] unsigned int 
  1612 ;;  lastEndAddre    2   44[COMRAM] unsigned int 
  1613 ;;  lastFunction    1   49[COMRAM] PTR unsigned char 
  1614 ;;		 -> _lastFunction(1), 
  1615 ;;  lastCommand     1   48[COMRAM] unsigned char 
  1616 ;;  v1              1    0        unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1626 ;;      Params:         0       0       0       0       0       0       0
  1627 ;;      Locals:         6       0       0       0       0       0       0
  1628 ;;      Temps:          4       0       0       0       0       0       0
  1629 ;;      Totals:        10       0       0       0       0       0       0
  1630 ;;Total ram usage:       10 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    7
  1633 ;; This function calls:
  1634 ;;		_InitFromEeprom
  1635 ;;		_LightStatusLed
  1636 ;;		_LoadNextEvent
  1637 ;;		_ModbusGetLastCommand
  1638 ;;		_ModbusSetExceptionStatusBit
  1639 ;;		_ProcessUserCommands
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text2
  1646  002436                     __ptext2:
  1647                           	opt stack 0
  1648  002436                     _io_poll:
  1649                           	opt stack 23
  1650                           
  1651                           ;incstack = 0
  1652  002436  FFFF               	dw	65535
  1653                           
  1654                           ;main.c: 989: uint16_t lastAddress;
  1655                           ;main.c: 990: uint16_t lastEndAddress;
  1656                           ;main.c: 991: uint8_t lastCommand;
  1657                           ;main.c: 993: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddress
      +                          , &lastCommand);
  1658  002438  0E2D               	movlw	low io_poll@lastEndAddress
  1659  00243A  6E07               	movwf	ModbusGetLastCommand@count,c
  1660  00243C  0E31               	movlw	low io_poll@lastCommand
  1661  00243E  6E08               	movwf	ModbusGetLastCommand@command,c
  1662  002440  0E2F               	movlw	io_poll@lastAddress& (0+255)
  1663  002442  ECA0  F015         	call	_ModbusGetLastCommand
  1664  002446  6E32               	movwf	io_poll@lastFunction,c
  1665                           
  1666                           ;main.c: 994: if(*lastFunction == MB_FC_NONE)
  1667  002448  5032               	movf	io_poll@lastFunction,w,c
  1668  00244A  6ED9               	movwf	fsr2l,c
  1669  00244C  6ADA               	clrf	fsr2h,c
  1670  00244E  50DF               	movf	indf2,w,c
  1671  002450  E036               	bz	l487
  1672                           
  1673                           ;main.c: 997: lastEndAddress += lastAddress - 1;
  1674  002452  6829               	setf	??_io_poll& (0+255),c
  1675  002454  682A               	setf	(??_io_poll+1)& (0+255),c
  1676  002456  C02F  F02B         	movff	io_poll@lastAddress,??_io_poll+2
  1677  00245A  C030  F02C         	movff	io_poll@lastAddress+1,??_io_poll+3
  1678  00245E  5029               	movf	??_io_poll,w,c
  1679  002460  262B               	addwf	??_io_poll+2,f,c
  1680  002462  502A               	movf	??_io_poll+1,w,c
  1681  002464  222C               	addwfc	??_io_poll+3,f,c
  1682  002466  502B               	movf	??_io_poll+2,w,c
  1683  002468  262D               	addwf	io_poll@lastEndAddress,f,c
  1684  00246A  502C               	movf	??_io_poll+3,w,c
  1685  00246C  222E               	addwfc	io_poll@lastEndAddress+1,f,c
  1686                           
  1687                           ;main.c: 999: uint8_t v1;
  1688                           ;main.c: 1000: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  1689  00246E  5032               	movf	io_poll@lastFunction,w,c
  1690  002470  6ED9               	movwf	fsr2l,c
  1691  002472  6ADA               	clrf	fsr2h,c
  1692  002474  0E64               	movlw	100
  1693  002476  18DE               	xorwf	postinc2,w,c
  1694  002478  E10C               	bnz	l7442
  1695                           
  1696                           ;main.c: 1001: {
  1697                           ;main.c: 1002: if(lastCommand == 0x10)
  1698  00247A  0E10               	movlw	16
  1699  00247C  1831               	xorwf	io_poll@lastCommand,w,c
  1700  00247E  E11F               	bnz	l487
  1701                           
  1702                           ;main.c: 1003: {
  1703                           ;main.c: 1004: LightStatusLed(0x05, 0, 0);
  1704  002480  0E00               	movlw	0
  1705  002482  6E07               	movwf	LightStatusLed@on,c
  1706  002484  6E08               	movwf	LightStatusLed@blink,c
  1707  002486  0E05               	movlw	5
  1708  002488  EC87  F00D         	call	_LightStatusLed
  1709                           
  1710                           ;main.c: 1005: LoadNextEvent();
  1711  00248C  EC6C  F00B         	call	_LoadNextEvent	;wreg free
  1712  002490  D016               	goto	l487
  1713  002492                     l7442:
  1714                           
  1715                           ;main.c: 1008: }
  1716                           ;main.c: 1009: if(*lastFunction == MB_FC_USER_COMMAND)
  1717  002492  5032               	movf	io_poll@lastFunction,w,c
  1718  002494  6ED9               	movwf	fsr2l,c
  1719  002496  6ADA               	clrf	fsr2h,c
  1720  002498  0E65               	movlw	101
  1721  00249A  18DE               	xorwf	postinc2,w,c
  1722  00249C  E103               	bnz	l7452
  1723                           
  1724                           ;main.c: 1010: {
  1725                           ;main.c: 1011: ProcessUserCommands();
  1726  00249E  EC02  F00E         	call	_ProcessUserCommands	;wreg free
  1727  0024A2  D00D               	goto	l487
  1728  0024A4                     l7452:
  1729                           
  1730                           ;main.c: 1091: }
  1731                           ;main.c: 1094: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  1732  0024A4  5032               	movf	io_poll@lastFunction,w,c
  1733  0024A6  6ED9               	movwf	fsr2l,c
  1734  0024A8  6ADA               	clrf	fsr2h,c
  1735  0024AA  0E15               	movlw	21
  1736  0024AC  18DE               	xorwf	postinc2,w,c
  1737  0024AE  E107               	bnz	l487
  1738                           
  1739                           ;main.c: 1095: {
  1740                           ;main.c: 1096: InitFromEeprom();
  1741  0024B0  ECC8  F010         	call	_InitFromEeprom	;wreg free
  1742                           
  1743                           ;main.c: 1097: ModbusSetExceptionStatusBit(0, 1);
  1744  0024B4  0E01               	movlw	1
  1745  0024B6  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1746  0024B8  0E00               	movlw	0
  1747  0024BA  EC66  F014         	call	_ModbusSetExceptionStatusBit
  1748  0024BE                     l487:
  1749  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  1750  0024C0  0012               	return		;funcret
  1751  0024C2  FFFF               	dw	65535	; errata NOP
  1752  0024C4                     __end_of_io_poll:
  1753                           	opt stack 0
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1h	equ	0xFE2
  1762                           fsr1l	equ	0xFE1
  1763                           indf2	equ	0xFDF
  1764                           postinc2	equ	0xFDE
  1765                           postdec2	equ	0xFDD
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           
  1769 ;; *************** function _ProcessUserCommands *****************
  1770 ;; Defined at:
  1771 ;;		line 954 in file "main.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  ledNum          1   39[COMRAM] unsigned char 
  1776 ;;  v1              1   38[COMRAM] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1786 ;;      Params:         0       0       0       0       0       0       0
  1787 ;;      Locals:         2       0       0       0       0       0       0
  1788 ;;      Temps:          5       0       0       0       0       0       0
  1789 ;;      Totals:         7       0       0       0       0       0       0
  1790 ;;Total ram usage:        7 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    6
  1793 ;; This function calls:
  1794 ;;		_CommandSetStatusLed
  1795 ;;		_LightLed
  1796 ;;		_ModbusGetUserCommandAdditional1Hi
  1797 ;;		_ModbusGetUserCommandAdditional1Lo
  1798 ;;		_ModbusGetUserCommandData
  1799 ;;		_ModbusGetUserCommandId
  1800 ;;		_ModbusSetExceptionStatusBit
  1801 ;;		_PlaySound
  1802 ;; This function is called by:
  1803 ;;		_io_poll
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text3
  1808  001C04                     __ptext3:
  1809                           	opt stack 0
  1810  001C04                     _ProcessUserCommands:
  1811                           	opt stack 23
  1812                           
  1813                           ;incstack = 0
  1814  001C04  FFFF               	dw	65535
  1815                           
  1816                           ;main.c: 956: uint8_t v1;
  1817                           ;main.c: 957: switch(*ModbusGetUserCommandId())
  1818  001C06  D05E               	goto	l6326
  1819  001C08                     l468:
  1820                           
  1821                           ;main.c: 960: eventCount = 0;
  1822  001C08  6A71               	clrf	_eventCount,c
  1823  001C0A                     l470:
  1824  001C0A  FFFF               	dw	65535	; assembler added errata NOP
  1825  001C0C  B2A6               	btfsc	4006,1,c	;volatile
  1826  001C0E  D7FD               	goto	l470
  1827  001C10  0E0A               	movlw	10
  1828  001C12  6EA9               	movwf	4009,c	;volatile
  1829  001C14  6AA8               	clrf	4008,c	;volatile
  1830  001C16  90D8               	bcf	status,0,c	;volatile
  1831  001C18  BEF2               	btfsc	intcon,7,c	;volatile
  1832  001C1A  80D8               	bsf	status,0,c	;volatile
  1833  001C1C  9EF2               	bcf	intcon,7,c	;volatile
  1834  001C1E  84A6               	bsf	4006,2,c	;volatile
  1835  001C20  0E55               	movlw	85
  1836  001C22  6EA7               	movwf	4007,c	;volatile
  1837  001C24  0EAA               	movlw	170
  1838  001C26  6EA7               	movwf	4007,c	;volatile
  1839  001C28  82A6               	bsf	4006,1,c	;volatile
  1840  001C2A  94A6               	bcf	4006,2,c	;volatile
  1841  001C2C  E301               	bnc	l6308
  1842  001C2E  8EF2               	bsf	intcon,7,c	;volatile
  1843  001C30                     l6308:
  1844                           
  1845                           ;main.c: 962: ModbusSetExceptionStatusBit(0, 1);
  1846  001C30  0E01               	movlw	1
  1847  001C32  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1848  001C34  0E00               	movlw	0
  1849  001C36  EC66  F014         	call	_ModbusSetExceptionStatusBit
  1850                           
  1851                           ;main.c: 963: break;
  1852  001C3A  D052               	goto	l481
  1853  001C3C                     l6310:
  1854                           
  1855                           ;main.c: 967: v1 = *ModbusGetUserCommandAdditional1Lo();
  1856  001C3C  EC37  F017         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  1857  001C40  6ED9               	movwf	fsr2l,c
  1858  001C42  6ADA               	clrf	fsr2h,c
  1859  001C44  50DF               	movf	indf2,w,c
  1860  001C46  6E27               	movwf	ProcessUserCommands@v1,c
  1861                           
  1862                           ;main.c: 969: uint8_t ledNum = *ModbusGetUserCommandAdditional1Hi();
  1863  001C48  EC3B  F017         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  1864  001C4C  6ED9               	movwf	fsr2l,c
  1865  001C4E  6ADA               	clrf	fsr2h,c
  1866  001C50  50DF               	movf	indf2,w,c
  1867  001C52  6E28               	movwf	ProcessUserCommands@ledNum,c
  1868                           
  1869                           ;main.c: 970: if(ledNum == 0 || ledNum > 60 - _maxDiaryEvents)
  1870  001C54  5028               	movf	ProcessUserCommands@ledNum,w,c
  1871  001C56  E044               	bz	l481
  1872  001C58  5028               	movf	ProcessUserCommands@ledNum,w,c
  1873  001C5A  6E22               	movwf	??_ProcessUserCommands& (0+255),c
  1874  001C5C  6A23               	clrf	(??_ProcessUserCommands+1)& (0+255),c
  1875  001C5E  0E3C               	movlw	60
  1876  001C60  6E24               	movwf	(??_ProcessUserCommands+2)& (0+255),c
  1877  001C62  6A25               	clrf	(??_ProcessUserCommands+3)& (0+255),c
  1878  001C64  506D               	movf	__maxDiaryEvents,w,c
  1879  001C66  5E24               	subwf	??_ProcessUserCommands+2,f,c
  1880  001C68  0E00               	movlw	0
  1881  001C6A  5A25               	subwfb	??_ProcessUserCommands+3,f,c
  1882  001C6C  5022               	movf	??_ProcessUserCommands,w,c
  1883  001C6E  5C24               	subwf	??_ProcessUserCommands+2,w,c
  1884  001C70  5025               	movf	??_ProcessUserCommands+3,w,c
  1885  001C72  0A80               	xorlw	128
  1886  001C74  6E26               	movwf	(??_ProcessUserCommands+4)& (0+255),c
  1887  001C76  5023               	movf	??_ProcessUserCommands+1,w,c
  1888  001C78  0A80               	xorlw	128
  1889  001C7A  5826               	subwfb	(??_ProcessUserCommands+4)& (0+255),w,c
  1890  001C7C  E331               	bnc	l481
  1891                           
  1892                           ;main.c: 972: LightLed(ledNum, v1 & 0x03, (((v1) >> (2)) & 0x01));
  1893  001C7E  5027               	movf	ProcessUserCommands@v1,w,c
  1894  001C80  0B03               	andlw	3
  1895  001C82  6E07               	movwf	LightLed@ledState,c
  1896  001C84  4027               	rrncf	ProcessUserCommands@v1,w,c
  1897  001C86  42E8               	rrncf	wreg,f,c
  1898  001C88  0B3F               	andlw	63
  1899  001C8A  0B01               	andlw	1
  1900  001C8C  6E08               	movwf	LightLed@blink,c
  1901  001C8E  5028               	movf	ProcessUserCommands@ledNum,w,c
  1902  001C90  ECB5  F004         	call	_LightLed
  1903                           
  1904                           ;main.c: 973: ModbusSetExceptionStatusBit(0, 1);
  1905  001C94  0E01               	movlw	1
  1906  001C96  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1907  001C98  0E00               	movlw	0
  1908  001C9A  EC66  F014         	call	_ModbusSetExceptionStatusBit
  1909                           
  1910                           ;main.c: 974: break;
  1911  001C9E  D020               	goto	l481
  1912  001CA0                     l6320:
  1913                           
  1914                           ;main.c: 978: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo(
      +                          ));
  1915  001CA0  EC37  F017         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  1916  001CA4  6ED9               	movwf	fsr2l,c
  1917  001CA6  6ADA               	clrf	fsr2h,c
  1918  001CA8  50DF               	movf	indf2,w,c
  1919  001CAA  6E17               	movwf	PlaySound@playDuration,c
  1920  001CAC  6A18               	clrf	PlaySound@playDuration+1,c
  1921  001CAE  EC33  F017         	call	_ModbusGetUserCommandData	;wreg free
  1922  001CB2  6ED9               	movwf	fsr2l,c
  1923  001CB4  6ADA               	clrf	fsr2h,c
  1924  001CB6  50DF               	movf	indf2,w,c
  1925  001CB8  ECE3  F00E         	call	_PlaySound
  1926                           
  1927                           ;main.c: 979: break;
  1928  001CBC  D011               	goto	l481
  1929  001CBE                     l6322:
  1930                           
  1931                           ;main.c: 982: CommandSetStatusLed();
  1932  001CBE  ECA4  F012         	call	_CommandSetStatusLed	;wreg free
  1933                           
  1934                           ;main.c: 983: break;
  1935  001CC2  D00E               	goto	l481
  1936  001CC4                     l6326:
  1937  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  1938  001CC6  EC2F  F017         	call	_ModbusGetUserCommandId	;wreg free
  1939  001CCA  6ED9               	movwf	fsr2l,c
  1940  001CCC  6ADA               	clrf	fsr2h,c
  1941  001CCE  50DF               	movf	indf2,w,c
  1942                           
  1943                           ; Switch size 1, requested type "speed"
  1944                           ; Number of cases is 4, Range of values is 128 to 145
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte           13     7 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949  001CD0  0A80               	xorlw	128	; case 128
  1950  001CD2  E09A               	bz	l468
  1951  001CD4  0A02               	xorlw	2	; case 130
  1952  001CD6  E0B2               	bz	l6310
  1953  001CD8  0A01               	xorlw	1	; case 131
  1954  001CDA  E0F1               	bz	l6322
  1955  001CDC  0A12               	xorlw	18	; case 145
  1956  001CDE  E0E0               	bz	l6320
  1957  001CE0                     l481:
  1958  001CE0  FFFF               	dw	65535	; assembler added errata NOP
  1959  001CE2  0012               	return		;funcret
  1960  001CE4  FFFF               	dw	65535	; errata NOP
  1961  001CE6                     __end_of_ProcessUserCommands:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           intcon	equ	0xFF2
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1h	equ	0xFE2
  1972                           fsr1l	equ	0xFE1
  1973                           indf2	equ	0xFDF
  1974                           postinc2	equ	0xFDE
  1975                           postdec2	equ	0xFDD
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _ModbusGetUserCommandId *****************
  1981 ;; Defined at:
  1982 ;;		line 192 in file "ModbusRtu.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      PTR unsigned char 
  1989 ;; Registers used:
  1990 ;;		wreg
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1996 ;;      Params:         2       0       0       0       0       0       0
  1997 ;;      Locals:         0       0       0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0
  1999 ;;      Totals:         2       0       0       0       0       0       0
  2000 ;;Total ram usage:        2 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    2
  2003 ;; This function calls:
  2004 ;;		Nothing
  2005 ;; This function is called by:
  2006 ;;		_ProcessUserCommands
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text4
  2011  002E5E                     __ptext4:
  2012                           	opt stack 0
  2013  002E5E                     _ModbusGetUserCommandId:
  2014                           	opt stack 26
  2015                           
  2016                           ;incstack = 0
  2017  002E5E  FFFF               	dw	65535
  2018  002E60  0EE7               	movlw	_ModbusUserCommandId& (0+255)
  2019  002E62  0012               	return		;funcret
  2020  002E64  FFFF               	dw	65535	; errata NOP
  2021  002E66                     __end_of_ModbusGetUserCommandId:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           intcon	equ	0xFF2
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           postdec1	equ	0xFE5
  2031                           fsr1h	equ	0xFE2
  2032                           fsr1l	equ	0xFE1
  2033                           indf2	equ	0xFDF
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _CommandSetStatusLed *****************
  2041 ;; Defined at:
  2042 ;;		line 935 in file "main.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  led             1   32[COMRAM] unsigned char 
  2047 ;;  commandData     1   31[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2057 ;;      Params:         0       0       0       0       0       0       0
  2058 ;;      Locals:         2       0       0       0       0       0       0
  2059 ;;      Temps:          1       0       0       0       0       0       0
  2060 ;;      Totals:         3       0       0       0       0       0       0
  2061 ;;Total ram usage:        3 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    5
  2064 ;; This function calls:
  2065 ;;		_LightStatusLed
  2066 ;;		_ModbusGetUserCommandAdditional1Hi
  2067 ;;		_ModbusGetUserCommandAdditional1Lo
  2068 ;;		_ModbusGetUserCommandData
  2069 ;;		_ModbusSetExceptionStatusBit
  2070 ;;		_PlaySound
  2071 ;;		_StopPlaying
  2072 ;; This function is called by:
  2073 ;;		_ProcessUserCommands
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text5
  2078  002548                     __ptext5:
  2079                           	opt stack 0
  2080  002548                     _CommandSetStatusLed:
  2081                           	opt stack 23
  2082                           
  2083                           ;incstack = 0
  2084  002548  FFFF               	dw	65535
  2085                           
  2086                           ;main.c: 939: uint8_t commandData = *ModbusGetUserCommandData();
  2087  00254A  EC33  F017         	call	_ModbusGetUserCommandData	;wreg free
  2088  00254E  6ED9               	movwf	fsr2l,c
  2089  002550  6ADA               	clrf	fsr2h,c
  2090  002552  50DF               	movf	indf2,w,c
  2091  002554  6E20               	movwf	CommandSetStatusLed@commandData,c
  2092                           
  2093                           ;main.c: 940: uint8_t led = commandData & 0x07;
  2094  002556  5020               	movf	CommandSetStatusLed@commandData,w,c
  2095  002558  0B07               	andlw	7
  2096  00255A  6E21               	movwf	CommandSetStatusLed@led,c
  2097                           
  2098                           ;main.c: 941: if(led >= 0x05)
  2099  00255C  0E04               	movlw	4
  2100  00255E  6421               	cpfsgt	CommandSetStatusLed@led,c
  2101  002560  D001               	goto	l6120
  2102  002562  D02E               	goto	l463
  2103  002564                     l6120:
  2104  002564  FFFF               	dw	65535	; assembler added errata NOP
  2105                           
  2106                           ;main.c: 943: if((((commandData) >> (7)) & 0x01) == 0)
  2107  002566  6A1F               	clrf	??_CommandSetStatusLed& (0+255),c
  2108  002568  AE20               	btfss	CommandSetStatusLed@commandData,7,c
  2109  00256A  D001               	bra	u5075
  2110  00256C  2A1F               	incf	??_CommandSetStatusLed& (0+255),f,c
  2111  00256E                     u5075:
  2112  00256E  B01F               	btfsc	??_CommandSetStatusLed,0,c
  2113  002570  D009               	goto	l6128
  2114                           
  2115                           ;main.c: 944: {
  2116                           ;main.c: 945: LightStatusLed(led, 0, 0);
  2117  002572  0E00               	movlw	0
  2118  002574  6E07               	movwf	LightStatusLed@on,c
  2119  002576  6E08               	movwf	LightStatusLed@blink,c
  2120  002578  5021               	movf	CommandSetStatusLed@led,w,c
  2121  00257A  EC87  F00D         	call	_LightStatusLed
  2122                           
  2123                           ;main.c: 946: StopPlaying();
  2124  00257E  EC0F  F017         	call	_StopPlaying	;wreg free
  2125  002582  D01E               	goto	l463
  2126  002584                     l6128:
  2127  002584  FFFF               	dw	65535	; assembler added errata NOP
  2128                           
  2129                           ;main.c: 948: }
  2130                           ;main.c: 949: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  2131  002586  0E01               	movlw	1
  2132  002588  6E07               	movwf	LightStatusLed@on,c
  2133  00258A  4420               	rlncf	CommandSetStatusLed@commandData,w,c
  2134  00258C  46E8               	rlncf	wreg,f,c
  2135  00258E  0B03               	andlw	3
  2136  002590  0B01               	andlw	1
  2137  002592  6E08               	movwf	LightStatusLed@blink,c
  2138  002594  5021               	movf	CommandSetStatusLed@led,w,c
  2139  002596  EC87  F00D         	call	_LightStatusLed
  2140                           
  2141                           ;main.c: 950: PlaySound(*ModbusGetUserCommandAdditional1Hi(), *ModbusGetUserCommandAddit
      +                          ional1Lo());
  2142  00259A  EC37  F017         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2143  00259E  6ED9               	movwf	fsr2l,c
  2144  0025A0  6ADA               	clrf	fsr2h,c
  2145  0025A2  50DF               	movf	indf2,w,c
  2146  0025A4  6E17               	movwf	PlaySound@playDuration,c
  2147  0025A6  6A18               	clrf	PlaySound@playDuration+1,c
  2148  0025A8  EC3B  F017         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2149  0025AC  6ED9               	movwf	fsr2l,c
  2150  0025AE  6ADA               	clrf	fsr2h,c
  2151  0025B0  50DF               	movf	indf2,w,c
  2152  0025B2  ECE3  F00E         	call	_PlaySound
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 951: ModbusSetExceptionStatusBit(0, 1);
  2156  0025B6  0E01               	movlw	1
  2157  0025B8  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2158  0025BA  0E00               	movlw	0
  2159  0025BC  EC66  F014         	call	_ModbusSetExceptionStatusBit
  2160  0025C0                     l463:
  2161  0025C0  FFFF               	dw	65535	; assembler added errata NOP
  2162  0025C2  0012               	return		;funcret
  2163  0025C4  FFFF               	dw	65535	; errata NOP
  2164  0025C6                     __end_of_CommandSetStatusLed:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           intcon	equ	0xFF2
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postdec1	equ	0xFE5
  2174                           fsr1h	equ	0xFE2
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _ModbusGetUserCommandData *****************
  2184 ;; Defined at:
  2185 ;;		line 193 in file "ModbusRtu.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      PTR unsigned char 
  2192 ;; Registers used:
  2193 ;;		wreg
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2199 ;;      Params:         2       0       0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0
  2202 ;;      Totals:         2       0       0       0       0       0       0
  2203 ;;Total ram usage:        2 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_CommandSetStatusLed
  2210 ;;		_ProcessUserCommands
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text6
  2215  002E66                     __ptext6:
  2216                           	opt stack 0
  2217  002E66                     _ModbusGetUserCommandData:
  2218                           	opt stack 26
  2219                           
  2220                           ;incstack = 0
  2221  002E66  FFFF               	dw	65535
  2222  002E68  0EE6               	movlw	_ModbusUserCommandData& (0+255)
  2223  002E6A  0012               	return		;funcret
  2224  002E6C  FFFF               	dw	65535	; errata NOP
  2225  002E6E                     __end_of_ModbusGetUserCommandData:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           intcon	equ	0xFF2
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           postdec1	equ	0xFE5
  2235                           fsr1h	equ	0xFE2
  2236                           fsr1l	equ	0xFE1
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  2245 ;; Defined at:
  2246 ;;		line 199 in file "ModbusRtu.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      PTR unsigned char 
  2253 ;; Registers used:
  2254 ;;		wreg
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2260 ;;      Params:         2       0       0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0
  2263 ;;      Totals:         2       0       0       0       0       0       0
  2264 ;;Total ram usage:        2 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    2
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_CommandSetStatusLed
  2271 ;;		_ProcessUserCommands
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text7
  2276  002E6E                     __ptext7:
  2277                           	opt stack 0
  2278  002E6E                     _ModbusGetUserCommandAdditional1Lo:
  2279                           	opt stack 26
  2280                           
  2281                           ;incstack = 0
  2282  002E6E  FFFF               	dw	65535
  2283  002E70  0EE1               	movlw	_ModbusUserCommandAdditional1Lo& (0+255)
  2284  002E72  0012               	return		;funcret
  2285  002E74  FFFF               	dw	65535	; errata NOP
  2286  002E76                     __end_of_ModbusGetUserCommandAdditional1Lo:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           intcon	equ	0xFF2
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postdec1	equ	0xFE5
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           indf2	equ	0xFDF
  2299                           postinc2	equ	0xFDE
  2300                           postdec2	equ	0xFDD
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  2306 ;; Defined at:
  2307 ;;		line 198 in file "ModbusRtu.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      PTR unsigned char 
  2314 ;; Registers used:
  2315 ;;		wreg
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2321 ;;      Params:         2       0       0       0       0       0       0
  2322 ;;      Locals:         0       0       0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0
  2324 ;;      Totals:         2       0       0       0       0       0       0
  2325 ;;Total ram usage:        2 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    2
  2328 ;; This function calls:
  2329 ;;		Nothing
  2330 ;; This function is called by:
  2331 ;;		_CommandSetStatusLed
  2332 ;;		_ProcessUserCommands
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text8
  2337  002E76                     __ptext8:
  2338                           	opt stack 0
  2339  002E76                     _ModbusGetUserCommandAdditional1Hi:
  2340                           	opt stack 26
  2341                           
  2342                           ;incstack = 0
  2343  002E76  FFFF               	dw	65535
  2344  002E78  0EE0               	movlw	_ModbusUserCommandAdditional1Hi& (0+255)
  2345  002E7A  0012               	return		;funcret
  2346  002E7C  FFFF               	dw	65535	; errata NOP
  2347  002E7E                     __end_of_ModbusGetUserCommandAdditional1Hi:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           intcon	equ	0xFF2
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1h	equ	0xFE2
  2358                           fsr1l	equ	0xFE1
  2359                           indf2	equ	0xFDF
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _ModbusGetLastCommand *****************
  2367 ;; Defined at:
  2368 ;;		line 907 in file "ModbusRtu.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  address         1    wreg     PTR unsigned short 
  2371 ;;		 -> io_poll@lastAddress(2), 
  2372 ;;  count           1    6[COMRAM] PTR unsigned short 
  2373 ;;		 -> io_poll@lastEndAddress(2), 
  2374 ;;  command         1    7[COMRAM] PTR unsigned char 
  2375 ;;		 -> io_poll@lastCommand(1), 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  address         1    8[COMRAM] PTR unsigned short 
  2378 ;;		 -> io_poll@lastAddress(2), 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      PTR unsigned char 
  2381 ;; Registers used:
  2382 ;;		wreg, fsr2l, fsr2h, status,2
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2388 ;;      Params:         2       0       0       0       0       0       0
  2389 ;;      Locals:         1       0       0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0
  2391 ;;      Totals:         3       0       0       0       0       0       0
  2392 ;;Total ram usage:        3 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    2
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_io_poll
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text9
  2403  002B40                     __ptext9:
  2404                           	opt stack 0
  2405  002B40                     _ModbusGetLastCommand:
  2406                           	opt stack 27
  2407                           
  2408                           ;incstack = 0
  2409  002B40  FFFF               	dw	65535
  2410                           
  2411                           ;ModbusGetLastCommand@address stored from wreg
  2412  002B42  6E09               	movwf	ModbusGetLastCommand@address,c
  2413                           
  2414                           ;ModbusRtu.c: 909: if (address != (0))
  2415  002B44  5009               	movf	ModbusGetLastCommand@address,w,c
  2416  002B46  E007               	bz	l6332
  2417                           
  2418                           ;ModbusRtu.c: 910: *address = _lastAddress;
  2419  002B48  5009               	movf	ModbusGetLastCommand@address,w,c
  2420  002B4A  6ED9               	movwf	fsr2l,c
  2421  002B4C  6ADA               	clrf	fsr2h,c
  2422  002B4E  C0BC  FFDE         	movff	__lastAddress,postinc2
  2423  002B52  C0BD  FFDD         	movff	__lastAddress+1,postdec2
  2424  002B56                     l6332:
  2425                           
  2426                           ;ModbusRtu.c: 911: if (count != (0))
  2427  002B56  5007               	movf	ModbusGetLastCommand@count,w,c
  2428  002B58  E007               	bz	l6336
  2429                           
  2430                           ;ModbusRtu.c: 912: *count = _lastCount;
  2431  002B5A  5007               	movf	ModbusGetLastCommand@count,w,c
  2432  002B5C  6ED9               	movwf	fsr2l,c
  2433  002B5E  6ADA               	clrf	fsr2h,c
  2434  002B60  C0BE  FFDE         	movff	__lastCount,postinc2
  2435  002B64  C0BF  FFDD         	movff	__lastCount+1,postdec2
  2436  002B68                     l6336:
  2437                           
  2438                           ;ModbusRtu.c: 913: if(command != (0))
  2439  002B68  5008               	movf	ModbusGetLastCommand@command,w,c
  2440  002B6A  E005               	bz	l6340
  2441                           
  2442                           ;ModbusRtu.c: 914: *command = _lastCommand;
  2443  002B6C  5008               	movf	ModbusGetLastCommand@command,w,c
  2444  002B6E  6ED9               	movwf	fsr2l,c
  2445  002B70  6ADA               	clrf	fsr2h,c
  2446  002B72  C0D1  FFDF         	movff	__lastCommand,indf2
  2447  002B76                     l6340:
  2448                           
  2449                           ;ModbusRtu.c: 915: return &_lastFunction;
  2450  002B76  0EE8               	movlw	__lastFunction& (0+255)
  2451  002B78  0012               	return		;funcret
  2452  002B7A  FFFF               	dw	65535	; errata NOP
  2453  002B7C                     __end_of_ModbusGetLastCommand:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           intcon	equ	0xFF2
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1h	equ	0xFE2
  2464                           fsr1l	equ	0xFE1
  2465                           indf2	equ	0xFDF
  2466                           postinc2	equ	0xFDE
  2467                           postdec2	equ	0xFDD
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _InitFromEeprom *****************
  2473 ;; Defined at:
  2474 ;;		line 403 in file "main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  tmpModbusId     1   18[COMRAM] unsigned char 
  2479 ;;  eeSoundCount    1   17[COMRAM] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2489 ;;      Params:         0       0       0       0       0       0       0
  2490 ;;      Locals:         2       0       0       0       0       0       0
  2491 ;;      Temps:          2       0       0       0       0       0       0
  2492 ;;      Totals:         4       0       0       0       0       0       0
  2493 ;;Total ram usage:        4 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		_LoadNextEvent
  2498 ;;		_Modbus
  2499 ;;		_ShowFailure
  2500 ;;		_SwitchOffAllLeds
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;;		_io_poll
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text10
  2508  002190                     __ptext10:
  2509                           	opt stack 0
  2510  002190                     _InitFromEeprom:
  2511                           	opt stack 25
  2512                           
  2513                           ;incstack = 0
  2514  002190  FFFF               	dw	65535
  2515                           
  2516                           ;main.c: 405: SwitchOffAllLeds();
  2517  002192  EC6D  F016         	call	_SwitchOffAllLeds	;wreg free
  2518                           
  2519                           ;main.c: 407: eventAcceptTime = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  2520  002196  0E02               	movlw	2
  2521  002198  6EA9               	movwf	4009,c	;volatile
  2522  00219A  80A6               	bsf	4006,0,c	;volatile
  2523  00219C  CFA8 F0D9          	movff	4008,_eventAcceptTime	;volatile
  2524                           
  2525                           ;main.c: 411: uint8_t tmpModbusId = ( EEADR = 1, (void)0, RD = 1, EEDATA);
  2526  0021A0  0E01               	movlw	1
  2527  0021A2  6EA9               	movwf	4009,c	;volatile
  2528  0021A4  80A6               	bsf	4006,0,c	;volatile
  2529  0021A6  CFA8 F013          	movff	4008,InitFromEeprom@tmpModbusId	;volatile
  2530                           
  2531                           ;main.c: 412: if(tmpModbusId == 0xff)
  2532  0021AA  2813               	incf	InitFromEeprom@tmpModbusId,w,c
  2533  0021AC  E102               	bnz	l6220
  2534                           
  2535                           ;main.c: 413: tmpModbusId = 0x7F;
  2536  0021AE  0E7F               	movlw	127
  2537  0021B0  6E13               	movwf	InitFromEeprom@tmpModbusId,c
  2538  0021B2                     l6220:
  2539                           
  2540                           ;main.c: 414: Modbus(tmpModbusId, 0, 0);
  2541  0021B2  6A0C               	clrf	Modbus@u8serno,c
  2542  0021B4  6A0D               	clrf	Modbus@u8txenpin,c
  2543  0021B6  5013               	movf	InitFromEeprom@tmpModbusId,w,c
  2544  0021B8  ECF4  F016         	call	_Modbus
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;main.c: 417: _maxDiaryEvents = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  2548  0021BC  0E03               	movlw	3
  2549  0021BE  6EA9               	movwf	4009,c	;volatile
  2550                           
  2551                           ; BSR set to: 0
  2552  0021C0  80A6               	bsf	4006,0,c	;volatile
  2553                           
  2554                           ; BSR set to: 0
  2555  0021C2  CFA8 F06D          	movff	4008,__maxDiaryEvents	;volatile
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 418: if(_maxDiaryEvents == 0xff)
  2559  0021C6  286D               	incf	__maxDiaryEvents,w,c
  2560  0021C8  E101               	bnz	l6232
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 419: _maxDiaryEvents = 0;
  2564  0021CA  6A6D               	clrf	__maxDiaryEvents,c
  2565  0021CC                     l6232:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 420: if(_maxDiaryEvents > 60)
  2569  0021CC  0E3C               	movlw	60
  2570  0021CE  646D               	cpfsgt	__maxDiaryEvents,c
  2571  0021D0  D004               	goto	l6238
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 421: {
  2575                           ;main.c: 422: ShowFailure(2);
  2576  0021D2  0E02               	movlw	2
  2577  0021D4  EC93  F016         	call	_ShowFailure
  2578  0021D8  D032               	goto	l319
  2579  0021DA                     l6238:
  2580  0021DA  FFFF               	dw	65535	; assembler added errata NOP
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;main.c: 424: }
  2584                           ;main.c: 425: eventCount = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  2585  0021DC  0E0A               	movlw	10
  2586  0021DE  6EA9               	movwf	4009,c	;volatile
  2587                           
  2588                           ; BSR set to: 0
  2589  0021E0  80A6               	bsf	4006,0,c	;volatile
  2590                           
  2591                           ; BSR set to: 0
  2592  0021E2  CFA8 F071          	movff	4008,_eventCount	;volatile
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 426: if(eventCount == 0xff)
  2596  0021E6  2871               	incf	_eventCount,w,c
  2597  0021E8  E101               	bnz	l6248
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 427: eventCount = 0;
  2601  0021EA  6A71               	clrf	_eventCount,c
  2602  0021EC                     l6248:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 428: if(eventCount > _maxDiaryEvents)
  2606  0021EC  5071               	movf	_eventCount,w,c
  2607  0021EE  5C6D               	subwf	__maxDiaryEvents,w,c
  2608  0021F0  E204               	bc	l6254
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 429: {
  2612                           ;main.c: 430: ShowFailure(3);
  2613  0021F2  0E03               	movlw	3
  2614  0021F4  EC93  F016         	call	_ShowFailure
  2615  0021F8  D022               	goto	l319
  2616  0021FA                     l6254:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 432: }
  2620                           ;main.c: 437: uint8_t eeSoundCountAddress = 10 + 1 + eventCount * 2;
  2621  0021FA  5071               	movf	_eventCount,w,c
  2622  0021FC  0D02               	mullw	2
  2623  0021FE  50F3               	movf	prodl,w,c
  2624  002200  0F0B               	addlw	11
  2625  002202  6E12               	movwf	InitFromEeprom@eeSoundCountAddress,c
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;main.c: 438: _soundCount = ( EEADR = eeSoundCountAddress, (void)0, RD = 1, EEDATA);
  2629  002204  C012  FFA9         	movff	InitFromEeprom@eeSoundCountAddress,4009	;volatile
  2630                           
  2631                           ; BSR set to: 0
  2632  002208  80A6               	bsf	4006,0,c	;volatile
  2633                           
  2634                           ; BSR set to: 0
  2635  00220A  CFA8 F0D5          	movff	4008,__soundCount	;volatile
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 439: if(_soundCount == 0xFF)
  2639  00220E  29D5               	incf	__soundCount& (0+255),w,b
  2640  002210  E102               	bnz	l6266
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 440: _soundCount = 0;
  2644  002212  6BD5               	clrf	__soundCount& (0+255),b
  2645  002214  D005               	goto	l6272
  2646  002216                     l6266:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 441: else
  2650                           ;main.c: 442: {
  2651                           ;main.c: 443: _eeSoundAddressesList = eeSoundCountAddress + 1;
  2652  002216  2812               	incf	InitFromEeprom@eeSoundCountAddress,w,c
  2653  002218  6FCC               	movwf	__eeSoundAddressesList& (0+255),b
  2654                           
  2655                           ;main.c: 444: _eeFirstSoundAddress = _eeSoundAddressesList + _soundCount;
  2656  00221A  51CC               	movf	__eeSoundAddressesList& (0+255),w,b
  2657  00221C  25D5               	addwf	__soundCount& (0+255),w,b
  2658  00221E  6FCB               	movwf	__eeFirstSoundAddress& (0+255),b
  2659  002220                     l6272:
  2660  002220  FFFF               	dw	65535	; assembler added errata NOP
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 449: }
  2664                           ;main.c: 450: }
  2665                           ;main.c: 451: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  2666  002222  51D5               	movf	__soundCount& (0+255),w,b
  2667  002224  6E10               	movwf	??_InitFromEeprom& (0+255),c
  2668  002226  5071               	movf	_eventCount,w,c
  2669  002228  0101               	movlb	1	; () banked
  2670  00222A  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  2671  00222C  C010  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  2672                           
  2673                           ; BSR set to: 1
  2674                           ;main.c: 455: curEventNum = 0xff;
  2675  002230  6873               	setf	_curEventNum,c
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;main.c: 456: curEventTotalMinutes = 0;
  2679  002232  0100               	movlb	0	; () banked
  2680  002234  6BC4               	clrf	_curEventTotalMinutes& (0+255),b
  2681  002236  6BC5               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 457: currentAlarmedEventNum = 0xff;
  2685  002238  6874               	setf	_currentAlarmedEventNum,c
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 458: LoadNextEvent();
  2689  00223A  EC6C  F00B         	call	_LoadNextEvent	;wreg free
  2690  00223E                     l319:
  2691  00223E  FFFF               	dw	65535	; assembler added errata NOP
  2692  002240  0012               	return		;funcret
  2693  002242  FFFF               	dw	65535	; errata NOP
  2694  002244                     __end_of_InitFromEeprom:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           postdec1	equ	0xFE5
  2705                           fsr1h	equ	0xFE2
  2706                           fsr1l	equ	0xFE1
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _ShowFailure *****************
  2715 ;; Defined at:
  2716 ;;		line 397 in file "main.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  additionalLe    1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  additionalLe    1   14[COMRAM] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : F/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2730 ;;      Params:         0       0       0       0       0       0       0
  2731 ;;      Locals:         1       0       0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0
  2733 ;;      Totals:         1       0       0       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    3
  2737 ;; This function calls:
  2738 ;;		_LightLed
  2739 ;;		_LightStatusLed
  2740 ;; This function is called by:
  2741 ;;		_InitFromEeprom
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text11
  2746  002D26                     __ptext11:
  2747                           	opt stack 0
  2748  002D26                     _ShowFailure:
  2749                           	opt stack 25
  2750                           
  2751                           ;incstack = 0
  2752  002D26  FFFF               	dw	65535
  2753                           
  2754                           ;ShowFailure@additionalLed stored from wreg
  2755  002D28  6E0F               	movwf	ShowFailure@additionalLed,c
  2756                           
  2757                           ;main.c: 399: LightStatusLed(0x06, 1, 1);
  2758  002D2A  0E01               	movlw	1
  2759  002D2C  6E07               	movwf	LightStatusLed@on,c
  2760  002D2E  6E08               	movwf	LightStatusLed@blink,c
  2761  002D30  0E06               	movlw	6
  2762  002D32  EC87  F00D         	call	_LightStatusLed
  2763                           
  2764                           ;main.c: 400: LightLed(additionalLed, LED_RED, 1);
  2765  002D36  0E02               	movlw	2
  2766  002D38  6E07               	movwf	LightLed@ledState,c
  2767  002D3A  0E01               	movlw	1
  2768  002D3C  6E08               	movwf	LightLed@blink,c
  2769  002D3E  500F               	movf	ShowFailure@additionalLed,w,c
  2770  002D40  EFB5  F004         	goto	_LightLed
  2771  002D44  FFFF               	dw	65535	; errata NOP
  2772  002D46                     __end_of_ShowFailure:
  2773                           	opt stack 0
  2774                           tblptru	equ	0xFF8
  2775                           tblptrh	equ	0xFF7
  2776                           tblptrl	equ	0xFF6
  2777                           tablat	equ	0xFF5
  2778                           prodl	equ	0xFF3
  2779                           intcon	equ	0xFF2
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           postdec1	equ	0xFE5
  2783                           fsr1h	equ	0xFE2
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _LightStatusLed *****************
  2793 ;; Defined at:
  2794 ;;		line 340 in file "main.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  row             1    wreg     unsigned char 
  2797 ;;  on              1    6[COMRAM] unsigned char 
  2798 ;;  blink           1    7[COMRAM] unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  row             1   13[COMRAM] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2810 ;;      Params:         2       0       0       0       0       0       0
  2811 ;;      Locals:         1       0       0       0       0       0       0
  2812 ;;      Temps:          5       0       0       0       0       0       0
  2813 ;;      Totals:         8       0       0       0       0       0       0
  2814 ;;Total ram usage:        8 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    2
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_ShowFailure
  2821 ;;		_main
  2822 ;;		_CommandSetStatusLed
  2823 ;;		_io_poll
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text12
  2828  001B0E                     __ptext12:
  2829                           	opt stack 0
  2830  001B0E                     _LightStatusLed:
  2831                           	opt stack 25
  2832                           
  2833                           ;incstack = 0
  2834  001B0E  FFFF               	dw	65535
  2835                           
  2836                           ;LightStatusLed@row stored from wreg
  2837  001B10  6E0E               	movwf	LightStatusLed@row,c
  2838                           
  2839                           ;main.c: 342: if(row > 7)
  2840  001B12  0E07               	movlw	7
  2841  001B14  640E               	cpfsgt	LightStatusLed@row,c
  2842  001B16  D001               	goto	l5804
  2843  001B18  D072               	goto	l292
  2844  001B1A                     l5804:
  2845  001B1A  FFFF               	dw	65535	; assembler added errata NOP
  2846                           
  2847                           ;main.c: 344: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  2848  001B1C  5007               	movf	LightStatusLed@on,w,c
  2849  001B1E  E010               	bz	l5808
  2850  001B20  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2851  001B24  0E01               	movlw	1
  2852  001B26  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2853  001B28  2A09               	incf	??_LightStatusLed,f,c
  2854  001B2A  D003               	goto	u4724
  2855  001B2C                     u4725:
  2856  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  2857  001B2E  90D8               	bcf	status,0,c
  2858  001B30  360A               	rlcf	??_LightStatusLed+1,f,c
  2859  001B32                     u4724:
  2860  001B32  FFFF               	dw	65535	; assembler added errata NOP
  2861  001B34  2E09               	decfsz	??_LightStatusLed,f,c
  2862  001B36  D7FA               	goto	u4725
  2863  001B38  500A               	movf	??_LightStatusLed+1,w,c
  2864  001B3A  0100               	movlb	0	; () banked
  2865  001B3C  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  2866  001B3E  D00F               	goto	l5810
  2867  001B40                     l5808:
  2868  001B40  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2869  001B44  0E01               	movlw	1
  2870  001B46  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2871  001B48  2A09               	incf	??_LightStatusLed,f,c
  2872  001B4A  D003               	goto	u4734
  2873  001B4C                     u4735:
  2874  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  2875  001B4E  90D8               	bcf	status,0,c
  2876  001B50  360A               	rlcf	??_LightStatusLed+1,f,c
  2877  001B52                     u4734:
  2878  001B52  FFFF               	dw	65535	; assembler added errata NOP
  2879  001B54  2E09               	decfsz	??_LightStatusLed,f,c
  2880  001B56  D7FA               	goto	u4735
  2881  001B58  1C0A               	comf	??_LightStatusLed+1,w,c
  2882  001B5A  0100               	movlb	0	; () banked
  2883  001B5C  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  2884  001B5E                     l5810:
  2885  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 345: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  2889  001B60  5008               	movf	LightStatusLed@blink,w,c
  2890  001B62  E010               	bz	l5814
  2891                           
  2892                           ; BSR set to: 0
  2893  001B64  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2894  001B68  0E01               	movlw	1
  2895  001B6A  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2896  001B6C  2A09               	incf	??_LightStatusLed,f,c
  2897  001B6E  D003               	goto	u4754
  2898  001B70                     u4755:
  2899  001B70  FFFF               	dw	65535	; assembler added errata NOP
  2900  001B72  90D8               	bcf	status,0,c
  2901  001B74  360A               	rlcf	??_LightStatusLed+1,f,c
  2902  001B76                     u4754:
  2903  001B76  FFFF               	dw	65535	; assembler added errata NOP
  2904  001B78  2E09               	decfsz	??_LightStatusLed,f,c
  2905  001B7A  D7FA               	goto	u4755
  2906  001B7C  500A               	movf	??_LightStatusLed+1,w,c
  2907  001B7E  0100               	movlb	0	; () banked
  2908  001B80  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  2909  001B82  D00F               	goto	l5816
  2910  001B84                     l5814:
  2911                           
  2912                           ; BSR set to: 0
  2913  001B84  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2914  001B88  0E01               	movlw	1
  2915  001B8A  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2916  001B8C  2A09               	incf	??_LightStatusLed,f,c
  2917  001B8E  D003               	goto	u4764
  2918  001B90                     u4765:
  2919  001B90  FFFF               	dw	65535	; assembler added errata NOP
  2920  001B92  90D8               	bcf	status,0,c
  2921  001B94  360A               	rlcf	??_LightStatusLed+1,f,c
  2922  001B96                     u4764:
  2923  001B96  FFFF               	dw	65535	; assembler added errata NOP
  2924  001B98  2E09               	decfsz	??_LightStatusLed,f,c
  2925  001B9A  D7FA               	goto	u4765
  2926  001B9C  1C0A               	comf	??_LightStatusLed+1,w,c
  2927  001B9E  0100               	movlb	0	; () banked
  2928  001BA0  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  2929  001BA2                     l5816:
  2930  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 346: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  2934  001BA4  5007               	movf	LightStatusLed@on,w,c
  2935  001BA6  E014               	bz	l5820
  2936                           
  2937                           ; BSR set to: 0
  2938  001BA8  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2939  001BAC  0E01               	movlw	1
  2940  001BAE  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2941  001BB0  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  2942  001BB2  2A09               	incf	??_LightStatusLed,f,c
  2943  001BB4  D004               	goto	u4784
  2944  001BB6                     u4785:
  2945  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  2946  001BB8  90D8               	bcf	status,0,c
  2947  001BBA  360A               	rlcf	??_LightStatusLed+1,f,c
  2948  001BBC  360B               	rlcf	??_LightStatusLed+2,f,c
  2949  001BBE                     u4784:
  2950  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  2951  001BC0  2E09               	decfsz	??_LightStatusLed,f,c
  2952  001BC2  D7F9               	goto	u4785
  2953  001BC4  500A               	movf	??_LightStatusLed+1,w,c
  2954  001BC6  0100               	movlb	0	; () banked
  2955  001BC8  13DE               	iorwf	__MODBUSCoils& (0+255),f,b
  2956  001BCA  500B               	movf	??_LightStatusLed+2,w,c
  2957  001BCC  13DF               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  2958  001BCE  D017               	goto	l292
  2959  001BD0                     l5820:
  2960                           
  2961                           ; BSR set to: 0
  2962  001BD0  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2963  001BD4  0E01               	movlw	1
  2964  001BD6  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2965  001BD8  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  2966  001BDA  2A09               	incf	??_LightStatusLed,f,c
  2967  001BDC  D004               	goto	u4794
  2968  001BDE                     u4795:
  2969  001BDE  FFFF               	dw	65535	; assembler added errata NOP
  2970  001BE0  90D8               	bcf	status,0,c
  2971  001BE2  360A               	rlcf	??_LightStatusLed+1,f,c
  2972  001BE4  360B               	rlcf	??_LightStatusLed+2,f,c
  2973  001BE6                     u4794:
  2974  001BE6  FFFF               	dw	65535	; assembler added errata NOP
  2975  001BE8  2E09               	decfsz	??_LightStatusLed,f,c
  2976  001BEA  D7F9               	goto	u4795
  2977  001BEC  1C0A               	comf	??_LightStatusLed+1,w,c
  2978  001BEE  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  2979  001BF0  1C0B               	comf	??_LightStatusLed+2,w,c
  2980  001BF2  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  2981  001BF4  500C               	movf	??_LightStatusLed+3,w,c
  2982  001BF6  0100               	movlb	0	; () banked
  2983  001BF8  17DE               	andwf	__MODBUSCoils& (0+255),f,b
  2984  001BFA  500D               	movf	??_LightStatusLed+4,w,c
  2985  001BFC  17DF               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  2986  001BFE                     l292:
  2987  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  2988  001C00  0012               	return		;funcret
  2989  001C02  FFFF               	dw	65535	; errata NOP
  2990  001C04                     __end_of_LightStatusLed:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1h	equ	0xFE2
  3002                           fsr1l	equ	0xFE1
  3003                           indf2	equ	0xFDF
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _Modbus *****************
  3011 ;; Defined at:
  3012 ;;		line 227 in file "ModbusRtu.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  u8id            1    wreg     unsigned char 
  3015 ;;  u8serno         1   11[COMRAM] unsigned char 
  3016 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  u8id            1   13[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : F/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         2       0       0       0       0       0       0
  3029 ;;      Locals:         1       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0
  3031 ;;      Totals:         3       0       0       0       0       0       0
  3032 ;;Total ram usage:        3 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		_ModbusInit
  3037 ;; This function is called by:
  3038 ;;		_InitFromEeprom
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text13
  3043  002DE8                     __ptext13:
  3044                           	opt stack 0
  3045  002DE8                     _Modbus:
  3046                           	opt stack 25
  3047                           
  3048                           ;incstack = 0
  3049  002DE8  FFFF               	dw	65535
  3050                           
  3051                           ;Modbus@u8id stored from wreg
  3052  002DEA  6E0E               	movwf	Modbus@u8id,c
  3053                           
  3054                           ;ModbusRtu.c: 229: ModbusInit(u8id, u8serno, u8txenpin);
  3055  002DEC  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  3056  002DF0  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3057  002DF4  500E               	movf	Modbus@u8id,w,c
  3058  002DF6  EFDC  F016         	goto	_ModbusInit
  3059                           
  3060                           ; BSR set to: 0
  3061  002DFA  FFFF               	dw	65535	; errata NOP
  3062  002DFC                     __end_of_Modbus:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _ModbusInit *****************
  3083 ;; Defined at:
  3084 ;;		line 567 in file "ModbusRtu.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  u8id            1    wreg     unsigned char 
  3087 ;;  u8serno         1    6[COMRAM] unsigned char 
  3088 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  u8id            1   10[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : F/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         2       0       0       0       0       0       0
  3101 ;;      Locals:         3       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0
  3103 ;;      Totals:         5       0       0       0       0       0       0
  3104 ;;Total ram usage:        5 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    2
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_Modbus
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text14
  3115  002DB8                     __ptext14:
  3116                           	opt stack 0
  3117  002DB8                     _ModbusInit:
  3118                           	opt stack 25
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;incstack = 0
  3122  002DB8  FFFF               	dw	65535
  3123                           
  3124                           ;ModbusInit@u8id stored from wreg
  3125  002DBA  6E0B               	movwf	ModbusInit@u8id,c
  3126                           
  3127                           ;ModbusRtu.c: 569: _deviceStatus = 0;
  3128  002DBC  0100               	movlb	0	; () banked
  3129  002DBE  6BCA               	clrf	__deviceStatus& (0+255),b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;ModbusRtu.c: 570: _u8id = u8id;
  3133  002DC0  C00B  F0D6         	movff	ModbusInit@u8id,__u8id
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;ModbusRtu.c: 571: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3137  002DC4  0E04               	movlw	4
  3138  002DC6  6007               	cpfslt	ModbusInit@u8serno,c
  3139  002DC8  D000               	goto	l788
  3140  002DCA                     l788:
  3141  002DCA  FFFF               	dw	65535	; assembler added errata NOP
  3142                           
  3143                           ; BSR set to: 0
  3144  002DCC  0012               	return		;funcret
  3145  002DCE  FFFF               	dw	65535	; errata NOP
  3146  002DD0                     __end_of_ModbusInit:
  3147                           	opt stack 0
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodl	equ	0xFF3
  3153                           intcon	equ	0xFF2
  3154                           postinc0	equ	0xFEE
  3155                           wreg	equ	0xFE8
  3156                           postdec1	equ	0xFE5
  3157                           fsr1h	equ	0xFE2
  3158                           fsr1l	equ	0xFE1
  3159                           indf2	equ	0xFDF
  3160                           postinc2	equ	0xFDE
  3161                           postdec2	equ	0xFDD
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _getHourMin *****************
  3167 ;; Defined at:
  3168 ;;		line 256 in file "interrupts.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  hour            1    wreg     PTR unsigned char 
  3171 ;;		 -> main@hour(1), 
  3172 ;;  min             1    6[COMRAM] PTR unsigned char 
  3173 ;;		 -> main@minute(1), 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  hour            1    7[COMRAM] PTR unsigned char 
  3176 ;;		 -> main@hour(1), 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      unsigned char 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : F/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         1       0       0       0       0       0       0
  3187 ;;      Locals:         1       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         2       0       0       0       0       0       0
  3190 ;;Total ram usage:        2 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    2
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text15
  3201  002C58                     __ptext15:
  3202                           	opt stack 0
  3203  002C58                     _getHourMin:
  3204                           	opt stack 28
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;incstack = 0
  3208  002C58  FFFF               	dw	65535
  3209                           
  3210                           ;getHourMin@hour stored from wreg
  3211  002C5A  6E08               	movwf	getHourMin@hour,c
  3212                           
  3213                           ;interrupts.c: 258: if(globalHours == 0xFF)
  3214  002C5C  2875               	incf	_globalHours,w,c	;volatile
  3215  002C5E  E102               	bnz	l108
  3216                           
  3217                           ;interrupts.c: 259: return 0;
  3218  002C60  0E00               	movlw	0
  3219  002C62  D00D               	goto	l109
  3220  002C64                     l108:
  3221                           
  3222                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  3223  002C64  9EF2               	bcf	intcon,7,c	;volatile
  3224                           
  3225                           ;interrupts.c: 261: *hour = globalHours;
  3226  002C66  5008               	movf	getHourMin@hour,w,c
  3227  002C68  6ED9               	movwf	fsr2l,c
  3228  002C6A  6ADA               	clrf	fsr2h,c
  3229  002C6C  C075  FFDF         	movff	_globalHours,indf2	;volatile
  3230                           
  3231                           ;interrupts.c: 262: *min = globalMinutes;
  3232  002C70  5007               	movf	getHourMin@min,w,c
  3233  002C72  6ED9               	movwf	fsr2l,c
  3234  002C74  6ADA               	clrf	fsr2h,c
  3235  002C76  C072  FFDF         	movff	_globalMinutes,indf2	;volatile
  3236                           
  3237                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  3238  002C7A  8EF2               	bsf	intcon,7,c	;volatile
  3239                           
  3240                           ;interrupts.c: 264: return 1;
  3241  002C7C  0E01               	movlw	1
  3242  002C7E                     l109:
  3243  002C7E  FFFF               	dw	65535	; assembler added errata NOP
  3244  002C80  0012               	return		;funcret
  3245  002C82  FFFF               	dw	65535	; errata NOP
  3246  002C84                     __end_of_getHourMin:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodl	equ	0xFF3
  3253                           intcon	equ	0xFF2
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1h	equ	0xFE2
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _ResetEvent *****************
  3267 ;; Defined at:
  3268 ;;		line 636 in file "main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  state           1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  state           1   16[COMRAM] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : F/0
  3279 ;;		On exit  : F/1
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3282 ;;      Params:         0       0       0       0       0       0       0
  3283 ;;      Locals:         3       0       0       0       0       0       0
  3284 ;;      Temps:          2       0       0       0       0       0       0
  3285 ;;      Totals:         5       0       0       0       0       0       0
  3286 ;;Total ram usage:        5 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    3
  3289 ;; This function calls:
  3290 ;;		_GetCurrentEventDiodeNum
  3291 ;;		_LightLed
  3292 ;;		_StopPlaying
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text16
  3299  0029AC                     __ptext16:
  3300                           	opt stack 0
  3301  0029AC                     _ResetEvent:
  3302                           	opt stack 27
  3303                           
  3304                           ;incstack = 0
  3305  0029AC  FFFF               	dw	65535
  3306                           
  3307                           ;ResetEvent@state stored from wreg
  3308  0029AE  6E11               	movwf	ResetEvent@state,c
  3309                           
  3310                           ;main.c: 638: LightLed(GetCurrentEventDiodeNum(), state ? LED_GREEN : LED_RED, 0);
  3311  0029B0  5011               	movf	ResetEvent@state,w,c
  3312  0029B2  E103               	bnz	l7200
  3313  0029B4  6A13               	clrf	_ResetEvent$890+1,c
  3314  0029B6  0E02               	movlw	2
  3315  0029B8  D002               	goto	L1
  3316  0029BA                     l7200:
  3317  0029BA  6A13               	clrf	_ResetEvent$890+1,c
  3318  0029BC  0E01               	movlw	1
  3319  0029BE                     L1:
  3320  0029BE  FFFF               	dw	65535	; assembler added errata NOP
  3321  0029C0  6E12               	movwf	_ResetEvent$890,c
  3322  0029C2  C012  F007         	movff	_ResetEvent$890,LightLed@ledState
  3323  0029C6  6A08               	clrf	LightLed@blink,c
  3324  0029C8  EC24  F017         	call	_GetCurrentEventDiodeNum	;wreg free
  3325  0029CC  ECB5  F004         	call	_LightLed
  3326                           
  3327                           ;main.c: 639: currentAlarmedEventNum = 0xff;
  3328  0029D0  6874               	setf	_currentAlarmedEventNum,c
  3329                           
  3330                           ;main.c: 640: eventResetSecond = 0;
  3331  0029D2  0100               	movlb	0	; () banked
  3332  0029D4  6BAC               	clrf	_eventResetSecond& (0+255),b
  3333  0029D6  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  3334  0029D8  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  3335  0029DA  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;main.c: 641: StopPlaying();
  3339  0029DC  EC0F  F017         	call	_StopPlaying	;wreg free
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;main.c: 642: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  3343  0029E0  5074               	movf	_currentAlarmedEventNum,w,c
  3344  0029E2  6E0F               	movwf	??_ResetEvent& (0+255),c
  3345  0029E4  5073               	movf	_curEventNum,w,c
  3346  0029E6  0101               	movlb	1	; () banked
  3347  0029E8  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  3348  0029EA  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  3349                           
  3350                           ; BSR set to: 1
  3351  0029EE  0012               	return		;funcret
  3352  0029F0  FFFF               	dw	65535	; errata NOP
  3353  0029F2                     __end_of_ResetEvent:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodl	equ	0xFF3
  3360                           intcon	equ	0xFF2
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1h	equ	0xFE2
  3365                           fsr1l	equ	0xFE1
  3366                           indf2	equ	0xFDF
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _ProcessLightBlock *****************
  3374 ;; Defined at:
  3375 ;;		line 481 in file "main.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  curMs           1    wreg     PTR unsigned long 
  3378 ;;		 -> main@curMs(4), 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  3381 ;;		 -> main@curMs(4), 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : F/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3391 ;;      Params:         0       0       0       0       0       0       0
  3392 ;;      Locals:         1       0       0       0       0       0       0
  3393 ;;      Temps:          4       0       0       0       0       0       0
  3394 ;;      Totals:         5       0       0       0       0       0       0
  3395 ;;Total ram usage:        5 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    3
  3398 ;; This function calls:
  3399 ;;		_UpdateLedRegister
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text17
  3406  000EDA                     __ptext17:
  3407                           	opt stack 0
  3408  000EDA                     _ProcessLightBlock:
  3409                           	opt stack 27
  3410                           
  3411                           ; BSR set to: 1
  3412                           ;incstack = 0
  3413  000EDA  FFFF               	dw	65535
  3414                           
  3415                           ;ProcessLightBlock@curMs stored from wreg
  3416  000EDC  6E0C               	movwf	ProcessLightBlock@curMs,c
  3417                           
  3418                           ;main.c: 483: diffTime = *curMs - oldBlinkOnTime;
  3419  000EDE  500C               	movf	ProcessLightBlock@curMs,w,c
  3420  000EE0  6ED9               	movwf	fsr2l,c
  3421  000EE2  6ADA               	clrf	fsr2h,c
  3422  000EE4  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  3423  000EE8  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  3424  000EEC  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  3425  000EF0  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  3426  000EF4  0100               	movlb	0	; () banked
  3427  000EF6  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  3428  000EF8  5C08               	subwf	??_ProcessLightBlock,w,c
  3429  000EFA  6FA8               	movwf	_diffTime& (0+255),b
  3430  000EFC  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  3431  000EFE  5809               	subwfb	??_ProcessLightBlock+1,w,c
  3432  000F00  6FA9               	movwf	(_diffTime+1)& (0+255),b
  3433  000F02  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  3434  000F04  580A               	subwfb	??_ProcessLightBlock+2,w,c
  3435  000F06  6FAA               	movwf	(_diffTime+2)& (0+255),b
  3436  000F08  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  3437  000F0A  580B               	subwfb	??_ProcessLightBlock+3,w,c
  3438  000F0C  6FAB               	movwf	(_diffTime+3)& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;main.c: 484: if(diffTime > 576)
  3442  000F0E  51AB               	movf	(_diffTime+3)& (0+255),w,b
  3443  000F10  11AA               	iorwf	(_diffTime+2)& (0+255),w,b
  3444  000F12  E105               	bnz	u5850
  3445  000F14  0E41               	movlw	65
  3446  000F16  5DA8               	subwf	_diffTime& (0+255),w,b
  3447  000F18  0E02               	movlw	2
  3448  000F1A  59A9               	subwfb	(_diffTime+1)& (0+255),w,b
  3449  000F1C  E30E               	bnc	l7040
  3450  000F1E                     u5850:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 485: {
  3454                           ;main.c: 486: blinkOn = 1;
  3455  000F1E  0E01               	movlw	1
  3456  000F20  6E70               	movwf	_blinkOn,c
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 487: oldBlinkOnTime = *curMs;
  3460  000F22  500C               	movf	ProcessLightBlock@curMs,w,c
  3461  000F24  6ED9               	movwf	fsr2l,c
  3462  000F26  6ADA               	clrf	fsr2h,c
  3463  000F28  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  3464  000F2C  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  3465  000F30  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  3466  000F34  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  3467                           
  3468                           ;main.c: 488: }
  3469  000F38  D0EA               	goto	l7192
  3470  000F3A                     l7040:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;main.c: 489: else if(blinkOn && diffTime > 384)
  3474  000F3A  5070               	movf	_blinkOn,w,c
  3475  000F3C  E101 D0E7          	bz	l7192
  3476                           
  3477                           ; BSR set to: 0
  3478  000F40  51AB               	movf	(_diffTime+3)& (0+255),w,b
  3479  000F42  11AA               	iorwf	(_diffTime+2)& (0+255),w,b
  3480  000F44  E106               	bnz	u5870
  3481  000F46  0E81               	movlw	129
  3482  000F48  5DA8               	subwf	_diffTime& (0+255),w,b
  3483  000F4A  0E01               	movlw	1
  3484  000F4C  59A9               	subwfb	(_diffTime+1)& (0+255),w,b
  3485  000F4E  E201 D0DE          	bnc	l7192
  3486  000F52                     u5870:
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;main.c: 490: {
  3490                           ;main.c: 491: blinkOn = 0;
  3491  000F52  6A70               	clrf	_blinkOn,c
  3492  000F54  D0DC               	goto	l7192
  3493  000F56                     l7046:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 499: LATA &= 0xF0;
  3497  000F56  0EF0               	movlw	240
  3498  000F58  1689               	andwf	3977,f,c	;volatile
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;main.c: 500: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  3502  000F5A  5070               	movf	_blinkOn,w,c
  3503  000F5C  E003               	bz	l7052
  3504                           
  3505                           ; BSR set to: 0
  3506  000F5E  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  3507  000F62  D003               	goto	l7054
  3508  000F64                     l7052:
  3509                           
  3510                           ; BSR set to: 0
  3511  000F64  5190               	movf	_ledStatuses& (0+255),w,b
  3512  000F66  1980               	xorwf	_ledBlink& (0+255),w,b
  3513  000F68  6E8A               	movwf	3978,c	;volatile
  3514  000F6A                     l7054:
  3515  000F6A  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ; BSR set to: 0
  3518  000F6C  0E00               	movlw	0
  3519  000F6E  ECF9  F014         	call	_UpdateLedRegister
  3520                           
  3521                           ;main.c: 501: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  3522  000F72  5070               	movf	_blinkOn,w,c
  3523  000F74  E003               	bz	l7060
  3524  000F76  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  3525  000F7A  D004               	goto	l7062
  3526  000F7C                     l7060:
  3527  000F7C  0100               	movlb	0	; () banked
  3528  000F7E  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  3529  000F80  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  3530  000F82  6E8A               	movwf	3978,c	;volatile
  3531  000F84                     l7062:
  3532  000F84  FFFF               	dw	65535	; assembler added errata NOP
  3533  000F86  0E01               	movlw	1
  3534  000F88  ECF9  F014         	call	_UpdateLedRegister
  3535                           
  3536                           ;main.c: 502: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  3537  000F8C  5070               	movf	_blinkOn,w,c
  3538  000F8E  E003               	bz	l7068
  3539  000F90  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  3540  000F94  D004               	goto	l7070
  3541  000F96                     l7068:
  3542  000F96  0100               	movlb	0	; () banked
  3543  000F98  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  3544  000F9A  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  3545  000F9C  6E8A               	movwf	3978,c	;volatile
  3546  000F9E                     l7070:
  3547  000F9E  FFFF               	dw	65535	; assembler added errata NOP
  3548  000FA0  0E02               	movlw	2
  3549  000FA2  ECF9  F014         	call	_UpdateLedRegister
  3550                           
  3551                           ;main.c: 503: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  3552  000FA6  5070               	movf	_blinkOn,w,c
  3553  000FA8  E003               	bz	l7076
  3554  000FAA  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  3555  000FAE  D004               	goto	l7078
  3556  000FB0                     l7076:
  3557  000FB0  0100               	movlb	0	; () banked
  3558  000FB2  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  3559  000FB4  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  3560  000FB6  6E8A               	movwf	3978,c	;volatile
  3561  000FB8                     l7078:
  3562  000FB8  FFFF               	dw	65535	; assembler added errata NOP
  3563  000FBA  0E03               	movlw	3
  3564  000FBC  ECF9  F014         	call	_UpdateLedRegister
  3565                           
  3566                           ;main.c: 504: LATAbits.LATA0 = 1;
  3567  000FC0  8089               	bsf	3977,0,c	;volatile
  3568                           
  3569                           ;main.c: 505: break;
  3570  000FC2  D0B0               	goto	l7194
  3571  000FC4                     l7082:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;main.c: 507: LATA &= 0xF0;
  3575  000FC4  0EF0               	movlw	240
  3576  000FC6  1689               	andwf	3977,f,c	;volatile
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;main.c: 508: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  3580  000FC8  5070               	movf	_blinkOn,w,c
  3581  000FCA  E003               	bz	l7088
  3582                           
  3583                           ; BSR set to: 0
  3584  000FCC  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  3585  000FD0  D003               	goto	l7090
  3586  000FD2                     l7088:
  3587                           
  3588                           ; BSR set to: 0
  3589  000FD2  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  3590  000FD4  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  3591  000FD6  6E8A               	movwf	3978,c	;volatile
  3592  000FD8                     l7090:
  3593  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  3594                           
  3595                           ; BSR set to: 0
  3596  000FDA  0E00               	movlw	0
  3597  000FDC  ECF9  F014         	call	_UpdateLedRegister
  3598                           
  3599                           ;main.c: 509: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  3600  000FE0  5070               	movf	_blinkOn,w,c
  3601  000FE2  E003               	bz	l7096
  3602  000FE4  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  3603  000FE8  D004               	goto	l7098
  3604  000FEA                     l7096:
  3605  000FEA  0100               	movlb	0	; () banked
  3606  000FEC  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  3607  000FEE  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  3608  000FF0  6E8A               	movwf	3978,c	;volatile
  3609  000FF2                     l7098:
  3610  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  3611  000FF4  0E01               	movlw	1
  3612  000FF6  ECF9  F014         	call	_UpdateLedRegister
  3613                           
  3614                           ;main.c: 510: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  3615  000FFA  5070               	movf	_blinkOn,w,c
  3616  000FFC  E003               	bz	l7104
  3617  000FFE  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  3618  001002  D004               	goto	l7106
  3619  001004                     l7104:
  3620  001004  0100               	movlb	0	; () banked
  3621  001006  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  3622  001008  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  3623  00100A  6E8A               	movwf	3978,c	;volatile
  3624  00100C                     l7106:
  3625  00100C  FFFF               	dw	65535	; assembler added errata NOP
  3626  00100E  0E02               	movlw	2
  3627  001010  ECF9  F014         	call	_UpdateLedRegister
  3628                           
  3629                           ;main.c: 511: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  3630  001014  5070               	movf	_blinkOn,w,c
  3631  001016  E003               	bz	l7112
  3632  001018  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  3633  00101C  D004               	goto	l7114
  3634  00101E                     l7112:
  3635  00101E  0100               	movlb	0	; () banked
  3636  001020  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  3637  001022  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  3638  001024  6E8A               	movwf	3978,c	;volatile
  3639  001026                     l7114:
  3640  001026  FFFF               	dw	65535	; assembler added errata NOP
  3641  001028  0E03               	movlw	3
  3642  00102A  ECF9  F014         	call	_UpdateLedRegister
  3643                           
  3644                           ;main.c: 512: LATAbits.LATA1 = 1;
  3645  00102E  8289               	bsf	3977,1,c	;volatile
  3646                           
  3647                           ;main.c: 513: break;
  3648  001030  D079               	goto	l7194
  3649  001032                     l7118:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;main.c: 515: LATA &= 0xF0;
  3653  001032  0EF0               	movlw	240
  3654  001034  1689               	andwf	3977,f,c	;volatile
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;main.c: 516: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  3658  001036  5070               	movf	_blinkOn,w,c
  3659  001038  E003               	bz	l7124
  3660                           
  3661                           ; BSR set to: 0
  3662  00103A  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  3663  00103E  D003               	goto	l7126
  3664  001040                     l7124:
  3665                           
  3666                           ; BSR set to: 0
  3667  001040  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  3668  001042  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  3669  001044  6E8A               	movwf	3978,c	;volatile
  3670  001046                     l7126:
  3671  001046  FFFF               	dw	65535	; assembler added errata NOP
  3672                           
  3673                           ; BSR set to: 0
  3674  001048  0E00               	movlw	0
  3675  00104A  ECF9  F014         	call	_UpdateLedRegister
  3676                           
  3677                           ;main.c: 517: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  3678  00104E  5070               	movf	_blinkOn,w,c
  3679  001050  E003               	bz	l7132
  3680  001052  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  3681  001056  D004               	goto	l7134
  3682  001058                     l7132:
  3683  001058  0100               	movlb	0	; () banked
  3684  00105A  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  3685  00105C  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  3686  00105E  6E8A               	movwf	3978,c	;volatile
  3687  001060                     l7134:
  3688  001060  FFFF               	dw	65535	; assembler added errata NOP
  3689  001062  0E01               	movlw	1
  3690  001064  ECF9  F014         	call	_UpdateLedRegister
  3691                           
  3692                           ;main.c: 518: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  3693  001068  5070               	movf	_blinkOn,w,c
  3694  00106A  E003               	bz	l7140
  3695  00106C  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  3696  001070  D004               	goto	l7142
  3697  001072                     l7140:
  3698  001072  0100               	movlb	0	; () banked
  3699  001074  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  3700  001076  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  3701  001078  6E8A               	movwf	3978,c	;volatile
  3702  00107A                     l7142:
  3703  00107A  FFFF               	dw	65535	; assembler added errata NOP
  3704  00107C  0E02               	movlw	2
  3705  00107E  ECF9  F014         	call	_UpdateLedRegister
  3706                           
  3707                           ;main.c: 519: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  3708  001082  5070               	movf	_blinkOn,w,c
  3709  001084  E003               	bz	l7148
  3710  001086  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  3711  00108A  D004               	goto	l7150
  3712  00108C                     l7148:
  3713  00108C  0100               	movlb	0	; () banked
  3714  00108E  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  3715  001090  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  3716  001092  6E8A               	movwf	3978,c	;volatile
  3717  001094                     l7150:
  3718  001094  FFFF               	dw	65535	; assembler added errata NOP
  3719  001096  0E03               	movlw	3
  3720  001098  ECF9  F014         	call	_UpdateLedRegister
  3721                           
  3722                           ;main.c: 520: LATAbits.LATA2 = 1;
  3723  00109C  8489               	bsf	3977,2,c	;volatile
  3724                           
  3725                           ;main.c: 521: break;
  3726  00109E  D042               	goto	l7194
  3727  0010A0                     l7154:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;main.c: 523: LATA &= 0xF0;
  3731  0010A0  0EF0               	movlw	240
  3732  0010A2  1689               	andwf	3977,f,c	;volatile
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;main.c: 524: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  3736  0010A4  5070               	movf	_blinkOn,w,c
  3737  0010A6  E003               	bz	l7160
  3738                           
  3739                           ; BSR set to: 0
  3740  0010A8  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  3741  0010AC  D003               	goto	l7162
  3742  0010AE                     l7160:
  3743                           
  3744                           ; BSR set to: 0
  3745  0010AE  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  3746  0010B0  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  3747  0010B2  6E8A               	movwf	3978,c	;volatile
  3748  0010B4                     l7162:
  3749  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  3750                           
  3751                           ; BSR set to: 0
  3752  0010B6  0E00               	movlw	0
  3753  0010B8  ECF9  F014         	call	_UpdateLedRegister
  3754                           
  3755                           ;main.c: 525: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  3756  0010BC  5070               	movf	_blinkOn,w,c
  3757  0010BE  E003               	bz	l7168
  3758  0010C0  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  3759  0010C4  D004               	goto	l7170
  3760  0010C6                     l7168:
  3761  0010C6  0100               	movlb	0	; () banked
  3762  0010C8  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  3763  0010CA  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  3764  0010CC  6E8A               	movwf	3978,c	;volatile
  3765  0010CE                     l7170:
  3766  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  3767  0010D0  0E01               	movlw	1
  3768  0010D2  ECF9  F014         	call	_UpdateLedRegister
  3769                           
  3770                           ;main.c: 526: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  3771  0010D6  5070               	movf	_blinkOn,w,c
  3772  0010D8  E003               	bz	l7176
  3773  0010DA  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  3774  0010DE  D004               	goto	l7178
  3775  0010E0                     l7176:
  3776  0010E0  0100               	movlb	0	; () banked
  3777  0010E2  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  3778  0010E4  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  3779  0010E6  6E8A               	movwf	3978,c	;volatile
  3780  0010E8                     l7178:
  3781  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  3782  0010EA  0E02               	movlw	2
  3783  0010EC  ECF9  F014         	call	_UpdateLedRegister
  3784                           
  3785                           ;main.c: 527: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  3786  0010F0  5070               	movf	_blinkOn,w,c
  3787  0010F2  E003               	bz	l7184
  3788  0010F4  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  3789  0010F8  D004               	goto	l7186
  3790  0010FA                     l7184:
  3791  0010FA  0100               	movlb	0	; () banked
  3792  0010FC  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  3793  0010FE  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  3794  001100  6E8A               	movwf	3978,c	;volatile
  3795  001102                     l7186:
  3796  001102  FFFF               	dw	65535	; assembler added errata NOP
  3797  001104  0E03               	movlw	3
  3798  001106  ECF9  F014         	call	_UpdateLedRegister
  3799                           
  3800                           ;main.c: 528: LATAbits.LATA3 = 1;
  3801  00110A  8689               	bsf	3977,3,c	;volatile
  3802                           
  3803                           ;main.c: 529: break;
  3804  00110C  D00B               	goto	l7194
  3805  00110E                     l7192:
  3806  00110E  FFFF               	dw	65535	; assembler added errata NOP
  3807                           
  3808                           ; BSR set to: 0
  3809  001110  51D8               	movf	_currentLedBlock& (0+255),w,b
  3810                           
  3811                           ; Switch size 1, requested type "speed"
  3812                           ; Number of cases is 4, Range of values is 0 to 3
  3813                           ; switch strategies available:
  3814                           ; Name         Instructions Cycles
  3815                           ; simple_byte           13     7 (average)
  3816                           ;	Chosen strategy is simple_byte
  3817  001112  E101 D720          	bz	l7046
  3818  001116  0A01               	xorlw	1	; case 1
  3819  001118  E101 D754          	bz	l7082
  3820  00111C  0A03               	xorlw	3	; case 2
  3821  00111E  E089               	bz	l7118
  3822  001120  0A01               	xorlw	1	; case 3
  3823  001122  E0BE               	bz	l7154
  3824  001124                     l7194:
  3825  001124  FFFF               	dw	65535	; assembler added errata NOP
  3826                           
  3827                           ;main.c: 532: currentLedBlock++;
  3828  001126  0100               	movlb	0	; () banked
  3829  001128  2BD8               	incf	_currentLedBlock& (0+255),f,b
  3830                           
  3831                           ;main.c: 535: currentLedBlock &= 0xFB;
  3832  00112A  95D8               	bcf	_currentLedBlock& (0+255),2,b
  3833                           
  3834                           ; BSR set to: 0
  3835  00112C  0012               	return		;funcret
  3836  00112E  FFFF               	dw	65535	; errata NOP
  3837  001130                     __end_of_ProcessLightBlock:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           postdec1	equ	0xFE5
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _UpdateLedRegister *****************
  3858 ;; Defined at:
  3859 ;;		line 256 in file "main.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  regIndex        1    wreg     unsigned char 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  regIndex        1    6[COMRAM] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3873 ;;      Params:         0       0       0       0       0       0       0
  3874 ;;      Locals:         1       0       0       0       0       0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0
  3876 ;;      Totals:         1       0       0       0       0       0       0
  3877 ;;Total ram usage:        1 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    2
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_ProcessLightBlock
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text18
  3888  0029F2                     __ptext18:
  3889                           	opt stack 0
  3890  0029F2                     _UpdateLedRegister:
  3891                           	opt stack 27
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;incstack = 0
  3895  0029F2  FFFF               	dw	65535
  3896                           
  3897                           ;UpdateLedRegister@regIndex stored from wreg
  3898  0029F4  6E07               	movwf	UpdateLedRegister@regIndex,c
  3899                           
  3900                           ;main.c: 258: switch(regIndex)
  3901  0029F6  D014               	goto	l6200
  3902  0029F8                     l250:
  3903                           
  3904                           ;main.c: 261: LATAbits.LATA4 = 0;
  3905  0029F8  9889               	bcf	3977,4,c	;volatile
  3906                           
  3907                           ;main.c: 262: TRISAbits.RA4 = 0;
  3908  0029FA  9892               	bcf	3986,4,c	;volatile
  3909                           
  3910                           ;main.c: 263: LATAbits.LATA4 = 1;
  3911  0029FC  8889               	bsf	3977,4,c	;volatile
  3912                           
  3913                           ;main.c: 264: TRISAbits.RA4 = 1;
  3914  0029FE  8892               	bsf	3986,4,c	;volatile
  3915                           
  3916                           ;main.c: 265: break;
  3917  002A00  D018               	goto	l255
  3918  002A02                     l252:
  3919                           
  3920                           ;main.c: 267: LATCbits.LATC3 = 0;
  3921  002A02  968B               	bcf	3979,3,c	;volatile
  3922                           
  3923                           ;main.c: 268: TRISCbits.RC3 = 0;
  3924  002A04  9694               	bcf	3988,3,c	;volatile
  3925                           
  3926                           ;main.c: 269: LATCbits.LATC3 = 1;
  3927  002A06  868B               	bsf	3979,3,c	;volatile
  3928                           
  3929                           ;main.c: 270: TRISCbits.RC3 = 1;
  3930  002A08  8694               	bsf	3988,3,c	;volatile
  3931                           
  3932                           ;main.c: 271: break;
  3933  002A0A  D013               	goto	l255
  3934  002A0C                     l253:
  3935                           
  3936                           ;main.c: 273: LATCbits.LATC0 = 0;
  3937  002A0C  908B               	bcf	3979,0,c	;volatile
  3938                           
  3939                           ;main.c: 274: TRISCbits.RC0 = 0;
  3940  002A0E  9094               	bcf	3988,0,c	;volatile
  3941                           
  3942                           ;main.c: 275: LATCbits.LATC0 = 1;
  3943  002A10  808B               	bsf	3979,0,c	;volatile
  3944                           
  3945                           ;main.c: 276: TRISCbits.RC0 = 1;
  3946  002A12  8094               	bsf	3988,0,c	;volatile
  3947                           
  3948                           ;main.c: 277: break;
  3949  002A14  D00E               	goto	l255
  3950  002A16                     l254:
  3951                           
  3952                           ;main.c: 279: LATCbits.LATC1 = 0;
  3953  002A16  928B               	bcf	3979,1,c	;volatile
  3954                           
  3955                           ;main.c: 280: TRISCbits.RC1 = 0;
  3956  002A18  9294               	bcf	3988,1,c	;volatile
  3957                           
  3958                           ;main.c: 281: LATCbits.LATC1 = 1;
  3959  002A1A  828B               	bsf	3979,1,c	;volatile
  3960                           
  3961                           ;main.c: 282: TRISCbits.RC1 = 1;
  3962  002A1C  8294               	bsf	3988,1,c	;volatile
  3963                           
  3964                           ;main.c: 283: break;
  3965  002A1E  D009               	goto	l255
  3966  002A20                     l6200:
  3967  002A20  FFFF               	dw	65535	; assembler added errata NOP
  3968  002A22  5007               	movf	UpdateLedRegister@regIndex,w,c
  3969                           
  3970                           ; Switch size 1, requested type "speed"
  3971                           ; Number of cases is 4, Range of values is 0 to 3
  3972                           ; switch strategies available:
  3973                           ; Name         Instructions Cycles
  3974                           ; simple_byte           13     7 (average)
  3975                           ;	Chosen strategy is simple_byte
  3976  002A24  E0E9               	bz	l250
  3977  002A26  0A01               	xorlw	1	; case 1
  3978  002A28  E0EC               	bz	l252
  3979  002A2A  0A03               	xorlw	3	; case 2
  3980  002A2C  E0EF               	bz	l253
  3981  002A2E  0A01               	xorlw	1	; case 3
  3982  002A30  E0F2               	bz	l254
  3983  002A32                     l255:
  3984  002A32  FFFF               	dw	65535	; assembler added errata NOP
  3985  002A34  0012               	return		;funcret
  3986  002A36  FFFF               	dw	65535	; errata NOP
  3987  002A38                     __end_of_UpdateLedRegister:
  3988                           	opt stack 0
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1h	equ	0xFE2
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function _ProcessDiary *****************
  4008 ;; Defined at:
  4009 ;;		line 727 in file "main.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  totalMinutes    2   34[COMRAM] unsigned int 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : F/1
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4023 ;;      Params:         0       0       0       0       0       0       0
  4024 ;;      Locals:         2       0       0       0       0       0       0
  4025 ;;      Temps:          4       0       0       0       0       0       0
  4026 ;;      Totals:         6       0       0       0       0       0       0
  4027 ;;Total ram usage:        6 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    5
  4030 ;; This function calls:
  4031 ;;		_GetCurrentEventDiodeNum
  4032 ;;		_GetTime
  4033 ;;		_LightLed
  4034 ;;		_LoadNextEvent
  4035 ;;		_PlaySound
  4036 ;;		_SwitchOffAllLeds
  4037 ;;		_getTotalMinutes
  4038 ;; This function is called by:
  4039 ;;		_main
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text19
  4044  001F60                     __ptext19:
  4045                           	opt stack 0
  4046  001F60                     _ProcessDiary:
  4047                           	opt stack 25
  4048                           
  4049                           ;incstack = 0
  4050  001F60  FFFF               	dw	65535
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;main.c: 730: if(curEventNum == 0xff)
  4054  001F62  2873               	incf	_curEventNum,w,c
  4055  001F64  E05A               	bz	l432
  4056                           
  4057                           ; BSR set to: 1
  4058                           ;main.c: 732: uint16_t totalMinutes;
  4059                           ;main.c: 736: if(!getTotalMinutes(&totalMinutes))
  4060  001F66  0E23               	movlw	ProcessDiary@totalMinutes& (0+255)
  4061  001F68  EC80  F016         	call	_getTotalMinutes
  4062  001F6C  0900               	iorlw	0
  4063  001F6E  E055               	bz	l432
  4064                           
  4065                           ;main.c: 739: if(totalMinutes == 0)
  4066  001F70  5023               	movf	ProcessDiary@totalMinutes,w,c
  4067  001F72  1024               	iorwf	ProcessDiary@totalMinutes+1,w,c
  4068  001F74  E10C               	bnz	l7230
  4069                           
  4070                           ;main.c: 740: {
  4071                           ;main.c: 741: SwitchOffAllLeds();
  4072  001F76  EC6D  F016         	call	_SwitchOffAllLeds	;wreg free
  4073                           
  4074                           ;main.c: 742: curEventNum = 0xff;
  4075  001F7A  6873               	setf	_curEventNum,c
  4076                           
  4077                           ;main.c: 743: LoadNextEvent();
  4078  001F7C  EC6C  F00B         	call	_LoadNextEvent	;wreg free
  4079                           
  4080                           ;main.c: 744: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4081  001F80  5074               	movf	_currentAlarmedEventNum,w,c
  4082  001F82  6E1F               	movwf	??_ProcessDiary& (0+255),c
  4083  001F84  5073               	movf	_curEventNum,w,c
  4084  001F86  0101               	movlb	1	; () banked
  4085  001F88  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4086  001F8A  C01F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  4087  001F8E                     l7230:
  4088                           
  4089                           ;main.c: 745: }
  4090                           ;main.c: 748: if(curEventTotalMinutes == totalMinutes)
  4091  001F8E  5023               	movf	ProcessDiary@totalMinutes,w,c
  4092  001F90  0100               	movlb	0	; () banked
  4093  001F92  19C4               	xorwf	_curEventTotalMinutes& (0+255),w,b
  4094  001F94  E142               	bnz	l432
  4095  001F96  5024               	movf	ProcessDiary@totalMinutes+1,w,c
  4096  001F98  19C5               	xorwf	(_curEventTotalMinutes+1)& (0+255),w,b
  4097  001F9A  E13F               	bnz	l432
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 749: {
  4101                           ;main.c: 751: if(currentAlarmedEventNum != 0xff)
  4102  001F9C  2874               	incf	_currentAlarmedEventNum,w,c
  4103  001F9E  E007               	bz	l7236
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;main.c: 752: {
  4107                           ;main.c: 753: LightLed(GetCurrentEventDiodeNum(), LED_RED, 0);
  4108  001FA0  0E02               	movlw	2
  4109  001FA2  6E07               	movwf	LightLed@ledState,c
  4110  001FA4  6A08               	clrf	LightLed@blink,c
  4111  001FA6  EC24  F017         	call	_GetCurrentEventDiodeNum	;wreg free
  4112  001FAA  ECB5  F004         	call	_LightLed
  4113  001FAE                     l7236:
  4114                           
  4115                           ;main.c: 754: }
  4116                           ;main.c: 756: {
  4117                           ;main.c: 757: currentAlarmedEventNum = curEventNum;
  4118  001FAE  C073  F074         	movff	_curEventNum,_currentAlarmedEventNum
  4119                           
  4120                           ;main.c: 759: LightLed(GetCurrentEventDiodeNum(), LED_ORANGE, 1);
  4121  001FB2  0E03               	movlw	3
  4122  001FB4  6E07               	movwf	LightLed@ledState,c
  4123  001FB6  0E01               	movlw	1
  4124  001FB8  6E08               	movwf	LightLed@blink,c
  4125  001FBA  EC24  F017         	call	_GetCurrentEventDiodeNum	;wreg free
  4126  001FBE  ECB5  F004         	call	_LightLed
  4127                           
  4128                           ;main.c: 760: if(_nextEventSoundId != 0)
  4129  001FC2  0100               	movlb	0	; () banked
  4130  001FC4  51D2               	movf	__nextEventSoundId& (0+255),w,b
  4131  001FC6  E007               	bz	l7242
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;main.c: 761: {
  4135                           ;main.c: 762: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  4136  001FC8  C0C0  F017         	movff	__nextEventPlayDuration,PlaySound@playDuration
  4137  001FCC  C0C1  F018         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  4138  001FD0  05D2               	decf	__nextEventSoundId& (0+255),w,b
  4139  001FD2  ECE3  F00E         	call	_PlaySound
  4140  001FD6                     l7242:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 763: }
  4144                           ;main.c: 772: eventResetSecond = *GetTime() + eventAcceptTime;
  4145  001FD6  EC3F  F017         	call	_GetTime	;wreg free
  4146  001FDA  6ED9               	movwf	fsr2l,c
  4147  001FDC  6ADA               	clrf	fsr2h,c
  4148  001FDE  CFDE F01F          	movff	postinc2,??_ProcessDiary
  4149  001FE2  CFDE F020          	movff	postinc2,??_ProcessDiary+1
  4150  001FE6  CFDE F021          	movff	postinc2,??_ProcessDiary+2
  4151  001FEA  CFDE F022          	movff	postinc2,??_ProcessDiary+3
  4152  001FEE  0100               	movlb	0	; () banked
  4153  001FF0  51D9               	movf	_eventAcceptTime& (0+255),w,b
  4154  001FF2  241F               	addwf	??_ProcessDiary,w,c
  4155  001FF4  6FAC               	movwf	_eventResetSecond& (0+255),b
  4156  001FF6  0E00               	movlw	0
  4157  001FF8  2020               	addwfc	??_ProcessDiary+1,w,c
  4158  001FFA  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  4159  001FFC  0E00               	movlw	0
  4160  001FFE  2021               	addwfc	??_ProcessDiary+2,w,c
  4161  002000  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  4162  002002  0E00               	movlw	0
  4163  002004  2022               	addwfc	??_ProcessDiary+3,w,c
  4164  002006  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;main.c: 774: LoadNextEvent();
  4168  002008  EC6C  F00B         	call	_LoadNextEvent	;wreg free
  4169                           
  4170                           ;main.c: 775: }
  4171                           ;main.c: 776: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4172  00200C  5074               	movf	_currentAlarmedEventNum,w,c
  4173  00200E  6E1F               	movwf	??_ProcessDiary& (0+255),c
  4174  002010  5073               	movf	_curEventNum,w,c
  4175  002012  0101               	movlb	1	; () banked
  4176  002014  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4177  002016  C01F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  4178  00201A                     l432:
  4179  00201A  0012               	return		;funcret
  4180  00201C  FFFF               	dw	65535	; errata NOP
  4181  00201E                     __end_of_ProcessDiary:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _SwitchOffAllLeds *****************
  4202 ;; Defined at:
  4203 ;;		line 288 in file "main.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  i               1    6[COMRAM] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4217 ;;      Params:         0       0       0       0       0       0       0
  4218 ;;      Locals:         1       0       0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0
  4220 ;;      Totals:         1       0       0       0       0       0       0
  4221 ;;Total ram usage:        1 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    2
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_InitFromEeprom
  4228 ;;		_ProcessDiary
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text20
  4233  002CDA                     __ptext20:
  4234                           	opt stack 0
  4235  002CDA                     _SwitchOffAllLeds:
  4236                           	opt stack 26
  4237                           
  4238                           ;incstack = 0
  4239  002CDA  FFFF               	dw	65535
  4240                           
  4241                           ;main.c: 290: for(uint8_t i = 0; i < 16 - 1; i++)
  4242  002CDC  6A07               	clrf	SwitchOffAllLeds@i,c
  4243  002CDE                     l6036:
  4244  002CDE  FFFF               	dw	65535	; assembler added errata NOP
  4245                           
  4246                           ;main.c: 291: {
  4247                           ;main.c: 292: ledStatuses[i] = 0;
  4248  002CE0  5007               	movf	SwitchOffAllLeds@i,w,c
  4249  002CE2  0F90               	addlw	low _ledStatuses
  4250  002CE4  6ED9               	movwf	fsr2l,c
  4251  002CE6  6ADA               	clrf	fsr2h,c
  4252  002CE8  6ADF               	clrf	indf2,c
  4253                           
  4254                           ;main.c: 293: ledBlink[i] = 0;
  4255  002CEA  5007               	movf	SwitchOffAllLeds@i,w,c
  4256  002CEC  0F80               	addlw	low _ledBlink
  4257  002CEE  6ED9               	movwf	fsr2l,c
  4258  002CF0  6ADA               	clrf	fsr2h,c
  4259  002CF2  6ADF               	clrf	indf2,c
  4260  002CF4  2A07               	incf	SwitchOffAllLeds@i,f,c
  4261  002CF6  0E0E               	movlw	14
  4262  002CF8  6407               	cpfsgt	SwitchOffAllLeds@i,c
  4263  002CFA  D7F1               	goto	l6036
  4264  002CFC  0C0E               	retlw	14	;funcret
  4265  002CFE  FFFF               	dw	65535	; errata NOP
  4266  002D00                     __end_of_SwitchOffAllLeds:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodl	equ	0xFF3
  4273                           intcon	equ	0xFF2
  4274                           postinc0	equ	0xFEE
  4275                           wreg	equ	0xFE8
  4276                           postdec1	equ	0xFE5
  4277                           fsr1h	equ	0xFE2
  4278                           fsr1l	equ	0xFE1
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _PlaySound *****************
  4287 ;; Defined at:
  4288 ;;		line 601 in file "main.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  soundId         1    wreg     unsigned char 
  4291 ;;  playDuration    2   22[COMRAM] unsigned int 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  soundId         1   28[COMRAM] unsigned char 
  4294 ;;  soundAddr       1   29[COMRAM] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      unsigned char 
  4297 ;; Registers used:
  4298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : F/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4304 ;;      Params:         2       0       0       0       0       0       0
  4305 ;;      Locals:         2       0       0       0       0       0       0
  4306 ;;      Temps:          4       0       0       0       0       0       0
  4307 ;;      Totals:         8       0       0       0       0       0       0
  4308 ;;Total ram usage:        8 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    4
  4311 ;; This function calls:
  4312 ;;		_GetTime
  4313 ;;		_SoundPlayNextStep
  4314 ;; This function is called by:
  4315 ;;		_ProcessDiary
  4316 ;;		_CommandSetStatusLed
  4317 ;;		_ProcessUserCommands
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text21
  4322  001DC6                     __ptext21:
  4323                           	opt stack 0
  4324  001DC6                     _PlaySound:
  4325                           	opt stack 24
  4326                           
  4327                           ;incstack = 0
  4328  001DC6  FFFF               	dw	65535
  4329                           
  4330                           ;PlaySound@soundId stored from wreg
  4331  001DC8  6E1D               	movwf	PlaySound@soundId,c
  4332                           
  4333                           ;main.c: 603: if(soundId >= _soundCount)
  4334  001DCA  0100               	movlb	0	; () banked
  4335  001DCC  51D5               	movf	__soundCount& (0+255),w,b
  4336  001DCE  5C1D               	subwf	PlaySound@soundId,w,c
  4337  001DD0  E260               	bc	l396
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;main.c: 606: if(playDuration == 0)
  4341  001DD2  5017               	movf	PlaySound@playDuration,w,c
  4342  001DD4  1018               	iorwf	PlaySound@playDuration+1,w,c
  4343  001DD6  E105               	bnz	l5830
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;main.c: 607: soundTestEnd = 0;
  4347  001DD8  6BB8               	clrf	_soundTestEnd& (0+255),b
  4348  001DDA  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  4349  001DDC  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  4350  001DDE  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  4351  001DE0  D022               	goto	l5836
  4352  001DE2                     l5830:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;main.c: 608: else if(playDuration == 65535)
  4356  001DE2  2817               	incf	PlaySound@playDuration,w,c
  4357  001DE4  E107               	bnz	l5834
  4358  001DE6  2818               	incf	PlaySound@playDuration+1,w,c
  4359  001DE8  E105               	bnz	l5834
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;main.c: 609: soundTestEnd = 4294967295;
  4363  001DEA  69B8               	setf	_soundTestEnd& (0+255),b
  4364  001DEC  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  4365  001DEE  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  4366  001DF0  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  4367  001DF2  D019               	goto	l5836
  4368  001DF4                     l5834:
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;main.c: 610: else
  4372                           ;main.c: 611: soundTestEnd = *GetTime() + playDuration;
  4373  001DF4  EC3F  F017         	call	_GetTime	;wreg free
  4374  001DF8  6ED9               	movwf	fsr2l,c
  4375  001DFA  6ADA               	clrf	fsr2h,c
  4376  001DFC  CFDE F019          	movff	postinc2,??_PlaySound
  4377  001E00  CFDE F01A          	movff	postinc2,??_PlaySound+1
  4378  001E04  CFDE F01B          	movff	postinc2,??_PlaySound+2
  4379  001E08  CFDE F01C          	movff	postinc2,??_PlaySound+3
  4380  001E0C  5017               	movf	PlaySound@playDuration,w,c
  4381  001E0E  2419               	addwf	??_PlaySound,w,c
  4382  001E10  0100               	movlb	0	; () banked
  4383  001E12  6FB8               	movwf	_soundTestEnd& (0+255),b
  4384  001E14  5018               	movf	PlaySound@playDuration+1,w,c
  4385  001E16  201A               	addwfc	??_PlaySound+1,w,c
  4386  001E18  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  4387  001E1A  0E00               	movlw	0
  4388  001E1C  201B               	addwfc	??_PlaySound+2,w,c
  4389  001E1E  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  4390  001E20  0E00               	movlw	0
  4391  001E22  201C               	addwfc	??_PlaySound+3,w,c
  4392  001E24  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  4393  001E26                     l5836:
  4394  001E26  FFFF               	dw	65535	; assembler added errata NOP
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;main.c: 613: uint8_t soundAddr = ( EEADR = _eeSoundAddressesList + soundId, (void)0, RD
      +                           = 1, EEDATA);
  4398  001E28  51CC               	movf	__eeSoundAddressesList& (0+255),w,b
  4399  001E2A  241D               	addwf	PlaySound@soundId,w,c
  4400  001E2C  6EA9               	movwf	4009,c	;volatile
  4401                           
  4402                           ; BSR set to: 0
  4403  001E2E  80A6               	bsf	4006,0,c	;volatile
  4404                           
  4405                           ; BSR set to: 0
  4406  001E30  CFA8 F01E          	movff	4008,PlaySound@soundAddr	;volatile
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;main.c: 614: if(_eeFirstSoundAddress + soundAddr >= 256)
  4410  001E34  501E               	movf	PlaySound@soundAddr,w,c
  4411  001E36  C0CB  F019         	movff	__eeFirstSoundAddress,??_PlaySound
  4412  001E3A  6A1A               	clrf	(??_PlaySound+1)& (0+255),c
  4413  001E3C  2619               	addwf	??_PlaySound,f,c
  4414  001E3E  0E00               	movlw	0
  4415  001E40  221A               	addwfc	??_PlaySound+1,f,c
  4416  001E42  BE1A               	btfsc	??_PlaySound+1,7,c
  4417  001E44  D002               	goto	l5846
  4418  001E46  041A               	decf	??_PlaySound+1,w,c
  4419  001E48  E224               	bc	l396
  4420  001E4A                     l5846:
  4421  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;main.c: 617: _playingSoundSteps = ( EEADR = _eeFirstSoundAddress + soundAddr, (void)0, 
      +                          RD = 1, EEDATA);
  4425  001E4C  51CB               	movf	__eeFirstSoundAddress& (0+255),w,b
  4426  001E4E  241E               	addwf	PlaySound@soundAddr,w,c
  4427  001E50  6EA9               	movwf	4009,c	;volatile
  4428                           
  4429                           ; BSR set to: 0
  4430  001E52  80A6               	bsf	4006,0,c	;volatile
  4431                           
  4432                           ; BSR set to: 0
  4433  001E54  CFA8 F0D4          	movff	4008,__playingSoundSteps	;volatile
  4434                           
  4435                           ;main.c: 619: _playingSoundStartPosInEe = _eeFirstSoundAddress + soundAddr + 1;
  4436  001E58  51CB               	movf	__eeFirstSoundAddress& (0+255),w,b
  4437  001E5A  241E               	addwf	PlaySound@soundAddr,w,c
  4438  001E5C  6E19               	movwf	??_PlaySound& (0+255),c
  4439  001E5E  2819               	incf	??_PlaySound,w,c
  4440  001E60  6E6E               	movwf	__playingSoundStartPosInEe,c
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;main.c: 620: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  4444  001E62  51D4               	movf	__playingSoundSteps& (0+255),w,b
  4445  001E64  6E19               	movwf	??_PlaySound& (0+255),c
  4446  001E66  506E               	movf	__playingSoundStartPosInEe,w,c
  4447  001E68  0101               	movlb	1	; () banked
  4448  001E6A  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  4449  001E6C  C019  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  4450                           
  4451                           ; BSR set to: 1
  4452                           ;main.c: 621: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  4453  001E70  0100               	movlb	0	; () banked
  4454  001E72  51D4               	movf	__playingSoundSteps& (0+255),w,b
  4455  001E74  0D03               	mullw	3
  4456  001E76  506E               	movf	__playingSoundStartPosInEe,w,c
  4457  001E78  26F3               	addwf	prodl,f,c
  4458  001E7A  0E00               	movlw	0
  4459  001E7C  22F4               	addwfc	prodh,f,c
  4460  001E7E  BEF4               	btfsc	prodh,7,c
  4461  001E80  D002               	goto	l402
  4462  001E82  04F4               	decf	prodh,w,c
  4463  001E84  E206               	bc	l396
  4464  001E86                     l402:
  4465  001E86  FFFF               	dw	65535	; assembler added errata NOP
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;main.c: 624: _playingSoundCurPos = 0;
  4469  001E88  6BD3               	clrf	__playingSoundCurPos& (0+255),b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;main.c: 625: _isSoundPlaying = 1;
  4473  001E8A  0E01               	movlw	1
  4474  001E8C  6FD0               	movwf	__isSoundPlaying& (0+255),b
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;main.c: 626: SoundPlayNextStep();
  4478  001E8E  EC0F  F010         	call	_SoundPlayNextStep	;wreg free
  4479  001E92                     l396:
  4480                           
  4481                           ; BSR set to: 0
  4482  001E92  0012               	return		;funcret
  4483  001E94  FFFF               	dw	65535	; errata NOP
  4484  001E96                     __end_of_PlaySound:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           intcon	equ	0xFF2
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postdec1	equ	0xFE5
  4496                           fsr1h	equ	0xFE2
  4497                           fsr1l	equ	0xFE1
  4498                           indf2	equ	0xFDF
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _SoundPlayNextStep *****************
  4506 ;; Defined at:
  4507 ;;		line 556 in file "main.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  stepDuty        2   19[COMRAM] unsigned int 
  4512 ;;  duration        1   21[COMRAM] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : F/0
  4519 ;;		On exit  : F/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4522 ;;      Params:         0       0       0       0       0       0       0
  4523 ;;      Locals:         3       0       0       0       0       0       0
  4524 ;;      Temps:          5       0       0       0       0       0       0
  4525 ;;      Totals:         8       0       0       0       0       0       0
  4526 ;;Total ram usage:        8 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    3
  4529 ;; This function calls:
  4530 ;;		_GetTime
  4531 ;;		_SetBuzzerDuty
  4532 ;;		_StopPlaying
  4533 ;;		_millis
  4534 ;; This function is called by:
  4535 ;;		_PlaySound
  4536 ;;		_main
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text22
  4541  00201E                     __ptext22:
  4542                           	opt stack 0
  4543  00201E                     _SoundPlayNextStep:
  4544                           	opt stack 24
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;incstack = 0
  4548  00201E  FFFF               	dw	65535
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;main.c: 558: if(_playingSoundCurPos >= _playingSoundSteps)
  4552  002020  51D4               	movf	__playingSoundSteps& (0+255),w,b
  4553  002022  5DD3               	subwf	__playingSoundCurPos& (0+255),w,b
  4554  002024  E316               	bnc	l5672
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 559: {
  4558                           ;main.c: 560: _playingSoundCurPos = 0;
  4559  002026  6BD3               	clrf	__playingSoundCurPos& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;main.c: 561: if(*GetTime() >= soundTestEnd)
  4563  002028  EC3F  F017         	call	_GetTime	;wreg free
  4564  00202C  6ED9               	movwf	fsr2l,c
  4565  00202E  6ADA               	clrf	fsr2h,c
  4566  002030  0100               	movlb	0	; () banked
  4567  002032  51B8               	movf	_soundTestEnd& (0+255),w,b
  4568  002034  5CDE               	subwf	postinc2,w,c
  4569  002036  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  4570  002038  58DE               	subwfb	postinc2,w,c
  4571  00203A  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  4572  00203C  58DE               	subwfb	postinc2,w,c
  4573  00203E  50DE               	movf	postinc2,w,c
  4574  002040  0A80               	xorlw	128
  4575  002042  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  4576  002044  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  4577  002046  0A80               	xorlw	128
  4578  002048  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  4579  00204A  E303               	bnc	l5672
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;main.c: 562: {
  4583                           ;main.c: 563: StopPlaying();
  4584  00204C  EC0F  F017         	call	_StopPlaying	;wreg free
  4585  002050  D041               	goto	l389
  4586  002052                     l5672:
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;main.c: 565: }
  4590                           ;main.c: 566: }
  4591                           ;main.c: 567: uint16_t stepDuty = ( EEADR = _playingSoundStartPosInEe + _playingSoundCur
      +                          Pos * 3, (void)0, RD = 1, EEDATA);
  4592  002052  51D3               	movf	__playingSoundCurPos& (0+255),w,b
  4593  002054  0D03               	mullw	3
  4594  002056  50F3               	movf	prodl,w,c
  4595  002058  246E               	addwf	__playingSoundStartPosInEe,w,c
  4596  00205A  6EA9               	movwf	4009,c	;volatile
  4597                           
  4598                           ; BSR set to: 0
  4599  00205C  80A6               	bsf	4006,0,c	;volatile
  4600                           
  4601                           ; BSR set to: 0
  4602  00205E  CFA8 F014          	movff	4008,SoundPlayNextStep@stepDuty	;volatile
  4603  002062  6A15               	clrf	SoundPlayNextStep@stepDuty+1,c
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 568: stepDuty <<= 6;
  4607  002064  0E06               	movlw	6
  4608  002066                     u4375:
  4609  002066  FFFF               	dw	65535	; assembler added errata NOP
  4610  002068  90D8               	bcf	status,0,c
  4611  00206A  3614               	rlcf	SoundPlayNextStep@stepDuty,f,c
  4612  00206C  3615               	rlcf	SoundPlayNextStep@stepDuty+1,f,c
  4613  00206E  2EE8               	decfsz	wreg,f,c
  4614  002070  D7FA               	goto	u4375
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;main.c: 569: _playingEndMs = millis() + stepDuty;
  4618  002072  EC58  F016         	call	_millis	;wreg free
  4619  002076  5014               	movf	SoundPlayNextStep@stepDuty,w,c
  4620  002078  2407               	addwf	?_millis,w,c
  4621  00207A  0100               	movlb	0	; () banked
  4622  00207C  6FA0               	movwf	__playingEndMs& (0+255),b
  4623  00207E  5015               	movf	SoundPlayNextStep@stepDuty+1,w,c
  4624  002080  2008               	addwfc	?_millis+1,w,c
  4625  002082  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  4626  002084  0E00               	movlw	0
  4627  002086  2009               	addwfc	?_millis+2,w,c
  4628  002088  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  4629  00208A  0E00               	movlw	0
  4630  00208C  200A               	addwfc	?_millis+3,w,c
  4631  00208E  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;main.c: 570: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  4635  002090  51D3               	movf	__playingSoundCurPos& (0+255),w,b
  4636  002092  0D03               	mullw	3
  4637  002094  50F3               	movf	prodl,w,c
  4638  002096  246E               	addwf	__playingSoundStartPosInEe,w,c
  4639  002098  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  4640  00209A  280F               	incf	??_SoundPlayNextStep,w,c
  4641  00209C  6EA9               	movwf	4009,c	;volatile
  4642                           
  4643                           ; BSR set to: 0
  4644  00209E  80A6               	bsf	4006,0,c	;volatile
  4645                           
  4646                           ; BSR set to: 0
  4647  0020A0  CFA8 FFCB          	movff	4008,4043	;volatile
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;main.c: 571: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  4651  0020A4  51D3               	movf	__playingSoundCurPos& (0+255),w,b
  4652  0020A6  0D03               	mullw	3
  4653  0020A8  50F3               	movf	prodl,w,c
  4654  0020AA  246E               	addwf	__playingSoundStartPosInEe,w,c
  4655  0020AC  0F02               	addlw	2
  4656  0020AE  6EA9               	movwf	4009,c	;volatile
  4657                           
  4658                           ; BSR set to: 0
  4659  0020B0  80A6               	bsf	4006,0,c	;volatile
  4660                           
  4661                           ; BSR set to: 0
  4662  0020B2  CFA8 F016          	movff	4008,SoundPlayNextStep@duration	;volatile
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;main.c: 572: _playingSoundCurPos++;
  4666  0020B6  2BD3               	incf	__playingSoundCurPos& (0+255),f,b
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 573: if(duration == 0 || PR2 == 0)
  4670  0020B8  5016               	movf	SoundPlayNextStep@duration,w,c
  4671  0020BA  E002               	bz	l392
  4672                           
  4673                           ; BSR set to: 0
  4674  0020BC  50CB               	movf	4043,w,c	;volatile
  4675  0020BE  E103               	bnz	l5700
  4676  0020C0                     l392:
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;main.c: 574: {
  4680                           ;main.c: 575: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4681  0020C0  94CA               	bcf	4042,2,c	;volatile
  4682  0020C2  8494               	bsf	3988,2,c	;volatile
  4683                           
  4684                           ;main.c: 576: return;
  4685  0020C4  D007               	goto	l389
  4686  0020C6                     l5700:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;main.c: 577: }
  4690                           ;main.c: 578: SetBuzzerDuty(duration);
  4691  0020C6  C016  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  4692  0020CA  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4693  0020CC  EC13  F016         	call	_SetBuzzerDuty	;wreg free
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;main.c: 579: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  4697  0020D0  9494               	bcf	3988,2,c	;volatile
  4698                           
  4699                           ; BSR set to: 0
  4700  0020D2  84CA               	bsf	4042,2,c	;volatile
  4701  0020D4                     l389:
  4702  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  4703                           
  4704                           ; BSR set to: 0
  4705  0020D6  0012               	return		;funcret
  4706  0020D8  FFFF               	dw	65535	; errata NOP
  4707  0020DA                     __end_of_SoundPlayNextStep:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           intcon	equ	0xFF2
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           fsr1h	equ	0xFE2
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _StopPlaying *****************
  4729 ;; Defined at:
  4730 ;;		line 548 in file "main.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		None
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : F/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         0       0       0       0       0       0       0
  4745 ;;      Locals:         0       0       0       0       0       0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0
  4747 ;;      Totals:         0       0       0       0       0       0       0
  4748 ;;Total ram usage:        0 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    2
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_SoundPlayNextStep
  4755 ;;		_ResetEvent
  4756 ;;		_main
  4757 ;;		_CommandSetStatusLed
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text23
  4762  002E1E                     __ptext23:
  4763                           	opt stack 0
  4764  002E1E                     _StopPlaying:
  4765                           	opt stack 24
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;incstack = 0
  4769  002E1E  FFFF               	dw	65535
  4770                           
  4771                           ;main.c: 550: _isSoundPlaying = 0;
  4772  002E20  0100               	movlb	0	; () banked
  4773  002E22  6BD0               	clrf	__isSoundPlaying& (0+255),b
  4774                           
  4775                           ;main.c: 551: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4776  002E24  94CA               	bcf	4042,2,c	;volatile
  4777  002E26  8494               	bsf	3988,2,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780  002E28  0012               	return		;funcret
  4781  002E2A  FFFF               	dw	65535	; errata NOP
  4782  002E2C                     __end_of_StopPlaying:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           postinc0	equ	0xFEE
  4792                           wreg	equ	0xFE8
  4793                           postdec1	equ	0xFE5
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function _SetBuzzerDuty *****************
  4804 ;; Defined at:
  4805 ;;		line 388 in file "main.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  dc              2    6[COMRAM] unsigned int 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : F/0
  4816 ;;		On exit  : F/0
  4817 ;;		Unchanged: F/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4819 ;;      Params:         2       0       0       0       0       0       0
  4820 ;;      Locals:         0       0       0       0       0       0       0
  4821 ;;      Temps:          2       0       0       0       0       0       0
  4822 ;;      Totals:         4       0       0       0       0       0       0
  4823 ;;Total ram usage:        4 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    2
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_SoundPlayNextStep
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text24
  4834  002C26                     __ptext24:
  4835                           	opt stack 0
  4836  002C26                     _SetBuzzerDuty:
  4837                           	opt stack 24
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;incstack = 0
  4841  002C26  FFFF               	dw	65535
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;main.c: 393: CCP1CONbits.DC1B = dc & 0x03;
  4845  002C28  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4846  002C2C  0E03               	movlw	3
  4847  002C2E  1609               	andwf	??_SetBuzzerDuty,f,c
  4848  002C30  3A09               	swapf	??_SetBuzzerDuty,f,c
  4849  002C32  50BD               	movf	4029,w,c	;volatile
  4850  002C34  1809               	xorwf	??_SetBuzzerDuty,w,c
  4851  002C36  0BCF               	andlw	-49
  4852  002C38  1809               	xorwf	??_SetBuzzerDuty,w,c
  4853  002C3A  6EBD               	movwf	4029,c	;volatile
  4854                           
  4855                           ;main.c: 394: CCPR1L = (uint8_t)(dc >> 2);
  4856  002C3C  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4857  002C40  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  4858  002C44  90D8               	bcf	status,0,c
  4859  002C46  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4860  002C48  3209               	rrcf	??_SetBuzzerDuty,f,c
  4861  002C4A  90D8               	bcf	status,0,c
  4862  002C4C  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4863  002C4E  3209               	rrcf	??_SetBuzzerDuty,f,c
  4864  002C50  5009               	movf	??_SetBuzzerDuty,w,c
  4865  002C52  6EBE               	movwf	4030,c	;volatile
  4866                           
  4867                           ; BSR set to: 0
  4868  002C54  0012               	return		;funcret
  4869  002C56  FFFF               	dw	65535	; errata NOP
  4870  002C58                     __end_of_SetBuzzerDuty:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _GetTime *****************
  4892 ;; Defined at:
  4893 ;;		line 207 in file "user.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      PTR long 
  4900 ;; Registers used:
  4901 ;;		wreg
  4902 ;; Tracked objects:
  4903 ;;		On entry : E/0
  4904 ;;		On exit  : E/0
  4905 ;;		Unchanged: E/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4907 ;;      Params:         2       0       0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0
  4910 ;;      Totals:         2       0       0       0       0       0       0
  4911 ;;Total ram usage:        2 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    2
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_SoundPlayNextStep
  4918 ;;		_PlaySound
  4919 ;;		_ProcessDiary
  4920 ;;		_main
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text25
  4925  002E7E                     __ptext25:
  4926                           	opt stack 0
  4927  002E7E                     _GetTime:
  4928                           	opt stack 24
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;incstack = 0
  4932  002E7E  FFFF               	dw	65535
  4933                           
  4934                           ;user.c: 209: return &currentTime;
  4935  002E80  0EDA               	movlw	_currentTime& (0+255)
  4936  002E82  0012               	return		;funcret
  4937  002E84  FFFF               	dw	65535	; errata NOP
  4938  002E86                     __end_of_GetTime:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postdec1	equ	0xFE5
  4950                           fsr1h	equ	0xFE2
  4951                           fsr1l	equ	0xFE1
  4952                           indf2	equ	0xFDF
  4953                           postinc2	equ	0xFDE
  4954                           postdec2	equ	0xFDD
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _LoadNextEvent *****************
  4960 ;; Defined at:
  4961 ;;		line 647 in file "main.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  v1              1   11[COMRAM] unsigned char 
  4966 ;;  totalMinutes    2    9[COMRAM] unsigned int 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4976 ;;      Params:         0       0       0       0       0       0       0
  4977 ;;      Locals:         3       0       0       0       0       0       0
  4978 ;;      Temps:          2       0       0       0       0       0       0
  4979 ;;      Totals:         5       0       0       0       0       0       0
  4980 ;;Total ram usage:        5 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    3
  4983 ;; This function calls:
  4984 ;;		_getTotalMinutes
  4985 ;; This function is called by:
  4986 ;;		_InitFromEeprom
  4987 ;;		_ProcessDiary
  4988 ;;		_io_poll
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text26
  4993  0016D8                     __ptext26:
  4994                           	opt stack 0
  4995  0016D8                     _LoadNextEvent:
  4996                           	opt stack 26
  4997                           
  4998                           ;incstack = 0
  4999  0016D8  FFFF               	dw	65535
  5000                           
  5001                           ;main.c: 649: if(eventCount == 0)
  5002  0016DA  5071               	movf	_eventCount,w,c
  5003  0016DC  E101 D085          	bz	l413
  5004                           
  5005                           ;main.c: 652: uint16_t totalMinutes;
  5006                           ;main.c: 655: if(!getTotalMinutes(&totalMinutes))
  5007  0016E0  0E0A               	movlw	LoadNextEvent@totalMinutes& (0+255)
  5008  0016E2  EC80  F016         	call	_getTotalMinutes
  5009  0016E6  0900               	iorlw	0
  5010  0016E8  E101 D07F          	bz	l413
  5011  0016EC                     l6056:
  5012                           
  5013                           ;main.c: 666: {
  5014                           ;main.c: 667: if(curEventNum == 0xff)
  5015  0016EC  2873               	incf	_curEventNum,w,c
  5016  0016EE  E102               	bnz	l6060
  5017                           
  5018                           ;main.c: 668: curEventNum = 0;
  5019  0016F0  6A73               	clrf	_curEventNum,c
  5020  0016F2  D001               	goto	l6062
  5021  0016F4                     l6060:
  5022                           
  5023                           ;main.c: 669: else
  5024                           ;main.c: 670: curEventNum++;
  5025  0016F4  2A73               	incf	_curEventNum,f,c
  5026  0016F6                     l6062:
  5027  0016F6  FFFF               	dw	65535	; assembler added errata NOP
  5028                           
  5029                           ;main.c: 671: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5030  0016F8  5074               	movf	_currentAlarmedEventNum,w,c
  5031  0016FA  6E08               	movwf	??_LoadNextEvent& (0+255),c
  5032  0016FC  5073               	movf	_curEventNum,w,c
  5033  0016FE  0101               	movlb	1	; () banked
  5034  001700  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5035  001702  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5036                           
  5037                           ; BSR set to: 1
  5038                           ;main.c: 672: if(curEventNum >= eventCount)
  5039  001706  5071               	movf	_eventCount,w,c
  5040  001708  5C73               	subwf	_curEventNum,w,c
  5041  00170A  E30E               	bnc	l6072
  5042                           
  5043                           ; BSR set to: 1
  5044                           ;main.c: 673: {
  5045                           ;main.c: 674: curEventNum = 0xff;
  5046  00170C  6873               	setf	_curEventNum,c
  5047                           
  5048                           ;main.c: 675: curEventTotalMinutes = 0;
  5049  00170E  0100               	movlb	0	; () banked
  5050  001710  6BC4               	clrf	_curEventTotalMinutes& (0+255),b
  5051  001712  6BC5               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  5052                           
  5053                           ;main.c: 676: _MODBUSInputRegs[3] = 0;
  5054  001714  0101               	movlb	1	; () banked
  5055  001716  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  5056  001718  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  5057                           
  5058                           ; BSR set to: 1
  5059                           ;main.c: 677: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5060  00171A  5074               	movf	_currentAlarmedEventNum,w,c
  5061  00171C  6E08               	movwf	??_LoadNextEvent& (0+255),c
  5062  00171E  5073               	movf	_curEventNum,w,c
  5063  001720  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5064  001722  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5065  001726  D061               	goto	l413
  5066  001728                     l6072:
  5067                           
  5068                           ; BSR set to: 1
  5069                           ;main.c: 679: }
  5070                           ;main.c: 690: uint8_t v1 = ( EEADR = 10 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  5071  001728  5073               	movf	_curEventNum,w,c
  5072  00172A  0D02               	mullw	2
  5073  00172C  50F3               	movf	prodl,w,c
  5074  00172E  0F0B               	addlw	11
  5075  001730  6EA9               	movwf	4009,c	;volatile
  5076                           
  5077                           ; BSR set to: 1
  5078  001732  80A6               	bsf	4006,0,c	;volatile
  5079                           
  5080                           ; BSR set to: 1
  5081  001734  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  5082                           
  5083                           ;main.c: 691: curEventTotalMinutes = (v1 & 0x1F) * 60;
  5084  001738  500C               	movf	LoadNextEvent@v1,w,c
  5085  00173A  0B1F               	andlw	31
  5086  00173C  0D3C               	mullw	60
  5087  00173E  CFF3 F0C4          	movff	prodl,_curEventTotalMinutes
  5088  001742  CFF4 F0C5          	movff	prodh,_curEventTotalMinutes+1
  5089                           
  5090                           ; BSR set to: 1
  5091                           ;main.c: 693: _nextEventPlayDuration = (v1 >> 5);
  5092  001746  380C               	swapf	LoadNextEvent@v1,w,c
  5093  001748  42E8               	rrncf	wreg,f,c
  5094  00174A  0B07               	andlw	7
  5095  00174C  0100               	movlb	0	; () banked
  5096  00174E  6FC0               	movwf	__nextEventPlayDuration& (0+255),b
  5097  001750  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5098                           
  5099                           ;main.c: 694: switch(_nextEventPlayDuration)
  5100  001752  D01A               	goto	l6094
  5101  001754                     l6080:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;main.c: 697: _nextEventPlayDuration = 10;
  5105  001754  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5106  001756  0E0A               	movlw	10
  5107  001758  D011               	goto	L6
  5108  00175A                     l6082:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;main.c: 700: _nextEventPlayDuration = 30;
  5112  00175A  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5113  00175C  0E1E               	movlw	30
  5114  00175E  D00E               	goto	L6
  5115  001760                     l6084:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 703: _nextEventPlayDuration = 60;
  5119  001760  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5120  001762  0E3C               	movlw	60
  5121  001764  D00B               	goto	L6
  5122  001766                     l6086:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;main.c: 706: _nextEventPlayDuration = 60*5;
  5126  001766  0E01               	movlw	1
  5127  001768  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5128  00176A  0E2C               	movlw	44
  5129  00176C  D007               	goto	L6
  5130  00176E                     l6088:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;main.c: 709: _nextEventPlayDuration = 60*12;
  5134  00176E  0E02               	movlw	2
  5135  001770  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5136  001772  0ED0               	movlw	208
  5137  001774  D003               	goto	L6
  5138  001776                     l6090:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;main.c: 712: _nextEventPlayDuration = 60*30;
  5142  001776  0E07               	movlw	7
  5143  001778  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5144  00177A  0E08               	movlw	8
  5145  00177C                     L6:
  5146  00177C  FFFF               	dw	65535	; assembler added errata NOP
  5147  00177E  6FC0               	movwf	__nextEventPlayDuration& (0+255),b
  5148                           
  5149                           ;main.c: 713: break;
  5150  001780  D019               	goto	l6096
  5151  001782                     l427:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;main.c: 715: _nextEventPlayDuration = 65535;
  5155  001782  69C0               	setf	__nextEventPlayDuration& (0+255),b
  5156  001784  69C1               	setf	(__nextEventPlayDuration+1)& (0+255),b
  5157                           
  5158                           ;main.c: 716: break;
  5159  001786  D016               	goto	l6096
  5160  001788                     l6094:
  5161  001788  FFFF               	dw	65535	; assembler added errata NOP
  5162                           
  5163                           ; BSR set to: 0
  5164  00178A  C0C0  F008         	movff	__nextEventPlayDuration,??_LoadNextEvent
  5165  00178E  C0C1  F009         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  5166                           
  5167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5168                           ; Switch size 1, requested type "speed"
  5169                           ; Number of cases is 1, Range of values is 0 to 0
  5170                           ; switch strategies available:
  5171                           ; Name         Instructions Cycles
  5172                           ; simple_byte            4     3 (average)
  5173                           ;	Chosen strategy is simple_byte
  5174  001792  5009               	movf	??_LoadNextEvent+1,w,c
  5175  001794  E10F               	bnz	l6096
  5176                           
  5177                           ; BSR set to: 0
  5178                           ; Switch size 1, requested type "speed"
  5179                           ; Number of cases is 7, Range of values is 1 to 7
  5180                           ; switch strategies available:
  5181                           ; Name         Instructions Cycles
  5182                           ; simple_byte           22    12 (average)
  5183                           ;	Chosen strategy is simple_byte
  5184  001796  5008               	movf	??_LoadNextEvent,w,c
  5185  001798  0A01               	xorlw	1	; case 1
  5186  00179A  E0DC               	bz	l6080
  5187  00179C  0A03               	xorlw	3	; case 2
  5188  00179E  E0DD               	bz	l6082
  5189  0017A0  0A01               	xorlw	1	; case 3
  5190  0017A2  E0DE               	bz	l6084
  5191  0017A4  0A07               	xorlw	7	; case 4
  5192  0017A6  E0DF               	bz	l6086
  5193  0017A8  0A01               	xorlw	1	; case 5
  5194  0017AA  E0E1               	bz	l6088
  5195  0017AC  0A03               	xorlw	3	; case 6
  5196  0017AE  E0E3               	bz	l6090
  5197  0017B0  0A01               	xorlw	1	; case 7
  5198  0017B2  E0E7               	bz	l427
  5199  0017B4                     l6096:
  5200  0017B4  FFFF               	dw	65535	; assembler added errata NOP
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;main.c: 718: uint8_t v1 = ( EEADR = 10 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  5204  0017B6  5073               	movf	_curEventNum,w,c
  5205  0017B8  0D02               	mullw	2
  5206  0017BA  50F3               	movf	prodl,w,c
  5207  0017BC  0F0C               	addlw	12
  5208  0017BE  6EA9               	movwf	4009,c	;volatile
  5209                           
  5210                           ; BSR set to: 0
  5211  0017C0  80A6               	bsf	4006,0,c	;volatile
  5212                           
  5213                           ; BSR set to: 0
  5214  0017C2  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;main.c: 719: curEventTotalMinutes += v1 & 0x3F;
  5218  0017C6  500C               	movf	LoadNextEvent@v1,w,c
  5219  0017C8  0B3F               	andlw	63
  5220  0017CA  27C4               	addwf	_curEventTotalMinutes& (0+255),f,b
  5221  0017CC  0E00               	movlw	0
  5222  0017CE  23C5               	addwfc	(_curEventTotalMinutes+1)& (0+255),f,b
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;main.c: 720: _nextEventSoundId = v1 >> 6;
  5226  0017D0  440C               	rlncf	LoadNextEvent@v1,w,c
  5227  0017D2  46E8               	rlncf	wreg,f,c
  5228  0017D4  0B03               	andlw	3
  5229  0017D6  6FD2               	movwf	__nextEventSoundId& (0+255),b
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;main.c: 722: }while(curEventTotalMinutes <= totalMinutes);
  5233  0017D8  51C4               	movf	_curEventTotalMinutes& (0+255),w,b
  5234  0017DA  5C0A               	subwf	LoadNextEvent@totalMinutes,w,c
  5235  0017DC  51C5               	movf	(_curEventTotalMinutes+1)& (0+255),w,b
  5236  0017DE  580B               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  5237  0017E0  E285               	bc	l6056
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;main.c: 723: _MODBUSInputRegs[3] = curEventTotalMinutes;
  5241  0017E2  C0C4  F1B0         	movff	_curEventTotalMinutes,__MODBUSInputRegs+6
  5242  0017E6  C0C5  F1B1         	movff	_curEventTotalMinutes+1,__MODBUSInputRegs+7
  5243  0017EA                     l413:
  5244  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  5245  0017EC  0012               	return		;funcret
  5246  0017EE  FFFF               	dw	65535	; errata NOP
  5247  0017F0                     __end_of_LoadNextEvent:
  5248                           	opt stack 0
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           intcon	equ	0xFF2
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           postdec1	equ	0xFE5
  5259                           fsr1h	equ	0xFE2
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           postdec2	equ	0xFDD
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function _getTotalMinutes *****************
  5269 ;; Defined at:
  5270 ;;		line 267 in file "interrupts.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  totalMinutes    1    wreg     PTR unsigned int 
  5273 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  totalMinutes    1    6[COMRAM] PTR unsigned int 
  5276 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      unsigned char 
  5279 ;; Registers used:
  5280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/1
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5286 ;;      Params:         0       0       0       0       0       0       0
  5287 ;;      Locals:         1       0       0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0
  5289 ;;      Totals:         1       0       0       0       0       0       0
  5290 ;;Total ram usage:        1 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    2
  5293 ;; This function calls:
  5294 ;;		Nothing
  5295 ;; This function is called by:
  5296 ;;		_LoadNextEvent
  5297 ;;		_ProcessDiary
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	text27
  5302  002D00                     __ptext27:
  5303                           	opt stack 0
  5304  002D00                     _getTotalMinutes:
  5305                           	opt stack 26
  5306                           
  5307                           ;incstack = 0
  5308  002D00  FFFF               	dw	65535
  5309                           
  5310                           ;getTotalMinutes@totalMinutes stored from wreg
  5311  002D02  6E07               	movwf	getTotalMinutes@totalMinutes,c
  5312                           
  5313                           ;interrupts.c: 269: if(globalHours == 0xFF)
  5314  002D04  2875               	incf	_globalHours,w,c	;volatile
  5315  002D06  E102               	bnz	l112
  5316                           
  5317                           ;interrupts.c: 270: return 0;
  5318  002D08  0E00               	movlw	0
  5319  002D0A  D00A               	goto	l113
  5320  002D0C                     l112:
  5321                           
  5322                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  5323  002D0C  9EF2               	bcf	intcon,7,c	;volatile
  5324                           
  5325                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  5326  002D0E  5007               	movf	getTotalMinutes@totalMinutes,w,c
  5327  002D10  6ED9               	movwf	fsr2l,c
  5328  002D12  6ADA               	clrf	fsr2h,c
  5329  002D14  C0C2  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  5330  002D18  C0C3  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  5331                           
  5332                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  5333  002D1C  8EF2               	bsf	intcon,7,c	;volatile
  5334                           
  5335                           ;interrupts.c: 274: return 1;
  5336  002D1E  0E01               	movlw	1
  5337  002D20                     l113:
  5338  002D20  FFFF               	dw	65535	; assembler added errata NOP
  5339  002D22  0012               	return		;funcret
  5340  002D24  FFFF               	dw	65535	; errata NOP
  5341  002D26                     __end_of_getTotalMinutes:
  5342                           	opt stack 0
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           intcon	equ	0xFF2
  5350                           postinc0	equ	0xFEE
  5351                           wreg	equ	0xFE8
  5352                           postdec1	equ	0xFE5
  5353                           fsr1h	equ	0xFE2
  5354                           fsr1l	equ	0xFE1
  5355                           indf2	equ	0xFDF
  5356                           postinc2	equ	0xFDE
  5357                           postdec2	equ	0xFDD
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function _LightLed *****************
  5363 ;; Defined at:
  5364 ;;		line 299 in file "main.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  ledNum          1    wreg     unsigned char 
  5367 ;;  ledState        1    6[COMRAM] enum E2447
  5368 ;;  blink           1    7[COMRAM] unsigned char 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  ledNum          1   11[COMRAM] unsigned char 
  5371 ;;  statusShift     1   13[COMRAM] unsigned char 
  5372 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5382 ;;      Params:         2       0       0       0       0       0       0
  5383 ;;      Locals:         3       0       0       0       0       0       0
  5384 ;;      Temps:          3       0       0       0       0       0       0
  5385 ;;      Totals:         8       0       0       0       0       0       0
  5386 ;;Total ram usage:        8 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    2
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_ShowFailure
  5393 ;;		_ResetEvent
  5394 ;;		_ProcessDiary
  5395 ;;		_ProcessUserCommands
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text28
  5400  00096A                     __ptext28:
  5401                           	opt stack 0
  5402  00096A                     _LightLed:
  5403                           	opt stack 26
  5404                           
  5405                           ;incstack = 0
  5406  00096A  FFFF               	dw	65535
  5407                           
  5408                           ;LightLed@ledNum stored from wreg
  5409  00096C  6E0C               	movwf	LightLed@ledNum,c
  5410                           
  5411                           ;main.c: 301: if(ledNum < 1 || ledNum > 60)
  5412  00096E  500C               	movf	LightLed@ledNum,w,c
  5413  000970  E101 D171          	bz	l266
  5414  000974  0E3C               	movlw	60
  5415  000976  640C               	cpfsgt	LightLed@ledNum,c
  5416  000978  D001               	goto	l5758
  5417  00097A  D16D               	goto	l266
  5418  00097C                     l5758:
  5419  00097C  FFFF               	dw	65535	; assembler added errata NOP
  5420                           
  5421                           ;main.c: 303: ledNum--;
  5422  00097E  060C               	decf	LightLed@ledNum,f,c
  5423                           
  5424                           ;main.c: 305: uint8_t ststusIndex = ledNum >> 2;
  5425  000980  400C               	rrncf	LightLed@ledNum,w,c
  5426  000982  42E8               	rrncf	wreg,f,c
  5427  000984  0B3F               	andlw	63
  5428  000986  6E0D               	movwf	LightLed@ststusIndex,c
  5429                           
  5430                           ;main.c: 306: uint8_t statusShift = (ledNum & 0x03) << 1;
  5431  000988  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  5432  00098C  0E03               	movlw	3
  5433  00098E  1609               	andwf	??_LightLed,f,c
  5434  000990  90D8               	bcf	status,0,c
  5435  000992  3409               	rlcf	??_LightLed,w,c
  5436  000994  6E0E               	movwf	LightLed@statusShift,c
  5437                           
  5438                           ;main.c: 308: switch(ledState)
  5439  000996  D153               	goto	l5798
  5440  000998                     l5764:
  5441                           
  5442                           ;main.c: 311: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5443  000998  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5444  00099C  2A09               	incf	??_LightLed,f,c
  5445  00099E  0E01               	movlw	1
  5446  0009A0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5447  0009A2  2A09               	incf	??_LightLed,f,c
  5448  0009A4  D003               	goto	u4494
  5449  0009A6                     u4495:
  5450  0009A6  FFFF               	dw	65535	; assembler added errata NOP
  5451  0009A8  90D8               	bcf	status,0,c
  5452  0009AA  360A               	rlcf	??_LightLed+1,f,c
  5453  0009AC                     u4494:
  5454  0009AC  FFFF               	dw	65535	; assembler added errata NOP
  5455  0009AE  2E09               	decfsz	??_LightLed,f,c
  5456  0009B0  D7FA               	goto	u4495
  5457  0009B2  1C0A               	comf	??_LightLed+1,w,c
  5458  0009B4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5459  0009B6  500D               	movf	LightLed@ststusIndex,w,c
  5460  0009B8  0F90               	addlw	low _ledStatuses
  5461  0009BA  6ED9               	movwf	fsr2l,c
  5462  0009BC  6ADA               	clrf	fsr2h,c
  5463  0009BE  500B               	movf	??_LightLed+2,w,c
  5464  0009C0  16DF               	andwf	indf2,f,c
  5465                           
  5466                           ;main.c: 312: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5467  0009C2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5468  0009C6  0E01               	movlw	1
  5469  0009C8  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5470  0009CA  2A09               	incf	??_LightLed,f,c
  5471  0009CC  D003               	goto	u4504
  5472  0009CE                     u4505:
  5473  0009CE  FFFF               	dw	65535	; assembler added errata NOP
  5474  0009D0  90D8               	bcf	status,0,c
  5475  0009D2  360A               	rlcf	??_LightLed+1,f,c
  5476  0009D4                     u4504:
  5477  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5478  0009D6  2E09               	decfsz	??_LightLed,f,c
  5479  0009D8  D7FA               	goto	u4505
  5480  0009DA  1C0A               	comf	??_LightLed+1,w,c
  5481  0009DC  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5482  0009DE  500D               	movf	LightLed@ststusIndex,w,c
  5483  0009E0  0F90               	addlw	low _ledStatuses
  5484  0009E2  6ED9               	movwf	fsr2l,c
  5485  0009E4  6ADA               	clrf	fsr2h,c
  5486  0009E6  500B               	movf	??_LightLed+2,w,c
  5487  0009E8  16DF               	andwf	indf2,f,c
  5488                           
  5489                           ;main.c: 313: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5490  0009EA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5491  0009EE  2A09               	incf	??_LightLed,f,c
  5492  0009F0  0E01               	movlw	1
  5493  0009F2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5494  0009F4  2A09               	incf	??_LightLed,f,c
  5495  0009F6  D003               	goto	u4514
  5496  0009F8                     u4515:
  5497  0009F8  FFFF               	dw	65535	; assembler added errata NOP
  5498  0009FA  90D8               	bcf	status,0,c
  5499  0009FC  360A               	rlcf	??_LightLed+1,f,c
  5500  0009FE                     u4514:
  5501  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  5502  000A00  2E09               	decfsz	??_LightLed,f,c
  5503  000A02  D7FA               	goto	u4515
  5504  000A04  1C0A               	comf	??_LightLed+1,w,c
  5505  000A06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5506  000A08  500D               	movf	LightLed@ststusIndex,w,c
  5507  000A0A  0F80               	addlw	low _ledBlink
  5508  000A0C  6ED9               	movwf	fsr2l,c
  5509  000A0E  6ADA               	clrf	fsr2h,c
  5510  000A10  500B               	movf	??_LightLed+2,w,c
  5511  000A12  16DF               	andwf	indf2,f,c
  5512                           
  5513                           ;main.c: 314: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5514  000A14  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5515  000A18  0E01               	movlw	1
  5516  000A1A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5517  000A1C  2A09               	incf	??_LightLed,f,c
  5518  000A1E  D003               	goto	u4524
  5519  000A20                     u4525:
  5520  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5521  000A22  90D8               	bcf	status,0,c
  5522  000A24  360A               	rlcf	??_LightLed+1,f,c
  5523  000A26                     u4524:
  5524  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5525  000A28  2E09               	decfsz	??_LightLed,f,c
  5526  000A2A  D7FA               	goto	u4525
  5527  000A2C  D05F               	goto	L7
  5528  000A2E                     l5766:
  5529                           
  5530                           ;main.c: 317: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  5531  000A2E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5532  000A32  2A09               	incf	??_LightLed,f,c
  5533  000A34  0E01               	movlw	1
  5534  000A36  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5535  000A38  2A09               	incf	??_LightLed,f,c
  5536  000A3A  D003               	goto	u4534
  5537  000A3C                     u4535:
  5538  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5539  000A3E  90D8               	bcf	status,0,c
  5540  000A40  360A               	rlcf	??_LightLed+1,f,c
  5541  000A42                     u4534:
  5542  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5543  000A44  2E09               	decfsz	??_LightLed,f,c
  5544  000A46  D7FA               	goto	u4535
  5545  000A48  500D               	movf	LightLed@ststusIndex,w,c
  5546  000A4A  0F90               	addlw	low _ledStatuses
  5547  000A4C  6ED9               	movwf	fsr2l,c
  5548  000A4E  6ADA               	clrf	fsr2h,c
  5549  000A50  500A               	movf	??_LightLed+1,w,c
  5550  000A52  12DF               	iorwf	indf2,f,c
  5551                           
  5552                           ;main.c: 318: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5553  000A54  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5554  000A58  0E01               	movlw	1
  5555  000A5A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5556  000A5C  2A09               	incf	??_LightLed,f,c
  5557  000A5E  D003               	goto	u4544
  5558  000A60                     u4545:
  5559  000A60  FFFF               	dw	65535	; assembler added errata NOP
  5560  000A62  90D8               	bcf	status,0,c
  5561  000A64  360A               	rlcf	??_LightLed+1,f,c
  5562  000A66                     u4544:
  5563  000A66  FFFF               	dw	65535	; assembler added errata NOP
  5564  000A68  2E09               	decfsz	??_LightLed,f,c
  5565  000A6A  D7FA               	goto	u4545
  5566  000A6C  1C0A               	comf	??_LightLed+1,w,c
  5567  000A6E  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5568  000A70  500D               	movf	LightLed@ststusIndex,w,c
  5569  000A72  0F90               	addlw	low _ledStatuses
  5570  000A74  6ED9               	movwf	fsr2l,c
  5571  000A76  6ADA               	clrf	fsr2h,c
  5572  000A78  500B               	movf	??_LightLed+2,w,c
  5573  000A7A  16DF               	andwf	indf2,f,c
  5574                           
  5575                           ;main.c: 319: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  5576  000A7C  5008               	movf	LightLed@blink,w,c
  5577  000A7E  E014               	bz	l5772
  5578  000A80  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5579  000A84  2A09               	incf	??_LightLed,f,c
  5580  000A86  0E01               	movlw	1
  5581  000A88  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5582  000A8A  2A09               	incf	??_LightLed,f,c
  5583  000A8C  D003               	goto	u4564
  5584  000A8E                     u4565:
  5585  000A8E  FFFF               	dw	65535	; assembler added errata NOP
  5586  000A90  90D8               	bcf	status,0,c
  5587  000A92  360A               	rlcf	??_LightLed+1,f,c
  5588  000A94                     u4564:
  5589  000A94  FFFF               	dw	65535	; assembler added errata NOP
  5590  000A96  2E09               	decfsz	??_LightLed,f,c
  5591  000A98  D7FA               	goto	u4565
  5592  000A9A  500D               	movf	LightLed@ststusIndex,w,c
  5593  000A9C  0F80               	addlw	low _ledBlink
  5594  000A9E  6ED9               	movwf	fsr2l,c
  5595  000AA0  6ADA               	clrf	fsr2h,c
  5596  000AA2  500A               	movf	??_LightLed+1,w,c
  5597  000AA4  12DF               	iorwf	indf2,f,c
  5598  000AA6  D015               	goto	l274
  5599  000AA8                     l5772:
  5600  000AA8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5601  000AAC  2A09               	incf	??_LightLed,f,c
  5602  000AAE  0E01               	movlw	1
  5603  000AB0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5604  000AB2  2A09               	incf	??_LightLed,f,c
  5605  000AB4  D003               	goto	u4574
  5606  000AB6                     u4575:
  5607  000AB6  FFFF               	dw	65535	; assembler added errata NOP
  5608  000AB8  90D8               	bcf	status,0,c
  5609  000ABA  360A               	rlcf	??_LightLed+1,f,c
  5610  000ABC                     u4574:
  5611  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5612  000ABE  2E09               	decfsz	??_LightLed,f,c
  5613  000AC0  D7FA               	goto	u4575
  5614  000AC2  1C0A               	comf	??_LightLed+1,w,c
  5615  000AC4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5616  000AC6  500D               	movf	LightLed@ststusIndex,w,c
  5617  000AC8  0F80               	addlw	low _ledBlink
  5618  000ACA  6ED9               	movwf	fsr2l,c
  5619  000ACC  6ADA               	clrf	fsr2h,c
  5620  000ACE  500B               	movf	??_LightLed+2,w,c
  5621  000AD0  16DF               	andwf	indf2,f,c
  5622  000AD2                     l274:
  5623  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  5624                           
  5625                           ;main.c: 320: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5626  000AD4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5627  000AD8  0E01               	movlw	1
  5628  000ADA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5629  000ADC  2A09               	incf	??_LightLed,f,c
  5630  000ADE  D003               	goto	u4584
  5631  000AE0                     u4585:
  5632  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  5633  000AE2  90D8               	bcf	status,0,c
  5634  000AE4  360A               	rlcf	??_LightLed+1,f,c
  5635  000AE6                     u4584:
  5636  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5637  000AE8  2E09               	decfsz	??_LightLed,f,c
  5638  000AEA  D7FA               	goto	u4585
  5639  000AEC                     L7:
  5640  000AEC  FFFF               	dw	65535	; assembler added errata NOP
  5641  000AEE  1C0A               	comf	??_LightLed+1,w,c
  5642  000AF0  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5643  000AF2  500D               	movf	LightLed@ststusIndex,w,c
  5644  000AF4  0F80               	addlw	low _ledBlink
  5645  000AF6  6ED9               	movwf	fsr2l,c
  5646  000AF8  6ADA               	clrf	fsr2h,c
  5647  000AFA  500B               	movf	??_LightLed+2,w,c
  5648  000AFC  16DF               	andwf	indf2,f,c
  5649                           
  5650                           ;main.c: 321: break;
  5651  000AFE  D0AB               	goto	l266
  5652  000B00                     l5774:
  5653                           
  5654                           ;main.c: 323: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5655  000B00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5656  000B04  2A09               	incf	??_LightLed,f,c
  5657  000B06  0E01               	movlw	1
  5658  000B08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5659  000B0A  2A09               	incf	??_LightLed,f,c
  5660  000B0C  D003               	goto	u4594
  5661  000B0E                     u4595:
  5662  000B0E  FFFF               	dw	65535	; assembler added errata NOP
  5663  000B10  90D8               	bcf	status,0,c
  5664  000B12  360A               	rlcf	??_LightLed+1,f,c
  5665  000B14                     u4594:
  5666  000B14  FFFF               	dw	65535	; assembler added errata NOP
  5667  000B16  2E09               	decfsz	??_LightLed,f,c
  5668  000B18  D7FA               	goto	u4595
  5669  000B1A  1C0A               	comf	??_LightLed+1,w,c
  5670  000B1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5671  000B1E  500D               	movf	LightLed@ststusIndex,w,c
  5672  000B20  0F90               	addlw	low _ledStatuses
  5673  000B22  6ED9               	movwf	fsr2l,c
  5674  000B24  6ADA               	clrf	fsr2h,c
  5675  000B26  500B               	movf	??_LightLed+2,w,c
  5676  000B28  16DF               	andwf	indf2,f,c
  5677                           
  5678                           ;main.c: 324: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  5679  000B2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5680  000B2E  0E01               	movlw	1
  5681  000B30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5682  000B32  2A09               	incf	??_LightLed,f,c
  5683  000B34  D003               	goto	u4604
  5684  000B36                     u4605:
  5685  000B36  FFFF               	dw	65535	; assembler added errata NOP
  5686  000B38  90D8               	bcf	status,0,c
  5687  000B3A  360A               	rlcf	??_LightLed+1,f,c
  5688  000B3C                     u4604:
  5689  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  5690  000B3E  2E09               	decfsz	??_LightLed,f,c
  5691  000B40  D7FA               	goto	u4605
  5692  000B42  500D               	movf	LightLed@ststusIndex,w,c
  5693  000B44  0F90               	addlw	low _ledStatuses
  5694  000B46  6ED9               	movwf	fsr2l,c
  5695  000B48  6ADA               	clrf	fsr2h,c
  5696  000B4A  500A               	movf	??_LightLed+1,w,c
  5697  000B4C  12DF               	iorwf	indf2,f,c
  5698                           
  5699                           ;main.c: 325: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5700  000B4E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5701  000B52  2A09               	incf	??_LightLed,f,c
  5702  000B54  0E01               	movlw	1
  5703  000B56  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5704  000B58  2A09               	incf	??_LightLed,f,c
  5705  000B5A  D003               	goto	u4614
  5706  000B5C                     u4615:
  5707  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5708  000B5E  90D8               	bcf	status,0,c
  5709  000B60  360A               	rlcf	??_LightLed+1,f,c
  5710  000B62                     u4614:
  5711  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5712  000B64  2E09               	decfsz	??_LightLed,f,c
  5713  000B66  D7FA               	goto	u4615
  5714  000B68  FFFF               	dw	65535	; assembler added errata NOP
  5715  000B6A  1C0A               	comf	??_LightLed+1,w,c
  5716  000B6C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5717  000B6E  500D               	movf	LightLed@ststusIndex,w,c
  5718  000B70  0F80               	addlw	low _ledBlink
  5719  000B72  6ED9               	movwf	fsr2l,c
  5720  000B74  6ADA               	clrf	fsr2h,c
  5721  000B76  500B               	movf	??_LightLed+2,w,c
  5722  000B78  16DF               	andwf	indf2,f,c
  5723                           
  5724                           ;main.c: 326: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  5725  000B7A  5008               	movf	LightLed@blink,w,c
  5726  000B7C  E0AA               	bz	l274
  5727  000B7E                     l5778:
  5728  000B7E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5729  000B82  0E01               	movlw	1
  5730  000B84  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5731  000B86  2A09               	incf	??_LightLed,f,c
  5732  000B88  D003               	goto	u4634
  5733  000B8A                     u4635:
  5734  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5735  000B8C  90D8               	bcf	status,0,c
  5736  000B8E  360A               	rlcf	??_LightLed+1,f,c
  5737  000B90                     u4634:
  5738  000B90  FFFF               	dw	65535	; assembler added errata NOP
  5739  000B92  2E09               	decfsz	??_LightLed,f,c
  5740  000B94  D7FA               	goto	u4635
  5741  000B96  500D               	movf	LightLed@ststusIndex,w,c
  5742  000B98  0F80               	addlw	low _ledBlink
  5743  000B9A  6ED9               	movwf	fsr2l,c
  5744  000B9C  6ADA               	clrf	fsr2h,c
  5745  000B9E  500A               	movf	??_LightLed+1,w,c
  5746  000BA0  12DF               	iorwf	indf2,f,c
  5747  000BA2  D059               	goto	l266
  5748  000BA4                     l5782:
  5749                           
  5750                           ;main.c: 329: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  5751  000BA4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5752  000BA8  2A09               	incf	??_LightLed,f,c
  5753  000BAA  0E01               	movlw	1
  5754  000BAC  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5755  000BAE  2A09               	incf	??_LightLed,f,c
  5756  000BB0  D003               	goto	u4644
  5757  000BB2                     u4645:
  5758  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  5759  000BB4  90D8               	bcf	status,0,c
  5760  000BB6  360A               	rlcf	??_LightLed+1,f,c
  5761  000BB8                     u4644:
  5762  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  5763  000BBA  2E09               	decfsz	??_LightLed,f,c
  5764  000BBC  D7FA               	goto	u4645
  5765  000BBE  500D               	movf	LightLed@ststusIndex,w,c
  5766  000BC0  0F90               	addlw	low _ledStatuses
  5767  000BC2  6ED9               	movwf	fsr2l,c
  5768  000BC4  6ADA               	clrf	fsr2h,c
  5769  000BC6  500A               	movf	??_LightLed+1,w,c
  5770  000BC8  12DF               	iorwf	indf2,f,c
  5771                           
  5772                           ;main.c: 330: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  5773  000BCA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5774  000BCE  0E01               	movlw	1
  5775  000BD0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5776  000BD2  2A09               	incf	??_LightLed,f,c
  5777  000BD4  D003               	goto	u4654
  5778  000BD6                     u4655:
  5779  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  5780  000BD8  90D8               	bcf	status,0,c
  5781  000BDA  360A               	rlcf	??_LightLed+1,f,c
  5782  000BDC                     u4654:
  5783  000BDC  FFFF               	dw	65535	; assembler added errata NOP
  5784  000BDE  2E09               	decfsz	??_LightLed,f,c
  5785  000BE0  D7FA               	goto	u4655
  5786  000BE2  500D               	movf	LightLed@ststusIndex,w,c
  5787  000BE4  0F90               	addlw	low _ledStatuses
  5788  000BE6  6ED9               	movwf	fsr2l,c
  5789  000BE8  6ADA               	clrf	fsr2h,c
  5790  000BEA  500A               	movf	??_LightLed+1,w,c
  5791  000BEC  12DF               	iorwf	indf2,f,c
  5792                           
  5793                           ;main.c: 331: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  5794  000BEE  5008               	movf	LightLed@blink,w,c
  5795  000BF0  E014               	bz	l5788
  5796  000BF2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5797  000BF6  2A09               	incf	??_LightLed,f,c
  5798  000BF8  0E01               	movlw	1
  5799  000BFA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5800  000BFC  2A09               	incf	??_LightLed,f,c
  5801  000BFE  D003               	goto	u4674
  5802  000C00                     u4675:
  5803  000C00  FFFF               	dw	65535	; assembler added errata NOP
  5804  000C02  90D8               	bcf	status,0,c
  5805  000C04  360A               	rlcf	??_LightLed+1,f,c
  5806  000C06                     u4674:
  5807  000C06  FFFF               	dw	65535	; assembler added errata NOP
  5808  000C08  2E09               	decfsz	??_LightLed,f,c
  5809  000C0A  D7FA               	goto	u4675
  5810  000C0C  500D               	movf	LightLed@ststusIndex,w,c
  5811  000C0E  0F80               	addlw	low _ledBlink
  5812  000C10  6ED9               	movwf	fsr2l,c
  5813  000C12  6ADA               	clrf	fsr2h,c
  5814  000C14  500A               	movf	??_LightLed+1,w,c
  5815  000C16  12DF               	iorwf	indf2,f,c
  5816  000C18  D00E               	goto	l5790
  5817  000C1A                     l5788:
  5818  000C1A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5819  000C1E  2A09               	incf	??_LightLed,f,c
  5820  000C20  0E01               	movlw	1
  5821  000C22  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5822  000C24  2A09               	incf	??_LightLed,f,c
  5823  000C26  D003               	goto	u4684
  5824  000C28                     u4685:
  5825  000C28  FFFF               	dw	65535	; assembler added errata NOP
  5826  000C2A  90D8               	bcf	status,0,c
  5827  000C2C  360A               	rlcf	??_LightLed+1,f,c
  5828  000C2E                     u4684:
  5829  000C2E  FFFF               	dw	65535	; assembler added errata NOP
  5830  000C30  2E09               	decfsz	??_LightLed,f,c
  5831  000C32  D7FA               	goto	u4685
  5832  000C34  D799               	goto	L8
  5833  000C36                     l5790:
  5834  000C36  FFFF               	dw	65535	; assembler added errata NOP
  5835                           
  5836                           ;main.c: 332: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  5837  000C38  5008               	movf	LightLed@blink,w,c
  5838  000C3A  E1A1               	bnz	l5778
  5839  000C3C  D74A               	goto	l274
  5840  000C3E                     l5798:
  5841  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  5842  000C40  5007               	movf	LightLed@ledState,w,c
  5843                           
  5844                           ; Switch size 1, requested type "speed"
  5845                           ; Number of cases is 4, Range of values is 0 to 3
  5846                           ; switch strategies available:
  5847                           ; Name         Instructions Cycles
  5848                           ; simple_byte           13     7 (average)
  5849                           ;	Chosen strategy is simple_byte
  5850  000C42  E101 D6A9          	bz	l5764
  5851  000C46  0A01               	xorlw	1	; case 1
  5852  000C48  E101 D6F1          	bz	l5766
  5853  000C4C  0A03               	xorlw	3	; case 2
  5854  000C4E  E101 D757          	bz	l5774
  5855  000C52  0A01               	xorlw	1	; case 3
  5856  000C54  E0A7               	bz	l5782
  5857  000C56                     l266:
  5858  000C56  FFFF               	dw	65535	; assembler added errata NOP
  5859  000C58  0012               	return		;funcret
  5860  000C5A  FFFF               	dw	65535	; errata NOP
  5861  000C5C                     __end_of_LightLed:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1h	equ	0xFE2
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _GetCurrentEventDiodeNum *****************
  5883 ;; Defined at:
  5884 ;;		line 463 in file "main.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      unsigned char 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5898 ;;      Params:         0       0       0       0       0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0
  5901 ;;      Totals:         0       0       0       0       0       0       0
  5902 ;;Total ram usage:        0 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    2
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_ResetEvent
  5909 ;;		_ProcessDiary
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text29
  5914  002E48                     __ptext29:
  5915                           	opt stack 0
  5916  002E48                     _GetCurrentEventDiodeNum:
  5917                           	opt stack 27
  5918                           
  5919                           ;incstack = 0
  5920  002E48  FFFF               	dw	65535
  5921                           
  5922                           ;main.c: 465: return 60 - _maxDiaryEvents + currentAlarmedEventNum + 1;
  5923  002E4A  506D               	movf	__maxDiaryEvents,w,c
  5924  002E4C  5C74               	subwf	_currentAlarmedEventNum,w,c
  5925  002E4E  0F3D               	addlw	61
  5926  002E50  0012               	return		;funcret
  5927  002E52  FFFF               	dw	65535	; errata NOP
  5928  002E54                     __end_of_GetCurrentEventDiodeNum:
  5929                           	opt stack 0
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           intcon	equ	0xFF2
  5937                           postinc0	equ	0xFEE
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           fsr1h	equ	0xFE2
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _ModbusPoll *****************
  5950 ;; Defined at:
  5951 ;;		line 461 in file "ModbusRtu.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  discreteInpu    2   91[COMRAM] unsigned short 
  5954 ;;  coils           1   93[COMRAM] PTR unsigned short 
  5955 ;;		 -> _MODBUSCoils(2), 
  5956 ;;  inputRegs       2   94[COMRAM] PTR unsigned short 
  5957 ;;		 -> _MODBUSInputRegs(30), 
  5958 ;;  inputRegsCou    1   96[COMRAM] const unsigned char 
  5959 ;;  holdingRegs     2   97[COMRAM] PTR unsigned short 
  5960 ;;		 -> _MODBUSHoldingRegs(30), 
  5961 ;;  holdingRegsC    1   99[COMRAM] const unsigned char 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  u8exception     1  102[COMRAM] unsigned char 
  5964 ;;  i8state         1  101[COMRAM] unsigned char 
  5965 ;;  u8current       1  100[COMRAM] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      char 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : E/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5975 ;;      Params:         9       0       0       0       0       0       0
  5976 ;;      Locals:         3       0       0       0       0       0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0
  5978 ;;      Totals:        12       0       0       0       0       0       0
  5979 ;;Total ram usage:       12 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    7
  5982 ;; This function calls:
  5983 ;;		_ModbusBuildException
  5984 ;;		_ModbusGetRxBuffer
  5985 ;;		_ModbusGetRxBufferHeader
  5986 ;;		_ModbusProcess_FC1
  5987 ;;		_ModbusProcess_FC100
  5988 ;;		_ModbusProcess_FC101
  5989 ;;		_ModbusProcess_FC102
  5990 ;;		_ModbusProcess_FC15
  5991 ;;		_ModbusProcess_FC16
  5992 ;;		_ModbusProcess_FC17
  5993 ;;		_ModbusProcess_FC21
  5994 ;;		_ModbusProcess_FC3
  5995 ;;		_ModbusProcess_FC43
  5996 ;;		_ModbusProcess_FC5
  5997 ;;		_ModbusProcess_FC6
  5998 ;;		_ModbusProcess_FC7
  5999 ;;		_ModbusSendTxBuffer
  6000 ;;		_ModbusValidateRequest
  6001 ;;		_PortAvailable
  6002 ;;		_PortClearReadBuffer
  6003 ;;		_millis
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           	psect	text30
  6010  001130                     __ptext30:
  6011                           	opt stack 0
  6012  001130                     _ModbusPoll:
  6013                           	opt stack 23
  6014                           
  6015                           ;incstack = 0
  6016  001130  FFFF               	dw	65535
  6017                           
  6018                           ;ModbusRtu.c: 464: _lastFunction = MB_FC_NONE;
  6019  001132  0100               	movlb	0	; () banked
  6020  001134  6BE8               	clrf	__lastFunction& (0+255),b
  6021                           
  6022                           ;ModbusRtu.c: 468: _inputRegsCount = inputRegsCount;
  6023  001136  C061  F0CF         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6024                           
  6025                           ;ModbusRtu.c: 469: _holdingRegsCount = holdingRegsCount;
  6026  00113A  C064  F0CE         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;ModbusRtu.c: 474: uint8_t u8current = PortAvailable();
  6030  00113E  EC2A  F017         	call	_PortAvailable	;wreg free
  6031  001142  6E65               	movwf	ModbusPoll@u8current,c
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;ModbusRtu.c: 476: if (u8current == 0) return 0;
  6035  001144  5065               	movf	ModbusPoll@u8current,w,c
  6036  001146  E103               	bnz	l7302
  6037  001148                     l7298:
  6038  001148  FFFF               	dw	65535	; assembler added errata NOP
  6039                           
  6040                           ; BSR set to: 0
  6041  00114A  0E00               	movlw	0
  6042  00114C  D0BF               	goto	l757
  6043  00114E                     l7302:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;ModbusRtu.c: 479: if (u8current != _u8lastRec)
  6047  00114E  51D7               	movf	__u8lastRec& (0+255),w,b
  6048  001150  1865               	xorwf	ModbusPoll@u8current,w,c
  6049  001152  E012               	bz	l7312
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;ModbusRtu.c: 480: {
  6053                           ;ModbusRtu.c: 481: _u8lastRec = u8current;
  6054  001154  C065  F0D7         	movff	ModbusPoll@u8current,__u8lastRec
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;ModbusRtu.c: 482: _u32time = millis() + 5;
  6058  001158  0E05               	movlw	5
  6059  00115A  EC58  F016         	call	_millis	;wreg free
  6060  00115E  2407               	addwf	?_millis,w,c
  6061  001160  0100               	movlb	0	; () banked
  6062  001162  6FA4               	movwf	__u32time& (0+255),b
  6063  001164  0E00               	movlw	0
  6064  001166  2008               	addwfc	?_millis+1,w,c
  6065  001168  6FA5               	movwf	(__u32time+1)& (0+255),b
  6066  00116A  0E00               	movlw	0
  6067  00116C  2009               	addwfc	?_millis+2,w,c
  6068  00116E  6FA6               	movwf	(__u32time+2)& (0+255),b
  6069  001170  0E00               	movlw	0
  6070  001172  200A               	addwfc	?_millis+3,w,c
  6071  001174  6FA7               	movwf	(__u32time+3)& (0+255),b
  6072  001176  D7E8               	goto	l7298
  6073  001178                     l7312:
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;ModbusRtu.c: 484: }
  6077                           ;ModbusRtu.c: 485: if (millis() < _u32time)
  6078  001178  EC58  F016         	call	_millis	;wreg free
  6079  00117C  0100               	movlb	0	; () banked
  6080  00117E  51A4               	movf	__u32time& (0+255),w,b
  6081  001180  5C07               	subwf	?_millis,w,c
  6082  001182  51A5               	movf	(__u32time+1)& (0+255),w,b
  6083  001184  5808               	subwfb	?_millis+1,w,c
  6084  001186  51A6               	movf	(__u32time+2)& (0+255),w,b
  6085  001188  5809               	subwfb	?_millis+2,w,c
  6086  00118A  51A7               	movf	(__u32time+3)& (0+255),w,b
  6087  00118C  580A               	subwfb	?_millis+3,w,c
  6088  00118E  E3DC               	bnc	l7298
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;ModbusRtu.c: 488: _u8lastRec = 0;
  6092  001190  6BD7               	clrf	__u8lastRec& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;ModbusRtu.c: 490: _u8lastError = i8state;
  6096  001192  ECBE  F015         	call	_ModbusGetRxBufferHeader	;wreg free
  6097  001196  6E66               	movwf	ModbusPoll@i8state,c
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;ModbusRtu.c: 491: if (i8state < 4)
  6101  001198  0E04               	movlw	4
  6102  00119A  6066               	cpfslt	ModbusPoll@i8state,c
  6103  00119C  D005               	goto	l7328
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;ModbusRtu.c: 492: {
  6107                           ;ModbusRtu.c: 493: PortClearReadBuffer();
  6108  00119E  EC16  F017         	call	_PortClearReadBuffer	;wreg free
  6109  0011A2                     l7324:
  6110  0011A2  FFFF               	dw	65535	; assembler added errata NOP
  6111                           
  6112                           ;ModbusRtu.c: 494: return i8state;
  6113  0011A4  5066               	movf	ModbusPoll@i8state,w,c
  6114  0011A6  D092               	goto	l757
  6115  0011A8                     l7328:
  6116  0011A8  FFFF               	dw	65535	; assembler added errata NOP
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;ModbusRtu.c: 495: }
  6120                           ;ModbusRtu.c: 497: if (_au8Buffer[ ID ] != _u8id)
  6121  0011AA  51D6               	movf	__u8id& (0+255),w,b
  6122  0011AC  0101               	movlb	1	; () banked
  6123  0011AE  1900               	xorwf	__au8Buffer& (0+255),w,b
  6124  0011B0  E003               	bz	l7336
  6125                           
  6126                           ; BSR set to: 1
  6127                           ;ModbusRtu.c: 498: {
  6128                           ;ModbusRtu.c: 499: PortClearReadBuffer();
  6129  0011B2  EC16  F017         	call	_PortClearReadBuffer	;wreg free
  6130  0011B6  D7C8               	goto	l7298
  6131  0011B8                     l7336:
  6132                           
  6133                           ; BSR set to: 1
  6134                           ;ModbusRtu.c: 501: }
  6135                           ;ModbusRtu.c: 503: i8state = ModbusGetRxBuffer();
  6136  0011B8  EC3F  F015         	call	_ModbusGetRxBuffer	;wreg free
  6137  0011BC  6E66               	movwf	ModbusPoll@i8state,c
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;ModbusRtu.c: 505: _u8lastError = i8state;
  6141  0011BE  EC16  F017         	call	_PortClearReadBuffer	;wreg free
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;ModbusRtu.c: 510: uint8_t u8exception = ModbusValidateRequest();
  6145  0011C2  EC2E  F006         	call	_ModbusValidateRequest	;wreg free
  6146  0011C6  6E67               	movwf	ModbusPoll@u8exception,c
  6147                           
  6148                           ;ModbusRtu.c: 511: if (u8exception > 0)
  6149  0011C8  5067               	movf	ModbusPoll@u8exception,w,c
  6150  0011CA  E009               	bz	l7354
  6151                           
  6152                           ;ModbusRtu.c: 512: {
  6153                           ;ModbusRtu.c: 513: if (u8exception != NO_REPLY)
  6154  0011CC  2867               	incf	ModbusPoll@u8exception,w,c
  6155  0011CE  E005               	bz	l7350
  6156                           
  6157                           ;ModbusRtu.c: 514: {
  6158                           ;ModbusRtu.c: 515: ModbusBuildException(u8exception);
  6159  0011D0  5067               	movf	ModbusPoll@u8exception,w,c
  6160  0011D2  ECA3  F016         	call	_ModbusBuildException
  6161                           
  6162                           ; BSR set to: 1
  6163                           ;ModbusRtu.c: 516: ModbusSendTxBuffer();
  6164  0011D6  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  6165  0011DA                     l7350:
  6166                           
  6167                           ;ModbusRtu.c: 519: return u8exception;
  6168  0011DA  5067               	movf	ModbusPoll@u8exception,w,c
  6169  0011DC  D077               	goto	l757
  6170  0011DE                     l7354:
  6171                           
  6172                           ;ModbusRtu.c: 523: _u8lastError = 0;
  6173  0011DE  EC58  F016         	call	_millis	;wreg free
  6174                           
  6175                           ;ModbusRtu.c: 526: switch (_au8Buffer[ FUNC ])
  6176  0011E2  D052               	goto	l7418
  6177  0011E4                     l7356:
  6178                           
  6179                           ; BSR set to: 1
  6180                           ;ModbusRtu.c: 529: return ModbusProcess_FC1(*coils);
  6181  0011E4  505E               	movf	ModbusPoll@coils,w,c
  6182  0011E6  6ED9               	movwf	fsr2l,c
  6183  0011E8  6ADA               	clrf	fsr2h,c
  6184  0011EA  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  6185  0011EE  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  6186  0011F2  ECD6  F00A         	call	_ModbusProcess_FC1	;wreg free
  6187  0011F6  D06A               	goto	l757
  6188  0011F8                     l7360:
  6189                           
  6190                           ; BSR set to: 1
  6191                           ;ModbusRtu.c: 531: return ModbusProcess_FC1(discreteInputs);
  6192  0011F8  C05C  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6193  0011FC  C05D  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6194  001200  ECD6  F00A         	call	_ModbusProcess_FC1	;wreg free
  6195  001204  D063               	goto	l757
  6196  001206                     l7364:
  6197                           
  6198                           ; BSR set to: 1
  6199                           ;ModbusRtu.c: 533: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  6200  001206  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6201  00120A  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6202  00120E  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6203  001212  EC6D  F010         	call	_ModbusProcess_FC3	;wreg free
  6204  001216  D05A               	goto	l757
  6205  001218                     l7368:
  6206                           
  6207                           ; BSR set to: 1
  6208                           ;ModbusRtu.c: 535: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  6209  001218  C05F  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6210  00121C  C060  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6211  001220  C061  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6212  001224  EC6D  F010         	call	_ModbusProcess_FC3	;wreg free
  6213  001228  D051               	goto	l757
  6214  00122A                     l7372:
  6215                           
  6216                           ; BSR set to: 1
  6217                           ;ModbusRtu.c: 537: return ModbusProcess_FC5(coils);
  6218  00122A  505E               	movf	ModbusPoll@coils,w,c
  6219  00122C  ECCA  F011         	call	_ModbusProcess_FC5
  6220  001230  D04D               	goto	l757
  6221  001232                     l7376:
  6222                           
  6223                           ; BSR set to: 1
  6224                           ;ModbusRtu.c: 539: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  6225  001232  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  6226  001236  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  6227  00123A  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  6228  00123E  ECE8  F013         	call	_ModbusProcess_FC6	;wreg free
  6229  001242  D044               	goto	l757
  6230  001244                     l7380:
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;ModbusRtu.c: 541: return ModbusProcess_FC7();
  6234  001244  ECE8  F016         	call	_ModbusProcess_FC7	;wreg free
  6235  001248  D041               	goto	l757
  6236  00124A                     l7384:
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;ModbusRtu.c: 543: return ModbusProcess_FC15(coils);
  6240  00124A  505E               	movf	ModbusPoll@coils,w,c
  6241  00124C  EC81  F00C         	call	_ModbusProcess_FC15
  6242  001250  D03D               	goto	l757
  6243  001252                     l7388:
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;ModbusRtu.c: 545: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  6247  001252  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  6248  001256  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  6249  00125A  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  6250  00125E  EC4B  F00F         	call	_ModbusProcess_FC16	;wreg free
  6251  001262  D034               	goto	l757
  6252  001264                     l7392:
  6253                           
  6254                           ; BSR set to: 1
  6255                           ;ModbusRtu.c: 547: return ModbusProcess_FC17();
  6256  001264  EC1D  F013         	call	_ModbusProcess_FC17	;wreg free
  6257  001268  D031               	goto	l757
  6258  00126A                     l7396:
  6259                           
  6260                           ; BSR set to: 1
  6261                           ;ModbusRtu.c: 549: return ModbusProcess_FC21();
  6262  00126A  EC22  F011         	call	_ModbusProcess_FC21	;wreg free
  6263  00126E  D02E               	goto	l757
  6264  001270                     l7400:
  6265                           
  6266                           ; BSR set to: 1
  6267                           ;ModbusRtu.c: 551: return ModbusProcess_FC43();
  6268  001270  EC25  F00A         	call	_ModbusProcess_FC43	;wreg free
  6269  001274  D02B               	goto	l757
  6270  001276                     l7404:
  6271                           
  6272                           ; BSR set to: 1
  6273                           ;ModbusRtu.c: 553: return ModbusProcess_FC100();
  6274  001276  EC73  F00E         	call	_ModbusProcess_FC100	;wreg free
  6275  00127A  D028               	goto	l757
  6276  00127C                     l7408:
  6277                           
  6278                           ; BSR set to: 1
  6279                           ;ModbusRtu.c: 555: return ModbusProcess_FC101();
  6280  00127C  ECF8  F015         	call	_ModbusProcess_FC101	;wreg free
  6281  001280  D025               	goto	l757
  6282  001282                     l7412:
  6283                           
  6284                           ; BSR set to: 1
  6285                           ;ModbusRtu.c: 557: return ModbusProcess_FC102();
  6286  001282  ECC2  F016         	call	_ModbusProcess_FC102	;wreg free
  6287  001286  D022               	goto	l757
  6288  001288                     l7418:
  6289  001288  FFFF               	dw	65535	; assembler added errata NOP
  6290  00128A  0101               	movlb	1	; () banked
  6291  00128C  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6292                           
  6293                           ; Switch size 1, requested type "speed"
  6294                           ; Number of cases is 15, Range of values is 1 to 102
  6295                           ; switch strategies available:
  6296                           ; Name         Instructions Cycles
  6297                           ; simple_byte           46    24 (average)
  6298                           ;	Chosen strategy is simple_byte
  6299  00128E  0A01               	xorlw	1	; case 1
  6300  001290  E0A9               	bz	l7356
  6301  001292  0A03               	xorlw	3	; case 2
  6302  001294  E0B1               	bz	l7360
  6303  001296  0A01               	xorlw	1	; case 3
  6304  001298  E0B6               	bz	l7364
  6305  00129A  0A07               	xorlw	7	; case 4
  6306  00129C  E0BD               	bz	l7368
  6307  00129E  0A01               	xorlw	1	; case 5
  6308  0012A0  E0C4               	bz	l7372
  6309  0012A2  0A03               	xorlw	3	; case 6
  6310  0012A4  E0C6               	bz	l7376
  6311  0012A6  0A01               	xorlw	1	; case 7
  6312  0012A8  E0CD               	bz	l7380
  6313  0012AA  0A08               	xorlw	8	; case 15
  6314  0012AC  E0CE               	bz	l7384
  6315  0012AE  0A1F               	xorlw	31	; case 16
  6316  0012B0  E0D0               	bz	l7388
  6317  0012B2  0A01               	xorlw	1	; case 17
  6318  0012B4  E0D7               	bz	l7392
  6319  0012B6  0A04               	xorlw	4	; case 21
  6320  0012B8  E0D8               	bz	l7396
  6321  0012BA  0A3E               	xorlw	62	; case 43
  6322  0012BC  E0D9               	bz	l7400
  6323  0012BE  0A4F               	xorlw	79	; case 100
  6324  0012C0  E0DA               	bz	l7404
  6325  0012C2  0A01               	xorlw	1	; case 101
  6326  0012C4  E0DB               	bz	l7408
  6327  0012C6  0A03               	xorlw	3	; case 102
  6328  0012C8  E0DC               	bz	l7412
  6329  0012CA  D76B               	goto	l7324
  6330  0012CC                     l757:
  6331  0012CC  FFFF               	dw	65535	; assembler added errata NOP
  6332  0012CE  0012               	return		;funcret
  6333  0012D0  FFFF               	dw	65535	; errata NOP
  6334  0012D2                     __end_of_ModbusPoll:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           postinc0	equ	0xFEE
  6344                           wreg	equ	0xFE8
  6345                           postdec1	equ	0xFE5
  6346                           fsr1h	equ	0xFE2
  6347                           fsr1l	equ	0xFE1
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _PortClearReadBuffer *****************
  6356 ;; Defined at:
  6357 ;;		line 77 in file "interrupts.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : E/0
  6368 ;;		On exit  : F/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6371 ;;      Params:         0       0       0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    3
  6378 ;; This function calls:
  6379 ;;		_InitUartBuffer
  6380 ;; This function is called by:
  6381 ;;		_ModbusPoll
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text31
  6386  002E2C                     __ptext31:
  6387                           	opt stack 0
  6388  002E2C                     _PortClearReadBuffer:
  6389                           	opt stack 26
  6390                           
  6391                           ;incstack = 0
  6392  002E2C  FFFF               	dw	65535
  6393                           
  6394                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  6395  002E2E  9EF2               	bcf	intcon,7,c	;volatile
  6396                           
  6397                           ;interrupts.c: 80: InitUartBuffer();
  6398  002E30  EC1D  F017         	call	_InitUartBuffer	;wreg free
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  6402  002E34  8EF2               	bsf	intcon,7,c	;volatile
  6403                           
  6404                           ; BSR set to: 0
  6405  002E36  0012               	return		;funcret
  6406  002E38  FFFF               	dw	65535	; errata NOP
  6407  002E3A                     __end_of_PortClearReadBuffer:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _ModbusValidateRequest *****************
  6429 ;; Defined at:
  6430 ;;		line 776 in file "ModbusRtu.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  6435 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  6436 ;;  readDevId       1   37[COMRAM] unsigned char 
  6437 ;;  i               1   36[COMRAM] unsigned char 
  6438 ;;  u16regs         2   39[COMRAM] unsigned short 
  6439 ;;  u16count        2   34[COMRAM] unsigned short 
  6440 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  6441 ;;  u8regs          1   38[COMRAM] unsigned char 
  6442 ;;  isSupported     1   33[COMRAM] unsigned char 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      unsigned char 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : F/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6452 ;;      Params:         0       0       0       0       0       0       0
  6453 ;;      Locals:        18       0       0       0       0       0       0
  6454 ;;      Temps:          4       0       0       0       0       0       0
  6455 ;;      Totals:        22       0       0       0       0       0       0
  6456 ;;Total ram usage:       22 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    3
  6459 ;; This function calls:
  6460 ;;		_ModbusCalcCRC
  6461 ;; This function is called by:
  6462 ;;		_ModbusPoll
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text32
  6467  000C5C                     __ptext32:
  6468                           	opt stack 0
  6469  000C5C                     _ModbusValidateRequest:
  6470                           	opt stack 26
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;incstack = 0
  6474  000C5C  FFFF               	dw	65535
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;ModbusRtu.c: 779: uint16_t u16MsgCRC =
  6478                           ;ModbusRtu.c: 780: ((_au8Buffer[_u8BufferSize - 2] << 8)
  6479                           ;ModbusRtu.c: 781: | _au8Buffer[_u8BufferSize - 1]);
  6480  000C5E  0EFE               	movlw	low (__au8Buffer+65534)
  6481  000C60  246F               	addwf	__u8BufferSize,w,c
  6482  000C62  6ED9               	movwf	fsr2l,c
  6483  000C64  6ADA               	clrf	fsr2h,c
  6484  000C66  0E00               	movlw	high (__au8Buffer+65534)
  6485  000C68  22DA               	addwfc	fsr2h,f,c
  6486  000C6A  50DF               	movf	indf2,w,c
  6487  000C6C  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6488  000C6E  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  6489  000C70  0EFF               	movlw	low (__au8Buffer+65535)
  6490  000C72  246F               	addwf	__u8BufferSize,w,c
  6491  000C74  6ED9               	movwf	fsr2l,c
  6492  000C76  6ADA               	clrf	fsr2h,c
  6493  000C78  0E00               	movlw	high (__au8Buffer+65535)
  6494  000C7A  22DA               	addwfc	fsr2h,f,c
  6495  000C7C  50DF               	movf	indf2,w,c
  6496  000C7E  1014               	iorwf	??_ModbusValidateRequest,w,c
  6497  000C80  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  6498  000C82  5015               	movf	??_ModbusValidateRequest+1,w,c
  6499  000C84  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;ModbusRtu.c: 783: {
  6503                           ;ModbusRtu.c: 784: _u16errCnt++;
  6504  000C86  506F               	movf	__u8BufferSize,w,c
  6505  000C88  0FFE               	addlw	254
  6506  000C8A  ECE3  F012         	call	_ModbusCalcCRC
  6507  000C8E  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  6508  000C90  1807               	xorwf	?_ModbusCalcCRC,w,c
  6509  000C92  E103               	bnz	u5310
  6510  000C94  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  6511  000C96  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  6512  000C98  E002               	bz	l817
  6513  000C9A                     u5310:
  6514                           
  6515                           ;ModbusRtu.c: 785: return NO_REPLY;
  6516  000C9A  0EFF               	movlw	255
  6517  000C9C  D11B               	goto	l818
  6518  000C9E                     l817:
  6519                           
  6520                           ;ModbusRtu.c: 786: }
  6521                           ;ModbusRtu.c: 789: bool isSupported = 0;
  6522  000C9E  6A22               	clrf	ModbusValidateRequest@isSupported,c
  6523                           
  6524                           ;ModbusRtu.c: 790: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  6525  000CA0  6A25               	clrf	ModbusValidateRequest@i,c
  6526  000CA2                     l6418:
  6527  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  6528                           
  6529                           ;ModbusRtu.c: 791: {
  6530                           ;ModbusRtu.c: 792: if (fctsupported[i] == _au8Buffer[FUNC])
  6531  000CA4  5025               	movf	ModbusValidateRequest@i,w,c
  6532  000CA6  0F01               	addlw	low _fctsupported
  6533  000CA8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6534  000CAA  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  6535  000CAE                     	if	1	;There is more than 1 active tblptr byte
  6536  000CAE  0E06               	movlw	high __smallconst
  6537  000CB0  6EF7               	movwf	tblptrh,c
  6538  000CB2                     	endif
  6539  000CB2                     	if	0	;tblptru may be non-zero
  6540  000CB2                     	endif
  6541  000CB2                     	if	0	;tblptru may be non-zero
  6542  000CB2                     	endif
  6543  000CB2  0008               	tblrd		*
  6544  000CB4  FFFF               	dw	65535	; errata NOP
  6545  000CB6  50F5               	movf	tablat,w,c
  6546  000CB8  0101               	movlb	1	; () banked
  6547  000CBA  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  6548  000CBC  E103               	bnz	l6422
  6549                           
  6550                           ; BSR set to: 1
  6551                           ;ModbusRtu.c: 793: {
  6552                           ;ModbusRtu.c: 794: isSupported = 1;
  6553  000CBE  0E01               	movlw	1
  6554  000CC0  6E22               	movwf	ModbusValidateRequest@isSupported,c
  6555                           
  6556                           ;ModbusRtu.c: 795: break;
  6557  000CC2  D004               	goto	l6426
  6558  000CC4                     l6422:
  6559                           
  6560                           ; BSR set to: 1
  6561  000CC4  2A25               	incf	ModbusValidateRequest@i,f,c
  6562                           
  6563                           ; BSR set to: 1
  6564  000CC6  0E0E               	movlw	14
  6565  000CC8  6425               	cpfsgt	ModbusValidateRequest@i,c
  6566  000CCA  D7EB               	goto	l6418
  6567  000CCC                     l6426:
  6568  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6569                           
  6570                           ; BSR set to: 1
  6571                           ;ModbusRtu.c: 799: {
  6572                           ;ModbusRtu.c: 800: _u16errCnt++;
  6573  000CCE  5022               	movf	ModbusValidateRequest@isSupported,w,c
  6574  000CD0  E102               	bnz	l822
  6575  000CD2                     l6428:
  6576                           
  6577                           ; BSR set to: 1
  6578                           ;ModbusRtu.c: 801: return EXC_FUNC_CODE;
  6579  000CD2  0E01               	movlw	1
  6580  000CD4  D0FF               	goto	l818
  6581  000CD6                     l822:
  6582                           
  6583                           ; BSR set to: 1
  6584                           ;ModbusRtu.c: 806: uint16_t u16count = 0;
  6585  000CD6  6A23               	clrf	ModbusValidateRequest@u16count,c
  6586  000CD8  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  6587                           
  6588                           ;ModbusRtu.c: 807: uint8_t u8regs;
  6589                           ;ModbusRtu.c: 808: switch (_au8Buffer[ FUNC ])
  6590  000CDA  D0D4               	goto	l6554
  6591  000CDC                     l6432:
  6592                           
  6593                           ; BSR set to: 1
  6594                           ;ModbusRtu.c: 811: case MB_FC_READ_DISCRETE_INPUT:
  6595                           ;ModbusRtu.c: 812: case MB_FC_WRITE_MULTIPLE_COILS:
  6596                           ;ModbusRtu.c: 814: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6597  000CDC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6598  000CDE  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6599  000CE0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6600  000CE2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6601  000CE4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6602                           
  6603                           ;ModbusRtu.c: 815: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6604  000CE8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6605  000CEA  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6606  000CEC  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6607  000CEE  6E23               	movwf	ModbusValidateRequest@u16count,c
  6608  000CF0  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  6609                           
  6610                           ; BSR set to: 1
  6611                           ;ModbusRtu.c: 816: if (u16count > 16)
  6612  000CF4  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6613  000CF6  E103               	bnz	u5350
  6614  000CF8  0E11               	movlw	17
  6615  000CFA  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  6616  000CFC  E302               	bnc	l6440
  6617  000CFE                     u5350:
  6618  000CFE                     l6436:
  6619                           
  6620                           ; BSR set to: 1
  6621                           ;ModbusRtu.c: 817: return EXC_REGS_QUANT;
  6622  000CFE  0E03               	movlw	3
  6623  000D00  D0E9               	goto	l818
  6624  000D02                     l6440:
  6625                           
  6626                           ; BSR set to: 1
  6627                           ;ModbusRtu.c: 818: if (u16regs > 15 || u16regs + u16count > 16)
  6628  000D02  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6629  000D04  E110               	bnz	l6444
  6630  000D06  0E10               	movlw	16
  6631  000D08  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6632  000D0A  E20D               	bc	l6444
  6633                           
  6634                           ; BSR set to: 1
  6635  000D0C  5023               	movf	ModbusValidateRequest@u16count,w,c
  6636  000D0E  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  6637  000D10  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6638  000D12  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6639  000D14  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  6640  000D16  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6641  000D18  5015               	movf	??_ModbusValidateRequest+1,w,c
  6642  000D1A  E105               	bnz	u5370
  6643  000D1C  0E11               	movlw	17
  6644  000D1E  5C14               	subwf	??_ModbusValidateRequest,w,c
  6645  000D20                     L9:
  6646  000D20  FFFF               	dw	65535	; assembler added errata NOP
  6647  000D22  E201 D0D3          	bnc	l831
  6648  000D26                     u5370:
  6649  000D26                     l6444:
  6650  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6651                           
  6652                           ;ModbusRtu.c: 819: return EXC_ADDR_RANGE;
  6653  000D28  0E02               	movlw	2
  6654  000D2A  D0D4               	goto	l818
  6655  000D2C                     l6448:
  6656                           
  6657                           ; BSR set to: 1
  6658                           ;ModbusRtu.c: 822: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6659  000D2C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6660  000D2E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6661  000D30  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6662  000D32  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6663  000D34  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6664                           
  6665                           ; BSR set to: 1
  6666                           ;ModbusRtu.c: 823: u8regs = _au8Buffer[ NB_HI ];
  6667  000D38  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  6668                           
  6669                           ;ModbusRtu.c: 824: if (u8regs != 0x00 && u8regs != 0xFF)
  6670  000D3C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6671  000D3E  E002               	bz	l6458
  6672                           
  6673                           ; BSR set to: 1
  6674  000D40  2827               	incf	ModbusValidateRequest@u8regs,w,c
  6675  000D42  E1DD               	bnz	l6436
  6676  000D44                     l6458:
  6677                           
  6678                           ; BSR set to: 1
  6679                           ;ModbusRtu.c: 826: if (u16regs > 15)
  6680  000D44  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6681  000D46  E1EF               	bnz	l6444
  6682  000D48  0E10               	movlw	16
  6683  000D4A  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6684  000D4C  D7E9               	goto	L9
  6685  000D4E                     l6464:
  6686                           
  6687                           ; BSR set to: 1
  6688                           ;ModbusRtu.c: 830: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6689  000D4E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6690  000D50  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6691  000D52  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6692  000D54  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6693  000D56  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6694  000D5A                     l6466:
  6695  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  6696                           
  6697                           ; BSR set to: 1
  6698                           ;ModbusRtu.c: 831: u8regs = (uint8_t) u16regs;
  6699  000D5C  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  6700                           
  6701                           ; BSR set to: 1
  6702                           ;ModbusRtu.c: 832: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  6703  000D60  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6704  000D62  0100               	movlb	0	; () banked
  6705  000D64  5DCE               	subwf	__holdingRegsCount& (0+255),w,b
  6706  000D66  FFFF               	dw	65535	; assembler added errata NOP
  6707  000D68  E3DE               	bnc	l6444
  6708  000D6A  D0B0               	goto	l831
  6709  000D6C                     l6474:
  6710                           
  6711                           ; BSR set to: 1
  6712                           ;ModbusRtu.c: 835: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6713  000D6C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6714  000D6E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6715  000D70  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6716  000D72  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6717  000D74  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6718                           
  6719                           ; BSR set to: 1
  6720                           ;ModbusRtu.c: 836: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6721  000D78  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6722  000D7A  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  6723  000D7E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6724  000D80  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6725  000D84  6A14               	clrf	??_ModbusValidateRequest,c
  6726  000D86  1214               	iorwf	??_ModbusValidateRequest,f,c
  6727  000D88  5014               	movf	??_ModbusValidateRequest,w,c
  6728  000D8A  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  6729  000D8C  5015               	movf	??_ModbusValidateRequest+1,w,c
  6730  000D8E  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  6731                           
  6732                           ; BSR set to: 1
  6733                           ;ModbusRtu.c: 837: u8regs = (uint8_t) u16regs;
  6734  000D90  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  6735                           
  6736                           ; BSR set to: 1
  6737                           ;ModbusRtu.c: 838: if (u8regs > _inputRegsCount)
  6738  000D94  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6739  000D96  0100               	movlb	0	; () banked
  6740  000D98  5DCF               	subwf	__inputRegsCount& (0+255),w,b
  6741  000D9A  D7E5               	goto	L10
  6742  000D9C                     l6486:
  6743                           
  6744                           ; BSR set to: 1
  6745                           ;ModbusRtu.c: 842: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  6746                           ;ModbusRtu.c: 843: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6747  000D9C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6748  000D9E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6749  000DA0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6750  000DA2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6751  000DA4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6752                           
  6753                           ; BSR set to: 1
  6754                           ;ModbusRtu.c: 844: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6755  000DA8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6756  000DAA  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  6757  000DAE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6758  000DB0  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6759  000DB4  6A14               	clrf	??_ModbusValidateRequest,c
  6760  000DB6  1214               	iorwf	??_ModbusValidateRequest,f,c
  6761  000DB8  5014               	movf	??_ModbusValidateRequest,w,c
  6762  000DBA  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  6763  000DBC  5015               	movf	??_ModbusValidateRequest+1,w,c
  6764  000DBE  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  6765  000DC0  D7CC               	goto	l6466
  6766  000DC2                     l6498:
  6767                           
  6768                           ; BSR set to: 1
  6769                           ;ModbusRtu.c: 853: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  6770  000DC2  0E06               	movlw	6
  6771  000DC4  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  6772  000DC6  E1AF               	bnz	l6444
  6773                           
  6774                           ; BSR set to: 1
  6775                           ;ModbusRtu.c: 856: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  6776  000DC8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6777  000DCA  E1AD               	bnz	l6444
  6778                           
  6779                           ; BSR set to: 1
  6780  000DCC  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  6781  000DCE  E1AB               	bnz	l6444
  6782                           
  6783                           ; BSR set to: 1
  6784                           ;ModbusRtu.c: 859: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  6785  000DD0  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  6786  000DD2  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  6787  000DD6  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6788  000DD8  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6789  000DDC  6A14               	clrf	??_ModbusValidateRequest,c
  6790  000DDE  1214               	iorwf	??_ModbusValidateRequest,f,c
  6791  000DE0  0E00               	movlw	0
  6792  000DE2  90D8               	bcf	status,0,c
  6793  000DE4  3614               	rlcf	??_ModbusValidateRequest,f,c
  6794  000DE6  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  6795  000DE8  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  6796  000DEC  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  6797  000DF0  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  6798  000DF2  0EFF               	movlw	-1
  6799  000DF4  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  6800  000DF6  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  6801                           
  6802                           ;ModbusRtu.c: 860: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  6803  000DF8  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  6804  000DFA  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  6805  000DFE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6806  000E00  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6807  000E04  6A14               	clrf	??_ModbusValidateRequest,c
  6808  000E06  1214               	iorwf	??_ModbusValidateRequest,f,c
  6809  000E08  0E00               	movlw	0
  6810  000E0A  90D8               	bcf	status,0,c
  6811  000E0C  3614               	rlcf	??_ModbusValidateRequest,f,c
  6812  000E0E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  6813  000E10  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  6814  000E14  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  6815  000E18  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  6816  000E1A  0EFF               	movlw	-1
  6817  000E1C  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  6818  000E1E  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  6819                           
  6820                           ;ModbusRtu.c: 862: if (startAddrBytes + recLenBytes >= 256)
  6821  000E20  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  6822  000E22  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  6823  000E24  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6824  000E26  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  6825  000E28  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  6826  000E2A  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6827  000E2C  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  6828  000E2E  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  6829  000E30  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  6830  000E32  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  6831  000E34  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  6832  000E36  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  6833  000E38  5017               	movf	??_ModbusValidateRequest+3,w,c
  6834  000E3A  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  6835  000E3C  E102               	bnz	u5470
  6836  000E3E  0415               	decf	??_ModbusValidateRequest+1,w,c
  6837  000E40  D76F               	goto	L9
  6838  000E42                     u5470:
  6839  000E42  D771               	goto	l6444
  6840  000E44                     l6518:
  6841                           
  6842                           ; BSR set to: 1
  6843                           ;ModbusRtu.c: 866: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  6844  000E44  0E0E               	movlw	14
  6845  000E46  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6846  000E48  E001 D743          	bnz	l6428
  6847                           
  6848                           ; BSR set to: 1
  6849                           ;ModbusRtu.c: 868: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  6850  000E4C  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  6851                           
  6852                           ; BSR set to: 1
  6853                           ;ModbusRtu.c: 869: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  6854  000E50  0426               	decf	ModbusValidateRequest@readDevId,w,c
  6855  000E52  E007               	bz	l6534
  6856                           
  6857                           ; BSR set to: 1
  6858  000E54  0E02               	movlw	2
  6859  000E56  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6860  000E58  E004               	bz	l6534
  6861                           
  6862                           ; BSR set to: 1
  6863  000E5A  0E04               	movlw	4
  6864  000E5C  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6865  000E5E  E001 D74E          	bnz	l6436
  6866  000E62                     l6534:
  6867                           
  6868                           ; BSR set to: 1
  6869                           ;ModbusRtu.c: 871: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  6870  000E62  0E04               	movlw	4
  6871  000E64  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6872  000E66  E132               	bnz	l831
  6873                           
  6874                           ; BSR set to: 1
  6875  000E68  0E06               	movlw	6
  6876  000E6A  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  6877  000E6C  D02F               	goto	l831
  6878  000E6E  D75B               	goto	l6444
  6879  000E70                     l6542:
  6880                           
  6881                           ; BSR set to: 1
  6882                           ;ModbusRtu.c: 876: if(_au8Buffer[COM_COM_ID] != 0x7F
  6883                           ;ModbusRtu.c: 877: && _au8Buffer[COM_COM_ID] != 0x01
  6884                           ;ModbusRtu.c: 878: && _au8Buffer[COM_COM_ID] != 0x10)
  6885  000E70  0E7F               	movlw	127
  6886  000E72  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6887  000E74  E02B               	bz	l831
  6888                           
  6889                           ; BSR set to: 1
  6890  000E76  0502               	decf	(__au8Buffer+2)& (0+255),w,b
  6891  000E78  E029               	bz	l831
  6892                           
  6893                           ; BSR set to: 1
  6894  000E7A  0E10               	movlw	16
  6895  000E7C  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6896  000E7E  E001 D73E          	bnz	l6436
  6897  000E82  D024               	goto	l831
  6898  000E84                     l6554:
  6899  000E84  FFFF               	dw	65535	; assembler added errata NOP
  6900                           
  6901                           ; BSR set to: 1
  6902  000E86  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6903                           
  6904                           ; Switch size 1, requested type "speed"
  6905                           ; Number of cases is 14, Range of values is 1 to 102
  6906                           ; switch strategies available:
  6907                           ; Name         Instructions Cycles
  6908                           ; simple_byte           43    22 (average)
  6909                           ;	Chosen strategy is simple_byte
  6910  000E88  0A01               	xorlw	1	; case 1
  6911  000E8A  E101 D727          	bz	l6432
  6912  000E8E  0A03               	xorlw	3	; case 2
  6913  000E90  E101 D724          	bz	l6432
  6914  000E94  0A01               	xorlw	1	; case 3
  6915  000E96  E082               	bz	l6486
  6916  000E98  0A07               	xorlw	7	; case 4
  6917  000E9A  E101 D767          	bz	l6474
  6918  000E9E  0A01               	xorlw	1	; case 5
  6919  000EA0  E101 D744          	bz	l6448
  6920  000EA4  0A03               	xorlw	3	; case 6
  6921  000EA6  E101 D752          	bz	l6464
  6922  000EAA  0A09               	xorlw	9	; case 15
  6923  000EAC  E101 D716          	bz	l6432
  6924  000EB0  0A1F               	xorlw	31	; case 16
  6925  000EB2  E101 D773          	bz	l6486
  6926  000EB6  0A01               	xorlw	1	; case 17
  6927  000EB8  E009               	bz	l831
  6928  000EBA  0A04               	xorlw	4	; case 21
  6929  000EBC  E082               	bz	l6498
  6930  000EBE  0A3E               	xorlw	62	; case 43
  6931  000EC0  E0C1               	bz	l6518
  6932  000EC2  0A4F               	xorlw	79	; case 100
  6933  000EC4  E0D5               	bz	l6542
  6934  000EC6  0A01               	xorlw	1	; case 101
  6935  000EC8  A4D8               	btfss	status,2,c
  6936  000ECA  0A03               	xorlw	3	; case 102
  6937  000ECC                     l831:
  6938  000ECC  FFFF               	dw	65535	; assembler added errata NOP
  6939                           
  6940                           ;ModbusRtu.c: 886: _lastFunction = _au8Buffer[ FUNC ];
  6941  000ECE  C101  F0E8         	movff	__au8Buffer+1,__lastFunction
  6942                           
  6943                           ;ModbusRtu.c: 887: return 0;
  6944  000ED2  0E00               	movlw	0
  6945  000ED4                     l818:
  6946  000ED4  FFFF               	dw	65535	; assembler added errata NOP
  6947  000ED6  0012               	return		;funcret
  6948  000ED8  FFFF               	dw	65535	; errata NOP
  6949  000EDA                     __end_of_ModbusValidateRequest:
  6950                           	opt stack 0
  6951                           tblptru	equ	0xFF8
  6952                           tblptrh	equ	0xFF7
  6953                           tblptrl	equ	0xFF6
  6954                           tablat	equ	0xFF5
  6955                           prodh	equ	0xFF4
  6956                           prodl	equ	0xFF3
  6957                           intcon	equ	0xFF2
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           postdec1	equ	0xFE5
  6961                           fsr1h	equ	0xFE2
  6962                           fsr1l	equ	0xFE1
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _ModbusProcess_FC7 *****************
  6971 ;; Defined at:
  6972 ;;		line 1071 in file "ModbusRtu.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      unsigned char 
  6979 ;; Registers used:
  6980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : E/1
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6986 ;;      Params:         0       0       0       0       0       0       0
  6987 ;;      Locals:         1       0       0       0       0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0
  6989 ;;      Totals:         1       0       0       0       0       0       0
  6990 ;;Total ram usage:        1 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    4
  6993 ;; This function calls:
  6994 ;;		_ModbusSendTxBuffer
  6995 ;; This function is called by:
  6996 ;;		_ModbusPoll
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text33
  7001  002DD0                     __ptext33:
  7002                           	opt stack 0
  7003  002DD0                     _ModbusProcess_FC7:
  7004                           	opt stack 25
  7005                           
  7006                           ;incstack = 0
  7007  002DD0  FFFF               	dw	65535
  7008                           
  7009                           ;ModbusRtu.c: 1073: _au8Buffer[ 2 ] = _exceptionStatus;
  7010  002DD2  C0CD  F102         	movff	__exceptionStatus,__au8Buffer+2
  7011                           
  7012                           ;ModbusRtu.c: 1074: _u8BufferSize = 3;
  7013  002DD6  0E03               	movlw	3
  7014  002DD8  6E6F               	movwf	__u8BufferSize,c
  7015                           
  7016                           ;ModbusRtu.c: 1075: uint8_t u8CopyBufferSize = _u8BufferSize;
  7017  002DDA  C06F  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  7018                           
  7019                           ;ModbusRtu.c: 1076: ModbusSendTxBuffer();
  7020  002DDE  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7021                           
  7022                           ;ModbusRtu.c: 1077: return u8CopyBufferSize;
  7023  002DE2  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  7024  002DE4  0012               	return		;funcret
  7025  002DE6  FFFF               	dw	65535	; errata NOP
  7026  002DE8                     __end_of_ModbusProcess_FC7:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           postinc0	equ	0xFEE
  7036                           wreg	equ	0xFE8
  7037                           postdec1	equ	0xFE5
  7038                           fsr1h	equ	0xFE2
  7039                           fsr1l	equ	0xFE1
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           postdec2	equ	0xFDD
  7043                           fsr2h	equ	0xFDA
  7044                           fsr2l	equ	0xFD9
  7045                           status	equ	0xFD8
  7046                           
  7047 ;; *************** function _ModbusProcess_FC6 *****************
  7048 ;; Defined at:
  7049 ;;		line 1051 in file "ModbusRtu.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7052 ;;		 -> _MODBUSHoldingRegs(30), 
  7053 ;;  u8size          1   23[COMRAM] unsigned char 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  u16add          2   29[COMRAM] unsigned short 
  7056 ;;  u16val          2   26[COMRAM] unsigned short 
  7057 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      unsigned char 
  7060 ;; Registers used:
  7061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : E/1
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7067 ;;      Params:         3       0       0       0       0       0       0
  7068 ;;      Locals:         5       0       0       0       0       0       0
  7069 ;;      Temps:          2       0       0       0       0       0       0
  7070 ;;      Totals:        10       0       0       0       0       0       0
  7071 ;;Total ram usage:       10 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    4
  7074 ;; This function calls:
  7075 ;;		_ModbusSendTxBuffer
  7076 ;; This function is called by:
  7077 ;;		_ModbusPoll
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text34
  7082  0027D0                     __ptext34:
  7083                           	opt stack 0
  7084  0027D0                     _ModbusProcess_FC6:
  7085                           	opt stack 25
  7086                           
  7087                           ;incstack = 0
  7088  0027D0  FFFF               	dw	65535
  7089                           
  7090                           ;ModbusRtu.c: 1053: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7091  0027D2  0101               	movlb	1	; () banked
  7092  0027D4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7093  0027D6  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7094  0027D8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7095  0027DA  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7096  0027DC  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7097                           
  7098                           ; BSR set to: 1
  7099                           ;ModbusRtu.c: 1054: _lastAddress = u16add;
  7100  0027E0  C01E  F0BC         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7101  0027E4  C01F  F0BD         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7102                           
  7103                           ;ModbusRtu.c: 1055: _lastCount = 1;
  7104  0027E8  0100               	movlb	0	; () banked
  7105  0027EA  6BBF               	clrf	(__lastCount+1)& (0+255),b
  7106  0027EC  0E01               	movlw	1
  7107  0027EE  6FBE               	movwf	__lastCount& (0+255),b
  7108                           
  7109                           ;ModbusRtu.c: 1056: uint8_t u8CopyBufferSize;
  7110                           ;ModbusRtu.c: 1057: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7111  0027F0  0101               	movlb	1	; () banked
  7112  0027F2  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7113  0027F4  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7114  0027F6  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7115  0027F8  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7116  0027FA  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7117                           
  7118                           ; BSR set to: 1
  7119                           ;ModbusRtu.c: 1059: regs[ u16add ] = u16val;
  7120  0027FE  90D8               	bcf	status,0,c
  7121  002800  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7122  002802  6ED9               	movwf	fsr2l,c
  7123  002804  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7124  002806  6EDA               	movwf	fsr2h,c
  7125  002808  5016               	movf	ModbusProcess_FC6@regs,w,c
  7126  00280A  26D9               	addwf	fsr2l,f,c
  7127  00280C  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7128  00280E  22DA               	addwfc	fsr2h,f,c
  7129  002810  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7130  002814  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7131                           
  7132                           ; BSR set to: 1
  7133                           ;ModbusRtu.c: 1062: _u8BufferSize = RESPONSE_SIZE;
  7134  002818  0E06               	movlw	6
  7135  00281A  6E6F               	movwf	__u8BufferSize,c
  7136                           
  7137                           ; BSR set to: 1
  7138                           ;ModbusRtu.c: 1064: u8CopyBufferSize = _u8BufferSize + 2;
  7139  00281C  506F               	movf	__u8BufferSize,w,c
  7140  00281E  0F02               	addlw	2
  7141  002820  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7142                           
  7143                           ; BSR set to: 1
  7144                           ;ModbusRtu.c: 1065: ModbusSendTxBuffer();
  7145  002822  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7146                           
  7147                           ;ModbusRtu.c: 1067: return u8CopyBufferSize;
  7148  002826  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7149  002828  0012               	return		;funcret
  7150  00282A  FFFF               	dw	65535	; errata NOP
  7151  00282C                     __end_of_ModbusProcess_FC6:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           postinc0	equ	0xFEE
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _ModbusProcess_FC5 *****************
  7173 ;; Defined at:
  7174 ;;		line 1016 in file "ModbusRtu.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  regs            1    wreg     PTR unsigned short 
  7177 ;;		 -> _MODBUSCoils(2), 
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;  regs            1   29[COMRAM] PTR unsigned short 
  7180 ;;		 -> _MODBUSCoils(2), 
  7181 ;;  u16coil         2   27[COMRAM] unsigned short 
  7182 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  7183 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      unsigned char 
  7186 ;; Registers used:
  7187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : E/1
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7193 ;;      Params:         0       0       0       0       0       0       0
  7194 ;;      Locals:         5       0       0       0       0       0       0
  7195 ;;      Temps:          5       0       0       0       0       0       0
  7196 ;;      Totals:        10       0       0       0       0       0       0
  7197 ;;Total ram usage:       10 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    4
  7200 ;; This function calls:
  7201 ;;		_ModbusSendTxBuffer
  7202 ;; This function is called by:
  7203 ;;		_ModbusPoll
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text35
  7208  002394                     __ptext35:
  7209                           	opt stack 0
  7210  002394                     _ModbusProcess_FC5:
  7211                           	opt stack 25
  7212                           
  7213                           ;incstack = 0
  7214  002394  FFFF               	dw	65535
  7215                           
  7216                           ;ModbusProcess_FC5@regs stored from wreg
  7217  002396  6E1E               	movwf	ModbusProcess_FC5@regs,c
  7218                           
  7219                           ;ModbusRtu.c: 1019: uint8_t u8currentBit;
  7220                           ;ModbusRtu.c: 1020: uint8_t u8CopyBufferSize;
  7221                           ;ModbusRtu.c: 1021: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  7222  002398  0101               	movlb	1	; () banked
  7223  00239A  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7224  00239C  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  7225  00239E  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7226  0023A0  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  7227  0023A2  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7228                           
  7229                           ; BSR set to: 1
  7230                           ;ModbusRtu.c: 1022: _lastAddress = u16coil;
  7231  0023A6  C01C  F0BC         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7232  0023AA  C01D  F0BD         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7233                           
  7234                           ;ModbusRtu.c: 1023: _lastCount = 1;
  7235  0023AE  0100               	movlb	0	; () banked
  7236  0023B0  6BBF               	clrf	(__lastCount+1)& (0+255),b
  7237  0023B2  0E01               	movlw	1
  7238  0023B4  6FBE               	movwf	__lastCount& (0+255),b
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;ModbusRtu.c: 1026: u8currentBit = (uint8_t) (u16coil % 16);
  7242  0023B6  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  7243  0023B8  0B0F               	andlw	15
  7244  0023BA  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;ModbusRtu.c: 1029: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7248  0023BC  0101               	movlb	1	; () banked
  7249  0023BE  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7250  0023C0  E116               	bnz	l6658
  7251                           
  7252                           ; BSR set to: 1
  7253  0023C2  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7254  0023C6  0E01               	movlw	1
  7255  0023C8  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7256  0023CA  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7257  0023CC  2A16               	incf	??_ModbusProcess_FC5,f,c
  7258  0023CE  D004               	goto	u5674
  7259  0023D0                     u5675:
  7260  0023D0  FFFF               	dw	65535	; assembler added errata NOP
  7261  0023D2  90D8               	bcf	status,0,c
  7262  0023D4  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7263  0023D6  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7264  0023D8                     u5674:
  7265  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  7266  0023DA  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7267  0023DC  D7F9               	goto	u5675
  7268  0023DE  501E               	movf	ModbusProcess_FC5@regs,w,c
  7269  0023E0  6ED9               	movwf	fsr2l,c
  7270  0023E2  6ADA               	clrf	fsr2h,c
  7271  0023E4  5017               	movf	??_ModbusProcess_FC5+1,w,c
  7272  0023E6  12DE               	iorwf	postinc2,f,c
  7273  0023E8  5018               	movf	??_ModbusProcess_FC5+2,w,c
  7274  0023EA  12DD               	iorwf	postdec2,f,c
  7275  0023EC  D019               	goto	l6660
  7276  0023EE                     l6658:
  7277                           
  7278                           ; BSR set to: 1
  7279  0023EE  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7280  0023F2  0E01               	movlw	1
  7281  0023F4  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7282  0023F6  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7283  0023F8  2A16               	incf	??_ModbusProcess_FC5,f,c
  7284  0023FA  D004               	goto	u5684
  7285  0023FC                     u5685:
  7286  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  7287  0023FE  90D8               	bcf	status,0,c
  7288  002400  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7289  002402  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7290  002404                     u5684:
  7291  002404  FFFF               	dw	65535	; assembler added errata NOP
  7292  002406  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7293  002408  D7F9               	goto	u5685
  7294  00240A  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  7295  00240C  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7296  00240E  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  7297  002410  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7298  002412  501E               	movf	ModbusProcess_FC5@regs,w,c
  7299  002414  6ED9               	movwf	fsr2l,c
  7300  002416  6ADA               	clrf	fsr2h,c
  7301  002418  5019               	movf	??_ModbusProcess_FC5+3,w,c
  7302  00241A  16DE               	andwf	postinc2,f,c
  7303  00241C  501A               	movf	??_ModbusProcess_FC5+4,w,c
  7304  00241E  16DD               	andwf	postdec2,f,c
  7305  002420                     l6660:
  7306  002420  FFFF               	dw	65535	; assembler added errata NOP
  7307                           
  7308                           ;ModbusRtu.c: 1036: _u8BufferSize = 6;
  7309  002422  0E06               	movlw	6
  7310  002424  6E6F               	movwf	__u8BufferSize,c
  7311                           
  7312                           ;ModbusRtu.c: 1037: u8CopyBufferSize = _u8BufferSize + 2;
  7313  002426  506F               	movf	__u8BufferSize,w,c
  7314  002428  0F02               	addlw	2
  7315  00242A  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7316                           
  7317                           ;ModbusRtu.c: 1038: ModbusSendTxBuffer();
  7318  00242C  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7319                           
  7320                           ;ModbusRtu.c: 1040: return u8CopyBufferSize;
  7321  002430  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7322  002432  0012               	return		;funcret
  7323  002434  FFFF               	dw	65535	; errata NOP
  7324  002436                     __end_of_ModbusProcess_FC5:
  7325                           	opt stack 0
  7326                           tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           prodh	equ	0xFF4
  7331                           prodl	equ	0xFF3
  7332                           intcon	equ	0xFF2
  7333                           postinc0	equ	0xFEE
  7334                           wreg	equ	0xFE8
  7335                           postdec1	equ	0xFE5
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           
  7345 ;; *************** function _ModbusProcess_FC43 *****************
  7346 ;; Defined at:
  7347 ;;		line 1250 in file "ModbusRtu.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;		None
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  objId           1   23[COMRAM] unsigned char 
  7352 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  7353 ;;  devIdCode       1   21[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : E/1
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7363 ;;      Params:         0       0       0       0       0       0       0
  7364 ;;      Locals:         3       0       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0
  7366 ;;      Totals:         3       0       0       0       0       0       0
  7367 ;;Total ram usage:        3 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		_CopyStringToBuffer
  7372 ;;		_ModbusSendTxBuffer
  7373 ;; This function is called by:
  7374 ;;		_ModbusPoll
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text36
  7379  00144A                     __ptext36:
  7380                           	opt stack 0
  7381  00144A                     _ModbusProcess_FC43:
  7382                           	opt stack 25
  7383                           
  7384                           ;incstack = 0
  7385  00144A  FFFF               	dw	65535
  7386                           
  7387                           ;ModbusRtu.c: 1252: uint8_t devIdCode = _au8Buffer[ 3 ];
  7388  00144C  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  7389                           
  7390                           ;ModbusRtu.c: 1260: uint8_t objId = _au8Buffer[ 4 ];
  7391  001450  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  7392                           
  7393                           ;ModbusRtu.c: 1271: _au8Buffer[ 5 ] = 0x00;
  7394  001454  0101               	movlb	1	; () banked
  7395  001456  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  7396                           
  7397                           ;ModbusRtu.c: 1272: _au8Buffer[ 6 ] = 0x00;
  7398  001458  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  7399                           
  7400                           ; BSR set to: 1
  7401                           ;ModbusRtu.c: 1274: _u8BufferSize = 8;
  7402  00145A  0E08               	movlw	8
  7403  00145C  6E6F               	movwf	__u8BufferSize,c
  7404                           
  7405                           ;ModbusRtu.c: 1275: switch(devIdCode)
  7406  00145E  D094               	goto	l6902
  7407  001460                     l6848:
  7408                           
  7409                           ; BSR set to: 1
  7410                           ;ModbusRtu.c: 1278: _au8Buffer[ 4 ] = 0x81;
  7411  001460  0E81               	movlw	129
  7412  001462  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7413                           
  7414                           ;ModbusRtu.c: 1279: _au8Buffer[ 7 ] = 3;
  7415  001464  0E03               	movlw	3
  7416  001466  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7417                           
  7418                           ; BSR set to: 1
  7419                           ;ModbusRtu.c: 1280: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  7420  001468  0E48               	movlw	low STR_1
  7421  00146A  6E07               	movwf	CopyStringToBuffer@src,c
  7422  00146C  0E06               	movlw	6
  7423  00146E  6E08               	movwf	CopyStringToBuffer@len,c
  7424  001470  0E00               	movlw	0
  7425  001472  EC88  F013         	call	_CopyStringToBuffer
  7426                           
  7427                           ;ModbusRtu.c: 1281: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  7428  001476  0E3F               	movlw	low STR_3
  7429  001478  6E07               	movwf	CopyStringToBuffer@src,c
  7430  00147A  0E09               	movlw	9
  7431  00147C  6E08               	movwf	CopyStringToBuffer@len,c
  7432  00147E  0E01               	movlw	1
  7433  001480  EC88  F013         	call	_CopyStringToBuffer
  7434                           
  7435                           ;ModbusRtu.c: 1282: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  7436  001484  0E4E               	movlw	low STR_5
  7437  001486  6E07               	movwf	CopyStringToBuffer@src,c
  7438  001488  0E05               	movlw	5
  7439  00148A  6E08               	movwf	CopyStringToBuffer@len,c
  7440  00148C  0E02               	movlw	2
  7441  00148E  EC88  F013         	call	_CopyStringToBuffer
  7442                           
  7443                           ;ModbusRtu.c: 1283: break;
  7444  001492  D084               	goto	l943
  7445  001494                     l6856:
  7446                           
  7447                           ; BSR set to: 1
  7448                           ;ModbusRtu.c: 1285: _au8Buffer[ 4 ] = 0x82;
  7449  001494  0E82               	movlw	130
  7450  001496  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7451                           
  7452                           ;ModbusRtu.c: 1286: _au8Buffer[ 7 ] = 4;
  7453  001498  0E04               	movlw	4
  7454  00149A  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7455                           
  7456                           ; BSR set to: 1
  7457                           ;ModbusRtu.c: 1287: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  7458  00149C  0E24               	movlw	low STR_7
  7459  00149E  6E07               	movwf	CopyStringToBuffer@src,c
  7460  0014A0  0E10               	movlw	16
  7461  0014A2  6E08               	movwf	CopyStringToBuffer@len,c
  7462  0014A4  0E03               	movlw	3
  7463  0014A6  EC88  F013         	call	_CopyStringToBuffer
  7464                           
  7465                           ;ModbusRtu.c: 1288: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  7466  0014AA  0E10               	movlw	low STR_9
  7467  0014AC  6E07               	movwf	CopyStringToBuffer@src,c
  7468  0014AE  0E14               	movlw	20
  7469  0014B0  6E08               	movwf	CopyStringToBuffer@len,c
  7470  0014B2  0E04               	movlw	4
  7471  0014B4  EC88  F013         	call	_CopyStringToBuffer
  7472                           
  7473                           ;ModbusRtu.c: 1289: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  7474  0014B8  0E53               	movlw	low STR_11
  7475  0014BA  6E07               	movwf	CopyStringToBuffer@src,c
  7476  0014BC  0E04               	movlw	4
  7477  0014BE  6E08               	movwf	CopyStringToBuffer@len,c
  7478  0014C0  0E05               	movlw	5
  7479  0014C2  EC88  F013         	call	_CopyStringToBuffer
  7480                           
  7481                           ;ModbusRtu.c: 1290: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  7482  0014C6  0E34               	movlw	low STR_13
  7483  0014C8  6E07               	movwf	CopyStringToBuffer@src,c
  7484  0014CA  0E0B               	movlw	11
  7485  0014CC  6E08               	movwf	CopyStringToBuffer@len,c
  7486  0014CE  0E06               	movlw	6
  7487  0014D0  EC88  F013         	call	_CopyStringToBuffer
  7488                           
  7489                           ;ModbusRtu.c: 1291: break;
  7490  0014D4  D063               	goto	l943
  7491  0014D6                     l6866:
  7492                           
  7493                           ; BSR set to: 1
  7494                           ;ModbusRtu.c: 1293: _au8Buffer[ 7 ] = 1;
  7495  0014D6  0E01               	movlw	1
  7496  0014D8  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7497                           
  7498                           ;ModbusRtu.c: 1294: switch(objId)
  7499  0014DA  D046               	goto	l6898
  7500  0014DC                     l6868:
  7501                           
  7502                           ; BSR set to: 1
  7503                           ;ModbusRtu.c: 1297: _au8Buffer[ 4 ] = 0x81;
  7504  0014DC  0E81               	movlw	129
  7505  0014DE  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7506                           
  7507                           ; BSR set to: 1
  7508                           ;ModbusRtu.c: 1298: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  7509  0014E0  0E48               	movlw	low STR_1
  7510  0014E2  6E07               	movwf	CopyStringToBuffer@src,c
  7511  0014E4  0E06               	movlw	6
  7512  0014E6  6E08               	movwf	CopyStringToBuffer@len,c
  7513  0014E8  5018               	movf	ModbusProcess_FC43@objId,w,c
  7514  0014EA  EC88  F013         	call	_CopyStringToBuffer
  7515                           
  7516                           ;ModbusRtu.c: 1299: break;
  7517  0014EE  D056               	goto	l943
  7518  0014F0                     l6872:
  7519                           
  7520                           ; BSR set to: 1
  7521                           ;ModbusRtu.c: 1301: _au8Buffer[ 4 ] = 0x81;
  7522  0014F0  0E81               	movlw	129
  7523  0014F2  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7524                           
  7525                           ; BSR set to: 1
  7526                           ;ModbusRtu.c: 1302: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  7527  0014F4  0E3F               	movlw	low STR_3
  7528  0014F6  6E07               	movwf	CopyStringToBuffer@src,c
  7529  0014F8  0E09               	movlw	9
  7530  0014FA  6E08               	movwf	CopyStringToBuffer@len,c
  7531  0014FC  5018               	movf	ModbusProcess_FC43@objId,w,c
  7532  0014FE  EC88  F013         	call	_CopyStringToBuffer
  7533                           
  7534                           ;ModbusRtu.c: 1303: break;
  7535  001502  D04C               	goto	l943
  7536  001504                     l6876:
  7537                           
  7538                           ; BSR set to: 1
  7539                           ;ModbusRtu.c: 1305: _au8Buffer[ 4 ] = 0x81;
  7540  001504  0E81               	movlw	129
  7541  001506  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7542                           
  7543                           ; BSR set to: 1
  7544                           ;ModbusRtu.c: 1306: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  7545  001508  0E4E               	movlw	low STR_5
  7546  00150A  6E07               	movwf	CopyStringToBuffer@src,c
  7547  00150C  0E05               	movlw	5
  7548  00150E  6E08               	movwf	CopyStringToBuffer@len,c
  7549  001510  5018               	movf	ModbusProcess_FC43@objId,w,c
  7550  001512  EC88  F013         	call	_CopyStringToBuffer
  7551                           
  7552                           ;ModbusRtu.c: 1307: break;
  7553  001516  D042               	goto	l943
  7554  001518                     l6880:
  7555                           
  7556                           ; BSR set to: 1
  7557                           ;ModbusRtu.c: 1309: _au8Buffer[ 4 ] = 0x82;
  7558  001518  0E82               	movlw	130
  7559  00151A  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7560                           
  7561                           ; BSR set to: 1
  7562                           ;ModbusRtu.c: 1310: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  7563  00151C  0E24               	movlw	low STR_7
  7564  00151E  6E07               	movwf	CopyStringToBuffer@src,c
  7565  001520  0E10               	movlw	16
  7566  001522  6E08               	movwf	CopyStringToBuffer@len,c
  7567  001524  5018               	movf	ModbusProcess_FC43@objId,w,c
  7568  001526  EC88  F013         	call	_CopyStringToBuffer
  7569                           
  7570                           ;ModbusRtu.c: 1311: break;
  7571  00152A  D038               	goto	l943
  7572  00152C                     l6884:
  7573                           
  7574                           ; BSR set to: 1
  7575                           ;ModbusRtu.c: 1313: _au8Buffer[ 4 ] = 0x82;
  7576  00152C  0E82               	movlw	130
  7577  00152E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7578                           
  7579                           ; BSR set to: 1
  7580                           ;ModbusRtu.c: 1314: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  7581  001530  0E10               	movlw	low STR_9
  7582  001532  6E07               	movwf	CopyStringToBuffer@src,c
  7583  001534  0E14               	movlw	20
  7584  001536  6E08               	movwf	CopyStringToBuffer@len,c
  7585  001538  5018               	movf	ModbusProcess_FC43@objId,w,c
  7586  00153A  EC88  F013         	call	_CopyStringToBuffer
  7587                           
  7588                           ;ModbusRtu.c: 1315: break;
  7589  00153E  D02E               	goto	l943
  7590  001540                     l6888:
  7591                           
  7592                           ; BSR set to: 1
  7593                           ;ModbusRtu.c: 1317: _au8Buffer[ 4 ] = 0x82;
  7594  001540  0E82               	movlw	130
  7595  001542  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7596                           
  7597                           ; BSR set to: 1
  7598                           ;ModbusRtu.c: 1318: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  7599  001544  0E53               	movlw	low STR_11
  7600  001546  6E07               	movwf	CopyStringToBuffer@src,c
  7601  001548  0E04               	movlw	4
  7602  00154A  6E08               	movwf	CopyStringToBuffer@len,c
  7603  00154C  5018               	movf	ModbusProcess_FC43@objId,w,c
  7604  00154E  EC88  F013         	call	_CopyStringToBuffer
  7605                           
  7606                           ;ModbusRtu.c: 1319: break;
  7607  001552  D024               	goto	l943
  7608  001554                     l6892:
  7609                           
  7610                           ; BSR set to: 1
  7611                           ;ModbusRtu.c: 1321: _au8Buffer[ 4 ] = 0x82;
  7612  001554  0E82               	movlw	130
  7613  001556  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7614                           
  7615                           ; BSR set to: 1
  7616                           ;ModbusRtu.c: 1322: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  7617  001558  0E34               	movlw	low STR_13
  7618  00155A  6E07               	movwf	CopyStringToBuffer@src,c
  7619  00155C  0E0B               	movlw	11
  7620  00155E  6E08               	movwf	CopyStringToBuffer@len,c
  7621  001560  5018               	movf	ModbusProcess_FC43@objId,w,c
  7622  001562  EC88  F013         	call	_CopyStringToBuffer
  7623                           
  7624                           ;ModbusRtu.c: 1323: break;
  7625  001566  D01A               	goto	l943
  7626  001568                     l6898:
  7627  001568  FFFF               	dw	65535	; assembler added errata NOP
  7628                           
  7629                           ; BSR set to: 1
  7630  00156A  5018               	movf	ModbusProcess_FC43@objId,w,c
  7631                           
  7632                           ; Switch size 1, requested type "speed"
  7633                           ; Number of cases is 7, Range of values is 0 to 6
  7634                           ; switch strategies available:
  7635                           ; Name         Instructions Cycles
  7636                           ; simple_byte           22    12 (average)
  7637                           ;	Chosen strategy is simple_byte
  7638  00156C  E0B7               	bz	l6868
  7639  00156E  0A01               	xorlw	1	; case 1
  7640  001570  E0BF               	bz	l6872
  7641  001572  0A03               	xorlw	3	; case 2
  7642  001574  E0C7               	bz	l6876
  7643  001576  0A01               	xorlw	1	; case 3
  7644  001578  E0CF               	bz	l6880
  7645  00157A  0A07               	xorlw	7	; case 4
  7646  00157C  E0D7               	bz	l6884
  7647  00157E  0A01               	xorlw	1	; case 5
  7648  001580  E0DF               	bz	l6888
  7649  001582  0A03               	xorlw	3	; case 6
  7650  001584  E0E7               	bz	l6892
  7651  001586  D00A               	goto	l943
  7652  001588                     l6902:
  7653  001588  FFFF               	dw	65535	; assembler added errata NOP
  7654                           
  7655                           ; BSR set to: 1
  7656  00158A  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  7657                           
  7658                           ; Switch size 1, requested type "speed"
  7659                           ; Number of cases is 3, Range of values is 1 to 4
  7660                           ; switch strategies available:
  7661                           ; Name         Instructions Cycles
  7662                           ; simple_byte           10     6 (average)
  7663                           ;	Chosen strategy is simple_byte
  7664  00158C  0A01               	xorlw	1	; case 1
  7665  00158E  E101 D767          	bz	l6848
  7666  001592  0A03               	xorlw	3	; case 2
  7667  001594  E101 D77E          	bz	l6856
  7668  001598  0A06               	xorlw	6	; case 4
  7669  00159A  E09D               	bz	l6866
  7670  00159C                     l943:
  7671  00159C  FFFF               	dw	65535	; assembler added errata NOP
  7672                           
  7673                           ;ModbusRtu.c: 1327: uint8_t u8CopyBufferSize = _u8BufferSize;
  7674  00159E  C06F  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  7675                           
  7676                           ;ModbusRtu.c: 1328: ModbusSendTxBuffer();
  7677  0015A2  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7678                           
  7679                           ;ModbusRtu.c: 1330: return u8CopyBufferSize;
  7680  0015A6  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  7681  0015A8  0012               	return		;funcret
  7682  0015AA  FFFF               	dw	65535	; errata NOP
  7683  0015AC                     __end_of_ModbusProcess_FC43:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon	equ	0xFF2
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           postdec1	equ	0xFE5
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function _CopyStringToBuffer *****************
  7705 ;; Defined at:
  7706 ;;		line 1241 in file "ModbusRtu.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  objId           1    wreg     unsigned char 
  7709 ;;  src             1    6[COMRAM] PTR const unsigned char 
  7710 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
  7711 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
  7712 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
  7713 ;;		 -> STR_3(9), STR_1(6), 
  7714 ;;  len             1    7[COMRAM] unsigned char 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  objId           1    9[COMRAM] unsigned char 
  7717 ;;  i               1   10[COMRAM] unsigned char 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  1    wreg      void 
  7720 ;; Registers used:
  7721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/1
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7727 ;;      Params:         2       0       0       0       0       0       0
  7728 ;;      Locals:         2       0       0       0       0       0       0
  7729 ;;      Temps:          1       0       0       0       0       0       0
  7730 ;;      Totals:         5       0       0       0       0       0       0
  7731 ;;Total ram usage:        5 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    2
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_ModbusProcess_FC43
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           	psect	text37
  7742  002710                     __ptext37:
  7743                           	opt stack 0
  7744  002710                     _CopyStringToBuffer:
  7745                           	opt stack 26
  7746                           
  7747                           ;incstack = 0
  7748  002710  FFFF               	dw	65535
  7749                           
  7750                           ;CopyStringToBuffer@objId stored from wreg
  7751  002712  6E0A               	movwf	CopyStringToBuffer@objId,c
  7752                           
  7753                           ;ModbusRtu.c: 1243: len--;
  7754  002714  0608               	decf	CopyStringToBuffer@len,f,c
  7755                           
  7756                           ;ModbusRtu.c: 1244: _au8Buffer[_u8BufferSize++] = objId;
  7757  002716  0E00               	movlw	low __au8Buffer
  7758  002718  246F               	addwf	__u8BufferSize,w,c
  7759  00271A  6ED9               	movwf	fsr2l,c
  7760  00271C  6ADA               	clrf	fsr2h,c
  7761  00271E  0E01               	movlw	high __au8Buffer
  7762  002720  22DA               	addwfc	fsr2h,f,c
  7763  002722  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  7764  002726  2A6F               	incf	__u8BufferSize,f,c
  7765                           
  7766                           ;ModbusRtu.c: 1245: _au8Buffer[_u8BufferSize++] = len;
  7767  002728  0E00               	movlw	low __au8Buffer
  7768  00272A  246F               	addwf	__u8BufferSize,w,c
  7769  00272C  6ED9               	movwf	fsr2l,c
  7770  00272E  6ADA               	clrf	fsr2h,c
  7771  002730  0E01               	movlw	high __au8Buffer
  7772  002732  22DA               	addwfc	fsr2h,f,c
  7773  002734  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  7774  002738  2A6F               	incf	__u8BufferSize,f,c
  7775                           
  7776                           ;ModbusRtu.c: 1246: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  7777  00273A  6A0B               	clrf	CopyStringToBuffer@i,c
  7778  00273C  D013               	goto	l6170
  7779  00273E                     l6164:
  7780                           
  7781                           ;ModbusRtu.c: 1247: _au8Buffer[_u8BufferSize] = src[i];
  7782  00273E  5007               	movf	CopyStringToBuffer@src,w,c
  7783  002740  240B               	addwf	CopyStringToBuffer@i,w,c
  7784  002742  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  7785  002744  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  7786  002748                     	if	1	;There is more than 1 active tblptr byte
  7787  002748  0E06               	movlw	high __smallconst
  7788  00274A  6EF7               	movwf	tblptrh,c
  7789  00274C                     	endif
  7790  00274C                     	if	0	;tblptru may be non-zero
  7791  00274C                     	endif
  7792  00274C                     	if	0	;tblptru may be non-zero
  7793  00274C                     	endif
  7794  00274C  0E00               	movlw	low __au8Buffer
  7795  00274E  246F               	addwf	__u8BufferSize,w,c
  7796  002750  6ED9               	movwf	fsr2l,c
  7797  002752  6ADA               	clrf	fsr2h,c
  7798  002754  0E01               	movlw	high __au8Buffer
  7799  002756  22DA               	addwfc	fsr2h,f,c
  7800  002758  0008               	tblrd		*
  7801  00275A  FFFF               	dw	65535	; errata NOP
  7802  00275C  CFF5 FFDF          	movff	tablat,indf2
  7803  002760  2A0B               	incf	CopyStringToBuffer@i,f,c
  7804  002762  2A6F               	incf	__u8BufferSize,f,c
  7805  002764                     l6170:
  7806  002764  FFFF               	dw	65535	; assembler added errata NOP
  7807  002766  5008               	movf	CopyStringToBuffer@len,w,c
  7808  002768  5C0B               	subwf	CopyStringToBuffer@i,w,c
  7809  00276A  E3E9               	bnc	l6164
  7810  00276C  0012               	return		;funcret
  7811  00276E  FFFF               	dw	65535	; errata NOP
  7812  002770                     __end_of_CopyStringToBuffer:
  7813                           	opt stack 0
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           postdec1	equ	0xFE5
  7824                           fsr1h	equ	0xFE2
  7825                           fsr1l	equ	0xFE1
  7826                           indf2	equ	0xFDF
  7827                           postinc2	equ	0xFDE
  7828                           postdec2	equ	0xFDD
  7829                           fsr2h	equ	0xFDA
  7830                           fsr2l	equ	0xFD9
  7831                           status	equ	0xFD8
  7832                           
  7833 ;; *************** function _ModbusProcess_FC3 *****************
  7834 ;; Defined at:
  7835 ;;		line 983 in file "ModbusRtu.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7838 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  7839 ;;  u8size          1   23[COMRAM] unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  u16regsno       2   29[COMRAM] unsigned short 
  7842 ;;  i               1   32[COMRAM] unsigned char 
  7843 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  7844 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      unsigned char 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : E/1
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7854 ;;      Params:         3       0       0       0       0       0       0
  7855 ;;      Locals:         5       0       0       0       0       0       0
  7856 ;;      Temps:          4       0       0       0       0       0       0
  7857 ;;      Totals:        12       0       0       0       0       0       0
  7858 ;;Total ram usage:       12 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    4
  7861 ;; This function calls:
  7862 ;;		_ModbusSendTxBuffer
  7863 ;; This function is called by:
  7864 ;;		_ModbusPoll
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text38
  7869  0020DA                     __ptext38:
  7870                           	opt stack 0
  7871  0020DA                     _ModbusProcess_FC3:
  7872                           	opt stack 25
  7873                           
  7874                           ;incstack = 0
  7875  0020DA  FFFF               	dw	65535
  7876                           
  7877                           ;ModbusRtu.c: 985: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  7878  0020DC  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  7879                           
  7880                           ;ModbusRtu.c: 986: _lastAddress = u8StartAdd;
  7881  0020E0  C020  F0BC         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  7882  0020E4  0100               	movlb	0	; () banked
  7883  0020E6  6BBD               	clrf	(__lastAddress+1)& (0+255),b
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;ModbusRtu.c: 987: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  7887  0020E8  0101               	movlb	1	; () banked
  7888  0020EA  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7889  0020EC  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  7890  0020EE  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7891  0020F0  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  7892  0020F2  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  7893                           
  7894                           ; BSR set to: 1
  7895                           ;ModbusRtu.c: 988: _lastCount = u16regsno;
  7896  0020F6  C01E  F0BE         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  7897  0020FA  C01F  F0BF         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  7898                           
  7899                           ; BSR set to: 1
  7900                           ;ModbusRtu.c: 989: uint8_t u8CopyBufferSize;
  7901                           ;ModbusRtu.c: 990: uint8_t i;
  7902                           ;ModbusRtu.c: 992: _au8Buffer[ 2 ] = u16regsno * 2;
  7903  0020FE  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  7904  002100  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7905  002102  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  7906                           
  7907                           ; BSR set to: 1
  7908                           ;ModbusRtu.c: 993: _u8BufferSize = 3;
  7909  002104  0E03               	movlw	3
  7910  002106  6E6F               	movwf	__u8BufferSize,c
  7911                           
  7912                           ; BSR set to: 1
  7913                           ;ModbusRtu.c: 995: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  7914  002108  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  7915  00210C  D02A               	goto	l6638
  7916  00210E                     l6632:
  7917                           
  7918                           ; BSR set to: 1
  7919                           ;ModbusRtu.c: 996: {
  7920                           ;ModbusRtu.c: 997: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  7921  00210E  0E00               	movlw	low __au8Buffer
  7922  002110  246F               	addwf	__u8BufferSize,w,c
  7923  002112  6ED9               	movwf	fsr2l,c
  7924  002114  6ADA               	clrf	fsr2h,c
  7925  002116  0E01               	movlw	high __au8Buffer
  7926  002118  22DA               	addwfc	fsr2h,f,c
  7927  00211A  5021               	movf	ModbusProcess_FC3@i,w,c
  7928  00211C  0D02               	mullw	2
  7929  00211E  50F3               	movf	prodl,w,c
  7930  002120  2416               	addwf	ModbusProcess_FC3@regs,w,c
  7931  002122  6EE1               	movwf	fsr1l,c
  7932  002124  50F4               	movf	prodh,w,c
  7933  002126  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7934  002128  6EE2               	movwf	fsr1h,c
  7935  00212A  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  7936  00212E  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  7937  002132  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  7938  002136  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  7939  002138  5019               	movf	??_ModbusProcess_FC3,w,c
  7940  00213A  6EDF               	movwf	indf2,c
  7941                           
  7942                           ; BSR set to: 1
  7943                           ;ModbusRtu.c: 998: _u8BufferSize++;
  7944  00213C  2A6F               	incf	__u8BufferSize,f,c
  7945                           
  7946                           ; BSR set to: 1
  7947                           ;ModbusRtu.c: 999: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  7948  00213E  5021               	movf	ModbusProcess_FC3@i,w,c
  7949  002140  0D02               	mullw	2
  7950  002142  50F3               	movf	prodl,w,c
  7951  002144  2416               	addwf	ModbusProcess_FC3@regs,w,c
  7952  002146  6ED9               	movwf	fsr2l,c
  7953  002148  50F4               	movf	prodh,w,c
  7954  00214A  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7955  00214C  6EDA               	movwf	fsr2h,c
  7956  00214E  0E00               	movlw	low __au8Buffer
  7957  002150  246F               	addwf	__u8BufferSize,w,c
  7958  002152  6EE1               	movwf	fsr1l,c
  7959  002154  6AE2               	clrf	fsr1h,c
  7960  002156  0E01               	movlw	high __au8Buffer
  7961  002158  22E2               	addwfc	fsr1h,f,c
  7962  00215A  CFDF FFE7          	movff	indf2,indf1
  7963                           
  7964                           ;ModbusRtu.c: 1000: _u8BufferSize++;
  7965  00215E  2A6F               	incf	__u8BufferSize,f,c
  7966  002160  2A21               	incf	ModbusProcess_FC3@i,f,c
  7967  002162                     l6638:
  7968  002162  FFFF               	dw	65535	; assembler added errata NOP
  7969                           
  7970                           ; BSR set to: 1
  7971  002164  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  7972  002166  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7973  002168  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  7974  00216A  0E00               	movlw	0
  7975  00216C  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  7976  00216E  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  7977  002170  5021               	movf	ModbusProcess_FC3@i,w,c
  7978  002172  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  7979  002174  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  7980  002176  5019               	movf	??_ModbusProcess_FC3,w,c
  7981  002178  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  7982  00217A  501A               	movf	??_ModbusProcess_FC3+1,w,c
  7983  00217C  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  7984  00217E  E3C7               	bnc	l6632
  7985                           
  7986                           ; BSR set to: 1
  7987                           ;ModbusRtu.c: 1001: }
  7988                           ;ModbusRtu.c: 1002: u8CopyBufferSize = _u8BufferSize + 2;
  7989  002180  506F               	movf	__u8BufferSize,w,c
  7990  002182  0F02               	addlw	2
  7991  002184  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  7992                           
  7993                           ; BSR set to: 1
  7994                           ;ModbusRtu.c: 1003: ModbusSendTxBuffer();
  7995  002186  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7996                           
  7997                           ;ModbusRtu.c: 1005: return u8CopyBufferSize;
  7998  00218A  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  7999  00218C  0012               	return		;funcret
  8000  00218E  FFFF               	dw	65535	; errata NOP
  8001  002190                     __end_of_ModbusProcess_FC3:
  8002                           	opt stack 0
  8003                           tblptru	equ	0xFF8
  8004                           tblptrh	equ	0xFF7
  8005                           tblptrl	equ	0xFF6
  8006                           tablat	equ	0xFF5
  8007                           prodh	equ	0xFF4
  8008                           prodl	equ	0xFF3
  8009                           intcon	equ	0xFF2
  8010                           postinc0	equ	0xFEE
  8011                           wreg	equ	0xFE8
  8012                           indf1	equ	0xFE7
  8013                           postinc1	equ	0xFE6
  8014                           postdec1	equ	0xFE5
  8015                           fsr1h	equ	0xFE2
  8016                           fsr1l	equ	0xFE1
  8017                           indf2	equ	0xFDF
  8018                           postinc2	equ	0xFDE
  8019                           postdec2	equ	0xFDD
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function _ModbusProcess_FC21 *****************
  8025 ;; Defined at:
  8026 ;;		line 1209 in file "ModbusRtu.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8031 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8032 ;;  i               1   29[COMRAM] unsigned char 
  8033 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8034 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      unsigned char 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : E/1
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8044 ;;      Params:         0       0       0       0       0       0       0
  8045 ;;      Locals:         7       0       0       0       0       0       0
  8046 ;;      Temps:          2       0       0       0       0       0       0
  8047 ;;      Totals:         9       0       0       0       0       0       0
  8048 ;;Total ram usage:        9 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    4
  8051 ;; This function calls:
  8052 ;;		_ModbusSendTxBuffer
  8053 ;; This function is called by:
  8054 ;;		_ModbusPoll
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text39
  8059  002244                     __ptext39:
  8060                           	opt stack 0
  8061  002244                     _ModbusProcess_FC21:
  8062                           	opt stack 25
  8063                           
  8064                           ;incstack = 0
  8065  002244  FFFF               	dw	65535
  8066                           
  8067                           ;ModbusRtu.c: 1213: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8068  002246  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8069                           
  8070                           ;ModbusRtu.c: 1215: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8071  00224A  0101               	movlb	1	; () banked
  8072  00224C  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8073  00224E  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8074  002252  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8075  002254  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8076  002258  6A16               	clrf	??_ModbusProcess_FC21,c
  8077  00225A  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8078  00225C  90D8               	bcf	status,0,c
  8079  00225E  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8080  002260  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8081  002262  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8082  002264  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8083                           
  8084                           ; BSR set to: 1
  8085                           ;ModbusRtu.c: 1216: _lastAddress = startAddrsBytes;
  8086  002266  C01A  F0BC         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8087  00226A  C01B  F0BD         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8088                           
  8089                           ;ModbusRtu.c: 1217: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8090  00226E  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8091  002270  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8092  002274  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8093  002276  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8094  00227A  6A16               	clrf	??_ModbusProcess_FC21,c
  8095  00227C  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8096  00227E  90D8               	bcf	status,0,c
  8097  002280  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8098  002282  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8099  002284  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8100  002286  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8101                           
  8102                           ; BSR set to: 1
  8103                           ;ModbusRtu.c: 1218: _lastCount = recLenBytes;
  8104  002288  C01C  F0BE         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8105  00228C  C01D  F0BF         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8106                           
  8107                           ;ModbusRtu.c: 1219: uint8_t u8CopyBufferSize;
  8108                           ;ModbusRtu.c: 1220: uint8_t i;
  8109                           ;ModbusRtu.c: 1226: _u8BufferSize = requestDataLen + 1;
  8110  002290  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8111  002292  6E6F               	movwf	__u8BufferSize,c
  8112                           
  8113                           ; BSR set to: 1
  8114                           ;ModbusRtu.c: 1230: for (i = 0; i < recLenBytes; i++)
  8115  002294  6A1E               	clrf	ModbusProcess_FC21@i,c
  8116  002296  D01C               	goto	l6836
  8117  002298                     l925:
  8118  002298  FFFF               	dw	65535	; assembler added errata NOP
  8119                           
  8120                           ; BSR set to: 1
  8121  00229A  B2A6               	btfsc	4006,1,c	;volatile
  8122  00229C  D7FD               	goto	l925
  8123                           
  8124                           ; BSR set to: 1
  8125  00229E  501E               	movf	ModbusProcess_FC21@i,w,c
  8126  0022A0  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8127  0022A2  6EA9               	movwf	4009,c	;volatile
  8128                           
  8129                           ; BSR set to: 1
  8130  0022A4  0E0A               	movlw	low (__au8Buffer+10)
  8131  0022A6  241E               	addwf	ModbusProcess_FC21@i,w,c
  8132  0022A8  6ED9               	movwf	fsr2l,c
  8133  0022AA  6ADA               	clrf	fsr2h,c
  8134  0022AC  0E01               	movlw	high (__au8Buffer+10)
  8135  0022AE  22DA               	addwfc	fsr2h,f,c
  8136  0022B0  50DF               	movf	indf2,w,c
  8137  0022B2  6EA8               	movwf	4008,c	;volatile
  8138                           
  8139                           ; BSR set to: 1
  8140  0022B4  90D8               	bcf	status,0,c	;volatile
  8141                           
  8142                           ; BSR set to: 1
  8143  0022B6  BEF2               	btfsc	intcon,7,c	;volatile
  8144                           
  8145                           ; BSR set to: 1
  8146  0022B8  80D8               	bsf	status,0,c	;volatile
  8147                           
  8148                           ; BSR set to: 1
  8149  0022BA  9EF2               	bcf	intcon,7,c	;volatile
  8150  0022BC  84A6               	bsf	4006,2,c	;volatile
  8151                           
  8152                           ; BSR set to: 1
  8153  0022BE  0E55               	movlw	85
  8154  0022C0  6EA7               	movwf	4007,c	;volatile
  8155  0022C2  0EAA               	movlw	170
  8156  0022C4  6EA7               	movwf	4007,c	;volatile
  8157                           
  8158                           ; BSR set to: 1
  8159  0022C6  82A6               	bsf	4006,1,c	;volatile
  8160                           
  8161                           ; BSR set to: 1
  8162  0022C8  94A6               	bcf	4006,2,c	;volatile
  8163                           
  8164                           ; BSR set to: 1
  8165  0022CA  E301               	bnc	l6834
  8166                           
  8167                           ; BSR set to: 1
  8168  0022CC  8EF2               	bsf	intcon,7,c	;volatile
  8169  0022CE                     l6834:
  8170                           
  8171                           ; BSR set to: 1
  8172  0022CE  2A1E               	incf	ModbusProcess_FC21@i,f,c
  8173  0022D0                     l6836:
  8174  0022D0  FFFF               	dw	65535	; assembler added errata NOP
  8175                           
  8176                           ; BSR set to: 1
  8177  0022D2  501E               	movf	ModbusProcess_FC21@i,w,c
  8178  0022D4  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  8179  0022D6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8180  0022D8  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8181  0022DA  5C16               	subwf	??_ModbusProcess_FC21,w,c
  8182  0022DC  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8183  0022DE  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  8184  0022E0  E3DB               	bnc	l925
  8185                           
  8186                           ; BSR set to: 1
  8187                           ;ModbusRtu.c: 1233: }
  8188                           ;ModbusRtu.c: 1235: u8CopyBufferSize = _u8BufferSize;
  8189  0022E2  C06F  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8190                           
  8191                           ; BSR set to: 1
  8192                           ;ModbusRtu.c: 1236: ModbusSendTxBuffer();
  8193  0022E6  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8194                           
  8195                           ;ModbusRtu.c: 1238: return u8CopyBufferSize;
  8196  0022EA  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8197  0022EC  0012               	return		;funcret
  8198  0022EE  FFFF               	dw	65535	; errata NOP
  8199  0022F0                     __end_of_ModbusProcess_FC21:
  8200                           	opt stack 0
  8201                           tblptru	equ	0xFF8
  8202                           tblptrh	equ	0xFF7
  8203                           tblptrl	equ	0xFF6
  8204                           tablat	equ	0xFF5
  8205                           prodh	equ	0xFF4
  8206                           prodl	equ	0xFF3
  8207                           intcon	equ	0xFF2
  8208                           postinc0	equ	0xFEE
  8209                           wreg	equ	0xFE8
  8210                           indf1	equ	0xFE7
  8211                           postinc1	equ	0xFE6
  8212                           postdec1	equ	0xFE5
  8213                           fsr1h	equ	0xFE2
  8214                           fsr1l	equ	0xFE1
  8215                           indf2	equ	0xFDF
  8216                           postinc2	equ	0xFDE
  8217                           postdec2	equ	0xFDD
  8218                           fsr2h	equ	0xFDA
  8219                           fsr2l	equ	0xFD9
  8220                           status	equ	0xFD8
  8221                           
  8222 ;; *************** function _ModbusProcess_FC17 *****************
  8223 ;; Defined at:
  8224 ;;		line 1184 in file "ModbusRtu.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      unsigned char 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : E/1
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8238 ;;      Params:         0       0       0       0       0       0       0
  8239 ;;      Locals:         1       0       0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0
  8241 ;;      Totals:         1       0       0       0       0       0       0
  8242 ;;Total ram usage:        1 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    4
  8245 ;; This function calls:
  8246 ;;		_ModbusSendTxBuffer
  8247 ;; This function is called by:
  8248 ;;		_ModbusPoll
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text40
  8253  00263A                     __ptext40:
  8254                           	opt stack 0
  8255  00263A                     _ModbusProcess_FC17:
  8256                           	opt stack 25
  8257                           
  8258                           ;incstack = 0
  8259  00263A  FFFF               	dw	65535
  8260                           
  8261                           ;ModbusRtu.c: 1186: _au8Buffer[ 2 ] = 4;
  8262  00263C  0E04               	movlw	4
  8263  00263E  0101               	movlb	1	; () banked
  8264  002640  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8265                           
  8266                           ;ModbusRtu.c: 1188: _u8BufferSize = 3;
  8267  002642  0E03               	movlw	3
  8268  002644  6E6F               	movwf	__u8BufferSize,c
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;ModbusRtu.c: 1189: _au8Buffer[_u8BufferSize++] = 0x01;
  8272  002646  0E00               	movlw	low __au8Buffer
  8273  002648  246F               	addwf	__u8BufferSize,w,c
  8274  00264A  6ED9               	movwf	fsr2l,c
  8275  00264C  6ADA               	clrf	fsr2h,c
  8276  00264E  0E01               	movlw	high __au8Buffer
  8277  002650  22DA               	addwfc	fsr2h,f,c
  8278  002652  0E01               	movlw	1
  8279  002654  6EDF               	movwf	indf2,c
  8280                           
  8281                           ; BSR set to: 1
  8282  002656  2A6F               	incf	__u8BufferSize,f,c
  8283                           
  8284                           ; BSR set to: 1
  8285                           ;ModbusRtu.c: 1190: _au8Buffer[_u8BufferSize++] = 0x01;
  8286  002658  0E00               	movlw	low __au8Buffer
  8287  00265A  246F               	addwf	__u8BufferSize,w,c
  8288  00265C  6ED9               	movwf	fsr2l,c
  8289  00265E  6ADA               	clrf	fsr2h,c
  8290  002660  0E01               	movlw	high __au8Buffer
  8291  002662  22DA               	addwfc	fsr2h,f,c
  8292  002664  0E01               	movlw	1
  8293  002666  6EDF               	movwf	indf2,c
  8294                           
  8295                           ; BSR set to: 1
  8296  002668  2A6F               	incf	__u8BufferSize,f,c
  8297                           
  8298                           ; BSR set to: 1
  8299                           ;ModbusRtu.c: 1191: _au8Buffer[_u8BufferSize++] = 0x01;
  8300  00266A  0E00               	movlw	low __au8Buffer
  8301  00266C  246F               	addwf	__u8BufferSize,w,c
  8302  00266E  6ED9               	movwf	fsr2l,c
  8303  002670  6ADA               	clrf	fsr2h,c
  8304  002672  0E01               	movlw	high __au8Buffer
  8305  002674  22DA               	addwfc	fsr2h,f,c
  8306  002676  0E01               	movlw	1
  8307  002678  6EDF               	movwf	indf2,c
  8308                           
  8309                           ; BSR set to: 1
  8310  00267A  2A6F               	incf	__u8BufferSize,f,c
  8311                           
  8312                           ; BSR set to: 1
  8313                           ;ModbusRtu.c: 1192: _au8Buffer[_u8BufferSize++] = 0x01;
  8314  00267C  0E00               	movlw	low __au8Buffer
  8315  00267E  246F               	addwf	__u8BufferSize,w,c
  8316  002680  6ED9               	movwf	fsr2l,c
  8317  002682  6ADA               	clrf	fsr2h,c
  8318  002684  0E01               	movlw	high __au8Buffer
  8319  002686  22DA               	addwfc	fsr2h,f,c
  8320  002688  0E01               	movlw	1
  8321  00268A  6EDF               	movwf	indf2,c
  8322                           
  8323                           ; BSR set to: 1
  8324  00268C  2A6F               	incf	__u8BufferSize,f,c
  8325                           
  8326                           ; BSR set to: 1
  8327                           ;ModbusRtu.c: 1194: _au8Buffer[_u8BufferSize++] = 0xff;
  8328  00268E  0E00               	movlw	low __au8Buffer
  8329  002690  246F               	addwf	__u8BufferSize,w,c
  8330  002692  6ED9               	movwf	fsr2l,c
  8331  002694  6ADA               	clrf	fsr2h,c
  8332  002696  0E01               	movlw	high __au8Buffer
  8333  002698  22DA               	addwfc	fsr2h,f,c
  8334  00269A  68DF               	setf	indf2,c
  8335                           
  8336                           ; BSR set to: 1
  8337  00269C  2A6F               	incf	__u8BufferSize,f,c
  8338                           
  8339                           ; BSR set to: 1
  8340                           ;ModbusRtu.c: 1195: uint8_t u8CopyBufferSize = _u8BufferSize;
  8341  00269E  C06F  F016         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  8342                           
  8343                           ; BSR set to: 1
  8344                           ;ModbusRtu.c: 1196: ModbusSendTxBuffer();
  8345  0026A2  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8346                           
  8347                           ;ModbusRtu.c: 1198: return u8CopyBufferSize;
  8348  0026A6  5016               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8349  0026A8  0012               	return		;funcret
  8350  0026AA  FFFF               	dw	65535	; errata NOP
  8351  0026AC                     __end_of_ModbusProcess_FC17:
  8352                           	opt stack 0
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           postinc0	equ	0xFEE
  8361                           wreg	equ	0xFE8
  8362                           indf1	equ	0xFE7
  8363                           postinc1	equ	0xFE6
  8364                           postdec1	equ	0xFE5
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _ModbusProcess_FC16 *****************
  8375 ;; Defined at:
  8376 ;;		line 1145 in file "ModbusRtu.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8379 ;;		 -> _MODBUSHoldingRegs(30), 
  8380 ;;  u8size          1   23[COMRAM] unsigned char 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  8383 ;;  temp            2   28[COMRAM] unsigned short 
  8384 ;;  i               1   34[COMRAM] unsigned char 
  8385 ;;  u8regsno        1   33[COMRAM] unsigned char 
  8386 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      unsigned char 
  8389 ;; Registers used:
  8390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : E/1
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8396 ;;      Params:         3       0       0       0       0       0       0
  8397 ;;      Locals:         7       0       0       0       0       0       0
  8398 ;;      Temps:          4       0       0       0       0       0       0
  8399 ;;      Totals:        14       0       0       0       0       0       0
  8400 ;;Total ram usage:       14 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    4
  8403 ;; This function calls:
  8404 ;;		_ModbusSendTxBuffer
  8405 ;; This function is called by:
  8406 ;;		_ModbusPoll
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text41
  8411  001E96                     __ptext41:
  8412                           	opt stack 0
  8413  001E96                     _ModbusProcess_FC16:
  8414                           	opt stack 25
  8415                           
  8416                           ;incstack = 0
  8417  001E96  FFFF               	dw	65535
  8418                           
  8419                           ;ModbusRtu.c: 1148: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8420  001E98  0101               	movlb	1	; () banked
  8421  001E9A  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8422  001E9C  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8423  001EA0  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8424  001EA2  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8425  001EA6  6A19               	clrf	??_ModbusProcess_FC16,c
  8426  001EA8  1019               	iorwf	??_ModbusProcess_FC16,w,c
  8427  001EAA  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8428  001EAC  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8429  001EAE  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8430                           
  8431                           ; BSR set to: 1
  8432                           ;ModbusRtu.c: 1149: _lastAddress = u16StartAdd;
  8433  001EB0  C020  F0BC         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8434  001EB4  C021  F0BD         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8435                           
  8436                           ; BSR set to: 1
  8437                           ;ModbusRtu.c: 1150: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8438  001EB8  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8439                           
  8440                           ; BSR set to: 1
  8441                           ;ModbusRtu.c: 1151: _lastCount = u8regsno;
  8442  001EBC  C022  F0BE         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8443  001EC0  0100               	movlb	0	; () banked
  8444  001EC2  6BBF               	clrf	(__lastCount+1)& (0+255),b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;ModbusRtu.c: 1152: uint8_t u8CopyBufferSize;
  8448                           ;ModbusRtu.c: 1153: uint8_t i;
  8449                           ;ModbusRtu.c: 1154: uint16_t temp;
  8450                           ;ModbusRtu.c: 1157: _au8Buffer[ NB_HI ] = 0;
  8451  001EC4  0101               	movlb	1	; () banked
  8452  001EC6  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8453                           
  8454                           ; BSR set to: 1
  8455                           ;ModbusRtu.c: 1158: _au8Buffer[ NB_LO ] = u8regsno;
  8456  001EC8  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8457                           
  8458                           ; BSR set to: 1
  8459                           ;ModbusRtu.c: 1159: _u8BufferSize = RESPONSE_SIZE;
  8460  001ECC  0E06               	movlw	6
  8461  001ECE  6E6F               	movwf	__u8BufferSize,c
  8462                           
  8463                           ; BSR set to: 1
  8464                           ;ModbusRtu.c: 1162: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8465  001ED0  6A23               	clrf	ModbusProcess_FC16@i,c
  8466  001ED2  D02C               	goto	l6762
  8467  001ED4                     l6756:
  8468                           
  8469                           ; BSR set to: 1
  8470                           ;ModbusRtu.c: 1163: {
  8471                           ;ModbusRtu.c: 1164: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8472  001ED4  5023               	movf	ModbusProcess_FC16@i,w,c
  8473  001ED6  0D02               	mullw	2
  8474  001ED8  0E08               	movlw	low (__au8Buffer+8)
  8475  001EDA  24F3               	addwf	prodl,w,c
  8476  001EDC  6ED9               	movwf	fsr2l,c
  8477  001EDE  0E01               	movlw	high (__au8Buffer+8)
  8478  001EE0  20F4               	addwfc	prodh,w,c
  8479  001EE2  6EDA               	movwf	fsr2h,c
  8480  001EE4  50DF               	movf	indf2,w,c
  8481  001EE6  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8482  001EE8  5023               	movf	ModbusProcess_FC16@i,w,c
  8483  001EEA  0D02               	mullw	2
  8484  001EEC  0E07               	movlw	low (__au8Buffer+7)
  8485  001EEE  24F3               	addwf	prodl,w,c
  8486  001EF0  6ED9               	movwf	fsr2l,c
  8487  001EF2  0E01               	movlw	high (__au8Buffer+7)
  8488  001EF4  20F4               	addwfc	prodh,w,c
  8489  001EF6  6EDA               	movwf	fsr2h,c
  8490  001EF8  50DF               	movf	indf2,w,c
  8491  001EFA  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8492  001EFC  5019               	movf	??_ModbusProcess_FC16,w,c
  8493  001EFE  6E1D               	movwf	ModbusProcess_FC16@temp,c
  8494  001F00  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8495                           
  8496                           ; BSR set to: 1
  8497                           ;ModbusRtu.c: 1168: regs[ u16StartAdd + i ] = temp;
  8498  001F04  5023               	movf	ModbusProcess_FC16@i,w,c
  8499  001F06  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8500  001F08  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8501  001F0A  0E00               	movlw	0
  8502  001F0C  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8503  001F0E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8504  001F10  90D8               	bcf	status,0,c
  8505  001F12  3619               	rlcf	??_ModbusProcess_FC16,f,c
  8506  001F14  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  8507  001F16  5019               	movf	??_ModbusProcess_FC16,w,c
  8508  001F18  2416               	addwf	ModbusProcess_FC16@regs,w,c
  8509  001F1A  6ED9               	movwf	fsr2l,c
  8510  001F1C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8511  001F1E  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8512  001F20  6EDA               	movwf	fsr2h,c
  8513  001F22  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8514  001F26  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8515                           
  8516                           ; BSR set to: 1
  8517  001F2A  2A23               	incf	ModbusProcess_FC16@i,f,c
  8518  001F2C                     l6762:
  8519  001F2C  FFFF               	dw	65535	; assembler added errata NOP
  8520                           
  8521                           ; BSR set to: 1
  8522  001F2E  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  8523  001F30  5C23               	subwf	ModbusProcess_FC16@i,w,c
  8524  001F32  E20E               	bc	l6766
  8525                           
  8526                           ; BSR set to: 1
  8527  001F34  5018               	movf	ModbusProcess_FC16@u8size,w,c
  8528  001F36  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8529  001F38  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8530  001F3A  5023               	movf	ModbusProcess_FC16@i,w,c
  8531  001F3C  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8532  001F3E  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8533  001F40  0E00               	movlw	0
  8534  001F42  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8535  001F44  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8536  001F46  5019               	movf	??_ModbusProcess_FC16,w,c
  8537  001F48  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  8538  001F4A  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8539  001F4C  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  8540  001F4E  E3C2               	bnc	l6756
  8541  001F50                     l6766:
  8542                           
  8543                           ; BSR set to: 1
  8544                           ;ModbusRtu.c: 1169: }
  8545                           ;ModbusRtu.c: 1170: u8CopyBufferSize = _u8BufferSize + 2;
  8546  001F50  506F               	movf	__u8BufferSize,w,c
  8547  001F52  0F02               	addlw	2
  8548  001F54  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8549                           
  8550                           ; BSR set to: 1
  8551                           ;ModbusRtu.c: 1171: ModbusSendTxBuffer();
  8552  001F56  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8553                           
  8554                           ;ModbusRtu.c: 1173: return u8CopyBufferSize;
  8555  001F5A  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8556  001F5C  0012               	return		;funcret
  8557  001F5E  FFFF               	dw	65535	; errata NOP
  8558  001F60                     __end_of_ModbusProcess_FC16:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           intcon	equ	0xFF2
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           indf1	equ	0xFE7
  8570                           postinc1	equ	0xFE6
  8571                           postdec1	equ	0xFE5
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           fsr2h	equ	0xFDA
  8578                           fsr2l	equ	0xFD9
  8579                           status	equ	0xFD8
  8580                           
  8581 ;; *************** function _ModbusProcess_FC15 *****************
  8582 ;; Defined at:
  8583 ;;		line 1087 in file "ModbusRtu.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  regs            1    wreg     PTR unsigned short 
  8586 ;;		 -> _MODBUSCoils(2), 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  regs            1   35[COMRAM] PTR unsigned short 
  8589 ;;		 -> _MODBUSCoils(2), 
  8590 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  8591 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  8592 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  8593 ;;  u16coil         2   26[COMRAM] unsigned short 
  8594 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  8595 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  8596 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  8597 ;;  bTemp           1   29[COMRAM] unsigned char 
  8598 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      unsigned char 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : E/1
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8608 ;;      Params:         0       0       0       0       0       0       0
  8609 ;;      Locals:        14       0       0       0       0       0       0
  8610 ;;      Temps:          5       0       0       0       0       0       0
  8611 ;;      Totals:        19       0       0       0       0       0       0
  8612 ;;Total ram usage:       19 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    4
  8615 ;; This function calls:
  8616 ;;		_ModbusSendTxBuffer
  8617 ;; This function is called by:
  8618 ;;		_ModbusPoll
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text42
  8623  001902                     __ptext42:
  8624                           	opt stack 0
  8625  001902                     _ModbusProcess_FC15:
  8626                           	opt stack 25
  8627                           
  8628                           ;incstack = 0
  8629  001902  FFFF               	dw	65535
  8630                           
  8631                           ;ModbusProcess_FC15@regs stored from wreg
  8632  001904  6E24               	movwf	ModbusProcess_FC15@regs,c
  8633                           
  8634                           ;ModbusRtu.c: 1090: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8635                           ;ModbusRtu.c: 1091: uint8_t u8CopyBufferSize;
  8636                           ;ModbusRtu.c: 1092: uint16_t u16currentCoil, u16coil;
  8637                           ;ModbusRtu.c: 1093: boolean bTemp;
  8638                           ;ModbusRtu.c: 1096: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8639  001906  0101               	movlb	1	; () banked
  8640  001908  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8641  00190A  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8642  00190C  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8643  00190E  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8644  001910  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;ModbusRtu.c: 1097: _lastAddress = u16StartCoil;
  8648  001914  C020  F0BC         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8649  001918  C021  F0BD         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8650                           
  8651                           ;ModbusRtu.c: 1098: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8652  00191C  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8653  00191E  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8654  001920  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8655  001922  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  8656  001924  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8657                           
  8658                           ; BSR set to: 1
  8659                           ;ModbusRtu.c: 1099: _lastCount = u16Coilno;
  8660  001928  C022  F0BE         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8661  00192C  C023  F0BF         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8662                           
  8663                           ; BSR set to: 1
  8664                           ;ModbusRtu.c: 1102: u8bitsno = 0;
  8665  001930  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8666                           
  8667                           ;ModbusRtu.c: 1103: u8frameByte = 7;
  8668  001932  0E07               	movlw	7
  8669  001934  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  8670                           
  8671                           ; BSR set to: 1
  8672                           ;ModbusRtu.c: 1104: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  8673  001936  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8674  001938  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8675  00193A  D058               	goto	l6728
  8676  00193C                     l6708:
  8677                           
  8678                           ;ModbusRtu.c: 1105: {
  8679                           ;ModbusRtu.c: 1107: u16coil = u16StartCoil + u16currentCoil;
  8680  00193C  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8681  00193E  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8682  001940  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  8683  001942  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8684  001944  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8685  001946  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  8686                           
  8687                           ;ModbusRtu.c: 1109: u8currentBit = (uint8_t) u16coil;
  8688  001948  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8689                           
  8690                           ;ModbusRtu.c: 1111: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8691  00194C  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8692  001950  0E00               	movlw	low __au8Buffer
  8693  001952  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8694  001954  6ED9               	movwf	fsr2l,c
  8695  001956  6ADA               	clrf	fsr2h,c
  8696  001958  0E01               	movlw	high __au8Buffer
  8697  00195A  22DA               	addwfc	fsr2h,f,c
  8698  00195C  50DF               	movf	indf2,w,c
  8699  00195E  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8700  001960  2A16               	incf	??_ModbusProcess_FC15,f,c
  8701  001962  D003               	goto	u5694
  8702  001964                     u5695:
  8703  001964  FFFF               	dw	65535	; assembler added errata NOP
  8704  001966  90D8               	bcf	status,0,c
  8705  001968  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  8706  00196A                     u5694:
  8707  00196A  FFFF               	dw	65535	; assembler added errata NOP
  8708  00196C  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8709  00196E  D7FA               	goto	u5695
  8710  001970  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8711  001972  0B01               	andlw	1
  8712  001974  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  8713                           
  8714                           ;ModbusRtu.c: 1115: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  8715  001976  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  8716  001978  E016               	bz	l6718
  8717  00197A  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8718  00197E  0E01               	movlw	1
  8719  001980  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8720  001982  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8721  001984  2A16               	incf	??_ModbusProcess_FC15,f,c
  8722  001986  D004               	goto	u5714
  8723  001988                     u5715:
  8724  001988  FFFF               	dw	65535	; assembler added errata NOP
  8725  00198A  90D8               	bcf	status,0,c
  8726  00198C  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8727  00198E  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8728  001990                     u5714:
  8729  001990  FFFF               	dw	65535	; assembler added errata NOP
  8730  001992  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8731  001994  D7F9               	goto	u5715
  8732  001996  5024               	movf	ModbusProcess_FC15@regs,w,c
  8733  001998  6ED9               	movwf	fsr2l,c
  8734  00199A  6ADA               	clrf	fsr2h,c
  8735  00199C  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8736  00199E  12DE               	iorwf	postinc2,f,c
  8737  0019A0  5018               	movf	??_ModbusProcess_FC15+2,w,c
  8738  0019A2  12DD               	iorwf	postdec2,f,c
  8739  0019A4  D019               	goto	l6720
  8740  0019A6                     l6718:
  8741  0019A6  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8742  0019AA  0E01               	movlw	1
  8743  0019AC  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8744  0019AE  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8745  0019B0  2A16               	incf	??_ModbusProcess_FC15,f,c
  8746  0019B2  D004               	goto	u5724
  8747  0019B4                     u5725:
  8748  0019B4  FFFF               	dw	65535	; assembler added errata NOP
  8749  0019B6  90D8               	bcf	status,0,c
  8750  0019B8  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8751  0019BA  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8752  0019BC                     u5724:
  8753  0019BC  FFFF               	dw	65535	; assembler added errata NOP
  8754  0019BE  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8755  0019C0  D7F9               	goto	u5725
  8756  0019C2  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  8757  0019C4  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  8758  0019C6  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  8759  0019C8  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  8760  0019CA  5024               	movf	ModbusProcess_FC15@regs,w,c
  8761  0019CC  6ED9               	movwf	fsr2l,c
  8762  0019CE  6ADA               	clrf	fsr2h,c
  8763  0019D0  5019               	movf	??_ModbusProcess_FC15+3,w,c
  8764  0019D2  16DE               	andwf	postinc2,f,c
  8765  0019D4  501A               	movf	??_ModbusProcess_FC15+4,w,c
  8766  0019D6  16DD               	andwf	postdec2,f,c
  8767  0019D8                     l6720:
  8768  0019D8  FFFF               	dw	65535	; assembler added errata NOP
  8769                           
  8770                           ;ModbusRtu.c: 1120: u8bitsno++;
  8771  0019DA  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  8772                           
  8773                           ;ModbusRtu.c: 1122: if (u8bitsno > 7)
  8774  0019DC  0E07               	movlw	7
  8775  0019DE  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  8776  0019E0  D002               	goto	l906
  8777                           
  8778                           ;ModbusRtu.c: 1123: {
  8779                           ;ModbusRtu.c: 1124: u8bitsno = 0;
  8780  0019E2  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8781                           
  8782                           ;ModbusRtu.c: 1125: u8frameByte++;
  8783  0019E4  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  8784  0019E6                     l906:
  8785  0019E6  FFFF               	dw	65535	; assembler added errata NOP
  8786  0019E8  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  8787  0019EA  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  8788  0019EC                     l6728:
  8789  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  8790  0019EE  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  8791  0019F0  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  8792  0019F2  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  8793  0019F4  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  8794  0019F6  E3A2               	bnc	l6708
  8795                           
  8796                           ;ModbusRtu.c: 1126: }
  8797                           ;ModbusRtu.c: 1127: }
  8798                           ;ModbusRtu.c: 1131: _u8BufferSize = 6;
  8799  0019F8  0E06               	movlw	6
  8800  0019FA  6E6F               	movwf	__u8BufferSize,c
  8801                           
  8802                           ;ModbusRtu.c: 1132: u8CopyBufferSize = _u8BufferSize + 2;
  8803  0019FC  506F               	movf	__u8BufferSize,w,c
  8804  0019FE  0F02               	addlw	2
  8805  001A00  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  8806                           
  8807                           ;ModbusRtu.c: 1133: ModbusSendTxBuffer();
  8808  001A02  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8809                           
  8810                           ;ModbusRtu.c: 1134: return u8CopyBufferSize;
  8811  001A06  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  8812  001A08  0012               	return		;funcret
  8813  001A0A  FFFF               	dw	65535	; errata NOP
  8814  001A0C                     __end_of_ModbusProcess_FC15:
  8815                           	opt stack 0
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           postinc0	equ	0xFEE
  8824                           wreg	equ	0xFE8
  8825                           indf1	equ	0xFE7
  8826                           postinc1	equ	0xFE6
  8827                           postdec1	equ	0xFE5
  8828                           fsr1h	equ	0xFE2
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function _ModbusProcess_FC102 *****************
  8838 ;; Defined at:
  8839 ;;		line 1392 in file "ModbusRtu.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      unsigned char 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : E/1
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8853 ;;      Params:         0       0       0       0       0       0       0
  8854 ;;      Locals:         1       0       0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0
  8856 ;;      Totals:         1       0       0       0       0       0       0
  8857 ;;Total ram usage:        1 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    4
  8860 ;; This function calls:
  8861 ;;		_ModbusSendTxBuffer
  8862 ;; This function is called by:
  8863 ;;		_ModbusPoll
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text43
  8868  002D84                     __ptext43:
  8869                           	opt stack 0
  8870  002D84                     _ModbusProcess_FC102:
  8871                           	opt stack 25
  8872                           
  8873                           ;incstack = 0
  8874  002D84  FFFF               	dw	65535
  8875                           
  8876                           ;ModbusRtu.c: 1394: _au8Buffer[FUNC + 1] = _deviceStatus;
  8877  002D86  C0CA  F102         	movff	__deviceStatus,__au8Buffer+2
  8878                           
  8879                           ;ModbusRtu.c: 1395: _u8BufferSize = 3;
  8880  002D8A  0E03               	movlw	3
  8881  002D8C  6E6F               	movwf	__u8BufferSize,c
  8882                           
  8883                           ;ModbusRtu.c: 1396: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  8884  002D8E  506F               	movf	__u8BufferSize,w,c
  8885  002D90  0F02               	addlw	2
  8886  002D92  6E16               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
  8887                           
  8888                           ;ModbusRtu.c: 1397: ModbusSendTxBuffer();
  8889  002D94  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8890                           
  8891                           ;ModbusRtu.c: 1399: return u8CopyBufferSize;
  8892  002D98  5016               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
  8893  002D9A  0012               	return		;funcret
  8894  002D9C  FFFF               	dw	65535	; errata NOP
  8895  002D9E                     __end_of_ModbusProcess_FC102:
  8896                           	opt stack 0
  8897                           tblptru	equ	0xFF8
  8898                           tblptrh	equ	0xFF7
  8899                           tblptrl	equ	0xFF6
  8900                           tablat	equ	0xFF5
  8901                           prodh	equ	0xFF4
  8902                           prodl	equ	0xFF3
  8903                           intcon	equ	0xFF2
  8904                           postinc0	equ	0xFEE
  8905                           wreg	equ	0xFE8
  8906                           indf1	equ	0xFE7
  8907                           postinc1	equ	0xFE6
  8908                           postdec1	equ	0xFE5
  8909                           fsr1h	equ	0xFE2
  8910                           fsr1l	equ	0xFE1
  8911                           indf2	equ	0xFDF
  8912                           postinc2	equ	0xFDE
  8913                           postdec2	equ	0xFDD
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918 ;; *************** function _ModbusProcess_FC101 *****************
  8919 ;; Defined at:
  8920 ;;		line 1374 in file "ModbusRtu.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;		None
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      unsigned char 
  8927 ;; Registers used:
  8928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8929 ;; Tracked objects:
  8930 ;;		On entry : E/1
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8934 ;;      Params:         0       0       0       0       0       0       0
  8935 ;;      Locals:         1       0       0       0       0       0       0
  8936 ;;      Temps:          0       0       0       0       0       0       0
  8937 ;;      Totals:         1       0       0       0       0       0       0
  8938 ;;Total ram usage:        1 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    4
  8941 ;; This function calls:
  8942 ;;		_ModbusSendTxBuffer
  8943 ;; This function is called by:
  8944 ;;		_ModbusPoll
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           	psect	text44
  8949  002BF0                     __ptext44:
  8950                           	opt stack 0
  8951  002BF0                     _ModbusProcess_FC101:
  8952                           	opt stack 25
  8953                           
  8954                           ;incstack = 0
  8955  002BF0  FFFF               	dw	65535
  8956                           
  8957                           ;ModbusRtu.c: 1376: _u8BufferSize = 10;
  8958  002BF2  0E0A               	movlw	10
  8959  002BF4  6E6F               	movwf	__u8BufferSize,c
  8960                           
  8961                           ;ModbusRtu.c: 1377: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
  8962  002BF6  C102  F0E7         	movff	__au8Buffer+2,_ModbusUserCommandId
  8963                           
  8964                           ;ModbusRtu.c: 1378: ModbusUserCommandData = _au8Buffer[COM_DATA];
  8965  002BFA  C103  F0E6         	movff	__au8Buffer+3,_ModbusUserCommandData
  8966                           
  8967                           ;ModbusRtu.c: 1379: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
  8968  002BFE  C104  F0E0         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
  8969                           
  8970                           ;ModbusRtu.c: 1380: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
  8971  002C02  C105  F0E1         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
  8972                           
  8973                           ;ModbusRtu.c: 1381: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
  8974  002C06  C106  F0E2         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
  8975                           
  8976                           ;ModbusRtu.c: 1382: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
  8977  002C0A  C107  F0E3         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
  8978                           
  8979                           ;ModbusRtu.c: 1383: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
  8980  002C0E  C108  F0E4         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
  8981                           
  8982                           ;ModbusRtu.c: 1384: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
  8983  002C12  C109  F0E5         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
  8984                           
  8985                           ;ModbusRtu.c: 1386: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  8986  002C16  506F               	movf	__u8BufferSize,w,c
  8987  002C18  0F02               	addlw	2
  8988  002C1A  6E16               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
  8989                           
  8990                           ;ModbusRtu.c: 1387: ModbusSendTxBuffer();
  8991  002C1C  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8992                           
  8993                           ;ModbusRtu.c: 1389: return u8CopyBufferSize;
  8994  002C20  5016               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
  8995  002C22  0012               	return		;funcret
  8996  002C24  FFFF               	dw	65535	; errata NOP
  8997  002C26                     __end_of_ModbusProcess_FC101:
  8998                           	opt stack 0
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           postinc0	equ	0xFEE
  9007                           wreg	equ	0xFE8
  9008                           indf1	equ	0xFE7
  9009                           postinc1	equ	0xFE6
  9010                           postdec1	equ	0xFE5
  9011                           fsr1h	equ	0xFE2
  9012                           fsr1l	equ	0xFE1
  9013                           indf2	equ	0xFDF
  9014                           postinc2	equ	0xFDE
  9015                           postdec2	equ	0xFDD
  9016                           fsr2h	equ	0xFDA
  9017                           fsr2l	equ	0xFD9
  9018                           status	equ	0xFD8
  9019                           
  9020 ;; *************** function _ModbusProcess_FC100 *****************
  9021 ;; Defined at:
  9022 ;;		line 1334 in file "ModbusRtu.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  newTime        18   73[COMRAM] struct tm
  9027 ;;  newRawTime      4   68[COMRAM] long 
  9028 ;;  u8CopyBuffer    1   72[COMRAM] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  1    wreg      unsigned char 
  9031 ;; Registers used:
  9032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : E/1
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9038 ;;      Params:         0       0       0       0       0       0       0
  9039 ;;      Locals:        23       0       0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0
  9041 ;;      Totals:        23       0       0       0       0       0       0
  9042 ;;Total ram usage:       23 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    6
  9045 ;; This function calls:
  9046 ;;		_ModbusSendTxBuffer
  9047 ;;		_ModbusSetExceptionStatusBit
  9048 ;;		_SetHourMin
  9049 ;;		_SetTime
  9050 ;;		_mktime
  9051 ;; This function is called by:
  9052 ;;		_ModbusPoll
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text45
  9057  001CE6                     __ptext45:
  9058                           	opt stack 0
  9059  001CE6                     _ModbusProcess_FC100:
  9060                           	opt stack 23
  9061                           
  9062                           ;incstack = 0
  9063  001CE6  FFFF               	dw	65535
  9064                           
  9065                           ;ModbusRtu.c: 1336: _u8BufferSize = 10;
  9066  001CE8  0E0A               	movlw	10
  9067  001CEA  6E6F               	movwf	__u8BufferSize,c
  9068                           
  9069                           ;ModbusRtu.c: 1337: _lastCommand = _au8Buffer[COM_COM_ID];
  9070  001CEC  C102  F0D1         	movff	__au8Buffer+2,__lastCommand
  9071                           
  9072                           ;ModbusRtu.c: 1338: switch(_lastCommand)
  9073  001CF0  D058               	goto	l6960
  9074  001CF2                     l959:
  9075                           
  9076                           ; BSR set to: 0
  9077  001CF2  00FF               	reset		; ;# 
  9078                           
  9079                           ;ModbusRtu.c: 1344: break;
  9080  001CF4  D05F               	goto	l6962
  9081  001CF6                     l961:
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;ModbusRtu.c: 1346: _u8id = _au8Buffer[COM_DATA];
  9085  001CF6  C103  F0D6         	movff	__au8Buffer+3,__u8id
  9086  001CFA                     l963:
  9087  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  9088  001CFC  B2A6               	btfsc	4006,1,c	;volatile
  9089  001CFE  D7FD               	goto	l963
  9090  001D00  0E01               	movlw	1
  9091  001D02  6EA9               	movwf	4009,c	;volatile
  9092  001D04  C0D6  FFA8         	movff	__u8id,4008	;volatile
  9093  001D08  90D8               	bcf	status,0,c	;volatile
  9094  001D0A  BEF2               	btfsc	intcon,7,c	;volatile
  9095  001D0C  80D8               	bsf	status,0,c	;volatile
  9096  001D0E  9EF2               	bcf	intcon,7,c	;volatile
  9097  001D10  84A6               	bsf	4006,2,c	;volatile
  9098  001D12  0E55               	movlw	85
  9099  001D14  6EA7               	movwf	4007,c	;volatile
  9100  001D16  0EAA               	movlw	170
  9101  001D18  6EA7               	movwf	4007,c	;volatile
  9102  001D1A  82A6               	bsf	4006,1,c	;volatile
  9103  001D1C  94A6               	bcf	4006,2,c	;volatile
  9104  001D1E  E301               	bnc	l6934
  9105  001D20  8EF2               	bsf	intcon,7,c	;volatile
  9106  001D22                     l6934:
  9107                           
  9108                           ;ModbusRtu.c: 1348: ModbusSetExceptionStatusBit(0, 1);
  9109  001D22  0E01               	movlw	1
  9110  001D24  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9111  001D26  0E00               	movlw	0
  9112  001D28  EC66  F014         	call	_ModbusSetExceptionStatusBit
  9113                           
  9114                           ;ModbusRtu.c: 1349: break;
  9115  001D2C  D043               	goto	l6962
  9116  001D2E                     l6936:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;ModbusRtu.c: 1351: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
  9120  001D2E  0E04               	movlw	low (__au8Buffer+4)
  9121  001D30  6E0B               	movwf	SetHourMin@newHour,c
  9122  001D32  0E01               	movlw	high (__au8Buffer+4)
  9123  001D34  6E0C               	movwf	SetHourMin@newHour+1,c
  9124  001D36  0E05               	movlw	low (__au8Buffer+5)
  9125  001D38  6E0D               	movwf	SetHourMin@newMin,c
  9126  001D3A  0E01               	movlw	high (__au8Buffer+5)
  9127  001D3C  6E0E               	movwf	SetHourMin@newMin+1,c
  9128  001D3E  0E07               	movlw	low (__au8Buffer+7)
  9129  001D40  6E0F               	movwf	SetHourMin@sec,c
  9130  001D42  0E01               	movlw	high (__au8Buffer+7)
  9131  001D44  6E10               	movwf	SetHourMin@sec+1,c
  9132  001D46  ECF8  F00B         	call	_SetHourMin	;wreg free
  9133                           
  9134                           ;ModbusRtu.c: 1354: struct tm newTime;
  9135                           ;ModbusRtu.c: 1355: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
  9136  001D4A  0E64               	movlw	100
  9137  001D4C  0101               	movlb	1	; () banked
  9138  001D4E  2509               	addwf	(__au8Buffer+9)& (0+255),w,b
  9139  001D50  6E54               	movwf	ModbusProcess_FC100@newTime+10,c
  9140  001D52  6A55               	clrf	ModbusProcess_FC100@newTime+11,c
  9141  001D54  0E00               	movlw	0
  9142  001D56  2255               	addwfc	ModbusProcess_FC100@newTime+11,f,c
  9143                           
  9144                           ; BSR set to: 1
  9145                           ;ModbusRtu.c: 1356: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
  9146  001D58  C108  F052         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
  9147  001D5C  6A53               	clrf	ModbusProcess_FC100@newTime+9,c
  9148                           
  9149                           ; BSR set to: 1
  9150                           ;ModbusRtu.c: 1357: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
  9151  001D5E  C106  F050         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
  9152  001D62  6A51               	clrf	ModbusProcess_FC100@newTime+7,c
  9153                           
  9154                           ; BSR set to: 1
  9155                           ;ModbusRtu.c: 1358: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
  9156  001D64  C104  F04E         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
  9157  001D68  6A4F               	clrf	ModbusProcess_FC100@newTime+5,c
  9158                           
  9159                           ; BSR set to: 1
  9160                           ;ModbusRtu.c: 1359: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
  9161  001D6A  C105  F04C         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
  9162  001D6E  6A4D               	clrf	ModbusProcess_FC100@newTime+3,c
  9163                           
  9164                           ; BSR set to: 1
  9165                           ;ModbusRtu.c: 1360: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
  9166  001D70  C107  F04A         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
  9167  001D74  6A4B               	clrf	ModbusProcess_FC100@newTime+1,c
  9168                           
  9169                           ; BSR set to: 1
  9170                           ;ModbusRtu.c: 1361: time_t newRawTime = mktime(&newTime);
  9171  001D76  0E4A               	movlw	ModbusProcess_FC100@newTime& (0+255)
  9172  001D78  EC2C  F003         	call	_mktime
  9173  001D7C  C02E  F045         	movff	?_mktime,ModbusProcess_FC100@newRawTime
  9174  001D80  C02F  F046         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
  9175  001D84  C030  F047         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
  9176  001D88  C031  F048         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
  9177                           
  9178                           ;ModbusRtu.c: 1362: SetTime(&newRawTime);
  9179  001D8C  0E45               	movlw	ModbusProcess_FC100@newRawTime& (0+255)
  9180  001D8E  ECB3  F016         	call	_SetTime
  9181                           
  9182                           ;ModbusRtu.c: 1364: ((_deviceStatus) |= ((unsigned short)1 << (0x00)));
  9183  001D92  0100               	movlb	0	; () banked
  9184  001D94  81CA               	bsf	__deviceStatus& (0+255),0,b
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;ModbusRtu.c: 1365: ModbusSetExceptionStatusBit(0, 1);
  9188  001D96  0E01               	movlw	1
  9189  001D98  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9190  001D9A  0E00               	movlw	0
  9191  001D9C  EC66  F014         	call	_ModbusSetExceptionStatusBit
  9192                           
  9193                           ;ModbusRtu.c: 1366: break;
  9194  001DA0  D009               	goto	l6962
  9195  001DA2                     l6960:
  9196  001DA2  FFFF               	dw	65535	; assembler added errata NOP
  9197  001DA4  0100               	movlb	0	; () banked
  9198  001DA6  51D1               	movf	__lastCommand& (0+255),w,b
  9199                           
  9200                           ; Switch size 1, requested type "speed"
  9201                           ; Number of cases is 3, Range of values is 1 to 127
  9202                           ; switch strategies available:
  9203                           ; Name         Instructions Cycles
  9204                           ; simple_byte           10     6 (average)
  9205                           ;	Chosen strategy is simple_byte
  9206  001DA8  0A01               	xorlw	1	; case 1
  9207  001DAA  E0A5               	bz	l961
  9208  001DAC  0A11               	xorlw	17	; case 16
  9209  001DAE  E0BF               	bz	l6936
  9210  001DB0  0A6F               	xorlw	111	; case 127
  9211  001DB2  E09F               	bz	l959
  9212  001DB4                     l6962:
  9213  001DB4  FFFF               	dw	65535	; assembler added errata NOP
  9214                           
  9215                           ;ModbusRtu.c: 1368: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9216  001DB6  506F               	movf	__u8BufferSize,w,c
  9217  001DB8  0F02               	addlw	2
  9218  001DBA  6E49               	movwf	ModbusProcess_FC100@u8CopyBufferSize,c
  9219                           
  9220                           ;ModbusRtu.c: 1369: ModbusSendTxBuffer();
  9221  001DBC  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9222                           
  9223                           ;ModbusRtu.c: 1371: return u8CopyBufferSize;
  9224  001DC0  5049               	movf	ModbusProcess_FC100@u8CopyBufferSize,w,c
  9225  001DC2  0012               	return		;funcret
  9226  001DC4  FFFF               	dw	65535	; errata NOP
  9227  001DC6                     __end_of_ModbusProcess_FC100:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           postinc0	equ	0xFEE
  9237                           wreg	equ	0xFE8
  9238                           indf1	equ	0xFE7
  9239                           postinc1	equ	0xFE6
  9240                           postdec1	equ	0xFE5
  9241                           fsr1h	equ	0xFE2
  9242                           fsr1l	equ	0xFE1
  9243                           indf2	equ	0xFDF
  9244                           postinc2	equ	0xFDE
  9245                           postdec2	equ	0xFDD
  9246                           fsr2h	equ	0xFDA
  9247                           fsr2l	equ	0xFD9
  9248                           status	equ	0xFD8
  9249                           
  9250 ;; *************** function _mktime *****************
  9251 ;; Defined at:
  9252 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;  timeptr         1    wreg     PTR struct tm
  9255 ;;		 -> ModbusProcess_FC100@newTime(18), 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  timeptr         1   67[COMRAM] PTR struct tm
  9258 ;;		 -> ModbusProcess_FC100@newTime(18), 
  9259 ;;  tt              4   63[COMRAM] long 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  4   45[COMRAM] long 
  9262 ;; Registers used:
  9263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9264 ;; Tracked objects:
  9265 ;;		On entry : F/1
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9269 ;;      Params:         4       0       0       0       0       0       0
  9270 ;;      Locals:         5       0       0       0       0       0       0
  9271 ;;      Temps:         14       0       0       0       0       0       0
  9272 ;;      Totals:        23       0       0       0       0       0       0
  9273 ;;Total ram usage:       23 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    5
  9276 ;; This function calls:
  9277 ;;		_ymd_to_scalar
  9278 ;; This function is called by:
  9279 ;;		_ModbusProcess_FC100
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text46
  9284  000658                     __ptext46:
  9285                           	opt stack 0
  9286  000658                     _mktime:
  9287                           	opt stack 23
  9288                           
  9289                           ;incstack = 0
  9290  000658  FFFF               	dw	65535
  9291                           
  9292                           ;mktime@timeptr stored from wreg
  9293  00065A  6E44               	movwf	mktime@timeptr,c
  9294  00065C  5044               	movf	mktime@timeptr,w,c
  9295  00065E  6ED9               	movwf	fsr2l,c
  9296  000660  6ADA               	clrf	fsr2h,c
  9297  000662  0E0A               	movlw	10
  9298  000664  26D9               	addwf	fsr2l,f,c
  9299  000666  0E01               	movlw	1
  9300  000668  BEDB               	btfsc	plusw2,7,c
  9301  00066A  D012               	goto	l1419
  9302  00066C  50DB               	movf	plusw2,w,c
  9303  00066E  E103               	bnz	u5100
  9304  000670  0E46               	movlw	70
  9305  000672  5CDE               	subwf	postinc2,w,c
  9306  000674  E30D               	bnc	l1419
  9307  000676                     u5100:
  9308  000676  5044               	movf	mktime@timeptr,w,c
  9309  000678  6ED9               	movwf	fsr2l,c
  9310  00067A  6ADA               	clrf	fsr2h,c
  9311  00067C  0E0A               	movlw	10
  9312  00067E  26D9               	addwf	fsr2l,f,c
  9313  000680  0E01               	movlw	1
  9314  000682  BEDB               	btfsc	plusw2,7,c
  9315  000684  D00B               	goto	l6176
  9316  000686  50DB               	movf	plusw2,w,c
  9317  000688  E103               	bnz	u5110
  9318  00068A  0E8B               	movlw	139
  9319  00068C  5CDE               	subwf	postinc2,w,c
  9320  00068E  E306               	bnc	l6176
  9321  000690                     u5110:
  9322  000690                     l1419:
  9323  000690  FFFF               	dw	65535	; assembler added errata NOP
  9324  000692  6840               	setf	mktime@tt,c
  9325  000694  6841               	setf	mktime@tt+1,c
  9326  000696  6842               	setf	mktime@tt+2,c
  9327  000698  6843               	setf	mktime@tt+3,c
  9328  00069A  D15C               	goto	l6186
  9329  00069C                     l6176:
  9330  00069C  FFFF               	dw	65535	; assembler added errata NOP
  9331  00069E  5044               	movf	mktime@timeptr,w,c
  9332  0006A0  6ED9               	movwf	fsr2l,c
  9333  0006A2  6ADA               	clrf	fsr2h,c
  9334  0006A4  0E0A               	movlw	10
  9335  0006A6  26D9               	addwf	fsr2l,f,c
  9336  0006A8  CFDE F032          	movff	postinc2,??_mktime
  9337  0006AC  CFDD F033          	movff	postdec2,??_mktime+1
  9338  0006B0  0E6C               	movlw	108
  9339  0006B2  2432               	addwf	??_mktime,w,c
  9340  0006B4  6E1E               	movwf	ymd_to_scalar@yr,c
  9341  0006B6  0E07               	movlw	7
  9342  0006B8  2033               	addwfc	??_mktime+1,w,c
  9343  0006BA  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9344  0006BC  5044               	movf	mktime@timeptr,w,c
  9345  0006BE  6ED9               	movwf	fsr2l,c
  9346  0006C0  6ADA               	clrf	fsr2h,c
  9347  0006C2  0E08               	movlw	8
  9348  0006C4  26D9               	addwf	fsr2l,f,c
  9349  0006C6  CFDE F034          	movff	postinc2,??_mktime+2
  9350  0006CA  CFDD F035          	movff	postdec2,??_mktime+3
  9351  0006CE  2834               	incf	??_mktime+2,w,c
  9352  0006D0  6E20               	movwf	ymd_to_scalar@mo,c
  9353  0006D2  0E00               	movlw	0
  9354  0006D4  2035               	addwfc	??_mktime+3,w,c
  9355  0006D6  6E21               	movwf	ymd_to_scalar@mo+1,c
  9356  0006D8  5044               	movf	mktime@timeptr,w,c
  9357  0006DA  6ED9               	movwf	fsr2l,c
  9358  0006DC  6ADA               	clrf	fsr2h,c
  9359  0006DE  0E06               	movlw	6
  9360  0006E0  26D9               	addwf	fsr2l,f,c
  9361  0006E2  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  9362  0006E6  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  9363  0006EA  EC78  F011         	call	_ymd_to_scalar	;wreg free
  9364  0006EE  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  9365  0006F2  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  9366  0006F6  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  9367  0006FA  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  9368  0006FE  0E07               	movlw	7
  9369  000700  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9370  000702  0EB2               	movlw	178
  9371  000704  6E1E               	movwf	ymd_to_scalar@yr,c
  9372  000706  6A21               	clrf	ymd_to_scalar@mo+1,c
  9373  000708  0E01               	movlw	1
  9374  00070A  6E20               	movwf	ymd_to_scalar@mo,c
  9375  00070C  6A23               	clrf	ymd_to_scalar@day+1,c
  9376  00070E  6E22               	movwf	ymd_to_scalar@day,c
  9377  000710  EC78  F011         	call	_ymd_to_scalar	;wreg free
  9378  000714  501E               	movf	?_ymd_to_scalar,w,c
  9379  000716  5E40               	subwf	mktime@tt,f,c
  9380  000718  501F               	movf	?_ymd_to_scalar+1,w,c
  9381  00071A  5A41               	subwfb	mktime@tt+1,f,c
  9382  00071C  5020               	movf	?_ymd_to_scalar+2,w,c
  9383  00071E  5A42               	subwfb	mktime@tt+2,f,c
  9384  000720  5021               	movf	?_ymd_to_scalar+3,w,c
  9385  000722  5A43               	subwfb	mktime@tt+3,f,c
  9386  000724  5044               	movf	mktime@timeptr,w,c
  9387  000726  6ED9               	movwf	fsr2l,c
  9388  000728  6ADA               	clrf	fsr2h,c
  9389  00072A  0E04               	movlw	4
  9390  00072C  26D9               	addwf	fsr2l,f,c
  9391  00072E  CFDE F032          	movff	postinc2,??_mktime
  9392  000732  CFDD F033          	movff	postdec2,??_mktime+1
  9393  000736  C032  F034         	movff	??_mktime,??_mktime+2
  9394  00073A  C033  F035         	movff	??_mktime+1,??_mktime+3
  9395  00073E  0E00               	movlw	0
  9396  000740  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9397  000742  0EFF               	movlw	255
  9398  000744  6E36               	movwf	(??_mktime+4)& (0+255),c
  9399  000746  6E37               	movwf	(??_mktime+5)& (0+255),c
  9400  000748  C040  F038         	movff	mktime@tt,??_mktime+6
  9401  00074C  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9402  000750  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9403  000754  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9404  000758  0E18               	movlw	24
  9405  00075A  0238               	mulwf	(??_mktime+6)& (0+255),c
  9406  00075C  CFF3 F03C          	movff	prodl,??_mktime+10
  9407  000760  CFF4 F03D          	movff	prodh,??_mktime+11
  9408  000764  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9409  000766  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9410  000768  0239               	mulwf	(??_mktime+7)& (0+255),c
  9411  00076A  50F3               	movf	prodl,w,c
  9412  00076C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9413  00076E  50F4               	movf	prodh,w,c
  9414  000770  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9415  000772  0E00               	movlw	0
  9416  000774  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9417  000776  0238               	mulwf	(??_mktime+6)& (0+255),c
  9418  000778  50F3               	movf	prodl,w,c
  9419  00077A  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9420  00077C  50F4               	movf	prodh,w,c
  9421  00077E  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9422  000780  0E00               	movlw	0
  9423  000782  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9424  000784  0E18               	movlw	24
  9425  000786  023A               	mulwf	(??_mktime+8)& (0+255),c
  9426  000788  50F3               	movf	prodl,w,c
  9427  00078A  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9428  00078C  50F4               	movf	prodh,w,c
  9429  00078E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9430  000790  0E00               	movlw	0
  9431  000792  0239               	mulwf	(??_mktime+7)& (0+255),c
  9432  000794  50F3               	movf	prodl,w,c
  9433  000796  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9434  000798  50F4               	movf	prodh,w,c
  9435  00079A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9436  00079C  0E00               	movlw	0
  9437  00079E  0238               	mulwf	(??_mktime+6)& (0+255),c
  9438  0007A0  50F3               	movf	prodl,w,c
  9439  0007A2  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9440  0007A4  50F4               	movf	prodh,w,c
  9441  0007A6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9442  0007A8  0E18               	movlw	24
  9443  0007AA  023B               	mulwf	(??_mktime+9)& (0+255),c
  9444  0007AC  50F3               	movf	prodl,w,c
  9445  0007AE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9446  0007B0  0E00               	movlw	0
  9447  0007B2  023A               	mulwf	(??_mktime+8)& (0+255),c
  9448  0007B4  50F3               	movf	prodl,w,c
  9449  0007B6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9450  0007B8  0E00               	movlw	0
  9451  0007BA  0239               	mulwf	(??_mktime+7)& (0+255),c
  9452  0007BC  50F3               	movf	prodl,w,c
  9453  0007BE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9454  0007C0  0E00               	movlw	0
  9455  0007C2  0238               	mulwf	(??_mktime+6)& (0+255),c
  9456  0007C4  50F3               	movf	prodl,w,c
  9457  0007C6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9458  0007C8  5034               	movf	??_mktime+2,w,c
  9459  0007CA  243C               	addwf	??_mktime+10,w,c
  9460  0007CC  6E40               	movwf	mktime@tt,c
  9461  0007CE  5035               	movf	??_mktime+3,w,c
  9462  0007D0  203D               	addwfc	??_mktime+11,w,c
  9463  0007D2  6E41               	movwf	mktime@tt+1,c
  9464  0007D4  5036               	movf	??_mktime+4,w,c
  9465  0007D6  203E               	addwfc	??_mktime+12,w,c
  9466  0007D8  6E42               	movwf	mktime@tt+2,c
  9467  0007DA  5037               	movf	??_mktime+5,w,c
  9468  0007DC  203F               	addwfc	??_mktime+13,w,c
  9469  0007DE  6E43               	movwf	mktime@tt+3,c
  9470  0007E0  5044               	movf	mktime@timeptr,w,c
  9471  0007E2  6ED9               	movwf	fsr2l,c
  9472  0007E4  6ADA               	clrf	fsr2h,c
  9473  0007E6  0E02               	movlw	2
  9474  0007E8  26D9               	addwf	fsr2l,f,c
  9475  0007EA  CFDE F032          	movff	postinc2,??_mktime
  9476  0007EE  CFDD F033          	movff	postdec2,??_mktime+1
  9477  0007F2  C032  F034         	movff	??_mktime,??_mktime+2
  9478  0007F6  C033  F035         	movff	??_mktime+1,??_mktime+3
  9479  0007FA  0E00               	movlw	0
  9480  0007FC  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9481  0007FE  0EFF               	movlw	255
  9482  000800  6E36               	movwf	(??_mktime+4)& (0+255),c
  9483  000802  6E37               	movwf	(??_mktime+5)& (0+255),c
  9484  000804  C040  F038         	movff	mktime@tt,??_mktime+6
  9485  000808  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9486  00080C  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9487  000810  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9488  000814  0E3C               	movlw	60
  9489  000816  0238               	mulwf	(??_mktime+6)& (0+255),c
  9490  000818  CFF3 F03C          	movff	prodl,??_mktime+10
  9491  00081C  CFF4 F03D          	movff	prodh,??_mktime+11
  9492  000820  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9493  000822  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9494  000824  0239               	mulwf	(??_mktime+7)& (0+255),c
  9495  000826  50F3               	movf	prodl,w,c
  9496  000828  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9497  00082A  50F4               	movf	prodh,w,c
  9498  00082C  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9499  00082E  0E00               	movlw	0
  9500  000830  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9501  000832  0238               	mulwf	(??_mktime+6)& (0+255),c
  9502  000834  50F3               	movf	prodl,w,c
  9503  000836  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9504  000838  50F4               	movf	prodh,w,c
  9505  00083A  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9506  00083C  0E00               	movlw	0
  9507  00083E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9508  000840  0E3C               	movlw	60
  9509  000842  023A               	mulwf	(??_mktime+8)& (0+255),c
  9510  000844  50F3               	movf	prodl,w,c
  9511  000846  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9512  000848  50F4               	movf	prodh,w,c
  9513  00084A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9514  00084C  0E00               	movlw	0
  9515  00084E  0239               	mulwf	(??_mktime+7)& (0+255),c
  9516  000850  50F3               	movf	prodl,w,c
  9517  000852  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9518  000854  50F4               	movf	prodh,w,c
  9519  000856  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9520  000858  0E00               	movlw	0
  9521  00085A  0238               	mulwf	(??_mktime+6)& (0+255),c
  9522  00085C  50F3               	movf	prodl,w,c
  9523  00085E  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9524  000860  50F4               	movf	prodh,w,c
  9525  000862  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9526  000864  0E3C               	movlw	60
  9527  000866  023B               	mulwf	(??_mktime+9)& (0+255),c
  9528  000868  50F3               	movf	prodl,w,c
  9529  00086A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9530  00086C  0E00               	movlw	0
  9531  00086E  023A               	mulwf	(??_mktime+8)& (0+255),c
  9532  000870  50F3               	movf	prodl,w,c
  9533  000872  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9534  000874  0E00               	movlw	0
  9535  000876  0239               	mulwf	(??_mktime+7)& (0+255),c
  9536  000878  50F3               	movf	prodl,w,c
  9537  00087A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9538  00087C  0E00               	movlw	0
  9539  00087E  0238               	mulwf	(??_mktime+6)& (0+255),c
  9540  000880  50F3               	movf	prodl,w,c
  9541  000882  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9542  000884  5034               	movf	??_mktime+2,w,c
  9543  000886  243C               	addwf	??_mktime+10,w,c
  9544  000888  6E40               	movwf	mktime@tt,c
  9545  00088A  5035               	movf	??_mktime+3,w,c
  9546  00088C  203D               	addwfc	??_mktime+11,w,c
  9547  00088E  6E41               	movwf	mktime@tt+1,c
  9548  000890  5036               	movf	??_mktime+4,w,c
  9549  000892  203E               	addwfc	??_mktime+12,w,c
  9550  000894  6E42               	movwf	mktime@tt+2,c
  9551  000896  5037               	movf	??_mktime+5,w,c
  9552  000898  203F               	addwfc	??_mktime+13,w,c
  9553  00089A  6E43               	movwf	mktime@tt+3,c
  9554  00089C  5044               	movf	mktime@timeptr,w,c
  9555  00089E  6ED9               	movwf	fsr2l,c
  9556  0008A0  6ADA               	clrf	fsr2h,c
  9557  0008A2  CFDE F032          	movff	postinc2,??_mktime
  9558  0008A6  CFDD F033          	movff	postdec2,??_mktime+1
  9559  0008AA  C032  F034         	movff	??_mktime,??_mktime+2
  9560  0008AE  C033  F035         	movff	??_mktime+1,??_mktime+3
  9561  0008B2  0E00               	movlw	0
  9562  0008B4  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9563  0008B6  0EFF               	movlw	255
  9564  0008B8  6E36               	movwf	(??_mktime+4)& (0+255),c
  9565  0008BA  6E37               	movwf	(??_mktime+5)& (0+255),c
  9566  0008BC  C040  F038         	movff	mktime@tt,??_mktime+6
  9567  0008C0  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9568  0008C4  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9569  0008C8  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9570  0008CC  0E3C               	movlw	60
  9571  0008CE  0238               	mulwf	(??_mktime+6)& (0+255),c
  9572  0008D0  CFF3 F03C          	movff	prodl,??_mktime+10
  9573  0008D4  CFF4 F03D          	movff	prodh,??_mktime+11
  9574  0008D8  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9575  0008DA  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9576  0008DC  0239               	mulwf	(??_mktime+7)& (0+255),c
  9577  0008DE  50F3               	movf	prodl,w,c
  9578  0008E0  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9579  0008E2  50F4               	movf	prodh,w,c
  9580  0008E4  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9581  0008E6  0E00               	movlw	0
  9582  0008E8  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9583  0008EA  0238               	mulwf	(??_mktime+6)& (0+255),c
  9584  0008EC  50F3               	movf	prodl,w,c
  9585  0008EE  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9586  0008F0  50F4               	movf	prodh,w,c
  9587  0008F2  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9588  0008F4  0E00               	movlw	0
  9589  0008F6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9590  0008F8  0E3C               	movlw	60
  9591  0008FA  023A               	mulwf	(??_mktime+8)& (0+255),c
  9592  0008FC  50F3               	movf	prodl,w,c
  9593  0008FE  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9594  000900  50F4               	movf	prodh,w,c
  9595  000902  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9596  000904  0E00               	movlw	0
  9597  000906  0239               	mulwf	(??_mktime+7)& (0+255),c
  9598  000908  50F3               	movf	prodl,w,c
  9599  00090A  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9600  00090C  50F4               	movf	prodh,w,c
  9601  00090E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9602  000910  0E00               	movlw	0
  9603  000912  0238               	mulwf	(??_mktime+6)& (0+255),c
  9604  000914  50F3               	movf	prodl,w,c
  9605  000916  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9606  000918  50F4               	movf	prodh,w,c
  9607  00091A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9608  00091C  0E3C               	movlw	60
  9609  00091E  023B               	mulwf	(??_mktime+9)& (0+255),c
  9610  000920  50F3               	movf	prodl,w,c
  9611  000922  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9612  000924  0E00               	movlw	0
  9613  000926  023A               	mulwf	(??_mktime+8)& (0+255),c
  9614  000928  50F3               	movf	prodl,w,c
  9615  00092A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9616  00092C  0E00               	movlw	0
  9617  00092E  0239               	mulwf	(??_mktime+7)& (0+255),c
  9618  000930  50F3               	movf	prodl,w,c
  9619  000932  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9620  000934  0E00               	movlw	0
  9621  000936  0238               	mulwf	(??_mktime+6)& (0+255),c
  9622  000938  50F3               	movf	prodl,w,c
  9623  00093A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9624  00093C  5034               	movf	??_mktime+2,w,c
  9625  00093E  243C               	addwf	??_mktime+10,w,c
  9626  000940  6E40               	movwf	mktime@tt,c
  9627  000942  5035               	movf	??_mktime+3,w,c
  9628  000944  203D               	addwfc	??_mktime+11,w,c
  9629  000946  6E41               	movwf	mktime@tt+1,c
  9630  000948  5036               	movf	??_mktime+4,w,c
  9631  00094A  203E               	addwfc	??_mktime+12,w,c
  9632  00094C  6E42               	movwf	mktime@tt+2,c
  9633  00094E  5037               	movf	??_mktime+5,w,c
  9634  000950  203F               	addwfc	??_mktime+13,w,c
  9635  000952  6E43               	movwf	mktime@tt+3,c
  9636  000954                     l6186:
  9637  000954  FFFF               	dw	65535	; assembler added errata NOP
  9638  000956  C040  F02E         	movff	mktime@tt,?_mktime
  9639  00095A  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  9640  00095E  C042  F030         	movff	mktime@tt+2,?_mktime+2
  9641  000962  C043  F031         	movff	mktime@tt+3,?_mktime+3
  9642  000966  0012               	return		;funcret
  9643  000968  FFFF               	dw	65535	; errata NOP
  9644  00096A                     __end_of_mktime:
  9645                           	opt stack 0
  9646                           tblptru	equ	0xFF8
  9647                           tblptrh	equ	0xFF7
  9648                           tblptrl	equ	0xFF6
  9649                           tablat	equ	0xFF5
  9650                           prodh	equ	0xFF4
  9651                           prodl	equ	0xFF3
  9652                           intcon	equ	0xFF2
  9653                           postinc0	equ	0xFEE
  9654                           wreg	equ	0xFE8
  9655                           indf1	equ	0xFE7
  9656                           postinc1	equ	0xFE6
  9657                           postdec1	equ	0xFE5
  9658                           fsr1h	equ	0xFE2
  9659                           fsr1l	equ	0xFE1
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           postdec2	equ	0xFDD
  9663                           plusw2	equ	0xFDB
  9664                           fsr2h	equ	0xFDA
  9665                           fsr2l	equ	0xFD9
  9666                           status	equ	0xFD8
  9667                           
  9668 ;; *************** function _ymd_to_scalar *****************
  9669 ;; Defined at:
  9670 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  yr              2   29[COMRAM] unsigned int 
  9673 ;;  mo              2   31[COMRAM] unsigned int 
  9674 ;;  day             2   33[COMRAM] unsigned int 
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;  scalar          4   41[COMRAM] long 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  4   29[COMRAM] long 
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/1
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9686 ;;      Params:         6       0       0       0       0       0       0
  9687 ;;      Locals:         6       0       0       0       0       0       0
  9688 ;;      Temps:          4       0       0       0       0       0       0
  9689 ;;      Totals:        16       0       0       0       0       0       0
  9690 ;;Total ram usage:       16 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    4
  9693 ;; This function calls:
  9694 ;;		_isleap
  9695 ;;		_months_to_days
  9696 ;;		_years_to_days
  9697 ;; This function is called by:
  9698 ;;		_mktime
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           	psect	text47
  9703  0022F0                     __ptext47:
  9704                           	opt stack 0
  9705  0022F0                     _ymd_to_scalar:
  9706                           	opt stack 23
  9707                           
  9708                           ;incstack = 0
  9709  0022F0  FFFF               	dw	65535
  9710  0022F2  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  9711  0022F6  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  9712  0022FA  EC1C  F015         	call	_months_to_days	;wreg free
  9713  0022FE  5022               	movf	ymd_to_scalar@day,w,c
  9714  002300  260E               	addwf	?_months_to_days,f,c
  9715  002302  5023               	movf	ymd_to_scalar@day+1,w,c
  9716  002304  220F               	addwfc	?_months_to_days+1,f,c
  9717  002306  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  9718  00230A  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  9719  00230E  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  9720  002310  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  9721  002312  5021               	movf	ymd_to_scalar@mo+1,w,c
  9722  002314  E103               	bnz	u4960
  9723  002316  0E03               	movlw	3
  9724  002318  5C20               	subwf	ymd_to_scalar@mo,w,c
  9725  00231A  E321               	bnc	l5978
  9726  00231C                     u4960:
  9727  00231C  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  9728  002320  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  9729  002324  EC40  F014         	call	_isleap	;wreg free
  9730  002328  500C               	movf	?_isleap,w,c
  9731  00232A  100D               	iorwf	?_isleap+1,w,c
  9732  00232C  E103               	bnz	l5974
  9733  00232E  6A29               	clrf	_ymd_to_scalar$2267+1,c
  9734  002330  0E02               	movlw	2
  9735  002332  D002               	goto	L11
  9736  002334                     l5974:
  9737  002334  6A29               	clrf	_ymd_to_scalar$2267+1,c
  9738  002336  0E01               	movlw	1
  9739  002338                     L11:
  9740  002338  FFFF               	dw	65535	; assembler added errata NOP
  9741  00233A  6E28               	movwf	_ymd_to_scalar$2267,c
  9742  00233C  C028  F024         	movff	_ymd_to_scalar$2267,??_ymd_to_scalar
  9743  002340  C029  F025         	movff	_ymd_to_scalar$2267+1,??_ymd_to_scalar+1
  9744  002344  0E00               	movlw	0
  9745  002346  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  9746  002348  0EFF               	movlw	255
  9747  00234A  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  9748  00234C  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  9749  00234E  5024               	movf	??_ymd_to_scalar,w,c
  9750  002350  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  9751  002352  5025               	movf	??_ymd_to_scalar+1,w,c
  9752  002354  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  9753  002356  5026               	movf	??_ymd_to_scalar+2,w,c
  9754  002358  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  9755  00235A  5027               	movf	??_ymd_to_scalar+3,w,c
  9756  00235C  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  9757  00235E                     l5978:
  9758  00235E  061E               	decf	ymd_to_scalar@yr,f,c
  9759  002360  A0D8               	btfss	status,0,c
  9760  002362  061F               	decf	ymd_to_scalar@yr+1,f,c
  9761  002364  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  9762  002368  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  9763  00236C  EC06  F00D         	call	_years_to_days	;wreg free
  9764  002370  500E               	movf	?_years_to_days,w,c
  9765  002372  262A               	addwf	ymd_to_scalar@scalar,f,c
  9766  002374  500F               	movf	?_years_to_days+1,w,c
  9767  002376  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  9768  002378  5010               	movf	?_years_to_days+2,w,c
  9769  00237A  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  9770  00237C  5011               	movf	?_years_to_days+3,w,c
  9771  00237E  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  9772  002380  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  9773  002384  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  9774  002388  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  9775  00238C  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  9776  002390  0012               	return		;funcret
  9777  002392  FFFF               	dw	65535	; errata NOP
  9778  002394                     __end_of_ymd_to_scalar:
  9779                           	opt stack 0
  9780                           tblptru	equ	0xFF8
  9781                           tblptrh	equ	0xFF7
  9782                           tblptrl	equ	0xFF6
  9783                           tablat	equ	0xFF5
  9784                           prodh	equ	0xFF4
  9785                           prodl	equ	0xFF3
  9786                           intcon	equ	0xFF2
  9787                           postinc0	equ	0xFEE
  9788                           wreg	equ	0xFE8
  9789                           indf1	equ	0xFE7
  9790                           postinc1	equ	0xFE6
  9791                           postdec1	equ	0xFE5
  9792                           fsr1h	equ	0xFE2
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           plusw2	equ	0xFDB
  9798                           fsr2h	equ	0xFDA
  9799                           fsr2l	equ	0xFD9
  9800                           status	equ	0xFD8
  9801                           
  9802 ;; *************** function _years_to_days *****************
  9803 ;; Defined at:
  9804 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  yr              2   13[COMRAM] unsigned int 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  ret             4   25[COMRAM] long 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  4   13[COMRAM] long 
  9811 ;; Registers used:
  9812 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/1
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9818 ;;      Params:         4       0       0       0       0       0       0
  9819 ;;      Locals:         4       0       0       0       0       0       0
  9820 ;;      Temps:          8       0       0       0       0       0       0
  9821 ;;      Totals:        16       0       0       0       0       0       0
  9822 ;;Total ram usage:       16 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    3
  9825 ;; This function calls:
  9826 ;;		___lwdiv
  9827 ;; This function is called by:
  9828 ;;		_ymd_to_scalar
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           	psect	text48
  9833  001A0C                     __ptext48:
  9834                           	opt stack 0
  9835  001A0C                     _years_to_days:
  9836                           	opt stack 23
  9837                           
  9838                           ;incstack = 0
  9839  001A0C  FFFF               	dw	65535
  9840  001A0E  500E               	movf	years_to_days@yr,w,c
  9841  001A10  6E12               	movwf	??_years_to_days& (0+255),c
  9842  001A12  500F               	movf	years_to_days@yr+1,w,c
  9843  001A14  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  9844  001A16  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  9845  001A18  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  9846  001A1A  0E6D               	movlw	109
  9847  001A1C  0212               	mulwf	??_years_to_days& (0+255),c
  9848  001A1E  CFF3 F016          	movff	prodl,??_years_to_days+4
  9849  001A22  CFF4 F017          	movff	prodh,??_years_to_days+5
  9850  001A26  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  9851  001A28  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  9852  001A2A  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9853  001A2C  50F3               	movf	prodl,w,c
  9854  001A2E  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  9855  001A30  50F4               	movf	prodh,w,c
  9856  001A32  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  9857  001A34  0E00               	movlw	0
  9858  001A36  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9859  001A38  0E01               	movlw	1
  9860  001A3A  0212               	mulwf	??_years_to_days& (0+255),c
  9861  001A3C  50F3               	movf	prodl,w,c
  9862  001A3E  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  9863  001A40  50F4               	movf	prodh,w,c
  9864  001A42  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  9865  001A44  0E00               	movlw	0
  9866  001A46  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9867  001A48  0E6D               	movlw	109
  9868  001A4A  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  9869  001A4C  50F3               	movf	prodl,w,c
  9870  001A4E  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9871  001A50  50F4               	movf	prodh,w,c
  9872  001A52  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9873  001A54  0E01               	movlw	1
  9874  001A56  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9875  001A58  50F3               	movf	prodl,w,c
  9876  001A5A  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9877  001A5C  50F4               	movf	prodh,w,c
  9878  001A5E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9879  001A60  0E00               	movlw	0
  9880  001A62  0212               	mulwf	??_years_to_days& (0+255),c
  9881  001A64  50F3               	movf	prodl,w,c
  9882  001A66  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9883  001A68  50F4               	movf	prodh,w,c
  9884  001A6A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9885  001A6C  0E6D               	movlw	109
  9886  001A6E  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  9887  001A70  50F3               	movf	prodl,w,c
  9888  001A72  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9889  001A74  0E01               	movlw	1
  9890  001A76  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  9891  001A78  50F3               	movf	prodl,w,c
  9892  001A7A  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9893  001A7C  0E00               	movlw	0
  9894  001A7E  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9895  001A80  50F3               	movf	prodl,w,c
  9896  001A82  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9897  001A84  0E00               	movlw	0
  9898  001A86  0212               	mulwf	??_years_to_days& (0+255),c
  9899  001A88  50F3               	movf	prodl,w,c
  9900  001A8A  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9901  001A8C  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  9902  001A90  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  9903  001A94  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  9904  001A98  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  9905  001A9C  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  9906  001AA0  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  9907  001AA4  6A0A               	clrf	___lwdiv@divisor+1,c
  9908  001AA6  0E64               	movlw	100
  9909  001AA8  6E09               	movwf	___lwdiv@divisor,c
  9910  001AAA  EC16  F014         	call	___lwdiv	;wreg free
  9911  001AAE  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  9912  001AB2  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  9913  001AB6  90D8               	bcf	status,0,c
  9914  001AB8  3213               	rrcf	??_years_to_days+1,f,c
  9915  001ABA  3212               	rrcf	??_years_to_days,f,c
  9916  001ABC  90D8               	bcf	status,0,c
  9917  001ABE  3213               	rrcf	??_years_to_days+1,f,c
  9918  001AC0  3212               	rrcf	??_years_to_days,f,c
  9919  001AC2  5007               	movf	?___lwdiv,w,c
  9920  001AC4  5E12               	subwf	??_years_to_days,f,c
  9921  001AC6  5008               	movf	?___lwdiv+1,w,c
  9922  001AC8  5A13               	subwfb	??_years_to_days+1,f,c
  9923  001ACA  5012               	movf	??_years_to_days,w,c
  9924  001ACC  261A               	addwf	years_to_days@ret,f,c
  9925  001ACE  5013               	movf	??_years_to_days+1,w,c
  9926  001AD0  221B               	addwfc	years_to_days@ret+1,f,c
  9927  001AD2  0E00               	movlw	0
  9928  001AD4  221C               	addwfc	years_to_days@ret+2,f,c
  9929  001AD6  221D               	addwfc	years_to_days@ret+3,f,c
  9930  001AD8  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  9931  001ADC  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  9932  001AE0  0E01               	movlw	1
  9933  001AE2  6E0A               	movwf	___lwdiv@divisor+1,c
  9934  001AE4  0E90               	movlw	144
  9935  001AE6  6E09               	movwf	___lwdiv@divisor,c
  9936  001AE8  EC16  F014         	call	___lwdiv	;wreg free
  9937  001AEC  5007               	movf	?___lwdiv,w,c
  9938  001AEE  261A               	addwf	years_to_days@ret,f,c
  9939  001AF0  5008               	movf	?___lwdiv+1,w,c
  9940  001AF2  221B               	addwfc	years_to_days@ret+1,f,c
  9941  001AF4  0E00               	movlw	0
  9942  001AF6  221C               	addwfc	years_to_days@ret+2,f,c
  9943  001AF8  221D               	addwfc	years_to_days@ret+3,f,c
  9944  001AFA  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  9945  001AFE  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  9946  001B02  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  9947  001B06  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  9948  001B0A  0C00               	retlw	0	;funcret
  9949  001B0C  FFFF               	dw	65535	; errata NOP
  9950  001B0E                     __end_of_years_to_days:
  9951                           	opt stack 0
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           postinc0	equ	0xFEE
  9960                           wreg	equ	0xFE8
  9961                           indf1	equ	0xFE7
  9962                           postinc1	equ	0xFE6
  9963                           postdec1	equ	0xFE5
  9964                           fsr1h	equ	0xFE2
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           plusw2	equ	0xFDB
  9970                           fsr2h	equ	0xFDA
  9971                           fsr2l	equ	0xFD9
  9972                           status	equ	0xFD8
  9973                           
  9974 ;; *************** function _months_to_days *****************
  9975 ;; Defined at:
  9976 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  month           2   13[COMRAM] unsigned int 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;		None
  9981 ;; Return value:  Size  Location     Type
  9982 ;;                  2   13[COMRAM] unsigned int 
  9983 ;; Registers used:
  9984 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/1
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9990 ;;      Params:         2       0       0       0       0       0       0
  9991 ;;      Locals:         0       0       0       0       0       0       0
  9992 ;;      Temps:          4       0       0       0       0       0       0
  9993 ;;      Totals:         6       0       0       0       0       0       0
  9994 ;;Total ram usage:        6 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    3
  9997 ;; This function calls:
  9998 ;;		___lwdiv
  9999 ;; This function is called by:
 10000 ;;		_ymd_to_scalar
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text49
 10005  002A38                     __ptext49:
 10006                           	opt stack 0
 10007  002A38                     _months_to_days:
 10008                           	opt stack 23
 10009                           
 10010                           ;incstack = 0
 10011  002A38  FFFF               	dw	65535
 10012  002A3A  0EF1               	movlw	241
 10013  002A3C  6E10               	movwf	??_months_to_days& (0+255),c
 10014  002A3E  0E0B               	movlw	11
 10015  002A40  6E11               	movwf	(??_months_to_days+1)& (0+255),c
 10016  002A42  5010               	movf	??_months_to_days& (0+255),w,c
 10017  002A44  020E               	mulwf	months_to_days@month,c
 10018  002A46  CFF3 F012          	movff	prodl,??_months_to_days+2
 10019  002A4A  CFF4 F013          	movff	prodh,??_months_to_days+3
 10020  002A4E  020F               	mulwf	months_to_days@month+1,c
 10021  002A50  50F3               	movf	prodl,w,c
 10022  002A52  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10023  002A54  5011               	movf	(??_months_to_days+1)& (0+255),w,c
 10024  002A56  020E               	mulwf	months_to_days@month,c
 10025  002A58  50F3               	movf	prodl,w,c
 10026  002A5A  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10027  002A5C  0E41               	movlw	65
 10028  002A5E  2412               	addwf	??_months_to_days+2,w,c
 10029  002A60  6E07               	movwf	___lwdiv@dividend,c
 10030  002A62  0EF4               	movlw	244
 10031  002A64  2013               	addwfc	??_months_to_days+3,w,c
 10032  002A66  6E08               	movwf	___lwdiv@dividend+1,c
 10033  002A68  6A0A               	clrf	___lwdiv@divisor+1,c
 10034  002A6A  0E64               	movlw	100
 10035  002A6C  6E09               	movwf	___lwdiv@divisor,c
 10036  002A6E  EC16  F014         	call	___lwdiv	;wreg free
 10037  002A72  C007  F00E         	movff	?___lwdiv,?_months_to_days
 10038  002A76  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
 10039  002A7A  0012               	return		;funcret
 10040  002A7C  FFFF               	dw	65535	; errata NOP
 10041  002A7E                     __end_of_months_to_days:
 10042                           	opt stack 0
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           indf1	equ	0xFE7
 10053                           postinc1	equ	0xFE6
 10054                           postdec1	equ	0xFE5
 10055                           fsr1h	equ	0xFE2
 10056                           fsr1l	equ	0xFE1
 10057                           indf2	equ	0xFDF
 10058                           postinc2	equ	0xFDE
 10059                           postdec2	equ	0xFDD
 10060                           plusw2	equ	0xFDB
 10061                           fsr2h	equ	0xFDA
 10062                           fsr2l	equ	0xFD9
 10063                           status	equ	0xFD8
 10064                           
 10065 ;; *************** function ___lwdiv *****************
 10066 ;; Defined at:
 10067 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;  dividend        2    6[COMRAM] unsigned int 
 10070 ;;  divisor         2    8[COMRAM] unsigned int 
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;  quotient        2   11[COMRAM] unsigned int 
 10073 ;;  counter         1   10[COMRAM] unsigned char 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  2    6[COMRAM] unsigned int 
 10076 ;; Registers used:
 10077 ;;		wreg, status,2, status,0
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/1
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10083 ;;      Params:         4       0       0       0       0       0       0
 10084 ;;      Locals:         3       0       0       0       0       0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0
 10086 ;;      Totals:         7       0       0       0       0       0       0
 10087 ;;Total ram usage:        7 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    2
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_months_to_days
 10094 ;;		_years_to_days
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text50
 10099  00282C                     __ptext50:
 10100                           	opt stack 0
 10101  00282C                     ___lwdiv:
 10102                           	opt stack 23
 10103                           
 10104                           ;incstack = 0
 10105  00282C  FFFF               	dw	65535
 10106  00282E  6A0C               	clrf	___lwdiv@quotient,c
 10107  002830  6A0D               	clrf	___lwdiv@quotient+1,c
 10108  002832  5009               	movf	___lwdiv@divisor,w,c
 10109  002834  100A               	iorwf	___lwdiv@divisor+1,w,c
 10110  002836  E01E               	bz	l1373
 10111  002838  0E01               	movlw	1
 10112  00283A  6E0B               	movwf	___lwdiv@counter,c
 10113  00283C  D005               	goto	l5632
 10114  00283E                     l5630:
 10115  00283E  FFFF               	dw	65535	; assembler added errata NOP
 10116  002840  90D8               	bcf	status,0,c
 10117  002842  3609               	rlcf	___lwdiv@divisor,f,c
 10118  002844  360A               	rlcf	___lwdiv@divisor+1,f,c
 10119  002846  2A0B               	incf	___lwdiv@counter,f,c
 10120  002848                     l5632:
 10121  002848  FFFF               	dw	65535	; assembler added errata NOP
 10122  00284A  AE0A               	btfss	___lwdiv@divisor+1,7,c
 10123  00284C  D7F8               	goto	l5630
 10124  00284E                     l5634:
 10125  00284E  FFFF               	dw	65535	; assembler added errata NOP
 10126  002850  90D8               	bcf	status,0,c
 10127  002852  360C               	rlcf	___lwdiv@quotient,f,c
 10128  002854  360D               	rlcf	___lwdiv@quotient+1,f,c
 10129  002856  5009               	movf	___lwdiv@divisor,w,c
 10130  002858  5C07               	subwf	___lwdiv@dividend,w,c
 10131  00285A  500A               	movf	___lwdiv@divisor+1,w,c
 10132  00285C  5808               	subwfb	___lwdiv@dividend+1,w,c
 10133  00285E  E305               	bnc	l5642
 10134  002860  5009               	movf	___lwdiv@divisor,w,c
 10135  002862  5E07               	subwf	___lwdiv@dividend,f,c
 10136  002864  500A               	movf	___lwdiv@divisor+1,w,c
 10137  002866  5A08               	subwfb	___lwdiv@dividend+1,f,c
 10138  002868  800C               	bsf	___lwdiv@quotient,0,c
 10139  00286A                     l5642:
 10140  00286A  90D8               	bcf	status,0,c
 10141  00286C  320A               	rrcf	___lwdiv@divisor+1,f,c
 10142  00286E  3209               	rrcf	___lwdiv@divisor,f,c
 10143  002870  2E0B               	decfsz	___lwdiv@counter,f,c
 10144  002872  D7ED               	goto	l5634
 10145  002874                     l1373:
 10146  002874  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
 10147  002878  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10148  00287C  0012               	return		;funcret
 10149  00287E  FFFF               	dw	65535	; errata NOP
 10150  002880                     __end_of___lwdiv:
 10151                           	opt stack 0
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           prodh	equ	0xFF4
 10157                           prodl	equ	0xFF3
 10158                           intcon	equ	0xFF2
 10159                           postinc0	equ	0xFEE
 10160                           wreg	equ	0xFE8
 10161                           indf1	equ	0xFE7
 10162                           postinc1	equ	0xFE6
 10163                           postdec1	equ	0xFE5
 10164                           fsr1h	equ	0xFE2
 10165                           fsr1l	equ	0xFE1
 10166                           indf2	equ	0xFDF
 10167                           postinc2	equ	0xFDE
 10168                           postdec2	equ	0xFDD
 10169                           plusw2	equ	0xFDB
 10170                           fsr2h	equ	0xFDA
 10171                           fsr2l	equ	0xFD9
 10172                           status	equ	0xFD8
 10173                           
 10174 ;; *************** function _isleap *****************
 10175 ;; Defined at:
 10176 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  yr              2   11[COMRAM] unsigned int 
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  2   11[COMRAM] int 
 10183 ;; Registers used:
 10184 ;;		wreg, status,2, status,0, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/1
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10190 ;;      Params:         2       0       0       0       0       0       0
 10191 ;;      Locals:         1       0       0       0       0       0       0
 10192 ;;      Temps:          1       0       0       0       0       0       0
 10193 ;;      Totals:         4       0       0       0       0       0       0
 10194 ;;Total ram usage:        4 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    3
 10197 ;; This function calls:
 10198 ;;		___lwmod
 10199 ;; This function is called by:
 10200 ;;		_ymd_to_scalar
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           	psect	text51
 10205  002880                     __ptext51:
 10206                           	opt stack 0
 10207  002880                     _isleap:
 10208                           	opt stack 23
 10209                           
 10210                           ;incstack = 0
 10211  002880  FFFF               	dw	65535
 10212  002882  0E01               	movlw	1
 10213  002884  6E0F               	movwf	_isleap$2254,c
 10214  002886  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 10215  00288A  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 10216  00288E  6E0A               	movwf	___lwmod@divisor+1,c
 10217  002890  0E90               	movlw	144
 10218  002892  6E09               	movwf	___lwmod@divisor,c
 10219  002894  ECB2  F014         	call	___lwmod	;wreg free
 10220  002898  5007               	movf	?___lwmod,w,c
 10221  00289A  1008               	iorwf	?___lwmod+1,w,c
 10222  00289C  E012               	bz	l1399
 10223  00289E  C00C  F00E         	movff	isleap@yr,??_isleap
 10224  0028A2  0E03               	movlw	3
 10225  0028A4  160E               	andwf	??_isleap,f,c
 10226  0028A6  E10C               	bnz	l5612
 10227  0028A8  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 10228  0028AC  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 10229  0028B0  6A0A               	clrf	___lwmod@divisor+1,c
 10230  0028B2  0E64               	movlw	100
 10231  0028B4  6E09               	movwf	___lwmod@divisor,c
 10232  0028B6  ECB2  F014         	call	___lwmod	;wreg free
 10233  0028BA  5007               	movf	?___lwmod,w,c
 10234  0028BC  1008               	iorwf	?___lwmod+1,w,c
 10235  0028BE  E101               	bnz	l1399
 10236  0028C0                     l5612:
 10237  0028C0  6A0F               	clrf	_isleap$2254,c
 10238  0028C2                     l1399:
 10239  0028C2  C00F  F00C         	movff	_isleap$2254,?_isleap
 10240  0028C6  6A0D               	clrf	?_isleap+1,c
 10241  0028C8  0012               	return		;funcret
 10242  0028CA  FFFF               	dw	65535	; errata NOP
 10243  0028CC                     __end_of_isleap:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           postinc0	equ	0xFEE
 10253                           wreg	equ	0xFE8
 10254                           indf1	equ	0xFE7
 10255                           postinc1	equ	0xFE6
 10256                           postdec1	equ	0xFE5
 10257                           fsr1h	equ	0xFE2
 10258                           fsr1l	equ	0xFE1
 10259                           indf2	equ	0xFDF
 10260                           postinc2	equ	0xFDE
 10261                           postdec2	equ	0xFDD
 10262                           plusw2	equ	0xFDB
 10263                           fsr2h	equ	0xFDA
 10264                           fsr2l	equ	0xFD9
 10265                           status	equ	0xFD8
 10266                           
 10267 ;; *************** function ___lwmod *****************
 10268 ;; Defined at:
 10269 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;  dividend        2    6[COMRAM] unsigned int 
 10272 ;;  divisor         2    8[COMRAM] unsigned int 
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;  counter         1   10[COMRAM] unsigned char 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  2    6[COMRAM] unsigned int 
 10277 ;; Registers used:
 10278 ;;		wreg, status,2, status,0
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/1
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10284 ;;      Params:         4       0       0       0       0       0       0
 10285 ;;      Locals:         1       0       0       0       0       0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0
 10287 ;;      Totals:         5       0       0       0       0       0       0
 10288 ;;Total ram usage:        5 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    2
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_isleap
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text52
 10299  002964                     __ptext52:
 10300                           	opt stack 0
 10301  002964                     ___lwmod:
 10302                           	opt stack 23
 10303                           
 10304                           ;incstack = 0
 10305  002964  FFFF               	dw	65535
 10306  002966  5009               	movf	___lwmod@divisor,w,c
 10307  002968  100A               	iorwf	___lwmod@divisor+1,w,c
 10308  00296A  E01A               	bz	l1383
 10309  00296C  0E01               	movlw	1
 10310  00296E  6E0B               	movwf	___lwmod@counter,c
 10311  002970  D005               	goto	l5652
 10312  002972                     l5650:
 10313  002972  FFFF               	dw	65535	; assembler added errata NOP
 10314  002974  90D8               	bcf	status,0,c
 10315  002976  3609               	rlcf	___lwmod@divisor,f,c
 10316  002978  360A               	rlcf	___lwmod@divisor+1,f,c
 10317  00297A  2A0B               	incf	___lwmod@counter,f,c
 10318  00297C                     l5652:
 10319  00297C  FFFF               	dw	65535	; assembler added errata NOP
 10320  00297E  AE0A               	btfss	___lwmod@divisor+1,7,c
 10321  002980  D7F8               	goto	l5650
 10322  002982                     l5654:
 10323  002982  FFFF               	dw	65535	; assembler added errata NOP
 10324  002984  5009               	movf	___lwmod@divisor,w,c
 10325  002986  5C07               	subwf	___lwmod@dividend,w,c
 10326  002988  500A               	movf	___lwmod@divisor+1,w,c
 10327  00298A  5808               	subwfb	___lwmod@dividend+1,w,c
 10328  00298C  E304               	bnc	l5658
 10329  00298E  5009               	movf	___lwmod@divisor,w,c
 10330  002990  5E07               	subwf	___lwmod@dividend,f,c
 10331  002992  500A               	movf	___lwmod@divisor+1,w,c
 10332  002994  5A08               	subwfb	___lwmod@dividend+1,f,c
 10333  002996                     l5658:
 10334  002996  90D8               	bcf	status,0,c
 10335  002998  320A               	rrcf	___lwmod@divisor+1,f,c
 10336  00299A  3209               	rrcf	___lwmod@divisor,f,c
 10337  00299C  2E0B               	decfsz	___lwmod@counter,f,c
 10338  00299E  D7F1               	goto	l5654
 10339  0029A0                     l1383:
 10340  0029A0  C007  F007         	movff	___lwmod@dividend,?___lwmod
 10341  0029A4  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
 10342  0029A8  0012               	return		;funcret
 10343  0029AA  FFFF               	dw	65535	; errata NOP
 10344  0029AC                     __end_of___lwmod:
 10345                           	opt stack 0
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           postinc0	equ	0xFEE
 10354                           wreg	equ	0xFE8
 10355                           indf1	equ	0xFE7
 10356                           postinc1	equ	0xFE6
 10357                           postdec1	equ	0xFE5
 10358                           fsr1h	equ	0xFE2
 10359                           fsr1l	equ	0xFE1
 10360                           indf2	equ	0xFDF
 10361                           postinc2	equ	0xFDE
 10362                           postdec2	equ	0xFDD
 10363                           plusw2	equ	0xFDB
 10364                           fsr2h	equ	0xFDA
 10365                           fsr2l	equ	0xFD9
 10366                           status	equ	0xFD8
 10367                           
 10368 ;; *************** function _SetTime *****************
 10369 ;; Defined at:
 10370 ;;		line 169 in file "user.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  newTime         1    wreg     PTR long 
 10373 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;  newTime         1    6[COMRAM] PTR long 
 10376 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      void 
 10379 ;; Registers used:
 10380 ;;		wreg, fsr2l, fsr2h, status,2
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/1
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10386 ;;      Params:         0       0       0       0       0       0       0
 10387 ;;      Locals:         1       0       0       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0
 10389 ;;      Totals:         1       0       0       0       0       0       0
 10390 ;;Total ram usage:        1 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    2
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_ModbusProcess_FC100
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text53
 10401  002D66                     __ptext53:
 10402                           	opt stack 0
 10403  002D66                     _SetTime:
 10404                           	opt stack 26
 10405                           
 10406                           ;incstack = 0
 10407  002D66  FFFF               	dw	65535
 10408                           
 10409                           ;SetTime@newTime stored from wreg
 10410  002D68  6E07               	movwf	SetTime@newTime,c
 10411                           
 10412                           ;user.c: 171: currentTime = *newTime;
 10413  002D6A  5007               	movf	SetTime@newTime,w,c
 10414  002D6C  6ED9               	movwf	fsr2l,c
 10415  002D6E  6ADA               	clrf	fsr2h,c
 10416  002D70  CFDE F0DA          	movff	postinc2,_currentTime
 10417  002D74  CFDE F0DB          	movff	postinc2,_currentTime+1
 10418  002D78  CFDE F0DC          	movff	postinc2,_currentTime+2
 10419  002D7C  CFDE F0DD          	movff	postinc2,_currentTime+3
 10420  002D80  0012               	return		;funcret
 10421  002D82  FFFF               	dw	65535	; errata NOP
 10422  002D84                     __end_of_SetTime:
 10423                           	opt stack 0
 10424                           tblptru	equ	0xFF8
 10425                           tblptrh	equ	0xFF7
 10426                           tblptrl	equ	0xFF6
 10427                           tablat	equ	0xFF5
 10428                           prodh	equ	0xFF4
 10429                           prodl	equ	0xFF3
 10430                           intcon	equ	0xFF2
 10431                           postinc0	equ	0xFEE
 10432                           wreg	equ	0xFE8
 10433                           indf1	equ	0xFE7
 10434                           postinc1	equ	0xFE6
 10435                           postdec1	equ	0xFE5
 10436                           fsr1h	equ	0xFE2
 10437                           fsr1l	equ	0xFE1
 10438                           indf2	equ	0xFDF
 10439                           postinc2	equ	0xFDE
 10440                           postdec2	equ	0xFDD
 10441                           plusw2	equ	0xFDB
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function _SetHourMin *****************
 10447 ;; Defined at:
 10448 ;;		line 277 in file "interrupts.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  newHour         2   10[COMRAM] PTR unsigned char 
 10451 ;;		 -> _au8Buffer(140), 
 10452 ;;  newMin          2   12[COMRAM] PTR unsigned char 
 10453 ;;		 -> _au8Buffer(140), 
 10454 ;;  sec             2   14[COMRAM] PTR unsigned char 
 10455 ;;		 -> _au8Buffer(140), 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  secToNext6Se    1   29[COMRAM] unsigned char 
 10458 ;;  tmpSec          1   28[COMRAM] unsigned char 
 10459 ;; Return value:  Size  Location     Type
 10460 ;;                  1    wreg      void 
 10461 ;; Registers used:
 10462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10463 ;; Tracked objects:
 10464 ;;		On entry : E/0
 10465 ;;		On exit  : 0/0
 10466 ;;		Unchanged: 0/0
 10467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10468 ;;      Params:         6       0       0       0       0       0       0
 10469 ;;      Locals:         2       0       0       0       0       0       0
 10470 ;;      Temps:         12       0       0       0       0       0       0
 10471 ;;      Totals:        20       0       0       0       0       0       0
 10472 ;;Total ram usage:       20 bytes
 10473 ;; Hardware stack levels used:    1
 10474 ;; Hardware stack levels required when called:    3
 10475 ;; This function calls:
 10476 ;;		___lbdiv
 10477 ;;		___lbmod
 10478 ;; This function is called by:
 10479 ;;		_ModbusProcess_FC100
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           	psect	text54
 10484  0017F0                     __ptext54:
 10485                           	opt stack 0
 10486  0017F0                     _SetHourMin:
 10487                           	opt stack 25
 10488                           
 10489                           ;incstack = 0
 10490  0017F0  FFFF               	dw	65535
 10491                           
 10492                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 10493  0017F2  9ED5               	bcf	4053,7,c	;volatile
 10494                           
 10495                           ;interrupts.c: 281: globalHours = *newHour;
 10496  0017F4  C00B  FFD9         	movff	SetHourMin@newHour,fsr2l
 10497  0017F8  C00C  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 10498  0017FC  50DF               	movf	indf2,w,c
 10499  0017FE  6E75               	movwf	_globalHours,c	;volatile
 10500                           
 10501                           ;interrupts.c: 282: globalMinutes = *newMin;
 10502  001800  C00D  FFD9         	movff	SetHourMin@newMin,fsr2l
 10503  001804  C00E  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 10504  001808  50DF               	movf	indf2,w,c
 10505  00180A  6E72               	movwf	_globalMinutes,c	;volatile
 10506                           
 10507                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 10508  00180C  5075               	movf	_globalHours,w,c	;volatile
 10509  00180E  0D3C               	mullw	60
 10510  001810  5072               	movf	_globalMinutes,w,c	;volatile
 10511  001812  24F3               	addwf	prodl,w,c
 10512  001814  0100               	movlb	0	; () banked
 10513  001816  6FC2               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 10514  001818  0E00               	movlw	0
 10515  00181A  20F4               	addwfc	prodh,w,c
 10516  00181C  6FC3               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 10520  00181E  C00F  FFD9         	movff	SetHourMin@sec,fsr2l
 10521  001822  C010  FFDA         	movff	SetHourMin@sec+1,fsr2h
 10522  001826  50DF               	movf	indf2,w,c
 10523  001828  6E1D               	movwf	SetHourMin@tmpSec,c
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 10527  00182A  0E06               	movlw	6
 10528  00182C  6E07               	movwf	___lbdiv@divisor,c
 10529  00182E  501D               	movf	SetHourMin@tmpSec,w,c
 10530  001830  EC62  F015         	call	___lbdiv
 10531  001834  0100               	movlb	0	; () banked
 10532  001836  6FC9               	movwf	__6sCounter& (0+255),b	;volatile
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 10536  001838  0E06               	movlw	6
 10537  00183A  6E07               	movwf	___lbmod@divisor,c
 10538  00183C  501D               	movf	SetHourMin@tmpSec,w,c
 10539  00183E  EC42  F016         	call	___lbmod
 10540  001842  6E11               	movwf	??_SetHourMin& (0+255),c
 10541  001844  5011               	movf	??_SetHourMin,w,c
 10542  001846  0806               	sublw	6
 10543  001848  6E1E               	movwf	SetHourMin@secToNext6Sec,c
 10544                           
 10545                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)&0xFF)));
 10546  00184A  C01E  F011         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
 10547  00184E  6A12               	clrf	(??_SetHourMin+1)& (0+255),c
 10548  001850  6A13               	clrf	(??_SetHourMin+2)& (0+255),c
 10549  001852  6A14               	clrf	(??_SetHourMin+3)& (0+255),c
 10550  001854  0EDC               	movlw	220
 10551  001856  0211               	mulwf	??_SetHourMin& (0+255),c
 10552  001858  CFF3 F015          	movff	prodl,??_SetHourMin+4
 10553  00185C  CFF4 F016          	movff	prodh,??_SetHourMin+5
 10554  001860  6A17               	clrf	(??_SetHourMin+6)& (0+255),c
 10555  001862  6A18               	clrf	(??_SetHourMin+7)& (0+255),c
 10556  001864  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10557  001866  50F3               	movf	prodl,w,c
 10558  001868  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 10559  00186A  50F4               	movf	prodh,w,c
 10560  00186C  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 10561  00186E  0E00               	movlw	0
 10562  001870  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10563  001872  0ED9               	movlw	217
 10564  001874  0211               	mulwf	??_SetHourMin& (0+255),c
 10565  001876  50F3               	movf	prodl,w,c
 10566  001878  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 10567  00187A  50F4               	movf	prodh,w,c
 10568  00187C  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 10569  00187E  0E00               	movlw	0
 10570  001880  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10571  001882  0EDC               	movlw	220
 10572  001884  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 10573  001886  50F3               	movf	prodl,w,c
 10574  001888  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10575  00188A  50F4               	movf	prodh,w,c
 10576  00188C  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10577  00188E  0ED9               	movlw	217
 10578  001890  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10579  001892  50F3               	movf	prodl,w,c
 10580  001894  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10581  001896  50F4               	movf	prodh,w,c
 10582  001898  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10583  00189A  0EFF               	movlw	255
 10584  00189C  0211               	mulwf	??_SetHourMin& (0+255),c
 10585  00189E  50F3               	movf	prodl,w,c
 10586  0018A0  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10587  0018A2  50F4               	movf	prodh,w,c
 10588  0018A4  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10589  0018A6  0EDC               	movlw	220
 10590  0018A8  0214               	mulwf	(??_SetHourMin+3)& (0+255),c
 10591  0018AA  50F3               	movf	prodl,w,c
 10592  0018AC  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10593  0018AE  0ED9               	movlw	217
 10594  0018B0  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 10595  0018B2  50F3               	movf	prodl,w,c
 10596  0018B4  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10597  0018B6  0EFF               	movlw	255
 10598  0018B8  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10599  0018BA  50F3               	movf	prodl,w,c
 10600  0018BC  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10601  0018BE  0EFF               	movlw	255
 10602  0018C0  0211               	mulwf	??_SetHourMin& (0+255),c
 10603  0018C2  50F3               	movf	prodl,w,c
 10604  0018C4  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10605  0018C6  0E00               	movlw	0
 10606  0018C8  2415               	addwf	??_SetHourMin+4,w,c
 10607  0018CA  6E19               	movwf	(??_SetHourMin+8)& (0+255),c
 10608  0018CC  0E00               	movlw	0
 10609  0018CE  2016               	addwfc	??_SetHourMin+5,w,c
 10610  0018D0  6E1A               	movwf	(??_SetHourMin+9)& (0+255),c
 10611  0018D2  0E01               	movlw	1
 10612  0018D4  2017               	addwfc	??_SetHourMin+6,w,c
 10613  0018D6  6E1B               	movwf	(??_SetHourMin+10)& (0+255),c
 10614  0018D8  0E00               	movlw	0
 10615  0018DA  2018               	addwfc	??_SetHourMin+7,w,c
 10616  0018DC  6E1C               	movwf	(??_SetHourMin+11)& (0+255),c
 10617  0018DE  C01A  F019         	movff	??_SetHourMin+9,??_SetHourMin+8
 10618  0018E2  C01B  F01A         	movff	??_SetHourMin+10,??_SetHourMin+9
 10619  0018E6  C01C  F01B         	movff	??_SetHourMin+11,??_SetHourMin+10
 10620  0018EA  6A1C               	clrf	??_SetHourMin+11,c
 10621  0018EC  BE1B               	btfsc	??_SetHourMin+10,7,c
 10622  0018EE  681C               	setf	??_SetHourMin+11,c
 10623  0018F0  5019               	movf	??_SetHourMin+8,w,c
 10624  0018F2  6ED7               	movwf	4055,c	;volatile
 10625  0018F4  501E               	movf	SetHourMin@secToNext6Sec,w,c
 10626  0018F6  0DDC               	mullw	220
 10627  0018F8  CFF3 FFD6          	movff	prodl,4054	;volatile
 10628                           
 10629                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 10630  0018FC  8ED5               	bsf	4053,7,c	;volatile
 10631  0018FE  0012               	return		;funcret
 10632  001900  FFFF               	dw	65535	; errata NOP
 10633  001902                     __end_of_SetHourMin:
 10634                           	opt stack 0
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           prodh	equ	0xFF4
 10640                           prodl	equ	0xFF3
 10641                           intcon	equ	0xFF2
 10642                           postinc0	equ	0xFEE
 10643                           wreg	equ	0xFE8
 10644                           indf1	equ	0xFE7
 10645                           postinc1	equ	0xFE6
 10646                           postdec1	equ	0xFE5
 10647                           fsr1h	equ	0xFE2
 10648                           fsr1l	equ	0xFE1
 10649                           indf2	equ	0xFDF
 10650                           postinc2	equ	0xFDE
 10651                           postdec2	equ	0xFDD
 10652                           plusw2	equ	0xFDB
 10653                           fsr2h	equ	0xFDA
 10654                           fsr2l	equ	0xFD9
 10655                           status	equ	0xFD8
 10656                           
 10657 ;; *************** function ___lbmod *****************
 10658 ;; Defined at:
 10659 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  dividend        1    wreg     unsigned char 
 10662 ;;  divisor         1    6[COMRAM] unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;  dividend        1    7[COMRAM] unsigned char 
 10665 ;;  rem             1    9[COMRAM] unsigned char 
 10666 ;;  counter         1    8[COMRAM] unsigned char 
 10667 ;; Return value:  Size  Location     Type
 10668 ;;                  1    wreg      unsigned char 
 10669 ;; Registers used:
 10670 ;;		wreg, status,2, status,0
 10671 ;; Tracked objects:
 10672 ;;		On entry : F/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10676 ;;      Params:         1       0       0       0       0       0       0
 10677 ;;      Locals:         3       0       0       0       0       0       0
 10678 ;;      Temps:          0       0       0       0       0       0       0
 10679 ;;      Totals:         4       0       0       0       0       0       0
 10680 ;;Total ram usage:        4 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; Hardware stack levels required when called:    2
 10683 ;; This function calls:
 10684 ;;		Nothing
 10685 ;; This function is called by:
 10686 ;;		_SetHourMin
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           	psect	text55
 10691  002C84                     __ptext55:
 10692                           	opt stack 0
 10693  002C84                     ___lbmod:
 10694                           	opt stack 25
 10695                           
 10696                           ;incstack = 0
 10697  002C84  FFFF               	dw	65535
 10698                           
 10699                           ;___lbmod@dividend stored from wreg
 10700  002C86  6E08               	movwf	___lbmod@dividend,c
 10701  002C88  0E08               	movlw	8
 10702  002C8A  6E09               	movwf	___lbmod@counter,c
 10703  002C8C  6A0A               	clrf	___lbmod@rem,c
 10704  002C8E                     l5952:
 10705  002C8E  FFFF               	dw	65535	; assembler added errata NOP
 10706  002C90  90D8               	bcf	status,0,c
 10707  002C92  3408               	rlcf	___lbmod@dividend,w,c
 10708  002C94  340A               	rlcf	___lbmod@rem,w,c
 10709  002C96  6E0A               	movwf	___lbmod@rem,c
 10710  002C98  90D8               	bcf	status,0,c
 10711  002C9A  3608               	rlcf	___lbmod@dividend,f,c
 10712  002C9C  5007               	movf	___lbmod@divisor,w,c
 10713  002C9E  5C0A               	subwf	___lbmod@rem,w,c
 10714  002CA0  E302               	bnc	l5960
 10715  002CA2  5007               	movf	___lbmod@divisor,w,c
 10716  002CA4  5E0A               	subwf	___lbmod@rem,f,c
 10717  002CA6                     l5960:
 10718  002CA6  2E09               	decfsz	___lbmod@counter,f,c
 10719  002CA8  D7F2               	goto	l5952
 10720  002CAA  500A               	movf	___lbmod@rem,w,c
 10721  002CAC  0012               	return		;funcret
 10722  002CAE  FFFF               	dw	65535	; errata NOP
 10723  002CB0                     __end_of___lbmod:
 10724                           	opt stack 0
 10725                           tblptru	equ	0xFF8
 10726                           tblptrh	equ	0xFF7
 10727                           tblptrl	equ	0xFF6
 10728                           tablat	equ	0xFF5
 10729                           prodh	equ	0xFF4
 10730                           prodl	equ	0xFF3
 10731                           intcon	equ	0xFF2
 10732                           postinc0	equ	0xFEE
 10733                           wreg	equ	0xFE8
 10734                           indf1	equ	0xFE7
 10735                           postinc1	equ	0xFE6
 10736                           postdec1	equ	0xFE5
 10737                           fsr1h	equ	0xFE2
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           plusw2	equ	0xFDB
 10743                           fsr2h	equ	0xFDA
 10744                           fsr2l	equ	0xFD9
 10745                           status	equ	0xFD8
 10746                           
 10747 ;; *************** function ___lbdiv *****************
 10748 ;; Defined at:
 10749 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  dividend        1    wreg     unsigned char 
 10752 ;;  divisor         1    6[COMRAM] unsigned char 
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;  dividend        1    7[COMRAM] unsigned char 
 10755 ;;  quotient        1    9[COMRAM] unsigned char 
 10756 ;;  counter         1    8[COMRAM] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  1    wreg      unsigned char 
 10759 ;; Registers used:
 10760 ;;		wreg, status,2, status,0
 10761 ;; Tracked objects:
 10762 ;;		On entry : F/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10766 ;;      Params:         1       0       0       0       0       0       0
 10767 ;;      Locals:         3       0       0       0       0       0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0
 10769 ;;      Totals:         4       0       0       0       0       0       0
 10770 ;;Total ram usage:        4 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    2
 10773 ;; This function calls:
 10774 ;;		Nothing
 10775 ;; This function is called by:
 10776 ;;		_SetHourMin
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           	psect	text56
 10781  002AC4                     __ptext56:
 10782                           	opt stack 0
 10783  002AC4                     ___lbdiv:
 10784                           	opt stack 25
 10785                           
 10786                           ;incstack = 0
 10787  002AC4  FFFF               	dw	65535
 10788                           
 10789                           ;___lbdiv@dividend stored from wreg
 10790  002AC6  6E08               	movwf	___lbdiv@dividend,c
 10791  002AC8  6A0A               	clrf	___lbdiv@quotient,c
 10792  002ACA  5007               	movf	___lbdiv@divisor,w,c
 10793  002ACC  E017               	bz	l5944
 10794  002ACE  0E01               	movlw	1
 10795  002AD0  6E09               	movwf	___lbdiv@counter,c
 10796  002AD2  D004               	goto	l5932
 10797  002AD4                     l5928:
 10798  002AD4  FFFF               	dw	65535	; assembler added errata NOP
 10799  002AD6  90D8               	bcf	status,0,c
 10800  002AD8  3607               	rlcf	___lbdiv@divisor,f,c
 10801  002ADA  2A09               	incf	___lbdiv@counter,f,c
 10802  002ADC                     l5932:
 10803  002ADC  FFFF               	dw	65535	; assembler added errata NOP
 10804  002ADE  AE07               	btfss	___lbdiv@divisor,7,c
 10805  002AE0  D7F9               	goto	l5928
 10806  002AE2                     l5934:
 10807  002AE2  FFFF               	dw	65535	; assembler added errata NOP
 10808  002AE4  90D8               	bcf	status,0,c
 10809  002AE6  360A               	rlcf	___lbdiv@quotient,f,c
 10810  002AE8  5007               	movf	___lbdiv@divisor,w,c
 10811  002AEA  5C08               	subwf	___lbdiv@dividend,w,c
 10812  002AEC  E303               	bnc	l5940
 10813  002AEE  5007               	movf	___lbdiv@divisor,w,c
 10814  002AF0  5E08               	subwf	___lbdiv@dividend,f,c
 10815  002AF2  800A               	bsf	___lbdiv@quotient,0,c
 10816  002AF4                     l5940:
 10817  002AF4  90D8               	bcf	status,0,c
 10818  002AF6  3207               	rrcf	___lbdiv@divisor,f,c
 10819  002AF8  2E09               	decfsz	___lbdiv@counter,f,c
 10820  002AFA  D7F3               	goto	l5934
 10821  002AFC                     l5944:
 10822  002AFC  500A               	movf	___lbdiv@quotient,w,c
 10823  002AFE  0012               	return		;funcret
 10824  002B00  FFFF               	dw	65535	; errata NOP
 10825  002B02                     __end_of___lbdiv:
 10826                           	opt stack 0
 10827                           tblptru	equ	0xFF8
 10828                           tblptrh	equ	0xFF7
 10829                           tblptrl	equ	0xFF6
 10830                           tablat	equ	0xFF5
 10831                           prodh	equ	0xFF4
 10832                           prodl	equ	0xFF3
 10833                           intcon	equ	0xFF2
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           indf1	equ	0xFE7
 10837                           postinc1	equ	0xFE6
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _ModbusSetExceptionStatusBit *****************
 10850 ;; Defined at:
 10851 ;;		line 232 in file "ModbusRtu.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  bitNum          1    wreg     unsigned char 
 10854 ;;  value           1    6[COMRAM] unsigned char 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  bitNum          1    9[COMRAM] unsigned char 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      void 
 10859 ;; Registers used:
 10860 ;;		wreg, status,2, status,0
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : F/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10866 ;;      Params:         1       0       0       0       0       0       0
 10867 ;;      Locals:         1       0       0       0       0       0       0
 10868 ;;      Temps:          2       0       0       0       0       0       0
 10869 ;;      Totals:         4       0       0       0       0       0       0
 10870 ;;Total ram usage:        4 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    2
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_CommandSetStatusLed
 10877 ;;		_ProcessUserCommands
 10878 ;;		_io_poll
 10879 ;;		_ModbusProcess_FC100
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           	psect	text57
 10884  0028CC                     __ptext57:
 10885                           	opt stack 0
 10886  0028CC                     _ModbusSetExceptionStatusBit:
 10887                           	opt stack 26
 10888                           
 10889                           ;incstack = 0
 10890  0028CC  FFFF               	dw	65535
 10891                           
 10892                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 10893  0028CE  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 10894                           
 10895                           ;ModbusRtu.c: 234: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 10896  0028D0  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
 10897  0028D2  E010               	bz	l5880
 10898  0028D4  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 10899  0028D8  0E01               	movlw	1
 10900  0028DA  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 10901  0028DC  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 10902  0028DE  D003               	goto	u4864
 10903  0028E0                     u4865:
 10904  0028E0  FFFF               	dw	65535	; assembler added errata NOP
 10905  0028E2  90D8               	bcf	status,0,c
 10906  0028E4  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 10907  0028E6                     u4864:
 10908  0028E6  FFFF               	dw	65535	; assembler added errata NOP
 10909  0028E8  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 10910  0028EA  D7FA               	goto	u4865
 10911  0028EC  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 10912  0028EE  0100               	movlb	0	; () banked
 10913  0028F0  13CD               	iorwf	__exceptionStatus& (0+255),f,b
 10914  0028F2  D00F               	goto	l753
 10915  0028F4                     l5880:
 10916  0028F4  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 10917  0028F8  0E01               	movlw	1
 10918  0028FA  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 10919  0028FC  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 10920  0028FE  D003               	goto	u4874
 10921  002900                     u4875:
 10922  002900  FFFF               	dw	65535	; assembler added errata NOP
 10923  002902  90D8               	bcf	status,0,c
 10924  002904  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 10925  002906                     u4874:
 10926  002906  FFFF               	dw	65535	; assembler added errata NOP
 10927  002908  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 10928  00290A  D7FA               	goto	u4875
 10929  00290C  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
 10930  00290E  0100               	movlb	0	; () banked
 10931  002910  17CD               	andwf	__exceptionStatus& (0+255),f,b
 10932  002912                     l753:
 10933  002912  FFFF               	dw	65535	; assembler added errata NOP
 10934                           
 10935                           ; BSR set to: 0
 10936  002914  0012               	return		;funcret
 10937  002916  FFFF               	dw	65535	; errata NOP
 10938  002918                     __end_of_ModbusSetExceptionStatusBit:
 10939                           	opt stack 0
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           postinc0	equ	0xFEE
 10948                           wreg	equ	0xFE8
 10949                           indf1	equ	0xFE7
 10950                           postinc1	equ	0xFE6
 10951                           postdec1	equ	0xFE5
 10952                           fsr1h	equ	0xFE2
 10953                           fsr1l	equ	0xFE1
 10954                           indf2	equ	0xFDF
 10955                           postinc2	equ	0xFDE
 10956                           postdec2	equ	0xFDD
 10957                           plusw2	equ	0xFDB
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962 ;; *************** function _ModbusProcess_FC1 *****************
 10963 ;; Defined at:
 10964 ;;		line 926 in file "ModbusRtu.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;  regs            2   21[COMRAM] unsigned short 
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 10969 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 10970 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 10971 ;;  u16coil         2   26[COMRAM] unsigned short 
 10972 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 10973 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 10974 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 10975 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      unsigned char 
 10978 ;; Registers used:
 10979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : E/1
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10985 ;;      Params:         2       0       0       0       0       0       0
 10986 ;;      Locals:        12       0       0       0       0       0       0
 10987 ;;      Temps:          3       0       0       0       0       0       0
 10988 ;;      Totals:        17       0       0       0       0       0       0
 10989 ;;Total ram usage:       17 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    4
 10992 ;; This function calls:
 10993 ;;		_ModbusSendTxBuffer
 10994 ;; This function is called by:
 10995 ;;		_ModbusPoll
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text58
 11000  0015AC                     __ptext58:
 11001                           	opt stack 0
 11002  0015AC                     _ModbusProcess_FC1:
 11003                           	opt stack 25
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;incstack = 0
 11007  0015AC  FFFF               	dw	65535
 11008                           
 11009                           ;ModbusRtu.c: 929: uint8_t u8currentBit, u8bytesno, u8bitsno;
 11010                           ;ModbusRtu.c: 930: uint8_t u8CopyBufferSize;
 11011                           ;ModbusRtu.c: 931: uint16_t u16currentCoil, u16coil;
 11012                           ;ModbusRtu.c: 934: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 11013  0015AE  0101               	movlb	1	; () banked
 11014  0015B0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 11015  0015B2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11016  0015B4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 11017  0015B6  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 11018  0015B8  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 11019                           
 11020                           ; BSR set to: 1
 11021                           ;ModbusRtu.c: 935: _lastAddress = u16StartCoil;
 11022  0015BC  C020  F0BC         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 11023  0015C0  C021  F0BD         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 11024                           
 11025                           ;ModbusRtu.c: 936: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 11026  0015C4  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 11027  0015C6  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11028  0015C8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 11029  0015CA  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 11030  0015CC  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 11031                           
 11032                           ; BSR set to: 1
 11033                           ;ModbusRtu.c: 937: _lastCount = u16Coilno;
 11034  0015D0  C025  F0BE         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 11035  0015D4  C026  F0BF         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 11036                           
 11037                           ; BSR set to: 1
 11038                           ;ModbusRtu.c: 939: u8bytesno = (uint8_t) (u16Coilno / 8);
 11039  0015D8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11040  0015DC  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 11041  0015E0  90D8               	bcf	status,0,c
 11042  0015E2  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11043  0015E4  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11044  0015E6  90D8               	bcf	status,0,c
 11045  0015E8  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11046  0015EA  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11047  0015EC  90D8               	bcf	status,0,c
 11048  0015EE  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11049  0015F0  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11050  0015F2  5018               	movf	??_ModbusProcess_FC1,w,c
 11051  0015F4  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 11052                           
 11053                           ; BSR set to: 1
 11054                           ;ModbusRtu.c: 940: if (u16Coilno % 8 != 0)
 11055  0015F6  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11056  0015FA  0E07               	movlw	7
 11057  0015FC  1618               	andwf	??_ModbusProcess_FC1,f,c
 11058  0015FE  E001               	bz	l6580
 11059                           
 11060                           ; BSR set to: 1
 11061                           ;ModbusRtu.c: 941: u8bytesno++;
 11062  001600  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 11063  001602                     l6580:
 11064                           
 11065                           ; BSR set to: 1
 11066                           ;ModbusRtu.c: 942: _au8Buffer[ ADD_HI ] = u8bytesno;
 11067  001602  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 11068                           
 11069                           ; BSR set to: 1
 11070                           ;ModbusRtu.c: 943: _u8BufferSize = ADD_LO;
 11071  001606  0E03               	movlw	3
 11072  001608  6E6F               	movwf	__u8BufferSize,c
 11073                           
 11074                           ; BSR set to: 1
 11075                           ;ModbusRtu.c: 946: u8bitsno = 0;
 11076  00160A  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11077                           
 11078                           ; BSR set to: 1
 11079                           ;ModbusRtu.c: 948: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 11080  00160C  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 11081  00160E  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 11082  001610  D04F               	goto	l6606
 11083  001612                     l6588:
 11084                           
 11085                           ;ModbusRtu.c: 949: {
 11086                           ;ModbusRtu.c: 950: u16coil = u16StartCoil + u16currentCoil;
 11087  001612  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 11088  001614  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 11089  001616  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 11090  001618  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 11091  00161A  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 11092  00161C  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 11093                           
 11094                           ;ModbusRtu.c: 952: u8currentBit = (uint8_t) u16coil;
 11095  00161E  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 11096                           
 11097                           ;ModbusRtu.c: 954: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 11098  001622  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 11099  001626  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 11100  00162A  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 11101  00162E  2A18               	incf	??_ModbusProcess_FC1,f,c
 11102  001630  D004               	goto	u5584
 11103  001632                     u5585:
 11104  001632  FFFF               	dw	65535	; assembler added errata NOP
 11105  001634  90D8               	bcf	status,0,c
 11106  001636  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 11107  001638  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11108  00163A                     u5584:
 11109  00163A  FFFF               	dw	65535	; assembler added errata NOP
 11110  00163C  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11111  00163E  D7F9               	goto	u5585
 11112  001640  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 11113  001642  D015               	goto	l6596
 11114  001644  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11115  001648  0E01               	movlw	1
 11116  00164A  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11117  00164C  2A18               	incf	??_ModbusProcess_FC1,f,c
 11118  00164E  D003               	goto	u5604
 11119  001650                     u5605:
 11120  001650  FFFF               	dw	65535	; assembler added errata NOP
 11121  001652  90D8               	bcf	status,0,c
 11122  001654  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11123  001656                     u5604:
 11124  001656  FFFF               	dw	65535	; assembler added errata NOP
 11125  001658  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11126  00165A  D7FA               	goto	u5605
 11127  00165C  0E00               	movlw	low __au8Buffer
 11128  00165E  246F               	addwf	__u8BufferSize,w,c
 11129  001660  6ED9               	movwf	fsr2l,c
 11130  001662  6ADA               	clrf	fsr2h,c
 11131  001664  0E01               	movlw	high __au8Buffer
 11132  001666  22DA               	addwfc	fsr2h,f,c
 11133  001668  5019               	movf	??_ModbusProcess_FC1+1,w,c
 11134  00166A  12DF               	iorwf	indf2,f,c
 11135  00166C  D017               	goto	l6598
 11136  00166E                     l6596:
 11137  00166E  FFFF               	dw	65535	; assembler added errata NOP
 11138  001670  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11139  001674  0E01               	movlw	1
 11140  001676  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11141  001678  2A18               	incf	??_ModbusProcess_FC1,f,c
 11142  00167A  D003               	goto	u5614
 11143  00167C                     u5615:
 11144  00167C  FFFF               	dw	65535	; assembler added errata NOP
 11145  00167E  90D8               	bcf	status,0,c
 11146  001680  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11147  001682                     u5614:
 11148  001682  FFFF               	dw	65535	; assembler added errata NOP
 11149  001684  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11150  001686  D7FA               	goto	u5615
 11151  001688  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 11152  00168A  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 11153  00168C  0E00               	movlw	low __au8Buffer
 11154  00168E  246F               	addwf	__u8BufferSize,w,c
 11155  001690  6ED9               	movwf	fsr2l,c
 11156  001692  6ADA               	clrf	fsr2h,c
 11157  001694  0E01               	movlw	high __au8Buffer
 11158  001696  22DA               	addwfc	fsr2h,f,c
 11159  001698  501A               	movf	??_ModbusProcess_FC1+2,w,c
 11160  00169A  16DF               	andwf	indf2,f,c
 11161  00169C                     l6598:
 11162  00169C  FFFF               	dw	65535	; assembler added errata NOP
 11163                           
 11164                           ;ModbusRtu.c: 958: u8bitsno++;
 11165  00169E  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 11166                           
 11167                           ;ModbusRtu.c: 960: if (u8bitsno > 7)
 11168  0016A0  0E07               	movlw	7
 11169  0016A2  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 11170  0016A4  D002               	goto	l875
 11171                           
 11172                           ;ModbusRtu.c: 961: {
 11173                           ;ModbusRtu.c: 962: u8bitsno = 0;
 11174  0016A6  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11175                           
 11176                           ;ModbusRtu.c: 963: _u8BufferSize++;
 11177  0016A8  2A6F               	incf	__u8BufferSize,f,c
 11178  0016AA                     l875:
 11179  0016AA  FFFF               	dw	65535	; assembler added errata NOP
 11180  0016AC  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 11181  0016AE  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 11182  0016B0                     l6606:
 11183  0016B0  FFFF               	dw	65535	; assembler added errata NOP
 11184  0016B2  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 11185  0016B4  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 11186  0016B6  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 11187  0016B8  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 11188  0016BA  E3AB               	bnc	l6588
 11189                           
 11190                           ;ModbusRtu.c: 964: }
 11191                           ;ModbusRtu.c: 965: }
 11192                           ;ModbusRtu.c: 968: if (u16Coilno % 8 != 0)
 11193  0016BC  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11194  0016C0  0E07               	movlw	7
 11195  0016C2  1618               	andwf	??_ModbusProcess_FC1,f,c
 11196  0016C4  E001               	bz	l6612
 11197                           
 11198                           ;ModbusRtu.c: 969: _u8BufferSize++;
 11199  0016C6  2A6F               	incf	__u8BufferSize,f,c
 11200  0016C8                     l6612:
 11201                           
 11202                           ;ModbusRtu.c: 970: u8CopyBufferSize = _u8BufferSize + 2;
 11203  0016C8  506F               	movf	__u8BufferSize,w,c
 11204  0016CA  0F02               	addlw	2
 11205  0016CC  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 11206                           
 11207                           ;ModbusRtu.c: 971: ModbusSendTxBuffer();
 11208  0016CE  EC8C  F014         	call	_ModbusSendTxBuffer	;wreg free
 11209                           
 11210                           ;ModbusRtu.c: 972: return u8CopyBufferSize;
 11211  0016D2  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 11212  0016D4  0012               	return		;funcret
 11213  0016D6  FFFF               	dw	65535	; errata NOP
 11214  0016D8                     __end_of_ModbusProcess_FC1:
 11215                           	opt stack 0
 11216                           tblptru	equ	0xFF8
 11217                           tblptrh	equ	0xFF7
 11218                           tblptrl	equ	0xFF6
 11219                           tablat	equ	0xFF5
 11220                           prodh	equ	0xFF4
 11221                           prodl	equ	0xFF3
 11222                           intcon	equ	0xFF2
 11223                           postinc0	equ	0xFEE
 11224                           wreg	equ	0xFE8
 11225                           indf1	equ	0xFE7
 11226                           postinc1	equ	0xFE6
 11227                           postdec1	equ	0xFE5
 11228                           fsr1h	equ	0xFE2
 11229                           fsr1l	equ	0xFE1
 11230                           indf2	equ	0xFDF
 11231                           postinc2	equ	0xFDE
 11232                           postdec2	equ	0xFDD
 11233                           plusw2	equ	0xFDB
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function _ModbusSendTxBuffer *****************
 11239 ;; Defined at:
 11240 ;;		line 634 in file "ModbusRtu.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;		None
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;  u16crc          2   19[COMRAM] unsigned short 
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  1    wreg      void 
 11247 ;; Registers used:
 11248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11249 ;; Tracked objects:
 11250 ;;		On entry : 0/1
 11251 ;;		On exit  : 0/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11254 ;;      Params:         0       0       0       0       0       0       0
 11255 ;;      Locals:         2       0       0       0       0       0       0
 11256 ;;      Temps:          0       0       0       0       0       0       0
 11257 ;;      Totals:         2       0       0       0       0       0       0
 11258 ;;Total ram usage:        2 bytes
 11259 ;; Hardware stack levels used:    1
 11260 ;; Hardware stack levels required when called:    3
 11261 ;; This function calls:
 11262 ;;		_ModbusCalcCRC
 11263 ;;		_PortWrite
 11264 ;;		_millis
 11265 ;; This function is called by:
 11266 ;;		_ModbusPoll
 11267 ;;		_ModbusProcess_FC1
 11268 ;;		_ModbusProcess_FC3
 11269 ;;		_ModbusProcess_FC5
 11270 ;;		_ModbusProcess_FC6
 11271 ;;		_ModbusProcess_FC7
 11272 ;;		_ModbusProcess_FC15
 11273 ;;		_ModbusProcess_FC16
 11274 ;;		_ModbusProcess_FC17
 11275 ;;		_ModbusProcess_FC21
 11276 ;;		_ModbusProcess_FC43
 11277 ;;		_ModbusProcess_FC100
 11278 ;;		_ModbusProcess_FC101
 11279 ;;		_ModbusProcess_FC102
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text59
 11284  002918                     __ptext59:
 11285                           	opt stack 0
 11286  002918                     _ModbusSendTxBuffer:
 11287                           	opt stack 26
 11288                           
 11289                           ;incstack = 0
 11290  002918  FFFF               	dw	65535
 11291                           
 11292                           ;ModbusRtu.c: 639: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 11293  00291A  506F               	movf	__u8BufferSize,w,c
 11294  00291C  ECE3  F012         	call	_ModbusCalcCRC
 11295  002920  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 11296  002924  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 11297                           
 11298                           ;ModbusRtu.c: 640: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 11299  002928  0E00               	movlw	low __au8Buffer
 11300  00292A  246F               	addwf	__u8BufferSize,w,c
 11301  00292C  6ED9               	movwf	fsr2l,c
 11302  00292E  6ADA               	clrf	fsr2h,c
 11303  002930  0E01               	movlw	high __au8Buffer
 11304  002932  22DA               	addwfc	fsr2h,f,c
 11305  002934  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 11306                           
 11307                           ;ModbusRtu.c: 641: _u8BufferSize++;
 11308  002938  2A6F               	incf	__u8BufferSize,f,c
 11309                           
 11310                           ;ModbusRtu.c: 642: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 11311  00293A  0E00               	movlw	low __au8Buffer
 11312  00293C  246F               	addwf	__u8BufferSize,w,c
 11313  00293E  6ED9               	movwf	fsr2l,c
 11314  002940  6ADA               	clrf	fsr2h,c
 11315  002942  0E01               	movlw	high __au8Buffer
 11316  002944  22DA               	addwfc	fsr2h,f,c
 11317  002946  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 11318                           
 11319                           ;ModbusRtu.c: 643: _u8BufferSize++;
 11320  00294A  2A6F               	incf	__u8BufferSize,f,c
 11321                           
 11322                           ;ModbusRtu.c: 647: PortWrite(_au8Buffer, _u8BufferSize);
 11323  00294C  0E00               	movlw	low __au8Buffer
 11324  00294E  6E07               	movwf	PortWrite@buf,c
 11325  002950  0E01               	movlw	high __au8Buffer
 11326  002952  6E08               	movwf	PortWrite@buf+1,c
 11327  002954  C06F  F009         	movff	__u8BufferSize,PortWrite@buflen
 11328  002958  EC81  F015         	call	_PortWrite	;wreg free
 11329                           
 11330                           ;ModbusRtu.c: 653: _u8BufferSize = 0;
 11331  00295C  6A6F               	clrf	__u8BufferSize,c
 11332                           
 11333                           ;ModbusRtu.c: 659: _u16OutCnt++;
 11334  00295E  EF58  F016         	goto	_millis	;wreg free
 11335  002962  FFFF               	dw	65535	; errata NOP
 11336  002964                     __end_of_ModbusSendTxBuffer:
 11337                           	opt stack 0
 11338                           tblptru	equ	0xFF8
 11339                           tblptrh	equ	0xFF7
 11340                           tblptrl	equ	0xFF6
 11341                           tablat	equ	0xFF5
 11342                           prodh	equ	0xFF4
 11343                           prodl	equ	0xFF3
 11344                           intcon	equ	0xFF2
 11345                           postinc0	equ	0xFEE
 11346                           wreg	equ	0xFE8
 11347                           indf1	equ	0xFE7
 11348                           postinc1	equ	0xFE6
 11349                           postdec1	equ	0xFE5
 11350                           fsr1h	equ	0xFE2
 11351                           fsr1l	equ	0xFE1
 11352                           indf2	equ	0xFDF
 11353                           postinc2	equ	0xFDE
 11354                           postdec2	equ	0xFDD
 11355                           plusw2	equ	0xFDB
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function _millis *****************
 11361 ;; Defined at:
 11362 ;;		line 247 in file "interrupts.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  ret             4   10[COMRAM] unsigned long 
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  4    6[COMRAM] unsigned long 
 11369 ;; Registers used:
 11370 ;;		None
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11376 ;;      Params:         4       0       0       0       0       0       0
 11377 ;;      Locals:         4       0       0       0       0       0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0
 11379 ;;      Totals:         8       0       0       0       0       0       0
 11380 ;;Total ram usage:        8 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    2
 11383 ;; This function calls:
 11384 ;;		Nothing
 11385 ;; This function is called by:
 11386 ;;		_SoundPlayNextStep
 11387 ;;		_main
 11388 ;;		_ModbusPoll
 11389 ;;		_ModbusSendTxBuffer
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           	psect	text60
 11394  002CB0                     __ptext60:
 11395                           	opt stack 0
 11396  002CB0                     _millis:
 11397                           	opt stack 28
 11398                           
 11399                           ;incstack = 0
 11400  002CB0  FFFF               	dw	65535
 11401                           
 11402                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 11403  002CB2  9EF2               	bcf	intcon,7,c	;volatile
 11404                           
 11405                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 11406  002CB4  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 11407  002CB8  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 11408  002CBC  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 11409  002CC0  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 11410                           
 11411                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 11412  002CC4  8EF2               	bsf	intcon,7,c	;volatile
 11413                           
 11414                           ;interrupts.c: 253: return ret;
 11415  002CC6  C00B  F007         	movff	millis@ret,?_millis
 11416  002CCA  C00C  F008         	movff	millis@ret+1,?_millis+1
 11417  002CCE  C00D  F009         	movff	millis@ret+2,?_millis+2
 11418  002CD2  C00E  F00A         	movff	millis@ret+3,?_millis+3
 11419  002CD6  0012               	return		;funcret
 11420  002CD8  FFFF               	dw	65535	; errata NOP
 11421  002CDA                     __end_of_millis:
 11422                           	opt stack 0
 11423                           tblptru	equ	0xFF8
 11424                           tblptrh	equ	0xFF7
 11425                           tblptrl	equ	0xFF6
 11426                           tablat	equ	0xFF5
 11427                           prodh	equ	0xFF4
 11428                           prodl	equ	0xFF3
 11429                           intcon	equ	0xFF2
 11430                           postinc0	equ	0xFEE
 11431                           wreg	equ	0xFE8
 11432                           indf1	equ	0xFE7
 11433                           postinc1	equ	0xFE6
 11434                           postdec1	equ	0xFE5
 11435                           fsr1h	equ	0xFE2
 11436                           fsr1l	equ	0xFE1
 11437                           indf2	equ	0xFDF
 11438                           postinc2	equ	0xFDE
 11439                           postdec2	equ	0xFDD
 11440                           plusw2	equ	0xFDB
 11441                           fsr2h	equ	0xFDA
 11442                           fsr2l	equ	0xFD9
 11443                           status	equ	0xFD8
 11444                           
 11445 ;; *************** function _PortWrite *****************
 11446 ;; Defined at:
 11447 ;;		line 101 in file "interrupts.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;  buf             2    6[COMRAM] PTR unsigned char 
 11450 ;;		 -> _au8Buffer(140), 
 11451 ;;  buflen          1    8[COMRAM] unsigned char 
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;  i               1    9[COMRAM] unsigned char 
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  1    wreg      void 
 11456 ;; Registers used:
 11457 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11458 ;; Tracked objects:
 11459 ;;		On entry : 0/1
 11460 ;;		On exit  : 0/0
 11461 ;;		Unchanged: 0/0
 11462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11463 ;;      Params:         3       0       0       0       0       0       0
 11464 ;;      Locals:         1       0       0       0       0       0       0
 11465 ;;      Temps:          0       0       0       0       0       0       0
 11466 ;;      Totals:         4       0       0       0       0       0       0
 11467 ;;Total ram usage:        4 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; Hardware stack levels required when called:    2
 11470 ;; This function calls:
 11471 ;;		Nothing
 11472 ;; This function is called by:
 11473 ;;		_ModbusSendTxBuffer
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text61
 11478  002B02                     __ptext61:
 11479                           	opt stack 0
 11480  002B02                     _PortWrite:
 11481                           	opt stack 26
 11482                           
 11483                           ;incstack = 0
 11484  002B02  FFFF               	dw	65535
 11485                           
 11486                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 11487  002B04  8A8B               	bsf	3979,5,c	;volatile
 11488                           
 11489                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 11490  002B06  0E06               	movlw	6
 11491  002B08                     u6337:
 11492  002B08  FFFF               	dw	65535	; errata NOP
 11493  002B0A  2EE8               	decfsz	wreg,f,c
 11494  002B0C  D7FD               	goto	u6337
 11495  002B0E  F000               	nop	
 11496                           
 11497                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 11498  002B10  6A0A               	clrf	PortWrite@i,c
 11499  002B12  D00C               	goto	l5738
 11500  002B14                     l74:
 11501  002B14  FFFF               	dw	65535	; assembler added errata NOP
 11502  002B16  A2AC               	btfss	4012,1,c	;volatile
 11503  002B18  D7FD               	goto	l74
 11504                           
 11505                           ;interrupts.c: 108: TXREG = buf[i];
 11506  002B1A  500A               	movf	PortWrite@i,w,c
 11507  002B1C  2407               	addwf	PortWrite@buf,w,c
 11508  002B1E  6ED9               	movwf	fsr2l,c
 11509  002B20  0E00               	movlw	0
 11510  002B22  2008               	addwfc	PortWrite@buf+1,w,c
 11511  002B24  6EDA               	movwf	fsr2h,c
 11512  002B26  50DF               	movf	indf2,w,c
 11513  002B28  6EAD               	movwf	4013,c	;volatile
 11514  002B2A  2A0A               	incf	PortWrite@i,f,c
 11515  002B2C                     l5738:
 11516  002B2C  FFFF               	dw	65535	; assembler added errata NOP
 11517  002B2E  5009               	movf	PortWrite@buflen,w,c
 11518  002B30  5C0A               	subwf	PortWrite@i,w,c
 11519  002B32  E3F0               	bnc	l74
 11520  002B34                     l78:
 11521  002B34  FFFF               	dw	65535	; assembler added errata NOP
 11522  002B36  A2AC               	btfss	4012,1,c	;volatile
 11523  002B38  D7FD               	goto	l78
 11524                           
 11525                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 11526  002B3A  9A8B               	bcf	3979,5,c	;volatile
 11527  002B3C  0012               	return		;funcret
 11528  002B3E  FFFF               	dw	65535	; errata NOP
 11529  002B40                     __end_of_PortWrite:
 11530                           	opt stack 0
 11531                           tblptru	equ	0xFF8
 11532                           tblptrh	equ	0xFF7
 11533                           tblptrl	equ	0xFF6
 11534                           tablat	equ	0xFF5
 11535                           prodh	equ	0xFF4
 11536                           prodl	equ	0xFF3
 11537                           intcon	equ	0xFF2
 11538                           postinc0	equ	0xFEE
 11539                           wreg	equ	0xFE8
 11540                           indf1	equ	0xFE7
 11541                           postinc1	equ	0xFE6
 11542                           postdec1	equ	0xFE5
 11543                           fsr1h	equ	0xFE2
 11544                           fsr1l	equ	0xFE1
 11545                           indf2	equ	0xFDF
 11546                           postinc2	equ	0xFDE
 11547                           postdec2	equ	0xFDD
 11548                           plusw2	equ	0xFDB
 11549                           fsr2h	equ	0xFDA
 11550                           fsr2l	equ	0xFD9
 11551                           status	equ	0xFD8
 11552                           
 11553 ;; *************** function _ModbusCalcCRC *****************
 11554 ;; Defined at:
 11555 ;;		line 744 in file "ModbusRtu.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;  u8length        1    wreg     unsigned char 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  u8length        1   10[COMRAM] unsigned char 
 11560 ;;  j               1   16[COMRAM] unsigned char 
 11561 ;;  i               1   15[COMRAM] unsigned char 
 11562 ;;  temp            2   17[COMRAM] unsigned int 
 11563 ;;  flag            2   13[COMRAM] unsigned int 
 11564 ;;  temp2           2   11[COMRAM] unsigned int 
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  2    6[COMRAM] unsigned short 
 11567 ;; Registers used:
 11568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11574 ;;      Params:         2       0       0       0       0       0       0
 11575 ;;      Locals:         9       0       0       0       0       0       0
 11576 ;;      Temps:          2       0       0       0       0       0       0
 11577 ;;      Totals:        13       0       0       0       0       0       0
 11578 ;;Total ram usage:       13 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    2
 11581 ;; This function calls:
 11582 ;;		Nothing
 11583 ;; This function is called by:
 11584 ;;		_ModbusSendTxBuffer
 11585 ;;		_ModbusValidateRequest
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           	psect	text62
 11590  0025C6                     __ptext62:
 11591                           	opt stack 0
 11592  0025C6                     _ModbusCalcCRC:
 11593                           	opt stack 26
 11594                           
 11595                           ;incstack = 0
 11596  0025C6  FFFF               	dw	65535
 11597                           
 11598                           ;ModbusCalcCRC@u8length stored from wreg
 11599  0025C8  6E0B               	movwf	ModbusCalcCRC@u8length,c
 11600                           
 11601                           ;ModbusRtu.c: 746: unsigned int temp, temp2, flag;
 11602                           ;ModbusRtu.c: 747: temp = 0xFFFF;
 11603  0025CA  6812               	setf	ModbusCalcCRC@temp,c
 11604  0025CC  6813               	setf	ModbusCalcCRC@temp+1,c
 11605                           
 11606                           ;ModbusRtu.c: 748: for (uint8_t i = 0; i < u8length; i++)
 11607  0025CE  6A10               	clrf	ModbusCalcCRC@i,c
 11608  0025D0  D01E               	goto	l5914
 11609  0025D2                     l5892:
 11610                           
 11611                           ;ModbusRtu.c: 749: {
 11612                           ;ModbusRtu.c: 750: temp = temp ^ _au8Buffer[i];
 11613  0025D2  0E00               	movlw	low __au8Buffer
 11614  0025D4  2410               	addwf	ModbusCalcCRC@i,w,c
 11615  0025D6  6ED9               	movwf	fsr2l,c
 11616  0025D8  6ADA               	clrf	fsr2h,c
 11617  0025DA  0E01               	movlw	high __au8Buffer
 11618  0025DC  22DA               	addwfc	fsr2h,f,c
 11619  0025DE  50DF               	movf	indf2,w,c
 11620  0025E0  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 11621                           
 11622                           ;ModbusRtu.c: 751: for (uint8_t j = 1; j <= 8; j++)
 11623  0025E2  0E01               	movlw	1
 11624  0025E4  6E11               	movwf	ModbusCalcCRC@j,c
 11625  0025E6                     l5900:
 11626  0025E6  FFFF               	dw	65535	; assembler added errata NOP
 11627                           
 11628                           ;ModbusRtu.c: 752: {
 11629                           ;ModbusRtu.c: 753: flag = temp & 0x0001;
 11630  0025E8  0E01               	movlw	1
 11631  0025EA  1412               	andwf	ModbusCalcCRC@temp,w,c
 11632  0025EC  6E0E               	movwf	ModbusCalcCRC@flag,c
 11633  0025EE  6A0F               	clrf	ModbusCalcCRC@flag+1,c
 11634                           
 11635                           ;ModbusRtu.c: 754: temp >>= 1;
 11636  0025F0  90D8               	bcf	status,0,c
 11637  0025F2  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 11638  0025F4  3212               	rrcf	ModbusCalcCRC@temp,f,c
 11639                           
 11640                           ;ModbusRtu.c: 755: if (flag)
 11641  0025F6  500E               	movf	ModbusCalcCRC@flag,w,c
 11642  0025F8  100F               	iorwf	ModbusCalcCRC@flag+1,w,c
 11643  0025FA  E004               	bz	l5908
 11644                           
 11645                           ;ModbusRtu.c: 756: temp ^= 0xA001;
 11646  0025FC  0E01               	movlw	1
 11647  0025FE  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 11648  002600  0EA0               	movlw	160
 11649  002602  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 11650  002604                     l5908:
 11651  002604  2A11               	incf	ModbusCalcCRC@j,f,c
 11652  002606  0E08               	movlw	8
 11653  002608  6411               	cpfsgt	ModbusCalcCRC@j,c
 11654  00260A  D7ED               	goto	l5900
 11655  00260C  2A10               	incf	ModbusCalcCRC@i,f,c
 11656  00260E                     l5914:
 11657  00260E  FFFF               	dw	65535	; assembler added errata NOP
 11658  002610  500B               	movf	ModbusCalcCRC@u8length,w,c
 11659  002612  5C10               	subwf	ModbusCalcCRC@i,w,c
 11660  002614  E3DE               	bnc	l5892
 11661                           
 11662                           ;ModbusRtu.c: 757: }
 11663                           ;ModbusRtu.c: 758: }
 11664                           ;ModbusRtu.c: 760: temp2 = temp >> 8;
 11665  002616  C013  F00C         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 11666  00261A  6A0D               	clrf	ModbusCalcCRC@temp2+1,c
 11667                           
 11668                           ;ModbusRtu.c: 761: temp = (temp << 8) | temp2;
 11669  00261C  5012               	movf	ModbusCalcCRC@temp,w,c
 11670  00261E  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 11671  002620  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 11672  002622  500C               	movf	ModbusCalcCRC@temp2,w,c
 11673  002624  1009               	iorwf	??_ModbusCalcCRC,w,c
 11674  002626  6E12               	movwf	ModbusCalcCRC@temp,c
 11675  002628  500D               	movf	ModbusCalcCRC@temp2+1,w,c
 11676  00262A  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 11677  00262C  6E13               	movwf	ModbusCalcCRC@temp+1,c
 11678                           
 11679                           ;ModbusRtu.c: 765: return temp;
 11680  00262E  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 11681  002632  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 11682  002636  0012               	return		;funcret
 11683  002638  FFFF               	dw	65535	; errata NOP
 11684  00263A                     __end_of_ModbusCalcCRC:
 11685                           	opt stack 0
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           postinc0	equ	0xFEE
 11694                           wreg	equ	0xFE8
 11695                           indf1	equ	0xFE7
 11696                           postinc1	equ	0xFE6
 11697                           postdec1	equ	0xFE5
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           plusw2	equ	0xFDB
 11704                           fsr2h	equ	0xFDA
 11705                           fsr2l	equ	0xFD9
 11706                           status	equ	0xFD8
 11707                           
 11708 ;; *************** function _ModbusGetRxBufferHeader *****************
 11709 ;; Defined at:
 11710 ;;		line 577 in file "ModbusRtu.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;		None
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;  i               1    8[COMRAM] unsigned char 
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  1    wreg      unsigned char 
 11717 ;; Registers used:
 11718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11719 ;; Tracked objects:
 11720 ;;		On entry : F/0
 11721 ;;		On exit  : F/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11724 ;;      Params:         0       0       0       0       0       0       0
 11725 ;;      Locals:         1       0       0       0       0       0       0
 11726 ;;      Temps:          1       0       0       0       0       0       0
 11727 ;;      Totals:         2       0       0       0       0       0       0
 11728 ;;Total ram usage:        2 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    3
 11731 ;; This function calls:
 11732 ;;		_PortAvailable
 11733 ;;		_PortRead
 11734 ;; This function is called by:
 11735 ;;		_ModbusPoll
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           	psect	text63
 11740  002B7C                     __ptext63:
 11741                           	opt stack 0
 11742  002B7C                     _ModbusGetRxBufferHeader:
 11743                           	opt stack 26
 11744                           
 11745                           ;incstack = 0
 11746  002B7C  FFFF               	dw	65535
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;ModbusRtu.c: 579: _u8BufferSize = 0;
 11750  002B7E  6A6F               	clrf	__u8BufferSize,c
 11751                           
 11752                           ;ModbusRtu.c: 580: for(uint8_t i = 0; i < 4; i++)
 11753  002B80  6A09               	clrf	ModbusGetRxBufferHeader@i,c
 11754  002B82                     l6364:
 11755  002B82  FFFF               	dw	65535	; assembler added errata NOP
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;ModbusRtu.c: 581: {
 11759                           ;ModbusRtu.c: 582: if(!PortAvailable())
 11760  002B84  EC2A  F017         	call	_PortAvailable	;wreg free
 11761  002B88  0900               	iorlw	0
 11762  002B8A  E102               	bnz	l6370
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;ModbusRtu.c: 583: return ERR_EXCEPTION;
 11766  002B8C  0EFB               	movlw	251
 11767  002B8E  D011               	goto	l794
 11768  002B90                     l6370:
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;ModbusRtu.c: 584: _au8Buffer[ _u8BufferSize ] = PortRead();
 11772  002B90  ECDC  F015         	call	_PortRead	;wreg free
 11773  002B94  6E08               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 11774  002B96  0E00               	movlw	low __au8Buffer
 11775  002B98  246F               	addwf	__u8BufferSize,w,c
 11776  002B9A  6ED9               	movwf	fsr2l,c
 11777  002B9C  6ADA               	clrf	fsr2h,c
 11778  002B9E  0E01               	movlw	high __au8Buffer
 11779  002BA0  22DA               	addwfc	fsr2h,f,c
 11780  002BA2  C008  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;ModbusRtu.c: 585: _u8BufferSize++;
 11784  002BA6  2A6F               	incf	__u8BufferSize,f,c
 11785                           
 11786                           ; BSR set to: 0
 11787  002BA8  2A09               	incf	ModbusGetRxBufferHeader@i,f,c
 11788                           
 11789                           ; BSR set to: 0
 11790  002BAA  0E03               	movlw	3
 11791  002BAC  6409               	cpfsgt	ModbusGetRxBufferHeader@i,c
 11792  002BAE  D7E9               	goto	l6364
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;ModbusRtu.c: 586: }
 11796                           ;ModbusRtu.c: 587: return _u8BufferSize;
 11797  002BB0  506F               	movf	__u8BufferSize,w,c
 11798  002BB2                     l794:
 11799  002BB2  FFFF               	dw	65535	; assembler added errata NOP
 11800                           
 11801                           ; BSR set to: 0
 11802  002BB4  0012               	return		;funcret
 11803  002BB6  FFFF               	dw	65535	; errata NOP
 11804  002BB8                     __end_of_ModbusGetRxBufferHeader:
 11805                           	opt stack 0
 11806                           tblptru	equ	0xFF8
 11807                           tblptrh	equ	0xFF7
 11808                           tblptrl	equ	0xFF6
 11809                           tablat	equ	0xFF5
 11810                           prodh	equ	0xFF4
 11811                           prodl	equ	0xFF3
 11812                           intcon	equ	0xFF2
 11813                           postinc0	equ	0xFEE
 11814                           wreg	equ	0xFE8
 11815                           indf1	equ	0xFE7
 11816                           postinc1	equ	0xFE6
 11817                           postdec1	equ	0xFE5
 11818                           fsr1h	equ	0xFE2
 11819                           fsr1l	equ	0xFE1
 11820                           indf2	equ	0xFDF
 11821                           postinc2	equ	0xFDE
 11822                           postdec2	equ	0xFDD
 11823                           plusw2	equ	0xFDB
 11824                           fsr2h	equ	0xFDA
 11825                           fsr2l	equ	0xFD9
 11826                           status	equ	0xFD8
 11827                           
 11828 ;; *************** function _ModbusGetRxBuffer *****************
 11829 ;; Defined at:
 11830 ;;		line 597 in file "ModbusRtu.c"
 11831 ;; Parameters:    Size  Location     Type
 11832 ;;		None
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 11835 ;; Return value:  Size  Location     Type
 11836 ;;                  1    wreg      unsigned char 
 11837 ;; Registers used:
 11838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11839 ;; Tracked objects:
 11840 ;;		On entry : F/1
 11841 ;;		On exit  : F/0
 11842 ;;		Unchanged: 0/0
 11843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11844 ;;      Params:         0       0       0       0       0       0       0
 11845 ;;      Locals:         1       0       0       0       0       0       0
 11846 ;;      Temps:          1       0       0       0       0       0       0
 11847 ;;      Totals:         2       0       0       0       0       0       0
 11848 ;;Total ram usage:        2 bytes
 11849 ;; Hardware stack levels used:    1
 11850 ;; Hardware stack levels required when called:    3
 11851 ;; This function calls:
 11852 ;;		_PortAvailable
 11853 ;;		_PortRead
 11854 ;; This function is called by:
 11855 ;;		_ModbusPoll
 11856 ;; This function uses a non-reentrant model
 11857 ;;
 11858                           
 11859                           	psect	text64
 11860  002A7E                     __ptext64:
 11861                           	opt stack 0
 11862  002A7E                     _ModbusGetRxBuffer:
 11863                           	opt stack 26
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;incstack = 0
 11867  002A7E  FFFF               	dw	65535
 11868                           
 11869                           ; BSR set to: 1
 11870                           ;ModbusRtu.c: 599: bool bBuffOverflow = 0;
 11871  002A80  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 11872                           
 11873                           ; BSR set to: 1
 11874                           ;ModbusRtu.c: 604: _u8BufferSize = 4;
 11875  002A82  0E04               	movlw	4
 11876  002A84  6E6F               	movwf	__u8BufferSize,c
 11877                           
 11878                           ;ModbusRtu.c: 606: while (PortAvailable())
 11879  002A86  D011               	goto	l6394
 11880  002A88                     l6386:
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;ModbusRtu.c: 607: {
 11884                           ;ModbusRtu.c: 608: _au8Buffer[ _u8BufferSize ] = PortRead();
 11885  002A88  ECDC  F015         	call	_PortRead	;wreg free
 11886  002A8C  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 11887  002A8E  0E00               	movlw	low __au8Buffer
 11888  002A90  246F               	addwf	__u8BufferSize,w,c
 11889  002A92  6ED9               	movwf	fsr2l,c
 11890  002A94  6ADA               	clrf	fsr2h,c
 11891  002A96  0E01               	movlw	high __au8Buffer
 11892  002A98  22DA               	addwfc	fsr2h,f,c
 11893  002A9A  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;ModbusRtu.c: 609: _u8BufferSize++;
 11897  002A9E  2A6F               	incf	__u8BufferSize,f,c
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;ModbusRtu.c: 610: if (_u8BufferSize >= 140)
 11901  002AA0  0E8B               	movlw	139
 11902  002AA2  646F               	cpfsgt	__u8BufferSize,c
 11903  002AA4  D002               	goto	l6394
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;ModbusRtu.c: 611: bBuffOverflow = 1;
 11907  002AA6  0E01               	movlw	1
 11908  002AA8  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 11909  002AAA                     l6394:
 11910  002AAA  FFFF               	dw	65535	; assembler added errata NOP
 11911  002AAC  EC2A  F017         	call	_PortAvailable	;wreg free
 11912  002AB0  0900               	iorlw	0
 11913  002AB2  E1EA               	bnz	l6386
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;ModbusRtu.c: 615: {
 11917                           ;ModbusRtu.c: 616: _u16errCnt++;
 11918  002AB4  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 11919  002AB6  E002               	bz	l6402
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;ModbusRtu.c: 617: return ERR_BUFF_OVERFLOW;
 11923  002AB8  0EFD               	movlw	253
 11924  002ABA  D001               	goto	l802
 11925  002ABC                     l6402:
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;ModbusRtu.c: 618: }
 11929                           ;ModbusRtu.c: 619: return _u8BufferSize;
 11930  002ABC  506F               	movf	__u8BufferSize,w,c
 11931  002ABE                     l802:
 11932  002ABE  FFFF               	dw	65535	; assembler added errata NOP
 11933                           
 11934                           ; BSR set to: 0
 11935  002AC0  0012               	return		;funcret
 11936  002AC2  FFFF               	dw	65535	; errata NOP
 11937  002AC4                     __end_of_ModbusGetRxBuffer:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           intcon	equ	0xFF2
 11946                           postinc0	equ	0xFEE
 11947                           wreg	equ	0xFE8
 11948                           indf1	equ	0xFE7
 11949                           postinc1	equ	0xFE6
 11950                           postdec1	equ	0xFE5
 11951                           fsr1h	equ	0xFE2
 11952                           fsr1l	equ	0xFE1
 11953                           indf2	equ	0xFDF
 11954                           postinc2	equ	0xFDE
 11955                           postdec2	equ	0xFDD
 11956                           plusw2	equ	0xFDB
 11957                           fsr2h	equ	0xFDA
 11958                           fsr2l	equ	0xFD9
 11959                           status	equ	0xFD8
 11960                           
 11961 ;; *************** function _PortRead *****************
 11962 ;; Defined at:
 11963 ;;		line 57 in file "interrupts.c"
 11964 ;; Parameters:    Size  Location     Type
 11965 ;;		None
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;  ret             1    6[COMRAM] unsigned char 
 11968 ;; Return value:  Size  Location     Type
 11969 ;;                  1    wreg      unsigned char 
 11970 ;; Registers used:
 11971 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11972 ;; Tracked objects:
 11973 ;;		On entry : E/0
 11974 ;;		On exit  : F/0
 11975 ;;		Unchanged: 0/0
 11976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11977 ;;      Params:         0       0       0       0       0       0       0
 11978 ;;      Locals:         1       0       0       0       0       0       0
 11979 ;;      Temps:          0       0       0       0       0       0       0
 11980 ;;      Totals:         1       0       0       0       0       0       0
 11981 ;;Total ram usage:        1 bytes
 11982 ;; Hardware stack levels used:    1
 11983 ;; Hardware stack levels required when called:    2
 11984 ;; This function calls:
 11985 ;;		Nothing
 11986 ;; This function is called by:
 11987 ;;		_ModbusGetRxBufferHeader
 11988 ;;		_ModbusGetRxBuffer
 11989 ;; This function uses a non-reentrant model
 11990 ;;
 11991                           
 11992                           	psect	text65
 11993  002BB8                     __ptext65:
 11994                           	opt stack 0
 11995  002BB8                     _PortRead:
 11996                           	opt stack 26
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;incstack = 0
 12000  002BB8  FFFF               	dw	65535
 12001                           
 12002                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 12003  002BBA  9EF2               	bcf	intcon,7,c	;volatile
 12004                           
 12005                           ;interrupts.c: 60: if(UartBufferLen > 0)
 12006  002BBC  0100               	movlb	0	; () banked
 12007  002BBE  51C7               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12008  002BC0  E012               	bz	l63
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;interrupts.c: 61: {
 12012                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 12013  002BC2  0E00               	movlw	low _UartRingBuffer
 12014  002BC4  25C8               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 12015  002BC6  6ED9               	movwf	fsr2l,c
 12016  002BC8  6ADA               	clrf	fsr2h,c
 12017  002BCA  0E02               	movlw	high _UartRingBuffer
 12018  002BCC  22DA               	addwfc	fsr2h,f,c
 12019  002BCE  50DF               	movf	indf2,w,c
 12020  002BD0  6E07               	movwf	PortRead@ret,c
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;interrupts.c: 64: UartBufferLen--;
 12024  002BD2  07C7               	decf	_UartBufferLen& (0+255),f,b	;volatile
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 12028  002BD4  29C8               	incf	_UartBufferTail& (0+255),w,b
 12029  002BD6  E102               	bnz	l6004
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;interrupts.c: 66: UartBufferTail = 0;
 12033  002BD8  6BC8               	clrf	_UartBufferTail& (0+255),b	;volatile
 12034  002BDA  D001               	goto	l6006
 12035  002BDC                     l6004:
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;interrupts.c: 67: else
 12039                           ;interrupts.c: 68: UartBufferTail++;
 12040  002BDC  2BC8               	incf	_UartBufferTail& (0+255),f,b	;volatile
 12041  002BDE                     l6006:
 12042  002BDE  FFFF               	dw	65535	; assembler added errata NOP
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 12046  002BE0  8EF2               	bsf	intcon,7,c	;volatile
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;interrupts.c: 70: return ret;
 12050  002BE2  5007               	movf	PortRead@ret,w,c
 12051  002BE4  D002               	goto	l66
 12052  002BE6                     l63:
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;interrupts.c: 71: }
 12056                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 12057  002BE6  8EF2               	bsf	intcon,7,c	;volatile
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;interrupts.c: 73: return 0;
 12061  002BE8  0E00               	movlw	0
 12062  002BEA                     l66:
 12063  002BEA  FFFF               	dw	65535	; assembler added errata NOP
 12064                           
 12065                           ; BSR set to: 0
 12066  002BEC  0012               	return		;funcret
 12067  002BEE  FFFF               	dw	65535	; errata NOP
 12068  002BF0                     __end_of_PortRead:
 12069                           	opt stack 0
 12070                           tblptru	equ	0xFF8
 12071                           tblptrh	equ	0xFF7
 12072                           tblptrl	equ	0xFF6
 12073                           tablat	equ	0xFF5
 12074                           prodh	equ	0xFF4
 12075                           prodl	equ	0xFF3
 12076                           intcon	equ	0xFF2
 12077                           postinc0	equ	0xFEE
 12078                           wreg	equ	0xFE8
 12079                           indf1	equ	0xFE7
 12080                           postinc1	equ	0xFE6
 12081                           postdec1	equ	0xFE5
 12082                           fsr1h	equ	0xFE2
 12083                           fsr1l	equ	0xFE1
 12084                           indf2	equ	0xFDF
 12085                           postinc2	equ	0xFDE
 12086                           postdec2	equ	0xFDD
 12087                           plusw2	equ	0xFDB
 12088                           fsr2h	equ	0xFDA
 12089                           fsr2l	equ	0xFD9
 12090                           status	equ	0xFD8
 12091                           
 12092 ;; *************** function _PortAvailable *****************
 12093 ;; Defined at:
 12094 ;;		line 52 in file "interrupts.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;		None
 12097 ;; Auto vars:     Size  Location     Type
 12098 ;;		None
 12099 ;; Return value:  Size  Location     Type
 12100 ;;                  1    wreg      unsigned char 
 12101 ;; Registers used:
 12102 ;;		wreg, status,2
 12103 ;; Tracked objects:
 12104 ;;		On entry : E/0
 12105 ;;		On exit  : F/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12108 ;;      Params:         0       0       0       0       0       0       0
 12109 ;;      Locals:         0       0       0       0       0       0       0
 12110 ;;      Temps:          0       0       0       0       0       0       0
 12111 ;;      Totals:         0       0       0       0       0       0       0
 12112 ;;Total ram usage:        0 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:    2
 12115 ;; This function calls:
 12116 ;;		Nothing
 12117 ;; This function is called by:
 12118 ;;		_ModbusPoll
 12119 ;;		_ModbusGetRxBufferHeader
 12120 ;;		_ModbusGetRxBuffer
 12121 ;; This function uses a non-reentrant model
 12122 ;;
 12123                           
 12124                           	psect	text66
 12125  002E54                     __ptext66:
 12126                           	opt stack 0
 12127  002E54                     _PortAvailable:
 12128                           	opt stack 27
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;incstack = 0
 12132  002E54  FFFF               	dw	65535
 12133                           
 12134                           ;interrupts.c: 54: return UartBufferLen;
 12135  002E56  0100               	movlb	0	; () banked
 12136  002E58  51C7               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12137                           
 12138                           ; BSR set to: 0
 12139  002E5A  0012               	return		;funcret
 12140  002E5C  FFFF               	dw	65535	; errata NOP
 12141  002E5E                     __end_of_PortAvailable:
 12142                           	opt stack 0
 12143                           tblptru	equ	0xFF8
 12144                           tblptrh	equ	0xFF7
 12145                           tblptrl	equ	0xFF6
 12146                           tablat	equ	0xFF5
 12147                           prodh	equ	0xFF4
 12148                           prodl	equ	0xFF3
 12149                           intcon	equ	0xFF2
 12150                           postinc0	equ	0xFEE
 12151                           wreg	equ	0xFE8
 12152                           indf1	equ	0xFE7
 12153                           postinc1	equ	0xFE6
 12154                           postdec1	equ	0xFE5
 12155                           fsr1h	equ	0xFE2
 12156                           fsr1l	equ	0xFE1
 12157                           indf2	equ	0xFDF
 12158                           postinc2	equ	0xFDE
 12159                           postdec2	equ	0xFDD
 12160                           plusw2	equ	0xFDB
 12161                           fsr2h	equ	0xFDA
 12162                           fsr2l	equ	0xFD9
 12163                           status	equ	0xFD8
 12164                           
 12165 ;; *************** function _ModbusBuildException *****************
 12166 ;; Defined at:
 12167 ;;		line 896 in file "ModbusRtu.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;  u8exception     1    wreg     unsigned char 
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;  u8exception     1    6[COMRAM] unsigned char 
 12172 ;;  u8func          1    7[COMRAM] unsigned char 
 12173 ;; Return value:  Size  Location     Type
 12174 ;;                  1    wreg      void 
 12175 ;; Registers used:
 12176 ;;		wreg, status,2, status,0
 12177 ;; Tracked objects:
 12178 ;;		On entry : 0/0
 12179 ;;		On exit  : F/1
 12180 ;;		Unchanged: 0/0
 12181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12182 ;;      Params:         0       0       0       0       0       0       0
 12183 ;;      Locals:         2       0       0       0       0       0       0
 12184 ;;      Temps:          0       0       0       0       0       0       0
 12185 ;;      Totals:         2       0       0       0       0       0       0
 12186 ;;Total ram usage:        2 bytes
 12187 ;; Hardware stack levels used:    1
 12188 ;; Hardware stack levels required when called:    2
 12189 ;; This function calls:
 12190 ;;		Nothing
 12191 ;; This function is called by:
 12192 ;;		_ModbusPoll
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           	psect	text67
 12197  002D46                     __ptext67:
 12198                           	opt stack 0
 12199  002D46                     _ModbusBuildException:
 12200                           	opt stack 27
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;incstack = 0
 12204  002D46  FFFF               	dw	65535
 12205                           
 12206                           ;ModbusBuildException@u8exception stored from wreg
 12207  002D48  6E07               	movwf	ModbusBuildException@u8exception,c
 12208                           
 12209                           ;ModbusRtu.c: 898: uint8_t u8func = _au8Buffer[ FUNC ];
 12210  002D4A  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 12211                           
 12212                           ;ModbusRtu.c: 900: _au8Buffer[ ID ] = _u8id;
 12213  002D4E  C0D6  F100         	movff	__u8id,__au8Buffer
 12214                           
 12215                           ;ModbusRtu.c: 901: _au8Buffer[ FUNC ] = u8func + 0x80;
 12216  002D52  5008               	movf	ModbusBuildException@u8func,w,c
 12217  002D54  0F80               	addlw	128
 12218  002D56  0101               	movlb	1	; () banked
 12219  002D58  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 12220                           
 12221                           ; BSR set to: 1
 12222                           ;ModbusRtu.c: 902: _au8Buffer[ 2 ] = u8exception;
 12223  002D5A  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 12224                           
 12225                           ; BSR set to: 1
 12226                           ;ModbusRtu.c: 903: _u8BufferSize = EXCEPTION_SIZE;
 12227  002D5E  0E03               	movlw	3
 12228  002D60  6E6F               	movwf	__u8BufferSize,c
 12229                           
 12230                           ; BSR set to: 1
 12231  002D62  0C03               	retlw	3	;funcret
 12232  002D64  FFFF               	dw	65535	; errata NOP
 12233  002D66                     __end_of_ModbusBuildException:
 12234                           	opt stack 0
 12235                           tblptru	equ	0xFF8
 12236                           tblptrh	equ	0xFF7
 12237                           tblptrl	equ	0xFF6
 12238                           tablat	equ	0xFF5
 12239                           prodh	equ	0xFF4
 12240                           prodl	equ	0xFF3
 12241                           intcon	equ	0xFF2
 12242                           postinc0	equ	0xFEE
 12243                           wreg	equ	0xFE8
 12244                           indf1	equ	0xFE7
 12245                           postinc1	equ	0xFE6
 12246                           postdec1	equ	0xFE5
 12247                           fsr1h	equ	0xFE2
 12248                           fsr1l	equ	0xFE1
 12249                           indf2	equ	0xFDF
 12250                           postinc2	equ	0xFDE
 12251                           postdec2	equ	0xFDD
 12252                           plusw2	equ	0xFDB
 12253                           fsr2h	equ	0xFDA
 12254                           fsr2l	equ	0xFD9
 12255                           status	equ	0xFD8
 12256                           
 12257 ;; *************** function _InitApp *****************
 12258 ;; Defined at:
 12259 ;;		line 66 in file "user.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  i               1    6[COMRAM] unsigned char 
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  1    wreg      void 
 12266 ;; Registers used:
 12267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12273 ;;      Params:         0       0       0       0       0       0       0
 12274 ;;      Locals:         1       0       0       0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0
 12276 ;;      Totals:         1       0       0       0       0       0       0
 12277 ;;Total ram usage:        1 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:    3
 12280 ;; This function calls:
 12281 ;;		_InitUartBuffer
 12282 ;;		_PortBegin
 12283 ;; This function is called by:
 12284 ;;		_main
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           	psect	text68
 12289  0024C4                     __ptext68:
 12290                           	opt stack 0
 12291  0024C4                     _InitApp:
 12292                           	opt stack 27
 12293                           
 12294                           ; BSR set to: 1
 12295                           ;incstack = 0
 12296  0024C4  FFFF               	dw	65535
 12297                           
 12298                           ;user.c: 77: INTCONbits.PEIE = 1;
 12299  0024C6  8CF2               	bsf	intcon,6,c	;volatile
 12300                           
 12301                           ;user.c: 78: (INTCONbits.GIE = 1);
 12302  0024C8  8EF2               	bsf	intcon,7,c	;volatile
 12303                           
 12304                           ;user.c: 79: RCONbits.IPEN = 1;
 12305  0024CA  8ED0               	bsf	4048,7,c	;volatile
 12306                           
 12307                           ;user.c: 84: T1CONbits.RD16 = 1;
 12308  0024CC  8ECD               	bsf	4045,7,c	;volatile
 12309                           
 12310                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 12311  0024CE  94CD               	bcf	4045,2,c	;volatile
 12312                           
 12313                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 12314  0024D0  92CD               	bcf	4045,1,c	;volatile
 12315                           
 12316                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 12317  0024D2  0ECF               	movlw	-49
 12318  0024D4  16CD               	andwf	4045,f,c	;volatile
 12319                           
 12320                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 12321  0024D6  809D               	bsf	3997,0,c	;volatile
 12322                           
 12323                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 12324  0024D8  809F               	bsf	3999,0,c	;volatile
 12325                           
 12326                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 12327  0024DA  0EF6               	movlw	246
 12328  0024DC  6ECF               	movwf	4047,c	;volatile
 12329  0024DE  0E3C               	movlw	60
 12330  0024E0  6ECE               	movwf	4046,c	;volatile
 12331                           
 12332                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 12333  0024E2  909E               	bcf	3998,0,c	;volatile
 12334                           
 12335                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 12336  0024E4  80CD               	bsf	4045,0,c	;volatile
 12337                           
 12338                           ;user.c: 103: T0CONbits.T08BIT = 0;
 12339  0024E6  9CD5               	bcf	4053,6,c	;volatile
 12340                           
 12341                           ;user.c: 104: T0CONbits.T0CS = 0;
 12342  0024E8  9AD5               	bcf	4053,5,c	;volatile
 12343                           
 12344                           ;user.c: 106: T0CONbits.PSA = 0;
 12345  0024EA  96D5               	bcf	4053,3,c	;volatile
 12346                           
 12347                           ;user.c: 117: T0CONbits.T0PS = 7;
 12348  0024EC  0E07               	movlw	7
 12349  0024EE  12D5               	iorwf	4053,f,c	;volatile
 12350                           
 12351                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 12352  0024F0  8AF2               	bsf	intcon,5,c	;volatile
 12353                           
 12354                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 12355  0024F2  84F1               	bsf	intcon2,2,c	;volatile
 12356                           
 12357                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 12358  0024F4  0E1B               	movlw	27
 12359  0024F6  6ED7               	movwf	4055,c	;volatile
 12360  0024F8  0E28               	movlw	40
 12361  0024FA  6ED6               	movwf	4054,c	;volatile
 12362                           
 12363                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 12364  0024FC  94F2               	bcf	intcon,2,c	;volatile
 12365                           
 12366                           ;user.c: 133: InitUartBuffer();
 12367  0024FE  EC1D  F017         	call	_InitUartBuffer	;wreg free
 12368                           
 12369                           ;user.c: 135: PortBegin();
 12370  002502  ECCF  F016         	call	_PortBegin	;wreg free
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;user.c: 136: PIE1bits.RCIE = 1;
 12374  002506  8A9D               	bsf	3997,5,c	;volatile
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;user.c: 138: IPR1bits.RCIP = 0;
 12378  002508  9A9F               	bcf	3999,5,c	;volatile
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 12382  00250A  6A07               	clrf	InitApp@i,c
 12383  00250C                     l7284:
 12384  00250C  FFFF               	dw	65535	; assembler added errata NOP
 12385                           
 12386                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 12387  00250E  5007               	movf	InitApp@i,w,c
 12388  002510  0D02               	mullw	2
 12389  002512  0EAA               	movlw	low __MODBUSInputRegs
 12390  002514  24F3               	addwf	prodl,w,c
 12391  002516  6ED9               	movwf	fsr2l,c
 12392  002518  0E01               	movlw	high __MODBUSInputRegs
 12393  00251A  20F4               	addwfc	prodh,w,c
 12394  00251C  6EDA               	movwf	fsr2h,c
 12395  00251E  6ADE               	clrf	postinc2,c
 12396  002520  6ADD               	clrf	postdec2,c
 12397  002522  2A07               	incf	InitApp@i,f,c
 12398  002524  0E0E               	movlw	14
 12399  002526  6407               	cpfsgt	InitApp@i,c
 12400  002528  D7F1               	goto	l7284
 12401                           
 12402                           ;user.c: 149: TRISB = 0;
 12403  00252A  6A93               	clrf	3987,c	;volatile
 12404                           
 12405                           ;user.c: 152: LATAbits.LATA0 = 0;
 12406  00252C  9089               	bcf	3977,0,c	;volatile
 12407                           
 12408                           ;user.c: 153: LATAbits.LATA1 = 0;
 12409  00252E  9289               	bcf	3977,1,c	;volatile
 12410                           
 12411                           ;user.c: 154: LATAbits.LATA2 = 0;
 12412  002530  9489               	bcf	3977,2,c	;volatile
 12413                           
 12414                           ;user.c: 155: LATAbits.LATA3 = 0;
 12415  002532  9689               	bcf	3977,3,c	;volatile
 12416                           
 12417                           ;user.c: 156: TRISAbits.RA0 = 0;
 12418  002534  9092               	bcf	3986,0,c	;volatile
 12419                           
 12420                           ;user.c: 157: TRISAbits.RA1 = 0;
 12421  002536  9292               	bcf	3986,1,c	;volatile
 12422                           
 12423                           ;user.c: 158: TRISAbits.RA2 = 0;
 12424  002538  9492               	bcf	3986,2,c	;volatile
 12425                           
 12426                           ;user.c: 159: TRISAbits.RA3 = 0;
 12427  00253A  9692               	bcf	3986,3,c	;volatile
 12428                           
 12429                           ;user.c: 161: TRISCbits.RC3 = 1;
 12430  00253C  8694               	bsf	3988,3,c	;volatile
 12431                           
 12432                           ;user.c: 162: TRISCbits.RC1 = 1;
 12433  00253E  8294               	bsf	3988,1,c	;volatile
 12434                           
 12435                           ;user.c: 163: TRISCbits.RC0 = 0;
 12436  002540  9094               	bcf	3988,0,c	;volatile
 12437                           
 12438                           ;user.c: 165: LATCbits.LATC2 = 0;
 12439  002542  948B               	bcf	3979,2,c	;volatile
 12440  002544  0012               	return		;funcret
 12441  002546  FFFF               	dw	65535	; errata NOP
 12442  002548                     __end_of_InitApp:
 12443                           	opt stack 0
 12444                           tblptru	equ	0xFF8
 12445                           tblptrh	equ	0xFF7
 12446                           tblptrl	equ	0xFF6
 12447                           tablat	equ	0xFF5
 12448                           prodh	equ	0xFF4
 12449                           prodl	equ	0xFF3
 12450                           intcon	equ	0xFF2
 12451                           intcon2	equ	0xFF1
 12452                           postinc0	equ	0xFEE
 12453                           wreg	equ	0xFE8
 12454                           indf1	equ	0xFE7
 12455                           postinc1	equ	0xFE6
 12456                           postdec1	equ	0xFE5
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           plusw2	equ	0xFDB
 12463                           fsr2h	equ	0xFDA
 12464                           fsr2l	equ	0xFD9
 12465                           status	equ	0xFD8
 12466                           
 12467 ;; *************** function _PortBegin *****************
 12468 ;; Defined at:
 12469 ;;		line 48 in file "user.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;		None
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		wreg, status,2
 12478 ;; Tracked objects:
 12479 ;;		On entry : F/0
 12480 ;;		On exit  : F/0
 12481 ;;		Unchanged: F/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12483 ;;      Params:         0       0       0       0       0       0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0
 12486 ;;      Totals:         0       0       0       0       0       0       0
 12487 ;;Total ram usage:        0 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    2
 12490 ;; This function calls:
 12491 ;;		Nothing
 12492 ;; This function is called by:
 12493 ;;		_InitApp
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text69
 12498  002D9E                     __ptext69:
 12499                           	opt stack 0
 12500  002D9E                     _PortBegin:
 12501                           	opt stack 27
 12502                           
 12503                           ;incstack = 0
 12504  002D9E  FFFF               	dw	65535
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;user.c: 50: TXSTA = 0;
 12508  002DA0  6AAC               	clrf	4012,c	;volatile
 12509                           
 12510                           ;user.c: 51: TXSTAbits.TXEN = 1;
 12511  002DA2  8AAC               	bsf	4012,5,c	;volatile
 12512                           
 12513                           ;user.c: 52: TXSTAbits.BRGH = 1;
 12514  002DA4  84AC               	bsf	4012,2,c	;volatile
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 12518  002DA6  0E40               	movlw	64
 12519  002DA8  6EAF               	movwf	4015,c	;volatile
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;user.c: 55: RCSTA = 0;
 12523  002DAA  6AAB               	clrf	4011,c	;volatile
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;user.c: 56: RCSTAbits.SPEN = 1;
 12527  002DAC  8EAB               	bsf	4011,7,c	;volatile
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;user.c: 57: RCSTAbits.CREN = 1;
 12531  002DAE  88AB               	bsf	4011,4,c	;volatile
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;user.c: 59: TRISCbits.RC5 = 0;
 12535  002DB0  9A94               	bcf	3988,5,c	;volatile
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;user.c: 60: LATCbits.LATC5 = 0;
 12539  002DB2  9A8B               	bcf	3979,5,c	;volatile
 12540                           
 12541                           ; BSR set to: 0
 12542  002DB4  0012               	return		;funcret
 12543  002DB6  FFFF               	dw	65535	; errata NOP
 12544  002DB8                     __end_of_PortBegin:
 12545                           	opt stack 0
 12546                           tblptru	equ	0xFF8
 12547                           tblptrh	equ	0xFF7
 12548                           tblptrl	equ	0xFF6
 12549                           tablat	equ	0xFF5
 12550                           prodh	equ	0xFF4
 12551                           prodl	equ	0xFF3
 12552                           intcon	equ	0xFF2
 12553                           intcon2	equ	0xFF1
 12554                           postinc0	equ	0xFEE
 12555                           wreg	equ	0xFE8
 12556                           indf1	equ	0xFE7
 12557                           postinc1	equ	0xFE6
 12558                           postdec1	equ	0xFE5
 12559                           fsr1h	equ	0xFE2
 12560                           fsr1l	equ	0xFE1
 12561                           indf2	equ	0xFDF
 12562                           postinc2	equ	0xFDE
 12563                           postdec2	equ	0xFDD
 12564                           plusw2	equ	0xFDB
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function _InitUartBuffer *****************
 12570 ;; Defined at:
 12571 ;;		line 44 in file "interrupts.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;		None
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		None
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : F/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12585 ;;      Params:         0       0       0       0       0       0       0
 12586 ;;      Locals:         0       0       0       0       0       0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0
 12588 ;;      Totals:         0       0       0       0       0       0       0
 12589 ;;Total ram usage:        0 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    2
 12592 ;; This function calls:
 12593 ;;		Nothing
 12594 ;; This function is called by:
 12595 ;;		_PortClearReadBuffer
 12596 ;;		_InitApp
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text70
 12601  002E3A                     __ptext70:
 12602                           	opt stack 0
 12603  002E3A                     _InitUartBuffer:
 12604                           	opt stack 26
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;incstack = 0
 12608  002E3A  FFFF               	dw	65535
 12609                           
 12610                           ;interrupts.c: 46: UartBufferHead = 0;
 12611  002E3C  0100               	movlb	0	; () banked
 12612  002E3E  6BC6               	clrf	_UartBufferHead& (0+255),b	;volatile
 12613                           
 12614                           ;interrupts.c: 47: UartBufferTail = 0;
 12615  002E40  6BC8               	clrf	_UartBufferTail& (0+255),b	;volatile
 12616                           
 12617                           ;interrupts.c: 48: UartBufferLen = 0;
 12618  002E42  6BC7               	clrf	_UartBufferLen& (0+255),b	;volatile
 12619                           
 12620                           ; BSR set to: 0
 12621  002E44  0012               	return		;funcret
 12622  002E46  FFFF               	dw	65535	; errata NOP
 12623  002E48                     __end_of_InitUartBuffer:
 12624                           	opt stack 0
 12625                           tblptru	equ	0xFF8
 12626                           tblptrh	equ	0xFF7
 12627                           tblptrl	equ	0xFF6
 12628                           tablat	equ	0xFF5
 12629                           prodh	equ	0xFF4
 12630                           prodl	equ	0xFF3
 12631                           intcon	equ	0xFF2
 12632                           intcon2	equ	0xFF1
 12633                           postinc0	equ	0xFEE
 12634                           wreg	equ	0xFE8
 12635                           indf1	equ	0xFE7
 12636                           postinc1	equ	0xFE6
 12637                           postdec1	equ	0xFE5
 12638                           fsr1h	equ	0xFE2
 12639                           fsr1l	equ	0xFE1
 12640                           indf2	equ	0xFDF
 12641                           postinc2	equ	0xFDE
 12642                           postdec2	equ	0xFDD
 12643                           plusw2	equ	0xFDB
 12644                           fsr2h	equ	0xFDA
 12645                           fsr2l	equ	0xFD9
 12646                           status	equ	0xFD8
 12647                           
 12648 ;; *************** function _ConfigureOscillator *****************
 12649 ;; Defined at:
 12650 ;;		line 86 in file "system.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;		None
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;		None
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      void 
 12657 ;; Registers used:
 12658 ;;		None
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12664 ;;      Params:         0       0       0       0       0       0       0
 12665 ;;      Locals:         0       0       0       0       0       0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0
 12667 ;;      Totals:         0       0       0       0       0       0       0
 12668 ;;Total ram usage:        0 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    2
 12671 ;; This function calls:
 12672 ;;		Nothing
 12673 ;; This function is called by:
 12674 ;;		_main
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           	psect	text71
 12679  002E86                     __ptext71:
 12680                           	opt stack 0
 12681  002E86                     _ConfigureOscillator:
 12682                           	opt stack 28
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;incstack = 0
 12686  002E86  FFFF               	dw	65535
 12687  002E88  0012               	return		;funcret
 12688  002E8A  FFFF               	dw	65535	; errata NOP
 12689  002E8C                     __end_of_ConfigureOscillator:
 12690                           	opt stack 0
 12691                           tblptru	equ	0xFF8
 12692                           tblptrh	equ	0xFF7
 12693                           tblptrl	equ	0xFF6
 12694                           tablat	equ	0xFF5
 12695                           prodh	equ	0xFF4
 12696                           prodl	equ	0xFF3
 12697                           intcon	equ	0xFF2
 12698                           intcon2	equ	0xFF1
 12699                           postinc0	equ	0xFEE
 12700                           wreg	equ	0xFE8
 12701                           indf1	equ	0xFE7
 12702                           postinc1	equ	0xFE6
 12703                           postdec1	equ	0xFE5
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           plusw2	equ	0xFDB
 12710                           fsr2h	equ	0xFDA
 12711                           fsr2l	equ	0xFD9
 12712                           status	equ	0xFD8
 12713                           
 12714 ;; *************** function _AddSecond *****************
 12715 ;; Defined at:
 12716 ;;		line 180 in file "user.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;		None
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;		None
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      void 
 12723 ;; Registers used:
 12724 ;;		wreg, status,2, status,0
 12725 ;; Tracked objects:
 12726 ;;		On entry : F/0
 12727 ;;		On exit  : F/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12730 ;;      Params:         0       0       0       0       0       0       0
 12731 ;;      Locals:         0       0       0       0       0       0       0
 12732 ;;      Temps:          0       0       0       0       0       0       0
 12733 ;;      Totals:         0       0       0       0       0       0       0
 12734 ;;Total ram usage:        0 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    2
 12737 ;; This function calls:
 12738 ;;		Nothing
 12739 ;; This function is called by:
 12740 ;;		_main
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           	psect	text72
 12745  002E0E                     __ptext72:
 12746                           	opt stack 0
 12747  002E0E                     _AddSecond:
 12748                           	opt stack 28
 12749                           
 12750                           ;incstack = 0
 12751  002E0E  FFFF               	dw	65535
 12752                           
 12753                           ; BSR set to: 0
 12754                           ;user.c: 182: currentTime++;
 12755  002E10  2BDA               	incf	_currentTime& (0+255),f,b
 12756  002E12  0E00               	movlw	0
 12757  002E14  23DB               	addwfc	(_currentTime+1)& (0+255),f,b
 12758  002E16  23DC               	addwfc	(_currentTime+2)& (0+255),f,b
 12759  002E18  23DD               	addwfc	(_currentTime+3)& (0+255),f,b
 12760                           
 12761                           ; BSR set to: 0
 12762  002E1A  0C00               	retlw	0	;funcret
 12763  002E1C  FFFF               	dw	65535	; errata NOP
 12764  002E1E                     __end_of_AddSecond:
 12765                           	opt stack 0
 12766                           tblptru	equ	0xFF8
 12767                           tblptrh	equ	0xFF7
 12768                           tblptrl	equ	0xFF6
 12769                           tablat	equ	0xFF5
 12770                           prodh	equ	0xFF4
 12771                           prodl	equ	0xFF3
 12772                           intcon	equ	0xFF2
 12773                           intcon2	equ	0xFF1
 12774                           postinc0	equ	0xFEE
 12775                           wreg	equ	0xFE8
 12776                           indf1	equ	0xFE7
 12777                           postinc1	equ	0xFE6
 12778                           postdec1	equ	0xFE5
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           plusw2	equ	0xFDB
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function _low_isr *****************
 12790 ;; Defined at:
 12791 ;;		line 183 in file "interrupts.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;		None
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;  c               1    5[COMRAM] unsigned char 
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      void 
 12798 ;; Registers used:
 12799 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12805 ;;      Params:         0       0       0       0       0       0       0
 12806 ;;      Locals:         1       0       0       0       0       0       0
 12807 ;;      Temps:          5       0       0       0       0       0       0
 12808 ;;      Totals:         6       0       0       0       0       0       0
 12809 ;;Total ram usage:        6 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    1
 12812 ;; This function calls:
 12813 ;;		Nothing
 12814 ;; This function is called by:
 12815 ;;		Interrupt level 1
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	intcodelo
 12820  000018                     __pintcodelo:
 12821                           	opt stack 0
 12822  000018                     _low_isr:
 12823                           	opt stack 0
 12824  000018  FFFF               	dw	65535	; assembler added errata NOP
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;incstack = 0
 12828  00001A  8076               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12829  00001C  FFFF               	dw	65535	; errata NOP
 12830  00001E  CFD8 F001          	movff	status,??_low_isr
 12831  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 12832  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 12833  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 12834  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 12835                           
 12836                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 12837  000032  BA9E               	btfsc	3998,5,c	;volatile
 12838  000034  AA9D               	btfss	3997,5,c	;volatile
 12839  000036  D016               	goto	i1l97
 12840  000038                     i1l98:
 12841  000038  FFFF               	dw	65535	; assembler added errata NOP
 12842  00003A  AA9E               	btfss	3998,5,c	;volatile
 12843  00003C  D7FD               	goto	i1l98
 12844                           
 12845                           ;interrupts.c: 211: uint8_t c = RCREG;
 12846  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 12847                           
 12848                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 12849  000042  0E00               	movlw	low _UartRingBuffer
 12850  000044  0100               	movlb	0	; () banked
 12851  000046  25C6               	addwf	_UartBufferHead& (0+255),w,b	;volatile
 12852  000048  6ED9               	movwf	fsr2l,c
 12853  00004A  6ADA               	clrf	fsr2h,c
 12854  00004C  0E02               	movlw	high _UartRingBuffer
 12855  00004E  22DA               	addwfc	fsr2h,f,c
 12856  000050  C006  FFDF         	movff	low_isr@c,indf2
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;interrupts.c: 215: UartBufferLen++;
 12860  000054  2BC7               	incf	_UartBufferLen& (0+255),f,b	;volatile
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 12864  000056  29C6               	incf	_UartBufferHead& (0+255),w,b
 12865  000058  E102               	bnz	i1l5520
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;interrupts.c: 217: UartBufferHead = 0;
 12869  00005A  6BC6               	clrf	_UartBufferHead& (0+255),b	;volatile
 12870  00005C  D001               	goto	i1l5522
 12871  00005E                     i1l5520:
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;interrupts.c: 218: else
 12875                           ;interrupts.c: 219: UartBufferHead++;
 12876  00005E  2BC6               	incf	_UartBufferHead& (0+255),f,b	;volatile
 12877  000060                     i1l5522:
 12878  000060  FFFF               	dw	65535	; assembler added errata NOP
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 12882  000062  9A9E               	bcf	3998,5,c	;volatile
 12883  000064                     i1l97:
 12884  000064  FFFF               	dw	65535	; assembler added errata NOP
 12885  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 12886  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 12887  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 12888  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 12889  000076  C001  FFD8         	movff	??_low_isr,status
 12890  00007A  9076               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12891  00007C  0010               	retfie	
 12892  00007E  FFFF               	dw	65535	; errata NOP
 12893  000080                     __end_of_low_isr:
 12894                           	opt stack 0
 12895                           tblptru	equ	0xFF8
 12896                           tblptrh	equ	0xFF7
 12897                           tblptrl	equ	0xFF6
 12898                           tablat	equ	0xFF5
 12899                           prodh	equ	0xFF4
 12900                           prodl	equ	0xFF3
 12901                           intcon	equ	0xFF2
 12902                           intcon2	equ	0xFF1
 12903                           postinc0	equ	0xFEE
 12904                           wreg	equ	0xFE8
 12905                           indf1	equ	0xFE7
 12906                           postinc1	equ	0xFE6
 12907                           postdec1	equ	0xFE5
 12908                           fsr1h	equ	0xFE2
 12909                           fsr1l	equ	0xFE1
 12910                           bsr	equ	0xFE0
 12911                           indf2	equ	0xFDF
 12912                           postinc2	equ	0xFDE
 12913                           postdec2	equ	0xFDD
 12914                           plusw2	equ	0xFDB
 12915                           fsr2h	equ	0xFDA
 12916                           fsr2l	equ	0xFD9
 12917                           status	equ	0xFD8
 12918                           
 12919 ;; *************** function _high_isr *****************
 12920 ;; Defined at:
 12921 ;;		line 122 in file "interrupts.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;		None
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;		None
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      void 
 12928 ;; Registers used:
 12929 ;;		wreg, status,2, status,0
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12935 ;;      Params:         0       0       0       0       0       0       0
 12936 ;;      Locals:         0       0       0       0       0       0       0
 12937 ;;      Temps:          0       0       0       0       0       0       0
 12938 ;;      Totals:         0       0       0       0       0       0       0
 12939 ;;Total ram usage:        0 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; This function calls:
 12942 ;;		Nothing
 12943 ;; This function is called by:
 12944 ;;		Interrupt level 2
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           	psect	intcode
 12949  000008                     __pintcode:
 12950                           	opt stack 0
 12951  000008                     _high_isr:
 12952                           	opt stack 0
 12953  000008  FFFF               	dw	65535	; assembler added errata NOP
 12954                           
 12955                           ;incstack = 0
 12956  00000A  8276               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12957  00000C  FFFF               	dw	65535	; errata NOP
 12958  00000E  EFB8  F013         	goto	int_func
 12959                           tblptru	equ	0xFF8
 12960                           tblptrh	equ	0xFF7
 12961                           tblptrl	equ	0xFF6
 12962                           tablat	equ	0xFF5
 12963                           prodh	equ	0xFF4
 12964                           prodl	equ	0xFF3
 12965                           intcon	equ	0xFF2
 12966                           intcon2	equ	0xFF1
 12967                           postinc0	equ	0xFEE
 12968                           wreg	equ	0xFE8
 12969                           indf1	equ	0xFE7
 12970                           postinc1	equ	0xFE6
 12971                           postdec1	equ	0xFE5
 12972                           fsr1h	equ	0xFE2
 12973                           fsr1l	equ	0xFE1
 12974                           bsr	equ	0xFE0
 12975                           indf2	equ	0xFDF
 12976                           postinc2	equ	0xFDE
 12977                           postdec2	equ	0xFDD
 12978                           plusw2	equ	0xFDB
 12979                           fsr2h	equ	0xFDA
 12980                           fsr2l	equ	0xFD9
 12981                           status	equ	0xFD8
 12982                           
 12983                           	psect	intcode_body
 12984  002770                     __pintcode_body:
 12985                           	opt stack 23
 12986  002770                     int_func:
 12987                           	opt stack 23
 12988  002770  FFFF               	dw	65535	; errata NOP
 12989                           
 12990                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 12991  002772  B09E               	btfsc	3998,0,c	;volatile
 12992  002774  A09D               	btfss	3997,0,c	;volatile
 12993  002776  D00C               	goto	i2l84
 12994                           
 12995                           ;interrupts.c: 144: {
 12996                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 12997  002778  909E               	bcf	3998,0,c	;volatile
 12998                           
 12999                           ;interrupts.c: 146: millisecondsFromStart++;
 13000  00277A  0100               	movlb	0	; () banked
 13001  00277C  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 13002  00277E  0E00               	movlw	0
 13003  002780  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 13004  002782  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 13005  002784  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 13009  002786  0EF6               	movlw	246
 13010  002788  6ECF               	movwf	4047,c	;volatile
 13011                           
 13012                           ; BSR set to: 0
 13013  00278A  0E3C               	movlw	60
 13014  00278C  6ECE               	movwf	4046,c	;volatile
 13015  00278E  D01C               	goto	i2l85
 13016  002790                     i2l84:
 13017  002790  FFFF               	dw	65535	; assembler added errata NOP
 13018                           
 13019                           ;interrupts.c: 149: }
 13020                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 13021  002792  A4F2               	btfss	intcon,2,c	;volatile
 13022  002794  D019               	goto	i2l85
 13023                           
 13024                           ;interrupts.c: 152: {
 13025                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 13026  002796  94F2               	bcf	intcon,2,c	;volatile
 13027                           
 13028                           ;interrupts.c: 154: _6sCounter++;
 13029  002798  0100               	movlb	0	; () banked
 13030  00279A  2BC9               	incf	__6sCounter& (0+255),f,b	;volatile
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;interrupts.c: 155: if(_6sCounter == 10)
 13034  00279C  0E0A               	movlw	10
 13035  00279E  19C9               	xorwf	__6sCounter& (0+255),w,b	;volatile
 13036  0027A0  E10F               	bnz	i2l5500
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;interrupts.c: 156: {
 13040                           ;interrupts.c: 157: _6sCounter = 0;
 13041  0027A2  6BC9               	clrf	__6sCounter& (0+255),b	;volatile
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;interrupts.c: 158: globalMinutes++;
 13045  0027A4  2A72               	incf	_globalMinutes,f,c	;volatile
 13046                           
 13047                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 13048  0027A6  4BC2               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 13049  0027A8  2BC3               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;interrupts.c: 160: if(globalMinutes == 60)
 13053  0027AA  0E3C               	movlw	60
 13054  0027AC  1872               	xorwf	_globalMinutes,w,c	;volatile
 13055  0027AE  E108               	bnz	i2l5500
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;interrupts.c: 161: {
 13059                           ;interrupts.c: 162: globalMinutes = 0;
 13060  0027B0  6A72               	clrf	_globalMinutes,c	;volatile
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;interrupts.c: 163: globalHours++;
 13064  0027B2  2A75               	incf	_globalHours,f,c	;volatile
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;interrupts.c: 164: if(globalHours == 24)
 13068  0027B4  0E18               	movlw	24
 13069  0027B6  1875               	xorwf	_globalHours,w,c	;volatile
 13070  0027B8  E103               	bnz	i2l5500
 13071                           
 13072                           ; BSR set to: 0
 13073                           ;interrupts.c: 165: {
 13074                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 13075  0027BA  6BC2               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 13076  0027BC  6BC3               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 13077                           
 13078                           ;interrupts.c: 167: globalHours = 0;
 13079  0027BE  6A75               	clrf	_globalHours,c	;volatile
 13080  0027C0                     i2l5500:
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;interrupts.c: 168: }
 13084                           ;interrupts.c: 169: }
 13085                           ;interrupts.c: 170: }
 13086                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 13087  0027C0  0E1B               	movlw	27
 13088  0027C2  6ED7               	movwf	4055,c	;volatile
 13089  0027C4  0E28               	movlw	40
 13090  0027C6  6ED6               	movwf	4054,c	;volatile
 13091  0027C8                     i2l85:
 13092  0027C8  FFFF               	dw	65535	; assembler added errata NOP
 13093  0027CA  9276               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13094  0027CC  0011               	retfie		f
 13095  0027CE  FFFF               	dw	65535	; errata NOP
 13096  0027D0                     __end_of_high_isr:
 13097                           	opt stack 0
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           intcon2	equ	0xFF1
 13106                           postinc0	equ	0xFEE
 13107                           wreg	equ	0xFE8
 13108                           indf1	equ	0xFE7
 13109                           postinc1	equ	0xFE6
 13110                           postdec1	equ	0xFE5
 13111                           fsr1h	equ	0xFE2
 13112                           fsr1l	equ	0xFE1
 13113                           bsr	equ	0xFE0
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           postdec2	equ	0xFDD
 13117                           plusw2	equ	0xFDB
 13118                           fsr2h	equ	0xFDA
 13119                           fsr2l	equ	0xFD9
 13120                           status	equ	0xFD8
 13121                           tblptru	equ	0xFF8
 13122                           tblptrh	equ	0xFF7
 13123                           tblptrl	equ	0xFF6
 13124                           tablat	equ	0xFF5
 13125                           prodh	equ	0xFF4
 13126                           prodl	equ	0xFF3
 13127                           intcon	equ	0xFF2
 13128                           intcon2	equ	0xFF1
 13129                           postinc0	equ	0xFEE
 13130                           wreg	equ	0xFE8
 13131                           indf1	equ	0xFE7
 13132                           postinc1	equ	0xFE6
 13133                           postdec1	equ	0xFE5
 13134                           fsr1h	equ	0xFE2
 13135                           fsr1l	equ	0xFE1
 13136                           bsr	equ	0xFE0
 13137                           indf2	equ	0xFDF
 13138                           postinc2	equ	0xFDE
 13139                           postdec2	equ	0xFDD
 13140                           plusw2	equ	0xFDB
 13141                           fsr2h	equ	0xFDA
 13142                           fsr2l	equ	0xFD9
 13143                           status	equ	0xFD8
 13144                           
 13145                           	psect	rparam
 13146  0000                     tblptru	equ	0xFF8
 13147                           tblptrh	equ	0xFF7
 13148                           tblptrl	equ	0xFF6
 13149                           tablat	equ	0xFF5
 13150                           prodh	equ	0xFF4
 13151                           prodl	equ	0xFF3
 13152                           intcon	equ	0xFF2
 13153                           intcon2	equ	0xFF1
 13154                           postinc0	equ	0xFEE
 13155                           wreg	equ	0xFE8
 13156                           indf1	equ	0xFE7
 13157                           postinc1	equ	0xFE6
 13158                           postdec1	equ	0xFE5
 13159                           fsr1h	equ	0xFE2
 13160                           fsr1l	equ	0xFE1
 13161                           bsr	equ	0xFE0
 13162                           indf2	equ	0xFDF
 13163                           postinc2	equ	0xFDE
 13164                           postdec2	equ	0xFDD
 13165                           plusw2	equ	0xFDB
 13166                           fsr2h	equ	0xFDA
 13167                           fsr2l	equ	0xFD9
 13168                           status	equ	0xFD8
 13169                           
 13170                           	psect	temp
 13171  000076                     btemp:
 13172                           	opt stack 0
 13173  000076                     	ds	1
 13174  0000                     int$flags	set	btemp
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon2	equ	0xFF1
 13183                           postinc0	equ	0xFEE
 13184                           wreg	equ	0xFE8
 13185                           indf1	equ	0xFE7
 13186                           postinc1	equ	0xFE6
 13187                           postdec1	equ	0xFE5
 13188                           fsr1h	equ	0xFE2
 13189                           fsr1l	equ	0xFE1
 13190                           bsr	equ	0xFE0
 13191                           indf2	equ	0xFDF
 13192                           postinc2	equ	0xFDE
 13193                           postdec2	equ	0xFDD
 13194                           plusw2	equ	0xFDB
 13195                           fsr2h	equ	0xFDA
 13196                           fsr2l	equ	0xFD9
 13197                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    15
    Data        3
    BSS         567
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     117
    BANK0           128     11     116
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> ModbusProcess_FC100@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(1) Largest target is 1
		 -> io_poll@lastCommand(COMRAM[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    io_poll@lastFunction	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandId(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(BANK0[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandData(BANK0[1]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(1) Largest target is 2
		 -> ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_ModbusPoll
    _io_poll->_ProcessUserCommands
    _ProcessUserCommands->_CommandSetStatusLed
    _CommandSetStatusLed->_PlaySound
    _InitFromEeprom->_ShowFailure
    _ShowFailure->_LightLed
    _ShowFailure->_LightStatusLed
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   53790
                                            103 COMRAM     5     5      0
                                              0 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             11    11      0   14719
                                             40 COMRAM    10    10      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  7     7      0    6965
                                             33 COMRAM     7     7      0
                _CommandSetStatusLed
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  3     3      0    2852
                                             30 COMRAM     3     3      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     373
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       4     4      0    4875
                                             15 COMRAM     4     4      0
                      _LoadNextEvent
                             _Modbus
                        _ShowFailure
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _ShowFailure                                          1     1      0    3791
                                             14 COMRAM     1     1      0
                           _LightLed
                     _LightStatusLed
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1234
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2594
                                             14 COMRAM     5     5      0
            _GetCurrentEventDiodeNum
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0     126
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3961
                                             30 COMRAM     6     6      0
            _GetCurrentEventDiodeNum
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     814
                                             22 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Hi (ARG)
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    8     8      0     275
                                             14 COMRAM     8     8      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LoadNextEvent                                        5     5      0     295
                                              7 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _getTotalMinutes                                      1     1      0      97
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LightLed                                             8     6      2    2526
                                              6 COMRAM     8     6      2
            _GetCurrentEventDiodeNum (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentEventDiodeNum                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   25228
                                             91 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0    1187
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1041
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0    1022
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3433
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    2351
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1378
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1060
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1360
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1331
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0    6456
                                             68 COMRAM    23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          20    14      6    1081
                                             10 COMRAM    20    14      6
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     612
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1480
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     763
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     377
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _ShowFailure
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _LightStatusLed
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___lbdiv
         ___lbmod
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetCurrentEventDiodeNum
     _GetTime
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Hi (ARG)
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _GetCurrentEventDiodeNum
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _ShowFailure
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _LightStatusLed
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Hi (ARG)
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _ModbusGetUserCommandAdditional1Hi
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Hi (ARG)
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      74       5       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      75       1       92.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B1      15        0.0%
DATA                 0      0     2B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat May 28 12:51:44 2016

                                             LoadNextEvent@totalMinutes 000A  
                                                         _years_to_days 1A0C  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$890 0012  
                                           __end_of_CommandSetStatusLed 25C6  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l63 2BE6  
                                                                    l66 2BEA  
                                                                    l74 2B14  
                                                                    l78 2B34  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l112 2D0C  
                                                                   l113 2D20  
                                                   ModbusPoll@inputRegs 005F  
                                                                   l108 2C64  
                                                                   l109 2C7E  
                                                                   l402 1E86  
                                                                   l250 29F8  
                                                                   l252 2A02  
                                                                   l413 17EA  
                                                                   l253 2A0C  
                                                                   l254 2A16  
                                                                   l255 2A32  
                                                                   l319 223E  
                                                                   l432 201A  
                                                                   l274 0AD2  
                                                                   l266 0C56  
                                                                   l427 1782  
                                                                   l292 1BFE  
                                                                   l470 1C0A  
                                                                   l463 25C0  
                                                                   l392 20C0  
                                                                   l481 1CE0  
                                                                   l802 2ABE  
                                                                   l396 1E92  
                                                                   l468 1C08  
                                                                   l389 20D4  
                                                                   l822 0CD6  
                                                                   l831 0ECC  
                                                                   l487 24BE  
                                                                   l753 2912  
                                                                   l817 0C9E  
                                                                   l906 19E6  
                                                                   l818 0ED4  
                                                                   l925 2298  
                                                                   l757 12CC  
                                                                   l943 159C  
                                                                   l961 1CF6  
                                                                   l794 2BB2  
                                                                   l875 16AA  
                                                                   l963 1CFA  
                                                                   l788 2DCA  
                                                                   l959 1CF2  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2D00  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0062  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 2710  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 0026  
                                      ModbusValidateRequest@isSupported 0022  
                                                         _LoadNextEvent 16D8  
                                                         _globalMinutes 0072  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1419 0690  
                                                                  l1373 2874  
                                                                  l1383 29A0  
                                                                  l1399 28C2  
                                                                  l6004 2BDC  
                                                                  l6006 2BDE  
                                                                  l6200 2A20  
                                                                  l6120 2564  
                                                                  l6060 16F4  
                                                                  l6036 2CDE  
                                                                  l6220 21B2  
                                                                  l6062 16F6  
                                                                  l6310 1C3C  
                                                                  l6080 1754  
                                                                  l6072 1728  
                                                                  l6056 16EC  
                                                                  l7112 101E  
                                                                  l7104 1004  
                                                                  l7040 0F3A  
                                                                  l7200 29BA  
                                                                  l6232 21CC  
                                                                  l6128 2584  
                                                                  l6320 1CA0  
                                                                  l6402 2ABC  
                                                                  l6170 2764  
                                                                  l6090 1776  
                                                                  l6082 175A  
                                                                  l7114 1026  
                                                                  l7106 100C  
                                                                  l6322 1CBE  
                                                                  l5612 28C0  
                                                                  l6164 273E  
                                                                  l6084 1760  
                                                                  l5700 20C6  
                                                                  l7140 1072  
                                                                  l7132 1058  
                                                                  l7124 1040  
                                                                  l7060 0F7C  
                                                                  l7052 0F64  
                                                                  l6340 2B76  
                                                                  l6332 2B56  
                                                                  l6308 1C30  
                                                                  l5630 283E  
                                                                  l6422 0CC4  
                                                                  l7302 114E  
                                                                  l6086 1766  
                                                                  l6094 1788  
                                                                  l7230 1F8E  
                                                                  l7150 1094  
                                                                  l7142 107A  
                                                                  l7134 1060  
                                                                  l7126 1046  
                                                                  l7118 1032  
                                                                  l7070 0F9E  
                                                                  l7062 0F84  
                                                                  l7054 0F6A  
                                                                  l7046 0F56  
                                                                  l6254 21FA  
                                                                  l6238 21DA  
                                                                  l6326 1CC4  
                                                                  l5632 2848  
                                                                  l6176 069C  
                                                                  l6440 0D02  
                                                                  l6432 0CDC  
                                                                  l7400 1270  
                                                                  l7312 1178  
                                                                  l6088 176E  
                                                                  l6096 17B4  
                                                                  l7160 10AE  
                                                                  l6272 2220  
                                                                  l6248 21EC  
                                                                  l6336 2B68  
                                                                  l6370 2B90  
                                                                  l5650 2972  
                                                                  l5642 286A  
                                                                  l5634 284E  
                                                                  l6186 0954  
                                                                  l6426 0CCC  
                                                                  l6418 0CA2  
                                                                  l7242 1FD6  
                                                                  l7170 10CE  
                                                                  l7162 10B4  
                                                                  l7154 10A0  
                                                                  l7090 0FD8  
                                                                  l7082 0FC4  
                                                                  l5810 1B5E  
                                                                  l6266 2216  
                                                                  l6364 2B82  
                                                                  l5900 25E6  
                                                                  l6612 16C8  
                                                                  l5652 297C  
                                                                  l6444 0D26  
                                                                  l6436 0CFE  
                                                                  l6428 0CD2  
                                                                  l7412 1282  
                                                                  l7404 1276  
                                                                  l7324 11A2  
                                                                  l7236 1FAE  
                                                                  l7148 108C  
                                                                  l7076 0FB0  
                                                                  l7068 0F96  
                                                                  l5820 1BD0  
                                                                  l5804 1B1A  
                                                                  l6606 16B0  
                                                                  l5654 2982  
                                                                  l6542 0E70  
                                                                  l6534 0E62  
                                                                  l6518 0E44  
                                                                  l7350 11DA  
                                                                  l5830 1DE2  
                                                                  l7078 0FB8  
                                                                  l5814 1B84  
                                                                  l7502 13BE  
                                                                  l6720 19D8  
                                                                  l6632 210E  
                                                                  l6464 0D4E  
                                                                  l6448 0D2C  
                                                                  l7408 127C  
                                                                  l7360 11F8  
                                                                  l7336 11B8  
                                                                  l7328 11A8  
                                                                  l5672 2052  
                                                                  l7184 10FA  
                                                                  l7176 10E0  
                                                                  l7168 10C6  
                                                                  l7096 0FEA  
                                                                  l7088 0FD2  
                                                                  l7192 110E  
                                                                  l5816 1BA2  
                                                                  l5808 1B40  
                                                                  l6386 2A88  
                                                                  l6394 2AAA  
                                                                  l5914 260E  
                                                                  l5738 2B2C  
                                                                  l5658 2996  
                                                                  l6474 0D6C  
                                                                  l6466 0D5A  
                                                                  l6458 0D44  
                                                                  l6554 0E84  
                                                                  l7418 1288  
                                                                  l7354 11DE  
                                                                  l5834 1DF4  
                                                                  l7186 1102  
                                                                  l7178 10E8  
                                                                  l7098 0FF2  
                                                                  l7194 1124  
                                                                  l7442 2492  
                                                                  l7522 1420  
                                                                  l7284 250C  
                                                                  l5908 2604  
                                                                  l6580 1602  
                                                                  l5940 2AF4  
                                                                  l5932 2ADC  
                                                                  l6708 193C  
                                                                  l6660 2420  
                                                                  l7380 1244  
                                                                  l7372 122A  
                                                                  l7364 1206  
                                                                  l7356 11E4  
                                                                  l5772 0AA8  
                                                                  l5764 0998  
                                                                  l5836 1E26  
                                                                  l7452 24A4  
                                                                  l5934 2AE2  
                                                                  l6718 19A6  
                                                                  l6638 2162  
                                                                  l6902 1588  
                                                                  l6486 0D9C  
                                                                  l5790 0C36  
                                                                  l5782 0BA4  
                                                                  l5774 0B00  
                                                                  l5766 0A2E  
                                                                  l5758 097C  
                                                                  l5846 1E4A  
                                                                  l7518 1400  
                                                                  l5880 28F4  
                                                                  l5928 2AD4  
                                                                  l5944 2AFC  
                                                                  l5960 2CA6  
                                                                  l5952 2C8E  
                                                                  l6728 19EC  
                                                                  l7392 1264  
                                                                  l7384 124A  
                                                                  l7376 1232  
                                                                  l7368 1218  
                                                                  l6762 1F2C  
                                                                  l6834 22CE  
                                                                  l6658 23EE  
                                                                  l6498 0DC2  
                                                                  l7298 1148  
                                                                  l5778 0B7E  
                                                                  l7490 135C  
                                                                  l7474 1316  
                                                                  l5892 25D2  
                                                                  l6596 166E  
                                                                  l6588 1612  
                                                                  l6756 1ED4  
                                                                  l6836 22D0  
                                                                  l7396 126A  
                                                                  l7388 1252  
                                                                  l5788 0C1A  
                                                                  l7492 1360  
                                                                  l7484 134C  
                                                                  l6598 169C  
                                                                  l5974 2334  
                                                                  l6934 1D22  
                                                                  l6766 1F50  
                                                                  l5798 0C3E  
                                                                  l6936 1D2E  
                                                                  l6960 1DA2  
                                                                  l6880 1518  
                                                                  l6872 14F0  
                                                                  l6856 1494  
                                                                  l6848 1460  
                                                                  l5978 235E  
                                                                  l6962 1DB4  
                                                                  l6866 14D6  
                                                                  l6892 1554  
                                                                  l6884 152C  
                                                                  l6876 1504  
                                                                  l6868 14DC  
                                                                  l6888 1540  
                                                                  l6898 1568  
                                                                  STR_1 0648  
                                                                  STR_3 063F  
                                                                  STR_5 064E  
                                                                  STR_7 0624  
                                                                  STR_9 0610  
                                                     _UpdateLedRegister 29F2  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u5100 0676  
                                                                  u5110 0690  
                                                                  u5310 0C9A  
                                                                  u4504 09D4  
                                                                  u4505 09CE  
                                                                  u4514 09FE  
                                                                  u4515 09F8  
                                                                  u5075 256E  
                                                                  u4604 0B3C  
                                                                  u4524 0A26  
                                                                  u4605 0B36  
                                                                  u4525 0A20  
                                                                  u5350 0CFE  
                                                                  u4614 0B62  
                                                                  u4534 0A42  
                                                                  u4615 0B5C  
                                                                  u4535 0A3C  
                                                                  u4375 2066  
                                                                  u4544 0A66  
                                                                  u4545 0A60  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u5370 0D26  
                                                                  u4634 0B90  
                                                                  u4635 0B8A  
                                                                  u5604 1656  
                                                                  u4644 0BB8  
                                                                  u4564 0A94  
                                                                  u4724 1B32  
                                                                  _RCIF 007CF5  
                                                                  u5605 1650  
                                                                  u4645 0BB2  
                                                                  u4565 0A8E  
                                                                  u4725 1B2C  
                                                                  u5614 1682  
                                                                  u5470 0E42  
                                                                  u4654 0BDC  
                                                                  u4574 0ABC  
                                                                  u4494 09AC  
                                                                  u4734 1B52  
                                                                  u5615 167C  
                                                                  u4655 0BD6  
                                                                  u4575 0AB6  
                                                                  u4495 09A6  
                                                                  u4735 1B4C  
                                                                  u4584 0AE6  
                                                                  u6280 138C  
                                                                  u6337 2B08  
                                                                  u4585 0AE0  
                                                                  u5714 1990  
                                                                  u4674 0C06  
                                                                  u4594 0B14  
                                                                  u4754 1B76  
                                                                  u5715 1988  
                                                                  u4675 0C00  
                                                                  u4595 0B0E  
                                                                  u4755 1B70  
                                                                  u5724 19BC  
                                                                  u4684 0C2E  
                                                                  u4764 1B96  
                                                                  u5725 19B4  
                                                                  u4685 0C28  
                                                                  u4765 1B90  
                                                                  u5584 163A  
                                                                  u4864 28E6  
                                                                  u4960 231C  
                                                                  u4784 1BBE  
                                                                  i1l97 0064  
                                                                  u5585 1632  
                                                                  u4865 28E0  
                                                                  u4785 1BB6  
                                                                  i1l98 0038  
                                                                  u4874 2906  
                                                                  u5674 23D8  
                                                                  u5850 0F1E  
                                                                  u4794 1BE6  
                                                                  u4875 2900  
                                                                  u5675 23D0  
                                                                  u4795 1BDE  
                                                                  i2l84 2790  
                                                                  u5684 2404  
                                                                  i2l85 27C8  
                                                                  u5685 23FC  
                                                                  u5694 196A  
                                                                  u5870 0F52  
                                                                  u5695 1964  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 12D2  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0076  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2E86  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0074  
                                                       __end_of_InitApp 2548  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00C9  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2D84  
                                                  _curEventTotalMinutes 00C4  
                                      __size_of_GetCurrentEventDiodeNum 000C  
                                           getTotalMinutes@totalMinutes 0007  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2B02  
                                                                 _EEADR 000FA9  
                                                                 STR_11 0653  
                                                                 STR_21 0624  
                                                                 STR_13 0634  
                                                                 STR_15 0648  
                                                                 STR_23 0610  
                                                                 STR_17 063F  
                                                                 STR_25 0653  
                                                                 STR_19 064E  
                                                                 STR_27 0634  
                                                       __end_of___lbmod 2CB0  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000F  
                                                       __end_of___lwdiv 2880  
                                                       __end_of___lwmod 29AC  
                                            __end_of_ModbusSendTxBuffer 2964  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                   _ModbusProcess_FC100 1CE6  
                                                   _ModbusProcess_FC101 2BF0  
                                                   _ModbusProcess_FC102 2D84  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2E86  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2190  
                                                        ?_LoadNextEvent 0001  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D6  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 2A38  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 24C4  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00C6  
                                                        _UartBufferTail 00C8  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0256  
                                                       ___lbdiv@counter 0009  
                                                  ?_ModbusProcess_FC100 0001  
                                                  ?_ModbusProcess_FC101 0001  
                                                  ?_ModbusProcess_FC102 0001  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2D66  
                                                       __initialization 26AC  
                                                          __end_of_main 144A  
                                                  __eeFirstSoundAddress 00CB  
                                     __size_of_ModbusGetUserCommandData 0008  
                                   ModbusProcess_FC100@u8CopyBufferSize 0049  
                                                      __end_of_LightLed 0C5C  
                                             ?_ModbusGetUserCommandData 0007  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                              ??_ModbusGetUserCommandId 0009  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 0068  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 2244  
                                                            _ModbusInit 2DB8  
                                                            _ModbusPoll 1130  
                                                      __end_of_PortRead 2BF0  
                                                 _ModbusUserCommandData 00E6  
                                                        _InitUartBuffer 2E3A  
                                                   _ProcessUserCommands 1C04  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 17F0  
                                                        _LightStatusLed 1B0E  
                                                                i1l5520 005E  
                                                                i1l5522 0060  
                                                                i2l5500 27C0  
                                                     ??_getTotalMinutes 0007  
                                                         _ymd_to_scalar 22F0  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 29AC  
                                                         main@oldMinute 00ED  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                         ModbusProcess_FC100@newRawTime 0045  
                                                 ??_ModbusProcess_FC100 0045  
                                                 ??_ModbusProcess_FC101 0016  
                                                 ??_ModbusProcess_FC102 0016  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D8  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2DE8  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 27D0  
                                             __playingSoundStartPosInEe 006E  
                                                         ??_ShowFailure 000F  
                                                  ?_ProcessUserCommands 0001  
                                                        _UartRingBuffer 0200  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BC  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00D0  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 2880  
                                                                _millis 2CB0  
                                                                clear_0 26B4  
                                                                clear_1 26C6  
                                                                clear_2 26D2  
                                                     __end_of_AddSecond 2E1E  
                                                                _mktime 0658  
                                                          __lastCommand 00D1  
                                                 __end_of_PortAvailable 2E5E  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0029  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0008  
                                                          __pdataCOMRAM 0073  
                                                __end_of_InitUartBuffer 2E48  
                                                          __MODBUSCoils 00DE  
                                                            PortWrite@i 000A  
                                                   _PortClearReadBuffer 2E2C  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D4  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                        _ModbusUserCommandAdditional1Hi 00E0  
                                        _ModbusUserCommandAdditional2Hi 00E2  
                                        _ModbusUserCommandAdditional3Hi 00E4  
                                            __size_of_UpdateLedRegister 0046  
                                        _ModbusUserCommandAdditional1Lo 00E1  
                                                      __end_of_pwm_init 2E0E  
                                        _ModbusUserCommandAdditional2Lo 00E3  
                                        _ModbusUserCommandAdditional3Lo 00E5  
                                                __end_of_LightStatusLed 1C04  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D7  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 2702  
                                                       ___lbmod@counter 0009  
                                                         __deviceStatus 00CA  
                                            __end_of_ModbusProcess_FC21 22F0  
                                            __end_of_ModbusProcess_FC15 1A0C  
                                            __end_of_ModbusProcess_FC16 1F60  
                                            __end_of_ModbusProcess_FC17 26AC  
                                            __end_of_ModbusProcess_FC43 15AC  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 027E  
                                                 ??_ProcessUserCommands 0022  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 0EDA  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 25C6  
                                               _GetCurrentEventDiodeNum 2E48  
                                                  __end_of_fctsupported 0610  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001E  
                                                      ___lbdiv@quotient 000A  
                                       __size_of_ModbusGetUserCommandId 0008  
                                                   __end_of_ShowFailure 2D46  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                   _ModbusUserCommandId 00E7  
                                                     ?_SwitchOffAllLeds 0001  
                                             InitFromEeprom@tmpModbusId 0013  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 005C  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                  _ModbusBuildException 2D46  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00BE  
                                                       ?_LightStatusLed 0007  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1E96  
                                   ModbusProcess_FC101@u8CopyBufferSize 0016  
                                              ModbusGetRxBufferHeader@i 0009  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2DB8  
                                                 ??_PortClearReadBuffer 0007  
                                                               ?_Modbus 000C  
                                                 __eeSoundAddressesList 00CC  
                                                     __end_of_PortWrite 2B40  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0016  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2C58  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 007E  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000C  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                _ModbusGetUserCommandId 2E5E  
                                                    _ModbusSendTxBuffer 2918  
                                      __end_of_ModbusGetUserCommandData 2E6E  
                                                               _GetTime 2E7E  
                                         __size_of_ModbusGetLastCommand 003C  
                                                       __inputRegsCount 00CF  
                                                   __end_of_StopPlaying 2E2C  
                                                               _InitApp 24C4  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2D66  
                                                               __Lparam 0000  
                                             ??_GetCurrentEventDiodeNum 0007  
                                                   __size_of_ModbusInit 0018  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 01A2  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 0071  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                           _ShowFailure 2D26  
                                                               ___lbdiv 2AC4  
                                                               ___lbmod 2C84  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 282C  
                                                               ___lwmod 2964  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 0112  
                                                               __pcinit 26AC  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2C26  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0070  
                                                       __size_of_mktime 0312  
                                                               __ptext0 12D2  
                                                               __ptext1 2DFC  
                                                               __ptext2 2436  
                                                               __ptext3 1C04  
                                                               __ptext4 2E5E  
                                                               __ptext5 2548  
                                                               __ptext6 2E66  
                                                               __ptext7 2E6E  
                                                               __ptext8 2E76  
                                                               __ptext9 2B40  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 2436  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 000B  
                                                   __size_of_ResetEvent 0046  
                                       __end_of_ModbusGetRxBufferHeader 2BB8  
                                                       _getTotalMinutes 2D00  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 005E  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2770  
                                                  end_of_initialization 2702  
                                                         __lastFunction 00E8  
                                                         __Lmediumconst 0000  
                                                               int_func 2770  
                                                   __playingSoundCurPos 00D3  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                             __totalMinutesFromDayStart 00C2  
                                                        ??_ProcessDiary 001F  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                            ??_pwm_init 0007  
                                   ModbusProcess_FC102@u8CopyBufferSize 0016  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 0010  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     InitFromEeprom@eeSoundCountAddress 0012  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2E0E  
                                                        _months_to_days 2A38  
                                                       __maxDiaryEvents 006D  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 2A7E  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     _SoundPlayNextStep 201E  
                                                 ProcessUserCommands@v1 0027  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2E1E  
                                           __end_of_ModbusProcess_FC100 1DC6  
                                           __end_of_ModbusProcess_FC101 2C26  
                                           __end_of_ModbusProcess_FC102 2D9E  
                                           __end_of_ConfigureOscillator 2E8C  
                                                    ?_SoundPlayNextStep 0001  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E9  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F3  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                              _ModbusGetUserCommandData 2E66  
                                                 __end_of_years_to_days 1B0E  
                                                        __end_of_Modbus 2DFC  
                                               __end_of_getTotalMinutes 2D26  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 2244  
                                                    _ModbusProcess_FC15 1902  
                                                    _ModbusProcess_FC16 1E96  
                                                    _ModbusProcess_FC17 263A  
                                                    _ModbusProcess_FC43 144A  
                                                         __pidataCOMRAM 2E8C  
                                              ModbusPoll@discreteInputs 005C  
                                                        __end_of_isleap 28CC  
                                                        __end_of_millis 2CDA  
                                                __end_of_months_to_days 2A7E  
                                             __end_of_ModbusGetRxBuffer 2AC4  
                                                        __end_of_mktime 096A  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00C7  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0065  
                                             __end_of_SoundPlayNextStep 20DA  
                                                            ?_AddSecond 0001  
                                                   start_initialization 26AC  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 17F0  
                                                          ??_SetHourMin 0011  
                                                   __size_of_getHourMin 002C  
                                           __end_of_ProcessUserCommands 1CE6  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1DC6  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 000A  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 2548  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                      __size_of_ModbusGetRxBufferHeader 003C  
                                                    __end_of_ModbusInit 2DD0  
                                                    __end_of_ModbusPoll 12D2  
                                                             _PortBegin 2D9E  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0C5C  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2B02  
                                                     __size_of_PortRead 0038  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 1902  
                                                     __holdingRegsCount 00CE  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006D  
                                                    __end_of_ResetEvent 29F2  
                                                         __pcstackBANK0 00E9  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 201E  
                                               ModbusProcess_FC3@u8size 0018  
                                               ?_ModbusGetUserCommandId 0007  
                                           __end_of_PortClearReadBuffer 2E3A  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 27C8  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0017  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001E  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                                          ?_ShowFailure 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                             ProcessUserCommands@ledNum 0028  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                            ?_PortWrite 0007  
                                                      ?_getTotalMinutes 0001  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2B7C  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 0061  
                                            __size_of_ModbusGetRxBuffer 0046  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2E54  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001F  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 006F  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00BC  
                                           ModbusGetLastCommand@command 0008  
                                                    __MODBUSHoldingRegs 018C  
                                        __end_of_ModbusGetUserCommandId 2E66  
                                                              ?_low_isr 0001  
                                                   io_poll@lastFunction 0032  
                                                 io_poll@lastEndAddress 002D  
                                                      ___lwdiv@quotient 000C  
                                                      SetHourMin@newMin 000D  
                                                 __end_of_ymd_to_scalar 2394  
                                                      SetHourMin@tmpSec 001D  
                                              ProcessDiary@totalMinutes 0023  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D9  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0066  
                                                           __soundCount 00D5  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 2770  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000B  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0073  
                                                       __isSoundPlaying 00D0  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2918  
                                           _ModbusSetExceptionStatusBit 28CC  
                                                __nextEventPlayDuration 00C0  
                                                              InitApp@i 0007  
                                                           _globalHours 0075  
                                                             main@curMs 00EF  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 15AC  
                                                     _ModbusProcess_FC3 20DA  
                                                     _ModbusProcess_FC5 2394  
                                                     _ModbusProcess_FC6 27D0  
                                                     _ModbusProcess_FC7 2DD0  
                                                           _INTCON2bits 000FF1  
                                            ??_ModbusGetUserCommandData 0009  
                                        CommandSetStatusLed@commandData 0020  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 096A  
                                              ?_GetCurrentEventDiodeNum 0001  
                                                    __end_of_getHourMin 2C84  
                                                           ??_PlaySound 0019  
                                                 ModbusPoll@u8exception 0067  
                                                      _SwitchOffAllLeds 2CDA  
                                                      __size_of_GetTime 0008  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                               _ModbusGetRxBufferHeader 2B7C  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 263A  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 0021  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2BB8  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BE  
                                                           _isleap$2254 000F  
                                                           _currentTime 00DA  
                                                      __size_of_io_poll 008E  
                                                              _diffTime 00A8  
                                            ModbusProcess_FC100@newTime 004A  
                                             __end_of_ModbusProcess_FC1 16D8  
                                             __end_of_ModbusProcess_FC3 2190  
                                             __end_of_ModbusProcess_FC5 2436  
                                             __end_of_ModbusProcess_FC6 282C  
                                             __end_of_ModbusProcess_FC7 2DE8  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 002F  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 2190  
                                                              __ptext11 2D26  
                                                              __ptext20 2CDA  
                                                              __ptext12 1B0E  
                                                              __ptext21 1DC6  
                                                              __ptext13 2DE8  
                                                              __ptext30 1130  
                                                              __ptext22 201E  
                                                              __ptext14 2DB8  
                                                              __ptext31 2E2C  
                                                              __ptext23 2E1E  
                                                              __ptext15 2C58  
                                                              __ptext40 263A  
                                                              __ptext32 0C5C  
                                                              __ptext24 2C26  
                                                              __ptext16 29AC  
                                                              __ptext41 1E96  
                                                              __ptext33 2DD0  
                                                              __ptext25 2E7E  
                                                              __ptext17 0EDA  
                                                              __ptext50 282C  
                                                              __ptext42 1902  
                                                              __ptext34 27D0  
                                                              __ptext26 16D8  
                                                              __ptext18 29F2  
                                                              __ptext51 2880  
                                                              __ptext43 2D84  
                                                              __ptext35 2394  
                                                              __ptext27 2D00  
                                                              __ptext19 1F60  
                                                              __ptext60 2CB0  
                                                              __ptext52 2964  
                                                              __ptext44 2BF0  
                                                              __ptext36 144A  
                                                              __ptext28 096A  
                                                              __ptext61 2B02  
                                                              __ptext53 2D66  
                                                              __ptext45 1CE6  
                                                              __ptext37 2710  
                                                              __ptext29 2E48  
                                                              __ptext70 2E3A  
                                                              __ptext62 25C6  
                                                              __ptext54 17F0  
                                                              __ptext46 0658  
                                                              __ptext38 20DA  
                                                              __ptext71 2E86  
                                                              __ptext63 2B7C  
                                                              __ptext55 2C84  
                                                              __ptext47 22F0  
                                                              __ptext39 2244  
                                                              __ptext72 2E0E  
                                                              __ptext64 2A7E  
                                                              __ptext56 2AC4  
                                                              __ptext48 1A0C  
                                                              __ptext65 2BB8  
                                                              __ptext57 28CC  
                                                              __ptext49 2A38  
                                                              __ptext66 2E54  
                                                              __ptext58 15AC  
                                                              __ptext67 2D46  
                                                              __ptext59 2918  
                                                              __ptext68 24C4  
                                                              __ptext69 2D9E  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 0031  
                                                         __size_of_main 0178  
                                                  _ModbusGetLastCommand 2B40  
                                              ShowFailure@additionalLed 000F  
                                          __size_of_ModbusProcess_FC100 00E0  
                                          __size_of_ModbusProcess_FC101 0036  
                                          __size_of_ModbusProcess_FC102 001A  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1F60  
                                                              int$flags 0076  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2DFC  
                                                       ??_PortAvailable 0007  
                                                  __size_of_ShowFailure 0020  
                                                              main@hour 00EE  
                                                      __exceptionStatus 00CD  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2267 0028  
                                                            _INTCONbits 000FF2  
                             __end_of_ModbusGetUserCommandAdditional1Hi 2E7E  
                            __size_of_ModbusGetUserCommandAdditional1Hi 0008  
                                   ??_ModbusGetUserCommandAdditional1Hi 0009  
                                    ?_ModbusGetUserCommandAdditional1Hi 0007  
                                     _ModbusGetUserCommandAdditional1Hi 2E76  
                             __end_of_ModbusGetUserCommandAdditional1Lo 2E76  
                            __size_of_ModbusGetUserCommandAdditional1Lo 0008  
                                   ??_ModbusGetUserCommandAdditional1Lo 0009  
                                    ?_ModbusGetUserCommandAdditional1Lo 0007  
                                     _ModbusGetUserCommandAdditional1Lo 2E6E  
                                               __size_of_InitFromEeprom 00B4  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0016  
                                       __end_of_GetCurrentEventDiodeNum 2E54  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00D2  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2E90  
                                                              intlevel2 2E90  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001D  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                             ??_ModbusGetRxBufferHeader 0008  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                             SoundPlayNextStep@stepDuty 0014  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 0072  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0EDA  
                                          __size_of_ProcessUserCommands 00E2  
                                                __size_of_LoadNextEvent 0118  
                                                    ?_ProcessLightBlock 0001  
                                                 __end_of_SetBuzzerDuty 2C58  
                                                   ModbusPoll@u8current 0065  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000C  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0017  
                                                  __size_of_StopPlaying 000E  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000E  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 1130  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0064  
                                          __size_of_PortClearReadBuffer 000E  
                                            ModbusProcess_FC15@u8bitsno 0028  
