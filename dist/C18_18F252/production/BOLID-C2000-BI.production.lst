

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Wed May 18 23:44:31 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	eeprom_data
    86  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    87  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    88  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    89  0000                     
    90                           	psect	idataCOMRAM
    91  002CE2                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _curEventNum
    95  002CE2  FF                 	db	255
    96                           
    97                           ;initializer for _currentAlarmedEventNum
    98  002CE3  FF                 	db	255
    99                           
   100                           ;initializer for _globalHours
   101  002CE4  FF                 	db	255
   102                           
   103                           	psect	smallconst
   104  000600                     __psmallconst:
   105                           	opt stack 0
   106  000600  00                 	db	0
   107  000601                     _fctsupported:
   108                           	opt stack 0
   109  000601  01                 	db	1
   110  000602  02                 	db	2
   111  000603  03                 	db	3
   112  000604  04                 	db	4
   113  000605  05                 	db	5
   114  000606  06                 	db	6
   115  000607  07                 	db	7
   116  000608  0F                 	db	15
   117  000609  10                 	db	16
   118  00060A  11                 	db	17
   119  00060B  15                 	db	21
   120  00060C  2B                 	db	43
   121  00060D                     __end_of_fctsupported:
   122                           	opt stack 0
   123  0000                     _CCP1CONbits	set	4029
   124  0000                     _CCPR1L	set	4030
   125  0000                     _EEADR	set	4009
   126  0000                     _EECON2	set	4007
   127  0000                     _EEDATA	set	4008
   128  0000                     _INTCON2bits	set	4081
   129  0000                     _INTCONbits	set	4082
   130  0000                     _IPR1bits	set	3999
   131  0000                     _LATA	set	3977
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _LATCbits	set	3979
   135  0000                     _PIE1bits	set	3997
   136  0000                     _PIR1bits	set	3998
   137  0000                     _PORTCbits	set	3970
   138  0000                     _PR2	set	4043
   139  0000                     _RCONbits	set	4048
   140  0000                     _RCREG	set	4014
   141  0000                     _RCSTA	set	4011
   142  0000                     _RCSTAbits	set	4011
   143  0000                     _SPBRG	set	4015
   144  0000                     _T0CONbits	set	4053
   145  0000                     _T1CONbits	set	4045
   146  0000                     _T2CONbits	set	4042
   147  0000                     _TMR0H	set	4055
   148  0000                     _TMR0L	set	4054
   149  0000                     _TMR1H	set	4047
   150  0000                     _TMR1L	set	4046
   151  0000                     _TRISAbits	set	3986
   152  0000                     _TRISB	set	3987
   153  0000                     _TRISCbits	set	3988
   154  0000                     _TXREG	set	4013
   155  0000                     _TXSTA	set	4012
   156  0000                     _TXSTAbits	set	4012
   157  0000                     _CARRY	set	32448
   158  0000                     _GIE	set	32663
   159  0000                     _RCIF	set	31989
   160  0000                     _RD	set	32048
   161  0000                     _TRMT	set	32097
   162  0000                     _WR	set	32049
   163  0000                     _WREN	set	32050
   164  00060D                     STR_3:
   165  00060D  54                 	db	84	;'T'
   166  00060E  61                 	db	97	;'a'
   167  00060F  62                 	db	98	;'b'
   168  000610  6C                 	db	108	;'l'
   169  000611  6F                 	db	111	;'o'
   170  000612  20                 	db	32
   171  000613  73                 	db	115	;'s'
   172  000614  20                 	db	32
   173  000615  72                 	db	114	;'r'
   174  000616  61                 	db	97	;'a'
   175  000617  73                 	db	115	;'s'
   176  000618  70                 	db	112	;'p'
   177  000619  69                 	db	105	;'i'
   178  00061A  73                 	db	115	;'s'
   179  00061B  61                 	db	97	;'a'
   180  00061C  6E                 	db	110	;'n'
   181  00061D  69                 	db	105	;'i'
   182  00061E  65                 	db	101	;'e'
   183  00061F  6D                 	db	109	;'m'
   184  000620  20                 	db	32
   185  000621  74                 	db	116	;'t'
   186  000622  75                 	db	117	;'u'
   187  000623  72                 	db	114	;'r'
   188  000624  6F                 	db	111	;'o'
   189  000625  00                 	db	0
   190  000626                     STR_12:
   191  000626  54                 	db	84	;'T'
   192  000627  61                 	db	97	;'a'
   193  000628  62                 	db	98	;'b'
   194  000629  6C                 	db	108	;'l'
   195  00062A  6F                 	db	111	;'o'
   196  00062B  20                 	db	32
   197  00062C  73                 	db	115	;'s'
   198  00062D  20                 	db	32
   199  00062E  72                 	db	114	;'r'
   200  00062F  61                 	db	97	;'a'
   201  000630  73                 	db	115	;'s'
   202  000631  70                 	db	112	;'p'
   203  000632  69                 	db	105	;'i'
   204  000633  73                 	db	115	;'s'
   205  000634  61                 	db	97	;'a'
   206  000635  6E                 	db	110	;'n'
   207  000636  69                 	db	105	;'i'
   208  000637  65                 	db	101	;'e'
   209  000638  6D                 	db	109	;'m'
   210  000639  00                 	db	0
   211  00063A                     STR_10:
   212  00063A  68                 	db	104	;'h'
   213  00063B  74                 	db	116	;'t'
   214  00063C  74                 	db	116	;'t'
   215  00063D  70                 	db	112	;'p'
   216  00063E  3A                 	db	58	;':'
   217  00063F  2F                 	db	47
   218  000640  2F                 	db	47
   219  000641  62                 	db	98	;'b'
   220  000642  6F                 	db	111	;'o'
   221  000643  6C                 	db	108	;'l'
   222  000644  69                 	db	105	;'i'
   223  000645  64                 	db	100	;'d'
   224  000646  2E                 	db	46
   225  000647  72                 	db	114	;'r'
   226  000648  75                 	db	117	;'u'
   227  000649  00                 	db	0
   228  00064A                     STR_16:
   229  00064A  52                 	db	82	;'R'
   230  00064B  61                 	db	97	;'a'
   231  00064C  73                 	db	115	;'s'
   232  00064D  70                 	db	112	;'p'
   233  00064E  69                 	db	105	;'i'
   234  00064F  73                 	db	115	;'s'
   235  000650  61                 	db	97	;'a'
   236  000651  6E                 	db	110	;'n'
   237  000652  69                 	db	105	;'i'
   238  000653  65                 	db	101	;'e'
   239  000654  00                 	db	0
   240  000655                     STR_6:
   241  000655  43                 	db	67	;'C'
   242  000656  32                 	db	50	;'2'
   243  000657  30                 	db	48	;'0'
   244  000658  30                 	db	48	;'0'
   245  000659  30                 	db	48	;'0'
   246  00065A  2D                 	db	45
   247  00065B  42                 	db	66	;'B'
   248  00065C  49                 	db	73	;'I'
   249  00065D  00                 	db	0
   250  00065E                     STR_4:
   251  00065E  42                 	db	66	;'B'
   252  00065F  4F                 	db	79	;'O'
   253  000660  4C                 	db	76	;'L'
   254  000661  49                 	db	73	;'I'
   255  000662  44                 	db	68	;'D'
   256  000663  00                 	db	0
   257  000664                     STR_8:
   258  000664  31                 	db	49	;'1'
   259  000665  2E                 	db	46
   260  000666  30                 	db	48	;'0'
   261  000667  31                 	db	49	;'1'
   262  000668  00                 	db	0
   263  000669                     STR_14:
   264  000669  4D                 	db	77	;'M'
   265  00066A  4D                 	db	77	;'M'
   266  00066B  4D                 	db	77	;'M'
   267  00066C  00                 	db	0
   268  0000                     
   269                           ; #config settings
   270  00066D  00                 	db	0	; dummy byte at the end
   271  0000                     
   272                           	psect	cinit
   273  0025F4                     __pcinit:
   274                           	opt stack 0
   275  0025F4                     start_initialization:
   276                           	opt stack 0
   277  0025F4                     __initialization:
   278                           	opt stack 0
   279                           
   280                           ; Clear objects allocated to BANK2 (256 bytes)
   281  0025F4  EE02  F000         	lfsr	0,__pbssBANK2
   282  0025F8  EE11 F000          	lfsr	1,256
   283  0025FC                     clear_0:
   284  0025FC  6AEE               	clrf	postinc0,c
   285  0025FE  50E5               	movf	postdec1,w,c
   286  002600  50E1               	movf	fsr1l,w,c
   287  002602  E1FC               	bnz	clear_0
   288  002604  50E2               	movf	fsr1h,w,c
   289  002606  E1FA               	bnz	clear_0
   290                           
   291                           ; Clear objects allocated to BANK1 (200 bytes)
   292  002608  EE01  F000         	lfsr	0,__pbssBANK1
   293  00260C  0EC8               	movlw	200
   294  00260E                     clear_1:
   295  00260E  6AEE               	clrf	postinc0,c
   296  002610  06E8               	decf	wreg,f,c
   297  002612  E1FD               	bnz	clear_1
   298                           
   299                           ; Clear objects allocated to BANK0 (96 bytes)
   300  002614  EE00  F080         	lfsr	0,__pbssBANK0
   301  002618  0E60               	movlw	96
   302  00261A                     clear_2:
   303  00261A  6AEE               	clrf	postinc0,c
   304  00261C  06E8               	decf	wreg,f,c
   305  00261E  E1FD               	bnz	clear_2
   306                           
   307                           ; Clear objects allocated to COMRAM (6 bytes)
   308  002620  6A74               	clrf	(__pbssCOMRAM+5)& (0+255),c
   309  002622  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   310  002624  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   311  002626  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   312  002628  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   313  00262A  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   314                           
   315                           ; Initialize objects allocated to COMRAM (3 bytes)
   316                           ; load TBLPTR registers with __pidataCOMRAM
   317  00262C  0EE2               	movlw	low __pidataCOMRAM
   318  00262E  6EF6               	movwf	tblptrl,c
   319  002630  0E2C               	movlw	high __pidataCOMRAM
   320  002632  6EF7               	movwf	tblptrh,c
   321  002634  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   322  002636  6EF8               	movwf	tblptru,c
   323  002638  0009               	tblrd		*+	;fetch initializer
   324  00263A  CFF5 F075          	movff	tablat,__pdataCOMRAM
   325  00263E  0009               	tblrd		*+	;fetch initializer
   326  002640  CFF5 F076          	movff	tablat,__pdataCOMRAM+1
   327  002644  0009               	tblrd		*+	;fetch initializer
   328  002646  CFF5 F077          	movff	tablat,__pdataCOMRAM+2
   329  00264A                     end_of_initialization:
   330                           	opt stack 0
   331  00264A                     __end_of__initialization:
   332                           	opt stack 0
   333  00264A  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   334  00264C  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   335  00264E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   336  002650  6EF8               	movwf	tblptru,c
   337  002652  0100               	movlb	0
   338  002654  EFA2  F008         	goto	_main	;jump to C main() function
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           postdec1	equ	0xFE5
   346                           fsr1h	equ	0xFE2
   347                           fsr1l	equ	0xFE1
   348                           
   349                           	psect	bssCOMRAM
   350  00006F                     __pbssCOMRAM:
   351                           	opt stack 0
   352  00006F                     _UartBufferTail:
   353                           	opt stack 0
   354  00006F                     	ds	1
   355  000070                     __playingSoundStartPosInEe:
   356                           	opt stack 0
   357  000070                     	ds	1
   358  000071                     __soundCount:
   359                           	opt stack 0
   360  000071                     	ds	1
   361  000072                     __u8BufferSize:
   362                           	opt stack 0
   363  000072                     	ds	1
   364  000073                     _blinkOn:
   365                           	opt stack 0
   366  000073                     	ds	1
   367  000074                     _globalMinutes:
   368                           	opt stack 0
   369  000074                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           postdec1	equ	0xFE5
   377                           fsr1h	equ	0xFE2
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	dataCOMRAM
   381  000075                     __pdataCOMRAM:
   382                           	opt stack 0
   383  000075                     _curEventNum:
   384                           	opt stack 0
   385  000075                     	ds	1
   386  000076                     _currentAlarmedEventNum:
   387                           	opt stack 0
   388  000076                     	ds	1
   389  000077                     _globalHours:
   390                           	opt stack 0
   391  000077                     	ds	1
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1h	equ	0xFE2
   400                           fsr1l	equ	0xFE1
   401                           
   402                           	psect	bssBANK0
   403  000080                     __pbssBANK0:
   404                           	opt stack 0
   405  000080                     _ledBlink:
   406                           	opt stack 0
   407  000080                     	ds	16
   408  000090                     _ledStatuses:
   409                           	opt stack 0
   410  000090                     	ds	16
   411  0000A0                     __playingEndMs:
   412                           	opt stack 0
   413  0000A0                     	ds	4
   414  0000A4                     __u32time:
   415                           	opt stack 0
   416  0000A4                     	ds	4
   417  0000A8                     _diffTime:
   418                           	opt stack 0
   419  0000A8                     	ds	4
   420  0000AC                     _eventResetSecond:
   421                           	opt stack 0
   422  0000AC                     	ds	4
   423  0000B0                     _millisecondsFromStart:
   424                           	opt stack 0
   425  0000B0                     	ds	4
   426  0000B4                     _oldBlinkOnTime:
   427                           	opt stack 0
   428  0000B4                     	ds	4
   429  0000B8                     _soundTestEnd:
   430                           	opt stack 0
   431  0000B8                     	ds	4
   432  0000BC                     __MODBUSDiscreteInputs:
   433                           	opt stack 0
   434  0000BC                     	ds	2
   435  0000BE                     __lastAddress:
   436                           	opt stack 0
   437  0000BE                     	ds	2
   438  0000C0                     __lastCount:
   439                           	opt stack 0
   440  0000C0                     	ds	2
   441  0000C2                     __nextEventPlayDuration:
   442                           	opt stack 0
   443  0000C2                     	ds	2
   444  0000C4                     _blinkDuration:
   445                           	opt stack 0
   446  0000C4                     	ds	2
   447  0000C6                     _blinkPeriod:
   448                           	opt stack 0
   449  0000C6                     	ds	2
   450  0000C8                     _UartBufferHead:
   451                           	opt stack 0
   452  0000C8                     	ds	1
   453  0000C9                     _UartBufferLen:
   454                           	opt stack 0
   455  0000C9                     	ds	1
   456  0000CA                     __6sCounter:
   457                           	opt stack 0
   458  0000CA                     	ds	1
   459  0000CB                     __exceptionStatus:
   460                           	opt stack 0
   461  0000CB                     	ds	1
   462  0000CC                     __holdingRegsCount:
   463                           	opt stack 0
   464  0000CC                     	ds	1
   465  0000CD                     __inputRegsCount:
   466                           	opt stack 0
   467  0000CD                     	ds	1
   468  0000CE                     __isSoundPlaying:
   469                           	opt stack 0
   470  0000CE                     	ds	1
   471  0000CF                     __nextEventSoundId:
   472                           	opt stack 0
   473  0000CF                     	ds	1
   474  0000D0                     __playingSoundCurPos:
   475                           	opt stack 0
   476  0000D0                     	ds	1
   477  0000D1                     __playingSoundSteps:
   478                           	opt stack 0
   479  0000D1                     	ds	1
   480  0000D2                     __u8id:
   481                           	opt stack 0
   482  0000D2                     	ds	1
   483  0000D3                     __u8lastRec:
   484                           	opt stack 0
   485  0000D3                     	ds	1
   486  0000D4                     _curEventHour:
   487                           	opt stack 0
   488  0000D4                     	ds	1
   489  0000D5                     _curEventMinute:
   490                           	opt stack 0
   491  0000D5                     	ds	1
   492  0000D6                     _currentLedBlock:
   493                           	opt stack 0
   494  0000D6                     	ds	1
   495  0000D7                     _eventAcceptTime:
   496                           	opt stack 0
   497  0000D7                     	ds	1
   498  0000D8                     _eventCount:
   499                           	opt stack 0
   500  0000D8                     	ds	1
   501  0000D9                     _currentTime:
   502                           	opt stack 0
   503  0000D9                     	ds	4
   504  0000DD                     __MODBUSCoils:
   505                           	opt stack 0
   506  0000DD                     	ds	2
   507  0000DF                     __lastCommand:
   508                           	opt stack 0
   509  0000DF                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1h	equ	0xFE2
   518                           fsr1l	equ	0xFE1
   519                           
   520                           	psect	bssBANK1
   521  000100                     __pbssBANK1:
   522                           	opt stack 0
   523  000100                     __au8Buffer:
   524                           	opt stack 0
   525  000100                     	ds	140
   526  00018C                     __MODBUSHoldingRegs:
   527                           	opt stack 0
   528  00018C                     	ds	30
   529  0001AA                     __MODBUSInputRegs:
   530                           	opt stack 0
   531  0001AA                     	ds	30
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           postdec1	equ	0xFE5
   539                           fsr1h	equ	0xFE2
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	bssBANK2
   543  000200                     __pbssBANK2:
   544                           	opt stack 0
   545  000200                     _UartRingBuffer:
   546                           	opt stack 0
   547  000200                     	ds	256
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1h	equ	0xFE2
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	cstackBANK0
   559  0000E0                     __pcstackBANK0:
   560                           	opt stack 0
   561  0000E0                     io_poll@command:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x0
   565  0000E0                     	ds	1
   566  0000E1                     io_poll@lastEndAddress:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x1
   570  0000E1                     	ds	2
   571  0000E3                     io_poll@v1:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x3
   575  0000E3                     	ds	1
   576  0000E4                     io_poll@lastAddress:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x4
   580  0000E4                     	ds	2
   581  0000E6                     io_poll@lastCommand:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x6
   585  0000E6                     	ds	1
   586  0000E7                     main@lastMs:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x7
   590  0000E7                     	ds	4
   591  0000EB                     main@oldMinute:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0xB
   595  0000EB                     	ds	1
   596  0000EC                     main@hour:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0xC
   600  0000EC                     	ds	1
   601  0000ED                     main@curMs:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0xD
   605  0000ED                     	ds	4
   606  0000F1                     main@minute:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x11
   610  0000F1                     	ds	1
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           postdec1	equ	0xFE5
   618                           fsr1h	equ	0xFE2
   619                           fsr1l	equ	0xFE1
   620                           
   621                           	psect	cstackCOMRAM
   622  000001                     __pcstackCOMRAM:
   623                           	opt stack 0
   624  000001                     ??_low_isr:
   625  000001                     
   626                           ; 1 bytes @ 0x0
   627  000001                     	ds	5
   628  000006                     low_isr@c:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x5
   632  000006                     	ds	1
   633  000007                     ??_StopPlaying:
   634  000007                     ?_ModbusCalcCRC:
   635                           	opt stack 0
   636  000007                     ?___lwdiv:
   637                           	opt stack 0
   638  000007                     ?___lwmod:
   639                           	opt stack 0
   640  000007                     ?_millis:
   641                           	opt stack 0
   642  000007                     PortRead@ret:
   643                           	opt stack 0
   644  000007                     getHourMin@min:
   645                           	opt stack 0
   646  000007                     UpdateLedRegister@regIndex:
   647                           	opt stack 0
   648  000007                     SwitchOffAllLeds@i:
   649                           	opt stack 0
   650  000007                     LightLed@ledState:
   651                           	opt stack 0
   652  000007                     LightStatusLed@on:
   653                           	opt stack 0
   654  000007                     InitApp@i:
   655                           	opt stack 0
   656  000007                     SetTime@newTime:
   657                           	opt stack 0
   658  000007                     ModbusSetExceptionStatusBit@value:
   659                           	opt stack 0
   660  000007                     ModbusInit@u8serno:
   661                           	opt stack 0
   662  000007                     ModbusBuildException@u8exception:
   663                           	opt stack 0
   664  000007                     ModbusGetLastCommand@count:
   665                           	opt stack 0
   666  000007                     CopyStringToBuffer@src:
   667                           	opt stack 0
   668  000007                     ___lbdiv@divisor:
   669                           	opt stack 0
   670  000007                     ___lbmod@divisor:
   671                           	opt stack 0
   672  000007                     PortWrite@buf:
   673                           	opt stack 0
   674  000007                     SetBuzzerDuty@dc:
   675                           	opt stack 0
   676  000007                     ___lwdiv@dividend:
   677                           	opt stack 0
   678  000007                     ___lwmod@dividend:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x6
   682  000007                     	ds	1
   683  000008                     ??_ModbusSetExceptionStatusBit:
   684  000008                     ??_ModbusGetRxBuffer:
   685  000008                     ??_ProcessLightBlock:
   686  000008                     getHourMin@hour:
   687                           	opt stack 0
   688  000008                     LightLed@blink:
   689                           	opt stack 0
   690  000008                     LightStatusLed@blink:
   691                           	opt stack 0
   692  000008                     ModbusInit@u8txenpin:
   693                           	opt stack 0
   694  000008                     ModbusBuildException@u8func:
   695                           	opt stack 0
   696  000008                     CopyStringToBuffer@len:
   697                           	opt stack 0
   698  000008                     ___lbdiv@dividend:
   699                           	opt stack 0
   700  000008                     ___lbmod@dividend:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x7
   704  000008                     	ds	1
   705  000009                     ??_LoadNextEvent:
   706  000009                     ??_ModbusCalcCRC:
   707  000009                     ??_LightLed:
   708  000009                     ??_LightStatusLed:
   709  000009                     ??_SetBuzzerDuty:
   710  000009                     ??_CopyStringToBuffer:
   711  000009                     PortWrite@buflen:
   712                           	opt stack 0
   713  000009                     ModbusGetRxBuffer@bBuffOverflow:
   714                           	opt stack 0
   715  000009                     ModbusGetLastCommand@address:
   716                           	opt stack 0
   717  000009                     ___lbdiv@counter:
   718                           	opt stack 0
   719  000009                     ___lbmod@counter:
   720                           	opt stack 0
   721  000009                     ___lwdiv@divisor:
   722                           	opt stack 0
   723  000009                     ___lwmod@divisor:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x8
   727  000009                     	ds	1
   728  00000A                     PortWrite@i:
   729                           	opt stack 0
   730  00000A                     ModbusSetExceptionStatusBit@bitNum:
   731                           	opt stack 0
   732  00000A                     CopyStringToBuffer@objId:
   733                           	opt stack 0
   734  00000A                     ___lbdiv@quotient:
   735                           	opt stack 0
   736  00000A                     ___lbmod@rem:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x9
   740  00000A                     	ds	1
   741  00000B                     SetHourMin@newMin:
   742                           	opt stack 0
   743  00000B                     LoadNextEvent@hour:
   744                           	opt stack 0
   745  00000B                     ModbusInit@u8id:
   746                           	opt stack 0
   747  00000B                     CopyStringToBuffer@i:
   748                           	opt stack 0
   749  00000B                     ___lwdiv@counter:
   750                           	opt stack 0
   751  00000B                     ___lwmod@counter:
   752                           	opt stack 0
   753  00000B                     ModbusCalcCRC@temp2:
   754                           	opt stack 0
   755  00000B                     millis@ret:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0xA
   759  00000B                     	ds	1
   760  00000C                     ?_isleap:
   761                           	opt stack 0
   762  00000C                     SetHourMin@sec:
   763                           	opt stack 0
   764  00000C                     LightLed@ledNum:
   765                           	opt stack 0
   766  00000C                     ProcessLightBlock@curMs:
   767                           	opt stack 0
   768  00000C                     LoadNextEvent@minute:
   769                           	opt stack 0
   770  00000C                     Modbus@u8serno:
   771                           	opt stack 0
   772  00000C                     ___lwdiv@quotient:
   773                           	opt stack 0
   774  00000C                     isleap@yr:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0xB
   778  00000C                     	ds	1
   779  00000D                     ??_SetHourMin:
   780  00000D                     LightLed@ststusIndex:
   781                           	opt stack 0
   782  00000D                     LoadNextEvent@v1:
   783                           	opt stack 0
   784  00000D                     Modbus@u8txenpin:
   785                           	opt stack 0
   786  00000D                     ModbusCalcCRC@flag:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xC
   790  00000D                     	ds	1
   791  00000E                     ??_isleap:
   792  00000E                     ?_months_to_days:
   793                           	opt stack 0
   794  00000E                     ?_years_to_days:
   795                           	opt stack 0
   796  00000E                     LightLed@statusShift:
   797                           	opt stack 0
   798  00000E                     LightStatusLed@row:
   799                           	opt stack 0
   800  00000E                     Modbus@u8id:
   801                           	opt stack 0
   802  00000E                     months_to_days@month:
   803                           	opt stack 0
   804  00000E                     years_to_days@yr:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0xD
   808  00000E                     	ds	1
   809  00000F                     ??_InitFromEeprom:
   810  00000F                     ??_SoundPlayNextStep:
   811  00000F                     ??_ResetEvent:
   812  00000F                     ModbusCalcCRC@u8length:
   813                           	opt stack 0
   814  00000F                     _isleap$2165:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0xE
   818  00000F                     	ds	1
   819  000010                     ??_months_to_days:
   820  000010                     ModbusCalcCRC@i:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0xF
   824  000010                     	ds	1
   825  000011                     ResetEvent@state:
   826                           	opt stack 0
   827  000011                     ModbusCalcCRC@j:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x10
   831  000011                     	ds	1
   832  000012                     ??_years_to_days:
   833  000012                     _ResetEvent$876:
   834                           	opt stack 0
   835  000012                     ModbusCalcCRC@temp:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x11
   839  000012                     	ds	2
   840  000014                     ??_ModbusValidateRequest:
   841  000014                     SoundPlayNextStep@duration:
   842                           	opt stack 0
   843  000014                     ModbusSendTxBuffer@u16crc:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x13
   847  000014                     	ds	1
   848  000015                     PlaySound@playDuration:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x14
   852  000015                     	ds	1
   853  000016                     ??_ModbusProcess_FC5:
   854  000016                     ??_ModbusProcess_FC15:
   855  000016                     ??_ModbusProcess_FC17:
   856  000016                     ??_ModbusProcess_FC21:
   857  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   858                           	opt stack 0
   859  000016                     ModbusProcess_FC43@devIdCode:
   860                           	opt stack 0
   861  000016                     ModbusProcess_FC1@regs:
   862                           	opt stack 0
   863  000016                     ModbusProcess_FC3@regs:
   864                           	opt stack 0
   865  000016                     ModbusProcess_FC6@regs:
   866                           	opt stack 0
   867  000016                     ModbusProcess_FC16@regs:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x15
   871  000016                     	ds	1
   872  000017                     ??_PlaySound:
   873  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   874                           	opt stack 0
   875  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x16
   879  000017                     	ds	1
   880  000018                     ??_ModbusProcess_FC1:
   881  000018                     ModbusProcess_FC3@u8size:
   882                           	opt stack 0
   883  000018                     ModbusProcess_FC6@u8size:
   884                           	opt stack 0
   885  000018                     ModbusProcess_FC16@u8size:
   886                           	opt stack 0
   887  000018                     ModbusProcess_FC17@i:
   888                           	opt stack 0
   889  000018                     ModbusProcess_FC21@requestDataLen:
   890                           	opt stack 0
   891  000018                     ModbusProcess_FC43@objId:
   892                           	opt stack 0
   893  000018                     ModbusValidateRequest@startAddrBytes:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x17
   897  000018                     	ds	1
   898  000019                     ??_ModbusProcess_FC3:
   899  000019                     ??_ModbusProcess_FC6:
   900  000019                     ??_ModbusProcess_FC16:
   901  000019                     SetHourMin@newHour:
   902                           	opt stack 0
   903  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x18
   907  000019                     	ds	1
   908  00001A                     SetHourMin@tmpSec:
   909                           	opt stack 0
   910  00001A                     ModbusProcess_FC21@startAddrsBytes:
   911                           	opt stack 0
   912  00001A                     years_to_days@ret:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x19
   916  00001A                     	ds	1
   917  00001B                     SetHourMin@secToNext6Sec:
   918                           	opt stack 0
   919  00001B                     PlaySound@soundId:
   920                           	opt stack 0
   921  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   922                           	opt stack 0
   923  00001B                     ModbusProcess_FC1@u16coil:
   924                           	opt stack 0
   925  00001B                     ModbusProcess_FC6@u16val:
   926                           	opt stack 0
   927  00001B                     ModbusProcess_FC15@u16coil:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x1A
   931  00001B                     	ds	1
   932  00001C                     PlaySound@soundAddr:
   933                           	opt stack 0
   934  00001C                     ModbusProcess_FC5@u16coil:
   935                           	opt stack 0
   936  00001C                     ModbusProcess_FC21@recLenBytes:
   937                           	opt stack 0
   938  00001C                     ModbusValidateRequest@recLenBytes:
   939                           	opt stack 0
   940                           
   941                           ; 4 bytes @ 0x1B
   942  00001C                     	ds	1
   943  00001D                     ??_ProcessDiary:
   944  00001D                     ??_CommandSetStatusLed:
   945  00001D                     ModbusProcess_FC1@u8currentBit:
   946                           	opt stack 0
   947  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   948                           	opt stack 0
   949  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   950                           	opt stack 0
   951  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   952                           	opt stack 0
   953  00001D                     ModbusProcess_FC16@temp:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1C
   957  00001D                     	ds	1
   958  00001E                     ?_ymd_to_scalar:
   959                           	opt stack 0
   960  00001E                     CommandSetStatusLed@commandData:
   961                           	opt stack 0
   962  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   963                           	opt stack 0
   964  00001E                     ModbusProcess_FC5@regs:
   965                           	opt stack 0
   966  00001E                     ModbusProcess_FC15@bTemp:
   967                           	opt stack 0
   968  00001E                     ModbusProcess_FC21@i:
   969                           	opt stack 0
   970  00001E                     ModbusProcess_FC3@u16regsno:
   971                           	opt stack 0
   972  00001E                     ModbusProcess_FC6@u16add:
   973                           	opt stack 0
   974  00001E                     ymd_to_scalar@yr:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1D
   978  00001E                     	ds	1
   979  00001F                     CommandSetStatusLed@led:
   980                           	opt stack 0
   981  00001F                     ModbusProcess_FC1@u8bytesno:
   982                           	opt stack 0
   983  00001F                     ModbusProcess_FC5@u8currentBit:
   984                           	opt stack 0
   985  00001F                     ModbusProcess_FC15@u8frameByte:
   986                           	opt stack 0
   987  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x1E
   991  00001F                     	ds	1
   992  000020                     ModbusProcess_FC3@u8StartAdd:
   993                           	opt stack 0
   994  000020                     ModbusValidateRequest@u16MsgCRC:
   995                           	opt stack 0
   996  000020                     ModbusProcess_FC1@u16StartCoil:
   997                           	opt stack 0
   998  000020                     ModbusProcess_FC15@u16StartCoil:
   999                           	opt stack 0
  1000  000020                     ModbusProcess_FC16@u16StartAdd:
  1001                           	opt stack 0
  1002  000020                     ymd_to_scalar@mo:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x1F
  1006  000020                     	ds	1
  1007  000021                     ProcessDiary@hour:
  1008                           	opt stack 0
  1009  000021                     ModbusProcess_FC3@i:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x20
  1013  000021                     	ds	1
  1014  000022                     ProcessDiary@minute:
  1015                           	opt stack 0
  1016  000022                     ModbusValidateRequest@isSupported:
  1017                           	opt stack 0
  1018  000022                     ModbusProcess_FC16@u8regsno:
  1019                           	opt stack 0
  1020  000022                     ModbusProcess_FC1@u16currentCoil:
  1021                           	opt stack 0
  1022  000022                     ModbusProcess_FC15@u16Coilno:
  1023                           	opt stack 0
  1024  000022                     ymd_to_scalar@day:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x21
  1028  000022                     	ds	1
  1029  000023                     ModbusProcess_FC16@i:
  1030                           	opt stack 0
  1031  000023                     ModbusValidateRequest@u16count:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x22
  1035  000023                     	ds	1
  1036  000024                     ??_ymd_to_scalar:
  1037  000024                     ModbusProcess_FC1@u8bitsno:
  1038                           	opt stack 0
  1039  000024                     ModbusProcess_FC15@regs:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x23
  1043  000024                     	ds	1
  1044  000025                     ModbusValidateRequest@i:
  1045                           	opt stack 0
  1046  000025                     ModbusProcess_FC15@u8currentBit:
  1047                           	opt stack 0
  1048  000025                     ModbusProcess_FC1@u16Coilno:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x24
  1052  000025                     	ds	1
  1053  000026                     ModbusValidateRequest@readDevId:
  1054                           	opt stack 0
  1055  000026                     ModbusProcess_FC15@u16currentCoil:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x25
  1059  000026                     	ds	1
  1060  000027                     ModbusValidateRequest@u8regs:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x26
  1064  000027                     	ds	1
  1065  000028                     ModbusProcess_FC15@u8bitsno:
  1066                           	opt stack 0
  1067  000028                     ModbusValidateRequest@u16regs:
  1068                           	opt stack 0
  1069  000028                     _ymd_to_scalar$2178:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x27
  1073  000028                     	ds	2
  1074  00002A                     ModbusPoll@discreteInputs:
  1075                           	opt stack 0
  1076  00002A                     ymd_to_scalar@scalar:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x29
  1080  00002A                     	ds	2
  1081  00002C                     ModbusPoll@coils:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x2B
  1085  00002C                     	ds	1
  1086  00002D                     ModbusPoll@inputRegs:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x2C
  1090  00002D                     	ds	1
  1091  00002E                     ?_mktime:
  1092                           	opt stack 0
  1093                           
  1094                           ; 4 bytes @ 0x2D
  1095  00002E                     	ds	1
  1096  00002F                     ModbusPoll@inputRegsCount:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x2E
  1100  00002F                     	ds	1
  1101  000030                     ModbusPoll@holdingRegs:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x2F
  1105  000030                     	ds	2
  1106  000032                     ??_mktime:
  1107  000032                     ModbusPoll@holdingRegsCount:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x31
  1111  000032                     	ds	1
  1112  000033                     ModbusPoll@u8current:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x32
  1116  000033                     	ds	1
  1117  000034                     ModbusPoll@i8state:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x33
  1121  000034                     	ds	1
  1122  000035                     ModbusPoll@u8exception:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x34
  1126  000035                     	ds	11
  1127  000040                     mktime@tt:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x3F
  1131  000040                     	ds	4
  1132  000044                     mktime@timeptr:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x43
  1136  000044                     	ds	1
  1137  000045                     SetTimeFromRegs@daySec:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x44
  1141  000045                     	ds	1
  1142  000046                     SetTimeFromRegs@yearMonth:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x45
  1146  000046                     	ds	1
  1147  000047                     ??_SetTimeFromRegs:
  1148                           
  1149                           ; 1 bytes @ 0x46
  1150  000047                     	ds	2
  1151  000049                     SetTimeFromRegs@newRawTime:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x48
  1155  000049                     	ds	4
  1156  00004D                     SetTimeFromRegs@hourMin:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x4C
  1160  00004D                     	ds	1
  1161  00004E                     SetTimeFromRegs@newTime:
  1162                           	opt stack 0
  1163                           
  1164                           ; 18 bytes @ 0x4D
  1165  00004E                     	ds	18
  1166  000060                     SetTimeCommand@hourMin:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x5F
  1170  000060                     	ds	2
  1171  000062                     SetTimeCommand@daySec:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x61
  1175  000062                     	ds	2
  1176  000064                     SetTimeCommand@yearMonth:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x63
  1180  000064                     	ds	2
  1181  000066                     ??_io_poll:
  1182                           
  1183                           ; 1 bytes @ 0x65
  1184  000066                     	ds	4
  1185  00006A                     ??_main:
  1186                           
  1187                           ; 1 bytes @ 0x69
  1188  00006A                     	ds	5
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           postinc0	equ	0xFEE
  1194                           wreg	equ	0xFE8
  1195                           postdec1	equ	0xFE5
  1196                           fsr1h	equ	0xFE2
  1197                           fsr1l	equ	0xFE1
  1198                           
  1199 ;;
  1200 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1201 ;;
  1202 ;; *************** function _main *****************
  1203 ;; Defined at:
  1204 ;;		line 751 in file "main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  minute          1   17[BANK0 ] unsigned char 
  1209 ;;  hour            1   12[BANK0 ] unsigned char 
  1210 ;;  curMs           4   13[BANK0 ] unsigned long 
  1211 ;;  lastMs          4    7[BANK0 ] unsigned long 
  1212 ;;  oldBuzzerOnT    4    0        unsigned long 
  1213 ;;  oldMinute       1   11[BANK0 ] unsigned char 
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1223 ;;      Params:         0       0       0       0       0       0       0
  1224 ;;      Locals:         0      11       0       0       0       0       0
  1225 ;;      Temps:          5       0       0       0       0       0       0
  1226 ;;      Totals:         5      11       0       0       0       0       0
  1227 ;;Total ram usage:       16 bytes
  1228 ;; Hardware stack levels required when called:    9
  1229 ;; This function calls:
  1230 ;;		_AddSecond
  1231 ;;		_ConfigureOscillator
  1232 ;;		_GetTime
  1233 ;;		_InitApp
  1234 ;;		_InitFromEeprom
  1235 ;;		_LightStatusLed
  1236 ;;		_ModbusPoll
  1237 ;;		_ProcessDiary
  1238 ;;		_ProcessLightBlock
  1239 ;;		_ResetEvent
  1240 ;;		_SoundPlayNextStep
  1241 ;;		_StopPlaying
  1242 ;;		_getHourMin
  1243 ;;		_io_poll
  1244 ;;		_millis
  1245 ;;		_pwm_init
  1246 ;; This function is called by:
  1247 ;;		Startup code after reset
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text0
  1252  001144                     __ptext0:
  1253                           	opt stack 0
  1254  001144                     _main:
  1255                           	opt stack 22
  1256                           
  1257                           ;incstack = 0
  1258  001144  FFFF               	dw	65535
  1259                           
  1260                           ;main.c: 754: ConfigureOscillator();
  1261  001146  EC6E  F016         	call	_ConfigureOscillator	;wreg free
  1262                           
  1263                           ;main.c: 757: InitApp();
  1264  00114A  EC13  F012         	call	_InitApp	;wreg free
  1265                           
  1266                           ;main.c: 761: InitFromEeprom();
  1267  00114E  ECC4  F011         	call	_InitFromEeprom	;wreg free
  1268                           
  1269                           ;main.c: 770: unsigned long lastMs = millis();
  1270  001152  ECCC  F015         	call	_millis	;wreg free
  1271  001156  C007  F0E7         	movff	?_millis,main@lastMs
  1272  00115A  C008  F0E8         	movff	?_millis+1,main@lastMs+1
  1273  00115E  C009  F0E9         	movff	?_millis+2,main@lastMs+2
  1274  001162  C00A  F0EA         	movff	?_millis+3,main@lastMs+3
  1275                           
  1276                           ;main.c: 779: unsigned long oldBuzzerOnTime = 0;
  1277  001166  EC4E  F016         	call	_pwm_init	;wreg free
  1278                           
  1279                           ;main.c: 780: uint8_t oldMinute = 0xff;
  1280  00116A  0100               	movlb	0	; () banked
  1281  00116C  69EB               	setf	main@oldMinute& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;main.c: 782: LightStatusLed(0x07, 1, 0);
  1285  00116E  0E01               	movlw	1
  1286  001170  6E07               	movwf	LightStatusLed@on,c
  1287  001172  0E00               	movlw	0
  1288  001174  6E08               	movwf	LightStatusLed@blink,c
  1289  001176  0E07               	movlw	7
  1290  001178  EC03  F00E         	call	_LightStatusLed
  1291                           
  1292                           ;main.c: 783: LightStatusLed(0x05, 1, 1);
  1293  00117C  0E01               	movlw	1
  1294  00117E  6E07               	movwf	LightStatusLed@on,c
  1295  001180  6E08               	movwf	LightStatusLed@blink,c
  1296  001182  0E05               	movlw	5
  1297  001184  EC03  F00E         	call	_LightStatusLed
  1298  001188                     l6180:
  1299  001188  FFFF               	dw	65535	; assembler added errata NOP
  1300                           
  1301                           ;main.c: 785: {
  1302                           ;main.c: 786: unsigned long curMs = millis();
  1303  00118A  ECCC  F015         	call	_millis	;wreg free
  1304  00118E  C007  F0ED         	movff	?_millis,main@curMs
  1305  001192  C008  F0EE         	movff	?_millis+1,main@curMs+1
  1306  001196  C009  F0EF         	movff	?_millis+2,main@curMs+2
  1307  00119A  C00A  F0F0         	movff	?_millis+3,main@curMs+3
  1308                           
  1309                           ;main.c: 787: ProcessLightBlock(&curMs);
  1310  00119E  0EED               	movlw	main@curMs& (0+255)
  1311  0011A0  EC39  F006         	call	_ProcessLightBlock
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 789: if(_isSoundPlaying && curMs >= _playingEndMs)
  1315  0011A4  51CE               	movf	__isSoundPlaying& (0+255),w,b
  1316  0011A6  E00B               	bz	l6190
  1317                           
  1318                           ; BSR set to: 0
  1319  0011A8  51A0               	movf	__playingEndMs& (0+255),w,b
  1320  0011AA  5DED               	subwf	main@curMs& (0+255),w,b
  1321  0011AC  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1322  0011AE  59EE               	subwfb	(main@curMs+1)& (0+255),w,b
  1323  0011B0  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1324  0011B2  59EF               	subwfb	(main@curMs+2)& (0+255),w,b
  1325  0011B4  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1326  0011B6  59F0               	subwfb	(main@curMs+3)& (0+255),w,b
  1327  0011B8  E302               	bnc	l6190
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 790: {
  1331                           ;main.c: 791: SoundPlayNextStep();
  1332  0011BA  EC74  F010         	call	_SoundPlayNextStep	;wreg free
  1333  0011BE                     l6190:
  1334                           
  1335                           ;main.c: 792: }
  1336                           ;main.c: 795: if(PORTCbits.RC1 == 0)
  1337  0011BE  B282               	btfsc	3970,1,c	;volatile
  1338  0011C0  D008               	goto	l6198
  1339                           
  1340                           ;main.c: 796: {
  1341                           ;main.c: 798: if(currentAlarmedEventNum != 0xff)
  1342  0011C2  2876               	incf	_currentAlarmedEventNum,w,c
  1343  0011C4  E004               	bz	l6196
  1344                           
  1345                           ;main.c: 799: {
  1346                           ;main.c: 800: ResetEvent(1);
  1347  0011C6  0E01               	movlw	1
  1348  0011C8  ECDE  F014         	call	_ResetEvent
  1349                           
  1350                           ;main.c: 801: }
  1351  0011CC  D002               	goto	l6198
  1352  0011CE                     l6196:
  1353                           
  1354                           ;main.c: 802: else
  1355                           ;main.c: 803: {
  1356                           ;main.c: 804: StopPlaying();
  1357  0011CE  EC13  F016         	call	_StopPlaying	;wreg free
  1358  0011D2                     l6198:
  1359  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  1360                           
  1361                           ;main.c: 805: }
  1362                           ;main.c: 807: }
  1363                           ;main.c: 810: if(curMs - lastMs >= 1000)
  1364  0011D4  0100               	movlb	0	; () banked
  1365  0011D6  51E7               	movf	main@lastMs& (0+255),w,b
  1366  0011D8  5DED               	subwf	main@curMs& (0+255),w,b
  1367  0011DA  6E6A               	movwf	??_main& (0+255),c
  1368  0011DC  51E8               	movf	(main@lastMs+1)& (0+255),w,b
  1369  0011DE  59EE               	subwfb	(main@curMs+1)& (0+255),w,b
  1370  0011E0  6E6B               	movwf	(??_main+1)& (0+255),c
  1371  0011E2  51E9               	movf	(main@lastMs+2)& (0+255),w,b
  1372  0011E4  59EF               	subwfb	(main@curMs+2)& (0+255),w,b
  1373  0011E6  6E6C               	movwf	(??_main+2)& (0+255),c
  1374  0011E8  51EA               	movf	(main@lastMs+3)& (0+255),w,b
  1375  0011EA  59F0               	subwfb	(main@curMs+3)& (0+255),w,b
  1376  0011EC  6E6D               	movwf	(??_main+3)& (0+255),c
  1377  0011EE  506D               	movf	??_main+3,w,c
  1378  0011F0  106C               	iorwf	??_main+2,w,c
  1379  0011F2  E105               	bnz	u5370
  1380  0011F4  0EE8               	movlw	232
  1381  0011F6  5C6A               	subwf	??_main,w,c
  1382  0011F8  0E03               	movlw	3
  1383  0011FA  586B               	subwfb	??_main+1,w,c
  1384  0011FC  E34A               	bnc	l6228
  1385  0011FE                     u5370:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 811: {
  1389                           ;main.c: 812: AddSecond();
  1390  0011FE  EC57  F016         	call	_AddSecond	;wreg free
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 814: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1394  001202  2876               	incf	_currentAlarmedEventNum,w,c
  1395  001204  E015               	bz	l6208
  1396                           
  1397                           ; BSR set to: 0
  1398  001206  EC66  F016         	call	_GetTime	;wreg free
  1399  00120A  6ED9               	movwf	fsr2l,c
  1400  00120C  6ADA               	clrf	fsr2h,c
  1401  00120E  0100               	movlb	0	; () banked
  1402  001210  51AC               	movf	_eventResetSecond& (0+255),w,b
  1403  001212  5CDE               	subwf	postinc2,w,c
  1404  001214  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1405  001216  58DE               	subwfb	postinc2,w,c
  1406  001218  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1407  00121A  58DE               	subwfb	postinc2,w,c
  1408  00121C  50DE               	movf	postinc2,w,c
  1409  00121E  0A80               	xorlw	128
  1410  001220  6E6E               	movwf	(??_main+4)& (0+255),c
  1411  001222  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1412  001224  0A80               	xorlw	128
  1413  001226  586E               	subwfb	(??_main+4)& (0+255),w,c
  1414  001228  E303               	bnc	l6208
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 815: {
  1418                           ;main.c: 816: ResetEvent(0);
  1419  00122A  0E00               	movlw	0
  1420  00122C  ECDE  F014         	call	_ResetEvent
  1421  001230                     l6208:
  1422                           
  1423                           ;main.c: 817: }
  1424                           ;main.c: 819: _MODBUSInputRegs[5] = *GetTime();
  1425  001230  EC66  F016         	call	_GetTime	;wreg free
  1426  001234  6ED9               	movwf	fsr2l,c
  1427  001236  6ADA               	clrf	fsr2h,c
  1428  001238  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1429  00123C  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1430                           
  1431                           ;main.c: 820: uint8_t hour = 0, minute = 0;
  1432  001240  0100               	movlb	0	; () banked
  1433  001242  6BEC               	clrf	main@hour& (0+255),b
  1434                           
  1435                           ; BSR set to: 0
  1436  001244  6BF1               	clrf	main@minute& (0+255),b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;main.c: 822: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1440  001246  0EF1               	movlw	low main@minute
  1441  001248  6E07               	movwf	getHourMin@min,c
  1442  00124A  0EEC               	movlw	main@hour& (0+255)
  1443  00124C  ECB6  F015         	call	_getHourMin
  1444  001250  0900               	iorlw	0
  1445  001252  E00F               	bz	l6224
  1446  001254  0100               	movlb	0	; () banked
  1447  001256  51F1               	movf	main@minute& (0+255),w,b
  1448  001258  19EB               	xorwf	main@oldMinute& (0+255),w,b
  1449  00125A  E00B               	bz	l6224
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 823: {
  1453                           ;main.c: 824: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1454  00125C  51EC               	movf	main@hour& (0+255),w,b
  1455  00125E  6E6A               	movwf	??_main& (0+255),c
  1456  001260  51F1               	movf	main@minute& (0+255),w,b
  1457  001262  0101               	movlb	1	; () banked
  1458  001264  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1459  001266  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1460                           
  1461                           ; BSR set to: 1
  1462                           ;main.c: 826: oldMinute = minute;
  1463  00126A  C0F1  F0EB         	movff	main@minute,main@oldMinute
  1464                           
  1465                           ; BSR set to: 1
  1466                           ;main.c: 827: ProcessDiary();
  1467  00126E  ECBB  F00F         	call	_ProcessDiary	;wreg free
  1468  001272                     l6224:
  1469                           
  1470                           ;main.c: 828: }
  1471                           ;main.c: 830: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1472  001272  0100               	movlb	0	; () banked
  1473  001274  51EC               	movf	main@hour& (0+255),w,b
  1474  001276  6E6A               	movwf	??_main& (0+255),c
  1475  001278  51F1               	movf	main@minute& (0+255),w,b
  1476  00127A  0101               	movlb	1	; () banked
  1477  00127C  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1478  00127E  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1479                           
  1480                           ; BSR set to: 1
  1481                           ;main.c: 832: lastMs = curMs;
  1482  001282  C0ED  F0E7         	movff	main@curMs,main@lastMs
  1483  001286  C0EE  F0E8         	movff	main@curMs+1,main@lastMs+1
  1484  00128A  C0EF  F0E9         	movff	main@curMs+2,main@lastMs+2
  1485  00128E  C0F0  F0EA         	movff	main@curMs+3,main@lastMs+3
  1486  001292                     l6228:
  1487                           
  1488                           ;main.c: 834: }
  1489                           ;main.c: 835: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1490  001292  C0BC  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1491  001296  C0BD  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1492  00129A  0EDD               	movlw	low __MODBUSCoils
  1493  00129C  6E2C               	movwf	ModbusPoll@coils,c
  1494  00129E  0EAA               	movlw	low __MODBUSInputRegs
  1495  0012A0  6E2D               	movwf	ModbusPoll@inputRegs,c
  1496  0012A2  0E01               	movlw	high __MODBUSInputRegs
  1497  0012A4  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1498  0012A6  0E0F               	movlw	15
  1499  0012A8  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1500  0012AA  0E8C               	movlw	low __MODBUSHoldingRegs
  1501  0012AC  6E30               	movwf	ModbusPoll@holdingRegs,c
  1502  0012AE  0E01               	movlw	high __MODBUSHoldingRegs
  1503  0012B0  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1504  0012B2  0E0F               	movlw	15
  1505  0012B4  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1506  0012B6  EC60  F009         	call	_ModbusPoll	;wreg free
  1507                           
  1508                           ;main.c: 836: io_poll();
  1509  0012BA  ECC9  F00A         	call	_io_poll	;wreg free
  1510  0012BE  D764               	goto	l6180
  1511  0012C0                     __end_of_main:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           postdec1	equ	0xFE5
  1520                           fsr1h	equ	0xFE2
  1521                           fsr1l	equ	0xFE1
  1522                           postinc2	equ	0xFDE
  1523                           postdec2	equ	0xFDD
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           
  1527 ;; *************** function _pwm_init *****************
  1528 ;; Defined at:
  1529 ;;		line 355 in file "main.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1543 ;;      Params:         0       0       0       0       0       0       0
  1544 ;;      Locals:         0       0       0       0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0
  1546 ;;      Totals:         0       0       0       0       0       0       0
  1547 ;;Total ram usage:        0 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    2
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_main
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text1
  1558  002C9C                     __ptext1:
  1559                           	opt stack 0
  1560  002C9C                     _pwm_init:
  1561                           	opt stack 28
  1562                           
  1563                           ;incstack = 0
  1564  002C9C  FFFF               	dw	65535
  1565                           
  1566                           ;main.c: 367: CCP1CONbits.CCP1M = 0x0f;
  1567  002C9E  0E0F               	movlw	15
  1568  002CA0  12BD               	iorwf	4029,f,c	;volatile
  1569                           
  1570                           ;main.c: 374: PR2 = 255;
  1571  002CA2  68CB               	setf	4043,c	;volatile
  1572                           
  1573                           ;main.c: 377: T2CONbits.T2CKPS1 = 1;
  1574  002CA4  82CA               	bsf	4042,1,c	;volatile
  1575                           
  1576                           ;main.c: 378: T2CONbits.T2CKPS0 = 0;
  1577  002CA6  90CA               	bcf	4042,0,c	;volatile
  1578                           
  1579                           ;main.c: 381: TRISCbits.RC2 = 0;
  1580  002CA8  9494               	bcf	3988,2,c	;volatile
  1581  002CAA  0012               	return		;funcret
  1582  002CAC  FFFF               	dw	65535	; errata NOP
  1583  002CAE                     __end_of_pwm_init:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           postdec1	equ	0xFE5
  1592                           fsr1h	equ	0xFE2
  1593                           fsr1l	equ	0xFE1
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           
  1599 ;; *************** function _io_poll *****************
  1600 ;; Defined at:
  1601 ;;		line 889 in file "main.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  hourMin         2    0        unsigned int 
  1606 ;;  command         1    0[BANK0 ] unsigned char 
  1607 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1608 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1609 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1610 ;;		 -> _lastCommand(1), 
  1611 ;;  v1              1    3[BANK0 ] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1621 ;;      Params:         0       0       0       0       0       0       0
  1622 ;;      Locals:         0       7       0       0       0       0       0
  1623 ;;      Temps:          4       0       0       0       0       0       0
  1624 ;;      Totals:         4       7       0       0       0       0       0
  1625 ;;Total ram usage:       11 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    8
  1628 ;; This function calls:
  1629 ;;		_CommandSetStatusLed
  1630 ;;		_InitFromEeprom
  1631 ;;		_LightLed
  1632 ;;		_ModbusGetLastCommand
  1633 ;;		_ModbusSetExceptionStatusBit
  1634 ;;		_PlaySound
  1635 ;;		_SetTimeCommand
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text2
  1642  001592                     __ptext2:
  1643                           	opt stack 0
  1644  001592                     _io_poll:
  1645                           	opt stack 22
  1646                           
  1647                           ;incstack = 0
  1648  001592  FFFF               	dw	65535
  1649                           
  1650                           ;main.c: 891: uint16_t lastAddress;
  1651                           ;main.c: 892: uint16_t lastEndAddress;
  1652                           ;main.c: 894: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1653  001594  0EE1               	movlw	low io_poll@lastEndAddress
  1654  001596  6E07               	movwf	ModbusGetLastCommand@count,c
  1655  001598  0EE4               	movlw	io_poll@lastAddress& (0+255)
  1656  00159A  EC89  F015         	call	_ModbusGetLastCommand
  1657  00159E  0100               	movlb	0	; () banked
  1658  0015A0  6FE6               	movwf	io_poll@lastCommand& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 895: if(*lastCommand == MB_FC_NONE)
  1662  0015A2  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1663  0015A4  6ED9               	movwf	fsr2l,c
  1664  0015A6  6ADA               	clrf	fsr2h,c
  1665  0015A8  50DF               	movf	indf2,w,c
  1666  0015AA  E101 D08A          	bz	l439
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 898: lastEndAddress += lastAddress - 1;
  1670  0015AE  6866               	setf	??_io_poll& (0+255),c
  1671  0015B0  6867               	setf	(??_io_poll+1)& (0+255),c
  1672  0015B2  C0E4  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1673  0015B6  C0E5  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1674  0015BA  5066               	movf	??_io_poll,w,c
  1675  0015BC  2668               	addwf	??_io_poll+2,f,c
  1676  0015BE  5067               	movf	??_io_poll+1,w,c
  1677  0015C0  2269               	addwfc	??_io_poll+3,f,c
  1678  0015C2  5068               	movf	??_io_poll+2,w,c
  1679  0015C4  27E1               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1680  0015C6  5069               	movf	??_io_poll+3,w,c
  1681  0015C8  23E2               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 900: uint8_t v1;
  1685                           ;main.c: 901: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1686  0015CA  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1687  0015CC  6ED9               	movwf	fsr2l,c
  1688  0015CE  6ADA               	clrf	fsr2h,c
  1689  0015D0  0E06               	movlw	6
  1690  0015D2  18DE               	xorwf	postinc2,w,c
  1691  0015D4  E006               	bz	l6114
  1692                           
  1693                           ; BSR set to: 0
  1694  0015D6  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1695  0015D8  6ED9               	movwf	fsr2l,c
  1696  0015DA  6ADA               	clrf	fsr2h,c
  1697  0015DC  0E10               	movlw	16
  1698  0015DE  18DE               	xorwf	postinc2,w,c
  1699  0015E0  E162               	bnz	l6158
  1700  0015E2                     l6114:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 902: {
  1704                           ;main.c: 904: if(lastAddress == 0)
  1705  0015E2  51E4               	movf	io_poll@lastAddress& (0+255),w,b
  1706  0015E4  11E5               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1707  0015E6  E15F               	bnz	l6158
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 905: {
  1711                           ;main.c: 906: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1712  0015E8  C18D  F0E0         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1713                           
  1714                           ;main.c: 907: uint16_t hourMin;
  1715                           ;main.c: 908: switch(command)
  1716  0015EC  D046               	goto	l6156
  1717  0015EE                     l445:
  1718                           
  1719                           ; BSR set to: 0
  1720  0015EE  00FF               	reset		; ;# 
  1721                           
  1722                           ;main.c: 914: return;
  1723  0015F0  D068               	goto	l439
  1724  0015F2                     l6118:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;main.c: 918: SetTimeCommand();
  1728  0015F2  EC71  F015         	call	_SetTimeCommand	;wreg free
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 919: ModbusSetExceptionStatusBit(0, 1);
  1732  0015F6  0E01               	movlw	1
  1733  0015F8  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1734  0015FA  0E00               	movlw	0
  1735  0015FC  EC06  F014         	call	_ModbusSetExceptionStatusBit
  1736                           
  1737                           ;main.c: 920: break;
  1738  001600  D04C               	goto	l447
  1739  001602                     l449:
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 924: eventCount = 0;
  1743  001602  6BD8               	clrf	_eventCount& (0+255),b
  1744  001604                     l451:
  1745  001604  FFFF               	dw	65535	; assembler added errata NOP
  1746  001606  B2A6               	btfsc	4006,1,c	;volatile
  1747  001608  D7FD               	goto	l451
  1748  00160A  0E12               	movlw	18
  1749  00160C  6EA9               	movwf	4009,c	;volatile
  1750  00160E  6AA8               	clrf	4008,c	;volatile
  1751  001610  90D8               	bcf	status,0,c	;volatile
  1752  001612  BEF2               	btfsc	intcon,7,c	;volatile
  1753  001614  80D8               	bsf	status,0,c	;volatile
  1754  001616  9EF2               	bcf	intcon,7,c	;volatile
  1755  001618  84A6               	bsf	4006,2,c	;volatile
  1756  00161A  0E55               	movlw	85
  1757  00161C  6EA7               	movwf	4007,c	;volatile
  1758  00161E  0EAA               	movlw	170
  1759  001620  6EA7               	movwf	4007,c	;volatile
  1760  001622  82A6               	bsf	4006,1,c	;volatile
  1761  001624  94A6               	bcf	4006,2,c	;volatile
  1762  001626  E301               	bnc	l6142
  1763  001628  8EF2               	bsf	intcon,7,c	;volatile
  1764  00162A                     l6142:
  1765                           
  1766                           ;main.c: 926: ModbusSetExceptionStatusBit(0, 1);
  1767  00162A  0E01               	movlw	1
  1768  00162C  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1769  00162E  0E00               	movlw	0
  1770  001630  EC06  F014         	call	_ModbusSetExceptionStatusBit
  1771                           
  1772                           ;main.c: 927: break;
  1773  001634  D032               	goto	l447
  1774  001636                     l457:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 953: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1778  001636  C18E  F0E3         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 955: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1782  00163A  51E3               	movf	io_poll@v1& (0+255),w,b
  1783  00163C  0B03               	andlw	3
  1784  00163E  6E07               	movwf	LightLed@ledState,c
  1785  001640  41E3               	rrncf	io_poll@v1& (0+255),w,b
  1786  001642  42E8               	rrncf	wreg,f,c
  1787  001644  0B3F               	andlw	63
  1788  001646  0B01               	andlw	1
  1789  001648  6E08               	movwf	LightLed@blink,c
  1790  00164A  0101               	movlb	1	; () banked
  1791  00164C  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1792  00164E  ECC0  F004         	call	_LightLed
  1793                           
  1794                           ;main.c: 956: _MODBUSHoldingRegs[1] = 0;
  1795  001652  0101               	movlb	1	; () banked
  1796  001654  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1797  001656  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1798                           
  1799                           ; BSR set to: 1
  1800                           ;main.c: 957: ModbusSetExceptionStatusBit(0, 1);
  1801  001658  0E01               	movlw	1
  1802  00165A  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1803  00165C  0E00               	movlw	0
  1804  00165E  EC06  F014         	call	_ModbusSetExceptionStatusBit
  1805                           
  1806                           ;main.c: 958: break;
  1807  001662  D01B               	goto	l447
  1808  001664                     l6150:
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 967: PlaySound(((unsigned char)((_MODBUSHoldingRegs[0])&0xFF)), ((unsigned char
      +                          )((_MODBUSHoldingRegs[1])&0xFF)));
  1812  001664  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  1813  001668  6A16               	clrf	PlaySound@playDuration+1,c
  1814  00166A  0101               	movlb	1	; () banked
  1815  00166C  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1816  00166E  EC7E  F00E         	call	_PlaySound
  1817                           
  1818                           ;main.c: 968: break;
  1819  001672  D013               	goto	l447
  1820  001674                     l6152:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 971: CommandSetStatusLed();
  1824  001674  ECC6  F012         	call	_CommandSetStatusLed	;wreg free
  1825                           
  1826                           ;main.c: 972: break;
  1827  001678  D010               	goto	l447
  1828  00167A                     l6156:
  1829  00167A  FFFF               	dw	65535	; assembler added errata NOP
  1830                           
  1831                           ; BSR set to: 0
  1832  00167C  51E0               	movf	io_poll@command& (0+255),w,b
  1833                           
  1834                           ; Switch size 1, requested type "speed"
  1835                           ; Number of cases is 7, Range of values is 1 to 145
  1836                           ; switch strategies available:
  1837                           ; Name         Instructions Cycles
  1838                           ; simple_byte           22    12 (average)
  1839                           ;	Chosen strategy is simple_byte
  1840  00167E  0A01               	xorlw	1	; case 1
  1841  001680  E00C               	bz	l447
  1842  001682  0A11               	xorlw	17	; case 16
  1843  001684  E0B6               	bz	l6118
  1844  001686  0A6F               	xorlw	111	; case 127
  1845  001688  E0B2               	bz	l445
  1846  00168A  0AFF               	xorlw	255	; case 128
  1847  00168C  E0BA               	bz	l449
  1848  00168E  0A02               	xorlw	2	; case 130
  1849  001690  E0D2               	bz	l457
  1850  001692  0A01               	xorlw	1	; case 131
  1851  001694  E0EF               	bz	l6152
  1852  001696  0A12               	xorlw	18	; case 145
  1853  001698  E0E5               	bz	l6150
  1854  00169A                     l447:
  1855  00169A  FFFF               	dw	65535	; assembler added errata NOP
  1856                           
  1857                           ;main.c: 974: _MODBUSHoldingRegs[0] = 0;
  1858  00169C  0101               	movlb	1	; () banked
  1859  00169E  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1860  0016A0  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1861                           
  1862                           ;main.c: 975: _MODBUSHoldingRegs[1] = 0;
  1863  0016A2  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1864  0016A4  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1865  0016A6                     l6158:
  1866                           
  1867                           ;main.c: 976: }
  1868                           ;main.c: 977: }
  1869                           ;main.c: 980: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  1870  0016A6  0100               	movlb	0	; () banked
  1871  0016A8  51E6               	movf	io_poll@lastCommand& (0+255),w,b
  1872  0016AA  6ED9               	movwf	fsr2l,c
  1873  0016AC  6ADA               	clrf	fsr2h,c
  1874  0016AE  0E15               	movlw	21
  1875  0016B0  18DE               	xorwf	postinc2,w,c
  1876  0016B2  E107               	bnz	l439
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;main.c: 981: {
  1880                           ;main.c: 982: InitFromEeprom();
  1881  0016B4  ECC4  F011         	call	_InitFromEeprom	;wreg free
  1882                           
  1883                           ; BSR set to: 1
  1884                           ;main.c: 983: ModbusSetExceptionStatusBit(0, 1);
  1885  0016B8  0E01               	movlw	1
  1886  0016BA  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1887  0016BC  0E00               	movlw	0
  1888  0016BE  EC06  F014         	call	_ModbusSetExceptionStatusBit
  1889  0016C2                     l439:
  1890  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  1891  0016C4  0012               	return		;funcret
  1892  0016C6  FFFF               	dw	65535	; errata NOP
  1893  0016C8                     __end_of_io_poll:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           intcon	equ	0xFF2
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1h	equ	0xFE2
  1904                           fsr1l	equ	0xFE1
  1905                           indf2	equ	0xFDF
  1906                           postinc2	equ	0xFDE
  1907                           postdec2	equ	0xFDD
  1908                           fsr2h	equ	0xFDA
  1909                           fsr2l	equ	0xFD9
  1910                           status	equ	0xFD8
  1911                           
  1912 ;; *************** function _SetTimeCommand *****************
  1913 ;; Defined at:
  1914 ;;		line 860 in file "main.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;		None
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  yearMonth       2   99[COMRAM] unsigned int 
  1919 ;;  daySec          2   97[COMRAM] unsigned int 
  1920 ;;  hourMin         2   95[COMRAM] unsigned int 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : F/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         0       0       0       0       0       0       0
  1931 ;;      Locals:         6       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0
  1933 ;;      Totals:         6       0       0       0       0       0       0
  1934 ;;Total ram usage:        6 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    7
  1937 ;; This function calls:
  1938 ;;		_SetTimeFromRegs
  1939 ;; This function is called by:
  1940 ;;		_io_poll
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text3
  1945  002AE2                     __ptext3:
  1946                           	opt stack 0
  1947  002AE2                     _SetTimeCommand:
  1948                           	opt stack 22
  1949                           
  1950                           ;incstack = 0
  1951  002AE2  FFFF               	dw	65535
  1952                           
  1953                           ;main.c: 862: uint16_t hourMin = _MODBUSHoldingRegs[1];
  1954  002AE4  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  1955  002AE8  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  1956                           
  1957                           ;main.c: 864: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  1958  002AEC  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  1959  002AF0  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  1960                           
  1961                           ;main.c: 865: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  1962  002AF4  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  1963  002AF8  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  1964                           
  1965                           ;main.c: 866: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  1966  002AFC  0E62               	movlw	low SetTimeCommand@daySec
  1967  002AFE  6E45               	movwf	SetTimeFromRegs@daySec,c
  1968  002B00  0E64               	movlw	low SetTimeCommand@yearMonth
  1969  002B02  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  1970  002B04  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  1971  002B06  EC58  F00F         	call	_SetTimeFromRegs
  1972                           
  1973                           ;main.c: 867: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  1974  002B0A  0100               	movlb	0	; () banked
  1975  002B0C  81BC               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  1976                           
  1977                           ; BSR set to: 0
  1978  002B0E  0012               	return		;funcret
  1979  002B10  FFFF               	dw	65535	; errata NOP
  1980  002B12                     __end_of_SetTimeCommand:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           intcon	equ	0xFF2
  1987                           postinc0	equ	0xFEE
  1988                           wreg	equ	0xFE8
  1989                           postdec1	equ	0xFE5
  1990                           fsr1h	equ	0xFE2
  1991                           fsr1l	equ	0xFE1
  1992                           indf2	equ	0xFDF
  1993                           postinc2	equ	0xFDE
  1994                           postdec2	equ	0xFDD
  1995                           fsr2h	equ	0xFDA
  1996                           fsr2l	equ	0xFD9
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _SetTimeFromRegs *****************
  2000 ;; Defined at:
  2001 ;;		line 843 in file "main.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  hourMin         1    wreg     PTR unsigned int 
  2004 ;;		 -> SetTimeCommand@hourMin(2), 
  2005 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2006 ;;		 -> SetTimeCommand@daySec(2), 
  2007 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2008 ;;		 -> SetTimeCommand@yearMonth(2), 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2011 ;;		 -> SetTimeCommand@hourMin(2), 
  2012 ;;  newTime        18   77[COMRAM] struct tm
  2013 ;;  newRawTime      4   72[COMRAM] long 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2023 ;;      Params:         2       0       0       0       0       0       0
  2024 ;;      Locals:        23       0       0       0       0       0       0
  2025 ;;      Temps:          2       0       0       0       0       0       0
  2026 ;;      Totals:        27       0       0       0       0       0       0
  2027 ;;Total ram usage:       27 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    6
  2030 ;; This function calls:
  2031 ;;		_LightStatusLed
  2032 ;;		_LoadNextEvent
  2033 ;;		_SetHourMin
  2034 ;;		_SetTime
  2035 ;;		_mktime
  2036 ;; This function is called by:
  2037 ;;		_SetTimeCommand
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text4
  2042  001EB0                     __ptext4:
  2043                           	opt stack 0
  2044  001EB0                     _SetTimeFromRegs:
  2045                           	opt stack 22
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;incstack = 0
  2049  001EB0  FFFF               	dw	65535
  2050                           
  2051                           ;SetTimeFromRegs@hourMin stored from wreg
  2052  001EB2  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2053                           
  2054                           ;main.c: 845: struct tm newTime;
  2055                           ;main.c: 846: newTime.tm_year = (*yearMonth >> 8) + 100;
  2056  001EB4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2057  001EB6  6ED9               	movwf	fsr2l,c
  2058  001EB8  6ADA               	clrf	fsr2h,c
  2059  001EBA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2060  001EBE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2061  001EC2  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2062  001EC6  6A48               	clrf	??_SetTimeFromRegs+1,c
  2063  001EC8  0E64               	movlw	100
  2064  001ECA  2447               	addwf	??_SetTimeFromRegs,w,c
  2065  001ECC  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2066  001ECE  0E00               	movlw	0
  2067  001ED0  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2068  001ED2  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2069                           
  2070                           ;main.c: 847: newTime.tm_mon = *yearMonth & 0xFF;
  2071  001ED4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2072  001ED6  6ED9               	movwf	fsr2l,c
  2073  001ED8  6ADA               	clrf	fsr2h,c
  2074  001EDA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2075  001EDE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2076  001EE2  5047               	movf	??_SetTimeFromRegs,w,c
  2077  001EE4  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2078  001EE6  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2079                           
  2080                           ;main.c: 848: newTime.tm_mday = *daySec >> 8;
  2081  001EE8  5045               	movf	SetTimeFromRegs@daySec,w,c
  2082  001EEA  6ED9               	movwf	fsr2l,c
  2083  001EEC  6ADA               	clrf	fsr2h,c
  2084  001EEE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2085  001EF2  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2086  001EF6  5048               	movf	??_SetTimeFromRegs+1,w,c
  2087  001EF8  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2088  001EFA  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2089                           
  2090                           ;main.c: 849: newTime.tm_hour = *hourMin >> 8;
  2091  001EFC  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2092  001EFE  6ED9               	movwf	fsr2l,c
  2093  001F00  6ADA               	clrf	fsr2h,c
  2094  001F02  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2095  001F06  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2096  001F0A  5048               	movf	??_SetTimeFromRegs+1,w,c
  2097  001F0C  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2098  001F0E  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2099                           
  2100                           ;main.c: 850: newTime.tm_min = *hourMin & 0xFF;
  2101  001F10  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2102  001F12  6ED9               	movwf	fsr2l,c
  2103  001F14  6ADA               	clrf	fsr2h,c
  2104  001F16  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2105  001F1A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2106  001F1E  5047               	movf	??_SetTimeFromRegs,w,c
  2107  001F20  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2108  001F22  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2109                           
  2110                           ;main.c: 851: newTime.tm_sec = *daySec & 0xFF;
  2111  001F24  5045               	movf	SetTimeFromRegs@daySec,w,c
  2112  001F26  6ED9               	movwf	fsr2l,c
  2113  001F28  6ADA               	clrf	fsr2h,c
  2114  001F2A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2115  001F2E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2116  001F32  5047               	movf	??_SetTimeFromRegs,w,c
  2117  001F34  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2118  001F36  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2119                           
  2120                           ;main.c: 852: SetHourMin(&newTime.tm_hour, &newTime.tm_min, &newTime.tm_sec);
  2121  001F38  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2122  001F3A  6E0B               	movwf	SetHourMin@newMin,c
  2123  001F3C  0E4E               	movlw	low SetTimeFromRegs@newTime
  2124  001F3E  6E0C               	movwf	SetHourMin@sec,c
  2125  001F40  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2126  001F42  0F04               	addlw	4
  2127  001F44  EC85  F00D         	call	_SetHourMin
  2128                           
  2129                           ;main.c: 853: time_t newRawTime = mktime(&newTime);
  2130  001F48  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2131  001F4A  EC37  F003         	call	_mktime
  2132  001F4E  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2133  001F52  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2134  001F56  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2135  001F5A  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2136                           
  2137                           ;main.c: 854: SetTime(&newRawTime);
  2138  001F5E  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2139  001F60  EC04  F016         	call	_SetTime
  2140                           
  2141                           ;main.c: 855: LightStatusLed(0x05, 0, 0);
  2142  001F64  0E00               	movlw	0
  2143  001F66  6E07               	movwf	LightStatusLed@on,c
  2144  001F68  6E08               	movwf	LightStatusLed@blink,c
  2145  001F6A  0E05               	movlw	5
  2146  001F6C  EC03  F00E         	call	_LightStatusLed
  2147                           
  2148                           ;main.c: 856: LoadNextEvent();
  2149  001F70  EFFA  F00B         	goto	_LoadNextEvent	;wreg free
  2150  001F74  FFFF               	dw	65535	; errata NOP
  2151  001F76                     __end_of_SetTimeFromRegs:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           intcon	equ	0xFF2
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1h	equ	0xFE2
  2162                           fsr1l	equ	0xFE1
  2163                           indf2	equ	0xFDF
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _mktime *****************
  2171 ;; Defined at:
  2172 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  timeptr         1    wreg     PTR struct tm
  2175 ;;		 -> SetTimeFromRegs@newTime(18), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2178 ;;		 -> SetTimeFromRegs@newTime(18), 
  2179 ;;  tt              4   63[COMRAM] long 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  4   45[COMRAM] long 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2189 ;;      Params:         4       0       0       0       0       0       0
  2190 ;;      Locals:         5       0       0       0       0       0       0
  2191 ;;      Temps:         14       0       0       0       0       0       0
  2192 ;;      Totals:        23       0       0       0       0       0       0
  2193 ;;Total ram usage:       23 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    5
  2196 ;; This function calls:
  2197 ;;		_ymd_to_scalar
  2198 ;; This function is called by:
  2199 ;;		_SetTimeFromRegs
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text5
  2204  00066E                     __ptext5:
  2205                           	opt stack 0
  2206  00066E                     _mktime:
  2207                           	opt stack 22
  2208                           
  2209                           ;incstack = 0
  2210  00066E  FFFF               	dw	65535
  2211                           
  2212                           ;mktime@timeptr stored from wreg
  2213  000670  6E44               	movwf	mktime@timeptr,c
  2214  000672  5044               	movf	mktime@timeptr,w,c
  2215  000674  6ED9               	movwf	fsr2l,c
  2216  000676  6ADA               	clrf	fsr2h,c
  2217  000678  0E0A               	movlw	10
  2218  00067A  26D9               	addwf	fsr2l,f,c
  2219  00067C  0E01               	movlw	1
  2220  00067E  BEDB               	btfsc	plusw2,7,c
  2221  000680  D012               	goto	l1283
  2222  000682  50DB               	movf	plusw2,w,c
  2223  000684  E103               	bnz	u4410
  2224  000686  0E46               	movlw	70
  2225  000688  5CDE               	subwf	postinc2,w,c
  2226  00068A  E30D               	bnc	l1283
  2227  00068C                     u4410:
  2228  00068C  5044               	movf	mktime@timeptr,w,c
  2229  00068E  6ED9               	movwf	fsr2l,c
  2230  000690  6ADA               	clrf	fsr2h,c
  2231  000692  0E0A               	movlw	10
  2232  000694  26D9               	addwf	fsr2l,f,c
  2233  000696  0E01               	movlw	1
  2234  000698  BEDB               	btfsc	plusw2,7,c
  2235  00069A  D00B               	goto	l5342
  2236  00069C  50DB               	movf	plusw2,w,c
  2237  00069E  E103               	bnz	u4420
  2238  0006A0  0E8B               	movlw	139
  2239  0006A2  5CDE               	subwf	postinc2,w,c
  2240  0006A4  E306               	bnc	l5342
  2241  0006A6                     u4420:
  2242  0006A6                     l1283:
  2243  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2244  0006A8  6840               	setf	mktime@tt,c
  2245  0006AA  6841               	setf	mktime@tt+1,c
  2246  0006AC  6842               	setf	mktime@tt+2,c
  2247  0006AE  6843               	setf	mktime@tt+3,c
  2248  0006B0  D15C               	goto	l5352
  2249  0006B2                     l5342:
  2250  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2251  0006B4  5044               	movf	mktime@timeptr,w,c
  2252  0006B6  6ED9               	movwf	fsr2l,c
  2253  0006B8  6ADA               	clrf	fsr2h,c
  2254  0006BA  0E0A               	movlw	10
  2255  0006BC  26D9               	addwf	fsr2l,f,c
  2256  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2257  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2258  0006C6  0E6C               	movlw	108
  2259  0006C8  2432               	addwf	??_mktime,w,c
  2260  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2261  0006CC  0E07               	movlw	7
  2262  0006CE  2033               	addwfc	??_mktime+1,w,c
  2263  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2264  0006D2  5044               	movf	mktime@timeptr,w,c
  2265  0006D4  6ED9               	movwf	fsr2l,c
  2266  0006D6  6ADA               	clrf	fsr2h,c
  2267  0006D8  0E08               	movlw	8
  2268  0006DA  26D9               	addwf	fsr2l,f,c
  2269  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2270  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2271  0006E4  2834               	incf	??_mktime+2,w,c
  2272  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2273  0006E8  0E00               	movlw	0
  2274  0006EA  2035               	addwfc	??_mktime+3,w,c
  2275  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2276  0006EE  5044               	movf	mktime@timeptr,w,c
  2277  0006F0  6ED9               	movwf	fsr2l,c
  2278  0006F2  6ADA               	clrf	fsr2h,c
  2279  0006F4  0E06               	movlw	6
  2280  0006F6  26D9               	addwf	fsr2l,f,c
  2281  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2282  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2283  000700  EC21  F011         	call	_ymd_to_scalar	;wreg free
  2284  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2285  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2286  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2287  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2288  000714  0E07               	movlw	7
  2289  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2290  000718  0EB2               	movlw	178
  2291  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2292  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2293  00071E  0E01               	movlw	1
  2294  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2295  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2296  000724  6E22               	movwf	ymd_to_scalar@day,c
  2297  000726  EC21  F011         	call	_ymd_to_scalar	;wreg free
  2298  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2299  00072C  5E40               	subwf	mktime@tt,f,c
  2300  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2301  000730  5A41               	subwfb	mktime@tt+1,f,c
  2302  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2303  000734  5A42               	subwfb	mktime@tt+2,f,c
  2304  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2305  000738  5A43               	subwfb	mktime@tt+3,f,c
  2306  00073A  5044               	movf	mktime@timeptr,w,c
  2307  00073C  6ED9               	movwf	fsr2l,c
  2308  00073E  6ADA               	clrf	fsr2h,c
  2309  000740  0E04               	movlw	4
  2310  000742  26D9               	addwf	fsr2l,f,c
  2311  000744  CFDE F032          	movff	postinc2,??_mktime
  2312  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2313  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2314  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2315  000754  0E00               	movlw	0
  2316  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2317  000758  0EFF               	movlw	255
  2318  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2319  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2320  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2321  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2322  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2323  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2324  00076E  0E18               	movlw	24
  2325  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2326  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2327  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2328  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2329  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2330  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2331  000780  50F3               	movf	prodl,w,c
  2332  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2333  000784  50F4               	movf	prodh,w,c
  2334  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2335  000788  0E00               	movlw	0
  2336  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2337  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2338  00078E  50F3               	movf	prodl,w,c
  2339  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2340  000792  50F4               	movf	prodh,w,c
  2341  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2342  000796  0E00               	movlw	0
  2343  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2344  00079A  0E18               	movlw	24
  2345  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2346  00079E  50F3               	movf	prodl,w,c
  2347  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2348  0007A2  50F4               	movf	prodh,w,c
  2349  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2350  0007A6  0E00               	movlw	0
  2351  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2352  0007AA  50F3               	movf	prodl,w,c
  2353  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2354  0007AE  50F4               	movf	prodh,w,c
  2355  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2356  0007B2  0E00               	movlw	0
  2357  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2358  0007B6  50F3               	movf	prodl,w,c
  2359  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2360  0007BA  50F4               	movf	prodh,w,c
  2361  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2362  0007BE  0E18               	movlw	24
  2363  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2364  0007C2  50F3               	movf	prodl,w,c
  2365  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2366  0007C6  0E00               	movlw	0
  2367  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2368  0007CA  50F3               	movf	prodl,w,c
  2369  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2370  0007CE  0E00               	movlw	0
  2371  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2372  0007D2  50F3               	movf	prodl,w,c
  2373  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2374  0007D6  0E00               	movlw	0
  2375  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2376  0007DA  50F3               	movf	prodl,w,c
  2377  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2378  0007DE  5034               	movf	??_mktime+2,w,c
  2379  0007E0  243C               	addwf	??_mktime+10,w,c
  2380  0007E2  6E40               	movwf	mktime@tt,c
  2381  0007E4  5035               	movf	??_mktime+3,w,c
  2382  0007E6  203D               	addwfc	??_mktime+11,w,c
  2383  0007E8  6E41               	movwf	mktime@tt+1,c
  2384  0007EA  5036               	movf	??_mktime+4,w,c
  2385  0007EC  203E               	addwfc	??_mktime+12,w,c
  2386  0007EE  6E42               	movwf	mktime@tt+2,c
  2387  0007F0  5037               	movf	??_mktime+5,w,c
  2388  0007F2  203F               	addwfc	??_mktime+13,w,c
  2389  0007F4  6E43               	movwf	mktime@tt+3,c
  2390  0007F6  5044               	movf	mktime@timeptr,w,c
  2391  0007F8  6ED9               	movwf	fsr2l,c
  2392  0007FA  6ADA               	clrf	fsr2h,c
  2393  0007FC  0E02               	movlw	2
  2394  0007FE  26D9               	addwf	fsr2l,f,c
  2395  000800  CFDE F032          	movff	postinc2,??_mktime
  2396  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2397  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2398  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2399  000810  0E00               	movlw	0
  2400  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2401  000814  0EFF               	movlw	255
  2402  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2403  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2404  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2405  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2406  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2407  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2408  00082A  0E3C               	movlw	60
  2409  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2410  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2411  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2412  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2413  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2414  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2415  00083C  50F3               	movf	prodl,w,c
  2416  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2417  000840  50F4               	movf	prodh,w,c
  2418  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2419  000844  0E00               	movlw	0
  2420  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2421  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2422  00084A  50F3               	movf	prodl,w,c
  2423  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2424  00084E  50F4               	movf	prodh,w,c
  2425  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2426  000852  0E00               	movlw	0
  2427  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2428  000856  0E3C               	movlw	60
  2429  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2430  00085A  50F3               	movf	prodl,w,c
  2431  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2432  00085E  50F4               	movf	prodh,w,c
  2433  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2434  000862  0E00               	movlw	0
  2435  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2436  000866  50F3               	movf	prodl,w,c
  2437  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2438  00086A  50F4               	movf	prodh,w,c
  2439  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2440  00086E  0E00               	movlw	0
  2441  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2442  000872  50F3               	movf	prodl,w,c
  2443  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2444  000876  50F4               	movf	prodh,w,c
  2445  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2446  00087A  0E3C               	movlw	60
  2447  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2448  00087E  50F3               	movf	prodl,w,c
  2449  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2450  000882  0E00               	movlw	0
  2451  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2452  000886  50F3               	movf	prodl,w,c
  2453  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2454  00088A  0E00               	movlw	0
  2455  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2456  00088E  50F3               	movf	prodl,w,c
  2457  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2458  000892  0E00               	movlw	0
  2459  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2460  000896  50F3               	movf	prodl,w,c
  2461  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2462  00089A  5034               	movf	??_mktime+2,w,c
  2463  00089C  243C               	addwf	??_mktime+10,w,c
  2464  00089E  6E40               	movwf	mktime@tt,c
  2465  0008A0  5035               	movf	??_mktime+3,w,c
  2466  0008A2  203D               	addwfc	??_mktime+11,w,c
  2467  0008A4  6E41               	movwf	mktime@tt+1,c
  2468  0008A6  5036               	movf	??_mktime+4,w,c
  2469  0008A8  203E               	addwfc	??_mktime+12,w,c
  2470  0008AA  6E42               	movwf	mktime@tt+2,c
  2471  0008AC  5037               	movf	??_mktime+5,w,c
  2472  0008AE  203F               	addwfc	??_mktime+13,w,c
  2473  0008B0  6E43               	movwf	mktime@tt+3,c
  2474  0008B2  5044               	movf	mktime@timeptr,w,c
  2475  0008B4  6ED9               	movwf	fsr2l,c
  2476  0008B6  6ADA               	clrf	fsr2h,c
  2477  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2478  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2479  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2480  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2481  0008C8  0E00               	movlw	0
  2482  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2483  0008CC  0EFF               	movlw	255
  2484  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2485  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2486  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2487  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2488  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2489  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2490  0008E2  0E3C               	movlw	60
  2491  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2492  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2493  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2494  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2495  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2496  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2497  0008F4  50F3               	movf	prodl,w,c
  2498  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2499  0008F8  50F4               	movf	prodh,w,c
  2500  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2501  0008FC  0E00               	movlw	0
  2502  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2503  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2504  000902  50F3               	movf	prodl,w,c
  2505  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2506  000906  50F4               	movf	prodh,w,c
  2507  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2508  00090A  0E00               	movlw	0
  2509  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2510  00090E  0E3C               	movlw	60
  2511  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2512  000912  50F3               	movf	prodl,w,c
  2513  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2514  000916  50F4               	movf	prodh,w,c
  2515  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2516  00091A  0E00               	movlw	0
  2517  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2518  00091E  50F3               	movf	prodl,w,c
  2519  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2520  000922  50F4               	movf	prodh,w,c
  2521  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2522  000926  0E00               	movlw	0
  2523  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2524  00092A  50F3               	movf	prodl,w,c
  2525  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2526  00092E  50F4               	movf	prodh,w,c
  2527  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2528  000932  0E3C               	movlw	60
  2529  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2530  000936  50F3               	movf	prodl,w,c
  2531  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2532  00093A  0E00               	movlw	0
  2533  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2534  00093E  50F3               	movf	prodl,w,c
  2535  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2536  000942  0E00               	movlw	0
  2537  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2538  000946  50F3               	movf	prodl,w,c
  2539  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2540  00094A  0E00               	movlw	0
  2541  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2542  00094E  50F3               	movf	prodl,w,c
  2543  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2544  000952  5034               	movf	??_mktime+2,w,c
  2545  000954  243C               	addwf	??_mktime+10,w,c
  2546  000956  6E40               	movwf	mktime@tt,c
  2547  000958  5035               	movf	??_mktime+3,w,c
  2548  00095A  203D               	addwfc	??_mktime+11,w,c
  2549  00095C  6E41               	movwf	mktime@tt+1,c
  2550  00095E  5036               	movf	??_mktime+4,w,c
  2551  000960  203E               	addwfc	??_mktime+12,w,c
  2552  000962  6E42               	movwf	mktime@tt+2,c
  2553  000964  5037               	movf	??_mktime+5,w,c
  2554  000966  203F               	addwfc	??_mktime+13,w,c
  2555  000968  6E43               	movwf	mktime@tt+3,c
  2556  00096A                     l5352:
  2557  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2558  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2559  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2560  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2561  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2562  00097C  0012               	return		;funcret
  2563  00097E  FFFF               	dw	65535	; errata NOP
  2564  000980                     __end_of_mktime:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           intcon	equ	0xFF2
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1h	equ	0xFE2
  2577                           fsr1l	equ	0xFE1
  2578                           indf2	equ	0xFDF
  2579                           postinc2	equ	0xFDE
  2580                           postdec2	equ	0xFDD
  2581                           plusw2	equ	0xFDB
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _ymd_to_scalar *****************
  2587 ;; Defined at:
  2588 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  yr              2   29[COMRAM] unsigned int 
  2591 ;;  mo              2   31[COMRAM] unsigned int 
  2592 ;;  day             2   33[COMRAM] unsigned int 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  scalar          4   41[COMRAM] long 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  4   29[COMRAM] long 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2604 ;;      Params:         6       0       0       0       0       0       0
  2605 ;;      Locals:         6       0       0       0       0       0       0
  2606 ;;      Temps:          4       0       0       0       0       0       0
  2607 ;;      Totals:        16       0       0       0       0       0       0
  2608 ;;Total ram usage:       16 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    4
  2611 ;; This function calls:
  2612 ;;		_isleap
  2613 ;;		_months_to_days
  2614 ;;		_years_to_days
  2615 ;; This function is called by:
  2616 ;;		_mktime
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text6
  2621  002242                     __ptext6:
  2622                           	opt stack 0
  2623  002242                     _ymd_to_scalar:
  2624                           	opt stack 22
  2625                           
  2626                           ;incstack = 0
  2627  002242  FFFF               	dw	65535
  2628  002244  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2629  002248  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2630  00224C  EC76  F014         	call	_months_to_days	;wreg free
  2631  002250  5022               	movf	ymd_to_scalar@day,w,c
  2632  002252  260E               	addwf	?_months_to_days,f,c
  2633  002254  5023               	movf	ymd_to_scalar@day+1,w,c
  2634  002256  220F               	addwfc	?_months_to_days+1,f,c
  2635  002258  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2636  00225C  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2637  002260  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2638  002262  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2639  002264  5021               	movf	ymd_to_scalar@mo+1,w,c
  2640  002266  E103               	bnz	u4190
  2641  002268  0E03               	movlw	3
  2642  00226A  5C20               	subwf	ymd_to_scalar@mo,w,c
  2643  00226C  E321               	bnc	l5184
  2644  00226E                     u4190:
  2645  00226E  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2646  002272  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2647  002276  ECE0  F013         	call	_isleap	;wreg free
  2648  00227A  500C               	movf	?_isleap,w,c
  2649  00227C  100D               	iorwf	?_isleap+1,w,c
  2650  00227E  E103               	bnz	l5180
  2651  002280  6A29               	clrf	_ymd_to_scalar$2178+1,c
  2652  002282  0E02               	movlw	2
  2653  002284  D002               	goto	L1
  2654  002286                     l5180:
  2655  002286  6A29               	clrf	_ymd_to_scalar$2178+1,c
  2656  002288  0E01               	movlw	1
  2657  00228A                     L1:
  2658  00228A  FFFF               	dw	65535	; assembler added errata NOP
  2659  00228C  6E28               	movwf	_ymd_to_scalar$2178,c
  2660  00228E  C028  F024         	movff	_ymd_to_scalar$2178,??_ymd_to_scalar
  2661  002292  C029  F025         	movff	_ymd_to_scalar$2178+1,??_ymd_to_scalar+1
  2662  002296  0E00               	movlw	0
  2663  002298  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2664  00229A  0EFF               	movlw	255
  2665  00229C  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2666  00229E  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2667  0022A0  5024               	movf	??_ymd_to_scalar,w,c
  2668  0022A2  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2669  0022A4  5025               	movf	??_ymd_to_scalar+1,w,c
  2670  0022A6  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2671  0022A8  5026               	movf	??_ymd_to_scalar+2,w,c
  2672  0022AA  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2673  0022AC  5027               	movf	??_ymd_to_scalar+3,w,c
  2674  0022AE  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2675  0022B0                     l5184:
  2676  0022B0  061E               	decf	ymd_to_scalar@yr,f,c
  2677  0022B2  A0D8               	btfss	status,0,c
  2678  0022B4  061F               	decf	ymd_to_scalar@yr+1,f,c
  2679  0022B6  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2680  0022BA  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2681  0022BE  EC04  F00D         	call	_years_to_days	;wreg free
  2682  0022C2  500E               	movf	?_years_to_days,w,c
  2683  0022C4  262A               	addwf	ymd_to_scalar@scalar,f,c
  2684  0022C6  500F               	movf	?_years_to_days+1,w,c
  2685  0022C8  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2686  0022CA  5010               	movf	?_years_to_days+2,w,c
  2687  0022CC  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2688  0022CE  5011               	movf	?_years_to_days+3,w,c
  2689  0022D0  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2690  0022D2  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2691  0022D6  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2692  0022DA  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2693  0022DE  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2694  0022E2  0012               	return		;funcret
  2695  0022E4  FFFF               	dw	65535	; errata NOP
  2696  0022E6                     __end_of_ymd_to_scalar:
  2697                           	opt stack 0
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           intcon	equ	0xFF2
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           postdec1	equ	0xFE5
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           plusw2	equ	0xFDB
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _years_to_days *****************
  2719 ;; Defined at:
  2720 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  yr              2   13[COMRAM] unsigned int 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  ret             4   25[COMRAM] long 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  4   13[COMRAM] long 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2734 ;;      Params:         4       0       0       0       0       0       0
  2735 ;;      Locals:         4       0       0       0       0       0       0
  2736 ;;      Temps:          8       0       0       0       0       0       0
  2737 ;;      Totals:        16       0       0       0       0       0       0
  2738 ;;Total ram usage:       16 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    3
  2741 ;; This function calls:
  2742 ;;		___lwdiv
  2743 ;; This function is called by:
  2744 ;;		_ymd_to_scalar
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text7
  2749  001A08                     __ptext7:
  2750                           	opt stack 0
  2751  001A08                     _years_to_days:
  2752                           	opt stack 22
  2753                           
  2754                           ;incstack = 0
  2755  001A08  FFFF               	dw	65535
  2756  001A0A  500E               	movf	years_to_days@yr,w,c
  2757  001A0C  6E12               	movwf	??_years_to_days& (0+255),c
  2758  001A0E  500F               	movf	years_to_days@yr+1,w,c
  2759  001A10  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  2760  001A12  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  2761  001A14  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  2762  001A16  0E6D               	movlw	109
  2763  001A18  0212               	mulwf	??_years_to_days& (0+255),c
  2764  001A1A  CFF3 F016          	movff	prodl,??_years_to_days+4
  2765  001A1E  CFF4 F017          	movff	prodh,??_years_to_days+5
  2766  001A22  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  2767  001A24  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  2768  001A26  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2769  001A28  50F3               	movf	prodl,w,c
  2770  001A2A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2771  001A2C  50F4               	movf	prodh,w,c
  2772  001A2E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2773  001A30  0E00               	movlw	0
  2774  001A32  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2775  001A34  0E01               	movlw	1
  2776  001A36  0212               	mulwf	??_years_to_days& (0+255),c
  2777  001A38  50F3               	movf	prodl,w,c
  2778  001A3A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2779  001A3C  50F4               	movf	prodh,w,c
  2780  001A3E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2781  001A40  0E00               	movlw	0
  2782  001A42  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2783  001A44  0E6D               	movlw	109
  2784  001A46  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2785  001A48  50F3               	movf	prodl,w,c
  2786  001A4A  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2787  001A4C  50F4               	movf	prodh,w,c
  2788  001A4E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2789  001A50  0E01               	movlw	1
  2790  001A52  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2791  001A54  50F3               	movf	prodl,w,c
  2792  001A56  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2793  001A58  50F4               	movf	prodh,w,c
  2794  001A5A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2795  001A5C  0E00               	movlw	0
  2796  001A5E  0212               	mulwf	??_years_to_days& (0+255),c
  2797  001A60  50F3               	movf	prodl,w,c
  2798  001A62  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2799  001A64  50F4               	movf	prodh,w,c
  2800  001A66  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2801  001A68  0E6D               	movlw	109
  2802  001A6A  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  2803  001A6C  50F3               	movf	prodl,w,c
  2804  001A6E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2805  001A70  0E01               	movlw	1
  2806  001A72  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2807  001A74  50F3               	movf	prodl,w,c
  2808  001A76  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2809  001A78  0E00               	movlw	0
  2810  001A7A  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2811  001A7C  50F3               	movf	prodl,w,c
  2812  001A7E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2813  001A80  0E00               	movlw	0
  2814  001A82  0212               	mulwf	??_years_to_days& (0+255),c
  2815  001A84  50F3               	movf	prodl,w,c
  2816  001A86  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2817  001A88  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  2818  001A8C  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  2819  001A90  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  2820  001A94  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  2821  001A98  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2822  001A9C  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2823  001AA0  6A0A               	clrf	___lwdiv@divisor+1,c
  2824  001AA2  0E64               	movlw	100
  2825  001AA4  6E09               	movwf	___lwdiv@divisor,c
  2826  001AA6  ECB6  F013         	call	___lwdiv	;wreg free
  2827  001AAA  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  2828  001AAE  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  2829  001AB2  90D8               	bcf	status,0,c
  2830  001AB4  3213               	rrcf	??_years_to_days+1,f,c
  2831  001AB6  3212               	rrcf	??_years_to_days,f,c
  2832  001AB8  90D8               	bcf	status,0,c
  2833  001ABA  3213               	rrcf	??_years_to_days+1,f,c
  2834  001ABC  3212               	rrcf	??_years_to_days,f,c
  2835  001ABE  5007               	movf	?___lwdiv,w,c
  2836  001AC0  5E12               	subwf	??_years_to_days,f,c
  2837  001AC2  5008               	movf	?___lwdiv+1,w,c
  2838  001AC4  5A13               	subwfb	??_years_to_days+1,f,c
  2839  001AC6  5012               	movf	??_years_to_days,w,c
  2840  001AC8  261A               	addwf	years_to_days@ret,f,c
  2841  001ACA  5013               	movf	??_years_to_days+1,w,c
  2842  001ACC  221B               	addwfc	years_to_days@ret+1,f,c
  2843  001ACE  0E00               	movlw	0
  2844  001AD0  221C               	addwfc	years_to_days@ret+2,f,c
  2845  001AD2  221D               	addwfc	years_to_days@ret+3,f,c
  2846  001AD4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2847  001AD8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2848  001ADC  0E01               	movlw	1
  2849  001ADE  6E0A               	movwf	___lwdiv@divisor+1,c
  2850  001AE0  0E90               	movlw	144
  2851  001AE2  6E09               	movwf	___lwdiv@divisor,c
  2852  001AE4  ECB6  F013         	call	___lwdiv	;wreg free
  2853  001AE8  5007               	movf	?___lwdiv,w,c
  2854  001AEA  261A               	addwf	years_to_days@ret,f,c
  2855  001AEC  5008               	movf	?___lwdiv+1,w,c
  2856  001AEE  221B               	addwfc	years_to_days@ret+1,f,c
  2857  001AF0  0E00               	movlw	0
  2858  001AF2  221C               	addwfc	years_to_days@ret+2,f,c
  2859  001AF4  221D               	addwfc	years_to_days@ret+3,f,c
  2860  001AF6  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  2861  001AFA  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  2862  001AFE  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  2863  001B02  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  2864  001B06  0C00               	retlw	0	;funcret
  2865  001B08  FFFF               	dw	65535	; errata NOP
  2866  001B0A                     __end_of_years_to_days:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1h	equ	0xFE2
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           plusw2	equ	0xFDB
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function _months_to_days *****************
  2889 ;; Defined at:
  2890 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  month           2   13[COMRAM] unsigned int 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  2   13[COMRAM] unsigned int 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2904 ;;      Params:         2       0       0       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0
  2906 ;;      Temps:          4       0       0       0       0       0       0
  2907 ;;      Totals:         6       0       0       0       0       0       0
  2908 ;;Total ram usage:        6 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		___lwdiv
  2913 ;; This function is called by:
  2914 ;;		_ymd_to_scalar
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text8
  2919  0028EC                     __ptext8:
  2920                           	opt stack 0
  2921  0028EC                     _months_to_days:
  2922                           	opt stack 22
  2923                           
  2924                           ;incstack = 0
  2925  0028EC  FFFF               	dw	65535
  2926  0028EE  0EF1               	movlw	241
  2927  0028F0  6E10               	movwf	??_months_to_days& (0+255),c
  2928  0028F2  0E0B               	movlw	11
  2929  0028F4  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  2930  0028F6  5010               	movf	??_months_to_days& (0+255),w,c
  2931  0028F8  020E               	mulwf	months_to_days@month,c
  2932  0028FA  CFF3 F012          	movff	prodl,??_months_to_days+2
  2933  0028FE  CFF4 F013          	movff	prodh,??_months_to_days+3
  2934  002902  020F               	mulwf	months_to_days@month+1,c
  2935  002904  50F3               	movf	prodl,w,c
  2936  002906  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2937  002908  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  2938  00290A  020E               	mulwf	months_to_days@month,c
  2939  00290C  50F3               	movf	prodl,w,c
  2940  00290E  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2941  002910  0E41               	movlw	65
  2942  002912  2412               	addwf	??_months_to_days+2,w,c
  2943  002914  6E07               	movwf	___lwdiv@dividend,c
  2944  002916  0EF4               	movlw	244
  2945  002918  2013               	addwfc	??_months_to_days+3,w,c
  2946  00291A  6E08               	movwf	___lwdiv@dividend+1,c
  2947  00291C  6A0A               	clrf	___lwdiv@divisor+1,c
  2948  00291E  0E64               	movlw	100
  2949  002920  6E09               	movwf	___lwdiv@divisor,c
  2950  002922  ECB6  F013         	call	___lwdiv	;wreg free
  2951  002926  C007  F00E         	movff	?___lwdiv,?_months_to_days
  2952  00292A  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  2953  00292E  0012               	return		;funcret
  2954  002930  FFFF               	dw	65535	; errata NOP
  2955  002932                     __end_of_months_to_days:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postdec1	equ	0xFE5
  2967                           fsr1h	equ	0xFE2
  2968                           fsr1l	equ	0xFE1
  2969                           indf2	equ	0xFDF
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           plusw2	equ	0xFDB
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function ___lwdiv *****************
  2978 ;; Defined at:
  2979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  dividend        2    6[COMRAM] unsigned int 
  2982 ;;  divisor         2    8[COMRAM] unsigned int 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  quotient        2   11[COMRAM] unsigned int 
  2985 ;;  counter         1   10[COMRAM] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  2    6[COMRAM] unsigned int 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2995 ;;      Params:         4       0       0       0       0       0       0
  2996 ;;      Locals:         3       0       0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0       0       0
  2998 ;;      Totals:         7       0       0       0       0       0       0
  2999 ;;Total ram usage:        7 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    2
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_months_to_days
  3006 ;;		_years_to_days
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text9
  3011  00276C                     __ptext9:
  3012                           	opt stack 0
  3013  00276C                     ___lwdiv:
  3014                           	opt stack 22
  3015                           
  3016                           ;incstack = 0
  3017  00276C  FFFF               	dw	65535
  3018  00276E  6A0C               	clrf	___lwdiv@quotient,c
  3019  002770  6A0D               	clrf	___lwdiv@quotient+1,c
  3020  002772  5009               	movf	___lwdiv@divisor,w,c
  3021  002774  100A               	iorwf	___lwdiv@divisor+1,w,c
  3022  002776  E01E               	bz	l1237
  3023  002778  0E01               	movlw	1
  3024  00277A  6E0B               	movwf	___lwdiv@counter,c
  3025  00277C  D005               	goto	l5050
  3026  00277E                     l5048:
  3027  00277E  FFFF               	dw	65535	; assembler added errata NOP
  3028  002780  90D8               	bcf	status,0,c
  3029  002782  3609               	rlcf	___lwdiv@divisor,f,c
  3030  002784  360A               	rlcf	___lwdiv@divisor+1,f,c
  3031  002786  2A0B               	incf	___lwdiv@counter,f,c
  3032  002788                     l5050:
  3033  002788  FFFF               	dw	65535	; assembler added errata NOP
  3034  00278A  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3035  00278C  D7F8               	goto	l5048
  3036  00278E                     l5052:
  3037  00278E  FFFF               	dw	65535	; assembler added errata NOP
  3038  002790  90D8               	bcf	status,0,c
  3039  002792  360C               	rlcf	___lwdiv@quotient,f,c
  3040  002794  360D               	rlcf	___lwdiv@quotient+1,f,c
  3041  002796  5009               	movf	___lwdiv@divisor,w,c
  3042  002798  5C07               	subwf	___lwdiv@dividend,w,c
  3043  00279A  500A               	movf	___lwdiv@divisor+1,w,c
  3044  00279C  5808               	subwfb	___lwdiv@dividend+1,w,c
  3045  00279E  E305               	bnc	l5060
  3046  0027A0  5009               	movf	___lwdiv@divisor,w,c
  3047  0027A2  5E07               	subwf	___lwdiv@dividend,f,c
  3048  0027A4  500A               	movf	___lwdiv@divisor+1,w,c
  3049  0027A6  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3050  0027A8  800C               	bsf	___lwdiv@quotient,0,c
  3051  0027AA                     l5060:
  3052  0027AA  90D8               	bcf	status,0,c
  3053  0027AC  320A               	rrcf	___lwdiv@divisor+1,f,c
  3054  0027AE  3209               	rrcf	___lwdiv@divisor,f,c
  3055  0027B0  2E0B               	decfsz	___lwdiv@counter,f,c
  3056  0027B2  D7ED               	goto	l5052
  3057  0027B4                     l1237:
  3058  0027B4  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3059  0027B8  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3060  0027BC  0012               	return		;funcret
  3061  0027BE  FFFF               	dw	65535	; errata NOP
  3062  0027C0                     __end_of___lwdiv:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon	equ	0xFF2
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           postdec1	equ	0xFE5
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           postinc2	equ	0xFDE
  3078                           postdec2	equ	0xFDD
  3079                           plusw2	equ	0xFDB
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _isleap *****************
  3085 ;; Defined at:
  3086 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  yr              2   11[COMRAM] unsigned int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  2   11[COMRAM] int 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         2       0       0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0
  3102 ;;      Temps:          1       0       0       0       0       0       0
  3103 ;;      Totals:         4       0       0       0       0       0       0
  3104 ;;Total ram usage:        4 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    3
  3107 ;; This function calls:
  3108 ;;		___lwmod
  3109 ;; This function is called by:
  3110 ;;		_ymd_to_scalar
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text10
  3115  0027C0                     __ptext10:
  3116                           	opt stack 0
  3117  0027C0                     _isleap:
  3118                           	opt stack 22
  3119                           
  3120                           ;incstack = 0
  3121  0027C0  FFFF               	dw	65535
  3122  0027C2  0E01               	movlw	1
  3123  0027C4  6E0F               	movwf	_isleap$2165,c
  3124  0027C6  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3125  0027CA  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3126  0027CE  6E0A               	movwf	___lwmod@divisor+1,c
  3127  0027D0  0E90               	movlw	144
  3128  0027D2  6E09               	movwf	___lwmod@divisor,c
  3129  0027D4  EC52  F014         	call	___lwmod	;wreg free
  3130  0027D8  5007               	movf	?___lwmod,w,c
  3131  0027DA  1008               	iorwf	?___lwmod+1,w,c
  3132  0027DC  E012               	bz	l1263
  3133  0027DE  C00C  F00E         	movff	isleap@yr,??_isleap
  3134  0027E2  0E03               	movlw	3
  3135  0027E4  160E               	andwf	??_isleap,f,c
  3136  0027E6  E10C               	bnz	l5040
  3137  0027E8  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3138  0027EC  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3139  0027F0  6A0A               	clrf	___lwmod@divisor+1,c
  3140  0027F2  0E64               	movlw	100
  3141  0027F4  6E09               	movwf	___lwmod@divisor,c
  3142  0027F6  EC52  F014         	call	___lwmod	;wreg free
  3143  0027FA  5007               	movf	?___lwmod,w,c
  3144  0027FC  1008               	iorwf	?___lwmod+1,w,c
  3145  0027FE  E101               	bnz	l1263
  3146  002800                     l5040:
  3147  002800  6A0F               	clrf	_isleap$2165,c
  3148  002802                     l1263:
  3149  002802  C00F  F00C         	movff	_isleap$2165,?_isleap
  3150  002806  6A0D               	clrf	?_isleap+1,c
  3151  002808  0012               	return		;funcret
  3152  00280A  FFFF               	dw	65535	; errata NOP
  3153  00280C                     __end_of_isleap:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           postdec1	equ	0xFE5
  3165                           fsr1h	equ	0xFE2
  3166                           fsr1l	equ	0xFE1
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function ___lwmod *****************
  3176 ;; Defined at:
  3177 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  dividend        2    6[COMRAM] unsigned int 
  3180 ;;  divisor         2    8[COMRAM] unsigned int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  counter         1   10[COMRAM] unsigned char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  2    6[COMRAM] unsigned int 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3192 ;;      Params:         4       0       0       0       0       0       0
  3193 ;;      Locals:         1       0       0       0       0       0       0
  3194 ;;      Temps:          0       0       0       0       0       0       0
  3195 ;;      Totals:         5       0       0       0       0       0       0
  3196 ;;Total ram usage:        5 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    2
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_isleap
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text11
  3207  0028A4                     __ptext11:
  3208                           	opt stack 0
  3209  0028A4                     ___lwmod:
  3210                           	opt stack 22
  3211                           
  3212                           ;incstack = 0
  3213  0028A4  FFFF               	dw	65535
  3214  0028A6  5009               	movf	___lwmod@divisor,w,c
  3215  0028A8  100A               	iorwf	___lwmod@divisor+1,w,c
  3216  0028AA  E01A               	bz	l1247
  3217  0028AC  0E01               	movlw	1
  3218  0028AE  6E0B               	movwf	___lwmod@counter,c
  3219  0028B0  D005               	goto	l5070
  3220  0028B2                     l5068:
  3221  0028B2  FFFF               	dw	65535	; assembler added errata NOP
  3222  0028B4  90D8               	bcf	status,0,c
  3223  0028B6  3609               	rlcf	___lwmod@divisor,f,c
  3224  0028B8  360A               	rlcf	___lwmod@divisor+1,f,c
  3225  0028BA  2A0B               	incf	___lwmod@counter,f,c
  3226  0028BC                     l5070:
  3227  0028BC  FFFF               	dw	65535	; assembler added errata NOP
  3228  0028BE  AE0A               	btfss	___lwmod@divisor+1,7,c
  3229  0028C0  D7F8               	goto	l5068
  3230  0028C2                     l5072:
  3231  0028C2  FFFF               	dw	65535	; assembler added errata NOP
  3232  0028C4  5009               	movf	___lwmod@divisor,w,c
  3233  0028C6  5C07               	subwf	___lwmod@dividend,w,c
  3234  0028C8  500A               	movf	___lwmod@divisor+1,w,c
  3235  0028CA  5808               	subwfb	___lwmod@dividend+1,w,c
  3236  0028CC  E304               	bnc	l5076
  3237  0028CE  5009               	movf	___lwmod@divisor,w,c
  3238  0028D0  5E07               	subwf	___lwmod@dividend,f,c
  3239  0028D2  500A               	movf	___lwmod@divisor+1,w,c
  3240  0028D4  5A08               	subwfb	___lwmod@dividend+1,f,c
  3241  0028D6                     l5076:
  3242  0028D6  90D8               	bcf	status,0,c
  3243  0028D8  320A               	rrcf	___lwmod@divisor+1,f,c
  3244  0028DA  3209               	rrcf	___lwmod@divisor,f,c
  3245  0028DC  2E0B               	decfsz	___lwmod@counter,f,c
  3246  0028DE  D7F1               	goto	l5072
  3247  0028E0                     l1247:
  3248  0028E0  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3249  0028E4  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3250  0028E8  0012               	return		;funcret
  3251  0028EA  FFFF               	dw	65535	; errata NOP
  3252  0028EC                     __end_of___lwmod:
  3253                           	opt stack 0
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           postdec1	equ	0xFE5
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           plusw2	equ	0xFDB
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _SetTime *****************
  3275 ;; Defined at:
  3276 ;;		line 169 in file "user.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  newTime         1    wreg     PTR long 
  3279 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  newTime         1    6[COMRAM] PTR long 
  3282 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr2l, fsr2h, status,2
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3292 ;;      Params:         0       0       0       0       0       0       0
  3293 ;;      Locals:         1       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0
  3295 ;;      Totals:         1       0       0       0       0       0       0
  3296 ;;Total ram usage:        1 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    2
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_SetTimeFromRegs
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text12
  3307  002C08                     __ptext12:
  3308                           	opt stack 0
  3309  002C08                     _SetTime:
  3310                           	opt stack 25
  3311                           
  3312                           ;incstack = 0
  3313  002C08  FFFF               	dw	65535
  3314                           
  3315                           ;SetTime@newTime stored from wreg
  3316  002C0A  6E07               	movwf	SetTime@newTime,c
  3317                           
  3318                           ;user.c: 171: currentTime = *newTime;
  3319  002C0C  5007               	movf	SetTime@newTime,w,c
  3320  002C0E  6ED9               	movwf	fsr2l,c
  3321  002C10  6ADA               	clrf	fsr2h,c
  3322  002C12  CFDE F0D9          	movff	postinc2,_currentTime
  3323  002C16  CFDE F0DA          	movff	postinc2,_currentTime+1
  3324  002C1A  CFDE F0DB          	movff	postinc2,_currentTime+2
  3325  002C1E  CFDE F0DC          	movff	postinc2,_currentTime+3
  3326  002C22  0012               	return		;funcret
  3327  002C24  FFFF               	dw	65535	; errata NOP
  3328  002C26                     __end_of_SetTime:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           postinc0	equ	0xFEE
  3338                           wreg	equ	0xFE8
  3339                           postdec1	equ	0xFE5
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           plusw2	equ	0xFDB
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _SetHourMin *****************
  3351 ;; Defined at:
  3352 ;;		line 256 in file "interrupts.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  newHour         1    wreg     PTR int 
  3355 ;;		 -> SetTimeFromRegs@newTime(18), 
  3356 ;;  newMin          1   10[COMRAM] PTR int 
  3357 ;;		 -> SetTimeFromRegs@newTime(18), 
  3358 ;;  sec             1   11[COMRAM] PTR int 
  3359 ;;		 -> SetTimeFromRegs@newTime(18), 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  newHour         1   24[COMRAM] PTR int 
  3362 ;;		 -> SetTimeFromRegs@newTime(18), 
  3363 ;;  secToNext6Se    1   26[COMRAM] unsigned char 
  3364 ;;  tmpSec          1   25[COMRAM] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3374 ;;      Params:         2       0       0       0       0       0       0
  3375 ;;      Locals:         3       0       0       0       0       0       0
  3376 ;;      Temps:         12       0       0       0       0       0       0
  3377 ;;      Totals:        17       0       0       0       0       0       0
  3378 ;;Total ram usage:       17 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    3
  3381 ;; This function calls:
  3382 ;;		___lbdiv
  3383 ;;		___lbmod
  3384 ;; This function is called by:
  3385 ;;		_SetTimeFromRegs
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text13
  3390  001B0A                     __ptext13:
  3391                           	opt stack 0
  3392  001B0A                     _SetHourMin:
  3393                           	opt stack 24
  3394                           
  3395                           ;incstack = 0
  3396  001B0A  FFFF               	dw	65535
  3397                           
  3398                           ;SetHourMin@newHour stored from wreg
  3399  001B0C  6E19               	movwf	SetHourMin@newHour,c
  3400                           
  3401                           ;interrupts.c: 258: T0CONbits.TMR0ON = 0;
  3402  001B0E  9ED5               	bcf	4053,7,c	;volatile
  3403                           
  3404                           ;interrupts.c: 260: globalHours = *newHour;
  3405  001B10  5019               	movf	SetHourMin@newHour,w,c
  3406  001B12  6ED9               	movwf	fsr2l,c
  3407  001B14  6ADA               	clrf	fsr2h,c
  3408  001B16  50DF               	movf	indf2,w,c
  3409  001B18  6E77               	movwf	_globalHours,c	;volatile
  3410                           
  3411                           ;interrupts.c: 261: globalMinutes = *newMin;
  3412  001B1A  500B               	movf	SetHourMin@newMin,w,c
  3413  001B1C  6ED9               	movwf	fsr2l,c
  3414  001B1E  6ADA               	clrf	fsr2h,c
  3415  001B20  50DF               	movf	indf2,w,c
  3416  001B22  6E74               	movwf	_globalMinutes,c	;volatile
  3417                           
  3418                           ;interrupts.c: 263: uint8_t tmpSec = *sec;
  3419  001B24  500C               	movf	SetHourMin@sec,w,c
  3420  001B26  6ED9               	movwf	fsr2l,c
  3421  001B28  6ADA               	clrf	fsr2h,c
  3422  001B2A  50DF               	movf	indf2,w,c
  3423  001B2C  6E1A               	movwf	SetHourMin@tmpSec,c
  3424                           
  3425                           ;interrupts.c: 264: _6sCounter = tmpSec / 6;
  3426  001B2E  0E06               	movlw	6
  3427  001B30  6E07               	movwf	___lbdiv@divisor,c
  3428  001B32  501A               	movf	SetHourMin@tmpSec,w,c
  3429  001B34  ECFF  F014         	call	___lbdiv
  3430  001B38  0100               	movlb	0	; () banked
  3431  001B3A  6FCA               	movwf	__6sCounter& (0+255),b	;volatile
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;interrupts.c: 265: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
  3435  001B3C  0E06               	movlw	6
  3436  001B3E  6E07               	movwf	___lbmod@divisor,c
  3437  001B40  501A               	movf	SetHourMin@tmpSec,w,c
  3438  001B42  ECA0  F015         	call	___lbmod
  3439  001B46  6E0D               	movwf	??_SetHourMin& (0+255),c
  3440  001B48  500D               	movf	??_SetHourMin,w,c
  3441  001B4A  0806               	sublw	6
  3442  001B4C  6E1B               	movwf	SetHourMin@secToNext6Sec,c
  3443                           
  3444                           ;interrupts.c: 266: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 0) * secToNext6Sec)>>
      +                          8),TMR0L=((0x10000 - (10000000L/4 / 256 + 0) * secToNext6Sec)&0xFF)));
  3445  001B4E  C01B  F00D         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
  3446  001B52  6A0E               	clrf	(??_SetHourMin+1)& (0+255),c
  3447  001B54  6A0F               	clrf	(??_SetHourMin+2)& (0+255),c
  3448  001B56  6A10               	clrf	(??_SetHourMin+3)& (0+255),c
  3449  001B58  0EDB               	movlw	219
  3450  001B5A  020D               	mulwf	??_SetHourMin& (0+255),c
  3451  001B5C  CFF3 F011          	movff	prodl,??_SetHourMin+4
  3452  001B60  CFF4 F012          	movff	prodh,??_SetHourMin+5
  3453  001B64  6A13               	clrf	(??_SetHourMin+6)& (0+255),c
  3454  001B66  6A14               	clrf	(??_SetHourMin+7)& (0+255),c
  3455  001B68  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3456  001B6A  50F3               	movf	prodl,w,c
  3457  001B6C  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3458  001B6E  50F4               	movf	prodh,w,c
  3459  001B70  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3460  001B72  0E00               	movlw	0
  3461  001B74  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3462  001B76  0ED9               	movlw	217
  3463  001B78  020D               	mulwf	??_SetHourMin& (0+255),c
  3464  001B7A  50F3               	movf	prodl,w,c
  3465  001B7C  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3466  001B7E  50F4               	movf	prodh,w,c
  3467  001B80  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3468  001B82  0E00               	movlw	0
  3469  001B84  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3470  001B86  0EDB               	movlw	219
  3471  001B88  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3472  001B8A  50F3               	movf	prodl,w,c
  3473  001B8C  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3474  001B8E  50F4               	movf	prodh,w,c
  3475  001B90  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3476  001B92  0ED9               	movlw	217
  3477  001B94  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3478  001B96  50F3               	movf	prodl,w,c
  3479  001B98  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3480  001B9A  50F4               	movf	prodh,w,c
  3481  001B9C  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3482  001B9E  0EFF               	movlw	255
  3483  001BA0  020D               	mulwf	??_SetHourMin& (0+255),c
  3484  001BA2  50F3               	movf	prodl,w,c
  3485  001BA4  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3486  001BA6  50F4               	movf	prodh,w,c
  3487  001BA8  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3488  001BAA  0EDB               	movlw	219
  3489  001BAC  0210               	mulwf	(??_SetHourMin+3)& (0+255),c
  3490  001BAE  50F3               	movf	prodl,w,c
  3491  001BB0  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3492  001BB2  0ED9               	movlw	217
  3493  001BB4  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3494  001BB6  50F3               	movf	prodl,w,c
  3495  001BB8  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3496  001BBA  0EFF               	movlw	255
  3497  001BBC  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3498  001BBE  50F3               	movf	prodl,w,c
  3499  001BC0  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3500  001BC2  0EFF               	movlw	255
  3501  001BC4  020D               	mulwf	??_SetHourMin& (0+255),c
  3502  001BC6  50F3               	movf	prodl,w,c
  3503  001BC8  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3504  001BCA  0E00               	movlw	0
  3505  001BCC  2411               	addwf	??_SetHourMin+4,w,c
  3506  001BCE  6E15               	movwf	(??_SetHourMin+8)& (0+255),c
  3507  001BD0  0E00               	movlw	0
  3508  001BD2  2012               	addwfc	??_SetHourMin+5,w,c
  3509  001BD4  6E16               	movwf	(??_SetHourMin+9)& (0+255),c
  3510  001BD6  0E01               	movlw	1
  3511  001BD8  2013               	addwfc	??_SetHourMin+6,w,c
  3512  001BDA  6E17               	movwf	(??_SetHourMin+10)& (0+255),c
  3513  001BDC  0E00               	movlw	0
  3514  001BDE  2014               	addwfc	??_SetHourMin+7,w,c
  3515  001BE0  6E18               	movwf	(??_SetHourMin+11)& (0+255),c
  3516  001BE2  C016  F015         	movff	??_SetHourMin+9,??_SetHourMin+8
  3517  001BE6  C017  F016         	movff	??_SetHourMin+10,??_SetHourMin+9
  3518  001BEA  C018  F017         	movff	??_SetHourMin+11,??_SetHourMin+10
  3519  001BEE  6A18               	clrf	??_SetHourMin+11,c
  3520  001BF0  BE17               	btfsc	??_SetHourMin+10,7,c
  3521  001BF2  6818               	setf	??_SetHourMin+11,c
  3522  001BF4  5015               	movf	??_SetHourMin+8,w,c
  3523  001BF6  6ED7               	movwf	4055,c	;volatile
  3524  001BF8  501B               	movf	SetHourMin@secToNext6Sec,w,c
  3525  001BFA  0DDB               	mullw	219
  3526  001BFC  CFF3 FFD6          	movff	prodl,4054	;volatile
  3527                           
  3528                           ;interrupts.c: 268: T0CONbits.TMR0ON = 1;
  3529  001C00  8ED5               	bsf	4053,7,c	;volatile
  3530  001C02  0012               	return		;funcret
  3531  001C04  FFFF               	dw	65535	; errata NOP
  3532  001C06                     __end_of_SetHourMin:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function ___lbmod *****************
  3555 ;; Defined at:
  3556 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  dividend        1    wreg     unsigned char 
  3559 ;;  divisor         1    6[COMRAM] unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  dividend        1    7[COMRAM] unsigned char 
  3562 ;;  rem             1    9[COMRAM] unsigned char 
  3563 ;;  counter         1    8[COMRAM] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      unsigned char 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : F/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3573 ;;      Params:         1       0       0       0       0       0       0
  3574 ;;      Locals:         3       0       0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0
  3576 ;;      Totals:         4       0       0       0       0       0       0
  3577 ;;Total ram usage:        4 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    2
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_SetHourMin
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text14
  3588  002B40                     __ptext14:
  3589                           	opt stack 0
  3590  002B40                     ___lbmod:
  3591                           	opt stack 24
  3592                           
  3593                           ;incstack = 0
  3594  002B40  FFFF               	dw	65535
  3595                           
  3596                           ;___lbmod@dividend stored from wreg
  3597  002B42  6E08               	movwf	___lbmod@dividend,c
  3598  002B44  0E08               	movlw	8
  3599  002B46  6E09               	movwf	___lbmod@counter,c
  3600  002B48  6A0A               	clrf	___lbmod@rem,c
  3601  002B4A                     l5158:
  3602  002B4A  FFFF               	dw	65535	; assembler added errata NOP
  3603  002B4C  90D8               	bcf	status,0,c
  3604  002B4E  3408               	rlcf	___lbmod@dividend,w,c
  3605  002B50  340A               	rlcf	___lbmod@rem,w,c
  3606  002B52  6E0A               	movwf	___lbmod@rem,c
  3607  002B54  90D8               	bcf	status,0,c
  3608  002B56  3608               	rlcf	___lbmod@dividend,f,c
  3609  002B58  5007               	movf	___lbmod@divisor,w,c
  3610  002B5A  5C0A               	subwf	___lbmod@rem,w,c
  3611  002B5C  E302               	bnc	l5166
  3612  002B5E  5007               	movf	___lbmod@divisor,w,c
  3613  002B60  5E0A               	subwf	___lbmod@rem,f,c
  3614  002B62                     l5166:
  3615  002B62  2E09               	decfsz	___lbmod@counter,f,c
  3616  002B64  D7F2               	goto	l5158
  3617  002B66  500A               	movf	___lbmod@rem,w,c
  3618  002B68  0012               	return		;funcret
  3619  002B6A  FFFF               	dw	65535	; errata NOP
  3620  002B6C                     __end_of___lbmod:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           postinc0	equ	0xFEE
  3630                           wreg	equ	0xFE8
  3631                           postdec1	equ	0xFE5
  3632                           fsr1h	equ	0xFE2
  3633                           fsr1l	equ	0xFE1
  3634                           indf2	equ	0xFDF
  3635                           postinc2	equ	0xFDE
  3636                           postdec2	equ	0xFDD
  3637                           plusw2	equ	0xFDB
  3638                           fsr2h	equ	0xFDA
  3639                           fsr2l	equ	0xFD9
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function ___lbdiv *****************
  3643 ;; Defined at:
  3644 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  dividend        1    wreg     unsigned char 
  3647 ;;  divisor         1    6[COMRAM] unsigned char 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  dividend        1    7[COMRAM] unsigned char 
  3650 ;;  quotient        1    9[COMRAM] unsigned char 
  3651 ;;  counter         1    8[COMRAM] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      unsigned char 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3661 ;;      Params:         1       0       0       0       0       0       0
  3662 ;;      Locals:         3       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0
  3664 ;;      Totals:         4       0       0       0       0       0       0
  3665 ;;Total ram usage:        4 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    2
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_SetHourMin
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text15
  3676  0029FE                     __ptext15:
  3677                           	opt stack 0
  3678  0029FE                     ___lbdiv:
  3679                           	opt stack 24
  3680                           
  3681                           ;incstack = 0
  3682  0029FE  FFFF               	dw	65535
  3683                           
  3684                           ;___lbdiv@dividend stored from wreg
  3685  002A00  6E08               	movwf	___lbdiv@dividend,c
  3686  002A02  6A0A               	clrf	___lbdiv@quotient,c
  3687  002A04  5007               	movf	___lbdiv@divisor,w,c
  3688  002A06  E017               	bz	l5150
  3689  002A08  0E01               	movlw	1
  3690  002A0A  6E09               	movwf	___lbdiv@counter,c
  3691  002A0C  D004               	goto	l5138
  3692  002A0E                     l5134:
  3693  002A0E  FFFF               	dw	65535	; assembler added errata NOP
  3694  002A10  90D8               	bcf	status,0,c
  3695  002A12  3607               	rlcf	___lbdiv@divisor,f,c
  3696  002A14  2A09               	incf	___lbdiv@counter,f,c
  3697  002A16                     l5138:
  3698  002A16  FFFF               	dw	65535	; assembler added errata NOP
  3699  002A18  AE07               	btfss	___lbdiv@divisor,7,c
  3700  002A1A  D7F9               	goto	l5134
  3701  002A1C                     l5140:
  3702  002A1C  FFFF               	dw	65535	; assembler added errata NOP
  3703  002A1E  90D8               	bcf	status,0,c
  3704  002A20  360A               	rlcf	___lbdiv@quotient,f,c
  3705  002A22  5007               	movf	___lbdiv@divisor,w,c
  3706  002A24  5C08               	subwf	___lbdiv@dividend,w,c
  3707  002A26  E303               	bnc	l5146
  3708  002A28  5007               	movf	___lbdiv@divisor,w,c
  3709  002A2A  5E08               	subwf	___lbdiv@dividend,f,c
  3710  002A2C  800A               	bsf	___lbdiv@quotient,0,c
  3711  002A2E                     l5146:
  3712  002A2E  90D8               	bcf	status,0,c
  3713  002A30  3207               	rrcf	___lbdiv@divisor,f,c
  3714  002A32  2E09               	decfsz	___lbdiv@counter,f,c
  3715  002A34  D7F3               	goto	l5140
  3716  002A36                     l5150:
  3717  002A36  500A               	movf	___lbdiv@quotient,w,c
  3718  002A38  0012               	return		;funcret
  3719  002A3A  FFFF               	dw	65535	; errata NOP
  3720  002A3C                     __end_of___lbdiv:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           postdec1	equ	0xFE5
  3732                           fsr1h	equ	0xFE2
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           plusw2	equ	0xFDB
  3738                           fsr2h	equ	0xFDA
  3739                           fsr2l	equ	0xFD9
  3740                           status	equ	0xFD8
  3741                           
  3742 ;; *************** function _ModbusGetLastCommand *****************
  3743 ;; Defined at:
  3744 ;;		line 811 in file "ModbusRtu.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  address         1    wreg     PTR unsigned short 
  3747 ;;		 -> io_poll@lastAddress(2), 
  3748 ;;  count           1    6[COMRAM] PTR unsigned short 
  3749 ;;		 -> io_poll@lastEndAddress(2), 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  address         1    8[COMRAM] PTR unsigned short 
  3752 ;;		 -> io_poll@lastAddress(2), 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      PTR unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr2l, fsr2h, status,2
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3762 ;;      Params:         2       0       0       0       0       0       0
  3763 ;;      Locals:         1       0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0
  3765 ;;      Totals:         3       0       0       0       0       0       0
  3766 ;;Total ram usage:        3 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    2
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		_io_poll
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text16
  3777  002B12                     __ptext16:
  3778                           	opt stack 0
  3779  002B12                     _ModbusGetLastCommand:
  3780                           	opt stack 27
  3781                           
  3782                           ;incstack = 0
  3783  002B12  FFFF               	dw	65535
  3784                           
  3785                           ;ModbusGetLastCommand@address stored from wreg
  3786  002B14  6E09               	movwf	ModbusGetLastCommand@address,c
  3787                           
  3788                           ;ModbusRtu.c: 813: if (address != (0))
  3789  002B16  5009               	movf	ModbusGetLastCommand@address,w,c
  3790  002B18  E007               	bz	l5586
  3791                           
  3792                           ;ModbusRtu.c: 814: *address = _lastAddress;
  3793  002B1A  5009               	movf	ModbusGetLastCommand@address,w,c
  3794  002B1C  6ED9               	movwf	fsr2l,c
  3795  002B1E  6ADA               	clrf	fsr2h,c
  3796  002B20  C0BE  FFDE         	movff	__lastAddress,postinc2
  3797  002B24  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3798  002B28                     l5586:
  3799                           
  3800                           ;ModbusRtu.c: 815: if (count != (0))
  3801  002B28  5007               	movf	ModbusGetLastCommand@count,w,c
  3802  002B2A  E007               	bz	l5590
  3803                           
  3804                           ;ModbusRtu.c: 816: *count = _lastCount;
  3805  002B2C  5007               	movf	ModbusGetLastCommand@count,w,c
  3806  002B2E  6ED9               	movwf	fsr2l,c
  3807  002B30  6ADA               	clrf	fsr2h,c
  3808  002B32  C0C0  FFDE         	movff	__lastCount,postinc2
  3809  002B36  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3810  002B3A                     l5590:
  3811                           
  3812                           ;ModbusRtu.c: 817: return &_lastCommand;
  3813  002B3A  0EDF               	movlw	__lastCommand& (0+255)
  3814  002B3C  0012               	return		;funcret
  3815  002B3E  FFFF               	dw	65535	; errata NOP
  3816  002B40                     __end_of_ModbusGetLastCommand:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           postdec1	equ	0xFE5
  3828                           fsr1h	equ	0xFE2
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           plusw2	equ	0xFDB
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _InitFromEeprom *****************
  3839 ;; Defined at:
  3840 ;;		line 406 in file "main.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : F/1
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3854 ;;      Params:         0       0       0       0       0       0       0
  3855 ;;      Locals:         0       0       0       0       0       0       0
  3856 ;;      Temps:          2       0       0       0       0       0       0
  3857 ;;      Totals:         2       0       0       0       0       0       0
  3858 ;;Total ram usage:        2 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    4
  3861 ;; This function calls:
  3862 ;;		_LoadNextEvent
  3863 ;;		_Modbus
  3864 ;;		_SwitchOffAllLeds
  3865 ;; This function is called by:
  3866 ;;		_main
  3867 ;;		_io_poll
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text17
  3872  002388                     __ptext17:
  3873                           	opt stack 0
  3874  002388                     _InitFromEeprom:
  3875                           	opt stack 25
  3876                           
  3877                           ;incstack = 0
  3878  002388  FFFF               	dw	65535
  3879                           
  3880                           ;main.c: 408: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  3881  00238A  0E0A               	movlw	10
  3882  00238C  6EA9               	movwf	4009,c	;volatile
  3883  00238E  80A6               	bsf	4006,0,c	;volatile
  3884  002390  CFA8 F0D7          	movff	4008,_eventAcceptTime	;volatile
  3885                           
  3886                           ;main.c: 409: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  3887  002394  0E0F               	movlw	15
  3888  002396  6EA9               	movwf	4009,c	;volatile
  3889  002398  80A6               	bsf	4006,0,c	;volatile
  3890  00239A  50A8               	movf	4008,w,c	;volatile
  3891  00239C  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3892  00239E  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3893  0023A0  0E06               	movlw	6
  3894  0023A2                     u4765:
  3895  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  3896  0023A4  90D8               	bcf	status,0,c
  3897  0023A6  360F               	rlcf	??_InitFromEeprom,f,c
  3898  0023A8  3610               	rlcf	??_InitFromEeprom+1,f,c
  3899  0023AA  2EE8               	decfsz	wreg,f,c
  3900  0023AC  D7FA               	goto	u4765
  3901  0023AE  C00F  F0C4         	movff	??_InitFromEeprom,_blinkDuration
  3902  0023B2  C010  F0C5         	movff	??_InitFromEeprom+1,_blinkDuration+1
  3903                           
  3904                           ;main.c: 410: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  3905  0023B6  0E10               	movlw	16
  3906  0023B8  6EA9               	movwf	4009,c	;volatile
  3907  0023BA  80A6               	bsf	4006,0,c	;volatile
  3908  0023BC  50A8               	movf	4008,w,c	;volatile
  3909  0023BE  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3910  0023C0  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3911  0023C2  0E06               	movlw	6
  3912  0023C4                     u4775:
  3913  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  3914  0023C6  90D8               	bcf	status,0,c
  3915  0023C8  360F               	rlcf	??_InitFromEeprom,f,c
  3916  0023CA  3610               	rlcf	??_InitFromEeprom+1,f,c
  3917  0023CC  2EE8               	decfsz	wreg,f,c
  3918  0023CE  D7FA               	goto	u4775
  3919  0023D0  C00F  F0C6         	movff	??_InitFromEeprom,_blinkPeriod
  3920  0023D4  C010  F0C7         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  3921                           
  3922                           ;main.c: 412: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  3923  0023D8  0E12               	movlw	18
  3924  0023DA  6EA9               	movwf	4009,c	;volatile
  3925  0023DC  80A6               	bsf	4006,0,c	;volatile
  3926  0023DE  CFA8 F0D8          	movff	4008,_eventCount	;volatile
  3927                           
  3928                           ;main.c: 418: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  3929  0023E2  0E8C               	movlw	140
  3930  0023E4  6EA9               	movwf	4009,c	;volatile
  3931  0023E6  80A6               	bsf	4006,0,c	;volatile
  3932  0023E8  CFA8 F071          	movff	4008,__soundCount	;volatile
  3933                           
  3934                           ;main.c: 419: if(_soundCount == 0xFF)
  3935  0023EC  2871               	incf	__soundCount,w,c
  3936  0023EE  E101               	bnz	l5538
  3937                           
  3938                           ;main.c: 420: _soundCount = 0;
  3939  0023F0  6A71               	clrf	__soundCount,c
  3940  0023F2                     l5538:
  3941                           
  3942                           ;main.c: 422: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  3943  0023F2  0E01               	movlw	1
  3944  0023F4  6EA9               	movwf	4009,c	;volatile
  3945  0023F6  80A6               	bsf	4006,0,c	;volatile
  3946  0023F8  6A0C               	clrf	Modbus@u8serno,c
  3947  0023FA  6A0D               	clrf	Modbus@u8txenpin,c
  3948  0023FC  50A8               	movf	4008,w,c	;volatile
  3949  0023FE  EC3A  F016         	call	_Modbus
  3950                           
  3951                           ;main.c: 423: SwitchOffAllLeds();
  3952  002402  ECE1  F015         	call	_SwitchOffAllLeds	;wreg free
  3953                           
  3954                           ;main.c: 426: curEventNum = 0xff;
  3955  002406  6875               	setf	_curEventNum,c
  3956                           
  3957                           ;main.c: 427: curEventMinute = 0;
  3958  002408  0100               	movlb	0	; () banked
  3959  00240A  6BD5               	clrf	_curEventMinute& (0+255),b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;main.c: 428: currentAlarmedEventNum = 0xff;
  3963  00240C  6876               	setf	_currentAlarmedEventNum,c
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 429: LoadNextEvent();
  3967  00240E  ECFA  F00B         	call	_LoadNextEvent	;wreg free
  3968                           
  3969                           ;main.c: 431: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  3970  002412  5071               	movf	__soundCount,w,c
  3971  002414  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3972  002416  0100               	movlb	0	; () banked
  3973  002418  51CE               	movf	__isSoundPlaying& (0+255),w,b
  3974  00241A  0101               	movlb	1	; () banked
  3975  00241C  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3976  00241E  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3977                           
  3978                           ; BSR set to: 1
  3979  002422  0012               	return		;funcret
  3980  002424  FFFF               	dw	65535	; errata NOP
  3981  002426                     __end_of_InitFromEeprom:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1h	equ	0xFE2
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           postdec2	equ	0xFDD
  3998                           plusw2	equ	0xFDB
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _Modbus *****************
  4004 ;; Defined at:
  4005 ;;		line 170 in file "ModbusRtu.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  u8id            1    wreg     unsigned char 
  4008 ;;  u8serno         1   11[COMRAM] unsigned char 
  4009 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  u8id            1   13[COMRAM] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4021 ;;      Params:         2       0       0       0       0       0       0
  4022 ;;      Locals:         1       0       0       0       0       0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0
  4024 ;;      Totals:         3       0       0       0       0       0       0
  4025 ;;Total ram usage:        3 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    3
  4028 ;; This function calls:
  4029 ;;		_ModbusInit
  4030 ;; This function is called by:
  4031 ;;		_InitFromEeprom
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text18
  4036  002C74                     __ptext18:
  4037                           	opt stack 0
  4038  002C74                     _Modbus:
  4039                           	opt stack 25
  4040                           
  4041                           ; BSR set to: 1
  4042                           ;incstack = 0
  4043  002C74  FFFF               	dw	65535
  4044                           
  4045                           ;Modbus@u8id stored from wreg
  4046  002C76  6E0E               	movwf	Modbus@u8id,c
  4047                           
  4048                           ;ModbusRtu.c: 172: ModbusInit(u8id, u8serno, u8txenpin);
  4049  002C78  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4050  002C7C  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4051  002C80  500E               	movf	Modbus@u8id,w,c
  4052  002C82  EF44  F016         	goto	_ModbusInit
  4053  002C86  FFFF               	dw	65535	; errata NOP
  4054  002C88                     __end_of_Modbus:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           postdec2	equ	0xFDD
  4071                           plusw2	equ	0xFDB
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _ModbusInit *****************
  4077 ;; Defined at:
  4078 ;;		line 494 in file "ModbusRtu.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  u8id            1    wreg     unsigned char 
  4081 ;;  u8serno         1    6[COMRAM] unsigned char 
  4082 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  u8id            1   10[COMRAM] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4094 ;;      Params:         2       0       0       0       0       0       0
  4095 ;;      Locals:         3       0       0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0
  4097 ;;      Totals:         5       0       0       0       0       0       0
  4098 ;;Total ram usage:        5 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    2
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_Modbus
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text19
  4109  002C88                     __ptext19:
  4110                           	opt stack 0
  4111  002C88                     _ModbusInit:
  4112                           	opt stack 25
  4113                           
  4114                           ;incstack = 0
  4115  002C88  FFFF               	dw	65535
  4116                           
  4117                           ;ModbusInit@u8id stored from wreg
  4118  002C8A  6E0B               	movwf	ModbusInit@u8id,c
  4119                           
  4120                           ;ModbusRtu.c: 496: _u8id = u8id;
  4121  002C8C  C00B  F0D2         	movff	ModbusInit@u8id,__u8id
  4122                           
  4123                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4124  002C90  0E04               	movlw	4
  4125  002C92  6007               	cpfslt	ModbusInit@u8serno,c
  4126  002C94  D000               	goto	l682
  4127  002C96                     l682:
  4128  002C96  FFFF               	dw	65535	; assembler added errata NOP
  4129  002C98  0012               	return		;funcret
  4130  002C9A  FFFF               	dw	65535	; errata NOP
  4131  002C9C                     __end_of_ModbusInit:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           intcon	equ	0xFF2
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           plusw2	equ	0xFDB
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _CommandSetStatusLed *****************
  4154 ;; Defined at:
  4155 ;;		line 870 in file "main.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  led             1   30[COMRAM] unsigned char 
  4160 ;;  commandData     1   29[COMRAM] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4170 ;;      Params:         0       0       0       0       0       0       0
  4171 ;;      Locals:         2       0       0       0       0       0       0
  4172 ;;      Temps:          1       0       0       0       0       0       0
  4173 ;;      Totals:         3       0       0       0       0       0       0
  4174 ;;Total ram usage:        3 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    5
  4177 ;; This function calls:
  4178 ;;		_LightStatusLed
  4179 ;;		_ModbusSetExceptionStatusBit
  4180 ;;		_PlaySound
  4181 ;;		_StopPlaying
  4182 ;; This function is called by:
  4183 ;;		_io_poll
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text20
  4188  00258C                     __ptext20:
  4189                           	opt stack 0
  4190  00258C                     _CommandSetStatusLed:
  4191                           	opt stack 24
  4192                           
  4193                           ;incstack = 0
  4194  00258C  FFFF               	dw	65535
  4195                           
  4196                           ;main.c: 874: uint8_t commandData = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  4197  00258E  C18C  F01E         	movff	__MODBUSHoldingRegs,CommandSetStatusLed@commandData
  4198                           
  4199                           ;main.c: 875: uint8_t led = commandData & 0x07;
  4200  002592  501E               	movf	CommandSetStatusLed@commandData,w,c
  4201  002594  0B07               	andlw	7
  4202  002596  6E1F               	movwf	CommandSetStatusLed@led,c
  4203                           
  4204                           ;main.c: 876: if(led >= 0x05)
  4205  002598  0E04               	movlw	4
  4206  00259A  641F               	cpfsgt	CommandSetStatusLed@led,c
  4207  00259C  D001               	goto	l5568
  4208  00259E  D027               	goto	l434
  4209  0025A0                     l5568:
  4210  0025A0  FFFF               	dw	65535	; assembler added errata NOP
  4211                           
  4212                           ;main.c: 878: if((((commandData) >> (7)) & 0x01) == 0)
  4213  0025A2  6A1D               	clrf	??_CommandSetStatusLed& (0+255),c
  4214  0025A4  AE1E               	btfss	CommandSetStatusLed@commandData,7,c
  4215  0025A6  D001               	bra	u4805
  4216  0025A8  2A1D               	incf	??_CommandSetStatusLed& (0+255),f,c
  4217  0025AA                     u4805:
  4218  0025AA  B01D               	btfsc	??_CommandSetStatusLed,0,c
  4219  0025AC  D009               	goto	l5576
  4220                           
  4221                           ;main.c: 879: {
  4222                           ;main.c: 880: LightStatusLed(led, 0, 0);
  4223  0025AE  0E00               	movlw	0
  4224  0025B0  6E07               	movwf	LightStatusLed@on,c
  4225  0025B2  6E08               	movwf	LightStatusLed@blink,c
  4226  0025B4  501F               	movf	CommandSetStatusLed@led,w,c
  4227  0025B6  EC03  F00E         	call	_LightStatusLed
  4228                           
  4229                           ;main.c: 881: StopPlaying();
  4230  0025BA  EC13  F016         	call	_StopPlaying	;wreg free
  4231  0025BE  D017               	goto	l434
  4232  0025C0                     l5576:
  4233  0025C0  FFFF               	dw	65535	; assembler added errata NOP
  4234                           
  4235                           ;main.c: 883: }
  4236                           ;main.c: 884: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  4237  0025C2  0E01               	movlw	1
  4238  0025C4  6E07               	movwf	LightStatusLed@on,c
  4239  0025C6  441E               	rlncf	CommandSetStatusLed@commandData,w,c
  4240  0025C8  46E8               	rlncf	wreg,f,c
  4241  0025CA  0B03               	andlw	3
  4242  0025CC  0B01               	andlw	1
  4243  0025CE  6E08               	movwf	LightStatusLed@blink,c
  4244  0025D0  501F               	movf	CommandSetStatusLed@led,w,c
  4245  0025D2  EC03  F00E         	call	_LightStatusLed
  4246                           
  4247                           ;main.c: 885: PlaySound(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), ((unsigned
      +                           char)((_MODBUSHoldingRegs[1])&0xFF)));
  4248  0025D6  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  4249  0025DA  6A16               	clrf	PlaySound@playDuration+1,c
  4250  0025DC  0101               	movlb	1	; () banked
  4251  0025DE  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  4252  0025E0  EC7E  F00E         	call	_PlaySound
  4253                           
  4254                           ;main.c: 886: ModbusSetExceptionStatusBit(0, 1);
  4255  0025E4  0E01               	movlw	1
  4256  0025E6  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  4257  0025E8  0E00               	movlw	0
  4258  0025EA  EC06  F014         	call	_ModbusSetExceptionStatusBit
  4259  0025EE                     l434:
  4260  0025EE  FFFF               	dw	65535	; assembler added errata NOP
  4261  0025F0  0012               	return		;funcret
  4262  0025F2  FFFF               	dw	65535	; errata NOP
  4263  0025F4                     __end_of_CommandSetStatusLed:
  4264                           	opt stack 0
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           intcon	equ	0xFF2
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           plusw2	equ	0xFDB
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function _ModbusSetExceptionStatusBit *****************
  4286 ;; Defined at:
  4287 ;;		line 175 in file "ModbusRtu.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  bitNum          1    wreg     unsigned char 
  4290 ;;  value           1    6[COMRAM] unsigned char 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  bitNum          1    9[COMRAM] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : F/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4302 ;;      Params:         1       0       0       0       0       0       0
  4303 ;;      Locals:         1       0       0       0       0       0       0
  4304 ;;      Temps:          2       0       0       0       0       0       0
  4305 ;;      Totals:         4       0       0       0       0       0       0
  4306 ;;Total ram usage:        4 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    2
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_CommandSetStatusLed
  4313 ;;		_io_poll
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text21
  4318  00280C                     __ptext21:
  4319                           	opt stack 0
  4320  00280C                     _ModbusSetExceptionStatusBit:
  4321                           	opt stack 27
  4322                           
  4323                           ;incstack = 0
  4324  00280C  FFFF               	dw	65535
  4325                           
  4326                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  4327  00280E  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  4328                           
  4329                           ;ModbusRtu.c: 177: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  4330  002810  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  4331  002812  E010               	bz	l5448
  4332  002814  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4333  002818  0E01               	movlw	1
  4334  00281A  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4335  00281C  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4336  00281E  D003               	goto	u4514
  4337  002820                     u4515:
  4338  002820  FFFF               	dw	65535	; assembler added errata NOP
  4339  002822  90D8               	bcf	status,0,c
  4340  002824  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4341  002826                     u4514:
  4342  002826  FFFF               	dw	65535	; assembler added errata NOP
  4343  002828  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4344  00282A  D7FA               	goto	u4515
  4345  00282C  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  4346  00282E  0100               	movlb	0	; () banked
  4347  002830  13CB               	iorwf	__exceptionStatus& (0+255),f,b
  4348  002832  D00F               	goto	l650
  4349  002834                     l5448:
  4350  002834  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4351  002838  0E01               	movlw	1
  4352  00283A  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4353  00283C  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4354  00283E  D003               	goto	u4524
  4355  002840                     u4525:
  4356  002840  FFFF               	dw	65535	; assembler added errata NOP
  4357  002842  90D8               	bcf	status,0,c
  4358  002844  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4359  002846                     u4524:
  4360  002846  FFFF               	dw	65535	; assembler added errata NOP
  4361  002848  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4362  00284A  D7FA               	goto	u4525
  4363  00284C  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  4364  00284E  0100               	movlb	0	; () banked
  4365  002850  17CB               	andwf	__exceptionStatus& (0+255),f,b
  4366  002852                     l650:
  4367  002852  FFFF               	dw	65535	; assembler added errata NOP
  4368                           
  4369                           ; BSR set to: 0
  4370  002854  0012               	return		;funcret
  4371  002856  FFFF               	dw	65535	; errata NOP
  4372  002858                     __end_of_ModbusSetExceptionStatusBit:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           postinc0	equ	0xFEE
  4382                           wreg	equ	0xFE8
  4383                           postdec1	equ	0xFE5
  4384                           fsr1h	equ	0xFE2
  4385                           fsr1l	equ	0xFE1
  4386                           indf2	equ	0xFDF
  4387                           postinc2	equ	0xFDE
  4388                           postdec2	equ	0xFDD
  4389                           plusw2	equ	0xFDB
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _LightStatusLed *****************
  4395 ;; Defined at:
  4396 ;;		line 344 in file "main.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  row             1    wreg     unsigned char 
  4399 ;;  on              1    6[COMRAM] unsigned char 
  4400 ;;  blink           1    7[COMRAM] unsigned char 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  row             1   13[COMRAM] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4412 ;;      Params:         2       0       0       0       0       0       0
  4413 ;;      Locals:         1       0       0       0       0       0       0
  4414 ;;      Temps:          5       0       0       0       0       0       0
  4415 ;;      Totals:         8       0       0       0       0       0       0
  4416 ;;Total ram usage:        8 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    2
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;;		_SetTimeFromRegs
  4424 ;;		_CommandSetStatusLed
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text22
  4429  001C06                     __ptext22:
  4430                           	opt stack 0
  4431  001C06                     _LightStatusLed:
  4432                           	opt stack 25
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;incstack = 0
  4436  001C06  FFFF               	dw	65535
  4437                           
  4438                           ;LightStatusLed@row stored from wreg
  4439  001C08  6E0E               	movwf	LightStatusLed@row,c
  4440                           
  4441                           ;main.c: 346: if(row > 7)
  4442  001C0A  0E07               	movlw	7
  4443  001C0C  640E               	cpfsgt	LightStatusLed@row,c
  4444  001C0E  D001               	goto	l5214
  4445  001C10  D072               	goto	l279
  4446  001C12                     l5214:
  4447  001C12  FFFF               	dw	65535	; assembler added errata NOP
  4448                           
  4449                           ;main.c: 348: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4450  001C14  5007               	movf	LightStatusLed@on,w,c
  4451  001C16  E010               	bz	l5218
  4452  001C18  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4453  001C1C  0E01               	movlw	1
  4454  001C1E  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4455  001C20  2A09               	incf	??_LightStatusLed,f,c
  4456  001C22  D003               	goto	u4234
  4457  001C24                     u4235:
  4458  001C24  FFFF               	dw	65535	; assembler added errata NOP
  4459  001C26  90D8               	bcf	status,0,c
  4460  001C28  360A               	rlcf	??_LightStatusLed+1,f,c
  4461  001C2A                     u4234:
  4462  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  4463  001C2C  2E09               	decfsz	??_LightStatusLed,f,c
  4464  001C2E  D7FA               	goto	u4235
  4465  001C30  500A               	movf	??_LightStatusLed+1,w,c
  4466  001C32  0100               	movlb	0	; () banked
  4467  001C34  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4468  001C36  D00F               	goto	l5220
  4469  001C38                     l5218:
  4470  001C38  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4471  001C3C  0E01               	movlw	1
  4472  001C3E  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4473  001C40  2A09               	incf	??_LightStatusLed,f,c
  4474  001C42  D003               	goto	u4244
  4475  001C44                     u4245:
  4476  001C44  FFFF               	dw	65535	; assembler added errata NOP
  4477  001C46  90D8               	bcf	status,0,c
  4478  001C48  360A               	rlcf	??_LightStatusLed+1,f,c
  4479  001C4A                     u4244:
  4480  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  4481  001C4C  2E09               	decfsz	??_LightStatusLed,f,c
  4482  001C4E  D7FA               	goto	u4245
  4483  001C50  1C0A               	comf	??_LightStatusLed+1,w,c
  4484  001C52  0100               	movlb	0	; () banked
  4485  001C54  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4486  001C56                     l5220:
  4487  001C56  FFFF               	dw	65535	; assembler added errata NOP
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;main.c: 349: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4491  001C58  5008               	movf	LightStatusLed@blink,w,c
  4492  001C5A  E010               	bz	l5224
  4493                           
  4494                           ; BSR set to: 0
  4495  001C5C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4496  001C60  0E01               	movlw	1
  4497  001C62  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4498  001C64  2A09               	incf	??_LightStatusLed,f,c
  4499  001C66  D003               	goto	u4264
  4500  001C68                     u4265:
  4501  001C68  FFFF               	dw	65535	; assembler added errata NOP
  4502  001C6A  90D8               	bcf	status,0,c
  4503  001C6C  360A               	rlcf	??_LightStatusLed+1,f,c
  4504  001C6E                     u4264:
  4505  001C6E  FFFF               	dw	65535	; assembler added errata NOP
  4506  001C70  2E09               	decfsz	??_LightStatusLed,f,c
  4507  001C72  D7FA               	goto	u4265
  4508  001C74  500A               	movf	??_LightStatusLed+1,w,c
  4509  001C76  0100               	movlb	0	; () banked
  4510  001C78  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4511  001C7A  D00F               	goto	l5226
  4512  001C7C                     l5224:
  4513                           
  4514                           ; BSR set to: 0
  4515  001C7C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4516  001C80  0E01               	movlw	1
  4517  001C82  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4518  001C84  2A09               	incf	??_LightStatusLed,f,c
  4519  001C86  D003               	goto	u4274
  4520  001C88                     u4275:
  4521  001C88  FFFF               	dw	65535	; assembler added errata NOP
  4522  001C8A  90D8               	bcf	status,0,c
  4523  001C8C  360A               	rlcf	??_LightStatusLed+1,f,c
  4524  001C8E                     u4274:
  4525  001C8E  FFFF               	dw	65535	; assembler added errata NOP
  4526  001C90  2E09               	decfsz	??_LightStatusLed,f,c
  4527  001C92  D7FA               	goto	u4275
  4528  001C94  1C0A               	comf	??_LightStatusLed+1,w,c
  4529  001C96  0100               	movlb	0	; () banked
  4530  001C98  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4531  001C9A                     l5226:
  4532  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;main.c: 350: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4536  001C9C  5007               	movf	LightStatusLed@on,w,c
  4537  001C9E  E014               	bz	l5230
  4538                           
  4539                           ; BSR set to: 0
  4540  001CA0  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4541  001CA4  0E01               	movlw	1
  4542  001CA6  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4543  001CA8  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4544  001CAA  2A09               	incf	??_LightStatusLed,f,c
  4545  001CAC  D004               	goto	u4294
  4546  001CAE                     u4295:
  4547  001CAE  FFFF               	dw	65535	; assembler added errata NOP
  4548  001CB0  90D8               	bcf	status,0,c
  4549  001CB2  360A               	rlcf	??_LightStatusLed+1,f,c
  4550  001CB4  360B               	rlcf	??_LightStatusLed+2,f,c
  4551  001CB6                     u4294:
  4552  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  4553  001CB8  2E09               	decfsz	??_LightStatusLed,f,c
  4554  001CBA  D7F9               	goto	u4295
  4555  001CBC  500A               	movf	??_LightStatusLed+1,w,c
  4556  001CBE  0100               	movlb	0	; () banked
  4557  001CC0  13DD               	iorwf	__MODBUSCoils& (0+255),f,b
  4558  001CC2  500B               	movf	??_LightStatusLed+2,w,c
  4559  001CC4  13DE               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4560  001CC6  D017               	goto	l279
  4561  001CC8                     l5230:
  4562                           
  4563                           ; BSR set to: 0
  4564  001CC8  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4565  001CCC  0E01               	movlw	1
  4566  001CCE  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4567  001CD0  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4568  001CD2  2A09               	incf	??_LightStatusLed,f,c
  4569  001CD4  D004               	goto	u4304
  4570  001CD6                     u4305:
  4571  001CD6  FFFF               	dw	65535	; assembler added errata NOP
  4572  001CD8  90D8               	bcf	status,0,c
  4573  001CDA  360A               	rlcf	??_LightStatusLed+1,f,c
  4574  001CDC  360B               	rlcf	??_LightStatusLed+2,f,c
  4575  001CDE                     u4304:
  4576  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  4577  001CE0  2E09               	decfsz	??_LightStatusLed,f,c
  4578  001CE2  D7F9               	goto	u4305
  4579  001CE4  1C0A               	comf	??_LightStatusLed+1,w,c
  4580  001CE6  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  4581  001CE8  1C0B               	comf	??_LightStatusLed+2,w,c
  4582  001CEA  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  4583  001CEC  500C               	movf	??_LightStatusLed+3,w,c
  4584  001CEE  0100               	movlb	0	; () banked
  4585  001CF0  17DD               	andwf	__MODBUSCoils& (0+255),f,b
  4586  001CF2  500D               	movf	??_LightStatusLed+4,w,c
  4587  001CF4  17DE               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4588  001CF6                     l279:
  4589  001CF6  FFFF               	dw	65535	; assembler added errata NOP
  4590  001CF8  0012               	return		;funcret
  4591  001CFA  FFFF               	dw	65535	; errata NOP
  4592  001CFC                     __end_of_LightStatusLed:
  4593                           	opt stack 0
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _ResetEvent *****************
  4615 ;; Defined at:
  4616 ;;		line 600 in file "main.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  state           1    wreg     unsigned char 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  state           1   16[COMRAM] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : E/0
  4627 ;;		On exit  : F/1
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         0       0       0       0       0       0       0
  4631 ;;      Locals:         3       0       0       0       0       0       0
  4632 ;;      Temps:          2       0       0       0       0       0       0
  4633 ;;      Totals:         5       0       0       0       0       0       0
  4634 ;;Total ram usage:        5 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    3
  4637 ;; This function calls:
  4638 ;;		_LightLed
  4639 ;;		_StopPlaying
  4640 ;; This function is called by:
  4641 ;;		_main
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text23
  4646  0029BC                     __ptext23:
  4647                           	opt stack 0
  4648  0029BC                     _ResetEvent:
  4649                           	opt stack 27
  4650                           
  4651                           ;incstack = 0
  4652  0029BC  FFFF               	dw	65535
  4653                           
  4654                           ;ResetEvent@state stored from wreg
  4655  0029BE  6E11               	movwf	ResetEvent@state,c
  4656                           
  4657                           ;main.c: 602: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4658  0029C0  5011               	movf	ResetEvent@state,w,c
  4659  0029C2  E103               	bnz	l5940
  4660  0029C4  6A13               	clrf	_ResetEvent$876+1,c
  4661  0029C6  0E02               	movlw	2
  4662  0029C8  D002               	goto	L2
  4663  0029CA                     l5940:
  4664  0029CA  6A13               	clrf	_ResetEvent$876+1,c
  4665  0029CC  0E01               	movlw	1
  4666  0029CE                     L2:
  4667  0029CE  FFFF               	dw	65535	; assembler added errata NOP
  4668  0029D0  6E12               	movwf	_ResetEvent$876,c
  4669  0029D2  C012  F007         	movff	_ResetEvent$876,LightLed@ledState
  4670  0029D6  6A08               	clrf	LightLed@blink,c
  4671  0029D8  2876               	incf	_currentAlarmedEventNum,w,c
  4672  0029DA  ECC0  F004         	call	_LightLed
  4673                           
  4674                           ;main.c: 603: currentAlarmedEventNum = 0xff;
  4675  0029DE  6876               	setf	_currentAlarmedEventNum,c
  4676                           
  4677                           ;main.c: 604: eventResetSecond = 0;
  4678  0029E0  0100               	movlb	0	; () banked
  4679  0029E2  6BAC               	clrf	_eventResetSecond& (0+255),b
  4680  0029E4  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  4681  0029E6  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  4682  0029E8  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;main.c: 605: StopPlaying();
  4686  0029EA  EC13  F016         	call	_StopPlaying	;wreg free
  4687                           
  4688                           ; BSR set to: 1
  4689                           ;main.c: 606: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4690  0029EE  5076               	movf	_currentAlarmedEventNum,w,c
  4691  0029F0  6E0F               	movwf	??_ResetEvent& (0+255),c
  4692  0029F2  5075               	movf	_curEventNum,w,c
  4693  0029F4  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4694  0029F6  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4695                           
  4696                           ; BSR set to: 1
  4697  0029FA  0012               	return		;funcret
  4698  0029FC  FFFF               	dw	65535	; errata NOP
  4699  0029FE                     __end_of_ResetEvent:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           plusw2	equ	0xFDB
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _ProcessLightBlock *****************
  4722 ;; Defined at:
  4723 ;;		line 447 in file "main.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  curMs           1    wreg     PTR unsigned long 
  4726 ;;		 -> main@curMs(4), 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  4729 ;;		 -> main@curMs(4), 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : F/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         0       0       0       0       0       0       0
  4740 ;;      Locals:         1       0       0       0       0       0       0
  4741 ;;      Temps:          4       0       0       0       0       0       0
  4742 ;;      Totals:         5       0       0       0       0       0       0
  4743 ;;Total ram usage:        5 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    3
  4746 ;; This function calls:
  4747 ;;		_UpdateLedRegister
  4748 ;; This function is called by:
  4749 ;;		_main
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text24
  4754  000C72                     __ptext24:
  4755                           	opt stack 0
  4756  000C72                     _ProcessLightBlock:
  4757                           	opt stack 27
  4758                           
  4759                           ; BSR set to: 1
  4760                           ;incstack = 0
  4761  000C72  FFFF               	dw	65535
  4762                           
  4763                           ;ProcessLightBlock@curMs stored from wreg
  4764  000C74  6E0C               	movwf	ProcessLightBlock@curMs,c
  4765                           
  4766                           ;main.c: 449: diffTime = *curMs - oldBlinkOnTime;
  4767  000C76  500C               	movf	ProcessLightBlock@curMs,w,c
  4768  000C78  6ED9               	movwf	fsr2l,c
  4769  000C7A  6ADA               	clrf	fsr2h,c
  4770  000C7C  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  4771  000C80  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  4772  000C84  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  4773  000C88  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  4774  000C8C  0100               	movlb	0	; () banked
  4775  000C8E  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  4776  000C90  5C08               	subwf	??_ProcessLightBlock,w,c
  4777  000C92  6FA8               	movwf	_diffTime& (0+255),b
  4778  000C94  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4779  000C96  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4780  000C98  6FA9               	movwf	(_diffTime+1)& (0+255),b
  4781  000C9A  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4782  000C9C  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4783  000C9E  6FAA               	movwf	(_diffTime+2)& (0+255),b
  4784  000CA0  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4785  000CA2  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4786  000CA4  6FAB               	movwf	(_diffTime+3)& (0+255),b
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;main.c: 450: if(diffTime > blinkPeriod)
  4790  000CA6  51C6               	movf	_blinkPeriod& (0+255),w,b
  4791  000CA8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4792  000CAA  51C7               	movf	(_blinkPeriod+1)& (0+255),w,b
  4793  000CAC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4794  000CAE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4795  000CB0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4796  000CB2  51A8               	movf	_diffTime& (0+255),w,b
  4797  000CB4  5C08               	subwf	??_ProcessLightBlock,w,c
  4798  000CB6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4799  000CB8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4800  000CBA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4801  000CBC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4802  000CBE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4803  000CC0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4804  000CC2  E20E               	bc	l4464
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;main.c: 451: {
  4808                           ;main.c: 452: blinkOn = 1;
  4809  000CC4  0E01               	movlw	1
  4810  000CC6  6E73               	movwf	_blinkOn,c
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;main.c: 453: oldBlinkOnTime = *curMs;
  4814  000CC8  500C               	movf	ProcessLightBlock@curMs,w,c
  4815  000CCA  6ED9               	movwf	fsr2l,c
  4816  000CCC  6ADA               	clrf	fsr2h,c
  4817  000CCE  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  4818  000CD2  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  4819  000CD6  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  4820  000CDA  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  4821                           
  4822                           ;main.c: 454: }
  4823  000CDE  D0F1               	goto	l4616
  4824  000CE0                     l4464:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;main.c: 455: else if(blinkOn && diffTime > blinkDuration)
  4828  000CE0  5073               	movf	_blinkOn,w,c
  4829  000CE2  E101 D0EE          	bz	l4616
  4830                           
  4831                           ; BSR set to: 0
  4832  000CE6  51C4               	movf	_blinkDuration& (0+255),w,b
  4833  000CE8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4834  000CEA  51C5               	movf	(_blinkDuration+1)& (0+255),w,b
  4835  000CEC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4836  000CEE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4837  000CF0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4838  000CF2  51A8               	movf	_diffTime& (0+255),w,b
  4839  000CF4  5C08               	subwf	??_ProcessLightBlock,w,c
  4840  000CF6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4841  000CF8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4842  000CFA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4843  000CFC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4844  000CFE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4845  000D00  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4846  000D02  E301 D0DE          	bc	l4616
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;main.c: 456: {
  4850                           ;main.c: 457: blinkOn = 0;
  4851  000D06  6A73               	clrf	_blinkOn,c
  4852  000D08  D0DC               	goto	l4616
  4853  000D0A                     l4470:
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;main.c: 465: LATA &= 0xF0;
  4857  000D0A  0EF0               	movlw	240
  4858  000D0C  1689               	andwf	3977,f,c	;volatile
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;main.c: 466: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4862  000D0E  5073               	movf	_blinkOn,w,c
  4863  000D10  E003               	bz	l4476
  4864                           
  4865                           ; BSR set to: 0
  4866  000D12  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4867  000D16  D003               	goto	l4478
  4868  000D18                     l4476:
  4869                           
  4870                           ; BSR set to: 0
  4871  000D18  5190               	movf	_ledStatuses& (0+255),w,b
  4872  000D1A  1980               	xorwf	_ledBlink& (0+255),w,b
  4873  000D1C  6E8A               	movwf	3978,c	;volatile
  4874  000D1E                     l4478:
  4875  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  4876                           
  4877                           ; BSR set to: 0
  4878  000D20  0E00               	movlw	0
  4879  000D22  EC99  F014         	call	_UpdateLedRegister
  4880                           
  4881                           ;main.c: 467: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4882  000D26  5073               	movf	_blinkOn,w,c
  4883  000D28  E003               	bz	l4484
  4884  000D2A  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4885  000D2E  D004               	goto	l4486
  4886  000D30                     l4484:
  4887  000D30  0100               	movlb	0	; () banked
  4888  000D32  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  4889  000D34  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  4890  000D36  6E8A               	movwf	3978,c	;volatile
  4891  000D38                     l4486:
  4892  000D38  FFFF               	dw	65535	; assembler added errata NOP
  4893  000D3A  0E01               	movlw	1
  4894  000D3C  EC99  F014         	call	_UpdateLedRegister
  4895                           
  4896                           ;main.c: 468: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  4897  000D40  5073               	movf	_blinkOn,w,c
  4898  000D42  E003               	bz	l4492
  4899  000D44  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  4900  000D48  D004               	goto	l4494
  4901  000D4A                     l4492:
  4902  000D4A  0100               	movlb	0	; () banked
  4903  000D4C  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  4904  000D4E  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  4905  000D50  6E8A               	movwf	3978,c	;volatile
  4906  000D52                     l4494:
  4907  000D52  FFFF               	dw	65535	; assembler added errata NOP
  4908  000D54  0E02               	movlw	2
  4909  000D56  EC99  F014         	call	_UpdateLedRegister
  4910                           
  4911                           ;main.c: 469: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  4912  000D5A  5073               	movf	_blinkOn,w,c
  4913  000D5C  E003               	bz	l4500
  4914  000D5E  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  4915  000D62  D004               	goto	l4502
  4916  000D64                     l4500:
  4917  000D64  0100               	movlb	0	; () banked
  4918  000D66  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  4919  000D68  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  4920  000D6A  6E8A               	movwf	3978,c	;volatile
  4921  000D6C                     l4502:
  4922  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  4923  000D6E  0E03               	movlw	3
  4924  000D70  EC99  F014         	call	_UpdateLedRegister
  4925                           
  4926                           ;main.c: 470: LATAbits.LATA0 = 1;
  4927  000D74  8089               	bsf	3977,0,c	;volatile
  4928                           
  4929                           ;main.c: 471: break;
  4930  000D76  D0B0               	goto	l4618
  4931  000D78                     l4506:
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;main.c: 473: LATA &= 0xF0;
  4935  000D78  0EF0               	movlw	240
  4936  000D7A  1689               	andwf	3977,f,c	;volatile
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;main.c: 474: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  4940  000D7C  5073               	movf	_blinkOn,w,c
  4941  000D7E  E003               	bz	l4512
  4942                           
  4943                           ; BSR set to: 0
  4944  000D80  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  4945  000D84  D003               	goto	l4514
  4946  000D86                     l4512:
  4947                           
  4948                           ; BSR set to: 0
  4949  000D86  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  4950  000D88  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  4951  000D8A  6E8A               	movwf	3978,c	;volatile
  4952  000D8C                     l4514:
  4953  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4954                           
  4955                           ; BSR set to: 0
  4956  000D8E  0E00               	movlw	0
  4957  000D90  EC99  F014         	call	_UpdateLedRegister
  4958                           
  4959                           ;main.c: 475: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  4960  000D94  5073               	movf	_blinkOn,w,c
  4961  000D96  E003               	bz	l4520
  4962  000D98  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  4963  000D9C  D004               	goto	l4522
  4964  000D9E                     l4520:
  4965  000D9E  0100               	movlb	0	; () banked
  4966  000DA0  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  4967  000DA2  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  4968  000DA4  6E8A               	movwf	3978,c	;volatile
  4969  000DA6                     l4522:
  4970  000DA6  FFFF               	dw	65535	; assembler added errata NOP
  4971  000DA8  0E01               	movlw	1
  4972  000DAA  EC99  F014         	call	_UpdateLedRegister
  4973                           
  4974                           ;main.c: 476: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  4975  000DAE  5073               	movf	_blinkOn,w,c
  4976  000DB0  E003               	bz	l4528
  4977  000DB2  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  4978  000DB6  D004               	goto	l4530
  4979  000DB8                     l4528:
  4980  000DB8  0100               	movlb	0	; () banked
  4981  000DBA  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  4982  000DBC  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  4983  000DBE  6E8A               	movwf	3978,c	;volatile
  4984  000DC0                     l4530:
  4985  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  4986  000DC2  0E02               	movlw	2
  4987  000DC4  EC99  F014         	call	_UpdateLedRegister
  4988                           
  4989                           ;main.c: 477: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  4990  000DC8  5073               	movf	_blinkOn,w,c
  4991  000DCA  E003               	bz	l4536
  4992  000DCC  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  4993  000DD0  D004               	goto	l4538
  4994  000DD2                     l4536:
  4995  000DD2  0100               	movlb	0	; () banked
  4996  000DD4  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  4997  000DD6  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  4998  000DD8  6E8A               	movwf	3978,c	;volatile
  4999  000DDA                     l4538:
  5000  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  5001  000DDC  0E03               	movlw	3
  5002  000DDE  EC99  F014         	call	_UpdateLedRegister
  5003                           
  5004                           ;main.c: 478: LATAbits.LATA1 = 1;
  5005  000DE2  8289               	bsf	3977,1,c	;volatile
  5006                           
  5007                           ;main.c: 479: break;
  5008  000DE4  D079               	goto	l4618
  5009  000DE6                     l4542:
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;main.c: 481: LATA &= 0xF0;
  5013  000DE6  0EF0               	movlw	240
  5014  000DE8  1689               	andwf	3977,f,c	;volatile
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;main.c: 482: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5018  000DEA  5073               	movf	_blinkOn,w,c
  5019  000DEC  E003               	bz	l4548
  5020                           
  5021                           ; BSR set to: 0
  5022  000DEE  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5023  000DF2  D003               	goto	l4550
  5024  000DF4                     l4548:
  5025                           
  5026                           ; BSR set to: 0
  5027  000DF4  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5028  000DF6  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5029  000DF8  6E8A               	movwf	3978,c	;volatile
  5030  000DFA                     l4550:
  5031  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  5032                           
  5033                           ; BSR set to: 0
  5034  000DFC  0E00               	movlw	0
  5035  000DFE  EC99  F014         	call	_UpdateLedRegister
  5036                           
  5037                           ;main.c: 483: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5038  000E02  5073               	movf	_blinkOn,w,c
  5039  000E04  E003               	bz	l4556
  5040  000E06  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5041  000E0A  D004               	goto	l4558
  5042  000E0C                     l4556:
  5043  000E0C  0100               	movlb	0	; () banked
  5044  000E0E  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5045  000E10  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5046  000E12  6E8A               	movwf	3978,c	;volatile
  5047  000E14                     l4558:
  5048  000E14  FFFF               	dw	65535	; assembler added errata NOP
  5049  000E16  0E01               	movlw	1
  5050  000E18  EC99  F014         	call	_UpdateLedRegister
  5051                           
  5052                           ;main.c: 484: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5053  000E1C  5073               	movf	_blinkOn,w,c
  5054  000E1E  E003               	bz	l4564
  5055  000E20  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5056  000E24  D004               	goto	l4566
  5057  000E26                     l4564:
  5058  000E26  0100               	movlb	0	; () banked
  5059  000E28  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5060  000E2A  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5061  000E2C  6E8A               	movwf	3978,c	;volatile
  5062  000E2E                     l4566:
  5063  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  5064  000E30  0E02               	movlw	2
  5065  000E32  EC99  F014         	call	_UpdateLedRegister
  5066                           
  5067                           ;main.c: 485: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5068  000E36  5073               	movf	_blinkOn,w,c
  5069  000E38  E003               	bz	l4572
  5070  000E3A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5071  000E3E  D004               	goto	l4574
  5072  000E40                     l4572:
  5073  000E40  0100               	movlb	0	; () banked
  5074  000E42  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5075  000E44  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5076  000E46  6E8A               	movwf	3978,c	;volatile
  5077  000E48                     l4574:
  5078  000E48  FFFF               	dw	65535	; assembler added errata NOP
  5079  000E4A  0E03               	movlw	3
  5080  000E4C  EC99  F014         	call	_UpdateLedRegister
  5081                           
  5082                           ;main.c: 486: LATAbits.LATA2 = 1;
  5083  000E50  8489               	bsf	3977,2,c	;volatile
  5084                           
  5085                           ;main.c: 487: break;
  5086  000E52  D042               	goto	l4618
  5087  000E54                     l4578:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;main.c: 489: LATA &= 0xF0;
  5091  000E54  0EF0               	movlw	240
  5092  000E56  1689               	andwf	3977,f,c	;volatile
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;main.c: 490: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5096  000E58  5073               	movf	_blinkOn,w,c
  5097  000E5A  E003               	bz	l4584
  5098                           
  5099                           ; BSR set to: 0
  5100  000E5C  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5101  000E60  D003               	goto	l4586
  5102  000E62                     l4584:
  5103                           
  5104                           ; BSR set to: 0
  5105  000E62  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5106  000E64  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5107  000E66  6E8A               	movwf	3978,c	;volatile
  5108  000E68                     l4586:
  5109  000E68  FFFF               	dw	65535	; assembler added errata NOP
  5110                           
  5111                           ; BSR set to: 0
  5112  000E6A  0E00               	movlw	0
  5113  000E6C  EC99  F014         	call	_UpdateLedRegister
  5114                           
  5115                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5116  000E70  5073               	movf	_blinkOn,w,c
  5117  000E72  E003               	bz	l4592
  5118  000E74  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5119  000E78  D004               	goto	l4594
  5120  000E7A                     l4592:
  5121  000E7A  0100               	movlb	0	; () banked
  5122  000E7C  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5123  000E7E  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5124  000E80  6E8A               	movwf	3978,c	;volatile
  5125  000E82                     l4594:
  5126  000E82  FFFF               	dw	65535	; assembler added errata NOP
  5127  000E84  0E01               	movlw	1
  5128  000E86  EC99  F014         	call	_UpdateLedRegister
  5129                           
  5130                           ;main.c: 492: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5131  000E8A  5073               	movf	_blinkOn,w,c
  5132  000E8C  E003               	bz	l4600
  5133  000E8E  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5134  000E92  D004               	goto	l4602
  5135  000E94                     l4600:
  5136  000E94  0100               	movlb	0	; () banked
  5137  000E96  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5138  000E98  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5139  000E9A  6E8A               	movwf	3978,c	;volatile
  5140  000E9C                     l4602:
  5141  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  5142  000E9E  0E02               	movlw	2
  5143  000EA0  EC99  F014         	call	_UpdateLedRegister
  5144                           
  5145                           ;main.c: 493: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5146  000EA4  5073               	movf	_blinkOn,w,c
  5147  000EA6  E003               	bz	l4608
  5148  000EA8  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5149  000EAC  D004               	goto	l4610
  5150  000EAE                     l4608:
  5151  000EAE  0100               	movlb	0	; () banked
  5152  000EB0  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5153  000EB2  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5154  000EB4  6E8A               	movwf	3978,c	;volatile
  5155  000EB6                     l4610:
  5156  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  5157  000EB8  0E03               	movlw	3
  5158  000EBA  EC99  F014         	call	_UpdateLedRegister
  5159                           
  5160                           ;main.c: 494: LATAbits.LATA3 = 1;
  5161  000EBE  8689               	bsf	3977,3,c	;volatile
  5162                           
  5163                           ;main.c: 495: break;
  5164  000EC0  D00B               	goto	l4618
  5165  000EC2                     l4616:
  5166  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  5167                           
  5168                           ; BSR set to: 0
  5169  000EC4  51D6               	movf	_currentLedBlock& (0+255),w,b
  5170                           
  5171                           ; Switch size 1, requested type "speed"
  5172                           ; Number of cases is 4, Range of values is 0 to 3
  5173                           ; switch strategies available:
  5174                           ; Name         Instructions Cycles
  5175                           ; simple_byte           13     7 (average)
  5176                           ;	Chosen strategy is simple_byte
  5177  000EC6  E101 D720          	bz	l4470
  5178  000ECA  0A01               	xorlw	1	; case 1
  5179  000ECC  E101 D754          	bz	l4506
  5180  000ED0  0A03               	xorlw	3	; case 2
  5181  000ED2  E089               	bz	l4542
  5182  000ED4  0A01               	xorlw	1	; case 3
  5183  000ED6  E0BE               	bz	l4578
  5184  000ED8                     l4618:
  5185  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  5186                           
  5187                           ;main.c: 498: currentLedBlock++;
  5188  000EDA  0100               	movlb	0	; () banked
  5189  000EDC  2BD6               	incf	_currentLedBlock& (0+255),f,b
  5190                           
  5191                           ;main.c: 501: currentLedBlock &= 0xFB;
  5192  000EDE  95D6               	bcf	_currentLedBlock& (0+255),2,b
  5193                           
  5194                           ; BSR set to: 0
  5195  000EE0  0012               	return		;funcret
  5196  000EE2  FFFF               	dw	65535	; errata NOP
  5197  000EE4                     __end_of_ProcessLightBlock:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           postdec1	equ	0xFE5
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           plusw2	equ	0xFDB
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _UpdateLedRegister *****************
  5220 ;; Defined at:
  5221 ;;		line 260 in file "main.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  regIndex        1    wreg     unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  regIndex        1    6[COMRAM] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5235 ;;      Params:         0       0       0       0       0       0       0
  5236 ;;      Locals:         1       0       0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0
  5238 ;;      Totals:         1       0       0       0       0       0       0
  5239 ;;Total ram usage:        1 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    2
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_ProcessLightBlock
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text25
  5250  002932                     __ptext25:
  5251                           	opt stack 0
  5252  002932                     _UpdateLedRegister:
  5253                           	opt stack 27
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;incstack = 0
  5257  002932  FFFF               	dw	65535
  5258                           
  5259                           ;UpdateLedRegister@regIndex stored from wreg
  5260  002934  6E07               	movwf	UpdateLedRegister@regIndex,c
  5261                           
  5262                           ;main.c: 262: switch(regIndex)
  5263  002936  D014               	goto	l3784
  5264  002938                     l237:
  5265                           
  5266                           ;main.c: 265: LATAbits.LATA4 = 0;
  5267  002938  9889               	bcf	3977,4,c	;volatile
  5268                           
  5269                           ;main.c: 266: TRISAbits.RA4 = 0;
  5270  00293A  9892               	bcf	3986,4,c	;volatile
  5271                           
  5272                           ;main.c: 267: LATAbits.LATA4 = 1;
  5273  00293C  8889               	bsf	3977,4,c	;volatile
  5274                           
  5275                           ;main.c: 268: TRISAbits.RA4 = 1;
  5276  00293E  8892               	bsf	3986,4,c	;volatile
  5277                           
  5278                           ;main.c: 269: break;
  5279  002940  D018               	goto	l242
  5280  002942                     l239:
  5281                           
  5282                           ;main.c: 271: LATCbits.LATC3 = 0;
  5283  002942  968B               	bcf	3979,3,c	;volatile
  5284                           
  5285                           ;main.c: 272: TRISCbits.RC3 = 0;
  5286  002944  9694               	bcf	3988,3,c	;volatile
  5287                           
  5288                           ;main.c: 273: LATCbits.LATC3 = 1;
  5289  002946  868B               	bsf	3979,3,c	;volatile
  5290                           
  5291                           ;main.c: 274: TRISCbits.RC3 = 1;
  5292  002948  8694               	bsf	3988,3,c	;volatile
  5293                           
  5294                           ;main.c: 275: break;
  5295  00294A  D013               	goto	l242
  5296  00294C                     l240:
  5297                           
  5298                           ;main.c: 277: LATCbits.LATC0 = 0;
  5299  00294C  908B               	bcf	3979,0,c	;volatile
  5300                           
  5301                           ;main.c: 278: TRISCbits.RC0 = 0;
  5302  00294E  9094               	bcf	3988,0,c	;volatile
  5303                           
  5304                           ;main.c: 279: LATCbits.LATC0 = 1;
  5305  002950  808B               	bsf	3979,0,c	;volatile
  5306                           
  5307                           ;main.c: 280: TRISCbits.RC0 = 1;
  5308  002952  8094               	bsf	3988,0,c	;volatile
  5309                           
  5310                           ;main.c: 281: break;
  5311  002954  D00E               	goto	l242
  5312  002956                     l241:
  5313                           
  5314                           ;main.c: 283: LATCbits.LATC1 = 0;
  5315  002956  928B               	bcf	3979,1,c	;volatile
  5316                           
  5317                           ;main.c: 284: TRISCbits.RC1 = 0;
  5318  002958  9294               	bcf	3988,1,c	;volatile
  5319                           
  5320                           ;main.c: 285: LATCbits.LATC1 = 1;
  5321  00295A  828B               	bsf	3979,1,c	;volatile
  5322                           
  5323                           ;main.c: 286: TRISCbits.RC1 = 1;
  5324  00295C  8294               	bsf	3988,1,c	;volatile
  5325                           
  5326                           ;main.c: 287: break;
  5327  00295E  D009               	goto	l242
  5328  002960                     l3784:
  5329  002960  FFFF               	dw	65535	; assembler added errata NOP
  5330  002962  5007               	movf	UpdateLedRegister@regIndex,w,c
  5331                           
  5332                           ; Switch size 1, requested type "speed"
  5333                           ; Number of cases is 4, Range of values is 0 to 3
  5334                           ; switch strategies available:
  5335                           ; Name         Instructions Cycles
  5336                           ; simple_byte           13     7 (average)
  5337                           ;	Chosen strategy is simple_byte
  5338  002964  E0E9               	bz	l237
  5339  002966  0A01               	xorlw	1	; case 1
  5340  002968  E0EC               	bz	l239
  5341  00296A  0A03               	xorlw	3	; case 2
  5342  00296C  E0EF               	bz	l240
  5343  00296E  0A01               	xorlw	1	; case 3
  5344  002970  E0F2               	bz	l241
  5345  002972                     l242:
  5346  002972  FFFF               	dw	65535	; assembler added errata NOP
  5347  002974  0012               	return		;funcret
  5348  002976  FFFF               	dw	65535	; errata NOP
  5349  002978                     __end_of_UpdateLedRegister:
  5350                           	opt stack 0
  5351                           tblptru	equ	0xFF8
  5352                           tblptrh	equ	0xFF7
  5353                           tblptrl	equ	0xFF6
  5354                           tablat	equ	0xFF5
  5355                           prodh	equ	0xFF4
  5356                           prodl	equ	0xFF3
  5357                           intcon	equ	0xFF2
  5358                           postinc0	equ	0xFEE
  5359                           wreg	equ	0xFE8
  5360                           postdec1	equ	0xFE5
  5361                           fsr1h	equ	0xFE2
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           plusw2	equ	0xFDB
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _ProcessDiary *****************
  5372 ;; Defined at:
  5373 ;;		line 687 in file "main.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  minute          1   33[COMRAM] unsigned char 
  5378 ;;  hour            1   32[COMRAM] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : F/1
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5388 ;;      Params:         0       0       0       0       0       0       0
  5389 ;;      Locals:         2       0       0       0       0       0       0
  5390 ;;      Temps:          4       0       0       0       0       0       0
  5391 ;;      Totals:         6       0       0       0       0       0       0
  5392 ;;Total ram usage:        6 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    5
  5395 ;; This function calls:
  5396 ;;		_GetTime
  5397 ;;		_LightLed
  5398 ;;		_LoadNextEvent
  5399 ;;		_PlaySound
  5400 ;;		_SwitchOffAllLeds
  5401 ;;		_getHourMin
  5402 ;; This function is called by:
  5403 ;;		_main
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text26
  5408  001F76                     __ptext26:
  5409                           	opt stack 0
  5410  001F76                     _ProcessDiary:
  5411                           	opt stack 25
  5412                           
  5413                           ;incstack = 0
  5414  001F76  FFFF               	dw	65535
  5415                           
  5416                           ; BSR set to: 1
  5417                           ;main.c: 690: if(curEventNum == 0xff)
  5418  001F78  2875               	incf	_curEventNum,w,c
  5419  001F7A  E059               	bz	l406
  5420                           
  5421                           ; BSR set to: 1
  5422                           ;main.c: 692: uint8_t hour, minute;
  5423                           ;main.c: 693: if(!getHourMin(&hour, &minute))
  5424  001F7C  0E22               	movlw	low ProcessDiary@minute
  5425  001F7E  6E07               	movwf	getHourMin@min,c
  5426  001F80  0E21               	movlw	ProcessDiary@hour& (0+255)
  5427  001F82  ECB6  F015         	call	_getHourMin
  5428  001F86  0900               	iorlw	0
  5429  001F88  E052               	bz	l406
  5430                           
  5431                           ;main.c: 696: if(hour == 0 && minute == 0)
  5432  001F8A  5021               	movf	ProcessDiary@hour,w,c
  5433  001F8C  E10C               	bnz	l5970
  5434  001F8E  5022               	movf	ProcessDiary@minute,w,c
  5435  001F90  E10A               	bnz	l5970
  5436                           
  5437                           ;main.c: 697: {
  5438                           ;main.c: 698: SwitchOffAllLeds();
  5439  001F92  ECE1  F015         	call	_SwitchOffAllLeds	;wreg free
  5440                           
  5441                           ;main.c: 699: curEventNum = 0xff;
  5442  001F96  6875               	setf	_curEventNum,c
  5443                           
  5444                           ;main.c: 700: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5445  001F98  5076               	movf	_currentAlarmedEventNum,w,c
  5446  001F9A  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5447  001F9C  5075               	movf	_curEventNum,w,c
  5448  001F9E  0101               	movlb	1	; () banked
  5449  001FA0  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5450  001FA2  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5451  001FA6                     l5970:
  5452                           
  5453                           ;main.c: 702: }
  5454                           ;main.c: 705: if(curEventHour == hour && curEventMinute == minute)
  5455  001FA6  5021               	movf	ProcessDiary@hour,w,c
  5456  001FA8  0100               	movlb	0	; () banked
  5457  001FAA  19D4               	xorwf	_curEventHour& (0+255),w,b
  5458  001FAC  E140               	bnz	l406
  5459                           
  5460                           ; BSR set to: 0
  5461  001FAE  5022               	movf	ProcessDiary@minute,w,c
  5462  001FB0  19D5               	xorwf	_curEventMinute& (0+255),w,b
  5463  001FB2  E13D               	bnz	l406
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;main.c: 706: {
  5467                           ;main.c: 708: if(currentAlarmedEventNum != 0xff)
  5468  001FB4  2876               	incf	_currentAlarmedEventNum,w,c
  5469  001FB6  E006               	bz	l5978
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;main.c: 709: {
  5473                           ;main.c: 710: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5474  001FB8  0E02               	movlw	2
  5475  001FBA  6E07               	movwf	LightLed@ledState,c
  5476  001FBC  6A08               	clrf	LightLed@blink,c
  5477  001FBE  2876               	incf	_currentAlarmedEventNum,w,c
  5478  001FC0  ECC0  F004         	call	_LightLed
  5479  001FC4                     l5978:
  5480                           
  5481                           ;main.c: 711: }
  5482                           ;main.c: 713: {
  5483                           ;main.c: 714: currentAlarmedEventNum = curEventNum;
  5484  001FC4  C075  F076         	movff	_curEventNum,_currentAlarmedEventNum
  5485                           
  5486                           ;main.c: 716: LightLed(currentAlarmedEventNum + 1, LED_ORANGE, 1);
  5487  001FC8  0E03               	movlw	3
  5488  001FCA  6E07               	movwf	LightLed@ledState,c
  5489  001FCC  0E01               	movlw	1
  5490  001FCE  6E08               	movwf	LightLed@blink,c
  5491  001FD0  2876               	incf	_currentAlarmedEventNum,w,c
  5492  001FD2  ECC0  F004         	call	_LightLed
  5493                           
  5494                           ;main.c: 717: if(_nextEventSoundId != 0)
  5495  001FD6  0100               	movlb	0	; () banked
  5496  001FD8  51CF               	movf	__nextEventSoundId& (0+255),w,b
  5497  001FDA  E007               	bz	l5984
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;main.c: 718: {
  5501                           ;main.c: 719: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5502  001FDC  C0C2  F015         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5503  001FE0  C0C3  F016         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5504  001FE4  05CF               	decf	__nextEventSoundId& (0+255),w,b
  5505  001FE6  EC7E  F00E         	call	_PlaySound
  5506  001FEA                     l5984:
  5507                           
  5508                           ;main.c: 720: }
  5509                           ;main.c: 729: eventResetSecond = *GetTime() + eventAcceptTime;
  5510  001FEA  EC66  F016         	call	_GetTime	;wreg free
  5511  001FEE  6ED9               	movwf	fsr2l,c
  5512  001FF0  6ADA               	clrf	fsr2h,c
  5513  001FF2  CFDE F01D          	movff	postinc2,??_ProcessDiary
  5514  001FF6  CFDE F01E          	movff	postinc2,??_ProcessDiary+1
  5515  001FFA  CFDE F01F          	movff	postinc2,??_ProcessDiary+2
  5516  001FFE  CFDE F020          	movff	postinc2,??_ProcessDiary+3
  5517  002002  0100               	movlb	0	; () banked
  5518  002004  51D7               	movf	_eventAcceptTime& (0+255),w,b
  5519  002006  241D               	addwf	??_ProcessDiary,w,c
  5520  002008  6FAC               	movwf	_eventResetSecond& (0+255),b
  5521  00200A  0E00               	movlw	0
  5522  00200C  201E               	addwfc	??_ProcessDiary+1,w,c
  5523  00200E  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  5524  002010  0E00               	movlw	0
  5525  002012  201F               	addwfc	??_ProcessDiary+2,w,c
  5526  002014  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  5527  002016  0E00               	movlw	0
  5528  002018  2020               	addwfc	??_ProcessDiary+3,w,c
  5529  00201A  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;main.c: 730: LoadNextEvent();
  5533  00201C  ECFA  F00B         	call	_LoadNextEvent	;wreg free
  5534                           
  5535                           ;main.c: 731: }
  5536                           ;main.c: 732: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5537  002020  5076               	movf	_currentAlarmedEventNum,w,c
  5538  002022  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5539  002024  5075               	movf	_curEventNum,w,c
  5540  002026  0101               	movlb	1	; () banked
  5541  002028  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5542  00202A  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5543  00202E                     l406:
  5544  00202E  0012               	return		;funcret
  5545  002030  FFFF               	dw	65535	; errata NOP
  5546  002032                     __end_of_ProcessDiary:
  5547                           	opt stack 0
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           intcon	equ	0xFF2
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1h	equ	0xFE2
  5559                           fsr1l	equ	0xFE1
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           plusw2	equ	0xFDB
  5564                           fsr2h	equ	0xFDA
  5565                           fsr2l	equ	0xFD9
  5566                           status	equ	0xFD8
  5567                           
  5568 ;; *************** function _SwitchOffAllLeds *****************
  5569 ;; Defined at:
  5570 ;;		line 292 in file "main.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  i               1    6[COMRAM] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5584 ;;      Params:         0       0       0       0       0       0       0
  5585 ;;      Locals:         1       0       0       0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0
  5587 ;;      Totals:         1       0       0       0       0       0       0
  5588 ;;Total ram usage:        1 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    2
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_InitFromEeprom
  5595 ;;		_ProcessDiary
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text27
  5600  002BC2                     __ptext27:
  5601                           	opt stack 0
  5602  002BC2                     _SwitchOffAllLeds:
  5603                           	opt stack 26
  5604                           
  5605                           ;incstack = 0
  5606  002BC2  FFFF               	dw	65535
  5607                           
  5608                           ;main.c: 294: for(uint8_t i = 0; i < 16 - 1; i++)
  5609  002BC4  6A07               	clrf	SwitchOffAllLeds@i,c
  5610  002BC6                     l5370:
  5611  002BC6  FFFF               	dw	65535	; assembler added errata NOP
  5612                           
  5613                           ;main.c: 295: {
  5614                           ;main.c: 296: ledStatuses[i] = 0;
  5615  002BC8  5007               	movf	SwitchOffAllLeds@i,w,c
  5616  002BCA  0F90               	addlw	low _ledStatuses
  5617  002BCC  6ED9               	movwf	fsr2l,c
  5618  002BCE  6ADA               	clrf	fsr2h,c
  5619  002BD0  6ADF               	clrf	indf2,c
  5620                           
  5621                           ;main.c: 297: ledBlink[i] = 0;
  5622  002BD2  5007               	movf	SwitchOffAllLeds@i,w,c
  5623  002BD4  0F80               	addlw	low _ledBlink
  5624  002BD6  6ED9               	movwf	fsr2l,c
  5625  002BD8  6ADA               	clrf	fsr2h,c
  5626  002BDA  6ADF               	clrf	indf2,c
  5627  002BDC  2A07               	incf	SwitchOffAllLeds@i,f,c
  5628  002BDE  0E0E               	movlw	14
  5629  002BE0  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5630  002BE2  D7F1               	goto	l5370
  5631  002BE4  0C0E               	retlw	14	;funcret
  5632  002BE6  FFFF               	dw	65535	; errata NOP
  5633  002BE8                     __end_of_SwitchOffAllLeds:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           postdec1	equ	0xFE5
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           plusw2	equ	0xFDB
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _PlaySound *****************
  5656 ;; Defined at:
  5657 ;;		line 565 in file "main.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  soundId         1    wreg     unsigned char 
  5660 ;;  playDuration    2   20[COMRAM] unsigned int 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  soundId         1   26[COMRAM] unsigned char 
  5663 ;;  soundAddr       1   27[COMRAM] unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      unsigned char 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : E/1
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5673 ;;      Params:         2       0       0       0       0       0       0
  5674 ;;      Locals:         2       0       0       0       0       0       0
  5675 ;;      Temps:          4       0       0       0       0       0       0
  5676 ;;      Totals:         8       0       0       0       0       0       0
  5677 ;;Total ram usage:        8 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    4
  5680 ;; This function calls:
  5681 ;;		_GetTime
  5682 ;;		_SoundPlayNextStep
  5683 ;; This function is called by:
  5684 ;;		_ProcessDiary
  5685 ;;		_CommandSetStatusLed
  5686 ;;		_io_poll
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text28
  5691  001CFC                     __ptext28:
  5692                           	opt stack 0
  5693  001CFC                     _PlaySound:
  5694                           	opt stack 25
  5695                           
  5696                           ;incstack = 0
  5697  001CFC  FFFF               	dw	65535
  5698                           
  5699                           ;PlaySound@soundId stored from wreg
  5700  001CFE  6E1B               	movwf	PlaySound@soundId,c
  5701                           
  5702                           ;main.c: 567: if(soundId >= _soundCount)
  5703  001D00  5071               	movf	__soundCount,w,c
  5704  001D02  5C1B               	subwf	PlaySound@soundId,w,c
  5705  001D04  E26E               	bc	l370
  5706                           
  5707                           ;main.c: 570: if(playDuration == 0)
  5708  001D06  5015               	movf	PlaySound@playDuration,w,c
  5709  001D08  1016               	iorwf	PlaySound@playDuration+1,w,c
  5710  001D0A  E106               	bnz	l5386
  5711                           
  5712                           ;main.c: 571: soundTestEnd = 0;
  5713  001D0C  0100               	movlb	0	; () banked
  5714  001D0E  6BB8               	clrf	_soundTestEnd& (0+255),b
  5715  001D10  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  5716  001D12  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  5717  001D14  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  5718  001D16  D023               	goto	l5392
  5719  001D18                     l5386:
  5720                           
  5721                           ;main.c: 572: else if(playDuration == 65535)
  5722  001D18  2815               	incf	PlaySound@playDuration,w,c
  5723  001D1A  E108               	bnz	l5390
  5724  001D1C  2816               	incf	PlaySound@playDuration+1,w,c
  5725  001D1E  E106               	bnz	l5390
  5726                           
  5727                           ;main.c: 573: soundTestEnd = 4294967295;
  5728  001D20  0100               	movlb	0	; () banked
  5729  001D22  69B8               	setf	_soundTestEnd& (0+255),b
  5730  001D24  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  5731  001D26  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  5732  001D28  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  5733  001D2A  D019               	goto	l5392
  5734  001D2C                     l5390:
  5735                           
  5736                           ;main.c: 574: else
  5737                           ;main.c: 575: soundTestEnd = *GetTime() + playDuration;
  5738  001D2C  EC66  F016         	call	_GetTime	;wreg free
  5739  001D30  6ED9               	movwf	fsr2l,c
  5740  001D32  6ADA               	clrf	fsr2h,c
  5741  001D34  CFDE F017          	movff	postinc2,??_PlaySound
  5742  001D38  CFDE F018          	movff	postinc2,??_PlaySound+1
  5743  001D3C  CFDE F019          	movff	postinc2,??_PlaySound+2
  5744  001D40  CFDE F01A          	movff	postinc2,??_PlaySound+3
  5745  001D44  5015               	movf	PlaySound@playDuration,w,c
  5746  001D46  2417               	addwf	??_PlaySound,w,c
  5747  001D48  0100               	movlb	0	; () banked
  5748  001D4A  6FB8               	movwf	_soundTestEnd& (0+255),b
  5749  001D4C  5016               	movf	PlaySound@playDuration+1,w,c
  5750  001D4E  2018               	addwfc	??_PlaySound+1,w,c
  5751  001D50  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  5752  001D52  0E00               	movlw	0
  5753  001D54  2019               	addwfc	??_PlaySound+2,w,c
  5754  001D56  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  5755  001D58  0E00               	movlw	0
  5756  001D5A  201A               	addwfc	??_PlaySound+3,w,c
  5757  001D5C  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  5758  001D5E                     l5392:
  5759  001D5E  FFFF               	dw	65535	; assembler added errata NOP
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 577: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  5763  001D60  501B               	movf	PlaySound@soundId,w,c
  5764  001D62  0F8D               	addlw	141
  5765  001D64  6EA9               	movwf	4009,c	;volatile
  5766                           
  5767                           ; BSR set to: 0
  5768  001D66  80A6               	bsf	4006,0,c	;volatile
  5769                           
  5770                           ; BSR set to: 0
  5771  001D68  CFA8 F01C          	movff	4008,PlaySound@soundAddr	;volatile
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;main.c: 578: if(140 + _soundCount + soundAddr >= 256)
  5775  001D6C  501C               	movf	PlaySound@soundAddr,w,c
  5776  001D6E  C071  F017         	movff	__soundCount,??_PlaySound
  5777  001D72  6A18               	clrf	(??_PlaySound+1)& (0+255),c
  5778  001D74  2617               	addwf	??_PlaySound,f,c
  5779  001D76  0E00               	movlw	0
  5780  001D78  2218               	addwfc	??_PlaySound+1,f,c
  5781  001D7A  0E8C               	movlw	140
  5782  001D7C  2617               	addwf	??_PlaySound,f,c
  5783  001D7E  0E00               	movlw	0
  5784  001D80  2218               	addwfc	??_PlaySound+1,f,c
  5785  001D82  BE18               	btfsc	??_PlaySound+1,7,c
  5786  001D84  D002               	goto	l5402
  5787  001D86  0418               	decf	??_PlaySound+1,w,c
  5788  001D88  E22C               	bc	l370
  5789  001D8A                     l5402:
  5790  001D8A  FFFF               	dw	65535	; assembler added errata NOP
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;main.c: 581: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  5794  001D8C  5071               	movf	__soundCount,w,c
  5795  001D8E  241C               	addwf	PlaySound@soundAddr,w,c
  5796  001D90  0F8D               	addlw	141
  5797  001D92  6EA9               	movwf	4009,c	;volatile
  5798                           
  5799                           ; BSR set to: 0
  5800  001D94  80A6               	bsf	4006,0,c	;volatile
  5801                           
  5802                           ; BSR set to: 0
  5803  001D96  CFA8 F0D1          	movff	4008,__playingSoundSteps	;volatile
  5804                           
  5805                           ;main.c: 583: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  5806  001D9A  5071               	movf	__soundCount,w,c
  5807  001D9C  241C               	addwf	PlaySound@soundAddr,w,c
  5808  001D9E  0F8E               	addlw	142
  5809  001DA0  6E70               	movwf	__playingSoundStartPosInEe,c
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;main.c: 584: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5813  001DA2  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5814  001DA4  6E17               	movwf	??_PlaySound& (0+255),c
  5815  001DA6  5070               	movf	__playingSoundStartPosInEe,w,c
  5816  001DA8  0101               	movlb	1	; () banked
  5817  001DAA  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5818  001DAC  C017  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5819                           
  5820                           ; BSR set to: 1
  5821                           ;main.c: 585: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5822  001DB0  0100               	movlb	0	; () banked
  5823  001DB2  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5824  001DB4  0D03               	mullw	3
  5825  001DB6  5070               	movf	__playingSoundStartPosInEe,w,c
  5826  001DB8  26F3               	addwf	prodl,f,c
  5827  001DBA  0E00               	movlw	0
  5828  001DBC  22F4               	addwfc	prodh,f,c
  5829  001DBE  BEF4               	btfsc	prodh,7,c
  5830  001DC0  D002               	goto	l376
  5831  001DC2  04F4               	decf	prodh,w,c
  5832  001DC4  E20E               	bc	l370
  5833  001DC6                     l376:
  5834  001DC6  FFFF               	dw	65535	; assembler added errata NOP
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;main.c: 588: _playingSoundCurPos = 0;
  5838  001DC8  6BD0               	clrf	__playingSoundCurPos& (0+255),b
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;main.c: 589: _isSoundPlaying = 1;
  5842  001DCA  0E01               	movlw	1
  5843  001DCC  6FCE               	movwf	__isSoundPlaying& (0+255),b
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;main.c: 590: SoundPlayNextStep();
  5847  001DCE  EC74  F010         	call	_SoundPlayNextStep	;wreg free
  5848                           
  5849                           ;main.c: 592: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  5850  001DD2  5071               	movf	__soundCount,w,c
  5851  001DD4  6E17               	movwf	??_PlaySound& (0+255),c
  5852  001DD6  0100               	movlb	0	; () banked
  5853  001DD8  51CE               	movf	__isSoundPlaying& (0+255),w,b
  5854  001DDA  0101               	movlb	1	; () banked
  5855  001DDC  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  5856  001DDE  C017  F1B7         	movff	??_PlaySound,__MODBUSInputRegs+13
  5857  001DE2                     l370:
  5858  001DE2  0012               	return		;funcret
  5859  001DE4  FFFF               	dw	65535	; errata NOP
  5860  001DE6                     __end_of_PlaySound:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           intcon	equ	0xFF2
  5869                           postinc0	equ	0xFEE
  5870                           wreg	equ	0xFE8
  5871                           postdec1	equ	0xFE5
  5872                           fsr1h	equ	0xFE2
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           plusw2	equ	0xFDB
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _SoundPlayNextStep *****************
  5883 ;; Defined at:
  5884 ;;		line 522 in file "main.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  duration        1   19[COMRAM] unsigned char 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : F/0
  5895 ;;		On exit  : E/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5898 ;;      Params:         0       0       0       0       0       0       0
  5899 ;;      Locals:         1       0       0       0       0       0       0
  5900 ;;      Temps:          5       0       0       0       0       0       0
  5901 ;;      Totals:         6       0       0       0       0       0       0
  5902 ;;Total ram usage:        6 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    3
  5905 ;; This function calls:
  5906 ;;		_GetTime
  5907 ;;		_SetBuzzerDuty
  5908 ;;		_StopPlaying
  5909 ;;		_millis
  5910 ;; This function is called by:
  5911 ;;		_PlaySound
  5912 ;;		_main
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text29
  5917  0020E8                     __ptext29:
  5918                           	opt stack 0
  5919  0020E8                     _SoundPlayNextStep:
  5920                           	opt stack 25
  5921                           
  5922                           ;incstack = 0
  5923  0020E8  FFFF               	dw	65535
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;main.c: 524: if(_playingSoundCurPos >= _playingSoundSteps)
  5927  0020EA  51D1               	movf	__playingSoundSteps& (0+255),w,b
  5928  0020EC  5DD0               	subwf	__playingSoundCurPos& (0+255),w,b
  5929  0020EE  E316               	bnc	l5308
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 525: {
  5933                           ;main.c: 526: _playingSoundCurPos = 0;
  5934  0020F0  6BD0               	clrf	__playingSoundCurPos& (0+255),b
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 527: if(*GetTime() >= soundTestEnd)
  5938  0020F2  EC66  F016         	call	_GetTime	;wreg free
  5939  0020F6  6ED9               	movwf	fsr2l,c
  5940  0020F8  6ADA               	clrf	fsr2h,c
  5941  0020FA  0100               	movlb	0	; () banked
  5942  0020FC  51B8               	movf	_soundTestEnd& (0+255),w,b
  5943  0020FE  5CDE               	subwf	postinc2,w,c
  5944  002100  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  5945  002102  58DE               	subwfb	postinc2,w,c
  5946  002104  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  5947  002106  58DE               	subwfb	postinc2,w,c
  5948  002108  50DE               	movf	postinc2,w,c
  5949  00210A  0A80               	xorlw	128
  5950  00210C  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  5951  00210E  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  5952  002110  0A80               	xorlw	128
  5953  002112  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  5954  002114  E303               	bnc	l5308
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 528: {
  5958                           ;main.c: 529: StopPlaying();
  5959  002116  EC13  F016         	call	_StopPlaying	;wreg free
  5960  00211A  D03A               	goto	l363
  5961  00211C                     l5308:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;main.c: 531: }
  5965                           ;main.c: 532: }
  5966                           ;main.c: 533: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  5967  00211C  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  5968  00211E  0D03               	mullw	3
  5969  002120  50F3               	movf	prodl,w,c
  5970  002122  2470               	addwf	__playingSoundStartPosInEe,w,c
  5971  002124  6EA9               	movwf	4009,c	;volatile
  5972                           
  5973                           ; BSR set to: 0
  5974  002126  80A6               	bsf	4006,0,c	;volatile
  5975                           
  5976                           ; BSR set to: 0
  5977  002128  50A8               	movf	4008,w,c	;volatile
  5978  00212A  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  5979  00212C  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  5980  00212E  ECCC  F015         	call	_millis	;wreg free
  5981  002132  500F               	movf	??_SoundPlayNextStep,w,c
  5982  002134  2407               	addwf	?_millis,w,c
  5983  002136  0100               	movlb	0	; () banked
  5984  002138  6FA0               	movwf	__playingEndMs& (0+255),b
  5985  00213A  5010               	movf	??_SoundPlayNextStep+1,w,c
  5986  00213C  2008               	addwfc	?_millis+1,w,c
  5987  00213E  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  5988  002140  0E00               	movlw	0
  5989  002142  2009               	addwfc	?_millis+2,w,c
  5990  002144  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  5991  002146  0E00               	movlw	0
  5992  002148  200A               	addwfc	?_millis+3,w,c
  5993  00214A  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;main.c: 534: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  5997  00214C  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  5998  00214E  0D03               	mullw	3
  5999  002150  50F3               	movf	prodl,w,c
  6000  002152  2470               	addwf	__playingSoundStartPosInEe,w,c
  6001  002154  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  6002  002156  280F               	incf	??_SoundPlayNextStep,w,c
  6003  002158  6EA9               	movwf	4009,c	;volatile
  6004                           
  6005                           ; BSR set to: 0
  6006  00215A  80A6               	bsf	4006,0,c	;volatile
  6007                           
  6008                           ; BSR set to: 0
  6009  00215C  CFA8 FFCB          	movff	4008,4043	;volatile
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;main.c: 535: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  6013  002160  51D0               	movf	__playingSoundCurPos& (0+255),w,b
  6014  002162  0D03               	mullw	3
  6015  002164  50F3               	movf	prodl,w,c
  6016  002166  2470               	addwf	__playingSoundStartPosInEe,w,c
  6017  002168  0F02               	addlw	2
  6018  00216A  6EA9               	movwf	4009,c	;volatile
  6019                           
  6020                           ; BSR set to: 0
  6021  00216C  80A6               	bsf	4006,0,c	;volatile
  6022                           
  6023                           ; BSR set to: 0
  6024  00216E  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;main.c: 536: _playingSoundCurPos++;
  6028  002172  2BD0               	incf	__playingSoundCurPos& (0+255),f,b
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;main.c: 537: if(duration == 0 || PR2 == 0)
  6032  002174  5014               	movf	SoundPlayNextStep@duration,w,c
  6033  002176  E002               	bz	l366
  6034                           
  6035                           ; BSR set to: 0
  6036  002178  50CB               	movf	4043,w,c	;volatile
  6037  00217A  E103               	bnz	l5332
  6038  00217C                     l366:
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;main.c: 538: {
  6042                           ;main.c: 539: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6043  00217C  94CA               	bcf	4042,2,c	;volatile
  6044  00217E  8494               	bsf	3988,2,c	;volatile
  6045                           
  6046                           ;main.c: 540: return;
  6047  002180  D007               	goto	l363
  6048  002182                     l5332:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;main.c: 541: }
  6052                           ;main.c: 542: SetBuzzerDuty(duration);
  6053  002182  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  6054  002186  6A08               	clrf	SetBuzzerDuty@dc+1,c
  6055  002188  EC58  F015         	call	_SetBuzzerDuty	;wreg free
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;main.c: 543: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  6059  00218C  9494               	bcf	3988,2,c	;volatile
  6060                           
  6061                           ; BSR set to: 0
  6062  00218E  84CA               	bsf	4042,2,c	;volatile
  6063  002190                     l363:
  6064  002190  FFFF               	dw	65535	; assembler added errata NOP
  6065  002192  0012               	return		;funcret
  6066  002194  FFFF               	dw	65535	; errata NOP
  6067  002196                     __end_of_SoundPlayNextStep:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           postdec1	equ	0xFE5
  6079                           fsr1h	equ	0xFE2
  6080                           fsr1l	equ	0xFE1
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           plusw2	equ	0xFDB
  6085                           fsr2h	equ	0xFDA
  6086                           fsr2l	equ	0xFD9
  6087                           status	equ	0xFD8
  6088                           
  6089 ;; *************** function _StopPlaying *****************
  6090 ;; Defined at:
  6091 ;;		line 514 in file "main.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;		None
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;		None
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : F/1
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6105 ;;      Params:         0       0       0       0       0       0       0
  6106 ;;      Locals:         0       0       0       0       0       0       0
  6107 ;;      Temps:          2       0       0       0       0       0       0
  6108 ;;      Totals:         2       0       0       0       0       0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    2
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_SoundPlayNextStep
  6116 ;;		_ResetEvent
  6117 ;;		_main
  6118 ;;		_CommandSetStatusLed
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text30
  6123  002C26                     __ptext30:
  6124                           	opt stack 0
  6125  002C26                     _StopPlaying:
  6126                           	opt stack 25
  6127                           
  6128                           ;incstack = 0
  6129  002C26  FFFF               	dw	65535
  6130                           
  6131                           ;main.c: 516: _isSoundPlaying = 0;
  6132  002C28  0100               	movlb	0	; () banked
  6133  002C2A  6BCE               	clrf	__isSoundPlaying& (0+255),b
  6134                           
  6135                           ;main.c: 517: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6136  002C2C  94CA               	bcf	4042,2,c	;volatile
  6137  002C2E  8494               	bsf	3988,2,c	;volatile
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;main.c: 519: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  6141  002C30  5071               	movf	__soundCount,w,c
  6142  002C32  6E07               	movwf	??_StopPlaying& (0+255),c
  6143  002C34  51CE               	movf	__isSoundPlaying& (0+255),w,b
  6144  002C36  0101               	movlb	1	; () banked
  6145  002C38  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  6146  002C3A  C007  F1B7         	movff	??_StopPlaying,__MODBUSInputRegs+13
  6147                           
  6148                           ; BSR set to: 1
  6149  002C3E  0012               	return		;funcret
  6150  002C40  FFFF               	dw	65535	; errata NOP
  6151  002C42                     __end_of_StopPlaying:
  6152                           	opt stack 0
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           postinc0	equ	0xFEE
  6161                           wreg	equ	0xFE8
  6162                           postdec1	equ	0xFE5
  6163                           fsr1h	equ	0xFE2
  6164                           fsr1l	equ	0xFE1
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           plusw2	equ	0xFDB
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function _SetBuzzerDuty *****************
  6174 ;; Defined at:
  6175 ;;		line 392 in file "main.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  dc              2    6[COMRAM] unsigned int 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0
  6184 ;; Tracked objects:
  6185 ;;		On entry : F/0
  6186 ;;		On exit  : F/0
  6187 ;;		Unchanged: F/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6189 ;;      Params:         2       0       0       0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0
  6191 ;;      Temps:          2       0       0       0       0       0       0
  6192 ;;      Totals:         4       0       0       0       0       0       0
  6193 ;;Total ram usage:        4 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    2
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_SoundPlayNextStep
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text31
  6204  002AB0                     __ptext31:
  6205                           	opt stack 0
  6206  002AB0                     _SetBuzzerDuty:
  6207                           	opt stack 25
  6208                           
  6209                           ; BSR set to: 1
  6210                           ;incstack = 0
  6211  002AB0  FFFF               	dw	65535
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;main.c: 397: CCP1CONbits.DC1B = dc & 0x03;
  6215  002AB2  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6216  002AB6  0E03               	movlw	3
  6217  002AB8  1609               	andwf	??_SetBuzzerDuty,f,c
  6218  002ABA  3A09               	swapf	??_SetBuzzerDuty,f,c
  6219  002ABC  50BD               	movf	4029,w,c	;volatile
  6220  002ABE  1809               	xorwf	??_SetBuzzerDuty,w,c
  6221  002AC0  0BCF               	andlw	-49
  6222  002AC2  1809               	xorwf	??_SetBuzzerDuty,w,c
  6223  002AC4  6EBD               	movwf	4029,c	;volatile
  6224                           
  6225                           ;main.c: 401: CCPR1L = (uint8_t)(dc >> 2);
  6226  002AC6  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6227  002ACA  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  6228  002ACE  90D8               	bcf	status,0,c
  6229  002AD0  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6230  002AD2  3209               	rrcf	??_SetBuzzerDuty,f,c
  6231  002AD4  90D8               	bcf	status,0,c
  6232  002AD6  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6233  002AD8  3209               	rrcf	??_SetBuzzerDuty,f,c
  6234  002ADA  5009               	movf	??_SetBuzzerDuty,w,c
  6235  002ADC  6EBE               	movwf	4030,c	;volatile
  6236                           
  6237                           ; BSR set to: 0
  6238  002ADE  0012               	return		;funcret
  6239  002AE0  FFFF               	dw	65535	; errata NOP
  6240  002AE2                     __end_of_SetBuzzerDuty:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           postinc0	equ	0xFEE
  6250                           wreg	equ	0xFE8
  6251                           postdec1	equ	0xFE5
  6252                           fsr1h	equ	0xFE2
  6253                           fsr1l	equ	0xFE1
  6254                           indf2	equ	0xFDF
  6255                           postinc2	equ	0xFDE
  6256                           postdec2	equ	0xFDD
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _GetTime *****************
  6263 ;; Defined at:
  6264 ;;		line 207 in file "user.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      PTR long 
  6271 ;; Registers used:
  6272 ;;		wreg
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         2       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0
  6281 ;;      Totals:         2       0       0       0       0       0       0
  6282 ;;Total ram usage:        2 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    2
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_SoundPlayNextStep
  6289 ;;		_PlaySound
  6290 ;;		_ProcessDiary
  6291 ;;		_main
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text32
  6296  002CCC                     __ptext32:
  6297                           	opt stack 0
  6298  002CCC                     _GetTime:
  6299                           	opt stack 25
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;incstack = 0
  6303  002CCC  FFFF               	dw	65535
  6304                           
  6305                           ;user.c: 209: return &currentTime;
  6306  002CCE  0ED9               	movlw	_currentTime& (0+255)
  6307  002CD0  0012               	return		;funcret
  6308  002CD2  FFFF               	dw	65535	; errata NOP
  6309  002CD4                     __end_of_GetTime:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1h	equ	0xFE2
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           plusw2	equ	0xFDB
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _LoadNextEvent *****************
  6332 ;; Defined at:
  6333 ;;		line 611 in file "main.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  v1              1   12[COMRAM] unsigned char 
  6338 ;;  minute          1   11[COMRAM] unsigned char 
  6339 ;;  hour            1   10[COMRAM] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6349 ;;      Params:         0       0       0       0       0       0       0
  6350 ;;      Locals:         3       0       0       0       0       0       0
  6351 ;;      Temps:          2       0       0       0       0       0       0
  6352 ;;      Totals:         5       0       0       0       0       0       0
  6353 ;;Total ram usage:        5 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    3
  6356 ;; This function calls:
  6357 ;;		_getHourMin
  6358 ;; This function is called by:
  6359 ;;		_InitFromEeprom
  6360 ;;		_ProcessDiary
  6361 ;;		_SetTimeFromRegs
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text33
  6366  0017F4                     __ptext33:
  6367                           	opt stack 0
  6368  0017F4                     _LoadNextEvent:
  6369                           	opt stack 24
  6370                           
  6371                           ;incstack = 0
  6372  0017F4  FFFF               	dw	65535
  6373                           
  6374                           ;main.c: 613: if(eventCount == 0)
  6375  0017F6  0100               	movlb	0	; () banked
  6376  0017F8  51D8               	movf	_eventCount& (0+255),w,b
  6377  0017FA  E07E               	bz	l387
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;main.c: 615: uint8_t hour, minute;
  6381                           ;main.c: 616: if(!getHourMin(&hour, &minute))
  6382  0017FC  0E0C               	movlw	low LoadNextEvent@minute
  6383  0017FE  6E07               	movwf	getHourMin@min,c
  6384  001800  0E0B               	movlw	LoadNextEvent@hour& (0+255)
  6385  001802  ECB6  F015         	call	_getHourMin
  6386  001806  0900               	iorlw	0
  6387  001808  E077               	bz	l387
  6388  00180A                     l5240:
  6389                           
  6390                           ;main.c: 626: {
  6391                           ;main.c: 627: if(curEventNum == 0xff)
  6392  00180A  2875               	incf	_curEventNum,w,c
  6393  00180C  E102               	bnz	l5244
  6394                           
  6395                           ;main.c: 628: curEventNum = 0;
  6396  00180E  6A75               	clrf	_curEventNum,c
  6397  001810  D001               	goto	l5246
  6398  001812                     l5244:
  6399                           
  6400                           ;main.c: 629: else
  6401                           ;main.c: 630: curEventNum++;
  6402  001812  2A75               	incf	_curEventNum,f,c
  6403  001814                     l5246:
  6404  001814  FFFF               	dw	65535	; assembler added errata NOP
  6405                           
  6406                           ;main.c: 631: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6407  001816  5076               	movf	_currentAlarmedEventNum,w,c
  6408  001818  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6409  00181A  5075               	movf	_curEventNum,w,c
  6410  00181C  0101               	movlb	1	; () banked
  6411  00181E  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6412  001820  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6413                           
  6414                           ; BSR set to: 1
  6415                           ;main.c: 632: if(curEventNum >= eventCount)
  6416  001824  0100               	movlb	0	; () banked
  6417  001826  51D8               	movf	_eventCount& (0+255),w,b
  6418  001828  5C75               	subwf	_curEventNum,w,c
  6419  00182A  E307               	bnc	l5252
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 633: {
  6423                           ;main.c: 634: curEventNum = 0xff;
  6424  00182C  6875               	setf	_curEventNum,c
  6425                           
  6426                           ;main.c: 635: curEventMinute = 0;
  6427  00182E  6BD5               	clrf	_curEventMinute& (0+255),b
  6428                           
  6429                           ;main.c: 636: curEventHour = 0;
  6430  001830  6BD4               	clrf	_curEventHour& (0+255),b
  6431                           
  6432                           ;main.c: 637: _MODBUSInputRegs[3] = (((uint16_t)0<<8)|0);
  6433  001832  0101               	movlb	1	; () banked
  6434  001834  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  6435  001836  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  6436                           
  6437                           ;main.c: 638: return;
  6438  001838  D05F               	goto	l387
  6439  00183A                     l5252:
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;main.c: 639: }
  6443                           ;main.c: 650: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6444  00183A  5075               	movf	_curEventNum,w,c
  6445  00183C  0D02               	mullw	2
  6446  00183E  50F3               	movf	prodl,w,c
  6447  001840  0F13               	addlw	19
  6448  001842  6EA9               	movwf	4009,c	;volatile
  6449                           
  6450                           ; BSR set to: 0
  6451  001844  80A6               	bsf	4006,0,c	;volatile
  6452                           
  6453                           ; BSR set to: 0
  6454  001846  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;main.c: 651: curEventHour = v1 & 0x1F;
  6458  00184A  500D               	movf	LoadNextEvent@v1,w,c
  6459  00184C  0B1F               	andlw	31
  6460  00184E  6FD4               	movwf	_curEventHour& (0+255),b
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;main.c: 653: _nextEventPlayDuration = (v1 >> 5);
  6464  001850  380D               	swapf	LoadNextEvent@v1,w,c
  6465  001852  42E8               	rrncf	wreg,f,c
  6466  001854  0B07               	andlw	7
  6467  001856  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6468  001858  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6469                           
  6470                           ;main.c: 654: switch(_nextEventPlayDuration)
  6471  00185A  D01A               	goto	l5276
  6472  00185C                     l5262:
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;main.c: 657: _nextEventPlayDuration = 10;
  6476  00185C  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6477  00185E  0E0A               	movlw	10
  6478  001860  D011               	goto	L7
  6479  001862                     l5264:
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 660: _nextEventPlayDuration = 30;
  6483  001862  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6484  001864  0E1E               	movlw	30
  6485  001866  D00E               	goto	L7
  6486  001868                     l5266:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;main.c: 663: _nextEventPlayDuration = 60;
  6490  001868  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6491  00186A  0E3C               	movlw	60
  6492  00186C  D00B               	goto	L7
  6493  00186E                     l5268:
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;main.c: 666: _nextEventPlayDuration = 60*5;
  6497  00186E  0E01               	movlw	1
  6498  001870  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6499  001872  0E2C               	movlw	44
  6500  001874  D007               	goto	L7
  6501  001876                     l5270:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;main.c: 669: _nextEventPlayDuration = 60*12;
  6505  001876  0E02               	movlw	2
  6506  001878  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6507  00187A  0ED0               	movlw	208
  6508  00187C  D003               	goto	L7
  6509  00187E                     l5272:
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;main.c: 672: _nextEventPlayDuration = 60*30;
  6513  00187E  0E07               	movlw	7
  6514  001880  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6515  001882  0E08               	movlw	8
  6516  001884                     L7:
  6517  001884  FFFF               	dw	65535	; assembler added errata NOP
  6518  001886  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6519                           
  6520                           ;main.c: 673: break;
  6521  001888  D019               	goto	l5278
  6522  00188A                     l401:
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;main.c: 675: _nextEventPlayDuration = 65535;
  6526  00188A  69C2               	setf	__nextEventPlayDuration& (0+255),b
  6527  00188C  69C3               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6528                           
  6529                           ;main.c: 676: break;
  6530  00188E  D016               	goto	l5278
  6531  001890                     l5276:
  6532  001890  FFFF               	dw	65535	; assembler added errata NOP
  6533                           
  6534                           ; BSR set to: 0
  6535  001892  C0C2  F009         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6536  001896  C0C3  F00A         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6537                           
  6538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6539                           ; Switch size 1, requested type "speed"
  6540                           ; Number of cases is 1, Range of values is 0 to 0
  6541                           ; switch strategies available:
  6542                           ; Name         Instructions Cycles
  6543                           ; simple_byte            4     3 (average)
  6544                           ;	Chosen strategy is simple_byte
  6545  00189A  500A               	movf	??_LoadNextEvent+1,w,c
  6546  00189C  E10F               	bnz	l5278
  6547                           
  6548                           ; BSR set to: 0
  6549                           ; Switch size 1, requested type "speed"
  6550                           ; Number of cases is 7, Range of values is 1 to 7
  6551                           ; switch strategies available:
  6552                           ; Name         Instructions Cycles
  6553                           ; simple_byte           22    12 (average)
  6554                           ;	Chosen strategy is simple_byte
  6555  00189E  5009               	movf	??_LoadNextEvent,w,c
  6556  0018A0  0A01               	xorlw	1	; case 1
  6557  0018A2  E0DC               	bz	l5262
  6558  0018A4  0A03               	xorlw	3	; case 2
  6559  0018A6  E0DD               	bz	l5264
  6560  0018A8  0A01               	xorlw	1	; case 3
  6561  0018AA  E0DE               	bz	l5266
  6562  0018AC  0A07               	xorlw	7	; case 4
  6563  0018AE  E0DF               	bz	l5268
  6564  0018B0  0A01               	xorlw	1	; case 5
  6565  0018B2  E0E1               	bz	l5270
  6566  0018B4  0A03               	xorlw	3	; case 6
  6567  0018B6  E0E3               	bz	l5272
  6568  0018B8  0A01               	xorlw	1	; case 7
  6569  0018BA  E0E7               	bz	l401
  6570  0018BC                     l5278:
  6571  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;main.c: 678: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  6575  0018BE  5075               	movf	_curEventNum,w,c
  6576  0018C0  0D02               	mullw	2
  6577  0018C2  50F3               	movf	prodl,w,c
  6578  0018C4  0F14               	addlw	20
  6579  0018C6  6EA9               	movwf	4009,c	;volatile
  6580                           
  6581                           ; BSR set to: 0
  6582  0018C8  80A6               	bsf	4006,0,c	;volatile
  6583                           
  6584                           ; BSR set to: 0
  6585  0018CA  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;main.c: 679: curEventMinute = v1 & 0x3F;
  6589  0018CE  500D               	movf	LoadNextEvent@v1,w,c
  6590  0018D0  0B3F               	andlw	63
  6591  0018D2  6FD5               	movwf	_curEventMinute& (0+255),b
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;main.c: 680: _nextEventSoundId = v1 >> 6;
  6595  0018D4  440D               	rlncf	LoadNextEvent@v1,w,c
  6596  0018D6  46E8               	rlncf	wreg,f,c
  6597  0018D8  0B03               	andlw	3
  6598  0018DA  6FCF               	movwf	__nextEventSoundId& (0+255),b
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;main.c: 682: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6602  0018DC  51D4               	movf	_curEventHour& (0+255),w,b
  6603  0018DE  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6604  0018E0  51D5               	movf	_curEventMinute& (0+255),w,b
  6605  0018E2  0101               	movlb	1	; () banked
  6606  0018E4  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6607  0018E6  C009  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6608                           
  6609                           ; BSR set to: 1
  6610                           ;main.c: 683: }while(curEventHour < hour || curEventMinute <= minute);
  6611  0018EA  500B               	movf	LoadNextEvent@hour,w,c
  6612  0018EC  0100               	movlb	0	; () banked
  6613  0018EE  5DD4               	subwf	_curEventHour& (0+255),w,b
  6614  0018F0  E38C               	bnc	l5240
  6615                           
  6616                           ; BSR set to: 0
  6617  0018F2  51D5               	movf	_curEventMinute& (0+255),w,b
  6618  0018F4  5C0C               	subwf	LoadNextEvent@minute,w,c
  6619  0018F6  E289               	bc	l5240
  6620  0018F8                     l387:
  6621  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  6622  0018FA  0012               	return		;funcret
  6623  0018FC  FFFF               	dw	65535	; errata NOP
  6624  0018FE                     __end_of_LoadNextEvent:
  6625                           	opt stack 0
  6626                           tblptru	equ	0xFF8
  6627                           tblptrh	equ	0xFF7
  6628                           tblptrl	equ	0xFF6
  6629                           tablat	equ	0xFF5
  6630                           prodh	equ	0xFF4
  6631                           prodl	equ	0xFF3
  6632                           intcon	equ	0xFF2
  6633                           postinc0	equ	0xFEE
  6634                           wreg	equ	0xFE8
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           plusw2	equ	0xFDB
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _getHourMin *****************
  6647 ;; Defined at:
  6648 ;;		line 245 in file "interrupts.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  hour            1    wreg     PTR unsigned char 
  6651 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6652 ;;  min             1    6[COMRAM] PTR unsigned char 
  6653 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  hour            1    7[COMRAM] PTR unsigned char 
  6656 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      unsigned char 
  6659 ;; Registers used:
  6660 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6661 ;; Tracked objects:
  6662 ;;		On entry : E/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6666 ;;      Params:         1       0       0       0       0       0       0
  6667 ;;      Locals:         1       0       0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0
  6669 ;;      Totals:         2       0       0       0       0       0       0
  6670 ;;Total ram usage:        2 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    2
  6673 ;; This function calls:
  6674 ;;		Nothing
  6675 ;; This function is called by:
  6676 ;;		_LoadNextEvent
  6677 ;;		_ProcessDiary
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text34
  6683  002B6C                     __ptext34:
  6684                           	opt stack 0
  6685  002B6C                     _getHourMin:
  6686                           	opt stack 24
  6687                           
  6688                           ;incstack = 0
  6689  002B6C  FFFF               	dw	65535
  6690                           
  6691                           ;getHourMin@hour stored from wreg
  6692  002B6E  6E08               	movwf	getHourMin@hour,c
  6693                           
  6694                           ;interrupts.c: 247: if(globalHours == 0xFF)
  6695  002B70  2877               	incf	_globalHours,w,c	;volatile
  6696  002B72  E102               	bnz	l103
  6697                           
  6698                           ;interrupts.c: 248: return 0;
  6699  002B74  0E00               	movlw	0
  6700  002B76  D00D               	goto	l104
  6701  002B78                     l103:
  6702                           
  6703                           ;interrupts.c: 249: (INTCONbits.GIE = 0);
  6704  002B78  9EF2               	bcf	intcon,7,c	;volatile
  6705                           
  6706                           ;interrupts.c: 250: *hour = globalHours;
  6707  002B7A  5008               	movf	getHourMin@hour,w,c
  6708  002B7C  6ED9               	movwf	fsr2l,c
  6709  002B7E  6ADA               	clrf	fsr2h,c
  6710  002B80  C077  FFDF         	movff	_globalHours,indf2	;volatile
  6711                           
  6712                           ;interrupts.c: 251: *min = globalMinutes;
  6713  002B84  5007               	movf	getHourMin@min,w,c
  6714  002B86  6ED9               	movwf	fsr2l,c
  6715  002B88  6ADA               	clrf	fsr2h,c
  6716  002B8A  C074  FFDF         	movff	_globalMinutes,indf2	;volatile
  6717                           
  6718                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
  6719  002B8E  8EF2               	bsf	intcon,7,c	;volatile
  6720                           
  6721                           ;interrupts.c: 253: return 1;
  6722  002B90  0E01               	movlw	1
  6723  002B92                     l104:
  6724  002B92  FFFF               	dw	65535	; assembler added errata NOP
  6725  002B94  0012               	return		;funcret
  6726  002B96  FFFF               	dw	65535	; errata NOP
  6727  002B98                     __end_of_getHourMin:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           intcon	equ	0xFF2
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           postdec1	equ	0xFE5
  6739                           fsr1h	equ	0xFE2
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           plusw2	equ	0xFDB
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _LightLed *****************
  6750 ;; Defined at:
  6751 ;;		line 303 in file "main.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  ledNum          1    wreg     unsigned char 
  6754 ;;  ledState        1    6[COMRAM] enum E2429
  6755 ;;  blink           1    7[COMRAM] unsigned char 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  ledNum          1   11[COMRAM] unsigned char 
  6758 ;;  statusShift     1   13[COMRAM] unsigned char 
  6759 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  1    wreg      void 
  6762 ;; Registers used:
  6763 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/1
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6769 ;;      Params:         2       0       0       0       0       0       0
  6770 ;;      Locals:         3       0       0       0       0       0       0
  6771 ;;      Temps:          3       0       0       0       0       0       0
  6772 ;;      Totals:         8       0       0       0       0       0       0
  6773 ;;Total ram usage:        8 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    2
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_ResetEvent
  6780 ;;		_ProcessDiary
  6781 ;;		_io_poll
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text35
  6786  000980                     __ptext35:
  6787                           	opt stack 0
  6788  000980                     _LightLed:
  6789                           	opt stack 27
  6790                           
  6791                           ;incstack = 0
  6792  000980  FFFF               	dw	65535
  6793                           
  6794                           ;LightLed@ledNum stored from wreg
  6795  000982  6E0C               	movwf	LightLed@ledNum,c
  6796                           
  6797                           ;main.c: 305: if(ledNum < 1 || ledNum > 60)
  6798  000984  500C               	movf	LightLed@ledNum,w,c
  6799  000986  E101 D171          	bz	l253
  6800  00098A  0E3C               	movlw	60
  6801  00098C  640C               	cpfsgt	LightLed@ledNum,c
  6802  00098E  D001               	goto	l5468
  6803  000990  D16D               	goto	l253
  6804  000992                     l5468:
  6805  000992  FFFF               	dw	65535	; assembler added errata NOP
  6806                           
  6807                           ;main.c: 307: ledNum--;
  6808  000994  060C               	decf	LightLed@ledNum,f,c
  6809                           
  6810                           ;main.c: 309: uint8_t ststusIndex = ledNum >> 2;
  6811  000996  400C               	rrncf	LightLed@ledNum,w,c
  6812  000998  42E8               	rrncf	wreg,f,c
  6813  00099A  0B3F               	andlw	63
  6814  00099C  6E0D               	movwf	LightLed@ststusIndex,c
  6815                           
  6816                           ;main.c: 310: uint8_t statusShift = (ledNum & 0x03) << 1;
  6817  00099E  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6818  0009A2  0E03               	movlw	3
  6819  0009A4  1609               	andwf	??_LightLed,f,c
  6820  0009A6  90D8               	bcf	status,0,c
  6821  0009A8  3409               	rlcf	??_LightLed,w,c
  6822  0009AA  6E0E               	movwf	LightLed@statusShift,c
  6823                           
  6824                           ;main.c: 312: switch(ledState)
  6825  0009AC  D153               	goto	l5508
  6826  0009AE                     l5474:
  6827                           
  6828                           ;main.c: 315: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6829  0009AE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6830  0009B2  2A09               	incf	??_LightLed,f,c
  6831  0009B4  0E01               	movlw	1
  6832  0009B6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6833  0009B8  2A09               	incf	??_LightLed,f,c
  6834  0009BA  D003               	goto	u4554
  6835  0009BC                     u4555:
  6836  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  6837  0009BE  90D8               	bcf	status,0,c
  6838  0009C0  360A               	rlcf	??_LightLed+1,f,c
  6839  0009C2                     u4554:
  6840  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  6841  0009C4  2E09               	decfsz	??_LightLed,f,c
  6842  0009C6  D7FA               	goto	u4555
  6843  0009C8  1C0A               	comf	??_LightLed+1,w,c
  6844  0009CA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6845  0009CC  500D               	movf	LightLed@ststusIndex,w,c
  6846  0009CE  0F90               	addlw	low _ledStatuses
  6847  0009D0  6ED9               	movwf	fsr2l,c
  6848  0009D2  6ADA               	clrf	fsr2h,c
  6849  0009D4  500B               	movf	??_LightLed+2,w,c
  6850  0009D6  16DF               	andwf	indf2,f,c
  6851                           
  6852                           ;main.c: 316: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6853  0009D8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6854  0009DC  0E01               	movlw	1
  6855  0009DE  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6856  0009E0  2A09               	incf	??_LightLed,f,c
  6857  0009E2  D003               	goto	u4564
  6858  0009E4                     u4565:
  6859  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  6860  0009E6  90D8               	bcf	status,0,c
  6861  0009E8  360A               	rlcf	??_LightLed+1,f,c
  6862  0009EA                     u4564:
  6863  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  6864  0009EC  2E09               	decfsz	??_LightLed,f,c
  6865  0009EE  D7FA               	goto	u4565
  6866  0009F0  1C0A               	comf	??_LightLed+1,w,c
  6867  0009F2  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6868  0009F4  500D               	movf	LightLed@ststusIndex,w,c
  6869  0009F6  0F90               	addlw	low _ledStatuses
  6870  0009F8  6ED9               	movwf	fsr2l,c
  6871  0009FA  6ADA               	clrf	fsr2h,c
  6872  0009FC  500B               	movf	??_LightLed+2,w,c
  6873  0009FE  16DF               	andwf	indf2,f,c
  6874                           
  6875                           ;main.c: 317: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6876  000A00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6877  000A04  2A09               	incf	??_LightLed,f,c
  6878  000A06  0E01               	movlw	1
  6879  000A08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6880  000A0A  2A09               	incf	??_LightLed,f,c
  6881  000A0C  D003               	goto	u4574
  6882  000A0E                     u4575:
  6883  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  6884  000A10  90D8               	bcf	status,0,c
  6885  000A12  360A               	rlcf	??_LightLed+1,f,c
  6886  000A14                     u4574:
  6887  000A14  FFFF               	dw	65535	; assembler added errata NOP
  6888  000A16  2E09               	decfsz	??_LightLed,f,c
  6889  000A18  D7FA               	goto	u4575
  6890  000A1A  1C0A               	comf	??_LightLed+1,w,c
  6891  000A1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6892  000A1E  500D               	movf	LightLed@ststusIndex,w,c
  6893  000A20  0F80               	addlw	low _ledBlink
  6894  000A22  6ED9               	movwf	fsr2l,c
  6895  000A24  6ADA               	clrf	fsr2h,c
  6896  000A26  500B               	movf	??_LightLed+2,w,c
  6897  000A28  16DF               	andwf	indf2,f,c
  6898                           
  6899                           ;main.c: 318: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6900  000A2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6901  000A2E  0E01               	movlw	1
  6902  000A30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6903  000A32  2A09               	incf	??_LightLed,f,c
  6904  000A34  D003               	goto	u4584
  6905  000A36                     u4585:
  6906  000A36  FFFF               	dw	65535	; assembler added errata NOP
  6907  000A38  90D8               	bcf	status,0,c
  6908  000A3A  360A               	rlcf	??_LightLed+1,f,c
  6909  000A3C                     u4584:
  6910  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  6911  000A3E  2E09               	decfsz	??_LightLed,f,c
  6912  000A40  D7FA               	goto	u4585
  6913  000A42  D05F               	goto	L8
  6914  000A44                     l5476:
  6915                           
  6916                           ;main.c: 321: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6917  000A44  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6918  000A48  2A09               	incf	??_LightLed,f,c
  6919  000A4A  0E01               	movlw	1
  6920  000A4C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6921  000A4E  2A09               	incf	??_LightLed,f,c
  6922  000A50  D003               	goto	u4594
  6923  000A52                     u4595:
  6924  000A52  FFFF               	dw	65535	; assembler added errata NOP
  6925  000A54  90D8               	bcf	status,0,c
  6926  000A56  360A               	rlcf	??_LightLed+1,f,c
  6927  000A58                     u4594:
  6928  000A58  FFFF               	dw	65535	; assembler added errata NOP
  6929  000A5A  2E09               	decfsz	??_LightLed,f,c
  6930  000A5C  D7FA               	goto	u4595
  6931  000A5E  500D               	movf	LightLed@ststusIndex,w,c
  6932  000A60  0F90               	addlw	low _ledStatuses
  6933  000A62  6ED9               	movwf	fsr2l,c
  6934  000A64  6ADA               	clrf	fsr2h,c
  6935  000A66  500A               	movf	??_LightLed+1,w,c
  6936  000A68  12DF               	iorwf	indf2,f,c
  6937                           
  6938                           ;main.c: 322: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6939  000A6A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6940  000A6E  0E01               	movlw	1
  6941  000A70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6942  000A72  2A09               	incf	??_LightLed,f,c
  6943  000A74  D003               	goto	u4604
  6944  000A76                     u4605:
  6945  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6946  000A78  90D8               	bcf	status,0,c
  6947  000A7A  360A               	rlcf	??_LightLed+1,f,c
  6948  000A7C                     u4604:
  6949  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  6950  000A7E  2E09               	decfsz	??_LightLed,f,c
  6951  000A80  D7FA               	goto	u4605
  6952  000A82  1C0A               	comf	??_LightLed+1,w,c
  6953  000A84  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6954  000A86  500D               	movf	LightLed@ststusIndex,w,c
  6955  000A88  0F90               	addlw	low _ledStatuses
  6956  000A8A  6ED9               	movwf	fsr2l,c
  6957  000A8C  6ADA               	clrf	fsr2h,c
  6958  000A8E  500B               	movf	??_LightLed+2,w,c
  6959  000A90  16DF               	andwf	indf2,f,c
  6960                           
  6961                           ;main.c: 323: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6962  000A92  5008               	movf	LightLed@blink,w,c
  6963  000A94  E014               	bz	l5482
  6964  000A96  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6965  000A9A  2A09               	incf	??_LightLed,f,c
  6966  000A9C  0E01               	movlw	1
  6967  000A9E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6968  000AA0  2A09               	incf	??_LightLed,f,c
  6969  000AA2  D003               	goto	u4624
  6970  000AA4                     u4625:
  6971  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  6972  000AA6  90D8               	bcf	status,0,c
  6973  000AA8  360A               	rlcf	??_LightLed+1,f,c
  6974  000AAA                     u4624:
  6975  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  6976  000AAC  2E09               	decfsz	??_LightLed,f,c
  6977  000AAE  D7FA               	goto	u4625
  6978  000AB0  500D               	movf	LightLed@ststusIndex,w,c
  6979  000AB2  0F80               	addlw	low _ledBlink
  6980  000AB4  6ED9               	movwf	fsr2l,c
  6981  000AB6  6ADA               	clrf	fsr2h,c
  6982  000AB8  500A               	movf	??_LightLed+1,w,c
  6983  000ABA  12DF               	iorwf	indf2,f,c
  6984  000ABC  D015               	goto	l261
  6985  000ABE                     l5482:
  6986  000ABE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6987  000AC2  2A09               	incf	??_LightLed,f,c
  6988  000AC4  0E01               	movlw	1
  6989  000AC6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6990  000AC8  2A09               	incf	??_LightLed,f,c
  6991  000ACA  D003               	goto	u4634
  6992  000ACC                     u4635:
  6993  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  6994  000ACE  90D8               	bcf	status,0,c
  6995  000AD0  360A               	rlcf	??_LightLed+1,f,c
  6996  000AD2                     u4634:
  6997  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  6998  000AD4  2E09               	decfsz	??_LightLed,f,c
  6999  000AD6  D7FA               	goto	u4635
  7000  000AD8  1C0A               	comf	??_LightLed+1,w,c
  7001  000ADA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7002  000ADC  500D               	movf	LightLed@ststusIndex,w,c
  7003  000ADE  0F80               	addlw	low _ledBlink
  7004  000AE0  6ED9               	movwf	fsr2l,c
  7005  000AE2  6ADA               	clrf	fsr2h,c
  7006  000AE4  500B               	movf	??_LightLed+2,w,c
  7007  000AE6  16DF               	andwf	indf2,f,c
  7008  000AE8                     l261:
  7009  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  7010                           
  7011                           ;main.c: 324: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7012  000AEA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7013  000AEE  0E01               	movlw	1
  7014  000AF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7015  000AF2  2A09               	incf	??_LightLed,f,c
  7016  000AF4  D003               	goto	u4644
  7017  000AF6                     u4645:
  7018  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  7019  000AF8  90D8               	bcf	status,0,c
  7020  000AFA  360A               	rlcf	??_LightLed+1,f,c
  7021  000AFC                     u4644:
  7022  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  7023  000AFE  2E09               	decfsz	??_LightLed,f,c
  7024  000B00  D7FA               	goto	u4645
  7025  000B02                     L8:
  7026  000B02  FFFF               	dw	65535	; assembler added errata NOP
  7027  000B04  1C0A               	comf	??_LightLed+1,w,c
  7028  000B06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7029  000B08  500D               	movf	LightLed@ststusIndex,w,c
  7030  000B0A  0F80               	addlw	low _ledBlink
  7031  000B0C  6ED9               	movwf	fsr2l,c
  7032  000B0E  6ADA               	clrf	fsr2h,c
  7033  000B10  500B               	movf	??_LightLed+2,w,c
  7034  000B12  16DF               	andwf	indf2,f,c
  7035                           
  7036                           ;main.c: 325: break;
  7037  000B14  D0AB               	goto	l253
  7038  000B16                     l5484:
  7039                           
  7040                           ;main.c: 327: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7041  000B16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7042  000B1A  2A09               	incf	??_LightLed,f,c
  7043  000B1C  0E01               	movlw	1
  7044  000B1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7045  000B20  2A09               	incf	??_LightLed,f,c
  7046  000B22  D003               	goto	u4654
  7047  000B24                     u4655:
  7048  000B24  FFFF               	dw	65535	; assembler added errata NOP
  7049  000B26  90D8               	bcf	status,0,c
  7050  000B28  360A               	rlcf	??_LightLed+1,f,c
  7051  000B2A                     u4654:
  7052  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  7053  000B2C  2E09               	decfsz	??_LightLed,f,c
  7054  000B2E  D7FA               	goto	u4655
  7055  000B30  1C0A               	comf	??_LightLed+1,w,c
  7056  000B32  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7057  000B34  500D               	movf	LightLed@ststusIndex,w,c
  7058  000B36  0F90               	addlw	low _ledStatuses
  7059  000B38  6ED9               	movwf	fsr2l,c
  7060  000B3A  6ADA               	clrf	fsr2h,c
  7061  000B3C  500B               	movf	??_LightLed+2,w,c
  7062  000B3E  16DF               	andwf	indf2,f,c
  7063                           
  7064                           ;main.c: 328: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7065  000B40  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7066  000B44  0E01               	movlw	1
  7067  000B46  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7068  000B48  2A09               	incf	??_LightLed,f,c
  7069  000B4A  D003               	goto	u4664
  7070  000B4C                     u4665:
  7071  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  7072  000B4E  90D8               	bcf	status,0,c
  7073  000B50  360A               	rlcf	??_LightLed+1,f,c
  7074  000B52                     u4664:
  7075  000B52  FFFF               	dw	65535	; assembler added errata NOP
  7076  000B54  2E09               	decfsz	??_LightLed,f,c
  7077  000B56  D7FA               	goto	u4665
  7078  000B58  500D               	movf	LightLed@ststusIndex,w,c
  7079  000B5A  0F90               	addlw	low _ledStatuses
  7080  000B5C  6ED9               	movwf	fsr2l,c
  7081  000B5E  6ADA               	clrf	fsr2h,c
  7082  000B60  500A               	movf	??_LightLed+1,w,c
  7083  000B62  12DF               	iorwf	indf2,f,c
  7084                           
  7085                           ;main.c: 329: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7086  000B64  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7087  000B68  2A09               	incf	??_LightLed,f,c
  7088  000B6A  0E01               	movlw	1
  7089  000B6C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7090  000B6E  2A09               	incf	??_LightLed,f,c
  7091  000B70  D003               	goto	u4674
  7092  000B72                     u4675:
  7093  000B72  FFFF               	dw	65535	; assembler added errata NOP
  7094  000B74  90D8               	bcf	status,0,c
  7095  000B76  360A               	rlcf	??_LightLed+1,f,c
  7096  000B78                     u4674:
  7097  000B78  FFFF               	dw	65535	; assembler added errata NOP
  7098  000B7A  2E09               	decfsz	??_LightLed,f,c
  7099  000B7C  D7FA               	goto	u4675
  7100  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  7101  000B80  1C0A               	comf	??_LightLed+1,w,c
  7102  000B82  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7103  000B84  500D               	movf	LightLed@ststusIndex,w,c
  7104  000B86  0F80               	addlw	low _ledBlink
  7105  000B88  6ED9               	movwf	fsr2l,c
  7106  000B8A  6ADA               	clrf	fsr2h,c
  7107  000B8C  500B               	movf	??_LightLed+2,w,c
  7108  000B8E  16DF               	andwf	indf2,f,c
  7109                           
  7110                           ;main.c: 330: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7111  000B90  5008               	movf	LightLed@blink,w,c
  7112  000B92  E0AA               	bz	l261
  7113  000B94                     l5488:
  7114  000B94  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7115  000B98  0E01               	movlw	1
  7116  000B9A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7117  000B9C  2A09               	incf	??_LightLed,f,c
  7118  000B9E  D003               	goto	u4694
  7119  000BA0                     u4695:
  7120  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7121  000BA2  90D8               	bcf	status,0,c
  7122  000BA4  360A               	rlcf	??_LightLed+1,f,c
  7123  000BA6                     u4694:
  7124  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  7125  000BA8  2E09               	decfsz	??_LightLed,f,c
  7126  000BAA  D7FA               	goto	u4695
  7127  000BAC  500D               	movf	LightLed@ststusIndex,w,c
  7128  000BAE  0F80               	addlw	low _ledBlink
  7129  000BB0  6ED9               	movwf	fsr2l,c
  7130  000BB2  6ADA               	clrf	fsr2h,c
  7131  000BB4  500A               	movf	??_LightLed+1,w,c
  7132  000BB6  12DF               	iorwf	indf2,f,c
  7133  000BB8  D059               	goto	l253
  7134  000BBA                     l5492:
  7135                           
  7136                           ;main.c: 333: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7137  000BBA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7138  000BBE  2A09               	incf	??_LightLed,f,c
  7139  000BC0  0E01               	movlw	1
  7140  000BC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7141  000BC4  2A09               	incf	??_LightLed,f,c
  7142  000BC6  D003               	goto	u4704
  7143  000BC8                     u4705:
  7144  000BC8  FFFF               	dw	65535	; assembler added errata NOP
  7145  000BCA  90D8               	bcf	status,0,c
  7146  000BCC  360A               	rlcf	??_LightLed+1,f,c
  7147  000BCE                     u4704:
  7148  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  7149  000BD0  2E09               	decfsz	??_LightLed,f,c
  7150  000BD2  D7FA               	goto	u4705
  7151  000BD4  500D               	movf	LightLed@ststusIndex,w,c
  7152  000BD6  0F90               	addlw	low _ledStatuses
  7153  000BD8  6ED9               	movwf	fsr2l,c
  7154  000BDA  6ADA               	clrf	fsr2h,c
  7155  000BDC  500A               	movf	??_LightLed+1,w,c
  7156  000BDE  12DF               	iorwf	indf2,f,c
  7157                           
  7158                           ;main.c: 334: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7159  000BE0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7160  000BE4  0E01               	movlw	1
  7161  000BE6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7162  000BE8  2A09               	incf	??_LightLed,f,c
  7163  000BEA  D003               	goto	u4714
  7164  000BEC                     u4715:
  7165  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  7166  000BEE  90D8               	bcf	status,0,c
  7167  000BF0  360A               	rlcf	??_LightLed+1,f,c
  7168  000BF2                     u4714:
  7169  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  7170  000BF4  2E09               	decfsz	??_LightLed,f,c
  7171  000BF6  D7FA               	goto	u4715
  7172  000BF8  500D               	movf	LightLed@ststusIndex,w,c
  7173  000BFA  0F90               	addlw	low _ledStatuses
  7174  000BFC  6ED9               	movwf	fsr2l,c
  7175  000BFE  6ADA               	clrf	fsr2h,c
  7176  000C00  500A               	movf	??_LightLed+1,w,c
  7177  000C02  12DF               	iorwf	indf2,f,c
  7178                           
  7179                           ;main.c: 335: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7180  000C04  5008               	movf	LightLed@blink,w,c
  7181  000C06  E014               	bz	l5498
  7182  000C08  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7183  000C0C  2A09               	incf	??_LightLed,f,c
  7184  000C0E  0E01               	movlw	1
  7185  000C10  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7186  000C12  2A09               	incf	??_LightLed,f,c
  7187  000C14  D003               	goto	u4734
  7188  000C16                     u4735:
  7189  000C16  FFFF               	dw	65535	; assembler added errata NOP
  7190  000C18  90D8               	bcf	status,0,c
  7191  000C1A  360A               	rlcf	??_LightLed+1,f,c
  7192  000C1C                     u4734:
  7193  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  7194  000C1E  2E09               	decfsz	??_LightLed,f,c
  7195  000C20  D7FA               	goto	u4735
  7196  000C22  500D               	movf	LightLed@ststusIndex,w,c
  7197  000C24  0F80               	addlw	low _ledBlink
  7198  000C26  6ED9               	movwf	fsr2l,c
  7199  000C28  6ADA               	clrf	fsr2h,c
  7200  000C2A  500A               	movf	??_LightLed+1,w,c
  7201  000C2C  12DF               	iorwf	indf2,f,c
  7202  000C2E  D00E               	goto	l5500
  7203  000C30                     l5498:
  7204  000C30  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7205  000C34  2A09               	incf	??_LightLed,f,c
  7206  000C36  0E01               	movlw	1
  7207  000C38  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7208  000C3A  2A09               	incf	??_LightLed,f,c
  7209  000C3C  D003               	goto	u4744
  7210  000C3E                     u4745:
  7211  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  7212  000C40  90D8               	bcf	status,0,c
  7213  000C42  360A               	rlcf	??_LightLed+1,f,c
  7214  000C44                     u4744:
  7215  000C44  FFFF               	dw	65535	; assembler added errata NOP
  7216  000C46  2E09               	decfsz	??_LightLed,f,c
  7217  000C48  D7FA               	goto	u4745
  7218  000C4A  D799               	goto	L9
  7219  000C4C                     l5500:
  7220  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  7221                           
  7222                           ;main.c: 336: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7223  000C4E  5008               	movf	LightLed@blink,w,c
  7224  000C50  E1A1               	bnz	l5488
  7225  000C52  D74A               	goto	l261
  7226  000C54                     l5508:
  7227  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7228  000C56  5007               	movf	LightLed@ledState,w,c
  7229                           
  7230                           ; Switch size 1, requested type "speed"
  7231                           ; Number of cases is 4, Range of values is 0 to 3
  7232                           ; switch strategies available:
  7233                           ; Name         Instructions Cycles
  7234                           ; simple_byte           13     7 (average)
  7235                           ;	Chosen strategy is simple_byte
  7236  000C58  E101 D6A9          	bz	l5474
  7237  000C5C  0A01               	xorlw	1	; case 1
  7238  000C5E  E101 D6F1          	bz	l5476
  7239  000C62  0A03               	xorlw	3	; case 2
  7240  000C64  E101 D757          	bz	l5484
  7241  000C68  0A01               	xorlw	1	; case 3
  7242  000C6A  E0A7               	bz	l5492
  7243  000C6C                     l253:
  7244  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  7245  000C6E  0012               	return		;funcret
  7246  000C70  FFFF               	dw	65535	; errata NOP
  7247  000C72                     __end_of_LightLed:
  7248                           	opt stack 0
  7249                           tblptru	equ	0xFF8
  7250                           tblptrh	equ	0xFF7
  7251                           tblptrl	equ	0xFF6
  7252                           tablat	equ	0xFF5
  7253                           prodh	equ	0xFF4
  7254                           prodl	equ	0xFF3
  7255                           intcon	equ	0xFF2
  7256                           postinc0	equ	0xFEE
  7257                           wreg	equ	0xFE8
  7258                           postdec1	equ	0xFE5
  7259                           fsr1h	equ	0xFE2
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           postinc2	equ	0xFDE
  7263                           postdec2	equ	0xFDD
  7264                           plusw2	equ	0xFDB
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8
  7268                           
  7269 ;; *************** function _ModbusPoll *****************
  7270 ;; Defined at:
  7271 ;;		line 404 in file "ModbusRtu.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  7274 ;;  coils           1   43[COMRAM] PTR unsigned short 
  7275 ;;		 -> _MODBUSCoils(2), 
  7276 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  7277 ;;		 -> _MODBUSInputRegs(30), 
  7278 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  7279 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  7280 ;;		 -> _MODBUSHoldingRegs(30), 
  7281 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  u8exception     1   52[COMRAM] unsigned char 
  7284 ;;  i8state         1   51[COMRAM] unsigned char 
  7285 ;;  u8current       1   50[COMRAM] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      char 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : E/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         9       0       0       0       0       0       0
  7296 ;;      Locals:         3       0       0       0       0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0
  7298 ;;      Totals:        12       0       0       0       0       0       0
  7299 ;;Total ram usage:       12 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    5
  7302 ;; This function calls:
  7303 ;;		_ModbusBuildException
  7304 ;;		_ModbusGetRxBuffer
  7305 ;;		_ModbusProcess_FC1
  7306 ;;		_ModbusProcess_FC15
  7307 ;;		_ModbusProcess_FC16
  7308 ;;		_ModbusProcess_FC17
  7309 ;;		_ModbusProcess_FC21
  7310 ;;		_ModbusProcess_FC3
  7311 ;;		_ModbusProcess_FC43
  7312 ;;		_ModbusProcess_FC5
  7313 ;;		_ModbusProcess_FC6
  7314 ;;		_ModbusProcess_FC7
  7315 ;;		_ModbusSendTxBuffer
  7316 ;;		_ModbusValidateRequest
  7317 ;;		_PortAvailable
  7318 ;;		_millis
  7319 ;; This function is called by:
  7320 ;;		_main
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text36
  7325  0012C0                     __ptext36:
  7326                           	opt stack 0
  7327  0012C0                     _ModbusPoll:
  7328                           	opt stack 25
  7329                           
  7330                           ;incstack = 0
  7331  0012C0  FFFF               	dw	65535
  7332                           
  7333                           ;ModbusRtu.c: 407: _lastCommand = MB_FC_NONE;
  7334  0012C2  0100               	movlb	0	; () banked
  7335  0012C4  6BDF               	clrf	__lastCommand& (0+255),b
  7336                           
  7337                           ;ModbusRtu.c: 411: _inputRegsCount = inputRegsCount;
  7338  0012C6  C02F  F0CD         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7339                           
  7340                           ;ModbusRtu.c: 412: _holdingRegsCount = holdingRegsCount;
  7341  0012CA  C032  F0CC         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;ModbusRtu.c: 417: uint8_t u8current = PortAvailable();
  7345  0012CE  EC6A  F016         	call	_PortAvailable	;wreg free
  7346  0012D2  6E33               	movwf	ModbusPoll@u8current,c
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;ModbusRtu.c: 421: if (u8current == 0) return 0;
  7350  0012D4  5033               	movf	ModbusPoll@u8current,w,c
  7351  0012D6  E103               	bnz	l6000
  7352  0012D8                     l5996:
  7353  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  7354  0012DA  0E00               	movlw	0
  7355  0012DC  D0A6               	goto	l654
  7356  0012DE                     l6000:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;ModbusRtu.c: 424: if (u8current != _u8lastRec)
  7360  0012DE  51D3               	movf	__u8lastRec& (0+255),w,b
  7361  0012E0  1833               	xorwf	ModbusPoll@u8current,w,c
  7362  0012E2  E012               	bz	l6010
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;ModbusRtu.c: 425: {
  7366                           ;ModbusRtu.c: 426: _u8lastRec = u8current;
  7367  0012E4  C033  F0D3         	movff	ModbusPoll@u8current,__u8lastRec
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;ModbusRtu.c: 427: _u32time = millis() + 5;
  7371  0012E8  0E05               	movlw	5
  7372  0012EA  ECCC  F015         	call	_millis	;wreg free
  7373  0012EE  2407               	addwf	?_millis,w,c
  7374  0012F0  0100               	movlb	0	; () banked
  7375  0012F2  6FA4               	movwf	__u32time& (0+255),b
  7376  0012F4  0E00               	movlw	0
  7377  0012F6  2008               	addwfc	?_millis+1,w,c
  7378  0012F8  6FA5               	movwf	(__u32time+1)& (0+255),b
  7379  0012FA  0E00               	movlw	0
  7380  0012FC  2009               	addwfc	?_millis+2,w,c
  7381  0012FE  6FA6               	movwf	(__u32time+2)& (0+255),b
  7382  001300  0E00               	movlw	0
  7383  001302  200A               	addwfc	?_millis+3,w,c
  7384  001304  6FA7               	movwf	(__u32time+3)& (0+255),b
  7385  001306  D7E8               	goto	l5996
  7386  001308                     l6010:
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;ModbusRtu.c: 429: }
  7390                           ;ModbusRtu.c: 430: if (millis() < _u32time)
  7391  001308  ECCC  F015         	call	_millis	;wreg free
  7392  00130C  0100               	movlb	0	; () banked
  7393  00130E  51A4               	movf	__u32time& (0+255),w,b
  7394  001310  5C07               	subwf	?_millis,w,c
  7395  001312  51A5               	movf	(__u32time+1)& (0+255),w,b
  7396  001314  5808               	subwfb	?_millis+1,w,c
  7397  001316  51A6               	movf	(__u32time+2)& (0+255),w,b
  7398  001318  5809               	subwfb	?_millis+2,w,c
  7399  00131A  51A7               	movf	(__u32time+3)& (0+255),w,b
  7400  00131C  580A               	subwfb	?_millis+3,w,c
  7401  00131E  E3DC               	bnc	l5996
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;ModbusRtu.c: 433: _u8lastRec = 0;
  7405  001320  6BD3               	clrf	__u8lastRec& (0+255),b
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;ModbusRtu.c: 435: _u8lastError = i8state;
  7409  001322  ECBC  F014         	call	_ModbusGetRxBuffer	;wreg free
  7410  001326  6E34               	movwf	ModbusPoll@i8state,c
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;ModbusRtu.c: 436: if (i8state < 4)
  7414  001328  0E04               	movlw	4
  7415  00132A  6034               	cpfslt	ModbusPoll@i8state,c
  7416  00132C  D003               	goto	l6024
  7417  00132E                     l6020:
  7418  00132E  FFFF               	dw	65535	; assembler added errata NOP
  7419                           
  7420                           ;ModbusRtu.c: 437: return i8state;
  7421  001330  5034               	movf	ModbusPoll@i8state,w,c
  7422  001332  D07B               	goto	l654
  7423  001334                     l6024:
  7424  001334  FFFF               	dw	65535	; assembler added errata NOP
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;ModbusRtu.c: 440: if (_au8Buffer[ ID ] != _u8id)
  7428  001336  51D2               	movf	__u8id& (0+255),w,b
  7429  001338  0101               	movlb	1	; () banked
  7430  00133A  1900               	xorwf	__au8Buffer& (0+255),w,b
  7431  00133C  E1CD               	bnz	l5996
  7432                           
  7433                           ; BSR set to: 1
  7434                           ;ModbusRtu.c: 444: uint8_t u8exception = ModbusValidateRequest();
  7435  00133E  EC72  F007         	call	_ModbusValidateRequest	;wreg free
  7436  001342  6E35               	movwf	ModbusPoll@u8exception,c
  7437                           
  7438                           ;ModbusRtu.c: 445: if (u8exception > 0)
  7439  001344  5035               	movf	ModbusPoll@u8exception,w,c
  7440  001346  E009               	bz	l6044
  7441                           
  7442                           ;ModbusRtu.c: 446: {
  7443                           ;ModbusRtu.c: 447: if (u8exception != NO_REPLY)
  7444  001348  2835               	incf	ModbusPoll@u8exception,w,c
  7445  00134A  E005               	bz	l6040
  7446                           
  7447                           ;ModbusRtu.c: 448: {
  7448                           ;ModbusRtu.c: 449: ModbusBuildException(u8exception);
  7449  00134C  5035               	movf	ModbusPoll@u8exception,w,c
  7450  00134E  ECF4  F015         	call	_ModbusBuildException
  7451                           
  7452                           ; BSR set to: 1
  7453                           ;ModbusRtu.c: 450: ModbusSendTxBuffer();
  7454  001352  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  7455  001356                     l6040:
  7456                           
  7457                           ;ModbusRtu.c: 453: return u8exception;
  7458  001356  5035               	movf	ModbusPoll@u8exception,w,c
  7459  001358  D068               	goto	l654
  7460  00135A                     l6044:
  7461                           
  7462                           ;ModbusRtu.c: 457: _u8lastError = 0;
  7463  00135A  ECCC  F015         	call	_millis	;wreg free
  7464                           
  7465                           ;ModbusRtu.c: 460: switch (_au8Buffer[ FUNC ])
  7466  00135E  D049               	goto	l6096
  7467  001360                     l6046:
  7468                           
  7469                           ; BSR set to: 1
  7470                           ;ModbusRtu.c: 463: return ModbusProcess_FC1(*coils);
  7471  001360  502C               	movf	ModbusPoll@coils,w,c
  7472  001362  6ED9               	movwf	fsr2l,c
  7473  001364  6ADA               	clrf	fsr2h,c
  7474  001366  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  7475  00136A  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  7476  00136E  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7477  001372  D05B               	goto	l654
  7478  001374                     l6050:
  7479                           
  7480                           ; BSR set to: 1
  7481                           ;ModbusRtu.c: 465: return ModbusProcess_FC1(discreteInputs);
  7482  001374  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7483  001378  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7484  00137C  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7485  001380  D054               	goto	l654
  7486  001382                     l6054:
  7487                           
  7488                           ; BSR set to: 1
  7489                           ;ModbusRtu.c: 467: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7490  001382  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7491  001386  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7492  00138A  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7493  00138E  EC19  F010         	call	_ModbusProcess_FC3	;wreg free
  7494  001392  D04B               	goto	l654
  7495  001394                     l6058:
  7496                           
  7497                           ; BSR set to: 1
  7498                           ;ModbusRtu.c: 469: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7499  001394  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7500  001398  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7501  00139C  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7502  0013A0  EC19  F010         	call	_ModbusProcess_FC3	;wreg free
  7503  0013A4  D042               	goto	l654
  7504  0013A6                     l6062:
  7505                           
  7506                           ; BSR set to: 1
  7507                           ;ModbusRtu.c: 471: return ModbusProcess_FC5(coils);
  7508  0013A6  502C               	movf	ModbusPoll@coils,w,c
  7509  0013A8  EC73  F011         	call	_ModbusProcess_FC5
  7510  0013AC  D03E               	goto	l654
  7511  0013AE                     l6066:
  7512                           
  7513                           ; BSR set to: 1
  7514                           ;ModbusRtu.c: 473: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7515  0013AE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7516  0013B2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7517  0013B6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7518  0013BA  EC5C  F013         	call	_ModbusProcess_FC6	;wreg free
  7519  0013BE  D035               	goto	l654
  7520  0013C0                     l6070:
  7521                           
  7522                           ; BSR set to: 1
  7523                           ;ModbusRtu.c: 475: return ModbusProcess_FC7();
  7524  0013C0  EC2E  F016         	call	_ModbusProcess_FC7	;wreg free
  7525  0013C4  D032               	goto	l654
  7526  0013C6                     l6074:
  7527                           
  7528                           ; BSR set to: 1
  7529                           ;ModbusRtu.c: 477: return ModbusProcess_FC15(coils);
  7530  0013C6  502C               	movf	ModbusPoll@coils,w,c
  7531  0013C8  EC7F  F00C         	call	_ModbusProcess_FC15
  7532  0013CC  D02E               	goto	l654
  7533  0013CE                     l6078:
  7534                           
  7535                           ; BSR set to: 1
  7536                           ;ModbusRtu.c: 479: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7537  0013CE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7538  0013D2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7539  0013D6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7540  0013DA  ECF3  F00E         	call	_ModbusProcess_FC16	;wreg free
  7541  0013DE  D025               	goto	l654
  7542  0013E0                     l6082:
  7543                           
  7544                           ; BSR set to: 1
  7545                           ;ModbusRtu.c: 481: return ModbusProcess_FC17();
  7546  0013E0  EC8F  F012         	call	_ModbusProcess_FC17	;wreg free
  7547  0013E4  D022               	goto	l654
  7548  0013E6                     l6086:
  7549                           
  7550                           ; BSR set to: 1
  7551                           ;ModbusRtu.c: 483: return ModbusProcess_FC21();
  7552  0013E6  ECCB  F010         	call	_ModbusProcess_FC21	;wreg free
  7553  0013EA  D01F               	goto	l654
  7554  0013EC                     l6090:
  7555                           
  7556                           ; BSR set to: 1
  7557                           ;ModbusRtu.c: 485: return ModbusProcess_FC43();
  7558  0013EC  EC18  F00A         	call	_ModbusProcess_FC43	;wreg free
  7559  0013F0  D01C               	goto	l654
  7560  0013F2                     l6096:
  7561  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  7562  0013F4  0101               	movlb	1	; () banked
  7563  0013F6  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7564                           
  7565                           ; Switch size 1, requested type "speed"
  7566                           ; Number of cases is 12, Range of values is 1 to 43
  7567                           ; switch strategies available:
  7568                           ; Name         Instructions Cycles
  7569                           ; simple_byte           37    19 (average)
  7570                           ;	Chosen strategy is simple_byte
  7571  0013F8  0A01               	xorlw	1	; case 1
  7572  0013FA  E0B2               	bz	l6046
  7573  0013FC  0A03               	xorlw	3	; case 2
  7574  0013FE  E0BA               	bz	l6050
  7575  001400  0A01               	xorlw	1	; case 3
  7576  001402  E0BF               	bz	l6054
  7577  001404  0A07               	xorlw	7	; case 4
  7578  001406  E0C6               	bz	l6058
  7579  001408  0A01               	xorlw	1	; case 5
  7580  00140A  E0CD               	bz	l6062
  7581  00140C  0A03               	xorlw	3	; case 6
  7582  00140E  E0CF               	bz	l6066
  7583  001410  0A01               	xorlw	1	; case 7
  7584  001412  E0D6               	bz	l6070
  7585  001414  0A08               	xorlw	8	; case 15
  7586  001416  E0D7               	bz	l6074
  7587  001418  0A1F               	xorlw	31	; case 16
  7588  00141A  E0D9               	bz	l6078
  7589  00141C  0A01               	xorlw	1	; case 17
  7590  00141E  E0E0               	bz	l6082
  7591  001420  0A04               	xorlw	4	; case 21
  7592  001422  E0E1               	bz	l6086
  7593  001424  0A3E               	xorlw	62	; case 43
  7594  001426  E0E2               	bz	l6090
  7595  001428  D782               	goto	l6020
  7596  00142A                     l654:
  7597  00142A  FFFF               	dw	65535	; assembler added errata NOP
  7598  00142C  0012               	return		;funcret
  7599  00142E  FFFF               	dw	65535	; errata NOP
  7600  001430                     __end_of_ModbusPoll:
  7601                           	opt stack 0
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           postinc0	equ	0xFEE
  7610                           wreg	equ	0xFE8
  7611                           postdec1	equ	0xFE5
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           plusw2	equ	0xFDB
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function _ModbusValidateRequest *****************
  7623 ;; Defined at:
  7624 ;;		line 691 in file "ModbusRtu.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7629 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7630 ;;  readDevId       1   37[COMRAM] unsigned char 
  7631 ;;  i               1   36[COMRAM] unsigned char 
  7632 ;;  u16regs         2   39[COMRAM] unsigned short 
  7633 ;;  u16count        2   34[COMRAM] unsigned short 
  7634 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7635 ;;  u8regs          1   38[COMRAM] unsigned char 
  7636 ;;  isSupported     1   33[COMRAM] unsigned char 
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  1    wreg      unsigned char 
  7639 ;; Registers used:
  7640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : F/1
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7646 ;;      Params:         0       0       0       0       0       0       0
  7647 ;;      Locals:        18       0       0       0       0       0       0
  7648 ;;      Temps:          4       0       0       0       0       0       0
  7649 ;;      Totals:        22       0       0       0       0       0       0
  7650 ;;Total ram usage:       22 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    3
  7653 ;; This function calls:
  7654 ;;		_ModbusCalcCRC
  7655 ;; This function is called by:
  7656 ;;		_ModbusPoll
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text37
  7661  000EE4                     __ptext37:
  7662                           	opt stack 0
  7663  000EE4                     _ModbusValidateRequest:
  7664                           	opt stack 26
  7665                           
  7666                           ;incstack = 0
  7667  000EE4  FFFF               	dw	65535
  7668                           
  7669                           ; BSR set to: 1
  7670                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  7671                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7672                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  7673  000EE6  0EFE               	movlw	low (__au8Buffer+65534)
  7674  000EE8  2472               	addwf	__u8BufferSize,w,c
  7675  000EEA  6ED9               	movwf	fsr2l,c
  7676  000EEC  6ADA               	clrf	fsr2h,c
  7677  000EEE  0E00               	movlw	high (__au8Buffer+65534)
  7678  000EF0  22DA               	addwfc	fsr2h,f,c
  7679  000EF2  50DF               	movf	indf2,w,c
  7680  000EF4  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7681  000EF6  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7682  000EF8  0EFF               	movlw	low (__au8Buffer+65535)
  7683  000EFA  2472               	addwf	__u8BufferSize,w,c
  7684  000EFC  6ED9               	movwf	fsr2l,c
  7685  000EFE  6ADA               	clrf	fsr2h,c
  7686  000F00  0E00               	movlw	high (__au8Buffer+65535)
  7687  000F02  22DA               	addwfc	fsr2h,f,c
  7688  000F04  50DF               	movf	indf2,w,c
  7689  000F06  1014               	iorwf	??_ModbusValidateRequest,w,c
  7690  000F08  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7691  000F0A  5015               	movf	??_ModbusValidateRequest+1,w,c
  7692  000F0C  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7693                           
  7694                           ; BSR set to: 1
  7695                           ;ModbusRtu.c: 698: {
  7696                           ;ModbusRtu.c: 699: _u16errCnt++;
  7697  000F0E  5072               	movf	__u8BufferSize,w,c
  7698  000F10  0FFE               	addlw	254
  7699  000F12  EC55  F012         	call	_ModbusCalcCRC
  7700  000F16  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7701  000F18  1807               	xorwf	?_ModbusCalcCRC,w,c
  7702  000F1A  E103               	bnz	u2940
  7703  000F1C  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7704  000F1E  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7705  000F20  E002               	bz	l705
  7706  000F22                     u2940:
  7707                           
  7708                           ;ModbusRtu.c: 700: return NO_REPLY;
  7709  000F22  0EFF               	movlw	255
  7710  000F24  D10C               	goto	l706
  7711  000F26                     l705:
  7712                           
  7713                           ;ModbusRtu.c: 701: }
  7714                           ;ModbusRtu.c: 704: bool isSupported = 0;
  7715  000F26  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7716                           
  7717                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7718  000F28  6A25               	clrf	ModbusValidateRequest@i,c
  7719  000F2A                     l3964:
  7720  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  7721                           
  7722                           ;ModbusRtu.c: 706: {
  7723                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  7724  000F2C  5025               	movf	ModbusValidateRequest@i,w,c
  7725  000F2E  0F01               	addlw	low _fctsupported
  7726  000F30  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7727  000F32  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7728  000F36                     	if	1	;There is more than 1 active tblptr byte
  7729  000F36  0E06               	movlw	high __smallconst
  7730  000F38  6EF7               	movwf	tblptrh,c
  7731  000F3A                     	endif
  7732  000F3A                     	if	0	;tblptru may be non-zero
  7733  000F3A                     	endif
  7734  000F3A                     	if	0	;tblptru may be non-zero
  7735  000F3A                     	endif
  7736  000F3A  0008               	tblrd		*
  7737  000F3C  FFFF               	dw	65535	; errata NOP
  7738  000F3E  50F5               	movf	tablat,w,c
  7739  000F40  0101               	movlb	1	; () banked
  7740  000F42  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7741  000F44  E103               	bnz	l3968
  7742                           
  7743                           ; BSR set to: 1
  7744                           ;ModbusRtu.c: 708: {
  7745                           ;ModbusRtu.c: 709: isSupported = 1;
  7746  000F46  0E01               	movlw	1
  7747  000F48  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7748                           
  7749                           ;ModbusRtu.c: 710: break;
  7750  000F4A  D004               	goto	l3972
  7751  000F4C                     l3968:
  7752                           
  7753                           ; BSR set to: 1
  7754  000F4C  2A25               	incf	ModbusValidateRequest@i,f,c
  7755                           
  7756                           ; BSR set to: 1
  7757  000F4E  0E0B               	movlw	11
  7758  000F50  6425               	cpfsgt	ModbusValidateRequest@i,c
  7759  000F52  D7EB               	goto	l3964
  7760  000F54                     l3972:
  7761  000F54  FFFF               	dw	65535	; assembler added errata NOP
  7762                           
  7763                           ; BSR set to: 1
  7764                           ;ModbusRtu.c: 714: {
  7765                           ;ModbusRtu.c: 715: _u16errCnt++;
  7766  000F56  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7767  000F58  E102               	bnz	l710
  7768  000F5A                     l3974:
  7769                           
  7770                           ; BSR set to: 1
  7771                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  7772  000F5A  0E01               	movlw	1
  7773  000F5C  D0F0               	goto	l706
  7774  000F5E                     l710:
  7775                           
  7776                           ; BSR set to: 1
  7777                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  7778  000F5E  6A23               	clrf	ModbusValidateRequest@u16count,c
  7779  000F60  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7780                           
  7781                           ;ModbusRtu.c: 722: uint8_t u8regs;
  7782                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  7783  000F62  D0CA               	goto	l4090
  7784  000F64                     l3978:
  7785                           
  7786                           ; BSR set to: 1
  7787                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  7788                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  7789                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7790  000F64  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7791  000F66  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7792  000F68  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7793  000F6A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7794  000F6C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7795                           
  7796                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7797  000F70  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7798  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7799  000F74  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7800  000F76  6E23               	movwf	ModbusValidateRequest@u16count,c
  7801  000F78  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7802                           
  7803                           ; BSR set to: 1
  7804                           ;ModbusRtu.c: 731: if (u16count > 16)
  7805  000F7C  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7806  000F7E  E103               	bnz	u2980
  7807  000F80  0E11               	movlw	17
  7808  000F82  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7809  000F84  E302               	bnc	l3986
  7810  000F86                     u2980:
  7811  000F86                     l3982:
  7812                           
  7813                           ; BSR set to: 1
  7814                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  7815  000F86  0E03               	movlw	3
  7816  000F88  D0DA               	goto	l706
  7817  000F8A                     l3986:
  7818                           
  7819                           ; BSR set to: 1
  7820                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  7821  000F8A  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7822  000F8C  E110               	bnz	l3990
  7823  000F8E  0E10               	movlw	16
  7824  000F90  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7825  000F92  E20D               	bc	l3990
  7826                           
  7827                           ; BSR set to: 1
  7828  000F94  5023               	movf	ModbusValidateRequest@u16count,w,c
  7829  000F96  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7830  000F98  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7831  000F9A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7832  000F9C  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7833  000F9E  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7834  000FA0  5015               	movf	??_ModbusValidateRequest+1,w,c
  7835  000FA2  E105               	bnz	u3000
  7836  000FA4  0E11               	movlw	17
  7837  000FA6  5C14               	subwf	??_ModbusValidateRequest,w,c
  7838  000FA8                     L10:
  7839  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  7840  000FAA  E201 D0C4          	bnc	l719
  7841  000FAE                     u3000:
  7842  000FAE                     l3990:
  7843  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  7844                           
  7845                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  7846  000FB0  0E02               	movlw	2
  7847  000FB2  D0C5               	goto	l706
  7848  000FB4                     l3994:
  7849                           
  7850                           ; BSR set to: 1
  7851                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7852  000FB4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7853  000FB6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7854  000FB8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7855  000FBA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7856  000FBC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7857                           
  7858                           ; BSR set to: 1
  7859                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  7860  000FC0  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7861                           
  7862                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  7863  000FC4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7864  000FC6  E002               	bz	l4004
  7865                           
  7866                           ; BSR set to: 1
  7867  000FC8  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7868  000FCA  E1DD               	bnz	l3982
  7869  000FCC                     l4004:
  7870                           
  7871                           ; BSR set to: 1
  7872                           ;ModbusRtu.c: 741: if (u16regs > 15)
  7873  000FCC  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7874  000FCE  E1EF               	bnz	l3990
  7875  000FD0  0E10               	movlw	16
  7876  000FD2  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7877  000FD4  D7E9               	goto	L10
  7878  000FD6                     l4010:
  7879                           
  7880                           ; BSR set to: 1
  7881                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7882  000FD6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7883  000FD8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7884  000FDA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7885  000FDC  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7886  000FDE  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7887  000FE2                     l4012:
  7888  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  7889                           
  7890                           ; BSR set to: 1
  7891                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7892  000FE4  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7893                           
  7894                           ; BSR set to: 1
  7895                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7896  000FE8  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7897  000FEA  0100               	movlb	0	; () banked
  7898  000FEC  5DCC               	subwf	__holdingRegsCount& (0+255),w,b
  7899  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  7900  000FF0  E3DE               	bnc	l3990
  7901  000FF2  D0A1               	goto	l719
  7902  000FF4                     l4020:
  7903                           
  7904                           ; BSR set to: 1
  7905                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7906  000FF4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7907  000FF6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7908  000FF8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7909  000FFA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7910  000FFC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7911                           
  7912                           ; BSR set to: 1
  7913                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7914  001000  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7915  001002  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7916  001006  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7917  001008  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7918  00100C  6A14               	clrf	??_ModbusValidateRequest,c
  7919  00100E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7920  001010  5014               	movf	??_ModbusValidateRequest,w,c
  7921  001012  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7922  001014  5015               	movf	??_ModbusValidateRequest+1,w,c
  7923  001016  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7924                           
  7925                           ; BSR set to: 1
  7926                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  7927  001018  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7928                           
  7929                           ; BSR set to: 1
  7930                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  7931  00101C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7932  00101E  0100               	movlb	0	; () banked
  7933  001020  5DCD               	subwf	__inputRegsCount& (0+255),w,b
  7934  001022  D7E5               	goto	L11
  7935  001024                     l4032:
  7936                           
  7937                           ; BSR set to: 1
  7938                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7939                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7940  001024  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7941  001026  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7942  001028  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7943  00102A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7944  00102C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7945                           
  7946                           ; BSR set to: 1
  7947                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7948  001030  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7949  001032  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7950  001036  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7951  001038  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7952  00103C  6A14               	clrf	??_ModbusValidateRequest,c
  7953  00103E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7954  001040  5014               	movf	??_ModbusValidateRequest,w,c
  7955  001042  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7956  001044  5015               	movf	??_ModbusValidateRequest+1,w,c
  7957  001046  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7958  001048  D7CC               	goto	l4012
  7959  00104A                     l4044:
  7960                           
  7961                           ; BSR set to: 1
  7962                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7963  00104A  0E06               	movlw	6
  7964  00104C  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7965  00104E  E1AF               	bnz	l3990
  7966                           
  7967                           ; BSR set to: 1
  7968                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7969  001050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7970  001052  E1AD               	bnz	l3990
  7971                           
  7972                           ; BSR set to: 1
  7973  001054  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7974  001056  E1AB               	bnz	l3990
  7975                           
  7976                           ; BSR set to: 1
  7977                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7978  001058  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7979  00105A  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7980  00105E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7981  001060  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7982  001064  6A14               	clrf	??_ModbusValidateRequest,c
  7983  001066  1214               	iorwf	??_ModbusValidateRequest,f,c
  7984  001068  0E00               	movlw	0
  7985  00106A  90D8               	bcf	status,0,c
  7986  00106C  3614               	rlcf	??_ModbusValidateRequest,f,c
  7987  00106E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7988  001070  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7989  001074  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7990  001078  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7991  00107A  0EFF               	movlw	-1
  7992  00107C  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7993  00107E  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7994                           
  7995                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7996  001080  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7997  001082  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7998  001086  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7999  001088  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8000  00108C  6A14               	clrf	??_ModbusValidateRequest,c
  8001  00108E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8002  001090  0E00               	movlw	0
  8003  001092  90D8               	bcf	status,0,c
  8004  001094  3614               	rlcf	??_ModbusValidateRequest,f,c
  8005  001096  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  8006  001098  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  8007  00109C  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  8008  0010A0  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  8009  0010A2  0EFF               	movlw	-1
  8010  0010A4  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  8011  0010A6  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  8012                           
  8013                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  8014  0010A8  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  8015  0010AA  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  8016  0010AC  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8017  0010AE  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  8018  0010B0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  8019  0010B2  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  8020  0010B4  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  8021  0010B6  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  8022  0010B8  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  8023  0010BA  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  8024  0010BC  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  8025  0010BE  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  8026  0010C0  5017               	movf	??_ModbusValidateRequest+3,w,c
  8027  0010C2  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  8028  0010C4  E102               	bnz	u3100
  8029  0010C6  0415               	decf	??_ModbusValidateRequest+1,w,c
  8030  0010C8  D76F               	goto	L10
  8031  0010CA                     u3100:
  8032  0010CA  D771               	goto	l3990
  8033  0010CC                     l4064:
  8034                           
  8035                           ; BSR set to: 1
  8036                           ;ModbusRtu.c: 781: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  8037  0010CC  0E0E               	movlw	14
  8038  0010CE  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8039  0010D0  E001 D743          	bnz	l3974
  8040                           
  8041                           ; BSR set to: 1
  8042                           ;ModbusRtu.c: 783: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8043  0010D4  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8044                           
  8045                           ; BSR set to: 1
  8046                           ;ModbusRtu.c: 784: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8047  0010D8  0426               	decf	ModbusValidateRequest@readDevId,w,c
  8048  0010DA  E007               	bz	l4080
  8049                           
  8050                           ; BSR set to: 1
  8051  0010DC  0E02               	movlw	2
  8052  0010DE  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8053  0010E0  E004               	bz	l4080
  8054                           
  8055                           ; BSR set to: 1
  8056  0010E2  0E04               	movlw	4
  8057  0010E4  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8058  0010E6  E001 D74E          	bnz	l3982
  8059  0010EA                     l4080:
  8060                           
  8061                           ; BSR set to: 1
  8062                           ;ModbusRtu.c: 786: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8063  0010EA  0E04               	movlw	4
  8064  0010EC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8065  0010EE  E123               	bnz	l719
  8066                           
  8067                           ; BSR set to: 1
  8068  0010F0  0E06               	movlw	6
  8069  0010F2  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8070  0010F4  D020               	goto	l719
  8071  0010F6  D75B               	goto	l3990
  8072  0010F8                     l4090:
  8073  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  8074                           
  8075                           ; BSR set to: 1
  8076  0010FA  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  8077                           
  8078                           ; Switch size 1, requested type "speed"
  8079                           ; Number of cases is 11, Range of values is 1 to 43
  8080                           ; switch strategies available:
  8081                           ; Name         Instructions Cycles
  8082                           ; simple_byte           34    18 (average)
  8083                           ;	Chosen strategy is simple_byte
  8084  0010FC  0A01               	xorlw	1	; case 1
  8085  0010FE  E101 D731          	bz	l3978
  8086  001102  0A03               	xorlw	3	; case 2
  8087  001104  E101 D72E          	bz	l3978
  8088  001108  0A01               	xorlw	1	; case 3
  8089  00110A  E08C               	bz	l4032
  8090  00110C  0A07               	xorlw	7	; case 4
  8091  00110E  E101 D771          	bz	l4020
  8092  001112  0A01               	xorlw	1	; case 5
  8093  001114  E101 D74E          	bz	l3994
  8094  001118  0A03               	xorlw	3	; case 6
  8095  00111A  E101 D75C          	bz	l4010
  8096  00111E  0A09               	xorlw	9	; case 15
  8097  001120  E101 D720          	bz	l3978
  8098  001124  0A1F               	xorlw	31	; case 16
  8099  001126  E101 D77D          	bz	l4032
  8100  00112A  0A01               	xorlw	1	; case 17
  8101  00112C  E004               	bz	l719
  8102  00112E  0A04               	xorlw	4	; case 21
  8103  001130  E08C               	bz	l4044
  8104  001132  0A3E               	xorlw	62	; case 43
  8105  001134  E0CB               	bz	l4064
  8106  001136                     l719:
  8107  001136  FFFF               	dw	65535	; assembler added errata NOP
  8108                           
  8109                           ;ModbusRtu.c: 790: _lastCommand = _au8Buffer[ FUNC ];
  8110  001138  C101  F0DF         	movff	__au8Buffer+1,__lastCommand
  8111                           
  8112                           ;ModbusRtu.c: 791: return 0;
  8113  00113C  0E00               	movlw	0
  8114  00113E                     l706:
  8115  00113E  FFFF               	dw	65535	; assembler added errata NOP
  8116  001140  0012               	return		;funcret
  8117  001142  FFFF               	dw	65535	; errata NOP
  8118  001144                     __end_of_ModbusValidateRequest:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           intcon	equ	0xFF2
  8127                           postinc0	equ	0xFEE
  8128                           wreg	equ	0xFE8
  8129                           postdec1	equ	0xFE5
  8130                           fsr1h	equ	0xFE2
  8131                           fsr1l	equ	0xFE1
  8132                           indf2	equ	0xFDF
  8133                           postinc2	equ	0xFDE
  8134                           postdec2	equ	0xFDD
  8135                           plusw2	equ	0xFDB
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _ModbusProcess_FC7 *****************
  8141 ;; Defined at:
  8142 ;;		line 973 in file "ModbusRtu.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      unsigned char 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : E/1
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         0       0       0       0       0       0       0
  8157 ;;      Locals:         1       0       0       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0       0       0
  8159 ;;      Totals:         1       0       0       0       0       0       0
  8160 ;;Total ram usage:        1 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    4
  8163 ;; This function calls:
  8164 ;;		_ModbusSendTxBuffer
  8165 ;; This function is called by:
  8166 ;;		_ModbusPoll
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text38
  8171  002C5C                     __ptext38:
  8172                           	opt stack 0
  8173  002C5C                     _ModbusProcess_FC7:
  8174                           	opt stack 25
  8175                           
  8176                           ;incstack = 0
  8177  002C5C  FFFF               	dw	65535
  8178                           
  8179                           ;ModbusRtu.c: 975: _au8Buffer[ 2 ] = _exceptionStatus;
  8180  002C5E  C0CB  F102         	movff	__exceptionStatus,__au8Buffer+2
  8181                           
  8182                           ;ModbusRtu.c: 976: _u8BufferSize = 3;
  8183  002C62  0E03               	movlw	3
  8184  002C64  6E72               	movwf	__u8BufferSize,c
  8185                           
  8186                           ;ModbusRtu.c: 977: uint8_t u8CopyBufferSize = _u8BufferSize;
  8187  002C66  C072  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  8188                           
  8189                           ;ModbusRtu.c: 978: ModbusSendTxBuffer();
  8190  002C6A  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8191                           
  8192                           ;ModbusRtu.c: 979: return u8CopyBufferSize;
  8193  002C6E  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  8194  002C70  0012               	return		;funcret
  8195  002C72  FFFF               	dw	65535	; errata NOP
  8196  002C74                     __end_of_ModbusProcess_FC7:
  8197                           	opt stack 0
  8198                           tblptru	equ	0xFF8
  8199                           tblptrh	equ	0xFF7
  8200                           tblptrl	equ	0xFF6
  8201                           tablat	equ	0xFF5
  8202                           prodh	equ	0xFF4
  8203                           prodl	equ	0xFF3
  8204                           intcon	equ	0xFF2
  8205                           postinc0	equ	0xFEE
  8206                           wreg	equ	0xFE8
  8207                           postdec1	equ	0xFE5
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function _ModbusProcess_FC6 *****************
  8219 ;; Defined at:
  8220 ;;		line 953 in file "ModbusRtu.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8223 ;;		 -> _MODBUSHoldingRegs(30), 
  8224 ;;  u8size          1   23[COMRAM] unsigned char 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  u16add          2   29[COMRAM] unsigned short 
  8227 ;;  u16val          2   26[COMRAM] unsigned short 
  8228 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      unsigned char 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : E/1
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8238 ;;      Params:         3       0       0       0       0       0       0
  8239 ;;      Locals:         5       0       0       0       0       0       0
  8240 ;;      Temps:          2       0       0       0       0       0       0
  8241 ;;      Totals:        10       0       0       0       0       0       0
  8242 ;;Total ram usage:       10 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    4
  8245 ;; This function calls:
  8246 ;;		_ModbusSendTxBuffer
  8247 ;; This function is called by:
  8248 ;;		_ModbusPoll
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text39
  8253  0026B8                     __ptext39:
  8254                           	opt stack 0
  8255  0026B8                     _ModbusProcess_FC6:
  8256                           	opt stack 25
  8257                           
  8258                           ;incstack = 0
  8259  0026B8  FFFF               	dw	65535
  8260                           
  8261                           ;ModbusRtu.c: 955: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ AD
      +                          D_LO ]);
  8262  0026BA  0101               	movlb	1	; () banked
  8263  0026BC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8264  0026BE  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8265  0026C0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8266  0026C2  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  8267  0026C4  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  8268                           
  8269                           ; BSR set to: 1
  8270                           ;ModbusRtu.c: 956: _lastAddress = u16add;
  8271  0026C8  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  8272  0026CC  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  8273                           
  8274                           ;ModbusRtu.c: 957: _lastCount = 1;
  8275  0026D0  0100               	movlb	0	; () banked
  8276  0026D2  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8277  0026D4  0E01               	movlw	1
  8278  0026D6  6FC0               	movwf	__lastCount& (0+255),b
  8279                           
  8280                           ;ModbusRtu.c: 958: uint8_t u8CopyBufferSize;
  8281                           ;ModbusRtu.c: 959: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_
      +                          LO ]);
  8282  0026D8  0101               	movlb	1	; () banked
  8283  0026DA  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8284  0026DC  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8285  0026DE  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8286  0026E0  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  8287  0026E2  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  8288                           
  8289                           ; BSR set to: 1
  8290                           ;ModbusRtu.c: 961: regs[ u16add ] = u16val;
  8291  0026E6  90D8               	bcf	status,0,c
  8292  0026E8  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  8293  0026EA  6ED9               	movwf	fsr2l,c
  8294  0026EC  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  8295  0026EE  6EDA               	movwf	fsr2h,c
  8296  0026F0  5016               	movf	ModbusProcess_FC6@regs,w,c
  8297  0026F2  26D9               	addwf	fsr2l,f,c
  8298  0026F4  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  8299  0026F6  22DA               	addwfc	fsr2h,f,c
  8300  0026F8  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  8301  0026FC  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  8302                           
  8303                           ; BSR set to: 1
  8304                           ;ModbusRtu.c: 964: _u8BufferSize = RESPONSE_SIZE;
  8305  002700  0E06               	movlw	6
  8306  002702  6E72               	movwf	__u8BufferSize,c
  8307                           
  8308                           ; BSR set to: 1
  8309                           ;ModbusRtu.c: 966: u8CopyBufferSize = _u8BufferSize + 2;
  8310  002704  5072               	movf	__u8BufferSize,w,c
  8311  002706  0F02               	addlw	2
  8312  002708  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  8313                           
  8314                           ; BSR set to: 1
  8315                           ;ModbusRtu.c: 967: ModbusSendTxBuffer();
  8316  00270A  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8317                           
  8318                           ;ModbusRtu.c: 969: return u8CopyBufferSize;
  8319  00270E  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  8320  002710  0012               	return		;funcret
  8321  002712  FFFF               	dw	65535	; errata NOP
  8322  002714                     __end_of_ModbusProcess_FC6:
  8323                           	opt stack 0
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           postinc0	equ	0xFEE
  8332                           wreg	equ	0xFE8
  8333                           postdec1	equ	0xFE5
  8334                           fsr1h	equ	0xFE2
  8335                           fsr1l	equ	0xFE1
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           postdec2	equ	0xFDD
  8339                           plusw2	equ	0xFDB
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function _ModbusProcess_FC5 *****************
  8345 ;; Defined at:
  8346 ;;		line 918 in file "ModbusRtu.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;  regs            1    wreg     PTR unsigned short 
  8349 ;;		 -> _MODBUSCoils(2), 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  regs            1   29[COMRAM] PTR unsigned short 
  8352 ;;		 -> _MODBUSCoils(2), 
  8353 ;;  u16coil         2   27[COMRAM] unsigned short 
  8354 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  8355 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      unsigned char 
  8358 ;; Registers used:
  8359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : E/1
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8365 ;;      Params:         0       0       0       0       0       0       0
  8366 ;;      Locals:         5       0       0       0       0       0       0
  8367 ;;      Temps:          5       0       0       0       0       0       0
  8368 ;;      Totals:        10       0       0       0       0       0       0
  8369 ;;Total ram usage:       10 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    4
  8372 ;; This function calls:
  8373 ;;		_ModbusSendTxBuffer
  8374 ;; This function is called by:
  8375 ;;		_ModbusPoll
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           	psect	text40
  8380  0022E6                     __ptext40:
  8381                           	opt stack 0
  8382  0022E6                     _ModbusProcess_FC5:
  8383                           	opt stack 25
  8384                           
  8385                           ;incstack = 0
  8386  0022E6  FFFF               	dw	65535
  8387                           
  8388                           ;ModbusProcess_FC5@regs stored from wreg
  8389  0022E8  6E1E               	movwf	ModbusProcess_FC5@regs,c
  8390                           
  8391                           ;ModbusRtu.c: 921: uint8_t u8currentBit;
  8392                           ;ModbusRtu.c: 922: uint8_t u8CopyBufferSize;
  8393                           ;ModbusRtu.c: 923: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  8394  0022EA  0101               	movlb	1	; () banked
  8395  0022EC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8396  0022EE  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8397  0022F0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8398  0022F2  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8399  0022F4  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8400                           
  8401                           ; BSR set to: 1
  8402                           ;ModbusRtu.c: 924: _lastAddress = u16coil;
  8403  0022F8  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8404  0022FC  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8405                           
  8406                           ;ModbusRtu.c: 925: _lastCount = 1;
  8407  002300  0100               	movlb	0	; () banked
  8408  002302  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8409  002304  0E01               	movlw	1
  8410  002306  6FC0               	movwf	__lastCount& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;ModbusRtu.c: 928: u8currentBit = (uint8_t) (u16coil % 16);
  8414  002308  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8415  00230A  0B0F               	andlw	15
  8416  00230C  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;ModbusRtu.c: 931: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8420  00230E  0101               	movlb	1	; () banked
  8421  002310  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8422  002312  E116               	bnz	l5684
  8423                           
  8424                           ; BSR set to: 1
  8425  002314  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8426  002318  0E01               	movlw	1
  8427  00231A  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8428  00231C  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8429  00231E  2A16               	incf	??_ModbusProcess_FC5,f,c
  8430  002320  D004               	goto	u4944
  8431  002322                     u4945:
  8432  002322  FFFF               	dw	65535	; assembler added errata NOP
  8433  002324  90D8               	bcf	status,0,c
  8434  002326  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8435  002328  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8436  00232A                     u4944:
  8437  00232A  FFFF               	dw	65535	; assembler added errata NOP
  8438  00232C  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8439  00232E  D7F9               	goto	u4945
  8440  002330  501E               	movf	ModbusProcess_FC5@regs,w,c
  8441  002332  6ED9               	movwf	fsr2l,c
  8442  002334  6ADA               	clrf	fsr2h,c
  8443  002336  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8444  002338  12DE               	iorwf	postinc2,f,c
  8445  00233A  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8446  00233C  12DD               	iorwf	postdec2,f,c
  8447  00233E  D019               	goto	l5686
  8448  002340                     l5684:
  8449                           
  8450                           ; BSR set to: 1
  8451  002340  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8452  002344  0E01               	movlw	1
  8453  002346  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8454  002348  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8455  00234A  2A16               	incf	??_ModbusProcess_FC5,f,c
  8456  00234C  D004               	goto	u4954
  8457  00234E                     u4955:
  8458  00234E  FFFF               	dw	65535	; assembler added errata NOP
  8459  002350  90D8               	bcf	status,0,c
  8460  002352  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8461  002354  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8462  002356                     u4954:
  8463  002356  FFFF               	dw	65535	; assembler added errata NOP
  8464  002358  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8465  00235A  D7F9               	goto	u4955
  8466  00235C  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8467  00235E  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8468  002360  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8469  002362  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8470  002364  501E               	movf	ModbusProcess_FC5@regs,w,c
  8471  002366  6ED9               	movwf	fsr2l,c
  8472  002368  6ADA               	clrf	fsr2h,c
  8473  00236A  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8474  00236C  16DE               	andwf	postinc2,f,c
  8475  00236E  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8476  002370  16DD               	andwf	postdec2,f,c
  8477  002372                     l5686:
  8478  002372  FFFF               	dw	65535	; assembler added errata NOP
  8479                           
  8480                           ;ModbusRtu.c: 938: _u8BufferSize = 6;
  8481  002374  0E06               	movlw	6
  8482  002376  6E72               	movwf	__u8BufferSize,c
  8483                           
  8484                           ;ModbusRtu.c: 939: u8CopyBufferSize = _u8BufferSize + 2;
  8485  002378  5072               	movf	__u8BufferSize,w,c
  8486  00237A  0F02               	addlw	2
  8487  00237C  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8488                           
  8489                           ;ModbusRtu.c: 940: ModbusSendTxBuffer();
  8490  00237E  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8491                           
  8492                           ;ModbusRtu.c: 942: return u8CopyBufferSize;
  8493  002382  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8494  002384  0012               	return		;funcret
  8495  002386  FFFF               	dw	65535	; errata NOP
  8496  002388                     __end_of_ModbusProcess_FC5:
  8497                           	opt stack 0
  8498                           tblptru	equ	0xFF8
  8499                           tblptrh	equ	0xFF7
  8500                           tblptrl	equ	0xFF6
  8501                           tablat	equ	0xFF5
  8502                           prodh	equ	0xFF4
  8503                           prodl	equ	0xFF3
  8504                           intcon	equ	0xFF2
  8505                           postinc0	equ	0xFEE
  8506                           wreg	equ	0xFE8
  8507                           postdec1	equ	0xFE5
  8508                           fsr1h	equ	0xFE2
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           plusw2	equ	0xFDB
  8514                           fsr2h	equ	0xFDA
  8515                           fsr2l	equ	0xFD9
  8516                           status	equ	0xFD8
  8517                           
  8518 ;; *************** function _ModbusProcess_FC43 *****************
  8519 ;; Defined at:
  8520 ;;		line 1152 in file "ModbusRtu.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  objId           1   23[COMRAM] unsigned char 
  8525 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8526 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      unsigned char 
  8529 ;; Registers used:
  8530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : E/1
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8536 ;;      Params:         0       0       0       0       0       0       0
  8537 ;;      Locals:         3       0       0       0       0       0       0
  8538 ;;      Temps:          0       0       0       0       0       0       0
  8539 ;;      Totals:         3       0       0       0       0       0       0
  8540 ;;Total ram usage:        3 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    4
  8543 ;; This function calls:
  8544 ;;		_CopyStringToBuffer
  8545 ;;		_ModbusSendTxBuffer
  8546 ;; This function is called by:
  8547 ;;		_ModbusPoll
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text41
  8552  001430                     __ptext41:
  8553                           	opt stack 0
  8554  001430                     _ModbusProcess_FC43:
  8555                           	opt stack 25
  8556                           
  8557                           ;incstack = 0
  8558  001430  FFFF               	dw	65535
  8559                           
  8560                           ;ModbusRtu.c: 1154: uint8_t devIdCode = _au8Buffer[ 3 ];
  8561  001432  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8562                           
  8563                           ;ModbusRtu.c: 1162: uint8_t objId = _au8Buffer[ 4 ];
  8564  001436  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8565                           
  8566                           ;ModbusRtu.c: 1173: _au8Buffer[ 5 ] = 0x00;
  8567  00143A  0101               	movlb	1	; () banked
  8568  00143C  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8569                           
  8570                           ;ModbusRtu.c: 1174: _au8Buffer[ 6 ] = 0x00;
  8571  00143E  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8572                           
  8573                           ; BSR set to: 1
  8574                           ;ModbusRtu.c: 1176: _u8BufferSize = 8;
  8575  001440  0E08               	movlw	8
  8576  001442  6E72               	movwf	__u8BufferSize,c
  8577                           
  8578                           ;ModbusRtu.c: 1177: switch(devIdCode)
  8579  001444  D094               	goto	l5928
  8580  001446                     l5874:
  8581                           
  8582                           ; BSR set to: 1
  8583                           ;ModbusRtu.c: 1180: _au8Buffer[ 4 ] = 0x81;
  8584  001446  0E81               	movlw	129
  8585  001448  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8586                           
  8587                           ;ModbusRtu.c: 1181: _au8Buffer[ 7 ] = 3;
  8588  00144A  0E03               	movlw	3
  8589  00144C  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8590                           
  8591                           ; BSR set to: 1
  8592                           ;ModbusRtu.c: 1182: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8593  00144E  0E5E               	movlw	low STR_4
  8594  001450  6E07               	movwf	CopyStringToBuffer@src,c
  8595  001452  0E06               	movlw	6
  8596  001454  6E08               	movwf	CopyStringToBuffer@len,c
  8597  001456  0E00               	movlw	0
  8598  001458  EC2C  F013         	call	_CopyStringToBuffer
  8599                           
  8600                           ;ModbusRtu.c: 1183: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8601  00145C  0E55               	movlw	low STR_6
  8602  00145E  6E07               	movwf	CopyStringToBuffer@src,c
  8603  001460  0E09               	movlw	9
  8604  001462  6E08               	movwf	CopyStringToBuffer@len,c
  8605  001464  0E01               	movlw	1
  8606  001466  EC2C  F013         	call	_CopyStringToBuffer
  8607                           
  8608                           ;ModbusRtu.c: 1184: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8609  00146A  0E64               	movlw	low STR_8
  8610  00146C  6E07               	movwf	CopyStringToBuffer@src,c
  8611  00146E  0E05               	movlw	5
  8612  001470  6E08               	movwf	CopyStringToBuffer@len,c
  8613  001472  0E02               	movlw	2
  8614  001474  EC2C  F013         	call	_CopyStringToBuffer
  8615                           
  8616                           ;ModbusRtu.c: 1185: break;
  8617  001478  D084               	goto	l828
  8618  00147A                     l5882:
  8619                           
  8620                           ; BSR set to: 1
  8621                           ;ModbusRtu.c: 1187: _au8Buffer[ 4 ] = 0x82;
  8622  00147A  0E82               	movlw	130
  8623  00147C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8624                           
  8625                           ;ModbusRtu.c: 1188: _au8Buffer[ 7 ] = 4;
  8626  00147E  0E04               	movlw	4
  8627  001480  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8628                           
  8629                           ; BSR set to: 1
  8630                           ;ModbusRtu.c: 1189: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8631  001482  0E3A               	movlw	low STR_10
  8632  001484  6E07               	movwf	CopyStringToBuffer@src,c
  8633  001486  0E10               	movlw	16
  8634  001488  6E08               	movwf	CopyStringToBuffer@len,c
  8635  00148A  0E03               	movlw	3
  8636  00148C  EC2C  F013         	call	_CopyStringToBuffer
  8637                           
  8638                           ;ModbusRtu.c: 1190: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8639  001490  0E26               	movlw	low STR_12
  8640  001492  6E07               	movwf	CopyStringToBuffer@src,c
  8641  001494  0E14               	movlw	20
  8642  001496  6E08               	movwf	CopyStringToBuffer@len,c
  8643  001498  0E04               	movlw	4
  8644  00149A  EC2C  F013         	call	_CopyStringToBuffer
  8645                           
  8646                           ;ModbusRtu.c: 1191: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8647  00149E  0E69               	movlw	low STR_14
  8648  0014A0  6E07               	movwf	CopyStringToBuffer@src,c
  8649  0014A2  0E04               	movlw	4
  8650  0014A4  6E08               	movwf	CopyStringToBuffer@len,c
  8651  0014A6  0E05               	movlw	5
  8652  0014A8  EC2C  F013         	call	_CopyStringToBuffer
  8653                           
  8654                           ;ModbusRtu.c: 1192: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8655  0014AC  0E4A               	movlw	low STR_16
  8656  0014AE  6E07               	movwf	CopyStringToBuffer@src,c
  8657  0014B0  0E0B               	movlw	11
  8658  0014B2  6E08               	movwf	CopyStringToBuffer@len,c
  8659  0014B4  0E06               	movlw	6
  8660  0014B6  EC2C  F013         	call	_CopyStringToBuffer
  8661                           
  8662                           ;ModbusRtu.c: 1193: break;
  8663  0014BA  D063               	goto	l828
  8664  0014BC                     l5892:
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;ModbusRtu.c: 1195: _au8Buffer[ 7 ] = 1;
  8668  0014BC  0E01               	movlw	1
  8669  0014BE  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8670                           
  8671                           ;ModbusRtu.c: 1196: switch(objId)
  8672  0014C0  D046               	goto	l5924
  8673  0014C2                     l5894:
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;ModbusRtu.c: 1199: _au8Buffer[ 4 ] = 0x81;
  8677  0014C2  0E81               	movlw	129
  8678  0014C4  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8679                           
  8680                           ; BSR set to: 1
  8681                           ;ModbusRtu.c: 1200: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8682  0014C6  0E5E               	movlw	low STR_4
  8683  0014C8  6E07               	movwf	CopyStringToBuffer@src,c
  8684  0014CA  0E06               	movlw	6
  8685  0014CC  6E08               	movwf	CopyStringToBuffer@len,c
  8686  0014CE  5018               	movf	ModbusProcess_FC43@objId,w,c
  8687  0014D0  EC2C  F013         	call	_CopyStringToBuffer
  8688                           
  8689                           ;ModbusRtu.c: 1201: break;
  8690  0014D4  D056               	goto	l828
  8691  0014D6                     l5898:
  8692                           
  8693                           ; BSR set to: 1
  8694                           ;ModbusRtu.c: 1203: _au8Buffer[ 4 ] = 0x81;
  8695  0014D6  0E81               	movlw	129
  8696  0014D8  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;ModbusRtu.c: 1204: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8700  0014DA  0E55               	movlw	low STR_6
  8701  0014DC  6E07               	movwf	CopyStringToBuffer@src,c
  8702  0014DE  0E09               	movlw	9
  8703  0014E0  6E08               	movwf	CopyStringToBuffer@len,c
  8704  0014E2  5018               	movf	ModbusProcess_FC43@objId,w,c
  8705  0014E4  EC2C  F013         	call	_CopyStringToBuffer
  8706                           
  8707                           ;ModbusRtu.c: 1205: break;
  8708  0014E8  D04C               	goto	l828
  8709  0014EA                     l5902:
  8710                           
  8711                           ; BSR set to: 1
  8712                           ;ModbusRtu.c: 1207: _au8Buffer[ 4 ] = 0x81;
  8713  0014EA  0E81               	movlw	129
  8714  0014EC  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8715                           
  8716                           ; BSR set to: 1
  8717                           ;ModbusRtu.c: 1208: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8718  0014EE  0E64               	movlw	low STR_8
  8719  0014F0  6E07               	movwf	CopyStringToBuffer@src,c
  8720  0014F2  0E05               	movlw	5
  8721  0014F4  6E08               	movwf	CopyStringToBuffer@len,c
  8722  0014F6  5018               	movf	ModbusProcess_FC43@objId,w,c
  8723  0014F8  EC2C  F013         	call	_CopyStringToBuffer
  8724                           
  8725                           ;ModbusRtu.c: 1209: break;
  8726  0014FC  D042               	goto	l828
  8727  0014FE                     l5906:
  8728                           
  8729                           ; BSR set to: 1
  8730                           ;ModbusRtu.c: 1211: _au8Buffer[ 4 ] = 0x82;
  8731  0014FE  0E82               	movlw	130
  8732  001500  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;ModbusRtu.c: 1212: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8736  001502  0E3A               	movlw	low STR_10
  8737  001504  6E07               	movwf	CopyStringToBuffer@src,c
  8738  001506  0E10               	movlw	16
  8739  001508  6E08               	movwf	CopyStringToBuffer@len,c
  8740  00150A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8741  00150C  EC2C  F013         	call	_CopyStringToBuffer
  8742                           
  8743                           ;ModbusRtu.c: 1213: break;
  8744  001510  D038               	goto	l828
  8745  001512                     l5910:
  8746                           
  8747                           ; BSR set to: 1
  8748                           ;ModbusRtu.c: 1215: _au8Buffer[ 4 ] = 0x82;
  8749  001512  0E82               	movlw	130
  8750  001514  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8751                           
  8752                           ; BSR set to: 1
  8753                           ;ModbusRtu.c: 1216: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8754  001516  0E26               	movlw	low STR_12
  8755  001518  6E07               	movwf	CopyStringToBuffer@src,c
  8756  00151A  0E14               	movlw	20
  8757  00151C  6E08               	movwf	CopyStringToBuffer@len,c
  8758  00151E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8759  001520  EC2C  F013         	call	_CopyStringToBuffer
  8760                           
  8761                           ;ModbusRtu.c: 1217: break;
  8762  001524  D02E               	goto	l828
  8763  001526                     l5914:
  8764                           
  8765                           ; BSR set to: 1
  8766                           ;ModbusRtu.c: 1219: _au8Buffer[ 4 ] = 0x82;
  8767  001526  0E82               	movlw	130
  8768  001528  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;ModbusRtu.c: 1220: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8772  00152A  0E69               	movlw	low STR_14
  8773  00152C  6E07               	movwf	CopyStringToBuffer@src,c
  8774  00152E  0E04               	movlw	4
  8775  001530  6E08               	movwf	CopyStringToBuffer@len,c
  8776  001532  5018               	movf	ModbusProcess_FC43@objId,w,c
  8777  001534  EC2C  F013         	call	_CopyStringToBuffer
  8778                           
  8779                           ;ModbusRtu.c: 1221: break;
  8780  001538  D024               	goto	l828
  8781  00153A                     l5918:
  8782                           
  8783                           ; BSR set to: 1
  8784                           ;ModbusRtu.c: 1223: _au8Buffer[ 4 ] = 0x82;
  8785  00153A  0E82               	movlw	130
  8786  00153C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8787                           
  8788                           ; BSR set to: 1
  8789                           ;ModbusRtu.c: 1224: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8790  00153E  0E4A               	movlw	low STR_16
  8791  001540  6E07               	movwf	CopyStringToBuffer@src,c
  8792  001542  0E0B               	movlw	11
  8793  001544  6E08               	movwf	CopyStringToBuffer@len,c
  8794  001546  5018               	movf	ModbusProcess_FC43@objId,w,c
  8795  001548  EC2C  F013         	call	_CopyStringToBuffer
  8796                           
  8797                           ;ModbusRtu.c: 1225: break;
  8798  00154C  D01A               	goto	l828
  8799  00154E                     l5924:
  8800  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8801                           
  8802                           ; BSR set to: 1
  8803  001550  5018               	movf	ModbusProcess_FC43@objId,w,c
  8804                           
  8805                           ; Switch size 1, requested type "speed"
  8806                           ; Number of cases is 7, Range of values is 0 to 6
  8807                           ; switch strategies available:
  8808                           ; Name         Instructions Cycles
  8809                           ; simple_byte           22    12 (average)
  8810                           ;	Chosen strategy is simple_byte
  8811  001552  E0B7               	bz	l5894
  8812  001554  0A01               	xorlw	1	; case 1
  8813  001556  E0BF               	bz	l5898
  8814  001558  0A03               	xorlw	3	; case 2
  8815  00155A  E0C7               	bz	l5902
  8816  00155C  0A01               	xorlw	1	; case 3
  8817  00155E  E0CF               	bz	l5906
  8818  001560  0A07               	xorlw	7	; case 4
  8819  001562  E0D7               	bz	l5910
  8820  001564  0A01               	xorlw	1	; case 5
  8821  001566  E0DF               	bz	l5914
  8822  001568  0A03               	xorlw	3	; case 6
  8823  00156A  E0E7               	bz	l5918
  8824  00156C  D00A               	goto	l828
  8825  00156E                     l5928:
  8826  00156E  FFFF               	dw	65535	; assembler added errata NOP
  8827                           
  8828                           ; BSR set to: 1
  8829  001570  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8830                           
  8831                           ; Switch size 1, requested type "speed"
  8832                           ; Number of cases is 3, Range of values is 1 to 4
  8833                           ; switch strategies available:
  8834                           ; Name         Instructions Cycles
  8835                           ; simple_byte           10     6 (average)
  8836                           ;	Chosen strategy is simple_byte
  8837  001572  0A01               	xorlw	1	; case 1
  8838  001574  E101 D767          	bz	l5874
  8839  001578  0A03               	xorlw	3	; case 2
  8840  00157A  E101 D77E          	bz	l5882
  8841  00157E  0A06               	xorlw	6	; case 4
  8842  001580  E09D               	bz	l5892
  8843  001582                     l828:
  8844  001582  FFFF               	dw	65535	; assembler added errata NOP
  8845                           
  8846                           ;ModbusRtu.c: 1229: uint8_t u8CopyBufferSize = _u8BufferSize;
  8847  001584  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8848                           
  8849                           ;ModbusRtu.c: 1230: ModbusSendTxBuffer();
  8850  001588  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  8851                           
  8852                           ;ModbusRtu.c: 1232: return u8CopyBufferSize;
  8853  00158C  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8854  00158E  0012               	return		;funcret
  8855  001590  FFFF               	dw	65535	; errata NOP
  8856  001592                     __end_of_ModbusProcess_FC43:
  8857                           	opt stack 0
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           postinc0	equ	0xFEE
  8866                           wreg	equ	0xFE8
  8867                           postdec1	equ	0xFE5
  8868                           fsr1h	equ	0xFE2
  8869                           fsr1l	equ	0xFE1
  8870                           indf2	equ	0xFDF
  8871                           postinc2	equ	0xFDE
  8872                           postdec2	equ	0xFDD
  8873                           plusw2	equ	0xFDB
  8874                           fsr2h	equ	0xFDA
  8875                           fsr2l	equ	0xFD9
  8876                           status	equ	0xFD8
  8877                           
  8878 ;; *************** function _CopyStringToBuffer *****************
  8879 ;; Defined at:
  8880 ;;		line 1143 in file "ModbusRtu.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  objId           1    wreg     unsigned char 
  8883 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8884 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  8885 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  8886 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  8887 ;;		 -> STR_6(9), STR_4(6), 
  8888 ;;  len             1    7[COMRAM] unsigned char 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  objId           1    9[COMRAM] unsigned char 
  8891 ;;  i               1   10[COMRAM] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  1    wreg      void 
  8894 ;; Registers used:
  8895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8896 ;; Tracked objects:
  8897 ;;		On entry : 0/1
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8901 ;;      Params:         2       0       0       0       0       0       0
  8902 ;;      Locals:         2       0       0       0       0       0       0
  8903 ;;      Temps:          1       0       0       0       0       0       0
  8904 ;;      Totals:         5       0       0       0       0       0       0
  8905 ;;Total ram usage:        5 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    2
  8908 ;; This function calls:
  8909 ;;		Nothing
  8910 ;; This function is called by:
  8911 ;;		_ModbusProcess_FC43
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           	psect	text42
  8916  002658                     __ptext42:
  8917                           	opt stack 0
  8918  002658                     _CopyStringToBuffer:
  8919                           	opt stack 26
  8920                           
  8921                           ;incstack = 0
  8922  002658  FFFF               	dw	65535
  8923                           
  8924                           ;CopyStringToBuffer@objId stored from wreg
  8925  00265A  6E0A               	movwf	CopyStringToBuffer@objId,c
  8926                           
  8927                           ;ModbusRtu.c: 1145: len--;
  8928  00265C  0608               	decf	CopyStringToBuffer@len,f,c
  8929                           
  8930                           ;ModbusRtu.c: 1146: _au8Buffer[_u8BufferSize++] = objId;
  8931  00265E  0E00               	movlw	low __au8Buffer
  8932  002660  2472               	addwf	__u8BufferSize,w,c
  8933  002662  6ED9               	movwf	fsr2l,c
  8934  002664  6ADA               	clrf	fsr2h,c
  8935  002666  0E01               	movlw	high __au8Buffer
  8936  002668  22DA               	addwfc	fsr2h,f,c
  8937  00266A  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8938  00266E  2A72               	incf	__u8BufferSize,f,c
  8939                           
  8940                           ;ModbusRtu.c: 1147: _au8Buffer[_u8BufferSize++] = len;
  8941  002670  0E00               	movlw	low __au8Buffer
  8942  002672  2472               	addwf	__u8BufferSize,w,c
  8943  002674  6ED9               	movwf	fsr2l,c
  8944  002676  6ADA               	clrf	fsr2h,c
  8945  002678  0E01               	movlw	high __au8Buffer
  8946  00267A  22DA               	addwfc	fsr2h,f,c
  8947  00267C  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8948  002680  2A72               	incf	__u8BufferSize,f,c
  8949                           
  8950                           ;ModbusRtu.c: 1148: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8951  002682  6A0B               	clrf	CopyStringToBuffer@i,c
  8952  002684  D013               	goto	l3776
  8953  002686                     l3770:
  8954                           
  8955                           ;ModbusRtu.c: 1149: _au8Buffer[_u8BufferSize] = src[i];
  8956  002686  5007               	movf	CopyStringToBuffer@src,w,c
  8957  002688  240B               	addwf	CopyStringToBuffer@i,w,c
  8958  00268A  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8959  00268C  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8960  002690                     	if	1	;There is more than 1 active tblptr byte
  8961  002690  0E06               	movlw	high __smallconst
  8962  002692  6EF7               	movwf	tblptrh,c
  8963  002694                     	endif
  8964  002694                     	if	0	;tblptru may be non-zero
  8965  002694                     	endif
  8966  002694                     	if	0	;tblptru may be non-zero
  8967  002694                     	endif
  8968  002694  0E00               	movlw	low __au8Buffer
  8969  002696  2472               	addwf	__u8BufferSize,w,c
  8970  002698  6ED9               	movwf	fsr2l,c
  8971  00269A  6ADA               	clrf	fsr2h,c
  8972  00269C  0E01               	movlw	high __au8Buffer
  8973  00269E  22DA               	addwfc	fsr2h,f,c
  8974  0026A0  0008               	tblrd		*
  8975  0026A2  FFFF               	dw	65535	; errata NOP
  8976  0026A4  CFF5 FFDF          	movff	tablat,indf2
  8977  0026A8  2A0B               	incf	CopyStringToBuffer@i,f,c
  8978  0026AA  2A72               	incf	__u8BufferSize,f,c
  8979  0026AC                     l3776:
  8980  0026AC  FFFF               	dw	65535	; assembler added errata NOP
  8981  0026AE  5008               	movf	CopyStringToBuffer@len,w,c
  8982  0026B0  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8983  0026B2  E3E9               	bnc	l3770
  8984  0026B4  0012               	return		;funcret
  8985  0026B6  FFFF               	dw	65535	; errata NOP
  8986  0026B8                     __end_of_CopyStringToBuffer:
  8987                           	opt stack 0
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           intcon	equ	0xFF2
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           postdec1	equ	0xFE5
  8998                           fsr1h	equ	0xFE2
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           plusw2	equ	0xFDB
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008 ;; *************** function _ModbusProcess_FC3 *****************
  9009 ;; Defined at:
  9010 ;;		line 885 in file "ModbusRtu.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9013 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  9014 ;;  u8size          1   23[COMRAM] unsigned char 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  u16regsno       2   29[COMRAM] unsigned short 
  9017 ;;  i               1   32[COMRAM] unsigned char 
  9018 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  9019 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      unsigned char 
  9022 ;; Registers used:
  9023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : E/1
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9029 ;;      Params:         3       0       0       0       0       0       0
  9030 ;;      Locals:         5       0       0       0       0       0       0
  9031 ;;      Temps:          4       0       0       0       0       0       0
  9032 ;;      Totals:        12       0       0       0       0       0       0
  9033 ;;Total ram usage:       12 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    4
  9036 ;; This function calls:
  9037 ;;		_ModbusSendTxBuffer
  9038 ;; This function is called by:
  9039 ;;		_ModbusPoll
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           	psect	text43
  9044  002032                     __ptext43:
  9045                           	opt stack 0
  9046  002032                     _ModbusProcess_FC3:
  9047                           	opt stack 25
  9048                           
  9049                           ;incstack = 0
  9050  002032  FFFF               	dw	65535
  9051                           
  9052                           ;ModbusRtu.c: 887: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  9053  002034  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  9054                           
  9055                           ;ModbusRtu.c: 888: _lastAddress = u8StartAdd;
  9056  002038  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  9057  00203C  0100               	movlb	0	; () banked
  9058  00203E  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;ModbusRtu.c: 889: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9062  002040  0101               	movlb	1	; () banked
  9063  002042  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9064  002044  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9065  002046  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9066  002048  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  9067  00204A  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  9068                           
  9069                           ; BSR set to: 1
  9070                           ;ModbusRtu.c: 890: _lastCount = u16regsno;
  9071  00204E  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  9072  002052  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  9073                           
  9074                           ; BSR set to: 1
  9075                           ;ModbusRtu.c: 891: uint8_t u8CopyBufferSize;
  9076                           ;ModbusRtu.c: 892: uint8_t i;
  9077                           ;ModbusRtu.c: 894: _au8Buffer[ 2 ] = u16regsno * 2;
  9078  002056  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  9079  002058  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9080  00205A  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;ModbusRtu.c: 895: _u8BufferSize = 3;
  9084  00205C  0E03               	movlw	3
  9085  00205E  6E72               	movwf	__u8BufferSize,c
  9086                           
  9087                           ; BSR set to: 1
  9088                           ;ModbusRtu.c: 897: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  9089  002060  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  9090  002064  D02A               	goto	l5664
  9091  002066                     l5658:
  9092                           
  9093                           ; BSR set to: 1
  9094                           ;ModbusRtu.c: 898: {
  9095                           ;ModbusRtu.c: 899: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  9096  002066  0E00               	movlw	low __au8Buffer
  9097  002068  2472               	addwf	__u8BufferSize,w,c
  9098  00206A  6ED9               	movwf	fsr2l,c
  9099  00206C  6ADA               	clrf	fsr2h,c
  9100  00206E  0E01               	movlw	high __au8Buffer
  9101  002070  22DA               	addwfc	fsr2h,f,c
  9102  002072  5021               	movf	ModbusProcess_FC3@i,w,c
  9103  002074  0D02               	mullw	2
  9104  002076  50F3               	movf	prodl,w,c
  9105  002078  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9106  00207A  6EE1               	movwf	fsr1l,c
  9107  00207C  50F4               	movf	prodh,w,c
  9108  00207E  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9109  002080  6EE2               	movwf	fsr1h,c
  9110  002082  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  9111  002086  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  9112  00208A  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  9113  00208E  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  9114  002090  5019               	movf	??_ModbusProcess_FC3,w,c
  9115  002092  6EDF               	movwf	indf2,c
  9116                           
  9117                           ; BSR set to: 1
  9118                           ;ModbusRtu.c: 900: _u8BufferSize++;
  9119  002094  2A72               	incf	__u8BufferSize,f,c
  9120                           
  9121                           ; BSR set to: 1
  9122                           ;ModbusRtu.c: 901: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  9123  002096  5021               	movf	ModbusProcess_FC3@i,w,c
  9124  002098  0D02               	mullw	2
  9125  00209A  50F3               	movf	prodl,w,c
  9126  00209C  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9127  00209E  6ED9               	movwf	fsr2l,c
  9128  0020A0  50F4               	movf	prodh,w,c
  9129  0020A2  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9130  0020A4  6EDA               	movwf	fsr2h,c
  9131  0020A6  0E00               	movlw	low __au8Buffer
  9132  0020A8  2472               	addwf	__u8BufferSize,w,c
  9133  0020AA  6EE1               	movwf	fsr1l,c
  9134  0020AC  6AE2               	clrf	fsr1h,c
  9135  0020AE  0E01               	movlw	high __au8Buffer
  9136  0020B0  22E2               	addwfc	fsr1h,f,c
  9137  0020B2  CFDF FFE7          	movff	indf2,indf1
  9138                           
  9139                           ;ModbusRtu.c: 902: _u8BufferSize++;
  9140  0020B6  2A72               	incf	__u8BufferSize,f,c
  9141  0020B8  2A21               	incf	ModbusProcess_FC3@i,f,c
  9142  0020BA                     l5664:
  9143  0020BA  FFFF               	dw	65535	; assembler added errata NOP
  9144                           
  9145                           ; BSR set to: 1
  9146  0020BC  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  9147  0020BE  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9148  0020C0  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9149  0020C2  0E00               	movlw	0
  9150  0020C4  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  9151  0020C6  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  9152  0020C8  5021               	movf	ModbusProcess_FC3@i,w,c
  9153  0020CA  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  9154  0020CC  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  9155  0020CE  5019               	movf	??_ModbusProcess_FC3,w,c
  9156  0020D0  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  9157  0020D2  501A               	movf	??_ModbusProcess_FC3+1,w,c
  9158  0020D4  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  9159  0020D6  E3C7               	bnc	l5658
  9160                           
  9161                           ; BSR set to: 1
  9162                           ;ModbusRtu.c: 903: }
  9163                           ;ModbusRtu.c: 904: u8CopyBufferSize = _u8BufferSize + 2;
  9164  0020D8  5072               	movf	__u8BufferSize,w,c
  9165  0020DA  0F02               	addlw	2
  9166  0020DC  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  9167                           
  9168                           ; BSR set to: 1
  9169                           ;ModbusRtu.c: 905: ModbusSendTxBuffer();
  9170  0020DE  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9171                           
  9172                           ;ModbusRtu.c: 907: return u8CopyBufferSize;
  9173  0020E2  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  9174  0020E4  0012               	return		;funcret
  9175  0020E6  FFFF               	dw	65535	; errata NOP
  9176  0020E8                     __end_of_ModbusProcess_FC3:
  9177                           	opt stack 0
  9178                           tblptru	equ	0xFF8
  9179                           tblptrh	equ	0xFF7
  9180                           tblptrl	equ	0xFF6
  9181                           tablat	equ	0xFF5
  9182                           prodh	equ	0xFF4
  9183                           prodl	equ	0xFF3
  9184                           intcon	equ	0xFF2
  9185                           postinc0	equ	0xFEE
  9186                           wreg	equ	0xFE8
  9187                           indf1	equ	0xFE7
  9188                           postinc1	equ	0xFE6
  9189                           postdec1	equ	0xFE5
  9190                           fsr1h	equ	0xFE2
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           plusw2	equ	0xFDB
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8
  9199                           
  9200 ;; *************** function _ModbusProcess_FC21 *****************
  9201 ;; Defined at:
  9202 ;;		line 1111 in file "ModbusRtu.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;		None
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  9207 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  9208 ;;  i               1   29[COMRAM] unsigned char 
  9209 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  9210 ;;  requestDataL    1   23[COMRAM] unsigned char 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      unsigned char 
  9213 ;; Registers used:
  9214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : E/1
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9220 ;;      Params:         0       0       0       0       0       0       0
  9221 ;;      Locals:         7       0       0       0       0       0       0
  9222 ;;      Temps:          2       0       0       0       0       0       0
  9223 ;;      Totals:         9       0       0       0       0       0       0
  9224 ;;Total ram usage:        9 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    4
  9227 ;; This function calls:
  9228 ;;		_ModbusSendTxBuffer
  9229 ;; This function is called by:
  9230 ;;		_ModbusPoll
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text44
  9235  002196                     __ptext44:
  9236                           	opt stack 0
  9237  002196                     _ModbusProcess_FC21:
  9238                           	opt stack 25
  9239                           
  9240                           ;incstack = 0
  9241  002196  FFFF               	dw	65535
  9242                           
  9243                           ;ModbusRtu.c: 1115: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  9244  002198  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  9245                           
  9246                           ;ModbusRtu.c: 1117: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  9247  00219C  0101               	movlb	1	; () banked
  9248  00219E  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  9249  0021A0  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  9250  0021A4  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9251  0021A6  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9252  0021AA  6A16               	clrf	??_ModbusProcess_FC21,c
  9253  0021AC  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9254  0021AE  90D8               	bcf	status,0,c
  9255  0021B0  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9256  0021B2  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  9257  0021B4  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9258  0021B6  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  9259                           
  9260                           ; BSR set to: 1
  9261                           ;ModbusRtu.c: 1118: _lastAddress = startAddrsBytes;
  9262  0021B8  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  9263  0021BC  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  9264                           
  9265                           ;ModbusRtu.c: 1119: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  9266  0021C0  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  9267  0021C2  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  9268  0021C6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9269  0021C8  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9270  0021CC  6A16               	clrf	??_ModbusProcess_FC21,c
  9271  0021CE  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9272  0021D0  90D8               	bcf	status,0,c
  9273  0021D2  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9274  0021D4  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  9275  0021D6  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9276  0021D8  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  9277                           
  9278                           ; BSR set to: 1
  9279                           ;ModbusRtu.c: 1120: _lastCount = recLenBytes;
  9280  0021DA  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  9281  0021DE  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  9282                           
  9283                           ;ModbusRtu.c: 1121: uint8_t u8CopyBufferSize;
  9284                           ;ModbusRtu.c: 1122: uint8_t i;
  9285                           ;ModbusRtu.c: 1128: _u8BufferSize = requestDataLen + 1;
  9286  0021E2  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  9287  0021E4  6E72               	movwf	__u8BufferSize,c
  9288                           
  9289                           ; BSR set to: 1
  9290                           ;ModbusRtu.c: 1132: for (i = 0; i < recLenBytes; i++)
  9291  0021E6  6A1E               	clrf	ModbusProcess_FC21@i,c
  9292  0021E8  D01C               	goto	l5862
  9293  0021EA                     l810:
  9294  0021EA  FFFF               	dw	65535	; assembler added errata NOP
  9295                           
  9296                           ; BSR set to: 1
  9297  0021EC  B2A6               	btfsc	4006,1,c	;volatile
  9298  0021EE  D7FD               	goto	l810
  9299                           
  9300                           ; BSR set to: 1
  9301  0021F0  501E               	movf	ModbusProcess_FC21@i,w,c
  9302  0021F2  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  9303  0021F4  6EA9               	movwf	4009,c	;volatile
  9304                           
  9305                           ; BSR set to: 1
  9306  0021F6  0E0A               	movlw	low (__au8Buffer+10)
  9307  0021F8  241E               	addwf	ModbusProcess_FC21@i,w,c
  9308  0021FA  6ED9               	movwf	fsr2l,c
  9309  0021FC  6ADA               	clrf	fsr2h,c
  9310  0021FE  0E01               	movlw	high (__au8Buffer+10)
  9311  002200  22DA               	addwfc	fsr2h,f,c
  9312  002202  50DF               	movf	indf2,w,c
  9313  002204  6EA8               	movwf	4008,c	;volatile
  9314                           
  9315                           ; BSR set to: 1
  9316  002206  90D8               	bcf	status,0,c	;volatile
  9317                           
  9318                           ; BSR set to: 1
  9319  002208  BEF2               	btfsc	intcon,7,c	;volatile
  9320                           
  9321                           ; BSR set to: 1
  9322  00220A  80D8               	bsf	status,0,c	;volatile
  9323                           
  9324                           ; BSR set to: 1
  9325  00220C  9EF2               	bcf	intcon,7,c	;volatile
  9326  00220E  84A6               	bsf	4006,2,c	;volatile
  9327                           
  9328                           ; BSR set to: 1
  9329  002210  0E55               	movlw	85
  9330  002212  6EA7               	movwf	4007,c	;volatile
  9331  002214  0EAA               	movlw	170
  9332  002216  6EA7               	movwf	4007,c	;volatile
  9333                           
  9334                           ; BSR set to: 1
  9335  002218  82A6               	bsf	4006,1,c	;volatile
  9336                           
  9337                           ; BSR set to: 1
  9338  00221A  94A6               	bcf	4006,2,c	;volatile
  9339                           
  9340                           ; BSR set to: 1
  9341  00221C  E301               	bnc	l5860
  9342                           
  9343                           ; BSR set to: 1
  9344  00221E  8EF2               	bsf	intcon,7,c	;volatile
  9345  002220                     l5860:
  9346                           
  9347                           ; BSR set to: 1
  9348  002220  2A1E               	incf	ModbusProcess_FC21@i,f,c
  9349  002222                     l5862:
  9350  002222  FFFF               	dw	65535	; assembler added errata NOP
  9351                           
  9352                           ; BSR set to: 1
  9353  002224  501E               	movf	ModbusProcess_FC21@i,w,c
  9354  002226  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  9355  002228  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9356  00222A  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  9357  00222C  5C16               	subwf	??_ModbusProcess_FC21,w,c
  9358  00222E  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  9359  002230  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  9360  002232  E3DB               	bnc	l810
  9361                           
  9362                           ; BSR set to: 1
  9363                           ;ModbusRtu.c: 1135: }
  9364                           ;ModbusRtu.c: 1137: u8CopyBufferSize = _u8BufferSize;
  9365  002234  C072  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  9366                           
  9367                           ; BSR set to: 1
  9368                           ;ModbusRtu.c: 1138: ModbusSendTxBuffer();
  9369  002238  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9370                           
  9371                           ;ModbusRtu.c: 1140: return u8CopyBufferSize;
  9372  00223C  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  9373  00223E  0012               	return		;funcret
  9374  002240  FFFF               	dw	65535	; errata NOP
  9375  002242                     __end_of_ModbusProcess_FC21:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           postinc0	equ	0xFEE
  9385                           wreg	equ	0xFE8
  9386                           indf1	equ	0xFE7
  9387                           postinc1	equ	0xFE6
  9388                           postdec1	equ	0xFE5
  9389                           fsr1h	equ	0xFE2
  9390                           fsr1l	equ	0xFE1
  9391                           indf2	equ	0xFDF
  9392                           postinc2	equ	0xFDE
  9393                           postdec2	equ	0xFDD
  9394                           plusw2	equ	0xFDB
  9395                           fsr2h	equ	0xFDA
  9396                           fsr2l	equ	0xFD9
  9397                           status	equ	0xFD8
  9398                           
  9399 ;; *************** function _ModbusProcess_FC17 *****************
  9400 ;; Defined at:
  9401 ;;		line 1086 in file "ModbusRtu.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  i               1   23[COMRAM] unsigned char 
  9406 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  1    wreg      unsigned char 
  9409 ;; Registers used:
  9410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : E/1
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9416 ;;      Params:         0       0       0       0       0       0       0
  9417 ;;      Locals:         2       0       0       0       0       0       0
  9418 ;;      Temps:          1       0       0       0       0       0       0
  9419 ;;      Totals:         3       0       0       0       0       0       0
  9420 ;;Total ram usage:        3 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    4
  9423 ;; This function calls:
  9424 ;;		_ModbusSendTxBuffer
  9425 ;; This function is called by:
  9426 ;;		_ModbusPoll
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text45
  9431  00251E                     __ptext45:
  9432                           	opt stack 0
  9433  00251E                     _ModbusProcess_FC17:
  9434                           	opt stack 25
  9435                           
  9436                           ;incstack = 0
  9437  00251E  FFFF               	dw	65535
  9438                           
  9439                           ;ModbusRtu.c: 1088: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  9440  002520  0E1B               	movlw	27
  9441  002522  0101               	movlb	1	; () banked
  9442  002524  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9443                           
  9444                           ;ModbusRtu.c: 1090: _u8BufferSize = 3;
  9445  002526  0E03               	movlw	3
  9446  002528  6E72               	movwf	__u8BufferSize,c
  9447                           
  9448                           ; BSR set to: 1
  9449                           ;ModbusRtu.c: 1092: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  9450  00252A  6A18               	clrf	ModbusProcess_FC17@i,c
  9451  00252C                     l5808:
  9452  00252C  FFFF               	dw	65535	; assembler added errata NOP
  9453                           
  9454                           ; BSR set to: 1
  9455                           ;ModbusRtu.c: 1093: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  9456  00252E  5018               	movf	ModbusProcess_FC17@i,w,c
  9457  002530  0F0D               	addlw	low STR_3
  9458  002532  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  9459  002534  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  9460  002538                     	if	1	;There is more than 1 active tblptr byte
  9461  002538  0E06               	movlw	high __smallconst
  9462  00253A  6EF7               	movwf	tblptrh,c
  9463  00253C                     	endif
  9464  00253C                     	if	0	;tblptru may be non-zero
  9465  00253C                     	endif
  9466  00253C                     	if	0	;tblptru may be non-zero
  9467  00253C                     	endif
  9468  00253C  0E00               	movlw	low __au8Buffer
  9469  00253E  2472               	addwf	__u8BufferSize,w,c
  9470  002540  6ED9               	movwf	fsr2l,c
  9471  002542  6ADA               	clrf	fsr2h,c
  9472  002544  0E01               	movlw	high __au8Buffer
  9473  002546  22DA               	addwfc	fsr2h,f,c
  9474  002548  0008               	tblrd		*
  9475  00254A  FFFF               	dw	65535	; errata NOP
  9476  00254C  CFF5 FFDF          	movff	tablat,indf2
  9477                           
  9478                           ; BSR set to: 1
  9479  002550  2A18               	incf	ModbusProcess_FC17@i,f,c
  9480                           
  9481                           ; BSR set to: 1
  9482  002552  2A72               	incf	__u8BufferSize,f,c
  9483                           
  9484                           ; BSR set to: 1
  9485  002554  0E18               	movlw	24
  9486  002556  6418               	cpfsgt	ModbusProcess_FC17@i,c
  9487  002558  D7E9               	goto	l5808
  9488                           
  9489                           ; BSR set to: 1
  9490                           ;ModbusRtu.c: 1095: _au8Buffer[_u8BufferSize++] = '!';
  9491  00255A  0E00               	movlw	low __au8Buffer
  9492  00255C  2472               	addwf	__u8BufferSize,w,c
  9493  00255E  6ED9               	movwf	fsr2l,c
  9494  002560  6ADA               	clrf	fsr2h,c
  9495  002562  0E01               	movlw	high __au8Buffer
  9496  002564  22DA               	addwfc	fsr2h,f,c
  9497  002566  0E21               	movlw	33
  9498  002568  6EDF               	movwf	indf2,c
  9499                           
  9500                           ; BSR set to: 1
  9501  00256A  2A72               	incf	__u8BufferSize,f,c
  9502                           
  9503                           ; BSR set to: 1
  9504                           ;ModbusRtu.c: 1096: _au8Buffer[_u8BufferSize++] = '>';
  9505  00256C  0E00               	movlw	low __au8Buffer
  9506  00256E  2472               	addwf	__u8BufferSize,w,c
  9507  002570  6ED9               	movwf	fsr2l,c
  9508  002572  6ADA               	clrf	fsr2h,c
  9509  002574  0E01               	movlw	high __au8Buffer
  9510  002576  22DA               	addwfc	fsr2h,f,c
  9511  002578  0E3E               	movlw	62
  9512  00257A  6EDF               	movwf	indf2,c
  9513  00257C  2A72               	incf	__u8BufferSize,f,c
  9514                           
  9515                           ; BSR set to: 1
  9516                           ;ModbusRtu.c: 1097: uint8_t u8CopyBufferSize = _u8BufferSize;
  9517  00257E  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9518                           
  9519                           ; BSR set to: 1
  9520                           ;ModbusRtu.c: 1098: ModbusSendTxBuffer();
  9521  002582  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9522                           
  9523                           ;ModbusRtu.c: 1100: return u8CopyBufferSize;
  9524  002586  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9525  002588  0012               	return		;funcret
  9526  00258A  FFFF               	dw	65535	; errata NOP
  9527  00258C                     __end_of_ModbusProcess_FC17:
  9528                           	opt stack 0
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           postinc0	equ	0xFEE
  9537                           wreg	equ	0xFE8
  9538                           indf1	equ	0xFE7
  9539                           postinc1	equ	0xFE6
  9540                           postdec1	equ	0xFE5
  9541                           fsr1h	equ	0xFE2
  9542                           fsr1l	equ	0xFE1
  9543                           indf2	equ	0xFDF
  9544                           postinc2	equ	0xFDE
  9545                           postdec2	equ	0xFDD
  9546                           plusw2	equ	0xFDB
  9547                           fsr2h	equ	0xFDA
  9548                           fsr2l	equ	0xFD9
  9549                           status	equ	0xFD8
  9550                           
  9551 ;; *************** function _ModbusProcess_FC16 *****************
  9552 ;; Defined at:
  9553 ;;		line 1047 in file "ModbusRtu.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9556 ;;		 -> _MODBUSHoldingRegs(30), 
  9557 ;;  u8size          1   23[COMRAM] unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9560 ;;  temp            2   28[COMRAM] unsigned short 
  9561 ;;  i               1   34[COMRAM] unsigned char 
  9562 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9563 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9564 ;; Return value:  Size  Location     Type
  9565 ;;                  1    wreg      unsigned char 
  9566 ;; Registers used:
  9567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9568 ;; Tracked objects:
  9569 ;;		On entry : E/1
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9573 ;;      Params:         3       0       0       0       0       0       0
  9574 ;;      Locals:         7       0       0       0       0       0       0
  9575 ;;      Temps:          4       0       0       0       0       0       0
  9576 ;;      Totals:        14       0       0       0       0       0       0
  9577 ;;Total ram usage:       14 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; Hardware stack levels required when called:    4
  9580 ;; This function calls:
  9581 ;;		_ModbusSendTxBuffer
  9582 ;; This function is called by:
  9583 ;;		_ModbusPoll
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           	psect	text46
  9588  001DE6                     __ptext46:
  9589                           	opt stack 0
  9590  001DE6                     _ModbusProcess_FC16:
  9591                           	opt stack 25
  9592                           
  9593                           ;incstack = 0
  9594  001DE6  FFFF               	dw	65535
  9595                           
  9596                           ;ModbusRtu.c: 1050: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9597  001DE8  0101               	movlb	1	; () banked
  9598  001DEA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9599  001DEC  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9600  001DF0  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9601  001DF2  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9602  001DF6  6A19               	clrf	??_ModbusProcess_FC16,c
  9603  001DF8  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9604  001DFA  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9605  001DFC  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9606  001DFE  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9607                           
  9608                           ; BSR set to: 1
  9609                           ;ModbusRtu.c: 1051: _lastAddress = u16StartAdd;
  9610  001E00  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9611  001E04  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9612                           
  9613                           ; BSR set to: 1
  9614                           ;ModbusRtu.c: 1052: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9615  001E08  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9616                           
  9617                           ; BSR set to: 1
  9618                           ;ModbusRtu.c: 1053: _lastCount = u8regsno;
  9619  001E0C  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9620  001E10  0100               	movlb	0	; () banked
  9621  001E12  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;ModbusRtu.c: 1054: uint8_t u8CopyBufferSize;
  9625                           ;ModbusRtu.c: 1055: uint8_t i;
  9626                           ;ModbusRtu.c: 1056: uint16_t temp;
  9627                           ;ModbusRtu.c: 1059: _au8Buffer[ NB_HI ] = 0;
  9628  001E14  0101               	movlb	1	; () banked
  9629  001E16  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9630                           
  9631                           ; BSR set to: 1
  9632                           ;ModbusRtu.c: 1060: _au8Buffer[ NB_LO ] = u8regsno;
  9633  001E18  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9634                           
  9635                           ; BSR set to: 1
  9636                           ;ModbusRtu.c: 1061: _u8BufferSize = RESPONSE_SIZE;
  9637  001E1C  0E06               	movlw	6
  9638  001E1E  6E72               	movwf	__u8BufferSize,c
  9639                           
  9640                           ; BSR set to: 1
  9641                           ;ModbusRtu.c: 1064: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9642  001E20  6A23               	clrf	ModbusProcess_FC16@i,c
  9643  001E22  D02C               	goto	l5788
  9644  001E24                     l5782:
  9645                           
  9646                           ; BSR set to: 1
  9647                           ;ModbusRtu.c: 1065: {
  9648                           ;ModbusRtu.c: 1066: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9649  001E24  5023               	movf	ModbusProcess_FC16@i,w,c
  9650  001E26  0D02               	mullw	2
  9651  001E28  0E08               	movlw	low (__au8Buffer+8)
  9652  001E2A  24F3               	addwf	prodl,w,c
  9653  001E2C  6ED9               	movwf	fsr2l,c
  9654  001E2E  0E01               	movlw	high (__au8Buffer+8)
  9655  001E30  20F4               	addwfc	prodh,w,c
  9656  001E32  6EDA               	movwf	fsr2h,c
  9657  001E34  50DF               	movf	indf2,w,c
  9658  001E36  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9659  001E38  5023               	movf	ModbusProcess_FC16@i,w,c
  9660  001E3A  0D02               	mullw	2
  9661  001E3C  0E07               	movlw	low (__au8Buffer+7)
  9662  001E3E  24F3               	addwf	prodl,w,c
  9663  001E40  6ED9               	movwf	fsr2l,c
  9664  001E42  0E01               	movlw	high (__au8Buffer+7)
  9665  001E44  20F4               	addwfc	prodh,w,c
  9666  001E46  6EDA               	movwf	fsr2h,c
  9667  001E48  50DF               	movf	indf2,w,c
  9668  001E4A  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9669  001E4C  5019               	movf	??_ModbusProcess_FC16,w,c
  9670  001E4E  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9671  001E50  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9672                           
  9673                           ; BSR set to: 1
  9674                           ;ModbusRtu.c: 1070: regs[ u16StartAdd + i ] = temp;
  9675  001E54  5023               	movf	ModbusProcess_FC16@i,w,c
  9676  001E56  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9677  001E58  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9678  001E5A  0E00               	movlw	0
  9679  001E5C  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9680  001E5E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9681  001E60  90D8               	bcf	status,0,c
  9682  001E62  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9683  001E64  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9684  001E66  5019               	movf	??_ModbusProcess_FC16,w,c
  9685  001E68  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9686  001E6A  6ED9               	movwf	fsr2l,c
  9687  001E6C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9688  001E6E  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9689  001E70  6EDA               	movwf	fsr2h,c
  9690  001E72  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9691  001E76  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9692                           
  9693                           ; BSR set to: 1
  9694  001E7A  2A23               	incf	ModbusProcess_FC16@i,f,c
  9695  001E7C                     l5788:
  9696  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  9697                           
  9698                           ; BSR set to: 1
  9699  001E7E  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9700  001E80  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9701  001E82  E20E               	bc	l5792
  9702                           
  9703                           ; BSR set to: 1
  9704  001E84  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9705  001E86  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9706  001E88  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9707  001E8A  5023               	movf	ModbusProcess_FC16@i,w,c
  9708  001E8C  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9709  001E8E  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9710  001E90  0E00               	movlw	0
  9711  001E92  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9712  001E94  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9713  001E96  5019               	movf	??_ModbusProcess_FC16,w,c
  9714  001E98  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9715  001E9A  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9716  001E9C  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9717  001E9E  E3C2               	bnc	l5782
  9718  001EA0                     l5792:
  9719                           
  9720                           ; BSR set to: 1
  9721                           ;ModbusRtu.c: 1071: }
  9722                           ;ModbusRtu.c: 1072: u8CopyBufferSize = _u8BufferSize + 2;
  9723  001EA0  5072               	movf	__u8BufferSize,w,c
  9724  001EA2  0F02               	addlw	2
  9725  001EA4  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9726                           
  9727                           ; BSR set to: 1
  9728                           ;ModbusRtu.c: 1073: ModbusSendTxBuffer();
  9729  001EA6  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9730                           
  9731                           ;ModbusRtu.c: 1075: return u8CopyBufferSize;
  9732  001EAA  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9733  001EAC  0012               	return		;funcret
  9734  001EAE  FFFF               	dw	65535	; errata NOP
  9735  001EB0                     __end_of_ModbusProcess_FC16:
  9736                           	opt stack 0
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           intcon	equ	0xFF2
  9744                           postinc0	equ	0xFEE
  9745                           wreg	equ	0xFE8
  9746                           indf1	equ	0xFE7
  9747                           postinc1	equ	0xFE6
  9748                           postdec1	equ	0xFE5
  9749                           fsr1h	equ	0xFE2
  9750                           fsr1l	equ	0xFE1
  9751                           indf2	equ	0xFDF
  9752                           postinc2	equ	0xFDE
  9753                           postdec2	equ	0xFDD
  9754                           plusw2	equ	0xFDB
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759 ;; *************** function _ModbusProcess_FC15 *****************
  9760 ;; Defined at:
  9761 ;;		line 989 in file "ModbusRtu.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;  regs            1    wreg     PTR unsigned short 
  9764 ;;		 -> _MODBUSCoils(2), 
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9767 ;;		 -> _MODBUSCoils(2), 
  9768 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9769 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9770 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9771 ;;  u16coil         2   26[COMRAM] unsigned short 
  9772 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9773 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9774 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9775 ;;  bTemp           1   29[COMRAM] unsigned char 
  9776 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  1    wreg      unsigned char 
  9779 ;; Registers used:
  9780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9781 ;; Tracked objects:
  9782 ;;		On entry : E/1
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9786 ;;      Params:         0       0       0       0       0       0       0
  9787 ;;      Locals:        14       0       0       0       0       0       0
  9788 ;;      Temps:          5       0       0       0       0       0       0
  9789 ;;      Totals:        19       0       0       0       0       0       0
  9790 ;;Total ram usage:       19 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    4
  9793 ;; This function calls:
  9794 ;;		_ModbusSendTxBuffer
  9795 ;; This function is called by:
  9796 ;;		_ModbusPoll
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text47
  9801  0018FE                     __ptext47:
  9802                           	opt stack 0
  9803  0018FE                     _ModbusProcess_FC15:
  9804                           	opt stack 25
  9805                           
  9806                           ;incstack = 0
  9807  0018FE  FFFF               	dw	65535
  9808                           
  9809                           ;ModbusProcess_FC15@regs stored from wreg
  9810  001900  6E24               	movwf	ModbusProcess_FC15@regs,c
  9811                           
  9812                           ;ModbusRtu.c: 992: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9813                           ;ModbusRtu.c: 993: uint8_t u8CopyBufferSize;
  9814                           ;ModbusRtu.c: 994: uint16_t u16currentCoil, u16coil;
  9815                           ;ModbusRtu.c: 995: boolean bTemp;
  9816                           ;ModbusRtu.c: 998: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9817  001902  0101               	movlb	1	; () banked
  9818  001904  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9819  001906  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9820  001908  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9821  00190A  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9822  00190C  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9823                           
  9824                           ; BSR set to: 1
  9825                           ;ModbusRtu.c: 999: _lastAddress = u16StartCoil;
  9826  001910  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9827  001914  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9828                           
  9829                           ;ModbusRtu.c: 1000: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9830  001918  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9831  00191A  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9832  00191C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9833  00191E  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9834  001920  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9835                           
  9836                           ; BSR set to: 1
  9837                           ;ModbusRtu.c: 1001: _lastCount = u16Coilno;
  9838  001924  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9839  001928  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9840                           
  9841                           ; BSR set to: 1
  9842                           ;ModbusRtu.c: 1004: u8bitsno = 0;
  9843  00192C  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9844                           
  9845                           ;ModbusRtu.c: 1005: u8frameByte = 7;
  9846  00192E  0E07               	movlw	7
  9847  001930  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9848                           
  9849                           ; BSR set to: 1
  9850                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9851  001932  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9852  001934  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9853  001936  D058               	goto	l5754
  9854  001938                     l5734:
  9855                           
  9856                           ;ModbusRtu.c: 1007: {
  9857                           ;ModbusRtu.c: 1009: u16coil = u16StartCoil + u16currentCoil;
  9858  001938  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9859  00193A  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9860  00193C  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9861  00193E  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9862  001940  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9863  001942  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9864                           
  9865                           ;ModbusRtu.c: 1011: u8currentBit = (uint8_t) u16coil;
  9866  001944  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9867                           
  9868                           ;ModbusRtu.c: 1013: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9869  001948  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9870  00194C  0E00               	movlw	low __au8Buffer
  9871  00194E  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9872  001950  6ED9               	movwf	fsr2l,c
  9873  001952  6ADA               	clrf	fsr2h,c
  9874  001954  0E01               	movlw	high __au8Buffer
  9875  001956  22DA               	addwfc	fsr2h,f,c
  9876  001958  50DF               	movf	indf2,w,c
  9877  00195A  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9878  00195C  2A16               	incf	??_ModbusProcess_FC15,f,c
  9879  00195E  D003               	goto	u4964
  9880  001960                     u4965:
  9881  001960  FFFF               	dw	65535	; assembler added errata NOP
  9882  001962  90D8               	bcf	status,0,c
  9883  001964  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9884  001966                     u4964:
  9885  001966  FFFF               	dw	65535	; assembler added errata NOP
  9886  001968  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9887  00196A  D7FA               	goto	u4965
  9888  00196C  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9889  00196E  0B01               	andlw	1
  9890  001970  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9891                           
  9892                           ;ModbusRtu.c: 1017: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9893  001972  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9894  001974  E016               	bz	l5744
  9895  001976  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9896  00197A  0E01               	movlw	1
  9897  00197C  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9898  00197E  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9899  001980  2A16               	incf	??_ModbusProcess_FC15,f,c
  9900  001982  D004               	goto	u4984
  9901  001984                     u4985:
  9902  001984  FFFF               	dw	65535	; assembler added errata NOP
  9903  001986  90D8               	bcf	status,0,c
  9904  001988  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9905  00198A  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9906  00198C                     u4984:
  9907  00198C  FFFF               	dw	65535	; assembler added errata NOP
  9908  00198E  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9909  001990  D7F9               	goto	u4985
  9910  001992  5024               	movf	ModbusProcess_FC15@regs,w,c
  9911  001994  6ED9               	movwf	fsr2l,c
  9912  001996  6ADA               	clrf	fsr2h,c
  9913  001998  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9914  00199A  12DE               	iorwf	postinc2,f,c
  9915  00199C  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9916  00199E  12DD               	iorwf	postdec2,f,c
  9917  0019A0  D019               	goto	l5746
  9918  0019A2                     l5744:
  9919  0019A2  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9920  0019A6  0E01               	movlw	1
  9921  0019A8  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9922  0019AA  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9923  0019AC  2A16               	incf	??_ModbusProcess_FC15,f,c
  9924  0019AE  D004               	goto	u4994
  9925  0019B0                     u4995:
  9926  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  9927  0019B2  90D8               	bcf	status,0,c
  9928  0019B4  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9929  0019B6  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9930  0019B8                     u4994:
  9931  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  9932  0019BA  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9933  0019BC  D7F9               	goto	u4995
  9934  0019BE  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9935  0019C0  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9936  0019C2  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9937  0019C4  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9938  0019C6  5024               	movf	ModbusProcess_FC15@regs,w,c
  9939  0019C8  6ED9               	movwf	fsr2l,c
  9940  0019CA  6ADA               	clrf	fsr2h,c
  9941  0019CC  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9942  0019CE  16DE               	andwf	postinc2,f,c
  9943  0019D0  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9944  0019D2  16DD               	andwf	postdec2,f,c
  9945  0019D4                     l5746:
  9946  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  9947                           
  9948                           ;ModbusRtu.c: 1022: u8bitsno++;
  9949  0019D6  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9950                           
  9951                           ;ModbusRtu.c: 1024: if (u8bitsno > 7)
  9952  0019D8  0E07               	movlw	7
  9953  0019DA  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9954  0019DC  D002               	goto	l789
  9955                           
  9956                           ;ModbusRtu.c: 1025: {
  9957                           ;ModbusRtu.c: 1026: u8bitsno = 0;
  9958  0019DE  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9959                           
  9960                           ;ModbusRtu.c: 1027: u8frameByte++;
  9961  0019E0  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9962  0019E2                     l789:
  9963  0019E2  FFFF               	dw	65535	; assembler added errata NOP
  9964  0019E4  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9965  0019E6  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9966  0019E8                     l5754:
  9967  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  9968  0019EA  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9969  0019EC  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9970  0019EE  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9971  0019F0  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9972  0019F2  E3A2               	bnc	l5734
  9973                           
  9974                           ;ModbusRtu.c: 1028: }
  9975                           ;ModbusRtu.c: 1029: }
  9976                           ;ModbusRtu.c: 1033: _u8BufferSize = 6;
  9977  0019F4  0E06               	movlw	6
  9978  0019F6  6E72               	movwf	__u8BufferSize,c
  9979                           
  9980                           ;ModbusRtu.c: 1034: u8CopyBufferSize = _u8BufferSize + 2;
  9981  0019F8  5072               	movf	__u8BufferSize,w,c
  9982  0019FA  0F02               	addlw	2
  9983  0019FC  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9984                           
  9985                           ;ModbusRtu.c: 1035: ModbusSendTxBuffer();
  9986  0019FE  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
  9987                           
  9988                           ;ModbusRtu.c: 1036: return u8CopyBufferSize;
  9989  001A02  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9990  001A04  0012               	return		;funcret
  9991  001A06  FFFF               	dw	65535	; errata NOP
  9992  001A08                     __end_of_ModbusProcess_FC15:
  9993                           	opt stack 0
  9994                           tblptru	equ	0xFF8
  9995                           tblptrh	equ	0xFF7
  9996                           tblptrl	equ	0xFF6
  9997                           tablat	equ	0xFF5
  9998                           prodh	equ	0xFF4
  9999                           prodl	equ	0xFF3
 10000                           intcon	equ	0xFF2
 10001                           postinc0	equ	0xFEE
 10002                           wreg	equ	0xFE8
 10003                           indf1	equ	0xFE7
 10004                           postinc1	equ	0xFE6
 10005                           postdec1	equ	0xFE5
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           plusw2	equ	0xFDB
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _ModbusProcess_FC1 *****************
 10017 ;; Defined at:
 10018 ;;		line 828 in file "ModbusRtu.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  regs            2   21[COMRAM] unsigned short 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 10023 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 10024 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 10025 ;;  u16coil         2   26[COMRAM] unsigned short 
 10026 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 10027 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 10028 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 10029 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      unsigned char 
 10032 ;; Registers used:
 10033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10034 ;; Tracked objects:
 10035 ;;		On entry : E/1
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10039 ;;      Params:         2       0       0       0       0       0       0
 10040 ;;      Locals:        12       0       0       0       0       0       0
 10041 ;;      Temps:          3       0       0       0       0       0       0
 10042 ;;      Totals:        17       0       0       0       0       0       0
 10043 ;;Total ram usage:       17 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    4
 10046 ;; This function calls:
 10047 ;;		_ModbusSendTxBuffer
 10048 ;; This function is called by:
 10049 ;;		_ModbusPoll
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           	psect	text48
 10054  0016C8                     __ptext48:
 10055                           	opt stack 0
 10056  0016C8                     _ModbusProcess_FC1:
 10057                           	opt stack 25
 10058                           
 10059                           ;incstack = 0
 10060  0016C8  FFFF               	dw	65535
 10061                           
 10062                           ;ModbusRtu.c: 831: uint8_t u8currentBit, u8bytesno, u8bitsno;
 10063                           ;ModbusRtu.c: 832: uint8_t u8CopyBufferSize;
 10064                           ;ModbusRtu.c: 833: uint16_t u16currentCoil, u16coil;
 10065                           ;ModbusRtu.c: 836: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 10066  0016CA  0101               	movlb	1	; () banked
 10067  0016CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10068  0016CE  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10069  0016D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10070  0016D2  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 10071  0016D4  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 10072                           
 10073                           ; BSR set to: 1
 10074                           ;ModbusRtu.c: 837: _lastAddress = u16StartCoil;
 10075  0016D8  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 10076  0016DC  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 10077                           
 10078                           ;ModbusRtu.c: 838: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 10079  0016E0  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10080  0016E2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10081  0016E4  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10082  0016E6  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 10083  0016E8  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 10084                           
 10085                           ; BSR set to: 1
 10086                           ;ModbusRtu.c: 839: _lastCount = u16Coilno;
 10087  0016EC  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 10088  0016F0  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 10089                           
 10090                           ; BSR set to: 1
 10091                           ;ModbusRtu.c: 841: u8bytesno = (uint8_t) (u16Coilno / 8);
 10092  0016F4  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10093  0016F8  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 10094  0016FC  90D8               	bcf	status,0,c
 10095  0016FE  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10096  001700  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10097  001702  90D8               	bcf	status,0,c
 10098  001704  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10099  001706  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10100  001708  90D8               	bcf	status,0,c
 10101  00170A  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10102  00170C  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10103  00170E  5018               	movf	??_ModbusProcess_FC1,w,c
 10104  001710  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 10105                           
 10106                           ; BSR set to: 1
 10107                           ;ModbusRtu.c: 842: if (u16Coilno % 8 != 0)
 10108  001712  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10109  001716  0E07               	movlw	7
 10110  001718  1618               	andwf	??_ModbusProcess_FC1,f,c
 10111  00171A  E001               	bz	l5606
 10112                           
 10113                           ; BSR set to: 1
 10114                           ;ModbusRtu.c: 843: u8bytesno++;
 10115  00171C  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 10116  00171E                     l5606:
 10117                           
 10118                           ; BSR set to: 1
 10119                           ;ModbusRtu.c: 844: _au8Buffer[ ADD_HI ] = u8bytesno;
 10120  00171E  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 10121                           
 10122                           ; BSR set to: 1
 10123                           ;ModbusRtu.c: 845: _u8BufferSize = ADD_LO;
 10124  001722  0E03               	movlw	3
 10125  001724  6E72               	movwf	__u8BufferSize,c
 10126                           
 10127                           ; BSR set to: 1
 10128                           ;ModbusRtu.c: 848: u8bitsno = 0;
 10129  001726  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10130                           
 10131                           ; BSR set to: 1
 10132                           ;ModbusRtu.c: 850: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 10133  001728  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 10134  00172A  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 10135  00172C  D04F               	goto	l5632
 10136  00172E                     l5614:
 10137                           
 10138                           ;ModbusRtu.c: 851: {
 10139                           ;ModbusRtu.c: 852: u16coil = u16StartCoil + u16currentCoil;
 10140  00172E  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 10141  001730  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 10142  001732  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 10143  001734  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 10144  001736  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 10145  001738  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 10146                           
 10147                           ;ModbusRtu.c: 854: u8currentBit = (uint8_t) u16coil;
 10148  00173A  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 10149                           
 10150                           ;ModbusRtu.c: 856: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 10151  00173E  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 10152  001742  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 10153  001746  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 10154  00174A  2A18               	incf	??_ModbusProcess_FC1,f,c
 10155  00174C  D004               	goto	u4854
 10156  00174E                     u4855:
 10157  00174E  FFFF               	dw	65535	; assembler added errata NOP
 10158  001750  90D8               	bcf	status,0,c
 10159  001752  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 10160  001754  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10161  001756                     u4854:
 10162  001756  FFFF               	dw	65535	; assembler added errata NOP
 10163  001758  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10164  00175A  D7F9               	goto	u4855
 10165  00175C  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 10166  00175E  D015               	goto	l5622
 10167  001760  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10168  001764  0E01               	movlw	1
 10169  001766  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10170  001768  2A18               	incf	??_ModbusProcess_FC1,f,c
 10171  00176A  D003               	goto	u4874
 10172  00176C                     u4875:
 10173  00176C  FFFF               	dw	65535	; assembler added errata NOP
 10174  00176E  90D8               	bcf	status,0,c
 10175  001770  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10176  001772                     u4874:
 10177  001772  FFFF               	dw	65535	; assembler added errata NOP
 10178  001774  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10179  001776  D7FA               	goto	u4875
 10180  001778  0E00               	movlw	low __au8Buffer
 10181  00177A  2472               	addwf	__u8BufferSize,w,c
 10182  00177C  6ED9               	movwf	fsr2l,c
 10183  00177E  6ADA               	clrf	fsr2h,c
 10184  001780  0E01               	movlw	high __au8Buffer
 10185  001782  22DA               	addwfc	fsr2h,f,c
 10186  001784  5019               	movf	??_ModbusProcess_FC1+1,w,c
 10187  001786  12DF               	iorwf	indf2,f,c
 10188  001788  D017               	goto	l5624
 10189  00178A                     l5622:
 10190  00178A  FFFF               	dw	65535	; assembler added errata NOP
 10191  00178C  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10192  001790  0E01               	movlw	1
 10193  001792  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10194  001794  2A18               	incf	??_ModbusProcess_FC1,f,c
 10195  001796  D003               	goto	u4884
 10196  001798                     u4885:
 10197  001798  FFFF               	dw	65535	; assembler added errata NOP
 10198  00179A  90D8               	bcf	status,0,c
 10199  00179C  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10200  00179E                     u4884:
 10201  00179E  FFFF               	dw	65535	; assembler added errata NOP
 10202  0017A0  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10203  0017A2  D7FA               	goto	u4885
 10204  0017A4  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 10205  0017A6  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 10206  0017A8  0E00               	movlw	low __au8Buffer
 10207  0017AA  2472               	addwf	__u8BufferSize,w,c
 10208  0017AC  6ED9               	movwf	fsr2l,c
 10209  0017AE  6ADA               	clrf	fsr2h,c
 10210  0017B0  0E01               	movlw	high __au8Buffer
 10211  0017B2  22DA               	addwfc	fsr2h,f,c
 10212  0017B4  501A               	movf	??_ModbusProcess_FC1+2,w,c
 10213  0017B6  16DF               	andwf	indf2,f,c
 10214  0017B8                     l5624:
 10215  0017B8  FFFF               	dw	65535	; assembler added errata NOP
 10216                           
 10217                           ;ModbusRtu.c: 860: u8bitsno++;
 10218  0017BA  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 10219                           
 10220                           ;ModbusRtu.c: 862: if (u8bitsno > 7)
 10221  0017BC  0E07               	movlw	7
 10222  0017BE  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 10223  0017C0  D002               	goto	l758
 10224                           
 10225                           ;ModbusRtu.c: 863: {
 10226                           ;ModbusRtu.c: 864: u8bitsno = 0;
 10227  0017C2  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10228                           
 10229                           ;ModbusRtu.c: 865: _u8BufferSize++;
 10230  0017C4  2A72               	incf	__u8BufferSize,f,c
 10231  0017C6                     l758:
 10232  0017C6  FFFF               	dw	65535	; assembler added errata NOP
 10233  0017C8  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 10234  0017CA  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 10235  0017CC                     l5632:
 10236  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 10237  0017CE  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 10238  0017D0  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 10239  0017D2  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 10240  0017D4  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 10241  0017D6  E3AB               	bnc	l5614
 10242                           
 10243                           ;ModbusRtu.c: 866: }
 10244                           ;ModbusRtu.c: 867: }
 10245                           ;ModbusRtu.c: 870: if (u16Coilno % 8 != 0)
 10246  0017D8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10247  0017DC  0E07               	movlw	7
 10248  0017DE  1618               	andwf	??_ModbusProcess_FC1,f,c
 10249  0017E0  E001               	bz	l5638
 10250                           
 10251                           ;ModbusRtu.c: 871: _u8BufferSize++;
 10252  0017E2  2A72               	incf	__u8BufferSize,f,c
 10253  0017E4                     l5638:
 10254                           
 10255                           ;ModbusRtu.c: 872: u8CopyBufferSize = _u8BufferSize + 2;
 10256  0017E4  5072               	movf	__u8BufferSize,w,c
 10257  0017E6  0F02               	addlw	2
 10258  0017E8  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 10259                           
 10260                           ;ModbusRtu.c: 873: ModbusSendTxBuffer();
 10261  0017EA  EC2C  F014         	call	_ModbusSendTxBuffer	;wreg free
 10262                           
 10263                           ;ModbusRtu.c: 874: return u8CopyBufferSize;
 10264  0017EE  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 10265  0017F0  0012               	return		;funcret
 10266  0017F2  FFFF               	dw	65535	; errata NOP
 10267  0017F4                     __end_of_ModbusProcess_FC1:
 10268                           	opt stack 0
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           intcon	equ	0xFF2
 10276                           postinc0	equ	0xFEE
 10277                           wreg	equ	0xFE8
 10278                           indf1	equ	0xFE7
 10279                           postinc1	equ	0xFE6
 10280                           postdec1	equ	0xFE5
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           plusw2	equ	0xFDB
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function _ModbusSendTxBuffer *****************
 10292 ;; Defined at:
 10293 ;;		line 549 in file "ModbusRtu.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  u16crc          2   19[COMRAM] unsigned short 
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/1
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10307 ;;      Params:         0       0       0       0       0       0       0
 10308 ;;      Locals:         2       0       0       0       0       0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0
 10310 ;;      Totals:         2       0       0       0       0       0       0
 10311 ;;Total ram usage:        2 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    3
 10314 ;; This function calls:
 10315 ;;		_ModbusCalcCRC
 10316 ;;		_PortWrite
 10317 ;;		_millis
 10318 ;; This function is called by:
 10319 ;;		_ModbusPoll
 10320 ;;		_ModbusProcess_FC1
 10321 ;;		_ModbusProcess_FC3
 10322 ;;		_ModbusProcess_FC5
 10323 ;;		_ModbusProcess_FC6
 10324 ;;		_ModbusProcess_FC7
 10325 ;;		_ModbusProcess_FC15
 10326 ;;		_ModbusProcess_FC16
 10327 ;;		_ModbusProcess_FC17
 10328 ;;		_ModbusProcess_FC21
 10329 ;;		_ModbusProcess_FC43
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           	psect	text49
 10334  002858                     __ptext49:
 10335                           	opt stack 0
 10336  002858                     _ModbusSendTxBuffer:
 10337                           	opt stack 26
 10338                           
 10339                           ;incstack = 0
 10340  002858  FFFF               	dw	65535
 10341                           
 10342                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10343  00285A  5072               	movf	__u8BufferSize,w,c
 10344  00285C  EC55  F012         	call	_ModbusCalcCRC
 10345  002860  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10346  002864  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10347                           
 10348                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10349  002868  0E00               	movlw	low __au8Buffer
 10350  00286A  2472               	addwf	__u8BufferSize,w,c
 10351  00286C  6ED9               	movwf	fsr2l,c
 10352  00286E  6ADA               	clrf	fsr2h,c
 10353  002870  0E01               	movlw	high __au8Buffer
 10354  002872  22DA               	addwfc	fsr2h,f,c
 10355  002874  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10356                           
 10357                           ;ModbusRtu.c: 556: _u8BufferSize++;
 10358  002878  2A72               	incf	__u8BufferSize,f,c
 10359                           
 10360                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10361  00287A  0E00               	movlw	low __au8Buffer
 10362  00287C  2472               	addwf	__u8BufferSize,w,c
 10363  00287E  6ED9               	movwf	fsr2l,c
 10364  002880  6ADA               	clrf	fsr2h,c
 10365  002882  0E01               	movlw	high __au8Buffer
 10366  002884  22DA               	addwfc	fsr2h,f,c
 10367  002886  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10368                           
 10369                           ;ModbusRtu.c: 558: _u8BufferSize++;
 10370  00288A  2A72               	incf	__u8BufferSize,f,c
 10371                           
 10372                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
 10373  00288C  0E00               	movlw	low __au8Buffer
 10374  00288E  6E07               	movwf	PortWrite@buf,c
 10375  002890  0E01               	movlw	high __au8Buffer
 10376  002892  6E08               	movwf	PortWrite@buf+1,c
 10377  002894  C072  F009         	movff	__u8BufferSize,PortWrite@buflen
 10378  002898  EC1E  F015         	call	_PortWrite	;wreg free
 10379                           
 10380                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
 10381  00289C  6A72               	clrf	__u8BufferSize,c
 10382                           
 10383                           ;ModbusRtu.c: 574: _u16OutCnt++;
 10384  00289E  EFCC  F015         	goto	_millis	;wreg free
 10385  0028A2  FFFF               	dw	65535	; errata NOP
 10386  0028A4                     __end_of_ModbusSendTxBuffer:
 10387                           	opt stack 0
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           postinc0	equ	0xFEE
 10396                           wreg	equ	0xFE8
 10397                           indf1	equ	0xFE7
 10398                           postinc1	equ	0xFE6
 10399                           postdec1	equ	0xFE5
 10400                           fsr1h	equ	0xFE2
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           plusw2	equ	0xFDB
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _millis *****************
 10411 ;; Defined at:
 10412 ;;		line 236 in file "interrupts.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  ret             4   10[COMRAM] unsigned long 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  4    6[COMRAM] unsigned long 
 10419 ;; Registers used:
 10420 ;;		None
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/1
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10426 ;;      Params:         4       0       0       0       0       0       0
 10427 ;;      Locals:         4       0       0       0       0       0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0
 10429 ;;      Totals:         8       0       0       0       0       0       0
 10430 ;;Total ram usage:        8 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    2
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_SoundPlayNextStep
 10437 ;;		_main
 10438 ;;		_ModbusPoll
 10439 ;;		_ModbusSendTxBuffer
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           	psect	text50
 10444  002B98                     __ptext50:
 10445                           	opt stack 0
 10446  002B98                     _millis:
 10447                           	opt stack 28
 10448                           
 10449                           ;incstack = 0
 10450  002B98  FFFF               	dw	65535
 10451                           
 10452                           ;interrupts.c: 239: (INTCONbits.GIE = 0);
 10453  002B9A  9EF2               	bcf	intcon,7,c	;volatile
 10454                           
 10455                           ;interrupts.c: 240: unsigned long ret = millisecondsFromStart;
 10456  002B9C  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 10457  002BA0  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 10458  002BA4  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 10459  002BA8  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 10460                           
 10461                           ;interrupts.c: 241: (INTCONbits.GIE = 1);
 10462  002BAC  8EF2               	bsf	intcon,7,c	;volatile
 10463                           
 10464                           ;interrupts.c: 242: return ret;
 10465  002BAE  C00B  F007         	movff	millis@ret,?_millis
 10466  002BB2  C00C  F008         	movff	millis@ret+1,?_millis+1
 10467  002BB6  C00D  F009         	movff	millis@ret+2,?_millis+2
 10468  002BBA  C00E  F00A         	movff	millis@ret+3,?_millis+3
 10469  002BBE  0012               	return		;funcret
 10470  002BC0  FFFF               	dw	65535	; errata NOP
 10471  002BC2                     __end_of_millis:
 10472                           	opt stack 0
 10473                           tblptru	equ	0xFF8
 10474                           tblptrh	equ	0xFF7
 10475                           tblptrl	equ	0xFF6
 10476                           tablat	equ	0xFF5
 10477                           prodh	equ	0xFF4
 10478                           prodl	equ	0xFF3
 10479                           intcon	equ	0xFF2
 10480                           postinc0	equ	0xFEE
 10481                           wreg	equ	0xFE8
 10482                           indf1	equ	0xFE7
 10483                           postinc1	equ	0xFE6
 10484                           postdec1	equ	0xFE5
 10485                           fsr1h	equ	0xFE2
 10486                           fsr1l	equ	0xFE1
 10487                           indf2	equ	0xFDF
 10488                           postinc2	equ	0xFDE
 10489                           postdec2	equ	0xFDD
 10490                           plusw2	equ	0xFDB
 10491                           fsr2h	equ	0xFDA
 10492                           fsr2l	equ	0xFD9
 10493                           status	equ	0xFD8
 10494                           
 10495 ;; *************** function _PortWrite *****************
 10496 ;; Defined at:
 10497 ;;		line 93 in file "interrupts.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;  buf             2    6[COMRAM] PTR unsigned char 
 10500 ;;		 -> _au8Buffer(140), 
 10501 ;;  buflen          1    8[COMRAM] unsigned char 
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;  i               1    9[COMRAM] unsigned char 
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      void 
 10506 ;; Registers used:
 10507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/1
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10513 ;;      Params:         3       0       0       0       0       0       0
 10514 ;;      Locals:         1       0       0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0
 10516 ;;      Totals:         4       0       0       0       0       0       0
 10517 ;;Total ram usage:        4 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    2
 10520 ;; This function calls:
 10521 ;;		Nothing
 10522 ;; This function is called by:
 10523 ;;		_ModbusSendTxBuffer
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text51
 10528  002A3C                     __ptext51:
 10529                           	opt stack 0
 10530  002A3C                     _PortWrite:
 10531                           	opt stack 26
 10532                           
 10533                           ;incstack = 0
 10534  002A3C  FFFF               	dw	65535
 10535                           
 10536                           ;interrupts.c: 95: LATCbits.LATC5 = 1;
 10537  002A3E  8A8B               	bsf	3979,5,c	;volatile
 10538                           
 10539                           ;interrupts.c: 96: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 10540  002A40  0E06               	movlw	6
 10541  002A42                     u5427:
 10542  002A42  FFFF               	dw	65535	; errata NOP
 10543  002A44  2EE8               	decfsz	wreg,f,c
 10544  002A46  D7FD               	goto	u5427
 10545  002A48  F000               	nop	
 10546                           
 10547                           ;interrupts.c: 97: for(uint8_t i = 0; i < buflen; i++)
 10548  002A4A  6A0A               	clrf	PortWrite@i,c
 10549  002A4C  D00C               	goto	l3426
 10550  002A4E                     l69:
 10551  002A4E  FFFF               	dw	65535	; assembler added errata NOP
 10552  002A50  A2AC               	btfss	4012,1,c	;volatile
 10553  002A52  D7FD               	goto	l69
 10554                           
 10555                           ;interrupts.c: 100: TXREG = buf[i];
 10556  002A54  500A               	movf	PortWrite@i,w,c
 10557  002A56  2407               	addwf	PortWrite@buf,w,c
 10558  002A58  6ED9               	movwf	fsr2l,c
 10559  002A5A  0E00               	movlw	0
 10560  002A5C  2008               	addwfc	PortWrite@buf+1,w,c
 10561  002A5E  6EDA               	movwf	fsr2h,c
 10562  002A60  50DF               	movf	indf2,w,c
 10563  002A62  6EAD               	movwf	4013,c	;volatile
 10564  002A64  2A0A               	incf	PortWrite@i,f,c
 10565  002A66                     l3426:
 10566  002A66  FFFF               	dw	65535	; assembler added errata NOP
 10567  002A68  5009               	movf	PortWrite@buflen,w,c
 10568  002A6A  5C0A               	subwf	PortWrite@i,w,c
 10569  002A6C  E3F0               	bnc	l69
 10570  002A6E                     l73:
 10571  002A6E  FFFF               	dw	65535	; assembler added errata NOP
 10572  002A70  A2AC               	btfss	4012,1,c	;volatile
 10573  002A72  D7FD               	goto	l73
 10574                           
 10575                           ;interrupts.c: 103: LATCbits.LATC5 = 0;
 10576  002A74  9A8B               	bcf	3979,5,c	;volatile
 10577  002A76  0012               	return		;funcret
 10578  002A78  FFFF               	dw	65535	; errata NOP
 10579  002A7A                     __end_of_PortWrite:
 10580                           	opt stack 0
 10581                           tblptru	equ	0xFF8
 10582                           tblptrh	equ	0xFF7
 10583                           tblptrl	equ	0xFF6
 10584                           tablat	equ	0xFF5
 10585                           prodh	equ	0xFF4
 10586                           prodl	equ	0xFF3
 10587                           intcon	equ	0xFF2
 10588                           postinc0	equ	0xFEE
 10589                           wreg	equ	0xFE8
 10590                           indf1	equ	0xFE7
 10591                           postinc1	equ	0xFE6
 10592                           postdec1	equ	0xFE5
 10593                           fsr1h	equ	0xFE2
 10594                           fsr1l	equ	0xFE1
 10595                           indf2	equ	0xFDF
 10596                           postinc2	equ	0xFDE
 10597                           postdec2	equ	0xFDD
 10598                           plusw2	equ	0xFDB
 10599                           fsr2h	equ	0xFDA
 10600                           fsr2l	equ	0xFD9
 10601                           status	equ	0xFD8
 10602                           
 10603 ;; *************** function _ModbusCalcCRC *****************
 10604 ;; Defined at:
 10605 ;;		line 659 in file "ModbusRtu.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;  u8length        1    wreg     unsigned char 
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;  u8length        1   14[COMRAM] unsigned char 
 10610 ;;  j               1   16[COMRAM] unsigned char 
 10611 ;;  i               1   15[COMRAM] unsigned char 
 10612 ;;  temp            2   17[COMRAM] unsigned int 
 10613 ;;  flag            2   12[COMRAM] unsigned int 
 10614 ;;  temp2           2   10[COMRAM] unsigned int 
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  2    6[COMRAM] unsigned short 
 10617 ;; Registers used:
 10618 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/1
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10624 ;;      Params:         2       0       0       0       0       0       0
 10625 ;;      Locals:         9       0       0       0       0       0       0
 10626 ;;      Temps:          2       0       0       0       0       0       0
 10627 ;;      Totals:        13       0       0       0       0       0       0
 10628 ;;Total ram usage:       13 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    2
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_ModbusSendTxBuffer
 10635 ;;		_ModbusValidateRequest
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           	psect	text52
 10640  0024AA                     __ptext52:
 10641                           	opt stack 0
 10642  0024AA                     _ModbusCalcCRC:
 10643                           	opt stack 26
 10644                           
 10645                           ;incstack = 0
 10646  0024AA  FFFF               	dw	65535
 10647                           
 10648                           ;ModbusCalcCRC@u8length stored from wreg
 10649  0024AC  6E0F               	movwf	ModbusCalcCRC@u8length,c
 10650                           
 10651                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
 10652                           ;ModbusRtu.c: 662: temp = 0xFFFF;
 10653  0024AE  6812               	setf	ModbusCalcCRC@temp,c
 10654  0024B0  6813               	setf	ModbusCalcCRC@temp+1,c
 10655                           
 10656                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
 10657  0024B2  6A10               	clrf	ModbusCalcCRC@i,c
 10658  0024B4  D01E               	goto	l3624
 10659  0024B6                     l3602:
 10660                           
 10661                           ;ModbusRtu.c: 664: {
 10662                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
 10663  0024B6  0E00               	movlw	low __au8Buffer
 10664  0024B8  2410               	addwf	ModbusCalcCRC@i,w,c
 10665  0024BA  6ED9               	movwf	fsr2l,c
 10666  0024BC  6ADA               	clrf	fsr2h,c
 10667  0024BE  0E01               	movlw	high __au8Buffer
 10668  0024C0  22DA               	addwfc	fsr2h,f,c
 10669  0024C2  50DF               	movf	indf2,w,c
 10670  0024C4  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10671                           
 10672                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
 10673  0024C6  0E01               	movlw	1
 10674  0024C8  6E11               	movwf	ModbusCalcCRC@j,c
 10675  0024CA                     l3610:
 10676  0024CA  FFFF               	dw	65535	; assembler added errata NOP
 10677                           
 10678                           ;ModbusRtu.c: 667: {
 10679                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
 10680  0024CC  0E01               	movlw	1
 10681  0024CE  1412               	andwf	ModbusCalcCRC@temp,w,c
 10682  0024D0  6E0D               	movwf	ModbusCalcCRC@flag,c
 10683  0024D2  6A0E               	clrf	ModbusCalcCRC@flag+1,c
 10684                           
 10685                           ;ModbusRtu.c: 669: temp >>= 1;
 10686  0024D4  90D8               	bcf	status,0,c
 10687  0024D6  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 10688  0024D8  3212               	rrcf	ModbusCalcCRC@temp,f,c
 10689                           
 10690                           ;ModbusRtu.c: 670: if (flag)
 10691  0024DA  500D               	movf	ModbusCalcCRC@flag,w,c
 10692  0024DC  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
 10693  0024DE  E004               	bz	l3618
 10694                           
 10695                           ;ModbusRtu.c: 671: temp ^= 0xA001;
 10696  0024E0  0E01               	movlw	1
 10697  0024E2  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10698  0024E4  0EA0               	movlw	160
 10699  0024E6  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 10700  0024E8                     l3618:
 10701  0024E8  2A11               	incf	ModbusCalcCRC@j,f,c
 10702  0024EA  0E08               	movlw	8
 10703  0024EC  6411               	cpfsgt	ModbusCalcCRC@j,c
 10704  0024EE  D7ED               	goto	l3610
 10705  0024F0  2A10               	incf	ModbusCalcCRC@i,f,c
 10706  0024F2                     l3624:
 10707  0024F2  FFFF               	dw	65535	; assembler added errata NOP
 10708  0024F4  500F               	movf	ModbusCalcCRC@u8length,w,c
 10709  0024F6  5C10               	subwf	ModbusCalcCRC@i,w,c
 10710  0024F8  E3DE               	bnc	l3602
 10711                           
 10712                           ;ModbusRtu.c: 672: }
 10713                           ;ModbusRtu.c: 673: }
 10714                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
 10715  0024FA  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 10716  0024FE  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
 10717                           
 10718                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
 10719  002500  5012               	movf	ModbusCalcCRC@temp,w,c
 10720  002502  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 10721  002504  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 10722  002506  500B               	movf	ModbusCalcCRC@temp2,w,c
 10723  002508  1009               	iorwf	??_ModbusCalcCRC,w,c
 10724  00250A  6E12               	movwf	ModbusCalcCRC@temp,c
 10725  00250C  500C               	movf	ModbusCalcCRC@temp2+1,w,c
 10726  00250E  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 10727  002510  6E13               	movwf	ModbusCalcCRC@temp+1,c
 10728                           
 10729                           ;ModbusRtu.c: 680: return temp;
 10730  002512  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 10731  002516  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 10732  00251A  0012               	return		;funcret
 10733  00251C  FFFF               	dw	65535	; errata NOP
 10734  00251E                     __end_of_ModbusCalcCRC:
 10735                           	opt stack 0
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           postinc0	equ	0xFEE
 10744                           wreg	equ	0xFE8
 10745                           indf1	equ	0xFE7
 10746                           postinc1	equ	0xFE6
 10747                           postdec1	equ	0xFE5
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           plusw2	equ	0xFDB
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function _ModbusGetRxBuffer *****************
 10759 ;; Defined at:
 10760 ;;		line 509 in file "ModbusRtu.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      unsigned char 
 10767 ;; Registers used:
 10768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : F/0
 10771 ;;		On exit  : F/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10774 ;;      Params:         0       0       0       0       0       0       0
 10775 ;;      Locals:         1       0       0       0       0       0       0
 10776 ;;      Temps:          1       0       0       0       0       0       0
 10777 ;;      Totals:         2       0       0       0       0       0       0
 10778 ;;Total ram usage:        2 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    3
 10781 ;; This function calls:
 10782 ;;		_PortAvailable
 10783 ;;		_PortRead
 10784 ;; This function is called by:
 10785 ;;		_ModbusPoll
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           	psect	text53
 10790  002978                     __ptext53:
 10791                           	opt stack 0
 10792  002978                     _ModbusGetRxBuffer:
 10793                           	opt stack 26
 10794                           
 10795                           ;incstack = 0
 10796  002978  FFFF               	dw	65535
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
 10800  00297A  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 10801                           
 10802                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
 10803  00297C  6A72               	clrf	__u8BufferSize,c
 10804                           
 10805                           ;ModbusRtu.c: 518: while (PortAvailable())
 10806  00297E  D011               	goto	l3940
 10807  002980                     l3932:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;ModbusRtu.c: 519: {
 10811                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
 10812  002980  EC3D  F015         	call	_PortRead	;wreg free
 10813  002984  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 10814  002986  0E00               	movlw	low __au8Buffer
 10815  002988  2472               	addwf	__u8BufferSize,w,c
 10816  00298A  6ED9               	movwf	fsr2l,c
 10817  00298C  6ADA               	clrf	fsr2h,c
 10818  00298E  0E01               	movlw	high __au8Buffer
 10819  002990  22DA               	addwfc	fsr2h,f,c
 10820  002992  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;ModbusRtu.c: 522: _u8BufferSize++;
 10824  002996  2A72               	incf	__u8BufferSize,f,c
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
 10828  002998  0E8B               	movlw	139
 10829  00299A  6472               	cpfsgt	__u8BufferSize,c
 10830  00299C  D002               	goto	l3940
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
 10834  00299E  0E01               	movlw	1
 10835  0029A0  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 10836  0029A2                     l3940:
 10837  0029A2  FFFF               	dw	65535	; assembler added errata NOP
 10838                           
 10839                           ; BSR set to: 0
 10840  0029A4  EC6A  F016         	call	_PortAvailable	;wreg free
 10841  0029A8  0900               	iorlw	0
 10842  0029AA  E1EA               	bnz	l3932
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;ModbusRtu.c: 530: {
 10846                           ;ModbusRtu.c: 531: _u16errCnt++;
 10847  0029AC  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 10848  0029AE  E002               	bz	l3948
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
 10852  0029B0  0EFD               	movlw	253
 10853  0029B2  D001               	goto	l690
 10854  0029B4                     l3948:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;ModbusRtu.c: 533: }
 10858                           ;ModbusRtu.c: 534: return _u8BufferSize;
 10859  0029B4  5072               	movf	__u8BufferSize,w,c
 10860  0029B6                     l690:
 10861  0029B6  FFFF               	dw	65535	; assembler added errata NOP
 10862                           
 10863                           ; BSR set to: 0
 10864  0029B8  0012               	return		;funcret
 10865  0029BA  FFFF               	dw	65535	; errata NOP
 10866  0029BC                     __end_of_ModbusGetRxBuffer:
 10867                           	opt stack 0
 10868                           tblptru	equ	0xFF8
 10869                           tblptrh	equ	0xFF7
 10870                           tblptrl	equ	0xFF6
 10871                           tablat	equ	0xFF5
 10872                           prodh	equ	0xFF4
 10873                           prodl	equ	0xFF3
 10874                           intcon	equ	0xFF2
 10875                           postinc0	equ	0xFEE
 10876                           wreg	equ	0xFE8
 10877                           indf1	equ	0xFE7
 10878                           postinc1	equ	0xFE6
 10879                           postdec1	equ	0xFE5
 10880                           fsr1h	equ	0xFE2
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           plusw2	equ	0xFDB
 10886                           fsr2h	equ	0xFDA
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _PortRead *****************
 10891 ;; Defined at:
 10892 ;;		line 57 in file "interrupts.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  ret             1    6[COMRAM] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      unsigned char 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10901 ;; Tracked objects:
 10902 ;;		On entry : F/0
 10903 ;;		On exit  : F/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10906 ;;      Params:         0       0       0       0       0       0       0
 10907 ;;      Locals:         1       0       0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0
 10909 ;;      Totals:         1       0       0       0       0       0       0
 10910 ;;Total ram usage:        1 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    2
 10913 ;; This function calls:
 10914 ;;		Nothing
 10915 ;; This function is called by:
 10916 ;;		_ModbusGetRxBuffer
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text54
 10921  002A7A                     __ptext54:
 10922                           	opt stack 0
 10923  002A7A                     _PortRead:
 10924                           	opt stack 26
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;incstack = 0
 10928  002A7A  FFFF               	dw	65535
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 10932  002A7C  9EF2               	bcf	intcon,7,c	;volatile
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;interrupts.c: 60: if(UartBufferLen > 0)
 10936  002A7E  51C9               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10937  002A80  E012               	bz	l61
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;interrupts.c: 61: {
 10941                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 10942  002A82  0E00               	movlw	low _UartRingBuffer
 10943  002A84  246F               	addwf	_UartBufferTail,w,c	;volatile
 10944  002A86  6ED9               	movwf	fsr2l,c
 10945  002A88  6ADA               	clrf	fsr2h,c
 10946  002A8A  0E02               	movlw	high _UartRingBuffer
 10947  002A8C  22DA               	addwfc	fsr2h,f,c
 10948  002A8E  50DF               	movf	indf2,w,c
 10949  002A90  6E07               	movwf	PortRead@ret,c
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;interrupts.c: 64: UartBufferLen--;
 10953  002A92  07C9               	decf	_UartBufferLen& (0+255),f,b	;volatile
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 10957  002A94  286F               	incf	_UartBufferTail,w,c
 10958  002A96  E102               	bnz	l3648
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;interrupts.c: 66: UartBufferTail = 0;
 10962  002A98  6A6F               	clrf	_UartBufferTail,c	;volatile
 10963  002A9A  D001               	goto	l3650
 10964  002A9C                     l3648:
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;interrupts.c: 67: else
 10968                           ;interrupts.c: 68: UartBufferTail++;
 10969  002A9C  2A6F               	incf	_UartBufferTail,f,c	;volatile
 10970  002A9E                     l3650:
 10971  002A9E  FFFF               	dw	65535	; assembler added errata NOP
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 10975  002AA0  8EF2               	bsf	intcon,7,c	;volatile
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;interrupts.c: 70: return ret;
 10979  002AA2  5007               	movf	PortRead@ret,w,c
 10980  002AA4  D002               	goto	l64
 10981  002AA6                     l61:
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;interrupts.c: 71: }
 10985                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 10986  002AA6  8EF2               	bsf	intcon,7,c	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;interrupts.c: 73: return 0;
 10990  002AA8  0E00               	movlw	0
 10991  002AAA                     l64:
 10992  002AAA  FFFF               	dw	65535	; assembler added errata NOP
 10993                           
 10994                           ; BSR set to: 0
 10995  002AAC  0012               	return		;funcret
 10996  002AAE  FFFF               	dw	65535	; errata NOP
 10997  002AB0                     __end_of_PortRead:
 10998                           	opt stack 0
 10999                           tblptru	equ	0xFF8
 11000                           tblptrh	equ	0xFF7
 11001                           tblptrl	equ	0xFF6
 11002                           tablat	equ	0xFF5
 11003                           prodh	equ	0xFF4
 11004                           prodl	equ	0xFF3
 11005                           intcon	equ	0xFF2
 11006                           postinc0	equ	0xFEE
 11007                           wreg	equ	0xFE8
 11008                           indf1	equ	0xFE7
 11009                           postinc1	equ	0xFE6
 11010                           postdec1	equ	0xFE5
 11011                           fsr1h	equ	0xFE2
 11012                           fsr1l	equ	0xFE1
 11013                           indf2	equ	0xFDF
 11014                           postinc2	equ	0xFDE
 11015                           postdec2	equ	0xFDD
 11016                           plusw2	equ	0xFDB
 11017                           fsr2h	equ	0xFDA
 11018                           fsr2l	equ	0xFD9
 11019                           status	equ	0xFD8
 11020                           
 11021 ;; *************** function _PortAvailable *****************
 11022 ;; Defined at:
 11023 ;;		line 52 in file "interrupts.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;		None
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;		None
 11028 ;; Return value:  Size  Location     Type
 11029 ;;                  1    wreg      unsigned char 
 11030 ;; Registers used:
 11031 ;;		wreg, status,2
 11032 ;; Tracked objects:
 11033 ;;		On entry : F/0
 11034 ;;		On exit  : F/0
 11035 ;;		Unchanged: 0/0
 11036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11037 ;;      Params:         0       0       0       0       0       0       0
 11038 ;;      Locals:         0       0       0       0       0       0       0
 11039 ;;      Temps:          0       0       0       0       0       0       0
 11040 ;;      Totals:         0       0       0       0       0       0       0
 11041 ;;Total ram usage:        0 bytes
 11042 ;; Hardware stack levels used:    1
 11043 ;; Hardware stack levels required when called:    2
 11044 ;; This function calls:
 11045 ;;		Nothing
 11046 ;; This function is called by:
 11047 ;;		_ModbusPoll
 11048 ;;		_ModbusGetRxBuffer
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           	psect	text55
 11053  002CD4                     __ptext55:
 11054                           	opt stack 0
 11055  002CD4                     _PortAvailable:
 11056                           	opt stack 27
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;incstack = 0
 11060  002CD4  FFFF               	dw	65535
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;interrupts.c: 54: return UartBufferLen;
 11064  002CD6  51C9               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11065                           
 11066                           ; BSR set to: 0
 11067  002CD8  0012               	return		;funcret
 11068  002CDA  FFFF               	dw	65535	; errata NOP
 11069  002CDC                     __end_of_PortAvailable:
 11070                           	opt stack 0
 11071                           tblptru	equ	0xFF8
 11072                           tblptrh	equ	0xFF7
 11073                           tblptrl	equ	0xFF6
 11074                           tablat	equ	0xFF5
 11075                           prodh	equ	0xFF4
 11076                           prodl	equ	0xFF3
 11077                           intcon	equ	0xFF2
 11078                           postinc0	equ	0xFEE
 11079                           wreg	equ	0xFE8
 11080                           indf1	equ	0xFE7
 11081                           postinc1	equ	0xFE6
 11082                           postdec1	equ	0xFE5
 11083                           fsr1h	equ	0xFE2
 11084                           fsr1l	equ	0xFE1
 11085                           indf2	equ	0xFDF
 11086                           postinc2	equ	0xFDE
 11087                           postdec2	equ	0xFDD
 11088                           plusw2	equ	0xFDB
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function _ModbusBuildException *****************
 11094 ;; Defined at:
 11095 ;;		line 800 in file "ModbusRtu.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  u8exception     1    wreg     unsigned char 
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;  u8exception     1    6[COMRAM] unsigned char 
 11100 ;;  u8func          1    7[COMRAM] unsigned char 
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg, status,2, status,0
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/1
 11107 ;;		On exit  : F/1
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11110 ;;      Params:         0       0       0       0       0       0       0
 11111 ;;      Locals:         2       0       0       0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0
 11113 ;;      Totals:         2       0       0       0       0       0       0
 11114 ;;Total ram usage:        2 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    2
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_ModbusPoll
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text56
 11125  002BE8                     __ptext56:
 11126                           	opt stack 0
 11127  002BE8                     _ModbusBuildException:
 11128                           	opt stack 27
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;incstack = 0
 11132  002BE8  FFFF               	dw	65535
 11133                           
 11134                           ;ModbusBuildException@u8exception stored from wreg
 11135  002BEA  6E07               	movwf	ModbusBuildException@u8exception,c
 11136                           
 11137                           ;ModbusRtu.c: 802: uint8_t u8func = _au8Buffer[ FUNC ];
 11138  002BEC  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 11139                           
 11140                           ;ModbusRtu.c: 804: _au8Buffer[ ID ] = _u8id;
 11141  002BF0  C0D2  F100         	movff	__u8id,__au8Buffer
 11142                           
 11143                           ;ModbusRtu.c: 805: _au8Buffer[ FUNC ] = u8func + 0x80;
 11144  002BF4  5008               	movf	ModbusBuildException@u8func,w,c
 11145  002BF6  0F80               	addlw	128
 11146  002BF8  0101               	movlb	1	; () banked
 11147  002BFA  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 11148                           
 11149                           ; BSR set to: 1
 11150                           ;ModbusRtu.c: 806: _au8Buffer[ 2 ] = u8exception;
 11151  002BFC  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 11152                           
 11153                           ; BSR set to: 1
 11154                           ;ModbusRtu.c: 807: _u8BufferSize = EXCEPTION_SIZE;
 11155  002C00  0E03               	movlw	3
 11156  002C02  6E72               	movwf	__u8BufferSize,c
 11157                           
 11158                           ; BSR set to: 1
 11159  002C04  0C03               	retlw	3	;funcret
 11160  002C06  FFFF               	dw	65535	; errata NOP
 11161  002C08                     __end_of_ModbusBuildException:
 11162                           	opt stack 0
 11163                           tblptru	equ	0xFF8
 11164                           tblptrh	equ	0xFF7
 11165                           tblptrl	equ	0xFF6
 11166                           tablat	equ	0xFF5
 11167                           prodh	equ	0xFF4
 11168                           prodl	equ	0xFF3
 11169                           intcon	equ	0xFF2
 11170                           postinc0	equ	0xFEE
 11171                           wreg	equ	0xFE8
 11172                           indf1	equ	0xFE7
 11173                           postinc1	equ	0xFE6
 11174                           postdec1	equ	0xFE5
 11175                           fsr1h	equ	0xFE2
 11176                           fsr1l	equ	0xFE1
 11177                           indf2	equ	0xFDF
 11178                           postinc2	equ	0xFDE
 11179                           postdec2	equ	0xFDD
 11180                           plusw2	equ	0xFDB
 11181                           fsr2h	equ	0xFDA
 11182                           fsr2l	equ	0xFD9
 11183                           status	equ	0xFD8
 11184                           
 11185 ;; *************** function _InitApp *****************
 11186 ;; Defined at:
 11187 ;;		line 66 in file "user.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;		None
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;  i               1    6[COMRAM] unsigned char 
 11192 ;; Return value:  Size  Location     Type
 11193 ;;                  1    wreg      void 
 11194 ;; Registers used:
 11195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11196 ;; Tracked objects:
 11197 ;;		On entry : 0/0
 11198 ;;		On exit  : 0/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11201 ;;      Params:         0       0       0       0       0       0       0
 11202 ;;      Locals:         1       0       0       0       0       0       0
 11203 ;;      Temps:          0       0       0       0       0       0       0
 11204 ;;      Totals:         1       0       0       0       0       0       0
 11205 ;;Total ram usage:        1 bytes
 11206 ;; Hardware stack levels used:    1
 11207 ;; Hardware stack levels required when called:    3
 11208 ;; This function calls:
 11209 ;;		_InitUartBuffer
 11210 ;;		_PortBegin
 11211 ;; This function is called by:
 11212 ;;		_main
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text57
 11217  002426                     __ptext57:
 11218                           	opt stack 0
 11219  002426                     _InitApp:
 11220                           	opt stack 27
 11221                           
 11222                           ; BSR set to: 1
 11223                           ;incstack = 0
 11224  002426  FFFF               	dw	65535
 11225                           
 11226                           ;user.c: 77: INTCONbits.PEIE = 1;
 11227  002428  8CF2               	bsf	intcon,6,c	;volatile
 11228                           
 11229                           ;user.c: 78: (INTCONbits.GIE = 1);
 11230  00242A  8EF2               	bsf	intcon,7,c	;volatile
 11231                           
 11232                           ;user.c: 79: RCONbits.IPEN = 1;
 11233  00242C  8ED0               	bsf	4048,7,c	;volatile
 11234                           
 11235                           ;user.c: 84: T1CONbits.RD16 = 1;
 11236  00242E  8ECD               	bsf	4045,7,c	;volatile
 11237                           
 11238                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 11239  002430  94CD               	bcf	4045,2,c	;volatile
 11240                           
 11241                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 11242  002432  92CD               	bcf	4045,1,c	;volatile
 11243                           
 11244                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 11245  002434  0ECF               	movlw	-49
 11246  002436  16CD               	andwf	4045,f,c	;volatile
 11247                           
 11248                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 11249  002438  809D               	bsf	3997,0,c	;volatile
 11250                           
 11251                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 11252  00243A  809F               	bsf	3999,0,c	;volatile
 11253                           
 11254                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 11255  00243C  0EF6               	movlw	246
 11256  00243E  6ECF               	movwf	4047,c	;volatile
 11257  002440  0E3C               	movlw	60
 11258  002442  6ECE               	movwf	4046,c	;volatile
 11259                           
 11260                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 11261  002444  909E               	bcf	3998,0,c	;volatile
 11262                           
 11263                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 11264  002446  80CD               	bsf	4045,0,c	;volatile
 11265                           
 11266                           ;user.c: 103: T0CONbits.T08BIT = 0;
 11267  002448  9CD5               	bcf	4053,6,c	;volatile
 11268                           
 11269                           ;user.c: 104: T0CONbits.T0CS = 0;
 11270  00244A  9AD5               	bcf	4053,5,c	;volatile
 11271                           
 11272                           ;user.c: 106: T0CONbits.PSA = 0;
 11273  00244C  96D5               	bcf	4053,3,c	;volatile
 11274                           
 11275                           ;user.c: 117: T0CONbits.T0PS = 7;
 11276  00244E  0E07               	movlw	7
 11277  002450  12D5               	iorwf	4053,f,c	;volatile
 11278                           
 11279                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 11280  002452  8AF2               	bsf	intcon,5,c	;volatile
 11281                           
 11282                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 11283  002454  84F1               	bsf	intcon2,2,c	;volatile
 11284                           
 11285                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 0) * 6)>>8),TMR0L=((0x10000
      +                           - (10000000L/4 / 256 + 0) * 6)&0xFF)));
 11286  002456  0E1B               	movlw	27
 11287  002458  6ED7               	movwf	4055,c	;volatile
 11288  00245A  0E22               	movlw	34
 11289  00245C  6ED6               	movwf	4054,c	;volatile
 11290                           
 11291                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 11292  00245E  94F2               	bcf	intcon,2,c	;volatile
 11293                           
 11294                           ;user.c: 133: InitUartBuffer();
 11295  002460  EC5F  F016         	call	_InitUartBuffer	;wreg free
 11296                           
 11297                           ;user.c: 135: PortBegin();
 11298  002464  EC21  F016         	call	_PortBegin	;wreg free
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;user.c: 136: PIE1bits.RCIE = 1;
 11302  002468  8A9D               	bsf	3997,5,c	;volatile
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;user.c: 138: IPR1bits.RCIP = 0;
 11306  00246A  9A9F               	bcf	3999,5,c	;volatile
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 11310  00246C  6A07               	clrf	InitApp@i,c
 11311  00246E                     l4710:
 11312  00246E  FFFF               	dw	65535	; assembler added errata NOP
 11313                           
 11314                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 11315  002470  5007               	movf	InitApp@i,w,c
 11316  002472  0D02               	mullw	2
 11317  002474  0EAA               	movlw	low __MODBUSInputRegs
 11318  002476  24F3               	addwf	prodl,w,c
 11319  002478  6ED9               	movwf	fsr2l,c
 11320  00247A  0E01               	movlw	high __MODBUSInputRegs
 11321  00247C  20F4               	addwfc	prodh,w,c
 11322  00247E  6EDA               	movwf	fsr2h,c
 11323  002480  6ADE               	clrf	postinc2,c
 11324  002482  6ADD               	clrf	postdec2,c
 11325  002484  2A07               	incf	InitApp@i,f,c
 11326  002486  0E0E               	movlw	14
 11327  002488  6407               	cpfsgt	InitApp@i,c
 11328  00248A  D7F1               	goto	l4710
 11329                           
 11330                           ;user.c: 149: TRISB = 0;
 11331  00248C  6A93               	clrf	3987,c	;volatile
 11332                           
 11333                           ;user.c: 152: LATAbits.LATA0 = 0;
 11334  00248E  9089               	bcf	3977,0,c	;volatile
 11335                           
 11336                           ;user.c: 153: LATAbits.LATA1 = 0;
 11337  002490  9289               	bcf	3977,1,c	;volatile
 11338                           
 11339                           ;user.c: 154: LATAbits.LATA2 = 0;
 11340  002492  9489               	bcf	3977,2,c	;volatile
 11341                           
 11342                           ;user.c: 155: LATAbits.LATA3 = 0;
 11343  002494  9689               	bcf	3977,3,c	;volatile
 11344                           
 11345                           ;user.c: 156: TRISAbits.RA0 = 0;
 11346  002496  9092               	bcf	3986,0,c	;volatile
 11347                           
 11348                           ;user.c: 157: TRISAbits.RA1 = 0;
 11349  002498  9292               	bcf	3986,1,c	;volatile
 11350                           
 11351                           ;user.c: 158: TRISAbits.RA2 = 0;
 11352  00249A  9492               	bcf	3986,2,c	;volatile
 11353                           
 11354                           ;user.c: 159: TRISAbits.RA3 = 0;
 11355  00249C  9692               	bcf	3986,3,c	;volatile
 11356                           
 11357                           ;user.c: 161: TRISCbits.RC3 = 1;
 11358  00249E  8694               	bsf	3988,3,c	;volatile
 11359                           
 11360                           ;user.c: 162: TRISCbits.RC1 = 1;
 11361  0024A0  8294               	bsf	3988,1,c	;volatile
 11362                           
 11363                           ;user.c: 163: TRISCbits.RC0 = 0;
 11364  0024A2  9094               	bcf	3988,0,c	;volatile
 11365                           
 11366                           ;user.c: 165: LATCbits.LATC2 = 0;
 11367  0024A4  948B               	bcf	3979,2,c	;volatile
 11368  0024A6  0012               	return		;funcret
 11369  0024A8  FFFF               	dw	65535	; errata NOP
 11370  0024AA                     __end_of_InitApp:
 11371                           	opt stack 0
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           intcon	equ	0xFF2
 11379                           intcon2	equ	0xFF1
 11380                           postinc0	equ	0xFEE
 11381                           wreg	equ	0xFE8
 11382                           indf1	equ	0xFE7
 11383                           postinc1	equ	0xFE6
 11384                           postdec1	equ	0xFE5
 11385                           fsr1h	equ	0xFE2
 11386                           fsr1l	equ	0xFE1
 11387                           indf2	equ	0xFDF
 11388                           postinc2	equ	0xFDE
 11389                           postdec2	equ	0xFDD
 11390                           plusw2	equ	0xFDB
 11391                           fsr2h	equ	0xFDA
 11392                           fsr2l	equ	0xFD9
 11393                           status	equ	0xFD8
 11394                           
 11395 ;; *************** function _PortBegin *****************
 11396 ;; Defined at:
 11397 ;;		line 48 in file "user.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;		None
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;		None
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  1    wreg      void 
 11404 ;; Registers used:
 11405 ;;		wreg, status,2
 11406 ;; Tracked objects:
 11407 ;;		On entry : F/0
 11408 ;;		On exit  : F/0
 11409 ;;		Unchanged: F/0
 11410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11411 ;;      Params:         0       0       0       0       0       0       0
 11412 ;;      Locals:         0       0       0       0       0       0       0
 11413 ;;      Temps:          0       0       0       0       0       0       0
 11414 ;;      Totals:         0       0       0       0       0       0       0
 11415 ;;Total ram usage:        0 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:    2
 11418 ;; This function calls:
 11419 ;;		Nothing
 11420 ;; This function is called by:
 11421 ;;		_InitApp
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           	psect	text58
 11426  002C42                     __ptext58:
 11427                           	opt stack 0
 11428  002C42                     _PortBegin:
 11429                           	opt stack 27
 11430                           
 11431                           ;incstack = 0
 11432  002C42  FFFF               	dw	65535
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;user.c: 50: TXSTA = 0;
 11436  002C44  6AAC               	clrf	4012,c	;volatile
 11437                           
 11438                           ;user.c: 51: TXSTAbits.TXEN = 1;
 11439  002C46  8AAC               	bsf	4012,5,c	;volatile
 11440                           
 11441                           ;user.c: 52: TXSTAbits.BRGH = 1;
 11442  002C48  84AC               	bsf	4012,2,c	;volatile
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 11446  002C4A  0E40               	movlw	64
 11447  002C4C  6EAF               	movwf	4015,c	;volatile
 11448                           
 11449                           ; BSR set to: 0
 11450                           ;user.c: 55: RCSTA = 0;
 11451  002C4E  6AAB               	clrf	4011,c	;volatile
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;user.c: 56: RCSTAbits.SPEN = 1;
 11455  002C50  8EAB               	bsf	4011,7,c	;volatile
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;user.c: 57: RCSTAbits.CREN = 1;
 11459  002C52  88AB               	bsf	4011,4,c	;volatile
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;user.c: 59: TRISCbits.RC5 = 0;
 11463  002C54  9A94               	bcf	3988,5,c	;volatile
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;user.c: 60: LATCbits.LATC5 = 0;
 11467  002C56  9A8B               	bcf	3979,5,c	;volatile
 11468                           
 11469                           ; BSR set to: 0
 11470  002C58  0012               	return		;funcret
 11471  002C5A  FFFF               	dw	65535	; errata NOP
 11472  002C5C                     __end_of_PortBegin:
 11473                           	opt stack 0
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           postinc0	equ	0xFEE
 11483                           wreg	equ	0xFE8
 11484                           indf1	equ	0xFE7
 11485                           postinc1	equ	0xFE6
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           plusw2	equ	0xFDB
 11493                           fsr2h	equ	0xFDA
 11494                           fsr2l	equ	0xFD9
 11495                           status	equ	0xFD8
 11496                           
 11497 ;; *************** function _InitUartBuffer *****************
 11498 ;; Defined at:
 11499 ;;		line 43 in file "interrupts.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      void 
 11506 ;; Registers used:
 11507 ;;		None
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : F/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11513 ;;      Params:         0       0       0       0       0       0       0
 11514 ;;      Locals:         0       0       0       0       0       0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0
 11516 ;;      Totals:         0       0       0       0       0       0       0
 11517 ;;Total ram usage:        0 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    2
 11520 ;; This function calls:
 11521 ;;		Nothing
 11522 ;; This function is called by:
 11523 ;;		_InitApp
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text59
 11528  002CBE                     __ptext59:
 11529                           	opt stack 0
 11530  002CBE                     _InitUartBuffer:
 11531                           	opt stack 27
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;incstack = 0
 11535  002CBE  FFFF               	dw	65535
 11536                           
 11537                           ;interrupts.c: 45: UartBufferHead = 0;
 11538  002CC0  0100               	movlb	0	; () banked
 11539  002CC2  6BC8               	clrf	_UartBufferHead& (0+255),b
 11540                           
 11541                           ;interrupts.c: 46: UartBufferTail = 0;
 11542  002CC4  6A6F               	clrf	_UartBufferTail,c	;volatile
 11543                           
 11544                           ;interrupts.c: 47: UartBufferLen = 0;
 11545  002CC6  6BC9               	clrf	_UartBufferLen& (0+255),b	;volatile
 11546                           
 11547                           ; BSR set to: 0
 11548  002CC8  0012               	return		;funcret
 11549  002CCA  FFFF               	dw	65535	; errata NOP
 11550  002CCC                     __end_of_InitUartBuffer:
 11551                           	opt stack 0
 11552                           tblptru	equ	0xFF8
 11553                           tblptrh	equ	0xFF7
 11554                           tblptrl	equ	0xFF6
 11555                           tablat	equ	0xFF5
 11556                           prodh	equ	0xFF4
 11557                           prodl	equ	0xFF3
 11558                           intcon	equ	0xFF2
 11559                           intcon2	equ	0xFF1
 11560                           postinc0	equ	0xFEE
 11561                           wreg	equ	0xFE8
 11562                           indf1	equ	0xFE7
 11563                           postinc1	equ	0xFE6
 11564                           postdec1	equ	0xFE5
 11565                           fsr1h	equ	0xFE2
 11566                           fsr1l	equ	0xFE1
 11567                           indf2	equ	0xFDF
 11568                           postinc2	equ	0xFDE
 11569                           postdec2	equ	0xFDD
 11570                           plusw2	equ	0xFDB
 11571                           fsr2h	equ	0xFDA
 11572                           fsr2l	equ	0xFD9
 11573                           status	equ	0xFD8
 11574                           
 11575 ;; *************** function _ConfigureOscillator *****************
 11576 ;; Defined at:
 11577 ;;		line 86 in file "system.c"
 11578 ;; Parameters:    Size  Location     Type
 11579 ;;		None
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;		None
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  1    wreg      void 
 11584 ;; Registers used:
 11585 ;;		None
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11591 ;;      Params:         0       0       0       0       0       0       0
 11592 ;;      Locals:         0       0       0       0       0       0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0
 11594 ;;      Totals:         0       0       0       0       0       0       0
 11595 ;;Total ram usage:        0 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    2
 11598 ;; This function calls:
 11599 ;;		Nothing
 11600 ;; This function is called by:
 11601 ;;		_main
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           	psect	text60
 11606  002CDC                     __ptext60:
 11607                           	opt stack 0
 11608  002CDC                     _ConfigureOscillator:
 11609                           	opt stack 28
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;incstack = 0
 11613  002CDC  FFFF               	dw	65535
 11614  002CDE  0012               	return		;funcret
 11615  002CE0  FFFF               	dw	65535	; errata NOP
 11616  002CE2                     __end_of_ConfigureOscillator:
 11617                           	opt stack 0
 11618                           tblptru	equ	0xFF8
 11619                           tblptrh	equ	0xFF7
 11620                           tblptrl	equ	0xFF6
 11621                           tablat	equ	0xFF5
 11622                           prodh	equ	0xFF4
 11623                           prodl	equ	0xFF3
 11624                           intcon	equ	0xFF2
 11625                           intcon2	equ	0xFF1
 11626                           postinc0	equ	0xFEE
 11627                           wreg	equ	0xFE8
 11628                           indf1	equ	0xFE7
 11629                           postinc1	equ	0xFE6
 11630                           postdec1	equ	0xFE5
 11631                           fsr1h	equ	0xFE2
 11632                           fsr1l	equ	0xFE1
 11633                           indf2	equ	0xFDF
 11634                           postinc2	equ	0xFDE
 11635                           postdec2	equ	0xFDD
 11636                           plusw2	equ	0xFDB
 11637                           fsr2h	equ	0xFDA
 11638                           fsr2l	equ	0xFD9
 11639                           status	equ	0xFD8
 11640                           
 11641 ;; *************** function _AddSecond *****************
 11642 ;; Defined at:
 11643 ;;		line 180 in file "user.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;		None
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;		None
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      void 
 11650 ;; Registers used:
 11651 ;;		wreg, status,2, status,0
 11652 ;; Tracked objects:
 11653 ;;		On entry : F/0
 11654 ;;		On exit  : F/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11657 ;;      Params:         0       0       0       0       0       0       0
 11658 ;;      Locals:         0       0       0       0       0       0       0
 11659 ;;      Temps:          0       0       0       0       0       0       0
 11660 ;;      Totals:         0       0       0       0       0       0       0
 11661 ;;Total ram usage:        0 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    2
 11664 ;; This function calls:
 11665 ;;		Nothing
 11666 ;; This function is called by:
 11667 ;;		_main
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           	psect	text61
 11672  002CAE                     __ptext61:
 11673                           	opt stack 0
 11674  002CAE                     _AddSecond:
 11675                           	opt stack 28
 11676                           
 11677                           ;incstack = 0
 11678  002CAE  FFFF               	dw	65535
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;user.c: 182: currentTime++;
 11682  002CB0  2BD9               	incf	_currentTime& (0+255),f,b
 11683  002CB2  0E00               	movlw	0
 11684  002CB4  23DA               	addwfc	(_currentTime+1)& (0+255),f,b
 11685  002CB6  23DB               	addwfc	(_currentTime+2)& (0+255),f,b
 11686  002CB8  23DC               	addwfc	(_currentTime+3)& (0+255),f,b
 11687                           
 11688                           ; BSR set to: 0
 11689  002CBA  0C00               	retlw	0	;funcret
 11690  002CBC  FFFF               	dw	65535	; errata NOP
 11691  002CBE                     __end_of_AddSecond:
 11692                           	opt stack 0
 11693                           tblptru	equ	0xFF8
 11694                           tblptrh	equ	0xFF7
 11695                           tblptrl	equ	0xFF6
 11696                           tablat	equ	0xFF5
 11697                           prodh	equ	0xFF4
 11698                           prodl	equ	0xFF3
 11699                           intcon	equ	0xFF2
 11700                           intcon2	equ	0xFF1
 11701                           postinc0	equ	0xFEE
 11702                           wreg	equ	0xFE8
 11703                           indf1	equ	0xFE7
 11704                           postinc1	equ	0xFE6
 11705                           postdec1	equ	0xFE5
 11706                           fsr1h	equ	0xFE2
 11707                           fsr1l	equ	0xFE1
 11708                           indf2	equ	0xFDF
 11709                           postinc2	equ	0xFDE
 11710                           postdec2	equ	0xFDD
 11711                           plusw2	equ	0xFDB
 11712                           fsr2h	equ	0xFDA
 11713                           fsr2l	equ	0xFD9
 11714                           status	equ	0xFD8
 11715                           
 11716 ;; *************** function _low_isr *****************
 11717 ;; Defined at:
 11718 ;;		line 172 in file "interrupts.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;		None
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  c               1    5[COMRAM] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      void 
 11725 ;; Registers used:
 11726 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11732 ;;      Params:         0       0       0       0       0       0       0
 11733 ;;      Locals:         1       0       0       0       0       0       0
 11734 ;;      Temps:          5       0       0       0       0       0       0
 11735 ;;      Totals:         6       0       0       0       0       0       0
 11736 ;;Total ram usage:        6 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    1
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		Interrupt level 1
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           	psect	intcodelo
 11747  000018                     __pintcodelo:
 11748                           	opt stack 0
 11749  000018                     _low_isr:
 11750                           	opt stack 0
 11751  000018  FFFF               	dw	65535	; assembler added errata NOP
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;incstack = 0
 11755  00001A  8078               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11756  00001C  FFFF               	dw	65535	; errata NOP
 11757  00001E  CFD8 F001          	movff	status,??_low_isr
 11758  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 11759  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 11760  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 11761  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 11762                           
 11763                           ;interrupts.c: 186: if (PIR1bits.RCIF && PIE1bits.RCIE)
 11764  000032  BA9E               	btfsc	3998,5,c	;volatile
 11765  000034  AA9D               	btfss	3997,5,c	;volatile
 11766  000036  D016               	goto	i1l92
 11767  000038                     i1l93:
 11768  000038  FFFF               	dw	65535	; assembler added errata NOP
 11769  00003A  AA9E               	btfss	3998,5,c	;volatile
 11770  00003C  D7FD               	goto	i1l93
 11771                           
 11772                           ;interrupts.c: 200: uint8_t c = RCREG;
 11773  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 11774                           
 11775                           ;interrupts.c: 203: UartRingBuffer[UartBufferHead] = c;
 11776  000042  0E00               	movlw	low _UartRingBuffer
 11777  000044  0100               	movlb	0	; () banked
 11778  000046  25C8               	addwf	_UartBufferHead& (0+255),w,b
 11779  000048  6ED9               	movwf	fsr2l,c
 11780  00004A  6ADA               	clrf	fsr2h,c
 11781  00004C  0E02               	movlw	high _UartRingBuffer
 11782  00004E  22DA               	addwfc	fsr2h,f,c
 11783  000050  C006  FFDF         	movff	low_isr@c,indf2
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;interrupts.c: 204: UartBufferLen++;
 11787  000054  2BC9               	incf	_UartBufferLen& (0+255),f,b	;volatile
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;interrupts.c: 205: if(UartBufferHead == 256u - 1)
 11791  000056  29C8               	incf	_UartBufferHead& (0+255),w,b
 11792  000058  E102               	bnz	i1l4948
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;interrupts.c: 206: UartBufferHead = 0;
 11796  00005A  6BC8               	clrf	_UartBufferHead& (0+255),b
 11797  00005C  D001               	goto	i1l4950
 11798  00005E                     i1l4948:
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;interrupts.c: 207: else
 11802                           ;interrupts.c: 208: UartBufferHead++;
 11803  00005E  2BC8               	incf	_UartBufferHead& (0+255),f,b
 11804  000060                     i1l4950:
 11805  000060  FFFF               	dw	65535	; assembler added errata NOP
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;interrupts.c: 211: PIR1bits.RCIF = 0;
 11809  000062  9A9E               	bcf	3998,5,c	;volatile
 11810  000064                     i1l92:
 11811  000064  FFFF               	dw	65535	; assembler added errata NOP
 11812  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 11813  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 11814  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 11815  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 11816  000076  C001  FFD8         	movff	??_low_isr,status
 11817  00007A  9078               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11818  00007C  0010               	retfie	
 11819  00007E  FFFF               	dw	65535	; errata NOP
 11820  000080                     __end_of_low_isr:
 11821                           	opt stack 0
 11822                           tblptru	equ	0xFF8
 11823                           tblptrh	equ	0xFF7
 11824                           tblptrl	equ	0xFF6
 11825                           tablat	equ	0xFF5
 11826                           prodh	equ	0xFF4
 11827                           prodl	equ	0xFF3
 11828                           intcon	equ	0xFF2
 11829                           intcon2	equ	0xFF1
 11830                           postinc0	equ	0xFEE
 11831                           wreg	equ	0xFE8
 11832                           indf1	equ	0xFE7
 11833                           postinc1	equ	0xFE6
 11834                           postdec1	equ	0xFE5
 11835                           fsr1h	equ	0xFE2
 11836                           fsr1l	equ	0xFE1
 11837                           bsr	equ	0xFE0
 11838                           indf2	equ	0xFDF
 11839                           postinc2	equ	0xFDE
 11840                           postdec2	equ	0xFDD
 11841                           plusw2	equ	0xFDB
 11842                           fsr2h	equ	0xFDA
 11843                           fsr2l	equ	0xFD9
 11844                           status	equ	0xFD8
 11845                           
 11846 ;; *************** function _high_isr *****************
 11847 ;; Defined at:
 11848 ;;		line 113 in file "interrupts.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;		None
 11851 ;; Auto vars:     Size  Location     Type
 11852 ;;		None
 11853 ;; Return value:  Size  Location     Type
 11854 ;;                  1    wreg      void 
 11855 ;; Registers used:
 11856 ;;		wreg, status,2, status,0
 11857 ;; Tracked objects:
 11858 ;;		On entry : 0/0
 11859 ;;		On exit  : 0/0
 11860 ;;		Unchanged: 0/0
 11861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11862 ;;      Params:         0       0       0       0       0       0       0
 11863 ;;      Locals:         0       0       0       0       0       0       0
 11864 ;;      Temps:          0       0       0       0       0       0       0
 11865 ;;      Totals:         0       0       0       0       0       0       0
 11866 ;;Total ram usage:        0 bytes
 11867 ;; Hardware stack levels used:    1
 11868 ;; This function calls:
 11869 ;;		Nothing
 11870 ;; This function is called by:
 11871 ;;		Interrupt level 2
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           	psect	intcode
 11876  000008                     __pintcode:
 11877                           	opt stack 0
 11878  000008                     _high_isr:
 11879                           	opt stack 0
 11880  000008  FFFF               	dw	65535	; assembler added errata NOP
 11881                           
 11882                           ;incstack = 0
 11883  00000A  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11884  00000C  FFFF               	dw	65535	; errata NOP
 11885  00000E  EF8A  F013         	goto	int_func
 11886                           tblptru	equ	0xFF8
 11887                           tblptrh	equ	0xFF7
 11888                           tblptrl	equ	0xFF6
 11889                           tablat	equ	0xFF5
 11890                           prodh	equ	0xFF4
 11891                           prodl	equ	0xFF3
 11892                           intcon	equ	0xFF2
 11893                           intcon2	equ	0xFF1
 11894                           postinc0	equ	0xFEE
 11895                           wreg	equ	0xFE8
 11896                           indf1	equ	0xFE7
 11897                           postinc1	equ	0xFE6
 11898                           postdec1	equ	0xFE5
 11899                           fsr1h	equ	0xFE2
 11900                           fsr1l	equ	0xFE1
 11901                           bsr	equ	0xFE0
 11902                           indf2	equ	0xFDF
 11903                           postinc2	equ	0xFDE
 11904                           postdec2	equ	0xFDD
 11905                           plusw2	equ	0xFDB
 11906                           fsr2h	equ	0xFDA
 11907                           fsr2l	equ	0xFD9
 11908                           status	equ	0xFD8
 11909                           
 11910                           	psect	intcode_body
 11911  002714                     __pintcode_body:
 11912                           	opt stack 22
 11913  002714                     int_func:
 11914                           	opt stack 22
 11915  002714  FFFF               	dw	65535	; errata NOP
 11916                           
 11917                           ;interrupts.c: 134: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 11918  002716  B09E               	btfsc	3998,0,c	;volatile
 11919  002718  A09D               	btfss	3997,0,c	;volatile
 11920  00271A  D00C               	goto	i2l79
 11921                           
 11922                           ;interrupts.c: 135: {
 11923                           ;interrupts.c: 136: PIR1bits.TMR1IF = 0;
 11924  00271C  909E               	bcf	3998,0,c	;volatile
 11925                           
 11926                           ;interrupts.c: 137: millisecondsFromStart++;
 11927  00271E  0100               	movlb	0	; () banked
 11928  002720  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 11929  002722  0E00               	movlw	0
 11930  002724  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 11931  002726  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 11932  002728  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;interrupts.c: 138: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 11936  00272A  0EF6               	movlw	246
 11937  00272C  6ECF               	movwf	4047,c	;volatile
 11938                           
 11939                           ; BSR set to: 0
 11940  00272E  0E3C               	movlw	60
 11941  002730  6ECE               	movwf	4046,c	;volatile
 11942  002732  D018               	goto	i2l80
 11943  002734                     i2l79:
 11944  002734  FFFF               	dw	65535	; assembler added errata NOP
 11945                           
 11946                           ;interrupts.c: 140: }
 11947                           ;interrupts.c: 142: if(INTCONbits.TMR0IF)
 11948  002736  A4F2               	btfss	intcon,2,c	;volatile
 11949  002738  D015               	goto	i2l80
 11950                           
 11951                           ;interrupts.c: 143: {
 11952                           ;interrupts.c: 144: INTCONbits.TMR0IF = 0;
 11953  00273A  94F2               	bcf	intcon,2,c	;volatile
 11954                           
 11955                           ;interrupts.c: 145: _6sCounter++;
 11956  00273C  0100               	movlb	0	; () banked
 11957  00273E  2BCA               	incf	__6sCounter& (0+255),f,b	;volatile
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;interrupts.c: 146: if(_6sCounter == 10)
 11961  002740  0E0A               	movlw	10
 11962  002742  19CA               	xorwf	__6sCounter& (0+255),w,b	;volatile
 11963  002744  E10B               	bnz	i2l4928
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;interrupts.c: 147: {
 11967                           ;interrupts.c: 148: _6sCounter = 0;
 11968  002746  6BCA               	clrf	__6sCounter& (0+255),b	;volatile
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;interrupts.c: 149: globalMinutes++;
 11972  002748  2A74               	incf	_globalMinutes,f,c	;volatile
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;interrupts.c: 150: if(globalMinutes == 60)
 11976  00274A  0E3C               	movlw	60
 11977  00274C  1874               	xorwf	_globalMinutes,w,c	;volatile
 11978  00274E  E106               	bnz	i2l4928
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;interrupts.c: 151: {
 11982                           ;interrupts.c: 152: globalMinutes = 0;
 11983  002750  6A74               	clrf	_globalMinutes,c	;volatile
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;interrupts.c: 153: globalHours++;
 11987  002752  2A77               	incf	_globalHours,f,c	;volatile
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;interrupts.c: 154: if(globalHours == 24)
 11991  002754  0E18               	movlw	24
 11992  002756  1877               	xorwf	_globalHours,w,c	;volatile
 11993  002758  E101               	bnz	i2l4928
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;interrupts.c: 155: {
 11997                           ;interrupts.c: 156: globalHours = 0;
 11998  00275A  6A77               	clrf	_globalHours,c	;volatile
 11999  00275C                     i2l4928:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;interrupts.c: 157: }
 12003                           ;interrupts.c: 158: }
 12004                           ;interrupts.c: 159: }
 12005                           ;interrupts.c: 160: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 0) * 6)>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 / 256 + 0) * 6)&0xFF)));
 12006  00275C  0E1B               	movlw	27
 12007  00275E  6ED7               	movwf	4055,c	;volatile
 12008  002760  0E22               	movlw	34
 12009  002762  6ED6               	movwf	4054,c	;volatile
 12010  002764                     i2l80:
 12011  002764  FFFF               	dw	65535	; assembler added errata NOP
 12012  002766  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12013  002768  0011               	retfie		f
 12014  00276A  FFFF               	dw	65535	; errata NOP
 12015  00276C                     __end_of_high_isr:
 12016                           	opt stack 0
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           intcon2	equ	0xFF1
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           indf1	equ	0xFE7
 12028                           postinc1	equ	0xFE6
 12029                           postdec1	equ	0xFE5
 12030                           fsr1h	equ	0xFE2
 12031                           fsr1l	equ	0xFE1
 12032                           bsr	equ	0xFE0
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           postdec2	equ	0xFDD
 12036                           plusw2	equ	0xFDB
 12037                           fsr2h	equ	0xFDA
 12038                           fsr2l	equ	0xFD9
 12039                           status	equ	0xFD8
 12040                           tblptru	equ	0xFF8
 12041                           tblptrh	equ	0xFF7
 12042                           tblptrl	equ	0xFF6
 12043                           tablat	equ	0xFF5
 12044                           prodh	equ	0xFF4
 12045                           prodl	equ	0xFF3
 12046                           intcon	equ	0xFF2
 12047                           intcon2	equ	0xFF1
 12048                           postinc0	equ	0xFEE
 12049                           wreg	equ	0xFE8
 12050                           indf1	equ	0xFE7
 12051                           postinc1	equ	0xFE6
 12052                           postdec1	equ	0xFE5
 12053                           fsr1h	equ	0xFE2
 12054                           fsr1l	equ	0xFE1
 12055                           bsr	equ	0xFE0
 12056                           indf2	equ	0xFDF
 12057                           postinc2	equ	0xFDE
 12058                           postdec2	equ	0xFDD
 12059                           plusw2	equ	0xFDB
 12060                           fsr2h	equ	0xFDA
 12061                           fsr2l	equ	0xFD9
 12062                           status	equ	0xFD8
 12063                           
 12064                           	psect	rparam
 12065  0000                     tblptru	equ	0xFF8
 12066                           tblptrh	equ	0xFF7
 12067                           tblptrl	equ	0xFF6
 12068                           tablat	equ	0xFF5
 12069                           prodh	equ	0xFF4
 12070                           prodl	equ	0xFF3
 12071                           intcon	equ	0xFF2
 12072                           intcon2	equ	0xFF1
 12073                           postinc0	equ	0xFEE
 12074                           wreg	equ	0xFE8
 12075                           indf1	equ	0xFE7
 12076                           postinc1	equ	0xFE6
 12077                           postdec1	equ	0xFE5
 12078                           fsr1h	equ	0xFE2
 12079                           fsr1l	equ	0xFE1
 12080                           bsr	equ	0xFE0
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           plusw2	equ	0xFDB
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089                           	psect	temp
 12090  000078                     btemp:
 12091                           	opt stack 0
 12092  000078                     	ds	1
 12093  0000                     int$flags	set	btemp
 12094                           tblptru	equ	0xFF8
 12095                           tblptrh	equ	0xFF7
 12096                           tblptrl	equ	0xFF6
 12097                           tablat	equ	0xFF5
 12098                           prodh	equ	0xFF4
 12099                           prodl	equ	0xFF3
 12100                           intcon	equ	0xFF2
 12101                           intcon2	equ	0xFF1
 12102                           postinc0	equ	0xFEE
 12103                           wreg	equ	0xFE8
 12104                           indf1	equ	0xFE7
 12105                           postinc1	equ	0xFE6
 12106                           postdec1	equ	0xFE5
 12107                           fsr1h	equ	0xFE2
 12108                           fsr1l	equ	0xFE1
 12109                           bsr	equ	0xFE0
 12110                           indf2	equ	0xFDF
 12111                           postinc2	equ	0xFDE
 12112                           postdec2	equ	0xFDD
 12113                           plusw2	equ	0xFDB
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        3
    BSS         558
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     119
    BANK0           128     18     114
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@sec	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   39439
                                            105 COMRAM     5     5      0
                                              7 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             13    13      0   15061
                                            101 COMRAM     4     4      0
                                              0 BANK0      7     7      0
                _CommandSetStatusLed
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                          _PlaySound
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    7336
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    7216
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                          17    15      2    1037
                                             10 COMRAM    17    15      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1314
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CommandSetStatusLed                                  3     3      0    2470
                                             28 COMRAM     3     3      0
                     _LightStatusLed
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     478
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2212
                                             14 COMRAM     5     5      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4242
                                             28 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PlaySound                                            8     6      2     720
                                             20 COMRAM     8     6      2
                            _GetTime
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (3) _SoundPlayNextStep                                    6     6      0     238
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (4) _StopPlaying                                          2     2      0       0
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     658
                                              8 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (5) _getHourMin                                           2     1      1     392
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2144
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   14229
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     608
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     852
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     833
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2820
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1189
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     871
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     707
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1171
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1142
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1291
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     574
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _CommandSetStatusLed
       _LightStatusLed
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _SoundPlayNextStep
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
       _StopPlaying
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getHourMin
         _SetHourMin
           ___lbdiv
           ___lbmod
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      72       5       89.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      77       1       94.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B1      15        0.0%
DATA                 0      0     2B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed May 18 23:44:31 2016

                                                   LoadNextEvent@minute 000C  
                                                         _years_to_days 1A08  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$876 0012  
                                           __end_of_CommandSetStatusLed 25F4  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l61 2AA6  
                                                                    l64 2AAA  
                                                                    l73 2A6E  
                                                                    l69 2A4E  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l103 2B78  
                                                                   l104 2B92  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l240 294C  
                                                                   l401 188A  
                                                                   l241 2956  
                                                                   l242 2972  
                                                                   l261 0AE8  
                                                                   l253 0C6C  
                                                                   l237 2938  
                                                                   l406 202E  
                                                                   l239 2942  
                                                                   l370 1DE2  
                                                                   l434 25EE  
                                                                   l363 2190  
                                                                   l451 1604  
                                                                   l445 15EE  
                                                                   l710 0F5E  
                                                                   l366 217C  
                                                                   l279 1CF6  
                                                                   l447 169A  
                                                                   l439 16C2  
                                                                   l376 1DC6  
                                                                   l705 0F26  
                                                                   l457 1636  
                                                                   l449 1602  
                                                                   l810 21EA  
                                                                   l706 113E  
                                                                   l650 2852  
                                                                   l387 18F8  
                                                                   l654 142A  
                                                                   l719 1136  
                                                                   l690 29B6  
                                                                   l682 2C96  
                                                                   l828 1582  
                                                                   l758 17C6  
                                                                   l789 19E2  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2BE8  
                                                      ProcessDiary@hour 0021  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 2658  
                                                                   wreg 000FE8  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 17F4  
                                                         _globalMinutes 0074  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1237 27B4  
                                                                  l1247 28E0  
                                                                  l1263 2802  
                                                                  l4010 0FD6  
                                                                  l1283 06A6  
                                                                  l4020 0FF4  
                                                                  l4012 0FE2  
                                                                  l4004 0FCC  
                                                                  l4032 1024  
                                                                  l4044 104A  
                                                                  l4080 10EA  
                                                                  l4064 10CC  
                                                                  l6000 12DE  
                                                                  l5040 2800  
                                                                  l3610 24CA  
                                                                  l3602 24B6  
                                                                  l3426 2A66  
                                                                  l4090 10F8  
                                                                  l6010 1308  
                                                                  l5050 2788  
                                                                  l6020 132E  
                                                                  l4500 0D64  
                                                                  l5220 1C56  
                                                                  l5140 2A1C  
                                                                  l5060 27AA  
                                                                  l5052 278E  
                                                                  l4502 0D6C  
                                                                  l5230 1CC8  
                                                                  l5214 1C12  
                                                                  l5134 2A0E  
                                                                  l5150 2A36  
                                                                  l5070 28BC  
                                                                  l3624 24F2  
                                                                  l6040 1356  
                                                                  l6024 1334  
                                                                  l5240 180A  
                                                                  l4600 0E94  
                                                                  l4520 0D9E  
                                                                  l4512 0D86  
                                                                  l5224 1C7C  
                                                                  l5072 28C2  
                                                                  l5048 277E  
                                                                  l3650 2A9E  
                                                                  l3618 24E8  
                                                                  l6050 1374  
                                                                  l5402 1D8A  
                                                                  l4610 0EB6  
                                                                  l4602 0E9C  
                                                                  l4530 0DC0  
                                                                  l4522 0DA6  
                                                                  l4514 0D8C  
                                                                  l4506 0D78  
                                                                  l5226 1C9A  
                                                                  l5218 1C38  
                                                                  l5146 2A2E  
                                                                  l5138 2A16  
                                                                  l6114 15E2  
                                                                  l6044 135A  
                                                                  l5500 0C4C  
                                                                  l5252 183A  
                                                                  l5244 1812  
                                                                  l5332 2182  
                                                                  l5308 211C  
                                                                  l5076 28D6  
                                                                  l5068 28B2  
                                                                  l5180 2286  
                                                                  l4710 246E  
                                                                  l6070 13C0  
                                                                  l6062 13A6  
                                                                  l6054 1382  
                                                                  l6046 1360  
                                                                  l5270 1876  
                                                                  l5262 185C  
                                                                  l5246 1814  
                                                                  l4550 0DFA  
                                                                  l4542 0DE6  
                                                                  l4470 0D0A  
                                                                  l5166 2B62  
                                                                  l5158 2B4A  
                                                                  l5342 06B2  
                                                                  l6150 1664  
                                                                  l6142 162A  
                                                                  l6118 15F2  
                                                                  l3648 2A9C  
                                                                  l5272 187E  
                                                                  l5264 1862  
                                                                  l4608 0EAE  
                                                                  l4536 0DD2  
                                                                  l4528 0DB8  
                                                                  l4616 0EC2  
                                                                  l4464 0CE0  
                                                                  l5184 22B0  
                                                                  l5352 096A  
                                                                  l6152 1674  
                                                                  l6224 1272  
                                                                  l6208 1230  
                                                                  l3770 2686  
                                                                  l6090 13EC  
                                                                  l6082 13E0  
                                                                  l6074 13C6  
                                                                  l6066 13AE  
                                                                  l6058 1394  
                                                                  l5266 1868  
                                                                  l5370 2BC6  
                                                                  l4538 0DDA  
                                                                  l4618 0ED8  
                                                                  l3932 2980  
                                                                  l3940 29A2  
                                                                  l5508 0C54  
                                                                  l5268 186E  
                                                                  l5276 1890  
                                                                  l4572 0E40  
                                                                  l4564 0E26  
                                                                  l4556 0E0C  
                                                                  l4548 0DF4  
                                                                  l4492 0D4A  
                                                                  l4484 0D30  
                                                                  l4476 0D18  
                                                                  l6156 167A  
                                                                  l6228 1292  
                                                                  l6180 1188  
                                                                  l5622 178A  
                                                                  l5614 172E  
                                                                  l5606 171E  
                                                                  l6086 13E6  
                                                                  l6078 13CE  
                                                                  l5278 18BC  
                                                                  l5390 1D2C  
                                                                  l4574 0E48  
                                                                  l4566 0E2E  
                                                                  l4558 0E14  
                                                                  l4494 0D52  
                                                                  l4486 0D38  
                                                                  l4478 0D1E  
                                                                  l6158 16A6  
                                                                  l6190 11BE  
                                                                  l5624 17B8  
                                                                  l5632 17CC  
                                                                  l3776 26AC  
                                                                  l6096 13F2  
                                                                  l5392 1D5E  
                                                                  l3784 2960  
                                                                  l4592 0E7A  
                                                                  l4584 0E62  
                                                                  l5448 2834  
                                                                  l5482 0ABE  
                                                                  l5474 09AE  
                                                                  l5386 1D18  
                                                                  l4594 0E82  
                                                                  l4586 0E68  
                                                                  l4578 0E54  
                                                                  l5538 23F2  
                                                                  l3948 29B4  
                                                                  l3972 0F54  
                                                                  l3964 0F2A  
                                                                  l5492 0BBA  
                                                                  l5484 0B16  
                                                                  l5476 0A44  
                                                                  l5468 0992  
                                                                  l6196 11CE  
                                                                  l5638 17E4  
                                                                  l5734 1938  
                                                                  l5910 1512  
                                                                  l5902 14EA  
                                                                  l3990 0FAE  
                                                                  l3982 0F86  
                                                                  l3974 0F5A  
                                                                  l5590 2B3A  
                                                                  l6198 11D2  
                                                                  l5744 19A2  
                                                                  l5808 252C  
                                                                  l5664 20BA  
                                                                  l3968 0F4C  
                                                                  l5488 0B94  
                                                                  l5576 25C0  
                                                                  l5568 25A0  
                                                                  l5746 19D4  
                                                                  l5754 19E8  
                                                                  l5658 2066  
                                                                  l5914 1526  
                                                                  l5906 14FE  
                                                                  l3994 0FB4  
                                                                  l3986 0F8A  
                                                                  l3978 0F64  
                                                                  l5498 0C30  
                                                                  l5586 2B28  
                                                                  l5860 2220  
                                                                  l5924 154E  
                                                                  l5684 2340  
                                                                  l5940 29CA  
                                                                  l5782 1E24  
                                                                  l5862 2222  
                                                                  l5918 153A  
                                                                  l5686 2372  
                                                                  l5792 1EA0  
                                                                  l5928 156E  
                                                                  l5882 147A  
                                                                  l5874 1446  
                                                                  l5970 1FA6  
                                                                  l5788 1E7C  
                                                                  l5892 14BC  
                                                                  l5894 14C2  
                                                                  l5984 1FEA  
                                                                  l5898 14D6  
                                                                  l5978 1FC4  
                                                                  l5996 12D8  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 2932  
                                                                  u3000 0FAE  
                                                                  u3100 10CA  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u4304 1CDE  
                                                                  u4305 1CD6  
                                                                  u4234 1C2A  
                                                                  u4410 068C  
                                                                  u4235 1C24  
                                                                  u4244 1C4A  
                                                                  u4420 06A6  
                                                                  u4245 1C44  
                                                                  u4190 226E  
                                                                  u4264 1C6E  
                                                                  u4265 1C68  
                                                                  u4274 1C8E  
                                                                  u4514 2826  
                                                                  u4275 1C88  
                                                                  u4515 2820  
                                                                  u2940 0F22  
                                                                  u4604 0A7C  
                                                                  u4524 2846  
                                                                  u4605 0A76  
                                                                  u4525 2840  
                                                                  u4294 1CB6  
                                                                  u4295 1CAE  
                                                                  u4704 0BCE  
                                                                  u4624 0AAA  
                                                                  u4705 0BC8  
                                                                  u4625 0AA4  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u4714 0BF2  
                                                                  u4634 0AD2  
                                                                  u4554 09C2  
                                                                  u5370 11FE  
                                                                  u5427 2A42  
                                                                  u4715 0BEC  
                                                                  u4635 0ACC  
                                                                  u4555 09BC  
                                                                  u2980 0F86  
                                                                  u4644 0AFC  
                                                                  u4564 09EA  
                                                                  _RCIF 007CF5  
                                                                  u4645 0AF6  
                                                                  u4565 09E4  
                                                                  u4805 25AA  
                                                                  u4734 0C1C  
                                                                  u4654 0B2A  
                                                                  u4574 0A14  
                                                                  u4735 0C16  
                                                                  u4655 0B24  
                                                                  u4575 0A0E  
                                                                  u4744 0C44  
                                                                  u4664 0B52  
                                                                  u4584 0A3C  
                                                                  u4745 0C3E  
                                                                  u4665 0B4C  
                                                                  u4585 0A36  
                                                                  u4674 0B78  
                                                                  u4594 0A58  
                                                                  u4675 0B72  
                                                                  u4595 0A52  
                                                                  i1l92 0064  
                                                                  i1l93 0038  
                                                                  u4765 23A2  
                                                                  u4854 1756  
                                                                  u4694 0BA6  
                                                                  u4855 174E  
                                                                  u4695 0BA0  
                                                                  u4775 23C4  
                                                                  i2l80 2764  
                                                                  u4944 232A  
                                                                  u4945 2322  
                                                                  u4874 1772  
                                                                  u4954 2356  
                                                                  u4875 176C  
                                                                  u4955 234E  
                                                                  u4884 179E  
                                                                  u4964 1966  
                                                                  u4885 1798  
                                                                  u4965 1960  
                                                                  i2l79 2734  
                                                                  u4984 198C  
                                                                  u4985 1984  
                                                                  u4994 19B8  
                                                                  u4995 19B0  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 1144  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0078  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2CD4  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0076  
                                                       __end_of_InitApp 24AA  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CA  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2C26  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2A3C  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                       __end_of___lbmod 2B6C  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000C  
                                                       __end_of___lwdiv 27C0  
                                                       __end_of___lwmod 28EC  
                                            __end_of_ModbusSendTxBuffer 28A4  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2CDC  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2388  
                                                        ?_LoadNextEvent 0001  
                                                    ProcessDiary@minute 0022  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D2  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 2978  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 16C8  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00C8  
                                                        _UartBufferTail 006F  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                       ___lbdiv@counter 0009  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2C08  
                                                       __initialization 25F4  
                                                          __end_of_main 12C0  
                                                      __end_of_LightLed 0C72  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 2426  
                                                            _ModbusInit 2C88  
                                                            _ModbusPoll 12C0  
                                                      __end_of_PortRead 2AB0  
                                                        _InitUartBuffer 2CBE  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 1B0A  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1C06  
                                                                i1l4950 0060  
                                                                i1l4948 005E  
                                                                i2l4928 275C  
                                                         _ymd_to_scalar 2242  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 29BC  
                                                         main@oldMinute 00EB  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D6  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2C74  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 276C  
                                             __playingSoundStartPosInEe 0070  
                                                        _UartRingBuffer 0200  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BE  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00EA  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 27C0  
                                                                _millis 2B98  
                                                                clear_0 25FC  
                                                                clear_1 260E  
                                                                clear_2 261A  
                                                     __end_of_AddSecond 2CBE  
                                                                _mktime 066E  
                                                          __lastCommand 00DF  
                                                 __end_of_PortAvailable 2CDC  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 0075  
                                                __end_of_InitUartBuffer 2CCC  
                                                          __MODBUSCoils 00DD  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D1  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2CAE  
                                                __end_of_LightStatusLed 1CFC  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D3  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 264A  
                                                       ___lbmod@counter 0009  
                                            __end_of_ModbusProcess_FC21 2242  
                                            __end_of_ModbusProcess_FC15 1A08  
                                            __end_of_ModbusProcess_FC16 1EB0  
                                            __end_of_ModbusProcess_FC17 258C  
                                            __end_of_ModbusProcess_FC43 1592  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1144  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 24AA  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001B  
                                                      ___lbdiv@quotient 000A  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00E0  
                                                  _ModbusBuildException 2BE8  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1DE6  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2C5C  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2A7A  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2B6C  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0068  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000D  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 2858  
                                                               _GetTime 2CCC  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00CD  
                                                   __end_of_StopPlaying 2C42  
                                                               _InitApp 2426  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2C08  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0170  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 00D8  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                               ___lbdiv 29FE  
                                                               ___lbmod 2B40  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 276C  
                                                               ___lwmod 28A4  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 00FC  
                                                               __pcinit 25F4  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2AB0  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0073  
                                                       __size_of_mktime 0312  
                                                               __ptext0 1144  
                                                               __ptext1 2C9C  
                                                               __ptext2 1592  
                                                               __ptext3 2AE2  
                                                               __ptext4 1EB0  
                                                               __ptext5 066E  
                                                               __ptext6 2242  
                                                               __ptext7 1A08  
                                                               __ptext8 28EC  
                                                               __ptext9 276C  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 1592  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0019  
                                                   __size_of_ResetEvent 0042  
                                              __size_of_SetTimeFromRegs 00C6  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2714  
                                                  end_of_initialization 264A  
                                                         __Lmediumconst 0000  
                                                               int_func 2714  
                                                   __playingSoundCurPos 00D0  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                                        ??_ProcessDiary 001D  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                          _curEventHour 00D4  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2CAE  
                                                        _months_to_days 28EC  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 2978  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     LoadNextEvent@hour 000B  
                                                     _SoundPlayNextStep 20E8  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2C26  
                                           __end_of_ConfigureOscillator 2CE2  
                                                    ?_SoundPlayNextStep 0001  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E7  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F1  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1B0A  
                                                        __end_of_Modbus 2C88  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 2196  
                                                    _ModbusProcess_FC15 18FE  
                                                    _ModbusProcess_FC16 1DE6  
                                                    _ModbusProcess_FC17 251E  
                                                    _ModbusProcess_FC43 1430  
                                                         __pidataCOMRAM 2CE2  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 280C  
                                                        __end_of_millis 2BC2  
                                                __end_of_months_to_days 2932  
                                             __end_of_ModbusGetRxBuffer 29BC  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00C9  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                             __end_of_SoundPlayNextStep 2196  
                                                            ?_AddSecond 0001  
                                                   start_initialization 25F4  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 18FE  
                                                          ??_SetHourMin 000D  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1CFC  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 258C  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 2C9C  
                                                    __end_of_ModbusPoll 1430  
                                                             _PortBegin 2C42  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EE4  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2A3C  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 1C06  
                                                     __holdingRegsCount 00CC  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 29FE  
                                                         __pcstackBANK0 00E0  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 2032  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2764  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001C  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C6  
                                                            ?_PortWrite 0007  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2B40  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2CD4  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001D  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0072  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00AE  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C4  
                                                 io_poll@lastEndAddress 00E1  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 000B  
                                                 __end_of_ymd_to_scalar 22E6  
                                                      SetHourMin@tmpSec 001A  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D7  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                           __soundCount 0071  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 26B8  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0075  
                                                       __isSoundPlaying 00CE  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2858  
                                           _ModbusSetExceptionStatusBit 280C  
                                                __nextEventPlayDuration 00C2  
                                                              InitApp@i 0007  
                                                           _globalHours 0077  
                                                             main@curMs 00ED  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 16C8  
                                                     _ModbusProcess_FC3 2032  
                                                     _ModbusProcess_FC5 22E6  
                                                     _ModbusProcess_FC6 26B8  
                                                     _ModbusProcess_FC7 2C5C  
                                                           _INTCON2bits 000FF1  
                                        CommandSetStatusLed@commandData 001E  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0980  
                                                    __end_of_getHourMin 2B98  
                                                           ??_PlaySound 0017  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 2BC2  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E3  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 251E  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001F  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2A7A  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BC  
                                                           _isleap$2165 000F  
                                                       _SetTimeFromRegs 1EB0  
                                                           _currentTime 00D9  
                                                      __size_of_io_poll 0136  
                                                              _diffTime 00A8  
                                             __end_of_ModbusProcess_FC1 17F4  
                                             __end_of_ModbusProcess_FC3 20E8  
                                             __end_of_ModbusProcess_FC5 2388  
                                             __end_of_ModbusProcess_FC6 2714  
                                             __end_of_ModbusProcess_FC7 2C74  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E4  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 27C0  
                                                              __ptext11 28A4  
                                                              __ptext20 258C  
                                                              __ptext12 2C08  
                                                              __ptext21 280C  
                                                              __ptext13 1B0A  
                                                              __ptext30 2C26  
                                                              __ptext22 1C06  
                                                              __ptext14 2B40  
                                                              __ptext31 2AB0  
                                                              __ptext23 29BC  
                                                              __ptext15 29FE  
                                                              __ptext40 22E6  
                                                              __ptext32 2CCC  
                                                              __ptext24 0C72  
                                                              __ptext16 2B12  
                                                              __ptext41 1430  
                                                              __ptext33 17F4  
                                                              __ptext25 2932  
                                                              __ptext17 2388  
                                                              __ptext50 2B98  
                                                              __ptext42 2658  
                                                              __ptext34 2B6C  
                                                              __ptext26 1F76  
                                                              __ptext18 2C74  
                                                              __ptext51 2A3C  
                                                              __ptext43 2032  
                                                              __ptext35 0980  
                                                              __ptext27 2BC2  
                                                              __ptext19 2C88  
                                                              __ptext60 2CDC  
                                                              __ptext52 24AA  
                                                              __ptext44 2196  
                                                              __ptext36 12C0  
                                                              __ptext28 1CFC  
                                                              __ptext61 2CAE  
                                                              __ptext53 2978  
                                                              __ptext45 251E  
                                                              __ptext37 0EE4  
                                                              __ptext29 20E8  
                                                              __ptext54 2A7A  
                                                              __ptext46 1DE6  
                                                              __ptext38 2C5C  
                                                              __ptext55 2CD4  
                                                              __ptext47 18FE  
                                                              __ptext39 26B8  
                                                              __ptext56 2BE8  
                                                              __ptext48 16C8  
                                                              __ptext57 2426  
                                                              __ptext49 2858  
                                                              __ptext58 2C42  
                                                              __ptext59 2CBE  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E6  
                                                         __size_of_main 017C  
                                                  _ModbusGetLastCommand 2B12  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1F76  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0078  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2C9C  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00EC  
                                                      __exceptionStatus 00CB  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2178 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 009E  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00CF  
                                                        _SetTimeCommand 2AE2  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2CE6  
                                                              intlevel2 2CE6  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001B  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0C72  
                                                 __MODBUSDiscreteInputs 00BC  
                                                __size_of_LoadNextEvent 010A  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1F76  
                                                 __end_of_SetBuzzerDuty 2AE2  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                                        _curEventMinute 00D5  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 2B12  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 001C  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0EE4  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                            ModbusProcess_FC15@u8bitsno 0028  
