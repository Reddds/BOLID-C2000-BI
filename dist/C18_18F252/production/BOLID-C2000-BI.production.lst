

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sun May 22 11:26:29 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           	psect	eeprom_data
    87  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    88  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    89  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    90  0000                     
    91                           	psect	idataCOMRAM
    92  002D20                     __pidataCOMRAM:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _curEventNum
    96  002D20  FF                 	db	255
    97                           
    98                           ;initializer for _currentAlarmedEventNum
    99  002D21  FF                 	db	255
   100                           
   101                           ;initializer for _globalHours
   102  002D22  FF                 	db	255
   103                           
   104                           	psect	smallconst
   105  000600                     __psmallconst:
   106                           	opt stack 0
   107  000600  00                 	db	0
   108  000601                     _fctsupported:
   109                           	opt stack 0
   110  000601  01                 	db	1
   111  000602  02                 	db	2
   112  000603  03                 	db	3
   113  000604  04                 	db	4
   114  000605  05                 	db	5
   115  000606  06                 	db	6
   116  000607  07                 	db	7
   117  000608  0F                 	db	15
   118  000609  10                 	db	16
   119  00060A  11                 	db	17
   120  00060B  15                 	db	21
   121  00060C  2B                 	db	43
   122  00060D                     __end_of_fctsupported:
   123                           	opt stack 0
   124  0000                     _CCP1CONbits	set	4029
   125  0000                     _CCPR1L	set	4030
   126  0000                     _EEADR	set	4009
   127  0000                     _EECON2	set	4007
   128  0000                     _EEDATA	set	4008
   129  0000                     _INTCON2bits	set	4081
   130  0000                     _INTCONbits	set	4082
   131  0000                     _IPR1bits	set	3999
   132  0000                     _LATA	set	3977
   133  0000                     _LATAbits	set	3977
   134  0000                     _LATB	set	3978
   135  0000                     _LATCbits	set	3979
   136  0000                     _PIE1bits	set	3997
   137  0000                     _PIR1bits	set	3998
   138  0000                     _PORTCbits	set	3970
   139  0000                     _PR2	set	4043
   140  0000                     _RCONbits	set	4048
   141  0000                     _RCREG	set	4014
   142  0000                     _RCSTA	set	4011
   143  0000                     _RCSTAbits	set	4011
   144  0000                     _SPBRG	set	4015
   145  0000                     _T0CONbits	set	4053
   146  0000                     _T1CONbits	set	4045
   147  0000                     _T2CONbits	set	4042
   148  0000                     _TMR0H	set	4055
   149  0000                     _TMR0L	set	4054
   150  0000                     _TMR1H	set	4047
   151  0000                     _TMR1L	set	4046
   152  0000                     _TRISAbits	set	3986
   153  0000                     _TRISB	set	3987
   154  0000                     _TRISCbits	set	3988
   155  0000                     _TXREG	set	4013
   156  0000                     _TXSTA	set	4012
   157  0000                     _TXSTAbits	set	4012
   158  0000                     _CARRY	set	32448
   159  0000                     _GIE	set	32663
   160  0000                     _RCIF	set	31989
   161  0000                     _RD	set	32048
   162  0000                     _TRMT	set	32097
   163  0000                     _WR	set	32049
   164  0000                     _WREN	set	32050
   165  00060D                     STR_3:
   166  00060D  54                 	db	84	;'T'
   167  00060E  61                 	db	97	;'a'
   168  00060F  62                 	db	98	;'b'
   169  000610  6C                 	db	108	;'l'
   170  000611  6F                 	db	111	;'o'
   171  000612  20                 	db	32
   172  000613  73                 	db	115	;'s'
   173  000614  20                 	db	32
   174  000615  72                 	db	114	;'r'
   175  000616  61                 	db	97	;'a'
   176  000617  73                 	db	115	;'s'
   177  000618  70                 	db	112	;'p'
   178  000619  69                 	db	105	;'i'
   179  00061A  73                 	db	115	;'s'
   180  00061B  61                 	db	97	;'a'
   181  00061C  6E                 	db	110	;'n'
   182  00061D  69                 	db	105	;'i'
   183  00061E  65                 	db	101	;'e'
   184  00061F  6D                 	db	109	;'m'
   185  000620  20                 	db	32
   186  000621  74                 	db	116	;'t'
   187  000622  75                 	db	117	;'u'
   188  000623  72                 	db	114	;'r'
   189  000624  6F                 	db	111	;'o'
   190  000625  00                 	db	0
   191  000626                     STR_12:
   192  000626  54                 	db	84	;'T'
   193  000627  61                 	db	97	;'a'
   194  000628  62                 	db	98	;'b'
   195  000629  6C                 	db	108	;'l'
   196  00062A  6F                 	db	111	;'o'
   197  00062B  20                 	db	32
   198  00062C  73                 	db	115	;'s'
   199  00062D  20                 	db	32
   200  00062E  72                 	db	114	;'r'
   201  00062F  61                 	db	97	;'a'
   202  000630  73                 	db	115	;'s'
   203  000631  70                 	db	112	;'p'
   204  000632  69                 	db	105	;'i'
   205  000633  73                 	db	115	;'s'
   206  000634  61                 	db	97	;'a'
   207  000635  6E                 	db	110	;'n'
   208  000636  69                 	db	105	;'i'
   209  000637  65                 	db	101	;'e'
   210  000638  6D                 	db	109	;'m'
   211  000639  00                 	db	0
   212  00063A                     STR_10:
   213  00063A  68                 	db	104	;'h'
   214  00063B  74                 	db	116	;'t'
   215  00063C  74                 	db	116	;'t'
   216  00063D  70                 	db	112	;'p'
   217  00063E  3A                 	db	58	;':'
   218  00063F  2F                 	db	47
   219  000640  2F                 	db	47
   220  000641  62                 	db	98	;'b'
   221  000642  6F                 	db	111	;'o'
   222  000643  6C                 	db	108	;'l'
   223  000644  69                 	db	105	;'i'
   224  000645  64                 	db	100	;'d'
   225  000646  2E                 	db	46
   226  000647  72                 	db	114	;'r'
   227  000648  75                 	db	117	;'u'
   228  000649  00                 	db	0
   229  00064A                     STR_16:
   230  00064A  52                 	db	82	;'R'
   231  00064B  61                 	db	97	;'a'
   232  00064C  73                 	db	115	;'s'
   233  00064D  70                 	db	112	;'p'
   234  00064E  69                 	db	105	;'i'
   235  00064F  73                 	db	115	;'s'
   236  000650  61                 	db	97	;'a'
   237  000651  6E                 	db	110	;'n'
   238  000652  69                 	db	105	;'i'
   239  000653  65                 	db	101	;'e'
   240  000654  00                 	db	0
   241  000655                     STR_6:
   242  000655  43                 	db	67	;'C'
   243  000656  32                 	db	50	;'2'
   244  000657  30                 	db	48	;'0'
   245  000658  30                 	db	48	;'0'
   246  000659  30                 	db	48	;'0'
   247  00065A  2D                 	db	45
   248  00065B  42                 	db	66	;'B'
   249  00065C  49                 	db	73	;'I'
   250  00065D  00                 	db	0
   251  00065E                     STR_4:
   252  00065E  42                 	db	66	;'B'
   253  00065F  4F                 	db	79	;'O'
   254  000660  4C                 	db	76	;'L'
   255  000661  49                 	db	73	;'I'
   256  000662  44                 	db	68	;'D'
   257  000663  00                 	db	0
   258  000664                     STR_8:
   259  000664  31                 	db	49	;'1'
   260  000665  2E                 	db	46
   261  000666  30                 	db	48	;'0'
   262  000667  31                 	db	49	;'1'
   263  000668  00                 	db	0
   264  000669                     STR_14:
   265  000669  4D                 	db	77	;'M'
   266  00066A  4D                 	db	77	;'M'
   267  00066B  4D                 	db	77	;'M'
   268  00066C  00                 	db	0
   269  0000                     
   270                           ; #config settings
   271  00066D  00                 	db	0	; dummy byte at the end
   272  0000                     
   273                           	psect	cinit
   274  002604                     __pcinit:
   275                           	opt stack 0
   276  002604                     start_initialization:
   277                           	opt stack 0
   278  002604                     __initialization:
   279                           	opt stack 0
   280                           
   281                           ; Clear objects allocated to BANK2 (256 bytes)
   282  002604  EE02  F000         	lfsr	0,__pbssBANK2
   283  002608  EE11 F000          	lfsr	1,256
   284  00260C                     clear_0:
   285  00260C  6AEE               	clrf	postinc0,c
   286  00260E  50E5               	movf	postdec1,w,c
   287  002610  50E1               	movf	fsr1l,w,c
   288  002612  E1FC               	bnz	clear_0
   289  002614  50E2               	movf	fsr1h,w,c
   290  002616  E1FA               	bnz	clear_0
   291                           
   292                           ; Clear objects allocated to BANK1 (200 bytes)
   293  002618  EE01  F000         	lfsr	0,__pbssBANK1
   294  00261C  0EC8               	movlw	200
   295  00261E                     clear_1:
   296  00261E  6AEE               	clrf	postinc0,c
   297  002620  06E8               	decf	wreg,f,c
   298  002622  E1FD               	bnz	clear_1
   299                           
   300                           ; Clear objects allocated to BANK0 (98 bytes)
   301  002624  EE00  F080         	lfsr	0,__pbssBANK0
   302  002628  0E62               	movlw	98
   303  00262A                     clear_2:
   304  00262A  6AEE               	clrf	postinc0,c
   305  00262C  06E8               	decf	wreg,f,c
   306  00262E  E1FD               	bnz	clear_2
   307                           
   308                           ; Clear objects allocated to COMRAM (6 bytes)
   309  002630  6A74               	clrf	(__pbssCOMRAM+5)& (0+255),c
   310  002632  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   311  002634  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   312  002636  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   313  002638  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   314  00263A  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   315                           
   316                           ; Initialize objects allocated to COMRAM (3 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318  00263C  0E20               	movlw	low __pidataCOMRAM
   319  00263E  6EF6               	movwf	tblptrl,c
   320  002640  0E2D               	movlw	high __pidataCOMRAM
   321  002642  6EF7               	movwf	tblptrh,c
   322  002644  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323  002646  6EF8               	movwf	tblptru,c
   324  002648  0009               	tblrd		*+	;fetch initializer
   325  00264A  CFF5 F075          	movff	tablat,__pdataCOMRAM
   326  00264E  0009               	tblrd		*+	;fetch initializer
   327  002650  CFF5 F076          	movff	tablat,__pdataCOMRAM+1
   328  002654  0009               	tblrd		*+	;fetch initializer
   329  002656  CFF5 F077          	movff	tablat,__pdataCOMRAM+2
   330  00265A                     end_of_initialization:
   331                           	opt stack 0
   332  00265A                     __end_of__initialization:
   333                           	opt stack 0
   334  00265A  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   335  00265C  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   336  00265E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   337  002660  6EF8               	movwf	tblptru,c
   338  002662  0100               	movlb	0
   339  002664  EFA2  F008         	goto	_main	;jump to C main() function
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           postdec1	equ	0xFE5
   347                           fsr1h	equ	0xFE2
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	bssCOMRAM
   351  00006F                     __pbssCOMRAM:
   352                           	opt stack 0
   353  00006F                     _UartBufferTail:
   354                           	opt stack 0
   355  00006F                     	ds	1
   356  000070                     __playingSoundStartPosInEe:
   357                           	opt stack 0
   358  000070                     	ds	1
   359  000071                     __soundCount:
   360                           	opt stack 0
   361  000071                     	ds	1
   362  000072                     __u8BufferSize:
   363                           	opt stack 0
   364  000072                     	ds	1
   365  000073                     _blinkOn:
   366                           	opt stack 0
   367  000073                     	ds	1
   368  000074                     _globalMinutes:
   369                           	opt stack 0
   370  000074                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1h	equ	0xFE2
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	dataCOMRAM
   382  000075                     __pdataCOMRAM:
   383                           	opt stack 0
   384  000075                     _curEventNum:
   385                           	opt stack 0
   386  000075                     	ds	1
   387  000076                     _currentAlarmedEventNum:
   388                           	opt stack 0
   389  000076                     	ds	1
   390  000077                     _globalHours:
   391                           	opt stack 0
   392  000077                     	ds	1
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1h	equ	0xFE2
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssBANK0
   404  000080                     __pbssBANK0:
   405                           	opt stack 0
   406  000080                     _ledBlink:
   407                           	opt stack 0
   408  000080                     	ds	16
   409  000090                     _ledStatuses:
   410                           	opt stack 0
   411  000090                     	ds	16
   412  0000A0                     __playingEndMs:
   413                           	opt stack 0
   414  0000A0                     	ds	4
   415  0000A4                     __u32time:
   416                           	opt stack 0
   417  0000A4                     	ds	4
   418  0000A8                     _diffTime:
   419                           	opt stack 0
   420  0000A8                     	ds	4
   421  0000AC                     _eventResetSecond:
   422                           	opt stack 0
   423  0000AC                     	ds	4
   424  0000B0                     _millisecondsFromStart:
   425                           	opt stack 0
   426  0000B0                     	ds	4
   427  0000B4                     _oldBlinkOnTime:
   428                           	opt stack 0
   429  0000B4                     	ds	4
   430  0000B8                     _soundTestEnd:
   431                           	opt stack 0
   432  0000B8                     	ds	4
   433  0000BC                     __MODBUSDiscreteInputs:
   434                           	opt stack 0
   435  0000BC                     	ds	2
   436  0000BE                     __lastAddress:
   437                           	opt stack 0
   438  0000BE                     	ds	2
   439  0000C0                     __lastCount:
   440                           	opt stack 0
   441  0000C0                     	ds	2
   442  0000C2                     __nextEventPlayDuration:
   443                           	opt stack 0
   444  0000C2                     	ds	2
   445  0000C4                     __totalMinutesFromDayStart:
   446                           	opt stack 0
   447  0000C4                     	ds	2
   448  0000C6                     _blinkDuration:
   449                           	opt stack 0
   450  0000C6                     	ds	2
   451  0000C8                     _blinkPeriod:
   452                           	opt stack 0
   453  0000C8                     	ds	2
   454  0000CA                     _curEventTotalMinutes:
   455                           	opt stack 0
   456  0000CA                     	ds	2
   457  0000CC                     _UartBufferHead:
   458                           	opt stack 0
   459  0000CC                     	ds	1
   460  0000CD                     _UartBufferLen:
   461                           	opt stack 0
   462  0000CD                     	ds	1
   463  0000CE                     __6sCounter:
   464                           	opt stack 0
   465  0000CE                     	ds	1
   466  0000CF                     __exceptionStatus:
   467                           	opt stack 0
   468  0000CF                     	ds	1
   469  0000D0                     __holdingRegsCount:
   470                           	opt stack 0
   471  0000D0                     	ds	1
   472  0000D1                     __inputRegsCount:
   473                           	opt stack 0
   474  0000D1                     	ds	1
   475  0000D2                     __isSoundPlaying:
   476                           	opt stack 0
   477  0000D2                     	ds	1
   478  0000D3                     __nextEventSoundId:
   479                           	opt stack 0
   480  0000D3                     	ds	1
   481  0000D4                     __playingSoundCurPos:
   482                           	opt stack 0
   483  0000D4                     	ds	1
   484  0000D5                     __playingSoundSteps:
   485                           	opt stack 0
   486  0000D5                     	ds	1
   487  0000D6                     __u8id:
   488                           	opt stack 0
   489  0000D6                     	ds	1
   490  0000D7                     __u8lastRec:
   491                           	opt stack 0
   492  0000D7                     	ds	1
   493  0000D8                     _currentLedBlock:
   494                           	opt stack 0
   495  0000D8                     	ds	1
   496  0000D9                     _eventAcceptTime:
   497                           	opt stack 0
   498  0000D9                     	ds	1
   499  0000DA                     _eventCount:
   500                           	opt stack 0
   501  0000DA                     	ds	1
   502  0000DB                     _currentTime:
   503                           	opt stack 0
   504  0000DB                     	ds	4
   505  0000DF                     __MODBUSCoils:
   506                           	opt stack 0
   507  0000DF                     	ds	2
   508  0000E1                     __lastCommand:
   509                           	opt stack 0
   510  0000E1                     	ds	1
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1h	equ	0xFE2
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssBANK1
   522  000100                     __pbssBANK1:
   523                           	opt stack 0
   524  000100                     __au8Buffer:
   525                           	opt stack 0
   526  000100                     	ds	140
   527  00018C                     __MODBUSHoldingRegs:
   528                           	opt stack 0
   529  00018C                     	ds	30
   530  0001AA                     __MODBUSInputRegs:
   531                           	opt stack 0
   532  0001AA                     	ds	30
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1h	equ	0xFE2
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	bssBANK2
   544  000200                     __pbssBANK2:
   545                           	opt stack 0
   546  000200                     _UartRingBuffer:
   547                           	opt stack 0
   548  000200                     	ds	256
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1h	equ	0xFE2
   557                           fsr1l	equ	0xFE1
   558                           
   559                           	psect	cstackBANK0
   560  0000E2                     __pcstackBANK0:
   561                           	opt stack 0
   562  0000E2                     io_poll@command:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x0
   566  0000E2                     	ds	1
   567  0000E3                     io_poll@lastEndAddress:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x1
   571  0000E3                     	ds	2
   572  0000E5                     io_poll@v1:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x3
   576  0000E5                     	ds	1
   577  0000E6                     io_poll@lastAddress:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x4
   581  0000E6                     	ds	2
   582  0000E8                     io_poll@lastCommand:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x6
   586  0000E8                     	ds	1
   587  0000E9                     main@lastMs:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x7
   591  0000E9                     	ds	4
   592  0000ED                     main@oldMinute:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0xB
   596  0000ED                     	ds	1
   597  0000EE                     main@hour:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0xC
   601  0000EE                     	ds	1
   602  0000EF                     main@curMs:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0xD
   606  0000EF                     	ds	4
   607  0000F3                     main@minute:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x11
   611  0000F3                     	ds	1
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1h	equ	0xFE2
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	cstackCOMRAM
   623  000001                     __pcstackCOMRAM:
   624                           	opt stack 0
   625  000001                     ??_low_isr:
   626  000001                     
   627                           ; 1 bytes @ 0x0
   628  000001                     	ds	5
   629  000006                     low_isr@c:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x5
   633  000006                     	ds	1
   634  000007                     ??_StopPlaying:
   635  000007                     ?_ModbusCalcCRC:
   636                           	opt stack 0
   637  000007                     ?___lwdiv:
   638                           	opt stack 0
   639  000007                     ?___lwmod:
   640                           	opt stack 0
   641  000007                     ?_millis:
   642                           	opt stack 0
   643  000007                     PortRead@ret:
   644                           	opt stack 0
   645  000007                     getHourMin@min:
   646                           	opt stack 0
   647  000007                     getTotalMinutes@totalMinutes:
   648                           	opt stack 0
   649  000007                     UpdateLedRegister@regIndex:
   650                           	opt stack 0
   651  000007                     SwitchOffAllLeds@i:
   652                           	opt stack 0
   653  000007                     LightLed@ledState:
   654                           	opt stack 0
   655  000007                     LightStatusLed@on:
   656                           	opt stack 0
   657  000007                     InitApp@i:
   658                           	opt stack 0
   659  000007                     SetTime@newTime:
   660                           	opt stack 0
   661  000007                     ModbusSetExceptionStatusBit@value:
   662                           	opt stack 0
   663  000007                     ModbusInit@u8serno:
   664                           	opt stack 0
   665  000007                     ModbusBuildException@u8exception:
   666                           	opt stack 0
   667  000007                     ModbusGetLastCommand@count:
   668                           	opt stack 0
   669  000007                     CopyStringToBuffer@src:
   670                           	opt stack 0
   671  000007                     ___lbdiv@divisor:
   672                           	opt stack 0
   673  000007                     ___lbmod@divisor:
   674                           	opt stack 0
   675  000007                     PortWrite@buf:
   676                           	opt stack 0
   677  000007                     SetBuzzerDuty@dc:
   678                           	opt stack 0
   679  000007                     ___lwdiv@dividend:
   680                           	opt stack 0
   681  000007                     ___lwmod@dividend:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x6
   685  000007                     	ds	1
   686  000008                     ??_LoadNextEvent:
   687  000008                     ??_ModbusSetExceptionStatusBit:
   688  000008                     ??_ModbusGetRxBuffer:
   689  000008                     ??_ProcessLightBlock:
   690  000008                     getHourMin@hour:
   691                           	opt stack 0
   692  000008                     LightLed@blink:
   693                           	opt stack 0
   694  000008                     LightStatusLed@blink:
   695                           	opt stack 0
   696  000008                     ModbusInit@u8txenpin:
   697                           	opt stack 0
   698  000008                     ModbusBuildException@u8func:
   699                           	opt stack 0
   700  000008                     CopyStringToBuffer@len:
   701                           	opt stack 0
   702  000008                     ___lbdiv@dividend:
   703                           	opt stack 0
   704  000008                     ___lbmod@dividend:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x7
   708  000008                     	ds	1
   709  000009                     ??_ModbusCalcCRC:
   710  000009                     ??_LightLed:
   711  000009                     ??_LightStatusLed:
   712  000009                     ??_SetBuzzerDuty:
   713  000009                     ??_CopyStringToBuffer:
   714  000009                     PortWrite@buflen:
   715                           	opt stack 0
   716  000009                     ModbusGetRxBuffer@bBuffOverflow:
   717                           	opt stack 0
   718  000009                     ModbusGetLastCommand@address:
   719                           	opt stack 0
   720  000009                     ___lbdiv@counter:
   721                           	opt stack 0
   722  000009                     ___lbmod@counter:
   723                           	opt stack 0
   724  000009                     ___lwdiv@divisor:
   725                           	opt stack 0
   726  000009                     ___lwmod@divisor:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x8
   730  000009                     	ds	1
   731  00000A                     PortWrite@i:
   732                           	opt stack 0
   733  00000A                     ModbusSetExceptionStatusBit@bitNum:
   734                           	opt stack 0
   735  00000A                     CopyStringToBuffer@objId:
   736                           	opt stack 0
   737  00000A                     ___lbdiv@quotient:
   738                           	opt stack 0
   739  00000A                     ___lbmod@rem:
   740                           	opt stack 0
   741  00000A                     LoadNextEvent@totalMinutes:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x9
   745  00000A                     	ds	1
   746  00000B                     SetHourMin@newMin:
   747                           	opt stack 0
   748  00000B                     ModbusInit@u8id:
   749                           	opt stack 0
   750  00000B                     CopyStringToBuffer@i:
   751                           	opt stack 0
   752  00000B                     ___lwdiv@counter:
   753                           	opt stack 0
   754  00000B                     ___lwmod@counter:
   755                           	opt stack 0
   756  00000B                     ModbusCalcCRC@temp2:
   757                           	opt stack 0
   758  00000B                     millis@ret:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0xA
   762  00000B                     	ds	1
   763  00000C                     ?_isleap:
   764                           	opt stack 0
   765  00000C                     SetHourMin@sec:
   766                           	opt stack 0
   767  00000C                     LightLed@ledNum:
   768                           	opt stack 0
   769  00000C                     ProcessLightBlock@curMs:
   770                           	opt stack 0
   771  00000C                     LoadNextEvent@v1:
   772                           	opt stack 0
   773  00000C                     Modbus@u8serno:
   774                           	opt stack 0
   775  00000C                     ___lwdiv@quotient:
   776                           	opt stack 0
   777  00000C                     isleap@yr:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0xB
   781  00000C                     	ds	1
   782  00000D                     ??_SetHourMin:
   783  00000D                     LightLed@ststusIndex:
   784                           	opt stack 0
   785  00000D                     Modbus@u8txenpin:
   786                           	opt stack 0
   787  00000D                     ModbusCalcCRC@flag:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0xC
   791  00000D                     	ds	1
   792  00000E                     ??_isleap:
   793  00000E                     ?_months_to_days:
   794                           	opt stack 0
   795  00000E                     ?_years_to_days:
   796                           	opt stack 0
   797  00000E                     LightLed@statusShift:
   798                           	opt stack 0
   799  00000E                     LightStatusLed@row:
   800                           	opt stack 0
   801  00000E                     Modbus@u8id:
   802                           	opt stack 0
   803  00000E                     months_to_days@month:
   804                           	opt stack 0
   805  00000E                     years_to_days@yr:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0xD
   809  00000E                     	ds	1
   810  00000F                     ??_InitFromEeprom:
   811  00000F                     ??_SoundPlayNextStep:
   812  00000F                     ??_ResetEvent:
   813  00000F                     ModbusCalcCRC@u8length:
   814                           	opt stack 0
   815  00000F                     _isleap$2167:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0xE
   819  00000F                     	ds	1
   820  000010                     ??_months_to_days:
   821  000010                     ModbusCalcCRC@i:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0xF
   825  000010                     	ds	1
   826  000011                     ResetEvent@state:
   827                           	opt stack 0
   828  000011                     ModbusCalcCRC@j:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x10
   832  000011                     	ds	1
   833  000012                     ??_years_to_days:
   834  000012                     _ResetEvent$879:
   835                           	opt stack 0
   836  000012                     ModbusCalcCRC@temp:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x11
   840  000012                     	ds	2
   841  000014                     ??_ModbusValidateRequest:
   842  000014                     SoundPlayNextStep@duration:
   843                           	opt stack 0
   844  000014                     ModbusSendTxBuffer@u16crc:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x13
   848  000014                     	ds	1
   849  000015                     PlaySound@playDuration:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x14
   853  000015                     	ds	1
   854  000016                     ??_ModbusProcess_FC5:
   855  000016                     ??_ModbusProcess_FC15:
   856  000016                     ??_ModbusProcess_FC17:
   857  000016                     ??_ModbusProcess_FC21:
   858  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   859                           	opt stack 0
   860  000016                     ModbusProcess_FC43@devIdCode:
   861                           	opt stack 0
   862  000016                     ModbusProcess_FC1@regs:
   863                           	opt stack 0
   864  000016                     ModbusProcess_FC3@regs:
   865                           	opt stack 0
   866  000016                     ModbusProcess_FC6@regs:
   867                           	opt stack 0
   868  000016                     ModbusProcess_FC16@regs:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x15
   872  000016                     	ds	1
   873  000017                     ??_PlaySound:
   874  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   875                           	opt stack 0
   876  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x16
   880  000017                     	ds	1
   881  000018                     ??_ModbusProcess_FC1:
   882  000018                     ModbusProcess_FC3@u8size:
   883                           	opt stack 0
   884  000018                     ModbusProcess_FC6@u8size:
   885                           	opt stack 0
   886  000018                     ModbusProcess_FC16@u8size:
   887                           	opt stack 0
   888  000018                     ModbusProcess_FC17@i:
   889                           	opt stack 0
   890  000018                     ModbusProcess_FC21@requestDataLen:
   891                           	opt stack 0
   892  000018                     ModbusProcess_FC43@objId:
   893                           	opt stack 0
   894  000018                     ModbusValidateRequest@startAddrBytes:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x17
   898  000018                     	ds	1
   899  000019                     ??_ModbusProcess_FC3:
   900  000019                     ??_ModbusProcess_FC6:
   901  000019                     ??_ModbusProcess_FC16:
   902  000019                     SetHourMin@newHour:
   903                           	opt stack 0
   904  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x18
   908  000019                     	ds	1
   909  00001A                     SetHourMin@tmpSec:
   910                           	opt stack 0
   911  00001A                     ModbusProcess_FC21@startAddrsBytes:
   912                           	opt stack 0
   913  00001A                     years_to_days@ret:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x19
   917  00001A                     	ds	1
   918  00001B                     SetHourMin@secToNext6Sec:
   919                           	opt stack 0
   920  00001B                     PlaySound@soundId:
   921                           	opt stack 0
   922  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   923                           	opt stack 0
   924  00001B                     ModbusProcess_FC1@u16coil:
   925                           	opt stack 0
   926  00001B                     ModbusProcess_FC6@u16val:
   927                           	opt stack 0
   928  00001B                     ModbusProcess_FC15@u16coil:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1A
   932  00001B                     	ds	1
   933  00001C                     PlaySound@soundAddr:
   934                           	opt stack 0
   935  00001C                     ModbusProcess_FC5@u16coil:
   936                           	opt stack 0
   937  00001C                     ModbusProcess_FC21@recLenBytes:
   938                           	opt stack 0
   939  00001C                     ModbusValidateRequest@recLenBytes:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0x1B
   943  00001C                     	ds	1
   944  00001D                     ??_ProcessDiary:
   945  00001D                     ??_CommandSetStatusLed:
   946  00001D                     ModbusProcess_FC1@u8currentBit:
   947                           	opt stack 0
   948  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   949                           	opt stack 0
   950  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   951                           	opt stack 0
   952  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   953                           	opt stack 0
   954  00001D                     ModbusProcess_FC16@temp:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x1C
   958  00001D                     	ds	1
   959  00001E                     ?_ymd_to_scalar:
   960                           	opt stack 0
   961  00001E                     CommandSetStatusLed@commandData:
   962                           	opt stack 0
   963  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   964                           	opt stack 0
   965  00001E                     ModbusProcess_FC5@regs:
   966                           	opt stack 0
   967  00001E                     ModbusProcess_FC15@bTemp:
   968                           	opt stack 0
   969  00001E                     ModbusProcess_FC21@i:
   970                           	opt stack 0
   971  00001E                     ModbusProcess_FC3@u16regsno:
   972                           	opt stack 0
   973  00001E                     ModbusProcess_FC6@u16add:
   974                           	opt stack 0
   975  00001E                     ymd_to_scalar@yr:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x1D
   979  00001E                     	ds	1
   980  00001F                     CommandSetStatusLed@led:
   981                           	opt stack 0
   982  00001F                     ModbusProcess_FC1@u8bytesno:
   983                           	opt stack 0
   984  00001F                     ModbusProcess_FC5@u8currentBit:
   985                           	opt stack 0
   986  00001F                     ModbusProcess_FC15@u8frameByte:
   987                           	opt stack 0
   988  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x1E
   992  00001F                     	ds	1
   993  000020                     ModbusProcess_FC3@u8StartAdd:
   994                           	opt stack 0
   995  000020                     ModbusValidateRequest@u16MsgCRC:
   996                           	opt stack 0
   997  000020                     ModbusProcess_FC1@u16StartCoil:
   998                           	opt stack 0
   999  000020                     ModbusProcess_FC15@u16StartCoil:
  1000                           	opt stack 0
  1001  000020                     ModbusProcess_FC16@u16StartAdd:
  1002                           	opt stack 0
  1003  000020                     ymd_to_scalar@mo:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x1F
  1007  000020                     	ds	1
  1008  000021                     ModbusProcess_FC3@i:
  1009                           	opt stack 0
  1010  000021                     ProcessDiary@totalMinutes:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x20
  1014  000021                     	ds	1
  1015  000022                     ModbusValidateRequest@isSupported:
  1016                           	opt stack 0
  1017  000022                     ModbusProcess_FC16@u8regsno:
  1018                           	opt stack 0
  1019  000022                     ModbusProcess_FC1@u16currentCoil:
  1020                           	opt stack 0
  1021  000022                     ModbusProcess_FC15@u16Coilno:
  1022                           	opt stack 0
  1023  000022                     ymd_to_scalar@day:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x21
  1027  000022                     	ds	1
  1028  000023                     ModbusProcess_FC16@i:
  1029                           	opt stack 0
  1030  000023                     ModbusValidateRequest@u16count:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x22
  1034  000023                     	ds	1
  1035  000024                     ??_ymd_to_scalar:
  1036  000024                     ModbusProcess_FC1@u8bitsno:
  1037                           	opt stack 0
  1038  000024                     ModbusProcess_FC15@regs:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x23
  1042  000024                     	ds	1
  1043  000025                     ModbusValidateRequest@i:
  1044                           	opt stack 0
  1045  000025                     ModbusProcess_FC15@u8currentBit:
  1046                           	opt stack 0
  1047  000025                     ModbusProcess_FC1@u16Coilno:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x24
  1051  000025                     	ds	1
  1052  000026                     ModbusValidateRequest@readDevId:
  1053                           	opt stack 0
  1054  000026                     ModbusProcess_FC15@u16currentCoil:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x25
  1058  000026                     	ds	1
  1059  000027                     ModbusValidateRequest@u8regs:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x26
  1063  000027                     	ds	1
  1064  000028                     ModbusProcess_FC15@u8bitsno:
  1065                           	opt stack 0
  1066  000028                     ModbusValidateRequest@u16regs:
  1067                           	opt stack 0
  1068  000028                     _ymd_to_scalar$2180:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x27
  1072  000028                     	ds	2
  1073  00002A                     ModbusPoll@discreteInputs:
  1074                           	opt stack 0
  1075  00002A                     ymd_to_scalar@scalar:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x29
  1079  00002A                     	ds	2
  1080  00002C                     ModbusPoll@coils:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x2B
  1084  00002C                     	ds	1
  1085  00002D                     ModbusPoll@inputRegs:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x2C
  1089  00002D                     	ds	1
  1090  00002E                     ?_mktime:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x2D
  1094  00002E                     	ds	1
  1095  00002F                     ModbusPoll@inputRegsCount:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x2E
  1099  00002F                     	ds	1
  1100  000030                     ModbusPoll@holdingRegs:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x2F
  1104  000030                     	ds	2
  1105  000032                     ??_mktime:
  1106  000032                     ModbusPoll@holdingRegsCount:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x31
  1110  000032                     	ds	1
  1111  000033                     ModbusPoll@u8current:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x32
  1115  000033                     	ds	1
  1116  000034                     ModbusPoll@i8state:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x33
  1120  000034                     	ds	1
  1121  000035                     ModbusPoll@u8exception:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x34
  1125  000035                     	ds	11
  1126  000040                     mktime@tt:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x3F
  1130  000040                     	ds	4
  1131  000044                     mktime@timeptr:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x43
  1135  000044                     	ds	1
  1136  000045                     SetTimeFromRegs@daySec:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x44
  1140  000045                     	ds	1
  1141  000046                     SetTimeFromRegs@yearMonth:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x45
  1145  000046                     	ds	1
  1146  000047                     ??_SetTimeFromRegs:
  1147                           
  1148                           ; 1 bytes @ 0x46
  1149  000047                     	ds	2
  1150  000049                     SetTimeFromRegs@newRawTime:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x48
  1154  000049                     	ds	4
  1155  00004D                     SetTimeFromRegs@hourMin:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x4C
  1159  00004D                     	ds	1
  1160  00004E                     SetTimeFromRegs@newTime:
  1161                           	opt stack 0
  1162                           
  1163                           ; 18 bytes @ 0x4D
  1164  00004E                     	ds	18
  1165  000060                     SetTimeCommand@hourMin:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x5F
  1169  000060                     	ds	2
  1170  000062                     SetTimeCommand@daySec:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x61
  1174  000062                     	ds	2
  1175  000064                     SetTimeCommand@yearMonth:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x63
  1179  000064                     	ds	2
  1180  000066                     ??_io_poll:
  1181                           
  1182                           ; 1 bytes @ 0x65
  1183  000066                     	ds	4
  1184  00006A                     ??_main:
  1185                           
  1186                           ; 1 bytes @ 0x69
  1187  00006A                     	ds	5
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           postdec1	equ	0xFE5
  1195                           fsr1h	equ	0xFE2
  1196                           fsr1l	equ	0xFE1
  1197                           
  1198 ;;
  1199 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1200 ;;
  1201 ;; *************** function _main *****************
  1202 ;; Defined at:
  1203 ;;		line 759 in file "main.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  minute          1   17[BANK0 ] unsigned char 
  1208 ;;  hour            1   12[BANK0 ] unsigned char 
  1209 ;;  curMs           4   13[BANK0 ] unsigned long 
  1210 ;;  lastMs          4    7[BANK0 ] unsigned long 
  1211 ;;  oldBuzzerOnT    4    0        unsigned long 
  1212 ;;  oldMinute       1   11[BANK0 ] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1222 ;;      Params:         0       0       0       0       0       0       0
  1223 ;;      Locals:         0      11       0       0       0       0       0
  1224 ;;      Temps:          5       0       0       0       0       0       0
  1225 ;;      Totals:         5      11       0       0       0       0       0
  1226 ;;Total ram usage:       16 bytes
  1227 ;; Hardware stack levels required when called:    9
  1228 ;; This function calls:
  1229 ;;		_AddSecond
  1230 ;;		_ConfigureOscillator
  1231 ;;		_GetTime
  1232 ;;		_InitApp
  1233 ;;		_InitFromEeprom
  1234 ;;		_LightStatusLed
  1235 ;;		_ModbusPoll
  1236 ;;		_ProcessDiary
  1237 ;;		_ProcessLightBlock
  1238 ;;		_ResetEvent
  1239 ;;		_SoundPlayNextStep
  1240 ;;		_StopPlaying
  1241 ;;		_getHourMin
  1242 ;;		_io_poll
  1243 ;;		_millis
  1244 ;;		_pwm_init
  1245 ;; This function is called by:
  1246 ;;		Startup code after reset
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text0
  1251  001144                     __ptext0:
  1252                           	opt stack 0
  1253  001144                     _main:
  1254                           	opt stack 22
  1255                           
  1256                           ;incstack = 0
  1257  001144  FFFF               	dw	65535
  1258                           
  1259                           ;main.c: 762: ConfigureOscillator();
  1260  001146  EC8D  F016         	call	_ConfigureOscillator	;wreg free
  1261                           
  1262                           ;main.c: 765: InitApp();
  1263  00114A  EC1B  F012         	call	_InitApp	;wreg free
  1264                           
  1265                           ;main.c: 769: InitFromEeprom();
  1266  00114E  ECCB  F011         	call	_InitFromEeprom	;wreg free
  1267                           
  1268                           ;main.c: 778: unsigned long lastMs = millis();
  1269  001152  ECD8  F015         	call	_millis	;wreg free
  1270  001156  C007  F0E9         	movff	?_millis,main@lastMs
  1271  00115A  C008  F0EA         	movff	?_millis+1,main@lastMs+1
  1272  00115E  C009  F0EB         	movff	?_millis+2,main@lastMs+2
  1273  001162  C00A  F0EC         	movff	?_millis+3,main@lastMs+3
  1274                           
  1275                           ;main.c: 787: unsigned long oldBuzzerOnTime = 0;
  1276  001166  EC6D  F016         	call	_pwm_init	;wreg free
  1277                           
  1278                           ;main.c: 788: uint8_t oldMinute = 0xff;
  1279  00116A  0100               	movlb	0	; () banked
  1280  00116C  69ED               	setf	main@oldMinute& (0+255),b
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 790: LightStatusLed(0x07, 1, 0);
  1284  00116E  0E01               	movlw	1
  1285  001170  6E07               	movwf	LightStatusLed@on,c
  1286  001172  0E00               	movlw	0
  1287  001174  6E08               	movwf	LightStatusLed@blink,c
  1288  001176  0E07               	movlw	7
  1289  001178  EC0B  F00E         	call	_LightStatusLed
  1290                           
  1291                           ;main.c: 791: LightStatusLed(0x05, 1, 1);
  1292  00117C  0E01               	movlw	1
  1293  00117E  6E07               	movwf	LightStatusLed@on,c
  1294  001180  6E08               	movwf	LightStatusLed@blink,c
  1295  001182  0E05               	movlw	5
  1296  001184  EC0B  F00E         	call	_LightStatusLed
  1297  001188                     l6196:
  1298  001188  FFFF               	dw	65535	; assembler added errata NOP
  1299                           
  1300                           ;main.c: 793: {
  1301                           ;main.c: 794: unsigned long curMs = millis();
  1302  00118A  ECD8  F015         	call	_millis	;wreg free
  1303  00118E  C007  F0EF         	movff	?_millis,main@curMs
  1304  001192  C008  F0F0         	movff	?_millis+1,main@curMs+1
  1305  001196  C009  F0F1         	movff	?_millis+2,main@curMs+2
  1306  00119A  C00A  F0F2         	movff	?_millis+3,main@curMs+3
  1307                           
  1308                           ;main.c: 795: ProcessLightBlock(&curMs);
  1309  00119E  0EEF               	movlw	main@curMs& (0+255)
  1310  0011A0  EC39  F006         	call	_ProcessLightBlock
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 797: if(_isSoundPlaying && curMs >= _playingEndMs)
  1314  0011A4  51D2               	movf	__isSoundPlaying& (0+255),w,b
  1315  0011A6  E00B               	bz	l6206
  1316                           
  1317                           ; BSR set to: 0
  1318  0011A8  51A0               	movf	__playingEndMs& (0+255),w,b
  1319  0011AA  5DEF               	subwf	main@curMs& (0+255),w,b
  1320  0011AC  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1321  0011AE  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1322  0011B0  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1323  0011B2  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1324  0011B4  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1325  0011B6  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1326  0011B8  E302               	bnc	l6206
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 798: {
  1330                           ;main.c: 799: SoundPlayNextStep();
  1331  0011BA  EC7B  F010         	call	_SoundPlayNextStep	;wreg free
  1332  0011BE                     l6206:
  1333                           
  1334                           ;main.c: 800: }
  1335                           ;main.c: 803: if(PORTCbits.RC1 == 0)
  1336  0011BE  B282               	btfsc	3970,1,c	;volatile
  1337  0011C0  D008               	goto	l6214
  1338                           
  1339                           ;main.c: 804: {
  1340                           ;main.c: 806: if(currentAlarmedEventNum != 0xff)
  1341  0011C2  2876               	incf	_currentAlarmedEventNum,w,c
  1342  0011C4  E004               	bz	l6212
  1343                           
  1344                           ;main.c: 807: {
  1345                           ;main.c: 808: ResetEvent(1);
  1346  0011C6  0E01               	movlw	1
  1347  0011C8  ECEA  F014         	call	_ResetEvent
  1348                           
  1349                           ;main.c: 809: }
  1350  0011CC  D002               	goto	l6214
  1351  0011CE                     l6212:
  1352                           
  1353                           ;main.c: 810: else
  1354                           ;main.c: 811: {
  1355                           ;main.c: 812: StopPlaying();
  1356  0011CE  EC32  F016         	call	_StopPlaying	;wreg free
  1357  0011D2                     l6214:
  1358  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  1359                           
  1360                           ;main.c: 813: }
  1361                           ;main.c: 815: }
  1362                           ;main.c: 818: if(curMs - lastMs >= 1000)
  1363  0011D4  0100               	movlb	0	; () banked
  1364  0011D6  51E9               	movf	main@lastMs& (0+255),w,b
  1365  0011D8  5DEF               	subwf	main@curMs& (0+255),w,b
  1366  0011DA  6E6A               	movwf	??_main& (0+255),c
  1367  0011DC  51EA               	movf	(main@lastMs+1)& (0+255),w,b
  1368  0011DE  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1369  0011E0  6E6B               	movwf	(??_main+1)& (0+255),c
  1370  0011E2  51EB               	movf	(main@lastMs+2)& (0+255),w,b
  1371  0011E4  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1372  0011E6  6E6C               	movwf	(??_main+2)& (0+255),c
  1373  0011E8  51EC               	movf	(main@lastMs+3)& (0+255),w,b
  1374  0011EA  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1375  0011EC  6E6D               	movwf	(??_main+3)& (0+255),c
  1376  0011EE  506D               	movf	??_main+3,w,c
  1377  0011F0  106C               	iorwf	??_main+2,w,c
  1378  0011F2  E105               	bnz	u5300
  1379  0011F4  0EE8               	movlw	232
  1380  0011F6  5C6A               	subwf	??_main,w,c
  1381  0011F8  0E03               	movlw	3
  1382  0011FA  586B               	subwfb	??_main+1,w,c
  1383  0011FC  E34A               	bnc	l6244
  1384  0011FE                     u5300:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 819: {
  1388                           ;main.c: 820: AddSecond();
  1389  0011FE  EC76  F016         	call	_AddSecond	;wreg free
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 822: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1393  001202  2876               	incf	_currentAlarmedEventNum,w,c
  1394  001204  E015               	bz	l6224
  1395                           
  1396                           ; BSR set to: 0
  1397  001206  EC85  F016         	call	_GetTime	;wreg free
  1398  00120A  6ED9               	movwf	fsr2l,c
  1399  00120C  6ADA               	clrf	fsr2h,c
  1400  00120E  0100               	movlb	0	; () banked
  1401  001210  51AC               	movf	_eventResetSecond& (0+255),w,b
  1402  001212  5CDE               	subwf	postinc2,w,c
  1403  001214  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1404  001216  58DE               	subwfb	postinc2,w,c
  1405  001218  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1406  00121A  58DE               	subwfb	postinc2,w,c
  1407  00121C  50DE               	movf	postinc2,w,c
  1408  00121E  0A80               	xorlw	128
  1409  001220  6E6E               	movwf	(??_main+4)& (0+255),c
  1410  001222  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1411  001224  0A80               	xorlw	128
  1412  001226  586E               	subwfb	(??_main+4)& (0+255),w,c
  1413  001228  E303               	bnc	l6224
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 823: {
  1417                           ;main.c: 824: ResetEvent(0);
  1418  00122A  0E00               	movlw	0
  1419  00122C  ECEA  F014         	call	_ResetEvent
  1420  001230                     l6224:
  1421                           
  1422                           ;main.c: 825: }
  1423                           ;main.c: 827: _MODBUSInputRegs[5] = *GetTime();
  1424  001230  EC85  F016         	call	_GetTime	;wreg free
  1425  001234  6ED9               	movwf	fsr2l,c
  1426  001236  6ADA               	clrf	fsr2h,c
  1427  001238  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1428  00123C  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1429                           
  1430                           ;main.c: 828: uint8_t hour = 0, minute = 0;
  1431  001240  0100               	movlb	0	; () banked
  1432  001242  6BEE               	clrf	main@hour& (0+255),b
  1433                           
  1434                           ; BSR set to: 0
  1435  001244  6BF3               	clrf	main@minute& (0+255),b
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 830: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1439  001246  0EF3               	movlw	low main@minute
  1440  001248  6E07               	movwf	getHourMin@min,c
  1441  00124A  0EEE               	movlw	main@hour& (0+255)
  1442  00124C  ECC2  F015         	call	_getHourMin
  1443  001250  0900               	iorlw	0
  1444  001252  E00F               	bz	l6240
  1445  001254  0100               	movlb	0	; () banked
  1446  001256  51F3               	movf	main@minute& (0+255),w,b
  1447  001258  19ED               	xorwf	main@oldMinute& (0+255),w,b
  1448  00125A  E00B               	bz	l6240
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 831: {
  1452                           ;main.c: 832: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1453  00125C  51EE               	movf	main@hour& (0+255),w,b
  1454  00125E  6E6A               	movwf	??_main& (0+255),c
  1455  001260  51F3               	movf	main@minute& (0+255),w,b
  1456  001262  0101               	movlb	1	; () banked
  1457  001264  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1458  001266  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;main.c: 834: oldMinute = minute;
  1462  00126A  C0F3  F0ED         	movff	main@minute,main@oldMinute
  1463                           
  1464                           ; BSR set to: 1
  1465                           ;main.c: 835: ProcessDiary();
  1466  00126E  ECC3  F00F         	call	_ProcessDiary	;wreg free
  1467  001272                     l6240:
  1468                           
  1469                           ;main.c: 836: }
  1470                           ;main.c: 838: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1471  001272  0100               	movlb	0	; () banked
  1472  001274  51EE               	movf	main@hour& (0+255),w,b
  1473  001276  6E6A               	movwf	??_main& (0+255),c
  1474  001278  51F3               	movf	main@minute& (0+255),w,b
  1475  00127A  0101               	movlb	1	; () banked
  1476  00127C  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1477  00127E  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;main.c: 840: lastMs = curMs;
  1481  001282  C0EF  F0E9         	movff	main@curMs,main@lastMs
  1482  001286  C0F0  F0EA         	movff	main@curMs+1,main@lastMs+1
  1483  00128A  C0F1  F0EB         	movff	main@curMs+2,main@lastMs+2
  1484  00128E  C0F2  F0EC         	movff	main@curMs+3,main@lastMs+3
  1485  001292                     l6244:
  1486                           
  1487                           ;main.c: 842: }
  1488                           ;main.c: 843: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1489  001292  C0BC  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1490  001296  C0BD  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1491  00129A  0EDF               	movlw	low __MODBUSCoils
  1492  00129C  6E2C               	movwf	ModbusPoll@coils,c
  1493  00129E  0EAA               	movlw	low __MODBUSInputRegs
  1494  0012A0  6E2D               	movwf	ModbusPoll@inputRegs,c
  1495  0012A2  0E01               	movlw	high __MODBUSInputRegs
  1496  0012A4  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1497  0012A6  0E0F               	movlw	15
  1498  0012A8  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1499  0012AA  0E8C               	movlw	low __MODBUSHoldingRegs
  1500  0012AC  6E30               	movwf	ModbusPoll@holdingRegs,c
  1501  0012AE  0E01               	movlw	high __MODBUSHoldingRegs
  1502  0012B0  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1503  0012B2  0E0F               	movlw	15
  1504  0012B4  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1505  0012B6  EC60  F009         	call	_ModbusPoll	;wreg free
  1506                           
  1507                           ;main.c: 844: io_poll();
  1508  0012BA  ECC9  F00A         	call	_io_poll	;wreg free
  1509  0012BE  D764               	goto	l6196
  1510  0012C0                     __end_of_main:
  1511                           	opt stack 0
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1h	equ	0xFE2
  1520                           fsr1l	equ	0xFE1
  1521                           postinc2	equ	0xFDE
  1522                           postdec2	equ	0xFDD
  1523                           fsr2h	equ	0xFDA
  1524                           fsr2l	equ	0xFD9
  1525                           
  1526 ;; *************** function _pwm_init *****************
  1527 ;; Defined at:
  1528 ;;		line 356 in file "main.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1542 ;;      Params:         0       0       0       0       0       0       0
  1543 ;;      Locals:         0       0       0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0
  1545 ;;      Totals:         0       0       0       0       0       0       0
  1546 ;;Total ram usage:        0 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    2
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text1
  1557  002CDA                     __ptext1:
  1558                           	opt stack 0
  1559  002CDA                     _pwm_init:
  1560                           	opt stack 28
  1561                           
  1562                           ;incstack = 0
  1563  002CDA  FFFF               	dw	65535
  1564                           
  1565                           ;main.c: 368: CCP1CONbits.CCP1M = 0x0f;
  1566  002CDC  0E0F               	movlw	15
  1567  002CDE  12BD               	iorwf	4029,f,c	;volatile
  1568                           
  1569                           ;main.c: 375: PR2 = 255;
  1570  002CE0  68CB               	setf	4043,c	;volatile
  1571                           
  1572                           ;main.c: 378: T2CONbits.T2CKPS1 = 1;
  1573  002CE2  82CA               	bsf	4042,1,c	;volatile
  1574                           
  1575                           ;main.c: 379: T2CONbits.T2CKPS0 = 0;
  1576  002CE4  90CA               	bcf	4042,0,c	;volatile
  1577                           
  1578                           ;main.c: 382: TRISCbits.RC2 = 0;
  1579  002CE6  9494               	bcf	3988,2,c	;volatile
  1580  002CE8  0012               	return		;funcret
  1581  002CEA  FFFF               	dw	65535	; errata NOP
  1582  002CEC                     __end_of_pwm_init:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           fsr1h	equ	0xFE2
  1592                           fsr1l	equ	0xFE1
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           
  1598 ;; *************** function _io_poll *****************
  1599 ;; Defined at:
  1600 ;;		line 897 in file "main.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  hourMin         2    0        unsigned int 
  1605 ;;  command         1    0[BANK0 ] unsigned char 
  1606 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1607 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1608 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1609 ;;		 -> _lastCommand(1), 
  1610 ;;  v1              1    3[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1620 ;;      Params:         0       0       0       0       0       0       0
  1621 ;;      Locals:         0       7       0       0       0       0       0
  1622 ;;      Temps:          4       0       0       0       0       0       0
  1623 ;;      Totals:         4       7       0       0       0       0       0
  1624 ;;Total ram usage:       11 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    8
  1627 ;; This function calls:
  1628 ;;		_CommandSetStatusLed
  1629 ;;		_InitFromEeprom
  1630 ;;		_LightLed
  1631 ;;		_ModbusGetLastCommand
  1632 ;;		_ModbusSetExceptionStatusBit
  1633 ;;		_PlaySound
  1634 ;;		_SetTimeCommand
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text2
  1641  001592                     __ptext2:
  1642                           	opt stack 0
  1643  001592                     _io_poll:
  1644                           	opt stack 22
  1645                           
  1646                           ;incstack = 0
  1647  001592  FFFF               	dw	65535
  1648                           
  1649                           ;main.c: 899: uint16_t lastAddress;
  1650                           ;main.c: 900: uint16_t lastEndAddress;
  1651                           ;main.c: 902: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1652  001594  0EE3               	movlw	low io_poll@lastEndAddress
  1653  001596  6E07               	movwf	ModbusGetLastCommand@count,c
  1654  001598  0EE6               	movlw	io_poll@lastAddress& (0+255)
  1655  00159A  EC95  F015         	call	_ModbusGetLastCommand
  1656  00159E  0100               	movlb	0	; () banked
  1657  0015A0  6FE8               	movwf	io_poll@lastCommand& (0+255),b
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 903: if(*lastCommand == MB_FC_NONE)
  1661  0015A2  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1662  0015A4  6ED9               	movwf	fsr2l,c
  1663  0015A6  6ADA               	clrf	fsr2h,c
  1664  0015A8  50DF               	movf	indf2,w,c
  1665  0015AA  E101 D08A          	bz	l445
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 906: lastEndAddress += lastAddress - 1;
  1669  0015AE  6866               	setf	??_io_poll& (0+255),c
  1670  0015B0  6867               	setf	(??_io_poll+1)& (0+255),c
  1671  0015B2  C0E6  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1672  0015B6  C0E7  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1673  0015BA  5066               	movf	??_io_poll,w,c
  1674  0015BC  2668               	addwf	??_io_poll+2,f,c
  1675  0015BE  5067               	movf	??_io_poll+1,w,c
  1676  0015C0  2269               	addwfc	??_io_poll+3,f,c
  1677  0015C2  5068               	movf	??_io_poll+2,w,c
  1678  0015C4  27E3               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1679  0015C6  5069               	movf	??_io_poll+3,w,c
  1680  0015C8  23E4               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 908: uint8_t v1;
  1684                           ;main.c: 909: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1685  0015CA  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1686  0015CC  6ED9               	movwf	fsr2l,c
  1687  0015CE  6ADA               	clrf	fsr2h,c
  1688  0015D0  0E06               	movlw	6
  1689  0015D2  18DE               	xorwf	postinc2,w,c
  1690  0015D4  E006               	bz	l6130
  1691                           
  1692                           ; BSR set to: 0
  1693  0015D6  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1694  0015D8  6ED9               	movwf	fsr2l,c
  1695  0015DA  6ADA               	clrf	fsr2h,c
  1696  0015DC  0E10               	movlw	16
  1697  0015DE  18DE               	xorwf	postinc2,w,c
  1698  0015E0  E162               	bnz	l6174
  1699  0015E2                     l6130:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 910: {
  1703                           ;main.c: 912: if(lastAddress == 0)
  1704  0015E2  51E6               	movf	io_poll@lastAddress& (0+255),w,b
  1705  0015E4  11E7               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1706  0015E6  E15F               	bnz	l6174
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;main.c: 913: {
  1710                           ;main.c: 914: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1711  0015E8  C18D  F0E2         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1712                           
  1713                           ;main.c: 915: uint16_t hourMin;
  1714                           ;main.c: 916: switch(command)
  1715  0015EC  D046               	goto	l6172
  1716  0015EE                     l451:
  1717                           
  1718                           ; BSR set to: 0
  1719  0015EE  00FF               	reset		; ;# 
  1720                           
  1721                           ;main.c: 922: return;
  1722  0015F0  D068               	goto	l445
  1723  0015F2                     l6134:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 926: SetTimeCommand();
  1727  0015F2  EC7D  F015         	call	_SetTimeCommand	;wreg free
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 927: ModbusSetExceptionStatusBit(0, 1);
  1731  0015F6  0E01               	movlw	1
  1732  0015F8  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1733  0015FA  0E00               	movlw	0
  1734  0015FC  EC12  F014         	call	_ModbusSetExceptionStatusBit
  1735                           
  1736                           ;main.c: 928: break;
  1737  001600  D04C               	goto	l453
  1738  001602                     l455:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 932: eventCount = 0;
  1742  001602  6BDA               	clrf	_eventCount& (0+255),b
  1743  001604                     l457:
  1744  001604  FFFF               	dw	65535	; assembler added errata NOP
  1745  001606  B2A6               	btfsc	4006,1,c	;volatile
  1746  001608  D7FD               	goto	l457
  1747  00160A  0E12               	movlw	18
  1748  00160C  6EA9               	movwf	4009,c	;volatile
  1749  00160E  6AA8               	clrf	4008,c	;volatile
  1750  001610  90D8               	bcf	status,0,c	;volatile
  1751  001612  BEF2               	btfsc	intcon,7,c	;volatile
  1752  001614  80D8               	bsf	status,0,c	;volatile
  1753  001616  9EF2               	bcf	intcon,7,c	;volatile
  1754  001618  84A6               	bsf	4006,2,c	;volatile
  1755  00161A  0E55               	movlw	85
  1756  00161C  6EA7               	movwf	4007,c	;volatile
  1757  00161E  0EAA               	movlw	170
  1758  001620  6EA7               	movwf	4007,c	;volatile
  1759  001622  82A6               	bsf	4006,1,c	;volatile
  1760  001624  94A6               	bcf	4006,2,c	;volatile
  1761  001626  E301               	bnc	l6158
  1762  001628  8EF2               	bsf	intcon,7,c	;volatile
  1763  00162A                     l6158:
  1764                           
  1765                           ;main.c: 934: ModbusSetExceptionStatusBit(0, 1);
  1766  00162A  0E01               	movlw	1
  1767  00162C  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1768  00162E  0E00               	movlw	0
  1769  001630  EC12  F014         	call	_ModbusSetExceptionStatusBit
  1770                           
  1771                           ;main.c: 935: break;
  1772  001634  D032               	goto	l453
  1773  001636                     l463:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 961: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1777  001636  C18E  F0E5         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;main.c: 963: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1781  00163A  51E5               	movf	io_poll@v1& (0+255),w,b
  1782  00163C  0B03               	andlw	3
  1783  00163E  6E07               	movwf	LightLed@ledState,c
  1784  001640  41E5               	rrncf	io_poll@v1& (0+255),w,b
  1785  001642  42E8               	rrncf	wreg,f,c
  1786  001644  0B3F               	andlw	63
  1787  001646  0B01               	andlw	1
  1788  001648  6E08               	movwf	LightLed@blink,c
  1789  00164A  0101               	movlb	1	; () banked
  1790  00164C  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1791  00164E  ECC0  F004         	call	_LightLed
  1792                           
  1793                           ;main.c: 964: _MODBUSHoldingRegs[1] = 0;
  1794  001652  0101               	movlb	1	; () banked
  1795  001654  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1796  001656  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1797                           
  1798                           ; BSR set to: 1
  1799                           ;main.c: 965: ModbusSetExceptionStatusBit(0, 1);
  1800  001658  0E01               	movlw	1
  1801  00165A  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1802  00165C  0E00               	movlw	0
  1803  00165E  EC12  F014         	call	_ModbusSetExceptionStatusBit
  1804                           
  1805                           ;main.c: 966: break;
  1806  001662  D01B               	goto	l453
  1807  001664                     l6166:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 975: PlaySound(((unsigned char)((_MODBUSHoldingRegs[0])&0xFF)), ((unsigned char
      +                          )((_MODBUSHoldingRegs[1])&0xFF)));
  1811  001664  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  1812  001668  6A16               	clrf	PlaySound@playDuration+1,c
  1813  00166A  0101               	movlb	1	; () banked
  1814  00166C  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1815  00166E  EC86  F00E         	call	_PlaySound
  1816                           
  1817                           ;main.c: 976: break;
  1818  001672  D013               	goto	l453
  1819  001674                     l6168:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 979: CommandSetStatusLed();
  1823  001674  ECCE  F012         	call	_CommandSetStatusLed	;wreg free
  1824                           
  1825                           ;main.c: 980: break;
  1826  001678  D010               	goto	l453
  1827  00167A                     l6172:
  1828  00167A  FFFF               	dw	65535	; assembler added errata NOP
  1829                           
  1830                           ; BSR set to: 0
  1831  00167C  51E2               	movf	io_poll@command& (0+255),w,b
  1832                           
  1833                           ; Switch size 1, requested type "speed"
  1834                           ; Number of cases is 7, Range of values is 1 to 145
  1835                           ; switch strategies available:
  1836                           ; Name         Instructions Cycles
  1837                           ; simple_byte           22    12 (average)
  1838                           ;	Chosen strategy is simple_byte
  1839  00167E  0A01               	xorlw	1	; case 1
  1840  001680  E00C               	bz	l453
  1841  001682  0A11               	xorlw	17	; case 16
  1842  001684  E0B6               	bz	l6134
  1843  001686  0A6F               	xorlw	111	; case 127
  1844  001688  E0B2               	bz	l451
  1845  00168A  0AFF               	xorlw	255	; case 128
  1846  00168C  E0BA               	bz	l455
  1847  00168E  0A02               	xorlw	2	; case 130
  1848  001690  E0D2               	bz	l463
  1849  001692  0A01               	xorlw	1	; case 131
  1850  001694  E0EF               	bz	l6168
  1851  001696  0A12               	xorlw	18	; case 145
  1852  001698  E0E5               	bz	l6166
  1853  00169A                     l453:
  1854  00169A  FFFF               	dw	65535	; assembler added errata NOP
  1855                           
  1856                           ;main.c: 982: _MODBUSHoldingRegs[0] = 0;
  1857  00169C  0101               	movlb	1	; () banked
  1858  00169E  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1859  0016A0  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1860                           
  1861                           ;main.c: 983: _MODBUSHoldingRegs[1] = 0;
  1862  0016A2  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1863  0016A4  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1864  0016A6                     l6174:
  1865                           
  1866                           ;main.c: 984: }
  1867                           ;main.c: 985: }
  1868                           ;main.c: 988: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  1869  0016A6  0100               	movlb	0	; () banked
  1870  0016A8  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1871  0016AA  6ED9               	movwf	fsr2l,c
  1872  0016AC  6ADA               	clrf	fsr2h,c
  1873  0016AE  0E15               	movlw	21
  1874  0016B0  18DE               	xorwf	postinc2,w,c
  1875  0016B2  E107               	bnz	l445
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 989: {
  1879                           ;main.c: 990: InitFromEeprom();
  1880  0016B4  ECCB  F011         	call	_InitFromEeprom	;wreg free
  1881                           
  1882                           ; BSR set to: 1
  1883                           ;main.c: 991: ModbusSetExceptionStatusBit(0, 1);
  1884  0016B8  0E01               	movlw	1
  1885  0016BA  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1886  0016BC  0E00               	movlw	0
  1887  0016BE  EC12  F014         	call	_ModbusSetExceptionStatusBit
  1888  0016C2                     l445:
  1889  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  1890  0016C4  0012               	return		;funcret
  1891  0016C6  FFFF               	dw	65535	; errata NOP
  1892  0016C8                     __end_of_io_poll:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           intcon	equ	0xFF2
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1h	equ	0xFE2
  1903                           fsr1l	equ	0xFE1
  1904                           indf2	equ	0xFDF
  1905                           postinc2	equ	0xFDE
  1906                           postdec2	equ	0xFDD
  1907                           fsr2h	equ	0xFDA
  1908                           fsr2l	equ	0xFD9
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function _SetTimeCommand *****************
  1912 ;; Defined at:
  1913 ;;		line 868 in file "main.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  yearMonth       2   99[COMRAM] unsigned int 
  1918 ;;  daySec          2   97[COMRAM] unsigned int 
  1919 ;;  hourMin         2   95[COMRAM] unsigned int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : F/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1929 ;;      Params:         0       0       0       0       0       0       0
  1930 ;;      Locals:         6       0       0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0
  1932 ;;      Totals:         6       0       0       0       0       0       0
  1933 ;;Total ram usage:        6 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    7
  1936 ;; This function calls:
  1937 ;;		_SetTimeFromRegs
  1938 ;; This function is called by:
  1939 ;;		_io_poll
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text3
  1944  002AFA                     __ptext3:
  1945                           	opt stack 0
  1946  002AFA                     _SetTimeCommand:
  1947                           	opt stack 22
  1948                           
  1949                           ;incstack = 0
  1950  002AFA  FFFF               	dw	65535
  1951                           
  1952                           ;main.c: 870: uint16_t hourMin = _MODBUSHoldingRegs[1];
  1953  002AFC  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  1954  002B00  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  1955                           
  1956                           ;main.c: 872: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  1957  002B04  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  1958  002B08  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  1959                           
  1960                           ;main.c: 873: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  1961  002B0C  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  1962  002B10  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  1963                           
  1964                           ;main.c: 874: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  1965  002B14  0E62               	movlw	low SetTimeCommand@daySec
  1966  002B16  6E45               	movwf	SetTimeFromRegs@daySec,c
  1967  002B18  0E64               	movlw	low SetTimeCommand@yearMonth
  1968  002B1A  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  1969  002B1C  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  1970  002B1E  EC60  F00F         	call	_SetTimeFromRegs
  1971                           
  1972                           ;main.c: 875: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  1973  002B22  0100               	movlb	0	; () banked
  1974  002B24  81BC               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  1975                           
  1976                           ; BSR set to: 0
  1977  002B26  0012               	return		;funcret
  1978  002B28  FFFF               	dw	65535	; errata NOP
  1979  002B2A                     __end_of_SetTimeCommand:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           intcon	equ	0xFF2
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           postdec1	equ	0xFE5
  1989                           fsr1h	equ	0xFE2
  1990                           fsr1l	equ	0xFE1
  1991                           indf2	equ	0xFDF
  1992                           postinc2	equ	0xFDE
  1993                           postdec2	equ	0xFDD
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _SetTimeFromRegs *****************
  1999 ;; Defined at:
  2000 ;;		line 851 in file "main.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  hourMin         1    wreg     PTR unsigned int 
  2003 ;;		 -> SetTimeCommand@hourMin(2), 
  2004 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2005 ;;		 -> SetTimeCommand@daySec(2), 
  2006 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2007 ;;		 -> SetTimeCommand@yearMonth(2), 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2010 ;;		 -> SetTimeCommand@hourMin(2), 
  2011 ;;  newTime        18   77[COMRAM] struct tm
  2012 ;;  newRawTime      4   72[COMRAM] long 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         2       0       0       0       0       0       0
  2023 ;;      Locals:        23       0       0       0       0       0       0
  2024 ;;      Temps:          2       0       0       0       0       0       0
  2025 ;;      Totals:        27       0       0       0       0       0       0
  2026 ;;Total ram usage:       27 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    6
  2029 ;; This function calls:
  2030 ;;		_LightStatusLed
  2031 ;;		_LoadNextEvent
  2032 ;;		_SetHourMin
  2033 ;;		_SetTime
  2034 ;;		_mktime
  2035 ;; This function is called by:
  2036 ;;		_SetTimeCommand
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text4
  2041  001EC0                     __ptext4:
  2042                           	opt stack 0
  2043  001EC0                     _SetTimeFromRegs:
  2044                           	opt stack 22
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;incstack = 0
  2048  001EC0  FFFF               	dw	65535
  2049                           
  2050                           ;SetTimeFromRegs@hourMin stored from wreg
  2051  001EC2  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2052                           
  2053                           ;main.c: 853: struct tm newTime;
  2054                           ;main.c: 854: newTime.tm_year = (*yearMonth >> 8) + 100;
  2055  001EC4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2056  001EC6  6ED9               	movwf	fsr2l,c
  2057  001EC8  6ADA               	clrf	fsr2h,c
  2058  001ECA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2059  001ECE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2060  001ED2  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2061  001ED6  6A48               	clrf	??_SetTimeFromRegs+1,c
  2062  001ED8  0E64               	movlw	100
  2063  001EDA  2447               	addwf	??_SetTimeFromRegs,w,c
  2064  001EDC  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2065  001EDE  0E00               	movlw	0
  2066  001EE0  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2067  001EE2  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2068                           
  2069                           ;main.c: 855: newTime.tm_mon = *yearMonth & 0xFF;
  2070  001EE4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2071  001EE6  6ED9               	movwf	fsr2l,c
  2072  001EE8  6ADA               	clrf	fsr2h,c
  2073  001EEA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2074  001EEE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2075  001EF2  5047               	movf	??_SetTimeFromRegs,w,c
  2076  001EF4  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2077  001EF6  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2078                           
  2079                           ;main.c: 856: newTime.tm_mday = *daySec >> 8;
  2080  001EF8  5045               	movf	SetTimeFromRegs@daySec,w,c
  2081  001EFA  6ED9               	movwf	fsr2l,c
  2082  001EFC  6ADA               	clrf	fsr2h,c
  2083  001EFE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2084  001F02  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2085  001F06  5048               	movf	??_SetTimeFromRegs+1,w,c
  2086  001F08  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2087  001F0A  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2088                           
  2089                           ;main.c: 857: newTime.tm_hour = *hourMin >> 8;
  2090  001F0C  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2091  001F0E  6ED9               	movwf	fsr2l,c
  2092  001F10  6ADA               	clrf	fsr2h,c
  2093  001F12  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2094  001F16  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2095  001F1A  5048               	movf	??_SetTimeFromRegs+1,w,c
  2096  001F1C  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2097  001F1E  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2098                           
  2099                           ;main.c: 858: newTime.tm_min = *hourMin & 0xFF;
  2100  001F20  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2101  001F22  6ED9               	movwf	fsr2l,c
  2102  001F24  6ADA               	clrf	fsr2h,c
  2103  001F26  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2104  001F2A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2105  001F2E  5047               	movf	??_SetTimeFromRegs,w,c
  2106  001F30  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2107  001F32  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2108                           
  2109                           ;main.c: 859: newTime.tm_sec = *daySec & 0xFF;
  2110  001F34  5045               	movf	SetTimeFromRegs@daySec,w,c
  2111  001F36  6ED9               	movwf	fsr2l,c
  2112  001F38  6ADA               	clrf	fsr2h,c
  2113  001F3A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2114  001F3E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2115  001F42  5047               	movf	??_SetTimeFromRegs,w,c
  2116  001F44  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2117  001F46  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2118                           
  2119                           ;main.c: 860: SetHourMin(&newTime.tm_hour, &newTime.tm_min, &newTime.tm_sec);
  2120  001F48  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2121  001F4A  6E0B               	movwf	SetHourMin@newMin,c
  2122  001F4C  0E4E               	movlw	low SetTimeFromRegs@newTime
  2123  001F4E  6E0C               	movwf	SetHourMin@sec,c
  2124  001F50  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2125  001F52  0F04               	addlw	4
  2126  001F54  ECFA  F00B         	call	_SetHourMin
  2127                           
  2128                           ;main.c: 861: time_t newRawTime = mktime(&newTime);
  2129  001F58  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2130  001F5A  EC37  F003         	call	_mktime
  2131  001F5E  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2132  001F62  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2133  001F66  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2134  001F6A  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2135                           
  2136                           ;main.c: 862: SetTime(&newRawTime);
  2137  001F6E  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2138  001F70  EC23  F016         	call	_SetTime
  2139                           
  2140                           ;main.c: 863: LightStatusLed(0x05, 0, 0);
  2141  001F74  0E00               	movlw	0
  2142  001F76  6E07               	movwf	LightStatusLed@on,c
  2143  001F78  6E08               	movwf	LightStatusLed@blink,c
  2144  001F7A  0E05               	movlw	5
  2145  001F7C  EC0B  F00E         	call	_LightStatusLed
  2146                           
  2147                           ;main.c: 864: LoadNextEvent();
  2148  001F80  EF06  F00D         	goto	_LoadNextEvent	;wreg free
  2149  001F84  FFFF               	dw	65535	; errata NOP
  2150  001F86                     __end_of_SetTimeFromRegs:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           intcon	equ	0xFF2
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _mktime *****************
  2170 ;; Defined at:
  2171 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  timeptr         1    wreg     PTR struct tm
  2174 ;;		 -> SetTimeFromRegs@newTime(18), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2177 ;;		 -> SetTimeFromRegs@newTime(18), 
  2178 ;;  tt              4   63[COMRAM] long 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  4   45[COMRAM] long 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2188 ;;      Params:         4       0       0       0       0       0       0
  2189 ;;      Locals:         5       0       0       0       0       0       0
  2190 ;;      Temps:         14       0       0       0       0       0       0
  2191 ;;      Totals:        23       0       0       0       0       0       0
  2192 ;;Total ram usage:       23 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    5
  2195 ;; This function calls:
  2196 ;;		_ymd_to_scalar
  2197 ;; This function is called by:
  2198 ;;		_SetTimeFromRegs
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text5
  2203  00066E                     __ptext5:
  2204                           	opt stack 0
  2205  00066E                     _mktime:
  2206                           	opt stack 22
  2207                           
  2208                           ;incstack = 0
  2209  00066E  FFFF               	dw	65535
  2210                           
  2211                           ;mktime@timeptr stored from wreg
  2212  000670  6E44               	movwf	mktime@timeptr,c
  2213  000672  5044               	movf	mktime@timeptr,w,c
  2214  000674  6ED9               	movwf	fsr2l,c
  2215  000676  6ADA               	clrf	fsr2h,c
  2216  000678  0E0A               	movlw	10
  2217  00067A  26D9               	addwf	fsr2l,f,c
  2218  00067C  0E01               	movlw	1
  2219  00067E  BEDB               	btfsc	plusw2,7,c
  2220  000680  D012               	goto	l1289
  2221  000682  50DB               	movf	plusw2,w,c
  2222  000684  E103               	bnz	u4360
  2223  000686  0E46               	movlw	70
  2224  000688  5CDE               	subwf	postinc2,w,c
  2225  00068A  E30D               	bnc	l1289
  2226  00068C                     u4360:
  2227  00068C  5044               	movf	mktime@timeptr,w,c
  2228  00068E  6ED9               	movwf	fsr2l,c
  2229  000690  6ADA               	clrf	fsr2h,c
  2230  000692  0E0A               	movlw	10
  2231  000694  26D9               	addwf	fsr2l,f,c
  2232  000696  0E01               	movlw	1
  2233  000698  BEDB               	btfsc	plusw2,7,c
  2234  00069A  D00B               	goto	l5360
  2235  00069C  50DB               	movf	plusw2,w,c
  2236  00069E  E103               	bnz	u4370
  2237  0006A0  0E8B               	movlw	139
  2238  0006A2  5CDE               	subwf	postinc2,w,c
  2239  0006A4  E306               	bnc	l5360
  2240  0006A6                     u4370:
  2241  0006A6                     l1289:
  2242  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2243  0006A8  6840               	setf	mktime@tt,c
  2244  0006AA  6841               	setf	mktime@tt+1,c
  2245  0006AC  6842               	setf	mktime@tt+2,c
  2246  0006AE  6843               	setf	mktime@tt+3,c
  2247  0006B0  D15C               	goto	l5370
  2248  0006B2                     l5360:
  2249  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2250  0006B4  5044               	movf	mktime@timeptr,w,c
  2251  0006B6  6ED9               	movwf	fsr2l,c
  2252  0006B8  6ADA               	clrf	fsr2h,c
  2253  0006BA  0E0A               	movlw	10
  2254  0006BC  26D9               	addwf	fsr2l,f,c
  2255  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2256  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2257  0006C6  0E6C               	movlw	108
  2258  0006C8  2432               	addwf	??_mktime,w,c
  2259  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2260  0006CC  0E07               	movlw	7
  2261  0006CE  2033               	addwfc	??_mktime+1,w,c
  2262  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2263  0006D2  5044               	movf	mktime@timeptr,w,c
  2264  0006D4  6ED9               	movwf	fsr2l,c
  2265  0006D6  6ADA               	clrf	fsr2h,c
  2266  0006D8  0E08               	movlw	8
  2267  0006DA  26D9               	addwf	fsr2l,f,c
  2268  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2269  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2270  0006E4  2834               	incf	??_mktime+2,w,c
  2271  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2272  0006E8  0E00               	movlw	0
  2273  0006EA  2035               	addwfc	??_mktime+3,w,c
  2274  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2275  0006EE  5044               	movf	mktime@timeptr,w,c
  2276  0006F0  6ED9               	movwf	fsr2l,c
  2277  0006F2  6ADA               	clrf	fsr2h,c
  2278  0006F4  0E06               	movlw	6
  2279  0006F6  26D9               	addwf	fsr2l,f,c
  2280  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2281  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2282  000700  EC28  F011         	call	_ymd_to_scalar	;wreg free
  2283  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2284  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2285  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2286  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2287  000714  0E07               	movlw	7
  2288  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2289  000718  0EB2               	movlw	178
  2290  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2291  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2292  00071E  0E01               	movlw	1
  2293  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2294  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2295  000724  6E22               	movwf	ymd_to_scalar@day,c
  2296  000726  EC28  F011         	call	_ymd_to_scalar	;wreg free
  2297  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2298  00072C  5E40               	subwf	mktime@tt,f,c
  2299  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2300  000730  5A41               	subwfb	mktime@tt+1,f,c
  2301  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2302  000734  5A42               	subwfb	mktime@tt+2,f,c
  2303  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2304  000738  5A43               	subwfb	mktime@tt+3,f,c
  2305  00073A  5044               	movf	mktime@timeptr,w,c
  2306  00073C  6ED9               	movwf	fsr2l,c
  2307  00073E  6ADA               	clrf	fsr2h,c
  2308  000740  0E04               	movlw	4
  2309  000742  26D9               	addwf	fsr2l,f,c
  2310  000744  CFDE F032          	movff	postinc2,??_mktime
  2311  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2312  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2313  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2314  000754  0E00               	movlw	0
  2315  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2316  000758  0EFF               	movlw	255
  2317  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2318  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2319  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2320  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2321  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2322  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2323  00076E  0E18               	movlw	24
  2324  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2325  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2326  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2327  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2328  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2329  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2330  000780  50F3               	movf	prodl,w,c
  2331  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2332  000784  50F4               	movf	prodh,w,c
  2333  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2334  000788  0E00               	movlw	0
  2335  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2336  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2337  00078E  50F3               	movf	prodl,w,c
  2338  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2339  000792  50F4               	movf	prodh,w,c
  2340  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2341  000796  0E00               	movlw	0
  2342  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2343  00079A  0E18               	movlw	24
  2344  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2345  00079E  50F3               	movf	prodl,w,c
  2346  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2347  0007A2  50F4               	movf	prodh,w,c
  2348  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2349  0007A6  0E00               	movlw	0
  2350  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2351  0007AA  50F3               	movf	prodl,w,c
  2352  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2353  0007AE  50F4               	movf	prodh,w,c
  2354  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2355  0007B2  0E00               	movlw	0
  2356  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2357  0007B6  50F3               	movf	prodl,w,c
  2358  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2359  0007BA  50F4               	movf	prodh,w,c
  2360  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2361  0007BE  0E18               	movlw	24
  2362  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2363  0007C2  50F3               	movf	prodl,w,c
  2364  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2365  0007C6  0E00               	movlw	0
  2366  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2367  0007CA  50F3               	movf	prodl,w,c
  2368  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2369  0007CE  0E00               	movlw	0
  2370  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2371  0007D2  50F3               	movf	prodl,w,c
  2372  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2373  0007D6  0E00               	movlw	0
  2374  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2375  0007DA  50F3               	movf	prodl,w,c
  2376  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2377  0007DE  5034               	movf	??_mktime+2,w,c
  2378  0007E0  243C               	addwf	??_mktime+10,w,c
  2379  0007E2  6E40               	movwf	mktime@tt,c
  2380  0007E4  5035               	movf	??_mktime+3,w,c
  2381  0007E6  203D               	addwfc	??_mktime+11,w,c
  2382  0007E8  6E41               	movwf	mktime@tt+1,c
  2383  0007EA  5036               	movf	??_mktime+4,w,c
  2384  0007EC  203E               	addwfc	??_mktime+12,w,c
  2385  0007EE  6E42               	movwf	mktime@tt+2,c
  2386  0007F0  5037               	movf	??_mktime+5,w,c
  2387  0007F2  203F               	addwfc	??_mktime+13,w,c
  2388  0007F4  6E43               	movwf	mktime@tt+3,c
  2389  0007F6  5044               	movf	mktime@timeptr,w,c
  2390  0007F8  6ED9               	movwf	fsr2l,c
  2391  0007FA  6ADA               	clrf	fsr2h,c
  2392  0007FC  0E02               	movlw	2
  2393  0007FE  26D9               	addwf	fsr2l,f,c
  2394  000800  CFDE F032          	movff	postinc2,??_mktime
  2395  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2396  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2397  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2398  000810  0E00               	movlw	0
  2399  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2400  000814  0EFF               	movlw	255
  2401  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2402  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2403  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2404  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2405  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2406  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2407  00082A  0E3C               	movlw	60
  2408  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2409  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2410  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2411  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2412  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2413  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2414  00083C  50F3               	movf	prodl,w,c
  2415  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2416  000840  50F4               	movf	prodh,w,c
  2417  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2418  000844  0E00               	movlw	0
  2419  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2420  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2421  00084A  50F3               	movf	prodl,w,c
  2422  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2423  00084E  50F4               	movf	prodh,w,c
  2424  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2425  000852  0E00               	movlw	0
  2426  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2427  000856  0E3C               	movlw	60
  2428  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2429  00085A  50F3               	movf	prodl,w,c
  2430  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2431  00085E  50F4               	movf	prodh,w,c
  2432  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2433  000862  0E00               	movlw	0
  2434  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2435  000866  50F3               	movf	prodl,w,c
  2436  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2437  00086A  50F4               	movf	prodh,w,c
  2438  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2439  00086E  0E00               	movlw	0
  2440  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2441  000872  50F3               	movf	prodl,w,c
  2442  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2443  000876  50F4               	movf	prodh,w,c
  2444  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2445  00087A  0E3C               	movlw	60
  2446  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2447  00087E  50F3               	movf	prodl,w,c
  2448  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2449  000882  0E00               	movlw	0
  2450  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2451  000886  50F3               	movf	prodl,w,c
  2452  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2453  00088A  0E00               	movlw	0
  2454  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2455  00088E  50F3               	movf	prodl,w,c
  2456  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2457  000892  0E00               	movlw	0
  2458  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2459  000896  50F3               	movf	prodl,w,c
  2460  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2461  00089A  5034               	movf	??_mktime+2,w,c
  2462  00089C  243C               	addwf	??_mktime+10,w,c
  2463  00089E  6E40               	movwf	mktime@tt,c
  2464  0008A0  5035               	movf	??_mktime+3,w,c
  2465  0008A2  203D               	addwfc	??_mktime+11,w,c
  2466  0008A4  6E41               	movwf	mktime@tt+1,c
  2467  0008A6  5036               	movf	??_mktime+4,w,c
  2468  0008A8  203E               	addwfc	??_mktime+12,w,c
  2469  0008AA  6E42               	movwf	mktime@tt+2,c
  2470  0008AC  5037               	movf	??_mktime+5,w,c
  2471  0008AE  203F               	addwfc	??_mktime+13,w,c
  2472  0008B0  6E43               	movwf	mktime@tt+3,c
  2473  0008B2  5044               	movf	mktime@timeptr,w,c
  2474  0008B4  6ED9               	movwf	fsr2l,c
  2475  0008B6  6ADA               	clrf	fsr2h,c
  2476  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2477  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2478  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2479  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2480  0008C8  0E00               	movlw	0
  2481  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2482  0008CC  0EFF               	movlw	255
  2483  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2484  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2485  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2486  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2487  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2488  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2489  0008E2  0E3C               	movlw	60
  2490  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2491  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2492  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2493  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2494  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2495  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2496  0008F4  50F3               	movf	prodl,w,c
  2497  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2498  0008F8  50F4               	movf	prodh,w,c
  2499  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2500  0008FC  0E00               	movlw	0
  2501  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2502  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2503  000902  50F3               	movf	prodl,w,c
  2504  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2505  000906  50F4               	movf	prodh,w,c
  2506  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2507  00090A  0E00               	movlw	0
  2508  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2509  00090E  0E3C               	movlw	60
  2510  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2511  000912  50F3               	movf	prodl,w,c
  2512  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2513  000916  50F4               	movf	prodh,w,c
  2514  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2515  00091A  0E00               	movlw	0
  2516  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2517  00091E  50F3               	movf	prodl,w,c
  2518  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2519  000922  50F4               	movf	prodh,w,c
  2520  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2521  000926  0E00               	movlw	0
  2522  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2523  00092A  50F3               	movf	prodl,w,c
  2524  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2525  00092E  50F4               	movf	prodh,w,c
  2526  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2527  000932  0E3C               	movlw	60
  2528  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2529  000936  50F3               	movf	prodl,w,c
  2530  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2531  00093A  0E00               	movlw	0
  2532  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2533  00093E  50F3               	movf	prodl,w,c
  2534  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2535  000942  0E00               	movlw	0
  2536  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2537  000946  50F3               	movf	prodl,w,c
  2538  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2539  00094A  0E00               	movlw	0
  2540  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2541  00094E  50F3               	movf	prodl,w,c
  2542  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2543  000952  5034               	movf	??_mktime+2,w,c
  2544  000954  243C               	addwf	??_mktime+10,w,c
  2545  000956  6E40               	movwf	mktime@tt,c
  2546  000958  5035               	movf	??_mktime+3,w,c
  2547  00095A  203D               	addwfc	??_mktime+11,w,c
  2548  00095C  6E41               	movwf	mktime@tt+1,c
  2549  00095E  5036               	movf	??_mktime+4,w,c
  2550  000960  203E               	addwfc	??_mktime+12,w,c
  2551  000962  6E42               	movwf	mktime@tt+2,c
  2552  000964  5037               	movf	??_mktime+5,w,c
  2553  000966  203F               	addwfc	??_mktime+13,w,c
  2554  000968  6E43               	movwf	mktime@tt+3,c
  2555  00096A                     l5370:
  2556  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2557  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2558  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2559  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2560  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2561  00097C  0012               	return		;funcret
  2562  00097E  FFFF               	dw	65535	; errata NOP
  2563  000980                     __end_of_mktime:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           intcon	equ	0xFF2
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           plusw2	equ	0xFDB
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _ymd_to_scalar *****************
  2586 ;; Defined at:
  2587 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  yr              2   29[COMRAM] unsigned int 
  2590 ;;  mo              2   31[COMRAM] unsigned int 
  2591 ;;  day             2   33[COMRAM] unsigned int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  scalar          4   41[COMRAM] long 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  4   29[COMRAM] long 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2603 ;;      Params:         6       0       0       0       0       0       0
  2604 ;;      Locals:         6       0       0       0       0       0       0
  2605 ;;      Temps:          4       0       0       0       0       0       0
  2606 ;;      Totals:        16       0       0       0       0       0       0
  2607 ;;Total ram usage:       16 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    4
  2610 ;; This function calls:
  2611 ;;		_isleap
  2612 ;;		_months_to_days
  2613 ;;		_years_to_days
  2614 ;; This function is called by:
  2615 ;;		_mktime
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text6
  2620  002250                     __ptext6:
  2621                           	opt stack 0
  2622  002250                     _ymd_to_scalar:
  2623                           	opt stack 22
  2624                           
  2625                           ;incstack = 0
  2626  002250  FFFF               	dw	65535
  2627  002252  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2628  002256  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2629  00225A  EC82  F014         	call	_months_to_days	;wreg free
  2630  00225E  5022               	movf	ymd_to_scalar@day,w,c
  2631  002260  260E               	addwf	?_months_to_days,f,c
  2632  002262  5023               	movf	ymd_to_scalar@day+1,w,c
  2633  002264  220F               	addwfc	?_months_to_days+1,f,c
  2634  002266  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2635  00226A  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2636  00226E  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2637  002270  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2638  002272  5021               	movf	ymd_to_scalar@mo+1,w,c
  2639  002274  E103               	bnz	u4150
  2640  002276  0E03               	movlw	3
  2641  002278  5C20               	subwf	ymd_to_scalar@mo,w,c
  2642  00227A  E321               	bnc	l5206
  2643  00227C                     u4150:
  2644  00227C  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2645  002280  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2646  002284  ECEC  F013         	call	_isleap	;wreg free
  2647  002288  500C               	movf	?_isleap,w,c
  2648  00228A  100D               	iorwf	?_isleap+1,w,c
  2649  00228C  E103               	bnz	l5202
  2650  00228E  6A29               	clrf	_ymd_to_scalar$2180+1,c
  2651  002290  0E02               	movlw	2
  2652  002292  D002               	goto	L1
  2653  002294                     l5202:
  2654  002294  6A29               	clrf	_ymd_to_scalar$2180+1,c
  2655  002296  0E01               	movlw	1
  2656  002298                     L1:
  2657  002298  FFFF               	dw	65535	; assembler added errata NOP
  2658  00229A  6E28               	movwf	_ymd_to_scalar$2180,c
  2659  00229C  C028  F024         	movff	_ymd_to_scalar$2180,??_ymd_to_scalar
  2660  0022A0  C029  F025         	movff	_ymd_to_scalar$2180+1,??_ymd_to_scalar+1
  2661  0022A4  0E00               	movlw	0
  2662  0022A6  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2663  0022A8  0EFF               	movlw	255
  2664  0022AA  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2665  0022AC  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2666  0022AE  5024               	movf	??_ymd_to_scalar,w,c
  2667  0022B0  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2668  0022B2  5025               	movf	??_ymd_to_scalar+1,w,c
  2669  0022B4  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2670  0022B6  5026               	movf	??_ymd_to_scalar+2,w,c
  2671  0022B8  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2672  0022BA  5027               	movf	??_ymd_to_scalar+3,w,c
  2673  0022BC  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2674  0022BE                     l5206:
  2675  0022BE  061E               	decf	ymd_to_scalar@yr,f,c
  2676  0022C0  A0D8               	btfss	status,0,c
  2677  0022C2  061F               	decf	ymd_to_scalar@yr+1,f,c
  2678  0022C4  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2679  0022C8  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2680  0022CC  EC8A  F00D         	call	_years_to_days	;wreg free
  2681  0022D0  500E               	movf	?_years_to_days,w,c
  2682  0022D2  262A               	addwf	ymd_to_scalar@scalar,f,c
  2683  0022D4  500F               	movf	?_years_to_days+1,w,c
  2684  0022D6  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2685  0022D8  5010               	movf	?_years_to_days+2,w,c
  2686  0022DA  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2687  0022DC  5011               	movf	?_years_to_days+3,w,c
  2688  0022DE  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2689  0022E0  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2690  0022E4  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2691  0022E8  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2692  0022EC  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2693  0022F0  0012               	return		;funcret
  2694  0022F2  FFFF               	dw	65535	; errata NOP
  2695  0022F4                     __end_of_ymd_to_scalar:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           prodh	equ	0xFF4
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1h	equ	0xFE2
  2708                           fsr1l	equ	0xFE1
  2709                           indf2	equ	0xFDF
  2710                           postinc2	equ	0xFDE
  2711                           postdec2	equ	0xFDD
  2712                           plusw2	equ	0xFDB
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _years_to_days *****************
  2718 ;; Defined at:
  2719 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  yr              2   13[COMRAM] unsigned int 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  ret             4   25[COMRAM] long 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  4   13[COMRAM] long 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2733 ;;      Params:         4       0       0       0       0       0       0
  2734 ;;      Locals:         4       0       0       0       0       0       0
  2735 ;;      Temps:          8       0       0       0       0       0       0
  2736 ;;      Totals:        16       0       0       0       0       0       0
  2737 ;;Total ram usage:       16 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    3
  2740 ;; This function calls:
  2741 ;;		___lwdiv
  2742 ;; This function is called by:
  2743 ;;		_ymd_to_scalar
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text7
  2748  001B14                     __ptext7:
  2749                           	opt stack 0
  2750  001B14                     _years_to_days:
  2751                           	opt stack 22
  2752                           
  2753                           ;incstack = 0
  2754  001B14  FFFF               	dw	65535
  2755  001B16  500E               	movf	years_to_days@yr,w,c
  2756  001B18  6E12               	movwf	??_years_to_days& (0+255),c
  2757  001B1A  500F               	movf	years_to_days@yr+1,w,c
  2758  001B1C  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  2759  001B1E  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  2760  001B20  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  2761  001B22  0E6D               	movlw	109
  2762  001B24  0212               	mulwf	??_years_to_days& (0+255),c
  2763  001B26  CFF3 F016          	movff	prodl,??_years_to_days+4
  2764  001B2A  CFF4 F017          	movff	prodh,??_years_to_days+5
  2765  001B2E  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  2766  001B30  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  2767  001B32  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2768  001B34  50F3               	movf	prodl,w,c
  2769  001B36  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2770  001B38  50F4               	movf	prodh,w,c
  2771  001B3A  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2772  001B3C  0E00               	movlw	0
  2773  001B3E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2774  001B40  0E01               	movlw	1
  2775  001B42  0212               	mulwf	??_years_to_days& (0+255),c
  2776  001B44  50F3               	movf	prodl,w,c
  2777  001B46  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2778  001B48  50F4               	movf	prodh,w,c
  2779  001B4A  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2780  001B4C  0E00               	movlw	0
  2781  001B4E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2782  001B50  0E6D               	movlw	109
  2783  001B52  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2784  001B54  50F3               	movf	prodl,w,c
  2785  001B56  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2786  001B58  50F4               	movf	prodh,w,c
  2787  001B5A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2788  001B5C  0E01               	movlw	1
  2789  001B5E  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2790  001B60  50F3               	movf	prodl,w,c
  2791  001B62  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2792  001B64  50F4               	movf	prodh,w,c
  2793  001B66  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2794  001B68  0E00               	movlw	0
  2795  001B6A  0212               	mulwf	??_years_to_days& (0+255),c
  2796  001B6C  50F3               	movf	prodl,w,c
  2797  001B6E  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2798  001B70  50F4               	movf	prodh,w,c
  2799  001B72  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2800  001B74  0E6D               	movlw	109
  2801  001B76  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  2802  001B78  50F3               	movf	prodl,w,c
  2803  001B7A  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2804  001B7C  0E01               	movlw	1
  2805  001B7E  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2806  001B80  50F3               	movf	prodl,w,c
  2807  001B82  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2808  001B84  0E00               	movlw	0
  2809  001B86  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2810  001B88  50F3               	movf	prodl,w,c
  2811  001B8A  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2812  001B8C  0E00               	movlw	0
  2813  001B8E  0212               	mulwf	??_years_to_days& (0+255),c
  2814  001B90  50F3               	movf	prodl,w,c
  2815  001B92  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2816  001B94  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  2817  001B98  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  2818  001B9C  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  2819  001BA0  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  2820  001BA4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2821  001BA8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2822  001BAC  6A0A               	clrf	___lwdiv@divisor+1,c
  2823  001BAE  0E64               	movlw	100
  2824  001BB0  6E09               	movwf	___lwdiv@divisor,c
  2825  001BB2  ECC2  F013         	call	___lwdiv	;wreg free
  2826  001BB6  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  2827  001BBA  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  2828  001BBE  90D8               	bcf	status,0,c
  2829  001BC0  3213               	rrcf	??_years_to_days+1,f,c
  2830  001BC2  3212               	rrcf	??_years_to_days,f,c
  2831  001BC4  90D8               	bcf	status,0,c
  2832  001BC6  3213               	rrcf	??_years_to_days+1,f,c
  2833  001BC8  3212               	rrcf	??_years_to_days,f,c
  2834  001BCA  5007               	movf	?___lwdiv,w,c
  2835  001BCC  5E12               	subwf	??_years_to_days,f,c
  2836  001BCE  5008               	movf	?___lwdiv+1,w,c
  2837  001BD0  5A13               	subwfb	??_years_to_days+1,f,c
  2838  001BD2  5012               	movf	??_years_to_days,w,c
  2839  001BD4  261A               	addwf	years_to_days@ret,f,c
  2840  001BD6  5013               	movf	??_years_to_days+1,w,c
  2841  001BD8  221B               	addwfc	years_to_days@ret+1,f,c
  2842  001BDA  0E00               	movlw	0
  2843  001BDC  221C               	addwfc	years_to_days@ret+2,f,c
  2844  001BDE  221D               	addwfc	years_to_days@ret+3,f,c
  2845  001BE0  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2846  001BE4  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2847  001BE8  0E01               	movlw	1
  2848  001BEA  6E0A               	movwf	___lwdiv@divisor+1,c
  2849  001BEC  0E90               	movlw	144
  2850  001BEE  6E09               	movwf	___lwdiv@divisor,c
  2851  001BF0  ECC2  F013         	call	___lwdiv	;wreg free
  2852  001BF4  5007               	movf	?___lwdiv,w,c
  2853  001BF6  261A               	addwf	years_to_days@ret,f,c
  2854  001BF8  5008               	movf	?___lwdiv+1,w,c
  2855  001BFA  221B               	addwfc	years_to_days@ret+1,f,c
  2856  001BFC  0E00               	movlw	0
  2857  001BFE  221C               	addwfc	years_to_days@ret+2,f,c
  2858  001C00  221D               	addwfc	years_to_days@ret+3,f,c
  2859  001C02  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  2860  001C06  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  2861  001C0A  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  2862  001C0E  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  2863  001C12  0C00               	retlw	0	;funcret
  2864  001C14  FFFF               	dw	65535	; errata NOP
  2865  001C16                     __end_of_years_to_days:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           postdec1	equ	0xFE5
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           plusw2	equ	0xFDB
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _months_to_days *****************
  2888 ;; Defined at:
  2889 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  month           2   13[COMRAM] unsigned int 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  2   13[COMRAM] unsigned int 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2903 ;;      Params:         2       0       0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0
  2905 ;;      Temps:          4       0       0       0       0       0       0
  2906 ;;      Totals:         6       0       0       0       0       0       0
  2907 ;;Total ram usage:        6 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    3
  2910 ;; This function calls:
  2911 ;;		___lwdiv
  2912 ;; This function is called by:
  2913 ;;		_ymd_to_scalar
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text8
  2918  002904                     __ptext8:
  2919                           	opt stack 0
  2920  002904                     _months_to_days:
  2921                           	opt stack 22
  2922                           
  2923                           ;incstack = 0
  2924  002904  FFFF               	dw	65535
  2925  002906  0EF1               	movlw	241
  2926  002908  6E10               	movwf	??_months_to_days& (0+255),c
  2927  00290A  0E0B               	movlw	11
  2928  00290C  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  2929  00290E  5010               	movf	??_months_to_days& (0+255),w,c
  2930  002910  020E               	mulwf	months_to_days@month,c
  2931  002912  CFF3 F012          	movff	prodl,??_months_to_days+2
  2932  002916  CFF4 F013          	movff	prodh,??_months_to_days+3
  2933  00291A  020F               	mulwf	months_to_days@month+1,c
  2934  00291C  50F3               	movf	prodl,w,c
  2935  00291E  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2936  002920  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  2937  002922  020E               	mulwf	months_to_days@month,c
  2938  002924  50F3               	movf	prodl,w,c
  2939  002926  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2940  002928  0E41               	movlw	65
  2941  00292A  2412               	addwf	??_months_to_days+2,w,c
  2942  00292C  6E07               	movwf	___lwdiv@dividend,c
  2943  00292E  0EF4               	movlw	244
  2944  002930  2013               	addwfc	??_months_to_days+3,w,c
  2945  002932  6E08               	movwf	___lwdiv@dividend+1,c
  2946  002934  6A0A               	clrf	___lwdiv@divisor+1,c
  2947  002936  0E64               	movlw	100
  2948  002938  6E09               	movwf	___lwdiv@divisor,c
  2949  00293A  ECC2  F013         	call	___lwdiv	;wreg free
  2950  00293E  C007  F00E         	movff	?___lwdiv,?_months_to_days
  2951  002942  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  2952  002946  0012               	return		;funcret
  2953  002948  FFFF               	dw	65535	; errata NOP
  2954  00294A                     __end_of_months_to_days:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           intcon	equ	0xFF2
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           plusw2	equ	0xFDB
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function ___lwdiv *****************
  2977 ;; Defined at:
  2978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  dividend        2    6[COMRAM] unsigned int 
  2981 ;;  divisor         2    8[COMRAM] unsigned int 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  quotient        2   11[COMRAM] unsigned int 
  2984 ;;  counter         1   10[COMRAM] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  2    6[COMRAM] unsigned int 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2994 ;;      Params:         4       0       0       0       0       0       0
  2995 ;;      Locals:         3       0       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0
  2997 ;;      Totals:         7       0       0       0       0       0       0
  2998 ;;Total ram usage:        7 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    2
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_months_to_days
  3005 ;;		_years_to_days
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text9
  3010  002784                     __ptext9:
  3011                           	opt stack 0
  3012  002784                     ___lwdiv:
  3013                           	opt stack 22
  3014                           
  3015                           ;incstack = 0
  3016  002784  FFFF               	dw	65535
  3017  002786  6A0C               	clrf	___lwdiv@quotient,c
  3018  002788  6A0D               	clrf	___lwdiv@quotient+1,c
  3019  00278A  5009               	movf	___lwdiv@divisor,w,c
  3020  00278C  100A               	iorwf	___lwdiv@divisor+1,w,c
  3021  00278E  E01E               	bz	l1243
  3022  002790  0E01               	movlw	1
  3023  002792  6E0B               	movwf	___lwdiv@counter,c
  3024  002794  D005               	goto	l5072
  3025  002796                     l5070:
  3026  002796  FFFF               	dw	65535	; assembler added errata NOP
  3027  002798  90D8               	bcf	status,0,c
  3028  00279A  3609               	rlcf	___lwdiv@divisor,f,c
  3029  00279C  360A               	rlcf	___lwdiv@divisor+1,f,c
  3030  00279E  2A0B               	incf	___lwdiv@counter,f,c
  3031  0027A0                     l5072:
  3032  0027A0  FFFF               	dw	65535	; assembler added errata NOP
  3033  0027A2  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3034  0027A4  D7F8               	goto	l5070
  3035  0027A6                     l5074:
  3036  0027A6  FFFF               	dw	65535	; assembler added errata NOP
  3037  0027A8  90D8               	bcf	status,0,c
  3038  0027AA  360C               	rlcf	___lwdiv@quotient,f,c
  3039  0027AC  360D               	rlcf	___lwdiv@quotient+1,f,c
  3040  0027AE  5009               	movf	___lwdiv@divisor,w,c
  3041  0027B0  5C07               	subwf	___lwdiv@dividend,w,c
  3042  0027B2  500A               	movf	___lwdiv@divisor+1,w,c
  3043  0027B4  5808               	subwfb	___lwdiv@dividend+1,w,c
  3044  0027B6  E305               	bnc	l5082
  3045  0027B8  5009               	movf	___lwdiv@divisor,w,c
  3046  0027BA  5E07               	subwf	___lwdiv@dividend,f,c
  3047  0027BC  500A               	movf	___lwdiv@divisor+1,w,c
  3048  0027BE  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3049  0027C0  800C               	bsf	___lwdiv@quotient,0,c
  3050  0027C2                     l5082:
  3051  0027C2  90D8               	bcf	status,0,c
  3052  0027C4  320A               	rrcf	___lwdiv@divisor+1,f,c
  3053  0027C6  3209               	rrcf	___lwdiv@divisor,f,c
  3054  0027C8  2E0B               	decfsz	___lwdiv@counter,f,c
  3055  0027CA  D7ED               	goto	l5074
  3056  0027CC                     l1243:
  3057  0027CC  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3058  0027D0  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3059  0027D4  0012               	return		;funcret
  3060  0027D6  FFFF               	dw	65535	; errata NOP
  3061  0027D8                     __end_of___lwdiv:
  3062                           	opt stack 0
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           plusw2	equ	0xFDB
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _isleap *****************
  3084 ;; Defined at:
  3085 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  yr              2   11[COMRAM] unsigned int 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  2   11[COMRAM] int 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, status,0, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3099 ;;      Params:         2       0       0       0       0       0       0
  3100 ;;      Locals:         1       0       0       0       0       0       0
  3101 ;;      Temps:          1       0       0       0       0       0       0
  3102 ;;      Totals:         4       0       0       0       0       0       0
  3103 ;;Total ram usage:        4 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    3
  3106 ;; This function calls:
  3107 ;;		___lwmod
  3108 ;; This function is called by:
  3109 ;;		_ymd_to_scalar
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text10
  3114  0027D8                     __ptext10:
  3115                           	opt stack 0
  3116  0027D8                     _isleap:
  3117                           	opt stack 22
  3118                           
  3119                           ;incstack = 0
  3120  0027D8  FFFF               	dw	65535
  3121  0027DA  0E01               	movlw	1
  3122  0027DC  6E0F               	movwf	_isleap$2167,c
  3123  0027DE  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3124  0027E2  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3125  0027E6  6E0A               	movwf	___lwmod@divisor+1,c
  3126  0027E8  0E90               	movlw	144
  3127  0027EA  6E09               	movwf	___lwmod@divisor,c
  3128  0027EC  EC5E  F014         	call	___lwmod	;wreg free
  3129  0027F0  5007               	movf	?___lwmod,w,c
  3130  0027F2  1008               	iorwf	?___lwmod+1,w,c
  3131  0027F4  E012               	bz	l1269
  3132  0027F6  C00C  F00E         	movff	isleap@yr,??_isleap
  3133  0027FA  0E03               	movlw	3
  3134  0027FC  160E               	andwf	??_isleap,f,c
  3135  0027FE  E10C               	bnz	l5062
  3136  002800  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3137  002804  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3138  002808  6A0A               	clrf	___lwmod@divisor+1,c
  3139  00280A  0E64               	movlw	100
  3140  00280C  6E09               	movwf	___lwmod@divisor,c
  3141  00280E  EC5E  F014         	call	___lwmod	;wreg free
  3142  002812  5007               	movf	?___lwmod,w,c
  3143  002814  1008               	iorwf	?___lwmod+1,w,c
  3144  002816  E101               	bnz	l1269
  3145  002818                     l5062:
  3146  002818  6A0F               	clrf	_isleap$2167,c
  3147  00281A                     l1269:
  3148  00281A  C00F  F00C         	movff	_isleap$2167,?_isleap
  3149  00281E  6A0D               	clrf	?_isleap+1,c
  3150  002820  0012               	return		;funcret
  3151  002822  FFFF               	dw	65535	; errata NOP
  3152  002824                     __end_of_isleap:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           prodh	equ	0xFF4
  3159                           prodl	equ	0xFF3
  3160                           intcon	equ	0xFF2
  3161                           postinc0	equ	0xFEE
  3162                           wreg	equ	0xFE8
  3163                           postdec1	equ	0xFE5
  3164                           fsr1h	equ	0xFE2
  3165                           fsr1l	equ	0xFE1
  3166                           indf2	equ	0xFDF
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           plusw2	equ	0xFDB
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function ___lwmod *****************
  3175 ;; Defined at:
  3176 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  dividend        2    6[COMRAM] unsigned int 
  3179 ;;  divisor         2    8[COMRAM] unsigned int 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  counter         1   10[COMRAM] unsigned char 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  2    6[COMRAM] unsigned int 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3191 ;;      Params:         4       0       0       0       0       0       0
  3192 ;;      Locals:         1       0       0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0
  3194 ;;      Totals:         5       0       0       0       0       0       0
  3195 ;;Total ram usage:        5 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    2
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_isleap
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text11
  3206  0028BC                     __ptext11:
  3207                           	opt stack 0
  3208  0028BC                     ___lwmod:
  3209                           	opt stack 22
  3210                           
  3211                           ;incstack = 0
  3212  0028BC  FFFF               	dw	65535
  3213  0028BE  5009               	movf	___lwmod@divisor,w,c
  3214  0028C0  100A               	iorwf	___lwmod@divisor+1,w,c
  3215  0028C2  E01A               	bz	l1253
  3216  0028C4  0E01               	movlw	1
  3217  0028C6  6E0B               	movwf	___lwmod@counter,c
  3218  0028C8  D005               	goto	l5092
  3219  0028CA                     l5090:
  3220  0028CA  FFFF               	dw	65535	; assembler added errata NOP
  3221  0028CC  90D8               	bcf	status,0,c
  3222  0028CE  3609               	rlcf	___lwmod@divisor,f,c
  3223  0028D0  360A               	rlcf	___lwmod@divisor+1,f,c
  3224  0028D2  2A0B               	incf	___lwmod@counter,f,c
  3225  0028D4                     l5092:
  3226  0028D4  FFFF               	dw	65535	; assembler added errata NOP
  3227  0028D6  AE0A               	btfss	___lwmod@divisor+1,7,c
  3228  0028D8  D7F8               	goto	l5090
  3229  0028DA                     l5094:
  3230  0028DA  FFFF               	dw	65535	; assembler added errata NOP
  3231  0028DC  5009               	movf	___lwmod@divisor,w,c
  3232  0028DE  5C07               	subwf	___lwmod@dividend,w,c
  3233  0028E0  500A               	movf	___lwmod@divisor+1,w,c
  3234  0028E2  5808               	subwfb	___lwmod@dividend+1,w,c
  3235  0028E4  E304               	bnc	l5098
  3236  0028E6  5009               	movf	___lwmod@divisor,w,c
  3237  0028E8  5E07               	subwf	___lwmod@dividend,f,c
  3238  0028EA  500A               	movf	___lwmod@divisor+1,w,c
  3239  0028EC  5A08               	subwfb	___lwmod@dividend+1,f,c
  3240  0028EE                     l5098:
  3241  0028EE  90D8               	bcf	status,0,c
  3242  0028F0  320A               	rrcf	___lwmod@divisor+1,f,c
  3243  0028F2  3209               	rrcf	___lwmod@divisor,f,c
  3244  0028F4  2E0B               	decfsz	___lwmod@counter,f,c
  3245  0028F6  D7F1               	goto	l5094
  3246  0028F8                     l1253:
  3247  0028F8  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3248  0028FC  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3249  002900  0012               	return		;funcret
  3250  002902  FFFF               	dw	65535	; errata NOP
  3251  002904                     __end_of___lwmod:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postdec1	equ	0xFE5
  3263                           fsr1h	equ	0xFE2
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           plusw2	equ	0xFDB
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _SetTime *****************
  3274 ;; Defined at:
  3275 ;;		line 169 in file "user.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  newTime         1    wreg     PTR long 
  3278 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  newTime         1    6[COMRAM] PTR long 
  3281 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         0       0       0       0       0       0       0
  3292 ;;      Locals:         1       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0
  3294 ;;      Totals:         1       0       0       0       0       0       0
  3295 ;;Total ram usage:        1 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    2
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_SetTimeFromRegs
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text12
  3306  002C46                     __ptext12:
  3307                           	opt stack 0
  3308  002C46                     _SetTime:
  3309                           	opt stack 25
  3310                           
  3311                           ;incstack = 0
  3312  002C46  FFFF               	dw	65535
  3313                           
  3314                           ;SetTime@newTime stored from wreg
  3315  002C48  6E07               	movwf	SetTime@newTime,c
  3316                           
  3317                           ;user.c: 171: currentTime = *newTime;
  3318  002C4A  5007               	movf	SetTime@newTime,w,c
  3319  002C4C  6ED9               	movwf	fsr2l,c
  3320  002C4E  6ADA               	clrf	fsr2h,c
  3321  002C50  CFDE F0DB          	movff	postinc2,_currentTime
  3322  002C54  CFDE F0DC          	movff	postinc2,_currentTime+1
  3323  002C58  CFDE F0DD          	movff	postinc2,_currentTime+2
  3324  002C5C  CFDE F0DE          	movff	postinc2,_currentTime+3
  3325  002C60  0012               	return		;funcret
  3326  002C62  FFFF               	dw	65535	; errata NOP
  3327  002C64                     __end_of_SetTime:
  3328                           	opt stack 0
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           intcon	equ	0xFF2
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           postdec1	equ	0xFE5
  3339                           fsr1h	equ	0xFE2
  3340                           fsr1l	equ	0xFE1
  3341                           indf2	equ	0xFDF
  3342                           postinc2	equ	0xFDE
  3343                           postdec2	equ	0xFDD
  3344                           plusw2	equ	0xFDB
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _SetHourMin *****************
  3350 ;; Defined at:
  3351 ;;		line 269 in file "interrupts.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  newHour         1    wreg     PTR int 
  3354 ;;		 -> SetTimeFromRegs@newTime(18), 
  3355 ;;  newMin          1   10[COMRAM] PTR int 
  3356 ;;		 -> SetTimeFromRegs@newTime(18), 
  3357 ;;  sec             1   11[COMRAM] PTR int 
  3358 ;;		 -> SetTimeFromRegs@newTime(18), 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  newHour         1   24[COMRAM] PTR int 
  3361 ;;		 -> SetTimeFromRegs@newTime(18), 
  3362 ;;  secToNext6Se    1   26[COMRAM] unsigned char 
  3363 ;;  tmpSec          1   25[COMRAM] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3373 ;;      Params:         2       0       0       0       0       0       0
  3374 ;;      Locals:         3       0       0       0       0       0       0
  3375 ;;      Temps:         12       0       0       0       0       0       0
  3376 ;;      Totals:        17       0       0       0       0       0       0
  3377 ;;Total ram usage:       17 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    3
  3380 ;; This function calls:
  3381 ;;		___lbdiv
  3382 ;;		___lbmod
  3383 ;; This function is called by:
  3384 ;;		_SetTimeFromRegs
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text13
  3389  0017F4                     __ptext13:
  3390                           	opt stack 0
  3391  0017F4                     _SetHourMin:
  3392                           	opt stack 24
  3393                           
  3394                           ;incstack = 0
  3395  0017F4  FFFF               	dw	65535
  3396                           
  3397                           ;SetHourMin@newHour stored from wreg
  3398  0017F6  6E19               	movwf	SetHourMin@newHour,c
  3399                           
  3400                           ;interrupts.c: 271: T0CONbits.TMR0ON = 0;
  3401  0017F8  9ED5               	bcf	4053,7,c	;volatile
  3402                           
  3403                           ;interrupts.c: 273: globalHours = *newHour;
  3404  0017FA  5019               	movf	SetHourMin@newHour,w,c
  3405  0017FC  6ED9               	movwf	fsr2l,c
  3406  0017FE  6ADA               	clrf	fsr2h,c
  3407  001800  50DF               	movf	indf2,w,c
  3408  001802  6E77               	movwf	_globalHours,c	;volatile
  3409                           
  3410                           ;interrupts.c: 274: globalMinutes = *newMin;
  3411  001804  500B               	movf	SetHourMin@newMin,w,c
  3412  001806  6ED9               	movwf	fsr2l,c
  3413  001808  6ADA               	clrf	fsr2h,c
  3414  00180A  50DF               	movf	indf2,w,c
  3415  00180C  6E74               	movwf	_globalMinutes,c	;volatile
  3416                           
  3417                           ;interrupts.c: 275: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
  3418  00180E  5077               	movf	_globalHours,w,c	;volatile
  3419  001810  0D3C               	mullw	60
  3420  001812  5074               	movf	_globalMinutes,w,c	;volatile
  3421  001814  24F3               	addwf	prodl,w,c
  3422  001816  0100               	movlb	0	; () banked
  3423  001818  6FC4               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
  3424  00181A  0E00               	movlw	0
  3425  00181C  20F4               	addwfc	prodh,w,c
  3426  00181E  6FC5               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;interrupts.c: 277: uint8_t tmpSec = *sec;
  3430  001820  500C               	movf	SetHourMin@sec,w,c
  3431  001822  6ED9               	movwf	fsr2l,c
  3432  001824  6ADA               	clrf	fsr2h,c
  3433  001826  50DF               	movf	indf2,w,c
  3434  001828  6E1A               	movwf	SetHourMin@tmpSec,c
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;interrupts.c: 278: _6sCounter = tmpSec / 6;
  3438  00182A  0E06               	movlw	6
  3439  00182C  6E07               	movwf	___lbdiv@divisor,c
  3440  00182E  501A               	movf	SetHourMin@tmpSec,w,c
  3441  001830  EC0B  F015         	call	___lbdiv
  3442  001834  0100               	movlb	0	; () banked
  3443  001836  6FCE               	movwf	__6sCounter& (0+255),b	;volatile
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;interrupts.c: 279: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
  3447  001838  0E06               	movlw	6
  3448  00183A  6E07               	movwf	___lbmod@divisor,c
  3449  00183C  501A               	movf	SetHourMin@tmpSec,w,c
  3450  00183E  ECAC  F015         	call	___lbmod
  3451  001842  6E0D               	movwf	??_SetHourMin& (0+255),c
  3452  001844  500D               	movf	??_SetHourMin,w,c
  3453  001846  0806               	sublw	6
  3454  001848  6E1B               	movwf	SetHourMin@secToNext6Sec,c
  3455                           
  3456                           ;interrupts.c: 280: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + 30) * secToNext6Sec)&0xFF)));
  3457  00184A  C01B  F00D         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
  3458  00184E  6A0E               	clrf	(??_SetHourMin+1)& (0+255),c
  3459  001850  6A0F               	clrf	(??_SetHourMin+2)& (0+255),c
  3460  001852  6A10               	clrf	(??_SetHourMin+3)& (0+255),c
  3461  001854  0EBD               	movlw	189
  3462  001856  020D               	mulwf	??_SetHourMin& (0+255),c
  3463  001858  CFF3 F011          	movff	prodl,??_SetHourMin+4
  3464  00185C  CFF4 F012          	movff	prodh,??_SetHourMin+5
  3465  001860  6A13               	clrf	(??_SetHourMin+6)& (0+255),c
  3466  001862  6A14               	clrf	(??_SetHourMin+7)& (0+255),c
  3467  001864  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3468  001866  50F3               	movf	prodl,w,c
  3469  001868  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3470  00186A  50F4               	movf	prodh,w,c
  3471  00186C  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3472  00186E  0E00               	movlw	0
  3473  001870  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3474  001872  0ED9               	movlw	217
  3475  001874  020D               	mulwf	??_SetHourMin& (0+255),c
  3476  001876  50F3               	movf	prodl,w,c
  3477  001878  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3478  00187A  50F4               	movf	prodh,w,c
  3479  00187C  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3480  00187E  0E00               	movlw	0
  3481  001880  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3482  001882  0EBD               	movlw	189
  3483  001884  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3484  001886  50F3               	movf	prodl,w,c
  3485  001888  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3486  00188A  50F4               	movf	prodh,w,c
  3487  00188C  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3488  00188E  0ED9               	movlw	217
  3489  001890  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3490  001892  50F3               	movf	prodl,w,c
  3491  001894  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3492  001896  50F4               	movf	prodh,w,c
  3493  001898  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3494  00189A  0EFF               	movlw	255
  3495  00189C  020D               	mulwf	??_SetHourMin& (0+255),c
  3496  00189E  50F3               	movf	prodl,w,c
  3497  0018A0  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3498  0018A2  50F4               	movf	prodh,w,c
  3499  0018A4  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3500  0018A6  0EBD               	movlw	189
  3501  0018A8  0210               	mulwf	(??_SetHourMin+3)& (0+255),c
  3502  0018AA  50F3               	movf	prodl,w,c
  3503  0018AC  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3504  0018AE  0ED9               	movlw	217
  3505  0018B0  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3506  0018B2  50F3               	movf	prodl,w,c
  3507  0018B4  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3508  0018B6  0EFF               	movlw	255
  3509  0018B8  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3510  0018BA  50F3               	movf	prodl,w,c
  3511  0018BC  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3512  0018BE  0EFF               	movlw	255
  3513  0018C0  020D               	mulwf	??_SetHourMin& (0+255),c
  3514  0018C2  50F3               	movf	prodl,w,c
  3515  0018C4  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3516  0018C6  0E00               	movlw	0
  3517  0018C8  2411               	addwf	??_SetHourMin+4,w,c
  3518  0018CA  6E15               	movwf	(??_SetHourMin+8)& (0+255),c
  3519  0018CC  0E00               	movlw	0
  3520  0018CE  2012               	addwfc	??_SetHourMin+5,w,c
  3521  0018D0  6E16               	movwf	(??_SetHourMin+9)& (0+255),c
  3522  0018D2  0E01               	movlw	1
  3523  0018D4  2013               	addwfc	??_SetHourMin+6,w,c
  3524  0018D6  6E17               	movwf	(??_SetHourMin+10)& (0+255),c
  3525  0018D8  0E00               	movlw	0
  3526  0018DA  2014               	addwfc	??_SetHourMin+7,w,c
  3527  0018DC  6E18               	movwf	(??_SetHourMin+11)& (0+255),c
  3528  0018DE  C016  F015         	movff	??_SetHourMin+9,??_SetHourMin+8
  3529  0018E2  C017  F016         	movff	??_SetHourMin+10,??_SetHourMin+9
  3530  0018E6  C018  F017         	movff	??_SetHourMin+11,??_SetHourMin+10
  3531  0018EA  6A18               	clrf	??_SetHourMin+11,c
  3532  0018EC  BE17               	btfsc	??_SetHourMin+10,7,c
  3533  0018EE  6818               	setf	??_SetHourMin+11,c
  3534  0018F0  5015               	movf	??_SetHourMin+8,w,c
  3535  0018F2  6ED7               	movwf	4055,c	;volatile
  3536  0018F4  501B               	movf	SetHourMin@secToNext6Sec,w,c
  3537  0018F6  0DBD               	mullw	189
  3538  0018F8  CFF3 FFD6          	movff	prodl,4054	;volatile
  3539                           
  3540                           ;interrupts.c: 282: T0CONbits.TMR0ON = 1;
  3541  0018FC  8ED5               	bsf	4053,7,c	;volatile
  3542  0018FE  0012               	return		;funcret
  3543  001900  FFFF               	dw	65535	; errata NOP
  3544  001902                     __end_of_SetHourMin:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           postinc0	equ	0xFEE
  3554                           wreg	equ	0xFE8
  3555                           postdec1	equ	0xFE5
  3556                           fsr1h	equ	0xFE2
  3557                           fsr1l	equ	0xFE1
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           plusw2	equ	0xFDB
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function ___lbmod *****************
  3567 ;; Defined at:
  3568 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  dividend        1    wreg     unsigned char 
  3571 ;;  divisor         1    6[COMRAM] unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  dividend        1    7[COMRAM] unsigned char 
  3574 ;;  rem             1    9[COMRAM] unsigned char 
  3575 ;;  counter         1    8[COMRAM] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      unsigned char 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : F/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3585 ;;      Params:         1       0       0       0       0       0       0
  3586 ;;      Locals:         3       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0
  3588 ;;      Totals:         4       0       0       0       0       0       0
  3589 ;;Total ram usage:        4 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    2
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_SetHourMin
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text14
  3600  002B58                     __ptext14:
  3601                           	opt stack 0
  3602  002B58                     ___lbmod:
  3603                           	opt stack 24
  3604                           
  3605                           ;incstack = 0
  3606  002B58  FFFF               	dw	65535
  3607                           
  3608                           ;___lbmod@dividend stored from wreg
  3609  002B5A  6E08               	movwf	___lbmod@dividend,c
  3610  002B5C  0E08               	movlw	8
  3611  002B5E  6E09               	movwf	___lbmod@counter,c
  3612  002B60  6A0A               	clrf	___lbmod@rem,c
  3613  002B62                     l5180:
  3614  002B62  FFFF               	dw	65535	; assembler added errata NOP
  3615  002B64  90D8               	bcf	status,0,c
  3616  002B66  3408               	rlcf	___lbmod@dividend,w,c
  3617  002B68  340A               	rlcf	___lbmod@rem,w,c
  3618  002B6A  6E0A               	movwf	___lbmod@rem,c
  3619  002B6C  90D8               	bcf	status,0,c
  3620  002B6E  3608               	rlcf	___lbmod@dividend,f,c
  3621  002B70  5007               	movf	___lbmod@divisor,w,c
  3622  002B72  5C0A               	subwf	___lbmod@rem,w,c
  3623  002B74  E302               	bnc	l5188
  3624  002B76  5007               	movf	___lbmod@divisor,w,c
  3625  002B78  5E0A               	subwf	___lbmod@rem,f,c
  3626  002B7A                     l5188:
  3627  002B7A  2E09               	decfsz	___lbmod@counter,f,c
  3628  002B7C  D7F2               	goto	l5180
  3629  002B7E  500A               	movf	___lbmod@rem,w,c
  3630  002B80  0012               	return		;funcret
  3631  002B82  FFFF               	dw	65535	; errata NOP
  3632  002B84                     __end_of___lbmod:
  3633                           	opt stack 0
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1h	equ	0xFE2
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           plusw2	equ	0xFDB
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function ___lbdiv *****************
  3655 ;; Defined at:
  3656 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  dividend        1    wreg     unsigned char 
  3659 ;;  divisor         1    6[COMRAM] unsigned char 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;  dividend        1    7[COMRAM] unsigned char 
  3662 ;;  quotient        1    9[COMRAM] unsigned char 
  3663 ;;  counter         1    8[COMRAM] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      unsigned char 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0
  3668 ;; Tracked objects:
  3669 ;;		On entry : F/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3673 ;;      Params:         1       0       0       0       0       0       0
  3674 ;;      Locals:         3       0       0       0       0       0       0
  3675 ;;      Temps:          0       0       0       0       0       0       0
  3676 ;;      Totals:         4       0       0       0       0       0       0
  3677 ;;Total ram usage:        4 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    2
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_SetHourMin
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text15
  3688  002A16                     __ptext15:
  3689                           	opt stack 0
  3690  002A16                     ___lbdiv:
  3691                           	opt stack 24
  3692                           
  3693                           ;incstack = 0
  3694  002A16  FFFF               	dw	65535
  3695                           
  3696                           ;___lbdiv@dividend stored from wreg
  3697  002A18  6E08               	movwf	___lbdiv@dividend,c
  3698  002A1A  6A0A               	clrf	___lbdiv@quotient,c
  3699  002A1C  5007               	movf	___lbdiv@divisor,w,c
  3700  002A1E  E017               	bz	l5172
  3701  002A20  0E01               	movlw	1
  3702  002A22  6E09               	movwf	___lbdiv@counter,c
  3703  002A24  D004               	goto	l5160
  3704  002A26                     l5156:
  3705  002A26  FFFF               	dw	65535	; assembler added errata NOP
  3706  002A28  90D8               	bcf	status,0,c
  3707  002A2A  3607               	rlcf	___lbdiv@divisor,f,c
  3708  002A2C  2A09               	incf	___lbdiv@counter,f,c
  3709  002A2E                     l5160:
  3710  002A2E  FFFF               	dw	65535	; assembler added errata NOP
  3711  002A30  AE07               	btfss	___lbdiv@divisor,7,c
  3712  002A32  D7F9               	goto	l5156
  3713  002A34                     l5162:
  3714  002A34  FFFF               	dw	65535	; assembler added errata NOP
  3715  002A36  90D8               	bcf	status,0,c
  3716  002A38  360A               	rlcf	___lbdiv@quotient,f,c
  3717  002A3A  5007               	movf	___lbdiv@divisor,w,c
  3718  002A3C  5C08               	subwf	___lbdiv@dividend,w,c
  3719  002A3E  E303               	bnc	l5168
  3720  002A40  5007               	movf	___lbdiv@divisor,w,c
  3721  002A42  5E08               	subwf	___lbdiv@dividend,f,c
  3722  002A44  800A               	bsf	___lbdiv@quotient,0,c
  3723  002A46                     l5168:
  3724  002A46  90D8               	bcf	status,0,c
  3725  002A48  3207               	rrcf	___lbdiv@divisor,f,c
  3726  002A4A  2E09               	decfsz	___lbdiv@counter,f,c
  3727  002A4C  D7F3               	goto	l5162
  3728  002A4E                     l5172:
  3729  002A4E  500A               	movf	___lbdiv@quotient,w,c
  3730  002A50  0012               	return		;funcret
  3731  002A52  FFFF               	dw	65535	; errata NOP
  3732  002A54                     __end_of___lbdiv:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           postdec1	equ	0xFE5
  3744                           fsr1h	equ	0xFE2
  3745                           fsr1l	equ	0xFE1
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           plusw2	equ	0xFDB
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _ModbusGetLastCommand *****************
  3755 ;; Defined at:
  3756 ;;		line 811 in file "ModbusRtu.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  address         1    wreg     PTR unsigned short 
  3759 ;;		 -> io_poll@lastAddress(2), 
  3760 ;;  count           1    6[COMRAM] PTR unsigned short 
  3761 ;;		 -> io_poll@lastEndAddress(2), 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  address         1    8[COMRAM] PTR unsigned short 
  3764 ;;		 -> io_poll@lastAddress(2), 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      PTR unsigned char 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3774 ;;      Params:         2       0       0       0       0       0       0
  3775 ;;      Locals:         1       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0
  3777 ;;      Totals:         3       0       0       0       0       0       0
  3778 ;;Total ram usage:        3 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_io_poll
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text16
  3789  002B2A                     __ptext16:
  3790                           	opt stack 0
  3791  002B2A                     _ModbusGetLastCommand:
  3792                           	opt stack 27
  3793                           
  3794                           ;incstack = 0
  3795  002B2A  FFFF               	dw	65535
  3796                           
  3797                           ;ModbusGetLastCommand@address stored from wreg
  3798  002B2C  6E09               	movwf	ModbusGetLastCommand@address,c
  3799                           
  3800                           ;ModbusRtu.c: 813: if (address != (0))
  3801  002B2E  5009               	movf	ModbusGetLastCommand@address,w,c
  3802  002B30  E007               	bz	l5604
  3803                           
  3804                           ;ModbusRtu.c: 814: *address = _lastAddress;
  3805  002B32  5009               	movf	ModbusGetLastCommand@address,w,c
  3806  002B34  6ED9               	movwf	fsr2l,c
  3807  002B36  6ADA               	clrf	fsr2h,c
  3808  002B38  C0BE  FFDE         	movff	__lastAddress,postinc2
  3809  002B3C  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3810  002B40                     l5604:
  3811                           
  3812                           ;ModbusRtu.c: 815: if (count != (0))
  3813  002B40  5007               	movf	ModbusGetLastCommand@count,w,c
  3814  002B42  E007               	bz	l5608
  3815                           
  3816                           ;ModbusRtu.c: 816: *count = _lastCount;
  3817  002B44  5007               	movf	ModbusGetLastCommand@count,w,c
  3818  002B46  6ED9               	movwf	fsr2l,c
  3819  002B48  6ADA               	clrf	fsr2h,c
  3820  002B4A  C0C0  FFDE         	movff	__lastCount,postinc2
  3821  002B4E  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3822  002B52                     l5608:
  3823                           
  3824                           ;ModbusRtu.c: 817: return &_lastCommand;
  3825  002B52  0EE1               	movlw	__lastCommand& (0+255)
  3826  002B54  0012               	return		;funcret
  3827  002B56  FFFF               	dw	65535	; errata NOP
  3828  002B58                     __end_of_ModbusGetLastCommand:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           postdec1	equ	0xFE5
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           plusw2	equ	0xFDB
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _InitFromEeprom *****************
  3851 ;; Defined at:
  3852 ;;		line 407 in file "main.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : F/1
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         0       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0
  3868 ;;      Temps:          2       0       0       0       0       0       0
  3869 ;;      Totals:         2       0       0       0       0       0       0
  3870 ;;Total ram usage:        2 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    4
  3873 ;; This function calls:
  3874 ;;		_LoadNextEvent
  3875 ;;		_Modbus
  3876 ;;		_SwitchOffAllLeds
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;;		_io_poll
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text17
  3884  002396                     __ptext17:
  3885                           	opt stack 0
  3886  002396                     _InitFromEeprom:
  3887                           	opt stack 25
  3888                           
  3889                           ;incstack = 0
  3890  002396  FFFF               	dw	65535
  3891                           
  3892                           ;main.c: 409: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  3893  002398  0E0A               	movlw	10
  3894  00239A  6EA9               	movwf	4009,c	;volatile
  3895  00239C  80A6               	bsf	4006,0,c	;volatile
  3896  00239E  CFA8 F0D9          	movff	4008,_eventAcceptTime	;volatile
  3897                           
  3898                           ;main.c: 410: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  3899  0023A2  0E0F               	movlw	15
  3900  0023A4  6EA9               	movwf	4009,c	;volatile
  3901  0023A6  80A6               	bsf	4006,0,c	;volatile
  3902  0023A8  50A8               	movf	4008,w,c	;volatile
  3903  0023AA  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3904  0023AC  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3905  0023AE  0E06               	movlw	6
  3906  0023B0                     u4715:
  3907  0023B0  FFFF               	dw	65535	; assembler added errata NOP
  3908  0023B2  90D8               	bcf	status,0,c
  3909  0023B4  360F               	rlcf	??_InitFromEeprom,f,c
  3910  0023B6  3610               	rlcf	??_InitFromEeprom+1,f,c
  3911  0023B8  2EE8               	decfsz	wreg,f,c
  3912  0023BA  D7FA               	goto	u4715
  3913  0023BC  C00F  F0C6         	movff	??_InitFromEeprom,_blinkDuration
  3914  0023C0  C010  F0C7         	movff	??_InitFromEeprom+1,_blinkDuration+1
  3915                           
  3916                           ;main.c: 411: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  3917  0023C4  0E10               	movlw	16
  3918  0023C6  6EA9               	movwf	4009,c	;volatile
  3919  0023C8  80A6               	bsf	4006,0,c	;volatile
  3920  0023CA  50A8               	movf	4008,w,c	;volatile
  3921  0023CC  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3922  0023CE  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3923  0023D0  0E06               	movlw	6
  3924  0023D2                     u4725:
  3925  0023D2  FFFF               	dw	65535	; assembler added errata NOP
  3926  0023D4  90D8               	bcf	status,0,c
  3927  0023D6  360F               	rlcf	??_InitFromEeprom,f,c
  3928  0023D8  3610               	rlcf	??_InitFromEeprom+1,f,c
  3929  0023DA  2EE8               	decfsz	wreg,f,c
  3930  0023DC  D7FA               	goto	u4725
  3931  0023DE  C00F  F0C8         	movff	??_InitFromEeprom,_blinkPeriod
  3932  0023E2  C010  F0C9         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  3933                           
  3934                           ;main.c: 413: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  3935  0023E6  0E12               	movlw	18
  3936  0023E8  6EA9               	movwf	4009,c	;volatile
  3937  0023EA  80A6               	bsf	4006,0,c	;volatile
  3938  0023EC  CFA8 F0DA          	movff	4008,_eventCount	;volatile
  3939                           
  3940                           ;main.c: 419: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  3941  0023F0  0E8C               	movlw	140
  3942  0023F2  6EA9               	movwf	4009,c	;volatile
  3943  0023F4  80A6               	bsf	4006,0,c	;volatile
  3944  0023F6  CFA8 F071          	movff	4008,__soundCount	;volatile
  3945                           
  3946                           ;main.c: 420: if(_soundCount == 0xFF)
  3947  0023FA  2871               	incf	__soundCount,w,c
  3948  0023FC  E101               	bnz	l5556
  3949                           
  3950                           ;main.c: 421: _soundCount = 0;
  3951  0023FE  6A71               	clrf	__soundCount,c
  3952  002400                     l5556:
  3953                           
  3954                           ;main.c: 423: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  3955  002400  0E01               	movlw	1
  3956  002402  6EA9               	movwf	4009,c	;volatile
  3957  002404  80A6               	bsf	4006,0,c	;volatile
  3958  002406  6A0C               	clrf	Modbus@u8serno,c
  3959  002408  6A0D               	clrf	Modbus@u8txenpin,c
  3960  00240A  50A8               	movf	4008,w,c	;volatile
  3961  00240C  EC59  F016         	call	_Modbus
  3962                           
  3963                           ;main.c: 424: SwitchOffAllLeds();
  3964  002410  ECED  F015         	call	_SwitchOffAllLeds	;wreg free
  3965                           
  3966                           ;main.c: 427: curEventNum = 0xff;
  3967  002414  6875               	setf	_curEventNum,c
  3968                           
  3969                           ;main.c: 428: curEventTotalMinutes = 0;
  3970  002416  0100               	movlb	0	; () banked
  3971  002418  6BCA               	clrf	_curEventTotalMinutes& (0+255),b
  3972  00241A  6BCB               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 429: currentAlarmedEventNum = 0xff;
  3976  00241C  6876               	setf	_currentAlarmedEventNum,c
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;main.c: 430: LoadNextEvent();
  3980  00241E  EC06  F00D         	call	_LoadNextEvent	;wreg free
  3981                           
  3982                           ;main.c: 432: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  3983  002422  5071               	movf	__soundCount,w,c
  3984  002424  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3985  002426  0100               	movlb	0	; () banked
  3986  002428  51D2               	movf	__isSoundPlaying& (0+255),w,b
  3987  00242A  0101               	movlb	1	; () banked
  3988  00242C  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3989  00242E  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3990                           
  3991                           ; BSR set to: 1
  3992  002432  0012               	return		;funcret
  3993  002434  FFFF               	dw	65535	; errata NOP
  3994  002436                     __end_of_InitFromEeprom:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           intcon	equ	0xFF2
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           plusw2	equ	0xFDB
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function _Modbus *****************
  4017 ;; Defined at:
  4018 ;;		line 170 in file "ModbusRtu.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  u8id            1    wreg     unsigned char 
  4021 ;;  u8serno         1   11[COMRAM] unsigned char 
  4022 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  u8id            1   13[COMRAM] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4034 ;;      Params:         2       0       0       0       0       0       0
  4035 ;;      Locals:         1       0       0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0
  4037 ;;      Totals:         3       0       0       0       0       0       0
  4038 ;;Total ram usage:        3 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    3
  4041 ;; This function calls:
  4042 ;;		_ModbusInit
  4043 ;; This function is called by:
  4044 ;;		_InitFromEeprom
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text18
  4049  002CB2                     __ptext18:
  4050                           	opt stack 0
  4051  002CB2                     _Modbus:
  4052                           	opt stack 25
  4053                           
  4054                           ; BSR set to: 1
  4055                           ;incstack = 0
  4056  002CB2  FFFF               	dw	65535
  4057                           
  4058                           ;Modbus@u8id stored from wreg
  4059  002CB4  6E0E               	movwf	Modbus@u8id,c
  4060                           
  4061                           ;ModbusRtu.c: 172: ModbusInit(u8id, u8serno, u8txenpin);
  4062  002CB6  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4063  002CBA  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4064  002CBE  500E               	movf	Modbus@u8id,w,c
  4065  002CC0  EF63  F016         	goto	_ModbusInit
  4066  002CC4  FFFF               	dw	65535	; errata NOP
  4067  002CC6                     __end_of_Modbus:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           intcon	equ	0xFF2
  4076                           postinc0	equ	0xFEE
  4077                           wreg	equ	0xFE8
  4078                           postdec1	equ	0xFE5
  4079                           fsr1h	equ	0xFE2
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           postdec2	equ	0xFDD
  4084                           plusw2	equ	0xFDB
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _ModbusInit *****************
  4090 ;; Defined at:
  4091 ;;		line 494 in file "ModbusRtu.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  u8id            1    wreg     unsigned char 
  4094 ;;  u8serno         1    6[COMRAM] unsigned char 
  4095 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  u8id            1   10[COMRAM] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4107 ;;      Params:         2       0       0       0       0       0       0
  4108 ;;      Locals:         3       0       0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0
  4110 ;;      Totals:         5       0       0       0       0       0       0
  4111 ;;Total ram usage:        5 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    2
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_Modbus
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text19
  4122  002CC6                     __ptext19:
  4123                           	opt stack 0
  4124  002CC6                     _ModbusInit:
  4125                           	opt stack 25
  4126                           
  4127                           ;incstack = 0
  4128  002CC6  FFFF               	dw	65535
  4129                           
  4130                           ;ModbusInit@u8id stored from wreg
  4131  002CC8  6E0B               	movwf	ModbusInit@u8id,c
  4132                           
  4133                           ;ModbusRtu.c: 496: _u8id = u8id;
  4134  002CCA  C00B  F0D6         	movff	ModbusInit@u8id,__u8id
  4135                           
  4136                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4137  002CCE  0E04               	movlw	4
  4138  002CD0  6007               	cpfslt	ModbusInit@u8serno,c
  4139  002CD2  D000               	goto	l688
  4140  002CD4                     l688:
  4141  002CD4  FFFF               	dw	65535	; assembler added errata NOP
  4142  002CD6  0012               	return		;funcret
  4143  002CD8  FFFF               	dw	65535	; errata NOP
  4144  002CDA                     __end_of_ModbusInit:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postdec1	equ	0xFE5
  4156                           fsr1h	equ	0xFE2
  4157                           fsr1l	equ	0xFE1
  4158                           indf2	equ	0xFDF
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           plusw2	equ	0xFDB
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function _CommandSetStatusLed *****************
  4167 ;; Defined at:
  4168 ;;		line 878 in file "main.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;		None
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  led             1   30[COMRAM] unsigned char 
  4173 ;;  commandData     1   29[COMRAM] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      void 
  4176 ;; Registers used:
  4177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4183 ;;      Params:         0       0       0       0       0       0       0
  4184 ;;      Locals:         2       0       0       0       0       0       0
  4185 ;;      Temps:          1       0       0       0       0       0       0
  4186 ;;      Totals:         3       0       0       0       0       0       0
  4187 ;;Total ram usage:        3 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    5
  4190 ;; This function calls:
  4191 ;;		_LightStatusLed
  4192 ;;		_ModbusSetExceptionStatusBit
  4193 ;;		_PlaySound
  4194 ;;		_StopPlaying
  4195 ;; This function is called by:
  4196 ;;		_io_poll
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text20
  4201  00259C                     __ptext20:
  4202                           	opt stack 0
  4203  00259C                     _CommandSetStatusLed:
  4204                           	opt stack 24
  4205                           
  4206                           ;incstack = 0
  4207  00259C  FFFF               	dw	65535
  4208                           
  4209                           ;main.c: 882: uint8_t commandData = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  4210  00259E  C18C  F01E         	movff	__MODBUSHoldingRegs,CommandSetStatusLed@commandData
  4211                           
  4212                           ;main.c: 883: uint8_t led = commandData & 0x07;
  4213  0025A2  501E               	movf	CommandSetStatusLed@commandData,w,c
  4214  0025A4  0B07               	andlw	7
  4215  0025A6  6E1F               	movwf	CommandSetStatusLed@led,c
  4216                           
  4217                           ;main.c: 884: if(led >= 0x05)
  4218  0025A8  0E04               	movlw	4
  4219  0025AA  641F               	cpfsgt	CommandSetStatusLed@led,c
  4220  0025AC  D001               	goto	l5586
  4221  0025AE  D027               	goto	l440
  4222  0025B0                     l5586:
  4223  0025B0  FFFF               	dw	65535	; assembler added errata NOP
  4224                           
  4225                           ;main.c: 886: if((((commandData) >> (7)) & 0x01) == 0)
  4226  0025B2  6A1D               	clrf	??_CommandSetStatusLed& (0+255),c
  4227  0025B4  AE1E               	btfss	CommandSetStatusLed@commandData,7,c
  4228  0025B6  D001               	bra	u4755
  4229  0025B8  2A1D               	incf	??_CommandSetStatusLed& (0+255),f,c
  4230  0025BA                     u4755:
  4231  0025BA  B01D               	btfsc	??_CommandSetStatusLed,0,c
  4232  0025BC  D009               	goto	l5594
  4233                           
  4234                           ;main.c: 887: {
  4235                           ;main.c: 888: LightStatusLed(led, 0, 0);
  4236  0025BE  0E00               	movlw	0
  4237  0025C0  6E07               	movwf	LightStatusLed@on,c
  4238  0025C2  6E08               	movwf	LightStatusLed@blink,c
  4239  0025C4  501F               	movf	CommandSetStatusLed@led,w,c
  4240  0025C6  EC0B  F00E         	call	_LightStatusLed
  4241                           
  4242                           ;main.c: 889: StopPlaying();
  4243  0025CA  EC32  F016         	call	_StopPlaying	;wreg free
  4244  0025CE  D017               	goto	l440
  4245  0025D0                     l5594:
  4246  0025D0  FFFF               	dw	65535	; assembler added errata NOP
  4247                           
  4248                           ;main.c: 891: }
  4249                           ;main.c: 892: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  4250  0025D2  0E01               	movlw	1
  4251  0025D4  6E07               	movwf	LightStatusLed@on,c
  4252  0025D6  441E               	rlncf	CommandSetStatusLed@commandData,w,c
  4253  0025D8  46E8               	rlncf	wreg,f,c
  4254  0025DA  0B03               	andlw	3
  4255  0025DC  0B01               	andlw	1
  4256  0025DE  6E08               	movwf	LightStatusLed@blink,c
  4257  0025E0  501F               	movf	CommandSetStatusLed@led,w,c
  4258  0025E2  EC0B  F00E         	call	_LightStatusLed
  4259                           
  4260                           ;main.c: 893: PlaySound(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), ((unsigned
      +                           char)((_MODBUSHoldingRegs[1])&0xFF)));
  4261  0025E6  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  4262  0025EA  6A16               	clrf	PlaySound@playDuration+1,c
  4263  0025EC  0101               	movlb	1	; () banked
  4264  0025EE  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  4265  0025F0  EC86  F00E         	call	_PlaySound
  4266                           
  4267                           ;main.c: 894: ModbusSetExceptionStatusBit(0, 1);
  4268  0025F4  0E01               	movlw	1
  4269  0025F6  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  4270  0025F8  0E00               	movlw	0
  4271  0025FA  EC12  F014         	call	_ModbusSetExceptionStatusBit
  4272  0025FE                     l440:
  4273  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  4274  002600  0012               	return		;funcret
  4275  002602  FFFF               	dw	65535	; errata NOP
  4276  002604                     __end_of_CommandSetStatusLed:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodh	equ	0xFF4
  4283                           prodl	equ	0xFF3
  4284                           intcon	equ	0xFF2
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1h	equ	0xFE2
  4289                           fsr1l	equ	0xFE1
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           plusw2	equ	0xFDB
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _ModbusSetExceptionStatusBit *****************
  4299 ;; Defined at:
  4300 ;;		line 175 in file "ModbusRtu.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  bitNum          1    wreg     unsigned char 
  4303 ;;  value           1    6[COMRAM] unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  bitNum          1    9[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : F/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         1       0       0       0       0       0       0
  4316 ;;      Locals:         1       0       0       0       0       0       0
  4317 ;;      Temps:          2       0       0       0       0       0       0
  4318 ;;      Totals:         4       0       0       0       0       0       0
  4319 ;;Total ram usage:        4 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    2
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_CommandSetStatusLed
  4326 ;;		_io_poll
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text21
  4331  002824                     __ptext21:
  4332                           	opt stack 0
  4333  002824                     _ModbusSetExceptionStatusBit:
  4334                           	opt stack 27
  4335                           
  4336                           ;incstack = 0
  4337  002824  FFFF               	dw	65535
  4338                           
  4339                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  4340  002826  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  4341                           
  4342                           ;ModbusRtu.c: 177: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  4343  002828  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  4344  00282A  E010               	bz	l5466
  4345  00282C  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4346  002830  0E01               	movlw	1
  4347  002832  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4348  002834  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4349  002836  D003               	goto	u4464
  4350  002838                     u4465:
  4351  002838  FFFF               	dw	65535	; assembler added errata NOP
  4352  00283A  90D8               	bcf	status,0,c
  4353  00283C  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4354  00283E                     u4464:
  4355  00283E  FFFF               	dw	65535	; assembler added errata NOP
  4356  002840  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4357  002842  D7FA               	goto	u4465
  4358  002844  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  4359  002846  0100               	movlb	0	; () banked
  4360  002848  13CF               	iorwf	__exceptionStatus& (0+255),f,b
  4361  00284A  D00F               	goto	l656
  4362  00284C                     l5466:
  4363  00284C  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4364  002850  0E01               	movlw	1
  4365  002852  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4366  002854  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4367  002856  D003               	goto	u4474
  4368  002858                     u4475:
  4369  002858  FFFF               	dw	65535	; assembler added errata NOP
  4370  00285A  90D8               	bcf	status,0,c
  4371  00285C  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4372  00285E                     u4474:
  4373  00285E  FFFF               	dw	65535	; assembler added errata NOP
  4374  002860  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4375  002862  D7FA               	goto	u4475
  4376  002864  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  4377  002866  0100               	movlb	0	; () banked
  4378  002868  17CF               	andwf	__exceptionStatus& (0+255),f,b
  4379  00286A                     l656:
  4380  00286A  FFFF               	dw	65535	; assembler added errata NOP
  4381                           
  4382                           ; BSR set to: 0
  4383  00286C  0012               	return		;funcret
  4384  00286E  FFFF               	dw	65535	; errata NOP
  4385  002870                     __end_of_ModbusSetExceptionStatusBit:
  4386                           	opt stack 0
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           intcon	equ	0xFF2
  4394                           postinc0	equ	0xFEE
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           plusw2	equ	0xFDB
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _LightStatusLed *****************
  4408 ;; Defined at:
  4409 ;;		line 345 in file "main.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  row             1    wreg     unsigned char 
  4412 ;;  on              1    6[COMRAM] unsigned char 
  4413 ;;  blink           1    7[COMRAM] unsigned char 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  row             1   13[COMRAM] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4425 ;;      Params:         2       0       0       0       0       0       0
  4426 ;;      Locals:         1       0       0       0       0       0       0
  4427 ;;      Temps:          5       0       0       0       0       0       0
  4428 ;;      Totals:         8       0       0       0       0       0       0
  4429 ;;Total ram usage:        8 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    2
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;;		_SetTimeFromRegs
  4437 ;;		_CommandSetStatusLed
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           	psect	text22
  4442  001C16                     __ptext22:
  4443                           	opt stack 0
  4444  001C16                     _LightStatusLed:
  4445                           	opt stack 25
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;incstack = 0
  4449  001C16  FFFF               	dw	65535
  4450                           
  4451                           ;LightStatusLed@row stored from wreg
  4452  001C18  6E0E               	movwf	LightStatusLed@row,c
  4453                           
  4454                           ;main.c: 347: if(row > 7)
  4455  001C1A  0E07               	movlw	7
  4456  001C1C  640E               	cpfsgt	LightStatusLed@row,c
  4457  001C1E  D001               	goto	l5238
  4458  001C20  D072               	goto	l285
  4459  001C22                     l5238:
  4460  001C22  FFFF               	dw	65535	; assembler added errata NOP
  4461                           
  4462                           ;main.c: 349: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4463  001C24  5007               	movf	LightStatusLed@on,w,c
  4464  001C26  E010               	bz	l5242
  4465  001C28  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4466  001C2C  0E01               	movlw	1
  4467  001C2E  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4468  001C30  2A09               	incf	??_LightStatusLed,f,c
  4469  001C32  D003               	goto	u4194
  4470  001C34                     u4195:
  4471  001C34  FFFF               	dw	65535	; assembler added errata NOP
  4472  001C36  90D8               	bcf	status,0,c
  4473  001C38  360A               	rlcf	??_LightStatusLed+1,f,c
  4474  001C3A                     u4194:
  4475  001C3A  FFFF               	dw	65535	; assembler added errata NOP
  4476  001C3C  2E09               	decfsz	??_LightStatusLed,f,c
  4477  001C3E  D7FA               	goto	u4195
  4478  001C40  500A               	movf	??_LightStatusLed+1,w,c
  4479  001C42  0100               	movlb	0	; () banked
  4480  001C44  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4481  001C46  D00F               	goto	l5244
  4482  001C48                     l5242:
  4483  001C48  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4484  001C4C  0E01               	movlw	1
  4485  001C4E  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4486  001C50  2A09               	incf	??_LightStatusLed,f,c
  4487  001C52  D003               	goto	u4204
  4488  001C54                     u4205:
  4489  001C54  FFFF               	dw	65535	; assembler added errata NOP
  4490  001C56  90D8               	bcf	status,0,c
  4491  001C58  360A               	rlcf	??_LightStatusLed+1,f,c
  4492  001C5A                     u4204:
  4493  001C5A  FFFF               	dw	65535	; assembler added errata NOP
  4494  001C5C  2E09               	decfsz	??_LightStatusLed,f,c
  4495  001C5E  D7FA               	goto	u4205
  4496  001C60  1C0A               	comf	??_LightStatusLed+1,w,c
  4497  001C62  0100               	movlb	0	; () banked
  4498  001C64  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4499  001C66                     l5244:
  4500  001C66  FFFF               	dw	65535	; assembler added errata NOP
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 350: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4504  001C68  5008               	movf	LightStatusLed@blink,w,c
  4505  001C6A  E010               	bz	l5248
  4506                           
  4507                           ; BSR set to: 0
  4508  001C6C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4509  001C70  0E01               	movlw	1
  4510  001C72  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4511  001C74  2A09               	incf	??_LightStatusLed,f,c
  4512  001C76  D003               	goto	u4224
  4513  001C78                     u4225:
  4514  001C78  FFFF               	dw	65535	; assembler added errata NOP
  4515  001C7A  90D8               	bcf	status,0,c
  4516  001C7C  360A               	rlcf	??_LightStatusLed+1,f,c
  4517  001C7E                     u4224:
  4518  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  4519  001C80  2E09               	decfsz	??_LightStatusLed,f,c
  4520  001C82  D7FA               	goto	u4225
  4521  001C84  500A               	movf	??_LightStatusLed+1,w,c
  4522  001C86  0100               	movlb	0	; () banked
  4523  001C88  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4524  001C8A  D00F               	goto	l5250
  4525  001C8C                     l5248:
  4526                           
  4527                           ; BSR set to: 0
  4528  001C8C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4529  001C90  0E01               	movlw	1
  4530  001C92  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4531  001C94  2A09               	incf	??_LightStatusLed,f,c
  4532  001C96  D003               	goto	u4234
  4533  001C98                     u4235:
  4534  001C98  FFFF               	dw	65535	; assembler added errata NOP
  4535  001C9A  90D8               	bcf	status,0,c
  4536  001C9C  360A               	rlcf	??_LightStatusLed+1,f,c
  4537  001C9E                     u4234:
  4538  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  4539  001CA0  2E09               	decfsz	??_LightStatusLed,f,c
  4540  001CA2  D7FA               	goto	u4235
  4541  001CA4  1C0A               	comf	??_LightStatusLed+1,w,c
  4542  001CA6  0100               	movlb	0	; () banked
  4543  001CA8  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4544  001CAA                     l5250:
  4545  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;main.c: 351: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4549  001CAC  5007               	movf	LightStatusLed@on,w,c
  4550  001CAE  E014               	bz	l5254
  4551                           
  4552                           ; BSR set to: 0
  4553  001CB0  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4554  001CB4  0E01               	movlw	1
  4555  001CB6  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4556  001CB8  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4557  001CBA  2A09               	incf	??_LightStatusLed,f,c
  4558  001CBC  D004               	goto	u4254
  4559  001CBE                     u4255:
  4560  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  4561  001CC0  90D8               	bcf	status,0,c
  4562  001CC2  360A               	rlcf	??_LightStatusLed+1,f,c
  4563  001CC4  360B               	rlcf	??_LightStatusLed+2,f,c
  4564  001CC6                     u4254:
  4565  001CC6  FFFF               	dw	65535	; assembler added errata NOP
  4566  001CC8  2E09               	decfsz	??_LightStatusLed,f,c
  4567  001CCA  D7F9               	goto	u4255
  4568  001CCC  500A               	movf	??_LightStatusLed+1,w,c
  4569  001CCE  0100               	movlb	0	; () banked
  4570  001CD0  13DF               	iorwf	__MODBUSCoils& (0+255),f,b
  4571  001CD2  500B               	movf	??_LightStatusLed+2,w,c
  4572  001CD4  13E0               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4573  001CD6  D017               	goto	l285
  4574  001CD8                     l5254:
  4575                           
  4576                           ; BSR set to: 0
  4577  001CD8  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4578  001CDC  0E01               	movlw	1
  4579  001CDE  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4580  001CE0  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4581  001CE2  2A09               	incf	??_LightStatusLed,f,c
  4582  001CE4  D004               	goto	u4264
  4583  001CE6                     u4265:
  4584  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  4585  001CE8  90D8               	bcf	status,0,c
  4586  001CEA  360A               	rlcf	??_LightStatusLed+1,f,c
  4587  001CEC  360B               	rlcf	??_LightStatusLed+2,f,c
  4588  001CEE                     u4264:
  4589  001CEE  FFFF               	dw	65535	; assembler added errata NOP
  4590  001CF0  2E09               	decfsz	??_LightStatusLed,f,c
  4591  001CF2  D7F9               	goto	u4265
  4592  001CF4  1C0A               	comf	??_LightStatusLed+1,w,c
  4593  001CF6  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  4594  001CF8  1C0B               	comf	??_LightStatusLed+2,w,c
  4595  001CFA  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  4596  001CFC  500C               	movf	??_LightStatusLed+3,w,c
  4597  001CFE  0100               	movlb	0	; () banked
  4598  001D00  17DF               	andwf	__MODBUSCoils& (0+255),f,b
  4599  001D02  500D               	movf	??_LightStatusLed+4,w,c
  4600  001D04  17E0               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4601  001D06                     l285:
  4602  001D06  FFFF               	dw	65535	; assembler added errata NOP
  4603  001D08  0012               	return		;funcret
  4604  001D0A  FFFF               	dw	65535	; errata NOP
  4605  001D0C                     __end_of_LightStatusLed:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           intcon	equ	0xFF2
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1h	equ	0xFE2
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           plusw2	equ	0xFDB
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _getHourMin *****************
  4628 ;; Defined at:
  4629 ;;		line 248 in file "interrupts.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  hour            1    wreg     PTR unsigned char 
  4632 ;;		 -> main@hour(1), 
  4633 ;;  min             1    6[COMRAM] PTR unsigned char 
  4634 ;;		 -> main@minute(1), 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  hour            1    7[COMRAM] PTR unsigned char 
  4637 ;;		 -> main@hour(1), 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      unsigned char 
  4640 ;; Registers used:
  4641 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : F/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4647 ;;      Params:         1       0       0       0       0       0       0
  4648 ;;      Locals:         1       0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0
  4650 ;;      Totals:         2       0       0       0       0       0       0
  4651 ;;Total ram usage:        2 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    2
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text23
  4662  002B84                     __ptext23:
  4663                           	opt stack 0
  4664  002B84                     _getHourMin:
  4665                           	opt stack 28
  4666                           
  4667                           ;incstack = 0
  4668  002B84  FFFF               	dw	65535
  4669                           
  4670                           ;getHourMin@hour stored from wreg
  4671  002B86  6E08               	movwf	getHourMin@hour,c
  4672                           
  4673                           ;interrupts.c: 250: if(globalHours == 0xFF)
  4674  002B88  2877               	incf	_globalHours,w,c	;volatile
  4675  002B8A  E102               	bnz	l105
  4676                           
  4677                           ;interrupts.c: 251: return 0;
  4678  002B8C  0E00               	movlw	0
  4679  002B8E  D00D               	goto	l106
  4680  002B90                     l105:
  4681                           
  4682                           ;interrupts.c: 252: (INTCONbits.GIE = 0);
  4683  002B90  9EF2               	bcf	intcon,7,c	;volatile
  4684                           
  4685                           ;interrupts.c: 253: *hour = globalHours;
  4686  002B92  5008               	movf	getHourMin@hour,w,c
  4687  002B94  6ED9               	movwf	fsr2l,c
  4688  002B96  6ADA               	clrf	fsr2h,c
  4689  002B98  C077  FFDF         	movff	_globalHours,indf2	;volatile
  4690                           
  4691                           ;interrupts.c: 254: *min = globalMinutes;
  4692  002B9C  5007               	movf	getHourMin@min,w,c
  4693  002B9E  6ED9               	movwf	fsr2l,c
  4694  002BA0  6ADA               	clrf	fsr2h,c
  4695  002BA2  C074  FFDF         	movff	_globalMinutes,indf2	;volatile
  4696                           
  4697                           ;interrupts.c: 255: (INTCONbits.GIE = 1);
  4698  002BA6  8EF2               	bsf	intcon,7,c	;volatile
  4699                           
  4700                           ;interrupts.c: 256: return 1;
  4701  002BA8  0E01               	movlw	1
  4702  002BAA                     l106:
  4703  002BAA  FFFF               	dw	65535	; assembler added errata NOP
  4704  002BAC  0012               	return		;funcret
  4705  002BAE  FFFF               	dw	65535	; errata NOP
  4706  002BB0                     __end_of_getHourMin:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           plusw2	equ	0xFDB
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _ResetEvent *****************
  4729 ;; Defined at:
  4730 ;;		line 601 in file "main.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  state           1    wreg     unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  state           1   16[COMRAM] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : E/0
  4741 ;;		On exit  : F/1
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         0       0       0       0       0       0       0
  4745 ;;      Locals:         3       0       0       0       0       0       0
  4746 ;;      Temps:          2       0       0       0       0       0       0
  4747 ;;      Totals:         5       0       0       0       0       0       0
  4748 ;;Total ram usage:        5 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    3
  4751 ;; This function calls:
  4752 ;;		_LightLed
  4753 ;;		_StopPlaying
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text24
  4760  0029D4                     __ptext24:
  4761                           	opt stack 0
  4762  0029D4                     _ResetEvent:
  4763                           	opt stack 27
  4764                           
  4765                           ;incstack = 0
  4766  0029D4  FFFF               	dw	65535
  4767                           
  4768                           ;ResetEvent@state stored from wreg
  4769  0029D6  6E11               	movwf	ResetEvent@state,c
  4770                           
  4771                           ;main.c: 603: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4772  0029D8  5011               	movf	ResetEvent@state,w,c
  4773  0029DA  E103               	bnz	l5958
  4774  0029DC  6A13               	clrf	_ResetEvent$879+1,c
  4775  0029DE  0E02               	movlw	2
  4776  0029E0  D002               	goto	L2
  4777  0029E2                     l5958:
  4778  0029E2  6A13               	clrf	_ResetEvent$879+1,c
  4779  0029E4  0E01               	movlw	1
  4780  0029E6                     L2:
  4781  0029E6  FFFF               	dw	65535	; assembler added errata NOP
  4782  0029E8  6E12               	movwf	_ResetEvent$879,c
  4783  0029EA  C012  F007         	movff	_ResetEvent$879,LightLed@ledState
  4784  0029EE  6A08               	clrf	LightLed@blink,c
  4785  0029F0  2876               	incf	_currentAlarmedEventNum,w,c
  4786  0029F2  ECC0  F004         	call	_LightLed
  4787                           
  4788                           ;main.c: 604: currentAlarmedEventNum = 0xff;
  4789  0029F6  6876               	setf	_currentAlarmedEventNum,c
  4790                           
  4791                           ;main.c: 605: eventResetSecond = 0;
  4792  0029F8  0100               	movlb	0	; () banked
  4793  0029FA  6BAC               	clrf	_eventResetSecond& (0+255),b
  4794  0029FC  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  4795  0029FE  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  4796  002A00  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;main.c: 606: StopPlaying();
  4800  002A02  EC32  F016         	call	_StopPlaying	;wreg free
  4801                           
  4802                           ; BSR set to: 1
  4803                           ;main.c: 607: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4804  002A06  5076               	movf	_currentAlarmedEventNum,w,c
  4805  002A08  6E0F               	movwf	??_ResetEvent& (0+255),c
  4806  002A0A  5075               	movf	_curEventNum,w,c
  4807  002A0C  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4808  002A0E  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4809                           
  4810                           ; BSR set to: 1
  4811  002A12  0012               	return		;funcret
  4812  002A14  FFFF               	dw	65535	; errata NOP
  4813  002A16                     __end_of_ResetEvent:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           postdec1	equ	0xFE5
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           plusw2	equ	0xFDB
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _ProcessLightBlock *****************
  4836 ;; Defined at:
  4837 ;;		line 448 in file "main.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  curMs           1    wreg     PTR unsigned long 
  4840 ;;		 -> main@curMs(4), 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  4843 ;;		 -> main@curMs(4), 
  4844 ;; Return value:  Size  Location     Type
  4845 ;;                  1    wreg      void 
  4846 ;; Registers used:
  4847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : F/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4853 ;;      Params:         0       0       0       0       0       0       0
  4854 ;;      Locals:         1       0       0       0       0       0       0
  4855 ;;      Temps:          4       0       0       0       0       0       0
  4856 ;;      Totals:         5       0       0       0       0       0       0
  4857 ;;Total ram usage:        5 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    3
  4860 ;; This function calls:
  4861 ;;		_UpdateLedRegister
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text25
  4868  000C72                     __ptext25:
  4869                           	opt stack 0
  4870  000C72                     _ProcessLightBlock:
  4871                           	opt stack 27
  4872                           
  4873                           ; BSR set to: 1
  4874                           ;incstack = 0
  4875  000C72  FFFF               	dw	65535
  4876                           
  4877                           ;ProcessLightBlock@curMs stored from wreg
  4878  000C74  6E0C               	movwf	ProcessLightBlock@curMs,c
  4879                           
  4880                           ;main.c: 450: diffTime = *curMs - oldBlinkOnTime;
  4881  000C76  500C               	movf	ProcessLightBlock@curMs,w,c
  4882  000C78  6ED9               	movwf	fsr2l,c
  4883  000C7A  6ADA               	clrf	fsr2h,c
  4884  000C7C  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  4885  000C80  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  4886  000C84  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  4887  000C88  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  4888  000C8C  0100               	movlb	0	; () banked
  4889  000C8E  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  4890  000C90  5C08               	subwf	??_ProcessLightBlock,w,c
  4891  000C92  6FA8               	movwf	_diffTime& (0+255),b
  4892  000C94  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4893  000C96  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4894  000C98  6FA9               	movwf	(_diffTime+1)& (0+255),b
  4895  000C9A  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4896  000C9C  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4897  000C9E  6FAA               	movwf	(_diffTime+2)& (0+255),b
  4898  000CA0  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4899  000CA2  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4900  000CA4  6FAB               	movwf	(_diffTime+3)& (0+255),b
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;main.c: 451: if(diffTime > blinkPeriod)
  4904  000CA6  51C8               	movf	_blinkPeriod& (0+255),w,b
  4905  000CA8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4906  000CAA  51C9               	movf	(_blinkPeriod+1)& (0+255),w,b
  4907  000CAC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4908  000CAE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4909  000CB0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4910  000CB2  51A8               	movf	_diffTime& (0+255),w,b
  4911  000CB4  5C08               	subwf	??_ProcessLightBlock,w,c
  4912  000CB6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4913  000CB8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4914  000CBA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4915  000CBC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4916  000CBE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4917  000CC0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4918  000CC2  E20E               	bc	l4488
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;main.c: 452: {
  4922                           ;main.c: 453: blinkOn = 1;
  4923  000CC4  0E01               	movlw	1
  4924  000CC6  6E73               	movwf	_blinkOn,c
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;main.c: 454: oldBlinkOnTime = *curMs;
  4928  000CC8  500C               	movf	ProcessLightBlock@curMs,w,c
  4929  000CCA  6ED9               	movwf	fsr2l,c
  4930  000CCC  6ADA               	clrf	fsr2h,c
  4931  000CCE  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  4932  000CD2  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  4933  000CD6  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  4934  000CDA  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  4935                           
  4936                           ;main.c: 455: }
  4937  000CDE  D0F1               	goto	l4640
  4938  000CE0                     l4488:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;main.c: 456: else if(blinkOn && diffTime > blinkDuration)
  4942  000CE0  5073               	movf	_blinkOn,w,c
  4943  000CE2  E101 D0EE          	bz	l4640
  4944                           
  4945                           ; BSR set to: 0
  4946  000CE6  51C6               	movf	_blinkDuration& (0+255),w,b
  4947  000CE8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4948  000CEA  51C7               	movf	(_blinkDuration+1)& (0+255),w,b
  4949  000CEC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4950  000CEE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4951  000CF0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4952  000CF2  51A8               	movf	_diffTime& (0+255),w,b
  4953  000CF4  5C08               	subwf	??_ProcessLightBlock,w,c
  4954  000CF6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4955  000CF8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4956  000CFA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4957  000CFC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4958  000CFE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4959  000D00  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4960  000D02  E301 D0DE          	bc	l4640
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;main.c: 457: {
  4964                           ;main.c: 458: blinkOn = 0;
  4965  000D06  6A73               	clrf	_blinkOn,c
  4966  000D08  D0DC               	goto	l4640
  4967  000D0A                     l4494:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;main.c: 466: LATA &= 0xF0;
  4971  000D0A  0EF0               	movlw	240
  4972  000D0C  1689               	andwf	3977,f,c	;volatile
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;main.c: 467: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4976  000D0E  5073               	movf	_blinkOn,w,c
  4977  000D10  E003               	bz	l4500
  4978                           
  4979                           ; BSR set to: 0
  4980  000D12  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4981  000D16  D003               	goto	l4502
  4982  000D18                     l4500:
  4983                           
  4984                           ; BSR set to: 0
  4985  000D18  5190               	movf	_ledStatuses& (0+255),w,b
  4986  000D1A  1980               	xorwf	_ledBlink& (0+255),w,b
  4987  000D1C  6E8A               	movwf	3978,c	;volatile
  4988  000D1E                     l4502:
  4989  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  4990                           
  4991                           ; BSR set to: 0
  4992  000D20  0E00               	movlw	0
  4993  000D22  ECA5  F014         	call	_UpdateLedRegister
  4994                           
  4995                           ;main.c: 468: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4996  000D26  5073               	movf	_blinkOn,w,c
  4997  000D28  E003               	bz	l4508
  4998  000D2A  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4999  000D2E  D004               	goto	l4510
  5000  000D30                     l4508:
  5001  000D30  0100               	movlb	0	; () banked
  5002  000D32  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  5003  000D34  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  5004  000D36  6E8A               	movwf	3978,c	;volatile
  5005  000D38                     l4510:
  5006  000D38  FFFF               	dw	65535	; assembler added errata NOP
  5007  000D3A  0E01               	movlw	1
  5008  000D3C  ECA5  F014         	call	_UpdateLedRegister
  5009                           
  5010                           ;main.c: 469: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5011  000D40  5073               	movf	_blinkOn,w,c
  5012  000D42  E003               	bz	l4516
  5013  000D44  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5014  000D48  D004               	goto	l4518
  5015  000D4A                     l4516:
  5016  000D4A  0100               	movlb	0	; () banked
  5017  000D4C  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  5018  000D4E  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  5019  000D50  6E8A               	movwf	3978,c	;volatile
  5020  000D52                     l4518:
  5021  000D52  FFFF               	dw	65535	; assembler added errata NOP
  5022  000D54  0E02               	movlw	2
  5023  000D56  ECA5  F014         	call	_UpdateLedRegister
  5024                           
  5025                           ;main.c: 470: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5026  000D5A  5073               	movf	_blinkOn,w,c
  5027  000D5C  E003               	bz	l4524
  5028  000D5E  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5029  000D62  D004               	goto	l4526
  5030  000D64                     l4524:
  5031  000D64  0100               	movlb	0	; () banked
  5032  000D66  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  5033  000D68  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5034  000D6A  6E8A               	movwf	3978,c	;volatile
  5035  000D6C                     l4526:
  5036  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  5037  000D6E  0E03               	movlw	3
  5038  000D70  ECA5  F014         	call	_UpdateLedRegister
  5039                           
  5040                           ;main.c: 471: LATAbits.LATA0 = 1;
  5041  000D74  8089               	bsf	3977,0,c	;volatile
  5042                           
  5043                           ;main.c: 472: break;
  5044  000D76  D0B0               	goto	l4642
  5045  000D78                     l4530:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 474: LATA &= 0xF0;
  5049  000D78  0EF0               	movlw	240
  5050  000D7A  1689               	andwf	3977,f,c	;volatile
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;main.c: 475: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5054  000D7C  5073               	movf	_blinkOn,w,c
  5055  000D7E  E003               	bz	l4536
  5056                           
  5057                           ; BSR set to: 0
  5058  000D80  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5059  000D84  D003               	goto	l4538
  5060  000D86                     l4536:
  5061                           
  5062                           ; BSR set to: 0
  5063  000D86  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  5064  000D88  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  5065  000D8A  6E8A               	movwf	3978,c	;volatile
  5066  000D8C                     l4538:
  5067  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  5068                           
  5069                           ; BSR set to: 0
  5070  000D8E  0E00               	movlw	0
  5071  000D90  ECA5  F014         	call	_UpdateLedRegister
  5072                           
  5073                           ;main.c: 476: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5074  000D94  5073               	movf	_blinkOn,w,c
  5075  000D96  E003               	bz	l4544
  5076  000D98  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5077  000D9C  D004               	goto	l4546
  5078  000D9E                     l4544:
  5079  000D9E  0100               	movlb	0	; () banked
  5080  000DA0  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  5081  000DA2  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  5082  000DA4  6E8A               	movwf	3978,c	;volatile
  5083  000DA6                     l4546:
  5084  000DA6  FFFF               	dw	65535	; assembler added errata NOP
  5085  000DA8  0E01               	movlw	1
  5086  000DAA  ECA5  F014         	call	_UpdateLedRegister
  5087                           
  5088                           ;main.c: 477: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5089  000DAE  5073               	movf	_blinkOn,w,c
  5090  000DB0  E003               	bz	l4552
  5091  000DB2  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5092  000DB6  D004               	goto	l4554
  5093  000DB8                     l4552:
  5094  000DB8  0100               	movlb	0	; () banked
  5095  000DBA  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  5096  000DBC  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  5097  000DBE  6E8A               	movwf	3978,c	;volatile
  5098  000DC0                     l4554:
  5099  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  5100  000DC2  0E02               	movlw	2
  5101  000DC4  ECA5  F014         	call	_UpdateLedRegister
  5102                           
  5103                           ;main.c: 478: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5104  000DC8  5073               	movf	_blinkOn,w,c
  5105  000DCA  E003               	bz	l4560
  5106  000DCC  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5107  000DD0  D004               	goto	l4562
  5108  000DD2                     l4560:
  5109  000DD2  0100               	movlb	0	; () banked
  5110  000DD4  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  5111  000DD6  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5112  000DD8  6E8A               	movwf	3978,c	;volatile
  5113  000DDA                     l4562:
  5114  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  5115  000DDC  0E03               	movlw	3
  5116  000DDE  ECA5  F014         	call	_UpdateLedRegister
  5117                           
  5118                           ;main.c: 479: LATAbits.LATA1 = 1;
  5119  000DE2  8289               	bsf	3977,1,c	;volatile
  5120                           
  5121                           ;main.c: 480: break;
  5122  000DE4  D079               	goto	l4642
  5123  000DE6                     l4566:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 482: LATA &= 0xF0;
  5127  000DE6  0EF0               	movlw	240
  5128  000DE8  1689               	andwf	3977,f,c	;volatile
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;main.c: 483: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5132  000DEA  5073               	movf	_blinkOn,w,c
  5133  000DEC  E003               	bz	l4572
  5134                           
  5135                           ; BSR set to: 0
  5136  000DEE  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5137  000DF2  D003               	goto	l4574
  5138  000DF4                     l4572:
  5139                           
  5140                           ; BSR set to: 0
  5141  000DF4  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5142  000DF6  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5143  000DF8  6E8A               	movwf	3978,c	;volatile
  5144  000DFA                     l4574:
  5145  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  5146                           
  5147                           ; BSR set to: 0
  5148  000DFC  0E00               	movlw	0
  5149  000DFE  ECA5  F014         	call	_UpdateLedRegister
  5150                           
  5151                           ;main.c: 484: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5152  000E02  5073               	movf	_blinkOn,w,c
  5153  000E04  E003               	bz	l4580
  5154  000E06  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5155  000E0A  D004               	goto	l4582
  5156  000E0C                     l4580:
  5157  000E0C  0100               	movlb	0	; () banked
  5158  000E0E  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5159  000E10  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5160  000E12  6E8A               	movwf	3978,c	;volatile
  5161  000E14                     l4582:
  5162  000E14  FFFF               	dw	65535	; assembler added errata NOP
  5163  000E16  0E01               	movlw	1
  5164  000E18  ECA5  F014         	call	_UpdateLedRegister
  5165                           
  5166                           ;main.c: 485: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5167  000E1C  5073               	movf	_blinkOn,w,c
  5168  000E1E  E003               	bz	l4588
  5169  000E20  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5170  000E24  D004               	goto	l4590
  5171  000E26                     l4588:
  5172  000E26  0100               	movlb	0	; () banked
  5173  000E28  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5174  000E2A  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5175  000E2C  6E8A               	movwf	3978,c	;volatile
  5176  000E2E                     l4590:
  5177  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  5178  000E30  0E02               	movlw	2
  5179  000E32  ECA5  F014         	call	_UpdateLedRegister
  5180                           
  5181                           ;main.c: 486: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5182  000E36  5073               	movf	_blinkOn,w,c
  5183  000E38  E003               	bz	l4596
  5184  000E3A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5185  000E3E  D004               	goto	l4598
  5186  000E40                     l4596:
  5187  000E40  0100               	movlb	0	; () banked
  5188  000E42  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5189  000E44  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5190  000E46  6E8A               	movwf	3978,c	;volatile
  5191  000E48                     l4598:
  5192  000E48  FFFF               	dw	65535	; assembler added errata NOP
  5193  000E4A  0E03               	movlw	3
  5194  000E4C  ECA5  F014         	call	_UpdateLedRegister
  5195                           
  5196                           ;main.c: 487: LATAbits.LATA2 = 1;
  5197  000E50  8489               	bsf	3977,2,c	;volatile
  5198                           
  5199                           ;main.c: 488: break;
  5200  000E52  D042               	goto	l4642
  5201  000E54                     l4602:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;main.c: 490: LATA &= 0xF0;
  5205  000E54  0EF0               	movlw	240
  5206  000E56  1689               	andwf	3977,f,c	;volatile
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5210  000E58  5073               	movf	_blinkOn,w,c
  5211  000E5A  E003               	bz	l4608
  5212                           
  5213                           ; BSR set to: 0
  5214  000E5C  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5215  000E60  D003               	goto	l4610
  5216  000E62                     l4608:
  5217                           
  5218                           ; BSR set to: 0
  5219  000E62  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5220  000E64  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5221  000E66  6E8A               	movwf	3978,c	;volatile
  5222  000E68                     l4610:
  5223  000E68  FFFF               	dw	65535	; assembler added errata NOP
  5224                           
  5225                           ; BSR set to: 0
  5226  000E6A  0E00               	movlw	0
  5227  000E6C  ECA5  F014         	call	_UpdateLedRegister
  5228                           
  5229                           ;main.c: 492: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5230  000E70  5073               	movf	_blinkOn,w,c
  5231  000E72  E003               	bz	l4616
  5232  000E74  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5233  000E78  D004               	goto	l4618
  5234  000E7A                     l4616:
  5235  000E7A  0100               	movlb	0	; () banked
  5236  000E7C  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5237  000E7E  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5238  000E80  6E8A               	movwf	3978,c	;volatile
  5239  000E82                     l4618:
  5240  000E82  FFFF               	dw	65535	; assembler added errata NOP
  5241  000E84  0E01               	movlw	1
  5242  000E86  ECA5  F014         	call	_UpdateLedRegister
  5243                           
  5244                           ;main.c: 493: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5245  000E8A  5073               	movf	_blinkOn,w,c
  5246  000E8C  E003               	bz	l4624
  5247  000E8E  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5248  000E92  D004               	goto	l4626
  5249  000E94                     l4624:
  5250  000E94  0100               	movlb	0	; () banked
  5251  000E96  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5252  000E98  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5253  000E9A  6E8A               	movwf	3978,c	;volatile
  5254  000E9C                     l4626:
  5255  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  5256  000E9E  0E02               	movlw	2
  5257  000EA0  ECA5  F014         	call	_UpdateLedRegister
  5258                           
  5259                           ;main.c: 494: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5260  000EA4  5073               	movf	_blinkOn,w,c
  5261  000EA6  E003               	bz	l4632
  5262  000EA8  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5263  000EAC  D004               	goto	l4634
  5264  000EAE                     l4632:
  5265  000EAE  0100               	movlb	0	; () banked
  5266  000EB0  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5267  000EB2  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5268  000EB4  6E8A               	movwf	3978,c	;volatile
  5269  000EB6                     l4634:
  5270  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  5271  000EB8  0E03               	movlw	3
  5272  000EBA  ECA5  F014         	call	_UpdateLedRegister
  5273                           
  5274                           ;main.c: 495: LATAbits.LATA3 = 1;
  5275  000EBE  8689               	bsf	3977,3,c	;volatile
  5276                           
  5277                           ;main.c: 496: break;
  5278  000EC0  D00B               	goto	l4642
  5279  000EC2                     l4640:
  5280  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  5281                           
  5282                           ; BSR set to: 0
  5283  000EC4  51D8               	movf	_currentLedBlock& (0+255),w,b
  5284                           
  5285                           ; Switch size 1, requested type "speed"
  5286                           ; Number of cases is 4, Range of values is 0 to 3
  5287                           ; switch strategies available:
  5288                           ; Name         Instructions Cycles
  5289                           ; simple_byte           13     7 (average)
  5290                           ;	Chosen strategy is simple_byte
  5291  000EC6  E101 D720          	bz	l4494
  5292  000ECA  0A01               	xorlw	1	; case 1
  5293  000ECC  E101 D754          	bz	l4530
  5294  000ED0  0A03               	xorlw	3	; case 2
  5295  000ED2  E089               	bz	l4566
  5296  000ED4  0A01               	xorlw	1	; case 3
  5297  000ED6  E0BE               	bz	l4602
  5298  000ED8                     l4642:
  5299  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  5300                           
  5301                           ;main.c: 499: currentLedBlock++;
  5302  000EDA  0100               	movlb	0	; () banked
  5303  000EDC  2BD8               	incf	_currentLedBlock& (0+255),f,b
  5304                           
  5305                           ;main.c: 502: currentLedBlock &= 0xFB;
  5306  000EDE  95D8               	bcf	_currentLedBlock& (0+255),2,b
  5307                           
  5308                           ; BSR set to: 0
  5309  000EE0  0012               	return		;funcret
  5310  000EE2  FFFF               	dw	65535	; errata NOP
  5311  000EE4                     __end_of_ProcessLightBlock:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           postdec1	equ	0xFE5
  5323                           fsr1h	equ	0xFE2
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           plusw2	equ	0xFDB
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function _UpdateLedRegister *****************
  5334 ;; Defined at:
  5335 ;;		line 261 in file "main.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  regIndex        1    wreg     unsigned char 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  regIndex        1    6[COMRAM] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5349 ;;      Params:         0       0       0       0       0       0       0
  5350 ;;      Locals:         1       0       0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0
  5352 ;;      Totals:         1       0       0       0       0       0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    2
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_ProcessLightBlock
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           	psect	text26
  5364  00294A                     __ptext26:
  5365                           	opt stack 0
  5366  00294A                     _UpdateLedRegister:
  5367                           	opt stack 27
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;incstack = 0
  5371  00294A  FFFF               	dw	65535
  5372                           
  5373                           ;UpdateLedRegister@regIndex stored from wreg
  5374  00294C  6E07               	movwf	UpdateLedRegister@regIndex,c
  5375                           
  5376                           ;main.c: 263: switch(regIndex)
  5377  00294E  D014               	goto	l3794
  5378  002950                     l243:
  5379                           
  5380                           ;main.c: 266: LATAbits.LATA4 = 0;
  5381  002950  9889               	bcf	3977,4,c	;volatile
  5382                           
  5383                           ;main.c: 267: TRISAbits.RA4 = 0;
  5384  002952  9892               	bcf	3986,4,c	;volatile
  5385                           
  5386                           ;main.c: 268: LATAbits.LATA4 = 1;
  5387  002954  8889               	bsf	3977,4,c	;volatile
  5388                           
  5389                           ;main.c: 269: TRISAbits.RA4 = 1;
  5390  002956  8892               	bsf	3986,4,c	;volatile
  5391                           
  5392                           ;main.c: 270: break;
  5393  002958  D018               	goto	l248
  5394  00295A                     l245:
  5395                           
  5396                           ;main.c: 272: LATCbits.LATC3 = 0;
  5397  00295A  968B               	bcf	3979,3,c	;volatile
  5398                           
  5399                           ;main.c: 273: TRISCbits.RC3 = 0;
  5400  00295C  9694               	bcf	3988,3,c	;volatile
  5401                           
  5402                           ;main.c: 274: LATCbits.LATC3 = 1;
  5403  00295E  868B               	bsf	3979,3,c	;volatile
  5404                           
  5405                           ;main.c: 275: TRISCbits.RC3 = 1;
  5406  002960  8694               	bsf	3988,3,c	;volatile
  5407                           
  5408                           ;main.c: 276: break;
  5409  002962  D013               	goto	l248
  5410  002964                     l246:
  5411                           
  5412                           ;main.c: 278: LATCbits.LATC0 = 0;
  5413  002964  908B               	bcf	3979,0,c	;volatile
  5414                           
  5415                           ;main.c: 279: TRISCbits.RC0 = 0;
  5416  002966  9094               	bcf	3988,0,c	;volatile
  5417                           
  5418                           ;main.c: 280: LATCbits.LATC0 = 1;
  5419  002968  808B               	bsf	3979,0,c	;volatile
  5420                           
  5421                           ;main.c: 281: TRISCbits.RC0 = 1;
  5422  00296A  8094               	bsf	3988,0,c	;volatile
  5423                           
  5424                           ;main.c: 282: break;
  5425  00296C  D00E               	goto	l248
  5426  00296E                     l247:
  5427                           
  5428                           ;main.c: 284: LATCbits.LATC1 = 0;
  5429  00296E  928B               	bcf	3979,1,c	;volatile
  5430                           
  5431                           ;main.c: 285: TRISCbits.RC1 = 0;
  5432  002970  9294               	bcf	3988,1,c	;volatile
  5433                           
  5434                           ;main.c: 286: LATCbits.LATC1 = 1;
  5435  002972  828B               	bsf	3979,1,c	;volatile
  5436                           
  5437                           ;main.c: 287: TRISCbits.RC1 = 1;
  5438  002974  8294               	bsf	3988,1,c	;volatile
  5439                           
  5440                           ;main.c: 288: break;
  5441  002976  D009               	goto	l248
  5442  002978                     l3794:
  5443  002978  FFFF               	dw	65535	; assembler added errata NOP
  5444  00297A  5007               	movf	UpdateLedRegister@regIndex,w,c
  5445                           
  5446                           ; Switch size 1, requested type "speed"
  5447                           ; Number of cases is 4, Range of values is 0 to 3
  5448                           ; switch strategies available:
  5449                           ; Name         Instructions Cycles
  5450                           ; simple_byte           13     7 (average)
  5451                           ;	Chosen strategy is simple_byte
  5452  00297C  E0E9               	bz	l243
  5453  00297E  0A01               	xorlw	1	; case 1
  5454  002980  E0EC               	bz	l245
  5455  002982  0A03               	xorlw	3	; case 2
  5456  002984  E0EF               	bz	l246
  5457  002986  0A01               	xorlw	1	; case 3
  5458  002988  E0F2               	bz	l247
  5459  00298A                     l248:
  5460  00298A  FFFF               	dw	65535	; assembler added errata NOP
  5461  00298C  0012               	return		;funcret
  5462  00298E  FFFF               	dw	65535	; errata NOP
  5463  002990                     __end_of_UpdateLedRegister:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           intcon	equ	0xFF2
  5472                           postinc0	equ	0xFEE
  5473                           wreg	equ	0xFE8
  5474                           postdec1	equ	0xFE5
  5475                           fsr1h	equ	0xFE2
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           plusw2	equ	0xFDB
  5481                           fsr2h	equ	0xFDA
  5482                           fsr2l	equ	0xFD9
  5483                           status	equ	0xFD8
  5484                           
  5485 ;; *************** function _ProcessDiary *****************
  5486 ;; Defined at:
  5487 ;;		line 691 in file "main.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  totalMinutes    2   32[COMRAM] unsigned int 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : F/1
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5501 ;;      Params:         0       0       0       0       0       0       0
  5502 ;;      Locals:         2       0       0       0       0       0       0
  5503 ;;      Temps:          4       0       0       0       0       0       0
  5504 ;;      Totals:         6       0       0       0       0       0       0
  5505 ;;Total ram usage:        6 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    5
  5508 ;; This function calls:
  5509 ;;		_GetTime
  5510 ;;		_LightLed
  5511 ;;		_LoadNextEvent
  5512 ;;		_PlaySound
  5513 ;;		_SwitchOffAllLeds
  5514 ;;		_getTotalMinutes
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text27
  5521  001F86                     __ptext27:
  5522                           	opt stack 0
  5523  001F86                     _ProcessDiary:
  5524                           	opt stack 25
  5525                           
  5526                           ;incstack = 0
  5527  001F86  FFFF               	dw	65535
  5528                           
  5529                           ; BSR set to: 1
  5530                           ;main.c: 694: if(curEventNum == 0xff)
  5531  001F88  2875               	incf	_curEventNum,w,c
  5532  001F8A  E058               	bz	l412
  5533                           
  5534                           ; BSR set to: 1
  5535                           ;main.c: 696: uint16_t totalMinutes;
  5536                           ;main.c: 700: if(!getTotalMinutes(&totalMinutes))
  5537  001F8C  0E21               	movlw	ProcessDiary@totalMinutes& (0+255)
  5538  001F8E  EC00  F016         	call	_getTotalMinutes
  5539  001F92  0900               	iorlw	0
  5540  001F94  E053               	bz	l412
  5541                           
  5542                           ;main.c: 703: if(totalMinutes == 0)
  5543  001F96  5021               	movf	ProcessDiary@totalMinutes,w,c
  5544  001F98  1022               	iorwf	ProcessDiary@totalMinutes+1,w,c
  5545  001F9A  E10C               	bnz	l5988
  5546                           
  5547                           ;main.c: 704: {
  5548                           ;main.c: 705: SwitchOffAllLeds();
  5549  001F9C  ECED  F015         	call	_SwitchOffAllLeds	;wreg free
  5550                           
  5551                           ;main.c: 706: curEventNum = 0xff;
  5552  001FA0  6875               	setf	_curEventNum,c
  5553                           
  5554                           ;main.c: 707: LoadNextEvent();
  5555  001FA2  EC06  F00D         	call	_LoadNextEvent	;wreg free
  5556                           
  5557                           ;main.c: 708: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5558  001FA6  5076               	movf	_currentAlarmedEventNum,w,c
  5559  001FA8  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5560  001FAA  5075               	movf	_curEventNum,w,c
  5561  001FAC  0101               	movlb	1	; () banked
  5562  001FAE  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5563  001FB0  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5564  001FB4                     l5988:
  5565                           
  5566                           ;main.c: 709: }
  5567                           ;main.c: 712: if(curEventTotalMinutes == totalMinutes)
  5568  001FB4  5021               	movf	ProcessDiary@totalMinutes,w,c
  5569  001FB6  0100               	movlb	0	; () banked
  5570  001FB8  19CA               	xorwf	_curEventTotalMinutes& (0+255),w,b
  5571  001FBA  E140               	bnz	l412
  5572  001FBC  5022               	movf	ProcessDiary@totalMinutes+1,w,c
  5573  001FBE  19CB               	xorwf	(_curEventTotalMinutes+1)& (0+255),w,b
  5574  001FC0  E13D               	bnz	l412
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;main.c: 713: {
  5578                           ;main.c: 715: if(currentAlarmedEventNum != 0xff)
  5579  001FC2  2876               	incf	_currentAlarmedEventNum,w,c
  5580  001FC4  E006               	bz	l5994
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;main.c: 716: {
  5584                           ;main.c: 717: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5585  001FC6  0E02               	movlw	2
  5586  001FC8  6E07               	movwf	LightLed@ledState,c
  5587  001FCA  6A08               	clrf	LightLed@blink,c
  5588  001FCC  2876               	incf	_currentAlarmedEventNum,w,c
  5589  001FCE  ECC0  F004         	call	_LightLed
  5590  001FD2                     l5994:
  5591                           
  5592                           ;main.c: 718: }
  5593                           ;main.c: 720: {
  5594                           ;main.c: 721: currentAlarmedEventNum = curEventNum;
  5595  001FD2  C075  F076         	movff	_curEventNum,_currentAlarmedEventNum
  5596                           
  5597                           ;main.c: 723: LightLed(currentAlarmedEventNum + 1, LED_ORANGE, 1);
  5598  001FD6  0E03               	movlw	3
  5599  001FD8  6E07               	movwf	LightLed@ledState,c
  5600  001FDA  0E01               	movlw	1
  5601  001FDC  6E08               	movwf	LightLed@blink,c
  5602  001FDE  2876               	incf	_currentAlarmedEventNum,w,c
  5603  001FE0  ECC0  F004         	call	_LightLed
  5604                           
  5605                           ;main.c: 724: if(_nextEventSoundId != 0)
  5606  001FE4  0100               	movlb	0	; () banked
  5607  001FE6  51D3               	movf	__nextEventSoundId& (0+255),w,b
  5608  001FE8  E007               	bz	l6000
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;main.c: 725: {
  5612                           ;main.c: 726: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5613  001FEA  C0C2  F015         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5614  001FEE  C0C3  F016         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5615  001FF2  05D3               	decf	__nextEventSoundId& (0+255),w,b
  5616  001FF4  EC86  F00E         	call	_PlaySound
  5617  001FF8                     l6000:
  5618                           
  5619                           ;main.c: 727: }
  5620                           ;main.c: 736: eventResetSecond = *GetTime() + eventAcceptTime;
  5621  001FF8  EC85  F016         	call	_GetTime	;wreg free
  5622  001FFC  6ED9               	movwf	fsr2l,c
  5623  001FFE  6ADA               	clrf	fsr2h,c
  5624  002000  CFDE F01D          	movff	postinc2,??_ProcessDiary
  5625  002004  CFDE F01E          	movff	postinc2,??_ProcessDiary+1
  5626  002008  CFDE F01F          	movff	postinc2,??_ProcessDiary+2
  5627  00200C  CFDE F020          	movff	postinc2,??_ProcessDiary+3
  5628  002010  0100               	movlb	0	; () banked
  5629  002012  51D9               	movf	_eventAcceptTime& (0+255),w,b
  5630  002014  241D               	addwf	??_ProcessDiary,w,c
  5631  002016  6FAC               	movwf	_eventResetSecond& (0+255),b
  5632  002018  0E00               	movlw	0
  5633  00201A  201E               	addwfc	??_ProcessDiary+1,w,c
  5634  00201C  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  5635  00201E  0E00               	movlw	0
  5636  002020  201F               	addwfc	??_ProcessDiary+2,w,c
  5637  002022  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  5638  002024  0E00               	movlw	0
  5639  002026  2020               	addwfc	??_ProcessDiary+3,w,c
  5640  002028  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;main.c: 738: LoadNextEvent();
  5644  00202A  EC06  F00D         	call	_LoadNextEvent	;wreg free
  5645                           
  5646                           ;main.c: 739: }
  5647                           ;main.c: 740: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5648  00202E  5076               	movf	_currentAlarmedEventNum,w,c
  5649  002030  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5650  002032  5075               	movf	_curEventNum,w,c
  5651  002034  0101               	movlb	1	; () banked
  5652  002036  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5653  002038  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5654  00203C                     l412:
  5655  00203C  0012               	return		;funcret
  5656  00203E  FFFF               	dw	65535	; errata NOP
  5657  002040                     __end_of_ProcessDiary:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           postdec1	equ	0xFE5
  5669                           fsr1h	equ	0xFE2
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           plusw2	equ	0xFDB
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _SwitchOffAllLeds *****************
  5680 ;; Defined at:
  5681 ;;		line 293 in file "main.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  i               1    6[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5695 ;;      Params:         0       0       0       0       0       0       0
  5696 ;;      Locals:         1       0       0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0
  5698 ;;      Totals:         1       0       0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    2
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_InitFromEeprom
  5706 ;;		_ProcessDiary
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text28
  5711  002BDA                     __ptext28:
  5712                           	opt stack 0
  5713  002BDA                     _SwitchOffAllLeds:
  5714                           	opt stack 26
  5715                           
  5716                           ;incstack = 0
  5717  002BDA  FFFF               	dw	65535
  5718                           
  5719                           ;main.c: 295: for(uint8_t i = 0; i < 16 - 1; i++)
  5720  002BDC  6A07               	clrf	SwitchOffAllLeds@i,c
  5721  002BDE                     l5388:
  5722  002BDE  FFFF               	dw	65535	; assembler added errata NOP
  5723                           
  5724                           ;main.c: 296: {
  5725                           ;main.c: 297: ledStatuses[i] = 0;
  5726  002BE0  5007               	movf	SwitchOffAllLeds@i,w,c
  5727  002BE2  0F90               	addlw	low _ledStatuses
  5728  002BE4  6ED9               	movwf	fsr2l,c
  5729  002BE6  6ADA               	clrf	fsr2h,c
  5730  002BE8  6ADF               	clrf	indf2,c
  5731                           
  5732                           ;main.c: 298: ledBlink[i] = 0;
  5733  002BEA  5007               	movf	SwitchOffAllLeds@i,w,c
  5734  002BEC  0F80               	addlw	low _ledBlink
  5735  002BEE  6ED9               	movwf	fsr2l,c
  5736  002BF0  6ADA               	clrf	fsr2h,c
  5737  002BF2  6ADF               	clrf	indf2,c
  5738  002BF4  2A07               	incf	SwitchOffAllLeds@i,f,c
  5739  002BF6  0E0E               	movlw	14
  5740  002BF8  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5741  002BFA  D7F1               	goto	l5388
  5742  002BFC  0C0E               	retlw	14	;funcret
  5743  002BFE  FFFF               	dw	65535	; errata NOP
  5744  002C00                     __end_of_SwitchOffAllLeds:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           postdec1	equ	0xFE5
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           plusw2	equ	0xFDB
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _PlaySound *****************
  5767 ;; Defined at:
  5768 ;;		line 566 in file "main.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  soundId         1    wreg     unsigned char 
  5771 ;;  playDuration    2   20[COMRAM] unsigned int 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  soundId         1   26[COMRAM] unsigned char 
  5774 ;;  soundAddr       1   27[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      unsigned char 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : E/1
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5784 ;;      Params:         2       0       0       0       0       0       0
  5785 ;;      Locals:         2       0       0       0       0       0       0
  5786 ;;      Temps:          4       0       0       0       0       0       0
  5787 ;;      Totals:         8       0       0       0       0       0       0
  5788 ;;Total ram usage:        8 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    4
  5791 ;; This function calls:
  5792 ;;		_GetTime
  5793 ;;		_SoundPlayNextStep
  5794 ;; This function is called by:
  5795 ;;		_ProcessDiary
  5796 ;;		_CommandSetStatusLed
  5797 ;;		_io_poll
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text29
  5802  001D0C                     __ptext29:
  5803                           	opt stack 0
  5804  001D0C                     _PlaySound:
  5805                           	opt stack 25
  5806                           
  5807                           ;incstack = 0
  5808  001D0C  FFFF               	dw	65535
  5809                           
  5810                           ;PlaySound@soundId stored from wreg
  5811  001D0E  6E1B               	movwf	PlaySound@soundId,c
  5812                           
  5813                           ;main.c: 568: if(soundId >= _soundCount)
  5814  001D10  5071               	movf	__soundCount,w,c
  5815  001D12  5C1B               	subwf	PlaySound@soundId,w,c
  5816  001D14  E26E               	bc	l376
  5817                           
  5818                           ;main.c: 571: if(playDuration == 0)
  5819  001D16  5015               	movf	PlaySound@playDuration,w,c
  5820  001D18  1016               	iorwf	PlaySound@playDuration+1,w,c
  5821  001D1A  E106               	bnz	l5404
  5822                           
  5823                           ;main.c: 572: soundTestEnd = 0;
  5824  001D1C  0100               	movlb	0	; () banked
  5825  001D1E  6BB8               	clrf	_soundTestEnd& (0+255),b
  5826  001D20  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  5827  001D22  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  5828  001D24  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  5829  001D26  D023               	goto	l5410
  5830  001D28                     l5404:
  5831                           
  5832                           ;main.c: 573: else if(playDuration == 65535)
  5833  001D28  2815               	incf	PlaySound@playDuration,w,c
  5834  001D2A  E108               	bnz	l5408
  5835  001D2C  2816               	incf	PlaySound@playDuration+1,w,c
  5836  001D2E  E106               	bnz	l5408
  5837                           
  5838                           ;main.c: 574: soundTestEnd = 4294967295;
  5839  001D30  0100               	movlb	0	; () banked
  5840  001D32  69B8               	setf	_soundTestEnd& (0+255),b
  5841  001D34  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  5842  001D36  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  5843  001D38  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  5844  001D3A  D019               	goto	l5410
  5845  001D3C                     l5408:
  5846                           
  5847                           ;main.c: 575: else
  5848                           ;main.c: 576: soundTestEnd = *GetTime() + playDuration;
  5849  001D3C  EC85  F016         	call	_GetTime	;wreg free
  5850  001D40  6ED9               	movwf	fsr2l,c
  5851  001D42  6ADA               	clrf	fsr2h,c
  5852  001D44  CFDE F017          	movff	postinc2,??_PlaySound
  5853  001D48  CFDE F018          	movff	postinc2,??_PlaySound+1
  5854  001D4C  CFDE F019          	movff	postinc2,??_PlaySound+2
  5855  001D50  CFDE F01A          	movff	postinc2,??_PlaySound+3
  5856  001D54  5015               	movf	PlaySound@playDuration,w,c
  5857  001D56  2417               	addwf	??_PlaySound,w,c
  5858  001D58  0100               	movlb	0	; () banked
  5859  001D5A  6FB8               	movwf	_soundTestEnd& (0+255),b
  5860  001D5C  5016               	movf	PlaySound@playDuration+1,w,c
  5861  001D5E  2018               	addwfc	??_PlaySound+1,w,c
  5862  001D60  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  5863  001D62  0E00               	movlw	0
  5864  001D64  2019               	addwfc	??_PlaySound+2,w,c
  5865  001D66  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  5866  001D68  0E00               	movlw	0
  5867  001D6A  201A               	addwfc	??_PlaySound+3,w,c
  5868  001D6C  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  5869  001D6E                     l5410:
  5870  001D6E  FFFF               	dw	65535	; assembler added errata NOP
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;main.c: 578: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  5874  001D70  501B               	movf	PlaySound@soundId,w,c
  5875  001D72  0F8D               	addlw	141
  5876  001D74  6EA9               	movwf	4009,c	;volatile
  5877                           
  5878                           ; BSR set to: 0
  5879  001D76  80A6               	bsf	4006,0,c	;volatile
  5880                           
  5881                           ; BSR set to: 0
  5882  001D78  CFA8 F01C          	movff	4008,PlaySound@soundAddr	;volatile
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;main.c: 579: if(140 + _soundCount + soundAddr >= 256)
  5886  001D7C  501C               	movf	PlaySound@soundAddr,w,c
  5887  001D7E  C071  F017         	movff	__soundCount,??_PlaySound
  5888  001D82  6A18               	clrf	(??_PlaySound+1)& (0+255),c
  5889  001D84  2617               	addwf	??_PlaySound,f,c
  5890  001D86  0E00               	movlw	0
  5891  001D88  2218               	addwfc	??_PlaySound+1,f,c
  5892  001D8A  0E8C               	movlw	140
  5893  001D8C  2617               	addwf	??_PlaySound,f,c
  5894  001D8E  0E00               	movlw	0
  5895  001D90  2218               	addwfc	??_PlaySound+1,f,c
  5896  001D92  BE18               	btfsc	??_PlaySound+1,7,c
  5897  001D94  D002               	goto	l5420
  5898  001D96  0418               	decf	??_PlaySound+1,w,c
  5899  001D98  E22C               	bc	l376
  5900  001D9A                     l5420:
  5901  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;main.c: 582: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  5905  001D9C  5071               	movf	__soundCount,w,c
  5906  001D9E  241C               	addwf	PlaySound@soundAddr,w,c
  5907  001DA0  0F8D               	addlw	141
  5908  001DA2  6EA9               	movwf	4009,c	;volatile
  5909                           
  5910                           ; BSR set to: 0
  5911  001DA4  80A6               	bsf	4006,0,c	;volatile
  5912                           
  5913                           ; BSR set to: 0
  5914  001DA6  CFA8 F0D5          	movff	4008,__playingSoundSteps	;volatile
  5915                           
  5916                           ;main.c: 584: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  5917  001DAA  5071               	movf	__soundCount,w,c
  5918  001DAC  241C               	addwf	PlaySound@soundAddr,w,c
  5919  001DAE  0F8E               	addlw	142
  5920  001DB0  6E70               	movwf	__playingSoundStartPosInEe,c
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;main.c: 585: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5924  001DB2  51D5               	movf	__playingSoundSteps& (0+255),w,b
  5925  001DB4  6E17               	movwf	??_PlaySound& (0+255),c
  5926  001DB6  5070               	movf	__playingSoundStartPosInEe,w,c
  5927  001DB8  0101               	movlb	1	; () banked
  5928  001DBA  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5929  001DBC  C017  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5930                           
  5931                           ; BSR set to: 1
  5932                           ;main.c: 586: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5933  001DC0  0100               	movlb	0	; () banked
  5934  001DC2  51D5               	movf	__playingSoundSteps& (0+255),w,b
  5935  001DC4  0D03               	mullw	3
  5936  001DC6  5070               	movf	__playingSoundStartPosInEe,w,c
  5937  001DC8  26F3               	addwf	prodl,f,c
  5938  001DCA  0E00               	movlw	0
  5939  001DCC  22F4               	addwfc	prodh,f,c
  5940  001DCE  BEF4               	btfsc	prodh,7,c
  5941  001DD0  D002               	goto	l382
  5942  001DD2  04F4               	decf	prodh,w,c
  5943  001DD4  E20E               	bc	l376
  5944  001DD6                     l382:
  5945  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;main.c: 589: _playingSoundCurPos = 0;
  5949  001DD8  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;main.c: 590: _isSoundPlaying = 1;
  5953  001DDA  0E01               	movlw	1
  5954  001DDC  6FD2               	movwf	__isSoundPlaying& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 591: SoundPlayNextStep();
  5958  001DDE  EC7B  F010         	call	_SoundPlayNextStep	;wreg free
  5959                           
  5960                           ;main.c: 593: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  5961  001DE2  5071               	movf	__soundCount,w,c
  5962  001DE4  6E17               	movwf	??_PlaySound& (0+255),c
  5963  001DE6  0100               	movlb	0	; () banked
  5964  001DE8  51D2               	movf	__isSoundPlaying& (0+255),w,b
  5965  001DEA  0101               	movlb	1	; () banked
  5966  001DEC  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  5967  001DEE  C017  F1B7         	movff	??_PlaySound,__MODBUSInputRegs+13
  5968  001DF2                     l376:
  5969  001DF2  0012               	return		;funcret
  5970  001DF4  FFFF               	dw	65535	; errata NOP
  5971  001DF6                     __end_of_PlaySound:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon	equ	0xFF2
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           plusw2	equ	0xFDB
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _SoundPlayNextStep *****************
  5994 ;; Defined at:
  5995 ;;		line 523 in file "main.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;		None
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  duration        1   19[COMRAM] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      void 
  6002 ;; Registers used:
  6003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6004 ;; Tracked objects:
  6005 ;;		On entry : F/0
  6006 ;;		On exit  : E/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6009 ;;      Params:         0       0       0       0       0       0       0
  6010 ;;      Locals:         1       0       0       0       0       0       0
  6011 ;;      Temps:          5       0       0       0       0       0       0
  6012 ;;      Totals:         6       0       0       0       0       0       0
  6013 ;;Total ram usage:        6 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    3
  6016 ;; This function calls:
  6017 ;;		_GetTime
  6018 ;;		_SetBuzzerDuty
  6019 ;;		_StopPlaying
  6020 ;;		_millis
  6021 ;; This function is called by:
  6022 ;;		_PlaySound
  6023 ;;		_main
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text30
  6028  0020F6                     __ptext30:
  6029                           	opt stack 0
  6030  0020F6                     _SoundPlayNextStep:
  6031                           	opt stack 25
  6032                           
  6033                           ;incstack = 0
  6034  0020F6  FFFF               	dw	65535
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;main.c: 525: if(_playingSoundCurPos >= _playingSoundSteps)
  6038  0020F8  51D5               	movf	__playingSoundSteps& (0+255),w,b
  6039  0020FA  5DD4               	subwf	__playingSoundCurPos& (0+255),w,b
  6040  0020FC  E316               	bnc	l5326
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;main.c: 526: {
  6044                           ;main.c: 527: _playingSoundCurPos = 0;
  6045  0020FE  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;main.c: 528: if(*GetTime() >= soundTestEnd)
  6049  002100  EC85  F016         	call	_GetTime	;wreg free
  6050  002104  6ED9               	movwf	fsr2l,c
  6051  002106  6ADA               	clrf	fsr2h,c
  6052  002108  0100               	movlb	0	; () banked
  6053  00210A  51B8               	movf	_soundTestEnd& (0+255),w,b
  6054  00210C  5CDE               	subwf	postinc2,w,c
  6055  00210E  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  6056  002110  58DE               	subwfb	postinc2,w,c
  6057  002112  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  6058  002114  58DE               	subwfb	postinc2,w,c
  6059  002116  50DE               	movf	postinc2,w,c
  6060  002118  0A80               	xorlw	128
  6061  00211A  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  6062  00211C  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  6063  00211E  0A80               	xorlw	128
  6064  002120  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  6065  002122  E303               	bnc	l5326
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;main.c: 529: {
  6069                           ;main.c: 530: StopPlaying();
  6070  002124  EC32  F016         	call	_StopPlaying	;wreg free
  6071  002128  D03A               	goto	l369
  6072  00212A                     l5326:
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;main.c: 532: }
  6076                           ;main.c: 533: }
  6077                           ;main.c: 534: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  6078  00212A  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6079  00212C  0D03               	mullw	3
  6080  00212E  50F3               	movf	prodl,w,c
  6081  002130  2470               	addwf	__playingSoundStartPosInEe,w,c
  6082  002132  6EA9               	movwf	4009,c	;volatile
  6083                           
  6084                           ; BSR set to: 0
  6085  002134  80A6               	bsf	4006,0,c	;volatile
  6086                           
  6087                           ; BSR set to: 0
  6088  002136  50A8               	movf	4008,w,c	;volatile
  6089  002138  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  6090  00213A  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  6091  00213C  ECD8  F015         	call	_millis	;wreg free
  6092  002140  500F               	movf	??_SoundPlayNextStep,w,c
  6093  002142  2407               	addwf	?_millis,w,c
  6094  002144  0100               	movlb	0	; () banked
  6095  002146  6FA0               	movwf	__playingEndMs& (0+255),b
  6096  002148  5010               	movf	??_SoundPlayNextStep+1,w,c
  6097  00214A  2008               	addwfc	?_millis+1,w,c
  6098  00214C  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  6099  00214E  0E00               	movlw	0
  6100  002150  2009               	addwfc	?_millis+2,w,c
  6101  002152  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  6102  002154  0E00               	movlw	0
  6103  002156  200A               	addwfc	?_millis+3,w,c
  6104  002158  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;main.c: 535: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  6108  00215A  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6109  00215C  0D03               	mullw	3
  6110  00215E  50F3               	movf	prodl,w,c
  6111  002160  2470               	addwf	__playingSoundStartPosInEe,w,c
  6112  002162  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  6113  002164  280F               	incf	??_SoundPlayNextStep,w,c
  6114  002166  6EA9               	movwf	4009,c	;volatile
  6115                           
  6116                           ; BSR set to: 0
  6117  002168  80A6               	bsf	4006,0,c	;volatile
  6118                           
  6119                           ; BSR set to: 0
  6120  00216A  CFA8 FFCB          	movff	4008,4043	;volatile
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;main.c: 536: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  6124  00216E  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6125  002170  0D03               	mullw	3
  6126  002172  50F3               	movf	prodl,w,c
  6127  002174  2470               	addwf	__playingSoundStartPosInEe,w,c
  6128  002176  0F02               	addlw	2
  6129  002178  6EA9               	movwf	4009,c	;volatile
  6130                           
  6131                           ; BSR set to: 0
  6132  00217A  80A6               	bsf	4006,0,c	;volatile
  6133                           
  6134                           ; BSR set to: 0
  6135  00217C  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;main.c: 537: _playingSoundCurPos++;
  6139  002180  2BD4               	incf	__playingSoundCurPos& (0+255),f,b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;main.c: 538: if(duration == 0 || PR2 == 0)
  6143  002182  5014               	movf	SoundPlayNextStep@duration,w,c
  6144  002184  E002               	bz	l372
  6145                           
  6146                           ; BSR set to: 0
  6147  002186  50CB               	movf	4043,w,c	;volatile
  6148  002188  E103               	bnz	l5350
  6149  00218A                     l372:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;main.c: 539: {
  6153                           ;main.c: 540: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6154  00218A  94CA               	bcf	4042,2,c	;volatile
  6155  00218C  8494               	bsf	3988,2,c	;volatile
  6156                           
  6157                           ;main.c: 541: return;
  6158  00218E  D007               	goto	l369
  6159  002190                     l5350:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;main.c: 542: }
  6163                           ;main.c: 543: SetBuzzerDuty(duration);
  6164  002190  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  6165  002194  6A08               	clrf	SetBuzzerDuty@dc+1,c
  6166  002196  EC64  F015         	call	_SetBuzzerDuty	;wreg free
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;main.c: 544: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  6170  00219A  9494               	bcf	3988,2,c	;volatile
  6171                           
  6172                           ; BSR set to: 0
  6173  00219C  84CA               	bsf	4042,2,c	;volatile
  6174  00219E                     l369:
  6175  00219E  FFFF               	dw	65535	; assembler added errata NOP
  6176  0021A0  0012               	return		;funcret
  6177  0021A2  FFFF               	dw	65535	; errata NOP
  6178  0021A4                     __end_of_SoundPlayNextStep:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           intcon	equ	0xFF2
  6187                           postinc0	equ	0xFEE
  6188                           wreg	equ	0xFE8
  6189                           postdec1	equ	0xFE5
  6190                           fsr1h	equ	0xFE2
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           plusw2	equ	0xFDB
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _StopPlaying *****************
  6201 ;; Defined at:
  6202 ;;		line 515 in file "main.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : F/1
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6216 ;;      Params:         0       0       0       0       0       0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0
  6218 ;;      Temps:          2       0       0       0       0       0       0
  6219 ;;      Totals:         2       0       0       0       0       0       0
  6220 ;;Total ram usage:        2 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    2
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_SoundPlayNextStep
  6227 ;;		_ResetEvent
  6228 ;;		_main
  6229 ;;		_CommandSetStatusLed
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text31
  6234  002C64                     __ptext31:
  6235                           	opt stack 0
  6236  002C64                     _StopPlaying:
  6237                           	opt stack 25
  6238                           
  6239                           ;incstack = 0
  6240  002C64  FFFF               	dw	65535
  6241                           
  6242                           ;main.c: 517: _isSoundPlaying = 0;
  6243  002C66  0100               	movlb	0	; () banked
  6244  002C68  6BD2               	clrf	__isSoundPlaying& (0+255),b
  6245                           
  6246                           ;main.c: 518: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6247  002C6A  94CA               	bcf	4042,2,c	;volatile
  6248  002C6C  8494               	bsf	3988,2,c	;volatile
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;main.c: 520: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  6252  002C6E  5071               	movf	__soundCount,w,c
  6253  002C70  6E07               	movwf	??_StopPlaying& (0+255),c
  6254  002C72  51D2               	movf	__isSoundPlaying& (0+255),w,b
  6255  002C74  0101               	movlb	1	; () banked
  6256  002C76  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  6257  002C78  C007  F1B7         	movff	??_StopPlaying,__MODBUSInputRegs+13
  6258                           
  6259                           ; BSR set to: 1
  6260  002C7C  0012               	return		;funcret
  6261  002C7E  FFFF               	dw	65535	; errata NOP
  6262  002C80                     __end_of_StopPlaying:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           postdec1	equ	0xFE5
  6274                           fsr1h	equ	0xFE2
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           plusw2	equ	0xFDB
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _SetBuzzerDuty *****************
  6285 ;; Defined at:
  6286 ;;		line 393 in file "main.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  dc              2    6[COMRAM] unsigned int 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : F/0
  6297 ;;		On exit  : F/0
  6298 ;;		Unchanged: F/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6300 ;;      Params:         2       0       0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0
  6302 ;;      Temps:          2       0       0       0       0       0       0
  6303 ;;      Totals:         4       0       0       0       0       0       0
  6304 ;;Total ram usage:        4 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    2
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_SoundPlayNextStep
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text32
  6315  002AC8                     __ptext32:
  6316                           	opt stack 0
  6317  002AC8                     _SetBuzzerDuty:
  6318                           	opt stack 25
  6319                           
  6320                           ; BSR set to: 1
  6321                           ;incstack = 0
  6322  002AC8  FFFF               	dw	65535
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;main.c: 398: CCP1CONbits.DC1B = dc & 0x03;
  6326  002ACA  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6327  002ACE  0E03               	movlw	3
  6328  002AD0  1609               	andwf	??_SetBuzzerDuty,f,c
  6329  002AD2  3A09               	swapf	??_SetBuzzerDuty,f,c
  6330  002AD4  50BD               	movf	4029,w,c	;volatile
  6331  002AD6  1809               	xorwf	??_SetBuzzerDuty,w,c
  6332  002AD8  0BCF               	andlw	-49
  6333  002ADA  1809               	xorwf	??_SetBuzzerDuty,w,c
  6334  002ADC  6EBD               	movwf	4029,c	;volatile
  6335                           
  6336                           ;main.c: 402: CCPR1L = (uint8_t)(dc >> 2);
  6337  002ADE  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6338  002AE2  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  6339  002AE6  90D8               	bcf	status,0,c
  6340  002AE8  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6341  002AEA  3209               	rrcf	??_SetBuzzerDuty,f,c
  6342  002AEC  90D8               	bcf	status,0,c
  6343  002AEE  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6344  002AF0  3209               	rrcf	??_SetBuzzerDuty,f,c
  6345  002AF2  5009               	movf	??_SetBuzzerDuty,w,c
  6346  002AF4  6EBE               	movwf	4030,c	;volatile
  6347                           
  6348                           ; BSR set to: 0
  6349  002AF6  0012               	return		;funcret
  6350  002AF8  FFFF               	dw	65535	; errata NOP
  6351  002AFA                     __end_of_SetBuzzerDuty:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           postdec1	equ	0xFE5
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           plusw2	equ	0xFDB
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _GetTime *****************
  6374 ;; Defined at:
  6375 ;;		line 207 in file "user.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      PTR long 
  6382 ;; Registers used:
  6383 ;;		wreg
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6389 ;;      Params:         2       0       0       0       0       0       0
  6390 ;;      Locals:         0       0       0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0
  6392 ;;      Totals:         2       0       0       0       0       0       0
  6393 ;;Total ram usage:        2 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    2
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_SoundPlayNextStep
  6400 ;;		_PlaySound
  6401 ;;		_ProcessDiary
  6402 ;;		_main
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text33
  6407  002D0A                     __ptext33:
  6408                           	opt stack 0
  6409  002D0A                     _GetTime:
  6410                           	opt stack 25
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;incstack = 0
  6414  002D0A  FFFF               	dw	65535
  6415                           
  6416                           ;user.c: 209: return &currentTime;
  6417  002D0C  0EDB               	movlw	_currentTime& (0+255)
  6418  002D0E  0012               	return		;funcret
  6419  002D10  FFFF               	dw	65535	; errata NOP
  6420  002D12                     __end_of_GetTime:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           postinc0	equ	0xFEE
  6430                           wreg	equ	0xFE8
  6431                           postdec1	equ	0xFE5
  6432                           fsr1h	equ	0xFE2
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           plusw2	equ	0xFDB
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _LoadNextEvent *****************
  6443 ;; Defined at:
  6444 ;;		line 612 in file "main.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  v1              1   11[COMRAM] unsigned char 
  6449 ;;  totalMinutes    2    9[COMRAM] unsigned int 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6459 ;;      Params:         0       0       0       0       0       0       0
  6460 ;;      Locals:         3       0       0       0       0       0       0
  6461 ;;      Temps:          2       0       0       0       0       0       0
  6462 ;;      Totals:         5       0       0       0       0       0       0
  6463 ;;Total ram usage:        5 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    3
  6466 ;; This function calls:
  6467 ;;		_getTotalMinutes
  6468 ;; This function is called by:
  6469 ;;		_InitFromEeprom
  6470 ;;		_ProcessDiary
  6471 ;;		_SetTimeFromRegs
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           	psect	text34
  6476  001A0C                     __ptext34:
  6477                           	opt stack 0
  6478  001A0C                     _LoadNextEvent:
  6479                           	opt stack 24
  6480                           
  6481                           ;incstack = 0
  6482  001A0C  FFFF               	dw	65535
  6483                           
  6484                           ;main.c: 614: if(eventCount == 0)
  6485  001A0E  0100               	movlb	0	; () banked
  6486  001A10  51DA               	movf	_eventCount& (0+255),w,b
  6487  001A12  E07D               	bz	l393
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;main.c: 617: uint16_t totalMinutes;
  6491                           ;main.c: 620: if(!getTotalMinutes(&totalMinutes))
  6492  001A14  0E0A               	movlw	LoadNextEvent@totalMinutes& (0+255)
  6493  001A16  EC00  F016         	call	_getTotalMinutes
  6494  001A1A  0900               	iorlw	0
  6495  001A1C  E078               	bz	l393
  6496  001A1E                     l5264:
  6497                           
  6498                           ;main.c: 631: {
  6499                           ;main.c: 632: if(curEventNum == 0xff)
  6500  001A1E  2875               	incf	_curEventNum,w,c
  6501  001A20  E102               	bnz	l5268
  6502                           
  6503                           ;main.c: 633: curEventNum = 0;
  6504  001A22  6A75               	clrf	_curEventNum,c
  6505  001A24  D001               	goto	l5270
  6506  001A26                     l5268:
  6507                           
  6508                           ;main.c: 634: else
  6509                           ;main.c: 635: curEventNum++;
  6510  001A26  2A75               	incf	_curEventNum,f,c
  6511  001A28                     l5270:
  6512  001A28  FFFF               	dw	65535	; assembler added errata NOP
  6513                           
  6514                           ;main.c: 636: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6515  001A2A  5076               	movf	_currentAlarmedEventNum,w,c
  6516  001A2C  6E08               	movwf	??_LoadNextEvent& (0+255),c
  6517  001A2E  5075               	movf	_curEventNum,w,c
  6518  001A30  0101               	movlb	1	; () banked
  6519  001A32  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6520  001A34  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6521                           
  6522                           ; BSR set to: 1
  6523                           ;main.c: 637: if(curEventNum >= eventCount)
  6524  001A38  0100               	movlb	0	; () banked
  6525  001A3A  51DA               	movf	_eventCount& (0+255),w,b
  6526  001A3C  5C75               	subwf	_curEventNum,w,c
  6527  001A3E  E307               	bnc	l5276
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;main.c: 638: {
  6531                           ;main.c: 639: curEventNum = 0xff;
  6532  001A40  6875               	setf	_curEventNum,c
  6533                           
  6534                           ;main.c: 640: curEventTotalMinutes = 0;
  6535  001A42  6BCA               	clrf	_curEventTotalMinutes& (0+255),b
  6536  001A44  6BCB               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  6537                           
  6538                           ;main.c: 641: _MODBUSInputRegs[3] = (((uint16_t)0<<8)|0);
  6539  001A46  0101               	movlb	1	; () banked
  6540  001A48  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  6541  001A4A  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  6542                           
  6543                           ;main.c: 642: return;
  6544  001A4C  D060               	goto	l393
  6545  001A4E                     l5276:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;main.c: 643: }
  6549                           ;main.c: 654: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6550  001A4E  5075               	movf	_curEventNum,w,c
  6551  001A50  0D02               	mullw	2
  6552  001A52  50F3               	movf	prodl,w,c
  6553  001A54  0F13               	addlw	19
  6554  001A56  6EA9               	movwf	4009,c	;volatile
  6555                           
  6556                           ; BSR set to: 0
  6557  001A58  80A6               	bsf	4006,0,c	;volatile
  6558                           
  6559                           ; BSR set to: 0
  6560  001A5A  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  6561                           
  6562                           ;main.c: 655: curEventTotalMinutes = (v1 & 0x1F) * 60;
  6563  001A5E  500C               	movf	LoadNextEvent@v1,w,c
  6564  001A60  0B1F               	andlw	31
  6565  001A62  0D3C               	mullw	60
  6566  001A64  CFF3 F0CA          	movff	prodl,_curEventTotalMinutes
  6567  001A68  CFF4 F0CB          	movff	prodh,_curEventTotalMinutes+1
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;main.c: 657: _nextEventPlayDuration = (v1 >> 5);
  6571  001A6C  380C               	swapf	LoadNextEvent@v1,w,c
  6572  001A6E  42E8               	rrncf	wreg,f,c
  6573  001A70  0B07               	andlw	7
  6574  001A72  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6575  001A74  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6576                           
  6577                           ;main.c: 658: switch(_nextEventPlayDuration)
  6578  001A76  D01A               	goto	l5298
  6579  001A78                     l5284:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;main.c: 661: _nextEventPlayDuration = 10;
  6583  001A78  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6584  001A7A  0E0A               	movlw	10
  6585  001A7C  D011               	goto	L7
  6586  001A7E                     l5286:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;main.c: 664: _nextEventPlayDuration = 30;
  6590  001A7E  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6591  001A80  0E1E               	movlw	30
  6592  001A82  D00E               	goto	L7
  6593  001A84                     l5288:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;main.c: 667: _nextEventPlayDuration = 60;
  6597  001A84  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6598  001A86  0E3C               	movlw	60
  6599  001A88  D00B               	goto	L7
  6600  001A8A                     l5290:
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;main.c: 670: _nextEventPlayDuration = 60*5;
  6604  001A8A  0E01               	movlw	1
  6605  001A8C  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6606  001A8E  0E2C               	movlw	44
  6607  001A90  D007               	goto	L7
  6608  001A92                     l5292:
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;main.c: 673: _nextEventPlayDuration = 60*12;
  6612  001A92  0E02               	movlw	2
  6613  001A94  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6614  001A96  0ED0               	movlw	208
  6615  001A98  D003               	goto	L7
  6616  001A9A                     l5294:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 676: _nextEventPlayDuration = 60*30;
  6620  001A9A  0E07               	movlw	7
  6621  001A9C  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6622  001A9E  0E08               	movlw	8
  6623  001AA0                     L7:
  6624  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  6625  001AA2  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6626                           
  6627                           ;main.c: 677: break;
  6628  001AA4  D019               	goto	l5300
  6629  001AA6                     l407:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;main.c: 679: _nextEventPlayDuration = 65535;
  6633  001AA6  69C2               	setf	__nextEventPlayDuration& (0+255),b
  6634  001AA8  69C3               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6635                           
  6636                           ;main.c: 680: break;
  6637  001AAA  D016               	goto	l5300
  6638  001AAC                     l5298:
  6639  001AAC  FFFF               	dw	65535	; assembler added errata NOP
  6640                           
  6641                           ; BSR set to: 0
  6642  001AAE  C0C2  F008         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6643  001AB2  C0C3  F009         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6644                           
  6645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6646                           ; Switch size 1, requested type "speed"
  6647                           ; Number of cases is 1, Range of values is 0 to 0
  6648                           ; switch strategies available:
  6649                           ; Name         Instructions Cycles
  6650                           ; simple_byte            4     3 (average)
  6651                           ;	Chosen strategy is simple_byte
  6652  001AB6  5009               	movf	??_LoadNextEvent+1,w,c
  6653  001AB8  E10F               	bnz	l5300
  6654                           
  6655                           ; BSR set to: 0
  6656                           ; Switch size 1, requested type "speed"
  6657                           ; Number of cases is 7, Range of values is 1 to 7
  6658                           ; switch strategies available:
  6659                           ; Name         Instructions Cycles
  6660                           ; simple_byte           22    12 (average)
  6661                           ;	Chosen strategy is simple_byte
  6662  001ABA  5008               	movf	??_LoadNextEvent,w,c
  6663  001ABC  0A01               	xorlw	1	; case 1
  6664  001ABE  E0DC               	bz	l5284
  6665  001AC0  0A03               	xorlw	3	; case 2
  6666  001AC2  E0DD               	bz	l5286
  6667  001AC4  0A01               	xorlw	1	; case 3
  6668  001AC6  E0DE               	bz	l5288
  6669  001AC8  0A07               	xorlw	7	; case 4
  6670  001ACA  E0DF               	bz	l5290
  6671  001ACC  0A01               	xorlw	1	; case 5
  6672  001ACE  E0E1               	bz	l5292
  6673  001AD0  0A03               	xorlw	3	; case 6
  6674  001AD2  E0E3               	bz	l5294
  6675  001AD4  0A01               	xorlw	1	; case 7
  6676  001AD6  E0E7               	bz	l407
  6677  001AD8                     l5300:
  6678  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 682: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  6682  001ADA  5075               	movf	_curEventNum,w,c
  6683  001ADC  0D02               	mullw	2
  6684  001ADE  50F3               	movf	prodl,w,c
  6685  001AE0  0F14               	addlw	20
  6686  001AE2  6EA9               	movwf	4009,c	;volatile
  6687                           
  6688                           ; BSR set to: 0
  6689  001AE4  80A6               	bsf	4006,0,c	;volatile
  6690                           
  6691                           ; BSR set to: 0
  6692  001AE6  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;main.c: 683: curEventTotalMinutes += v1 & 0x3F;
  6696  001AEA  500C               	movf	LoadNextEvent@v1,w,c
  6697  001AEC  0B3F               	andlw	63
  6698  001AEE  27CA               	addwf	_curEventTotalMinutes& (0+255),f,b
  6699  001AF0  0E00               	movlw	0
  6700  001AF2  23CB               	addwfc	(_curEventTotalMinutes+1)& (0+255),f,b
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;main.c: 684: _nextEventSoundId = v1 >> 6;
  6704  001AF4  440C               	rlncf	LoadNextEvent@v1,w,c
  6705  001AF6  46E8               	rlncf	wreg,f,c
  6706  001AF8  0B03               	andlw	3
  6707  001AFA  6FD3               	movwf	__nextEventSoundId& (0+255),b
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;main.c: 686: }while(curEventTotalMinutes <= totalMinutes);
  6711  001AFC  51CA               	movf	_curEventTotalMinutes& (0+255),w,b
  6712  001AFE  5C0A               	subwf	LoadNextEvent@totalMinutes,w,c
  6713  001B00  51CB               	movf	(_curEventTotalMinutes+1)& (0+255),w,b
  6714  001B02  580B               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  6715  001B04  E28C               	bc	l5264
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 687: _MODBUSInputRegs[3] = curEventTotalMinutes;
  6719  001B06  C0CA  F1B0         	movff	_curEventTotalMinutes,__MODBUSInputRegs+6
  6720  001B0A  C0CB  F1B1         	movff	_curEventTotalMinutes+1,__MODBUSInputRegs+7
  6721  001B0E                     l393:
  6722  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  6723  001B10  0012               	return		;funcret
  6724  001B12  FFFF               	dw	65535	; errata NOP
  6725  001B14                     __end_of_LoadNextEvent:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           postinc0	equ	0xFEE
  6735                           wreg	equ	0xFE8
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           postdec2	equ	0xFDD
  6742                           plusw2	equ	0xFDB
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _getTotalMinutes *****************
  6748 ;; Defined at:
  6749 ;;		line 259 in file "interrupts.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  totalMinutes    1    wreg     PTR unsigned int 
  6752 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  totalMinutes    1    6[COMRAM] PTR unsigned int 
  6755 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      unsigned char 
  6758 ;; Registers used:
  6759 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : E/1
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6765 ;;      Params:         0       0       0       0       0       0       0
  6766 ;;      Locals:         1       0       0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0
  6768 ;;      Totals:         1       0       0       0       0       0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    2
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_LoadNextEvent
  6776 ;;		_ProcessDiary
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text35
  6781  002C00                     __ptext35:
  6782                           	opt stack 0
  6783  002C00                     _getTotalMinutes:
  6784                           	opt stack 24
  6785                           
  6786                           ;incstack = 0
  6787  002C00  FFFF               	dw	65535
  6788                           
  6789                           ;getTotalMinutes@totalMinutes stored from wreg
  6790  002C02  6E07               	movwf	getTotalMinutes@totalMinutes,c
  6791                           
  6792                           ;interrupts.c: 261: if(globalHours == 0xFF)
  6793  002C04  2877               	incf	_globalHours,w,c	;volatile
  6794  002C06  E102               	bnz	l109
  6795                           
  6796                           ;interrupts.c: 262: return 0;
  6797  002C08  0E00               	movlw	0
  6798  002C0A  D00A               	goto	l110
  6799  002C0C                     l109:
  6800                           
  6801                           ;interrupts.c: 263: (INTCONbits.GIE = 0);
  6802  002C0C  9EF2               	bcf	intcon,7,c	;volatile
  6803                           
  6804                           ;interrupts.c: 264: *totalMinutes = _totalMinutesFromDayStart;
  6805  002C0E  5007               	movf	getTotalMinutes@totalMinutes,w,c
  6806  002C10  6ED9               	movwf	fsr2l,c
  6807  002C12  6ADA               	clrf	fsr2h,c
  6808  002C14  C0C4  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  6809  002C18  C0C5  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  6810                           
  6811                           ;interrupts.c: 265: (INTCONbits.GIE = 1);
  6812  002C1C  8EF2               	bsf	intcon,7,c	;volatile
  6813                           
  6814                           ;interrupts.c: 266: return 1;
  6815  002C1E  0E01               	movlw	1
  6816  002C20                     l110:
  6817  002C20  FFFF               	dw	65535	; assembler added errata NOP
  6818  002C22  0012               	return		;funcret
  6819  002C24  FFFF               	dw	65535	; errata NOP
  6820  002C26                     __end_of_getTotalMinutes:
  6821                           	opt stack 0
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodh	equ	0xFF4
  6827                           prodl	equ	0xFF3
  6828                           intcon	equ	0xFF2
  6829                           postinc0	equ	0xFEE
  6830                           wreg	equ	0xFE8
  6831                           postdec1	equ	0xFE5
  6832                           fsr1h	equ	0xFE2
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           plusw2	equ	0xFDB
  6838                           fsr2h	equ	0xFDA
  6839                           fsr2l	equ	0xFD9
  6840                           status	equ	0xFD8
  6841                           
  6842 ;; *************** function _LightLed *****************
  6843 ;; Defined at:
  6844 ;;		line 304 in file "main.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  ledNum          1    wreg     unsigned char 
  6847 ;;  ledState        1    6[COMRAM] enum E2430
  6848 ;;  blink           1    7[COMRAM] unsigned char 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;  ledNum          1   11[COMRAM] unsigned char 
  6851 ;;  statusShift     1   13[COMRAM] unsigned char 
  6852 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/1
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6862 ;;      Params:         2       0       0       0       0       0       0
  6863 ;;      Locals:         3       0       0       0       0       0       0
  6864 ;;      Temps:          3       0       0       0       0       0       0
  6865 ;;      Totals:         8       0       0       0       0       0       0
  6866 ;;Total ram usage:        8 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    2
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_ResetEvent
  6873 ;;		_ProcessDiary
  6874 ;;		_io_poll
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text36
  6879  000980                     __ptext36:
  6880                           	opt stack 0
  6881  000980                     _LightLed:
  6882                           	opt stack 27
  6883                           
  6884                           ;incstack = 0
  6885  000980  FFFF               	dw	65535
  6886                           
  6887                           ;LightLed@ledNum stored from wreg
  6888  000982  6E0C               	movwf	LightLed@ledNum,c
  6889                           
  6890                           ;main.c: 306: if(ledNum < 1 || ledNum > 60)
  6891  000984  500C               	movf	LightLed@ledNum,w,c
  6892  000986  E101 D171          	bz	l259
  6893  00098A  0E3C               	movlw	60
  6894  00098C  640C               	cpfsgt	LightLed@ledNum,c
  6895  00098E  D001               	goto	l5486
  6896  000990  D16D               	goto	l259
  6897  000992                     l5486:
  6898  000992  FFFF               	dw	65535	; assembler added errata NOP
  6899                           
  6900                           ;main.c: 308: ledNum--;
  6901  000994  060C               	decf	LightLed@ledNum,f,c
  6902                           
  6903                           ;main.c: 310: uint8_t ststusIndex = ledNum >> 2;
  6904  000996  400C               	rrncf	LightLed@ledNum,w,c
  6905  000998  42E8               	rrncf	wreg,f,c
  6906  00099A  0B3F               	andlw	63
  6907  00099C  6E0D               	movwf	LightLed@ststusIndex,c
  6908                           
  6909                           ;main.c: 311: uint8_t statusShift = (ledNum & 0x03) << 1;
  6910  00099E  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6911  0009A2  0E03               	movlw	3
  6912  0009A4  1609               	andwf	??_LightLed,f,c
  6913  0009A6  90D8               	bcf	status,0,c
  6914  0009A8  3409               	rlcf	??_LightLed,w,c
  6915  0009AA  6E0E               	movwf	LightLed@statusShift,c
  6916                           
  6917                           ;main.c: 313: switch(ledState)
  6918  0009AC  D153               	goto	l5526
  6919  0009AE                     l5492:
  6920                           
  6921                           ;main.c: 316: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6922  0009AE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6923  0009B2  2A09               	incf	??_LightLed,f,c
  6924  0009B4  0E01               	movlw	1
  6925  0009B6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6926  0009B8  2A09               	incf	??_LightLed,f,c
  6927  0009BA  D003               	goto	u4504
  6928  0009BC                     u4505:
  6929  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  6930  0009BE  90D8               	bcf	status,0,c
  6931  0009C0  360A               	rlcf	??_LightLed+1,f,c
  6932  0009C2                     u4504:
  6933  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  6934  0009C4  2E09               	decfsz	??_LightLed,f,c
  6935  0009C6  D7FA               	goto	u4505
  6936  0009C8  1C0A               	comf	??_LightLed+1,w,c
  6937  0009CA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6938  0009CC  500D               	movf	LightLed@ststusIndex,w,c
  6939  0009CE  0F90               	addlw	low _ledStatuses
  6940  0009D0  6ED9               	movwf	fsr2l,c
  6941  0009D2  6ADA               	clrf	fsr2h,c
  6942  0009D4  500B               	movf	??_LightLed+2,w,c
  6943  0009D6  16DF               	andwf	indf2,f,c
  6944                           
  6945                           ;main.c: 317: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6946  0009D8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6947  0009DC  0E01               	movlw	1
  6948  0009DE  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6949  0009E0  2A09               	incf	??_LightLed,f,c
  6950  0009E2  D003               	goto	u4514
  6951  0009E4                     u4515:
  6952  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  6953  0009E6  90D8               	bcf	status,0,c
  6954  0009E8  360A               	rlcf	??_LightLed+1,f,c
  6955  0009EA                     u4514:
  6956  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  6957  0009EC  2E09               	decfsz	??_LightLed,f,c
  6958  0009EE  D7FA               	goto	u4515
  6959  0009F0  1C0A               	comf	??_LightLed+1,w,c
  6960  0009F2  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6961  0009F4  500D               	movf	LightLed@ststusIndex,w,c
  6962  0009F6  0F90               	addlw	low _ledStatuses
  6963  0009F8  6ED9               	movwf	fsr2l,c
  6964  0009FA  6ADA               	clrf	fsr2h,c
  6965  0009FC  500B               	movf	??_LightLed+2,w,c
  6966  0009FE  16DF               	andwf	indf2,f,c
  6967                           
  6968                           ;main.c: 318: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6969  000A00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6970  000A04  2A09               	incf	??_LightLed,f,c
  6971  000A06  0E01               	movlw	1
  6972  000A08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6973  000A0A  2A09               	incf	??_LightLed,f,c
  6974  000A0C  D003               	goto	u4524
  6975  000A0E                     u4525:
  6976  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  6977  000A10  90D8               	bcf	status,0,c
  6978  000A12  360A               	rlcf	??_LightLed+1,f,c
  6979  000A14                     u4524:
  6980  000A14  FFFF               	dw	65535	; assembler added errata NOP
  6981  000A16  2E09               	decfsz	??_LightLed,f,c
  6982  000A18  D7FA               	goto	u4525
  6983  000A1A  1C0A               	comf	??_LightLed+1,w,c
  6984  000A1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6985  000A1E  500D               	movf	LightLed@ststusIndex,w,c
  6986  000A20  0F80               	addlw	low _ledBlink
  6987  000A22  6ED9               	movwf	fsr2l,c
  6988  000A24  6ADA               	clrf	fsr2h,c
  6989  000A26  500B               	movf	??_LightLed+2,w,c
  6990  000A28  16DF               	andwf	indf2,f,c
  6991                           
  6992                           ;main.c: 319: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6993  000A2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6994  000A2E  0E01               	movlw	1
  6995  000A30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6996  000A32  2A09               	incf	??_LightLed,f,c
  6997  000A34  D003               	goto	u4534
  6998  000A36                     u4535:
  6999  000A36  FFFF               	dw	65535	; assembler added errata NOP
  7000  000A38  90D8               	bcf	status,0,c
  7001  000A3A  360A               	rlcf	??_LightLed+1,f,c
  7002  000A3C                     u4534:
  7003  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  7004  000A3E  2E09               	decfsz	??_LightLed,f,c
  7005  000A40  D7FA               	goto	u4535
  7006  000A42  D05F               	goto	L8
  7007  000A44                     l5494:
  7008                           
  7009                           ;main.c: 322: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7010  000A44  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7011  000A48  2A09               	incf	??_LightLed,f,c
  7012  000A4A  0E01               	movlw	1
  7013  000A4C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7014  000A4E  2A09               	incf	??_LightLed,f,c
  7015  000A50  D003               	goto	u4544
  7016  000A52                     u4545:
  7017  000A52  FFFF               	dw	65535	; assembler added errata NOP
  7018  000A54  90D8               	bcf	status,0,c
  7019  000A56  360A               	rlcf	??_LightLed+1,f,c
  7020  000A58                     u4544:
  7021  000A58  FFFF               	dw	65535	; assembler added errata NOP
  7022  000A5A  2E09               	decfsz	??_LightLed,f,c
  7023  000A5C  D7FA               	goto	u4545
  7024  000A5E  500D               	movf	LightLed@ststusIndex,w,c
  7025  000A60  0F90               	addlw	low _ledStatuses
  7026  000A62  6ED9               	movwf	fsr2l,c
  7027  000A64  6ADA               	clrf	fsr2h,c
  7028  000A66  500A               	movf	??_LightLed+1,w,c
  7029  000A68  12DF               	iorwf	indf2,f,c
  7030                           
  7031                           ;main.c: 323: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7032  000A6A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7033  000A6E  0E01               	movlw	1
  7034  000A70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7035  000A72  2A09               	incf	??_LightLed,f,c
  7036  000A74  D003               	goto	u4554
  7037  000A76                     u4555:
  7038  000A76  FFFF               	dw	65535	; assembler added errata NOP
  7039  000A78  90D8               	bcf	status,0,c
  7040  000A7A  360A               	rlcf	??_LightLed+1,f,c
  7041  000A7C                     u4554:
  7042  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  7043  000A7E  2E09               	decfsz	??_LightLed,f,c
  7044  000A80  D7FA               	goto	u4555
  7045  000A82  1C0A               	comf	??_LightLed+1,w,c
  7046  000A84  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7047  000A86  500D               	movf	LightLed@ststusIndex,w,c
  7048  000A88  0F90               	addlw	low _ledStatuses
  7049  000A8A  6ED9               	movwf	fsr2l,c
  7050  000A8C  6ADA               	clrf	fsr2h,c
  7051  000A8E  500B               	movf	??_LightLed+2,w,c
  7052  000A90  16DF               	andwf	indf2,f,c
  7053                           
  7054                           ;main.c: 324: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7055  000A92  5008               	movf	LightLed@blink,w,c
  7056  000A94  E014               	bz	l5500
  7057  000A96  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7058  000A9A  2A09               	incf	??_LightLed,f,c
  7059  000A9C  0E01               	movlw	1
  7060  000A9E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7061  000AA0  2A09               	incf	??_LightLed,f,c
  7062  000AA2  D003               	goto	u4574
  7063  000AA4                     u4575:
  7064  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  7065  000AA6  90D8               	bcf	status,0,c
  7066  000AA8  360A               	rlcf	??_LightLed+1,f,c
  7067  000AAA                     u4574:
  7068  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  7069  000AAC  2E09               	decfsz	??_LightLed,f,c
  7070  000AAE  D7FA               	goto	u4575
  7071  000AB0  500D               	movf	LightLed@ststusIndex,w,c
  7072  000AB2  0F80               	addlw	low _ledBlink
  7073  000AB4  6ED9               	movwf	fsr2l,c
  7074  000AB6  6ADA               	clrf	fsr2h,c
  7075  000AB8  500A               	movf	??_LightLed+1,w,c
  7076  000ABA  12DF               	iorwf	indf2,f,c
  7077  000ABC  D015               	goto	l267
  7078  000ABE                     l5500:
  7079  000ABE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7080  000AC2  2A09               	incf	??_LightLed,f,c
  7081  000AC4  0E01               	movlw	1
  7082  000AC6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7083  000AC8  2A09               	incf	??_LightLed,f,c
  7084  000ACA  D003               	goto	u4584
  7085  000ACC                     u4585:
  7086  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  7087  000ACE  90D8               	bcf	status,0,c
  7088  000AD0  360A               	rlcf	??_LightLed+1,f,c
  7089  000AD2                     u4584:
  7090  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  7091  000AD4  2E09               	decfsz	??_LightLed,f,c
  7092  000AD6  D7FA               	goto	u4585
  7093  000AD8  1C0A               	comf	??_LightLed+1,w,c
  7094  000ADA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7095  000ADC  500D               	movf	LightLed@ststusIndex,w,c
  7096  000ADE  0F80               	addlw	low _ledBlink
  7097  000AE0  6ED9               	movwf	fsr2l,c
  7098  000AE2  6ADA               	clrf	fsr2h,c
  7099  000AE4  500B               	movf	??_LightLed+2,w,c
  7100  000AE6  16DF               	andwf	indf2,f,c
  7101  000AE8                     l267:
  7102  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  7103                           
  7104                           ;main.c: 325: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7105  000AEA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7106  000AEE  0E01               	movlw	1
  7107  000AF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7108  000AF2  2A09               	incf	??_LightLed,f,c
  7109  000AF4  D003               	goto	u4594
  7110  000AF6                     u4595:
  7111  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  7112  000AF8  90D8               	bcf	status,0,c
  7113  000AFA  360A               	rlcf	??_LightLed+1,f,c
  7114  000AFC                     u4594:
  7115  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  7116  000AFE  2E09               	decfsz	??_LightLed,f,c
  7117  000B00  D7FA               	goto	u4595
  7118  000B02                     L8:
  7119  000B02  FFFF               	dw	65535	; assembler added errata NOP
  7120  000B04  1C0A               	comf	??_LightLed+1,w,c
  7121  000B06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7122  000B08  500D               	movf	LightLed@ststusIndex,w,c
  7123  000B0A  0F80               	addlw	low _ledBlink
  7124  000B0C  6ED9               	movwf	fsr2l,c
  7125  000B0E  6ADA               	clrf	fsr2h,c
  7126  000B10  500B               	movf	??_LightLed+2,w,c
  7127  000B12  16DF               	andwf	indf2,f,c
  7128                           
  7129                           ;main.c: 326: break;
  7130  000B14  D0AB               	goto	l259
  7131  000B16                     l5502:
  7132                           
  7133                           ;main.c: 328: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7134  000B16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7135  000B1A  2A09               	incf	??_LightLed,f,c
  7136  000B1C  0E01               	movlw	1
  7137  000B1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7138  000B20  2A09               	incf	??_LightLed,f,c
  7139  000B22  D003               	goto	u4604
  7140  000B24                     u4605:
  7141  000B24  FFFF               	dw	65535	; assembler added errata NOP
  7142  000B26  90D8               	bcf	status,0,c
  7143  000B28  360A               	rlcf	??_LightLed+1,f,c
  7144  000B2A                     u4604:
  7145  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  7146  000B2C  2E09               	decfsz	??_LightLed,f,c
  7147  000B2E  D7FA               	goto	u4605
  7148  000B30  1C0A               	comf	??_LightLed+1,w,c
  7149  000B32  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7150  000B34  500D               	movf	LightLed@ststusIndex,w,c
  7151  000B36  0F90               	addlw	low _ledStatuses
  7152  000B38  6ED9               	movwf	fsr2l,c
  7153  000B3A  6ADA               	clrf	fsr2h,c
  7154  000B3C  500B               	movf	??_LightLed+2,w,c
  7155  000B3E  16DF               	andwf	indf2,f,c
  7156                           
  7157                           ;main.c: 329: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7158  000B40  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7159  000B44  0E01               	movlw	1
  7160  000B46  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7161  000B48  2A09               	incf	??_LightLed,f,c
  7162  000B4A  D003               	goto	u4614
  7163  000B4C                     u4615:
  7164  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  7165  000B4E  90D8               	bcf	status,0,c
  7166  000B50  360A               	rlcf	??_LightLed+1,f,c
  7167  000B52                     u4614:
  7168  000B52  FFFF               	dw	65535	; assembler added errata NOP
  7169  000B54  2E09               	decfsz	??_LightLed,f,c
  7170  000B56  D7FA               	goto	u4615
  7171  000B58  500D               	movf	LightLed@ststusIndex,w,c
  7172  000B5A  0F90               	addlw	low _ledStatuses
  7173  000B5C  6ED9               	movwf	fsr2l,c
  7174  000B5E  6ADA               	clrf	fsr2h,c
  7175  000B60  500A               	movf	??_LightLed+1,w,c
  7176  000B62  12DF               	iorwf	indf2,f,c
  7177                           
  7178                           ;main.c: 330: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7179  000B64  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7180  000B68  2A09               	incf	??_LightLed,f,c
  7181  000B6A  0E01               	movlw	1
  7182  000B6C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7183  000B6E  2A09               	incf	??_LightLed,f,c
  7184  000B70  D003               	goto	u4624
  7185  000B72                     u4625:
  7186  000B72  FFFF               	dw	65535	; assembler added errata NOP
  7187  000B74  90D8               	bcf	status,0,c
  7188  000B76  360A               	rlcf	??_LightLed+1,f,c
  7189  000B78                     u4624:
  7190  000B78  FFFF               	dw	65535	; assembler added errata NOP
  7191  000B7A  2E09               	decfsz	??_LightLed,f,c
  7192  000B7C  D7FA               	goto	u4625
  7193  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  7194  000B80  1C0A               	comf	??_LightLed+1,w,c
  7195  000B82  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7196  000B84  500D               	movf	LightLed@ststusIndex,w,c
  7197  000B86  0F80               	addlw	low _ledBlink
  7198  000B88  6ED9               	movwf	fsr2l,c
  7199  000B8A  6ADA               	clrf	fsr2h,c
  7200  000B8C  500B               	movf	??_LightLed+2,w,c
  7201  000B8E  16DF               	andwf	indf2,f,c
  7202                           
  7203                           ;main.c: 331: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7204  000B90  5008               	movf	LightLed@blink,w,c
  7205  000B92  E0AA               	bz	l267
  7206  000B94                     l5506:
  7207  000B94  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7208  000B98  0E01               	movlw	1
  7209  000B9A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7210  000B9C  2A09               	incf	??_LightLed,f,c
  7211  000B9E  D003               	goto	u4644
  7212  000BA0                     u4645:
  7213  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7214  000BA2  90D8               	bcf	status,0,c
  7215  000BA4  360A               	rlcf	??_LightLed+1,f,c
  7216  000BA6                     u4644:
  7217  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  7218  000BA8  2E09               	decfsz	??_LightLed,f,c
  7219  000BAA  D7FA               	goto	u4645
  7220  000BAC  500D               	movf	LightLed@ststusIndex,w,c
  7221  000BAE  0F80               	addlw	low _ledBlink
  7222  000BB0  6ED9               	movwf	fsr2l,c
  7223  000BB2  6ADA               	clrf	fsr2h,c
  7224  000BB4  500A               	movf	??_LightLed+1,w,c
  7225  000BB6  12DF               	iorwf	indf2,f,c
  7226  000BB8  D059               	goto	l259
  7227  000BBA                     l5510:
  7228                           
  7229                           ;main.c: 334: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7230  000BBA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7231  000BBE  2A09               	incf	??_LightLed,f,c
  7232  000BC0  0E01               	movlw	1
  7233  000BC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7234  000BC4  2A09               	incf	??_LightLed,f,c
  7235  000BC6  D003               	goto	u4654
  7236  000BC8                     u4655:
  7237  000BC8  FFFF               	dw	65535	; assembler added errata NOP
  7238  000BCA  90D8               	bcf	status,0,c
  7239  000BCC  360A               	rlcf	??_LightLed+1,f,c
  7240  000BCE                     u4654:
  7241  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  7242  000BD0  2E09               	decfsz	??_LightLed,f,c
  7243  000BD2  D7FA               	goto	u4655
  7244  000BD4  500D               	movf	LightLed@ststusIndex,w,c
  7245  000BD6  0F90               	addlw	low _ledStatuses
  7246  000BD8  6ED9               	movwf	fsr2l,c
  7247  000BDA  6ADA               	clrf	fsr2h,c
  7248  000BDC  500A               	movf	??_LightLed+1,w,c
  7249  000BDE  12DF               	iorwf	indf2,f,c
  7250                           
  7251                           ;main.c: 335: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7252  000BE0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7253  000BE4  0E01               	movlw	1
  7254  000BE6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7255  000BE8  2A09               	incf	??_LightLed,f,c
  7256  000BEA  D003               	goto	u4664
  7257  000BEC                     u4665:
  7258  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  7259  000BEE  90D8               	bcf	status,0,c
  7260  000BF0  360A               	rlcf	??_LightLed+1,f,c
  7261  000BF2                     u4664:
  7262  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  7263  000BF4  2E09               	decfsz	??_LightLed,f,c
  7264  000BF6  D7FA               	goto	u4665
  7265  000BF8  500D               	movf	LightLed@ststusIndex,w,c
  7266  000BFA  0F90               	addlw	low _ledStatuses
  7267  000BFC  6ED9               	movwf	fsr2l,c
  7268  000BFE  6ADA               	clrf	fsr2h,c
  7269  000C00  500A               	movf	??_LightLed+1,w,c
  7270  000C02  12DF               	iorwf	indf2,f,c
  7271                           
  7272                           ;main.c: 336: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7273  000C04  5008               	movf	LightLed@blink,w,c
  7274  000C06  E014               	bz	l5516
  7275  000C08  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7276  000C0C  2A09               	incf	??_LightLed,f,c
  7277  000C0E  0E01               	movlw	1
  7278  000C10  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7279  000C12  2A09               	incf	??_LightLed,f,c
  7280  000C14  D003               	goto	u4684
  7281  000C16                     u4685:
  7282  000C16  FFFF               	dw	65535	; assembler added errata NOP
  7283  000C18  90D8               	bcf	status,0,c
  7284  000C1A  360A               	rlcf	??_LightLed+1,f,c
  7285  000C1C                     u4684:
  7286  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  7287  000C1E  2E09               	decfsz	??_LightLed,f,c
  7288  000C20  D7FA               	goto	u4685
  7289  000C22  500D               	movf	LightLed@ststusIndex,w,c
  7290  000C24  0F80               	addlw	low _ledBlink
  7291  000C26  6ED9               	movwf	fsr2l,c
  7292  000C28  6ADA               	clrf	fsr2h,c
  7293  000C2A  500A               	movf	??_LightLed+1,w,c
  7294  000C2C  12DF               	iorwf	indf2,f,c
  7295  000C2E  D00E               	goto	l5518
  7296  000C30                     l5516:
  7297  000C30  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7298  000C34  2A09               	incf	??_LightLed,f,c
  7299  000C36  0E01               	movlw	1
  7300  000C38  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7301  000C3A  2A09               	incf	??_LightLed,f,c
  7302  000C3C  D003               	goto	u4694
  7303  000C3E                     u4695:
  7304  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  7305  000C40  90D8               	bcf	status,0,c
  7306  000C42  360A               	rlcf	??_LightLed+1,f,c
  7307  000C44                     u4694:
  7308  000C44  FFFF               	dw	65535	; assembler added errata NOP
  7309  000C46  2E09               	decfsz	??_LightLed,f,c
  7310  000C48  D7FA               	goto	u4695
  7311  000C4A  D799               	goto	L9
  7312  000C4C                     l5518:
  7313  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  7314                           
  7315                           ;main.c: 337: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7316  000C4E  5008               	movf	LightLed@blink,w,c
  7317  000C50  E1A1               	bnz	l5506
  7318  000C52  D74A               	goto	l267
  7319  000C54                     l5526:
  7320  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7321  000C56  5007               	movf	LightLed@ledState,w,c
  7322                           
  7323                           ; Switch size 1, requested type "speed"
  7324                           ; Number of cases is 4, Range of values is 0 to 3
  7325                           ; switch strategies available:
  7326                           ; Name         Instructions Cycles
  7327                           ; simple_byte           13     7 (average)
  7328                           ;	Chosen strategy is simple_byte
  7329  000C58  E101 D6A9          	bz	l5492
  7330  000C5C  0A01               	xorlw	1	; case 1
  7331  000C5E  E101 D6F1          	bz	l5494
  7332  000C62  0A03               	xorlw	3	; case 2
  7333  000C64  E101 D757          	bz	l5502
  7334  000C68  0A01               	xorlw	1	; case 3
  7335  000C6A  E0A7               	bz	l5510
  7336  000C6C                     l259:
  7337  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  7338  000C6E  0012               	return		;funcret
  7339  000C70  FFFF               	dw	65535	; errata NOP
  7340  000C72                     __end_of_LightLed:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           postinc0	equ	0xFEE
  7350                           wreg	equ	0xFE8
  7351                           postdec1	equ	0xFE5
  7352                           fsr1h	equ	0xFE2
  7353                           fsr1l	equ	0xFE1
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           plusw2	equ	0xFDB
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _ModbusPoll *****************
  7363 ;; Defined at:
  7364 ;;		line 404 in file "ModbusRtu.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  7367 ;;  coils           1   43[COMRAM] PTR unsigned short 
  7368 ;;		 -> _MODBUSCoils(2), 
  7369 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  7370 ;;		 -> _MODBUSInputRegs(30), 
  7371 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  7372 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  7373 ;;		 -> _MODBUSHoldingRegs(30), 
  7374 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  u8exception     1   52[COMRAM] unsigned char 
  7377 ;;  i8state         1   51[COMRAM] unsigned char 
  7378 ;;  u8current       1   50[COMRAM] unsigned char 
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      char 
  7381 ;; Registers used:
  7382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : E/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7388 ;;      Params:         9       0       0       0       0       0       0
  7389 ;;      Locals:         3       0       0       0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0
  7391 ;;      Totals:        12       0       0       0       0       0       0
  7392 ;;Total ram usage:       12 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    5
  7395 ;; This function calls:
  7396 ;;		_ModbusBuildException
  7397 ;;		_ModbusGetRxBuffer
  7398 ;;		_ModbusProcess_FC1
  7399 ;;		_ModbusProcess_FC15
  7400 ;;		_ModbusProcess_FC16
  7401 ;;		_ModbusProcess_FC17
  7402 ;;		_ModbusProcess_FC21
  7403 ;;		_ModbusProcess_FC3
  7404 ;;		_ModbusProcess_FC43
  7405 ;;		_ModbusProcess_FC5
  7406 ;;		_ModbusProcess_FC6
  7407 ;;		_ModbusProcess_FC7
  7408 ;;		_ModbusSendTxBuffer
  7409 ;;		_ModbusValidateRequest
  7410 ;;		_PortAvailable
  7411 ;;		_millis
  7412 ;; This function is called by:
  7413 ;;		_main
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text37
  7418  0012C0                     __ptext37:
  7419                           	opt stack 0
  7420  0012C0                     _ModbusPoll:
  7421                           	opt stack 25
  7422                           
  7423                           ;incstack = 0
  7424  0012C0  FFFF               	dw	65535
  7425                           
  7426                           ;ModbusRtu.c: 407: _lastCommand = MB_FC_NONE;
  7427  0012C2  0100               	movlb	0	; () banked
  7428  0012C4  6BE1               	clrf	__lastCommand& (0+255),b
  7429                           
  7430                           ;ModbusRtu.c: 411: _inputRegsCount = inputRegsCount;
  7431  0012C6  C02F  F0D1         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7432                           
  7433                           ;ModbusRtu.c: 412: _holdingRegsCount = holdingRegsCount;
  7434  0012CA  C032  F0D0         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;ModbusRtu.c: 417: uint8_t u8current = PortAvailable();
  7438  0012CE  EC89  F016         	call	_PortAvailable	;wreg free
  7439  0012D2  6E33               	movwf	ModbusPoll@u8current,c
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;ModbusRtu.c: 421: if (u8current == 0) return 0;
  7443  0012D4  5033               	movf	ModbusPoll@u8current,w,c
  7444  0012D6  E103               	bnz	l6016
  7445  0012D8                     l6012:
  7446  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  7447  0012DA  0E00               	movlw	0
  7448  0012DC  D0A6               	goto	l660
  7449  0012DE                     l6016:
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;ModbusRtu.c: 424: if (u8current != _u8lastRec)
  7453  0012DE  51D7               	movf	__u8lastRec& (0+255),w,b
  7454  0012E0  1833               	xorwf	ModbusPoll@u8current,w,c
  7455  0012E2  E012               	bz	l6026
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;ModbusRtu.c: 425: {
  7459                           ;ModbusRtu.c: 426: _u8lastRec = u8current;
  7460  0012E4  C033  F0D7         	movff	ModbusPoll@u8current,__u8lastRec
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;ModbusRtu.c: 427: _u32time = millis() + 5;
  7464  0012E8  0E05               	movlw	5
  7465  0012EA  ECD8  F015         	call	_millis	;wreg free
  7466  0012EE  2407               	addwf	?_millis,w,c
  7467  0012F0  0100               	movlb	0	; () banked
  7468  0012F2  6FA4               	movwf	__u32time& (0+255),b
  7469  0012F4  0E00               	movlw	0
  7470  0012F6  2008               	addwfc	?_millis+1,w,c
  7471  0012F8  6FA5               	movwf	(__u32time+1)& (0+255),b
  7472  0012FA  0E00               	movlw	0
  7473  0012FC  2009               	addwfc	?_millis+2,w,c
  7474  0012FE  6FA6               	movwf	(__u32time+2)& (0+255),b
  7475  001300  0E00               	movlw	0
  7476  001302  200A               	addwfc	?_millis+3,w,c
  7477  001304  6FA7               	movwf	(__u32time+3)& (0+255),b
  7478  001306  D7E8               	goto	l6012
  7479  001308                     l6026:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;ModbusRtu.c: 429: }
  7483                           ;ModbusRtu.c: 430: if (millis() < _u32time)
  7484  001308  ECD8  F015         	call	_millis	;wreg free
  7485  00130C  0100               	movlb	0	; () banked
  7486  00130E  51A4               	movf	__u32time& (0+255),w,b
  7487  001310  5C07               	subwf	?_millis,w,c
  7488  001312  51A5               	movf	(__u32time+1)& (0+255),w,b
  7489  001314  5808               	subwfb	?_millis+1,w,c
  7490  001316  51A6               	movf	(__u32time+2)& (0+255),w,b
  7491  001318  5809               	subwfb	?_millis+2,w,c
  7492  00131A  51A7               	movf	(__u32time+3)& (0+255),w,b
  7493  00131C  580A               	subwfb	?_millis+3,w,c
  7494  00131E  E3DC               	bnc	l6012
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;ModbusRtu.c: 433: _u8lastRec = 0;
  7498  001320  6BD7               	clrf	__u8lastRec& (0+255),b
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;ModbusRtu.c: 435: _u8lastError = i8state;
  7502  001322  ECC8  F014         	call	_ModbusGetRxBuffer	;wreg free
  7503  001326  6E34               	movwf	ModbusPoll@i8state,c
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;ModbusRtu.c: 436: if (i8state < 4)
  7507  001328  0E04               	movlw	4
  7508  00132A  6034               	cpfslt	ModbusPoll@i8state,c
  7509  00132C  D003               	goto	l6040
  7510  00132E                     l6036:
  7511  00132E  FFFF               	dw	65535	; assembler added errata NOP
  7512                           
  7513                           ;ModbusRtu.c: 437: return i8state;
  7514  001330  5034               	movf	ModbusPoll@i8state,w,c
  7515  001332  D07B               	goto	l660
  7516  001334                     l6040:
  7517  001334  FFFF               	dw	65535	; assembler added errata NOP
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;ModbusRtu.c: 440: if (_au8Buffer[ ID ] != _u8id)
  7521  001336  51D6               	movf	__u8id& (0+255),w,b
  7522  001338  0101               	movlb	1	; () banked
  7523  00133A  1900               	xorwf	__au8Buffer& (0+255),w,b
  7524  00133C  E1CD               	bnz	l6012
  7525                           
  7526                           ; BSR set to: 1
  7527                           ;ModbusRtu.c: 444: uint8_t u8exception = ModbusValidateRequest();
  7528  00133E  EC72  F007         	call	_ModbusValidateRequest	;wreg free
  7529  001342  6E35               	movwf	ModbusPoll@u8exception,c
  7530                           
  7531                           ;ModbusRtu.c: 445: if (u8exception > 0)
  7532  001344  5035               	movf	ModbusPoll@u8exception,w,c
  7533  001346  E009               	bz	l6060
  7534                           
  7535                           ;ModbusRtu.c: 446: {
  7536                           ;ModbusRtu.c: 447: if (u8exception != NO_REPLY)
  7537  001348  2835               	incf	ModbusPoll@u8exception,w,c
  7538  00134A  E005               	bz	l6056
  7539                           
  7540                           ;ModbusRtu.c: 448: {
  7541                           ;ModbusRtu.c: 449: ModbusBuildException(u8exception);
  7542  00134C  5035               	movf	ModbusPoll@u8exception,w,c
  7543  00134E  EC13  F016         	call	_ModbusBuildException
  7544                           
  7545                           ; BSR set to: 1
  7546                           ;ModbusRtu.c: 450: ModbusSendTxBuffer();
  7547  001352  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  7548  001356                     l6056:
  7549                           
  7550                           ;ModbusRtu.c: 453: return u8exception;
  7551  001356  5035               	movf	ModbusPoll@u8exception,w,c
  7552  001358  D068               	goto	l660
  7553  00135A                     l6060:
  7554                           
  7555                           ;ModbusRtu.c: 457: _u8lastError = 0;
  7556  00135A  ECD8  F015         	call	_millis	;wreg free
  7557                           
  7558                           ;ModbusRtu.c: 460: switch (_au8Buffer[ FUNC ])
  7559  00135E  D049               	goto	l6112
  7560  001360                     l6062:
  7561                           
  7562                           ; BSR set to: 1
  7563                           ;ModbusRtu.c: 463: return ModbusProcess_FC1(*coils);
  7564  001360  502C               	movf	ModbusPoll@coils,w,c
  7565  001362  6ED9               	movwf	fsr2l,c
  7566  001364  6ADA               	clrf	fsr2h,c
  7567  001366  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  7568  00136A  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  7569  00136E  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7570  001372  D05B               	goto	l660
  7571  001374                     l6066:
  7572                           
  7573                           ; BSR set to: 1
  7574                           ;ModbusRtu.c: 465: return ModbusProcess_FC1(discreteInputs);
  7575  001374  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7576  001378  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7577  00137C  EC64  F00B         	call	_ModbusProcess_FC1	;wreg free
  7578  001380  D054               	goto	l660
  7579  001382                     l6070:
  7580                           
  7581                           ; BSR set to: 1
  7582                           ;ModbusRtu.c: 467: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7583  001382  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7584  001386  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7585  00138A  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7586  00138E  EC20  F010         	call	_ModbusProcess_FC3	;wreg free
  7587  001392  D04B               	goto	l660
  7588  001394                     l6074:
  7589                           
  7590                           ; BSR set to: 1
  7591                           ;ModbusRtu.c: 469: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7592  001394  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7593  001398  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7594  00139C  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7595  0013A0  EC20  F010         	call	_ModbusProcess_FC3	;wreg free
  7596  0013A4  D042               	goto	l660
  7597  0013A6                     l6078:
  7598                           
  7599                           ; BSR set to: 1
  7600                           ;ModbusRtu.c: 471: return ModbusProcess_FC5(coils);
  7601  0013A6  502C               	movf	ModbusPoll@coils,w,c
  7602  0013A8  EC7A  F011         	call	_ModbusProcess_FC5
  7603  0013AC  D03E               	goto	l660
  7604  0013AE                     l6082:
  7605                           
  7606                           ; BSR set to: 1
  7607                           ;ModbusRtu.c: 473: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7608  0013AE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7609  0013B2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7610  0013B6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7611  0013BA  EC94  F013         	call	_ModbusProcess_FC6	;wreg free
  7612  0013BE  D035               	goto	l660
  7613  0013C0                     l6086:
  7614                           
  7615                           ; BSR set to: 1
  7616                           ;ModbusRtu.c: 475: return ModbusProcess_FC7();
  7617  0013C0  EC4D  F016         	call	_ModbusProcess_FC7	;wreg free
  7618  0013C4  D032               	goto	l660
  7619  0013C6                     l6090:
  7620                           
  7621                           ; BSR set to: 1
  7622                           ;ModbusRtu.c: 477: return ModbusProcess_FC15(coils);
  7623  0013C6  502C               	movf	ModbusPoll@coils,w,c
  7624  0013C8  EC81  F00C         	call	_ModbusProcess_FC15
  7625  0013CC  D02E               	goto	l660
  7626  0013CE                     l6094:
  7627                           
  7628                           ; BSR set to: 1
  7629                           ;ModbusRtu.c: 479: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7630  0013CE  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7631  0013D2  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7632  0013D6  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7633  0013DA  ECFB  F00E         	call	_ModbusProcess_FC16	;wreg free
  7634  0013DE  D025               	goto	l660
  7635  0013E0                     l6098:
  7636                           
  7637                           ; BSR set to: 1
  7638                           ;ModbusRtu.c: 481: return ModbusProcess_FC17();
  7639  0013E0  EC97  F012         	call	_ModbusProcess_FC17	;wreg free
  7640  0013E4  D022               	goto	l660
  7641  0013E6                     l6102:
  7642                           
  7643                           ; BSR set to: 1
  7644                           ;ModbusRtu.c: 483: return ModbusProcess_FC21();
  7645  0013E6  ECD2  F010         	call	_ModbusProcess_FC21	;wreg free
  7646  0013EA  D01F               	goto	l660
  7647  0013EC                     l6106:
  7648                           
  7649                           ; BSR set to: 1
  7650                           ;ModbusRtu.c: 485: return ModbusProcess_FC43();
  7651  0013EC  EC18  F00A         	call	_ModbusProcess_FC43	;wreg free
  7652  0013F0  D01C               	goto	l660
  7653  0013F2                     l6112:
  7654  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  7655  0013F4  0101               	movlb	1	; () banked
  7656  0013F6  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7657                           
  7658                           ; Switch size 1, requested type "speed"
  7659                           ; Number of cases is 12, Range of values is 1 to 43
  7660                           ; switch strategies available:
  7661                           ; Name         Instructions Cycles
  7662                           ; simple_byte           37    19 (average)
  7663                           ;	Chosen strategy is simple_byte
  7664  0013F8  0A01               	xorlw	1	; case 1
  7665  0013FA  E0B2               	bz	l6062
  7666  0013FC  0A03               	xorlw	3	; case 2
  7667  0013FE  E0BA               	bz	l6066
  7668  001400  0A01               	xorlw	1	; case 3
  7669  001402  E0BF               	bz	l6070
  7670  001404  0A07               	xorlw	7	; case 4
  7671  001406  E0C6               	bz	l6074
  7672  001408  0A01               	xorlw	1	; case 5
  7673  00140A  E0CD               	bz	l6078
  7674  00140C  0A03               	xorlw	3	; case 6
  7675  00140E  E0CF               	bz	l6082
  7676  001410  0A01               	xorlw	1	; case 7
  7677  001412  E0D6               	bz	l6086
  7678  001414  0A08               	xorlw	8	; case 15
  7679  001416  E0D7               	bz	l6090
  7680  001418  0A1F               	xorlw	31	; case 16
  7681  00141A  E0D9               	bz	l6094
  7682  00141C  0A01               	xorlw	1	; case 17
  7683  00141E  E0E0               	bz	l6098
  7684  001420  0A04               	xorlw	4	; case 21
  7685  001422  E0E1               	bz	l6102
  7686  001424  0A3E               	xorlw	62	; case 43
  7687  001426  E0E2               	bz	l6106
  7688  001428  D782               	goto	l6036
  7689  00142A                     l660:
  7690  00142A  FFFF               	dw	65535	; assembler added errata NOP
  7691  00142C  0012               	return		;funcret
  7692  00142E  FFFF               	dw	65535	; errata NOP
  7693  001430                     __end_of_ModbusPoll:
  7694                           	opt stack 0
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           postinc0	equ	0xFEE
  7703                           wreg	equ	0xFE8
  7704                           postdec1	equ	0xFE5
  7705                           fsr1h	equ	0xFE2
  7706                           fsr1l	equ	0xFE1
  7707                           indf2	equ	0xFDF
  7708                           postinc2	equ	0xFDE
  7709                           postdec2	equ	0xFDD
  7710                           plusw2	equ	0xFDB
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _ModbusValidateRequest *****************
  7716 ;; Defined at:
  7717 ;;		line 691 in file "ModbusRtu.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7722 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7723 ;;  readDevId       1   37[COMRAM] unsigned char 
  7724 ;;  i               1   36[COMRAM] unsigned char 
  7725 ;;  u16regs         2   39[COMRAM] unsigned short 
  7726 ;;  u16count        2   34[COMRAM] unsigned short 
  7727 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7728 ;;  u8regs          1   38[COMRAM] unsigned char 
  7729 ;;  isSupported     1   33[COMRAM] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      unsigned char 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : F/1
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:        18       0       0       0       0       0       0
  7741 ;;      Temps:          4       0       0       0       0       0       0
  7742 ;;      Totals:        22       0       0       0       0       0       0
  7743 ;;Total ram usage:       22 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    3
  7746 ;; This function calls:
  7747 ;;		_ModbusCalcCRC
  7748 ;; This function is called by:
  7749 ;;		_ModbusPoll
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text38
  7754  000EE4                     __ptext38:
  7755                           	opt stack 0
  7756  000EE4                     _ModbusValidateRequest:
  7757                           	opt stack 26
  7758                           
  7759                           ;incstack = 0
  7760  000EE4  FFFF               	dw	65535
  7761                           
  7762                           ; BSR set to: 1
  7763                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  7764                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7765                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  7766  000EE6  0EFE               	movlw	low (__au8Buffer+65534)
  7767  000EE8  2472               	addwf	__u8BufferSize,w,c
  7768  000EEA  6ED9               	movwf	fsr2l,c
  7769  000EEC  6ADA               	clrf	fsr2h,c
  7770  000EEE  0E00               	movlw	high (__au8Buffer+65534)
  7771  000EF0  22DA               	addwfc	fsr2h,f,c
  7772  000EF2  50DF               	movf	indf2,w,c
  7773  000EF4  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7774  000EF6  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7775  000EF8  0EFF               	movlw	low (__au8Buffer+65535)
  7776  000EFA  2472               	addwf	__u8BufferSize,w,c
  7777  000EFC  6ED9               	movwf	fsr2l,c
  7778  000EFE  6ADA               	clrf	fsr2h,c
  7779  000F00  0E00               	movlw	high (__au8Buffer+65535)
  7780  000F02  22DA               	addwfc	fsr2h,f,c
  7781  000F04  50DF               	movf	indf2,w,c
  7782  000F06  1014               	iorwf	??_ModbusValidateRequest,w,c
  7783  000F08  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7784  000F0A  5015               	movf	??_ModbusValidateRequest+1,w,c
  7785  000F0C  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7786                           
  7787                           ; BSR set to: 1
  7788                           ;ModbusRtu.c: 698: {
  7789                           ;ModbusRtu.c: 699: _u16errCnt++;
  7790  000F0E  5072               	movf	__u8BufferSize,w,c
  7791  000F10  0FFE               	addlw	254
  7792  000F12  EC5D  F012         	call	_ModbusCalcCRC
  7793  000F16  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7794  000F18  1807               	xorwf	?_ModbusCalcCRC,w,c
  7795  000F1A  E103               	bnz	u2910
  7796  000F1C  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7797  000F1E  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7798  000F20  E002               	bz	l711
  7799  000F22                     u2910:
  7800                           
  7801                           ;ModbusRtu.c: 700: return NO_REPLY;
  7802  000F22  0EFF               	movlw	255
  7803  000F24  D10C               	goto	l712
  7804  000F26                     l711:
  7805                           
  7806                           ;ModbusRtu.c: 701: }
  7807                           ;ModbusRtu.c: 704: bool isSupported = 0;
  7808  000F26  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7809                           
  7810                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7811  000F28  6A25               	clrf	ModbusValidateRequest@i,c
  7812  000F2A                     l3974:
  7813  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  7814                           
  7815                           ;ModbusRtu.c: 706: {
  7816                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  7817  000F2C  5025               	movf	ModbusValidateRequest@i,w,c
  7818  000F2E  0F01               	addlw	low _fctsupported
  7819  000F30  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7820  000F32  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7821  000F36                     	if	1	;There is more than 1 active tblptr byte
  7822  000F36  0E06               	movlw	high __smallconst
  7823  000F38  6EF7               	movwf	tblptrh,c
  7824  000F3A                     	endif
  7825  000F3A                     	if	0	;tblptru may be non-zero
  7826  000F3A                     	endif
  7827  000F3A                     	if	0	;tblptru may be non-zero
  7828  000F3A                     	endif
  7829  000F3A  0008               	tblrd		*
  7830  000F3C  FFFF               	dw	65535	; errata NOP
  7831  000F3E  50F5               	movf	tablat,w,c
  7832  000F40  0101               	movlb	1	; () banked
  7833  000F42  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7834  000F44  E103               	bnz	l3978
  7835                           
  7836                           ; BSR set to: 1
  7837                           ;ModbusRtu.c: 708: {
  7838                           ;ModbusRtu.c: 709: isSupported = 1;
  7839  000F46  0E01               	movlw	1
  7840  000F48  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7841                           
  7842                           ;ModbusRtu.c: 710: break;
  7843  000F4A  D004               	goto	l3982
  7844  000F4C                     l3978:
  7845                           
  7846                           ; BSR set to: 1
  7847  000F4C  2A25               	incf	ModbusValidateRequest@i,f,c
  7848                           
  7849                           ; BSR set to: 1
  7850  000F4E  0E0B               	movlw	11
  7851  000F50  6425               	cpfsgt	ModbusValidateRequest@i,c
  7852  000F52  D7EB               	goto	l3974
  7853  000F54                     l3982:
  7854  000F54  FFFF               	dw	65535	; assembler added errata NOP
  7855                           
  7856                           ; BSR set to: 1
  7857                           ;ModbusRtu.c: 714: {
  7858                           ;ModbusRtu.c: 715: _u16errCnt++;
  7859  000F56  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7860  000F58  E102               	bnz	l716
  7861  000F5A                     l3984:
  7862                           
  7863                           ; BSR set to: 1
  7864                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  7865  000F5A  0E01               	movlw	1
  7866  000F5C  D0F0               	goto	l712
  7867  000F5E                     l716:
  7868                           
  7869                           ; BSR set to: 1
  7870                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  7871  000F5E  6A23               	clrf	ModbusValidateRequest@u16count,c
  7872  000F60  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7873                           
  7874                           ;ModbusRtu.c: 722: uint8_t u8regs;
  7875                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  7876  000F62  D0CA               	goto	l4100
  7877  000F64                     l3988:
  7878                           
  7879                           ; BSR set to: 1
  7880                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  7881                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  7882                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7883  000F64  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7884  000F66  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7885  000F68  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7886  000F6A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7887  000F6C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7888                           
  7889                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7890  000F70  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7891  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7892  000F74  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7893  000F76  6E23               	movwf	ModbusValidateRequest@u16count,c
  7894  000F78  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7895                           
  7896                           ; BSR set to: 1
  7897                           ;ModbusRtu.c: 731: if (u16count > 16)
  7898  000F7C  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7899  000F7E  E103               	bnz	u2950
  7900  000F80  0E11               	movlw	17
  7901  000F82  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7902  000F84  E302               	bnc	l3996
  7903  000F86                     u2950:
  7904  000F86                     l3992:
  7905                           
  7906                           ; BSR set to: 1
  7907                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  7908  000F86  0E03               	movlw	3
  7909  000F88  D0DA               	goto	l712
  7910  000F8A                     l3996:
  7911                           
  7912                           ; BSR set to: 1
  7913                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  7914  000F8A  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7915  000F8C  E110               	bnz	l4000
  7916  000F8E  0E10               	movlw	16
  7917  000F90  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7918  000F92  E20D               	bc	l4000
  7919                           
  7920                           ; BSR set to: 1
  7921  000F94  5023               	movf	ModbusValidateRequest@u16count,w,c
  7922  000F96  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7923  000F98  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7924  000F9A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7925  000F9C  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7926  000F9E  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7927  000FA0  5015               	movf	??_ModbusValidateRequest+1,w,c
  7928  000FA2  E105               	bnz	u2970
  7929  000FA4  0E11               	movlw	17
  7930  000FA6  5C14               	subwf	??_ModbusValidateRequest,w,c
  7931  000FA8                     L10:
  7932  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  7933  000FAA  E201 D0C4          	bnc	l725
  7934  000FAE                     u2970:
  7935  000FAE                     l4000:
  7936  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  7937                           
  7938                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  7939  000FB0  0E02               	movlw	2
  7940  000FB2  D0C5               	goto	l712
  7941  000FB4                     l4004:
  7942                           
  7943                           ; BSR set to: 1
  7944                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7945  000FB4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7946  000FB6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7947  000FB8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7948  000FBA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7949  000FBC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7950                           
  7951                           ; BSR set to: 1
  7952                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  7953  000FC0  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7954                           
  7955                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  7956  000FC4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7957  000FC6  E002               	bz	l4014
  7958                           
  7959                           ; BSR set to: 1
  7960  000FC8  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7961  000FCA  E1DD               	bnz	l3992
  7962  000FCC                     l4014:
  7963                           
  7964                           ; BSR set to: 1
  7965                           ;ModbusRtu.c: 741: if (u16regs > 15)
  7966  000FCC  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7967  000FCE  E1EF               	bnz	l4000
  7968  000FD0  0E10               	movlw	16
  7969  000FD2  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7970  000FD4  D7E9               	goto	L10
  7971  000FD6                     l4020:
  7972                           
  7973                           ; BSR set to: 1
  7974                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7975  000FD6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7976  000FD8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7977  000FDA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7978  000FDC  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7979  000FDE  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7980  000FE2                     l4022:
  7981  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  7982                           
  7983                           ; BSR set to: 1
  7984                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7985  000FE4  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7986                           
  7987                           ; BSR set to: 1
  7988                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7989  000FE8  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7990  000FEA  0100               	movlb	0	; () banked
  7991  000FEC  5DD0               	subwf	__holdingRegsCount& (0+255),w,b
  7992  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  7993  000FF0  E3DE               	bnc	l4000
  7994  000FF2  D0A1               	goto	l725
  7995  000FF4                     l4030:
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7999  000FF4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8000  000FF6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8001  000FF8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8002  000FFA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8003  000FFC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8004                           
  8005                           ; BSR set to: 1
  8006                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8007  001000  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8008  001002  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8009  001006  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8010  001008  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8011  00100C  6A14               	clrf	??_ModbusValidateRequest,c
  8012  00100E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8013  001010  5014               	movf	??_ModbusValidateRequest,w,c
  8014  001012  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  8015  001014  5015               	movf	??_ModbusValidateRequest+1,w,c
  8016  001016  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  8017                           
  8018                           ; BSR set to: 1
  8019                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  8020  001018  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8021                           
  8022                           ; BSR set to: 1
  8023                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  8024  00101C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  8025  00101E  0100               	movlb	0	; () banked
  8026  001020  5DD1               	subwf	__inputRegsCount& (0+255),w,b
  8027  001022  D7E5               	goto	L11
  8028  001024                     l4042:
  8029                           
  8030                           ; BSR set to: 1
  8031                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  8032                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8033  001024  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8034  001026  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8035  001028  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8036  00102A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8037  00102C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8038                           
  8039                           ; BSR set to: 1
  8040                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8041  001030  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8042  001032  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8043  001036  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8044  001038  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8045  00103C  6A14               	clrf	??_ModbusValidateRequest,c
  8046  00103E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8047  001040  5014               	movf	??_ModbusValidateRequest,w,c
  8048  001042  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  8049  001044  5015               	movf	??_ModbusValidateRequest+1,w,c
  8050  001046  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  8051  001048  D7CC               	goto	l4022
  8052  00104A                     l4054:
  8053                           
  8054                           ; BSR set to: 1
  8055                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  8056  00104A  0E06               	movlw	6
  8057  00104C  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  8058  00104E  E1AF               	bnz	l4000
  8059                           
  8060                           ; BSR set to: 1
  8061                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  8062  001050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8063  001052  E1AD               	bnz	l4000
  8064                           
  8065                           ; BSR set to: 1
  8066  001054  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  8067  001056  E1AB               	bnz	l4000
  8068                           
  8069                           ; BSR set to: 1
  8070                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  8071  001058  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8072  00105A  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  8073  00105E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8074  001060  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8075  001064  6A14               	clrf	??_ModbusValidateRequest,c
  8076  001066  1214               	iorwf	??_ModbusValidateRequest,f,c
  8077  001068  0E00               	movlw	0
  8078  00106A  90D8               	bcf	status,0,c
  8079  00106C  3614               	rlcf	??_ModbusValidateRequest,f,c
  8080  00106E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  8081  001070  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  8082  001074  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  8083  001078  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  8084  00107A  0EFF               	movlw	-1
  8085  00107C  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  8086  00107E  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  8087                           
  8088                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  8089  001080  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8090  001082  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  8091  001086  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8092  001088  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8093  00108C  6A14               	clrf	??_ModbusValidateRequest,c
  8094  00108E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8095  001090  0E00               	movlw	0
  8096  001092  90D8               	bcf	status,0,c
  8097  001094  3614               	rlcf	??_ModbusValidateRequest,f,c
  8098  001096  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  8099  001098  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  8100  00109C  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  8101  0010A0  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  8102  0010A2  0EFF               	movlw	-1
  8103  0010A4  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  8104  0010A6  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  8105                           
  8106                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  8107  0010A8  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  8108  0010AA  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  8109  0010AC  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8110  0010AE  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  8111  0010B0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  8112  0010B2  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  8113  0010B4  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  8114  0010B6  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  8115  0010B8  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  8116  0010BA  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  8117  0010BC  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  8118  0010BE  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  8119  0010C0  5017               	movf	??_ModbusValidateRequest+3,w,c
  8120  0010C2  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  8121  0010C4  E102               	bnz	u3070
  8122  0010C6  0415               	decf	??_ModbusValidateRequest+1,w,c
  8123  0010C8  D76F               	goto	L10
  8124  0010CA                     u3070:
  8125  0010CA  D771               	goto	l4000
  8126  0010CC                     l4074:
  8127                           
  8128                           ; BSR set to: 1
  8129                           ;ModbusRtu.c: 781: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  8130  0010CC  0E0E               	movlw	14
  8131  0010CE  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8132  0010D0  E001 D743          	bnz	l3984
  8133                           
  8134                           ; BSR set to: 1
  8135                           ;ModbusRtu.c: 783: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8136  0010D4  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8137                           
  8138                           ; BSR set to: 1
  8139                           ;ModbusRtu.c: 784: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8140  0010D8  0426               	decf	ModbusValidateRequest@readDevId,w,c
  8141  0010DA  E007               	bz	l4090
  8142                           
  8143                           ; BSR set to: 1
  8144  0010DC  0E02               	movlw	2
  8145  0010DE  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8146  0010E0  E004               	bz	l4090
  8147                           
  8148                           ; BSR set to: 1
  8149  0010E2  0E04               	movlw	4
  8150  0010E4  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8151  0010E6  E001 D74E          	bnz	l3992
  8152  0010EA                     l4090:
  8153                           
  8154                           ; BSR set to: 1
  8155                           ;ModbusRtu.c: 786: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8156  0010EA  0E04               	movlw	4
  8157  0010EC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8158  0010EE  E123               	bnz	l725
  8159                           
  8160                           ; BSR set to: 1
  8161  0010F0  0E06               	movlw	6
  8162  0010F2  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8163  0010F4  D020               	goto	l725
  8164  0010F6  D75B               	goto	l4000
  8165  0010F8                     l4100:
  8166  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  8167                           
  8168                           ; BSR set to: 1
  8169  0010FA  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  8170                           
  8171                           ; Switch size 1, requested type "speed"
  8172                           ; Number of cases is 11, Range of values is 1 to 43
  8173                           ; switch strategies available:
  8174                           ; Name         Instructions Cycles
  8175                           ; simple_byte           34    18 (average)
  8176                           ;	Chosen strategy is simple_byte
  8177  0010FC  0A01               	xorlw	1	; case 1
  8178  0010FE  E101 D731          	bz	l3988
  8179  001102  0A03               	xorlw	3	; case 2
  8180  001104  E101 D72E          	bz	l3988
  8181  001108  0A01               	xorlw	1	; case 3
  8182  00110A  E08C               	bz	l4042
  8183  00110C  0A07               	xorlw	7	; case 4
  8184  00110E  E101 D771          	bz	l4030
  8185  001112  0A01               	xorlw	1	; case 5
  8186  001114  E101 D74E          	bz	l4004
  8187  001118  0A03               	xorlw	3	; case 6
  8188  00111A  E101 D75C          	bz	l4020
  8189  00111E  0A09               	xorlw	9	; case 15
  8190  001120  E101 D720          	bz	l3988
  8191  001124  0A1F               	xorlw	31	; case 16
  8192  001126  E101 D77D          	bz	l4042
  8193  00112A  0A01               	xorlw	1	; case 17
  8194  00112C  E004               	bz	l725
  8195  00112E  0A04               	xorlw	4	; case 21
  8196  001130  E08C               	bz	l4054
  8197  001132  0A3E               	xorlw	62	; case 43
  8198  001134  E0CB               	bz	l4074
  8199  001136                     l725:
  8200  001136  FFFF               	dw	65535	; assembler added errata NOP
  8201                           
  8202                           ;ModbusRtu.c: 790: _lastCommand = _au8Buffer[ FUNC ];
  8203  001138  C101  F0E1         	movff	__au8Buffer+1,__lastCommand
  8204                           
  8205                           ;ModbusRtu.c: 791: return 0;
  8206  00113C  0E00               	movlw	0
  8207  00113E                     l712:
  8208  00113E  FFFF               	dw	65535	; assembler added errata NOP
  8209  001140  0012               	return		;funcret
  8210  001142  FFFF               	dw	65535	; errata NOP
  8211  001144                     __end_of_ModbusValidateRequest:
  8212                           	opt stack 0
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           intcon	equ	0xFF2
  8220                           postinc0	equ	0xFEE
  8221                           wreg	equ	0xFE8
  8222                           postdec1	equ	0xFE5
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           plusw2	equ	0xFDB
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function _ModbusProcess_FC7 *****************
  8234 ;; Defined at:
  8235 ;;		line 973 in file "ModbusRtu.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;		None
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      unsigned char 
  8242 ;; Registers used:
  8243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : E/1
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8249 ;;      Params:         0       0       0       0       0       0       0
  8250 ;;      Locals:         1       0       0       0       0       0       0
  8251 ;;      Temps:          0       0       0       0       0       0       0
  8252 ;;      Totals:         1       0       0       0       0       0       0
  8253 ;;Total ram usage:        1 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    4
  8256 ;; This function calls:
  8257 ;;		_ModbusSendTxBuffer
  8258 ;; This function is called by:
  8259 ;;		_ModbusPoll
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text39
  8264  002C9A                     __ptext39:
  8265                           	opt stack 0
  8266  002C9A                     _ModbusProcess_FC7:
  8267                           	opt stack 25
  8268                           
  8269                           ;incstack = 0
  8270  002C9A  FFFF               	dw	65535
  8271                           
  8272                           ;ModbusRtu.c: 975: _au8Buffer[ 2 ] = _exceptionStatus;
  8273  002C9C  C0CF  F102         	movff	__exceptionStatus,__au8Buffer+2
  8274                           
  8275                           ;ModbusRtu.c: 976: _u8BufferSize = 3;
  8276  002CA0  0E03               	movlw	3
  8277  002CA2  6E72               	movwf	__u8BufferSize,c
  8278                           
  8279                           ;ModbusRtu.c: 977: uint8_t u8CopyBufferSize = _u8BufferSize;
  8280  002CA4  C072  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  8281                           
  8282                           ;ModbusRtu.c: 978: ModbusSendTxBuffer();
  8283  002CA8  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  8284                           
  8285                           ;ModbusRtu.c: 979: return u8CopyBufferSize;
  8286  002CAC  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  8287  002CAE  0012               	return		;funcret
  8288  002CB0  FFFF               	dw	65535	; errata NOP
  8289  002CB2                     __end_of_ModbusProcess_FC7:
  8290                           	opt stack 0
  8291                           tblptru	equ	0xFF8
  8292                           tblptrh	equ	0xFF7
  8293                           tblptrl	equ	0xFF6
  8294                           tablat	equ	0xFF5
  8295                           prodh	equ	0xFF4
  8296                           prodl	equ	0xFF3
  8297                           intcon	equ	0xFF2
  8298                           postinc0	equ	0xFEE
  8299                           wreg	equ	0xFE8
  8300                           postdec1	equ	0xFE5
  8301                           fsr1h	equ	0xFE2
  8302                           fsr1l	equ	0xFE1
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           plusw2	equ	0xFDB
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _ModbusProcess_FC6 *****************
  8312 ;; Defined at:
  8313 ;;		line 953 in file "ModbusRtu.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8316 ;;		 -> _MODBUSHoldingRegs(30), 
  8317 ;;  u8size          1   23[COMRAM] unsigned char 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  u16add          2   29[COMRAM] unsigned short 
  8320 ;;  u16val          2   26[COMRAM] unsigned short 
  8321 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      unsigned char 
  8324 ;; Registers used:
  8325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : E/1
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8331 ;;      Params:         3       0       0       0       0       0       0
  8332 ;;      Locals:         5       0       0       0       0       0       0
  8333 ;;      Temps:          2       0       0       0       0       0       0
  8334 ;;      Totals:        10       0       0       0       0       0       0
  8335 ;;Total ram usage:       10 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    4
  8338 ;; This function calls:
  8339 ;;		_ModbusSendTxBuffer
  8340 ;; This function is called by:
  8341 ;;		_ModbusPoll
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text40
  8346  002728                     __ptext40:
  8347                           	opt stack 0
  8348  002728                     _ModbusProcess_FC6:
  8349                           	opt stack 25
  8350                           
  8351                           ;incstack = 0
  8352  002728  FFFF               	dw	65535
  8353                           
  8354                           ;ModbusRtu.c: 955: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ AD
      +                          D_LO ]);
  8355  00272A  0101               	movlb	1	; () banked
  8356  00272C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8357  00272E  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8358  002730  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8359  002732  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  8360  002734  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  8361                           
  8362                           ; BSR set to: 1
  8363                           ;ModbusRtu.c: 956: _lastAddress = u16add;
  8364  002738  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  8365  00273C  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  8366                           
  8367                           ;ModbusRtu.c: 957: _lastCount = 1;
  8368  002740  0100               	movlb	0	; () banked
  8369  002742  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8370  002744  0E01               	movlw	1
  8371  002746  6FC0               	movwf	__lastCount& (0+255),b
  8372                           
  8373                           ;ModbusRtu.c: 958: uint8_t u8CopyBufferSize;
  8374                           ;ModbusRtu.c: 959: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_
      +                          LO ]);
  8375  002748  0101               	movlb	1	; () banked
  8376  00274A  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8377  00274C  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8378  00274E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8379  002750  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  8380  002752  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  8381                           
  8382                           ; BSR set to: 1
  8383                           ;ModbusRtu.c: 961: regs[ u16add ] = u16val;
  8384  002756  90D8               	bcf	status,0,c
  8385  002758  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  8386  00275A  6ED9               	movwf	fsr2l,c
  8387  00275C  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  8388  00275E  6EDA               	movwf	fsr2h,c
  8389  002760  5016               	movf	ModbusProcess_FC6@regs,w,c
  8390  002762  26D9               	addwf	fsr2l,f,c
  8391  002764  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  8392  002766  22DA               	addwfc	fsr2h,f,c
  8393  002768  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  8394  00276C  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  8395                           
  8396                           ; BSR set to: 1
  8397                           ;ModbusRtu.c: 964: _u8BufferSize = RESPONSE_SIZE;
  8398  002770  0E06               	movlw	6
  8399  002772  6E72               	movwf	__u8BufferSize,c
  8400                           
  8401                           ; BSR set to: 1
  8402                           ;ModbusRtu.c: 966: u8CopyBufferSize = _u8BufferSize + 2;
  8403  002774  5072               	movf	__u8BufferSize,w,c
  8404  002776  0F02               	addlw	2
  8405  002778  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  8406                           
  8407                           ; BSR set to: 1
  8408                           ;ModbusRtu.c: 967: ModbusSendTxBuffer();
  8409  00277A  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  8410                           
  8411                           ;ModbusRtu.c: 969: return u8CopyBufferSize;
  8412  00277E  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  8413  002780  0012               	return		;funcret
  8414  002782  FFFF               	dw	65535	; errata NOP
  8415  002784                     __end_of_ModbusProcess_FC6:
  8416                           	opt stack 0
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           intcon	equ	0xFF2
  8424                           postinc0	equ	0xFEE
  8425                           wreg	equ	0xFE8
  8426                           postdec1	equ	0xFE5
  8427                           fsr1h	equ	0xFE2
  8428                           fsr1l	equ	0xFE1
  8429                           indf2	equ	0xFDF
  8430                           postinc2	equ	0xFDE
  8431                           postdec2	equ	0xFDD
  8432                           plusw2	equ	0xFDB
  8433                           fsr2h	equ	0xFDA
  8434                           fsr2l	equ	0xFD9
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function _ModbusProcess_FC5 *****************
  8438 ;; Defined at:
  8439 ;;		line 918 in file "ModbusRtu.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  regs            1    wreg     PTR unsigned short 
  8442 ;;		 -> _MODBUSCoils(2), 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  regs            1   29[COMRAM] PTR unsigned short 
  8445 ;;		 -> _MODBUSCoils(2), 
  8446 ;;  u16coil         2   27[COMRAM] unsigned short 
  8447 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  8448 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      unsigned char 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : E/1
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8458 ;;      Params:         0       0       0       0       0       0       0
  8459 ;;      Locals:         5       0       0       0       0       0       0
  8460 ;;      Temps:          5       0       0       0       0       0       0
  8461 ;;      Totals:        10       0       0       0       0       0       0
  8462 ;;Total ram usage:       10 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    4
  8465 ;; This function calls:
  8466 ;;		_ModbusSendTxBuffer
  8467 ;; This function is called by:
  8468 ;;		_ModbusPoll
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text41
  8473  0022F4                     __ptext41:
  8474                           	opt stack 0
  8475  0022F4                     _ModbusProcess_FC5:
  8476                           	opt stack 25
  8477                           
  8478                           ;incstack = 0
  8479  0022F4  FFFF               	dw	65535
  8480                           
  8481                           ;ModbusProcess_FC5@regs stored from wreg
  8482  0022F6  6E1E               	movwf	ModbusProcess_FC5@regs,c
  8483                           
  8484                           ;ModbusRtu.c: 921: uint8_t u8currentBit;
  8485                           ;ModbusRtu.c: 922: uint8_t u8CopyBufferSize;
  8486                           ;ModbusRtu.c: 923: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  8487  0022F8  0101               	movlb	1	; () banked
  8488  0022FA  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8489  0022FC  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8490  0022FE  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8491  002300  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8492  002302  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8493                           
  8494                           ; BSR set to: 1
  8495                           ;ModbusRtu.c: 924: _lastAddress = u16coil;
  8496  002306  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8497  00230A  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8498                           
  8499                           ;ModbusRtu.c: 925: _lastCount = 1;
  8500  00230E  0100               	movlb	0	; () banked
  8501  002310  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8502  002312  0E01               	movlw	1
  8503  002314  6FC0               	movwf	__lastCount& (0+255),b
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;ModbusRtu.c: 928: u8currentBit = (uint8_t) (u16coil % 16);
  8507  002316  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8508  002318  0B0F               	andlw	15
  8509  00231A  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;ModbusRtu.c: 931: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8513  00231C  0101               	movlb	1	; () banked
  8514  00231E  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8515  002320  E116               	bnz	l5702
  8516                           
  8517                           ; BSR set to: 1
  8518  002322  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8519  002326  0E01               	movlw	1
  8520  002328  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8521  00232A  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8522  00232C  2A16               	incf	??_ModbusProcess_FC5,f,c
  8523  00232E  D004               	goto	u4894
  8524  002330                     u4895:
  8525  002330  FFFF               	dw	65535	; assembler added errata NOP
  8526  002332  90D8               	bcf	status,0,c
  8527  002334  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8528  002336  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8529  002338                     u4894:
  8530  002338  FFFF               	dw	65535	; assembler added errata NOP
  8531  00233A  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8532  00233C  D7F9               	goto	u4895
  8533  00233E  501E               	movf	ModbusProcess_FC5@regs,w,c
  8534  002340  6ED9               	movwf	fsr2l,c
  8535  002342  6ADA               	clrf	fsr2h,c
  8536  002344  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8537  002346  12DE               	iorwf	postinc2,f,c
  8538  002348  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8539  00234A  12DD               	iorwf	postdec2,f,c
  8540  00234C  D019               	goto	l5704
  8541  00234E                     l5702:
  8542                           
  8543                           ; BSR set to: 1
  8544  00234E  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8545  002352  0E01               	movlw	1
  8546  002354  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8547  002356  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8548  002358  2A16               	incf	??_ModbusProcess_FC5,f,c
  8549  00235A  D004               	goto	u4904
  8550  00235C                     u4905:
  8551  00235C  FFFF               	dw	65535	; assembler added errata NOP
  8552  00235E  90D8               	bcf	status,0,c
  8553  002360  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8554  002362  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8555  002364                     u4904:
  8556  002364  FFFF               	dw	65535	; assembler added errata NOP
  8557  002366  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8558  002368  D7F9               	goto	u4905
  8559  00236A  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8560  00236C  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8561  00236E  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8562  002370  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8563  002372  501E               	movf	ModbusProcess_FC5@regs,w,c
  8564  002374  6ED9               	movwf	fsr2l,c
  8565  002376  6ADA               	clrf	fsr2h,c
  8566  002378  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8567  00237A  16DE               	andwf	postinc2,f,c
  8568  00237C  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8569  00237E  16DD               	andwf	postdec2,f,c
  8570  002380                     l5704:
  8571  002380  FFFF               	dw	65535	; assembler added errata NOP
  8572                           
  8573                           ;ModbusRtu.c: 938: _u8BufferSize = 6;
  8574  002382  0E06               	movlw	6
  8575  002384  6E72               	movwf	__u8BufferSize,c
  8576                           
  8577                           ;ModbusRtu.c: 939: u8CopyBufferSize = _u8BufferSize + 2;
  8578  002386  5072               	movf	__u8BufferSize,w,c
  8579  002388  0F02               	addlw	2
  8580  00238A  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8581                           
  8582                           ;ModbusRtu.c: 940: ModbusSendTxBuffer();
  8583  00238C  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  8584                           
  8585                           ;ModbusRtu.c: 942: return u8CopyBufferSize;
  8586  002390  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8587  002392  0012               	return		;funcret
  8588  002394  FFFF               	dw	65535	; errata NOP
  8589  002396                     __end_of_ModbusProcess_FC5:
  8590                           	opt stack 0
  8591                           tblptru	equ	0xFF8
  8592                           tblptrh	equ	0xFF7
  8593                           tblptrl	equ	0xFF6
  8594                           tablat	equ	0xFF5
  8595                           prodh	equ	0xFF4
  8596                           prodl	equ	0xFF3
  8597                           intcon	equ	0xFF2
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1h	equ	0xFE2
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           plusw2	equ	0xFDB
  8607                           fsr2h	equ	0xFDA
  8608                           fsr2l	equ	0xFD9
  8609                           status	equ	0xFD8
  8610                           
  8611 ;; *************** function _ModbusProcess_FC43 *****************
  8612 ;; Defined at:
  8613 ;;		line 1152 in file "ModbusRtu.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  objId           1   23[COMRAM] unsigned char 
  8618 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8619 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8620 ;; Return value:  Size  Location     Type
  8621 ;;                  1    wreg      unsigned char 
  8622 ;; Registers used:
  8623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8624 ;; Tracked objects:
  8625 ;;		On entry : E/1
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8629 ;;      Params:         0       0       0       0       0       0       0
  8630 ;;      Locals:         3       0       0       0       0       0       0
  8631 ;;      Temps:          0       0       0       0       0       0       0
  8632 ;;      Totals:         3       0       0       0       0       0       0
  8633 ;;Total ram usage:        3 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    4
  8636 ;; This function calls:
  8637 ;;		_CopyStringToBuffer
  8638 ;;		_ModbusSendTxBuffer
  8639 ;; This function is called by:
  8640 ;;		_ModbusPoll
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text42
  8645  001430                     __ptext42:
  8646                           	opt stack 0
  8647  001430                     _ModbusProcess_FC43:
  8648                           	opt stack 25
  8649                           
  8650                           ;incstack = 0
  8651  001430  FFFF               	dw	65535
  8652                           
  8653                           ;ModbusRtu.c: 1154: uint8_t devIdCode = _au8Buffer[ 3 ];
  8654  001432  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8655                           
  8656                           ;ModbusRtu.c: 1162: uint8_t objId = _au8Buffer[ 4 ];
  8657  001436  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8658                           
  8659                           ;ModbusRtu.c: 1173: _au8Buffer[ 5 ] = 0x00;
  8660  00143A  0101               	movlb	1	; () banked
  8661  00143C  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8662                           
  8663                           ;ModbusRtu.c: 1174: _au8Buffer[ 6 ] = 0x00;
  8664  00143E  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;ModbusRtu.c: 1176: _u8BufferSize = 8;
  8668  001440  0E08               	movlw	8
  8669  001442  6E72               	movwf	__u8BufferSize,c
  8670                           
  8671                           ;ModbusRtu.c: 1177: switch(devIdCode)
  8672  001444  D094               	goto	l5946
  8673  001446                     l5892:
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;ModbusRtu.c: 1180: _au8Buffer[ 4 ] = 0x81;
  8677  001446  0E81               	movlw	129
  8678  001448  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8679                           
  8680                           ;ModbusRtu.c: 1181: _au8Buffer[ 7 ] = 3;
  8681  00144A  0E03               	movlw	3
  8682  00144C  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8683                           
  8684                           ; BSR set to: 1
  8685                           ;ModbusRtu.c: 1182: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8686  00144E  0E5E               	movlw	low STR_4
  8687  001450  6E07               	movwf	CopyStringToBuffer@src,c
  8688  001452  0E06               	movlw	6
  8689  001454  6E08               	movwf	CopyStringToBuffer@len,c
  8690  001456  0E00               	movlw	0
  8691  001458  EC34  F013         	call	_CopyStringToBuffer
  8692                           
  8693                           ;ModbusRtu.c: 1183: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8694  00145C  0E55               	movlw	low STR_6
  8695  00145E  6E07               	movwf	CopyStringToBuffer@src,c
  8696  001460  0E09               	movlw	9
  8697  001462  6E08               	movwf	CopyStringToBuffer@len,c
  8698  001464  0E01               	movlw	1
  8699  001466  EC34  F013         	call	_CopyStringToBuffer
  8700                           
  8701                           ;ModbusRtu.c: 1184: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8702  00146A  0E64               	movlw	low STR_8
  8703  00146C  6E07               	movwf	CopyStringToBuffer@src,c
  8704  00146E  0E05               	movlw	5
  8705  001470  6E08               	movwf	CopyStringToBuffer@len,c
  8706  001472  0E02               	movlw	2
  8707  001474  EC34  F013         	call	_CopyStringToBuffer
  8708                           
  8709                           ;ModbusRtu.c: 1185: break;
  8710  001478  D084               	goto	l834
  8711  00147A                     l5900:
  8712                           
  8713                           ; BSR set to: 1
  8714                           ;ModbusRtu.c: 1187: _au8Buffer[ 4 ] = 0x82;
  8715  00147A  0E82               	movlw	130
  8716  00147C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8717                           
  8718                           ;ModbusRtu.c: 1188: _au8Buffer[ 7 ] = 4;
  8719  00147E  0E04               	movlw	4
  8720  001480  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;ModbusRtu.c: 1189: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8724  001482  0E3A               	movlw	low STR_10
  8725  001484  6E07               	movwf	CopyStringToBuffer@src,c
  8726  001486  0E10               	movlw	16
  8727  001488  6E08               	movwf	CopyStringToBuffer@len,c
  8728  00148A  0E03               	movlw	3
  8729  00148C  EC34  F013         	call	_CopyStringToBuffer
  8730                           
  8731                           ;ModbusRtu.c: 1190: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8732  001490  0E26               	movlw	low STR_12
  8733  001492  6E07               	movwf	CopyStringToBuffer@src,c
  8734  001494  0E14               	movlw	20
  8735  001496  6E08               	movwf	CopyStringToBuffer@len,c
  8736  001498  0E04               	movlw	4
  8737  00149A  EC34  F013         	call	_CopyStringToBuffer
  8738                           
  8739                           ;ModbusRtu.c: 1191: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8740  00149E  0E69               	movlw	low STR_14
  8741  0014A0  6E07               	movwf	CopyStringToBuffer@src,c
  8742  0014A2  0E04               	movlw	4
  8743  0014A4  6E08               	movwf	CopyStringToBuffer@len,c
  8744  0014A6  0E05               	movlw	5
  8745  0014A8  EC34  F013         	call	_CopyStringToBuffer
  8746                           
  8747                           ;ModbusRtu.c: 1192: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8748  0014AC  0E4A               	movlw	low STR_16
  8749  0014AE  6E07               	movwf	CopyStringToBuffer@src,c
  8750  0014B0  0E0B               	movlw	11
  8751  0014B2  6E08               	movwf	CopyStringToBuffer@len,c
  8752  0014B4  0E06               	movlw	6
  8753  0014B6  EC34  F013         	call	_CopyStringToBuffer
  8754                           
  8755                           ;ModbusRtu.c: 1193: break;
  8756  0014BA  D063               	goto	l834
  8757  0014BC                     l5910:
  8758                           
  8759                           ; BSR set to: 1
  8760                           ;ModbusRtu.c: 1195: _au8Buffer[ 7 ] = 1;
  8761  0014BC  0E01               	movlw	1
  8762  0014BE  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8763                           
  8764                           ;ModbusRtu.c: 1196: switch(objId)
  8765  0014C0  D046               	goto	l5942
  8766  0014C2                     l5912:
  8767                           
  8768                           ; BSR set to: 1
  8769                           ;ModbusRtu.c: 1199: _au8Buffer[ 4 ] = 0x81;
  8770  0014C2  0E81               	movlw	129
  8771  0014C4  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8772                           
  8773                           ; BSR set to: 1
  8774                           ;ModbusRtu.c: 1200: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8775  0014C6  0E5E               	movlw	low STR_4
  8776  0014C8  6E07               	movwf	CopyStringToBuffer@src,c
  8777  0014CA  0E06               	movlw	6
  8778  0014CC  6E08               	movwf	CopyStringToBuffer@len,c
  8779  0014CE  5018               	movf	ModbusProcess_FC43@objId,w,c
  8780  0014D0  EC34  F013         	call	_CopyStringToBuffer
  8781                           
  8782                           ;ModbusRtu.c: 1201: break;
  8783  0014D4  D056               	goto	l834
  8784  0014D6                     l5916:
  8785                           
  8786                           ; BSR set to: 1
  8787                           ;ModbusRtu.c: 1203: _au8Buffer[ 4 ] = 0x81;
  8788  0014D6  0E81               	movlw	129
  8789  0014D8  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;ModbusRtu.c: 1204: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8793  0014DA  0E55               	movlw	low STR_6
  8794  0014DC  6E07               	movwf	CopyStringToBuffer@src,c
  8795  0014DE  0E09               	movlw	9
  8796  0014E0  6E08               	movwf	CopyStringToBuffer@len,c
  8797  0014E2  5018               	movf	ModbusProcess_FC43@objId,w,c
  8798  0014E4  EC34  F013         	call	_CopyStringToBuffer
  8799                           
  8800                           ;ModbusRtu.c: 1205: break;
  8801  0014E8  D04C               	goto	l834
  8802  0014EA                     l5920:
  8803                           
  8804                           ; BSR set to: 1
  8805                           ;ModbusRtu.c: 1207: _au8Buffer[ 4 ] = 0x81;
  8806  0014EA  0E81               	movlw	129
  8807  0014EC  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8808                           
  8809                           ; BSR set to: 1
  8810                           ;ModbusRtu.c: 1208: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8811  0014EE  0E64               	movlw	low STR_8
  8812  0014F0  6E07               	movwf	CopyStringToBuffer@src,c
  8813  0014F2  0E05               	movlw	5
  8814  0014F4  6E08               	movwf	CopyStringToBuffer@len,c
  8815  0014F6  5018               	movf	ModbusProcess_FC43@objId,w,c
  8816  0014F8  EC34  F013         	call	_CopyStringToBuffer
  8817                           
  8818                           ;ModbusRtu.c: 1209: break;
  8819  0014FC  D042               	goto	l834
  8820  0014FE                     l5924:
  8821                           
  8822                           ; BSR set to: 1
  8823                           ;ModbusRtu.c: 1211: _au8Buffer[ 4 ] = 0x82;
  8824  0014FE  0E82               	movlw	130
  8825  001500  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8826                           
  8827                           ; BSR set to: 1
  8828                           ;ModbusRtu.c: 1212: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8829  001502  0E3A               	movlw	low STR_10
  8830  001504  6E07               	movwf	CopyStringToBuffer@src,c
  8831  001506  0E10               	movlw	16
  8832  001508  6E08               	movwf	CopyStringToBuffer@len,c
  8833  00150A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8834  00150C  EC34  F013         	call	_CopyStringToBuffer
  8835                           
  8836                           ;ModbusRtu.c: 1213: break;
  8837  001510  D038               	goto	l834
  8838  001512                     l5928:
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;ModbusRtu.c: 1215: _au8Buffer[ 4 ] = 0x82;
  8842  001512  0E82               	movlw	130
  8843  001514  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8844                           
  8845                           ; BSR set to: 1
  8846                           ;ModbusRtu.c: 1216: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8847  001516  0E26               	movlw	low STR_12
  8848  001518  6E07               	movwf	CopyStringToBuffer@src,c
  8849  00151A  0E14               	movlw	20
  8850  00151C  6E08               	movwf	CopyStringToBuffer@len,c
  8851  00151E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8852  001520  EC34  F013         	call	_CopyStringToBuffer
  8853                           
  8854                           ;ModbusRtu.c: 1217: break;
  8855  001524  D02E               	goto	l834
  8856  001526                     l5932:
  8857                           
  8858                           ; BSR set to: 1
  8859                           ;ModbusRtu.c: 1219: _au8Buffer[ 4 ] = 0x82;
  8860  001526  0E82               	movlw	130
  8861  001528  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8862                           
  8863                           ; BSR set to: 1
  8864                           ;ModbusRtu.c: 1220: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8865  00152A  0E69               	movlw	low STR_14
  8866  00152C  6E07               	movwf	CopyStringToBuffer@src,c
  8867  00152E  0E04               	movlw	4
  8868  001530  6E08               	movwf	CopyStringToBuffer@len,c
  8869  001532  5018               	movf	ModbusProcess_FC43@objId,w,c
  8870  001534  EC34  F013         	call	_CopyStringToBuffer
  8871                           
  8872                           ;ModbusRtu.c: 1221: break;
  8873  001538  D024               	goto	l834
  8874  00153A                     l5936:
  8875                           
  8876                           ; BSR set to: 1
  8877                           ;ModbusRtu.c: 1223: _au8Buffer[ 4 ] = 0x82;
  8878  00153A  0E82               	movlw	130
  8879  00153C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8880                           
  8881                           ; BSR set to: 1
  8882                           ;ModbusRtu.c: 1224: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8883  00153E  0E4A               	movlw	low STR_16
  8884  001540  6E07               	movwf	CopyStringToBuffer@src,c
  8885  001542  0E0B               	movlw	11
  8886  001544  6E08               	movwf	CopyStringToBuffer@len,c
  8887  001546  5018               	movf	ModbusProcess_FC43@objId,w,c
  8888  001548  EC34  F013         	call	_CopyStringToBuffer
  8889                           
  8890                           ;ModbusRtu.c: 1225: break;
  8891  00154C  D01A               	goto	l834
  8892  00154E                     l5942:
  8893  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8894                           
  8895                           ; BSR set to: 1
  8896  001550  5018               	movf	ModbusProcess_FC43@objId,w,c
  8897                           
  8898                           ; Switch size 1, requested type "speed"
  8899                           ; Number of cases is 7, Range of values is 0 to 6
  8900                           ; switch strategies available:
  8901                           ; Name         Instructions Cycles
  8902                           ; simple_byte           22    12 (average)
  8903                           ;	Chosen strategy is simple_byte
  8904  001552  E0B7               	bz	l5912
  8905  001554  0A01               	xorlw	1	; case 1
  8906  001556  E0BF               	bz	l5916
  8907  001558  0A03               	xorlw	3	; case 2
  8908  00155A  E0C7               	bz	l5920
  8909  00155C  0A01               	xorlw	1	; case 3
  8910  00155E  E0CF               	bz	l5924
  8911  001560  0A07               	xorlw	7	; case 4
  8912  001562  E0D7               	bz	l5928
  8913  001564  0A01               	xorlw	1	; case 5
  8914  001566  E0DF               	bz	l5932
  8915  001568  0A03               	xorlw	3	; case 6
  8916  00156A  E0E7               	bz	l5936
  8917  00156C  D00A               	goto	l834
  8918  00156E                     l5946:
  8919  00156E  FFFF               	dw	65535	; assembler added errata NOP
  8920                           
  8921                           ; BSR set to: 1
  8922  001570  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8923                           
  8924                           ; Switch size 1, requested type "speed"
  8925                           ; Number of cases is 3, Range of values is 1 to 4
  8926                           ; switch strategies available:
  8927                           ; Name         Instructions Cycles
  8928                           ; simple_byte           10     6 (average)
  8929                           ;	Chosen strategy is simple_byte
  8930  001572  0A01               	xorlw	1	; case 1
  8931  001574  E101 D767          	bz	l5892
  8932  001578  0A03               	xorlw	3	; case 2
  8933  00157A  E101 D77E          	bz	l5900
  8934  00157E  0A06               	xorlw	6	; case 4
  8935  001580  E09D               	bz	l5910
  8936  001582                     l834:
  8937  001582  FFFF               	dw	65535	; assembler added errata NOP
  8938                           
  8939                           ;ModbusRtu.c: 1229: uint8_t u8CopyBufferSize = _u8BufferSize;
  8940  001584  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8941                           
  8942                           ;ModbusRtu.c: 1230: ModbusSendTxBuffer();
  8943  001588  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  8944                           
  8945                           ;ModbusRtu.c: 1232: return u8CopyBufferSize;
  8946  00158C  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8947  00158E  0012               	return		;funcret
  8948  001590  FFFF               	dw	65535	; errata NOP
  8949  001592                     __end_of_ModbusProcess_FC43:
  8950                           	opt stack 0
  8951                           tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           prodh	equ	0xFF4
  8956                           prodl	equ	0xFF3
  8957                           intcon	equ	0xFF2
  8958                           postinc0	equ	0xFEE
  8959                           wreg	equ	0xFE8
  8960                           postdec1	equ	0xFE5
  8961                           fsr1h	equ	0xFE2
  8962                           fsr1l	equ	0xFE1
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           postdec2	equ	0xFDD
  8966                           plusw2	equ	0xFDB
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _CopyStringToBuffer *****************
  8972 ;; Defined at:
  8973 ;;		line 1143 in file "ModbusRtu.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  objId           1    wreg     unsigned char 
  8976 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8977 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  8978 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  8979 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  8980 ;;		 -> STR_6(9), STR_4(6), 
  8981 ;;  len             1    7[COMRAM] unsigned char 
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;  objId           1    9[COMRAM] unsigned char 
  8984 ;;  i               1   10[COMRAM] unsigned char 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/1
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8994 ;;      Params:         2       0       0       0       0       0       0
  8995 ;;      Locals:         2       0       0       0       0       0       0
  8996 ;;      Temps:          1       0       0       0       0       0       0
  8997 ;;      Totals:         5       0       0       0       0       0       0
  8998 ;;Total ram usage:        5 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    2
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		_ModbusProcess_FC43
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text43
  9009  002668                     __ptext43:
  9010                           	opt stack 0
  9011  002668                     _CopyStringToBuffer:
  9012                           	opt stack 26
  9013                           
  9014                           ;incstack = 0
  9015  002668  FFFF               	dw	65535
  9016                           
  9017                           ;CopyStringToBuffer@objId stored from wreg
  9018  00266A  6E0A               	movwf	CopyStringToBuffer@objId,c
  9019                           
  9020                           ;ModbusRtu.c: 1145: len--;
  9021  00266C  0608               	decf	CopyStringToBuffer@len,f,c
  9022                           
  9023                           ;ModbusRtu.c: 1146: _au8Buffer[_u8BufferSize++] = objId;
  9024  00266E  0E00               	movlw	low __au8Buffer
  9025  002670  2472               	addwf	__u8BufferSize,w,c
  9026  002672  6ED9               	movwf	fsr2l,c
  9027  002674  6ADA               	clrf	fsr2h,c
  9028  002676  0E01               	movlw	high __au8Buffer
  9029  002678  22DA               	addwfc	fsr2h,f,c
  9030  00267A  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  9031  00267E  2A72               	incf	__u8BufferSize,f,c
  9032                           
  9033                           ;ModbusRtu.c: 1147: _au8Buffer[_u8BufferSize++] = len;
  9034  002680  0E00               	movlw	low __au8Buffer
  9035  002682  2472               	addwf	__u8BufferSize,w,c
  9036  002684  6ED9               	movwf	fsr2l,c
  9037  002686  6ADA               	clrf	fsr2h,c
  9038  002688  0E01               	movlw	high __au8Buffer
  9039  00268A  22DA               	addwfc	fsr2h,f,c
  9040  00268C  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  9041  002690  2A72               	incf	__u8BufferSize,f,c
  9042                           
  9043                           ;ModbusRtu.c: 1148: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  9044  002692  6A0B               	clrf	CopyStringToBuffer@i,c
  9045  002694  D013               	goto	l3786
  9046  002696                     l3780:
  9047                           
  9048                           ;ModbusRtu.c: 1149: _au8Buffer[_u8BufferSize] = src[i];
  9049  002696  5007               	movf	CopyStringToBuffer@src,w,c
  9050  002698  240B               	addwf	CopyStringToBuffer@i,w,c
  9051  00269A  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  9052  00269C  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  9053  0026A0                     	if	1	;There is more than 1 active tblptr byte
  9054  0026A0  0E06               	movlw	high __smallconst
  9055  0026A2  6EF7               	movwf	tblptrh,c
  9056  0026A4                     	endif
  9057  0026A4                     	if	0	;tblptru may be non-zero
  9058  0026A4                     	endif
  9059  0026A4                     	if	0	;tblptru may be non-zero
  9060  0026A4                     	endif
  9061  0026A4  0E00               	movlw	low __au8Buffer
  9062  0026A6  2472               	addwf	__u8BufferSize,w,c
  9063  0026A8  6ED9               	movwf	fsr2l,c
  9064  0026AA  6ADA               	clrf	fsr2h,c
  9065  0026AC  0E01               	movlw	high __au8Buffer
  9066  0026AE  22DA               	addwfc	fsr2h,f,c
  9067  0026B0  0008               	tblrd		*
  9068  0026B2  FFFF               	dw	65535	; errata NOP
  9069  0026B4  CFF5 FFDF          	movff	tablat,indf2
  9070  0026B8  2A0B               	incf	CopyStringToBuffer@i,f,c
  9071  0026BA  2A72               	incf	__u8BufferSize,f,c
  9072  0026BC                     l3786:
  9073  0026BC  FFFF               	dw	65535	; assembler added errata NOP
  9074  0026BE  5008               	movf	CopyStringToBuffer@len,w,c
  9075  0026C0  5C0B               	subwf	CopyStringToBuffer@i,w,c
  9076  0026C2  E3E9               	bnc	l3780
  9077  0026C4  0012               	return		;funcret
  9078  0026C6  FFFF               	dw	65535	; errata NOP
  9079  0026C8                     __end_of_CopyStringToBuffer:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           postinc0	equ	0xFEE
  9089                           wreg	equ	0xFE8
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           plusw2	equ	0xFDB
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _ModbusProcess_FC3 *****************
  9102 ;; Defined at:
  9103 ;;		line 885 in file "ModbusRtu.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9106 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  9107 ;;  u8size          1   23[COMRAM] unsigned char 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  u16regsno       2   29[COMRAM] unsigned short 
  9110 ;;  i               1   32[COMRAM] unsigned char 
  9111 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  9112 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      unsigned char 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : E/1
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9122 ;;      Params:         3       0       0       0       0       0       0
  9123 ;;      Locals:         5       0       0       0       0       0       0
  9124 ;;      Temps:          4       0       0       0       0       0       0
  9125 ;;      Totals:        12       0       0       0       0       0       0
  9126 ;;Total ram usage:       12 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    4
  9129 ;; This function calls:
  9130 ;;		_ModbusSendTxBuffer
  9131 ;; This function is called by:
  9132 ;;		_ModbusPoll
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           	psect	text44
  9137  002040                     __ptext44:
  9138                           	opt stack 0
  9139  002040                     _ModbusProcess_FC3:
  9140                           	opt stack 25
  9141                           
  9142                           ;incstack = 0
  9143  002040  FFFF               	dw	65535
  9144                           
  9145                           ;ModbusRtu.c: 887: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  9146  002042  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  9147                           
  9148                           ;ModbusRtu.c: 888: _lastAddress = u8StartAdd;
  9149  002046  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  9150  00204A  0100               	movlb	0	; () banked
  9151  00204C  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;ModbusRtu.c: 889: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9155  00204E  0101               	movlb	1	; () banked
  9156  002050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9157  002052  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9158  002054  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9159  002056  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  9160  002058  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  9161                           
  9162                           ; BSR set to: 1
  9163                           ;ModbusRtu.c: 890: _lastCount = u16regsno;
  9164  00205C  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  9165  002060  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  9166                           
  9167                           ; BSR set to: 1
  9168                           ;ModbusRtu.c: 891: uint8_t u8CopyBufferSize;
  9169                           ;ModbusRtu.c: 892: uint8_t i;
  9170                           ;ModbusRtu.c: 894: _au8Buffer[ 2 ] = u16regsno * 2;
  9171  002064  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  9172  002066  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9173  002068  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9174                           
  9175                           ; BSR set to: 1
  9176                           ;ModbusRtu.c: 895: _u8BufferSize = 3;
  9177  00206A  0E03               	movlw	3
  9178  00206C  6E72               	movwf	__u8BufferSize,c
  9179                           
  9180                           ; BSR set to: 1
  9181                           ;ModbusRtu.c: 897: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  9182  00206E  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  9183  002072  D02A               	goto	l5682
  9184  002074                     l5676:
  9185                           
  9186                           ; BSR set to: 1
  9187                           ;ModbusRtu.c: 898: {
  9188                           ;ModbusRtu.c: 899: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  9189  002074  0E00               	movlw	low __au8Buffer
  9190  002076  2472               	addwf	__u8BufferSize,w,c
  9191  002078  6ED9               	movwf	fsr2l,c
  9192  00207A  6ADA               	clrf	fsr2h,c
  9193  00207C  0E01               	movlw	high __au8Buffer
  9194  00207E  22DA               	addwfc	fsr2h,f,c
  9195  002080  5021               	movf	ModbusProcess_FC3@i,w,c
  9196  002082  0D02               	mullw	2
  9197  002084  50F3               	movf	prodl,w,c
  9198  002086  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9199  002088  6EE1               	movwf	fsr1l,c
  9200  00208A  50F4               	movf	prodh,w,c
  9201  00208C  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9202  00208E  6EE2               	movwf	fsr1h,c
  9203  002090  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  9204  002094  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  9205  002098  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  9206  00209C  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  9207  00209E  5019               	movf	??_ModbusProcess_FC3,w,c
  9208  0020A0  6EDF               	movwf	indf2,c
  9209                           
  9210                           ; BSR set to: 1
  9211                           ;ModbusRtu.c: 900: _u8BufferSize++;
  9212  0020A2  2A72               	incf	__u8BufferSize,f,c
  9213                           
  9214                           ; BSR set to: 1
  9215                           ;ModbusRtu.c: 901: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  9216  0020A4  5021               	movf	ModbusProcess_FC3@i,w,c
  9217  0020A6  0D02               	mullw	2
  9218  0020A8  50F3               	movf	prodl,w,c
  9219  0020AA  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9220  0020AC  6ED9               	movwf	fsr2l,c
  9221  0020AE  50F4               	movf	prodh,w,c
  9222  0020B0  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9223  0020B2  6EDA               	movwf	fsr2h,c
  9224  0020B4  0E00               	movlw	low __au8Buffer
  9225  0020B6  2472               	addwf	__u8BufferSize,w,c
  9226  0020B8  6EE1               	movwf	fsr1l,c
  9227  0020BA  6AE2               	clrf	fsr1h,c
  9228  0020BC  0E01               	movlw	high __au8Buffer
  9229  0020BE  22E2               	addwfc	fsr1h,f,c
  9230  0020C0  CFDF FFE7          	movff	indf2,indf1
  9231                           
  9232                           ;ModbusRtu.c: 902: _u8BufferSize++;
  9233  0020C4  2A72               	incf	__u8BufferSize,f,c
  9234  0020C6  2A21               	incf	ModbusProcess_FC3@i,f,c
  9235  0020C8                     l5682:
  9236  0020C8  FFFF               	dw	65535	; assembler added errata NOP
  9237                           
  9238                           ; BSR set to: 1
  9239  0020CA  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  9240  0020CC  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9241  0020CE  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9242  0020D0  0E00               	movlw	0
  9243  0020D2  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  9244  0020D4  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  9245  0020D6  5021               	movf	ModbusProcess_FC3@i,w,c
  9246  0020D8  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  9247  0020DA  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  9248  0020DC  5019               	movf	??_ModbusProcess_FC3,w,c
  9249  0020DE  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  9250  0020E0  501A               	movf	??_ModbusProcess_FC3+1,w,c
  9251  0020E2  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  9252  0020E4  E3C7               	bnc	l5676
  9253                           
  9254                           ; BSR set to: 1
  9255                           ;ModbusRtu.c: 903: }
  9256                           ;ModbusRtu.c: 904: u8CopyBufferSize = _u8BufferSize + 2;
  9257  0020E6  5072               	movf	__u8BufferSize,w,c
  9258  0020E8  0F02               	addlw	2
  9259  0020EA  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  9260                           
  9261                           ; BSR set to: 1
  9262                           ;ModbusRtu.c: 905: ModbusSendTxBuffer();
  9263  0020EC  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  9264                           
  9265                           ;ModbusRtu.c: 907: return u8CopyBufferSize;
  9266  0020F0  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  9267  0020F2  0012               	return		;funcret
  9268  0020F4  FFFF               	dw	65535	; errata NOP
  9269  0020F6                     __end_of_ModbusProcess_FC3:
  9270                           	opt stack 0
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           intcon	equ	0xFF2
  9278                           postinc0	equ	0xFEE
  9279                           wreg	equ	0xFE8
  9280                           indf1	equ	0xFE7
  9281                           postinc1	equ	0xFE6
  9282                           postdec1	equ	0xFE5
  9283                           fsr1h	equ	0xFE2
  9284                           fsr1l	equ	0xFE1
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           postdec2	equ	0xFDD
  9288                           plusw2	equ	0xFDB
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function _ModbusProcess_FC21 *****************
  9294 ;; Defined at:
  9295 ;;		line 1111 in file "ModbusRtu.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  9300 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  9301 ;;  i               1   29[COMRAM] unsigned char 
  9302 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  9303 ;;  requestDataL    1   23[COMRAM] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      unsigned char 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : E/1
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9313 ;;      Params:         0       0       0       0       0       0       0
  9314 ;;      Locals:         7       0       0       0       0       0       0
  9315 ;;      Temps:          2       0       0       0       0       0       0
  9316 ;;      Totals:         9       0       0       0       0       0       0
  9317 ;;Total ram usage:        9 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    4
  9320 ;; This function calls:
  9321 ;;		_ModbusSendTxBuffer
  9322 ;; This function is called by:
  9323 ;;		_ModbusPoll
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text45
  9328  0021A4                     __ptext45:
  9329                           	opt stack 0
  9330  0021A4                     _ModbusProcess_FC21:
  9331                           	opt stack 25
  9332                           
  9333                           ;incstack = 0
  9334  0021A4  FFFF               	dw	65535
  9335                           
  9336                           ;ModbusRtu.c: 1115: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  9337  0021A6  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  9338                           
  9339                           ;ModbusRtu.c: 1117: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  9340  0021AA  0101               	movlb	1	; () banked
  9341  0021AC  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  9342  0021AE  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  9343  0021B2  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9344  0021B4  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9345  0021B8  6A16               	clrf	??_ModbusProcess_FC21,c
  9346  0021BA  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9347  0021BC  90D8               	bcf	status,0,c
  9348  0021BE  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9349  0021C0  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  9350  0021C2  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9351  0021C4  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  9352                           
  9353                           ; BSR set to: 1
  9354                           ;ModbusRtu.c: 1118: _lastAddress = startAddrsBytes;
  9355  0021C6  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  9356  0021CA  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  9357                           
  9358                           ;ModbusRtu.c: 1119: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  9359  0021CE  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  9360  0021D0  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  9361  0021D4  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9362  0021D6  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9363  0021DA  6A16               	clrf	??_ModbusProcess_FC21,c
  9364  0021DC  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9365  0021DE  90D8               	bcf	status,0,c
  9366  0021E0  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9367  0021E2  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  9368  0021E4  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9369  0021E6  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  9370                           
  9371                           ; BSR set to: 1
  9372                           ;ModbusRtu.c: 1120: _lastCount = recLenBytes;
  9373  0021E8  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  9374  0021EC  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  9375                           
  9376                           ;ModbusRtu.c: 1121: uint8_t u8CopyBufferSize;
  9377                           ;ModbusRtu.c: 1122: uint8_t i;
  9378                           ;ModbusRtu.c: 1128: _u8BufferSize = requestDataLen + 1;
  9379  0021F0  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  9380  0021F2  6E72               	movwf	__u8BufferSize,c
  9381                           
  9382                           ; BSR set to: 1
  9383                           ;ModbusRtu.c: 1132: for (i = 0; i < recLenBytes; i++)
  9384  0021F4  6A1E               	clrf	ModbusProcess_FC21@i,c
  9385  0021F6  D01C               	goto	l5880
  9386  0021F8                     l816:
  9387  0021F8  FFFF               	dw	65535	; assembler added errata NOP
  9388                           
  9389                           ; BSR set to: 1
  9390  0021FA  B2A6               	btfsc	4006,1,c	;volatile
  9391  0021FC  D7FD               	goto	l816
  9392                           
  9393                           ; BSR set to: 1
  9394  0021FE  501E               	movf	ModbusProcess_FC21@i,w,c
  9395  002200  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  9396  002202  6EA9               	movwf	4009,c	;volatile
  9397                           
  9398                           ; BSR set to: 1
  9399  002204  0E0A               	movlw	low (__au8Buffer+10)
  9400  002206  241E               	addwf	ModbusProcess_FC21@i,w,c
  9401  002208  6ED9               	movwf	fsr2l,c
  9402  00220A  6ADA               	clrf	fsr2h,c
  9403  00220C  0E01               	movlw	high (__au8Buffer+10)
  9404  00220E  22DA               	addwfc	fsr2h,f,c
  9405  002210  50DF               	movf	indf2,w,c
  9406  002212  6EA8               	movwf	4008,c	;volatile
  9407                           
  9408                           ; BSR set to: 1
  9409  002214  90D8               	bcf	status,0,c	;volatile
  9410                           
  9411                           ; BSR set to: 1
  9412  002216  BEF2               	btfsc	intcon,7,c	;volatile
  9413                           
  9414                           ; BSR set to: 1
  9415  002218  80D8               	bsf	status,0,c	;volatile
  9416                           
  9417                           ; BSR set to: 1
  9418  00221A  9EF2               	bcf	intcon,7,c	;volatile
  9419  00221C  84A6               	bsf	4006,2,c	;volatile
  9420                           
  9421                           ; BSR set to: 1
  9422  00221E  0E55               	movlw	85
  9423  002220  6EA7               	movwf	4007,c	;volatile
  9424  002222  0EAA               	movlw	170
  9425  002224  6EA7               	movwf	4007,c	;volatile
  9426                           
  9427                           ; BSR set to: 1
  9428  002226  82A6               	bsf	4006,1,c	;volatile
  9429                           
  9430                           ; BSR set to: 1
  9431  002228  94A6               	bcf	4006,2,c	;volatile
  9432                           
  9433                           ; BSR set to: 1
  9434  00222A  E301               	bnc	l5878
  9435                           
  9436                           ; BSR set to: 1
  9437  00222C  8EF2               	bsf	intcon,7,c	;volatile
  9438  00222E                     l5878:
  9439                           
  9440                           ; BSR set to: 1
  9441  00222E  2A1E               	incf	ModbusProcess_FC21@i,f,c
  9442  002230                     l5880:
  9443  002230  FFFF               	dw	65535	; assembler added errata NOP
  9444                           
  9445                           ; BSR set to: 1
  9446  002232  501E               	movf	ModbusProcess_FC21@i,w,c
  9447  002234  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  9448  002236  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9449  002238  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  9450  00223A  5C16               	subwf	??_ModbusProcess_FC21,w,c
  9451  00223C  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  9452  00223E  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  9453  002240  E3DB               	bnc	l816
  9454                           
  9455                           ; BSR set to: 1
  9456                           ;ModbusRtu.c: 1135: }
  9457                           ;ModbusRtu.c: 1137: u8CopyBufferSize = _u8BufferSize;
  9458  002242  C072  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  9459                           
  9460                           ; BSR set to: 1
  9461                           ;ModbusRtu.c: 1138: ModbusSendTxBuffer();
  9462  002246  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  9463                           
  9464                           ;ModbusRtu.c: 1140: return u8CopyBufferSize;
  9465  00224A  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  9466  00224C  0012               	return		;funcret
  9467  00224E  FFFF               	dw	65535	; errata NOP
  9468  002250                     __end_of_ModbusProcess_FC21:
  9469                           	opt stack 0
  9470                           tblptru	equ	0xFF8
  9471                           tblptrh	equ	0xFF7
  9472                           tblptrl	equ	0xFF6
  9473                           tablat	equ	0xFF5
  9474                           prodh	equ	0xFF4
  9475                           prodl	equ	0xFF3
  9476                           intcon	equ	0xFF2
  9477                           postinc0	equ	0xFEE
  9478                           wreg	equ	0xFE8
  9479                           indf1	equ	0xFE7
  9480                           postinc1	equ	0xFE6
  9481                           postdec1	equ	0xFE5
  9482                           fsr1h	equ	0xFE2
  9483                           fsr1l	equ	0xFE1
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           plusw2	equ	0xFDB
  9488                           fsr2h	equ	0xFDA
  9489                           fsr2l	equ	0xFD9
  9490                           status	equ	0xFD8
  9491                           
  9492 ;; *************** function _ModbusProcess_FC17 *****************
  9493 ;; Defined at:
  9494 ;;		line 1086 in file "ModbusRtu.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;		None
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  i               1   23[COMRAM] unsigned char 
  9499 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  9500 ;; Return value:  Size  Location     Type
  9501 ;;                  1    wreg      unsigned char 
  9502 ;; Registers used:
  9503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9504 ;; Tracked objects:
  9505 ;;		On entry : E/1
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9509 ;;      Params:         0       0       0       0       0       0       0
  9510 ;;      Locals:         2       0       0       0       0       0       0
  9511 ;;      Temps:          1       0       0       0       0       0       0
  9512 ;;      Totals:         3       0       0       0       0       0       0
  9513 ;;Total ram usage:        3 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; Hardware stack levels required when called:    4
  9516 ;; This function calls:
  9517 ;;		_ModbusSendTxBuffer
  9518 ;; This function is called by:
  9519 ;;		_ModbusPoll
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text46
  9524  00252E                     __ptext46:
  9525                           	opt stack 0
  9526  00252E                     _ModbusProcess_FC17:
  9527                           	opt stack 25
  9528                           
  9529                           ;incstack = 0
  9530  00252E  FFFF               	dw	65535
  9531                           
  9532                           ;ModbusRtu.c: 1088: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  9533  002530  0E1B               	movlw	27
  9534  002532  0101               	movlb	1	; () banked
  9535  002534  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9536                           
  9537                           ;ModbusRtu.c: 1090: _u8BufferSize = 3;
  9538  002536  0E03               	movlw	3
  9539  002538  6E72               	movwf	__u8BufferSize,c
  9540                           
  9541                           ; BSR set to: 1
  9542                           ;ModbusRtu.c: 1092: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  9543  00253A  6A18               	clrf	ModbusProcess_FC17@i,c
  9544  00253C                     l5826:
  9545  00253C  FFFF               	dw	65535	; assembler added errata NOP
  9546                           
  9547                           ; BSR set to: 1
  9548                           ;ModbusRtu.c: 1093: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  9549  00253E  5018               	movf	ModbusProcess_FC17@i,w,c
  9550  002540  0F0D               	addlw	low STR_3
  9551  002542  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  9552  002544  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  9553  002548                     	if	1	;There is more than 1 active tblptr byte
  9554  002548  0E06               	movlw	high __smallconst
  9555  00254A  6EF7               	movwf	tblptrh,c
  9556  00254C                     	endif
  9557  00254C                     	if	0	;tblptru may be non-zero
  9558  00254C                     	endif
  9559  00254C                     	if	0	;tblptru may be non-zero
  9560  00254C                     	endif
  9561  00254C  0E00               	movlw	low __au8Buffer
  9562  00254E  2472               	addwf	__u8BufferSize,w,c
  9563  002550  6ED9               	movwf	fsr2l,c
  9564  002552  6ADA               	clrf	fsr2h,c
  9565  002554  0E01               	movlw	high __au8Buffer
  9566  002556  22DA               	addwfc	fsr2h,f,c
  9567  002558  0008               	tblrd		*
  9568  00255A  FFFF               	dw	65535	; errata NOP
  9569  00255C  CFF5 FFDF          	movff	tablat,indf2
  9570                           
  9571                           ; BSR set to: 1
  9572  002560  2A18               	incf	ModbusProcess_FC17@i,f,c
  9573                           
  9574                           ; BSR set to: 1
  9575  002562  2A72               	incf	__u8BufferSize,f,c
  9576                           
  9577                           ; BSR set to: 1
  9578  002564  0E18               	movlw	24
  9579  002566  6418               	cpfsgt	ModbusProcess_FC17@i,c
  9580  002568  D7E9               	goto	l5826
  9581                           
  9582                           ; BSR set to: 1
  9583                           ;ModbusRtu.c: 1095: _au8Buffer[_u8BufferSize++] = '!';
  9584  00256A  0E00               	movlw	low __au8Buffer
  9585  00256C  2472               	addwf	__u8BufferSize,w,c
  9586  00256E  6ED9               	movwf	fsr2l,c
  9587  002570  6ADA               	clrf	fsr2h,c
  9588  002572  0E01               	movlw	high __au8Buffer
  9589  002574  22DA               	addwfc	fsr2h,f,c
  9590  002576  0E21               	movlw	33
  9591  002578  6EDF               	movwf	indf2,c
  9592                           
  9593                           ; BSR set to: 1
  9594  00257A  2A72               	incf	__u8BufferSize,f,c
  9595                           
  9596                           ; BSR set to: 1
  9597                           ;ModbusRtu.c: 1096: _au8Buffer[_u8BufferSize++] = '>';
  9598  00257C  0E00               	movlw	low __au8Buffer
  9599  00257E  2472               	addwf	__u8BufferSize,w,c
  9600  002580  6ED9               	movwf	fsr2l,c
  9601  002582  6ADA               	clrf	fsr2h,c
  9602  002584  0E01               	movlw	high __au8Buffer
  9603  002586  22DA               	addwfc	fsr2h,f,c
  9604  002588  0E3E               	movlw	62
  9605  00258A  6EDF               	movwf	indf2,c
  9606  00258C  2A72               	incf	__u8BufferSize,f,c
  9607                           
  9608                           ; BSR set to: 1
  9609                           ;ModbusRtu.c: 1097: uint8_t u8CopyBufferSize = _u8BufferSize;
  9610  00258E  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9611                           
  9612                           ; BSR set to: 1
  9613                           ;ModbusRtu.c: 1098: ModbusSendTxBuffer();
  9614  002592  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  9615                           
  9616                           ;ModbusRtu.c: 1100: return u8CopyBufferSize;
  9617  002596  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9618  002598  0012               	return		;funcret
  9619  00259A  FFFF               	dw	65535	; errata NOP
  9620  00259C                     __end_of_ModbusProcess_FC17:
  9621                           	opt stack 0
  9622                           tblptru	equ	0xFF8
  9623                           tblptrh	equ	0xFF7
  9624                           tblptrl	equ	0xFF6
  9625                           tablat	equ	0xFF5
  9626                           prodh	equ	0xFF4
  9627                           prodl	equ	0xFF3
  9628                           intcon	equ	0xFF2
  9629                           postinc0	equ	0xFEE
  9630                           wreg	equ	0xFE8
  9631                           indf1	equ	0xFE7
  9632                           postinc1	equ	0xFE6
  9633                           postdec1	equ	0xFE5
  9634                           fsr1h	equ	0xFE2
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           plusw2	equ	0xFDB
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function _ModbusProcess_FC16 *****************
  9645 ;; Defined at:
  9646 ;;		line 1047 in file "ModbusRtu.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9649 ;;		 -> _MODBUSHoldingRegs(30), 
  9650 ;;  u8size          1   23[COMRAM] unsigned char 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9653 ;;  temp            2   28[COMRAM] unsigned short 
  9654 ;;  i               1   34[COMRAM] unsigned char 
  9655 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9656 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      unsigned char 
  9659 ;; Registers used:
  9660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : E/1
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9666 ;;      Params:         3       0       0       0       0       0       0
  9667 ;;      Locals:         7       0       0       0       0       0       0
  9668 ;;      Temps:          4       0       0       0       0       0       0
  9669 ;;      Totals:        14       0       0       0       0       0       0
  9670 ;;Total ram usage:       14 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    4
  9673 ;; This function calls:
  9674 ;;		_ModbusSendTxBuffer
  9675 ;; This function is called by:
  9676 ;;		_ModbusPoll
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text47
  9681  001DF6                     __ptext47:
  9682                           	opt stack 0
  9683  001DF6                     _ModbusProcess_FC16:
  9684                           	opt stack 25
  9685                           
  9686                           ;incstack = 0
  9687  001DF6  FFFF               	dw	65535
  9688                           
  9689                           ;ModbusRtu.c: 1050: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9690  001DF8  0101               	movlb	1	; () banked
  9691  001DFA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9692  001DFC  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9693  001E00  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9694  001E02  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9695  001E06  6A19               	clrf	??_ModbusProcess_FC16,c
  9696  001E08  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9697  001E0A  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9698  001E0C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9699  001E0E  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9700                           
  9701                           ; BSR set to: 1
  9702                           ;ModbusRtu.c: 1051: _lastAddress = u16StartAdd;
  9703  001E10  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9704  001E14  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9705                           
  9706                           ; BSR set to: 1
  9707                           ;ModbusRtu.c: 1052: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9708  001E18  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9709                           
  9710                           ; BSR set to: 1
  9711                           ;ModbusRtu.c: 1053: _lastCount = u8regsno;
  9712  001E1C  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9713  001E20  0100               	movlb	0	; () banked
  9714  001E22  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;ModbusRtu.c: 1054: uint8_t u8CopyBufferSize;
  9718                           ;ModbusRtu.c: 1055: uint8_t i;
  9719                           ;ModbusRtu.c: 1056: uint16_t temp;
  9720                           ;ModbusRtu.c: 1059: _au8Buffer[ NB_HI ] = 0;
  9721  001E24  0101               	movlb	1	; () banked
  9722  001E26  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9723                           
  9724                           ; BSR set to: 1
  9725                           ;ModbusRtu.c: 1060: _au8Buffer[ NB_LO ] = u8regsno;
  9726  001E28  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9727                           
  9728                           ; BSR set to: 1
  9729                           ;ModbusRtu.c: 1061: _u8BufferSize = RESPONSE_SIZE;
  9730  001E2C  0E06               	movlw	6
  9731  001E2E  6E72               	movwf	__u8BufferSize,c
  9732                           
  9733                           ; BSR set to: 1
  9734                           ;ModbusRtu.c: 1064: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9735  001E30  6A23               	clrf	ModbusProcess_FC16@i,c
  9736  001E32  D02C               	goto	l5806
  9737  001E34                     l5800:
  9738                           
  9739                           ; BSR set to: 1
  9740                           ;ModbusRtu.c: 1065: {
  9741                           ;ModbusRtu.c: 1066: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9742  001E34  5023               	movf	ModbusProcess_FC16@i,w,c
  9743  001E36  0D02               	mullw	2
  9744  001E38  0E08               	movlw	low (__au8Buffer+8)
  9745  001E3A  24F3               	addwf	prodl,w,c
  9746  001E3C  6ED9               	movwf	fsr2l,c
  9747  001E3E  0E01               	movlw	high (__au8Buffer+8)
  9748  001E40  20F4               	addwfc	prodh,w,c
  9749  001E42  6EDA               	movwf	fsr2h,c
  9750  001E44  50DF               	movf	indf2,w,c
  9751  001E46  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9752  001E48  5023               	movf	ModbusProcess_FC16@i,w,c
  9753  001E4A  0D02               	mullw	2
  9754  001E4C  0E07               	movlw	low (__au8Buffer+7)
  9755  001E4E  24F3               	addwf	prodl,w,c
  9756  001E50  6ED9               	movwf	fsr2l,c
  9757  001E52  0E01               	movlw	high (__au8Buffer+7)
  9758  001E54  20F4               	addwfc	prodh,w,c
  9759  001E56  6EDA               	movwf	fsr2h,c
  9760  001E58  50DF               	movf	indf2,w,c
  9761  001E5A  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9762  001E5C  5019               	movf	??_ModbusProcess_FC16,w,c
  9763  001E5E  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9764  001E60  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9765                           
  9766                           ; BSR set to: 1
  9767                           ;ModbusRtu.c: 1070: regs[ u16StartAdd + i ] = temp;
  9768  001E64  5023               	movf	ModbusProcess_FC16@i,w,c
  9769  001E66  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9770  001E68  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9771  001E6A  0E00               	movlw	0
  9772  001E6C  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9773  001E6E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9774  001E70  90D8               	bcf	status,0,c
  9775  001E72  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9776  001E74  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9777  001E76  5019               	movf	??_ModbusProcess_FC16,w,c
  9778  001E78  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9779  001E7A  6ED9               	movwf	fsr2l,c
  9780  001E7C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9781  001E7E  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9782  001E80  6EDA               	movwf	fsr2h,c
  9783  001E82  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9784  001E86  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9785                           
  9786                           ; BSR set to: 1
  9787  001E8A  2A23               	incf	ModbusProcess_FC16@i,f,c
  9788  001E8C                     l5806:
  9789  001E8C  FFFF               	dw	65535	; assembler added errata NOP
  9790                           
  9791                           ; BSR set to: 1
  9792  001E8E  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9793  001E90  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9794  001E92  E20E               	bc	l5810
  9795                           
  9796                           ; BSR set to: 1
  9797  001E94  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9798  001E96  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9799  001E98  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9800  001E9A  5023               	movf	ModbusProcess_FC16@i,w,c
  9801  001E9C  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9802  001E9E  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9803  001EA0  0E00               	movlw	0
  9804  001EA2  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9805  001EA4  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9806  001EA6  5019               	movf	??_ModbusProcess_FC16,w,c
  9807  001EA8  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9808  001EAA  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9809  001EAC  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9810  001EAE  E3C2               	bnc	l5800
  9811  001EB0                     l5810:
  9812                           
  9813                           ; BSR set to: 1
  9814                           ;ModbusRtu.c: 1071: }
  9815                           ;ModbusRtu.c: 1072: u8CopyBufferSize = _u8BufferSize + 2;
  9816  001EB0  5072               	movf	__u8BufferSize,w,c
  9817  001EB2  0F02               	addlw	2
  9818  001EB4  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9819                           
  9820                           ; BSR set to: 1
  9821                           ;ModbusRtu.c: 1073: ModbusSendTxBuffer();
  9822  001EB6  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
  9823                           
  9824                           ;ModbusRtu.c: 1075: return u8CopyBufferSize;
  9825  001EBA  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9826  001EBC  0012               	return		;funcret
  9827  001EBE  FFFF               	dw	65535	; errata NOP
  9828  001EC0                     __end_of_ModbusProcess_FC16:
  9829                           	opt stack 0
  9830                           tblptru	equ	0xFF8
  9831                           tblptrh	equ	0xFF7
  9832                           tblptrl	equ	0xFF6
  9833                           tablat	equ	0xFF5
  9834                           prodh	equ	0xFF4
  9835                           prodl	equ	0xFF3
  9836                           intcon	equ	0xFF2
  9837                           postinc0	equ	0xFEE
  9838                           wreg	equ	0xFE8
  9839                           indf1	equ	0xFE7
  9840                           postinc1	equ	0xFE6
  9841                           postdec1	equ	0xFE5
  9842                           fsr1h	equ	0xFE2
  9843                           fsr1l	equ	0xFE1
  9844                           indf2	equ	0xFDF
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           plusw2	equ	0xFDB
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function _ModbusProcess_FC15 *****************
  9853 ;; Defined at:
  9854 ;;		line 989 in file "ModbusRtu.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  regs            1    wreg     PTR unsigned short 
  9857 ;;		 -> _MODBUSCoils(2), 
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9860 ;;		 -> _MODBUSCoils(2), 
  9861 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9862 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9863 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9864 ;;  u16coil         2   26[COMRAM] unsigned short 
  9865 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9866 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9867 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9868 ;;  bTemp           1   29[COMRAM] unsigned char 
  9869 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  1    wreg      unsigned char 
  9872 ;; Registers used:
  9873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : E/1
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9879 ;;      Params:         0       0       0       0       0       0       0
  9880 ;;      Locals:        14       0       0       0       0       0       0
  9881 ;;      Temps:          5       0       0       0       0       0       0
  9882 ;;      Totals:        19       0       0       0       0       0       0
  9883 ;;Total ram usage:       19 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    4
  9886 ;; This function calls:
  9887 ;;		_ModbusSendTxBuffer
  9888 ;; This function is called by:
  9889 ;;		_ModbusPoll
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text48
  9894  001902                     __ptext48:
  9895                           	opt stack 0
  9896  001902                     _ModbusProcess_FC15:
  9897                           	opt stack 25
  9898                           
  9899                           ;incstack = 0
  9900  001902  FFFF               	dw	65535
  9901                           
  9902                           ;ModbusProcess_FC15@regs stored from wreg
  9903  001904  6E24               	movwf	ModbusProcess_FC15@regs,c
  9904                           
  9905                           ;ModbusRtu.c: 992: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9906                           ;ModbusRtu.c: 993: uint8_t u8CopyBufferSize;
  9907                           ;ModbusRtu.c: 994: uint16_t u16currentCoil, u16coil;
  9908                           ;ModbusRtu.c: 995: boolean bTemp;
  9909                           ;ModbusRtu.c: 998: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9910  001906  0101               	movlb	1	; () banked
  9911  001908  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9912  00190A  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9913  00190C  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9914  00190E  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9915  001910  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9916                           
  9917                           ; BSR set to: 1
  9918                           ;ModbusRtu.c: 999: _lastAddress = u16StartCoil;
  9919  001914  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9920  001918  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9921                           
  9922                           ;ModbusRtu.c: 1000: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9923  00191C  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9924  00191E  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9925  001920  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9926  001922  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9927  001924  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9928                           
  9929                           ; BSR set to: 1
  9930                           ;ModbusRtu.c: 1001: _lastCount = u16Coilno;
  9931  001928  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9932  00192C  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9933                           
  9934                           ; BSR set to: 1
  9935                           ;ModbusRtu.c: 1004: u8bitsno = 0;
  9936  001930  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9937                           
  9938                           ;ModbusRtu.c: 1005: u8frameByte = 7;
  9939  001932  0E07               	movlw	7
  9940  001934  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9941                           
  9942                           ; BSR set to: 1
  9943                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9944  001936  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9945  001938  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9946  00193A  D058               	goto	l5772
  9947  00193C                     l5752:
  9948                           
  9949                           ;ModbusRtu.c: 1007: {
  9950                           ;ModbusRtu.c: 1009: u16coil = u16StartCoil + u16currentCoil;
  9951  00193C  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9952  00193E  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9953  001940  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9954  001942  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9955  001944  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9956  001946  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9957                           
  9958                           ;ModbusRtu.c: 1011: u8currentBit = (uint8_t) u16coil;
  9959  001948  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9960                           
  9961                           ;ModbusRtu.c: 1013: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9962  00194C  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9963  001950  0E00               	movlw	low __au8Buffer
  9964  001952  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9965  001954  6ED9               	movwf	fsr2l,c
  9966  001956  6ADA               	clrf	fsr2h,c
  9967  001958  0E01               	movlw	high __au8Buffer
  9968  00195A  22DA               	addwfc	fsr2h,f,c
  9969  00195C  50DF               	movf	indf2,w,c
  9970  00195E  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9971  001960  2A16               	incf	??_ModbusProcess_FC15,f,c
  9972  001962  D003               	goto	u4914
  9973  001964                     u4915:
  9974  001964  FFFF               	dw	65535	; assembler added errata NOP
  9975  001966  90D8               	bcf	status,0,c
  9976  001968  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9977  00196A                     u4914:
  9978  00196A  FFFF               	dw	65535	; assembler added errata NOP
  9979  00196C  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9980  00196E  D7FA               	goto	u4915
  9981  001970  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9982  001972  0B01               	andlw	1
  9983  001974  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9984                           
  9985                           ;ModbusRtu.c: 1017: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9986  001976  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9987  001978  E016               	bz	l5762
  9988  00197A  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9989  00197E  0E01               	movlw	1
  9990  001980  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9991  001982  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9992  001984  2A16               	incf	??_ModbusProcess_FC15,f,c
  9993  001986  D004               	goto	u4934
  9994  001988                     u4935:
  9995  001988  FFFF               	dw	65535	; assembler added errata NOP
  9996  00198A  90D8               	bcf	status,0,c
  9997  00198C  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9998  00198E  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9999  001990                     u4934:
 10000  001990  FFFF               	dw	65535	; assembler added errata NOP
 10001  001992  2E16               	decfsz	??_ModbusProcess_FC15,f,c
 10002  001994  D7F9               	goto	u4935
 10003  001996  5024               	movf	ModbusProcess_FC15@regs,w,c
 10004  001998  6ED9               	movwf	fsr2l,c
 10005  00199A  6ADA               	clrf	fsr2h,c
 10006  00199C  5017               	movf	??_ModbusProcess_FC15+1,w,c
 10007  00199E  12DE               	iorwf	postinc2,f,c
 10008  0019A0  5018               	movf	??_ModbusProcess_FC15+2,w,c
 10009  0019A2  12DD               	iorwf	postdec2,f,c
 10010  0019A4  D019               	goto	l5764
 10011  0019A6                     l5762:
 10012  0019A6  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 10013  0019AA  0E01               	movlw	1
 10014  0019AC  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 10015  0019AE  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
 10016  0019B0  2A16               	incf	??_ModbusProcess_FC15,f,c
 10017  0019B2  D004               	goto	u4944
 10018  0019B4                     u4945:
 10019  0019B4  FFFF               	dw	65535	; assembler added errata NOP
 10020  0019B6  90D8               	bcf	status,0,c
 10021  0019B8  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
 10022  0019BA  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
 10023  0019BC                     u4944:
 10024  0019BC  FFFF               	dw	65535	; assembler added errata NOP
 10025  0019BE  2E16               	decfsz	??_ModbusProcess_FC15,f,c
 10026  0019C0  D7F9               	goto	u4945
 10027  0019C2  1C17               	comf	??_ModbusProcess_FC15+1,w,c
 10028  0019C4  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
 10029  0019C6  1C18               	comf	??_ModbusProcess_FC15+2,w,c
 10030  0019C8  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
 10031  0019CA  5024               	movf	ModbusProcess_FC15@regs,w,c
 10032  0019CC  6ED9               	movwf	fsr2l,c
 10033  0019CE  6ADA               	clrf	fsr2h,c
 10034  0019D0  5019               	movf	??_ModbusProcess_FC15+3,w,c
 10035  0019D2  16DE               	andwf	postinc2,f,c
 10036  0019D4  501A               	movf	??_ModbusProcess_FC15+4,w,c
 10037  0019D6  16DD               	andwf	postdec2,f,c
 10038  0019D8                     l5764:
 10039  0019D8  FFFF               	dw	65535	; assembler added errata NOP
 10040                           
 10041                           ;ModbusRtu.c: 1022: u8bitsno++;
 10042  0019DA  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
 10043                           
 10044                           ;ModbusRtu.c: 1024: if (u8bitsno > 7)
 10045  0019DC  0E07               	movlw	7
 10046  0019DE  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
 10047  0019E0  D002               	goto	l795
 10048                           
 10049                           ;ModbusRtu.c: 1025: {
 10050                           ;ModbusRtu.c: 1026: u8bitsno = 0;
 10051  0019E2  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
 10052                           
 10053                           ;ModbusRtu.c: 1027: u8frameByte++;
 10054  0019E4  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
 10055  0019E6                     l795:
 10056  0019E6  FFFF               	dw	65535	; assembler added errata NOP
 10057  0019E8  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
 10058  0019EA  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
 10059  0019EC                     l5772:
 10060  0019EC  FFFF               	dw	65535	; assembler added errata NOP
 10061  0019EE  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
 10062  0019F0  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
 10063  0019F2  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
 10064  0019F4  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
 10065  0019F6  E3A2               	bnc	l5752
 10066                           
 10067                           ;ModbusRtu.c: 1028: }
 10068                           ;ModbusRtu.c: 1029: }
 10069                           ;ModbusRtu.c: 1033: _u8BufferSize = 6;
 10070  0019F8  0E06               	movlw	6
 10071  0019FA  6E72               	movwf	__u8BufferSize,c
 10072                           
 10073                           ;ModbusRtu.c: 1034: u8CopyBufferSize = _u8BufferSize + 2;
 10074  0019FC  5072               	movf	__u8BufferSize,w,c
 10075  0019FE  0F02               	addlw	2
 10076  001A00  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
 10077                           
 10078                           ;ModbusRtu.c: 1035: ModbusSendTxBuffer();
 10079  001A02  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
 10080                           
 10081                           ;ModbusRtu.c: 1036: return u8CopyBufferSize;
 10082  001A06  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
 10083  001A08  0012               	return		;funcret
 10084  001A0A  FFFF               	dw	65535	; errata NOP
 10085  001A0C                     __end_of_ModbusProcess_FC15:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           tblptrh	equ	0xFF7
 10089                           tblptrl	equ	0xFF6
 10090                           tablat	equ	0xFF5
 10091                           prodh	equ	0xFF4
 10092                           prodl	equ	0xFF3
 10093                           intcon	equ	0xFF2
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           indf1	equ	0xFE7
 10097                           postinc1	equ	0xFE6
 10098                           postdec1	equ	0xFE5
 10099                           fsr1h	equ	0xFE2
 10100                           fsr1l	equ	0xFE1
 10101                           indf2	equ	0xFDF
 10102                           postinc2	equ	0xFDE
 10103                           postdec2	equ	0xFDD
 10104                           plusw2	equ	0xFDB
 10105                           fsr2h	equ	0xFDA
 10106                           fsr2l	equ	0xFD9
 10107                           status	equ	0xFD8
 10108                           
 10109 ;; *************** function _ModbusProcess_FC1 *****************
 10110 ;; Defined at:
 10111 ;;		line 828 in file "ModbusRtu.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;  regs            2   21[COMRAM] unsigned short 
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 10116 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 10117 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 10118 ;;  u16coil         2   26[COMRAM] unsigned short 
 10119 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 10120 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 10121 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 10122 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      unsigned char 
 10125 ;; Registers used:
 10126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : E/1
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10132 ;;      Params:         2       0       0       0       0       0       0
 10133 ;;      Locals:        12       0       0       0       0       0       0
 10134 ;;      Temps:          3       0       0       0       0       0       0
 10135 ;;      Totals:        17       0       0       0       0       0       0
 10136 ;;Total ram usage:       17 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    4
 10139 ;; This function calls:
 10140 ;;		_ModbusSendTxBuffer
 10141 ;; This function is called by:
 10142 ;;		_ModbusPoll
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           	psect	text49
 10147  0016C8                     __ptext49:
 10148                           	opt stack 0
 10149  0016C8                     _ModbusProcess_FC1:
 10150                           	opt stack 25
 10151                           
 10152                           ;incstack = 0
 10153  0016C8  FFFF               	dw	65535
 10154                           
 10155                           ;ModbusRtu.c: 831: uint8_t u8currentBit, u8bytesno, u8bitsno;
 10156                           ;ModbusRtu.c: 832: uint8_t u8CopyBufferSize;
 10157                           ;ModbusRtu.c: 833: uint16_t u16currentCoil, u16coil;
 10158                           ;ModbusRtu.c: 836: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 10159  0016CA  0101               	movlb	1	; () banked
 10160  0016CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10161  0016CE  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10162  0016D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10163  0016D2  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 10164  0016D4  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 10165                           
 10166                           ; BSR set to: 1
 10167                           ;ModbusRtu.c: 837: _lastAddress = u16StartCoil;
 10168  0016D8  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 10169  0016DC  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 10170                           
 10171                           ;ModbusRtu.c: 838: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 10172  0016E0  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10173  0016E2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10174  0016E4  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10175  0016E6  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 10176  0016E8  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 10177                           
 10178                           ; BSR set to: 1
 10179                           ;ModbusRtu.c: 839: _lastCount = u16Coilno;
 10180  0016EC  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 10181  0016F0  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 10182                           
 10183                           ; BSR set to: 1
 10184                           ;ModbusRtu.c: 841: u8bytesno = (uint8_t) (u16Coilno / 8);
 10185  0016F4  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10186  0016F8  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 10187  0016FC  90D8               	bcf	status,0,c
 10188  0016FE  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10189  001700  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10190  001702  90D8               	bcf	status,0,c
 10191  001704  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10192  001706  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10193  001708  90D8               	bcf	status,0,c
 10194  00170A  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10195  00170C  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10196  00170E  5018               	movf	??_ModbusProcess_FC1,w,c
 10197  001710  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 10198                           
 10199                           ; BSR set to: 1
 10200                           ;ModbusRtu.c: 842: if (u16Coilno % 8 != 0)
 10201  001712  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10202  001716  0E07               	movlw	7
 10203  001718  1618               	andwf	??_ModbusProcess_FC1,f,c
 10204  00171A  E001               	bz	l5624
 10205                           
 10206                           ; BSR set to: 1
 10207                           ;ModbusRtu.c: 843: u8bytesno++;
 10208  00171C  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 10209  00171E                     l5624:
 10210                           
 10211                           ; BSR set to: 1
 10212                           ;ModbusRtu.c: 844: _au8Buffer[ ADD_HI ] = u8bytesno;
 10213  00171E  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 10214                           
 10215                           ; BSR set to: 1
 10216                           ;ModbusRtu.c: 845: _u8BufferSize = ADD_LO;
 10217  001722  0E03               	movlw	3
 10218  001724  6E72               	movwf	__u8BufferSize,c
 10219                           
 10220                           ; BSR set to: 1
 10221                           ;ModbusRtu.c: 848: u8bitsno = 0;
 10222  001726  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10223                           
 10224                           ; BSR set to: 1
 10225                           ;ModbusRtu.c: 850: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 10226  001728  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 10227  00172A  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 10228  00172C  D04F               	goto	l5650
 10229  00172E                     l5632:
 10230                           
 10231                           ;ModbusRtu.c: 851: {
 10232                           ;ModbusRtu.c: 852: u16coil = u16StartCoil + u16currentCoil;
 10233  00172E  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 10234  001730  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 10235  001732  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 10236  001734  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 10237  001736  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 10238  001738  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 10239                           
 10240                           ;ModbusRtu.c: 854: u8currentBit = (uint8_t) u16coil;
 10241  00173A  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 10242                           
 10243                           ;ModbusRtu.c: 856: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 10244  00173E  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 10245  001742  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 10246  001746  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 10247  00174A  2A18               	incf	??_ModbusProcess_FC1,f,c
 10248  00174C  D004               	goto	u4804
 10249  00174E                     u4805:
 10250  00174E  FFFF               	dw	65535	; assembler added errata NOP
 10251  001750  90D8               	bcf	status,0,c
 10252  001752  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 10253  001754  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10254  001756                     u4804:
 10255  001756  FFFF               	dw	65535	; assembler added errata NOP
 10256  001758  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10257  00175A  D7F9               	goto	u4805
 10258  00175C  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 10259  00175E  D015               	goto	l5640
 10260  001760  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10261  001764  0E01               	movlw	1
 10262  001766  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10263  001768  2A18               	incf	??_ModbusProcess_FC1,f,c
 10264  00176A  D003               	goto	u4824
 10265  00176C                     u4825:
 10266  00176C  FFFF               	dw	65535	; assembler added errata NOP
 10267  00176E  90D8               	bcf	status,0,c
 10268  001770  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10269  001772                     u4824:
 10270  001772  FFFF               	dw	65535	; assembler added errata NOP
 10271  001774  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10272  001776  D7FA               	goto	u4825
 10273  001778  0E00               	movlw	low __au8Buffer
 10274  00177A  2472               	addwf	__u8BufferSize,w,c
 10275  00177C  6ED9               	movwf	fsr2l,c
 10276  00177E  6ADA               	clrf	fsr2h,c
 10277  001780  0E01               	movlw	high __au8Buffer
 10278  001782  22DA               	addwfc	fsr2h,f,c
 10279  001784  5019               	movf	??_ModbusProcess_FC1+1,w,c
 10280  001786  12DF               	iorwf	indf2,f,c
 10281  001788  D017               	goto	l5642
 10282  00178A                     l5640:
 10283  00178A  FFFF               	dw	65535	; assembler added errata NOP
 10284  00178C  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10285  001790  0E01               	movlw	1
 10286  001792  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10287  001794  2A18               	incf	??_ModbusProcess_FC1,f,c
 10288  001796  D003               	goto	u4834
 10289  001798                     u4835:
 10290  001798  FFFF               	dw	65535	; assembler added errata NOP
 10291  00179A  90D8               	bcf	status,0,c
 10292  00179C  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10293  00179E                     u4834:
 10294  00179E  FFFF               	dw	65535	; assembler added errata NOP
 10295  0017A0  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10296  0017A2  D7FA               	goto	u4835
 10297  0017A4  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 10298  0017A6  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 10299  0017A8  0E00               	movlw	low __au8Buffer
 10300  0017AA  2472               	addwf	__u8BufferSize,w,c
 10301  0017AC  6ED9               	movwf	fsr2l,c
 10302  0017AE  6ADA               	clrf	fsr2h,c
 10303  0017B0  0E01               	movlw	high __au8Buffer
 10304  0017B2  22DA               	addwfc	fsr2h,f,c
 10305  0017B4  501A               	movf	??_ModbusProcess_FC1+2,w,c
 10306  0017B6  16DF               	andwf	indf2,f,c
 10307  0017B8                     l5642:
 10308  0017B8  FFFF               	dw	65535	; assembler added errata NOP
 10309                           
 10310                           ;ModbusRtu.c: 860: u8bitsno++;
 10311  0017BA  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 10312                           
 10313                           ;ModbusRtu.c: 862: if (u8bitsno > 7)
 10314  0017BC  0E07               	movlw	7
 10315  0017BE  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 10316  0017C0  D002               	goto	l764
 10317                           
 10318                           ;ModbusRtu.c: 863: {
 10319                           ;ModbusRtu.c: 864: u8bitsno = 0;
 10320  0017C2  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10321                           
 10322                           ;ModbusRtu.c: 865: _u8BufferSize++;
 10323  0017C4  2A72               	incf	__u8BufferSize,f,c
 10324  0017C6                     l764:
 10325  0017C6  FFFF               	dw	65535	; assembler added errata NOP
 10326  0017C8  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 10327  0017CA  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 10328  0017CC                     l5650:
 10329  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 10330  0017CE  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 10331  0017D0  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 10332  0017D2  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 10333  0017D4  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 10334  0017D6  E3AB               	bnc	l5632
 10335                           
 10336                           ;ModbusRtu.c: 866: }
 10337                           ;ModbusRtu.c: 867: }
 10338                           ;ModbusRtu.c: 870: if (u16Coilno % 8 != 0)
 10339  0017D8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10340  0017DC  0E07               	movlw	7
 10341  0017DE  1618               	andwf	??_ModbusProcess_FC1,f,c
 10342  0017E0  E001               	bz	l5656
 10343                           
 10344                           ;ModbusRtu.c: 871: _u8BufferSize++;
 10345  0017E2  2A72               	incf	__u8BufferSize,f,c
 10346  0017E4                     l5656:
 10347                           
 10348                           ;ModbusRtu.c: 872: u8CopyBufferSize = _u8BufferSize + 2;
 10349  0017E4  5072               	movf	__u8BufferSize,w,c
 10350  0017E6  0F02               	addlw	2
 10351  0017E8  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 10352                           
 10353                           ;ModbusRtu.c: 873: ModbusSendTxBuffer();
 10354  0017EA  EC38  F014         	call	_ModbusSendTxBuffer	;wreg free
 10355                           
 10356                           ;ModbusRtu.c: 874: return u8CopyBufferSize;
 10357  0017EE  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 10358  0017F0  0012               	return		;funcret
 10359  0017F2  FFFF               	dw	65535	; errata NOP
 10360  0017F4                     __end_of_ModbusProcess_FC1:
 10361                           	opt stack 0
 10362                           tblptru	equ	0xFF8
 10363                           tblptrh	equ	0xFF7
 10364                           tblptrl	equ	0xFF6
 10365                           tablat	equ	0xFF5
 10366                           prodh	equ	0xFF4
 10367                           prodl	equ	0xFF3
 10368                           intcon	equ	0xFF2
 10369                           postinc0	equ	0xFEE
 10370                           wreg	equ	0xFE8
 10371                           indf1	equ	0xFE7
 10372                           postinc1	equ	0xFE6
 10373                           postdec1	equ	0xFE5
 10374                           fsr1h	equ	0xFE2
 10375                           fsr1l	equ	0xFE1
 10376                           indf2	equ	0xFDF
 10377                           postinc2	equ	0xFDE
 10378                           postdec2	equ	0xFDD
 10379                           plusw2	equ	0xFDB
 10380                           fsr2h	equ	0xFDA
 10381                           fsr2l	equ	0xFD9
 10382                           status	equ	0xFD8
 10383                           
 10384 ;; *************** function _ModbusSendTxBuffer *****************
 10385 ;; Defined at:
 10386 ;;		line 549 in file "ModbusRtu.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  u16crc          2   19[COMRAM] unsigned short 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/1
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10400 ;;      Params:         0       0       0       0       0       0       0
 10401 ;;      Locals:         2       0       0       0       0       0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0
 10403 ;;      Totals:         2       0       0       0       0       0       0
 10404 ;;Total ram usage:        2 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    3
 10407 ;; This function calls:
 10408 ;;		_ModbusCalcCRC
 10409 ;;		_PortWrite
 10410 ;;		_millis
 10411 ;; This function is called by:
 10412 ;;		_ModbusPoll
 10413 ;;		_ModbusProcess_FC1
 10414 ;;		_ModbusProcess_FC3
 10415 ;;		_ModbusProcess_FC5
 10416 ;;		_ModbusProcess_FC6
 10417 ;;		_ModbusProcess_FC7
 10418 ;;		_ModbusProcess_FC15
 10419 ;;		_ModbusProcess_FC16
 10420 ;;		_ModbusProcess_FC17
 10421 ;;		_ModbusProcess_FC21
 10422 ;;		_ModbusProcess_FC43
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text50
 10427  002870                     __ptext50:
 10428                           	opt stack 0
 10429  002870                     _ModbusSendTxBuffer:
 10430                           	opt stack 26
 10431                           
 10432                           ;incstack = 0
 10433  002870  FFFF               	dw	65535
 10434                           
 10435                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10436  002872  5072               	movf	__u8BufferSize,w,c
 10437  002874  EC5D  F012         	call	_ModbusCalcCRC
 10438  002878  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10439  00287C  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10440                           
 10441                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10442  002880  0E00               	movlw	low __au8Buffer
 10443  002882  2472               	addwf	__u8BufferSize,w,c
 10444  002884  6ED9               	movwf	fsr2l,c
 10445  002886  6ADA               	clrf	fsr2h,c
 10446  002888  0E01               	movlw	high __au8Buffer
 10447  00288A  22DA               	addwfc	fsr2h,f,c
 10448  00288C  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10449                           
 10450                           ;ModbusRtu.c: 556: _u8BufferSize++;
 10451  002890  2A72               	incf	__u8BufferSize,f,c
 10452                           
 10453                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10454  002892  0E00               	movlw	low __au8Buffer
 10455  002894  2472               	addwf	__u8BufferSize,w,c
 10456  002896  6ED9               	movwf	fsr2l,c
 10457  002898  6ADA               	clrf	fsr2h,c
 10458  00289A  0E01               	movlw	high __au8Buffer
 10459  00289C  22DA               	addwfc	fsr2h,f,c
 10460  00289E  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10461                           
 10462                           ;ModbusRtu.c: 558: _u8BufferSize++;
 10463  0028A2  2A72               	incf	__u8BufferSize,f,c
 10464                           
 10465                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
 10466  0028A4  0E00               	movlw	low __au8Buffer
 10467  0028A6  6E07               	movwf	PortWrite@buf,c
 10468  0028A8  0E01               	movlw	high __au8Buffer
 10469  0028AA  6E08               	movwf	PortWrite@buf+1,c
 10470  0028AC  C072  F009         	movff	__u8BufferSize,PortWrite@buflen
 10471  0028B0  EC2A  F015         	call	_PortWrite	;wreg free
 10472                           
 10473                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
 10474  0028B4  6A72               	clrf	__u8BufferSize,c
 10475                           
 10476                           ;ModbusRtu.c: 574: _u16OutCnt++;
 10477  0028B6  EFD8  F015         	goto	_millis	;wreg free
 10478  0028BA  FFFF               	dw	65535	; errata NOP
 10479  0028BC                     __end_of_ModbusSendTxBuffer:
 10480                           	opt stack 0
 10481                           tblptru	equ	0xFF8
 10482                           tblptrh	equ	0xFF7
 10483                           tblptrl	equ	0xFF6
 10484                           tablat	equ	0xFF5
 10485                           prodh	equ	0xFF4
 10486                           prodl	equ	0xFF3
 10487                           intcon	equ	0xFF2
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           indf1	equ	0xFE7
 10491                           postinc1	equ	0xFE6
 10492                           postdec1	equ	0xFE5
 10493                           fsr1h	equ	0xFE2
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           plusw2	equ	0xFDB
 10499                           fsr2h	equ	0xFDA
 10500                           fsr2l	equ	0xFD9
 10501                           status	equ	0xFD8
 10502                           
 10503 ;; *************** function _millis *****************
 10504 ;; Defined at:
 10505 ;;		line 239 in file "interrupts.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;  ret             4   10[COMRAM] unsigned long 
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  4    6[COMRAM] unsigned long 
 10512 ;; Registers used:
 10513 ;;		None
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/1
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10519 ;;      Params:         4       0       0       0       0       0       0
 10520 ;;      Locals:         4       0       0       0       0       0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0
 10522 ;;      Totals:         8       0       0       0       0       0       0
 10523 ;;Total ram usage:        8 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    2
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_SoundPlayNextStep
 10530 ;;		_main
 10531 ;;		_ModbusPoll
 10532 ;;		_ModbusSendTxBuffer
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text51
 10537  002BB0                     __ptext51:
 10538                           	opt stack 0
 10539  002BB0                     _millis:
 10540                           	opt stack 28
 10541                           
 10542                           ;incstack = 0
 10543  002BB0  FFFF               	dw	65535
 10544                           
 10545                           ;interrupts.c: 242: (INTCONbits.GIE = 0);
 10546  002BB2  9EF2               	bcf	intcon,7,c	;volatile
 10547                           
 10548                           ;interrupts.c: 243: unsigned long ret = millisecondsFromStart;
 10549  002BB4  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 10550  002BB8  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 10551  002BBC  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 10552  002BC0  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 10553                           
 10554                           ;interrupts.c: 244: (INTCONbits.GIE = 1);
 10555  002BC4  8EF2               	bsf	intcon,7,c	;volatile
 10556                           
 10557                           ;interrupts.c: 245: return ret;
 10558  002BC6  C00B  F007         	movff	millis@ret,?_millis
 10559  002BCA  C00C  F008         	movff	millis@ret+1,?_millis+1
 10560  002BCE  C00D  F009         	movff	millis@ret+2,?_millis+2
 10561  002BD2  C00E  F00A         	movff	millis@ret+3,?_millis+3
 10562  002BD6  0012               	return		;funcret
 10563  002BD8  FFFF               	dw	65535	; errata NOP
 10564  002BDA                     __end_of_millis:
 10565                           	opt stack 0
 10566                           tblptru	equ	0xFF8
 10567                           tblptrh	equ	0xFF7
 10568                           tblptrl	equ	0xFF6
 10569                           tablat	equ	0xFF5
 10570                           prodh	equ	0xFF4
 10571                           prodl	equ	0xFF3
 10572                           intcon	equ	0xFF2
 10573                           postinc0	equ	0xFEE
 10574                           wreg	equ	0xFE8
 10575                           indf1	equ	0xFE7
 10576                           postinc1	equ	0xFE6
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           plusw2	equ	0xFDB
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _PortWrite *****************
 10589 ;; Defined at:
 10590 ;;		line 94 in file "interrupts.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  buf             2    6[COMRAM] PTR unsigned char 
 10593 ;;		 -> _au8Buffer(140), 
 10594 ;;  buflen          1    8[COMRAM] unsigned char 
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;  i               1    9[COMRAM] unsigned char 
 10597 ;; Return value:  Size  Location     Type
 10598 ;;                  1    wreg      void 
 10599 ;; Registers used:
 10600 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10601 ;; Tracked objects:
 10602 ;;		On entry : 0/1
 10603 ;;		On exit  : 0/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10606 ;;      Params:         3       0       0       0       0       0       0
 10607 ;;      Locals:         1       0       0       0       0       0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0
 10609 ;;      Totals:         4       0       0       0       0       0       0
 10610 ;;Total ram usage:        4 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    2
 10613 ;; This function calls:
 10614 ;;		Nothing
 10615 ;; This function is called by:
 10616 ;;		_ModbusSendTxBuffer
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text52
 10621  002A54                     __ptext52:
 10622                           	opt stack 0
 10623  002A54                     _PortWrite:
 10624                           	opt stack 26
 10625                           
 10626                           ;incstack = 0
 10627  002A54  FFFF               	dw	65535
 10628                           
 10629                           ;interrupts.c: 96: LATCbits.LATC5 = 1;
 10630  002A56  8A8B               	bsf	3979,5,c	;volatile
 10631                           
 10632                           ;interrupts.c: 97: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 10633  002A58  0E06               	movlw	6
 10634  002A5A                     u5357:
 10635  002A5A  FFFF               	dw	65535	; errata NOP
 10636  002A5C  2EE8               	decfsz	wreg,f,c
 10637  002A5E  D7FD               	goto	u5357
 10638  002A60  F000               	nop	
 10639                           
 10640                           ;interrupts.c: 98: for(uint8_t i = 0; i < buflen; i++)
 10641  002A62  6A0A               	clrf	PortWrite@i,c
 10642  002A64  D00C               	goto	l3440
 10643  002A66                     l71:
 10644  002A66  FFFF               	dw	65535	; assembler added errata NOP
 10645  002A68  A2AC               	btfss	4012,1,c	;volatile
 10646  002A6A  D7FD               	goto	l71
 10647                           
 10648                           ;interrupts.c: 101: TXREG = buf[i];
 10649  002A6C  500A               	movf	PortWrite@i,w,c
 10650  002A6E  2407               	addwf	PortWrite@buf,w,c
 10651  002A70  6ED9               	movwf	fsr2l,c
 10652  002A72  0E00               	movlw	0
 10653  002A74  2008               	addwfc	PortWrite@buf+1,w,c
 10654  002A76  6EDA               	movwf	fsr2h,c
 10655  002A78  50DF               	movf	indf2,w,c
 10656  002A7A  6EAD               	movwf	4013,c	;volatile
 10657  002A7C  2A0A               	incf	PortWrite@i,f,c
 10658  002A7E                     l3440:
 10659  002A7E  FFFF               	dw	65535	; assembler added errata NOP
 10660  002A80  5009               	movf	PortWrite@buflen,w,c
 10661  002A82  5C0A               	subwf	PortWrite@i,w,c
 10662  002A84  E3F0               	bnc	l71
 10663  002A86                     l75:
 10664  002A86  FFFF               	dw	65535	; assembler added errata NOP
 10665  002A88  A2AC               	btfss	4012,1,c	;volatile
 10666  002A8A  D7FD               	goto	l75
 10667                           
 10668                           ;interrupts.c: 104: LATCbits.LATC5 = 0;
 10669  002A8C  9A8B               	bcf	3979,5,c	;volatile
 10670  002A8E  0012               	return		;funcret
 10671  002A90  FFFF               	dw	65535	; errata NOP
 10672  002A92                     __end_of_PortWrite:
 10673                           	opt stack 0
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           intcon	equ	0xFF2
 10681                           postinc0	equ	0xFEE
 10682                           wreg	equ	0xFE8
 10683                           indf1	equ	0xFE7
 10684                           postinc1	equ	0xFE6
 10685                           postdec1	equ	0xFE5
 10686                           fsr1h	equ	0xFE2
 10687                           fsr1l	equ	0xFE1
 10688                           indf2	equ	0xFDF
 10689                           postinc2	equ	0xFDE
 10690                           postdec2	equ	0xFDD
 10691                           plusw2	equ	0xFDB
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _ModbusCalcCRC *****************
 10697 ;; Defined at:
 10698 ;;		line 659 in file "ModbusRtu.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  u8length        1    wreg     unsigned char 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  u8length        1   14[COMRAM] unsigned char 
 10703 ;;  j               1   16[COMRAM] unsigned char 
 10704 ;;  i               1   15[COMRAM] unsigned char 
 10705 ;;  temp            2   17[COMRAM] unsigned int 
 10706 ;;  flag            2   12[COMRAM] unsigned int 
 10707 ;;  temp2           2   10[COMRAM] unsigned int 
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  2    6[COMRAM] unsigned short 
 10710 ;; Registers used:
 10711 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/1
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10717 ;;      Params:         2       0       0       0       0       0       0
 10718 ;;      Locals:         9       0       0       0       0       0       0
 10719 ;;      Temps:          2       0       0       0       0       0       0
 10720 ;;      Totals:        13       0       0       0       0       0       0
 10721 ;;Total ram usage:       13 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    2
 10724 ;; This function calls:
 10725 ;;		Nothing
 10726 ;; This function is called by:
 10727 ;;		_ModbusSendTxBuffer
 10728 ;;		_ModbusValidateRequest
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text53
 10733  0024BA                     __ptext53:
 10734                           	opt stack 0
 10735  0024BA                     _ModbusCalcCRC:
 10736                           	opt stack 26
 10737                           
 10738                           ;incstack = 0
 10739  0024BA  FFFF               	dw	65535
 10740                           
 10741                           ;ModbusCalcCRC@u8length stored from wreg
 10742  0024BC  6E0F               	movwf	ModbusCalcCRC@u8length,c
 10743                           
 10744                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
 10745                           ;ModbusRtu.c: 662: temp = 0xFFFF;
 10746  0024BE  6812               	setf	ModbusCalcCRC@temp,c
 10747  0024C0  6813               	setf	ModbusCalcCRC@temp+1,c
 10748                           
 10749                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
 10750  0024C2  6A10               	clrf	ModbusCalcCRC@i,c
 10751  0024C4  D01E               	goto	l3634
 10752  0024C6                     l3612:
 10753                           
 10754                           ;ModbusRtu.c: 664: {
 10755                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
 10756  0024C6  0E00               	movlw	low __au8Buffer
 10757  0024C8  2410               	addwf	ModbusCalcCRC@i,w,c
 10758  0024CA  6ED9               	movwf	fsr2l,c
 10759  0024CC  6ADA               	clrf	fsr2h,c
 10760  0024CE  0E01               	movlw	high __au8Buffer
 10761  0024D0  22DA               	addwfc	fsr2h,f,c
 10762  0024D2  50DF               	movf	indf2,w,c
 10763  0024D4  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10764                           
 10765                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
 10766  0024D6  0E01               	movlw	1
 10767  0024D8  6E11               	movwf	ModbusCalcCRC@j,c
 10768  0024DA                     l3620:
 10769  0024DA  FFFF               	dw	65535	; assembler added errata NOP
 10770                           
 10771                           ;ModbusRtu.c: 667: {
 10772                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
 10773  0024DC  0E01               	movlw	1
 10774  0024DE  1412               	andwf	ModbusCalcCRC@temp,w,c
 10775  0024E0  6E0D               	movwf	ModbusCalcCRC@flag,c
 10776  0024E2  6A0E               	clrf	ModbusCalcCRC@flag+1,c
 10777                           
 10778                           ;ModbusRtu.c: 669: temp >>= 1;
 10779  0024E4  90D8               	bcf	status,0,c
 10780  0024E6  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 10781  0024E8  3212               	rrcf	ModbusCalcCRC@temp,f,c
 10782                           
 10783                           ;ModbusRtu.c: 670: if (flag)
 10784  0024EA  500D               	movf	ModbusCalcCRC@flag,w,c
 10785  0024EC  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
 10786  0024EE  E004               	bz	l3628
 10787                           
 10788                           ;ModbusRtu.c: 671: temp ^= 0xA001;
 10789  0024F0  0E01               	movlw	1
 10790  0024F2  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10791  0024F4  0EA0               	movlw	160
 10792  0024F6  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 10793  0024F8                     l3628:
 10794  0024F8  2A11               	incf	ModbusCalcCRC@j,f,c
 10795  0024FA  0E08               	movlw	8
 10796  0024FC  6411               	cpfsgt	ModbusCalcCRC@j,c
 10797  0024FE  D7ED               	goto	l3620
 10798  002500  2A10               	incf	ModbusCalcCRC@i,f,c
 10799  002502                     l3634:
 10800  002502  FFFF               	dw	65535	; assembler added errata NOP
 10801  002504  500F               	movf	ModbusCalcCRC@u8length,w,c
 10802  002506  5C10               	subwf	ModbusCalcCRC@i,w,c
 10803  002508  E3DE               	bnc	l3612
 10804                           
 10805                           ;ModbusRtu.c: 672: }
 10806                           ;ModbusRtu.c: 673: }
 10807                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
 10808  00250A  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 10809  00250E  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
 10810                           
 10811                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
 10812  002510  5012               	movf	ModbusCalcCRC@temp,w,c
 10813  002512  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 10814  002514  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 10815  002516  500B               	movf	ModbusCalcCRC@temp2,w,c
 10816  002518  1009               	iorwf	??_ModbusCalcCRC,w,c
 10817  00251A  6E12               	movwf	ModbusCalcCRC@temp,c
 10818  00251C  500C               	movf	ModbusCalcCRC@temp2+1,w,c
 10819  00251E  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 10820  002520  6E13               	movwf	ModbusCalcCRC@temp+1,c
 10821                           
 10822                           ;ModbusRtu.c: 680: return temp;
 10823  002522  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 10824  002526  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 10825  00252A  0012               	return		;funcret
 10826  00252C  FFFF               	dw	65535	; errata NOP
 10827  00252E                     __end_of_ModbusCalcCRC:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           indf1	equ	0xFE7
 10839                           postinc1	equ	0xFE6
 10840                           postdec1	equ	0xFE5
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           indf2	equ	0xFDF
 10844                           postinc2	equ	0xFDE
 10845                           postdec2	equ	0xFDD
 10846                           plusw2	equ	0xFDB
 10847                           fsr2h	equ	0xFDA
 10848                           fsr2l	equ	0xFD9
 10849                           status	equ	0xFD8
 10850                           
 10851 ;; *************** function _ModbusGetRxBuffer *****************
 10852 ;; Defined at:
 10853 ;;		line 509 in file "ModbusRtu.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;		None
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      unsigned char 
 10860 ;; Registers used:
 10861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10862 ;; Tracked objects:
 10863 ;;		On entry : F/0
 10864 ;;		On exit  : F/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10867 ;;      Params:         0       0       0       0       0       0       0
 10868 ;;      Locals:         1       0       0       0       0       0       0
 10869 ;;      Temps:          1       0       0       0       0       0       0
 10870 ;;      Totals:         2       0       0       0       0       0       0
 10871 ;;Total ram usage:        2 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    3
 10874 ;; This function calls:
 10875 ;;		_PortAvailable
 10876 ;;		_PortRead
 10877 ;; This function is called by:
 10878 ;;		_ModbusPoll
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text54
 10883  002990                     __ptext54:
 10884                           	opt stack 0
 10885  002990                     _ModbusGetRxBuffer:
 10886                           	opt stack 26
 10887                           
 10888                           ;incstack = 0
 10889  002990  FFFF               	dw	65535
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
 10893  002992  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 10894                           
 10895                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
 10896  002994  6A72               	clrf	__u8BufferSize,c
 10897                           
 10898                           ;ModbusRtu.c: 518: while (PortAvailable())
 10899  002996  D011               	goto	l3950
 10900  002998                     l3942:
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;ModbusRtu.c: 519: {
 10904                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
 10905  002998  EC49  F015         	call	_PortRead	;wreg free
 10906  00299C  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 10907  00299E  0E00               	movlw	low __au8Buffer
 10908  0029A0  2472               	addwf	__u8BufferSize,w,c
 10909  0029A2  6ED9               	movwf	fsr2l,c
 10910  0029A4  6ADA               	clrf	fsr2h,c
 10911  0029A6  0E01               	movlw	high __au8Buffer
 10912  0029A8  22DA               	addwfc	fsr2h,f,c
 10913  0029AA  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;ModbusRtu.c: 522: _u8BufferSize++;
 10917  0029AE  2A72               	incf	__u8BufferSize,f,c
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
 10921  0029B0  0E8B               	movlw	139
 10922  0029B2  6472               	cpfsgt	__u8BufferSize,c
 10923  0029B4  D002               	goto	l3950
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
 10927  0029B6  0E01               	movlw	1
 10928  0029B8  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 10929  0029BA                     l3950:
 10930  0029BA  FFFF               	dw	65535	; assembler added errata NOP
 10931                           
 10932                           ; BSR set to: 0
 10933  0029BC  EC89  F016         	call	_PortAvailable	;wreg free
 10934  0029C0  0900               	iorlw	0
 10935  0029C2  E1EA               	bnz	l3942
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;ModbusRtu.c: 530: {
 10939                           ;ModbusRtu.c: 531: _u16errCnt++;
 10940  0029C4  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 10941  0029C6  E002               	bz	l3958
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
 10945  0029C8  0EFD               	movlw	253
 10946  0029CA  D001               	goto	l696
 10947  0029CC                     l3958:
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;ModbusRtu.c: 533: }
 10951                           ;ModbusRtu.c: 534: return _u8BufferSize;
 10952  0029CC  5072               	movf	__u8BufferSize,w,c
 10953  0029CE                     l696:
 10954  0029CE  FFFF               	dw	65535	; assembler added errata NOP
 10955                           
 10956                           ; BSR set to: 0
 10957  0029D0  0012               	return		;funcret
 10958  0029D2  FFFF               	dw	65535	; errata NOP
 10959  0029D4                     __end_of_ModbusGetRxBuffer:
 10960                           	opt stack 0
 10961                           tblptru	equ	0xFF8
 10962                           tblptrh	equ	0xFF7
 10963                           tblptrl	equ	0xFF6
 10964                           tablat	equ	0xFF5
 10965                           prodh	equ	0xFF4
 10966                           prodl	equ	0xFF3
 10967                           intcon	equ	0xFF2
 10968                           postinc0	equ	0xFEE
 10969                           wreg	equ	0xFE8
 10970                           indf1	equ	0xFE7
 10971                           postinc1	equ	0xFE6
 10972                           postdec1	equ	0xFE5
 10973                           fsr1h	equ	0xFE2
 10974                           fsr1l	equ	0xFE1
 10975                           indf2	equ	0xFDF
 10976                           postinc2	equ	0xFDE
 10977                           postdec2	equ	0xFDD
 10978                           plusw2	equ	0xFDB
 10979                           fsr2h	equ	0xFDA
 10980                           fsr2l	equ	0xFD9
 10981                           status	equ	0xFD8
 10982                           
 10983 ;; *************** function _PortRead *****************
 10984 ;; Defined at:
 10985 ;;		line 58 in file "interrupts.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  ret             1    6[COMRAM] unsigned char 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      unsigned char 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10994 ;; Tracked objects:
 10995 ;;		On entry : F/0
 10996 ;;		On exit  : F/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10999 ;;      Params:         0       0       0       0       0       0       0
 11000 ;;      Locals:         1       0       0       0       0       0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0
 11002 ;;      Totals:         1       0       0       0       0       0       0
 11003 ;;Total ram usage:        1 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    2
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		_ModbusGetRxBuffer
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text55
 11014  002A92                     __ptext55:
 11015                           	opt stack 0
 11016  002A92                     _PortRead:
 11017                           	opt stack 26
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;incstack = 0
 11021  002A92  FFFF               	dw	65535
 11022                           
 11023                           ; BSR set to: 0
 11024                           ;interrupts.c: 60: (INTCONbits.GIE = 0);
 11025  002A94  9EF2               	bcf	intcon,7,c	;volatile
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;interrupts.c: 61: if(UartBufferLen > 0)
 11029  002A96  51CD               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11030  002A98  E012               	bz	l63
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;interrupts.c: 62: {
 11034                           ;interrupts.c: 64: uint8_t ret = UartRingBuffer[UartBufferTail];
 11035  002A9A  0E00               	movlw	low _UartRingBuffer
 11036  002A9C  246F               	addwf	_UartBufferTail,w,c	;volatile
 11037  002A9E  6ED9               	movwf	fsr2l,c
 11038  002AA0  6ADA               	clrf	fsr2h,c
 11039  002AA2  0E02               	movlw	high _UartRingBuffer
 11040  002AA4  22DA               	addwfc	fsr2h,f,c
 11041  002AA6  50DF               	movf	indf2,w,c
 11042  002AA8  6E07               	movwf	PortRead@ret,c
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;interrupts.c: 65: UartBufferLen--;
 11046  002AAA  07CD               	decf	_UartBufferLen& (0+255),f,b	;volatile
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;interrupts.c: 66: if(UartBufferTail == 256u - 1)
 11050  002AAC  286F               	incf	_UartBufferTail,w,c
 11051  002AAE  E102               	bnz	l3658
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;interrupts.c: 67: UartBufferTail = 0;
 11055  002AB0  6A6F               	clrf	_UartBufferTail,c	;volatile
 11056  002AB2  D001               	goto	l3660
 11057  002AB4                     l3658:
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;interrupts.c: 68: else
 11061                           ;interrupts.c: 69: UartBufferTail++;
 11062  002AB4  2A6F               	incf	_UartBufferTail,f,c	;volatile
 11063  002AB6                     l3660:
 11064  002AB6  FFFF               	dw	65535	; assembler added errata NOP
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;interrupts.c: 70: (INTCONbits.GIE = 1);
 11068  002AB8  8EF2               	bsf	intcon,7,c	;volatile
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;interrupts.c: 71: return ret;
 11072  002ABA  5007               	movf	PortRead@ret,w,c
 11073  002ABC  D002               	goto	l66
 11074  002ABE                     l63:
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;interrupts.c: 72: }
 11078                           ;interrupts.c: 73: (INTCONbits.GIE = 1);
 11079  002ABE  8EF2               	bsf	intcon,7,c	;volatile
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;interrupts.c: 74: return 0;
 11083  002AC0  0E00               	movlw	0
 11084  002AC2                     l66:
 11085  002AC2  FFFF               	dw	65535	; assembler added errata NOP
 11086                           
 11087                           ; BSR set to: 0
 11088  002AC4  0012               	return		;funcret
 11089  002AC6  FFFF               	dw	65535	; errata NOP
 11090  002AC8                     __end_of_PortRead:
 11091                           	opt stack 0
 11092                           tblptru	equ	0xFF8
 11093                           tblptrh	equ	0xFF7
 11094                           tblptrl	equ	0xFF6
 11095                           tablat	equ	0xFF5
 11096                           prodh	equ	0xFF4
 11097                           prodl	equ	0xFF3
 11098                           intcon	equ	0xFF2
 11099                           postinc0	equ	0xFEE
 11100                           wreg	equ	0xFE8
 11101                           indf1	equ	0xFE7
 11102                           postinc1	equ	0xFE6
 11103                           postdec1	equ	0xFE5
 11104                           fsr1h	equ	0xFE2
 11105                           fsr1l	equ	0xFE1
 11106                           indf2	equ	0xFDF
 11107                           postinc2	equ	0xFDE
 11108                           postdec2	equ	0xFDD
 11109                           plusw2	equ	0xFDB
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _PortAvailable *****************
 11115 ;; Defined at:
 11116 ;;		line 53 in file "interrupts.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;		None
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;		None
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      unsigned char 
 11123 ;; Registers used:
 11124 ;;		wreg, status,2
 11125 ;; Tracked objects:
 11126 ;;		On entry : F/0
 11127 ;;		On exit  : F/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11130 ;;      Params:         0       0       0       0       0       0       0
 11131 ;;      Locals:         0       0       0       0       0       0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0
 11133 ;;      Totals:         0       0       0       0       0       0       0
 11134 ;;Total ram usage:        0 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    2
 11137 ;; This function calls:
 11138 ;;		Nothing
 11139 ;; This function is called by:
 11140 ;;		_ModbusPoll
 11141 ;;		_ModbusGetRxBuffer
 11142 ;; This function uses a non-reentrant model
 11143 ;;
 11144                           
 11145                           	psect	text56
 11146  002D12                     __ptext56:
 11147                           	opt stack 0
 11148  002D12                     _PortAvailable:
 11149                           	opt stack 27
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;incstack = 0
 11153  002D12  FFFF               	dw	65535
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;interrupts.c: 55: return UartBufferLen;
 11157  002D14  51CD               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11158                           
 11159                           ; BSR set to: 0
 11160  002D16  0012               	return		;funcret
 11161  002D18  FFFF               	dw	65535	; errata NOP
 11162  002D1A                     __end_of_PortAvailable:
 11163                           	opt stack 0
 11164                           tblptru	equ	0xFF8
 11165                           tblptrh	equ	0xFF7
 11166                           tblptrl	equ	0xFF6
 11167                           tablat	equ	0xFF5
 11168                           prodh	equ	0xFF4
 11169                           prodl	equ	0xFF3
 11170                           intcon	equ	0xFF2
 11171                           postinc0	equ	0xFEE
 11172                           wreg	equ	0xFE8
 11173                           indf1	equ	0xFE7
 11174                           postinc1	equ	0xFE6
 11175                           postdec1	equ	0xFE5
 11176                           fsr1h	equ	0xFE2
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _ModbusBuildException *****************
 11187 ;; Defined at:
 11188 ;;		line 800 in file "ModbusRtu.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  u8exception     1    wreg     unsigned char 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  u8exception     1    6[COMRAM] unsigned char 
 11193 ;;  u8func          1    7[COMRAM] unsigned char 
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      void 
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/1
 11200 ;;		On exit  : F/1
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11203 ;;      Params:         0       0       0       0       0       0       0
 11204 ;;      Locals:         2       0       0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0
 11206 ;;      Totals:         2       0       0       0       0       0       0
 11207 ;;Total ram usage:        2 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    2
 11210 ;; This function calls:
 11211 ;;		Nothing
 11212 ;; This function is called by:
 11213 ;;		_ModbusPoll
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           	psect	text57
 11218  002C26                     __ptext57:
 11219                           	opt stack 0
 11220  002C26                     _ModbusBuildException:
 11221                           	opt stack 27
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;incstack = 0
 11225  002C26  FFFF               	dw	65535
 11226                           
 11227                           ;ModbusBuildException@u8exception stored from wreg
 11228  002C28  6E07               	movwf	ModbusBuildException@u8exception,c
 11229                           
 11230                           ;ModbusRtu.c: 802: uint8_t u8func = _au8Buffer[ FUNC ];
 11231  002C2A  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 11232                           
 11233                           ;ModbusRtu.c: 804: _au8Buffer[ ID ] = _u8id;
 11234  002C2E  C0D6  F100         	movff	__u8id,__au8Buffer
 11235                           
 11236                           ;ModbusRtu.c: 805: _au8Buffer[ FUNC ] = u8func + 0x80;
 11237  002C32  5008               	movf	ModbusBuildException@u8func,w,c
 11238  002C34  0F80               	addlw	128
 11239  002C36  0101               	movlb	1	; () banked
 11240  002C38  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 11241                           
 11242                           ; BSR set to: 1
 11243                           ;ModbusRtu.c: 806: _au8Buffer[ 2 ] = u8exception;
 11244  002C3A  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 11245                           
 11246                           ; BSR set to: 1
 11247                           ;ModbusRtu.c: 807: _u8BufferSize = EXCEPTION_SIZE;
 11248  002C3E  0E03               	movlw	3
 11249  002C40  6E72               	movwf	__u8BufferSize,c
 11250                           
 11251                           ; BSR set to: 1
 11252  002C42  0C03               	retlw	3	;funcret
 11253  002C44  FFFF               	dw	65535	; errata NOP
 11254  002C46                     __end_of_ModbusBuildException:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           intcon	equ	0xFF2
 11263                           postinc0	equ	0xFEE
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postinc1	equ	0xFE6
 11267                           postdec1	equ	0xFE5
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           plusw2	equ	0xFDB
 11274                           fsr2h	equ	0xFDA
 11275                           fsr2l	equ	0xFD9
 11276                           status	equ	0xFD8
 11277                           
 11278 ;; *************** function _InitApp *****************
 11279 ;; Defined at:
 11280 ;;		line 66 in file "user.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  i               1    6[COMRAM] unsigned char 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11294 ;;      Params:         0       0       0       0       0       0       0
 11295 ;;      Locals:         1       0       0       0       0       0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0
 11297 ;;      Totals:         1       0       0       0       0       0       0
 11298 ;;Total ram usage:        1 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    3
 11301 ;; This function calls:
 11302 ;;		_InitUartBuffer
 11303 ;;		_PortBegin
 11304 ;; This function is called by:
 11305 ;;		_main
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text58
 11310  002436                     __ptext58:
 11311                           	opt stack 0
 11312  002436                     _InitApp:
 11313                           	opt stack 27
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;incstack = 0
 11317  002436  FFFF               	dw	65535
 11318                           
 11319                           ;user.c: 77: INTCONbits.PEIE = 1;
 11320  002438  8CF2               	bsf	intcon,6,c	;volatile
 11321                           
 11322                           ;user.c: 78: (INTCONbits.GIE = 1);
 11323  00243A  8EF2               	bsf	intcon,7,c	;volatile
 11324                           
 11325                           ;user.c: 79: RCONbits.IPEN = 1;
 11326  00243C  8ED0               	bsf	4048,7,c	;volatile
 11327                           
 11328                           ;user.c: 84: T1CONbits.RD16 = 1;
 11329  00243E  8ECD               	bsf	4045,7,c	;volatile
 11330                           
 11331                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 11332  002440  94CD               	bcf	4045,2,c	;volatile
 11333                           
 11334                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 11335  002442  92CD               	bcf	4045,1,c	;volatile
 11336                           
 11337                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 11338  002444  0ECF               	movlw	-49
 11339  002446  16CD               	andwf	4045,f,c	;volatile
 11340                           
 11341                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 11342  002448  809D               	bsf	3997,0,c	;volatile
 11343                           
 11344                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 11345  00244A  809F               	bsf	3999,0,c	;volatile
 11346                           
 11347                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 11348  00244C  0EF6               	movlw	246
 11349  00244E  6ECF               	movwf	4047,c	;volatile
 11350  002450  0E3C               	movlw	60
 11351  002452  6ECE               	movwf	4046,c	;volatile
 11352                           
 11353                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 11354  002454  909E               	bcf	3998,0,c	;volatile
 11355                           
 11356                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 11357  002456  80CD               	bsf	4045,0,c	;volatile
 11358                           
 11359                           ;user.c: 103: T0CONbits.T08BIT = 0;
 11360  002458  9CD5               	bcf	4053,6,c	;volatile
 11361                           
 11362                           ;user.c: 104: T0CONbits.T0CS = 0;
 11363  00245A  9AD5               	bcf	4053,5,c	;volatile
 11364                           
 11365                           ;user.c: 106: T0CONbits.PSA = 0;
 11366  00245C  96D5               	bcf	4053,3,c	;volatile
 11367                           
 11368                           ;user.c: 117: T0CONbits.T0PS = 7;
 11369  00245E  0E07               	movlw	7
 11370  002460  12D5               	iorwf	4053,f,c	;volatile
 11371                           
 11372                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 11373  002462  8AF2               	bsf	intcon,5,c	;volatile
 11374                           
 11375                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 11376  002464  84F1               	bsf	intcon2,2,c	;volatile
 11377                           
 11378                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + 30) * 6)&0xFF)));
 11379  002466  0E1A               	movlw	26
 11380  002468  6ED7               	movwf	4055,c	;volatile
 11381  00246A  0E6E               	movlw	110
 11382  00246C  6ED6               	movwf	4054,c	;volatile
 11383                           
 11384                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 11385  00246E  94F2               	bcf	intcon,2,c	;volatile
 11386                           
 11387                           ;user.c: 133: InitUartBuffer();
 11388  002470  EC7E  F016         	call	_InitUartBuffer	;wreg free
 11389                           
 11390                           ;user.c: 135: PortBegin();
 11391  002474  EC40  F016         	call	_PortBegin	;wreg free
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;user.c: 136: PIE1bits.RCIE = 1;
 11395  002478  8A9D               	bsf	3997,5,c	;volatile
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;user.c: 138: IPR1bits.RCIP = 0;
 11399  00247A  9A9F               	bcf	3999,5,c	;volatile
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 11403  00247C  6A07               	clrf	InitApp@i,c
 11404  00247E                     l4732:
 11405  00247E  FFFF               	dw	65535	; assembler added errata NOP
 11406                           
 11407                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 11408  002480  5007               	movf	InitApp@i,w,c
 11409  002482  0D02               	mullw	2
 11410  002484  0EAA               	movlw	low __MODBUSInputRegs
 11411  002486  24F3               	addwf	prodl,w,c
 11412  002488  6ED9               	movwf	fsr2l,c
 11413  00248A  0E01               	movlw	high __MODBUSInputRegs
 11414  00248C  20F4               	addwfc	prodh,w,c
 11415  00248E  6EDA               	movwf	fsr2h,c
 11416  002490  6ADE               	clrf	postinc2,c
 11417  002492  6ADD               	clrf	postdec2,c
 11418  002494  2A07               	incf	InitApp@i,f,c
 11419  002496  0E0E               	movlw	14
 11420  002498  6407               	cpfsgt	InitApp@i,c
 11421  00249A  D7F1               	goto	l4732
 11422                           
 11423                           ;user.c: 149: TRISB = 0;
 11424  00249C  6A93               	clrf	3987,c	;volatile
 11425                           
 11426                           ;user.c: 152: LATAbits.LATA0 = 0;
 11427  00249E  9089               	bcf	3977,0,c	;volatile
 11428                           
 11429                           ;user.c: 153: LATAbits.LATA1 = 0;
 11430  0024A0  9289               	bcf	3977,1,c	;volatile
 11431                           
 11432                           ;user.c: 154: LATAbits.LATA2 = 0;
 11433  0024A2  9489               	bcf	3977,2,c	;volatile
 11434                           
 11435                           ;user.c: 155: LATAbits.LATA3 = 0;
 11436  0024A4  9689               	bcf	3977,3,c	;volatile
 11437                           
 11438                           ;user.c: 156: TRISAbits.RA0 = 0;
 11439  0024A6  9092               	bcf	3986,0,c	;volatile
 11440                           
 11441                           ;user.c: 157: TRISAbits.RA1 = 0;
 11442  0024A8  9292               	bcf	3986,1,c	;volatile
 11443                           
 11444                           ;user.c: 158: TRISAbits.RA2 = 0;
 11445  0024AA  9492               	bcf	3986,2,c	;volatile
 11446                           
 11447                           ;user.c: 159: TRISAbits.RA3 = 0;
 11448  0024AC  9692               	bcf	3986,3,c	;volatile
 11449                           
 11450                           ;user.c: 161: TRISCbits.RC3 = 1;
 11451  0024AE  8694               	bsf	3988,3,c	;volatile
 11452                           
 11453                           ;user.c: 162: TRISCbits.RC1 = 1;
 11454  0024B0  8294               	bsf	3988,1,c	;volatile
 11455                           
 11456                           ;user.c: 163: TRISCbits.RC0 = 0;
 11457  0024B2  9094               	bcf	3988,0,c	;volatile
 11458                           
 11459                           ;user.c: 165: LATCbits.LATC2 = 0;
 11460  0024B4  948B               	bcf	3979,2,c	;volatile
 11461  0024B6  0012               	return		;funcret
 11462  0024B8  FFFF               	dw	65535	; errata NOP
 11463  0024BA                     __end_of_InitApp:
 11464                           	opt stack 0
 11465                           tblptru	equ	0xFF8
 11466                           tblptrh	equ	0xFF7
 11467                           tblptrl	equ	0xFF6
 11468                           tablat	equ	0xFF5
 11469                           prodh	equ	0xFF4
 11470                           prodl	equ	0xFF3
 11471                           intcon	equ	0xFF2
 11472                           intcon2	equ	0xFF1
 11473                           postinc0	equ	0xFEE
 11474                           wreg	equ	0xFE8
 11475                           indf1	equ	0xFE7
 11476                           postinc1	equ	0xFE6
 11477                           postdec1	equ	0xFE5
 11478                           fsr1h	equ	0xFE2
 11479                           fsr1l	equ	0xFE1
 11480                           indf2	equ	0xFDF
 11481                           postinc2	equ	0xFDE
 11482                           postdec2	equ	0xFDD
 11483                           plusw2	equ	0xFDB
 11484                           fsr2h	equ	0xFDA
 11485                           fsr2l	equ	0xFD9
 11486                           status	equ	0xFD8
 11487                           
 11488 ;; *************** function _PortBegin *****************
 11489 ;; Defined at:
 11490 ;;		line 48 in file "user.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;		None
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;		None
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  1    wreg      void 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2
 11499 ;; Tracked objects:
 11500 ;;		On entry : F/0
 11501 ;;		On exit  : F/0
 11502 ;;		Unchanged: F/0
 11503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11504 ;;      Params:         0       0       0       0       0       0       0
 11505 ;;      Locals:         0       0       0       0       0       0       0
 11506 ;;      Temps:          0       0       0       0       0       0       0
 11507 ;;      Totals:         0       0       0       0       0       0       0
 11508 ;;Total ram usage:        0 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    2
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_InitApp
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text59
 11519  002C80                     __ptext59:
 11520                           	opt stack 0
 11521  002C80                     _PortBegin:
 11522                           	opt stack 27
 11523                           
 11524                           ;incstack = 0
 11525  002C80  FFFF               	dw	65535
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;user.c: 50: TXSTA = 0;
 11529  002C82  6AAC               	clrf	4012,c	;volatile
 11530                           
 11531                           ;user.c: 51: TXSTAbits.TXEN = 1;
 11532  002C84  8AAC               	bsf	4012,5,c	;volatile
 11533                           
 11534                           ;user.c: 52: TXSTAbits.BRGH = 1;
 11535  002C86  84AC               	bsf	4012,2,c	;volatile
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 11539  002C88  0E40               	movlw	64
 11540  002C8A  6EAF               	movwf	4015,c	;volatile
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;user.c: 55: RCSTA = 0;
 11544  002C8C  6AAB               	clrf	4011,c	;volatile
 11545                           
 11546                           ; BSR set to: 0
 11547                           ;user.c: 56: RCSTAbits.SPEN = 1;
 11548  002C8E  8EAB               	bsf	4011,7,c	;volatile
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;user.c: 57: RCSTAbits.CREN = 1;
 11552  002C90  88AB               	bsf	4011,4,c	;volatile
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;user.c: 59: TRISCbits.RC5 = 0;
 11556  002C92  9A94               	bcf	3988,5,c	;volatile
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;user.c: 60: LATCbits.LATC5 = 0;
 11560  002C94  9A8B               	bcf	3979,5,c	;volatile
 11561                           
 11562                           ; BSR set to: 0
 11563  002C96  0012               	return		;funcret
 11564  002C98  FFFF               	dw	65535	; errata NOP
 11565  002C9A                     __end_of_PortBegin:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           intcon2	equ	0xFF1
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           indf1	equ	0xFE7
 11578                           postinc1	equ	0xFE6
 11579                           postdec1	equ	0xFE5
 11580                           fsr1h	equ	0xFE2
 11581                           fsr1l	equ	0xFE1
 11582                           indf2	equ	0xFDF
 11583                           postinc2	equ	0xFDE
 11584                           postdec2	equ	0xFDD
 11585                           plusw2	equ	0xFDB
 11586                           fsr2h	equ	0xFDA
 11587                           fsr2l	equ	0xFD9
 11588                           status	equ	0xFD8
 11589                           
 11590 ;; *************** function _InitUartBuffer *****************
 11591 ;; Defined at:
 11592 ;;		line 44 in file "interrupts.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;		None
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;		None
 11597 ;; Return value:  Size  Location     Type
 11598 ;;                  1    wreg      void 
 11599 ;; Registers used:
 11600 ;;		None
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : F/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11606 ;;      Params:         0       0       0       0       0       0       0
 11607 ;;      Locals:         0       0       0       0       0       0       0
 11608 ;;      Temps:          0       0       0       0       0       0       0
 11609 ;;      Totals:         0       0       0       0       0       0       0
 11610 ;;Total ram usage:        0 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    2
 11613 ;; This function calls:
 11614 ;;		Nothing
 11615 ;; This function is called by:
 11616 ;;		_InitApp
 11617 ;; This function uses a non-reentrant model
 11618 ;;
 11619                           
 11620                           	psect	text60
 11621  002CFC                     __ptext60:
 11622                           	opt stack 0
 11623  002CFC                     _InitUartBuffer:
 11624                           	opt stack 27
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;incstack = 0
 11628  002CFC  FFFF               	dw	65535
 11629                           
 11630                           ;interrupts.c: 46: UartBufferHead = 0;
 11631  002CFE  0100               	movlb	0	; () banked
 11632  002D00  6BCC               	clrf	_UartBufferHead& (0+255),b
 11633                           
 11634                           ;interrupts.c: 47: UartBufferTail = 0;
 11635  002D02  6A6F               	clrf	_UartBufferTail,c	;volatile
 11636                           
 11637                           ;interrupts.c: 48: UartBufferLen = 0;
 11638  002D04  6BCD               	clrf	_UartBufferLen& (0+255),b	;volatile
 11639                           
 11640                           ; BSR set to: 0
 11641  002D06  0012               	return		;funcret
 11642  002D08  FFFF               	dw	65535	; errata NOP
 11643  002D0A                     __end_of_InitUartBuffer:
 11644                           	opt stack 0
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           intcon2	equ	0xFF1
 11653                           postinc0	equ	0xFEE
 11654                           wreg	equ	0xFE8
 11655                           indf1	equ	0xFE7
 11656                           postinc1	equ	0xFE6
 11657                           postdec1	equ	0xFE5
 11658                           fsr1h	equ	0xFE2
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           plusw2	equ	0xFDB
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function _ConfigureOscillator *****************
 11669 ;; Defined at:
 11670 ;;		line 86 in file "system.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;		None
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		None
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11684 ;;      Params:         0       0       0       0       0       0       0
 11685 ;;      Locals:         0       0       0       0       0       0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0
 11687 ;;      Totals:         0       0       0       0       0       0       0
 11688 ;;Total ram usage:        0 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    2
 11691 ;; This function calls:
 11692 ;;		Nothing
 11693 ;; This function is called by:
 11694 ;;		_main
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text61
 11699  002D1A                     __ptext61:
 11700                           	opt stack 0
 11701  002D1A                     _ConfigureOscillator:
 11702                           	opt stack 28
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;incstack = 0
 11706  002D1A  FFFF               	dw	65535
 11707  002D1C  0012               	return		;funcret
 11708  002D1E  FFFF               	dw	65535	; errata NOP
 11709  002D20                     __end_of_ConfigureOscillator:
 11710                           	opt stack 0
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           intcon	equ	0xFF2
 11718                           intcon2	equ	0xFF1
 11719                           postinc0	equ	0xFEE
 11720                           wreg	equ	0xFE8
 11721                           indf1	equ	0xFE7
 11722                           postinc1	equ	0xFE6
 11723                           postdec1	equ	0xFE5
 11724                           fsr1h	equ	0xFE2
 11725                           fsr1l	equ	0xFE1
 11726                           indf2	equ	0xFDF
 11727                           postinc2	equ	0xFDE
 11728                           postdec2	equ	0xFDD
 11729                           plusw2	equ	0xFDB
 11730                           fsr2h	equ	0xFDA
 11731                           fsr2l	equ	0xFD9
 11732                           status	equ	0xFD8
 11733                           
 11734 ;; *************** function _AddSecond *****************
 11735 ;; Defined at:
 11736 ;;		line 180 in file "user.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;		None
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;		None
 11741 ;; Return value:  Size  Location     Type
 11742 ;;                  1    wreg      void 
 11743 ;; Registers used:
 11744 ;;		wreg, status,2, status,0
 11745 ;; Tracked objects:
 11746 ;;		On entry : F/0
 11747 ;;		On exit  : F/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11750 ;;      Params:         0       0       0       0       0       0       0
 11751 ;;      Locals:         0       0       0       0       0       0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0
 11753 ;;      Totals:         0       0       0       0       0       0       0
 11754 ;;Total ram usage:        0 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    2
 11757 ;; This function calls:
 11758 ;;		Nothing
 11759 ;; This function is called by:
 11760 ;;		_main
 11761 ;; This function uses a non-reentrant model
 11762 ;;
 11763                           
 11764                           	psect	text62
 11765  002CEC                     __ptext62:
 11766                           	opt stack 0
 11767  002CEC                     _AddSecond:
 11768                           	opt stack 28
 11769                           
 11770                           ;incstack = 0
 11771  002CEC  FFFF               	dw	65535
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;user.c: 182: currentTime++;
 11775  002CEE  2BDB               	incf	_currentTime& (0+255),f,b
 11776  002CF0  0E00               	movlw	0
 11777  002CF2  23DC               	addwfc	(_currentTime+1)& (0+255),f,b
 11778  002CF4  23DD               	addwfc	(_currentTime+2)& (0+255),f,b
 11779  002CF6  23DE               	addwfc	(_currentTime+3)& (0+255),f,b
 11780                           
 11781                           ; BSR set to: 0
 11782  002CF8  0C00               	retlw	0	;funcret
 11783  002CFA  FFFF               	dw	65535	; errata NOP
 11784  002CFC                     __end_of_AddSecond:
 11785                           	opt stack 0
 11786                           tblptru	equ	0xFF8
 11787                           tblptrh	equ	0xFF7
 11788                           tblptrl	equ	0xFF6
 11789                           tablat	equ	0xFF5
 11790                           prodh	equ	0xFF4
 11791                           prodl	equ	0xFF3
 11792                           intcon	equ	0xFF2
 11793                           intcon2	equ	0xFF1
 11794                           postinc0	equ	0xFEE
 11795                           wreg	equ	0xFE8
 11796                           indf1	equ	0xFE7
 11797                           postinc1	equ	0xFE6
 11798                           postdec1	equ	0xFE5
 11799                           fsr1h	equ	0xFE2
 11800                           fsr1l	equ	0xFE1
 11801                           indf2	equ	0xFDF
 11802                           postinc2	equ	0xFDE
 11803                           postdec2	equ	0xFDD
 11804                           plusw2	equ	0xFDB
 11805                           fsr2h	equ	0xFDA
 11806                           fsr2l	equ	0xFD9
 11807                           status	equ	0xFD8
 11808                           
 11809 ;; *************** function _low_isr *****************
 11810 ;; Defined at:
 11811 ;;		line 175 in file "interrupts.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  c               1    5[COMRAM] unsigned char 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  1    wreg      void 
 11818 ;; Registers used:
 11819 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11825 ;;      Params:         0       0       0       0       0       0       0
 11826 ;;      Locals:         1       0       0       0       0       0       0
 11827 ;;      Temps:          5       0       0       0       0       0       0
 11828 ;;      Totals:         6       0       0       0       0       0       0
 11829 ;;Total ram usage:        6 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    1
 11832 ;; This function calls:
 11833 ;;		Nothing
 11834 ;; This function is called by:
 11835 ;;		Interrupt level 1
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	intcodelo
 11840  000018                     __pintcodelo:
 11841                           	opt stack 0
 11842  000018                     _low_isr:
 11843                           	opt stack 0
 11844  000018  FFFF               	dw	65535	; assembler added errata NOP
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;incstack = 0
 11848  00001A  8078               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11849  00001C  FFFF               	dw	65535	; errata NOP
 11850  00001E  CFD8 F001          	movff	status,??_low_isr
 11851  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 11852  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 11853  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 11854  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 11855                           
 11856                           ;interrupts.c: 189: if (PIR1bits.RCIF && PIE1bits.RCIE)
 11857  000032  BA9E               	btfsc	3998,5,c	;volatile
 11858  000034  AA9D               	btfss	3997,5,c	;volatile
 11859  000036  D016               	goto	i1l94
 11860  000038                     i1l95:
 11861  000038  FFFF               	dw	65535	; assembler added errata NOP
 11862  00003A  AA9E               	btfss	3998,5,c	;volatile
 11863  00003C  D7FD               	goto	i1l95
 11864                           
 11865                           ;interrupts.c: 203: uint8_t c = RCREG;
 11866  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 11867                           
 11868                           ;interrupts.c: 206: UartRingBuffer[UartBufferHead] = c;
 11869  000042  0E00               	movlw	low _UartRingBuffer
 11870  000044  0100               	movlb	0	; () banked
 11871  000046  25CC               	addwf	_UartBufferHead& (0+255),w,b
 11872  000048  6ED9               	movwf	fsr2l,c
 11873  00004A  6ADA               	clrf	fsr2h,c
 11874  00004C  0E02               	movlw	high _UartRingBuffer
 11875  00004E  22DA               	addwfc	fsr2h,f,c
 11876  000050  C006  FFDF         	movff	low_isr@c,indf2
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;interrupts.c: 207: UartBufferLen++;
 11880  000054  2BCD               	incf	_UartBufferLen& (0+255),f,b	;volatile
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;interrupts.c: 208: if(UartBufferHead == 256u - 1)
 11884  000056  29CC               	incf	_UartBufferHead& (0+255),w,b
 11885  000058  E102               	bnz	i1l4970
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;interrupts.c: 209: UartBufferHead = 0;
 11889  00005A  6BCC               	clrf	_UartBufferHead& (0+255),b
 11890  00005C  D001               	goto	i1l4972
 11891  00005E                     i1l4970:
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;interrupts.c: 210: else
 11895                           ;interrupts.c: 211: UartBufferHead++;
 11896  00005E  2BCC               	incf	_UartBufferHead& (0+255),f,b
 11897  000060                     i1l4972:
 11898  000060  FFFF               	dw	65535	; assembler added errata NOP
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;interrupts.c: 214: PIR1bits.RCIF = 0;
 11902  000062  9A9E               	bcf	3998,5,c	;volatile
 11903  000064                     i1l94:
 11904  000064  FFFF               	dw	65535	; assembler added errata NOP
 11905  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 11906  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 11907  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 11908  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 11909  000076  C001  FFD8         	movff	??_low_isr,status
 11910  00007A  9078               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11911  00007C  0010               	retfie	
 11912  00007E  FFFF               	dw	65535	; errata NOP
 11913  000080                     __end_of_low_isr:
 11914                           	opt stack 0
 11915                           tblptru	equ	0xFF8
 11916                           tblptrh	equ	0xFF7
 11917                           tblptrl	equ	0xFF6
 11918                           tablat	equ	0xFF5
 11919                           prodh	equ	0xFF4
 11920                           prodl	equ	0xFF3
 11921                           intcon	equ	0xFF2
 11922                           intcon2	equ	0xFF1
 11923                           postinc0	equ	0xFEE
 11924                           wreg	equ	0xFE8
 11925                           indf1	equ	0xFE7
 11926                           postinc1	equ	0xFE6
 11927                           postdec1	equ	0xFE5
 11928                           fsr1h	equ	0xFE2
 11929                           fsr1l	equ	0xFE1
 11930                           bsr	equ	0xFE0
 11931                           indf2	equ	0xFDF
 11932                           postinc2	equ	0xFDE
 11933                           postdec2	equ	0xFDD
 11934                           plusw2	equ	0xFDB
 11935                           fsr2h	equ	0xFDA
 11936                           fsr2l	equ	0xFD9
 11937                           status	equ	0xFD8
 11938                           
 11939 ;; *************** function _high_isr *****************
 11940 ;; Defined at:
 11941 ;;		line 114 in file "interrupts.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, status,0
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11955 ;;      Params:         0       0       0       0       0       0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0
 11958 ;;      Totals:         0       0       0       0       0       0       0
 11959 ;;Total ram usage:        0 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; This function calls:
 11962 ;;		Nothing
 11963 ;; This function is called by:
 11964 ;;		Interrupt level 2
 11965 ;; This function uses a non-reentrant model
 11966 ;;
 11967                           
 11968                           	psect	intcode
 11969  000008                     __pintcode:
 11970                           	opt stack 0
 11971  000008                     _high_isr:
 11972                           	opt stack 0
 11973  000008  FFFF               	dw	65535	; assembler added errata NOP
 11974                           
 11975                           ;incstack = 0
 11976  00000A  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11977  00000C  FFFF               	dw	65535	; errata NOP
 11978  00000E  EF64  F013         	goto	int_func
 11979                           tblptru	equ	0xFF8
 11980                           tblptrh	equ	0xFF7
 11981                           tblptrl	equ	0xFF6
 11982                           tablat	equ	0xFF5
 11983                           prodh	equ	0xFF4
 11984                           prodl	equ	0xFF3
 11985                           intcon	equ	0xFF2
 11986                           intcon2	equ	0xFF1
 11987                           postinc0	equ	0xFEE
 11988                           wreg	equ	0xFE8
 11989                           indf1	equ	0xFE7
 11990                           postinc1	equ	0xFE6
 11991                           postdec1	equ	0xFE5
 11992                           fsr1h	equ	0xFE2
 11993                           fsr1l	equ	0xFE1
 11994                           bsr	equ	0xFE0
 11995                           indf2	equ	0xFDF
 11996                           postinc2	equ	0xFDE
 11997                           postdec2	equ	0xFDD
 11998                           plusw2	equ	0xFDB
 11999                           fsr2h	equ	0xFDA
 12000                           fsr2l	equ	0xFD9
 12001                           status	equ	0xFD8
 12002                           
 12003                           	psect	intcode_body
 12004  0026C8                     __pintcode_body:
 12005                           	opt stack 22
 12006  0026C8                     int_func:
 12007                           	opt stack 22
 12008  0026C8  FFFF               	dw	65535	; errata NOP
 12009                           
 12010                           ;interrupts.c: 135: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 12011  0026CA  B09E               	btfsc	3998,0,c	;volatile
 12012  0026CC  A09D               	btfss	3997,0,c	;volatile
 12013  0026CE  D00C               	goto	i2l81
 12014                           
 12015                           ;interrupts.c: 136: {
 12016                           ;interrupts.c: 137: PIR1bits.TMR1IF = 0;
 12017  0026D0  909E               	bcf	3998,0,c	;volatile
 12018                           
 12019                           ;interrupts.c: 138: millisecondsFromStart++;
 12020  0026D2  0100               	movlb	0	; () banked
 12021  0026D4  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 12022  0026D6  0E00               	movlw	0
 12023  0026D8  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 12024  0026DA  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 12025  0026DC  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;interrupts.c: 139: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 12029  0026DE  0EF6               	movlw	246
 12030  0026E0  6ECF               	movwf	4047,c	;volatile
 12031                           
 12032                           ; BSR set to: 0
 12033  0026E2  0E3C               	movlw	60
 12034  0026E4  6ECE               	movwf	4046,c	;volatile
 12035  0026E6  D01C               	goto	i2l82
 12036  0026E8                     i2l81:
 12037  0026E8  FFFF               	dw	65535	; assembler added errata NOP
 12038                           
 12039                           ;interrupts.c: 141: }
 12040                           ;interrupts.c: 143: if(INTCONbits.TMR0IF)
 12041  0026EA  A4F2               	btfss	intcon,2,c	;volatile
 12042  0026EC  D019               	goto	i2l82
 12043                           
 12044                           ;interrupts.c: 144: {
 12045                           ;interrupts.c: 145: INTCONbits.TMR0IF = 0;
 12046  0026EE  94F2               	bcf	intcon,2,c	;volatile
 12047                           
 12048                           ;interrupts.c: 146: _6sCounter++;
 12049  0026F0  0100               	movlb	0	; () banked
 12050  0026F2  2BCE               	incf	__6sCounter& (0+255),f,b	;volatile
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;interrupts.c: 147: if(_6sCounter == 10)
 12054  0026F4  0E0A               	movlw	10
 12055  0026F6  19CE               	xorwf	__6sCounter& (0+255),w,b	;volatile
 12056  0026F8  E10F               	bnz	i2l4950
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;interrupts.c: 148: {
 12060                           ;interrupts.c: 149: _6sCounter = 0;
 12061  0026FA  6BCE               	clrf	__6sCounter& (0+255),b	;volatile
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;interrupts.c: 150: globalMinutes++;
 12065  0026FC  2A74               	incf	_globalMinutes,f,c	;volatile
 12066                           
 12067                           ;interrupts.c: 151: _totalMinutesFromDayStart++;
 12068  0026FE  4BC4               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 12069  002700  2BC5               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;interrupts.c: 152: if(globalMinutes == 60)
 12073  002702  0E3C               	movlw	60
 12074  002704  1874               	xorwf	_globalMinutes,w,c	;volatile
 12075  002706  E108               	bnz	i2l4950
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;interrupts.c: 153: {
 12079                           ;interrupts.c: 154: globalMinutes = 0;
 12080  002708  6A74               	clrf	_globalMinutes,c	;volatile
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;interrupts.c: 155: globalHours++;
 12084  00270A  2A77               	incf	_globalHours,f,c	;volatile
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;interrupts.c: 156: if(globalHours == 24)
 12088  00270C  0E18               	movlw	24
 12089  00270E  1877               	xorwf	_globalHours,w,c	;volatile
 12090  002710  E103               	bnz	i2l4950
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;interrupts.c: 157: {
 12094                           ;interrupts.c: 158: _totalMinutesFromDayStart = 0;
 12095  002712  6BC4               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 12096  002714  6BC5               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 12097                           
 12098                           ;interrupts.c: 159: globalHours = 0;
 12099  002716  6A77               	clrf	_globalHours,c	;volatile
 12100  002718                     i2l4950:
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;interrupts.c: 160: }
 12104                           ;interrupts.c: 161: }
 12105                           ;interrupts.c: 162: }
 12106                           ;interrupts.c: 163: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + 30) * 6)&0xFF)));
 12107  002718  0E1A               	movlw	26
 12108  00271A  6ED7               	movwf	4055,c	;volatile
 12109  00271C  0E6E               	movlw	110
 12110  00271E  6ED6               	movwf	4054,c	;volatile
 12111  002720                     i2l82:
 12112  002720  FFFF               	dw	65535	; assembler added errata NOP
 12113  002722  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12114  002724  0011               	retfie		f
 12115  002726  FFFF               	dw	65535	; errata NOP
 12116  002728                     __end_of_high_isr:
 12117                           	opt stack 0
 12118                           tblptru	equ	0xFF8
 12119                           tblptrh	equ	0xFF7
 12120                           tblptrl	equ	0xFF6
 12121                           tablat	equ	0xFF5
 12122                           prodh	equ	0xFF4
 12123                           prodl	equ	0xFF3
 12124                           intcon	equ	0xFF2
 12125                           intcon2	equ	0xFF1
 12126                           postinc0	equ	0xFEE
 12127                           wreg	equ	0xFE8
 12128                           indf1	equ	0xFE7
 12129                           postinc1	equ	0xFE6
 12130                           postdec1	equ	0xFE5
 12131                           fsr1h	equ	0xFE2
 12132                           fsr1l	equ	0xFE1
 12133                           bsr	equ	0xFE0
 12134                           indf2	equ	0xFDF
 12135                           postinc2	equ	0xFDE
 12136                           postdec2	equ	0xFDD
 12137                           plusw2	equ	0xFDB
 12138                           fsr2h	equ	0xFDA
 12139                           fsr2l	equ	0xFD9
 12140                           status	equ	0xFD8
 12141                           tblptru	equ	0xFF8
 12142                           tblptrh	equ	0xFF7
 12143                           tblptrl	equ	0xFF6
 12144                           tablat	equ	0xFF5
 12145                           prodh	equ	0xFF4
 12146                           prodl	equ	0xFF3
 12147                           intcon	equ	0xFF2
 12148                           intcon2	equ	0xFF1
 12149                           postinc0	equ	0xFEE
 12150                           wreg	equ	0xFE8
 12151                           indf1	equ	0xFE7
 12152                           postinc1	equ	0xFE6
 12153                           postdec1	equ	0xFE5
 12154                           fsr1h	equ	0xFE2
 12155                           fsr1l	equ	0xFE1
 12156                           bsr	equ	0xFE0
 12157                           indf2	equ	0xFDF
 12158                           postinc2	equ	0xFDE
 12159                           postdec2	equ	0xFDD
 12160                           plusw2	equ	0xFDB
 12161                           fsr2h	equ	0xFDA
 12162                           fsr2l	equ	0xFD9
 12163                           status	equ	0xFD8
 12164                           
 12165                           	psect	rparam
 12166  0000                     tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           intcon2	equ	0xFF1
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           indf1	equ	0xFE7
 12177                           postinc1	equ	0xFE6
 12178                           postdec1	equ	0xFE5
 12179                           fsr1h	equ	0xFE2
 12180                           fsr1l	equ	0xFE1
 12181                           bsr	equ	0xFE0
 12182                           indf2	equ	0xFDF
 12183                           postinc2	equ	0xFDE
 12184                           postdec2	equ	0xFDD
 12185                           plusw2	equ	0xFDB
 12186                           fsr2h	equ	0xFDA
 12187                           fsr2l	equ	0xFD9
 12188                           status	equ	0xFD8
 12189                           
 12190                           	psect	temp
 12191  000078                     btemp:
 12192                           	opt stack 0
 12193  000078                     	ds	1
 12194  0000                     int$flags	set	btemp
 12195                           tblptru	equ	0xFF8
 12196                           tblptrh	equ	0xFF7
 12197                           tblptrl	equ	0xFF6
 12198                           tablat	equ	0xFF5
 12199                           prodh	equ	0xFF4
 12200                           prodl	equ	0xFF3
 12201                           intcon	equ	0xFF2
 12202                           intcon2	equ	0xFF1
 12203                           postinc0	equ	0xFEE
 12204                           wreg	equ	0xFE8
 12205                           indf1	equ	0xFE7
 12206                           postinc1	equ	0xFE6
 12207                           postdec1	equ	0xFE5
 12208                           fsr1h	equ	0xFE2
 12209                           fsr1l	equ	0xFE1
 12210                           bsr	equ	0xFE0
 12211                           indf2	equ	0xFDF
 12212                           postinc2	equ	0xFDE
 12213                           postdec2	equ	0xFDD
 12214                           plusw2	equ	0xFDB
 12215                           fsr2h	equ	0xFDA
 12216                           fsr2l	equ	0xFD9
 12217                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        3
    BSS         560
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     119
    BANK0           128     18     116
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@sec	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(1) Largest target is 2
		 -> ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   37339
                                            105 COMRAM     5     5      0
                                              7 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             13    13      0   14335
                                            101 COMRAM     4     4      0
                                              0 BANK0      7     7      0
                _CommandSetStatusLed
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                          _PlaySound
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    6973
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    6853
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                          17    15      2    1037
                                             10 COMRAM    17    15      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0     951
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CommandSetStatusLed                                  3     3      0    2470
                                             28 COMRAM     3     3      0
                     _LightStatusLed
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     478
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           2     1      1     138
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2212
                                             14 COMRAM     5     5      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3485
                                             28 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PlaySound                                            8     6      2     720
                                             20 COMRAM     8     6      2
                            _GetTime
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (3) _SoundPlayNextStep                                    6     6      0     238
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (4) _StopPlaying                                          2     2      0       0
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     295
                                              7 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (5) _getTotalMinutes                                      1     1      0      97
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2144
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   14229
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     608
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     852
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     833
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2820
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1189
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     871
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     707
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1171
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1142
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1291
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     574
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _CommandSetStatusLed
       _LightStatusLed
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _SoundPlayNextStep
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
       _StopPlaying
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getTotalMinutes
         _SetHourMin
           ___lbdiv
           ___lbmod
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      74       5       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      77       1       94.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B3      15        0.0%
DATA                 0      0     2B3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun May 22 11:26:29 2016

                                             LoadNextEvent@totalMinutes 000A  
                                                         _years_to_days 1B14  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$879 0012  
                                           __end_of_CommandSetStatusLed 2604  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l63 2ABE  
                                                                    l71 2A66  
                                                                    l66 2AC2  
                                                                    l75 2A86  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l110 2C20  
                                                                   l105 2B90  
                                                                   l106 2BAA  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l109 2C0C  
                                                                   l243 2950  
                                                                   l412 203C  
                                                                   l245 295A  
                                                                   l246 2964  
                                                                   l407 1AA6  
                                                                   l247 296E  
                                                                   l248 298A  
                                                                   l440 25FE  
                                                                   l267 0AE8  
                                                                   l259 0C6C  
                                                                   l451 15EE  
                                                                   l372 218A  
                                                                   l285 1D06  
                                                                   l453 169A  
                                                                   l445 16C2  
                                                                   l382 1DD6  
                                                                   l711 0F26  
                                                                   l463 1636  
                                                                   l455 1602  
                                                                   l712 113E  
                                                                   l376 1DF2  
                                                                   l393 1B0E  
                                                                   l369 219E  
                                                                   l457 1604  
                                                                   l716 0F5E  
                                                                   l660 142A  
                                                                   l725 1136  
                                                                   l816 21F8  
                                                                   l656 286A  
                                                                   l834 1582  
                                                                   l764 17C6  
                                                                   l696 29CE  
                                                                   l688 2CD4  
                                                                   l795 19E6  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2C00  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 2668  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 0026  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 1A0C  
                                                         _globalMinutes 0074  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1243 27CC  
                                                                  l1253 28F8  
                                                                  l4000 0FAE  
                                                                  l4020 0FD6  
                                                                  l4004 0FB4  
                                                                  l4100 10F8  
                                                                  l1269 281A  
                                                                  l4030 0FF4  
                                                                  l4022 0FE2  
                                                                  l4014 0FCC  
                                                                  l1289 06A6  
                                                                  l4042 1024  
                                                                  l4054 104A  
                                                                  l3440 2A7E  
                                                                  l6000 1FF8  
                                                                  l4090 10EA  
                                                                  l4074 10CC  
                                                                  l5202 2294  
                                                                  l3620 24DA  
                                                                  l3612 24C6  
                                                                  l6012 12D8  
                                                                  l5300 1AD8  
                                                                  l4500 0D18  
                                                                  l6102 13E6  
                                                                  l4510 0D38  
                                                                  l4502 0D1E  
                                                                  l5062 2818  
                                                                  l5070 2796  
                                                                  l5206 22BE  
                                                                  l6112 13F2  
                                                                  l6040 1334  
                                                                  l6016 12DE  
                                                                  l5160 2A2E  
                                                                  l5072 27A0  
                                                                  l3634 2502  
                                                                  l6106 13EC  
                                                                  l6026 1308  
                                                                  l5410 1D6E  
                                                                  l4610 0E68  
                                                                  l4602 0E54  
                                                                  l4530 0D78  
                                                                  l5250 1CAA  
                                                                  l5242 1C48  
                                                                  l5162 2A34  
                                                                  l5090 28CA  
                                                                  l5082 27C2  
                                                                  l5074 27A6  
                                                                  l6130 15E2  
                                                                  l3660 2AB6  
                                                                  l3628 24F8  
                                                                  l6060 135A  
                                                                  l6036 132E  
                                                                  l5500 0ABE  
                                                                  l5420 1D9A  
                                                                  l5404 1D28  
                                                                  l4524 0D64  
                                                                  l4516 0D4A  
                                                                  l4508 0D30  
                                                                  l5244 1C66  
                                                                  l5156 2A26  
                                                                  l5172 2A4E  
                                                                  l5180 2B62  
                                                                  l5092 28D4  
                                                                  l6212 11CE  
                                                                  l6070 1382  
                                                                  l6062 1360  
                                                                  l5510 0BBA  
                                                                  l5502 0B16  
                                                                  l5270 1A28  
                                                                  l5350 2190  
                                                                  l5326 212A  
                                                                  l4526 0D6C  
                                                                  l4518 0D52  
                                                                  l5254 1CD8  
                                                                  l5238 1C22  
                                                                  l5094 28DA  
                                                                  l6134 15F2  
                                                                  l6214 11D2  
                                                                  l6206 11BE  
                                                                  l6056 1356  
                                                                  l5264 1A1E  
                                                                  l5408 1D3C  
                                                                  l4632 0EAE  
                                                                  l4624 0E94  
                                                                  l4616 0E7A  
                                                                  l4608 0E62  
                                                                  l4560 0DD2  
                                                                  l4552 0DB8  
                                                                  l4544 0D9E  
                                                                  l4536 0D86  
                                                                  l4640 0EC2  
                                                                  l5248 1C8C  
                                                                  l5168 2A46  
                                                                  l5360 06B2  
                                                                  l6240 1272  
                                                                  l6224 1230  
                                                                  l3658 2AB4  
                                                                  l6090 13C6  
                                                                  l6082 13AE  
                                                                  l6074 1394  
                                                                  l6066 1374  
                                                                  l5506 0B94  
                                                                  l5290 1A8A  
                                                                  l4634 0EB6  
                                                                  l4626 0E9C  
                                                                  l4618 0E82  
                                                                  l4562 0DDA  
                                                                  l4554 0DC0  
                                                                  l4546 0DA6  
                                                                  l4538 0D8C  
                                                                  l4642 0ED8  
                                                                  l5098 28EE  
                                                                  l5370 096A  
                                                                  l4732 247E  
                                                                  l3780 2696  
                                                                  l5516 0C30  
                                                                  l5292 1A92  
                                                                  l5284 1A78  
                                                                  l5276 1A4E  
                                                                  l5268 1A26  
                                                                  l4580 0E0C  
                                                                  l4572 0DF4  
                                                                  l5604 2B40  
                                                                  l5188 2B7A  
                                                                  l6172 167A  
                                                                  l6244 1292  
                                                                  l3942 2998  
                                                                  l3950 29BA  
                                                                  l5702 234E  
                                                                  l6094 13CE  
                                                                  l6086 13C0  
                                                                  l6078 13A6  
                                                                  l5518 0C4C  
                                                                  l5526 0C54  
                                                                  l5294 1A9A  
                                                                  l5286 1A7E  
                                                                  l4590 0E2E  
                                                                  l4582 0E14  
                                                                  l4574 0DFA  
                                                                  l4566 0DE6  
                                                                  l4494 0D0A  
                                                                  l6166 1664  
                                                                  l6158 162A  
                                                                  l6174 16A6  
                                                                  l5640 178A  
                                                                  l5632 172E  
                                                                  l5624 171E  
                                                                  l5800 1E34  
                                                                  l5704 2380  
                                                                  l5288 1A84  
                                                                  l4488 0CE0  
                                                                  l5608 2B52  
                                                                  l6168 1674  
                                                                  l5642 17B8  
                                                                  l5650 17CC  
                                                                  l5810 1EB0  
                                                                  l3786 26BC  
                                                                  l6098 13E0  
                                                                  l5298 1AAC  
                                                                  l3794 2978  
                                                                  l5466 284C  
                                                                  l5900 147A  
                                                                  l5492 09AE  
                                                                  l5388 2BDE  
                                                                  l4596 0E40  
                                                                  l4588 0E26  
                                                                  l5556 2400  
                                                                  l6196 1188  
                                                                  l3958 29CC  
                                                                  l5806 1E8C  
                                                                  l5910 14BC  
                                                                  l3982 0F54  
                                                                  l3974 0F2A  
                                                                  l5494 0A44  
                                                                  l5486 0992  
                                                                  l4598 0E48  
                                                                  l5656 17E4  
                                                                  l5752 193C  
                                                                  l5920 14EA  
                                                                  l5912 14C2  
                                                                  l3992 0F86  
                                                                  l3984 0F5A  
                                                                  l5762 19A6  
                                                                  l5826 253C  
                                                                  l5682 20C8  
                                                                  l3978 0F4C  
                                                                  l5594 25D0  
                                                                  l5586 25B0  
                                                                  l5764 19D8  
                                                                  l5772 19EC  
                                                                  l5676 2074  
                                                                  l5932 1526  
                                                                  l5924 14FE  
                                                                  l5916 14D6  
                                                                  l3996 0F8A  
                                                                  l3988 0F64  
                                                                  l5942 154E  
                                                                  l5880 2230  
                                                                  l5936 153A  
                                                                  l5928 1512  
                                                                  l5946 156E  
                                                                  l5892 1446  
                                                                  l5878 222E  
                                                                  l5958 29E2  
                                                                  l5994 1FD2  
                                                                  l5988 1FB4  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 294A  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u3070 10CA  
                                                                  u4204 1C5A  
                                                                  u4205 1C54  
                                                                  u4150 227C  
                                                                  u4224 1C7E  
                                                                  u4225 1C78  
                                                                  u4234 1C9E  
                                                                  u4235 1C98  
                                                                  u5300 11FE  
                                                                  u2910 0F22  
                                                                  u4254 1CC6  
                                                                  u4255 1CBE  
                                                                  u4504 09C2  
                                                                  u4264 1CEE  
                                                                  u4360 068C  
                                                                  u4505 09BC  
                                                                  u4265 1CE6  
                                                                  u4514 09EA  
                                                                  u4194 1C3A  
                                                                  u4370 06A6  
                                                                  u4515 09E4  
                                                                  u4195 1C34  
                                                                  u4604 0B2A  
                                                                  u4524 0A14  
                                                                  u4605 0B24  
                                                                  u4525 0A0E  
                                                                  u2950 0F86  
                                                                  u4614 0B52  
                                                                  u4534 0A3C  
                                                                  u4615 0B4C  
                                                                  u4535 0A36  
                                                                  u4624 0B78  
                                                                  u4544 0A58  
                                                                  u4464 283E  
                                                                  u4625 0B72  
                                                                  u4545 0A52  
                                                                  u4465 2838  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u2970 0FAE  
                                                                  u4554 0A7C  
                                                                  u4474 285E  
                                                                  u4555 0A76  
                                                                  u4475 2858  
                                                                  u4715 23B0  
                                                                  u4804 1756  
                                                                  u4644 0BA6  
                                                                  _RCIF 007CF5  
                                                                  u5357 2A5A  
                                                                  u4805 174E  
                                                                  u4645 0BA0  
                                                                  u4725 23D2  
                                                                  u4654 0BCE  
                                                                  u4574 0AAA  
                                                                  u4655 0BC8  
                                                                  u4575 0AA4  
                                                                  u4824 1772  
                                                                  u4904 2364  
                                                                  u4664 0BF2  
                                                                  u4584 0AD2  
                                                                  u4825 176C  
                                                                  u4905 235C  
                                                                  u4665 0BEC  
                                                                  u4585 0ACC  
                                                                  u4834 179E  
                                                                  u4914 196A  
                                                                  u4594 0AFC  
                                                                  u4835 1798  
                                                                  u4915 1964  
                                                                  u4595 0AF6  
                                                                  u4755 25BA  
                                                                  u4684 0C1C  
                                                                  u4685 0C16  
                                                                  i1l94 0064  
                                                                  u4934 1990  
                                                                  u4694 0C44  
                                                                  i1l95 0038  
                                                                  u4935 1988  
                                                                  u4695 0C3E  
                                                                  u4944 19BC  
                                                                  i2l81 26E8  
                                                                  u4945 19B4  
                                                                  i2l82 2720  
                                                                  u4894 2338  
                                                                  u4895 2330  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 1144  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0078  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2D12  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0076  
                                                       __end_of_InitApp 24BA  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CE  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2C64  
                                                  _curEventTotalMinutes 00CA  
                                           getTotalMinutes@totalMinutes 0007  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2A54  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                       __end_of___lbmod 2B84  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000C  
                                                       __end_of___lwdiv 27D8  
                                                       __end_of___lwmod 2904  
                                            __end_of_ModbusSendTxBuffer 28BC  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2D1A  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2396  
                                                        ?_LoadNextEvent 0001  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D6  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 2990  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 16C8  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00CC  
                                                        _UartBufferTail 006F  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                       ___lbdiv@counter 0009  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2C46  
                                                       __initialization 2604  
                                                          __end_of_main 12C0  
                                                      __end_of_LightLed 0C72  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 2436  
                                                            _ModbusInit 2CC6  
                                                            _ModbusPoll 12C0  
                                                      __end_of_PortRead 2AC8  
                                                        _InitUartBuffer 2CFC  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 17F4  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1C16  
                                                                i1l4970 005E  
                                                                i1l4972 0060  
                                                                i2l4950 2718  
                                                     ??_getTotalMinutes 0007  
                                                         _ymd_to_scalar 2250  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 29D4  
                                                         main@oldMinute 00ED  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D8  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2CB2  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 2728  
                                             __playingSoundStartPosInEe 0070  
                                                        _UartRingBuffer 0200  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BE  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00EA  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 27D8  
                                                                _millis 2BB0  
                                                                clear_0 260C  
                                                                clear_1 261E  
                                                                clear_2 262A  
                                                     __end_of_AddSecond 2CFC  
                                                                _mktime 066E  
                                                          __lastCommand 00E1  
                                                 __end_of_PortAvailable 2D1A  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0008  
                                                          __pdataCOMRAM 0075  
                                                __end_of_InitUartBuffer 2D0A  
                                                          __MODBUSCoils 00DF  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D5  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2CEC  
                                                __end_of_LightStatusLed 1D0C  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D7  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 265A  
                                                       ___lbmod@counter 0009  
                                            __end_of_ModbusProcess_FC21 2250  
                                            __end_of_ModbusProcess_FC15 1A0C  
                                            __end_of_ModbusProcess_FC16 1EC0  
                                            __end_of_ModbusProcess_FC17 259C  
                                            __end_of_ModbusProcess_FC43 1592  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1144  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 24BA  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001B  
                                                      ___lbdiv@quotient 000A  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00E2  
                                                  _ModbusBuildException 2C26  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1DF6  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2C9A  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2A92  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2B84  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0068  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000C  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 2870  
                                                               _GetTime 2D0A  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00D1  
                                                   __end_of_StopPlaying 2C80  
                                                               _InitApp 2436  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2C46  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0170  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 00DA  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                               ___lbdiv 2A16  
                                                               ___lbmod 2B58  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 2784  
                                                               ___lwmod 28BC  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 010E  
                                                               __pcinit 2604  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2AC8  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0073  
                                                       __size_of_mktime 0312  
                                                               __ptext0 1144  
                                                               __ptext1 2CDA  
                                                               __ptext2 1592  
                                                               __ptext3 2AFA  
                                                               __ptext4 1EC0  
                                                               __ptext5 066E  
                                                               __ptext6 2250  
                                                               __ptext7 1B14  
                                                               __ptext8 2904  
                                                               __ptext9 2784  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 1592  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0019  
                                                   __size_of_ResetEvent 0042  
                                                       _getTotalMinutes 2C00  
                                              __size_of_SetTimeFromRegs 00C6  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 26C8  
                                                  end_of_initialization 265A  
                                                         __Lmediumconst 0000  
                                                               int_func 26C8  
                                                   __playingSoundCurPos 00D4  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                             __totalMinutesFromDayStart 00C4  
                                                        ??_ProcessDiary 001D  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2CEC  
                                                        _months_to_days 2904  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 2990  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     _SoundPlayNextStep 20F6  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2C64  
                                           __end_of_ConfigureOscillator 2D20  
                                                    ?_SoundPlayNextStep 0001  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E9  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F3  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1C16  
                                                        __end_of_Modbus 2CC6  
                                               __end_of_getTotalMinutes 2C26  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 21A4  
                                                    _ModbusProcess_FC15 1902  
                                                    _ModbusProcess_FC16 1DF6  
                                                    _ModbusProcess_FC17 252E  
                                                    _ModbusProcess_FC43 1430  
                                                         __pidataCOMRAM 2D20  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 2824  
                                                        __end_of_millis 2BDA  
                                                __end_of_months_to_days 294A  
                                             __end_of_ModbusGetRxBuffer 29D4  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00CD  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                             __end_of_SoundPlayNextStep 21A4  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2604  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 1B14  
                                                          ??_SetHourMin 000D  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1D0C  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 259C  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 2CDA  
                                                    __end_of_ModbusPoll 1430  
                                                             _PortBegin 2C80  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EE4  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2A54  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 1902  
                                                     __holdingRegsCount 00D0  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 2A16  
                                                         __pcstackBANK0 00E2  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 2040  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2720  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001C  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C8  
                                                            ?_PortWrite 0007  
                                                      ?_getTotalMinutes 0001  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2B58  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2D12  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001D  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0072  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00AE  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C6  
                                                 io_poll@lastEndAddress 00E3  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 000B  
                                                 __end_of_ymd_to_scalar 22F4  
                                                      SetHourMin@tmpSec 001A  
                                              ProcessDiary@totalMinutes 0021  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D9  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                           __soundCount 0071  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 26C8  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0075  
                                                       __isSoundPlaying 00D2  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2870  
                                           _ModbusSetExceptionStatusBit 2824  
                                                __nextEventPlayDuration 00C2  
                                                              InitApp@i 0007  
                                                           _globalHours 0077  
                                                             main@curMs 00EF  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 16C8  
                                                     _ModbusProcess_FC3 2040  
                                                     _ModbusProcess_FC5 22F4  
                                                     _ModbusProcess_FC6 2728  
                                                     _ModbusProcess_FC7 2C9A  
                                                           _INTCON2bits 000FF1  
                                        CommandSetStatusLed@commandData 001E  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0980  
                                                    __end_of_getHourMin 2BB0  
                                                           ??_PlaySound 0017  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 2BDA  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E5  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 252E  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001F  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2A92  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BA  
                                                           _isleap$2167 000F  
                                                       _SetTimeFromRegs 1EC0  
                                                           _currentTime 00DB  
                                                      __size_of_io_poll 0136  
                                                              _diffTime 00A8  
                                             __end_of_ModbusProcess_FC1 17F4  
                                             __end_of_ModbusProcess_FC3 20F6  
                                             __end_of_ModbusProcess_FC5 2396  
                                             __end_of_ModbusProcess_FC6 2784  
                                             __end_of_ModbusProcess_FC7 2CB2  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E6  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 27D8  
                                                              __ptext11 28BC  
                                                              __ptext20 259C  
                                                              __ptext12 2C46  
                                                              __ptext21 2824  
                                                              __ptext13 17F4  
                                                              __ptext30 20F6  
                                                              __ptext22 1C16  
                                                              __ptext14 2B58  
                                                              __ptext31 2C64  
                                                              __ptext23 2B84  
                                                              __ptext15 2A16  
                                                              __ptext40 2728  
                                                              __ptext32 2AC8  
                                                              __ptext24 29D4  
                                                              __ptext16 2B2A  
                                                              __ptext41 22F4  
                                                              __ptext33 2D0A  
                                                              __ptext25 0C72  
                                                              __ptext17 2396  
                                                              __ptext50 2870  
                                                              __ptext42 1430  
                                                              __ptext34 1A0C  
                                                              __ptext26 294A  
                                                              __ptext18 2CB2  
                                                              __ptext51 2BB0  
                                                              __ptext43 2668  
                                                              __ptext35 2C00  
                                                              __ptext27 1F86  
                                                              __ptext19 2CC6  
                                                              __ptext60 2CFC  
                                                              __ptext52 2A54  
                                                              __ptext44 2040  
                                                              __ptext36 0980  
                                                              __ptext28 2BDA  
                                                              __ptext61 2D1A  
                                                              __ptext53 24BA  
                                                              __ptext45 21A4  
                                                              __ptext37 12C0  
                                                              __ptext29 1D0C  
                                                              __ptext62 2CEC  
                                                              __ptext54 2990  
                                                              __ptext46 252E  
                                                              __ptext38 0EE4  
                                                              __ptext55 2A92  
                                                              __ptext47 1DF6  
                                                              __ptext39 2C9A  
                                                              __ptext56 2D12  
                                                              __ptext48 1902  
                                                              __ptext57 2C26  
                                                              __ptext49 16C8  
                                                              __ptext58 2436  
                                                              __ptext59 2C80  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E8  
                                                         __size_of_main 017C  
                                                  _ModbusGetLastCommand 2B2A  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1F86  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0078  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2CDA  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00EE  
                                                      __exceptionStatus 00CF  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2180 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 00A0  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00D3  
                                                        _SetTimeCommand 2AFA  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2D24  
                                                              intlevel2 2D24  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001B  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0C72  
                                                 __MODBUSDiscreteInputs 00BC  
                                                __size_of_LoadNextEvent 0108  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1F86  
                                                 __end_of_SetBuzzerDuty 2AFA  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 2B2A  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 001C  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0EE4  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                            ModbusProcess_FC15@u8bitsno 0028  
