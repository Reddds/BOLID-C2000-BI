

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jun 04 19:03:47 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    96                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           	psect	eeprom_data
   103  F00000  11 7F FF 06 09 FF 01 04 	db	17,127,255,6,9,255,1,4	;# 
   104  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
   105  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
   106  0000                     
   107                           	psect	idataCOMRAM
   108  0030DA                     __pidataCOMRAM:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _globalHours
   112  0030DA  FF                 	db	255
   113                           
   114                           	psect	smallconst
   115  000600                     __psmallconst:
   116                           	opt stack 0
   117  000600  00                 	db	0
   118  000601                     _fctsupported:
   119                           	opt stack 0
   120  000601  01                 	db	1
   121  000602  02                 	db	2
   122  000603  03                 	db	3
   123  000604  04                 	db	4
   124  000605  05                 	db	5
   125  000606  06                 	db	6
   126  000607  07                 	db	7
   127  000608  0F                 	db	15
   128  000609  10                 	db	16
   129  00060A  11                 	db	17
   130  00060B  15                 	db	21
   131  00060C  2B                 	db	43
   132  00060D  64                 	db	100
   133  00060E  65                 	db	101
   134  00060F  66                 	db	102
   135  000610                     __end_of_fctsupported:
   136                           	opt stack 0
   137  0000                     _CCP1CONbits	set	4029
   138  0000                     _CCPR1L	set	4030
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCON2bits	set	4081
   143  0000                     _INTCONbits	set	4082
   144  0000                     _IPR1bits	set	3999
   145  0000                     _LATA	set	3977
   146  0000                     _LATAbits	set	3977
   147  0000                     _LATB	set	3978
   148  0000                     _LATCbits	set	3979
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _PORTCbits	set	3970
   152  0000                     _PR2	set	4043
   153  0000                     _RCONbits	set	4048
   154  0000                     _RCREG	set	4014
   155  0000                     _RCSTA	set	4011
   156  0000                     _RCSTAbits	set	4011
   157  0000                     _SPBRG	set	4015
   158  0000                     _T0CONbits	set	4053
   159  0000                     _T1CONbits	set	4045
   160  0000                     _T2CONbits	set	4042
   161  0000                     _TMR0H	set	4055
   162  0000                     _TMR0L	set	4054
   163  0000                     _TMR1H	set	4047
   164  0000                     _TMR1L	set	4046
   165  0000                     _TRISAbits	set	3986
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISCbits	set	3988
   168  0000                     _TXREG	set	4013
   169  0000                     _TXSTA	set	4012
   170  0000                     _TXSTAbits	set	4012
   171  0000                     _CARRY	set	32448
   172  0000                     _GIE	set	32663
   173  0000                     _RCIF	set	31989
   174  0000                     _RD	set	32048
   175  0000                     _TRMT	set	32097
   176  0000                     _WR	set	32049
   177  0000                     _WREN	set	32050
   178  000610                     STR_9:
   179  000610  54                 	db	84	;'T'
   180  000611  61                 	db	97	;'a'
   181  000612  62                 	db	98	;'b'
   182  000613  6C                 	db	108	;'l'
   183  000614  6F                 	db	111	;'o'
   184  000615  20                 	db	32
   185  000616  73                 	db	115	;'s'
   186  000617  20                 	db	32
   187  000618  72                 	db	114	;'r'
   188  000619  61                 	db	97	;'a'
   189  00061A  73                 	db	115	;'s'
   190  00061B  70                 	db	112	;'p'
   191  00061C  69                 	db	105	;'i'
   192  00061D  73                 	db	115	;'s'
   193  00061E  61                 	db	97	;'a'
   194  00061F  6E                 	db	110	;'n'
   195  000620  69                 	db	105	;'i'
   196  000621  65                 	db	101	;'e'
   197  000622  6D                 	db	109	;'m'
   198  000623  00                 	db	0
   199  000624                     STR_7:
   200  000624  68                 	db	104	;'h'
   201  000625  74                 	db	116	;'t'
   202  000626  74                 	db	116	;'t'
   203  000627  70                 	db	112	;'p'
   204  000628  3A                 	db	58	;':'
   205  000629  2F                 	db	47
   206  00062A  2F                 	db	47
   207  00062B  62                 	db	98	;'b'
   208  00062C  6F                 	db	111	;'o'
   209  00062D  6C                 	db	108	;'l'
   210  00062E  69                 	db	105	;'i'
   211  00062F  64                 	db	100	;'d'
   212  000630  2E                 	db	46
   213  000631  72                 	db	114	;'r'
   214  000632  75                 	db	117	;'u'
   215  000633  00                 	db	0
   216  000634                     STR_13:
   217  000634  52                 	db	82	;'R'
   218  000635  61                 	db	97	;'a'
   219  000636  73                 	db	115	;'s'
   220  000637  70                 	db	112	;'p'
   221  000638  69                 	db	105	;'i'
   222  000639  73                 	db	115	;'s'
   223  00063A  61                 	db	97	;'a'
   224  00063B  6E                 	db	110	;'n'
   225  00063C  69                 	db	105	;'i'
   226  00063D  65                 	db	101	;'e'
   227  00063E  00                 	db	0
   228  00063F                     STR_3:
   229  00063F  43                 	db	67	;'C'
   230  000640  32                 	db	50	;'2'
   231  000641  30                 	db	48	;'0'
   232  000642  30                 	db	48	;'0'
   233  000643  30                 	db	48	;'0'
   234  000644  2D                 	db	45
   235  000645  42                 	db	66	;'B'
   236  000646  49                 	db	73	;'I'
   237  000647  00                 	db	0
   238  000648                     STR_1:
   239  000648  42                 	db	66	;'B'
   240  000649  4F                 	db	79	;'O'
   241  00064A  4C                 	db	76	;'L'
   242  00064B  49                 	db	73	;'I'
   243  00064C  44                 	db	68	;'D'
   244  00064D  00                 	db	0
   245  00064E                     STR_5:
   246  00064E  31                 	db	49	;'1'
   247  00064F  2E                 	db	46
   248  000650  30                 	db	48	;'0'
   249  000651  31                 	db	49	;'1'
   250  000652  00                 	db	0
   251  000653                     STR_11:
   252  000653  4D                 	db	77	;'M'
   253  000654  4D                 	db	77	;'M'
   254  000655  4D                 	db	77	;'M'
   255  000656  00                 	db	0
   256  0000                     
   257                           ; #config settings
   258  000657  00                 	db	0	; dummy byte at the end
   259  0000                     
   260                           	psect	cinit
   261  0029A4                     __pcinit:
   262                           	opt stack 0
   263  0029A4                     start_initialization:
   264                           	opt stack 0
   265  0029A4                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Clear objects allocated to BANK2 (256 bytes)
   269  0029A4  EE02  F000         	lfsr	0,__pbssBANK2
   270  0029A8  EE11 F000          	lfsr	1,256
   271  0029AC                     clear_0:
   272  0029AC  6AEE               	clrf	postinc0,c
   273  0029AE  50E5               	movf	postdec1,w,c
   274  0029B0  50E1               	movf	fsr1l,w,c
   275  0029B2  E1FC               	bnz	clear_0
   276  0029B4  50E2               	movf	fsr1h,w,c
   277  0029B6  E1FA               	bnz	clear_0
   278                           
   279                           ; Clear objects allocated to BANK1 (200 bytes)
   280  0029B8  EE01  F000         	lfsr	0,__pbssBANK1
   281  0029BC  0EC8               	movlw	200
   282  0029BE                     clear_1:
   283  0029BE  6AEE               	clrf	postinc0,c
   284  0029C0  06E8               	decf	wreg,f,c
   285  0029C2  E1FD               	bnz	clear_1
   286                           
   287                           ; Clear objects allocated to BANK0 (104 bytes)
   288  0029C4  EE00  F080         	lfsr	0,__pbssBANK0
   289  0029C8  0E68               	movlw	104
   290  0029CA                     clear_2:
   291  0029CA  6AEE               	clrf	postinc0,c
   292  0029CC  06E8               	decf	wreg,f,c
   293  0029CE  E1FD               	bnz	clear_2
   294                           
   295                           ; Clear objects allocated to COMRAM (16 bytes)
   296  0029D0  EE00  F068         	lfsr	0,__pbssCOMRAM
   297  0029D4  0E10               	movlw	16
   298  0029D6                     clear_3:
   299  0029D6  6AEE               	clrf	postinc0,c
   300  0029D8  06E8               	decf	wreg,f,c
   301  0029DA  E1FD               	bnz	clear_3
   302                           
   303                           ; Initialize objects allocated to COMRAM (1 bytes)
   304                           ; load TBLPTR registers with __pidataCOMRAM
   305  0029DC  0EDA               	movlw	low __pidataCOMRAM
   306  0029DE  6EF6               	movwf	tblptrl,c
   307  0029E0  0E30               	movlw	high __pidataCOMRAM
   308  0029E2  6EF7               	movwf	tblptrh,c
   309  0029E4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   310  0029E6  6EF8               	movwf	tblptru,c
   311  0029E8  0009               	tblrd		*+	;fetch initializer
   312  0029EA  CFF5 F078          	movff	tablat,__pdataCOMRAM
   313  0029EE                     end_of_initialization:
   314                           	opt stack 0
   315  0029EE                     __end_of__initialization:
   316                           	opt stack 0
   317  0029EE  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   318  0029F0  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   319  0029F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   320  0029F4  6EF8               	movwf	tblptru,c
   321  0029F6  0100               	movlb	0
   322  0029F8  EF2E  F006         	goto	_main	;jump to C main() function
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1h	equ	0xFE2
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	bssCOMRAM
   334  000068                     __pbssCOMRAM:
   335                           	opt stack 0
   336  000068                     __currenDiaryEvent:
   337                           	opt stack 0
   338  000068                     	ds	9
   339  000071                     _UartBufferHead:
   340                           	opt stack 0
   341  000071                     	ds	1
   342  000072                     __maxDiaryEvents:
   343                           	opt stack 0
   344  000072                     	ds	1
   345  000073                     __playingSoundStartPosInEe:
   346                           	opt stack 0
   347  000073                     	ds	1
   348  000074                     __u8BufferSize:
   349                           	opt stack 0
   350  000074                     	ds	1
   351  000075                     _blinkOn:
   352                           	opt stack 0
   353  000075                     	ds	1
   354  000076                     _eventCount:
   355                           	opt stack 0
   356  000076                     	ds	1
   357  000077                     _globalMinutes:
   358                           	opt stack 0
   359  000077                     	ds	1
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1h	equ	0xFE2
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	dataCOMRAM
   371  000078                     __pdataCOMRAM:
   372                           	opt stack 0
   373  000078                     _globalHours:
   374                           	opt stack 0
   375  000078                     	ds	1
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1h	equ	0xFE2
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bssBANK0
   387  000080                     __pbssBANK0:
   388                           	opt stack 0
   389  000080                     _ledBlink:
   390                           	opt stack 0
   391  000080                     	ds	16
   392  000090                     _ledStatuses:
   393                           	opt stack 0
   394  000090                     	ds	16
   395  0000A0                     __eventFromCommand:
   396                           	opt stack 0
   397  0000A0                     	ds	6
   398  0000A6                     __playingEndMs:
   399                           	opt stack 0
   400  0000A6                     	ds	4
   401  0000AA                     __u32time:
   402                           	opt stack 0
   403  0000AA                     	ds	4
   404  0000AE                     _diffTime:
   405                           	opt stack 0
   406  0000AE                     	ds	4
   407  0000B2                     _millisecondsFromStart:
   408                           	opt stack 0
   409  0000B2                     	ds	4
   410  0000B6                     _oldBlinkOnTime:
   411                           	opt stack 0
   412  0000B6                     	ds	4
   413  0000BA                     _soundTestEnd:
   414                           	opt stack 0
   415  0000BA                     	ds	4
   416  0000BE                     __lastAddress:
   417                           	opt stack 0
   418  0000BE                     	ds	2
   419  0000C0                     __lastCount:
   420                           	opt stack 0
   421  0000C0                     	ds	2
   422  0000C2                     __nextEventPlayDuration:
   423                           	opt stack 0
   424  0000C2                     	ds	2
   425  0000C4                     __totalMinutesFromDayStart:
   426                           	opt stack 0
   427  0000C4                     	ds	2
   428  0000C6                     _UartBufferLen:
   429                           	opt stack 0
   430  0000C6                     	ds	1
   431  0000C7                     _UartBufferTail:
   432                           	opt stack 0
   433  0000C7                     	ds	1
   434  0000C8                     __6sCounter:
   435                           	opt stack 0
   436  0000C8                     	ds	1
   437  0000C9                     __deviceStatus:
   438                           	opt stack 0
   439  0000C9                     	ds	1
   440  0000CA                     __eeFirstSoundAddress:
   441                           	opt stack 0
   442  0000CA                     	ds	1
   443  0000CB                     __eeSoundAddressesList:
   444                           	opt stack 0
   445  0000CB                     	ds	1
   446  0000CC                     __exceptionStatus:
   447                           	opt stack 0
   448  0000CC                     	ds	1
   449  0000CD                     __holdingRegsCount:
   450                           	opt stack 0
   451  0000CD                     	ds	1
   452  0000CE                     __inputRegsCount:
   453                           	opt stack 0
   454  0000CE                     	ds	1
   455  0000CF                     __isSoundPlaying:
   456                           	opt stack 0
   457  0000CF                     	ds	1
   458  0000D0                     __lastCommand:
   459                           	opt stack 0
   460  0000D0                     	ds	1
   461  0000D1                     __nextEventSoundId:
   462                           	opt stack 0
   463  0000D1                     	ds	1
   464  0000D2                     __playingSoundCurPos:
   465                           	opt stack 0
   466  0000D2                     	ds	1
   467  0000D3                     __playingSoundSteps:
   468                           	opt stack 0
   469  0000D3                     	ds	1
   470  0000D4                     __soundCount:
   471                           	opt stack 0
   472  0000D4                     	ds	1
   473  0000D5                     __u8id:
   474                           	opt stack 0
   475  0000D5                     	ds	1
   476  0000D6                     __u8lastRec:
   477                           	opt stack 0
   478  0000D6                     	ds	1
   479  0000D7                     _currentLedBlock:
   480                           	opt stack 0
   481  0000D7                     	ds	1
   482  0000D8                     _eventAcceptTime:
   483                           	opt stack 0
   484  0000D8                     	ds	1
   485  0000D9                     _currentTime:
   486                           	opt stack 0
   487  0000D9                     	ds	4
   488  0000DD                     __MODBUSCoils:
   489                           	opt stack 0
   490  0000DD                     	ds	2
   491  0000DF                     _ModbusUserCommandAdditional1Hi:
   492                           	opt stack 0
   493  0000DF                     	ds	1
   494  0000E0                     _ModbusUserCommandAdditional1Lo:
   495                           	opt stack 0
   496  0000E0                     	ds	1
   497  0000E1                     _ModbusUserCommandAdditional2Hi:
   498                           	opt stack 0
   499  0000E1                     	ds	1
   500  0000E2                     _ModbusUserCommandAdditional2Lo:
   501                           	opt stack 0
   502  0000E2                     	ds	1
   503  0000E3                     _ModbusUserCommandAdditional3Hi:
   504                           	opt stack 0
   505  0000E3                     	ds	1
   506  0000E4                     _ModbusUserCommandAdditional3Lo:
   507                           	opt stack 0
   508  0000E4                     	ds	1
   509  0000E5                     _ModbusUserCommandData:
   510                           	opt stack 0
   511  0000E5                     	ds	1
   512  0000E6                     _ModbusUserCommandId:
   513                           	opt stack 0
   514  0000E6                     	ds	1
   515  0000E7                     __lastFunction:
   516                           	opt stack 0
   517  0000E7                     	ds	1
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           postdec1	equ	0xFE5
   525                           fsr1h	equ	0xFE2
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	bssBANK1
   529  000100                     __pbssBANK1:
   530                           	opt stack 0
   531  000100                     __au8Buffer:
   532                           	opt stack 0
   533  000100                     	ds	140
   534  00018C                     __MODBUSHoldingRegs:
   535                           	opt stack 0
   536  00018C                     	ds	30
   537  0001AA                     __MODBUSInputRegs:
   538                           	opt stack 0
   539  0001AA                     	ds	30
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1h	equ	0xFE2
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	bssBANK2
   551  000200                     __pbssBANK2:
   552                           	opt stack 0
   553  000200                     _UartRingBuffer:
   554                           	opt stack 0
   555  000200                     	ds	256
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1h	equ	0xFE2
   564                           fsr1l	equ	0xFE1
   565                           
   566                           	psect	cstackBANK1
   567  0001C8                     __pcstackBANK1:
   568                           	opt stack 0
   569  0001C8                     main@debounceDelay:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x0
   573  0001C8                     	ds	1
   574  0001C9                     main@lastMs:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x1
   578  0001C9                     	ds	4
   579  0001CD                     main@lastDebounceTime:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0x5
   583  0001CD                     	ds	4
   584  0001D1                     main@oldMinute:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x9
   588  0001D1                     	ds	2
   589  0001D3                     main@lastButtonPinState:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0xB
   593  0001D3                     	ds	1
   594  0001D4                     main@buttonState:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xC
   598  0001D4                     	ds	1
   599  0001D5                     main@hour:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xD
   603  0001D5                     	ds	1
   604  0001D6                     main@minute:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0xE
   608  0001D6                     	ds	1
   609  0001D7                     main@buttonPinCurState:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0xF
   613  0001D7                     	ds	1
   614  0001D8                     main@totalMinutes:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x10
   618  0001D8                     	ds	2
   619  0001DA                     main@curMs:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x12
   623  0001DA                     	ds	4
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1h	equ	0xFE2
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	cstackBANK0
   635  0000E8                     __pcstackBANK0:
   636                           	opt stack 0
   637  0000E8                     ??_main:
   638                           
   639                           ; 1 bytes @ 0x0
   640  0000E8                     	ds	8
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1h	equ	0xFE2
   649                           fsr1l	equ	0xFE1
   650                           
   651                           	psect	cstackCOMRAM
   652  000001                     __pcstackCOMRAM:
   653                           	opt stack 0
   654  000001                     ??_low_isr:
   655  000001                     
   656                           ; 1 bytes @ 0x0
   657  000001                     	ds	5
   658  000006                     low_isr@c:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x5
   662  000006                     	ds	1
   663  000007                     ?_ModbusCalcCRC:
   664                           	opt stack 0
   665  000007                     ?___lwdiv:
   666                           	opt stack 0
   667  000007                     ?___lwmod:
   668                           	opt stack 0
   669  000007                     ?_millis:
   670                           	opt stack 0
   671  000007                     PortRead@ret:
   672                           	opt stack 0
   673  000007                     UpdateLedRegister@regIndex:
   674                           	opt stack 0
   675  000007                     SwitchOffAllLeds@i:
   676                           	opt stack 0
   677  000007                     LightLed@ledState:
   678                           	opt stack 0
   679  000007                     LightStatusLed@on:
   680                           	opt stack 0
   681  000007                     InitApp@i:
   682                           	opt stack 0
   683  000007                     SetTime@newTime:
   684                           	opt stack 0
   685  000007                     ModbusSetExceptionStatusBit@value:
   686                           	opt stack 0
   687  000007                     ModbusInit@u8serno:
   688                           	opt stack 0
   689  000007                     ModbusBuildException@u8exception:
   690                           	opt stack 0
   691  000007                     ModbusGetLastCommand@count:
   692                           	opt stack 0
   693  000007                     CopyStringToBuffer@src:
   694                           	opt stack 0
   695  000007                     ___lbdiv@divisor:
   696                           	opt stack 0
   697  000007                     ___lbmod@divisor:
   698                           	opt stack 0
   699  000007                     PortWrite@buf:
   700                           	opt stack 0
   701  000007                     getHourMin@hour:
   702                           	opt stack 0
   703  000007                     getTotalMinutes@totalMinutes:
   704                           	opt stack 0
   705  000007                     SetBuzzerDuty@dc:
   706                           	opt stack 0
   707  000007                     ___lwdiv@dividend:
   708                           	opt stack 0
   709  000007                     ___lwmod@dividend:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x6
   713  000007                     	ds	1
   714  000008                     ??_ModbusSetExceptionStatusBit:
   715  000008                     ??_ModbusGetRxBufferHeader:
   716  000008                     ??_ModbusGetRxBuffer:
   717  000008                     LightLed@blink:
   718                           	opt stack 0
   719  000008                     LightStatusLed@blink:
   720                           	opt stack 0
   721  000008                     ModbusInit@u8txenpin:
   722                           	opt stack 0
   723  000008                     ModbusBuildException@u8func:
   724                           	opt stack 0
   725  000008                     ModbusGetLastCommand@command:
   726                           	opt stack 0
   727  000008                     CopyStringToBuffer@len:
   728                           	opt stack 0
   729  000008                     ___lbdiv@dividend:
   730                           	opt stack 0
   731  000008                     ___lbmod@dividend:
   732                           	opt stack 0
   733  000008                     ProcessLightBlock@curMs:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x7
   737  000008                     	ds	1
   738  000009                     ??_LoadNextEvent:
   739  000009                     ??_ModbusCalcCRC:
   740  000009                     ??_LightLed:
   741  000009                     ??_LightStatusLed:
   742  000009                     ??_SetBuzzerDuty:
   743  000009                     ??_CopyStringToBuffer:
   744  000009                     PortWrite@buflen:
   745                           	opt stack 0
   746  000009                     ModbusGetRxBufferHeader@i:
   747                           	opt stack 0
   748  000009                     ModbusGetRxBuffer@bBuffOverflow:
   749                           	opt stack 0
   750  000009                     ModbusGetLastCommand@address:
   751                           	opt stack 0
   752  000009                     ___lbdiv@counter:
   753                           	opt stack 0
   754  000009                     ___lbmod@counter:
   755                           	opt stack 0
   756  000009                     getHourMin@min:
   757                           	opt stack 0
   758  000009                     ___lwdiv@divisor:
   759                           	opt stack 0
   760  000009                     ___lwmod@divisor:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x8
   764  000009                     	ds	1
   765  00000A                     ??_ProcessLightBlock:
   766  00000A                     PortWrite@i:
   767                           	opt stack 0
   768  00000A                     ModbusSetExceptionStatusBit@bitNum:
   769                           	opt stack 0
   770  00000A                     CopyStringToBuffer@objId:
   771                           	opt stack 0
   772  00000A                     ___lbdiv@quotient:
   773                           	opt stack 0
   774  00000A                     ___lbmod@rem:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x9
   778  00000A                     	ds	1
   779  00000B                     ModbusInit@u8id:
   780                           	opt stack 0
   781  00000B                     ModbusCalcCRC@u8length:
   782                           	opt stack 0
   783  00000B                     CopyStringToBuffer@i:
   784                           	opt stack 0
   785  00000B                     ___lwdiv@counter:
   786                           	opt stack 0
   787  00000B                     ___lwmod@counter:
   788                           	opt stack 0
   789  00000B                     SetHourMin@newHour:
   790                           	opt stack 0
   791  00000B                     LoadNextEvent@totalMinutes:
   792                           	opt stack 0
   793  00000B                     millis@ret:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0xA
   797  00000B                     	ds	1
   798  00000C                     ?_isleap:
   799                           	opt stack 0
   800  00000C                     LightLed@ledNum:
   801                           	opt stack 0
   802  00000C                     Modbus@u8serno:
   803                           	opt stack 0
   804  00000C                     ModbusCalcCRC@temp2:
   805                           	opt stack 0
   806  00000C                     ___lwdiv@quotient:
   807                           	opt stack 0
   808  00000C                     isleap@yr:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0xB
   812  00000C                     	ds	1
   813  00000D                     LightLed@ststusIndex:
   814                           	opt stack 0
   815  00000D                     LoadNextEvent@v1:
   816                           	opt stack 0
   817  00000D                     Modbus@u8txenpin:
   818                           	opt stack 0
   819  00000D                     SetHourMin@newMin:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0xC
   823  00000D                     	ds	1
   824  00000E                     ??_isleap:
   825  00000E                     ?_months_to_days:
   826                           	opt stack 0
   827  00000E                     ?_years_to_days:
   828                           	opt stack 0
   829  00000E                     LightLed@statusShift:
   830                           	opt stack 0
   831  00000E                     LightStatusLed@row:
   832                           	opt stack 0
   833  00000E                     Modbus@u8id:
   834                           	opt stack 0
   835  00000E                     ModbusCalcCRC@flag:
   836                           	opt stack 0
   837  00000E                     months_to_days@month:
   838                           	opt stack 0
   839  00000E                     years_to_days@yr:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0xD
   843  00000E                     	ds	1
   844  00000F                     ??_SoundPlayNextStep:
   845  00000F                     ??_ResetEvent:
   846  00000F                     SwitchOffAllDiaryLeds@i:
   847                           	opt stack 0
   848  00000F                     ShowFailure@additionalLed:
   849                           	opt stack 0
   850  00000F                     ResetEventFromCommand@state:
   851                           	opt stack 0
   852  00000F                     _isleap$2291:
   853                           	opt stack 0
   854  00000F                     SetHourMin@sec:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0xE
   858  00000F                     	ds	1
   859  000010                     ??_InitFromEeprom:
   860  000010                     ??_months_to_days:
   861  000010                     ModbusCalcCRC@i:
   862                           	opt stack 0
   863  000010                     _ResetEventFromCommand$916:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xF
   867  000010                     	ds	1
   868  000011                     ??_SetHourMin:
   869  000011                     ResetEvent@state:
   870                           	opt stack 0
   871  000011                     ModbusCalcCRC@j:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x10
   875  000011                     	ds	1
   876  000012                     ??_years_to_days:
   877  000012                     InitFromEeprom@eeSoundCountAddress:
   878                           	opt stack 0
   879  000012                     _ResetEvent$913:
   880                           	opt stack 0
   881  000012                     ModbusCalcCRC@temp:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x11
   885  000012                     	ds	1
   886  000013                     InitFromEeprom@tmpModbusId:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x12
   890  000013                     	ds	1
   891  000014                     ??_ModbusValidateRequest:
   892  000014                     SoundPlayNextStep@stepDuty:
   893                           	opt stack 0
   894  000014                     ModbusSendTxBuffer@u16crc:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x13
   898  000014                     	ds	2
   899  000016                     ??_ModbusProcess_FC5:
   900  000016                     ??_ModbusProcess_FC15:
   901  000016                     ??_ModbusProcess_FC21:
   902  000016                     SoundPlayNextStep@duration:
   903                           	opt stack 0
   904  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   905                           	opt stack 0
   906  000016                     ModbusProcess_FC17@u8CopyBufferSize:
   907                           	opt stack 0
   908  000016                     ModbusProcess_FC43@devIdCode:
   909                           	opt stack 0
   910  000016                     ModbusProcess_FC101@u8CopyBufferSize:
   911                           	opt stack 0
   912  000016                     ModbusProcess_FC102@u8CopyBufferSize:
   913                           	opt stack 0
   914  000016                     ModbusProcess_FC1@regs:
   915                           	opt stack 0
   916  000016                     ModbusProcess_FC3@regs:
   917                           	opt stack 0
   918  000016                     ModbusProcess_FC6@regs:
   919                           	opt stack 0
   920  000016                     ModbusProcess_FC16@regs:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x15
   924  000016                     	ds	1
   925  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   926                           	opt stack 0
   927  000017                     PlaySound@playDuration:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x16
   931  000017                     	ds	1
   932  000018                     ??_ModbusProcess_FC1:
   933  000018                     ModbusProcess_FC3@u8size:
   934                           	opt stack 0
   935  000018                     ModbusProcess_FC6@u8size:
   936                           	opt stack 0
   937  000018                     ModbusProcess_FC16@u8size:
   938                           	opt stack 0
   939  000018                     ModbusProcess_FC21@requestDataLen:
   940                           	opt stack 0
   941  000018                     ModbusProcess_FC43@objId:
   942                           	opt stack 0
   943  000018                     ModbusValidateRequest@startAddrBytes:
   944                           	opt stack 0
   945                           
   946                           ; 4 bytes @ 0x17
   947  000018                     	ds	1
   948  000019                     ??_ModbusProcess_FC3:
   949  000019                     ??_ModbusProcess_FC6:
   950  000019                     ??_ModbusProcess_FC16:
   951  000019                     ??_PlaySound:
   952  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x18
   956  000019                     	ds	1
   957  00001A                     ModbusProcess_FC21@startAddrsBytes:
   958                           	opt stack 0
   959  00001A                     years_to_days@ret:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x19
   963  00001A                     	ds	1
   964  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   965                           	opt stack 0
   966  00001B                     ModbusProcess_FC1@u16coil:
   967                           	opt stack 0
   968  00001B                     ModbusProcess_FC6@u16val:
   969                           	opt stack 0
   970  00001B                     ModbusProcess_FC15@u16coil:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x1A
   974  00001B                     	ds	1
   975  00001C                     ModbusProcess_FC5@u16coil:
   976                           	opt stack 0
   977  00001C                     ModbusProcess_FC21@recLenBytes:
   978                           	opt stack 0
   979  00001C                     ModbusValidateRequest@recLenBytes:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x1B
   983  00001C                     	ds	1
   984  00001D                     SetHourMin@tmpSec:
   985                           	opt stack 0
   986  00001D                     PlaySound@soundId:
   987                           	opt stack 0
   988  00001D                     ModbusProcess_FC1@u8currentBit:
   989                           	opt stack 0
   990  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   991                           	opt stack 0
   992  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   993                           	opt stack 0
   994  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   995                           	opt stack 0
   996  00001D                     ModbusProcess_FC16@temp:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x1C
  1000  00001D                     	ds	1
  1001  00001E                     ?_ymd_to_scalar:
  1002                           	opt stack 0
  1003  00001E                     SetHourMin@secToNext6Sec:
  1004                           	opt stack 0
  1005  00001E                     PlaySound@soundAddr:
  1006                           	opt stack 0
  1007  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
  1008                           	opt stack 0
  1009  00001E                     ModbusProcess_FC5@regs:
  1010                           	opt stack 0
  1011  00001E                     ModbusProcess_FC15@bTemp:
  1012                           	opt stack 0
  1013  00001E                     ModbusProcess_FC21@i:
  1014                           	opt stack 0
  1015  00001E                     ModbusProcess_FC3@u16regsno:
  1016                           	opt stack 0
  1017  00001E                     ModbusProcess_FC6@u16add:
  1018                           	opt stack 0
  1019  00001E                     ymd_to_scalar@yr:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x1D
  1023  00001E                     	ds	1
  1024  00001F                     ??_ProcessDiary:
  1025  00001F                     ??_CommandSetLed:
  1026  00001F                     ??_CommandSetStatusLed:
  1027  00001F                     ModbusProcess_FC1@u8bytesno:
  1028                           	opt stack 0
  1029  00001F                     ModbusProcess_FC5@u8currentBit:
  1030                           	opt stack 0
  1031  00001F                     ModbusProcess_FC15@u8frameByte:
  1032                           	opt stack 0
  1033  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x1E
  1037  00001F                     	ds	1
  1038  000020                     CommandSetStatusLed@soundId:
  1039                           	opt stack 0
  1040  000020                     ModbusProcess_FC3@u8StartAdd:
  1041                           	opt stack 0
  1042  000020                     ModbusValidateRequest@u16MsgCRC:
  1043                           	opt stack 0
  1044  000020                     ModbusProcess_FC1@u16StartCoil:
  1045                           	opt stack 0
  1046  000020                     ModbusProcess_FC15@u16StartCoil:
  1047                           	opt stack 0
  1048  000020                     ModbusProcess_FC16@u16StartAdd:
  1049                           	opt stack 0
  1050  000020                     ymd_to_scalar@mo:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x1F
  1054  000020                     	ds	1
  1055  000021                     CommandSetStatusLed@commandData:
  1056                           	opt stack 0
  1057  000021                     ModbusProcess_FC3@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x20
  1061  000021                     	ds	1
  1062  000022                     CommandSetStatusLed@led:
  1063                           	opt stack 0
  1064  000022                     ModbusValidateRequest@isSupported:
  1065                           	opt stack 0
  1066  000022                     ModbusProcess_FC16@u8regsno:
  1067                           	opt stack 0
  1068  000022                     ModbusProcess_FC1@u16currentCoil:
  1069                           	opt stack 0
  1070  000022                     ModbusProcess_FC15@u16Coilno:
  1071                           	opt stack 0
  1072  000022                     ymd_to_scalar@day:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x21
  1076  000022                     	ds	1
  1077  000023                     ModbusProcess_FC16@i:
  1078                           	opt stack 0
  1079  000023                     ProcessDiary@totalMinutes:
  1080                           	opt stack 0
  1081  000023                     ModbusValidateRequest@u16count:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x22
  1085  000023                     	ds	1
  1086  000024                     ??_ymd_to_scalar:
  1087  000024                     CommandSetLed@soundId:
  1088                           	opt stack 0
  1089  000024                     ModbusProcess_FC1@u8bitsno:
  1090                           	opt stack 0
  1091  000024                     ModbusProcess_FC15@regs:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x23
  1095  000024                     	ds	1
  1096  000025                     CommandSetLed@ledColor:
  1097                           	opt stack 0
  1098  000025                     ModbusValidateRequest@i:
  1099                           	opt stack 0
  1100  000025                     ModbusProcess_FC15@u8currentBit:
  1101                           	opt stack 0
  1102  000025                     ModbusProcess_FC1@u16Coilno:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x24
  1106  000025                     	ds	1
  1107  000026                     CommandSetLed@blinkSeconds:
  1108                           	opt stack 0
  1109  000026                     ModbusValidateRequest@readDevId:
  1110                           	opt stack 0
  1111  000026                     ModbusProcess_FC15@u16currentCoil:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x25
  1115  000026                     	ds	1
  1116  000027                     CommandSetLed@commandData:
  1117                           	opt stack 0
  1118  000027                     ModbusValidateRequest@u8regs:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x26
  1122  000027                     	ds	1
  1123  000028                     CommandSetLed@led:
  1124                           	opt stack 0
  1125  000028                     ModbusProcess_FC15@u8bitsno:
  1126                           	opt stack 0
  1127  000028                     ModbusValidateRequest@u16regs:
  1128                           	opt stack 0
  1129  000028                     _ymd_to_scalar$2304:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x27
  1133  000028                     	ds	1
  1134  000029                     ??_io_poll:
  1135  000029                     
  1136                           ; 1 bytes @ 0x28
  1137  000029                     	ds	1
  1138  00002A                     ymd_to_scalar@scalar:
  1139                           	opt stack 0
  1140                           
  1141                           ; 4 bytes @ 0x29
  1142  00002A                     	ds	3
  1143  00002D                     io_poll@lastEndAddress:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x2C
  1147  00002D                     	ds	1
  1148  00002E                     ?_mktime:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x2D
  1152  00002E                     	ds	1
  1153  00002F                     io_poll@lastAddress:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2E
  1157  00002F                     	ds	2
  1158  000031                     io_poll@lastCommand:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x30
  1162  000031                     	ds	1
  1163  000032                     ??_mktime:
  1164  000032                     io_poll@lastFunction:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x31
  1168  000032                     	ds	14
  1169  000040                     mktime@tt:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x3F
  1173  000040                     	ds	4
  1174  000044                     mktime@timeptr:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x43
  1178  000044                     	ds	1
  1179  000045                     ModbusProcess_FC100@newRawTime:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x44
  1183  000045                     	ds	4
  1184  000049                     ModbusProcess_FC100@u8CopyBufferSize:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x48
  1188  000049                     	ds	1
  1189  00004A                     ModbusProcess_FC100@newTime:
  1190                           	opt stack 0
  1191                           
  1192                           ; 18 bytes @ 0x49
  1193  00004A                     	ds	18
  1194  00005C                     ModbusPoll@discreteInputs:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x5B
  1198  00005C                     	ds	2
  1199  00005E                     ModbusPoll@coils:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x5D
  1203  00005E                     	ds	1
  1204  00005F                     ModbusPoll@inputRegs:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x5E
  1208  00005F                     	ds	2
  1209  000061                     ModbusPoll@inputRegsCount:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x60
  1213  000061                     	ds	1
  1214  000062                     ModbusPoll@holdingRegs:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x61
  1218  000062                     	ds	2
  1219  000064                     ModbusPoll@holdingRegsCount:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x63
  1223  000064                     	ds	1
  1224  000065                     ModbusPoll@u8current:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x64
  1228  000065                     	ds	1
  1229  000066                     ModbusPoll@i8state:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x65
  1233  000066                     	ds	1
  1234  000067                     ModbusPoll@u8exception:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x66
  1238  000067                     	ds	1
  1239                           tblptru	equ	0xFF8
  1240                           tblptrh	equ	0xFF7
  1241                           tblptrl	equ	0xFF6
  1242                           tablat	equ	0xFF5
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           postdec1	equ	0xFE5
  1246                           fsr1h	equ	0xFE2
  1247                           fsr1l	equ	0xFE1
  1248                           
  1249 ;;
  1250 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1251 ;;
  1252 ;; *************** function _main *****************
  1253 ;; Defined at:
  1254 ;;		line 829 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  minute          1   14[BANK1 ] unsigned char 
  1259 ;;  hour            1   13[BANK1 ] unsigned char 
  1260 ;;  totalMinutes    2   16[BANK1 ] unsigned int 
  1261 ;;  curMs           4   18[BANK1 ] unsigned long 
  1262 ;;  buttonPinCur    1   15[BANK1 ] unsigned char 
  1263 ;;  lastDebounce    4    5[BANK1 ] unsigned long 
  1264 ;;  lastMs          4    1[BANK1 ] unsigned long 
  1265 ;;  buttonPresse    4    0        unsigned long 
  1266 ;;  oldMinute       2    9[BANK1 ] unsigned int 
  1267 ;;  buttonState     1   12[BANK1 ] unsigned char 
  1268 ;;  lastButtonPi    1   11[BANK1 ] unsigned char 
  1269 ;;  debounceDela    1    0[BANK1 ] unsigned char 
  1270 ;;  buttonPresse    1    0        unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1280 ;;      Params:         0       0       0       0       0       0       0
  1281 ;;      Locals:         0       0      22       0       0       0       0
  1282 ;;      Temps:          0       8       0       0       0       0       0
  1283 ;;      Totals:         0       8      22       0       0       0       0
  1284 ;;Total ram usage:       30 bytes
  1285 ;; Hardware stack levels required when called:    8
  1286 ;; This function calls:
  1287 ;;		_AddSecond
  1288 ;;		_ConfigureOscillator
  1289 ;;		_GetTime
  1290 ;;		_InitApp
  1291 ;;		_InitFromEeprom
  1292 ;;		_LightStatusLed
  1293 ;;		_LoadNextEvent
  1294 ;;		_ModbusPoll
  1295 ;;		_ProcessDiary
  1296 ;;		_ProcessLightBlock
  1297 ;;		_ResetEvent
  1298 ;;		_ResetEventFromCommand
  1299 ;;		_SoundPlayNextStep
  1300 ;;		_StopPlaying
  1301 ;;		_SwitchOffAllDiaryLeds
  1302 ;;		_getHourMin
  1303 ;;		_getTotalMinutes
  1304 ;;		_io_poll
  1305 ;;		_millis
  1306 ;;		_pwm_init
  1307 ;; This function is called by:
  1308 ;;		Startup code after reset
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text0
  1313  000C5C                     __ptext0:
  1314                           	opt stack 0
  1315  000C5C                     _main:
  1316                           	opt stack 23
  1317                           
  1318                           ;incstack = 0
  1319  000C5C  FFFF               	dw	65535
  1320                           
  1321                           ;main.c: 832: ConfigureOscillator();
  1322  000C5E  EC69  F018         	call	_ConfigureOscillator	;wreg free
  1323                           
  1324                           ;main.c: 835: InitApp();
  1325  000C62  EC90  F013         	call	_InitApp	;wreg free
  1326                           
  1327                           ;main.c: 839: InitFromEeprom();
  1328  000C66  ECC1  F010         	call	_InitFromEeprom	;wreg free
  1329                           
  1330                           ;main.c: 844: unsigned long lastMs = millis();
  1331  000C6A  EC62  F017         	call	_millis	;wreg free
  1332  000C6E  C007  F1C9         	movff	?_millis,main@lastMs
  1333  000C72  C008  F1CA         	movff	?_millis+1,main@lastMs+1
  1334  000C76  C009  F1CB         	movff	?_millis+2,main@lastMs+2
  1335  000C7A  C00A  F1CC         	movff	?_millis+3,main@lastMs+3
  1336                           
  1337                           ;main.c: 847: pwm_init();
  1338  000C7E  EC1C  F018         	call	_pwm_init	;wreg free
  1339                           
  1340                           ;main.c: 851: bool buttonPressed;
  1341                           ;main.c: 852: unsigned long buttonPressedTime;
  1342                           ;main.c: 854: uint8_t buttonState = 1;
  1343  000C82  0E01               	movlw	1
  1344  000C84  0101               	movlb	1	; () banked
  1345  000C86  6FD4               	movwf	main@buttonState& (0+255),b
  1346                           
  1347                           ;main.c: 855: uint8_t lastButtonPinState = 1;
  1348  000C88  6FD3               	movwf	main@lastButtonPinState& (0+255),b
  1349                           
  1350                           ; BSR set to: 1
  1351                           ;main.c: 859: unsigned long lastDebounceTime = 0;
  1352  000C8A  6BCD               	clrf	main@lastDebounceTime& (0+255),b
  1353  000C8C  6BCE               	clrf	(main@lastDebounceTime+1)& (0+255),b
  1354  000C8E  6BCF               	clrf	(main@lastDebounceTime+2)& (0+255),b
  1355  000C90  6BD0               	clrf	(main@lastDebounceTime+3)& (0+255),b
  1356                           
  1357                           ;main.c: 860: uint8_t debounceDelay = 50;
  1358  000C92  0E32               	movlw	50
  1359  000C94  6FC8               	movwf	main@debounceDelay& (0+255),b
  1360                           
  1361                           ; BSR set to: 1
  1362                           ;main.c: 868: uint16_t oldMinute = 0xFFFF;
  1363  000C96  69D1               	setf	main@oldMinute& (0+255),b
  1364  000C98  69D2               	setf	(main@oldMinute+1)& (0+255),b
  1365                           
  1366                           ; BSR set to: 1
  1367                           ;main.c: 870: LightStatusLed(0x07, 1, 0);
  1368  000C9A  0E01               	movlw	1
  1369  000C9C  6E07               	movwf	LightStatusLed@on,c
  1370  000C9E  0E00               	movlw	0
  1371  000CA0  6E08               	movwf	LightStatusLed@blink,c
  1372  000CA2  0E07               	movlw	7
  1373  000CA4  ECAA  F00E         	call	_LightStatusLed
  1374                           
  1375                           ;main.c: 871: LightStatusLed(0x05, 1, 1);
  1376  000CA8  0E01               	movlw	1
  1377  000CAA  6E07               	movwf	LightStatusLed@on,c
  1378  000CAC  6E08               	movwf	LightStatusLed@blink,c
  1379  000CAE  0E05               	movlw	5
  1380  000CB0  ECAA  F00E         	call	_LightStatusLed
  1381  000CB4                     l8271:
  1382  000CB4  FFFF               	dw	65535	; assembler added errata NOP
  1383                           
  1384                           ;main.c: 873: {
  1385                           ;main.c: 874: unsigned long curMs = millis();
  1386  000CB6  EC62  F017         	call	_millis	;wreg free
  1387  000CBA  C007  F1DA         	movff	?_millis,main@curMs
  1388  000CBE  C008  F1DB         	movff	?_millis+1,main@curMs+1
  1389  000CC2  C009  F1DC         	movff	?_millis+2,main@curMs+2
  1390  000CC6  C00A  F1DD         	movff	?_millis+3,main@curMs+3
  1391                           
  1392                           ;main.c: 875: ProcessLightBlock(&curMs);
  1393  000CCA  0EDA               	movlw	low main@curMs
  1394  000CCC  6E08               	movwf	ProcessLightBlock@curMs,c
  1395  000CCE  0E01               	movlw	high main@curMs
  1396  000CD0  6E09               	movwf	ProcessLightBlock@curMs+1,c
  1397  000CD2  ECB7  F008         	call	_ProcessLightBlock	;wreg free
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 877: if(_isSoundPlaying && curMs >= _playingEndMs)
  1401  000CD6  51CF               	movf	__isSoundPlaying& (0+255),w,b
  1402  000CD8  E012               	bz	l8281
  1403                           
  1404                           ; BSR set to: 0
  1405  000CDA  51A6               	movf	__playingEndMs& (0+255),w,b
  1406  000CDC  0101               	movlb	1	; () banked
  1407  000CDE  5DDA               	subwf	main@curMs& (0+255),w,b
  1408  000CE0  0100               	movlb	0	; () banked
  1409  000CE2  51A7               	movf	(__playingEndMs+1)& (0+255),w,b
  1410  000CE4  0101               	movlb	1	; () banked
  1411  000CE6  59DB               	subwfb	(main@curMs+1)& (0+255),w,b
  1412  000CE8  0100               	movlb	0	; () banked
  1413  000CEA  51A8               	movf	(__playingEndMs+2)& (0+255),w,b
  1414  000CEC  0101               	movlb	1	; () banked
  1415  000CEE  59DC               	subwfb	(main@curMs+2)& (0+255),w,b
  1416  000CF0  0100               	movlb	0	; () banked
  1417  000CF2  51A9               	movf	(__playingEndMs+3)& (0+255),w,b
  1418  000CF4  0101               	movlb	1	; () banked
  1419  000CF6  59DD               	subwfb	(main@curMs+3)& (0+255),w,b
  1420  000CF8  E302               	bnc	l8281
  1421                           
  1422                           ; BSR set to: 1
  1423                           ;main.c: 878: {
  1424                           ;main.c: 879: SoundPlayNextStep();
  1425  000CFA  EC62  F010         	call	_SoundPlayNextStep	;wreg free
  1426  000CFE                     l8281:
  1427                           
  1428                           ;main.c: 880: }
  1429                           ;main.c: 883: uint8_t buttonPinCurState = PORTCbits.RC1;
  1430  000CFE  0E00               	movlw	0
  1431  000D00  B282               	btfsc	3970,1,c	;volatile
  1432  000D02  0E01               	movlw	1
  1433  000D04  0101               	movlb	1	; () banked
  1434  000D06  6FD7               	movwf	main@buttonPinCurState& (0+255),b
  1435                           
  1436                           ; BSR set to: 1
  1437                           ;main.c: 889: if (buttonPinCurState != lastButtonPinState)
  1438  000D08  19D3               	xorwf	main@lastButtonPinState& (0+255),w,b
  1439  000D0A  E00B               	bz	l8287
  1440                           
  1441                           ; BSR set to: 1
  1442                           ;main.c: 890: {
  1443                           ;main.c: 892: lastDebounceTime = curMs;
  1444  000D0C  C1DA  F1CD         	movff	main@curMs,main@lastDebounceTime
  1445  000D10  C1DB  F1CE         	movff	main@curMs+1,main@lastDebounceTime+1
  1446  000D14  C1DC  F1CF         	movff	main@curMs+2,main@lastDebounceTime+2
  1447  000D18  C1DD  F1D0         	movff	main@curMs+3,main@lastDebounceTime+3
  1448                           
  1449                           ;main.c: 893: lastButtonPinState = buttonPinCurState;
  1450  000D1C  C1D7  F1D3         	movff	main@buttonPinCurState,main@lastButtonPinState
  1451                           
  1452                           ;main.c: 894: }
  1453  000D20  D038               	goto	l8305
  1454  000D22                     l8287:
  1455                           
  1456                           ; BSR set to: 1
  1457                           ;main.c: 895: else
  1458                           ;main.c: 896: {
  1459                           ;main.c: 897: if ((curMs - lastDebounceTime) > debounceDelay)
  1460  000D22  51CD               	movf	main@lastDebounceTime& (0+255),w,b
  1461  000D24  5DDA               	subwf	main@curMs& (0+255),w,b
  1462  000D26  0100               	movlb	0	; () banked
  1463  000D28  6FE8               	movwf	??_main& (0+255),b
  1464  000D2A  0101               	movlb	1	; () banked
  1465  000D2C  51CE               	movf	(main@lastDebounceTime+1)& (0+255),w,b
  1466  000D2E  59DB               	subwfb	(main@curMs+1)& (0+255),w,b
  1467  000D30  0100               	movlb	0	; () banked
  1468  000D32  6FE9               	movwf	(??_main+1)& (0+255),b
  1469  000D34  0101               	movlb	1	; () banked
  1470  000D36  51CF               	movf	(main@lastDebounceTime+2)& (0+255),w,b
  1471  000D38  59DC               	subwfb	(main@curMs+2)& (0+255),w,b
  1472  000D3A  0100               	movlb	0	; () banked
  1473  000D3C  6FEA               	movwf	(??_main+2)& (0+255),b
  1474  000D3E  0101               	movlb	1	; () banked
  1475  000D40  51D0               	movf	(main@lastDebounceTime+3)& (0+255),w,b
  1476  000D42  59DD               	subwfb	(main@curMs+3)& (0+255),w,b
  1477  000D44  0100               	movlb	0	; () banked
  1478  000D46  6FEB               	movwf	(??_main+3)& (0+255),b
  1479  000D48  C1C8  F0EC         	movff	main@debounceDelay,??_main+4
  1480  000D4C  6BED               	clrf	(??_main+5)& (0+255),b
  1481  000D4E  6BEE               	clrf	(??_main+6)& (0+255),b
  1482  000D50  6BEF               	clrf	(??_main+7)& (0+255),b
  1483  000D52  51E8               	movf	??_main& (0+255),w,b
  1484  000D54  5DEC               	subwf	(??_main+4)& (0+255),w,b
  1485  000D56  51E9               	movf	(??_main+1)& (0+255),w,b
  1486  000D58  59ED               	subwfb	(??_main+5)& (0+255),w,b
  1487  000D5A  51EA               	movf	(??_main+2)& (0+255),w,b
  1488  000D5C  59EE               	subwfb	(??_main+6)& (0+255),w,b
  1489  000D5E  51EB               	movf	(??_main+3)& (0+255),w,b
  1490  000D60  59EF               	subwfb	(??_main+7)& (0+255),w,b
  1491  000D62  E217               	bc	l8305
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 898: {
  1495                           ;main.c: 903: if (buttonPinCurState != buttonState)
  1496  000D64  0101               	movlb	1	; () banked
  1497  000D66  51D4               	movf	main@buttonState& (0+255),w,b
  1498  000D68  19D7               	xorwf	main@buttonPinCurState& (0+255),w,b
  1499  000D6A  E013               	bz	l8305
  1500                           
  1501                           ; BSR set to: 1
  1502                           ;main.c: 904: {
  1503                           ;main.c: 905: buttonState = buttonPinCurState;
  1504  000D6C  C1D7  F1D4         	movff	main@buttonPinCurState,main@buttonState
  1505                           
  1506                           ; BSR set to: 1
  1507                           ;main.c: 910: {
  1508                           ;main.c: 911: buttonPressed = 1;
  1509  000D70  51D4               	movf	main@buttonState& (0+255),w,b
  1510  000D72  E10F               	bnz	l8305
  1511                           
  1512                           ; BSR set to: 1
  1513                           ;main.c: 913: if(_eventFromCommand.IsFire)
  1514  000D74  0100               	movlb	0	; () banked
  1515  000D76  51A0               	movf	__eventFromCommand& (0+255),w,b
  1516  000D78  E004               	bz	l8299
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;main.c: 914: {
  1520                           ;main.c: 915: ResetEventFromCommand(1);
  1521  000D7A  0E01               	movlw	1
  1522  000D7C  EC4C  F016         	call	_ResetEventFromCommand
  1523                           
  1524                           ;main.c: 916: }
  1525  000D80  D008               	goto	l8305
  1526  000D82                     l8299:
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 918: else if(_currenDiaryEvent.IsFire)
  1530  000D82  5068               	movf	__currenDiaryEvent,w,c
  1531  000D84  E004               	bz	l8303
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;main.c: 919: {
  1535                           ;main.c: 920: ResetEvent(1);
  1536  000D86  0E01               	movlw	1
  1537  000D88  EC9A  F015         	call	_ResetEvent
  1538                           
  1539                           ;main.c: 921: }
  1540  000D8C  D002               	goto	l8305
  1541  000D8E                     l8303:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 922: else
  1545                           ;main.c: 923: {
  1546                           ;main.c: 924: StopPlaying();
  1547  000D8E  EC2D  F018         	call	_StopPlaying	;wreg free
  1548  000D92                     l8305:
  1549  000D92  FFFF               	dw	65535	; assembler added errata NOP
  1550                           
  1551                           ;main.c: 931: }
  1552                           ;main.c: 932: }
  1553                           ;main.c: 933: }
  1554                           ;main.c: 934: }
  1555                           ;main.c: 955: if(curMs - lastMs >= 1000)
  1556  000D94  0101               	movlb	1	; () banked
  1557  000D96  51C9               	movf	main@lastMs& (0+255),w,b
  1558  000D98  5DDA               	subwf	main@curMs& (0+255),w,b
  1559  000D9A  0100               	movlb	0	; () banked
  1560  000D9C  6FE8               	movwf	??_main& (0+255),b
  1561  000D9E  0101               	movlb	1	; () banked
  1562  000DA0  51CA               	movf	(main@lastMs+1)& (0+255),w,b
  1563  000DA2  59DB               	subwfb	(main@curMs+1)& (0+255),w,b
  1564  000DA4  0100               	movlb	0	; () banked
  1565  000DA6  6FE9               	movwf	(??_main+1)& (0+255),b
  1566  000DA8  0101               	movlb	1	; () banked
  1567  000DAA  51CB               	movf	(main@lastMs+2)& (0+255),w,b
  1568  000DAC  59DC               	subwfb	(main@curMs+2)& (0+255),w,b
  1569  000DAE  0100               	movlb	0	; () banked
  1570  000DB0  6FEA               	movwf	(??_main+2)& (0+255),b
  1571  000DB2  0101               	movlb	1	; () banked
  1572  000DB4  51CC               	movf	(main@lastMs+3)& (0+255),w,b
  1573  000DB6  59DD               	subwfb	(main@curMs+3)& (0+255),w,b
  1574  000DB8  0100               	movlb	0	; () banked
  1575  000DBA  6FEB               	movwf	(??_main+3)& (0+255),b
  1576  000DBC  51EB               	movf	(??_main+3)& (0+255),w,b
  1577  000DBE  11EA               	iorwf	(??_main+2)& (0+255),w,b
  1578  000DC0  E105               	bnz	u7360
  1579  000DC2  0EE8               	movlw	232
  1580  000DC4  5DE8               	subwf	??_main& (0+255),w,b
  1581  000DC6  0E03               	movlw	3
  1582  000DC8  59E9               	subwfb	(??_main+1)& (0+255),w,b
  1583  000DCA  E37D               	bnc	l8349
  1584  000DCC                     u7360:
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 956: {
  1588                           ;main.c: 957: AddSecond();
  1589  000DCC  EC25  F018         	call	_AddSecond	;wreg free
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 959: if(_eventFromCommand.IsFire && *GetTime() >= _eventFromCommand.ResetSecond
      +                          )
  1593  000DD0  51A0               	movf	__eventFromCommand& (0+255),w,b
  1594  000DD2  E015               	bz	l8315
  1595                           
  1596                           ; BSR set to: 0
  1597  000DD4  EC65  F018         	call	_GetTime	;wreg free
  1598  000DD8  6ED9               	movwf	fsr2l,c
  1599  000DDA  6ADA               	clrf	fsr2h,c
  1600  000DDC  0100               	movlb	0	; () banked
  1601  000DDE  51A2               	movf	(__eventFromCommand+2)& (0+255),w,b
  1602  000DE0  5CDE               	subwf	postinc2,w,c
  1603  000DE2  51A3               	movf	(__eventFromCommand+3)& (0+255),w,b
  1604  000DE4  58DE               	subwfb	postinc2,w,c
  1605  000DE6  51A4               	movf	(__eventFromCommand+4)& (0+255),w,b
  1606  000DE8  58DE               	subwfb	postinc2,w,c
  1607  000DEA  50DE               	movf	postinc2,w,c
  1608  000DEC  0A80               	xorlw	128
  1609  000DEE  6FEC               	movwf	(??_main+4)& (0+255),b
  1610  000DF0  51A5               	movf	(__eventFromCommand+5)& (0+255),w,b
  1611  000DF2  0A80               	xorlw	128
  1612  000DF4  59EC               	subwfb	(??_main+4)& (0+255),w,b
  1613  000DF6  E303               	bnc	l8315
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 960: {
  1617                           ;main.c: 961: ResetEventFromCommand(0);
  1618  000DF8  0E00               	movlw	0
  1619  000DFA  EC4C  F016         	call	_ResetEventFromCommand
  1620  000DFE                     l8315:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 962: }
  1624                           ;main.c: 963: if(_currenDiaryEvent.IsFire && *GetTime() >= _currenDiaryEvent.ResetSecond
      +                          )
  1625  000DFE  5068               	movf	__currenDiaryEvent,w,c
  1626  000E00  E015               	bz	l8321
  1627                           
  1628                           ; BSR set to: 0
  1629  000E02  EC65  F018         	call	_GetTime	;wreg free
  1630  000E06  6ED9               	movwf	fsr2l,c
  1631  000E08  6ADA               	clrf	fsr2h,c
  1632  000E0A  506C               	movf	__currenDiaryEvent+4,w,c
  1633  000E0C  5CDE               	subwf	postinc2,w,c
  1634  000E0E  506D               	movf	__currenDiaryEvent+5,w,c
  1635  000E10  58DE               	subwfb	postinc2,w,c
  1636  000E12  506E               	movf	__currenDiaryEvent+6,w,c
  1637  000E14  58DE               	subwfb	postinc2,w,c
  1638  000E16  50DE               	movf	postinc2,w,c
  1639  000E18  0A80               	xorlw	128
  1640  000E1A  0100               	movlb	0	; () banked
  1641  000E1C  6FEC               	movwf	(??_main+4)& (0+255),b
  1642  000E1E  506F               	movf	__currenDiaryEvent+7,w,c
  1643  000E20  0A80               	xorlw	128
  1644  000E22  59EC               	subwfb	(??_main+4)& (0+255),w,b
  1645  000E24  E303               	bnc	l8321
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 964: {
  1649                           ;main.c: 965: ResetEvent(0);
  1650  000E26  0E00               	movlw	0
  1651  000E28  EC9A  F015         	call	_ResetEvent
  1652  000E2C                     l8321:
  1653                           
  1654                           ;main.c: 966: }
  1655                           ;main.c: 968: _MODBUSInputRegs[5] = *GetTime();
  1656  000E2C  EC65  F018         	call	_GetTime	;wreg free
  1657  000E30  6ED9               	movwf	fsr2l,c
  1658  000E32  6ADA               	clrf	fsr2h,c
  1659  000E34  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1660  000E38  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1661                           
  1662                           ;main.c: 970: uint16_t totalMinutes;
  1663                           ;main.c: 971: if(getTotalMinutes(&totalMinutes) && (oldMinute != totalMinutes))
  1664  000E3C  0ED8               	movlw	low main@totalMinutes
  1665  000E3E  6E07               	movwf	getTotalMinutes@totalMinutes,c
  1666  000E40  0E01               	movlw	high main@totalMinutes
  1667  000E42  6E08               	movwf	getTotalMinutes@totalMinutes+1,c
  1668  000E44  EC9D  F017         	call	_getTotalMinutes	;wreg free
  1669  000E48  0900               	iorlw	0
  1670  000E4A  E035               	bz	l8347
  1671  000E4C  0101               	movlb	1	; () banked
  1672  000E4E  51D8               	movf	main@totalMinutes& (0+255),w,b
  1673  000E50  19D1               	xorwf	main@oldMinute& (0+255),w,b
  1674  000E52  E103               	bnz	u7420
  1675  000E54  51D9               	movf	(main@totalMinutes+1)& (0+255),w,b
  1676  000E56  19D2               	xorwf	(main@oldMinute+1)& (0+255),w,b
  1677  000E58  E02E               	bz	l8347
  1678  000E5A                     u7420:
  1679                           
  1680                           ; BSR set to: 1
  1681                           ;main.c: 972: {
  1682                           ;main.c: 973: _MODBUSInputRegs[8] = totalMinutes;
  1683  000E5A  C1D8  F1BA         	movff	main@totalMinutes,__MODBUSInputRegs+16
  1684  000E5E  C1D9  F1BB         	movff	main@totalMinutes+1,__MODBUSInputRegs+17
  1685                           
  1686                           ;main.c: 974: uint8_t hour = 0, minute = 0;
  1687  000E62  6BD5               	clrf	main@hour& (0+255),b
  1688  000E64  6BD6               	clrf	main@minute& (0+255),b
  1689                           
  1690                           ; BSR set to: 1
  1691                           ;main.c: 975: getHourMin(&hour, &minute);
  1692  000E66  0ED5               	movlw	low main@hour
  1693  000E68  6E07               	movwf	getHourMin@hour,c
  1694  000E6A  0E01               	movlw	high main@hour
  1695  000E6C  6E08               	movwf	getHourMin@hour+1,c
  1696  000E6E  0ED6               	movlw	low main@minute
  1697  000E70  6E09               	movwf	getHourMin@min,c
  1698  000E72  0E01               	movlw	high main@minute
  1699  000E74  6E0A               	movwf	getHourMin@min+1,c
  1700  000E76  EC8A  F017         	call	_getHourMin	;wreg free
  1701                           
  1702                           ; BSR set to: 1
  1703                           ;main.c: 976: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1704  000E7A  51D5               	movf	main@hour& (0+255),w,b
  1705  000E7C  0100               	movlb	0	; () banked
  1706  000E7E  6FE8               	movwf	??_main& (0+255),b
  1707  000E80  0101               	movlb	1	; () banked
  1708  000E82  51D6               	movf	main@minute& (0+255),w,b
  1709  000E84  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1710  000E86  C0E8  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1711                           
  1712                           ; BSR set to: 1
  1713                           ;main.c: 979: if(totalMinutes == 0)
  1714  000E8A  51D8               	movf	main@totalMinutes& (0+255),w,b
  1715  000E8C  11D9               	iorwf	(main@totalMinutes+1)& (0+255),w,b
  1716  000E8E  E10D               	bnz	l8343
  1717                           
  1718                           ; BSR set to: 1
  1719                           ;main.c: 980: {
  1720                           ;main.c: 981: SwitchOffAllDiaryLeds();
  1721  000E90  EC4D  F017         	call	_SwitchOffAllDiaryLeds	;wreg free
  1722                           
  1723                           ;main.c: 982: _currenDiaryEvent.NextEventNum = 0xff;
  1724  000E94  6870               	setf	__currenDiaryEvent+8,c
  1725                           
  1726                           ;main.c: 983: LoadNextEvent();
  1727  000E96  EC90  F00C         	call	_LoadNextEvent	;wreg free
  1728                           
  1729                           ;main.c: 984: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  1730  000E9A  5069               	movf	__currenDiaryEvent+1,w,c
  1731  000E9C  0100               	movlb	0	; () banked
  1732  000E9E  6FE8               	movwf	??_main& (0+255),b
  1733  000EA0  5070               	movf	__currenDiaryEvent+8,w,c
  1734  000EA2  0101               	movlb	1	; () banked
  1735  000EA4  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  1736  000EA6  C0E8  F1AF         	movff	??_main,__MODBUSInputRegs+5
  1737  000EAA                     l8343:
  1738                           
  1739                           ; BSR set to: 1
  1740                           ;main.c: 985: }
  1741                           ;main.c: 986: oldMinute = totalMinutes;
  1742  000EAA  C1D8  F1D1         	movff	main@totalMinutes,main@oldMinute
  1743  000EAE  C1D9  F1D2         	movff	main@totalMinutes+1,main@oldMinute+1
  1744                           
  1745                           ; BSR set to: 1
  1746                           ;main.c: 987: ProcessDiary();
  1747  000EB2  ECCE  F011         	call	_ProcessDiary	;wreg free
  1748  000EB6                     l8347:
  1749                           
  1750                           ;main.c: 988: }
  1751                           ;main.c: 992: lastMs = curMs;
  1752  000EB6  C1DA  F1C9         	movff	main@curMs,main@lastMs
  1753  000EBA  C1DB  F1CA         	movff	main@curMs+1,main@lastMs+1
  1754  000EBE  C1DC  F1CB         	movff	main@curMs+2,main@lastMs+2
  1755  000EC2  C1DD  F1CC         	movff	main@curMs+3,main@lastMs+3
  1756  000EC6                     l8349:
  1757                           
  1758                           ;main.c: 994: }
  1759                           ;main.c: 995: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1760  000EC6  6A5D               	clrf	ModbusPoll@discreteInputs+1,c
  1761  000EC8  6A5C               	clrf	ModbusPoll@discreteInputs,c
  1762  000ECA  0EDD               	movlw	low __MODBUSCoils
  1763  000ECC  6E5E               	movwf	ModbusPoll@coils,c
  1764  000ECE  0EAA               	movlw	low __MODBUSInputRegs
  1765  000ED0  6E5F               	movwf	ModbusPoll@inputRegs,c
  1766  000ED2  0E01               	movlw	high __MODBUSInputRegs
  1767  000ED4  6E60               	movwf	ModbusPoll@inputRegs+1,c
  1768  000ED6  0E0F               	movlw	15
  1769  000ED8  6E61               	movwf	ModbusPoll@inputRegsCount,c
  1770  000EDA  0E8C               	movlw	low __MODBUSHoldingRegs
  1771  000EDC  6E62               	movwf	ModbusPoll@holdingRegs,c
  1772  000EDE  0E01               	movlw	high __MODBUSHoldingRegs
  1773  000EE0  6E63               	movwf	ModbusPoll@holdingRegs+1,c
  1774  000EE2  0E0F               	movlw	15
  1775  000EE4  6E64               	movwf	ModbusPoll@holdingRegsCount,c
  1776  000EE6  ECE3  F009         	call	_ModbusPoll	;wreg free
  1777                           
  1778                           ;main.c: 996: io_poll();
  1779  000EEA  ECC4  F012         	call	_io_poll	;wreg free
  1780  000EEE  D6E2               	goto	l8271
  1781  000EF0                     __end_of_main:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           postdec1	equ	0xFE5
  1790                           fsr1h	equ	0xFE2
  1791                           fsr1l	equ	0xFE1
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           
  1797 ;; *************** function _pwm_init *****************
  1798 ;; Defined at:
  1799 ;;		line 383 in file "main.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1813 ;;      Params:         0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0
  1816 ;;      Totals:         0       0       0       0       0       0       0
  1817 ;;Total ram usage:        0 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    2
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text1
  1828  003038                     __ptext1:
  1829                           	opt stack 0
  1830  003038                     _pwm_init:
  1831                           	opt stack 28
  1832                           
  1833                           ;incstack = 0
  1834  003038  FFFF               	dw	65535
  1835                           
  1836                           ;main.c: 395: CCP1CONbits.CCP1M = 0x0f;
  1837  00303A  0E0F               	movlw	15
  1838  00303C  12BD               	iorwf	4029,f,c	;volatile
  1839                           
  1840                           ;main.c: 402: PR2 = 255;
  1841  00303E  68CB               	setf	4043,c	;volatile
  1842                           
  1843                           ;main.c: 405: T2CONbits.T2CKPS1 = 1;
  1844  003040  82CA               	bsf	4042,1,c	;volatile
  1845                           
  1846                           ;main.c: 406: T2CONbits.T2CKPS0 = 0;
  1847  003042  90CA               	bcf	4042,0,c	;volatile
  1848                           
  1849                           ;main.c: 409: TRISCbits.RC2 = 0;
  1850  003044  9494               	bcf	3988,2,c	;volatile
  1851  003046  0012               	return		;funcret
  1852  003048  FFFF               	dw	65535	; errata NOP
  1853  00304A                     __end_of_pwm_init:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           fsr1h	equ	0xFE2
  1863                           fsr1l	equ	0xFE1
  1864                           postinc2	equ	0xFDE
  1865                           postdec2	equ	0xFDD
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           
  1869 ;; *************** function _io_poll *****************
  1870 ;; Defined at:
  1871 ;;		line 1113 in file "main.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  lastAddress     2   46[COMRAM] unsigned int 
  1876 ;;  lastEndAddre    2   44[COMRAM] unsigned int 
  1877 ;;  lastFunction    1   49[COMRAM] PTR unsigned char 
  1878 ;;		 -> _lastFunction(1), 
  1879 ;;  lastCommand     1   48[COMRAM] unsigned char 
  1880 ;;  v1              1    0        unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         6       0       0       0       0       0       0
  1892 ;;      Temps:          4       0       0       0       0       0       0
  1893 ;;      Totals:        10       0       0       0       0       0       0
  1894 ;;Total ram usage:       10 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    7
  1897 ;; This function calls:
  1898 ;;		_InitFromEeprom
  1899 ;;		_LightStatusLed
  1900 ;;		_LoadNextEvent
  1901 ;;		_ModbusGetLastCommand
  1902 ;;		_ModbusSetExceptionStatusBit
  1903 ;;		_ProcessUserCommands
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text2
  1910  002588                     __ptext2:
  1911                           	opt stack 0
  1912  002588                     _io_poll:
  1913                           	opt stack 23
  1914                           
  1915                           ;incstack = 0
  1916  002588  FFFF               	dw	65535
  1917                           
  1918                           ;main.c: 1115: uint16_t lastAddress;
  1919                           ;main.c: 1116: uint16_t lastEndAddress;
  1920                           ;main.c: 1117: uint8_t lastCommand;
  1921                           ;main.c: 1119: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddres
      +                          s, &lastCommand);
  1922  00258A  0E2D               	movlw	low io_poll@lastEndAddress
  1923  00258C  6E07               	movwf	ModbusGetLastCommand@count,c
  1924  00258E  0E31               	movlw	low io_poll@lastCommand
  1925  002590  6E08               	movwf	ModbusGetLastCommand@command,c
  1926  002592  0E2F               	movlw	io_poll@lastAddress& (0+255)
  1927  002594  ECAB  F016         	call	_ModbusGetLastCommand
  1928  002598  6E32               	movwf	io_poll@lastFunction,c
  1929                           
  1930                           ;main.c: 1120: if(*lastFunction == MB_FC_NONE)
  1931  00259A  5032               	movf	io_poll@lastFunction,w,c
  1932  00259C  6ED9               	movwf	fsr2l,c
  1933  00259E  6ADA               	clrf	fsr2h,c
  1934  0025A0  50DF               	movf	indf2,w,c
  1935  0025A2  E036               	bz	l504
  1936                           
  1937                           ;main.c: 1123: lastEndAddress += lastAddress - 1;
  1938  0025A4  6829               	setf	??_io_poll& (0+255),c
  1939  0025A6  682A               	setf	(??_io_poll+1)& (0+255),c
  1940  0025A8  C02F  F02B         	movff	io_poll@lastAddress,??_io_poll+2
  1941  0025AC  C030  F02C         	movff	io_poll@lastAddress+1,??_io_poll+3
  1942  0025B0  5029               	movf	??_io_poll,w,c
  1943  0025B2  262B               	addwf	??_io_poll+2,f,c
  1944  0025B4  502A               	movf	??_io_poll+1,w,c
  1945  0025B6  222C               	addwfc	??_io_poll+3,f,c
  1946  0025B8  502B               	movf	??_io_poll+2,w,c
  1947  0025BA  262D               	addwf	io_poll@lastEndAddress,f,c
  1948  0025BC  502C               	movf	??_io_poll+3,w,c
  1949  0025BE  222E               	addwfc	io_poll@lastEndAddress+1,f,c
  1950                           
  1951                           ;main.c: 1125: uint8_t v1;
  1952                           ;main.c: 1126: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  1953  0025C0  5032               	movf	io_poll@lastFunction,w,c
  1954  0025C2  6ED9               	movwf	fsr2l,c
  1955  0025C4  6ADA               	clrf	fsr2h,c
  1956  0025C6  0E64               	movlw	100
  1957  0025C8  18DE               	xorwf	postinc2,w,c
  1958  0025CA  E10C               	bnz	l8237
  1959                           
  1960                           ;main.c: 1127: {
  1961                           ;main.c: 1128: if(lastCommand == 0x10)
  1962  0025CC  0E10               	movlw	16
  1963  0025CE  1831               	xorwf	io_poll@lastCommand,w,c
  1964  0025D0  E11F               	bnz	l504
  1965                           
  1966                           ;main.c: 1129: {
  1967                           ;main.c: 1130: LightStatusLed(0x05, 0, 0);
  1968  0025D2  0E00               	movlw	0
  1969  0025D4  6E07               	movwf	LightStatusLed@on,c
  1970  0025D6  6E08               	movwf	LightStatusLed@blink,c
  1971  0025D8  0E05               	movlw	5
  1972  0025DA  ECAA  F00E         	call	_LightStatusLed
  1973                           
  1974                           ;main.c: 1131: LoadNextEvent();
  1975  0025DE  EC90  F00C         	call	_LoadNextEvent	;wreg free
  1976  0025E2  D016               	goto	l504
  1977  0025E4                     l8237:
  1978                           
  1979                           ;main.c: 1134: }
  1980                           ;main.c: 1135: if(*lastFunction == MB_FC_USER_COMMAND)
  1981  0025E4  5032               	movf	io_poll@lastFunction,w,c
  1982  0025E6  6ED9               	movwf	fsr2l,c
  1983  0025E8  6ADA               	clrf	fsr2h,c
  1984  0025EA  0E65               	movlw	101
  1985  0025EC  18DE               	xorwf	postinc2,w,c
  1986  0025EE  E103               	bnz	l8247
  1987                           
  1988                           ;main.c: 1136: {
  1989                           ;main.c: 1137: ProcessUserCommands();
  1990  0025F0  EC4E  F013         	call	_ProcessUserCommands	;wreg free
  1991  0025F4  D00D               	goto	l504
  1992  0025F6                     l8247:
  1993                           
  1994                           ;main.c: 1144: }
  1995                           ;main.c: 1147: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  1996  0025F6  5032               	movf	io_poll@lastFunction,w,c
  1997  0025F8  6ED9               	movwf	fsr2l,c
  1998  0025FA  6ADA               	clrf	fsr2h,c
  1999  0025FC  0E15               	movlw	21
  2000  0025FE  18DE               	xorwf	postinc2,w,c
  2001  002600  E107               	bnz	l504
  2002                           
  2003                           ;main.c: 1148: {
  2004                           ;main.c: 1149: InitFromEeprom();
  2005  002602  ECC1  F010         	call	_InitFromEeprom	;wreg free
  2006                           
  2007                           ;main.c: 1150: ModbusSetExceptionStatusBit(0, 1);
  2008  002606  0E01               	movlw	1
  2009  002608  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2010  00260A  0E00               	movlw	0
  2011  00260C  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  2012  002610                     l504:
  2013  002610  FFFF               	dw	65535	; assembler added errata NOP
  2014  002612  0012               	return		;funcret
  2015  002614  FFFF               	dw	65535	; errata NOP
  2016  002616                     __end_of_io_poll:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           tblptrl	equ	0xFF6
  2021                           tablat	equ	0xFF5
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           postdec1	equ	0xFE5
  2025                           fsr1h	equ	0xFE2
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           postinc2	equ	0xFDE
  2029                           postdec2	equ	0xFDD
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           
  2033 ;; *************** function _ProcessUserCommands *****************
  2034 ;; Defined at:
  2035 ;;		line 1088 in file "main.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  v1              1    0        unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2049 ;;      Params:         0       0       0       0       0       0       0
  2050 ;;      Locals:         0       0       0       0       0       0       0
  2051 ;;      Temps:          0       0       0       0       0       0       0
  2052 ;;      Totals:         0       0       0       0       0       0       0
  2053 ;;Total ram usage:        0 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    6
  2056 ;; This function calls:
  2057 ;;		_CommandSetLed
  2058 ;;		_CommandSetStatusLed
  2059 ;;		_ModbusGetUserCommandAdditional1Lo
  2060 ;;		_ModbusGetUserCommandData
  2061 ;;		_ModbusGetUserCommandId
  2062 ;;		_ModbusSetExceptionStatusBit
  2063 ;;		_PlaySound
  2064 ;; This function is called by:
  2065 ;;		_io_poll
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text3
  2070  00269C                     __ptext3:
  2071                           	opt stack 0
  2072  00269C                     _ProcessUserCommands:
  2073                           	opt stack 23
  2074                           
  2075                           ;incstack = 0
  2076  00269C  FFFF               	dw	65535
  2077                           
  2078                           ;main.c: 1090: uint8_t v1;
  2079                           ;main.c: 1091: switch(*ModbusGetUserCommandId())
  2080  00269E  D02F               	goto	l6587
  2081  0026A0                     l488:
  2082                           
  2083                           ;main.c: 1094: eventCount = 0;
  2084  0026A0  6A76               	clrf	_eventCount,c
  2085  0026A2                     l490:
  2086  0026A2  FFFF               	dw	65535	; assembler added errata NOP
  2087  0026A4  B2A6               	btfsc	4006,1,c	;volatile
  2088  0026A6  D7FD               	goto	l490
  2089  0026A8  0E0A               	movlw	10
  2090  0026AA  6EA9               	movwf	4009,c	;volatile
  2091  0026AC  6AA8               	clrf	4008,c	;volatile
  2092  0026AE  90D8               	bcf	status,0,c	;volatile
  2093  0026B0  BEF2               	btfsc	intcon,7,c	;volatile
  2094  0026B2  80D8               	bsf	status,0,c	;volatile
  2095  0026B4  9EF2               	bcf	intcon,7,c	;volatile
  2096  0026B6  84A6               	bsf	4006,2,c	;volatile
  2097  0026B8  0E55               	movlw	85
  2098  0026BA  6EA7               	movwf	4007,c	;volatile
  2099  0026BC  0EAA               	movlw	170
  2100  0026BE  6EA7               	movwf	4007,c	;volatile
  2101  0026C0  82A6               	bsf	4006,1,c	;volatile
  2102  0026C2  94A6               	bcf	4006,2,c	;volatile
  2103  0026C4  E301               	bnc	l6577
  2104  0026C6  8EF2               	bsf	intcon,7,c	;volatile
  2105  0026C8                     l6577:
  2106                           
  2107                           ;main.c: 1096: ModbusSetExceptionStatusBit(0, 1);
  2108  0026C8  0E01               	movlw	1
  2109  0026CA  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2110  0026CC  0E00               	movlw	0
  2111  0026CE  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  2112                           
  2113                           ;main.c: 1097: break;
  2114  0026D2  D023               	goto	l500
  2115  0026D4                     l6579:
  2116                           
  2117                           ;main.c: 1099: CommandSetLed();
  2118  0026D4  EC03  F00C         	call	_CommandSetLed	;wreg free
  2119                           
  2120                           ;main.c: 1100: break;
  2121  0026D8  D020               	goto	l500
  2122  0026DA                     l6581:
  2123                           
  2124                           ;main.c: 1104: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo
      +                          ());
  2125  0026DA  EC5D  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2126  0026DE  6ED9               	movwf	fsr2l,c
  2127  0026E0  6ADA               	clrf	fsr2h,c
  2128  0026E2  50DF               	movf	indf2,w,c
  2129  0026E4  6E17               	movwf	PlaySound@playDuration,c
  2130  0026E6  6A18               	clrf	PlaySound@playDuration+1,c
  2131  0026E8  EC51  F018         	call	_ModbusGetUserCommandData	;wreg free
  2132  0026EC  6ED9               	movwf	fsr2l,c
  2133  0026EE  6ADA               	clrf	fsr2h,c
  2134  0026F0  50DF               	movf	indf2,w,c
  2135  0026F2  EC95  F00F         	call	_PlaySound
  2136                           
  2137                           ;main.c: 1105: break;
  2138  0026F6  D011               	goto	l500
  2139  0026F8                     l6583:
  2140                           
  2141                           ;main.c: 1108: CommandSetStatusLed();
  2142  0026F8  EC0B  F013         	call	_CommandSetStatusLed	;wreg free
  2143                           
  2144                           ;main.c: 1109: break;
  2145  0026FC  D00E               	goto	l500
  2146  0026FE                     l6587:
  2147  0026FE  FFFF               	dw	65535	; assembler added errata NOP
  2148  002700  EC4D  F018         	call	_ModbusGetUserCommandId	;wreg free
  2149  002704  6ED9               	movwf	fsr2l,c
  2150  002706  6ADA               	clrf	fsr2h,c
  2151  002708  50DF               	movf	indf2,w,c
  2152                           
  2153                           ; Switch size 1, requested type "speed"
  2154                           ; Number of cases is 4, Range of values is 128 to 145
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           13     7 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  00270A  0A80               	xorlw	128	; case 128
  2160  00270C  E0C9               	bz	l488
  2161  00270E  0A02               	xorlw	2	; case 130
  2162  002710  E0E1               	bz	l6579
  2163  002712  0A01               	xorlw	1	; case 131
  2164  002714  E0F1               	bz	l6583
  2165  002716  0A12               	xorlw	18	; case 145
  2166  002718  E0E0               	bz	l6581
  2167  00271A                     l500:
  2168  00271A  FFFF               	dw	65535	; assembler added errata NOP
  2169  00271C  0012               	return		;funcret
  2170  00271E  FFFF               	dw	65535	; errata NOP
  2171  002720                     __end_of_ProcessUserCommands:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           postdec1	equ	0xFE5
  2181                           fsr1h	equ	0xFE2
  2182                           fsr1l	equ	0xFE1
  2183                           indf2	equ	0xFDF
  2184                           postinc2	equ	0xFDE
  2185                           postdec2	equ	0xFDD
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _ModbusGetUserCommandId *****************
  2191 ;; Defined at:
  2192 ;;		line 193 in file "ModbusRtu.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      PTR unsigned char 
  2199 ;; Registers used:
  2200 ;;		wreg
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2206 ;;      Params:         2       0       0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0       0       0
  2208 ;;      Temps:          0       0       0       0       0       0       0
  2209 ;;      Totals:         2       0       0       0       0       0       0
  2210 ;;Total ram usage:        2 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    2
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_ProcessUserCommands
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text4
  2221  00309A                     __ptext4:
  2222                           	opt stack 0
  2223  00309A                     _ModbusGetUserCommandId:
  2224                           	opt stack 26
  2225                           
  2226                           ;incstack = 0
  2227  00309A  FFFF               	dw	65535
  2228  00309C  0EE6               	movlw	_ModbusUserCommandId& (0+255)
  2229  00309E  0012               	return		;funcret
  2230  0030A0  FFFF               	dw	65535	; errata NOP
  2231  0030A2                     __end_of_ModbusGetUserCommandId:
  2232                           	opt stack 0
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           intcon	equ	0xFF2
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1h	equ	0xFE2
  2242                           fsr1l	equ	0xFE1
  2243                           indf2	equ	0xFDF
  2244                           postinc2	equ	0xFDE
  2245                           postdec2	equ	0xFDD
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _CommandSetStatusLed *****************
  2251 ;; Defined at:
  2252 ;;		line 1067 in file "main.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  led             1   33[COMRAM] unsigned char 
  2257 ;;  commandData     1   32[COMRAM] unsigned char 
  2258 ;;  soundId         1   31[COMRAM] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2268 ;;      Params:         0       0       0       0       0       0       0
  2269 ;;      Locals:         3       0       0       0       0       0       0
  2270 ;;      Temps:          1       0       0       0       0       0       0
  2271 ;;      Totals:         4       0       0       0       0       0       0
  2272 ;;Total ram usage:        4 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    5
  2275 ;; This function calls:
  2276 ;;		_LightStatusLed
  2277 ;;		_ModbusGetUserCommandAdditional1Hi
  2278 ;;		_ModbusGetUserCommandAdditional1Lo
  2279 ;;		_ModbusGetUserCommandData
  2280 ;;		_ModbusSetExceptionStatusBit
  2281 ;;		_PlaySound
  2282 ;;		_StopPlaying
  2283 ;; This function is called by:
  2284 ;;		_ProcessUserCommands
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text5
  2289  002616                     __ptext5:
  2290                           	opt stack 0
  2291  002616                     _CommandSetStatusLed:
  2292                           	opt stack 23
  2293                           
  2294                           ;incstack = 0
  2295  002616  FFFF               	dw	65535
  2296                           
  2297                           ;main.c: 1071: uint8_t commandData = *ModbusGetUserCommandData();
  2298  002618  EC51  F018         	call	_ModbusGetUserCommandData	;wreg free
  2299  00261C  6ED9               	movwf	fsr2l,c
  2300  00261E  6ADA               	clrf	fsr2h,c
  2301  002620  50DF               	movf	indf2,w,c
  2302  002622  6E21               	movwf	CommandSetStatusLed@commandData,c
  2303                           
  2304                           ;main.c: 1072: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  2305  002624  EC61  F018         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2306  002628  6ED9               	movwf	fsr2l,c
  2307  00262A  6ADA               	clrf	fsr2h,c
  2308  00262C  50DF               	movf	indf2,w,c
  2309  00262E  6E20               	movwf	CommandSetStatusLed@soundId,c
  2310                           
  2311                           ;main.c: 1073: uint8_t led = commandData & 0x07;
  2312  002630  5021               	movf	CommandSetStatusLed@commandData,w,c
  2313  002632  0B07               	andlw	7
  2314  002634  6E22               	movwf	CommandSetStatusLed@led,c
  2315                           
  2316                           ;main.c: 1074: if(led >= 0x05)
  2317  002636  0E04               	movlw	4
  2318  002638  6422               	cpfsgt	CommandSetStatusLed@led,c
  2319  00263A  D001               	goto	l6383
  2320  00263C  D02C               	goto	l482
  2321  00263E                     l6383:
  2322  00263E  FFFF               	dw	65535	; assembler added errata NOP
  2323                           
  2324                           ;main.c: 1076: if((((commandData) >> (7)) & 0x01) == 0)
  2325  002640  6A1F               	clrf	??_CommandSetStatusLed& (0+255),c
  2326  002642  AE21               	btfss	CommandSetStatusLed@commandData,7,c
  2327  002644  D001               	bra	u5505
  2328  002646  2A1F               	incf	??_CommandSetStatusLed& (0+255),f,c
  2329  002648                     u5505:
  2330  002648  B01F               	btfsc	??_CommandSetStatusLed,0,c
  2331  00264A  D00B               	goto	l6393
  2332                           
  2333                           ;main.c: 1077: {
  2334                           ;main.c: 1078: LightStatusLed(led, 0, 0);
  2335  00264C  0E00               	movlw	0
  2336  00264E  6E07               	movwf	LightStatusLed@on,c
  2337  002650  6E08               	movwf	LightStatusLed@blink,c
  2338  002652  5022               	movf	CommandSetStatusLed@led,w,c
  2339  002654  ECAA  F00E         	call	_LightStatusLed
  2340                           
  2341                           ;main.c: 1079: if(soundId != 0xff)
  2342  002658  2820               	incf	CommandSetStatusLed@soundId,w,c
  2343  00265A  E01D               	bz	l482
  2344                           
  2345                           ;main.c: 1080: StopPlaying();
  2346  00265C  EC2D  F018         	call	_StopPlaying	;wreg free
  2347  002660  D01A               	goto	l482
  2348  002662                     l6393:
  2349  002662  FFFF               	dw	65535	; assembler added errata NOP
  2350                           
  2351                           ;main.c: 1082: }
  2352                           ;main.c: 1083: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  2353  002664  0E01               	movlw	1
  2354  002666  6E07               	movwf	LightStatusLed@on,c
  2355  002668  4421               	rlncf	CommandSetStatusLed@commandData,w,c
  2356  00266A  46E8               	rlncf	wreg,f,c
  2357  00266C  0B03               	andlw	3
  2358  00266E  0B01               	andlw	1
  2359  002670  6E08               	movwf	LightStatusLed@blink,c
  2360  002672  5022               	movf	CommandSetStatusLed@led,w,c
  2361  002674  ECAA  F00E         	call	_LightStatusLed
  2362                           
  2363                           ;main.c: 1084: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  2364  002678  EC5D  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2365  00267C  6ED9               	movwf	fsr2l,c
  2366  00267E  6ADA               	clrf	fsr2h,c
  2367  002680  50DF               	movf	indf2,w,c
  2368  002682  6E17               	movwf	PlaySound@playDuration,c
  2369  002684  6A18               	clrf	PlaySound@playDuration+1,c
  2370  002686  5020               	movf	CommandSetStatusLed@soundId,w,c
  2371  002688  EC95  F00F         	call	_PlaySound
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 1085: ModbusSetExceptionStatusBit(0, 1);
  2375  00268C  0E01               	movlw	1
  2376  00268E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2377  002690  0E00               	movlw	0
  2378  002692  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  2379  002696                     l482:
  2380  002696  FFFF               	dw	65535	; assembler added errata NOP
  2381  002698  0012               	return		;funcret
  2382  00269A  FFFF               	dw	65535	; errata NOP
  2383  00269C                     __end_of_CommandSetStatusLed:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           intcon	equ	0xFF2
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1h	equ	0xFE2
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           postinc2	equ	0xFDE
  2397                           postdec2	equ	0xFDD
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _CommandSetLed *****************
  2403 ;; Defined at:
  2404 ;;		line 1030 in file "main.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  led             1   39[COMRAM] unsigned char 
  2409 ;;  commandData     1   38[COMRAM] unsigned char 
  2410 ;;  blinkSeconds    1   37[COMRAM] unsigned char 
  2411 ;;  ledColor        1   36[COMRAM] unsigned char 
  2412 ;;  soundId         1   35[COMRAM] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2422 ;;      Params:         0       0       0       0       0       0       0
  2423 ;;      Locals:         5       0       0       0       0       0       0
  2424 ;;      Temps:          5       0       0       0       0       0       0
  2425 ;;      Totals:        10       0       0       0       0       0       0
  2426 ;;Total ram usage:       10 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    5
  2429 ;; This function calls:
  2430 ;;		_GetTime
  2431 ;;		_LightLed
  2432 ;;		_ModbusGetUserCommandAdditional1Hi
  2433 ;;		_ModbusGetUserCommandAdditional1Lo
  2434 ;;		_ModbusGetUserCommandAdditional2Hi
  2435 ;;		_ModbusGetUserCommandAdditional2Lo
  2436 ;;		_ModbusGetUserCommandData
  2437 ;;		_ModbusSetExceptionStatusBit
  2438 ;;		_PlaySound
  2439 ;;		_StopPlaying
  2440 ;; This function is called by:
  2441 ;;		_ProcessUserCommands
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text6
  2446  001806                     __ptext6:
  2447                           	opt stack 0
  2448  001806                     _CommandSetLed:
  2449                           	opt stack 23
  2450                           
  2451                           ;incstack = 0
  2452  001806  FFFF               	dw	65535
  2453                           
  2454                           ;main.c: 1037: uint8_t commandData = *ModbusGetUserCommandData();
  2455  001808  EC51  F018         	call	_ModbusGetUserCommandData	;wreg free
  2456  00180C  6ED9               	movwf	fsr2l,c
  2457  00180E  6ADA               	clrf	fsr2h,c
  2458  001810  50DF               	movf	indf2,w,c
  2459  001812  6E27               	movwf	CommandSetLed@commandData,c
  2460                           
  2461                           ;main.c: 1038: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  2462  001814  EC61  F018         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2463  001818  6ED9               	movwf	fsr2l,c
  2464  00181A  6ADA               	clrf	fsr2h,c
  2465  00181C  50DF               	movf	indf2,w,c
  2466  00181E  6E24               	movwf	CommandSetLed@soundId,c
  2467                           
  2468                           ;main.c: 1039: uint8_t led = *ModbusGetUserCommandAdditional2Hi();
  2469  001820  EC59  F018         	call	_ModbusGetUserCommandAdditional2Hi	;wreg free
  2470  001824  6ED9               	movwf	fsr2l,c
  2471  001826  6ADA               	clrf	fsr2h,c
  2472  001828  50DF               	movf	indf2,w,c
  2473  00182A  6E28               	movwf	CommandSetLed@led,c
  2474                           
  2475                           ;main.c: 1040: if(led == 0 || led > 60 - _maxDiaryEvents)
  2476  00182C  5028               	movf	CommandSetLed@led,w,c
  2477  00182E  E075               	bz	l472
  2478  001830  5028               	movf	CommandSetLed@led,w,c
  2479  001832  6E1F               	movwf	??_CommandSetLed& (0+255),c
  2480  001834  6A20               	clrf	(??_CommandSetLed+1)& (0+255),c
  2481  001836  0E3C               	movlw	60
  2482  001838  6E21               	movwf	(??_CommandSetLed+2)& (0+255),c
  2483  00183A  6A22               	clrf	(??_CommandSetLed+3)& (0+255),c
  2484  00183C  5072               	movf	__maxDiaryEvents,w,c
  2485  00183E  5E21               	subwf	??_CommandSetLed+2,f,c
  2486  001840  0E00               	movlw	0
  2487  001842  5A22               	subwfb	??_CommandSetLed+3,f,c
  2488  001844  501F               	movf	??_CommandSetLed,w,c
  2489  001846  5C21               	subwf	??_CommandSetLed+2,w,c
  2490  001848  5022               	movf	??_CommandSetLed+3,w,c
  2491  00184A  0A80               	xorlw	128
  2492  00184C  6E23               	movwf	(??_CommandSetLed+4)& (0+255),c
  2493  00184E  5020               	movf	??_CommandSetLed+1,w,c
  2494  001850  0A80               	xorlw	128
  2495  001852  5823               	subwfb	(??_CommandSetLed+4)& (0+255),w,c
  2496  001854  E362               	bnc	l472
  2497                           
  2498                           ;main.c: 1042: uint8_t ledColor = commandData & 0x03;
  2499  001856  5027               	movf	CommandSetLed@commandData,w,c
  2500  001858  0B03               	andlw	3
  2501  00185A  6E25               	movwf	CommandSetLed@ledColor,c
  2502                           
  2503                           ;main.c: 1043: if((((commandData) >> (7)) & 0x01) == 0 || ledColor == 0)
  2504  00185C  6A1F               	clrf	??_CommandSetLed& (0+255),c
  2505  00185E  AE27               	btfss	CommandSetLed@commandData,7,c
  2506  001860  D001               	bra	u5445
  2507  001862  2A1F               	incf	??_CommandSetLed& (0+255),f,c
  2508  001864                     u5445:
  2509  001864  A01F               	btfss	??_CommandSetLed,0,c
  2510  001866  D002               	goto	l6351
  2511  001868  5025               	movf	CommandSetLed@ledColor,w,c
  2512  00186A  E10C               	bnz	l6359
  2513  00186C                     l6351:
  2514  00186C  FFFF               	dw	65535	; assembler added errata NOP
  2515                           
  2516                           ;main.c: 1044: {
  2517                           ;main.c: 1045: LightLed(led, LED_OFF, 0);
  2518  00186E  0E00               	movlw	0
  2519  001870  6E07               	movwf	LightLed@ledState,c
  2520  001872  6E08               	movwf	LightLed@blink,c
  2521  001874  5028               	movf	CommandSetLed@led,w,c
  2522  001876  ECB5  F004         	call	_LightLed
  2523                           
  2524                           ;main.c: 1046: if(soundId != 0xff)
  2525  00187A  2824               	incf	CommandSetLed@soundId,w,c
  2526  00187C  E04E               	bz	l472
  2527                           
  2528                           ;main.c: 1047: StopPlaying();
  2529  00187E  EC2D  F018         	call	_StopPlaying	;wreg free
  2530  001882  D04B               	goto	l472
  2531  001884                     l6359:
  2532                           
  2533                           ;main.c: 1049: }
  2534                           ;main.c: 1051: uint8_t blinkSeconds = *ModbusGetUserCommandAdditional2Lo();
  2535  001884  EC55  F018         	call	_ModbusGetUserCommandAdditional2Lo	;wreg free
  2536  001888  6ED9               	movwf	fsr2l,c
  2537  00188A  6ADA               	clrf	fsr2h,c
  2538  00188C  50DF               	movf	indf2,w,c
  2539  00188E  6E26               	movwf	CommandSetLed@blinkSeconds,c
  2540                           
  2541                           ;main.c: 1052: if(blinkSeconds == 0)
  2542  001890  5026               	movf	CommandSetLed@blinkSeconds,w,c
  2543  001892  E10B               	bnz	l477
  2544                           
  2545                           ;main.c: 1053: {
  2546                           ;main.c: 1054: LightLed(led, ledColor, (((commandData) >> (6)) & 0x01));
  2547  001894  C025  F007         	movff	CommandSetLed@ledColor,LightLed@ledState
  2548  001898  4427               	rlncf	CommandSetLed@commandData,w,c
  2549  00189A  46E8               	rlncf	wreg,f,c
  2550  00189C  0B03               	andlw	3
  2551  00189E  0B01               	andlw	1
  2552  0018A0  6E08               	movwf	LightLed@blink,c
  2553  0018A2  5028               	movf	CommandSetLed@led,w,c
  2554  0018A4  ECB5  F004         	call	_LightLed
  2555                           
  2556                           ;main.c: 1055: }
  2557  0018A8  D028               	goto	l6371
  2558  0018AA                     l477:
  2559                           
  2560                           ;main.c: 1056: else
  2561                           ;main.c: 1057: {
  2562                           ;main.c: 1058: _eventFromCommand.LedNum = led;
  2563  0018AA  C028  F0A1         	movff	CommandSetLed@led,__eventFromCommand+1
  2564                           
  2565                           ;main.c: 1059: _eventFromCommand.IsFire = 1;
  2566  0018AE  0E01               	movlw	1
  2567  0018B0  0100               	movlb	0	; () banked
  2568  0018B2  6FA0               	movwf	__eventFromCommand& (0+255),b
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 1060: _eventFromCommand.ResetSecond = *GetTime() + blinkSeconds;
  2572  0018B4  EC65  F018         	call	_GetTime	;wreg free
  2573  0018B8  6ED9               	movwf	fsr2l,c
  2574  0018BA  6ADA               	clrf	fsr2h,c
  2575  0018BC  CFDE F01F          	movff	postinc2,??_CommandSetLed
  2576  0018C0  CFDE F020          	movff	postinc2,??_CommandSetLed+1
  2577  0018C4  CFDE F021          	movff	postinc2,??_CommandSetLed+2
  2578  0018C8  CFDE F022          	movff	postinc2,??_CommandSetLed+3
  2579  0018CC  5026               	movf	CommandSetLed@blinkSeconds,w,c
  2580  0018CE  241F               	addwf	??_CommandSetLed,w,c
  2581  0018D0  0100               	movlb	0	; () banked
  2582  0018D2  6FA2               	movwf	(__eventFromCommand+2)& (0+255),b
  2583  0018D4  0E00               	movlw	0
  2584  0018D6  2020               	addwfc	??_CommandSetLed+1,w,c
  2585  0018D8  6FA3               	movwf	(__eventFromCommand+3)& (0+255),b
  2586  0018DA  0E00               	movlw	0
  2587  0018DC  2021               	addwfc	??_CommandSetLed+2,w,c
  2588  0018DE  6FA4               	movwf	(__eventFromCommand+4)& (0+255),b
  2589  0018E0  0E00               	movlw	0
  2590  0018E2  2022               	addwfc	??_CommandSetLed+3,w,c
  2591  0018E4  6FA5               	movwf	(__eventFromCommand+5)& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;main.c: 1061: LightLed(led, LED_ORANGE, (((commandData) >> (6)) & 0x01));
  2595  0018E6  0E03               	movlw	3
  2596  0018E8  6E07               	movwf	LightLed@ledState,c
  2597  0018EA  4427               	rlncf	CommandSetLed@commandData,w,c
  2598  0018EC  46E8               	rlncf	wreg,f,c
  2599  0018EE  0B03               	andlw	3
  2600  0018F0  0B01               	andlw	1
  2601  0018F2  6E08               	movwf	LightLed@blink,c
  2602  0018F4  5028               	movf	CommandSetLed@led,w,c
  2603  0018F6  ECB5  F004         	call	_LightLed
  2604  0018FA                     l6371:
  2605  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  2606                           
  2607                           ;main.c: 1062: }
  2608                           ;main.c: 1063: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  2609  0018FC  EC5D  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2610  001900  6ED9               	movwf	fsr2l,c
  2611  001902  6ADA               	clrf	fsr2h,c
  2612  001904  50DF               	movf	indf2,w,c
  2613  001906  6E17               	movwf	PlaySound@playDuration,c
  2614  001908  6A18               	clrf	PlaySound@playDuration+1,c
  2615  00190A  5024               	movf	CommandSetLed@soundId,w,c
  2616  00190C  EC95  F00F         	call	_PlaySound
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 1064: ModbusSetExceptionStatusBit(0, 1);
  2620  001910  0E01               	movlw	1
  2621  001912  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2622  001914  0E00               	movlw	0
  2623  001916  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  2624  00191A                     l472:
  2625  00191A  FFFF               	dw	65535	; assembler added errata NOP
  2626  00191C  0012               	return		;funcret
  2627  00191E  FFFF               	dw	65535	; errata NOP
  2628  001920                     __end_of_CommandSetLed:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           intcon	equ	0xFF2
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           postdec1	equ	0xFE5
  2638                           fsr1h	equ	0xFE2
  2639                           fsr1l	equ	0xFE1
  2640                           indf2	equ	0xFDF
  2641                           postinc2	equ	0xFDE
  2642                           postdec2	equ	0xFDD
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _ModbusGetUserCommandData *****************
  2648 ;; Defined at:
  2649 ;;		line 194 in file "ModbusRtu.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      PTR unsigned char 
  2656 ;; Registers used:
  2657 ;;		wreg
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2663 ;;      Params:         2       0       0       0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0
  2666 ;;      Totals:         2       0       0       0       0       0       0
  2667 ;;Total ram usage:        2 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    2
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_CommandSetLed
  2674 ;;		_CommandSetStatusLed
  2675 ;;		_ProcessUserCommands
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text7
  2680  0030A2                     __ptext7:
  2681                           	opt stack 0
  2682  0030A2                     _ModbusGetUserCommandData:
  2683                           	opt stack 26
  2684                           
  2685                           ;incstack = 0
  2686  0030A2  FFFF               	dw	65535
  2687  0030A4  0EE5               	movlw	_ModbusUserCommandData& (0+255)
  2688  0030A6  0012               	return		;funcret
  2689  0030A8  FFFF               	dw	65535	; errata NOP
  2690  0030AA                     __end_of_ModbusGetUserCommandData:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           intcon	equ	0xFF2
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _ModbusGetUserCommandAdditional2Lo *****************
  2710 ;; Defined at:
  2711 ;;		line 206 in file "ModbusRtu.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      PTR unsigned char 
  2718 ;; Registers used:
  2719 ;;		wreg
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2725 ;;      Params:         2       0       0       0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0
  2728 ;;      Totals:         2       0       0       0       0       0       0
  2729 ;;Total ram usage:        2 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    2
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_CommandSetLed
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text8
  2740  0030AA                     __ptext8:
  2741                           	opt stack 0
  2742  0030AA                     _ModbusGetUserCommandAdditional2Lo:
  2743                           	opt stack 25
  2744                           
  2745                           ;incstack = 0
  2746  0030AA  FFFF               	dw	65535
  2747  0030AC  0EE2               	movlw	_ModbusUserCommandAdditional2Lo& (0+255)
  2748  0030AE  0012               	return		;funcret
  2749  0030B0  FFFF               	dw	65535	; errata NOP
  2750  0030B2                     __end_of_ModbusGetUserCommandAdditional2Lo:
  2751                           	opt stack 0
  2752                           tblptru	equ	0xFF8
  2753                           tblptrh	equ	0xFF7
  2754                           tblptrl	equ	0xFF6
  2755                           tablat	equ	0xFF5
  2756                           intcon	equ	0xFF2
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           postdec1	equ	0xFE5
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           indf2	equ	0xFDF
  2763                           postinc2	equ	0xFDE
  2764                           postdec2	equ	0xFDD
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _ModbusGetUserCommandAdditional2Hi *****************
  2770 ;; Defined at:
  2771 ;;		line 205 in file "ModbusRtu.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      PTR unsigned char 
  2778 ;; Registers used:
  2779 ;;		wreg
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2785 ;;      Params:         2       0       0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0
  2788 ;;      Totals:         2       0       0       0       0       0       0
  2789 ;;Total ram usage:        2 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_CommandSetLed
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text9
  2800  0030B2                     __ptext9:
  2801                           	opt stack 0
  2802  0030B2                     _ModbusGetUserCommandAdditional2Hi:
  2803                           	opt stack 25
  2804                           
  2805                           ;incstack = 0
  2806  0030B2  FFFF               	dw	65535
  2807  0030B4  0EE1               	movlw	_ModbusUserCommandAdditional2Hi& (0+255)
  2808  0030B6  0012               	return		;funcret
  2809  0030B8  FFFF               	dw	65535	; errata NOP
  2810  0030BA                     __end_of_ModbusGetUserCommandAdditional2Hi:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           intcon	equ	0xFF2
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           postinc2	equ	0xFDE
  2824                           postdec2	equ	0xFDD
  2825                           fsr2h	equ	0xFDA
  2826                           fsr2l	equ	0xFD9
  2827                           status	equ	0xFD8
  2828                           
  2829 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  2830 ;; Defined at:
  2831 ;;		line 200 in file "ModbusRtu.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;		None
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      PTR unsigned char 
  2838 ;; Registers used:
  2839 ;;		wreg
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         2       0       0       0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0
  2848 ;;      Totals:         2       0       0       0       0       0       0
  2849 ;;Total ram usage:        2 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    2
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_CommandSetLed
  2856 ;;		_CommandSetStatusLed
  2857 ;;		_ProcessUserCommands
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text10
  2862  0030BA                     __ptext10:
  2863                           	opt stack 0
  2864  0030BA                     _ModbusGetUserCommandAdditional1Lo:
  2865                           	opt stack 26
  2866                           
  2867                           ;incstack = 0
  2868  0030BA  FFFF               	dw	65535
  2869  0030BC  0EE0               	movlw	_ModbusUserCommandAdditional1Lo& (0+255)
  2870  0030BE  0012               	return		;funcret
  2871  0030C0  FFFF               	dw	65535	; errata NOP
  2872  0030C2                     __end_of_ModbusGetUserCommandAdditional1Lo:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           intcon	equ	0xFF2
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1h	equ	0xFE2
  2883                           fsr1l	equ	0xFE1
  2884                           indf2	equ	0xFDF
  2885                           postinc2	equ	0xFDE
  2886                           postdec2	equ	0xFDD
  2887                           fsr2h	equ	0xFDA
  2888                           fsr2l	equ	0xFD9
  2889                           status	equ	0xFD8
  2890                           
  2891 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  2892 ;; Defined at:
  2893 ;;		line 199 in file "ModbusRtu.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;		None
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      PTR unsigned char 
  2900 ;; Registers used:
  2901 ;;		wreg
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2907 ;;      Params:         2       0       0       0       0       0       0
  2908 ;;      Locals:         0       0       0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0       0       0
  2910 ;;      Totals:         2       0       0       0       0       0       0
  2911 ;;Total ram usage:        2 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    2
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_CommandSetLed
  2918 ;;		_CommandSetStatusLed
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text11
  2923  0030C2                     __ptext11:
  2924                           	opt stack 0
  2925  0030C2                     _ModbusGetUserCommandAdditional1Hi:
  2926                           	opt stack 25
  2927                           
  2928                           ;incstack = 0
  2929  0030C2  FFFF               	dw	65535
  2930  0030C4  0EDF               	movlw	_ModbusUserCommandAdditional1Hi& (0+255)
  2931  0030C6  0012               	return		;funcret
  2932  0030C8  FFFF               	dw	65535	; errata NOP
  2933  0030CA                     __end_of_ModbusGetUserCommandAdditional1Hi:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           intcon	equ	0xFF2
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _ModbusGetLastCommand *****************
  2953 ;; Defined at:
  2954 ;;		line 914 in file "ModbusRtu.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  address         1    wreg     PTR unsigned short 
  2957 ;;		 -> io_poll@lastAddress(2), 
  2958 ;;  count           1    6[COMRAM] PTR unsigned short 
  2959 ;;		 -> io_poll@lastEndAddress(2), 
  2960 ;;  command         1    7[COMRAM] PTR unsigned char 
  2961 ;;		 -> io_poll@lastCommand(1), 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  address         1    8[COMRAM] PTR unsigned short 
  2964 ;;		 -> io_poll@lastAddress(2), 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      PTR unsigned char 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr2l, fsr2h, status,2
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2974 ;;      Params:         2       0       0       0       0       0       0
  2975 ;;      Locals:         1       0       0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0
  2977 ;;      Totals:         3       0       0       0       0       0       0
  2978 ;;Total ram usage:        3 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    2
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_io_poll
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text12
  2989  002D56                     __ptext12:
  2990                           	opt stack 0
  2991  002D56                     _ModbusGetLastCommand:
  2992                           	opt stack 27
  2993                           
  2994                           ;incstack = 0
  2995  002D56  FFFF               	dw	65535
  2996                           
  2997                           ;ModbusGetLastCommand@address stored from wreg
  2998  002D58  6E09               	movwf	ModbusGetLastCommand@address,c
  2999                           
  3000                           ;ModbusRtu.c: 916: if (address != (0))
  3001  002D5A  5009               	movf	ModbusGetLastCommand@address,w,c
  3002  002D5C  E007               	bz	l6593
  3003                           
  3004                           ;ModbusRtu.c: 917: *address = _lastAddress;
  3005  002D5E  5009               	movf	ModbusGetLastCommand@address,w,c
  3006  002D60  6ED9               	movwf	fsr2l,c
  3007  002D62  6ADA               	clrf	fsr2h,c
  3008  002D64  C0BE  FFDE         	movff	__lastAddress,postinc2
  3009  002D68  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3010  002D6C                     l6593:
  3011                           
  3012                           ;ModbusRtu.c: 918: if (count != (0))
  3013  002D6C  5007               	movf	ModbusGetLastCommand@count,w,c
  3014  002D6E  E007               	bz	l6597
  3015                           
  3016                           ;ModbusRtu.c: 919: *count = _lastCount;
  3017  002D70  5007               	movf	ModbusGetLastCommand@count,w,c
  3018  002D72  6ED9               	movwf	fsr2l,c
  3019  002D74  6ADA               	clrf	fsr2h,c
  3020  002D76  C0C0  FFDE         	movff	__lastCount,postinc2
  3021  002D7A  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3022  002D7E                     l6597:
  3023                           
  3024                           ;ModbusRtu.c: 920: if(command != (0))
  3025  002D7E  5008               	movf	ModbusGetLastCommand@command,w,c
  3026  002D80  E005               	bz	l6601
  3027                           
  3028                           ;ModbusRtu.c: 921: *command = _lastCommand;
  3029  002D82  5008               	movf	ModbusGetLastCommand@command,w,c
  3030  002D84  6ED9               	movwf	fsr2l,c
  3031  002D86  6ADA               	clrf	fsr2h,c
  3032  002D88  C0D0  FFDF         	movff	__lastCommand,indf2
  3033  002D8C                     l6601:
  3034                           
  3035                           ;ModbusRtu.c: 922: return &_lastFunction;
  3036  002D8C  0EE7               	movlw	__lastFunction& (0+255)
  3037  002D8E  0012               	return		;funcret
  3038  002D90  FFFF               	dw	65535	; errata NOP
  3039  002D92                     __end_of_ModbusGetLastCommand:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1h	equ	0xFE2
  3050                           fsr1l	equ	0xFE1
  3051                           indf2	equ	0xFDF
  3052                           postinc2	equ	0xFDE
  3053                           postdec2	equ	0xFDD
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058 ;; *************** function _InitFromEeprom *****************
  3059 ;; Defined at:
  3060 ;;		line 435 in file "main.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  tmpModbusId     1   18[COMRAM] unsigned char 
  3065 ;;  eeSoundCount    1   17[COMRAM] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3075 ;;      Params:         0       0       0       0       0       0       0
  3076 ;;      Locals:         2       0       0       0       0       0       0
  3077 ;;      Temps:          2       0       0       0       0       0       0
  3078 ;;      Totals:         4       0       0       0       0       0       0
  3079 ;;Total ram usage:        4 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		_LoadNextEvent
  3084 ;;		_Modbus
  3085 ;;		_ShowFailure
  3086 ;;		_SwitchOffAllLeds
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;;		_io_poll
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text13
  3094  002182                     __ptext13:
  3095                           	opt stack 0
  3096  002182                     _InitFromEeprom:
  3097                           	opt stack 25
  3098                           
  3099                           ;incstack = 0
  3100  002182  FFFF               	dw	65535
  3101                           
  3102                           ;main.c: 437: SwitchOffAllLeds();
  3103  002184  EC77  F017         	call	_SwitchOffAllLeds	;wreg free
  3104                           
  3105                           ;main.c: 439: eventAcceptTime = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  3106  002188  0E02               	movlw	2
  3107  00218A  6EA9               	movwf	4009,c	;volatile
  3108  00218C  80A6               	bsf	4006,0,c	;volatile
  3109  00218E  CFA8 F0D8          	movff	4008,_eventAcceptTime	;volatile
  3110                           
  3111                           ;main.c: 443: uint8_t tmpModbusId = ( EEADR = 1, (void)0, RD = 1, EEDATA);
  3112  002192  0E01               	movlw	1
  3113  002194  6EA9               	movwf	4009,c	;volatile
  3114  002196  80A6               	bsf	4006,0,c	;volatile
  3115  002198  CFA8 F013          	movff	4008,InitFromEeprom@tmpModbusId	;volatile
  3116                           
  3117                           ;main.c: 444: if(tmpModbusId == 0xff)
  3118  00219C  2813               	incf	InitFromEeprom@tmpModbusId,w,c
  3119  00219E  E102               	bnz	l7961
  3120                           
  3121                           ;main.c: 445: tmpModbusId = 0x7F;
  3122  0021A0  0E7F               	movlw	127
  3123  0021A2  6E13               	movwf	InitFromEeprom@tmpModbusId,c
  3124  0021A4                     l7961:
  3125                           
  3126                           ;main.c: 446: Modbus(tmpModbusId, 0, 0);
  3127  0021A4  6A0C               	clrf	Modbus@u8serno,c
  3128  0021A6  6A0D               	clrf	Modbus@u8txenpin,c
  3129  0021A8  5013               	movf	InitFromEeprom@tmpModbusId,w,c
  3130  0021AA  EC12  F018         	call	_Modbus
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 449: _maxDiaryEvents = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  3134  0021AE  0E03               	movlw	3
  3135  0021B0  6EA9               	movwf	4009,c	;volatile
  3136                           
  3137                           ; BSR set to: 0
  3138  0021B2  80A6               	bsf	4006,0,c	;volatile
  3139                           
  3140                           ; BSR set to: 0
  3141  0021B4  CFA8 F072          	movff	4008,__maxDiaryEvents	;volatile
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;main.c: 450: if(_maxDiaryEvents == 0xff)
  3145  0021B8  2872               	incf	__maxDiaryEvents,w,c
  3146  0021BA  E101               	bnz	l7973
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 451: _maxDiaryEvents = 0;
  3150  0021BC  6A72               	clrf	__maxDiaryEvents,c
  3151  0021BE                     l7973:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 452: if(_maxDiaryEvents > 60)
  3155  0021BE  0E3C               	movlw	60
  3156  0021C0  6472               	cpfsgt	__maxDiaryEvents,c
  3157  0021C2  D004               	goto	l7979
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;main.c: 453: {
  3161                           ;main.c: 454: ShowFailure(2);
  3162  0021C4  0E02               	movlw	2
  3163  0021C6  ECB0  F017         	call	_ShowFailure
  3164  0021CA  D034               	goto	l318
  3165  0021CC                     l7979:
  3166  0021CC  FFFF               	dw	65535	; assembler added errata NOP
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 456: }
  3170                           ;main.c: 457: eventCount = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  3171  0021CE  0E0A               	movlw	10
  3172  0021D0  6EA9               	movwf	4009,c	;volatile
  3173                           
  3174                           ; BSR set to: 0
  3175  0021D2  80A6               	bsf	4006,0,c	;volatile
  3176                           
  3177                           ; BSR set to: 0
  3178  0021D4  CFA8 F076          	movff	4008,_eventCount	;volatile
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 458: if(eventCount == 0xff)
  3182  0021D8  2876               	incf	_eventCount,w,c
  3183  0021DA  E101               	bnz	l7989
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 459: eventCount = 0;
  3187  0021DC  6A76               	clrf	_eventCount,c
  3188  0021DE                     l7989:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 460: if(eventCount > _maxDiaryEvents)
  3192  0021DE  5076               	movf	_eventCount,w,c
  3193  0021E0  5C72               	subwf	__maxDiaryEvents,w,c
  3194  0021E2  E204               	bc	l7995
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 461: {
  3198                           ;main.c: 462: ShowFailure(3);
  3199  0021E4  0E03               	movlw	3
  3200  0021E6  ECB0  F017         	call	_ShowFailure
  3201  0021EA  D024               	goto	l318
  3202  0021EC                     l7995:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 464: }
  3206                           ;main.c: 469: uint8_t eeSoundCountAddress = 10 + 1 + eventCount * 2;
  3207  0021EC  5076               	movf	_eventCount,w,c
  3208  0021EE  0D02               	mullw	2
  3209  0021F0  50F3               	movf	prodl,w,c
  3210  0021F2  0F0B               	addlw	11
  3211  0021F4  6E12               	movwf	InitFromEeprom@eeSoundCountAddress,c
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;main.c: 470: _soundCount = ( EEADR = eeSoundCountAddress, (void)0, RD = 1, EEDATA);
  3215  0021F6  C012  FFA9         	movff	InitFromEeprom@eeSoundCountAddress,4009	;volatile
  3216                           
  3217                           ; BSR set to: 0
  3218  0021FA  80A6               	bsf	4006,0,c	;volatile
  3219                           
  3220                           ; BSR set to: 0
  3221  0021FC  CFA8 F0D4          	movff	4008,__soundCount	;volatile
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 471: if(_soundCount == 0xFF)
  3225  002200  29D4               	incf	__soundCount& (0+255),w,b
  3226  002202  E102               	bnz	l8007
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 472: _soundCount = 0;
  3230  002204  6BD4               	clrf	__soundCount& (0+255),b
  3231  002206  D005               	goto	l8013
  3232  002208                     l8007:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 473: else
  3236                           ;main.c: 474: {
  3237                           ;main.c: 475: _eeSoundAddressesList = eeSoundCountAddress + 1;
  3238  002208  2812               	incf	InitFromEeprom@eeSoundCountAddress,w,c
  3239  00220A  6FCB               	movwf	__eeSoundAddressesList& (0+255),b
  3240                           
  3241                           ;main.c: 476: _eeFirstSoundAddress = _eeSoundAddressesList + _soundCount;
  3242  00220C  51CB               	movf	__eeSoundAddressesList& (0+255),w,b
  3243  00220E  25D4               	addwf	__soundCount& (0+255),w,b
  3244  002210  6FCA               	movwf	__eeFirstSoundAddress& (0+255),b
  3245  002212                     l8013:
  3246  002212  FFFF               	dw	65535	; assembler added errata NOP
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 481: }
  3250                           ;main.c: 482: }
  3251                           ;main.c: 483: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  3252  002214  51D4               	movf	__soundCount& (0+255),w,b
  3253  002216  6E10               	movwf	??_InitFromEeprom& (0+255),c
  3254  002218  5076               	movf	_eventCount,w,c
  3255  00221A  0101               	movlb	1	; () banked
  3256  00221C  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3257  00221E  C010  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3258                           
  3259                           ; BSR set to: 1
  3260                           ;main.c: 486: _eventFromCommand.IsFire = 0;
  3261  002222  0100               	movlb	0	; () banked
  3262  002224  6BA0               	clrf	__eventFromCommand& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 489: _currenDiaryEvent.NextEventTotalMinutes = 0;
  3266  002226  6A6A               	clrf	__currenDiaryEvent+2,c
  3267  002228  6A6B               	clrf	__currenDiaryEvent+3,c
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 490: _currenDiaryEvent.IsFire = 0;
  3271  00222A  6A68               	clrf	__currenDiaryEvent,c
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;main.c: 491: _currenDiaryEvent.FiredEventNum = 0xff;
  3275  00222C  6869               	setf	__currenDiaryEvent+1,c
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 492: _currenDiaryEvent.NextEventNum = 0xff;
  3279  00222E  6870               	setf	__currenDiaryEvent+8,c
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 494: LoadNextEvent();
  3283  002230  EC90  F00C         	call	_LoadNextEvent	;wreg free
  3284  002234                     l318:
  3285  002234  FFFF               	dw	65535	; assembler added errata NOP
  3286  002236  0012               	return		;funcret
  3287  002238  FFFF               	dw	65535	; errata NOP
  3288  00223A                     __end_of_InitFromEeprom:
  3289                           	opt stack 0
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           postinc0	equ	0xFEE
  3297                           wreg	equ	0xFE8
  3298                           postdec1	equ	0xFE5
  3299                           fsr1h	equ	0xFE2
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _SwitchOffAllLeds *****************
  3309 ;; Defined at:
  3310 ;;		line 312 in file "main.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  i               1    6[COMRAM] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3324 ;;      Params:         0       0       0       0       0       0       0
  3325 ;;      Locals:         1       0       0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0
  3327 ;;      Totals:         1       0       0       0       0       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    2
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_InitFromEeprom
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text14
  3339  002EEE                     __ptext14:
  3340                           	opt stack 0
  3341  002EEE                     _SwitchOffAllLeds:
  3342                           	opt stack 26
  3343                           
  3344                           ;incstack = 0
  3345  002EEE  FFFF               	dw	65535
  3346                           
  3347                           ;main.c: 314: for(uint8_t i = 0; i < 16 - 1; i++)
  3348  002EF0  6A07               	clrf	SwitchOffAllLeds@i,c
  3349  002EF2                     l6263:
  3350  002EF2  FFFF               	dw	65535	; assembler added errata NOP
  3351                           
  3352                           ;main.c: 315: {
  3353                           ;main.c: 316: ledStatuses[i] = 0;
  3354  002EF4  5007               	movf	SwitchOffAllLeds@i,w,c
  3355  002EF6  0F90               	addlw	low _ledStatuses
  3356  002EF8  6ED9               	movwf	fsr2l,c
  3357  002EFA  6ADA               	clrf	fsr2h,c
  3358  002EFC  6ADF               	clrf	indf2,c
  3359                           
  3360                           ;main.c: 317: ledBlink[i] = 0;
  3361  002EFE  5007               	movf	SwitchOffAllLeds@i,w,c
  3362  002F00  0F80               	addlw	low _ledBlink
  3363  002F02  6ED9               	movwf	fsr2l,c
  3364  002F04  6ADA               	clrf	fsr2h,c
  3365  002F06  6ADF               	clrf	indf2,c
  3366  002F08  2A07               	incf	SwitchOffAllLeds@i,f,c
  3367  002F0A  0E0E               	movlw	14
  3368  002F0C  6407               	cpfsgt	SwitchOffAllLeds@i,c
  3369  002F0E  D7F1               	goto	l6263
  3370  002F10  0C0E               	retlw	14	;funcret
  3371  002F12  FFFF               	dw	65535	; errata NOP
  3372  002F14                     __end_of_SwitchOffAllLeds:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodl	equ	0xFF3
  3379                           intcon	equ	0xFF2
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           postdec1	equ	0xFE5
  3383                           fsr1h	equ	0xFE2
  3384                           fsr1l	equ	0xFE1
  3385                           indf2	equ	0xFDF
  3386                           postinc2	equ	0xFDE
  3387                           postdec2	equ	0xFDD
  3388                           fsr2h	equ	0xFDA
  3389                           fsr2l	equ	0xFD9
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function _ShowFailure *****************
  3393 ;; Defined at:
  3394 ;;		line 429 in file "main.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  additionalLe    1    wreg     unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  additionalLe    1   14[COMRAM] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : F/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3408 ;;      Params:         0       0       0       0       0       0       0
  3409 ;;      Locals:         1       0       0       0       0       0       0
  3410 ;;      Temps:          0       0       0       0       0       0       0
  3411 ;;      Totals:         1       0       0       0       0       0       0
  3412 ;;Total ram usage:        1 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    3
  3415 ;; This function calls:
  3416 ;;		_LightLed
  3417 ;;		_LightStatusLed
  3418 ;; This function is called by:
  3419 ;;		_InitFromEeprom
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text15
  3424  002F60                     __ptext15:
  3425                           	opt stack 0
  3426  002F60                     _ShowFailure:
  3427                           	opt stack 25
  3428                           
  3429                           ;incstack = 0
  3430  002F60  FFFF               	dw	65535
  3431                           
  3432                           ;ShowFailure@additionalLed stored from wreg
  3433  002F62  6E0F               	movwf	ShowFailure@additionalLed,c
  3434                           
  3435                           ;main.c: 431: LightStatusLed(0x06, 1, 1);
  3436  002F64  0E01               	movlw	1
  3437  002F66  6E07               	movwf	LightStatusLed@on,c
  3438  002F68  6E08               	movwf	LightStatusLed@blink,c
  3439  002F6A  0E06               	movlw	6
  3440  002F6C  ECAA  F00E         	call	_LightStatusLed
  3441                           
  3442                           ;main.c: 432: LightLed(additionalLed, LED_RED, 1);
  3443  002F70  0E02               	movlw	2
  3444  002F72  6E07               	movwf	LightLed@ledState,c
  3445  002F74  0E01               	movlw	1
  3446  002F76  6E08               	movwf	LightLed@blink,c
  3447  002F78  500F               	movf	ShowFailure@additionalLed,w,c
  3448  002F7A  EFB5  F004         	goto	_LightLed
  3449  002F7E  FFFF               	dw	65535	; errata NOP
  3450  002F80                     __end_of_ShowFailure:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           fsr1h	equ	0xFE2
  3462                           fsr1l	equ	0xFE1
  3463                           indf2	equ	0xFDF
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _LightStatusLed *****************
  3471 ;; Defined at:
  3472 ;;		line 372 in file "main.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  row             1    wreg     unsigned char 
  3475 ;;  on              1    6[COMRAM] unsigned char 
  3476 ;;  blink           1    7[COMRAM] unsigned char 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  row             1   13[COMRAM] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/1
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3488 ;;      Params:         2       0       0       0       0       0       0
  3489 ;;      Locals:         1       0       0       0       0       0       0
  3490 ;;      Temps:          5       0       0       0       0       0       0
  3491 ;;      Totals:         8       0       0       0       0       0       0
  3492 ;;Total ram usage:        8 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    2
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_ShowFailure
  3499 ;;		_main
  3500 ;;		_CommandSetStatusLed
  3501 ;;		_io_poll
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text16
  3506  001D54                     __ptext16:
  3507                           	opt stack 0
  3508  001D54                     _LightStatusLed:
  3509                           	opt stack 25
  3510                           
  3511                           ;incstack = 0
  3512  001D54  FFFF               	dw	65535
  3513                           
  3514                           ;LightStatusLed@row stored from wreg
  3515  001D56  6E0E               	movwf	LightStatusLed@row,c
  3516                           
  3517                           ;main.c: 374: if(row > 7)
  3518  001D58  0E07               	movlw	7
  3519  001D5A  640E               	cpfsgt	LightStatusLed@row,c
  3520  001D5C  D001               	goto	l6023
  3521  001D5E  D072               	goto	l291
  3522  001D60                     l6023:
  3523  001D60  FFFF               	dw	65535	; assembler added errata NOP
  3524                           
  3525                           ;main.c: 376: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  3526  001D62  5007               	movf	LightStatusLed@on,w,c
  3527  001D64  E010               	bz	l6027
  3528  001D66  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3529  001D6A  0E01               	movlw	1
  3530  001D6C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3531  001D6E  2A09               	incf	??_LightStatusLed,f,c
  3532  001D70  D003               	goto	u5084
  3533  001D72                     u5085:
  3534  001D72  FFFF               	dw	65535	; assembler added errata NOP
  3535  001D74  90D8               	bcf	status,0,c
  3536  001D76  360A               	rlcf	??_LightStatusLed+1,f,c
  3537  001D78                     u5084:
  3538  001D78  FFFF               	dw	65535	; assembler added errata NOP
  3539  001D7A  2E09               	decfsz	??_LightStatusLed,f,c
  3540  001D7C  D7FA               	goto	u5085
  3541  001D7E  500A               	movf	??_LightStatusLed+1,w,c
  3542  001D80  0100               	movlb	0	; () banked
  3543  001D82  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  3544  001D84  D00F               	goto	l6029
  3545  001D86                     l6027:
  3546  001D86  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3547  001D8A  0E01               	movlw	1
  3548  001D8C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3549  001D8E  2A09               	incf	??_LightStatusLed,f,c
  3550  001D90  D003               	goto	u5094
  3551  001D92                     u5095:
  3552  001D92  FFFF               	dw	65535	; assembler added errata NOP
  3553  001D94  90D8               	bcf	status,0,c
  3554  001D96  360A               	rlcf	??_LightStatusLed+1,f,c
  3555  001D98                     u5094:
  3556  001D98  FFFF               	dw	65535	; assembler added errata NOP
  3557  001D9A  2E09               	decfsz	??_LightStatusLed,f,c
  3558  001D9C  D7FA               	goto	u5095
  3559  001D9E  1C0A               	comf	??_LightStatusLed+1,w,c
  3560  001DA0  0100               	movlb	0	; () banked
  3561  001DA2  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  3562  001DA4                     l6029:
  3563  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;main.c: 377: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  3567  001DA6  5008               	movf	LightStatusLed@blink,w,c
  3568  001DA8  E010               	bz	l6033
  3569                           
  3570                           ; BSR set to: 0
  3571  001DAA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3572  001DAE  0E01               	movlw	1
  3573  001DB0  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3574  001DB2  2A09               	incf	??_LightStatusLed,f,c
  3575  001DB4  D003               	goto	u5114
  3576  001DB6                     u5115:
  3577  001DB6  FFFF               	dw	65535	; assembler added errata NOP
  3578  001DB8  90D8               	bcf	status,0,c
  3579  001DBA  360A               	rlcf	??_LightStatusLed+1,f,c
  3580  001DBC                     u5114:
  3581  001DBC  FFFF               	dw	65535	; assembler added errata NOP
  3582  001DBE  2E09               	decfsz	??_LightStatusLed,f,c
  3583  001DC0  D7FA               	goto	u5115
  3584  001DC2  500A               	movf	??_LightStatusLed+1,w,c
  3585  001DC4  0100               	movlb	0	; () banked
  3586  001DC6  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  3587  001DC8  D00F               	goto	l6035
  3588  001DCA                     l6033:
  3589                           
  3590                           ; BSR set to: 0
  3591  001DCA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3592  001DCE  0E01               	movlw	1
  3593  001DD0  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3594  001DD2  2A09               	incf	??_LightStatusLed,f,c
  3595  001DD4  D003               	goto	u5124
  3596  001DD6                     u5125:
  3597  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  3598  001DD8  90D8               	bcf	status,0,c
  3599  001DDA  360A               	rlcf	??_LightStatusLed+1,f,c
  3600  001DDC                     u5124:
  3601  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  3602  001DDE  2E09               	decfsz	??_LightStatusLed,f,c
  3603  001DE0  D7FA               	goto	u5125
  3604  001DE2  1C0A               	comf	??_LightStatusLed+1,w,c
  3605  001DE4  0100               	movlb	0	; () banked
  3606  001DE6  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  3607  001DE8                     l6035:
  3608  001DE8  FFFF               	dw	65535	; assembler added errata NOP
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;main.c: 378: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  3612  001DEA  5007               	movf	LightStatusLed@on,w,c
  3613  001DEC  E014               	bz	l6039
  3614                           
  3615                           ; BSR set to: 0
  3616  001DEE  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3617  001DF2  0E01               	movlw	1
  3618  001DF4  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3619  001DF6  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3620  001DF8  2A09               	incf	??_LightStatusLed,f,c
  3621  001DFA  D004               	goto	u5144
  3622  001DFC                     u5145:
  3623  001DFC  FFFF               	dw	65535	; assembler added errata NOP
  3624  001DFE  90D8               	bcf	status,0,c
  3625  001E00  360A               	rlcf	??_LightStatusLed+1,f,c
  3626  001E02  360B               	rlcf	??_LightStatusLed+2,f,c
  3627  001E04                     u5144:
  3628  001E04  FFFF               	dw	65535	; assembler added errata NOP
  3629  001E06  2E09               	decfsz	??_LightStatusLed,f,c
  3630  001E08  D7F9               	goto	u5145
  3631  001E0A  500A               	movf	??_LightStatusLed+1,w,c
  3632  001E0C  0100               	movlb	0	; () banked
  3633  001E0E  13DD               	iorwf	__MODBUSCoils& (0+255),f,b
  3634  001E10  500B               	movf	??_LightStatusLed+2,w,c
  3635  001E12  13DE               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  3636  001E14  D017               	goto	l291
  3637  001E16                     l6039:
  3638                           
  3639                           ; BSR set to: 0
  3640  001E16  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3641  001E1A  0E01               	movlw	1
  3642  001E1C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3643  001E1E  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3644  001E20  2A09               	incf	??_LightStatusLed,f,c
  3645  001E22  D004               	goto	u5154
  3646  001E24                     u5155:
  3647  001E24  FFFF               	dw	65535	; assembler added errata NOP
  3648  001E26  90D8               	bcf	status,0,c
  3649  001E28  360A               	rlcf	??_LightStatusLed+1,f,c
  3650  001E2A  360B               	rlcf	??_LightStatusLed+2,f,c
  3651  001E2C                     u5154:
  3652  001E2C  FFFF               	dw	65535	; assembler added errata NOP
  3653  001E2E  2E09               	decfsz	??_LightStatusLed,f,c
  3654  001E30  D7F9               	goto	u5155
  3655  001E32  1C0A               	comf	??_LightStatusLed+1,w,c
  3656  001E34  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  3657  001E36  1C0B               	comf	??_LightStatusLed+2,w,c
  3658  001E38  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  3659  001E3A  500C               	movf	??_LightStatusLed+3,w,c
  3660  001E3C  0100               	movlb	0	; () banked
  3661  001E3E  17DD               	andwf	__MODBUSCoils& (0+255),f,b
  3662  001E40  500D               	movf	??_LightStatusLed+4,w,c
  3663  001E42  17DE               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  3664  001E44                     l291:
  3665  001E44  FFFF               	dw	65535	; assembler added errata NOP
  3666  001E46  0012               	return		;funcret
  3667  001E48  FFFF               	dw	65535	; errata NOP
  3668  001E4A                     __end_of_LightStatusLed:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodl	equ	0xFF3
  3675                           intcon	equ	0xFF2
  3676                           postinc0	equ	0xFEE
  3677                           wreg	equ	0xFE8
  3678                           postdec1	equ	0xFE5
  3679                           fsr1h	equ	0xFE2
  3680                           fsr1l	equ	0xFE1
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _Modbus *****************
  3689 ;; Defined at:
  3690 ;;		line 228 in file "ModbusRtu.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  u8id            1    wreg     unsigned char 
  3693 ;;  u8serno         1   11[COMRAM] unsigned char 
  3694 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  u8id            1   13[COMRAM] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : F/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3706 ;;      Params:         2       0       0       0       0       0       0
  3707 ;;      Locals:         1       0       0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0
  3709 ;;      Totals:         3       0       0       0       0       0       0
  3710 ;;Total ram usage:        3 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    3
  3713 ;; This function calls:
  3714 ;;		_ModbusInit
  3715 ;; This function is called by:
  3716 ;;		_InitFromEeprom
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text17
  3721  003024                     __ptext17:
  3722                           	opt stack 0
  3723  003024                     _Modbus:
  3724                           	opt stack 25
  3725                           
  3726                           ;incstack = 0
  3727  003024  FFFF               	dw	65535
  3728                           
  3729                           ;Modbus@u8id stored from wreg
  3730  003026  6E0E               	movwf	Modbus@u8id,c
  3731                           
  3732                           ;ModbusRtu.c: 230: ModbusInit(u8id, u8serno, u8txenpin);
  3733  003028  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  3734  00302C  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3735  003030  500E               	movf	Modbus@u8id,w,c
  3736  003032  EFDF  F017         	goto	_ModbusInit
  3737                           
  3738                           ; BSR set to: 0
  3739  003036  FFFF               	dw	65535	; errata NOP
  3740  003038                     __end_of_Modbus:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodl	equ	0xFF3
  3747                           intcon	equ	0xFF2
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           postdec1	equ	0xFE5
  3751                           fsr1h	equ	0xFE2
  3752                           fsr1l	equ	0xFE1
  3753                           indf2	equ	0xFDF
  3754                           postinc2	equ	0xFDE
  3755                           postdec2	equ	0xFDD
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760 ;; *************** function _ModbusInit *****************
  3761 ;; Defined at:
  3762 ;;		line 572 in file "ModbusRtu.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  u8id            1    wreg     unsigned char 
  3765 ;;  u8serno         1    6[COMRAM] unsigned char 
  3766 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  u8id            1   10[COMRAM] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : F/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3778 ;;      Params:         2       0       0       0       0       0       0
  3779 ;;      Locals:         3       0       0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0       0       0
  3781 ;;      Totals:         5       0       0       0       0       0       0
  3782 ;;Total ram usage:        5 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    2
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_Modbus
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text18
  3793  002FBE                     __ptext18:
  3794                           	opt stack 0
  3795  002FBE                     _ModbusInit:
  3796                           	opt stack 25
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;incstack = 0
  3800  002FBE  FFFF               	dw	65535
  3801                           
  3802                           ;ModbusInit@u8id stored from wreg
  3803  002FC0  6E0B               	movwf	ModbusInit@u8id,c
  3804                           
  3805                           ;ModbusRtu.c: 575: if(1)
  3806  002FC2  0100               	movlb	0	; () banked
  3807  002FC4  6BC9               	clrf	__deviceStatus& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;ModbusRtu.c: 576: ((_deviceStatus) |= ((unsigned short)1 << (1)));
  3811  002FC6  83C9               	bsf	__deviceStatus& (0+255),1,b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;ModbusRtu.c: 577: _u8id = u8id;
  3815  002FC8  C00B  F0D5         	movff	ModbusInit@u8id,__u8id
  3816                           
  3817                           ;ModbusRtu.c: 578: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3818  002FCC  0E04               	movlw	4
  3819  002FCE  6007               	cpfslt	ModbusInit@u8serno,c
  3820  002FD0  D000               	goto	l807
  3821  002FD2                     l807:
  3822  002FD2  FFFF               	dw	65535	; assembler added errata NOP
  3823                           
  3824                           ; BSR set to: 0
  3825  002FD4  0012               	return		;funcret
  3826  002FD6  FFFF               	dw	65535	; errata NOP
  3827  002FD8                     __end_of_ModbusInit:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           postinc0	equ	0xFEE
  3836                           wreg	equ	0xFE8
  3837                           postdec1	equ	0xFE5
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _getHourMin *****************
  3848 ;; Defined at:
  3849 ;;		line 256 in file "interrupts.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  hour            2    6[COMRAM] PTR unsigned char 
  3852 ;;		 -> main@hour(1), 
  3853 ;;  min             2    8[COMRAM] PTR unsigned char 
  3854 ;;		 -> main@minute(1), 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      unsigned char 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3861 ;; Tracked objects:
  3862 ;;		On entry : F/1
  3863 ;;		On exit  : F/1
  3864 ;;		Unchanged: F/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         4       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0
  3869 ;;      Totals:         4       0       0       0       0       0       0
  3870 ;;Total ram usage:        4 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    2
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text19
  3881  002F14                     __ptext19:
  3882                           	opt stack 0
  3883  002F14                     _getHourMin:
  3884                           	opt stack 28
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;incstack = 0
  3888  002F14  FFFF               	dw	65535
  3889                           
  3890                           ; BSR set to: 1
  3891                           ;interrupts.c: 258: if(globalHours == 0xFF)
  3892  002F16  2878               	incf	_globalHours,w,c	;volatile
  3893  002F18  E00E               	bz	l109
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  3897  002F1A  9EF2               	bcf	intcon,7,c	;volatile
  3898                           
  3899                           ; BSR set to: 1
  3900                           ;interrupts.c: 261: *hour = globalHours;
  3901  002F1C  C007  FFD9         	movff	getHourMin@hour,fsr2l
  3902  002F20  C008  FFDA         	movff	getHourMin@hour+1,fsr2h
  3903  002F24  C078  FFDF         	movff	_globalHours,indf2	;volatile
  3904                           
  3905                           ;interrupts.c: 262: *min = globalMinutes;
  3906  002F28  C009  FFD9         	movff	getHourMin@min,fsr2l
  3907  002F2C  C00A  FFDA         	movff	getHourMin@min+1,fsr2h
  3908  002F30  C077  FFDF         	movff	_globalMinutes,indf2	;volatile
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  3912  002F34  8EF2               	bsf	intcon,7,c	;volatile
  3913  002F36                     l109:
  3914                           
  3915                           ; BSR set to: 1
  3916  002F36  0012               	return		;funcret
  3917  002F38  FFFF               	dw	65535	; errata NOP
  3918  002F3A                     __end_of_getHourMin:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _SwitchOffAllDiaryLeds *****************
  3939 ;; Defined at:
  3940 ;;		line 364 in file "main.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  i               1   14[COMRAM] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : F/1
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3954 ;;      Params:         0       0       0       0       0       0       0
  3955 ;;      Locals:         1       0       0       0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0
  3957 ;;      Totals:         1       0       0       0       0       0       0
  3958 ;;Total ram usage:        1 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    3
  3961 ;; This function calls:
  3962 ;;		_LightLed
  3963 ;; This function is called by:
  3964 ;;		_main
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text20
  3969  002E9A                     __ptext20:
  3970                           	opt stack 0
  3971  002E9A                     _SwitchOffAllDiaryLeds:
  3972                           	opt stack 27
  3973                           
  3974                           ; BSR set to: 1
  3975                           ;incstack = 0
  3976  002E9A  FFFF               	dw	65535
  3977                           
  3978                           ; BSR set to: 1
  3979                           ;main.c: 366: for(uint8_t i = 60 - _maxDiaryEvents + 1; i <= 60; i++)
  3980  002E9C  5072               	movf	__maxDiaryEvents,w,c
  3981  002E9E  083D               	sublw	61
  3982  002EA0  6E0F               	movwf	SwitchOffAllDiaryLeds@i,c
  3983  002EA2  FFFF               	dw	65535	; assembler added errata NOP
  3984  002EA4  0E3C               	movlw	60
  3985  002EA6  640F               	cpfsgt	SwitchOffAllDiaryLeds@i,c
  3986  002EA8  D001               	goto	l7283
  3987  002EAA  D009               	goto	l287
  3988  002EAC                     l7283:
  3989  002EAC  FFFF               	dw	65535	; assembler added errata NOP
  3990                           
  3991                           ;main.c: 367: {
  3992                           ;main.c: 368: LightLed(i, LED_OFF, 0);
  3993  002EAE  0E00               	movlw	0
  3994  002EB0  6E07               	movwf	LightLed@ledState,c
  3995  002EB2  6E08               	movwf	LightLed@blink,c
  3996  002EB4  500F               	movf	SwitchOffAllDiaryLeds@i,w,c
  3997  002EB6  ECB5  F004         	call	_LightLed
  3998  002EBA  2A0F               	incf	SwitchOffAllDiaryLeds@i,f,c
  3999  002EBC  D7F2               	goto	L1
  4000  002EBE                     l287:
  4001  002EBE  FFFF               	dw	65535	; assembler added errata NOP
  4002  002EC0  0012               	return		;funcret
  4003  002EC2  FFFF               	dw	65535	; errata NOP
  4004  002EC4                     __end_of_SwitchOffAllDiaryLeds:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1h	equ	0xFE2
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _ResetEventFromCommand *****************
  4025 ;; Defined at:
  4026 ;;		line 688 in file "main.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  state           1    wreg     unsigned char 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  state           1   14[COMRAM] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : F/0
  4037 ;;		On exit  : F/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4040 ;;      Params:         0       0       0       0       0       0       0
  4041 ;;      Locals:         3       0       0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0
  4043 ;;      Totals:         3       0       0       0       0       0       0
  4044 ;;Total ram usage:        3 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    3
  4047 ;; This function calls:
  4048 ;;		_LightLed
  4049 ;;		_StopPlaying
  4050 ;; This function is called by:
  4051 ;;		_main
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text21
  4056  002C98                     __ptext21:
  4057                           	opt stack 0
  4058  002C98                     _ResetEventFromCommand:
  4059                           	opt stack 27
  4060                           
  4061                           ;incstack = 0
  4062  002C98  FFFF               	dw	65535
  4063                           
  4064                           ;ResetEventFromCommand@state stored from wreg
  4065  002C9A  6E0F               	movwf	ResetEventFromCommand@state,c
  4066                           
  4067                           ;main.c: 690: if(!_eventFromCommand.IsFire)
  4068  002C9C  0100               	movlb	0	; () banked
  4069  002C9E  51A0               	movf	__eventFromCommand& (0+255),w,b
  4070  002CA0  E01A               	bz	l413
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;main.c: 692: LightLed(_eventFromCommand.LedNum, state ? LED_GREEN : LED_RED, 0);
  4074  002CA2  500F               	movf	ResetEventFromCommand@state,w,c
  4075  002CA4  E104               	bnz	l7493
  4076                           
  4077                           ; BSR set to: 0
  4078  002CA6  0E00               	movlw	0
  4079  002CA8  6E11               	movwf	_ResetEventFromCommand$916+1,c
  4080  002CAA  0E02               	movlw	2
  4081  002CAC  D003               	goto	L2
  4082  002CAE                     l7493:
  4083                           
  4084                           ; BSR set to: 0
  4085  002CAE  0E00               	movlw	0
  4086  002CB0  6E11               	movwf	_ResetEventFromCommand$916+1,c
  4087  002CB2  0E01               	movlw	1
  4088  002CB4                     L2:
  4089  002CB4  FFFF               	dw	65535	; assembler added errata NOP
  4090  002CB6  6E10               	movwf	_ResetEventFromCommand$916,c
  4091                           
  4092                           ; BSR set to: 0
  4093  002CB8  C010  F007         	movff	_ResetEventFromCommand$916,LightLed@ledState
  4094  002CBC  0E00               	movlw	0
  4095  002CBE  6E08               	movwf	LightLed@blink,c
  4096  002CC0  51A1               	movf	(__eventFromCommand+1)& (0+255),w,b
  4097  002CC2  ECB5  F004         	call	_LightLed
  4098                           
  4099                           ;main.c: 693: _eventFromCommand.IsFire = 0;
  4100  002CC6  0100               	movlb	0	; () banked
  4101  002CC8  6BA0               	clrf	__eventFromCommand& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;main.c: 694: _eventFromCommand.ResetSecond = 0;
  4105  002CCA  6BA2               	clrf	(__eventFromCommand+2)& (0+255),b
  4106  002CCC  6BA3               	clrf	(__eventFromCommand+3)& (0+255),b
  4107  002CCE  6BA4               	clrf	(__eventFromCommand+4)& (0+255),b
  4108  002CD0  6BA5               	clrf	(__eventFromCommand+5)& (0+255),b
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;main.c: 695: StopPlaying();
  4112  002CD2  EC2D  F018         	call	_StopPlaying	;wreg free
  4113  002CD6                     l413:
  4114                           
  4115                           ; BSR set to: 0
  4116  002CD6  0012               	return		;funcret
  4117  002CD8  FFFF               	dw	65535	; errata NOP
  4118  002CDA                     __end_of_ResetEventFromCommand:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138 ;; *************** function _ResetEvent *****************
  4139 ;; Defined at:
  4140 ;;		line 674 in file "main.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  state           1    wreg     unsigned char 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  state           1   16[COMRAM] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : F/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4154 ;;      Params:         0       0       0       0       0       0       0
  4155 ;;      Locals:         3       0       0       0       0       0       0
  4156 ;;      Temps:          2       0       0       0       0       0       0
  4157 ;;      Totals:         5       0       0       0       0       0       0
  4158 ;;Total ram usage:        5 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    3
  4161 ;; This function calls:
  4162 ;;		_GetCurrentEventDiodeNum
  4163 ;;		_LightLed
  4164 ;;		_StopPlaying
  4165 ;; This function is called by:
  4166 ;;		_main
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text22
  4171  002B34                     __ptext22:
  4172                           	opt stack 0
  4173  002B34                     _ResetEvent:
  4174                           	opt stack 27
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;incstack = 0
  4178  002B34  FFFF               	dw	65535
  4179                           
  4180                           ;ResetEvent@state stored from wreg
  4181  002B36  6E11               	movwf	ResetEvent@state,c
  4182                           
  4183                           ;main.c: 676: if(!_currenDiaryEvent.IsFire)
  4184  002B38  5068               	movf	__currenDiaryEvent,w,c
  4185  002B3A  E01F               	bz	l405
  4186                           
  4187                           ;main.c: 678: LightLed(GetCurrentEventDiodeNum(), state ? LED_GREEN : LED_RED, 0);
  4188  002B3C  5011               	movf	ResetEvent@state,w,c
  4189  002B3E  E103               	bnz	l7471
  4190  002B40  6A13               	clrf	_ResetEvent$913+1,c
  4191  002B42  0E02               	movlw	2
  4192  002B44  D002               	goto	L3
  4193  002B46                     l7471:
  4194  002B46  6A13               	clrf	_ResetEvent$913+1,c
  4195  002B48  0E01               	movlw	1
  4196  002B4A                     L3:
  4197  002B4A  FFFF               	dw	65535	; assembler added errata NOP
  4198  002B4C  6E12               	movwf	_ResetEvent$913,c
  4199  002B4E  C012  F007         	movff	_ResetEvent$913,LightLed@ledState
  4200  002B52  6A08               	clrf	LightLed@blink,c
  4201  002B54  EC42  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  4202  002B58  ECB5  F004         	call	_LightLed
  4203                           
  4204                           ;main.c: 679: _currenDiaryEvent.IsFire = 0;
  4205  002B5C  6A68               	clrf	__currenDiaryEvent,c
  4206                           
  4207                           ;main.c: 680: _currenDiaryEvent.FiredEventNum = 0xff;
  4208  002B5E  6869               	setf	__currenDiaryEvent+1,c
  4209                           
  4210                           ;main.c: 681: _currenDiaryEvent.ResetSecond = 0;
  4211  002B60  6A6C               	clrf	__currenDiaryEvent+4,c
  4212  002B62  6A6D               	clrf	__currenDiaryEvent+5,c
  4213  002B64  6A6E               	clrf	__currenDiaryEvent+6,c
  4214  002B66  6A6F               	clrf	__currenDiaryEvent+7,c
  4215                           
  4216                           ;main.c: 682: StopPlaying();
  4217  002B68  EC2D  F018         	call	_StopPlaying	;wreg free
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 683: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  4221  002B6C  5069               	movf	__currenDiaryEvent+1,w,c
  4222  002B6E  6E0F               	movwf	??_ResetEvent& (0+255),c
  4223  002B70  5070               	movf	__currenDiaryEvent+8,w,c
  4224  002B72  0101               	movlb	1	; () banked
  4225  002B74  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4226  002B76  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4227  002B7A                     l405:
  4228  002B7A  0012               	return		;funcret
  4229  002B7C  FFFF               	dw	65535	; errata NOP
  4230  002B7E                     __end_of_ResetEvent:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           postdec1	equ	0xFE5
  4241                           fsr1h	equ	0xFE2
  4242                           fsr1l	equ	0xFE1
  4243                           indf2	equ	0xFDF
  4244                           postinc2	equ	0xFDE
  4245                           postdec2	equ	0xFDD
  4246                           fsr2h	equ	0xFDA
  4247                           fsr2l	equ	0xFD9
  4248                           status	equ	0xFD8
  4249                           
  4250 ;; *************** function _ProcessLightBlock *****************
  4251 ;; Defined at:
  4252 ;;		line 519 in file "main.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  curMs           2    7[COMRAM] PTR unsigned long 
  4255 ;;		 -> main@curMs(4), 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/1
  4264 ;;		On exit  : F/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4267 ;;      Params:         2       0       0       0       0       0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0
  4269 ;;      Temps:          4       0       0       0       0       0       0
  4270 ;;      Totals:         6       0       0       0       0       0       0
  4271 ;;Total ram usage:        6 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    3
  4274 ;; This function calls:
  4275 ;;		_UpdateLedRegister
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text23
  4282  00116E                     __ptext23:
  4283                           	opt stack 0
  4284  00116E                     _ProcessLightBlock:
  4285                           	opt stack 27
  4286                           
  4287                           ;incstack = 0
  4288  00116E  FFFF               	dw	65535
  4289                           
  4290                           ;main.c: 521: diffTime = *curMs - oldBlinkOnTime;
  4291  001170  C008  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4292  001174  C009  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4293  001178  CFDE F00A          	movff	postinc2,??_ProcessLightBlock
  4294  00117C  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+1
  4295  001180  CFDE F00C          	movff	postinc2,??_ProcessLightBlock+2
  4296  001184  CFDE F00D          	movff	postinc2,??_ProcessLightBlock+3
  4297  001188  0100               	movlb	0	; () banked
  4298  00118A  51B6               	movf	_oldBlinkOnTime& (0+255),w,b
  4299  00118C  5C0A               	subwf	??_ProcessLightBlock,w,c
  4300  00118E  6FAE               	movwf	_diffTime& (0+255),b
  4301  001190  51B7               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4302  001192  580B               	subwfb	??_ProcessLightBlock+1,w,c
  4303  001194  6FAF               	movwf	(_diffTime+1)& (0+255),b
  4304  001196  51B8               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4305  001198  580C               	subwfb	??_ProcessLightBlock+2,w,c
  4306  00119A  6FB0               	movwf	(_diffTime+2)& (0+255),b
  4307  00119C  51B9               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4308  00119E  580D               	subwfb	??_ProcessLightBlock+3,w,c
  4309  0011A0  6FB1               	movwf	(_diffTime+3)& (0+255),b
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;main.c: 522: if(diffTime > 576)
  4313  0011A2  51B1               	movf	(_diffTime+3)& (0+255),w,b
  4314  0011A4  11B0               	iorwf	(_diffTime+2)& (0+255),w,b
  4315  0011A6  E105               	bnz	u6990
  4316  0011A8  0E41               	movlw	65
  4317  0011AA  5DAE               	subwf	_diffTime& (0+255),w,b
  4318  0011AC  0E02               	movlw	2
  4319  0011AE  59AF               	subwfb	(_diffTime+1)& (0+255),w,b
  4320  0011B0  E30F               	bnc	l8035
  4321  0011B2                     u6990:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;main.c: 523: {
  4325                           ;main.c: 524: blinkOn = 1;
  4326  0011B2  0E01               	movlw	1
  4327  0011B4  6E75               	movwf	_blinkOn,c
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;main.c: 525: oldBlinkOnTime = *curMs;
  4331  0011B6  C008  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4332  0011BA  C009  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4333  0011BE  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime
  4334  0011C2  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+1
  4335  0011C6  CFDE F0B8          	movff	postinc2,_oldBlinkOnTime+2
  4336  0011CA  CFDE F0B9          	movff	postinc2,_oldBlinkOnTime+3
  4337                           
  4338                           ;main.c: 526: }
  4339  0011CE  D0EA               	goto	l8187
  4340  0011D0                     l8035:
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;main.c: 527: else if(blinkOn && diffTime > 384)
  4344  0011D0  5075               	movf	_blinkOn,w,c
  4345  0011D2  E101 D0E7          	bz	l8187
  4346                           
  4347                           ; BSR set to: 0
  4348  0011D6  51B1               	movf	(_diffTime+3)& (0+255),w,b
  4349  0011D8  11B0               	iorwf	(_diffTime+2)& (0+255),w,b
  4350  0011DA  E106               	bnz	u7010
  4351  0011DC  0E81               	movlw	129
  4352  0011DE  5DAE               	subwf	_diffTime& (0+255),w,b
  4353  0011E0  0E01               	movlw	1
  4354  0011E2  59AF               	subwfb	(_diffTime+1)& (0+255),w,b
  4355  0011E4  E201 D0DE          	bnc	l8187
  4356  0011E8                     u7010:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;main.c: 528: {
  4360                           ;main.c: 529: blinkOn = 0;
  4361  0011E8  6A75               	clrf	_blinkOn,c
  4362  0011EA  D0DC               	goto	l8187
  4363  0011EC                     l8041:
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;main.c: 537: LATA &= 0xF0;
  4367  0011EC  0EF0               	movlw	240
  4368  0011EE  1689               	andwf	3977,f,c	;volatile
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;main.c: 538: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4372  0011F0  5075               	movf	_blinkOn,w,c
  4373  0011F2  E003               	bz	l8047
  4374                           
  4375                           ; BSR set to: 0
  4376  0011F4  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4377  0011F8  D003               	goto	l8049
  4378  0011FA                     l8047:
  4379                           
  4380                           ; BSR set to: 0
  4381  0011FA  5190               	movf	_ledStatuses& (0+255),w,b
  4382  0011FC  1980               	xorwf	_ledBlink& (0+255),w,b
  4383  0011FE  6E8A               	movwf	3978,c	;volatile
  4384  001200                     l8049:
  4385  001200  FFFF               	dw	65535	; assembler added errata NOP
  4386                           
  4387                           ; BSR set to: 0
  4388  001202  0E00               	movlw	0
  4389  001204  ECE3  F015         	call	_UpdateLedRegister
  4390                           
  4391                           ;main.c: 539: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4392  001208  5075               	movf	_blinkOn,w,c
  4393  00120A  E003               	bz	l8055
  4394  00120C  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4395  001210  D004               	goto	l8057
  4396  001212                     l8055:
  4397  001212  0100               	movlb	0	; () banked
  4398  001214  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  4399  001216  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  4400  001218  6E8A               	movwf	3978,c	;volatile
  4401  00121A                     l8057:
  4402  00121A  FFFF               	dw	65535	; assembler added errata NOP
  4403  00121C  0E01               	movlw	1
  4404  00121E  ECE3  F015         	call	_UpdateLedRegister
  4405                           
  4406                           ;main.c: 540: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  4407  001222  5075               	movf	_blinkOn,w,c
  4408  001224  E003               	bz	l8063
  4409  001226  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  4410  00122A  D004               	goto	l8065
  4411  00122C                     l8063:
  4412  00122C  0100               	movlb	0	; () banked
  4413  00122E  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  4414  001230  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  4415  001232  6E8A               	movwf	3978,c	;volatile
  4416  001234                     l8065:
  4417  001234  FFFF               	dw	65535	; assembler added errata NOP
  4418  001236  0E02               	movlw	2
  4419  001238  ECE3  F015         	call	_UpdateLedRegister
  4420                           
  4421                           ;main.c: 541: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  4422  00123C  5075               	movf	_blinkOn,w,c
  4423  00123E  E003               	bz	l8071
  4424  001240  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  4425  001244  D004               	goto	l8073
  4426  001246                     l8071:
  4427  001246  0100               	movlb	0	; () banked
  4428  001248  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  4429  00124A  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  4430  00124C  6E8A               	movwf	3978,c	;volatile
  4431  00124E                     l8073:
  4432  00124E  FFFF               	dw	65535	; assembler added errata NOP
  4433  001250  0E03               	movlw	3
  4434  001252  ECE3  F015         	call	_UpdateLedRegister
  4435                           
  4436                           ;main.c: 542: LATAbits.LATA0 = 1;
  4437  001256  8089               	bsf	3977,0,c	;volatile
  4438                           
  4439                           ;main.c: 543: break;
  4440  001258  D0B0               	goto	l8189
  4441  00125A                     l8077:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;main.c: 545: LATA &= 0xF0;
  4445  00125A  0EF0               	movlw	240
  4446  00125C  1689               	andwf	3977,f,c	;volatile
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;main.c: 546: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  4450  00125E  5075               	movf	_blinkOn,w,c
  4451  001260  E003               	bz	l8083
  4452                           
  4453                           ; BSR set to: 0
  4454  001262  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  4455  001266  D003               	goto	l8085
  4456  001268                     l8083:
  4457                           
  4458                           ; BSR set to: 0
  4459  001268  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  4460  00126A  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  4461  00126C  6E8A               	movwf	3978,c	;volatile
  4462  00126E                     l8085:
  4463  00126E  FFFF               	dw	65535	; assembler added errata NOP
  4464                           
  4465                           ; BSR set to: 0
  4466  001270  0E00               	movlw	0
  4467  001272  ECE3  F015         	call	_UpdateLedRegister
  4468                           
  4469                           ;main.c: 547: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  4470  001276  5075               	movf	_blinkOn,w,c
  4471  001278  E003               	bz	l8091
  4472  00127A  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  4473  00127E  D004               	goto	l8093
  4474  001280                     l8091:
  4475  001280  0100               	movlb	0	; () banked
  4476  001282  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  4477  001284  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  4478  001286  6E8A               	movwf	3978,c	;volatile
  4479  001288                     l8093:
  4480  001288  FFFF               	dw	65535	; assembler added errata NOP
  4481  00128A  0E01               	movlw	1
  4482  00128C  ECE3  F015         	call	_UpdateLedRegister
  4483                           
  4484                           ;main.c: 548: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  4485  001290  5075               	movf	_blinkOn,w,c
  4486  001292  E003               	bz	l8099
  4487  001294  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  4488  001298  D004               	goto	l8101
  4489  00129A                     l8099:
  4490  00129A  0100               	movlb	0	; () banked
  4491  00129C  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  4492  00129E  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  4493  0012A0  6E8A               	movwf	3978,c	;volatile
  4494  0012A2                     l8101:
  4495  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  4496  0012A4  0E02               	movlw	2
  4497  0012A6  ECE3  F015         	call	_UpdateLedRegister
  4498                           
  4499                           ;main.c: 549: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  4500  0012AA  5075               	movf	_blinkOn,w,c
  4501  0012AC  E003               	bz	l8107
  4502  0012AE  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  4503  0012B2  D004               	goto	l8109
  4504  0012B4                     l8107:
  4505  0012B4  0100               	movlb	0	; () banked
  4506  0012B6  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  4507  0012B8  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  4508  0012BA  6E8A               	movwf	3978,c	;volatile
  4509  0012BC                     l8109:
  4510  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  4511  0012BE  0E03               	movlw	3
  4512  0012C0  ECE3  F015         	call	_UpdateLedRegister
  4513                           
  4514                           ;main.c: 550: LATAbits.LATA1 = 1;
  4515  0012C4  8289               	bsf	3977,1,c	;volatile
  4516                           
  4517                           ;main.c: 551: break;
  4518  0012C6  D079               	goto	l8189
  4519  0012C8                     l8113:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;main.c: 553: LATA &= 0xF0;
  4523  0012C8  0EF0               	movlw	240
  4524  0012CA  1689               	andwf	3977,f,c	;volatile
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;main.c: 554: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  4528  0012CC  5075               	movf	_blinkOn,w,c
  4529  0012CE  E003               	bz	l8119
  4530                           
  4531                           ; BSR set to: 0
  4532  0012D0  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  4533  0012D4  D003               	goto	l8121
  4534  0012D6                     l8119:
  4535                           
  4536                           ; BSR set to: 0
  4537  0012D6  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  4538  0012D8  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  4539  0012DA  6E8A               	movwf	3978,c	;volatile
  4540  0012DC                     l8121:
  4541  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  4542                           
  4543                           ; BSR set to: 0
  4544  0012DE  0E00               	movlw	0
  4545  0012E0  ECE3  F015         	call	_UpdateLedRegister
  4546                           
  4547                           ;main.c: 555: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  4548  0012E4  5075               	movf	_blinkOn,w,c
  4549  0012E6  E003               	bz	l8127
  4550  0012E8  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  4551  0012EC  D004               	goto	l8129
  4552  0012EE                     l8127:
  4553  0012EE  0100               	movlb	0	; () banked
  4554  0012F0  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  4555  0012F2  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  4556  0012F4  6E8A               	movwf	3978,c	;volatile
  4557  0012F6                     l8129:
  4558  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  4559  0012F8  0E01               	movlw	1
  4560  0012FA  ECE3  F015         	call	_UpdateLedRegister
  4561                           
  4562                           ;main.c: 556: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  4563  0012FE  5075               	movf	_blinkOn,w,c
  4564  001300  E003               	bz	l8135
  4565  001302  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  4566  001306  D004               	goto	l8137
  4567  001308                     l8135:
  4568  001308  0100               	movlb	0	; () banked
  4569  00130A  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  4570  00130C  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  4571  00130E  6E8A               	movwf	3978,c	;volatile
  4572  001310                     l8137:
  4573  001310  FFFF               	dw	65535	; assembler added errata NOP
  4574  001312  0E02               	movlw	2
  4575  001314  ECE3  F015         	call	_UpdateLedRegister
  4576                           
  4577                           ;main.c: 557: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  4578  001318  5075               	movf	_blinkOn,w,c
  4579  00131A  E003               	bz	l8143
  4580  00131C  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  4581  001320  D004               	goto	l8145
  4582  001322                     l8143:
  4583  001322  0100               	movlb	0	; () banked
  4584  001324  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  4585  001326  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  4586  001328  6E8A               	movwf	3978,c	;volatile
  4587  00132A                     l8145:
  4588  00132A  FFFF               	dw	65535	; assembler added errata NOP
  4589  00132C  0E03               	movlw	3
  4590  00132E  ECE3  F015         	call	_UpdateLedRegister
  4591                           
  4592                           ;main.c: 558: LATAbits.LATA2 = 1;
  4593  001332  8489               	bsf	3977,2,c	;volatile
  4594                           
  4595                           ;main.c: 559: break;
  4596  001334  D042               	goto	l8189
  4597  001336                     l8149:
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;main.c: 561: LATA &= 0xF0;
  4601  001336  0EF0               	movlw	240
  4602  001338  1689               	andwf	3977,f,c	;volatile
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;main.c: 562: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  4606  00133A  5075               	movf	_blinkOn,w,c
  4607  00133C  E003               	bz	l8155
  4608                           
  4609                           ; BSR set to: 0
  4610  00133E  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  4611  001342  D003               	goto	l8157
  4612  001344                     l8155:
  4613                           
  4614                           ; BSR set to: 0
  4615  001344  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  4616  001346  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  4617  001348  6E8A               	movwf	3978,c	;volatile
  4618  00134A                     l8157:
  4619  00134A  FFFF               	dw	65535	; assembler added errata NOP
  4620                           
  4621                           ; BSR set to: 0
  4622  00134C  0E00               	movlw	0
  4623  00134E  ECE3  F015         	call	_UpdateLedRegister
  4624                           
  4625                           ;main.c: 563: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  4626  001352  5075               	movf	_blinkOn,w,c
  4627  001354  E003               	bz	l8163
  4628  001356  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  4629  00135A  D004               	goto	l8165
  4630  00135C                     l8163:
  4631  00135C  0100               	movlb	0	; () banked
  4632  00135E  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  4633  001360  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  4634  001362  6E8A               	movwf	3978,c	;volatile
  4635  001364                     l8165:
  4636  001364  FFFF               	dw	65535	; assembler added errata NOP
  4637  001366  0E01               	movlw	1
  4638  001368  ECE3  F015         	call	_UpdateLedRegister
  4639                           
  4640                           ;main.c: 564: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  4641  00136C  5075               	movf	_blinkOn,w,c
  4642  00136E  E003               	bz	l8171
  4643  001370  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  4644  001374  D004               	goto	l8173
  4645  001376                     l8171:
  4646  001376  0100               	movlb	0	; () banked
  4647  001378  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  4648  00137A  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  4649  00137C  6E8A               	movwf	3978,c	;volatile
  4650  00137E                     l8173:
  4651  00137E  FFFF               	dw	65535	; assembler added errata NOP
  4652  001380  0E02               	movlw	2
  4653  001382  ECE3  F015         	call	_UpdateLedRegister
  4654                           
  4655                           ;main.c: 565: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  4656  001386  5075               	movf	_blinkOn,w,c
  4657  001388  E003               	bz	l8179
  4658  00138A  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  4659  00138E  D004               	goto	l8181
  4660  001390                     l8179:
  4661  001390  0100               	movlb	0	; () banked
  4662  001392  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  4663  001394  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  4664  001396  6E8A               	movwf	3978,c	;volatile
  4665  001398                     l8181:
  4666  001398  FFFF               	dw	65535	; assembler added errata NOP
  4667  00139A  0E03               	movlw	3
  4668  00139C  ECE3  F015         	call	_UpdateLedRegister
  4669                           
  4670                           ;main.c: 566: LATAbits.LATA3 = 1;
  4671  0013A0  8689               	bsf	3977,3,c	;volatile
  4672                           
  4673                           ;main.c: 567: break;
  4674  0013A2  D00B               	goto	l8189
  4675  0013A4                     l8187:
  4676  0013A4  FFFF               	dw	65535	; assembler added errata NOP
  4677                           
  4678                           ; BSR set to: 0
  4679  0013A6  51D7               	movf	_currentLedBlock& (0+255),w,b
  4680                           
  4681                           ; Switch size 1, requested type "speed"
  4682                           ; Number of cases is 4, Range of values is 0 to 3
  4683                           ; switch strategies available:
  4684                           ; Name         Instructions Cycles
  4685                           ; simple_byte           13     7 (average)
  4686                           ;	Chosen strategy is simple_byte
  4687  0013A8  E101 D720          	bz	l8041
  4688  0013AC  0A01               	xorlw	1	; case 1
  4689  0013AE  E101 D754          	bz	l8077
  4690  0013B2  0A03               	xorlw	3	; case 2
  4691  0013B4  E089               	bz	l8113
  4692  0013B6  0A01               	xorlw	1	; case 3
  4693  0013B8  E0BE               	bz	l8149
  4694  0013BA                     l8189:
  4695  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  4696                           
  4697                           ;main.c: 570: currentLedBlock++;
  4698  0013BC  0100               	movlb	0	; () banked
  4699  0013BE  2BD7               	incf	_currentLedBlock& (0+255),f,b
  4700                           
  4701                           ;main.c: 573: currentLedBlock &= 0xFB;
  4702  0013C0  95D7               	bcf	_currentLedBlock& (0+255),2,b
  4703                           
  4704                           ; BSR set to: 0
  4705  0013C2  0012               	return		;funcret
  4706  0013C4  FFFF               	dw	65535	; errata NOP
  4707  0013C6                     __end_of_ProcessLightBlock:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           fsr2h	equ	0xFDA
  4724                           fsr2l	equ	0xFD9
  4725                           status	equ	0xFD8
  4726                           
  4727 ;; *************** function _UpdateLedRegister *****************
  4728 ;; Defined at:
  4729 ;;		line 280 in file "main.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  regIndex        1    wreg     unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  regIndex        1    6[COMRAM] unsigned char 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4743 ;;      Params:         0       0       0       0       0       0       0
  4744 ;;      Locals:         1       0       0       0       0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0
  4746 ;;      Totals:         1       0       0       0       0       0       0
  4747 ;;Total ram usage:        1 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    2
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_ProcessLightBlock
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text24
  4758  002BC6                     __ptext24:
  4759                           	opt stack 0
  4760  002BC6                     _UpdateLedRegister:
  4761                           	opt stack 27
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;incstack = 0
  4765  002BC6  FFFF               	dw	65535
  4766                           
  4767                           ;UpdateLedRegister@regIndex stored from wreg
  4768  002BC8  6E07               	movwf	UpdateLedRegister@regIndex,c
  4769                           
  4770                           ;main.c: 282: switch(regIndex)
  4771  002BCA  D014               	goto	l6465
  4772  002BCC                     l244:
  4773                           
  4774                           ;main.c: 285: LATAbits.LATA4 = 0;
  4775  002BCC  9889               	bcf	3977,4,c	;volatile
  4776                           
  4777                           ;main.c: 286: TRISAbits.RA4 = 0;
  4778  002BCE  9892               	bcf	3986,4,c	;volatile
  4779                           
  4780                           ;main.c: 287: LATAbits.LATA4 = 1;
  4781  002BD0  8889               	bsf	3977,4,c	;volatile
  4782                           
  4783                           ;main.c: 288: TRISAbits.RA4 = 1;
  4784  002BD2  8892               	bsf	3986,4,c	;volatile
  4785                           
  4786                           ;main.c: 289: break;
  4787  002BD4  D018               	goto	l249
  4788  002BD6                     l246:
  4789                           
  4790                           ;main.c: 291: LATCbits.LATC3 = 0;
  4791  002BD6  968B               	bcf	3979,3,c	;volatile
  4792                           
  4793                           ;main.c: 292: TRISCbits.RC3 = 0;
  4794  002BD8  9694               	bcf	3988,3,c	;volatile
  4795                           
  4796                           ;main.c: 293: LATCbits.LATC3 = 1;
  4797  002BDA  868B               	bsf	3979,3,c	;volatile
  4798                           
  4799                           ;main.c: 294: TRISCbits.RC3 = 1;
  4800  002BDC  8694               	bsf	3988,3,c	;volatile
  4801                           
  4802                           ;main.c: 295: break;
  4803  002BDE  D013               	goto	l249
  4804  002BE0                     l247:
  4805                           
  4806                           ;main.c: 297: LATCbits.LATC0 = 0;
  4807  002BE0  908B               	bcf	3979,0,c	;volatile
  4808                           
  4809                           ;main.c: 298: TRISCbits.RC0 = 0;
  4810  002BE2  9094               	bcf	3988,0,c	;volatile
  4811                           
  4812                           ;main.c: 299: LATCbits.LATC0 = 1;
  4813  002BE4  808B               	bsf	3979,0,c	;volatile
  4814                           
  4815                           ;main.c: 300: TRISCbits.RC0 = 1;
  4816  002BE6  8094               	bsf	3988,0,c	;volatile
  4817                           
  4818                           ;main.c: 301: break;
  4819  002BE8  D00E               	goto	l249
  4820  002BEA                     l248:
  4821                           
  4822                           ;main.c: 303: LATCbits.LATC1 = 0;
  4823  002BEA  928B               	bcf	3979,1,c	;volatile
  4824                           
  4825                           ;main.c: 304: TRISCbits.RC1 = 0;
  4826  002BEC  9294               	bcf	3988,1,c	;volatile
  4827                           
  4828                           ;main.c: 305: LATCbits.LATC1 = 1;
  4829  002BEE  828B               	bsf	3979,1,c	;volatile
  4830                           
  4831                           ;main.c: 306: TRISCbits.RC1 = 1;
  4832  002BF0  8294               	bsf	3988,1,c	;volatile
  4833                           
  4834                           ;main.c: 307: break;
  4835  002BF2  D009               	goto	l249
  4836  002BF4                     l6465:
  4837  002BF4  FFFF               	dw	65535	; assembler added errata NOP
  4838  002BF6  5007               	movf	UpdateLedRegister@regIndex,w,c
  4839                           
  4840                           ; Switch size 1, requested type "speed"
  4841                           ; Number of cases is 4, Range of values is 0 to 3
  4842                           ; switch strategies available:
  4843                           ; Name         Instructions Cycles
  4844                           ; simple_byte           13     7 (average)
  4845                           ;	Chosen strategy is simple_byte
  4846  002BF8  E0E9               	bz	l244
  4847  002BFA  0A01               	xorlw	1	; case 1
  4848  002BFC  E0EC               	bz	l246
  4849  002BFE  0A03               	xorlw	3	; case 2
  4850  002C00  E0EF               	bz	l247
  4851  002C02  0A01               	xorlw	1	; case 3
  4852  002C04  E0F2               	bz	l248
  4853  002C06                     l249:
  4854  002C06  FFFF               	dw	65535	; assembler added errata NOP
  4855  002C08  0012               	return		;funcret
  4856  002C0A  FFFF               	dw	65535	; errata NOP
  4857  002C0C                     __end_of_UpdateLedRegister:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodl	equ	0xFF3
  4864                           intcon	equ	0xFF2
  4865                           postinc0	equ	0xFEE
  4866                           wreg	equ	0xFE8
  4867                           postdec1	equ	0xFE5
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function _ProcessDiary *****************
  4878 ;; Defined at:
  4879 ;;		line 768 in file "main.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  totalMinutes    2   34[COMRAM] unsigned int 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : F/1
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4893 ;;      Params:         0       0       0       0       0       0       0
  4894 ;;      Locals:         2       0       0       0       0       0       0
  4895 ;;      Temps:          4       0       0       0       0       0       0
  4896 ;;      Totals:         6       0       0       0       0       0       0
  4897 ;;Total ram usage:        6 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    5
  4900 ;; This function calls:
  4901 ;;		_GetCurrentEventDiodeNum
  4902 ;;		_GetTime
  4903 ;;		_LightLed
  4904 ;;		_LoadNextEvent
  4905 ;;		_PlaySound
  4906 ;;		_getTotalMinutes
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text25
  4913  00239C                     __ptext25:
  4914                           	opt stack 0
  4915  00239C                     _ProcessDiary:
  4916                           	opt stack 25
  4917                           
  4918                           ;incstack = 0
  4919  00239C  FFFF               	dw	65535
  4920                           
  4921                           ; BSR set to: 1
  4922                           ;main.c: 771: if(_currenDiaryEvent.NextEventNum == 0xff)
  4923  00239E  2870               	incf	__currenDiaryEvent+8,w,c
  4924  0023A0  E04E               	bz	l440
  4925                           
  4926                           ; BSR set to: 1
  4927                           ;main.c: 773: uint16_t totalMinutes;
  4928                           ;main.c: 777: if(!getTotalMinutes(&totalMinutes))
  4929  0023A2  0E23               	movlw	low ProcessDiary@totalMinutes
  4930  0023A4  6E07               	movwf	getTotalMinutes@totalMinutes,c
  4931  0023A6  6A08               	clrf	getTotalMinutes@totalMinutes+1,c
  4932  0023A8  EC9D  F017         	call	_getTotalMinutes	;wreg free
  4933  0023AC  0900               	iorlw	0
  4934  0023AE  E047               	bz	l440
  4935                           
  4936                           ;main.c: 781: if(_currenDiaryEvent.NextEventTotalMinutes == totalMinutes)
  4937  0023B0  5023               	movf	ProcessDiary@totalMinutes,w,c
  4938  0023B2  186A               	xorwf	__currenDiaryEvent+2,w,c
  4939  0023B4  E144               	bnz	l440
  4940  0023B6  5024               	movf	ProcessDiary@totalMinutes+1,w,c
  4941  0023B8  186B               	xorwf	__currenDiaryEvent+3,w,c
  4942  0023BA  E141               	bnz	l440
  4943                           
  4944                           ;main.c: 782: {
  4945                           ;main.c: 784: if(_currenDiaryEvent.IsFire)
  4946  0023BC  5068               	movf	__currenDiaryEvent,w,c
  4947  0023BE  E007               	bz	l8205
  4948                           
  4949                           ;main.c: 785: {
  4950                           ;main.c: 786: LightLed(GetCurrentEventDiodeNum(), LED_RED, 0);
  4951  0023C0  0E02               	movlw	2
  4952  0023C2  6E07               	movwf	LightLed@ledState,c
  4953  0023C4  6A08               	clrf	LightLed@blink,c
  4954  0023C6  EC42  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  4955  0023CA  ECB5  F004         	call	_LightLed
  4956  0023CE                     l8205:
  4957                           
  4958                           ;main.c: 787: }
  4959                           ;main.c: 789: {
  4960                           ;main.c: 790: _currenDiaryEvent.FiredEventNum = _currenDiaryEvent.NextEventNum;
  4961  0023CE  C070  F069         	movff	__currenDiaryEvent+8,__currenDiaryEvent+1
  4962                           
  4963                           ;main.c: 791: _currenDiaryEvent.IsFire = 1;
  4964  0023D2  0E01               	movlw	1
  4965  0023D4  6E68               	movwf	__currenDiaryEvent,c
  4966                           
  4967                           ;main.c: 793: LightLed(GetCurrentEventDiodeNum(), LED_ORANGE, 1);
  4968  0023D6  0E03               	movlw	3
  4969  0023D8  6E07               	movwf	LightLed@ledState,c
  4970  0023DA  0E01               	movlw	1
  4971  0023DC  6E08               	movwf	LightLed@blink,c
  4972  0023DE  EC42  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  4973  0023E2  ECB5  F004         	call	_LightLed
  4974                           
  4975                           ;main.c: 794: if(_nextEventSoundId != 0)
  4976  0023E6  0100               	movlb	0	; () banked
  4977  0023E8  51D1               	movf	__nextEventSoundId& (0+255),w,b
  4978  0023EA  E007               	bz	l8213
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;main.c: 795: {
  4982                           ;main.c: 796: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  4983  0023EC  C0C2  F017         	movff	__nextEventPlayDuration,PlaySound@playDuration
  4984  0023F0  C0C3  F018         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  4985  0023F4  05D1               	decf	__nextEventSoundId& (0+255),w,b
  4986  0023F6  EC95  F00F         	call	_PlaySound
  4987  0023FA                     l8213:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;main.c: 797: }
  4991                           ;main.c: 806: _currenDiaryEvent.ResetSecond = *GetTime() + eventAcceptTime;
  4992  0023FA  EC65  F018         	call	_GetTime	;wreg free
  4993  0023FE  6ED9               	movwf	fsr2l,c
  4994  002400  6ADA               	clrf	fsr2h,c
  4995  002402  CFDE F01F          	movff	postinc2,??_ProcessDiary
  4996  002406  CFDE F020          	movff	postinc2,??_ProcessDiary+1
  4997  00240A  CFDE F021          	movff	postinc2,??_ProcessDiary+2
  4998  00240E  CFDE F022          	movff	postinc2,??_ProcessDiary+3
  4999  002412  0100               	movlb	0	; () banked
  5000  002414  51D8               	movf	_eventAcceptTime& (0+255),w,b
  5001  002416  241F               	addwf	??_ProcessDiary,w,c
  5002  002418  6E6C               	movwf	__currenDiaryEvent+4,c
  5003  00241A  0E00               	movlw	0
  5004  00241C  2020               	addwfc	??_ProcessDiary+1,w,c
  5005  00241E  6E6D               	movwf	__currenDiaryEvent+5,c
  5006  002420  0E00               	movlw	0
  5007  002422  2021               	addwfc	??_ProcessDiary+2,w,c
  5008  002424  6E6E               	movwf	__currenDiaryEvent+6,c
  5009  002426  0E00               	movlw	0
  5010  002428  2022               	addwfc	??_ProcessDiary+3,w,c
  5011  00242A  6E6F               	movwf	__currenDiaryEvent+7,c
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 808: LoadNextEvent();
  5015  00242C  EC90  F00C         	call	_LoadNextEvent	;wreg free
  5016                           
  5017                           ;main.c: 809: }
  5018                           ;main.c: 810: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5019  002430  5069               	movf	__currenDiaryEvent+1,w,c
  5020  002432  6E1F               	movwf	??_ProcessDiary& (0+255),c
  5021  002434  5070               	movf	__currenDiaryEvent+8,w,c
  5022  002436  0101               	movlb	1	; () banked
  5023  002438  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5024  00243A  C01F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5025  00243E                     l440:
  5026  00243E  0012               	return		;funcret
  5027  002440  FFFF               	dw	65535	; errata NOP
  5028  002442                     __end_of_ProcessDiary:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodl	equ	0xFF3
  5035                           intcon	equ	0xFF2
  5036                           postinc0	equ	0xFEE
  5037                           wreg	equ	0xFE8
  5038                           postdec1	equ	0xFE5
  5039                           fsr1h	equ	0xFE2
  5040                           fsr1l	equ	0xFE1
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           
  5048 ;; *************** function _PlaySound *****************
  5049 ;; Defined at:
  5050 ;;		line 639 in file "main.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  soundId         1    wreg     unsigned char 
  5053 ;;  playDuration    2   22[COMRAM] unsigned int 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  soundId         1   28[COMRAM] unsigned char 
  5056 ;;  soundAddr       1   29[COMRAM] unsigned char 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      unsigned char 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : F/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5066 ;;      Params:         2       0       0       0       0       0       0
  5067 ;;      Locals:         2       0       0       0       0       0       0
  5068 ;;      Temps:          4       0       0       0       0       0       0
  5069 ;;      Totals:         8       0       0       0       0       0       0
  5070 ;;Total ram usage:        8 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    4
  5073 ;; This function calls:
  5074 ;;		_GetTime
  5075 ;;		_SoundPlayNextStep
  5076 ;; This function is called by:
  5077 ;;		_ProcessDiary
  5078 ;;		_CommandSetLed
  5079 ;;		_CommandSetStatusLed
  5080 ;;		_ProcessUserCommands
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text26
  5085  001F2A                     __ptext26:
  5086                           	opt stack 0
  5087  001F2A                     _PlaySound:
  5088                           	opt stack 24
  5089                           
  5090                           ;incstack = 0
  5091  001F2A  FFFF               	dw	65535
  5092                           
  5093                           ;PlaySound@soundId stored from wreg
  5094  001F2C  6E1D               	movwf	PlaySound@soundId,c
  5095                           
  5096                           ;main.c: 641: if(soundId >= _soundCount)
  5097  001F2E  0100               	movlb	0	; () banked
  5098  001F30  51D4               	movf	__soundCount& (0+255),w,b
  5099  001F32  5C1D               	subwf	PlaySound@soundId,w,c
  5100  001F34  E260               	bc	l395
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;main.c: 644: if(playDuration == 0)
  5104  001F36  5017               	movf	PlaySound@playDuration,w,c
  5105  001F38  1018               	iorwf	PlaySound@playDuration+1,w,c
  5106  001F3A  E105               	bnz	l6049
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;main.c: 645: soundTestEnd = 0;
  5110  001F3C  6BBA               	clrf	_soundTestEnd& (0+255),b
  5111  001F3E  6BBB               	clrf	(_soundTestEnd+1)& (0+255),b
  5112  001F40  6BBC               	clrf	(_soundTestEnd+2)& (0+255),b
  5113  001F42  6BBD               	clrf	(_soundTestEnd+3)& (0+255),b
  5114  001F44  D022               	goto	l6055
  5115  001F46                     l6049:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 646: else if(playDuration == 65535)
  5119  001F46  2817               	incf	PlaySound@playDuration,w,c
  5120  001F48  E107               	bnz	l6053
  5121  001F4A  2818               	incf	PlaySound@playDuration+1,w,c
  5122  001F4C  E105               	bnz	l6053
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;main.c: 647: soundTestEnd = 4294967295;
  5126  001F4E  69BA               	setf	_soundTestEnd& (0+255),b
  5127  001F50  69BB               	setf	(_soundTestEnd+1)& (0+255),b
  5128  001F52  69BC               	setf	(_soundTestEnd+2)& (0+255),b
  5129  001F54  69BD               	setf	(_soundTestEnd+3)& (0+255),b
  5130  001F56  D019               	goto	l6055
  5131  001F58                     l6053:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;main.c: 648: else
  5135                           ;main.c: 649: soundTestEnd = *GetTime() + playDuration;
  5136  001F58  EC65  F018         	call	_GetTime	;wreg free
  5137  001F5C  6ED9               	movwf	fsr2l,c
  5138  001F5E  6ADA               	clrf	fsr2h,c
  5139  001F60  CFDE F019          	movff	postinc2,??_PlaySound
  5140  001F64  CFDE F01A          	movff	postinc2,??_PlaySound+1
  5141  001F68  CFDE F01B          	movff	postinc2,??_PlaySound+2
  5142  001F6C  CFDE F01C          	movff	postinc2,??_PlaySound+3
  5143  001F70  5017               	movf	PlaySound@playDuration,w,c
  5144  001F72  2419               	addwf	??_PlaySound,w,c
  5145  001F74  0100               	movlb	0	; () banked
  5146  001F76  6FBA               	movwf	_soundTestEnd& (0+255),b
  5147  001F78  5018               	movf	PlaySound@playDuration+1,w,c
  5148  001F7A  201A               	addwfc	??_PlaySound+1,w,c
  5149  001F7C  6FBB               	movwf	(_soundTestEnd+1)& (0+255),b
  5150  001F7E  0E00               	movlw	0
  5151  001F80  201B               	addwfc	??_PlaySound+2,w,c
  5152  001F82  6FBC               	movwf	(_soundTestEnd+2)& (0+255),b
  5153  001F84  0E00               	movlw	0
  5154  001F86  201C               	addwfc	??_PlaySound+3,w,c
  5155  001F88  6FBD               	movwf	(_soundTestEnd+3)& (0+255),b
  5156  001F8A                     l6055:
  5157  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;main.c: 651: uint8_t soundAddr = ( EEADR = _eeSoundAddressesList + soundId, (void)0, RD
      +                           = 1, EEDATA);
  5161  001F8C  51CB               	movf	__eeSoundAddressesList& (0+255),w,b
  5162  001F8E  241D               	addwf	PlaySound@soundId,w,c
  5163  001F90  6EA9               	movwf	4009,c	;volatile
  5164                           
  5165                           ; BSR set to: 0
  5166  001F92  80A6               	bsf	4006,0,c	;volatile
  5167                           
  5168                           ; BSR set to: 0
  5169  001F94  CFA8 F01E          	movff	4008,PlaySound@soundAddr	;volatile
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;main.c: 652: if(_eeFirstSoundAddress + soundAddr >= 256)
  5173  001F98  501E               	movf	PlaySound@soundAddr,w,c
  5174  001F9A  C0CA  F019         	movff	__eeFirstSoundAddress,??_PlaySound
  5175  001F9E  6A1A               	clrf	(??_PlaySound+1)& (0+255),c
  5176  001FA0  2619               	addwf	??_PlaySound,f,c
  5177  001FA2  0E00               	movlw	0
  5178  001FA4  221A               	addwfc	??_PlaySound+1,f,c
  5179  001FA6  BE1A               	btfsc	??_PlaySound+1,7,c
  5180  001FA8  D002               	goto	l6065
  5181  001FAA  041A               	decf	??_PlaySound+1,w,c
  5182  001FAC  E224               	bc	l395
  5183  001FAE                     l6065:
  5184  001FAE  FFFF               	dw	65535	; assembler added errata NOP
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;main.c: 655: _playingSoundSteps = ( EEADR = _eeFirstSoundAddress + soundAddr, (void)0, 
      +                          RD = 1, EEDATA);
  5188  001FB0  51CA               	movf	__eeFirstSoundAddress& (0+255),w,b
  5189  001FB2  241E               	addwf	PlaySound@soundAddr,w,c
  5190  001FB4  6EA9               	movwf	4009,c	;volatile
  5191                           
  5192                           ; BSR set to: 0
  5193  001FB6  80A6               	bsf	4006,0,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196  001FB8  CFA8 F0D3          	movff	4008,__playingSoundSteps	;volatile
  5197                           
  5198                           ;main.c: 657: _playingSoundStartPosInEe = _eeFirstSoundAddress + soundAddr + 1;
  5199  001FBC  51CA               	movf	__eeFirstSoundAddress& (0+255),w,b
  5200  001FBE  241E               	addwf	PlaySound@soundAddr,w,c
  5201  001FC0  6E19               	movwf	??_PlaySound& (0+255),c
  5202  001FC2  2819               	incf	??_PlaySound,w,c
  5203  001FC4  6E73               	movwf	__playingSoundStartPosInEe,c
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;main.c: 658: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5207  001FC6  51D3               	movf	__playingSoundSteps& (0+255),w,b
  5208  001FC8  6E19               	movwf	??_PlaySound& (0+255),c
  5209  001FCA  5073               	movf	__playingSoundStartPosInEe,w,c
  5210  001FCC  0101               	movlb	1	; () banked
  5211  001FCE  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5212  001FD0  C019  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5213                           
  5214                           ; BSR set to: 1
  5215                           ;main.c: 659: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5216  001FD4  0100               	movlb	0	; () banked
  5217  001FD6  51D3               	movf	__playingSoundSteps& (0+255),w,b
  5218  001FD8  0D03               	mullw	3
  5219  001FDA  5073               	movf	__playingSoundStartPosInEe,w,c
  5220  001FDC  26F3               	addwf	prodl,f,c
  5221  001FDE  0E00               	movlw	0
  5222  001FE0  22F4               	addwfc	prodh,f,c
  5223  001FE2  BEF4               	btfsc	prodh,7,c
  5224  001FE4  D002               	goto	l401
  5225  001FE6  04F4               	decf	prodh,w,c
  5226  001FE8  E206               	bc	l395
  5227  001FEA                     l401:
  5228  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;main.c: 662: _playingSoundCurPos = 0;
  5232  001FEC  6BD2               	clrf	__playingSoundCurPos& (0+255),b
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;main.c: 663: _isSoundPlaying = 1;
  5236  001FEE  0E01               	movlw	1
  5237  001FF0  6FCF               	movwf	__isSoundPlaying& (0+255),b
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;main.c: 664: SoundPlayNextStep();
  5241  001FF2  EC62  F010         	call	_SoundPlayNextStep	;wreg free
  5242  001FF6                     l395:
  5243                           
  5244                           ; BSR set to: 0
  5245  001FF6  0012               	return		;funcret
  5246  001FF8  FFFF               	dw	65535	; errata NOP
  5247  001FFA                     __end_of_PlaySound:
  5248                           	opt stack 0
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           intcon	equ	0xFF2
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           postdec1	equ	0xFE5
  5259                           fsr1h	equ	0xFE2
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           postdec2	equ	0xFDD
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function _SoundPlayNextStep *****************
  5269 ;; Defined at:
  5270 ;;		line 594 in file "main.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  stepDuty        2   19[COMRAM] unsigned int 
  5275 ;;  duration        1   21[COMRAM] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  1    wreg      void 
  5278 ;; Registers used:
  5279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : E/1
  5282 ;;		On exit  : F/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5285 ;;      Params:         0       0       0       0       0       0       0
  5286 ;;      Locals:         3       0       0       0       0       0       0
  5287 ;;      Temps:          5       0       0       0       0       0       0
  5288 ;;      Totals:         8       0       0       0       0       0       0
  5289 ;;Total ram usage:        8 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    3
  5292 ;; This function calls:
  5293 ;;		_GetTime
  5294 ;;		_SetBuzzerDuty
  5295 ;;		_StopPlaying
  5296 ;;		_millis
  5297 ;; This function is called by:
  5298 ;;		_PlaySound
  5299 ;;		_main
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text27
  5304  0020C4                     __ptext27:
  5305                           	opt stack 0
  5306  0020C4                     _SoundPlayNextStep:
  5307                           	opt stack 24
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;incstack = 0
  5311  0020C4  FFFF               	dw	65535
  5312                           
  5313                           ;main.c: 596: if(_playingSoundCurPos >= _playingSoundSteps)
  5314  0020C6  0100               	movlb	0	; () banked
  5315  0020C8  51D3               	movf	__playingSoundSteps& (0+255),w,b
  5316  0020CA  5DD2               	subwf	__playingSoundCurPos& (0+255),w,b
  5317  0020CC  E316               	bnc	l5891
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;main.c: 597: {
  5321                           ;main.c: 598: _playingSoundCurPos = 0;
  5322  0020CE  6BD2               	clrf	__playingSoundCurPos& (0+255),b
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;main.c: 599: if(*GetTime() >= soundTestEnd)
  5326  0020D0  EC65  F018         	call	_GetTime	;wreg free
  5327  0020D4  6ED9               	movwf	fsr2l,c
  5328  0020D6  6ADA               	clrf	fsr2h,c
  5329  0020D8  0100               	movlb	0	; () banked
  5330  0020DA  51BA               	movf	_soundTestEnd& (0+255),w,b
  5331  0020DC  5CDE               	subwf	postinc2,w,c
  5332  0020DE  51BB               	movf	(_soundTestEnd+1)& (0+255),w,b
  5333  0020E0  58DE               	subwfb	postinc2,w,c
  5334  0020E2  51BC               	movf	(_soundTestEnd+2)& (0+255),w,b
  5335  0020E4  58DE               	subwfb	postinc2,w,c
  5336  0020E6  50DE               	movf	postinc2,w,c
  5337  0020E8  0A80               	xorlw	128
  5338  0020EA  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  5339  0020EC  51BD               	movf	(_soundTestEnd+3)& (0+255),w,b
  5340  0020EE  0A80               	xorlw	128
  5341  0020F0  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  5342  0020F2  E303               	bnc	l5891
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;main.c: 600: {
  5346                           ;main.c: 601: StopPlaying();
  5347  0020F4  EC2D  F018         	call	_StopPlaying	;wreg free
  5348  0020F8  D041               	goto	l388
  5349  0020FA                     l5891:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;main.c: 603: }
  5353                           ;main.c: 604: }
  5354                           ;main.c: 605: uint16_t stepDuty = ( EEADR = _playingSoundStartPosInEe + _playingSoundCur
      +                          Pos * 3, (void)0, RD = 1, EEDATA);
  5355  0020FA  51D2               	movf	__playingSoundCurPos& (0+255),w,b
  5356  0020FC  0D03               	mullw	3
  5357  0020FE  50F3               	movf	prodl,w,c
  5358  002100  2473               	addwf	__playingSoundStartPosInEe,w,c
  5359  002102  6EA9               	movwf	4009,c	;volatile
  5360                           
  5361                           ; BSR set to: 0
  5362  002104  80A6               	bsf	4006,0,c	;volatile
  5363                           
  5364                           ; BSR set to: 0
  5365  002106  CFA8 F014          	movff	4008,SoundPlayNextStep@stepDuty	;volatile
  5366  00210A  6A15               	clrf	SoundPlayNextStep@stepDuty+1,c
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;main.c: 606: stepDuty <<= 6;
  5370  00210C  0E06               	movlw	6
  5371  00210E                     u4735:
  5372  00210E  FFFF               	dw	65535	; assembler added errata NOP
  5373  002110  90D8               	bcf	status,0,c
  5374  002112  3614               	rlcf	SoundPlayNextStep@stepDuty,f,c
  5375  002114  3615               	rlcf	SoundPlayNextStep@stepDuty+1,f,c
  5376  002116  2EE8               	decfsz	wreg,f,c
  5377  002118  D7FA               	goto	u4735
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;main.c: 607: _playingEndMs = millis() + stepDuty;
  5381  00211A  EC62  F017         	call	_millis	;wreg free
  5382  00211E  5014               	movf	SoundPlayNextStep@stepDuty,w,c
  5383  002120  2407               	addwf	?_millis,w,c
  5384  002122  0100               	movlb	0	; () banked
  5385  002124  6FA6               	movwf	__playingEndMs& (0+255),b
  5386  002126  5015               	movf	SoundPlayNextStep@stepDuty+1,w,c
  5387  002128  2008               	addwfc	?_millis+1,w,c
  5388  00212A  6FA7               	movwf	(__playingEndMs+1)& (0+255),b
  5389  00212C  0E00               	movlw	0
  5390  00212E  2009               	addwfc	?_millis+2,w,c
  5391  002130  6FA8               	movwf	(__playingEndMs+2)& (0+255),b
  5392  002132  0E00               	movlw	0
  5393  002134  200A               	addwfc	?_millis+3,w,c
  5394  002136  6FA9               	movwf	(__playingEndMs+3)& (0+255),b
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;main.c: 608: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  5398  002138  51D2               	movf	__playingSoundCurPos& (0+255),w,b
  5399  00213A  0D03               	mullw	3
  5400  00213C  50F3               	movf	prodl,w,c
  5401  00213E  2473               	addwf	__playingSoundStartPosInEe,w,c
  5402  002140  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  5403  002142  280F               	incf	??_SoundPlayNextStep,w,c
  5404  002144  6EA9               	movwf	4009,c	;volatile
  5405                           
  5406                           ; BSR set to: 0
  5407  002146  80A6               	bsf	4006,0,c	;volatile
  5408                           
  5409                           ; BSR set to: 0
  5410  002148  CFA8 FFCB          	movff	4008,4043	;volatile
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;main.c: 609: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  5414  00214C  51D2               	movf	__playingSoundCurPos& (0+255),w,b
  5415  00214E  0D03               	mullw	3
  5416  002150  50F3               	movf	prodl,w,c
  5417  002152  2473               	addwf	__playingSoundStartPosInEe,w,c
  5418  002154  0F02               	addlw	2
  5419  002156  6EA9               	movwf	4009,c	;volatile
  5420                           
  5421                           ; BSR set to: 0
  5422  002158  80A6               	bsf	4006,0,c	;volatile
  5423                           
  5424                           ; BSR set to: 0
  5425  00215A  CFA8 F016          	movff	4008,SoundPlayNextStep@duration	;volatile
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;main.c: 610: _playingSoundCurPos++;
  5429  00215E  2BD2               	incf	__playingSoundCurPos& (0+255),f,b
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;main.c: 611: if(duration == 0 || PR2 == 0)
  5433  002160  5016               	movf	SoundPlayNextStep@duration,w,c
  5434  002162  E002               	bz	l391
  5435                           
  5436                           ; BSR set to: 0
  5437  002164  50CB               	movf	4043,w,c	;volatile
  5438  002166  E103               	bnz	l5919
  5439  002168                     l391:
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;main.c: 612: {
  5443                           ;main.c: 613: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5444  002168  94CA               	bcf	4042,2,c	;volatile
  5445  00216A  8494               	bsf	3988,2,c	;volatile
  5446                           
  5447                           ;main.c: 614: return;
  5448  00216C  D007               	goto	l388
  5449  00216E                     l5919:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;main.c: 615: }
  5453                           ;main.c: 616: SetBuzzerDuty(duration);
  5454  00216E  C016  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  5455  002172  6A08               	clrf	SetBuzzerDuty@dc+1,c
  5456  002174  EC1E  F017         	call	_SetBuzzerDuty	;wreg free
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;main.c: 617: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  5460  002178  9494               	bcf	3988,2,c	;volatile
  5461                           
  5462                           ; BSR set to: 0
  5463  00217A  84CA               	bsf	4042,2,c	;volatile
  5464  00217C                     l388:
  5465  00217C  FFFF               	dw	65535	; assembler added errata NOP
  5466                           
  5467                           ; BSR set to: 0
  5468  00217E  0012               	return		;funcret
  5469  002180  FFFF               	dw	65535	; errata NOP
  5470  002182                     __end_of_SoundPlayNextStep:
  5471                           	opt stack 0
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           postdec1	equ	0xFE5
  5482                           fsr1h	equ	0xFE2
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _StopPlaying *****************
  5492 ;; Defined at:
  5493 ;;		line 586 in file "main.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		None
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : F/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5507 ;;      Params:         0       0       0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0
  5510 ;;      Totals:         0       0       0       0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    2
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_SoundPlayNextStep
  5518 ;;		_ResetEvent
  5519 ;;		_ResetEventFromCommand
  5520 ;;		_main
  5521 ;;		_CommandSetLed
  5522 ;;		_CommandSetStatusLed
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text28
  5527  00305A                     __ptext28:
  5528                           	opt stack 0
  5529  00305A                     _StopPlaying:
  5530                           	opt stack 24
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;incstack = 0
  5534  00305A  FFFF               	dw	65535
  5535                           
  5536                           ;main.c: 588: _isSoundPlaying = 0;
  5537  00305C  0100               	movlb	0	; () banked
  5538  00305E  6BCF               	clrf	__isSoundPlaying& (0+255),b
  5539                           
  5540                           ;main.c: 589: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5541  003060  94CA               	bcf	4042,2,c	;volatile
  5542  003062  8494               	bsf	3988,2,c	;volatile
  5543                           
  5544                           ; BSR set to: 0
  5545  003064  0012               	return		;funcret
  5546  003066  FFFF               	dw	65535	; errata NOP
  5547  003068                     __end_of_StopPlaying:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           postdec1	equ	0xFE5
  5559                           fsr1h	equ	0xFE2
  5560                           fsr1l	equ	0xFE1
  5561                           indf2	equ	0xFDF
  5562                           postinc2	equ	0xFDE
  5563                           postdec2	equ	0xFDD
  5564                           fsr2h	equ	0xFDA
  5565                           fsr2l	equ	0xFD9
  5566                           status	equ	0xFD8
  5567                           
  5568 ;; *************** function _SetBuzzerDuty *****************
  5569 ;; Defined at:
  5570 ;;		line 420 in file "main.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  dc              2    6[COMRAM] unsigned int 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;		None
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : F/0
  5581 ;;		On exit  : F/0
  5582 ;;		Unchanged: F/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5584 ;;      Params:         2       0       0       0       0       0       0
  5585 ;;      Locals:         0       0       0       0       0       0       0
  5586 ;;      Temps:          2       0       0       0       0       0       0
  5587 ;;      Totals:         4       0       0       0       0       0       0
  5588 ;;Total ram usage:        4 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    2
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_SoundPlayNextStep
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text29
  5599  002E3C                     __ptext29:
  5600                           	opt stack 0
  5601  002E3C                     _SetBuzzerDuty:
  5602                           	opt stack 24
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;incstack = 0
  5606  002E3C  FFFF               	dw	65535
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;main.c: 425: CCP1CONbits.DC1B = dc & 0x03;
  5610  002E3E  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5611  002E42  0E03               	movlw	3
  5612  002E44  1609               	andwf	??_SetBuzzerDuty,f,c
  5613  002E46  3A09               	swapf	??_SetBuzzerDuty,f,c
  5614  002E48  50BD               	movf	4029,w,c	;volatile
  5615  002E4A  1809               	xorwf	??_SetBuzzerDuty,w,c
  5616  002E4C  0BCF               	andlw	-49
  5617  002E4E  1809               	xorwf	??_SetBuzzerDuty,w,c
  5618  002E50  6EBD               	movwf	4029,c	;volatile
  5619                           
  5620                           ;main.c: 426: CCPR1L = (uint8_t)(dc >> 2);
  5621  002E52  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5622  002E56  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  5623  002E5A  90D8               	bcf	status,0,c
  5624  002E5C  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5625  002E5E  3209               	rrcf	??_SetBuzzerDuty,f,c
  5626  002E60  90D8               	bcf	status,0,c
  5627  002E62  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5628  002E64  3209               	rrcf	??_SetBuzzerDuty,f,c
  5629  002E66  5009               	movf	??_SetBuzzerDuty,w,c
  5630  002E68  6EBE               	movwf	4030,c	;volatile
  5631                           
  5632                           ; BSR set to: 0
  5633  002E6A  0012               	return		;funcret
  5634  002E6C  FFFF               	dw	65535	; errata NOP
  5635  002E6E                     __end_of_SetBuzzerDuty:
  5636                           	opt stack 0
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           intcon	equ	0xFF2
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           fsr2h	equ	0xFDA
  5653                           fsr2l	equ	0xFD9
  5654                           status	equ	0xFD8
  5655                           
  5656 ;; *************** function _GetTime *****************
  5657 ;; Defined at:
  5658 ;;		line 207 in file "user.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;		None
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      PTR long 
  5665 ;; Registers used:
  5666 ;;		wreg
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         2       0       0       0       0       0       0
  5673 ;;      Locals:         0       0       0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0
  5675 ;;      Totals:         2       0       0       0       0       0       0
  5676 ;;Total ram usage:        2 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    2
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_SoundPlayNextStep
  5683 ;;		_PlaySound
  5684 ;;		_ProcessDiary
  5685 ;;		_main
  5686 ;;		_CommandSetLed
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text30
  5691  0030CA                     __ptext30:
  5692                           	opt stack 0
  5693  0030CA                     _GetTime:
  5694                           	opt stack 24
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;incstack = 0
  5698  0030CA  FFFF               	dw	65535
  5699                           
  5700                           ;user.c: 209: return &currentTime;
  5701  0030CC  0ED9               	movlw	_currentTime& (0+255)
  5702  0030CE  0012               	return		;funcret
  5703  0030D0  FFFF               	dw	65535	; errata NOP
  5704  0030D2                     __end_of_GetTime:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           intcon	equ	0xFF2
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           postdec1	equ	0xFE5
  5716                           fsr1h	equ	0xFE2
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _LoadNextEvent *****************
  5726 ;; Defined at:
  5727 ;;		line 698 in file "main.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  v1              1   12[COMRAM] unsigned char 
  5732 ;;  totalMinutes    2   10[COMRAM] unsigned int 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      void 
  5735 ;; Registers used:
  5736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/1
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5742 ;;      Params:         0       0       0       0       0       0       0
  5743 ;;      Locals:         3       0       0       0       0       0       0
  5744 ;;      Temps:          2       0       0       0       0       0       0
  5745 ;;      Totals:         5       0       0       0       0       0       0
  5746 ;;Total ram usage:        5 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    3
  5749 ;; This function calls:
  5750 ;;		_getTotalMinutes
  5751 ;; This function is called by:
  5752 ;;		_InitFromEeprom
  5753 ;;		_ProcessDiary
  5754 ;;		_main
  5755 ;;		_io_poll
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text31
  5760  001920                     __ptext31:
  5761                           	opt stack 0
  5762  001920                     _LoadNextEvent:
  5763                           	opt stack 26
  5764                           
  5765                           ;incstack = 0
  5766  001920  FFFF               	dw	65535
  5767                           
  5768                           ;main.c: 700: if(eventCount == 0)
  5769  001922  5076               	movf	_eventCount,w,c
  5770  001924  E101 D084          	bz	l421
  5771                           
  5772                           ;main.c: 702: uint16_t totalMinutes;
  5773                           ;main.c: 703: if(!getTotalMinutes(&totalMinutes))
  5774  001928  0E0B               	movlw	low LoadNextEvent@totalMinutes
  5775  00192A  6E07               	movwf	getTotalMinutes@totalMinutes,c
  5776  00192C  6A08               	clrf	getTotalMinutes@totalMinutes+1,c
  5777  00192E  EC9D  F017         	call	_getTotalMinutes	;wreg free
  5778  001932  0900               	iorlw	0
  5779  001934  E07D               	bz	l421
  5780  001936                     l7887:
  5781                           
  5782                           ;main.c: 707: {
  5783                           ;main.c: 708: if(_currenDiaryEvent.NextEventNum == 0xff)
  5784  001936  2870               	incf	__currenDiaryEvent+8,w,c
  5785  001938  E102               	bnz	l7891
  5786                           
  5787                           ;main.c: 709: _currenDiaryEvent.NextEventNum = 0;
  5788  00193A  6A70               	clrf	__currenDiaryEvent+8,c
  5789  00193C  D001               	goto	l7893
  5790  00193E                     l7891:
  5791                           
  5792                           ;main.c: 710: else
  5793                           ;main.c: 711: _currenDiaryEvent.NextEventNum++;
  5794  00193E  2A70               	incf	__currenDiaryEvent+8,f,c
  5795  001940                     l7893:
  5796  001940  FFFF               	dw	65535	; assembler added errata NOP
  5797                           
  5798                           ;main.c: 712: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5799  001942  5069               	movf	__currenDiaryEvent+1,w,c
  5800  001944  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5801  001946  5070               	movf	__currenDiaryEvent+8,w,c
  5802  001948  0101               	movlb	1	; () banked
  5803  00194A  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5804  00194C  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5805                           
  5806                           ; BSR set to: 1
  5807                           ;main.c: 713: if(_currenDiaryEvent.NextEventNum >= eventCount)
  5808  001950  5076               	movf	_eventCount,w,c
  5809  001952  5C70               	subwf	__currenDiaryEvent+8,w,c
  5810  001954  E30C               	bnc	l7903
  5811                           
  5812                           ; BSR set to: 1
  5813                           ;main.c: 714: {
  5814                           ;main.c: 715: _currenDiaryEvent.NextEventNum = 0xff;
  5815  001956  6870               	setf	__currenDiaryEvent+8,c
  5816                           
  5817                           ;main.c: 716: _currenDiaryEvent.NextEventTotalMinutes = 0;
  5818  001958  6A6A               	clrf	__currenDiaryEvent+2,c
  5819  00195A  6A6B               	clrf	__currenDiaryEvent+3,c
  5820                           
  5821                           ;main.c: 717: _MODBUSInputRegs[3] = 0;
  5822  00195C  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  5823  00195E  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  5824                           
  5825                           ; BSR set to: 1
  5826                           ;main.c: 718: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5827  001960  5069               	movf	__currenDiaryEvent+1,w,c
  5828  001962  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5829  001964  5070               	movf	__currenDiaryEvent+8,w,c
  5830  001966  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5831  001968  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5832  00196C  D061               	goto	l421
  5833  00196E                     l7903:
  5834                           
  5835                           ; BSR set to: 1
  5836                           ;main.c: 720: }
  5837                           ;main.c: 731: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2, (void)
      +                          0, RD = 1, EEDATA);
  5838  00196E  5070               	movf	__currenDiaryEvent+8,w,c
  5839  001970  0D02               	mullw	2
  5840  001972  50F3               	movf	prodl,w,c
  5841  001974  0F0B               	addlw	11
  5842  001976  6EA9               	movwf	4009,c	;volatile
  5843                           
  5844                           ; BSR set to: 1
  5845  001978  80A6               	bsf	4006,0,c	;volatile
  5846                           
  5847                           ; BSR set to: 1
  5848  00197A  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  5849                           
  5850                           ;main.c: 732: _currenDiaryEvent.NextEventTotalMinutes = (v1 & 0x1F) * 60;
  5851  00197E  500D               	movf	LoadNextEvent@v1,w,c
  5852  001980  0B1F               	andlw	31
  5853  001982  0D3C               	mullw	60
  5854  001984  CFF3 F06A          	movff	prodl,__currenDiaryEvent+2
  5855  001988  CFF4 F06B          	movff	prodh,__currenDiaryEvent+3
  5856                           
  5857                           ; BSR set to: 1
  5858                           ;main.c: 734: _nextEventPlayDuration = (v1 >> 5);
  5859  00198C  380D               	swapf	LoadNextEvent@v1,w,c
  5860  00198E  42E8               	rrncf	wreg,f,c
  5861  001990  0B07               	andlw	7
  5862  001992  0100               	movlb	0	; () banked
  5863  001994  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  5864  001996  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5865                           
  5866                           ;main.c: 735: switch(_nextEventPlayDuration)
  5867  001998  D01A               	goto	l7925
  5868  00199A                     l7911:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;main.c: 738: _nextEventPlayDuration = 10;
  5872  00199A  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5873  00199C  0E0A               	movlw	10
  5874  00199E  D011               	goto	L8
  5875  0019A0                     l7913:
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;main.c: 741: _nextEventPlayDuration = 30;
  5879  0019A0  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5880  0019A2  0E1E               	movlw	30
  5881  0019A4  D00E               	goto	L8
  5882  0019A6                     l7915:
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;main.c: 744: _nextEventPlayDuration = 60;
  5886  0019A6  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5887  0019A8  0E3C               	movlw	60
  5888  0019AA  D00B               	goto	L8
  5889  0019AC                     l7917:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;main.c: 747: _nextEventPlayDuration = 60*5;
  5893  0019AC  0E01               	movlw	1
  5894  0019AE  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5895  0019B0  0E2C               	movlw	44
  5896  0019B2  D007               	goto	L8
  5897  0019B4                     l7919:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;main.c: 750: _nextEventPlayDuration = 60*12;
  5901  0019B4  0E02               	movlw	2
  5902  0019B6  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5903  0019B8  0ED0               	movlw	208
  5904  0019BA  D003               	goto	L8
  5905  0019BC                     l7921:
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;main.c: 753: _nextEventPlayDuration = 60*30;
  5909  0019BC  0E07               	movlw	7
  5910  0019BE  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5911  0019C0  0E08               	movlw	8
  5912  0019C2                     L8:
  5913  0019C2  FFFF               	dw	65535	; assembler added errata NOP
  5914  0019C4  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  5915                           
  5916                           ;main.c: 754: break;
  5917  0019C6  D019               	goto	l7927
  5918  0019C8                     l435:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;main.c: 756: _nextEventPlayDuration = 65535;
  5922  0019C8  69C2               	setf	__nextEventPlayDuration& (0+255),b
  5923  0019CA  69C3               	setf	(__nextEventPlayDuration+1)& (0+255),b
  5924                           
  5925                           ;main.c: 757: break;
  5926  0019CC  D016               	goto	l7927
  5927  0019CE                     l7925:
  5928  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  5929                           
  5930                           ; BSR set to: 0
  5931  0019D0  C0C2  F009         	movff	__nextEventPlayDuration,??_LoadNextEvent
  5932  0019D4  C0C3  F00A         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  5933                           
  5934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5935                           ; Switch size 1, requested type "speed"
  5936                           ; Number of cases is 1, Range of values is 0 to 0
  5937                           ; switch strategies available:
  5938                           ; Name         Instructions Cycles
  5939                           ; simple_byte            4     3 (average)
  5940                           ;	Chosen strategy is simple_byte
  5941  0019D8  500A               	movf	??_LoadNextEvent+1,w,c
  5942  0019DA  E10F               	bnz	l7927
  5943                           
  5944                           ; BSR set to: 0
  5945                           ; Switch size 1, requested type "speed"
  5946                           ; Number of cases is 7, Range of values is 1 to 7
  5947                           ; switch strategies available:
  5948                           ; Name         Instructions Cycles
  5949                           ; simple_byte           22    12 (average)
  5950                           ;	Chosen strategy is simple_byte
  5951  0019DC  5009               	movf	??_LoadNextEvent,w,c
  5952  0019DE  0A01               	xorlw	1	; case 1
  5953  0019E0  E0DC               	bz	l7911
  5954  0019E2  0A03               	xorlw	3	; case 2
  5955  0019E4  E0DD               	bz	l7913
  5956  0019E6  0A01               	xorlw	1	; case 3
  5957  0019E8  E0DE               	bz	l7915
  5958  0019EA  0A07               	xorlw	7	; case 4
  5959  0019EC  E0DF               	bz	l7917
  5960  0019EE  0A01               	xorlw	1	; case 5
  5961  0019F0  E0E1               	bz	l7919
  5962  0019F2  0A03               	xorlw	3	; case 6
  5963  0019F4  E0E3               	bz	l7921
  5964  0019F6  0A01               	xorlw	1	; case 7
  5965  0019F8  E0E7               	bz	l435
  5966  0019FA                     l7927:
  5967  0019FA  FFFF               	dw	65535	; assembler added errata NOP
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;main.c: 759: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2 + 1, (v
      +                          oid)0, RD = 1, EEDATA);
  5971  0019FC  5070               	movf	__currenDiaryEvent+8,w,c
  5972  0019FE  0D02               	mullw	2
  5973  001A00  50F3               	movf	prodl,w,c
  5974  001A02  0F0C               	addlw	12
  5975  001A04  6EA9               	movwf	4009,c	;volatile
  5976                           
  5977                           ; BSR set to: 0
  5978  001A06  80A6               	bsf	4006,0,c	;volatile
  5979                           
  5980                           ; BSR set to: 0
  5981  001A08  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;main.c: 760: _currenDiaryEvent.NextEventTotalMinutes += v1 & 0x3F;
  5985  001A0C  500D               	movf	LoadNextEvent@v1,w,c
  5986  001A0E  0B3F               	andlw	63
  5987  001A10  266A               	addwf	__currenDiaryEvent+2,f,c
  5988  001A12  0E00               	movlw	0
  5989  001A14  226B               	addwfc	__currenDiaryEvent+3,f,c
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;main.c: 761: _nextEventSoundId = v1 >> 6;
  5993  001A16  440D               	rlncf	LoadNextEvent@v1,w,c
  5994  001A18  46E8               	rlncf	wreg,f,c
  5995  001A1A  0B03               	andlw	3
  5996  001A1C  6FD1               	movwf	__nextEventSoundId& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;main.c: 763: }while(_currenDiaryEvent.NextEventTotalMinutes <= totalMinutes);
  6000  001A1E  506A               	movf	__currenDiaryEvent+2,w,c
  6001  001A20  5C0B               	subwf	LoadNextEvent@totalMinutes,w,c
  6002  001A22  506B               	movf	__currenDiaryEvent+3,w,c
  6003  001A24  580C               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  6004  001A26  E287               	bc	l7887
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;main.c: 764: _MODBUSInputRegs[3] = _currenDiaryEvent.NextEventTotalMinutes;
  6008  001A28  C06A  F1B0         	movff	__currenDiaryEvent+2,__MODBUSInputRegs+6
  6009  001A2C  C06B  F1B1         	movff	__currenDiaryEvent+3,__MODBUSInputRegs+7
  6010  001A30                     l421:
  6011  001A30  FFFF               	dw	65535	; assembler added errata NOP
  6012  001A32  0012               	return		;funcret
  6013  001A34  FFFF               	dw	65535	; errata NOP
  6014  001A36                     __end_of_LoadNextEvent:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postdec1	equ	0xFE5
  6026                           fsr1h	equ	0xFE2
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _getTotalMinutes *****************
  6036 ;; Defined at:
  6037 ;;		line 267 in file "interrupts.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  totalMinutes    2    6[COMRAM] PTR unsigned int 
  6040 ;;		 -> main@totalMinutes(2), ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      unsigned char 
  6045 ;; Registers used:
  6046 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6052 ;;      Params:         2       0       0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0
  6055 ;;      Totals:         2       0       0       0       0       0       0
  6056 ;;Total ram usage:        2 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    2
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_LoadNextEvent
  6063 ;;		_ProcessDiary
  6064 ;;		_main
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text32
  6069  002F3A                     __ptext32:
  6070                           	opt stack 0
  6071  002F3A                     _getTotalMinutes:
  6072                           	opt stack 26
  6073                           
  6074                           ;incstack = 0
  6075  002F3A  FFFF               	dw	65535
  6076                           
  6077                           ;interrupts.c: 269: if(globalHours == 0xFF)
  6078  002F3C  2878               	incf	_globalHours,w,c	;volatile
  6079  002F3E  E102               	bnz	l112
  6080                           
  6081                           ;interrupts.c: 270: return 0;
  6082  002F40  0E00               	movlw	0
  6083  002F42  D00B               	goto	l113
  6084  002F44                     l112:
  6085                           
  6086                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  6087  002F44  9EF2               	bcf	intcon,7,c	;volatile
  6088                           
  6089                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  6090  002F46  C007  FFD9         	movff	getTotalMinutes@totalMinutes,fsr2l
  6091  002F4A  C008  FFDA         	movff	getTotalMinutes@totalMinutes+1,fsr2h
  6092  002F4E  C0C4  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  6093  002F52  C0C5  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  6094                           
  6095                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  6096  002F56  8EF2               	bsf	intcon,7,c	;volatile
  6097                           
  6098                           ;interrupts.c: 274: return 1;
  6099  002F58  0E01               	movlw	1
  6100  002F5A                     l113:
  6101  002F5A  FFFF               	dw	65535	; assembler added errata NOP
  6102  002F5C  0012               	return		;funcret
  6103  002F5E  FFFF               	dw	65535	; errata NOP
  6104  002F60                     __end_of_getTotalMinutes:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           postinc0	equ	0xFEE
  6114                           wreg	equ	0xFE8
  6115                           postdec1	equ	0xFE5
  6116                           fsr1h	equ	0xFE2
  6117                           fsr1l	equ	0xFE1
  6118                           indf2	equ	0xFDF
  6119                           postinc2	equ	0xFDE
  6120                           postdec2	equ	0xFDD
  6121                           fsr2h	equ	0xFDA
  6122                           fsr2l	equ	0xFD9
  6123                           status	equ	0xFD8
  6124                           
  6125 ;; *************** function _LightLed *****************
  6126 ;; Defined at:
  6127 ;;		line 325 in file "main.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  ledNum          1    wreg     unsigned char 
  6130 ;;  ledState        1    6[COMRAM] enum E2454
  6131 ;;  blink           1    7[COMRAM] unsigned char 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  ledNum          1   11[COMRAM] unsigned char 
  6134 ;;  statusShift     1   13[COMRAM] unsigned char 
  6135 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6145 ;;      Params:         2       0       0       0       0       0       0
  6146 ;;      Locals:         3       0       0       0       0       0       0
  6147 ;;      Temps:          3       0       0       0       0       0       0
  6148 ;;      Totals:         8       0       0       0       0       0       0
  6149 ;;Total ram usage:        8 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    2
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_SwitchOffAllDiaryLeds
  6156 ;;		_ShowFailure
  6157 ;;		_ResetEvent
  6158 ;;		_ResetEventFromCommand
  6159 ;;		_ProcessDiary
  6160 ;;		_CommandSetLed
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text33
  6165  00096A                     __ptext33:
  6166                           	opt stack 0
  6167  00096A                     _LightLed:
  6168                           	opt stack 25
  6169                           
  6170                           ;incstack = 0
  6171  00096A  FFFF               	dw	65535
  6172                           
  6173                           ;LightLed@ledNum stored from wreg
  6174  00096C  6E0C               	movwf	LightLed@ledNum,c
  6175                           
  6176                           ;main.c: 327: if(ledNum < 1 || ledNum > 60)
  6177  00096E  500C               	movf	LightLed@ledNum,w,c
  6178  000970  E101 D171          	bz	l260
  6179  000974  0E3C               	movlw	60
  6180  000976  640C               	cpfsgt	LightLed@ledNum,c
  6181  000978  D001               	goto	l5977
  6182  00097A  D16D               	goto	l260
  6183  00097C                     l5977:
  6184  00097C  FFFF               	dw	65535	; assembler added errata NOP
  6185                           
  6186                           ;main.c: 329: ledNum--;
  6187  00097E  060C               	decf	LightLed@ledNum,f,c
  6188                           
  6189                           ;main.c: 331: uint8_t ststusIndex = ledNum >> 2;
  6190  000980  400C               	rrncf	LightLed@ledNum,w,c
  6191  000982  42E8               	rrncf	wreg,f,c
  6192  000984  0B3F               	andlw	63
  6193  000986  6E0D               	movwf	LightLed@ststusIndex,c
  6194                           
  6195                           ;main.c: 332: uint8_t statusShift = (ledNum & 0x03) << 1;
  6196  000988  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6197  00098C  0E03               	movlw	3
  6198  00098E  1609               	andwf	??_LightLed,f,c
  6199  000990  90D8               	bcf	status,0,c
  6200  000992  3409               	rlcf	??_LightLed,w,c
  6201  000994  6E0E               	movwf	LightLed@statusShift,c
  6202                           
  6203                           ;main.c: 334: switch(ledState)
  6204  000996  D153               	goto	l6017
  6205  000998                     l5983:
  6206                           
  6207                           ;main.c: 337: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6208  000998  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6209  00099C  2A09               	incf	??_LightLed,f,c
  6210  00099E  0E01               	movlw	1
  6211  0009A0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6212  0009A2  2A09               	incf	??_LightLed,f,c
  6213  0009A4  D003               	goto	u4854
  6214  0009A6                     u4855:
  6215  0009A6  FFFF               	dw	65535	; assembler added errata NOP
  6216  0009A8  90D8               	bcf	status,0,c
  6217  0009AA  360A               	rlcf	??_LightLed+1,f,c
  6218  0009AC                     u4854:
  6219  0009AC  FFFF               	dw	65535	; assembler added errata NOP
  6220  0009AE  2E09               	decfsz	??_LightLed,f,c
  6221  0009B0  D7FA               	goto	u4855
  6222  0009B2  1C0A               	comf	??_LightLed+1,w,c
  6223  0009B4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6224  0009B6  500D               	movf	LightLed@ststusIndex,w,c
  6225  0009B8  0F90               	addlw	low _ledStatuses
  6226  0009BA  6ED9               	movwf	fsr2l,c
  6227  0009BC  6ADA               	clrf	fsr2h,c
  6228  0009BE  500B               	movf	??_LightLed+2,w,c
  6229  0009C0  16DF               	andwf	indf2,f,c
  6230                           
  6231                           ;main.c: 338: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6232  0009C2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6233  0009C6  0E01               	movlw	1
  6234  0009C8  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6235  0009CA  2A09               	incf	??_LightLed,f,c
  6236  0009CC  D003               	goto	u4864
  6237  0009CE                     u4865:
  6238  0009CE  FFFF               	dw	65535	; assembler added errata NOP
  6239  0009D0  90D8               	bcf	status,0,c
  6240  0009D2  360A               	rlcf	??_LightLed+1,f,c
  6241  0009D4                     u4864:
  6242  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  6243  0009D6  2E09               	decfsz	??_LightLed,f,c
  6244  0009D8  D7FA               	goto	u4865
  6245  0009DA  1C0A               	comf	??_LightLed+1,w,c
  6246  0009DC  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6247  0009DE  500D               	movf	LightLed@ststusIndex,w,c
  6248  0009E0  0F90               	addlw	low _ledStatuses
  6249  0009E2  6ED9               	movwf	fsr2l,c
  6250  0009E4  6ADA               	clrf	fsr2h,c
  6251  0009E6  500B               	movf	??_LightLed+2,w,c
  6252  0009E8  16DF               	andwf	indf2,f,c
  6253                           
  6254                           ;main.c: 339: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6255  0009EA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6256  0009EE  2A09               	incf	??_LightLed,f,c
  6257  0009F0  0E01               	movlw	1
  6258  0009F2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6259  0009F4  2A09               	incf	??_LightLed,f,c
  6260  0009F6  D003               	goto	u4874
  6261  0009F8                     u4875:
  6262  0009F8  FFFF               	dw	65535	; assembler added errata NOP
  6263  0009FA  90D8               	bcf	status,0,c
  6264  0009FC  360A               	rlcf	??_LightLed+1,f,c
  6265  0009FE                     u4874:
  6266  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  6267  000A00  2E09               	decfsz	??_LightLed,f,c
  6268  000A02  D7FA               	goto	u4875
  6269  000A04  1C0A               	comf	??_LightLed+1,w,c
  6270  000A06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6271  000A08  500D               	movf	LightLed@ststusIndex,w,c
  6272  000A0A  0F80               	addlw	low _ledBlink
  6273  000A0C  6ED9               	movwf	fsr2l,c
  6274  000A0E  6ADA               	clrf	fsr2h,c
  6275  000A10  500B               	movf	??_LightLed+2,w,c
  6276  000A12  16DF               	andwf	indf2,f,c
  6277                           
  6278                           ;main.c: 340: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6279  000A14  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6280  000A18  0E01               	movlw	1
  6281  000A1A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6282  000A1C  2A09               	incf	??_LightLed,f,c
  6283  000A1E  D003               	goto	u4884
  6284  000A20                     u4885:
  6285  000A20  FFFF               	dw	65535	; assembler added errata NOP
  6286  000A22  90D8               	bcf	status,0,c
  6287  000A24  360A               	rlcf	??_LightLed+1,f,c
  6288  000A26                     u4884:
  6289  000A26  FFFF               	dw	65535	; assembler added errata NOP
  6290  000A28  2E09               	decfsz	??_LightLed,f,c
  6291  000A2A  D7FA               	goto	u4885
  6292  000A2C  D05F               	goto	L9
  6293  000A2E                     l5985:
  6294                           
  6295                           ;main.c: 343: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6296  000A2E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6297  000A32  2A09               	incf	??_LightLed,f,c
  6298  000A34  0E01               	movlw	1
  6299  000A36  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6300  000A38  2A09               	incf	??_LightLed,f,c
  6301  000A3A  D003               	goto	u4894
  6302  000A3C                     u4895:
  6303  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  6304  000A3E  90D8               	bcf	status,0,c
  6305  000A40  360A               	rlcf	??_LightLed+1,f,c
  6306  000A42                     u4894:
  6307  000A42  FFFF               	dw	65535	; assembler added errata NOP
  6308  000A44  2E09               	decfsz	??_LightLed,f,c
  6309  000A46  D7FA               	goto	u4895
  6310  000A48  500D               	movf	LightLed@ststusIndex,w,c
  6311  000A4A  0F90               	addlw	low _ledStatuses
  6312  000A4C  6ED9               	movwf	fsr2l,c
  6313  000A4E  6ADA               	clrf	fsr2h,c
  6314  000A50  500A               	movf	??_LightLed+1,w,c
  6315  000A52  12DF               	iorwf	indf2,f,c
  6316                           
  6317                           ;main.c: 344: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6318  000A54  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6319  000A58  0E01               	movlw	1
  6320  000A5A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6321  000A5C  2A09               	incf	??_LightLed,f,c
  6322  000A5E  D003               	goto	u4904
  6323  000A60                     u4905:
  6324  000A60  FFFF               	dw	65535	; assembler added errata NOP
  6325  000A62  90D8               	bcf	status,0,c
  6326  000A64  360A               	rlcf	??_LightLed+1,f,c
  6327  000A66                     u4904:
  6328  000A66  FFFF               	dw	65535	; assembler added errata NOP
  6329  000A68  2E09               	decfsz	??_LightLed,f,c
  6330  000A6A  D7FA               	goto	u4905
  6331  000A6C  1C0A               	comf	??_LightLed+1,w,c
  6332  000A6E  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6333  000A70  500D               	movf	LightLed@ststusIndex,w,c
  6334  000A72  0F90               	addlw	low _ledStatuses
  6335  000A74  6ED9               	movwf	fsr2l,c
  6336  000A76  6ADA               	clrf	fsr2h,c
  6337  000A78  500B               	movf	??_LightLed+2,w,c
  6338  000A7A  16DF               	andwf	indf2,f,c
  6339                           
  6340                           ;main.c: 345: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6341  000A7C  5008               	movf	LightLed@blink,w,c
  6342  000A7E  E014               	bz	l5991
  6343  000A80  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6344  000A84  2A09               	incf	??_LightLed,f,c
  6345  000A86  0E01               	movlw	1
  6346  000A88  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6347  000A8A  2A09               	incf	??_LightLed,f,c
  6348  000A8C  D003               	goto	u4924
  6349  000A8E                     u4925:
  6350  000A8E  FFFF               	dw	65535	; assembler added errata NOP
  6351  000A90  90D8               	bcf	status,0,c
  6352  000A92  360A               	rlcf	??_LightLed+1,f,c
  6353  000A94                     u4924:
  6354  000A94  FFFF               	dw	65535	; assembler added errata NOP
  6355  000A96  2E09               	decfsz	??_LightLed,f,c
  6356  000A98  D7FA               	goto	u4925
  6357  000A9A  500D               	movf	LightLed@ststusIndex,w,c
  6358  000A9C  0F80               	addlw	low _ledBlink
  6359  000A9E  6ED9               	movwf	fsr2l,c
  6360  000AA0  6ADA               	clrf	fsr2h,c
  6361  000AA2  500A               	movf	??_LightLed+1,w,c
  6362  000AA4  12DF               	iorwf	indf2,f,c
  6363  000AA6  D015               	goto	l268
  6364  000AA8                     l5991:
  6365  000AA8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6366  000AAC  2A09               	incf	??_LightLed,f,c
  6367  000AAE  0E01               	movlw	1
  6368  000AB0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6369  000AB2  2A09               	incf	??_LightLed,f,c
  6370  000AB4  D003               	goto	u4934
  6371  000AB6                     u4935:
  6372  000AB6  FFFF               	dw	65535	; assembler added errata NOP
  6373  000AB8  90D8               	bcf	status,0,c
  6374  000ABA  360A               	rlcf	??_LightLed+1,f,c
  6375  000ABC                     u4934:
  6376  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  6377  000ABE  2E09               	decfsz	??_LightLed,f,c
  6378  000AC0  D7FA               	goto	u4935
  6379  000AC2  1C0A               	comf	??_LightLed+1,w,c
  6380  000AC4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6381  000AC6  500D               	movf	LightLed@ststusIndex,w,c
  6382  000AC8  0F80               	addlw	low _ledBlink
  6383  000ACA  6ED9               	movwf	fsr2l,c
  6384  000ACC  6ADA               	clrf	fsr2h,c
  6385  000ACE  500B               	movf	??_LightLed+2,w,c
  6386  000AD0  16DF               	andwf	indf2,f,c
  6387  000AD2                     l268:
  6388  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  6389                           
  6390                           ;main.c: 346: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6391  000AD4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6392  000AD8  0E01               	movlw	1
  6393  000ADA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6394  000ADC  2A09               	incf	??_LightLed,f,c
  6395  000ADE  D003               	goto	u4944
  6396  000AE0                     u4945:
  6397  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6398  000AE2  90D8               	bcf	status,0,c
  6399  000AE4  360A               	rlcf	??_LightLed+1,f,c
  6400  000AE6                     u4944:
  6401  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6402  000AE8  2E09               	decfsz	??_LightLed,f,c
  6403  000AEA  D7FA               	goto	u4945
  6404  000AEC                     L9:
  6405  000AEC  FFFF               	dw	65535	; assembler added errata NOP
  6406  000AEE  1C0A               	comf	??_LightLed+1,w,c
  6407  000AF0  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6408  000AF2  500D               	movf	LightLed@ststusIndex,w,c
  6409  000AF4  0F80               	addlw	low _ledBlink
  6410  000AF6  6ED9               	movwf	fsr2l,c
  6411  000AF8  6ADA               	clrf	fsr2h,c
  6412  000AFA  500B               	movf	??_LightLed+2,w,c
  6413  000AFC  16DF               	andwf	indf2,f,c
  6414                           
  6415                           ;main.c: 347: break;
  6416  000AFE  D0AB               	goto	l260
  6417  000B00                     l5993:
  6418                           
  6419                           ;main.c: 349: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6420  000B00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6421  000B04  2A09               	incf	??_LightLed,f,c
  6422  000B06  0E01               	movlw	1
  6423  000B08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6424  000B0A  2A09               	incf	??_LightLed,f,c
  6425  000B0C  D003               	goto	u4954
  6426  000B0E                     u4955:
  6427  000B0E  FFFF               	dw	65535	; assembler added errata NOP
  6428  000B10  90D8               	bcf	status,0,c
  6429  000B12  360A               	rlcf	??_LightLed+1,f,c
  6430  000B14                     u4954:
  6431  000B14  FFFF               	dw	65535	; assembler added errata NOP
  6432  000B16  2E09               	decfsz	??_LightLed,f,c
  6433  000B18  D7FA               	goto	u4955
  6434  000B1A  1C0A               	comf	??_LightLed+1,w,c
  6435  000B1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6436  000B1E  500D               	movf	LightLed@ststusIndex,w,c
  6437  000B20  0F90               	addlw	low _ledStatuses
  6438  000B22  6ED9               	movwf	fsr2l,c
  6439  000B24  6ADA               	clrf	fsr2h,c
  6440  000B26  500B               	movf	??_LightLed+2,w,c
  6441  000B28  16DF               	andwf	indf2,f,c
  6442                           
  6443                           ;main.c: 350: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6444  000B2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6445  000B2E  0E01               	movlw	1
  6446  000B30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6447  000B32  2A09               	incf	??_LightLed,f,c
  6448  000B34  D003               	goto	u4964
  6449  000B36                     u4965:
  6450  000B36  FFFF               	dw	65535	; assembler added errata NOP
  6451  000B38  90D8               	bcf	status,0,c
  6452  000B3A  360A               	rlcf	??_LightLed+1,f,c
  6453  000B3C                     u4964:
  6454  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  6455  000B3E  2E09               	decfsz	??_LightLed,f,c
  6456  000B40  D7FA               	goto	u4965
  6457  000B42  500D               	movf	LightLed@ststusIndex,w,c
  6458  000B44  0F90               	addlw	low _ledStatuses
  6459  000B46  6ED9               	movwf	fsr2l,c
  6460  000B48  6ADA               	clrf	fsr2h,c
  6461  000B4A  500A               	movf	??_LightLed+1,w,c
  6462  000B4C  12DF               	iorwf	indf2,f,c
  6463                           
  6464                           ;main.c: 351: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6465  000B4E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6466  000B52  2A09               	incf	??_LightLed,f,c
  6467  000B54  0E01               	movlw	1
  6468  000B56  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6469  000B58  2A09               	incf	??_LightLed,f,c
  6470  000B5A  D003               	goto	u4974
  6471  000B5C                     u4975:
  6472  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  6473  000B5E  90D8               	bcf	status,0,c
  6474  000B60  360A               	rlcf	??_LightLed+1,f,c
  6475  000B62                     u4974:
  6476  000B62  FFFF               	dw	65535	; assembler added errata NOP
  6477  000B64  2E09               	decfsz	??_LightLed,f,c
  6478  000B66  D7FA               	goto	u4975
  6479  000B68  FFFF               	dw	65535	; assembler added errata NOP
  6480  000B6A  1C0A               	comf	??_LightLed+1,w,c
  6481  000B6C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6482  000B6E  500D               	movf	LightLed@ststusIndex,w,c
  6483  000B70  0F80               	addlw	low _ledBlink
  6484  000B72  6ED9               	movwf	fsr2l,c
  6485  000B74  6ADA               	clrf	fsr2h,c
  6486  000B76  500B               	movf	??_LightLed+2,w,c
  6487  000B78  16DF               	andwf	indf2,f,c
  6488                           
  6489                           ;main.c: 352: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6490  000B7A  5008               	movf	LightLed@blink,w,c
  6491  000B7C  E0AA               	bz	l268
  6492  000B7E                     l5997:
  6493  000B7E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6494  000B82  0E01               	movlw	1
  6495  000B84  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6496  000B86  2A09               	incf	??_LightLed,f,c
  6497  000B88  D003               	goto	u4994
  6498  000B8A                     u4995:
  6499  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  6500  000B8C  90D8               	bcf	status,0,c
  6501  000B8E  360A               	rlcf	??_LightLed+1,f,c
  6502  000B90                     u4994:
  6503  000B90  FFFF               	dw	65535	; assembler added errata NOP
  6504  000B92  2E09               	decfsz	??_LightLed,f,c
  6505  000B94  D7FA               	goto	u4995
  6506  000B96  500D               	movf	LightLed@ststusIndex,w,c
  6507  000B98  0F80               	addlw	low _ledBlink
  6508  000B9A  6ED9               	movwf	fsr2l,c
  6509  000B9C  6ADA               	clrf	fsr2h,c
  6510  000B9E  500A               	movf	??_LightLed+1,w,c
  6511  000BA0  12DF               	iorwf	indf2,f,c
  6512  000BA2  D059               	goto	l260
  6513  000BA4                     l6001:
  6514                           
  6515                           ;main.c: 355: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6516  000BA4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6517  000BA8  2A09               	incf	??_LightLed,f,c
  6518  000BAA  0E01               	movlw	1
  6519  000BAC  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6520  000BAE  2A09               	incf	??_LightLed,f,c
  6521  000BB0  D003               	goto	u5004
  6522  000BB2                     u5005:
  6523  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  6524  000BB4  90D8               	bcf	status,0,c
  6525  000BB6  360A               	rlcf	??_LightLed+1,f,c
  6526  000BB8                     u5004:
  6527  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  6528  000BBA  2E09               	decfsz	??_LightLed,f,c
  6529  000BBC  D7FA               	goto	u5005
  6530  000BBE  500D               	movf	LightLed@ststusIndex,w,c
  6531  000BC0  0F90               	addlw	low _ledStatuses
  6532  000BC2  6ED9               	movwf	fsr2l,c
  6533  000BC4  6ADA               	clrf	fsr2h,c
  6534  000BC6  500A               	movf	??_LightLed+1,w,c
  6535  000BC8  12DF               	iorwf	indf2,f,c
  6536                           
  6537                           ;main.c: 356: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6538  000BCA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6539  000BCE  0E01               	movlw	1
  6540  000BD0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6541  000BD2  2A09               	incf	??_LightLed,f,c
  6542  000BD4  D003               	goto	u5014
  6543  000BD6                     u5015:
  6544  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  6545  000BD8  90D8               	bcf	status,0,c
  6546  000BDA  360A               	rlcf	??_LightLed+1,f,c
  6547  000BDC                     u5014:
  6548  000BDC  FFFF               	dw	65535	; assembler added errata NOP
  6549  000BDE  2E09               	decfsz	??_LightLed,f,c
  6550  000BE0  D7FA               	goto	u5015
  6551  000BE2  500D               	movf	LightLed@ststusIndex,w,c
  6552  000BE4  0F90               	addlw	low _ledStatuses
  6553  000BE6  6ED9               	movwf	fsr2l,c
  6554  000BE8  6ADA               	clrf	fsr2h,c
  6555  000BEA  500A               	movf	??_LightLed+1,w,c
  6556  000BEC  12DF               	iorwf	indf2,f,c
  6557                           
  6558                           ;main.c: 357: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6559  000BEE  5008               	movf	LightLed@blink,w,c
  6560  000BF0  E014               	bz	l6007
  6561  000BF2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6562  000BF6  2A09               	incf	??_LightLed,f,c
  6563  000BF8  0E01               	movlw	1
  6564  000BFA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6565  000BFC  2A09               	incf	??_LightLed,f,c
  6566  000BFE  D003               	goto	u5034
  6567  000C00                     u5035:
  6568  000C00  FFFF               	dw	65535	; assembler added errata NOP
  6569  000C02  90D8               	bcf	status,0,c
  6570  000C04  360A               	rlcf	??_LightLed+1,f,c
  6571  000C06                     u5034:
  6572  000C06  FFFF               	dw	65535	; assembler added errata NOP
  6573  000C08  2E09               	decfsz	??_LightLed,f,c
  6574  000C0A  D7FA               	goto	u5035
  6575  000C0C  500D               	movf	LightLed@ststusIndex,w,c
  6576  000C0E  0F80               	addlw	low _ledBlink
  6577  000C10  6ED9               	movwf	fsr2l,c
  6578  000C12  6ADA               	clrf	fsr2h,c
  6579  000C14  500A               	movf	??_LightLed+1,w,c
  6580  000C16  12DF               	iorwf	indf2,f,c
  6581  000C18  D00E               	goto	l6009
  6582  000C1A                     l6007:
  6583  000C1A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6584  000C1E  2A09               	incf	??_LightLed,f,c
  6585  000C20  0E01               	movlw	1
  6586  000C22  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6587  000C24  2A09               	incf	??_LightLed,f,c
  6588  000C26  D003               	goto	u5044
  6589  000C28                     u5045:
  6590  000C28  FFFF               	dw	65535	; assembler added errata NOP
  6591  000C2A  90D8               	bcf	status,0,c
  6592  000C2C  360A               	rlcf	??_LightLed+1,f,c
  6593  000C2E                     u5044:
  6594  000C2E  FFFF               	dw	65535	; assembler added errata NOP
  6595  000C30  2E09               	decfsz	??_LightLed,f,c
  6596  000C32  D7FA               	goto	u5045
  6597  000C34  D799               	goto	L10
  6598  000C36                     l6009:
  6599  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6600                           
  6601                           ;main.c: 358: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6602  000C38  5008               	movf	LightLed@blink,w,c
  6603  000C3A  E1A1               	bnz	l5997
  6604  000C3C  D74A               	goto	l268
  6605  000C3E                     l6017:
  6606  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6607  000C40  5007               	movf	LightLed@ledState,w,c
  6608                           
  6609                           ; Switch size 1, requested type "speed"
  6610                           ; Number of cases is 4, Range of values is 0 to 3
  6611                           ; switch strategies available:
  6612                           ; Name         Instructions Cycles
  6613                           ; simple_byte           13     7 (average)
  6614                           ;	Chosen strategy is simple_byte
  6615  000C42  E101 D6A9          	bz	l5983
  6616  000C46  0A01               	xorlw	1	; case 1
  6617  000C48  E101 D6F1          	bz	l5985
  6618  000C4C  0A03               	xorlw	3	; case 2
  6619  000C4E  E101 D757          	bz	l5993
  6620  000C52  0A01               	xorlw	1	; case 3
  6621  000C54  E0A7               	bz	l6001
  6622  000C56                     l260:
  6623  000C56  FFFF               	dw	65535	; assembler added errata NOP
  6624  000C58  0012               	return		;funcret
  6625  000C5A  FFFF               	dw	65535	; errata NOP
  6626  000C5C                     __end_of_LightLed:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           postdec1	equ	0xFE5
  6638                           fsr1h	equ	0xFE2
  6639                           fsr1l	equ	0xFE1
  6640                           indf2	equ	0xFDF
  6641                           postinc2	equ	0xFDE
  6642                           postdec2	equ	0xFDD
  6643                           fsr2h	equ	0xFDA
  6644                           fsr2l	equ	0xFD9
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _GetCurrentEventDiodeNum *****************
  6648 ;; Defined at:
  6649 ;;		line 501 in file "main.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      unsigned char 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6663 ;;      Params:         0       0       0       0       0       0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0
  6666 ;;      Totals:         0       0       0       0       0       0       0
  6667 ;;Total ram usage:        0 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    2
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_ResetEvent
  6674 ;;		_ProcessDiary
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text34
  6679  003084                     __ptext34:
  6680                           	opt stack 0
  6681  003084                     _GetCurrentEventDiodeNum:
  6682                           	opt stack 27
  6683                           
  6684                           ;incstack = 0
  6685  003084  FFFF               	dw	65535
  6686                           
  6687                           ;main.c: 503: return 60 - _maxDiaryEvents + _currenDiaryEvent.FiredEventNum + 1;
  6688  003086  5072               	movf	__maxDiaryEvents,w,c
  6689  003088  5C69               	subwf	__currenDiaryEvent+1,w,c
  6690  00308A  0F3D               	addlw	61
  6691  00308C  0012               	return		;funcret
  6692  00308E  FFFF               	dw	65535	; errata NOP
  6693  003090                     __end_of_GetCurrentEventDiodeNum:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           intcon	equ	0xFF2
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function _ModbusPoll *****************
  6715 ;; Defined at:
  6716 ;;		line 462 in file "ModbusRtu.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  discreteInpu    2   91[COMRAM] unsigned short 
  6719 ;;  coils           1   93[COMRAM] PTR unsigned short 
  6720 ;;		 -> _MODBUSCoils(2), 
  6721 ;;  inputRegs       2   94[COMRAM] PTR unsigned short 
  6722 ;;		 -> _MODBUSInputRegs(30), 
  6723 ;;  inputRegsCou    1   96[COMRAM] const unsigned char 
  6724 ;;  holdingRegs     2   97[COMRAM] PTR unsigned short 
  6725 ;;		 -> _MODBUSHoldingRegs(30), 
  6726 ;;  holdingRegsC    1   99[COMRAM] const unsigned char 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;  u8exception     1  102[COMRAM] unsigned char 
  6729 ;;  i8state         1  101[COMRAM] unsigned char 
  6730 ;;  u8current       1  100[COMRAM] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      char 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6740 ;;      Params:         9       0       0       0       0       0       0
  6741 ;;      Locals:         3       0       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0
  6743 ;;      Totals:        12       0       0       0       0       0       0
  6744 ;;Total ram usage:       12 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    7
  6747 ;; This function calls:
  6748 ;;		_ModbusBuildException
  6749 ;;		_ModbusGetRxBuffer
  6750 ;;		_ModbusGetRxBufferHeader
  6751 ;;		_ModbusProcess_FC1
  6752 ;;		_ModbusProcess_FC100
  6753 ;;		_ModbusProcess_FC101
  6754 ;;		_ModbusProcess_FC102
  6755 ;;		_ModbusProcess_FC15
  6756 ;;		_ModbusProcess_FC16
  6757 ;;		_ModbusProcess_FC17
  6758 ;;		_ModbusProcess_FC21
  6759 ;;		_ModbusProcess_FC3
  6760 ;;		_ModbusProcess_FC43
  6761 ;;		_ModbusProcess_FC5
  6762 ;;		_ModbusProcess_FC6
  6763 ;;		_ModbusProcess_FC7
  6764 ;;		_ModbusSendTxBuffer
  6765 ;;		_ModbusSetExceptionStatusBit
  6766 ;;		_ModbusValidateRequest
  6767 ;;		_PortAvailable
  6768 ;;		_PortClearReadBuffer
  6769 ;;		_millis
  6770 ;; This function is called by:
  6771 ;;		_main
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text35
  6776  0013C6                     __ptext35:
  6777                           	opt stack 0
  6778  0013C6                     _ModbusPoll:
  6779                           	opt stack 23
  6780                           
  6781                           ;incstack = 0
  6782  0013C6  FFFF               	dw	65535
  6783                           
  6784                           ;ModbusRtu.c: 465: _lastFunction = MB_FC_NONE;
  6785  0013C8  0100               	movlb	0	; () banked
  6786  0013CA  6BE7               	clrf	__lastFunction& (0+255),b
  6787                           
  6788                           ;ModbusRtu.c: 469: _inputRegsCount = inputRegsCount;
  6789  0013CC  C061  F0CE         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6790                           
  6791                           ;ModbusRtu.c: 470: _holdingRegsCount = holdingRegsCount;
  6792  0013D0  C064  F0CD         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;ModbusRtu.c: 475: uint8_t u8current = PortAvailable();
  6796  0013D4  EC48  F018         	call	_PortAvailable	;wreg free
  6797  0013D8  6E65               	movwf	ModbusPoll@u8current,c
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;ModbusRtu.c: 477: if (u8current == 0) return 0;
  6801  0013DA  5065               	movf	ModbusPoll@u8current,w,c
  6802  0013DC  E103               	bnz	l7585
  6803  0013DE                     l7581:
  6804  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  6805                           
  6806                           ; BSR set to: 0
  6807  0013E0  0E00               	movlw	0
  6808  0013E2  D0C7               	goto	l774
  6809  0013E4                     l7585:
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;ModbusRtu.c: 480: if (u8current != _u8lastRec)
  6813  0013E4  51D6               	movf	__u8lastRec& (0+255),w,b
  6814  0013E6  1865               	xorwf	ModbusPoll@u8current,w,c
  6815  0013E8  E012               	bz	l7595
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;ModbusRtu.c: 481: {
  6819                           ;ModbusRtu.c: 482: _u8lastRec = u8current;
  6820  0013EA  C065  F0D6         	movff	ModbusPoll@u8current,__u8lastRec
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;ModbusRtu.c: 483: _u32time = millis() + 5;
  6824  0013EE  0E05               	movlw	5
  6825  0013F0  EC62  F017         	call	_millis	;wreg free
  6826  0013F4  2407               	addwf	?_millis,w,c
  6827  0013F6  0100               	movlb	0	; () banked
  6828  0013F8  6FAA               	movwf	__u32time& (0+255),b
  6829  0013FA  0E00               	movlw	0
  6830  0013FC  2008               	addwfc	?_millis+1,w,c
  6831  0013FE  6FAB               	movwf	(__u32time+1)& (0+255),b
  6832  001400  0E00               	movlw	0
  6833  001402  2009               	addwfc	?_millis+2,w,c
  6834  001404  6FAC               	movwf	(__u32time+2)& (0+255),b
  6835  001406  0E00               	movlw	0
  6836  001408  200A               	addwfc	?_millis+3,w,c
  6837  00140A  6FAD               	movwf	(__u32time+3)& (0+255),b
  6838  00140C  D7E8               	goto	l7581
  6839  00140E                     l7595:
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;ModbusRtu.c: 485: }
  6843                           ;ModbusRtu.c: 486: if (millis() < _u32time)
  6844  00140E  EC62  F017         	call	_millis	;wreg free
  6845  001412  0100               	movlb	0	; () banked
  6846  001414  51AA               	movf	__u32time& (0+255),w,b
  6847  001416  5C07               	subwf	?_millis,w,c
  6848  001418  51AB               	movf	(__u32time+1)& (0+255),w,b
  6849  00141A  5808               	subwfb	?_millis+1,w,c
  6850  00141C  51AC               	movf	(__u32time+2)& (0+255),w,b
  6851  00141E  5809               	subwfb	?_millis+2,w,c
  6852  001420  51AD               	movf	(__u32time+3)& (0+255),w,b
  6853  001422  580A               	subwfb	?_millis+3,w,c
  6854  001424  E3DC               	bnc	l7581
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;ModbusRtu.c: 489: _u8lastRec = 0;
  6858  001426  6BD6               	clrf	__u8lastRec& (0+255),b
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;ModbusRtu.c: 491: _u8lastError = i8state;
  6862  001428  ECC9  F016         	call	_ModbusGetRxBufferHeader	;wreg free
  6863  00142C  6E66               	movwf	ModbusPoll@i8state,c
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;ModbusRtu.c: 492: if (i8state < 4)
  6867  00142E  0E04               	movlw	4
  6868  001430  6066               	cpfslt	ModbusPoll@i8state,c
  6869  001432  D005               	goto	l7611
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;ModbusRtu.c: 493: {
  6873                           ;ModbusRtu.c: 494: PortClearReadBuffer();
  6874  001434  EC34  F018         	call	_PortClearReadBuffer	;wreg free
  6875  001438                     l7607:
  6876  001438  FFFF               	dw	65535	; assembler added errata NOP
  6877                           
  6878                           ;ModbusRtu.c: 495: return i8state;
  6879  00143A  5066               	movf	ModbusPoll@i8state,w,c
  6880  00143C  D09A               	goto	l774
  6881  00143E                     l7611:
  6882  00143E  FFFF               	dw	65535	; assembler added errata NOP
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;ModbusRtu.c: 496: }
  6886                           ;ModbusRtu.c: 498: if (_au8Buffer[ ID ] != _u8id)
  6887  001440  51D5               	movf	__u8id& (0+255),w,b
  6888  001442  0101               	movlb	1	; () banked
  6889  001444  1900               	xorwf	__au8Buffer& (0+255),w,b
  6890  001446  E003               	bz	l7619
  6891                           
  6892                           ; BSR set to: 1
  6893                           ;ModbusRtu.c: 499: {
  6894                           ;ModbusRtu.c: 500: PortClearReadBuffer();
  6895  001448  EC34  F018         	call	_PortClearReadBuffer	;wreg free
  6896  00144C  D7C8               	goto	l7581
  6897  00144E                     l7619:
  6898                           
  6899                           ; BSR set to: 1
  6900                           ;ModbusRtu.c: 502: }
  6901                           ;ModbusRtu.c: 503: i8state = ModbusGetRxBuffer();
  6902  00144E  EC29  F016         	call	_ModbusGetRxBuffer	;wreg free
  6903  001452  6E66               	movwf	ModbusPoll@i8state,c
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;ModbusRtu.c: 505: _u8lastError = i8state;
  6907  001454  EC34  F018         	call	_PortClearReadBuffer	;wreg free
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;ModbusRtu.c: 510: uint8_t u8exception = ModbusValidateRequest();
  6911  001458  EC78  F007         	call	_ModbusValidateRequest	;wreg free
  6912  00145C  6E67               	movwf	ModbusPoll@u8exception,c
  6913                           
  6914                           ;ModbusRtu.c: 511: if (u8exception > 0)
  6915  00145E  5067               	movf	ModbusPoll@u8exception,w,c
  6916  001460  E009               	bz	l7637
  6917                           
  6918                           ;ModbusRtu.c: 512: {
  6919                           ;ModbusRtu.c: 513: if (u8exception != NO_REPLY)
  6920  001462  2867               	incf	ModbusPoll@u8exception,w,c
  6921  001464  E005               	bz	l7633
  6922                           
  6923                           ;ModbusRtu.c: 514: {
  6924                           ;ModbusRtu.c: 515: ModbusBuildException(u8exception);
  6925  001466  5067               	movf	ModbusPoll@u8exception,w,c
  6926  001468  ECC0  F017         	call	_ModbusBuildException
  6927                           
  6928                           ; BSR set to: 1
  6929                           ;ModbusRtu.c: 516: ModbusSendTxBuffer();
  6930  00146C  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  6931  001470                     l7633:
  6932                           
  6933                           ;ModbusRtu.c: 519: return u8exception;
  6934  001470  5067               	movf	ModbusPoll@u8exception,w,c
  6935  001472  D07F               	goto	l774
  6936  001474                     l7637:
  6937                           
  6938                           ;ModbusRtu.c: 523: _u8lastError = 0;
  6939  001474  EC62  F017         	call	_millis	;wreg free
  6940                           
  6941                           ;ModbusRtu.c: 526: if(_au8Buffer[ FUNC ] != MB_FC_READ_EXCEPTION_STATUS)
  6942  001478  0E07               	movlw	7
  6943  00147A  0101               	movlb	1	; () banked
  6944  00147C  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  6945  00147E  E057               	bz	l7705
  6946                           
  6947                           ; BSR set to: 1
  6948                           ;ModbusRtu.c: 527: ModbusSetExceptionStatusBit(0, 0);
  6949  001480  0E00               	movlw	0
  6950  001482  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  6951  001484  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  6952  001488  D052               	goto	l7705
  6953  00148A                     l7643:
  6954                           
  6955                           ; BSR set to: 1
  6956                           ;ModbusRtu.c: 534: return ModbusProcess_FC1(*coils);
  6957  00148A  505E               	movf	ModbusPoll@coils,w,c
  6958  00148C  6ED9               	movwf	fsr2l,c
  6959  00148E  6ADA               	clrf	fsr2h,c
  6960  001490  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  6961  001494  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  6962  001498  EC6D  F00B         	call	_ModbusProcess_FC1	;wreg free
  6963  00149C  D06A               	goto	l774
  6964  00149E                     l7647:
  6965                           
  6966                           ; BSR set to: 1
  6967                           ;ModbusRtu.c: 536: return ModbusProcess_FC1(discreteInputs);
  6968  00149E  C05C  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6969  0014A2  C05D  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6970  0014A6  EC6D  F00B         	call	_ModbusProcess_FC1	;wreg free
  6971  0014AA  D063               	goto	l774
  6972  0014AC                     l7651:
  6973                           
  6974                           ; BSR set to: 1
  6975                           ;ModbusRtu.c: 538: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  6976  0014AC  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6977  0014B0  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6978  0014B4  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6979  0014B8  EC1D  F011         	call	_ModbusProcess_FC3	;wreg free
  6980  0014BC  D05A               	goto	l774
  6981  0014BE                     l7655:
  6982                           
  6983                           ; BSR set to: 1
  6984                           ;ModbusRtu.c: 540: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  6985  0014BE  C05F  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6986  0014C2  C060  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6987  0014C6  C061  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6988  0014CA  EC1D  F011         	call	_ModbusProcess_FC3	;wreg free
  6989  0014CE  D051               	goto	l774
  6990  0014D0                     l7659:
  6991                           
  6992                           ; BSR set to: 1
  6993                           ;ModbusRtu.c: 542: return ModbusProcess_FC5(coils);
  6994  0014D0  505E               	movf	ModbusPoll@coils,w,c
  6995  0014D2  EC73  F012         	call	_ModbusProcess_FC5
  6996  0014D6  D04D               	goto	l774
  6997  0014D8                     l7663:
  6998                           
  6999                           ; BSR set to: 1
  7000                           ;ModbusRtu.c: 544: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7001  0014D8  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7002  0014DC  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7003  0014E0  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7004  0014E4  ECA4  F014         	call	_ModbusProcess_FC6	;wreg free
  7005  0014E8  D044               	goto	l774
  7006  0014EA                     l7667:
  7007                           
  7008                           ; BSR set to: 1
  7009                           ;ModbusRtu.c: 546: return ModbusProcess_FC7();
  7010  0014EA  EC06  F018         	call	_ModbusProcess_FC7	;wreg free
  7011  0014EE  D041               	goto	l774
  7012  0014F0                     l7671:
  7013                           
  7014                           ; BSR set to: 1
  7015                           ;ModbusRtu.c: 548: return ModbusProcess_FC15(coils);
  7016  0014F0  505E               	movf	ModbusPoll@coils,w,c
  7017  0014F2  ECA4  F00D         	call	_ModbusProcess_FC15
  7018  0014F6  D03D               	goto	l774
  7019  0014F8                     l7675:
  7020                           
  7021                           ; BSR set to: 1
  7022                           ;ModbusRtu.c: 550: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7023  0014F8  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7024  0014FC  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7025  001500  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7026  001504  ECFD  F00F         	call	_ModbusProcess_FC16	;wreg free
  7027  001508  D034               	goto	l774
  7028  00150A                     l7679:
  7029                           
  7030                           ; BSR set to: 1
  7031                           ;ModbusRtu.c: 552: return ModbusProcess_FC17();
  7032  00150A  EC0C  F014         	call	_ModbusProcess_FC17	;wreg free
  7033  00150E  D031               	goto	l774
  7034  001510                     l7683:
  7035                           
  7036                           ; BSR set to: 1
  7037                           ;ModbusRtu.c: 554: return ModbusProcess_FC21();
  7038  001510  EC78  F011         	call	_ModbusProcess_FC21	;wreg free
  7039  001514  D02E               	goto	l774
  7040  001516                     l7687:
  7041                           
  7042                           ; BSR set to: 1
  7043                           ;ModbusRtu.c: 556: return ModbusProcess_FC43();
  7044  001516  ECBC  F00A         	call	_ModbusProcess_FC43	;wreg free
  7045  00151A  D02B               	goto	l774
  7046  00151C                     l7691:
  7047                           
  7048                           ; BSR set to: 1
  7049                           ;ModbusRtu.c: 558: return ModbusProcess_FC100();
  7050  00151C  EC25  F00F         	call	_ModbusProcess_FC100	;wreg free
  7051  001520  D028               	goto	l774
  7052  001522                     l7695:
  7053                           
  7054                           ; BSR set to: 1
  7055                           ;ModbusRtu.c: 560: return ModbusProcess_FC101();
  7056  001522  EC03  F017         	call	_ModbusProcess_FC101	;wreg free
  7057  001526  D025               	goto	l774
  7058  001528                     l7699:
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;ModbusRtu.c: 562: return ModbusProcess_FC102();
  7062  001528  ECEC  F017         	call	_ModbusProcess_FC102	;wreg free
  7063  00152C  D022               	goto	l774
  7064  00152E                     l7705:
  7065  00152E  FFFF               	dw	65535	; assembler added errata NOP
  7066  001530  0101               	movlb	1	; () banked
  7067  001532  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7068                           
  7069                           ; Switch size 1, requested type "speed"
  7070                           ; Number of cases is 15, Range of values is 1 to 102
  7071                           ; switch strategies available:
  7072                           ; Name         Instructions Cycles
  7073                           ; simple_byte           46    24 (average)
  7074                           ;	Chosen strategy is simple_byte
  7075  001534  0A01               	xorlw	1	; case 1
  7076  001536  E0A9               	bz	l7643
  7077  001538  0A03               	xorlw	3	; case 2
  7078  00153A  E0B1               	bz	l7647
  7079  00153C  0A01               	xorlw	1	; case 3
  7080  00153E  E0B6               	bz	l7651
  7081  001540  0A07               	xorlw	7	; case 4
  7082  001542  E0BD               	bz	l7655
  7083  001544  0A01               	xorlw	1	; case 5
  7084  001546  E0C4               	bz	l7659
  7085  001548  0A03               	xorlw	3	; case 6
  7086  00154A  E0C6               	bz	l7663
  7087  00154C  0A01               	xorlw	1	; case 7
  7088  00154E  E0CD               	bz	l7667
  7089  001550  0A08               	xorlw	8	; case 15
  7090  001552  E0CE               	bz	l7671
  7091  001554  0A1F               	xorlw	31	; case 16
  7092  001556  E0D0               	bz	l7675
  7093  001558  0A01               	xorlw	1	; case 17
  7094  00155A  E0D7               	bz	l7679
  7095  00155C  0A04               	xorlw	4	; case 21
  7096  00155E  E0D8               	bz	l7683
  7097  001560  0A3E               	xorlw	62	; case 43
  7098  001562  E0D9               	bz	l7687
  7099  001564  0A4F               	xorlw	79	; case 100
  7100  001566  E0DA               	bz	l7691
  7101  001568  0A01               	xorlw	1	; case 101
  7102  00156A  E0DB               	bz	l7695
  7103  00156C  0A03               	xorlw	3	; case 102
  7104  00156E  E0DC               	bz	l7699
  7105  001570  D763               	goto	l7607
  7106  001572                     l774:
  7107  001572  FFFF               	dw	65535	; assembler added errata NOP
  7108  001574  0012               	return		;funcret
  7109  001576  FFFF               	dw	65535	; errata NOP
  7110  001578                     __end_of_ModbusPoll:
  7111                           	opt stack 0
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           intcon	equ	0xFF2
  7119                           postinc0	equ	0xFEE
  7120                           wreg	equ	0xFE8
  7121                           postdec1	equ	0xFE5
  7122                           fsr1h	equ	0xFE2
  7123                           fsr1l	equ	0xFE1
  7124                           indf2	equ	0xFDF
  7125                           postinc2	equ	0xFDE
  7126                           postdec2	equ	0xFDD
  7127                           fsr2h	equ	0xFDA
  7128                           fsr2l	equ	0xFD9
  7129                           status	equ	0xFD8
  7130                           
  7131 ;; *************** function _PortClearReadBuffer *****************
  7132 ;; Defined at:
  7133 ;;		line 77 in file "interrupts.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : E/0
  7144 ;;		On exit  : F/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7147 ;;      Params:         0       0       0       0       0       0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0
  7150 ;;      Totals:         0       0       0       0       0       0       0
  7151 ;;Total ram usage:        0 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    3
  7154 ;; This function calls:
  7155 ;;		_InitUartBuffer
  7156 ;; This function is called by:
  7157 ;;		_ModbusPoll
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text36
  7162  003068                     __ptext36:
  7163                           	opt stack 0
  7164  003068                     _PortClearReadBuffer:
  7165                           	opt stack 26
  7166                           
  7167                           ;incstack = 0
  7168  003068  FFFF               	dw	65535
  7169                           
  7170                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  7171  00306A  9EF2               	bcf	intcon,7,c	;volatile
  7172                           
  7173                           ;interrupts.c: 80: InitUartBuffer();
  7174  00306C  EC3B  F018         	call	_InitUartBuffer	;wreg free
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  7178  003070  8EF2               	bsf	intcon,7,c	;volatile
  7179                           
  7180                           ; BSR set to: 0
  7181  003072  0012               	return		;funcret
  7182  003074  FFFF               	dw	65535	; errata NOP
  7183  003076                     __end_of_PortClearReadBuffer:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _ModbusValidateRequest *****************
  7205 ;; Defined at:
  7206 ;;		line 783 in file "ModbusRtu.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7211 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7212 ;;  readDevId       1   37[COMRAM] unsigned char 
  7213 ;;  i               1   36[COMRAM] unsigned char 
  7214 ;;  u16regs         2   39[COMRAM] unsigned short 
  7215 ;;  u16count        2   34[COMRAM] unsigned short 
  7216 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7217 ;;  u8regs          1   38[COMRAM] unsigned char 
  7218 ;;  isSupported     1   33[COMRAM] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      unsigned char 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : F/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7228 ;;      Params:         0       0       0       0       0       0       0
  7229 ;;      Locals:        18       0       0       0       0       0       0
  7230 ;;      Temps:          4       0       0       0       0       0       0
  7231 ;;      Totals:        22       0       0       0       0       0       0
  7232 ;;Total ram usage:       22 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    3
  7235 ;; This function calls:
  7236 ;;		_ModbusCalcCRC
  7237 ;; This function is called by:
  7238 ;;		_ModbusPoll
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text37
  7243  000EF0                     __ptext37:
  7244                           	opt stack 0
  7245  000EF0                     _ModbusValidateRequest:
  7246                           	opt stack 26
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;incstack = 0
  7250  000EF0  FFFF               	dw	65535
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;ModbusRtu.c: 786: uint16_t u16MsgCRC =
  7254                           ;ModbusRtu.c: 787: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7255                           ;ModbusRtu.c: 788: | _au8Buffer[_u8BufferSize - 1]);
  7256  000EF2  0EFE               	movlw	low (__au8Buffer+65534)
  7257  000EF4  2474               	addwf	__u8BufferSize,w,c
  7258  000EF6  6ED9               	movwf	fsr2l,c
  7259  000EF8  6ADA               	clrf	fsr2h,c
  7260  000EFA  0E00               	movlw	high (__au8Buffer+65534)
  7261  000EFC  22DA               	addwfc	fsr2h,f,c
  7262  000EFE  50DF               	movf	indf2,w,c
  7263  000F00  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7264  000F02  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7265  000F04  0EFF               	movlw	low (__au8Buffer+65535)
  7266  000F06  2474               	addwf	__u8BufferSize,w,c
  7267  000F08  6ED9               	movwf	fsr2l,c
  7268  000F0A  6ADA               	clrf	fsr2h,c
  7269  000F0C  0E00               	movlw	high (__au8Buffer+65535)
  7270  000F0E  22DA               	addwfc	fsr2h,f,c
  7271  000F10  50DF               	movf	indf2,w,c
  7272  000F12  1014               	iorwf	??_ModbusValidateRequest,w,c
  7273  000F14  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7274  000F16  5015               	movf	??_ModbusValidateRequest+1,w,c
  7275  000F18  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;ModbusRtu.c: 790: {
  7279                           ;ModbusRtu.c: 791: _u16errCnt++;
  7280  000F1A  5074               	movf	__u8BufferSize,w,c
  7281  000F1C  0FFE               	addlw	254
  7282  000F1E  ECD2  F013         	call	_ModbusCalcCRC
  7283  000F22  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7284  000F24  1807               	xorwf	?_ModbusCalcCRC,w,c
  7285  000F26  E103               	bnz	u5730
  7286  000F28  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7287  000F2A  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7288  000F2C  E002               	bz	l836
  7289  000F2E                     u5730:
  7290                           
  7291                           ;ModbusRtu.c: 792: return NO_REPLY;
  7292  000F2E  0EFF               	movlw	255
  7293  000F30  D11B               	goto	l837
  7294  000F32                     l836:
  7295                           
  7296                           ;ModbusRtu.c: 793: }
  7297                           ;ModbusRtu.c: 796: bool isSupported = 0;
  7298  000F32  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7299                           
  7300                           ;ModbusRtu.c: 797: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7301  000F34  6A25               	clrf	ModbusValidateRequest@i,c
  7302  000F36                     l6679:
  7303  000F36  FFFF               	dw	65535	; assembler added errata NOP
  7304                           
  7305                           ;ModbusRtu.c: 798: {
  7306                           ;ModbusRtu.c: 799: if (fctsupported[i] == _au8Buffer[FUNC])
  7307  000F38  5025               	movf	ModbusValidateRequest@i,w,c
  7308  000F3A  0F01               	addlw	low _fctsupported
  7309  000F3C  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7310  000F3E  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7311  000F42                     	if	1	;There is more than 1 active tblptr byte
  7312  000F42  0E06               	movlw	high __smallconst
  7313  000F44  6EF7               	movwf	tblptrh,c
  7314  000F46                     	endif
  7315  000F46                     	if	0	;tblptru may be non-zero
  7316  000F46                     	endif
  7317  000F46                     	if	0	;tblptru may be non-zero
  7318  000F46                     	endif
  7319  000F46  0008               	tblrd		*
  7320  000F48  FFFF               	dw	65535	; errata NOP
  7321  000F4A  50F5               	movf	tablat,w,c
  7322  000F4C  0101               	movlb	1	; () banked
  7323  000F4E  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7324  000F50  E103               	bnz	l6683
  7325                           
  7326                           ; BSR set to: 1
  7327                           ;ModbusRtu.c: 800: {
  7328                           ;ModbusRtu.c: 801: isSupported = 1;
  7329  000F52  0E01               	movlw	1
  7330  000F54  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7331                           
  7332                           ;ModbusRtu.c: 802: break;
  7333  000F56  D004               	goto	l6687
  7334  000F58                     l6683:
  7335                           
  7336                           ; BSR set to: 1
  7337  000F58  2A25               	incf	ModbusValidateRequest@i,f,c
  7338                           
  7339                           ; BSR set to: 1
  7340  000F5A  0E0E               	movlw	14
  7341  000F5C  6425               	cpfsgt	ModbusValidateRequest@i,c
  7342  000F5E  D7EB               	goto	l6679
  7343  000F60                     l6687:
  7344  000F60  FFFF               	dw	65535	; assembler added errata NOP
  7345                           
  7346                           ; BSR set to: 1
  7347                           ;ModbusRtu.c: 806: {
  7348                           ;ModbusRtu.c: 807: _u16errCnt++;
  7349  000F62  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7350  000F64  E102               	bnz	l841
  7351  000F66                     l6689:
  7352                           
  7353                           ; BSR set to: 1
  7354                           ;ModbusRtu.c: 808: return EXC_FUNC_CODE;
  7355  000F66  0E01               	movlw	1
  7356  000F68  D0FF               	goto	l837
  7357  000F6A                     l841:
  7358                           
  7359                           ; BSR set to: 1
  7360                           ;ModbusRtu.c: 813: uint16_t u16count = 0;
  7361  000F6A  6A23               	clrf	ModbusValidateRequest@u16count,c
  7362  000F6C  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7363                           
  7364                           ;ModbusRtu.c: 814: uint8_t u8regs;
  7365                           ;ModbusRtu.c: 815: switch (_au8Buffer[ FUNC ])
  7366  000F6E  D0D4               	goto	l6815
  7367  000F70                     l6693:
  7368                           
  7369                           ; BSR set to: 1
  7370                           ;ModbusRtu.c: 818: case MB_FC_READ_DISCRETE_INPUT:
  7371                           ;ModbusRtu.c: 819: case MB_FC_WRITE_MULTIPLE_COILS:
  7372                           ;ModbusRtu.c: 821: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7373  000F70  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7374  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7375  000F74  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7376  000F76  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7377  000F78  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7378                           
  7379                           ;ModbusRtu.c: 822: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7380  000F7C  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7381  000F7E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7382  000F80  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7383  000F82  6E23               	movwf	ModbusValidateRequest@u16count,c
  7384  000F84  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7385                           
  7386                           ; BSR set to: 1
  7387                           ;ModbusRtu.c: 823: if (u16count > 16)
  7388  000F88  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7389  000F8A  E103               	bnz	u5770
  7390  000F8C  0E11               	movlw	17
  7391  000F8E  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7392  000F90  E302               	bnc	l6701
  7393  000F92                     u5770:
  7394  000F92                     l6697:
  7395                           
  7396                           ; BSR set to: 1
  7397                           ;ModbusRtu.c: 824: return EXC_REGS_QUANT;
  7398  000F92  0E03               	movlw	3
  7399  000F94  D0E9               	goto	l837
  7400  000F96                     l6701:
  7401                           
  7402                           ; BSR set to: 1
  7403                           ;ModbusRtu.c: 825: if (u16regs > 15 || u16regs + u16count > 16)
  7404  000F96  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7405  000F98  E110               	bnz	l6705
  7406  000F9A  0E10               	movlw	16
  7407  000F9C  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7408  000F9E  E20D               	bc	l6705
  7409                           
  7410                           ; BSR set to: 1
  7411  000FA0  5023               	movf	ModbusValidateRequest@u16count,w,c
  7412  000FA2  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7413  000FA4  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7414  000FA6  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7415  000FA8  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7416  000FAA  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7417  000FAC  5015               	movf	??_ModbusValidateRequest+1,w,c
  7418  000FAE  E105               	bnz	u5790
  7419  000FB0  0E11               	movlw	17
  7420  000FB2  5C14               	subwf	??_ModbusValidateRequest,w,c
  7421  000FB4                     L11:
  7422  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  7423  000FB6  E201 D0D3          	bnc	l850
  7424  000FBA                     u5790:
  7425  000FBA                     l6705:
  7426  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  7427                           
  7428                           ;ModbusRtu.c: 826: return EXC_ADDR_RANGE;
  7429  000FBC  0E02               	movlw	2
  7430  000FBE  D0D4               	goto	l837
  7431  000FC0                     l6709:
  7432                           
  7433                           ; BSR set to: 1
  7434                           ;ModbusRtu.c: 829: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7435  000FC0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7436  000FC2  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7437  000FC4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7438  000FC6  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7439  000FC8  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7440                           
  7441                           ; BSR set to: 1
  7442                           ;ModbusRtu.c: 830: u8regs = _au8Buffer[ NB_HI ];
  7443  000FCC  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7444                           
  7445                           ;ModbusRtu.c: 831: if (u8regs != 0x00 && u8regs != 0xFF)
  7446  000FD0  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7447  000FD2  E002               	bz	l6719
  7448                           
  7449                           ; BSR set to: 1
  7450  000FD4  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7451  000FD6  E1DD               	bnz	l6697
  7452  000FD8                     l6719:
  7453                           
  7454                           ; BSR set to: 1
  7455                           ;ModbusRtu.c: 833: if (u16regs > 15)
  7456  000FD8  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7457  000FDA  E1EF               	bnz	l6705
  7458  000FDC  0E10               	movlw	16
  7459  000FDE  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7460  000FE0  D7E9               	goto	L11
  7461  000FE2                     l6725:
  7462                           
  7463                           ; BSR set to: 1
  7464                           ;ModbusRtu.c: 837: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7465  000FE2  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7466  000FE4  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7467  000FE6  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7468  000FE8  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7469  000FEA  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7470  000FEE                     l6727:
  7471  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  7472                           
  7473                           ; BSR set to: 1
  7474                           ;ModbusRtu.c: 838: u8regs = (uint8_t) u16regs;
  7475  000FF0  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7476                           
  7477                           ; BSR set to: 1
  7478                           ;ModbusRtu.c: 839: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7479  000FF4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7480  000FF6  0100               	movlb	0	; () banked
  7481  000FF8  5DCD               	subwf	__holdingRegsCount& (0+255),w,b
  7482  000FFA  FFFF               	dw	65535	; assembler added errata NOP
  7483  000FFC  E3DE               	bnc	l6705
  7484  000FFE  D0B0               	goto	l850
  7485  001000                     l6735:
  7486                           
  7487                           ; BSR set to: 1
  7488                           ;ModbusRtu.c: 842: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7489  001000  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7490  001002  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7491  001004  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7492  001006  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7493  001008  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7494                           
  7495                           ; BSR set to: 1
  7496                           ;ModbusRtu.c: 843: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7497  00100C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7498  00100E  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7499  001012  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7500  001014  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7501  001018  6A14               	clrf	??_ModbusValidateRequest,c
  7502  00101A  1214               	iorwf	??_ModbusValidateRequest,f,c
  7503  00101C  5014               	movf	??_ModbusValidateRequest,w,c
  7504  00101E  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7505  001020  5015               	movf	??_ModbusValidateRequest+1,w,c
  7506  001022  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7507                           
  7508                           ; BSR set to: 1
  7509                           ;ModbusRtu.c: 844: u8regs = (uint8_t) u16regs;
  7510  001024  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7511                           
  7512                           ; BSR set to: 1
  7513                           ;ModbusRtu.c: 845: if (u8regs > _inputRegsCount)
  7514  001028  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7515  00102A  0100               	movlb	0	; () banked
  7516  00102C  5DCE               	subwf	__inputRegsCount& (0+255),w,b
  7517  00102E  D7E5               	goto	L12
  7518  001030                     l6747:
  7519                           
  7520                           ; BSR set to: 1
  7521                           ;ModbusRtu.c: 849: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7522                           ;ModbusRtu.c: 850: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7523  001030  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7524  001032  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7525  001034  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7526  001036  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7527  001038  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7528                           
  7529                           ; BSR set to: 1
  7530                           ;ModbusRtu.c: 851: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7531  00103C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7532  00103E  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7533  001042  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7534  001044  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7535  001048  6A14               	clrf	??_ModbusValidateRequest,c
  7536  00104A  1214               	iorwf	??_ModbusValidateRequest,f,c
  7537  00104C  5014               	movf	??_ModbusValidateRequest,w,c
  7538  00104E  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7539  001050  5015               	movf	??_ModbusValidateRequest+1,w,c
  7540  001052  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7541  001054  D7CC               	goto	l6727
  7542  001056                     l6759:
  7543                           
  7544                           ; BSR set to: 1
  7545                           ;ModbusRtu.c: 860: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7546  001056  0E06               	movlw	6
  7547  001058  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7548  00105A  E1AF               	bnz	l6705
  7549                           
  7550                           ; BSR set to: 1
  7551                           ;ModbusRtu.c: 863: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7552  00105C  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7553  00105E  E1AD               	bnz	l6705
  7554                           
  7555                           ; BSR set to: 1
  7556  001060  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7557  001062  E1AB               	bnz	l6705
  7558                           
  7559                           ; BSR set to: 1
  7560                           ;ModbusRtu.c: 866: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7561  001064  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7562  001066  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7563  00106A  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7564  00106C  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7565  001070  6A14               	clrf	??_ModbusValidateRequest,c
  7566  001072  1214               	iorwf	??_ModbusValidateRequest,f,c
  7567  001074  0E00               	movlw	0
  7568  001076  90D8               	bcf	status,0,c
  7569  001078  3614               	rlcf	??_ModbusValidateRequest,f,c
  7570  00107A  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7571  00107C  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7572  001080  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7573  001084  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7574  001086  0EFF               	movlw	-1
  7575  001088  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7576  00108A  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7577                           
  7578                           ;ModbusRtu.c: 867: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7579  00108C  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7580  00108E  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7581  001092  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7582  001094  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7583  001098  6A14               	clrf	??_ModbusValidateRequest,c
  7584  00109A  1214               	iorwf	??_ModbusValidateRequest,f,c
  7585  00109C  0E00               	movlw	0
  7586  00109E  90D8               	bcf	status,0,c
  7587  0010A0  3614               	rlcf	??_ModbusValidateRequest,f,c
  7588  0010A2  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7589  0010A4  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7590  0010A8  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7591  0010AC  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7592  0010AE  0EFF               	movlw	-1
  7593  0010B0  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7594  0010B2  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7595                           
  7596                           ;ModbusRtu.c: 869: if (startAddrBytes + recLenBytes >= 256)
  7597  0010B4  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7598  0010B6  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7599  0010B8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7600  0010BA  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7601  0010BC  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7602  0010BE  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7603  0010C0  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7604  0010C2  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7605  0010C4  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7606  0010C6  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7607  0010C8  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7608  0010CA  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7609  0010CC  5017               	movf	??_ModbusValidateRequest+3,w,c
  7610  0010CE  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7611  0010D0  E102               	bnz	u5890
  7612  0010D2  0415               	decf	??_ModbusValidateRequest+1,w,c
  7613  0010D4  D76F               	goto	L11
  7614  0010D6                     u5890:
  7615  0010D6  D771               	goto	l6705
  7616  0010D8                     l6779:
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;ModbusRtu.c: 873: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  7620  0010D8  0E0E               	movlw	14
  7621  0010DA  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7622  0010DC  E001 D743          	bnz	l6689
  7623                           
  7624                           ; BSR set to: 1
  7625                           ;ModbusRtu.c: 875: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  7626  0010E0  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  7627                           
  7628                           ; BSR set to: 1
  7629                           ;ModbusRtu.c: 876: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  7630  0010E4  0426               	decf	ModbusValidateRequest@readDevId,w,c
  7631  0010E6  E007               	bz	l6795
  7632                           
  7633                           ; BSR set to: 1
  7634  0010E8  0E02               	movlw	2
  7635  0010EA  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7636  0010EC  E004               	bz	l6795
  7637                           
  7638                           ; BSR set to: 1
  7639  0010EE  0E04               	movlw	4
  7640  0010F0  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7641  0010F2  E001 D74E          	bnz	l6697
  7642  0010F6                     l6795:
  7643                           
  7644                           ; BSR set to: 1
  7645                           ;ModbusRtu.c: 878: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  7646  0010F6  0E04               	movlw	4
  7647  0010F8  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7648  0010FA  E132               	bnz	l850
  7649                           
  7650                           ; BSR set to: 1
  7651  0010FC  0E06               	movlw	6
  7652  0010FE  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  7653  001100  D02F               	goto	l850
  7654  001102  D75B               	goto	l6705
  7655  001104                     l6803:
  7656                           
  7657                           ; BSR set to: 1
  7658                           ;ModbusRtu.c: 883: if(_au8Buffer[COM_COM_ID] != 0x7F
  7659                           ;ModbusRtu.c: 884: && _au8Buffer[COM_COM_ID] != 0x01
  7660                           ;ModbusRtu.c: 885: && _au8Buffer[COM_COM_ID] != 0x10)
  7661  001104  0E7F               	movlw	127
  7662  001106  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7663  001108  E02B               	bz	l850
  7664                           
  7665                           ; BSR set to: 1
  7666  00110A  0502               	decf	(__au8Buffer+2)& (0+255),w,b
  7667  00110C  E029               	bz	l850
  7668                           
  7669                           ; BSR set to: 1
  7670  00110E  0E10               	movlw	16
  7671  001110  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7672  001112  E001 D73E          	bnz	l6697
  7673  001116  D024               	goto	l850
  7674  001118                     l6815:
  7675  001118  FFFF               	dw	65535	; assembler added errata NOP
  7676                           
  7677                           ; BSR set to: 1
  7678  00111A  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7679                           
  7680                           ; Switch size 1, requested type "speed"
  7681                           ; Number of cases is 14, Range of values is 1 to 102
  7682                           ; switch strategies available:
  7683                           ; Name         Instructions Cycles
  7684                           ; simple_byte           43    22 (average)
  7685                           ;	Chosen strategy is simple_byte
  7686  00111C  0A01               	xorlw	1	; case 1
  7687  00111E  E101 D727          	bz	l6693
  7688  001122  0A03               	xorlw	3	; case 2
  7689  001124  E101 D724          	bz	l6693
  7690  001128  0A01               	xorlw	1	; case 3
  7691  00112A  E082               	bz	l6747
  7692  00112C  0A07               	xorlw	7	; case 4
  7693  00112E  E101 D767          	bz	l6735
  7694  001132  0A01               	xorlw	1	; case 5
  7695  001134  E101 D744          	bz	l6709
  7696  001138  0A03               	xorlw	3	; case 6
  7697  00113A  E101 D752          	bz	l6725
  7698  00113E  0A09               	xorlw	9	; case 15
  7699  001140  E101 D716          	bz	l6693
  7700  001144  0A1F               	xorlw	31	; case 16
  7701  001146  E101 D773          	bz	l6747
  7702  00114A  0A01               	xorlw	1	; case 17
  7703  00114C  E009               	bz	l850
  7704  00114E  0A04               	xorlw	4	; case 21
  7705  001150  E082               	bz	l6759
  7706  001152  0A3E               	xorlw	62	; case 43
  7707  001154  E0C1               	bz	l6779
  7708  001156  0A4F               	xorlw	79	; case 100
  7709  001158  E0D5               	bz	l6803
  7710  00115A  0A01               	xorlw	1	; case 101
  7711  00115C  A4D8               	btfss	status,2,c
  7712  00115E  0A03               	xorlw	3	; case 102
  7713  001160                     l850:
  7714  001160  FFFF               	dw	65535	; assembler added errata NOP
  7715                           
  7716                           ;ModbusRtu.c: 893: _lastFunction = _au8Buffer[ FUNC ];
  7717  001162  C101  F0E7         	movff	__au8Buffer+1,__lastFunction
  7718                           
  7719                           ;ModbusRtu.c: 894: return 0;
  7720  001166  0E00               	movlw	0
  7721  001168                     l837:
  7722  001168  FFFF               	dw	65535	; assembler added errata NOP
  7723  00116A  0012               	return		;funcret
  7724  00116C  FFFF               	dw	65535	; errata NOP
  7725  00116E                     __end_of_ModbusValidateRequest:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           postdec1	equ	0xFE5
  7737                           fsr1h	equ	0xFE2
  7738                           fsr1l	equ	0xFE1
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _ModbusProcess_FC7 *****************
  7747 ;; Defined at:
  7748 ;;		line 1078 in file "ModbusRtu.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;		None
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  1    wreg      unsigned char 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/1
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7762 ;;      Params:         0       0       0       0       0       0       0
  7763 ;;      Locals:         1       0       0       0       0       0       0
  7764 ;;      Temps:          0       0       0       0       0       0       0
  7765 ;;      Totals:         1       0       0       0       0       0       0
  7766 ;;Total ram usage:        1 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    4
  7769 ;; This function calls:
  7770 ;;		_ModbusSendTxBuffer
  7771 ;; This function is called by:
  7772 ;;		_ModbusPoll
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text38
  7777  00300C                     __ptext38:
  7778                           	opt stack 0
  7779  00300C                     _ModbusProcess_FC7:
  7780                           	opt stack 25
  7781                           
  7782                           ;incstack = 0
  7783  00300C  FFFF               	dw	65535
  7784                           
  7785                           ;ModbusRtu.c: 1080: _au8Buffer[ 2 ] = _exceptionStatus;
  7786  00300E  C0CC  F102         	movff	__exceptionStatus,__au8Buffer+2
  7787                           
  7788                           ;ModbusRtu.c: 1081: _u8BufferSize = 3;
  7789  003012  0E03               	movlw	3
  7790  003014  6E74               	movwf	__u8BufferSize,c
  7791                           
  7792                           ;ModbusRtu.c: 1082: uint8_t u8CopyBufferSize = _u8BufferSize;
  7793  003016  C074  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  7794                           
  7795                           ;ModbusRtu.c: 1083: ModbusSendTxBuffer();
  7796  00301A  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  7797                           
  7798                           ;ModbusRtu.c: 1084: return u8CopyBufferSize;
  7799  00301E  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  7800  003020  0012               	return		;funcret
  7801  003022  FFFF               	dw	65535	; errata NOP
  7802  003024                     __end_of_ModbusProcess_FC7:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           postinc0	equ	0xFEE
  7812                           wreg	equ	0xFE8
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function _ModbusProcess_FC6 *****************
  7824 ;; Defined at:
  7825 ;;		line 1058 in file "ModbusRtu.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7828 ;;		 -> _MODBUSHoldingRegs(30), 
  7829 ;;  u8size          1   23[COMRAM] unsigned char 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  u16add          2   29[COMRAM] unsigned short 
  7832 ;;  u16val          2   26[COMRAM] unsigned short 
  7833 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      unsigned char 
  7836 ;; Registers used:
  7837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/1
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7843 ;;      Params:         3       0       0       0       0       0       0
  7844 ;;      Locals:         5       0       0       0       0       0       0
  7845 ;;      Temps:          2       0       0       0       0       0       0
  7846 ;;      Totals:        10       0       0       0       0       0       0
  7847 ;;Total ram usage:       10 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		_ModbusSendTxBuffer
  7852 ;; This function is called by:
  7853 ;;		_ModbusPoll
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text39
  7858  002948                     __ptext39:
  7859                           	opt stack 0
  7860  002948                     _ModbusProcess_FC6:
  7861                           	opt stack 25
  7862                           
  7863                           ;incstack = 0
  7864  002948  FFFF               	dw	65535
  7865                           
  7866                           ;ModbusRtu.c: 1060: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7867  00294A  0101               	movlb	1	; () banked
  7868  00294C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7869  00294E  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7870  002950  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7871  002952  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7872  002954  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7873                           
  7874                           ; BSR set to: 1
  7875                           ;ModbusRtu.c: 1061: _lastAddress = u16add;
  7876  002958  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7877  00295C  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7878                           
  7879                           ;ModbusRtu.c: 1062: _lastCount = 1;
  7880  002960  0100               	movlb	0	; () banked
  7881  002962  6BC1               	clrf	(__lastCount+1)& (0+255),b
  7882  002964  0E01               	movlw	1
  7883  002966  6FC0               	movwf	__lastCount& (0+255),b
  7884                           
  7885                           ;ModbusRtu.c: 1063: uint8_t u8CopyBufferSize;
  7886                           ;ModbusRtu.c: 1064: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7887  002968  0101               	movlb	1	; () banked
  7888  00296A  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7889  00296C  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7890  00296E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7891  002970  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7892  002972  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7893                           
  7894                           ; BSR set to: 1
  7895                           ;ModbusRtu.c: 1066: regs[ u16add ] = u16val;
  7896  002976  90D8               	bcf	status,0,c
  7897  002978  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7898  00297A  6ED9               	movwf	fsr2l,c
  7899  00297C  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7900  00297E  6EDA               	movwf	fsr2h,c
  7901  002980  5016               	movf	ModbusProcess_FC6@regs,w,c
  7902  002982  26D9               	addwf	fsr2l,f,c
  7903  002984  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7904  002986  22DA               	addwfc	fsr2h,f,c
  7905  002988  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7906  00298C  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7907                           
  7908                           ; BSR set to: 1
  7909                           ;ModbusRtu.c: 1069: _u8BufferSize = RESPONSE_SIZE;
  7910  002990  0E06               	movlw	6
  7911  002992  6E74               	movwf	__u8BufferSize,c
  7912                           
  7913                           ; BSR set to: 1
  7914                           ;ModbusRtu.c: 1071: u8CopyBufferSize = _u8BufferSize + 2;
  7915  002994  5074               	movf	__u8BufferSize,w,c
  7916  002996  0F02               	addlw	2
  7917  002998  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7918                           
  7919                           ; BSR set to: 1
  7920                           ;ModbusRtu.c: 1072: ModbusSendTxBuffer();
  7921  00299A  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  7922                           
  7923                           ;ModbusRtu.c: 1074: return u8CopyBufferSize;
  7924  00299E  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7925  0029A0  0012               	return		;funcret
  7926  0029A2  FFFF               	dw	65535	; errata NOP
  7927  0029A4                     __end_of_ModbusProcess_FC6:
  7928                           	opt stack 0
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           intcon	equ	0xFF2
  7936                           postinc0	equ	0xFEE
  7937                           wreg	equ	0xFE8
  7938                           postdec1	equ	0xFE5
  7939                           fsr1h	equ	0xFE2
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           fsr2h	equ	0xFDA
  7945                           fsr2l	equ	0xFD9
  7946                           status	equ	0xFD8
  7947                           
  7948 ;; *************** function _ModbusProcess_FC5 *****************
  7949 ;; Defined at:
  7950 ;;		line 1023 in file "ModbusRtu.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  regs            1    wreg     PTR unsigned short 
  7953 ;;		 -> _MODBUSCoils(2), 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  regs            1   29[COMRAM] PTR unsigned short 
  7956 ;;		 -> _MODBUSCoils(2), 
  7957 ;;  u16coil         2   27[COMRAM] unsigned short 
  7958 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  7959 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      unsigned char 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/1
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7969 ;;      Params:         0       0       0       0       0       0       0
  7970 ;;      Locals:         5       0       0       0       0       0       0
  7971 ;;      Temps:          5       0       0       0       0       0       0
  7972 ;;      Totals:        10       0       0       0       0       0       0
  7973 ;;Total ram usage:       10 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    4
  7976 ;; This function calls:
  7977 ;;		_ModbusSendTxBuffer
  7978 ;; This function is called by:
  7979 ;;		_ModbusPoll
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text40
  7984  0024E6                     __ptext40:
  7985                           	opt stack 0
  7986  0024E6                     _ModbusProcess_FC5:
  7987                           	opt stack 25
  7988                           
  7989                           ;incstack = 0
  7990  0024E6  FFFF               	dw	65535
  7991                           
  7992                           ;ModbusProcess_FC5@regs stored from wreg
  7993  0024E8  6E1E               	movwf	ModbusProcess_FC5@regs,c
  7994                           
  7995                           ;ModbusRtu.c: 1026: uint8_t u8currentBit;
  7996                           ;ModbusRtu.c: 1027: uint8_t u8CopyBufferSize;
  7997                           ;ModbusRtu.c: 1028: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  7998  0024EA  0101               	movlb	1	; () banked
  7999  0024EC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8000  0024EE  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8001  0024F0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8002  0024F2  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8003  0024F4  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8004                           
  8005                           ; BSR set to: 1
  8006                           ;ModbusRtu.c: 1029: _lastAddress = u16coil;
  8007  0024F8  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8008  0024FC  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8009                           
  8010                           ;ModbusRtu.c: 1030: _lastCount = 1;
  8011  002500  0100               	movlb	0	; () banked
  8012  002502  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8013  002504  0E01               	movlw	1
  8014  002506  6FC0               	movwf	__lastCount& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;ModbusRtu.c: 1033: u8currentBit = (uint8_t) (u16coil % 16);
  8018  002508  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8019  00250A  0B0F               	andlw	15
  8020  00250C  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;ModbusRtu.c: 1036: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8024  00250E  0101               	movlb	1	; () banked
  8025  002510  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8026  002512  E116               	bnz	l6919
  8027                           
  8028                           ; BSR set to: 1
  8029  002514  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8030  002518  0E01               	movlw	1
  8031  00251A  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8032  00251C  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8033  00251E  2A16               	incf	??_ModbusProcess_FC5,f,c
  8034  002520  D004               	goto	u6094
  8035  002522                     u6095:
  8036  002522  FFFF               	dw	65535	; assembler added errata NOP
  8037  002524  90D8               	bcf	status,0,c
  8038  002526  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8039  002528  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8040  00252A                     u6094:
  8041  00252A  FFFF               	dw	65535	; assembler added errata NOP
  8042  00252C  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8043  00252E  D7F9               	goto	u6095
  8044  002530  501E               	movf	ModbusProcess_FC5@regs,w,c
  8045  002532  6ED9               	movwf	fsr2l,c
  8046  002534  6ADA               	clrf	fsr2h,c
  8047  002536  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8048  002538  12DE               	iorwf	postinc2,f,c
  8049  00253A  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8050  00253C  12DD               	iorwf	postdec2,f,c
  8051  00253E  D019               	goto	l6921
  8052  002540                     l6919:
  8053                           
  8054                           ; BSR set to: 1
  8055  002540  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8056  002544  0E01               	movlw	1
  8057  002546  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8058  002548  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8059  00254A  2A16               	incf	??_ModbusProcess_FC5,f,c
  8060  00254C  D004               	goto	u6104
  8061  00254E                     u6105:
  8062  00254E  FFFF               	dw	65535	; assembler added errata NOP
  8063  002550  90D8               	bcf	status,0,c
  8064  002552  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8065  002554  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8066  002556                     u6104:
  8067  002556  FFFF               	dw	65535	; assembler added errata NOP
  8068  002558  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8069  00255A  D7F9               	goto	u6105
  8070  00255C  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8071  00255E  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8072  002560  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8073  002562  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8074  002564  501E               	movf	ModbusProcess_FC5@regs,w,c
  8075  002566  6ED9               	movwf	fsr2l,c
  8076  002568  6ADA               	clrf	fsr2h,c
  8077  00256A  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8078  00256C  16DE               	andwf	postinc2,f,c
  8079  00256E  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8080  002570  16DD               	andwf	postdec2,f,c
  8081  002572                     l6921:
  8082  002572  FFFF               	dw	65535	; assembler added errata NOP
  8083                           
  8084                           ;ModbusRtu.c: 1043: _u8BufferSize = 6;
  8085  002574  0E06               	movlw	6
  8086  002576  6E74               	movwf	__u8BufferSize,c
  8087                           
  8088                           ;ModbusRtu.c: 1044: u8CopyBufferSize = _u8BufferSize + 2;
  8089  002578  5074               	movf	__u8BufferSize,w,c
  8090  00257A  0F02               	addlw	2
  8091  00257C  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8092                           
  8093                           ;ModbusRtu.c: 1045: ModbusSendTxBuffer();
  8094  00257E  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  8095                           
  8096                           ;ModbusRtu.c: 1047: return u8CopyBufferSize;
  8097  002582  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8098  002584  0012               	return		;funcret
  8099  002586  FFFF               	dw	65535	; errata NOP
  8100  002588                     __end_of_ModbusProcess_FC5:
  8101                           	opt stack 0
  8102                           tblptru	equ	0xFF8
  8103                           tblptrh	equ	0xFF7
  8104                           tblptrl	equ	0xFF6
  8105                           tablat	equ	0xFF5
  8106                           prodh	equ	0xFF4
  8107                           prodl	equ	0xFF3
  8108                           intcon	equ	0xFF2
  8109                           postinc0	equ	0xFEE
  8110                           wreg	equ	0xFE8
  8111                           postdec1	equ	0xFE5
  8112                           fsr1h	equ	0xFE2
  8113                           fsr1l	equ	0xFE1
  8114                           indf2	equ	0xFDF
  8115                           postinc2	equ	0xFDE
  8116                           postdec2	equ	0xFDD
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _ModbusProcess_FC43 *****************
  8122 ;; Defined at:
  8123 ;;		line 1257 in file "ModbusRtu.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;		None
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;  objId           1   23[COMRAM] unsigned char 
  8128 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8129 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      unsigned char 
  8132 ;; Registers used:
  8133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/1
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8139 ;;      Params:         0       0       0       0       0       0       0
  8140 ;;      Locals:         3       0       0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0
  8142 ;;      Totals:         3       0       0       0       0       0       0
  8143 ;;Total ram usage:        3 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    4
  8146 ;; This function calls:
  8147 ;;		_CopyStringToBuffer
  8148 ;;		_ModbusSendTxBuffer
  8149 ;; This function is called by:
  8150 ;;		_ModbusPoll
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text41
  8155  001578                     __ptext41:
  8156                           	opt stack 0
  8157  001578                     _ModbusProcess_FC43:
  8158                           	opt stack 25
  8159                           
  8160                           ;incstack = 0
  8161  001578  FFFF               	dw	65535
  8162                           
  8163                           ;ModbusRtu.c: 1259: uint8_t devIdCode = _au8Buffer[ 3 ];
  8164  00157A  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8165                           
  8166                           ;ModbusRtu.c: 1267: uint8_t objId = _au8Buffer[ 4 ];
  8167  00157E  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8168                           
  8169                           ;ModbusRtu.c: 1278: _au8Buffer[ 5 ] = 0x00;
  8170  001582  0101               	movlb	1	; () banked
  8171  001584  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8172                           
  8173                           ;ModbusRtu.c: 1279: _au8Buffer[ 6 ] = 0x00;
  8174  001586  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8175                           
  8176                           ; BSR set to: 1
  8177                           ;ModbusRtu.c: 1281: _u8BufferSize = 8;
  8178  001588  0E08               	movlw	8
  8179  00158A  6E74               	movwf	__u8BufferSize,c
  8180                           
  8181                           ;ModbusRtu.c: 1282: switch(devIdCode)
  8182  00158C  D094               	goto	l7163
  8183  00158E                     l7109:
  8184                           
  8185                           ; BSR set to: 1
  8186                           ;ModbusRtu.c: 1285: _au8Buffer[ 4 ] = 0x81;
  8187  00158E  0E81               	movlw	129
  8188  001590  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8189                           
  8190                           ;ModbusRtu.c: 1286: _au8Buffer[ 7 ] = 3;
  8191  001592  0E03               	movlw	3
  8192  001594  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8193                           
  8194                           ; BSR set to: 1
  8195                           ;ModbusRtu.c: 1287: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8196  001596  0E48               	movlw	low STR_1
  8197  001598  6E07               	movwf	CopyStringToBuffer@src,c
  8198  00159A  0E06               	movlw	6
  8199  00159C  6E08               	movwf	CopyStringToBuffer@len,c
  8200  00159E  0E00               	movlw	0
  8201  0015A0  EC44  F014         	call	_CopyStringToBuffer
  8202                           
  8203                           ;ModbusRtu.c: 1288: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8204  0015A4  0E3F               	movlw	low STR_3
  8205  0015A6  6E07               	movwf	CopyStringToBuffer@src,c
  8206  0015A8  0E09               	movlw	9
  8207  0015AA  6E08               	movwf	CopyStringToBuffer@len,c
  8208  0015AC  0E01               	movlw	1
  8209  0015AE  EC44  F014         	call	_CopyStringToBuffer
  8210                           
  8211                           ;ModbusRtu.c: 1289: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8212  0015B2  0E4E               	movlw	low STR_5
  8213  0015B4  6E07               	movwf	CopyStringToBuffer@src,c
  8214  0015B6  0E05               	movlw	5
  8215  0015B8  6E08               	movwf	CopyStringToBuffer@len,c
  8216  0015BA  0E02               	movlw	2
  8217  0015BC  EC44  F014         	call	_CopyStringToBuffer
  8218                           
  8219                           ;ModbusRtu.c: 1290: break;
  8220  0015C0  D084               	goto	l962
  8221  0015C2                     l7117:
  8222                           
  8223                           ; BSR set to: 1
  8224                           ;ModbusRtu.c: 1292: _au8Buffer[ 4 ] = 0x82;
  8225  0015C2  0E82               	movlw	130
  8226  0015C4  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8227                           
  8228                           ;ModbusRtu.c: 1293: _au8Buffer[ 7 ] = 4;
  8229  0015C6  0E04               	movlw	4
  8230  0015C8  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8231                           
  8232                           ; BSR set to: 1
  8233                           ;ModbusRtu.c: 1294: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8234  0015CA  0E24               	movlw	low STR_7
  8235  0015CC  6E07               	movwf	CopyStringToBuffer@src,c
  8236  0015CE  0E10               	movlw	16
  8237  0015D0  6E08               	movwf	CopyStringToBuffer@len,c
  8238  0015D2  0E03               	movlw	3
  8239  0015D4  EC44  F014         	call	_CopyStringToBuffer
  8240                           
  8241                           ;ModbusRtu.c: 1295: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8242  0015D8  0E10               	movlw	low STR_9
  8243  0015DA  6E07               	movwf	CopyStringToBuffer@src,c
  8244  0015DC  0E14               	movlw	20
  8245  0015DE  6E08               	movwf	CopyStringToBuffer@len,c
  8246  0015E0  0E04               	movlw	4
  8247  0015E2  EC44  F014         	call	_CopyStringToBuffer
  8248                           
  8249                           ;ModbusRtu.c: 1296: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8250  0015E6  0E53               	movlw	low STR_11
  8251  0015E8  6E07               	movwf	CopyStringToBuffer@src,c
  8252  0015EA  0E04               	movlw	4
  8253  0015EC  6E08               	movwf	CopyStringToBuffer@len,c
  8254  0015EE  0E05               	movlw	5
  8255  0015F0  EC44  F014         	call	_CopyStringToBuffer
  8256                           
  8257                           ;ModbusRtu.c: 1297: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8258  0015F4  0E34               	movlw	low STR_13
  8259  0015F6  6E07               	movwf	CopyStringToBuffer@src,c
  8260  0015F8  0E0B               	movlw	11
  8261  0015FA  6E08               	movwf	CopyStringToBuffer@len,c
  8262  0015FC  0E06               	movlw	6
  8263  0015FE  EC44  F014         	call	_CopyStringToBuffer
  8264                           
  8265                           ;ModbusRtu.c: 1298: break;
  8266  001602  D063               	goto	l962
  8267  001604                     l7127:
  8268                           
  8269                           ; BSR set to: 1
  8270                           ;ModbusRtu.c: 1300: _au8Buffer[ 7 ] = 1;
  8271  001604  0E01               	movlw	1
  8272  001606  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8273                           
  8274                           ;ModbusRtu.c: 1301: switch(objId)
  8275  001608  D046               	goto	l7159
  8276  00160A                     l7129:
  8277                           
  8278                           ; BSR set to: 1
  8279                           ;ModbusRtu.c: 1304: _au8Buffer[ 4 ] = 0x81;
  8280  00160A  0E81               	movlw	129
  8281  00160C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8282                           
  8283                           ; BSR set to: 1
  8284                           ;ModbusRtu.c: 1305: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8285  00160E  0E48               	movlw	low STR_1
  8286  001610  6E07               	movwf	CopyStringToBuffer@src,c
  8287  001612  0E06               	movlw	6
  8288  001614  6E08               	movwf	CopyStringToBuffer@len,c
  8289  001616  5018               	movf	ModbusProcess_FC43@objId,w,c
  8290  001618  EC44  F014         	call	_CopyStringToBuffer
  8291                           
  8292                           ;ModbusRtu.c: 1306: break;
  8293  00161C  D056               	goto	l962
  8294  00161E                     l7133:
  8295                           
  8296                           ; BSR set to: 1
  8297                           ;ModbusRtu.c: 1308: _au8Buffer[ 4 ] = 0x81;
  8298  00161E  0E81               	movlw	129
  8299  001620  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8300                           
  8301                           ; BSR set to: 1
  8302                           ;ModbusRtu.c: 1309: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8303  001622  0E3F               	movlw	low STR_3
  8304  001624  6E07               	movwf	CopyStringToBuffer@src,c
  8305  001626  0E09               	movlw	9
  8306  001628  6E08               	movwf	CopyStringToBuffer@len,c
  8307  00162A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8308  00162C  EC44  F014         	call	_CopyStringToBuffer
  8309                           
  8310                           ;ModbusRtu.c: 1310: break;
  8311  001630  D04C               	goto	l962
  8312  001632                     l7137:
  8313                           
  8314                           ; BSR set to: 1
  8315                           ;ModbusRtu.c: 1312: _au8Buffer[ 4 ] = 0x81;
  8316  001632  0E81               	movlw	129
  8317  001634  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8318                           
  8319                           ; BSR set to: 1
  8320                           ;ModbusRtu.c: 1313: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8321  001636  0E4E               	movlw	low STR_5
  8322  001638  6E07               	movwf	CopyStringToBuffer@src,c
  8323  00163A  0E05               	movlw	5
  8324  00163C  6E08               	movwf	CopyStringToBuffer@len,c
  8325  00163E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8326  001640  EC44  F014         	call	_CopyStringToBuffer
  8327                           
  8328                           ;ModbusRtu.c: 1314: break;
  8329  001644  D042               	goto	l962
  8330  001646                     l7141:
  8331                           
  8332                           ; BSR set to: 1
  8333                           ;ModbusRtu.c: 1316: _au8Buffer[ 4 ] = 0x82;
  8334  001646  0E82               	movlw	130
  8335  001648  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8336                           
  8337                           ; BSR set to: 1
  8338                           ;ModbusRtu.c: 1317: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8339  00164A  0E24               	movlw	low STR_7
  8340  00164C  6E07               	movwf	CopyStringToBuffer@src,c
  8341  00164E  0E10               	movlw	16
  8342  001650  6E08               	movwf	CopyStringToBuffer@len,c
  8343  001652  5018               	movf	ModbusProcess_FC43@objId,w,c
  8344  001654  EC44  F014         	call	_CopyStringToBuffer
  8345                           
  8346                           ;ModbusRtu.c: 1318: break;
  8347  001658  D038               	goto	l962
  8348  00165A                     l7145:
  8349                           
  8350                           ; BSR set to: 1
  8351                           ;ModbusRtu.c: 1320: _au8Buffer[ 4 ] = 0x82;
  8352  00165A  0E82               	movlw	130
  8353  00165C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8354                           
  8355                           ; BSR set to: 1
  8356                           ;ModbusRtu.c: 1321: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8357  00165E  0E10               	movlw	low STR_9
  8358  001660  6E07               	movwf	CopyStringToBuffer@src,c
  8359  001662  0E14               	movlw	20
  8360  001664  6E08               	movwf	CopyStringToBuffer@len,c
  8361  001666  5018               	movf	ModbusProcess_FC43@objId,w,c
  8362  001668  EC44  F014         	call	_CopyStringToBuffer
  8363                           
  8364                           ;ModbusRtu.c: 1322: break;
  8365  00166C  D02E               	goto	l962
  8366  00166E                     l7149:
  8367                           
  8368                           ; BSR set to: 1
  8369                           ;ModbusRtu.c: 1324: _au8Buffer[ 4 ] = 0x82;
  8370  00166E  0E82               	movlw	130
  8371  001670  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8372                           
  8373                           ; BSR set to: 1
  8374                           ;ModbusRtu.c: 1325: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8375  001672  0E53               	movlw	low STR_11
  8376  001674  6E07               	movwf	CopyStringToBuffer@src,c
  8377  001676  0E04               	movlw	4
  8378  001678  6E08               	movwf	CopyStringToBuffer@len,c
  8379  00167A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8380  00167C  EC44  F014         	call	_CopyStringToBuffer
  8381                           
  8382                           ;ModbusRtu.c: 1326: break;
  8383  001680  D024               	goto	l962
  8384  001682                     l7153:
  8385                           
  8386                           ; BSR set to: 1
  8387                           ;ModbusRtu.c: 1328: _au8Buffer[ 4 ] = 0x82;
  8388  001682  0E82               	movlw	130
  8389  001684  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8390                           
  8391                           ; BSR set to: 1
  8392                           ;ModbusRtu.c: 1329: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8393  001686  0E34               	movlw	low STR_13
  8394  001688  6E07               	movwf	CopyStringToBuffer@src,c
  8395  00168A  0E0B               	movlw	11
  8396  00168C  6E08               	movwf	CopyStringToBuffer@len,c
  8397  00168E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8398  001690  EC44  F014         	call	_CopyStringToBuffer
  8399                           
  8400                           ;ModbusRtu.c: 1330: break;
  8401  001694  D01A               	goto	l962
  8402  001696                     l7159:
  8403  001696  FFFF               	dw	65535	; assembler added errata NOP
  8404                           
  8405                           ; BSR set to: 1
  8406  001698  5018               	movf	ModbusProcess_FC43@objId,w,c
  8407                           
  8408                           ; Switch size 1, requested type "speed"
  8409                           ; Number of cases is 7, Range of values is 0 to 6
  8410                           ; switch strategies available:
  8411                           ; Name         Instructions Cycles
  8412                           ; simple_byte           22    12 (average)
  8413                           ;	Chosen strategy is simple_byte
  8414  00169A  E0B7               	bz	l7129
  8415  00169C  0A01               	xorlw	1	; case 1
  8416  00169E  E0BF               	bz	l7133
  8417  0016A0  0A03               	xorlw	3	; case 2
  8418  0016A2  E0C7               	bz	l7137
  8419  0016A4  0A01               	xorlw	1	; case 3
  8420  0016A6  E0CF               	bz	l7141
  8421  0016A8  0A07               	xorlw	7	; case 4
  8422  0016AA  E0D7               	bz	l7145
  8423  0016AC  0A01               	xorlw	1	; case 5
  8424  0016AE  E0DF               	bz	l7149
  8425  0016B0  0A03               	xorlw	3	; case 6
  8426  0016B2  E0E7               	bz	l7153
  8427  0016B4  D00A               	goto	l962
  8428  0016B6                     l7163:
  8429  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  8430                           
  8431                           ; BSR set to: 1
  8432  0016B8  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8433                           
  8434                           ; Switch size 1, requested type "speed"
  8435                           ; Number of cases is 3, Range of values is 1 to 4
  8436                           ; switch strategies available:
  8437                           ; Name         Instructions Cycles
  8438                           ; simple_byte           10     6 (average)
  8439                           ;	Chosen strategy is simple_byte
  8440  0016BA  0A01               	xorlw	1	; case 1
  8441  0016BC  E101 D767          	bz	l7109
  8442  0016C0  0A03               	xorlw	3	; case 2
  8443  0016C2  E101 D77E          	bz	l7117
  8444  0016C6  0A06               	xorlw	6	; case 4
  8445  0016C8  E09D               	bz	l7127
  8446  0016CA                     l962:
  8447  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  8448                           
  8449                           ;ModbusRtu.c: 1334: uint8_t u8CopyBufferSize = _u8BufferSize;
  8450  0016CC  C074  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8451                           
  8452                           ;ModbusRtu.c: 1335: ModbusSendTxBuffer();
  8453  0016D0  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  8454                           
  8455                           ;ModbusRtu.c: 1337: return u8CopyBufferSize;
  8456  0016D4  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8457  0016D6  0012               	return		;funcret
  8458  0016D8  FFFF               	dw	65535	; errata NOP
  8459  0016DA                     __end_of_ModbusProcess_FC43:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           postinc0	equ	0xFEE
  8469                           wreg	equ	0xFE8
  8470                           postdec1	equ	0xFE5
  8471                           fsr1h	equ	0xFE2
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _CopyStringToBuffer *****************
  8481 ;; Defined at:
  8482 ;;		line 1248 in file "ModbusRtu.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;  objId           1    wreg     unsigned char 
  8485 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8486 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
  8487 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
  8488 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
  8489 ;;		 -> STR_3(9), STR_1(6), 
  8490 ;;  len             1    7[COMRAM] unsigned char 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  objId           1    9[COMRAM] unsigned char 
  8493 ;;  i               1   10[COMRAM] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/1
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8503 ;;      Params:         2       0       0       0       0       0       0
  8504 ;;      Locals:         2       0       0       0       0       0       0
  8505 ;;      Temps:          1       0       0       0       0       0       0
  8506 ;;      Totals:         5       0       0       0       0       0       0
  8507 ;;Total ram usage:        5 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    2
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_ModbusProcess_FC43
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           	psect	text42
  8518  002888                     __ptext42:
  8519                           	opt stack 0
  8520  002888                     _CopyStringToBuffer:
  8521                           	opt stack 26
  8522                           
  8523                           ;incstack = 0
  8524  002888  FFFF               	dw	65535
  8525                           
  8526                           ;CopyStringToBuffer@objId stored from wreg
  8527  00288A  6E0A               	movwf	CopyStringToBuffer@objId,c
  8528                           
  8529                           ;ModbusRtu.c: 1250: len--;
  8530  00288C  0608               	decf	CopyStringToBuffer@len,f,c
  8531                           
  8532                           ;ModbusRtu.c: 1251: _au8Buffer[_u8BufferSize++] = objId;
  8533  00288E  0E00               	movlw	low __au8Buffer
  8534  002890  2474               	addwf	__u8BufferSize,w,c
  8535  002892  6ED9               	movwf	fsr2l,c
  8536  002894  6ADA               	clrf	fsr2h,c
  8537  002896  0E01               	movlw	high __au8Buffer
  8538  002898  22DA               	addwfc	fsr2h,f,c
  8539  00289A  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8540  00289E  2A74               	incf	__u8BufferSize,f,c
  8541                           
  8542                           ;ModbusRtu.c: 1252: _au8Buffer[_u8BufferSize++] = len;
  8543  0028A0  0E00               	movlw	low __au8Buffer
  8544  0028A2  2474               	addwf	__u8BufferSize,w,c
  8545  0028A4  6ED9               	movwf	fsr2l,c
  8546  0028A6  6ADA               	clrf	fsr2h,c
  8547  0028A8  0E01               	movlw	high __au8Buffer
  8548  0028AA  22DA               	addwfc	fsr2h,f,c
  8549  0028AC  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8550  0028B0  2A74               	incf	__u8BufferSize,f,c
  8551                           
  8552                           ;ModbusRtu.c: 1253: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8553  0028B2  6A0B               	clrf	CopyStringToBuffer@i,c
  8554  0028B4  D013               	goto	l6435
  8555  0028B6                     l6429:
  8556                           
  8557                           ;ModbusRtu.c: 1254: _au8Buffer[_u8BufferSize] = src[i];
  8558  0028B6  5007               	movf	CopyStringToBuffer@src,w,c
  8559  0028B8  240B               	addwf	CopyStringToBuffer@i,w,c
  8560  0028BA  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8561  0028BC  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8562  0028C0                     	if	1	;There is more than 1 active tblptr byte
  8563  0028C0  0E06               	movlw	high __smallconst
  8564  0028C2  6EF7               	movwf	tblptrh,c
  8565  0028C4                     	endif
  8566  0028C4                     	if	0	;tblptru may be non-zero
  8567  0028C4                     	endif
  8568  0028C4                     	if	0	;tblptru may be non-zero
  8569  0028C4                     	endif
  8570  0028C4  0E00               	movlw	low __au8Buffer
  8571  0028C6  2474               	addwf	__u8BufferSize,w,c
  8572  0028C8  6ED9               	movwf	fsr2l,c
  8573  0028CA  6ADA               	clrf	fsr2h,c
  8574  0028CC  0E01               	movlw	high __au8Buffer
  8575  0028CE  22DA               	addwfc	fsr2h,f,c
  8576  0028D0  0008               	tblrd		*
  8577  0028D2  FFFF               	dw	65535	; errata NOP
  8578  0028D4  CFF5 FFDF          	movff	tablat,indf2
  8579  0028D8  2A0B               	incf	CopyStringToBuffer@i,f,c
  8580  0028DA  2A74               	incf	__u8BufferSize,f,c
  8581  0028DC                     l6435:
  8582  0028DC  FFFF               	dw	65535	; assembler added errata NOP
  8583  0028DE  5008               	movf	CopyStringToBuffer@len,w,c
  8584  0028E0  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8585  0028E2  E3E9               	bnc	l6429
  8586  0028E4  0012               	return		;funcret
  8587  0028E6  FFFF               	dw	65535	; errata NOP
  8588  0028E8                     __end_of_CopyStringToBuffer:
  8589                           	opt stack 0
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           postinc0	equ	0xFEE
  8598                           wreg	equ	0xFE8
  8599                           postdec1	equ	0xFE5
  8600                           fsr1h	equ	0xFE2
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _ModbusProcess_FC3 *****************
  8610 ;; Defined at:
  8611 ;;		line 990 in file "ModbusRtu.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8614 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8615 ;;  u8size          1   23[COMRAM] unsigned char 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  u16regsno       2   29[COMRAM] unsigned short 
  8618 ;;  i               1   32[COMRAM] unsigned char 
  8619 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  8620 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      unsigned char 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/1
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8630 ;;      Params:         3       0       0       0       0       0       0
  8631 ;;      Locals:         5       0       0       0       0       0       0
  8632 ;;      Temps:          4       0       0       0       0       0       0
  8633 ;;      Totals:        12       0       0       0       0       0       0
  8634 ;;Total ram usage:       12 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    4
  8637 ;; This function calls:
  8638 ;;		_ModbusSendTxBuffer
  8639 ;; This function is called by:
  8640 ;;		_ModbusPoll
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text43
  8645  00223A                     __ptext43:
  8646                           	opt stack 0
  8647  00223A                     _ModbusProcess_FC3:
  8648                           	opt stack 25
  8649                           
  8650                           ;incstack = 0
  8651  00223A  FFFF               	dw	65535
  8652                           
  8653                           ;ModbusRtu.c: 992: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  8654  00223C  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  8655                           
  8656                           ;ModbusRtu.c: 993: _lastAddress = u8StartAdd;
  8657  002240  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  8658  002244  0100               	movlb	0	; () banked
  8659  002246  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;ModbusRtu.c: 994: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8663  002248  0101               	movlb	1	; () banked
  8664  00224A  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8665  00224C  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8666  00224E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8667  002250  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  8668  002252  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  8669                           
  8670                           ; BSR set to: 1
  8671                           ;ModbusRtu.c: 995: _lastCount = u16regsno;
  8672  002256  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  8673  00225A  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;ModbusRtu.c: 996: uint8_t u8CopyBufferSize;
  8677                           ;ModbusRtu.c: 997: uint8_t i;
  8678                           ;ModbusRtu.c: 999: _au8Buffer[ 2 ] = u16regsno * 2;
  8679  00225E  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  8680  002260  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8681  002262  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8682                           
  8683                           ; BSR set to: 1
  8684                           ;ModbusRtu.c: 1000: _u8BufferSize = 3;
  8685  002264  0E03               	movlw	3
  8686  002266  6E74               	movwf	__u8BufferSize,c
  8687                           
  8688                           ; BSR set to: 1
  8689                           ;ModbusRtu.c: 1002: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  8690  002268  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  8691  00226C  D02A               	goto	l6899
  8692  00226E                     l6893:
  8693                           
  8694                           ; BSR set to: 1
  8695                           ;ModbusRtu.c: 1003: {
  8696                           ;ModbusRtu.c: 1004: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF))
      +                          ;
  8697  00226E  0E00               	movlw	low __au8Buffer
  8698  002270  2474               	addwf	__u8BufferSize,w,c
  8699  002272  6ED9               	movwf	fsr2l,c
  8700  002274  6ADA               	clrf	fsr2h,c
  8701  002276  0E01               	movlw	high __au8Buffer
  8702  002278  22DA               	addwfc	fsr2h,f,c
  8703  00227A  5021               	movf	ModbusProcess_FC3@i,w,c
  8704  00227C  0D02               	mullw	2
  8705  00227E  50F3               	movf	prodl,w,c
  8706  002280  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8707  002282  6EE1               	movwf	fsr1l,c
  8708  002284  50F4               	movf	prodh,w,c
  8709  002286  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8710  002288  6EE2               	movwf	fsr1h,c
  8711  00228A  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  8712  00228E  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  8713  002292  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  8714  002296  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  8715  002298  5019               	movf	??_ModbusProcess_FC3,w,c
  8716  00229A  6EDF               	movwf	indf2,c
  8717                           
  8718                           ; BSR set to: 1
  8719                           ;ModbusRtu.c: 1005: _u8BufferSize++;
  8720  00229C  2A74               	incf	__u8BufferSize,f,c
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;ModbusRtu.c: 1006: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  8724  00229E  5021               	movf	ModbusProcess_FC3@i,w,c
  8725  0022A0  0D02               	mullw	2
  8726  0022A2  50F3               	movf	prodl,w,c
  8727  0022A4  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8728  0022A6  6ED9               	movwf	fsr2l,c
  8729  0022A8  50F4               	movf	prodh,w,c
  8730  0022AA  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8731  0022AC  6EDA               	movwf	fsr2h,c
  8732  0022AE  0E00               	movlw	low __au8Buffer
  8733  0022B0  2474               	addwf	__u8BufferSize,w,c
  8734  0022B2  6EE1               	movwf	fsr1l,c
  8735  0022B4  6AE2               	clrf	fsr1h,c
  8736  0022B6  0E01               	movlw	high __au8Buffer
  8737  0022B8  22E2               	addwfc	fsr1h,f,c
  8738  0022BA  CFDF FFE7          	movff	indf2,indf1
  8739                           
  8740                           ;ModbusRtu.c: 1007: _u8BufferSize++;
  8741  0022BE  2A74               	incf	__u8BufferSize,f,c
  8742  0022C0  2A21               	incf	ModbusProcess_FC3@i,f,c
  8743  0022C2                     l6899:
  8744  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  8745                           
  8746                           ; BSR set to: 1
  8747  0022C4  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8748  0022C6  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8749  0022C8  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8750  0022CA  0E00               	movlw	0
  8751  0022CC  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8752  0022CE  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8753  0022D0  5021               	movf	ModbusProcess_FC3@i,w,c
  8754  0022D2  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8755  0022D4  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8756  0022D6  5019               	movf	??_ModbusProcess_FC3,w,c
  8757  0022D8  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  8758  0022DA  501A               	movf	??_ModbusProcess_FC3+1,w,c
  8759  0022DC  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  8760  0022DE  E3C7               	bnc	l6893
  8761                           
  8762                           ; BSR set to: 1
  8763                           ;ModbusRtu.c: 1008: }
  8764                           ;ModbusRtu.c: 1009: u8CopyBufferSize = _u8BufferSize + 2;
  8765  0022E0  5074               	movf	__u8BufferSize,w,c
  8766  0022E2  0F02               	addlw	2
  8767  0022E4  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8768                           
  8769                           ; BSR set to: 1
  8770                           ;ModbusRtu.c: 1010: ModbusSendTxBuffer();
  8771  0022E6  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  8772                           
  8773                           ;ModbusRtu.c: 1012: return u8CopyBufferSize;
  8774  0022EA  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8775  0022EC  0012               	return		;funcret
  8776  0022EE  FFFF               	dw	65535	; errata NOP
  8777  0022F0                     __end_of_ModbusProcess_FC3:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           indf1	equ	0xFE7
  8789                           postinc1	equ	0xFE6
  8790                           postdec1	equ	0xFE5
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _ModbusProcess_FC21 *****************
  8801 ;; Defined at:
  8802 ;;		line 1216 in file "ModbusRtu.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8807 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8808 ;;  i               1   29[COMRAM] unsigned char 
  8809 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8810 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      unsigned char 
  8813 ;; Registers used:
  8814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/1
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8820 ;;      Params:         0       0       0       0       0       0       0
  8821 ;;      Locals:         7       0       0       0       0       0       0
  8822 ;;      Temps:          2       0       0       0       0       0       0
  8823 ;;      Totals:         9       0       0       0       0       0       0
  8824 ;;Total ram usage:        9 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    4
  8827 ;; This function calls:
  8828 ;;		_ModbusSendTxBuffer
  8829 ;; This function is called by:
  8830 ;;		_ModbusPoll
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text44
  8835  0022F0                     __ptext44:
  8836                           	opt stack 0
  8837  0022F0                     _ModbusProcess_FC21:
  8838                           	opt stack 25
  8839                           
  8840                           ;incstack = 0
  8841  0022F0  FFFF               	dw	65535
  8842                           
  8843                           ;ModbusRtu.c: 1220: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8844  0022F2  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8845                           
  8846                           ;ModbusRtu.c: 1222: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8847  0022F6  0101               	movlb	1	; () banked
  8848  0022F8  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8849  0022FA  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8850  0022FE  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8851  002300  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8852  002304  6A16               	clrf	??_ModbusProcess_FC21,c
  8853  002306  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8854  002308  90D8               	bcf	status,0,c
  8855  00230A  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8856  00230C  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8857  00230E  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8858  002310  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8859                           
  8860                           ; BSR set to: 1
  8861                           ;ModbusRtu.c: 1223: _lastAddress = startAddrsBytes;
  8862  002312  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8863  002316  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8864                           
  8865                           ;ModbusRtu.c: 1224: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8866  00231A  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8867  00231C  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8868  002320  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8869  002322  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8870  002326  6A16               	clrf	??_ModbusProcess_FC21,c
  8871  002328  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8872  00232A  90D8               	bcf	status,0,c
  8873  00232C  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8874  00232E  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8875  002330  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8876  002332  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8877                           
  8878                           ; BSR set to: 1
  8879                           ;ModbusRtu.c: 1225: _lastCount = recLenBytes;
  8880  002334  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8881  002338  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8882                           
  8883                           ;ModbusRtu.c: 1226: uint8_t u8CopyBufferSize;
  8884                           ;ModbusRtu.c: 1227: uint8_t i;
  8885                           ;ModbusRtu.c: 1233: _u8BufferSize = requestDataLen + 1;
  8886  00233C  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8887  00233E  6E74               	movwf	__u8BufferSize,c
  8888                           
  8889                           ; BSR set to: 1
  8890                           ;ModbusRtu.c: 1237: for (i = 0; i < recLenBytes; i++)
  8891  002340  6A1E               	clrf	ModbusProcess_FC21@i,c
  8892  002342  D01C               	goto	l7097
  8893  002344                     l944:
  8894  002344  FFFF               	dw	65535	; assembler added errata NOP
  8895                           
  8896                           ; BSR set to: 1
  8897  002346  B2A6               	btfsc	4006,1,c	;volatile
  8898  002348  D7FD               	goto	l944
  8899                           
  8900                           ; BSR set to: 1
  8901  00234A  501E               	movf	ModbusProcess_FC21@i,w,c
  8902  00234C  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8903  00234E  6EA9               	movwf	4009,c	;volatile
  8904                           
  8905                           ; BSR set to: 1
  8906  002350  0E0A               	movlw	low (__au8Buffer+10)
  8907  002352  241E               	addwf	ModbusProcess_FC21@i,w,c
  8908  002354  6ED9               	movwf	fsr2l,c
  8909  002356  6ADA               	clrf	fsr2h,c
  8910  002358  0E01               	movlw	high (__au8Buffer+10)
  8911  00235A  22DA               	addwfc	fsr2h,f,c
  8912  00235C  50DF               	movf	indf2,w,c
  8913  00235E  6EA8               	movwf	4008,c	;volatile
  8914                           
  8915                           ; BSR set to: 1
  8916  002360  90D8               	bcf	status,0,c	;volatile
  8917                           
  8918                           ; BSR set to: 1
  8919  002362  BEF2               	btfsc	intcon,7,c	;volatile
  8920                           
  8921                           ; BSR set to: 1
  8922  002364  80D8               	bsf	status,0,c	;volatile
  8923                           
  8924                           ; BSR set to: 1
  8925  002366  9EF2               	bcf	intcon,7,c	;volatile
  8926  002368  84A6               	bsf	4006,2,c	;volatile
  8927                           
  8928                           ; BSR set to: 1
  8929  00236A  0E55               	movlw	85
  8930  00236C  6EA7               	movwf	4007,c	;volatile
  8931  00236E  0EAA               	movlw	170
  8932  002370  6EA7               	movwf	4007,c	;volatile
  8933                           
  8934                           ; BSR set to: 1
  8935  002372  82A6               	bsf	4006,1,c	;volatile
  8936                           
  8937                           ; BSR set to: 1
  8938  002374  94A6               	bcf	4006,2,c	;volatile
  8939                           
  8940                           ; BSR set to: 1
  8941  002376  E301               	bnc	l7095
  8942                           
  8943                           ; BSR set to: 1
  8944  002378  8EF2               	bsf	intcon,7,c	;volatile
  8945  00237A                     l7095:
  8946                           
  8947                           ; BSR set to: 1
  8948  00237A  2A1E               	incf	ModbusProcess_FC21@i,f,c
  8949  00237C                     l7097:
  8950  00237C  FFFF               	dw	65535	; assembler added errata NOP
  8951                           
  8952                           ; BSR set to: 1
  8953  00237E  501E               	movf	ModbusProcess_FC21@i,w,c
  8954  002380  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  8955  002382  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8956  002384  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8957  002386  5C16               	subwf	??_ModbusProcess_FC21,w,c
  8958  002388  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8959  00238A  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  8960  00238C  E3DB               	bnc	l944
  8961                           
  8962                           ; BSR set to: 1
  8963                           ;ModbusRtu.c: 1240: }
  8964                           ;ModbusRtu.c: 1242: u8CopyBufferSize = _u8BufferSize;
  8965  00238E  C074  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8966                           
  8967                           ; BSR set to: 1
  8968                           ;ModbusRtu.c: 1243: ModbusSendTxBuffer();
  8969  002392  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  8970                           
  8971                           ;ModbusRtu.c: 1245: return u8CopyBufferSize;
  8972  002396  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8973  002398  0012               	return		;funcret
  8974  00239A  FFFF               	dw	65535	; errata NOP
  8975  00239C                     __end_of_ModbusProcess_FC21:
  8976                           	opt stack 0
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           postinc0	equ	0xFEE
  8985                           wreg	equ	0xFE8
  8986                           indf1	equ	0xFE7
  8987                           postinc1	equ	0xFE6
  8988                           postdec1	equ	0xFE5
  8989                           fsr1h	equ	0xFE2
  8990                           fsr1l	equ	0xFE1
  8991                           indf2	equ	0xFDF
  8992                           postinc2	equ	0xFDE
  8993                           postdec2	equ	0xFDD
  8994                           fsr2h	equ	0xFDA
  8995                           fsr2l	equ	0xFD9
  8996                           status	equ	0xFD8
  8997                           
  8998 ;; *************** function _ModbusProcess_FC17 *****************
  8999 ;; Defined at:
  9000 ;;		line 1191 in file "ModbusRtu.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;		None
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      unsigned char 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/1
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9014 ;;      Params:         0       0       0       0       0       0       0
  9015 ;;      Locals:         1       0       0       0       0       0       0
  9016 ;;      Temps:          0       0       0       0       0       0       0
  9017 ;;      Totals:         1       0       0       0       0       0       0
  9018 ;;Total ram usage:        1 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:    4
  9021 ;; This function calls:
  9022 ;;		_ModbusSendTxBuffer
  9023 ;; This function is called by:
  9024 ;;		_ModbusPoll
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           	psect	text45
  9029  002818                     __ptext45:
  9030                           	opt stack 0
  9031  002818                     _ModbusProcess_FC17:
  9032                           	opt stack 25
  9033                           
  9034                           ;incstack = 0
  9035  002818  FFFF               	dw	65535
  9036                           
  9037                           ;ModbusRtu.c: 1193: _au8Buffer[ 2 ] = 4;
  9038  00281A  0E04               	movlw	4
  9039  00281C  0101               	movlb	1	; () banked
  9040  00281E  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9041                           
  9042                           ;ModbusRtu.c: 1195: _u8BufferSize = 3;
  9043  002820  0E03               	movlw	3
  9044  002822  6E74               	movwf	__u8BufferSize,c
  9045                           
  9046                           ; BSR set to: 1
  9047                           ;ModbusRtu.c: 1196: _au8Buffer[_u8BufferSize++] = 0x01;
  9048  002824  0E00               	movlw	low __au8Buffer
  9049  002826  2474               	addwf	__u8BufferSize,w,c
  9050  002828  6ED9               	movwf	fsr2l,c
  9051  00282A  6ADA               	clrf	fsr2h,c
  9052  00282C  0E01               	movlw	high __au8Buffer
  9053  00282E  22DA               	addwfc	fsr2h,f,c
  9054  002830  0E01               	movlw	1
  9055  002832  6EDF               	movwf	indf2,c
  9056                           
  9057                           ; BSR set to: 1
  9058  002834  2A74               	incf	__u8BufferSize,f,c
  9059                           
  9060                           ; BSR set to: 1
  9061                           ;ModbusRtu.c: 1197: _au8Buffer[_u8BufferSize++] = 0x01;
  9062  002836  0E00               	movlw	low __au8Buffer
  9063  002838  2474               	addwf	__u8BufferSize,w,c
  9064  00283A  6ED9               	movwf	fsr2l,c
  9065  00283C  6ADA               	clrf	fsr2h,c
  9066  00283E  0E01               	movlw	high __au8Buffer
  9067  002840  22DA               	addwfc	fsr2h,f,c
  9068  002842  0E01               	movlw	1
  9069  002844  6EDF               	movwf	indf2,c
  9070                           
  9071                           ; BSR set to: 1
  9072  002846  2A74               	incf	__u8BufferSize,f,c
  9073                           
  9074                           ; BSR set to: 1
  9075                           ;ModbusRtu.c: 1198: _au8Buffer[_u8BufferSize++] = 0x01;
  9076  002848  0E00               	movlw	low __au8Buffer
  9077  00284A  2474               	addwf	__u8BufferSize,w,c
  9078  00284C  6ED9               	movwf	fsr2l,c
  9079  00284E  6ADA               	clrf	fsr2h,c
  9080  002850  0E01               	movlw	high __au8Buffer
  9081  002852  22DA               	addwfc	fsr2h,f,c
  9082  002854  0E01               	movlw	1
  9083  002856  6EDF               	movwf	indf2,c
  9084                           
  9085                           ; BSR set to: 1
  9086  002858  2A74               	incf	__u8BufferSize,f,c
  9087                           
  9088                           ; BSR set to: 1
  9089                           ;ModbusRtu.c: 1199: _au8Buffer[_u8BufferSize++] = 0x00;
  9090  00285A  0E00               	movlw	low __au8Buffer
  9091  00285C  2474               	addwf	__u8BufferSize,w,c
  9092  00285E  6ED9               	movwf	fsr2l,c
  9093  002860  6ADA               	clrf	fsr2h,c
  9094  002862  0E01               	movlw	high __au8Buffer
  9095  002864  22DA               	addwfc	fsr2h,f,c
  9096  002866  6ADF               	clrf	indf2,c
  9097                           
  9098                           ; BSR set to: 1
  9099  002868  2A74               	incf	__u8BufferSize,f,c
  9100                           
  9101                           ; BSR set to: 1
  9102                           ;ModbusRtu.c: 1201: _au8Buffer[_u8BufferSize++] = 0xff;
  9103  00286A  0E00               	movlw	low __au8Buffer
  9104  00286C  2474               	addwf	__u8BufferSize,w,c
  9105  00286E  6ED9               	movwf	fsr2l,c
  9106  002870  6ADA               	clrf	fsr2h,c
  9107  002872  0E01               	movlw	high __au8Buffer
  9108  002874  22DA               	addwfc	fsr2h,f,c
  9109  002876  68DF               	setf	indf2,c
  9110                           
  9111                           ; BSR set to: 1
  9112  002878  2A74               	incf	__u8BufferSize,f,c
  9113                           
  9114                           ; BSR set to: 1
  9115                           ;ModbusRtu.c: 1202: uint8_t u8CopyBufferSize = _u8BufferSize;
  9116  00287A  C074  F016         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9117                           
  9118                           ; BSR set to: 1
  9119                           ;ModbusRtu.c: 1203: ModbusSendTxBuffer();
  9120  00287E  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9121                           
  9122                           ;ModbusRtu.c: 1205: return u8CopyBufferSize;
  9123  002882  5016               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9124  002884  0012               	return		;funcret
  9125  002886  FFFF               	dw	65535	; errata NOP
  9126  002888                     __end_of_ModbusProcess_FC17:
  9127                           	opt stack 0
  9128                           tblptru	equ	0xFF8
  9129                           tblptrh	equ	0xFF7
  9130                           tblptrl	equ	0xFF6
  9131                           tablat	equ	0xFF5
  9132                           prodh	equ	0xFF4
  9133                           prodl	equ	0xFF3
  9134                           intcon	equ	0xFF2
  9135                           postinc0	equ	0xFEE
  9136                           wreg	equ	0xFE8
  9137                           indf1	equ	0xFE7
  9138                           postinc1	equ	0xFE6
  9139                           postdec1	equ	0xFE5
  9140                           fsr1h	equ	0xFE2
  9141                           fsr1l	equ	0xFE1
  9142                           indf2	equ	0xFDF
  9143                           postinc2	equ	0xFDE
  9144                           postdec2	equ	0xFDD
  9145                           fsr2h	equ	0xFDA
  9146                           fsr2l	equ	0xFD9
  9147                           status	equ	0xFD8
  9148                           
  9149 ;; *************** function _ModbusProcess_FC16 *****************
  9150 ;; Defined at:
  9151 ;;		line 1152 in file "ModbusRtu.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9154 ;;		 -> _MODBUSHoldingRegs(30), 
  9155 ;;  u8size          1   23[COMRAM] unsigned char 
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9158 ;;  temp            2   28[COMRAM] unsigned short 
  9159 ;;  i               1   34[COMRAM] unsigned char 
  9160 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9161 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      unsigned char 
  9164 ;; Registers used:
  9165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/1
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9171 ;;      Params:         3       0       0       0       0       0       0
  9172 ;;      Locals:         7       0       0       0       0       0       0
  9173 ;;      Temps:          4       0       0       0       0       0       0
  9174 ;;      Totals:        14       0       0       0       0       0       0
  9175 ;;Total ram usage:       14 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    4
  9178 ;; This function calls:
  9179 ;;		_ModbusSendTxBuffer
  9180 ;; This function is called by:
  9181 ;;		_ModbusPoll
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           	psect	text46
  9186  001FFA                     __ptext46:
  9187                           	opt stack 0
  9188  001FFA                     _ModbusProcess_FC16:
  9189                           	opt stack 25
  9190                           
  9191                           ;incstack = 0
  9192  001FFA  FFFF               	dw	65535
  9193                           
  9194                           ;ModbusRtu.c: 1155: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9195  001FFC  0101               	movlb	1	; () banked
  9196  001FFE  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9197  002000  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9198  002004  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9199  002006  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9200  00200A  6A19               	clrf	??_ModbusProcess_FC16,c
  9201  00200C  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9202  00200E  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9203  002010  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9204  002012  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9205                           
  9206                           ; BSR set to: 1
  9207                           ;ModbusRtu.c: 1156: _lastAddress = u16StartAdd;
  9208  002014  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9209  002018  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9210                           
  9211                           ; BSR set to: 1
  9212                           ;ModbusRtu.c: 1157: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9213  00201C  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9214                           
  9215                           ; BSR set to: 1
  9216                           ;ModbusRtu.c: 1158: _lastCount = u8regsno;
  9217  002020  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9218  002024  0100               	movlb	0	; () banked
  9219  002026  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;ModbusRtu.c: 1159: uint8_t u8CopyBufferSize;
  9223                           ;ModbusRtu.c: 1160: uint8_t i;
  9224                           ;ModbusRtu.c: 1161: uint16_t temp;
  9225                           ;ModbusRtu.c: 1164: _au8Buffer[ NB_HI ] = 0;
  9226  002028  0101               	movlb	1	; () banked
  9227  00202A  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9228                           
  9229                           ; BSR set to: 1
  9230                           ;ModbusRtu.c: 1165: _au8Buffer[ NB_LO ] = u8regsno;
  9231  00202C  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9232                           
  9233                           ; BSR set to: 1
  9234                           ;ModbusRtu.c: 1166: _u8BufferSize = RESPONSE_SIZE;
  9235  002030  0E06               	movlw	6
  9236  002032  6E74               	movwf	__u8BufferSize,c
  9237                           
  9238                           ; BSR set to: 1
  9239                           ;ModbusRtu.c: 1169: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9240  002034  6A23               	clrf	ModbusProcess_FC16@i,c
  9241  002036  D02C               	goto	l7023
  9242  002038                     l7017:
  9243                           
  9244                           ; BSR set to: 1
  9245                           ;ModbusRtu.c: 1170: {
  9246                           ;ModbusRtu.c: 1171: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9247  002038  5023               	movf	ModbusProcess_FC16@i,w,c
  9248  00203A  0D02               	mullw	2
  9249  00203C  0E08               	movlw	low (__au8Buffer+8)
  9250  00203E  24F3               	addwf	prodl,w,c
  9251  002040  6ED9               	movwf	fsr2l,c
  9252  002042  0E01               	movlw	high (__au8Buffer+8)
  9253  002044  20F4               	addwfc	prodh,w,c
  9254  002046  6EDA               	movwf	fsr2h,c
  9255  002048  50DF               	movf	indf2,w,c
  9256  00204A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9257  00204C  5023               	movf	ModbusProcess_FC16@i,w,c
  9258  00204E  0D02               	mullw	2
  9259  002050  0E07               	movlw	low (__au8Buffer+7)
  9260  002052  24F3               	addwf	prodl,w,c
  9261  002054  6ED9               	movwf	fsr2l,c
  9262  002056  0E01               	movlw	high (__au8Buffer+7)
  9263  002058  20F4               	addwfc	prodh,w,c
  9264  00205A  6EDA               	movwf	fsr2h,c
  9265  00205C  50DF               	movf	indf2,w,c
  9266  00205E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9267  002060  5019               	movf	??_ModbusProcess_FC16,w,c
  9268  002062  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9269  002064  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9270                           
  9271                           ; BSR set to: 1
  9272                           ;ModbusRtu.c: 1175: regs[ u16StartAdd + i ] = temp;
  9273  002068  5023               	movf	ModbusProcess_FC16@i,w,c
  9274  00206A  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9275  00206C  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9276  00206E  0E00               	movlw	0
  9277  002070  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9278  002072  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9279  002074  90D8               	bcf	status,0,c
  9280  002076  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9281  002078  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9282  00207A  5019               	movf	??_ModbusProcess_FC16,w,c
  9283  00207C  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9284  00207E  6ED9               	movwf	fsr2l,c
  9285  002080  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9286  002082  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9287  002084  6EDA               	movwf	fsr2h,c
  9288  002086  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9289  00208A  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9290                           
  9291                           ; BSR set to: 1
  9292  00208E  2A23               	incf	ModbusProcess_FC16@i,f,c
  9293  002090                     l7023:
  9294  002090  FFFF               	dw	65535	; assembler added errata NOP
  9295                           
  9296                           ; BSR set to: 1
  9297  002092  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9298  002094  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9299  002096  E20E               	bc	l7027
  9300                           
  9301                           ; BSR set to: 1
  9302  002098  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9303  00209A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9304  00209C  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9305  00209E  5023               	movf	ModbusProcess_FC16@i,w,c
  9306  0020A0  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9307  0020A2  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9308  0020A4  0E00               	movlw	0
  9309  0020A6  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9310  0020A8  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9311  0020AA  5019               	movf	??_ModbusProcess_FC16,w,c
  9312  0020AC  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9313  0020AE  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9314  0020B0  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9315  0020B2  E3C2               	bnc	l7017
  9316  0020B4                     l7027:
  9317                           
  9318                           ; BSR set to: 1
  9319                           ;ModbusRtu.c: 1176: }
  9320                           ;ModbusRtu.c: 1177: u8CopyBufferSize = _u8BufferSize + 2;
  9321  0020B4  5074               	movf	__u8BufferSize,w,c
  9322  0020B6  0F02               	addlw	2
  9323  0020B8  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9324                           
  9325                           ; BSR set to: 1
  9326                           ;ModbusRtu.c: 1178: ModbusSendTxBuffer();
  9327  0020BA  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9328                           
  9329                           ;ModbusRtu.c: 1180: return u8CopyBufferSize;
  9330  0020BE  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9331  0020C0  0012               	return		;funcret
  9332  0020C2  FFFF               	dw	65535	; errata NOP
  9333  0020C4                     __end_of_ModbusProcess_FC16:
  9334                           	opt stack 0
  9335                           tblptru	equ	0xFF8
  9336                           tblptrh	equ	0xFF7
  9337                           tblptrl	equ	0xFF6
  9338                           tablat	equ	0xFF5
  9339                           prodh	equ	0xFF4
  9340                           prodl	equ	0xFF3
  9341                           intcon	equ	0xFF2
  9342                           postinc0	equ	0xFEE
  9343                           wreg	equ	0xFE8
  9344                           indf1	equ	0xFE7
  9345                           postinc1	equ	0xFE6
  9346                           postdec1	equ	0xFE5
  9347                           fsr1h	equ	0xFE2
  9348                           fsr1l	equ	0xFE1
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _ModbusProcess_FC15 *****************
  9357 ;; Defined at:
  9358 ;;		line 1094 in file "ModbusRtu.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  regs            1    wreg     PTR unsigned short 
  9361 ;;		 -> _MODBUSCoils(2), 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9364 ;;		 -> _MODBUSCoils(2), 
  9365 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9366 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9367 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9368 ;;  u16coil         2   26[COMRAM] unsigned short 
  9369 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9370 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9371 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9372 ;;  bTemp           1   29[COMRAM] unsigned char 
  9373 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      unsigned char 
  9376 ;; Registers used:
  9377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/1
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9383 ;;      Params:         0       0       0       0       0       0       0
  9384 ;;      Locals:        14       0       0       0       0       0       0
  9385 ;;      Temps:          5       0       0       0       0       0       0
  9386 ;;      Totals:        19       0       0       0       0       0       0
  9387 ;;Total ram usage:       19 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    4
  9390 ;; This function calls:
  9391 ;;		_ModbusSendTxBuffer
  9392 ;; This function is called by:
  9393 ;;		_ModbusPoll
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text47
  9398  001B48                     __ptext47:
  9399                           	opt stack 0
  9400  001B48                     _ModbusProcess_FC15:
  9401                           	opt stack 25
  9402                           
  9403                           ;incstack = 0
  9404  001B48  FFFF               	dw	65535
  9405                           
  9406                           ;ModbusProcess_FC15@regs stored from wreg
  9407  001B4A  6E24               	movwf	ModbusProcess_FC15@regs,c
  9408                           
  9409                           ;ModbusRtu.c: 1097: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9410                           ;ModbusRtu.c: 1098: uint8_t u8CopyBufferSize;
  9411                           ;ModbusRtu.c: 1099: uint16_t u16currentCoil, u16coil;
  9412                           ;ModbusRtu.c: 1100: boolean bTemp;
  9413                           ;ModbusRtu.c: 1103: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  9414  001B4C  0101               	movlb	1	; () banked
  9415  001B4E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9416  001B50  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9417  001B52  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9418  001B54  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9419  001B56  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9420                           
  9421                           ; BSR set to: 1
  9422                           ;ModbusRtu.c: 1104: _lastAddress = u16StartCoil;
  9423  001B5A  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9424  001B5E  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9425                           
  9426                           ;ModbusRtu.c: 1105: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9427  001B62  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9428  001B64  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9429  001B66  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9430  001B68  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9431  001B6A  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9432                           
  9433                           ; BSR set to: 1
  9434                           ;ModbusRtu.c: 1106: _lastCount = u16Coilno;
  9435  001B6E  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9436  001B72  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9437                           
  9438                           ; BSR set to: 1
  9439                           ;ModbusRtu.c: 1109: u8bitsno = 0;
  9440  001B76  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9441                           
  9442                           ;ModbusRtu.c: 1110: u8frameByte = 7;
  9443  001B78  0E07               	movlw	7
  9444  001B7A  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9445                           
  9446                           ; BSR set to: 1
  9447                           ;ModbusRtu.c: 1111: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9448  001B7C  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9449  001B7E  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9450  001B80  D058               	goto	l6989
  9451  001B82                     l6969:
  9452                           
  9453                           ;ModbusRtu.c: 1112: {
  9454                           ;ModbusRtu.c: 1114: u16coil = u16StartCoil + u16currentCoil;
  9455  001B82  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9456  001B84  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9457  001B86  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9458  001B88  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9459  001B8A  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9460  001B8C  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9461                           
  9462                           ;ModbusRtu.c: 1116: u8currentBit = (uint8_t) u16coil;
  9463  001B8E  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9464                           
  9465                           ;ModbusRtu.c: 1118: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9466  001B92  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9467  001B96  0E00               	movlw	low __au8Buffer
  9468  001B98  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9469  001B9A  6ED9               	movwf	fsr2l,c
  9470  001B9C  6ADA               	clrf	fsr2h,c
  9471  001B9E  0E01               	movlw	high __au8Buffer
  9472  001BA0  22DA               	addwfc	fsr2h,f,c
  9473  001BA2  50DF               	movf	indf2,w,c
  9474  001BA4  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9475  001BA6  2A16               	incf	??_ModbusProcess_FC15,f,c
  9476  001BA8  D003               	goto	u6114
  9477  001BAA                     u6115:
  9478  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  9479  001BAC  90D8               	bcf	status,0,c
  9480  001BAE  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9481  001BB0                     u6114:
  9482  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  9483  001BB2  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9484  001BB4  D7FA               	goto	u6115
  9485  001BB6  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9486  001BB8  0B01               	andlw	1
  9487  001BBA  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9488                           
  9489                           ;ModbusRtu.c: 1122: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9490  001BBC  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9491  001BBE  E016               	bz	l6979
  9492  001BC0  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9493  001BC4  0E01               	movlw	1
  9494  001BC6  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9495  001BC8  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9496  001BCA  2A16               	incf	??_ModbusProcess_FC15,f,c
  9497  001BCC  D004               	goto	u6134
  9498  001BCE                     u6135:
  9499  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  9500  001BD0  90D8               	bcf	status,0,c
  9501  001BD2  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9502  001BD4  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9503  001BD6                     u6134:
  9504  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  9505  001BD8  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9506  001BDA  D7F9               	goto	u6135
  9507  001BDC  5024               	movf	ModbusProcess_FC15@regs,w,c
  9508  001BDE  6ED9               	movwf	fsr2l,c
  9509  001BE0  6ADA               	clrf	fsr2h,c
  9510  001BE2  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9511  001BE4  12DE               	iorwf	postinc2,f,c
  9512  001BE6  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9513  001BE8  12DD               	iorwf	postdec2,f,c
  9514  001BEA  D019               	goto	l6981
  9515  001BEC                     l6979:
  9516  001BEC  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9517  001BF0  0E01               	movlw	1
  9518  001BF2  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9519  001BF4  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9520  001BF6  2A16               	incf	??_ModbusProcess_FC15,f,c
  9521  001BF8  D004               	goto	u6144
  9522  001BFA                     u6145:
  9523  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  9524  001BFC  90D8               	bcf	status,0,c
  9525  001BFE  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9526  001C00  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9527  001C02                     u6144:
  9528  001C02  FFFF               	dw	65535	; assembler added errata NOP
  9529  001C04  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9530  001C06  D7F9               	goto	u6145
  9531  001C08  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9532  001C0A  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9533  001C0C  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9534  001C0E  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9535  001C10  5024               	movf	ModbusProcess_FC15@regs,w,c
  9536  001C12  6ED9               	movwf	fsr2l,c
  9537  001C14  6ADA               	clrf	fsr2h,c
  9538  001C16  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9539  001C18  16DE               	andwf	postinc2,f,c
  9540  001C1A  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9541  001C1C  16DD               	andwf	postdec2,f,c
  9542  001C1E                     l6981:
  9543  001C1E  FFFF               	dw	65535	; assembler added errata NOP
  9544                           
  9545                           ;ModbusRtu.c: 1127: u8bitsno++;
  9546  001C20  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9547                           
  9548                           ;ModbusRtu.c: 1129: if (u8bitsno > 7)
  9549  001C22  0E07               	movlw	7
  9550  001C24  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9551  001C26  D002               	goto	l925
  9552                           
  9553                           ;ModbusRtu.c: 1130: {
  9554                           ;ModbusRtu.c: 1131: u8bitsno = 0;
  9555  001C28  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9556                           
  9557                           ;ModbusRtu.c: 1132: u8frameByte++;
  9558  001C2A  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9559  001C2C                     l925:
  9560  001C2C  FFFF               	dw	65535	; assembler added errata NOP
  9561  001C2E  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9562  001C30  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9563  001C32                     l6989:
  9564  001C32  FFFF               	dw	65535	; assembler added errata NOP
  9565  001C34  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9566  001C36  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9567  001C38  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9568  001C3A  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9569  001C3C  E3A2               	bnc	l6969
  9570                           
  9571                           ;ModbusRtu.c: 1133: }
  9572                           ;ModbusRtu.c: 1134: }
  9573                           ;ModbusRtu.c: 1138: _u8BufferSize = 6;
  9574  001C3E  0E06               	movlw	6
  9575  001C40  6E74               	movwf	__u8BufferSize,c
  9576                           
  9577                           ;ModbusRtu.c: 1139: u8CopyBufferSize = _u8BufferSize + 2;
  9578  001C42  5074               	movf	__u8BufferSize,w,c
  9579  001C44  0F02               	addlw	2
  9580  001C46  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9581                           
  9582                           ;ModbusRtu.c: 1140: ModbusSendTxBuffer();
  9583  001C48  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9584                           
  9585                           ;ModbusRtu.c: 1141: return u8CopyBufferSize;
  9586  001C4C  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9587  001C4E  0012               	return		;funcret
  9588  001C50  FFFF               	dw	65535	; errata NOP
  9589  001C52                     __end_of_ModbusProcess_FC15:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           indf1	equ	0xFE7
  9601                           postinc1	equ	0xFE6
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function _ModbusProcess_FC102 *****************
  9613 ;; Defined at:
  9614 ;;		line 1399 in file "ModbusRtu.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      unsigned char 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/1
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9628 ;;      Params:         0       0       0       0       0       0       0
  9629 ;;      Locals:         1       0       0       0       0       0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0
  9631 ;;      Totals:         1       0       0       0       0       0       0
  9632 ;;Total ram usage:        1 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    4
  9635 ;; This function calls:
  9636 ;;		_ModbusSendTxBuffer
  9637 ;; This function is called by:
  9638 ;;		_ModbusPoll
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text48
  9643  002FD8                     __ptext48:
  9644                           	opt stack 0
  9645  002FD8                     _ModbusProcess_FC102:
  9646                           	opt stack 25
  9647                           
  9648                           ;incstack = 0
  9649  002FD8  FFFF               	dw	65535
  9650                           
  9651                           ;ModbusRtu.c: 1401: _au8Buffer[FUNC + 1] = _deviceStatus;
  9652  002FDA  C0C9  F102         	movff	__deviceStatus,__au8Buffer+2
  9653                           
  9654                           ;ModbusRtu.c: 1402: _u8BufferSize = 3;
  9655  002FDE  0E03               	movlw	3
  9656  002FE0  6E74               	movwf	__u8BufferSize,c
  9657                           
  9658                           ;ModbusRtu.c: 1403: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9659  002FE2  5074               	movf	__u8BufferSize,w,c
  9660  002FE4  0F02               	addlw	2
  9661  002FE6  6E16               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
  9662                           
  9663                           ;ModbusRtu.c: 1404: ModbusSendTxBuffer();
  9664  002FE8  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9665                           
  9666                           ;ModbusRtu.c: 1406: return u8CopyBufferSize;
  9667  002FEC  5016               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
  9668  002FEE  0012               	return		;funcret
  9669  002FF0  FFFF               	dw	65535	; errata NOP
  9670  002FF2                     __end_of_ModbusProcess_FC102:
  9671                           	opt stack 0
  9672                           tblptru	equ	0xFF8
  9673                           tblptrh	equ	0xFF7
  9674                           tblptrl	equ	0xFF6
  9675                           tablat	equ	0xFF5
  9676                           prodh	equ	0xFF4
  9677                           prodl	equ	0xFF3
  9678                           intcon	equ	0xFF2
  9679                           postinc0	equ	0xFEE
  9680                           wreg	equ	0xFE8
  9681                           indf1	equ	0xFE7
  9682                           postinc1	equ	0xFE6
  9683                           postdec1	equ	0xFE5
  9684                           fsr1h	equ	0xFE2
  9685                           fsr1l	equ	0xFE1
  9686                           indf2	equ	0xFDF
  9687                           postinc2	equ	0xFDE
  9688                           postdec2	equ	0xFDD
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _ModbusProcess_FC101 *****************
  9694 ;; Defined at:
  9695 ;;		line 1381 in file "ModbusRtu.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      unsigned char 
  9702 ;; Registers used:
  9703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/1
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9709 ;;      Params:         0       0       0       0       0       0       0
  9710 ;;      Locals:         1       0       0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0
  9712 ;;      Totals:         1       0       0       0       0       0       0
  9713 ;;Total ram usage:        1 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    4
  9716 ;; This function calls:
  9717 ;;		_ModbusSendTxBuffer
  9718 ;; This function is called by:
  9719 ;;		_ModbusPoll
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text49
  9724  002E06                     __ptext49:
  9725                           	opt stack 0
  9726  002E06                     _ModbusProcess_FC101:
  9727                           	opt stack 25
  9728                           
  9729                           ;incstack = 0
  9730  002E06  FFFF               	dw	65535
  9731                           
  9732                           ;ModbusRtu.c: 1383: _u8BufferSize = 10;
  9733  002E08  0E0A               	movlw	10
  9734  002E0A  6E74               	movwf	__u8BufferSize,c
  9735                           
  9736                           ;ModbusRtu.c: 1384: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
  9737  002E0C  C102  F0E6         	movff	__au8Buffer+2,_ModbusUserCommandId
  9738                           
  9739                           ;ModbusRtu.c: 1385: ModbusUserCommandData = _au8Buffer[COM_DATA];
  9740  002E10  C103  F0E5         	movff	__au8Buffer+3,_ModbusUserCommandData
  9741                           
  9742                           ;ModbusRtu.c: 1386: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
  9743  002E14  C104  F0DF         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
  9744                           
  9745                           ;ModbusRtu.c: 1387: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
  9746  002E18  C105  F0E0         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
  9747                           
  9748                           ;ModbusRtu.c: 1388: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
  9749  002E1C  C106  F0E1         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
  9750                           
  9751                           ;ModbusRtu.c: 1389: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
  9752  002E20  C107  F0E2         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
  9753                           
  9754                           ;ModbusRtu.c: 1390: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
  9755  002E24  C108  F0E3         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
  9756                           
  9757                           ;ModbusRtu.c: 1391: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
  9758  002E28  C109  F0E4         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
  9759                           
  9760                           ;ModbusRtu.c: 1393: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9761  002E2C  5074               	movf	__u8BufferSize,w,c
  9762  002E2E  0F02               	addlw	2
  9763  002E30  6E16               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
  9764                           
  9765                           ;ModbusRtu.c: 1394: ModbusSendTxBuffer();
  9766  002E32  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9767                           
  9768                           ;ModbusRtu.c: 1396: return u8CopyBufferSize;
  9769  002E36  5016               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
  9770  002E38  0012               	return		;funcret
  9771  002E3A  FFFF               	dw	65535	; errata NOP
  9772  002E3C                     __end_of_ModbusProcess_FC101:
  9773                           	opt stack 0
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           postinc0	equ	0xFEE
  9782                           wreg	equ	0xFE8
  9783                           indf1	equ	0xFE7
  9784                           postinc1	equ	0xFE6
  9785                           postdec1	equ	0xFE5
  9786                           fsr1h	equ	0xFE2
  9787                           fsr1l	equ	0xFE1
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           postdec2	equ	0xFDD
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function _ModbusProcess_FC100 *****************
  9796 ;; Defined at:
  9797 ;;		line 1341 in file "ModbusRtu.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;  newTime        18   73[COMRAM] struct tm
  9802 ;;  newRawTime      4   68[COMRAM] long 
  9803 ;;  u8CopyBuffer    1   72[COMRAM] unsigned char 
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  1    wreg      unsigned char 
  9806 ;; Registers used:
  9807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/1
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9813 ;;      Params:         0       0       0       0       0       0       0
  9814 ;;      Locals:        23       0       0       0       0       0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0
  9816 ;;      Totals:        23       0       0       0       0       0       0
  9817 ;;Total ram usage:       23 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    6
  9820 ;; This function calls:
  9821 ;;		_ModbusSendTxBuffer
  9822 ;;		_ModbusSetExceptionStatusBit
  9823 ;;		_SetHourMin
  9824 ;;		_SetTime
  9825 ;;		_mktime
  9826 ;; This function is called by:
  9827 ;;		_ModbusPoll
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text50
  9832  001E4A                     __ptext50:
  9833                           	opt stack 0
  9834  001E4A                     _ModbusProcess_FC100:
  9835                           	opt stack 23
  9836                           
  9837                           ;incstack = 0
  9838  001E4A  FFFF               	dw	65535
  9839                           
  9840                           ;ModbusRtu.c: 1343: _u8BufferSize = 10;
  9841  001E4C  0E0A               	movlw	10
  9842  001E4E  6E74               	movwf	__u8BufferSize,c
  9843                           
  9844                           ;ModbusRtu.c: 1344: _lastCommand = _au8Buffer[COM_COM_ID];
  9845  001E50  C102  F0D0         	movff	__au8Buffer+2,__lastCommand
  9846                           
  9847                           ;ModbusRtu.c: 1345: switch(_lastCommand)
  9848  001E54  D058               	goto	l7221
  9849  001E56                     l978:
  9850                           
  9851                           ; BSR set to: 0
  9852  001E56  00FF               	reset		; ;# 
  9853                           
  9854                           ;ModbusRtu.c: 1351: break;
  9855  001E58  D05F               	goto	l7223
  9856  001E5A                     l980:
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;ModbusRtu.c: 1353: _u8id = _au8Buffer[COM_DATA];
  9860  001E5A  C103  F0D5         	movff	__au8Buffer+3,__u8id
  9861  001E5E                     l982:
  9862  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  9863  001E60  B2A6               	btfsc	4006,1,c	;volatile
  9864  001E62  D7FD               	goto	l982
  9865  001E64  0E01               	movlw	1
  9866  001E66  6EA9               	movwf	4009,c	;volatile
  9867  001E68  C0D5  FFA8         	movff	__u8id,4008	;volatile
  9868  001E6C  90D8               	bcf	status,0,c	;volatile
  9869  001E6E  BEF2               	btfsc	intcon,7,c	;volatile
  9870  001E70  80D8               	bsf	status,0,c	;volatile
  9871  001E72  9EF2               	bcf	intcon,7,c	;volatile
  9872  001E74  84A6               	bsf	4006,2,c	;volatile
  9873  001E76  0E55               	movlw	85
  9874  001E78  6EA7               	movwf	4007,c	;volatile
  9875  001E7A  0EAA               	movlw	170
  9876  001E7C  6EA7               	movwf	4007,c	;volatile
  9877  001E7E  82A6               	bsf	4006,1,c	;volatile
  9878  001E80  94A6               	bcf	4006,2,c	;volatile
  9879  001E82  E301               	bnc	l7195
  9880  001E84  8EF2               	bsf	intcon,7,c	;volatile
  9881  001E86                     l7195:
  9882                           
  9883                           ;ModbusRtu.c: 1355: ModbusSetExceptionStatusBit(0, 1);
  9884  001E86  0E01               	movlw	1
  9885  001E88  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9886  001E8A  0E00               	movlw	0
  9887  001E8C  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  9888                           
  9889                           ;ModbusRtu.c: 1356: break;
  9890  001E90  D043               	goto	l7223
  9891  001E92                     l7197:
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;ModbusRtu.c: 1358: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
  9895  001E92  0E04               	movlw	low (__au8Buffer+4)
  9896  001E94  6E0B               	movwf	SetHourMin@newHour,c
  9897  001E96  0E01               	movlw	high (__au8Buffer+4)
  9898  001E98  6E0C               	movwf	SetHourMin@newHour+1,c
  9899  001E9A  0E05               	movlw	low (__au8Buffer+5)
  9900  001E9C  6E0D               	movwf	SetHourMin@newMin,c
  9901  001E9E  0E01               	movlw	high (__au8Buffer+5)
  9902  001EA0  6E0E               	movwf	SetHourMin@newMin+1,c
  9903  001EA2  0E07               	movlw	low (__au8Buffer+7)
  9904  001EA4  6E0F               	movwf	SetHourMin@sec,c
  9905  001EA6  0E01               	movlw	high (__au8Buffer+7)
  9906  001EA8  6E10               	movwf	SetHourMin@sec+1,c
  9907  001EAA  EC1B  F00D         	call	_SetHourMin	;wreg free
  9908                           
  9909                           ;ModbusRtu.c: 1361: struct tm newTime;
  9910                           ;ModbusRtu.c: 1362: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
  9911  001EAE  0E64               	movlw	100
  9912  001EB0  0101               	movlb	1	; () banked
  9913  001EB2  2509               	addwf	(__au8Buffer+9)& (0+255),w,b
  9914  001EB4  6E54               	movwf	ModbusProcess_FC100@newTime+10,c
  9915  001EB6  6A55               	clrf	ModbusProcess_FC100@newTime+11,c
  9916  001EB8  0E00               	movlw	0
  9917  001EBA  2255               	addwfc	ModbusProcess_FC100@newTime+11,f,c
  9918                           
  9919                           ; BSR set to: 1
  9920                           ;ModbusRtu.c: 1363: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
  9921  001EBC  C108  F052         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
  9922  001EC0  6A53               	clrf	ModbusProcess_FC100@newTime+9,c
  9923                           
  9924                           ; BSR set to: 1
  9925                           ;ModbusRtu.c: 1364: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
  9926  001EC2  C106  F050         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
  9927  001EC6  6A51               	clrf	ModbusProcess_FC100@newTime+7,c
  9928                           
  9929                           ; BSR set to: 1
  9930                           ;ModbusRtu.c: 1365: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
  9931  001EC8  C104  F04E         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
  9932  001ECC  6A4F               	clrf	ModbusProcess_FC100@newTime+5,c
  9933                           
  9934                           ; BSR set to: 1
  9935                           ;ModbusRtu.c: 1366: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
  9936  001ECE  C105  F04C         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
  9937  001ED2  6A4D               	clrf	ModbusProcess_FC100@newTime+3,c
  9938                           
  9939                           ; BSR set to: 1
  9940                           ;ModbusRtu.c: 1367: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
  9941  001ED4  C107  F04A         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
  9942  001ED8  6A4B               	clrf	ModbusProcess_FC100@newTime+1,c
  9943                           
  9944                           ; BSR set to: 1
  9945                           ;ModbusRtu.c: 1368: time_t newRawTime = mktime(&newTime);
  9946  001EDA  0E4A               	movlw	ModbusProcess_FC100@newTime& (0+255)
  9947  001EDC  EC2C  F003         	call	_mktime
  9948  001EE0  C02E  F045         	movff	?_mktime,ModbusProcess_FC100@newRawTime
  9949  001EE4  C02F  F046         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
  9950  001EE8  C030  F047         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
  9951  001EEC  C031  F048         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
  9952                           
  9953                           ;ModbusRtu.c: 1369: SetTime(&newRawTime);
  9954  001EF0  0E45               	movlw	ModbusProcess_FC100@newRawTime& (0+255)
  9955  001EF2  ECD0  F017         	call	_SetTime
  9956                           
  9957                           ;ModbusRtu.c: 1371: ((_deviceStatus) |= ((unsigned short)1 << (0)));
  9958  001EF6  0100               	movlb	0	; () banked
  9959  001EF8  81C9               	bsf	__deviceStatus& (0+255),0,b
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;ModbusRtu.c: 1372: ModbusSetExceptionStatusBit(0, 1);
  9963  001EFA  0E01               	movlw	1
  9964  001EFC  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9965  001EFE  0E00               	movlw	0
  9966  001F00  EC4E  F015         	call	_ModbusSetExceptionStatusBit
  9967                           
  9968                           ;ModbusRtu.c: 1373: break;
  9969  001F04  D009               	goto	l7223
  9970  001F06                     l7221:
  9971  001F06  FFFF               	dw	65535	; assembler added errata NOP
  9972  001F08  0100               	movlb	0	; () banked
  9973  001F0A  51D0               	movf	__lastCommand& (0+255),w,b
  9974                           
  9975                           ; Switch size 1, requested type "speed"
  9976                           ; Number of cases is 3, Range of values is 1 to 127
  9977                           ; switch strategies available:
  9978                           ; Name         Instructions Cycles
  9979                           ; simple_byte           10     6 (average)
  9980                           ;	Chosen strategy is simple_byte
  9981  001F0C  0A01               	xorlw	1	; case 1
  9982  001F0E  E0A5               	bz	l980
  9983  001F10  0A11               	xorlw	17	; case 16
  9984  001F12  E0BF               	bz	l7197
  9985  001F14  0A6F               	xorlw	111	; case 127
  9986  001F16  E09F               	bz	l978
  9987  001F18                     l7223:
  9988  001F18  FFFF               	dw	65535	; assembler added errata NOP
  9989                           
  9990                           ;ModbusRtu.c: 1375: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9991  001F1A  5074               	movf	__u8BufferSize,w,c
  9992  001F1C  0F02               	addlw	2
  9993  001F1E  6E49               	movwf	ModbusProcess_FC100@u8CopyBufferSize,c
  9994                           
  9995                           ;ModbusRtu.c: 1376: ModbusSendTxBuffer();
  9996  001F20  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
  9997                           
  9998                           ;ModbusRtu.c: 1378: return u8CopyBufferSize;
  9999  001F24  5049               	movf	ModbusProcess_FC100@u8CopyBufferSize,w,c
 10000  001F26  0012               	return		;funcret
 10001  001F28  FFFF               	dw	65535	; errata NOP
 10002  001F2A                     __end_of_ModbusProcess_FC100:
 10003                           	opt stack 0
 10004                           tblptru	equ	0xFF8
 10005                           tblptrh	equ	0xFF7
 10006                           tblptrl	equ	0xFF6
 10007                           tablat	equ	0xFF5
 10008                           prodh	equ	0xFF4
 10009                           prodl	equ	0xFF3
 10010                           intcon	equ	0xFF2
 10011                           postinc0	equ	0xFEE
 10012                           wreg	equ	0xFE8
 10013                           indf1	equ	0xFE7
 10014                           postinc1	equ	0xFE6
 10015                           postdec1	equ	0xFE5
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function _mktime *****************
 10026 ;; Defined at:
 10027 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  timeptr         1    wreg     PTR struct tm
 10030 ;;		 -> ModbusProcess_FC100@newTime(18), 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  timeptr         1   67[COMRAM] PTR struct tm
 10033 ;;		 -> ModbusProcess_FC100@newTime(18), 
 10034 ;;  tt              4   63[COMRAM] long 
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  4   45[COMRAM] long 
 10037 ;; Registers used:
 10038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10039 ;; Tracked objects:
 10040 ;;		On entry : F/1
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10044 ;;      Params:         4       0       0       0       0       0       0
 10045 ;;      Locals:         5       0       0       0       0       0       0
 10046 ;;      Temps:         14       0       0       0       0       0       0
 10047 ;;      Totals:        23       0       0       0       0       0       0
 10048 ;;Total ram usage:       23 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    5
 10051 ;; This function calls:
 10052 ;;		_ymd_to_scalar
 10053 ;; This function is called by:
 10054 ;;		_ModbusProcess_FC100
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           	psect	text51
 10059  000658                     __ptext51:
 10060                           	opt stack 0
 10061  000658                     _mktime:
 10062                           	opt stack 23
 10063                           
 10064                           ;incstack = 0
 10065  000658  FFFF               	dw	65535
 10066                           
 10067                           ;mktime@timeptr stored from wreg
 10068  00065A  6E44               	movwf	mktime@timeptr,c
 10069  00065C  5044               	movf	mktime@timeptr,w,c
 10070  00065E  6ED9               	movwf	fsr2l,c
 10071  000660  6ADA               	clrf	fsr2h,c
 10072  000662  0E0A               	movlw	10
 10073  000664  26D9               	addwf	fsr2l,f,c
 10074  000666  0E01               	movlw	1
 10075  000668  BEDB               	btfsc	plusw2,7,c
 10076  00066A  D012               	goto	l1438
 10077  00066C  50DB               	movf	plusw2,w,c
 10078  00066E  E103               	bnz	u5540
 10079  000670  0E46               	movlw	70
 10080  000672  5CDE               	subwf	postinc2,w,c
 10081  000674  E30D               	bnc	l1438
 10082  000676                     u5540:
 10083  000676  5044               	movf	mktime@timeptr,w,c
 10084  000678  6ED9               	movwf	fsr2l,c
 10085  00067A  6ADA               	clrf	fsr2h,c
 10086  00067C  0E0A               	movlw	10
 10087  00067E  26D9               	addwf	fsr2l,f,c
 10088  000680  0E01               	movlw	1
 10089  000682  BEDB               	btfsc	plusw2,7,c
 10090  000684  D00B               	goto	l6441
 10091  000686  50DB               	movf	plusw2,w,c
 10092  000688  E103               	bnz	u5550
 10093  00068A  0E8B               	movlw	139
 10094  00068C  5CDE               	subwf	postinc2,w,c
 10095  00068E  E306               	bnc	l6441
 10096  000690                     u5550:
 10097  000690                     l1438:
 10098  000690  FFFF               	dw	65535	; assembler added errata NOP
 10099  000692  6840               	setf	mktime@tt,c
 10100  000694  6841               	setf	mktime@tt+1,c
 10101  000696  6842               	setf	mktime@tt+2,c
 10102  000698  6843               	setf	mktime@tt+3,c
 10103  00069A  D15C               	goto	l6451
 10104  00069C                     l6441:
 10105  00069C  FFFF               	dw	65535	; assembler added errata NOP
 10106  00069E  5044               	movf	mktime@timeptr,w,c
 10107  0006A0  6ED9               	movwf	fsr2l,c
 10108  0006A2  6ADA               	clrf	fsr2h,c
 10109  0006A4  0E0A               	movlw	10
 10110  0006A6  26D9               	addwf	fsr2l,f,c
 10111  0006A8  CFDE F032          	movff	postinc2,??_mktime
 10112  0006AC  CFDD F033          	movff	postdec2,??_mktime+1
 10113  0006B0  0E6C               	movlw	108
 10114  0006B2  2432               	addwf	??_mktime,w,c
 10115  0006B4  6E1E               	movwf	ymd_to_scalar@yr,c
 10116  0006B6  0E07               	movlw	7
 10117  0006B8  2033               	addwfc	??_mktime+1,w,c
 10118  0006BA  6E1F               	movwf	ymd_to_scalar@yr+1,c
 10119  0006BC  5044               	movf	mktime@timeptr,w,c
 10120  0006BE  6ED9               	movwf	fsr2l,c
 10121  0006C0  6ADA               	clrf	fsr2h,c
 10122  0006C2  0E08               	movlw	8
 10123  0006C4  26D9               	addwf	fsr2l,f,c
 10124  0006C6  CFDE F034          	movff	postinc2,??_mktime+2
 10125  0006CA  CFDD F035          	movff	postdec2,??_mktime+3
 10126  0006CE  2834               	incf	??_mktime+2,w,c
 10127  0006D0  6E20               	movwf	ymd_to_scalar@mo,c
 10128  0006D2  0E00               	movlw	0
 10129  0006D4  2035               	addwfc	??_mktime+3,w,c
 10130  0006D6  6E21               	movwf	ymd_to_scalar@mo+1,c
 10131  0006D8  5044               	movf	mktime@timeptr,w,c
 10132  0006DA  6ED9               	movwf	fsr2l,c
 10133  0006DC  6ADA               	clrf	fsr2h,c
 10134  0006DE  0E06               	movlw	6
 10135  0006E0  26D9               	addwf	fsr2l,f,c
 10136  0006E2  CFDE F022          	movff	postinc2,ymd_to_scalar@day
 10137  0006E6  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
 10138  0006EA  EC21  F012         	call	_ymd_to_scalar	;wreg free
 10139  0006EE  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
 10140  0006F2  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
 10141  0006F6  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
 10142  0006FA  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
 10143  0006FE  0E07               	movlw	7
 10144  000700  6E1F               	movwf	ymd_to_scalar@yr+1,c
 10145  000702  0EB2               	movlw	178
 10146  000704  6E1E               	movwf	ymd_to_scalar@yr,c
 10147  000706  6A21               	clrf	ymd_to_scalar@mo+1,c
 10148  000708  0E01               	movlw	1
 10149  00070A  6E20               	movwf	ymd_to_scalar@mo,c
 10150  00070C  6A23               	clrf	ymd_to_scalar@day+1,c
 10151  00070E  6E22               	movwf	ymd_to_scalar@day,c
 10152  000710  EC21  F012         	call	_ymd_to_scalar	;wreg free
 10153  000714  501E               	movf	?_ymd_to_scalar,w,c
 10154  000716  5E40               	subwf	mktime@tt,f,c
 10155  000718  501F               	movf	?_ymd_to_scalar+1,w,c
 10156  00071A  5A41               	subwfb	mktime@tt+1,f,c
 10157  00071C  5020               	movf	?_ymd_to_scalar+2,w,c
 10158  00071E  5A42               	subwfb	mktime@tt+2,f,c
 10159  000720  5021               	movf	?_ymd_to_scalar+3,w,c
 10160  000722  5A43               	subwfb	mktime@tt+3,f,c
 10161  000724  5044               	movf	mktime@timeptr,w,c
 10162  000726  6ED9               	movwf	fsr2l,c
 10163  000728  6ADA               	clrf	fsr2h,c
 10164  00072A  0E04               	movlw	4
 10165  00072C  26D9               	addwf	fsr2l,f,c
 10166  00072E  CFDE F032          	movff	postinc2,??_mktime
 10167  000732  CFDD F033          	movff	postdec2,??_mktime+1
 10168  000736  C032  F034         	movff	??_mktime,??_mktime+2
 10169  00073A  C033  F035         	movff	??_mktime+1,??_mktime+3
 10170  00073E  0E00               	movlw	0
 10171  000740  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
 10172  000742  0EFF               	movlw	255
 10173  000744  6E36               	movwf	(??_mktime+4)& (0+255),c
 10174  000746  6E37               	movwf	(??_mktime+5)& (0+255),c
 10175  000748  C040  F038         	movff	mktime@tt,??_mktime+6
 10176  00074C  C041  F039         	movff	mktime@tt+1,??_mktime+7
 10177  000750  C042  F03A         	movff	mktime@tt+2,??_mktime+8
 10178  000754  C043  F03B         	movff	mktime@tt+3,??_mktime+9
 10179  000758  0E18               	movlw	24
 10180  00075A  0238               	mulwf	(??_mktime+6)& (0+255),c
 10181  00075C  CFF3 F03C          	movff	prodl,??_mktime+10
 10182  000760  CFF4 F03D          	movff	prodh,??_mktime+11
 10183  000764  6A3E               	clrf	(??_mktime+12)& (0+255),c
 10184  000766  6A3F               	clrf	(??_mktime+13)& (0+255),c
 10185  000768  0239               	mulwf	(??_mktime+7)& (0+255),c
 10186  00076A  50F3               	movf	prodl,w,c
 10187  00076C  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10188  00076E  50F4               	movf	prodh,w,c
 10189  000770  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10190  000772  0E00               	movlw	0
 10191  000774  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10192  000776  0238               	mulwf	(??_mktime+6)& (0+255),c
 10193  000778  50F3               	movf	prodl,w,c
 10194  00077A  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10195  00077C  50F4               	movf	prodh,w,c
 10196  00077E  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10197  000780  0E00               	movlw	0
 10198  000782  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10199  000784  0E18               	movlw	24
 10200  000786  023A               	mulwf	(??_mktime+8)& (0+255),c
 10201  000788  50F3               	movf	prodl,w,c
 10202  00078A  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10203  00078C  50F4               	movf	prodh,w,c
 10204  00078E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10205  000790  0E00               	movlw	0
 10206  000792  0239               	mulwf	(??_mktime+7)& (0+255),c
 10207  000794  50F3               	movf	prodl,w,c
 10208  000796  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10209  000798  50F4               	movf	prodh,w,c
 10210  00079A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10211  00079C  0E00               	movlw	0
 10212  00079E  0238               	mulwf	(??_mktime+6)& (0+255),c
 10213  0007A0  50F3               	movf	prodl,w,c
 10214  0007A2  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10215  0007A4  50F4               	movf	prodh,w,c
 10216  0007A6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10217  0007A8  0E18               	movlw	24
 10218  0007AA  023B               	mulwf	(??_mktime+9)& (0+255),c
 10219  0007AC  50F3               	movf	prodl,w,c
 10220  0007AE  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10221  0007B0  0E00               	movlw	0
 10222  0007B2  023A               	mulwf	(??_mktime+8)& (0+255),c
 10223  0007B4  50F3               	movf	prodl,w,c
 10224  0007B6  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10225  0007B8  0E00               	movlw	0
 10226  0007BA  0239               	mulwf	(??_mktime+7)& (0+255),c
 10227  0007BC  50F3               	movf	prodl,w,c
 10228  0007BE  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10229  0007C0  0E00               	movlw	0
 10230  0007C2  0238               	mulwf	(??_mktime+6)& (0+255),c
 10231  0007C4  50F3               	movf	prodl,w,c
 10232  0007C6  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10233  0007C8  5034               	movf	??_mktime+2,w,c
 10234  0007CA  243C               	addwf	??_mktime+10,w,c
 10235  0007CC  6E40               	movwf	mktime@tt,c
 10236  0007CE  5035               	movf	??_mktime+3,w,c
 10237  0007D0  203D               	addwfc	??_mktime+11,w,c
 10238  0007D2  6E41               	movwf	mktime@tt+1,c
 10239  0007D4  5036               	movf	??_mktime+4,w,c
 10240  0007D6  203E               	addwfc	??_mktime+12,w,c
 10241  0007D8  6E42               	movwf	mktime@tt+2,c
 10242  0007DA  5037               	movf	??_mktime+5,w,c
 10243  0007DC  203F               	addwfc	??_mktime+13,w,c
 10244  0007DE  6E43               	movwf	mktime@tt+3,c
 10245  0007E0  5044               	movf	mktime@timeptr,w,c
 10246  0007E2  6ED9               	movwf	fsr2l,c
 10247  0007E4  6ADA               	clrf	fsr2h,c
 10248  0007E6  0E02               	movlw	2
 10249  0007E8  26D9               	addwf	fsr2l,f,c
 10250  0007EA  CFDE F032          	movff	postinc2,??_mktime
 10251  0007EE  CFDD F033          	movff	postdec2,??_mktime+1
 10252  0007F2  C032  F034         	movff	??_mktime,??_mktime+2
 10253  0007F6  C033  F035         	movff	??_mktime+1,??_mktime+3
 10254  0007FA  0E00               	movlw	0
 10255  0007FC  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
 10256  0007FE  0EFF               	movlw	255
 10257  000800  6E36               	movwf	(??_mktime+4)& (0+255),c
 10258  000802  6E37               	movwf	(??_mktime+5)& (0+255),c
 10259  000804  C040  F038         	movff	mktime@tt,??_mktime+6
 10260  000808  C041  F039         	movff	mktime@tt+1,??_mktime+7
 10261  00080C  C042  F03A         	movff	mktime@tt+2,??_mktime+8
 10262  000810  C043  F03B         	movff	mktime@tt+3,??_mktime+9
 10263  000814  0E3C               	movlw	60
 10264  000816  0238               	mulwf	(??_mktime+6)& (0+255),c
 10265  000818  CFF3 F03C          	movff	prodl,??_mktime+10
 10266  00081C  CFF4 F03D          	movff	prodh,??_mktime+11
 10267  000820  6A3E               	clrf	(??_mktime+12)& (0+255),c
 10268  000822  6A3F               	clrf	(??_mktime+13)& (0+255),c
 10269  000824  0239               	mulwf	(??_mktime+7)& (0+255),c
 10270  000826  50F3               	movf	prodl,w,c
 10271  000828  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10272  00082A  50F4               	movf	prodh,w,c
 10273  00082C  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10274  00082E  0E00               	movlw	0
 10275  000830  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10276  000832  0238               	mulwf	(??_mktime+6)& (0+255),c
 10277  000834  50F3               	movf	prodl,w,c
 10278  000836  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10279  000838  50F4               	movf	prodh,w,c
 10280  00083A  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10281  00083C  0E00               	movlw	0
 10282  00083E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10283  000840  0E3C               	movlw	60
 10284  000842  023A               	mulwf	(??_mktime+8)& (0+255),c
 10285  000844  50F3               	movf	prodl,w,c
 10286  000846  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10287  000848  50F4               	movf	prodh,w,c
 10288  00084A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10289  00084C  0E00               	movlw	0
 10290  00084E  0239               	mulwf	(??_mktime+7)& (0+255),c
 10291  000850  50F3               	movf	prodl,w,c
 10292  000852  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10293  000854  50F4               	movf	prodh,w,c
 10294  000856  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10295  000858  0E00               	movlw	0
 10296  00085A  0238               	mulwf	(??_mktime+6)& (0+255),c
 10297  00085C  50F3               	movf	prodl,w,c
 10298  00085E  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10299  000860  50F4               	movf	prodh,w,c
 10300  000862  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10301  000864  0E3C               	movlw	60
 10302  000866  023B               	mulwf	(??_mktime+9)& (0+255),c
 10303  000868  50F3               	movf	prodl,w,c
 10304  00086A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10305  00086C  0E00               	movlw	0
 10306  00086E  023A               	mulwf	(??_mktime+8)& (0+255),c
 10307  000870  50F3               	movf	prodl,w,c
 10308  000872  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10309  000874  0E00               	movlw	0
 10310  000876  0239               	mulwf	(??_mktime+7)& (0+255),c
 10311  000878  50F3               	movf	prodl,w,c
 10312  00087A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10313  00087C  0E00               	movlw	0
 10314  00087E  0238               	mulwf	(??_mktime+6)& (0+255),c
 10315  000880  50F3               	movf	prodl,w,c
 10316  000882  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10317  000884  5034               	movf	??_mktime+2,w,c
 10318  000886  243C               	addwf	??_mktime+10,w,c
 10319  000888  6E40               	movwf	mktime@tt,c
 10320  00088A  5035               	movf	??_mktime+3,w,c
 10321  00088C  203D               	addwfc	??_mktime+11,w,c
 10322  00088E  6E41               	movwf	mktime@tt+1,c
 10323  000890  5036               	movf	??_mktime+4,w,c
 10324  000892  203E               	addwfc	??_mktime+12,w,c
 10325  000894  6E42               	movwf	mktime@tt+2,c
 10326  000896  5037               	movf	??_mktime+5,w,c
 10327  000898  203F               	addwfc	??_mktime+13,w,c
 10328  00089A  6E43               	movwf	mktime@tt+3,c
 10329  00089C  5044               	movf	mktime@timeptr,w,c
 10330  00089E  6ED9               	movwf	fsr2l,c
 10331  0008A0  6ADA               	clrf	fsr2h,c
 10332  0008A2  CFDE F032          	movff	postinc2,??_mktime
 10333  0008A6  CFDD F033          	movff	postdec2,??_mktime+1
 10334  0008AA  C032  F034         	movff	??_mktime,??_mktime+2
 10335  0008AE  C033  F035         	movff	??_mktime+1,??_mktime+3
 10336  0008B2  0E00               	movlw	0
 10337  0008B4  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
 10338  0008B6  0EFF               	movlw	255
 10339  0008B8  6E36               	movwf	(??_mktime+4)& (0+255),c
 10340  0008BA  6E37               	movwf	(??_mktime+5)& (0+255),c
 10341  0008BC  C040  F038         	movff	mktime@tt,??_mktime+6
 10342  0008C0  C041  F039         	movff	mktime@tt+1,??_mktime+7
 10343  0008C4  C042  F03A         	movff	mktime@tt+2,??_mktime+8
 10344  0008C8  C043  F03B         	movff	mktime@tt+3,??_mktime+9
 10345  0008CC  0E3C               	movlw	60
 10346  0008CE  0238               	mulwf	(??_mktime+6)& (0+255),c
 10347  0008D0  CFF3 F03C          	movff	prodl,??_mktime+10
 10348  0008D4  CFF4 F03D          	movff	prodh,??_mktime+11
 10349  0008D8  6A3E               	clrf	(??_mktime+12)& (0+255),c
 10350  0008DA  6A3F               	clrf	(??_mktime+13)& (0+255),c
 10351  0008DC  0239               	mulwf	(??_mktime+7)& (0+255),c
 10352  0008DE  50F3               	movf	prodl,w,c
 10353  0008E0  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10354  0008E2  50F4               	movf	prodh,w,c
 10355  0008E4  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10356  0008E6  0E00               	movlw	0
 10357  0008E8  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10358  0008EA  0238               	mulwf	(??_mktime+6)& (0+255),c
 10359  0008EC  50F3               	movf	prodl,w,c
 10360  0008EE  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10361  0008F0  50F4               	movf	prodh,w,c
 10362  0008F2  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10363  0008F4  0E00               	movlw	0
 10364  0008F6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10365  0008F8  0E3C               	movlw	60
 10366  0008FA  023A               	mulwf	(??_mktime+8)& (0+255),c
 10367  0008FC  50F3               	movf	prodl,w,c
 10368  0008FE  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10369  000900  50F4               	movf	prodh,w,c
 10370  000902  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10371  000904  0E00               	movlw	0
 10372  000906  0239               	mulwf	(??_mktime+7)& (0+255),c
 10373  000908  50F3               	movf	prodl,w,c
 10374  00090A  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10375  00090C  50F4               	movf	prodh,w,c
 10376  00090E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10377  000910  0E00               	movlw	0
 10378  000912  0238               	mulwf	(??_mktime+6)& (0+255),c
 10379  000914  50F3               	movf	prodl,w,c
 10380  000916  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10381  000918  50F4               	movf	prodh,w,c
 10382  00091A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10383  00091C  0E3C               	movlw	60
 10384  00091E  023B               	mulwf	(??_mktime+9)& (0+255),c
 10385  000920  50F3               	movf	prodl,w,c
 10386  000922  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10387  000924  0E00               	movlw	0
 10388  000926  023A               	mulwf	(??_mktime+8)& (0+255),c
 10389  000928  50F3               	movf	prodl,w,c
 10390  00092A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10391  00092C  0E00               	movlw	0
 10392  00092E  0239               	mulwf	(??_mktime+7)& (0+255),c
 10393  000930  50F3               	movf	prodl,w,c
 10394  000932  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10395  000934  0E00               	movlw	0
 10396  000936  0238               	mulwf	(??_mktime+6)& (0+255),c
 10397  000938  50F3               	movf	prodl,w,c
 10398  00093A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10399  00093C  5034               	movf	??_mktime+2,w,c
 10400  00093E  243C               	addwf	??_mktime+10,w,c
 10401  000940  6E40               	movwf	mktime@tt,c
 10402  000942  5035               	movf	??_mktime+3,w,c
 10403  000944  203D               	addwfc	??_mktime+11,w,c
 10404  000946  6E41               	movwf	mktime@tt+1,c
 10405  000948  5036               	movf	??_mktime+4,w,c
 10406  00094A  203E               	addwfc	??_mktime+12,w,c
 10407  00094C  6E42               	movwf	mktime@tt+2,c
 10408  00094E  5037               	movf	??_mktime+5,w,c
 10409  000950  203F               	addwfc	??_mktime+13,w,c
 10410  000952  6E43               	movwf	mktime@tt+3,c
 10411  000954                     l6451:
 10412  000954  FFFF               	dw	65535	; assembler added errata NOP
 10413  000956  C040  F02E         	movff	mktime@tt,?_mktime
 10414  00095A  C041  F02F         	movff	mktime@tt+1,?_mktime+1
 10415  00095E  C042  F030         	movff	mktime@tt+2,?_mktime+2
 10416  000962  C043  F031         	movff	mktime@tt+3,?_mktime+3
 10417  000966  0012               	return		;funcret
 10418  000968  FFFF               	dw	65535	; errata NOP
 10419  00096A                     __end_of_mktime:
 10420                           	opt stack 0
 10421                           tblptru	equ	0xFF8
 10422                           tblptrh	equ	0xFF7
 10423                           tblptrl	equ	0xFF6
 10424                           tablat	equ	0xFF5
 10425                           prodh	equ	0xFF4
 10426                           prodl	equ	0xFF3
 10427                           intcon	equ	0xFF2
 10428                           postinc0	equ	0xFEE
 10429                           wreg	equ	0xFE8
 10430                           indf1	equ	0xFE7
 10431                           postinc1	equ	0xFE6
 10432                           postdec1	equ	0xFE5
 10433                           fsr1h	equ	0xFE2
 10434                           fsr1l	equ	0xFE1
 10435                           indf2	equ	0xFDF
 10436                           postinc2	equ	0xFDE
 10437                           postdec2	equ	0xFDD
 10438                           plusw2	equ	0xFDB
 10439                           fsr2h	equ	0xFDA
 10440                           fsr2l	equ	0xFD9
 10441                           status	equ	0xFD8
 10442                           
 10443 ;; *************** function _ymd_to_scalar *****************
 10444 ;; Defined at:
 10445 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;  yr              2   29[COMRAM] unsigned int 
 10448 ;;  mo              2   31[COMRAM] unsigned int 
 10449 ;;  day             2   33[COMRAM] unsigned int 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  scalar          4   41[COMRAM] long 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  4   29[COMRAM] long 
 10454 ;; Registers used:
 10455 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/1
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10461 ;;      Params:         6       0       0       0       0       0       0
 10462 ;;      Locals:         6       0       0       0       0       0       0
 10463 ;;      Temps:          4       0       0       0       0       0       0
 10464 ;;      Totals:        16       0       0       0       0       0       0
 10465 ;;Total ram usage:       16 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    4
 10468 ;; This function calls:
 10469 ;;		_isleap
 10470 ;;		_months_to_days
 10471 ;;		_years_to_days
 10472 ;; This function is called by:
 10473 ;;		_mktime
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text52
 10478  002442                     __ptext52:
 10479                           	opt stack 0
 10480  002442                     _ymd_to_scalar:
 10481                           	opt stack 23
 10482                           
 10483                           ;incstack = 0
 10484  002442  FFFF               	dw	65535
 10485  002444  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
 10486  002448  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
 10487  00244C  EC06  F016         	call	_months_to_days	;wreg free
 10488  002450  5022               	movf	ymd_to_scalar@day,w,c
 10489  002452  260E               	addwf	?_months_to_days,f,c
 10490  002454  5023               	movf	ymd_to_scalar@day+1,w,c
 10491  002456  220F               	addwfc	?_months_to_days+1,f,c
 10492  002458  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
 10493  00245C  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
 10494  002460  6A2C               	clrf	ymd_to_scalar@scalar+2,c
 10495  002462  6A2D               	clrf	ymd_to_scalar@scalar+3,c
 10496  002464  5021               	movf	ymd_to_scalar@mo+1,w,c
 10497  002466  E103               	bnz	u5320
 10498  002468  0E03               	movlw	3
 10499  00246A  5C20               	subwf	ymd_to_scalar@mo,w,c
 10500  00246C  E321               	bnc	l6205
 10501  00246E                     u5320:
 10502  00246E  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
 10503  002472  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
 10504  002476  EC28  F015         	call	_isleap	;wreg free
 10505  00247A  500C               	movf	?_isleap,w,c
 10506  00247C  100D               	iorwf	?_isleap+1,w,c
 10507  00247E  E103               	bnz	l6201
 10508  002480  6A29               	clrf	_ymd_to_scalar$2304+1,c
 10509  002482  0E02               	movlw	2
 10510  002484  D002               	goto	L13
 10511  002486                     l6201:
 10512  002486  6A29               	clrf	_ymd_to_scalar$2304+1,c
 10513  002488  0E01               	movlw	1
 10514  00248A                     L13:
 10515  00248A  FFFF               	dw	65535	; assembler added errata NOP
 10516  00248C  6E28               	movwf	_ymd_to_scalar$2304,c
 10517  00248E  C028  F024         	movff	_ymd_to_scalar$2304,??_ymd_to_scalar
 10518  002492  C029  F025         	movff	_ymd_to_scalar$2304+1,??_ymd_to_scalar+1
 10519  002496  0E00               	movlw	0
 10520  002498  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
 10521  00249A  0EFF               	movlw	255
 10522  00249C  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
 10523  00249E  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
 10524  0024A0  5024               	movf	??_ymd_to_scalar,w,c
 10525  0024A2  5E2A               	subwf	ymd_to_scalar@scalar,f,c
 10526  0024A4  5025               	movf	??_ymd_to_scalar+1,w,c
 10527  0024A6  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
 10528  0024A8  5026               	movf	??_ymd_to_scalar+2,w,c
 10529  0024AA  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
 10530  0024AC  5027               	movf	??_ymd_to_scalar+3,w,c
 10531  0024AE  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
 10532  0024B0                     l6205:
 10533  0024B0  061E               	decf	ymd_to_scalar@yr,f,c
 10534  0024B2  A0D8               	btfss	status,0,c
 10535  0024B4  061F               	decf	ymd_to_scalar@yr+1,f,c
 10536  0024B6  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
 10537  0024BA  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
 10538  0024BE  EC29  F00E         	call	_years_to_days	;wreg free
 10539  0024C2  500E               	movf	?_years_to_days,w,c
 10540  0024C4  262A               	addwf	ymd_to_scalar@scalar,f,c
 10541  0024C6  500F               	movf	?_years_to_days+1,w,c
 10542  0024C8  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
 10543  0024CA  5010               	movf	?_years_to_days+2,w,c
 10544  0024CC  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
 10545  0024CE  5011               	movf	?_years_to_days+3,w,c
 10546  0024D0  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
 10547  0024D2  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
 10548  0024D6  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
 10549  0024DA  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
 10550  0024DE  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
 10551  0024E2  0012               	return		;funcret
 10552  0024E4  FFFF               	dw	65535	; errata NOP
 10553  0024E6                     __end_of_ymd_to_scalar:
 10554                           	opt stack 0
 10555                           tblptru	equ	0xFF8
 10556                           tblptrh	equ	0xFF7
 10557                           tblptrl	equ	0xFF6
 10558                           tablat	equ	0xFF5
 10559                           prodh	equ	0xFF4
 10560                           prodl	equ	0xFF3
 10561                           intcon	equ	0xFF2
 10562                           postinc0	equ	0xFEE
 10563                           wreg	equ	0xFE8
 10564                           indf1	equ	0xFE7
 10565                           postinc1	equ	0xFE6
 10566                           postdec1	equ	0xFE5
 10567                           fsr1h	equ	0xFE2
 10568                           fsr1l	equ	0xFE1
 10569                           indf2	equ	0xFDF
 10570                           postinc2	equ	0xFDE
 10571                           postdec2	equ	0xFDD
 10572                           plusw2	equ	0xFDB
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _years_to_days *****************
 10578 ;; Defined at:
 10579 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  yr              2   13[COMRAM] unsigned int 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  ret             4   25[COMRAM] long 
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  4   13[COMRAM] long 
 10586 ;; Registers used:
 10587 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/1
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10593 ;;      Params:         4       0       0       0       0       0       0
 10594 ;;      Locals:         4       0       0       0       0       0       0
 10595 ;;      Temps:          8       0       0       0       0       0       0
 10596 ;;      Totals:        16       0       0       0       0       0       0
 10597 ;;Total ram usage:       16 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    3
 10600 ;; This function calls:
 10601 ;;		___lwdiv
 10602 ;; This function is called by:
 10603 ;;		_ymd_to_scalar
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text53
 10608  001C52                     __ptext53:
 10609                           	opt stack 0
 10610  001C52                     _years_to_days:
 10611                           	opt stack 23
 10612                           
 10613                           ;incstack = 0
 10614  001C52  FFFF               	dw	65535
 10615  001C54  500E               	movf	years_to_days@yr,w,c
 10616  001C56  6E12               	movwf	??_years_to_days& (0+255),c
 10617  001C58  500F               	movf	years_to_days@yr+1,w,c
 10618  001C5A  6E13               	movwf	(??_years_to_days+1)& (0+255),c
 10619  001C5C  6A14               	clrf	(??_years_to_days+2)& (0+255),c
 10620  001C5E  6A15               	clrf	(??_years_to_days+3)& (0+255),c
 10621  001C60  0E6D               	movlw	109
 10622  001C62  0212               	mulwf	??_years_to_days& (0+255),c
 10623  001C64  CFF3 F016          	movff	prodl,??_years_to_days+4
 10624  001C68  CFF4 F017          	movff	prodh,??_years_to_days+5
 10625  001C6C  6A18               	clrf	(??_years_to_days+6)& (0+255),c
 10626  001C6E  6A19               	clrf	(??_years_to_days+7)& (0+255),c
 10627  001C70  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10628  001C72  50F3               	movf	prodl,w,c
 10629  001C74  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
 10630  001C76  50F4               	movf	prodh,w,c
 10631  001C78  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
 10632  001C7A  0E00               	movlw	0
 10633  001C7C  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10634  001C7E  0E01               	movlw	1
 10635  001C80  0212               	mulwf	??_years_to_days& (0+255),c
 10636  001C82  50F3               	movf	prodl,w,c
 10637  001C84  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
 10638  001C86  50F4               	movf	prodh,w,c
 10639  001C88  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
 10640  001C8A  0E00               	movlw	0
 10641  001C8C  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10642  001C8E  0E6D               	movlw	109
 10643  001C90  0214               	mulwf	(??_years_to_days+2)& (0+255),c
 10644  001C92  50F3               	movf	prodl,w,c
 10645  001C94  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10646  001C96  50F4               	movf	prodh,w,c
 10647  001C98  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10648  001C9A  0E01               	movlw	1
 10649  001C9C  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10650  001C9E  50F3               	movf	prodl,w,c
 10651  001CA0  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10652  001CA2  50F4               	movf	prodh,w,c
 10653  001CA4  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10654  001CA6  0E00               	movlw	0
 10655  001CA8  0212               	mulwf	??_years_to_days& (0+255),c
 10656  001CAA  50F3               	movf	prodl,w,c
 10657  001CAC  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10658  001CAE  50F4               	movf	prodh,w,c
 10659  001CB0  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10660  001CB2  0E6D               	movlw	109
 10661  001CB4  0215               	mulwf	(??_years_to_days+3)& (0+255),c
 10662  001CB6  50F3               	movf	prodl,w,c
 10663  001CB8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10664  001CBA  0E01               	movlw	1
 10665  001CBC  0214               	mulwf	(??_years_to_days+2)& (0+255),c
 10666  001CBE  50F3               	movf	prodl,w,c
 10667  001CC0  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10668  001CC2  0E00               	movlw	0
 10669  001CC4  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10670  001CC6  50F3               	movf	prodl,w,c
 10671  001CC8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10672  001CCA  0E00               	movlw	0
 10673  001CCC  0212               	mulwf	??_years_to_days& (0+255),c
 10674  001CCE  50F3               	movf	prodl,w,c
 10675  001CD0  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10676  001CD2  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
 10677  001CD6  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
 10678  001CDA  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
 10679  001CDE  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
 10680  001CE2  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
 10681  001CE6  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 10682  001CEA  6A0A               	clrf	___lwdiv@divisor+1,c
 10683  001CEC  0E64               	movlw	100
 10684  001CEE  6E09               	movwf	___lwdiv@divisor,c
 10685  001CF0  ECFE  F014         	call	___lwdiv	;wreg free
 10686  001CF4  C00E  F012         	movff	years_to_days@yr,??_years_to_days
 10687  001CF8  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
 10688  001CFC  90D8               	bcf	status,0,c
 10689  001CFE  3213               	rrcf	??_years_to_days+1,f,c
 10690  001D00  3212               	rrcf	??_years_to_days,f,c
 10691  001D02  90D8               	bcf	status,0,c
 10692  001D04  3213               	rrcf	??_years_to_days+1,f,c
 10693  001D06  3212               	rrcf	??_years_to_days,f,c
 10694  001D08  5007               	movf	?___lwdiv,w,c
 10695  001D0A  5E12               	subwf	??_years_to_days,f,c
 10696  001D0C  5008               	movf	?___lwdiv+1,w,c
 10697  001D0E  5A13               	subwfb	??_years_to_days+1,f,c
 10698  001D10  5012               	movf	??_years_to_days,w,c
 10699  001D12  261A               	addwf	years_to_days@ret,f,c
 10700  001D14  5013               	movf	??_years_to_days+1,w,c
 10701  001D16  221B               	addwfc	years_to_days@ret+1,f,c
 10702  001D18  0E00               	movlw	0
 10703  001D1A  221C               	addwfc	years_to_days@ret+2,f,c
 10704  001D1C  221D               	addwfc	years_to_days@ret+3,f,c
 10705  001D1E  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
 10706  001D22  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 10707  001D26  0E01               	movlw	1
 10708  001D28  6E0A               	movwf	___lwdiv@divisor+1,c
 10709  001D2A  0E90               	movlw	144
 10710  001D2C  6E09               	movwf	___lwdiv@divisor,c
 10711  001D2E  ECFE  F014         	call	___lwdiv	;wreg free
 10712  001D32  5007               	movf	?___lwdiv,w,c
 10713  001D34  261A               	addwf	years_to_days@ret,f,c
 10714  001D36  5008               	movf	?___lwdiv+1,w,c
 10715  001D38  221B               	addwfc	years_to_days@ret+1,f,c
 10716  001D3A  0E00               	movlw	0
 10717  001D3C  221C               	addwfc	years_to_days@ret+2,f,c
 10718  001D3E  221D               	addwfc	years_to_days@ret+3,f,c
 10719  001D40  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
 10720  001D44  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
 10721  001D48  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
 10722  001D4C  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
 10723  001D50  0C00               	retlw	0	;funcret
 10724  001D52  FFFF               	dw	65535	; errata NOP
 10725  001D54                     __end_of_years_to_days:
 10726                           	opt stack 0
 10727                           tblptru	equ	0xFF8
 10728                           tblptrh	equ	0xFF7
 10729                           tblptrl	equ	0xFF6
 10730                           tablat	equ	0xFF5
 10731                           prodh	equ	0xFF4
 10732                           prodl	equ	0xFF3
 10733                           intcon	equ	0xFF2
 10734                           postinc0	equ	0xFEE
 10735                           wreg	equ	0xFE8
 10736                           indf1	equ	0xFE7
 10737                           postinc1	equ	0xFE6
 10738                           postdec1	equ	0xFE5
 10739                           fsr1h	equ	0xFE2
 10740                           fsr1l	equ	0xFE1
 10741                           indf2	equ	0xFDF
 10742                           postinc2	equ	0xFDE
 10743                           postdec2	equ	0xFDD
 10744                           plusw2	equ	0xFDB
 10745                           fsr2h	equ	0xFDA
 10746                           fsr2l	equ	0xFD9
 10747                           status	equ	0xFD8
 10748                           
 10749 ;; *************** function _months_to_days *****************
 10750 ;; Defined at:
 10751 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10752 ;; Parameters:    Size  Location     Type
 10753 ;;  month           2   13[COMRAM] unsigned int 
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;		None
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  2   13[COMRAM] unsigned int 
 10758 ;; Registers used:
 10759 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/1
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10765 ;;      Params:         2       0       0       0       0       0       0
 10766 ;;      Locals:         0       0       0       0       0       0       0
 10767 ;;      Temps:          4       0       0       0       0       0       0
 10768 ;;      Totals:         6       0       0       0       0       0       0
 10769 ;;Total ram usage:        6 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    3
 10772 ;; This function calls:
 10773 ;;		___lwdiv
 10774 ;; This function is called by:
 10775 ;;		_ymd_to_scalar
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text54
 10780  002C0C                     __ptext54:
 10781                           	opt stack 0
 10782  002C0C                     _months_to_days:
 10783                           	opt stack 23
 10784                           
 10785                           ;incstack = 0
 10786  002C0C  FFFF               	dw	65535
 10787  002C0E  0EF1               	movlw	241
 10788  002C10  6E10               	movwf	??_months_to_days& (0+255),c
 10789  002C12  0E0B               	movlw	11
 10790  002C14  6E11               	movwf	(??_months_to_days+1)& (0+255),c
 10791  002C16  5010               	movf	??_months_to_days& (0+255),w,c
 10792  002C18  020E               	mulwf	months_to_days@month,c
 10793  002C1A  CFF3 F012          	movff	prodl,??_months_to_days+2
 10794  002C1E  CFF4 F013          	movff	prodh,??_months_to_days+3
 10795  002C22  020F               	mulwf	months_to_days@month+1,c
 10796  002C24  50F3               	movf	prodl,w,c
 10797  002C26  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10798  002C28  5011               	movf	(??_months_to_days+1)& (0+255),w,c
 10799  002C2A  020E               	mulwf	months_to_days@month,c
 10800  002C2C  50F3               	movf	prodl,w,c
 10801  002C2E  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10802  002C30  0E41               	movlw	65
 10803  002C32  2412               	addwf	??_months_to_days+2,w,c
 10804  002C34  6E07               	movwf	___lwdiv@dividend,c
 10805  002C36  0EF4               	movlw	244
 10806  002C38  2013               	addwfc	??_months_to_days+3,w,c
 10807  002C3A  6E08               	movwf	___lwdiv@dividend+1,c
 10808  002C3C  6A0A               	clrf	___lwdiv@divisor+1,c
 10809  002C3E  0E64               	movlw	100
 10810  002C40  6E09               	movwf	___lwdiv@divisor,c
 10811  002C42  ECFE  F014         	call	___lwdiv	;wreg free
 10812  002C46  C007  F00E         	movff	?___lwdiv,?_months_to_days
 10813  002C4A  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
 10814  002C4E  0012               	return		;funcret
 10815  002C50  FFFF               	dw	65535	; errata NOP
 10816  002C52                     __end_of_months_to_days:
 10817                           	opt stack 0
 10818                           tblptru	equ	0xFF8
 10819                           tblptrh	equ	0xFF7
 10820                           tblptrl	equ	0xFF6
 10821                           tablat	equ	0xFF5
 10822                           prodh	equ	0xFF4
 10823                           prodl	equ	0xFF3
 10824                           intcon	equ	0xFF2
 10825                           postinc0	equ	0xFEE
 10826                           wreg	equ	0xFE8
 10827                           indf1	equ	0xFE7
 10828                           postinc1	equ	0xFE6
 10829                           postdec1	equ	0xFE5
 10830                           fsr1h	equ	0xFE2
 10831                           fsr1l	equ	0xFE1
 10832                           indf2	equ	0xFDF
 10833                           postinc2	equ	0xFDE
 10834                           postdec2	equ	0xFDD
 10835                           plusw2	equ	0xFDB
 10836                           fsr2h	equ	0xFDA
 10837                           fsr2l	equ	0xFD9
 10838                           status	equ	0xFD8
 10839                           
 10840 ;; *************** function ___lwdiv *****************
 10841 ;; Defined at:
 10842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  dividend        2    6[COMRAM] unsigned int 
 10845 ;;  divisor         2    8[COMRAM] unsigned int 
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;  quotient        2   11[COMRAM] unsigned int 
 10848 ;;  counter         1   10[COMRAM] unsigned char 
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  2    6[COMRAM] unsigned int 
 10851 ;; Registers used:
 10852 ;;		wreg, status,2, status,0
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/1
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10858 ;;      Params:         4       0       0       0       0       0       0
 10859 ;;      Locals:         3       0       0       0       0       0       0
 10860 ;;      Temps:          0       0       0       0       0       0       0
 10861 ;;      Totals:         7       0       0       0       0       0       0
 10862 ;;Total ram usage:        7 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    2
 10865 ;; This function calls:
 10866 ;;		Nothing
 10867 ;; This function is called by:
 10868 ;;		_months_to_days
 10869 ;;		_years_to_days
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text55
 10874  0029FC                     __ptext55:
 10875                           	opt stack 0
 10876  0029FC                     ___lwdiv:
 10877                           	opt stack 23
 10878                           
 10879                           ;incstack = 0
 10880  0029FC  FFFF               	dw	65535
 10881  0029FE  6A0C               	clrf	___lwdiv@quotient,c
 10882  002A00  6A0D               	clrf	___lwdiv@quotient+1,c
 10883  002A02  5009               	movf	___lwdiv@divisor,w,c
 10884  002A04  100A               	iorwf	___lwdiv@divisor+1,w,c
 10885  002A06  E01E               	bz	l1392
 10886  002A08  0E01               	movlw	1
 10887  002A0A  6E0B               	movwf	___lwdiv@counter,c
 10888  002A0C  D005               	goto	l5851
 10889  002A0E                     l5849:
 10890  002A0E  FFFF               	dw	65535	; assembler added errata NOP
 10891  002A10  90D8               	bcf	status,0,c
 10892  002A12  3609               	rlcf	___lwdiv@divisor,f,c
 10893  002A14  360A               	rlcf	___lwdiv@divisor+1,f,c
 10894  002A16  2A0B               	incf	___lwdiv@counter,f,c
 10895  002A18                     l5851:
 10896  002A18  FFFF               	dw	65535	; assembler added errata NOP
 10897  002A1A  AE0A               	btfss	___lwdiv@divisor+1,7,c
 10898  002A1C  D7F8               	goto	l5849
 10899  002A1E                     l5853:
 10900  002A1E  FFFF               	dw	65535	; assembler added errata NOP
 10901  002A20  90D8               	bcf	status,0,c
 10902  002A22  360C               	rlcf	___lwdiv@quotient,f,c
 10903  002A24  360D               	rlcf	___lwdiv@quotient+1,f,c
 10904  002A26  5009               	movf	___lwdiv@divisor,w,c
 10905  002A28  5C07               	subwf	___lwdiv@dividend,w,c
 10906  002A2A  500A               	movf	___lwdiv@divisor+1,w,c
 10907  002A2C  5808               	subwfb	___lwdiv@dividend+1,w,c
 10908  002A2E  E305               	bnc	l5861
 10909  002A30  5009               	movf	___lwdiv@divisor,w,c
 10910  002A32  5E07               	subwf	___lwdiv@dividend,f,c
 10911  002A34  500A               	movf	___lwdiv@divisor+1,w,c
 10912  002A36  5A08               	subwfb	___lwdiv@dividend+1,f,c
 10913  002A38  800C               	bsf	___lwdiv@quotient,0,c
 10914  002A3A                     l5861:
 10915  002A3A  90D8               	bcf	status,0,c
 10916  002A3C  320A               	rrcf	___lwdiv@divisor+1,f,c
 10917  002A3E  3209               	rrcf	___lwdiv@divisor,f,c
 10918  002A40  2E0B               	decfsz	___lwdiv@counter,f,c
 10919  002A42  D7ED               	goto	l5853
 10920  002A44                     l1392:
 10921  002A44  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
 10922  002A48  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10923  002A4C  0012               	return		;funcret
 10924  002A4E  FFFF               	dw	65535	; errata NOP
 10925  002A50                     __end_of___lwdiv:
 10926                           	opt stack 0
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           intcon	equ	0xFF2
 10934                           postinc0	equ	0xFEE
 10935                           wreg	equ	0xFE8
 10936                           indf1	equ	0xFE7
 10937                           postinc1	equ	0xFE6
 10938                           postdec1	equ	0xFE5
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           plusw2	equ	0xFDB
 10945                           fsr2h	equ	0xFDA
 10946                           fsr2l	equ	0xFD9
 10947                           status	equ	0xFD8
 10948                           
 10949 ;; *************** function _isleap *****************
 10950 ;; Defined at:
 10951 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  yr              2   11[COMRAM] unsigned int 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;		None
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  2   11[COMRAM] int 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/1
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10965 ;;      Params:         2       0       0       0       0       0       0
 10966 ;;      Locals:         1       0       0       0       0       0       0
 10967 ;;      Temps:          1       0       0       0       0       0       0
 10968 ;;      Totals:         4       0       0       0       0       0       0
 10969 ;;Total ram usage:        4 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    3
 10972 ;; This function calls:
 10973 ;;		___lwmod
 10974 ;; This function is called by:
 10975 ;;		_ymd_to_scalar
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text56
 10980  002A50                     __ptext56:
 10981                           	opt stack 0
 10982  002A50                     _isleap:
 10983                           	opt stack 23
 10984                           
 10985                           ;incstack = 0
 10986  002A50  FFFF               	dw	65535
 10987  002A52  0E01               	movlw	1
 10988  002A54  6E0F               	movwf	_isleap$2291,c
 10989  002A56  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 10990  002A5A  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 10991  002A5E  6E0A               	movwf	___lwmod@divisor+1,c
 10992  002A60  0E90               	movlw	144
 10993  002A62  6E09               	movwf	___lwmod@divisor,c
 10994  002A64  ECBF  F015         	call	___lwmod	;wreg free
 10995  002A68  5007               	movf	?___lwmod,w,c
 10996  002A6A  1008               	iorwf	?___lwmod+1,w,c
 10997  002A6C  E012               	bz	l1418
 10998  002A6E  C00C  F00E         	movff	isleap@yr,??_isleap
 10999  002A72  0E03               	movlw	3
 11000  002A74  160E               	andwf	??_isleap,f,c
 11001  002A76  E10C               	bnz	l5831
 11002  002A78  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 11003  002A7C  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 11004  002A80  6A0A               	clrf	___lwmod@divisor+1,c
 11005  002A82  0E64               	movlw	100
 11006  002A84  6E09               	movwf	___lwmod@divisor,c
 11007  002A86  ECBF  F015         	call	___lwmod	;wreg free
 11008  002A8A  5007               	movf	?___lwmod,w,c
 11009  002A8C  1008               	iorwf	?___lwmod+1,w,c
 11010  002A8E  E101               	bnz	l1418
 11011  002A90                     l5831:
 11012  002A90  6A0F               	clrf	_isleap$2291,c
 11013  002A92                     l1418:
 11014  002A92  C00F  F00C         	movff	_isleap$2291,?_isleap
 11015  002A96  6A0D               	clrf	?_isleap+1,c
 11016  002A98  0012               	return		;funcret
 11017  002A9A  FFFF               	dw	65535	; errata NOP
 11018  002A9C                     __end_of_isleap:
 11019                           	opt stack 0
 11020                           tblptru	equ	0xFF8
 11021                           tblptrh	equ	0xFF7
 11022                           tblptrl	equ	0xFF6
 11023                           tablat	equ	0xFF5
 11024                           prodh	equ	0xFF4
 11025                           prodl	equ	0xFF3
 11026                           intcon	equ	0xFF2
 11027                           postinc0	equ	0xFEE
 11028                           wreg	equ	0xFE8
 11029                           indf1	equ	0xFE7
 11030                           postinc1	equ	0xFE6
 11031                           postdec1	equ	0xFE5
 11032                           fsr1h	equ	0xFE2
 11033                           fsr1l	equ	0xFE1
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           plusw2	equ	0xFDB
 11038                           fsr2h	equ	0xFDA
 11039                           fsr2l	equ	0xFD9
 11040                           status	equ	0xFD8
 11041                           
 11042 ;; *************** function ___lwmod *****************
 11043 ;; Defined at:
 11044 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;  dividend        2    6[COMRAM] unsigned int 
 11047 ;;  divisor         2    8[COMRAM] unsigned int 
 11048 ;; Auto vars:     Size  Location     Type
 11049 ;;  counter         1   10[COMRAM] unsigned char 
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  2    6[COMRAM] unsigned int 
 11052 ;; Registers used:
 11053 ;;		wreg, status,2, status,0
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/1
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11059 ;;      Params:         4       0       0       0       0       0       0
 11060 ;;      Locals:         1       0       0       0       0       0       0
 11061 ;;      Temps:          0       0       0       0       0       0       0
 11062 ;;      Totals:         5       0       0       0       0       0       0
 11063 ;;Total ram usage:        5 bytes
 11064 ;; Hardware stack levels used:    1
 11065 ;; Hardware stack levels required when called:    2
 11066 ;; This function calls:
 11067 ;;		Nothing
 11068 ;; This function is called by:
 11069 ;;		_isleap
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           	psect	text57
 11074  002B7E                     __ptext57:
 11075                           	opt stack 0
 11076  002B7E                     ___lwmod:
 11077                           	opt stack 23
 11078                           
 11079                           ;incstack = 0
 11080  002B7E  FFFF               	dw	65535
 11081  002B80  5009               	movf	___lwmod@divisor,w,c
 11082  002B82  100A               	iorwf	___lwmod@divisor+1,w,c
 11083  002B84  E01A               	bz	l1402
 11084  002B86  0E01               	movlw	1
 11085  002B88  6E0B               	movwf	___lwmod@counter,c
 11086  002B8A  D005               	goto	l5871
 11087  002B8C                     l5869:
 11088  002B8C  FFFF               	dw	65535	; assembler added errata NOP
 11089  002B8E  90D8               	bcf	status,0,c
 11090  002B90  3609               	rlcf	___lwmod@divisor,f,c
 11091  002B92  360A               	rlcf	___lwmod@divisor+1,f,c
 11092  002B94  2A0B               	incf	___lwmod@counter,f,c
 11093  002B96                     l5871:
 11094  002B96  FFFF               	dw	65535	; assembler added errata NOP
 11095  002B98  AE0A               	btfss	___lwmod@divisor+1,7,c
 11096  002B9A  D7F8               	goto	l5869
 11097  002B9C                     l5873:
 11098  002B9C  FFFF               	dw	65535	; assembler added errata NOP
 11099  002B9E  5009               	movf	___lwmod@divisor,w,c
 11100  002BA0  5C07               	subwf	___lwmod@dividend,w,c
 11101  002BA2  500A               	movf	___lwmod@divisor+1,w,c
 11102  002BA4  5808               	subwfb	___lwmod@dividend+1,w,c
 11103  002BA6  E304               	bnc	l5877
 11104  002BA8  5009               	movf	___lwmod@divisor,w,c
 11105  002BAA  5E07               	subwf	___lwmod@dividend,f,c
 11106  002BAC  500A               	movf	___lwmod@divisor+1,w,c
 11107  002BAE  5A08               	subwfb	___lwmod@dividend+1,f,c
 11108  002BB0                     l5877:
 11109  002BB0  90D8               	bcf	status,0,c
 11110  002BB2  320A               	rrcf	___lwmod@divisor+1,f,c
 11111  002BB4  3209               	rrcf	___lwmod@divisor,f,c
 11112  002BB6  2E0B               	decfsz	___lwmod@counter,f,c
 11113  002BB8  D7F1               	goto	l5873
 11114  002BBA                     l1402:
 11115  002BBA  C007  F007         	movff	___lwmod@dividend,?___lwmod
 11116  002BBE  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
 11117  002BC2  0012               	return		;funcret
 11118  002BC4  FFFF               	dw	65535	; errata NOP
 11119  002BC6                     __end_of___lwmod:
 11120                           	opt stack 0
 11121                           tblptru	equ	0xFF8
 11122                           tblptrh	equ	0xFF7
 11123                           tblptrl	equ	0xFF6
 11124                           tablat	equ	0xFF5
 11125                           prodh	equ	0xFF4
 11126                           prodl	equ	0xFF3
 11127                           intcon	equ	0xFF2
 11128                           postinc0	equ	0xFEE
 11129                           wreg	equ	0xFE8
 11130                           indf1	equ	0xFE7
 11131                           postinc1	equ	0xFE6
 11132                           postdec1	equ	0xFE5
 11133                           fsr1h	equ	0xFE2
 11134                           fsr1l	equ	0xFE1
 11135                           indf2	equ	0xFDF
 11136                           postinc2	equ	0xFDE
 11137                           postdec2	equ	0xFDD
 11138                           plusw2	equ	0xFDB
 11139                           fsr2h	equ	0xFDA
 11140                           fsr2l	equ	0xFD9
 11141                           status	equ	0xFD8
 11142                           
 11143 ;; *************** function _SetTime *****************
 11144 ;; Defined at:
 11145 ;;		line 169 in file "user.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  newTime         1    wreg     PTR long 
 11148 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;  newTime         1    6[COMRAM] PTR long 
 11151 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, fsr2l, fsr2h, status,2
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/1
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11161 ;;      Params:         0       0       0       0       0       0       0
 11162 ;;      Locals:         1       0       0       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0
 11164 ;;      Totals:         1       0       0       0       0       0       0
 11165 ;;Total ram usage:        1 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    2
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_ModbusProcess_FC100
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text58
 11176  002FA0                     __ptext58:
 11177                           	opt stack 0
 11178  002FA0                     _SetTime:
 11179                           	opt stack 26
 11180                           
 11181                           ;incstack = 0
 11182  002FA0  FFFF               	dw	65535
 11183                           
 11184                           ;SetTime@newTime stored from wreg
 11185  002FA2  6E07               	movwf	SetTime@newTime,c
 11186                           
 11187                           ;user.c: 171: currentTime = *newTime;
 11188  002FA4  5007               	movf	SetTime@newTime,w,c
 11189  002FA6  6ED9               	movwf	fsr2l,c
 11190  002FA8  6ADA               	clrf	fsr2h,c
 11191  002FAA  CFDE F0D9          	movff	postinc2,_currentTime
 11192  002FAE  CFDE F0DA          	movff	postinc2,_currentTime+1
 11193  002FB2  CFDE F0DB          	movff	postinc2,_currentTime+2
 11194  002FB6  CFDE F0DC          	movff	postinc2,_currentTime+3
 11195  002FBA  0012               	return		;funcret
 11196  002FBC  FFFF               	dw	65535	; errata NOP
 11197  002FBE                     __end_of_SetTime:
 11198                           	opt stack 0
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           postinc0	equ	0xFEE
 11207                           wreg	equ	0xFE8
 11208                           indf1	equ	0xFE7
 11209                           postinc1	equ	0xFE6
 11210                           postdec1	equ	0xFE5
 11211                           fsr1h	equ	0xFE2
 11212                           fsr1l	equ	0xFE1
 11213                           indf2	equ	0xFDF
 11214                           postinc2	equ	0xFDE
 11215                           postdec2	equ	0xFDD
 11216                           plusw2	equ	0xFDB
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _SetHourMin *****************
 11222 ;; Defined at:
 11223 ;;		line 277 in file "interrupts.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  newHour         2   10[COMRAM] PTR unsigned char 
 11226 ;;		 -> _au8Buffer(140), 
 11227 ;;  newMin          2   12[COMRAM] PTR unsigned char 
 11228 ;;		 -> _au8Buffer(140), 
 11229 ;;  sec             2   14[COMRAM] PTR unsigned char 
 11230 ;;		 -> _au8Buffer(140), 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  secToNext6Se    1   29[COMRAM] unsigned char 
 11233 ;;  tmpSec          1   28[COMRAM] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  1    wreg      void 
 11236 ;; Registers used:
 11237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : E/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11243 ;;      Params:         6       0       0       0       0       0       0
 11244 ;;      Locals:         2       0       0       0       0       0       0
 11245 ;;      Temps:         12       0       0       0       0       0       0
 11246 ;;      Totals:        20       0       0       0       0       0       0
 11247 ;;Total ram usage:       20 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    3
 11250 ;; This function calls:
 11251 ;;		___lbdiv
 11252 ;;		___lbmod
 11253 ;; This function is called by:
 11254 ;;		_ModbusProcess_FC100
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text59
 11259  001A36                     __ptext59:
 11260                           	opt stack 0
 11261  001A36                     _SetHourMin:
 11262                           	opt stack 25
 11263                           
 11264                           ;incstack = 0
 11265  001A36  FFFF               	dw	65535
 11266                           
 11267                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 11268  001A38  9ED5               	bcf	4053,7,c	;volatile
 11269                           
 11270                           ;interrupts.c: 281: globalHours = *newHour;
 11271  001A3A  C00B  FFD9         	movff	SetHourMin@newHour,fsr2l
 11272  001A3E  C00C  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 11273  001A42  50DF               	movf	indf2,w,c
 11274  001A44  6E78               	movwf	_globalHours,c	;volatile
 11275                           
 11276                           ;interrupts.c: 282: globalMinutes = *newMin;
 11277  001A46  C00D  FFD9         	movff	SetHourMin@newMin,fsr2l
 11278  001A4A  C00E  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 11279  001A4E  50DF               	movf	indf2,w,c
 11280  001A50  6E77               	movwf	_globalMinutes,c	;volatile
 11281                           
 11282                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 11283  001A52  5078               	movf	_globalHours,w,c	;volatile
 11284  001A54  0D3C               	mullw	60
 11285  001A56  5077               	movf	_globalMinutes,w,c	;volatile
 11286  001A58  24F3               	addwf	prodl,w,c
 11287  001A5A  0100               	movlb	0	; () banked
 11288  001A5C  6FC4               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 11289  001A5E  0E00               	movlw	0
 11290  001A60  20F4               	addwfc	prodh,w,c
 11291  001A62  6FC5               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 11295  001A64  C00F  FFD9         	movff	SetHourMin@sec,fsr2l
 11296  001A68  C010  FFDA         	movff	SetHourMin@sec+1,fsr2h
 11297  001A6C  50DF               	movf	indf2,w,c
 11298  001A6E  6E1D               	movwf	SetHourMin@tmpSec,c
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 11302  001A70  0E06               	movlw	6
 11303  001A72  6E07               	movwf	___lbdiv@divisor,c
 11304  001A74  501D               	movf	SetHourMin@tmpSec,w,c
 11305  001A76  EC6D  F016         	call	___lbdiv
 11306  001A7A  0100               	movlb	0	; () banked
 11307  001A7C  6FC8               	movwf	__6sCounter& (0+255),b	;volatile
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 11311  001A7E  0E06               	movlw	6
 11312  001A80  6E07               	movwf	___lbmod@divisor,c
 11313  001A82  501D               	movf	SetHourMin@tmpSec,w,c
 11314  001A84  EC37  F017         	call	___lbmod
 11315  001A88  6E11               	movwf	??_SetHourMin& (0+255),c
 11316  001A8A  5011               	movf	??_SetHourMin,w,c
 11317  001A8C  0806               	sublw	6
 11318  001A8E  6E1E               	movwf	SetHourMin@secToNext6Sec,c
 11319                           
 11320                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)&0xFF)));
 11321  001A90  C01E  F011         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
 11322  001A94  6A12               	clrf	(??_SetHourMin+1)& (0+255),c
 11323  001A96  6A13               	clrf	(??_SetHourMin+2)& (0+255),c
 11324  001A98  6A14               	clrf	(??_SetHourMin+3)& (0+255),c
 11325  001A9A  0EDC               	movlw	220
 11326  001A9C  0211               	mulwf	??_SetHourMin& (0+255),c
 11327  001A9E  CFF3 F015          	movff	prodl,??_SetHourMin+4
 11328  001AA2  CFF4 F016          	movff	prodh,??_SetHourMin+5
 11329  001AA6  6A17               	clrf	(??_SetHourMin+6)& (0+255),c
 11330  001AA8  6A18               	clrf	(??_SetHourMin+7)& (0+255),c
 11331  001AAA  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11332  001AAC  50F3               	movf	prodl,w,c
 11333  001AAE  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 11334  001AB0  50F4               	movf	prodh,w,c
 11335  001AB2  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 11336  001AB4  0E00               	movlw	0
 11337  001AB6  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11338  001AB8  0ED9               	movlw	217
 11339  001ABA  0211               	mulwf	??_SetHourMin& (0+255),c
 11340  001ABC  50F3               	movf	prodl,w,c
 11341  001ABE  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 11342  001AC0  50F4               	movf	prodh,w,c
 11343  001AC2  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 11344  001AC4  0E00               	movlw	0
 11345  001AC6  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11346  001AC8  0EDC               	movlw	220
 11347  001ACA  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 11348  001ACC  50F3               	movf	prodl,w,c
 11349  001ACE  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11350  001AD0  50F4               	movf	prodh,w,c
 11351  001AD2  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11352  001AD4  0ED9               	movlw	217
 11353  001AD6  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11354  001AD8  50F3               	movf	prodl,w,c
 11355  001ADA  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11356  001ADC  50F4               	movf	prodh,w,c
 11357  001ADE  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11358  001AE0  0EFF               	movlw	255
 11359  001AE2  0211               	mulwf	??_SetHourMin& (0+255),c
 11360  001AE4  50F3               	movf	prodl,w,c
 11361  001AE6  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11362  001AE8  50F4               	movf	prodh,w,c
 11363  001AEA  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11364  001AEC  0EDC               	movlw	220
 11365  001AEE  0214               	mulwf	(??_SetHourMin+3)& (0+255),c
 11366  001AF0  50F3               	movf	prodl,w,c
 11367  001AF2  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11368  001AF4  0ED9               	movlw	217
 11369  001AF6  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 11370  001AF8  50F3               	movf	prodl,w,c
 11371  001AFA  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11372  001AFC  0EFF               	movlw	255
 11373  001AFE  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11374  001B00  50F3               	movf	prodl,w,c
 11375  001B02  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11376  001B04  0EFF               	movlw	255
 11377  001B06  0211               	mulwf	??_SetHourMin& (0+255),c
 11378  001B08  50F3               	movf	prodl,w,c
 11379  001B0A  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11380  001B0C  0E00               	movlw	0
 11381  001B0E  2415               	addwf	??_SetHourMin+4,w,c
 11382  001B10  6E19               	movwf	(??_SetHourMin+8)& (0+255),c
 11383  001B12  0E00               	movlw	0
 11384  001B14  2016               	addwfc	??_SetHourMin+5,w,c
 11385  001B16  6E1A               	movwf	(??_SetHourMin+9)& (0+255),c
 11386  001B18  0E01               	movlw	1
 11387  001B1A  2017               	addwfc	??_SetHourMin+6,w,c
 11388  001B1C  6E1B               	movwf	(??_SetHourMin+10)& (0+255),c
 11389  001B1E  0E00               	movlw	0
 11390  001B20  2018               	addwfc	??_SetHourMin+7,w,c
 11391  001B22  6E1C               	movwf	(??_SetHourMin+11)& (0+255),c
 11392  001B24  C01A  F019         	movff	??_SetHourMin+9,??_SetHourMin+8
 11393  001B28  C01B  F01A         	movff	??_SetHourMin+10,??_SetHourMin+9
 11394  001B2C  C01C  F01B         	movff	??_SetHourMin+11,??_SetHourMin+10
 11395  001B30  6A1C               	clrf	??_SetHourMin+11,c
 11396  001B32  BE1B               	btfsc	??_SetHourMin+10,7,c
 11397  001B34  681C               	setf	??_SetHourMin+11,c
 11398  001B36  5019               	movf	??_SetHourMin+8,w,c
 11399  001B38  6ED7               	movwf	4055,c	;volatile
 11400  001B3A  501E               	movf	SetHourMin@secToNext6Sec,w,c
 11401  001B3C  0DDC               	mullw	220
 11402  001B3E  CFF3 FFD6          	movff	prodl,4054	;volatile
 11403                           
 11404                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 11405  001B42  8ED5               	bsf	4053,7,c	;volatile
 11406  001B44  0012               	return		;funcret
 11407  001B46  FFFF               	dw	65535	; errata NOP
 11408  001B48                     __end_of_SetHourMin:
 11409                           	opt stack 0
 11410                           tblptru	equ	0xFF8
 11411                           tblptrh	equ	0xFF7
 11412                           tblptrl	equ	0xFF6
 11413                           tablat	equ	0xFF5
 11414                           prodh	equ	0xFF4
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           indf1	equ	0xFE7
 11420                           postinc1	equ	0xFE6
 11421                           postdec1	equ	0xFE5
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           plusw2	equ	0xFDB
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432 ;; *************** function ___lbmod *****************
 11433 ;; Defined at:
 11434 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  dividend        1    wreg     unsigned char 
 11437 ;;  divisor         1    6[COMRAM] unsigned char 
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;  dividend        1    7[COMRAM] unsigned char 
 11440 ;;  rem             1    9[COMRAM] unsigned char 
 11441 ;;  counter         1    8[COMRAM] unsigned char 
 11442 ;; Return value:  Size  Location     Type
 11443 ;;                  1    wreg      unsigned char 
 11444 ;; Registers used:
 11445 ;;		wreg, status,2, status,0
 11446 ;; Tracked objects:
 11447 ;;		On entry : F/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11451 ;;      Params:         1       0       0       0       0       0       0
 11452 ;;      Locals:         3       0       0       0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0
 11454 ;;      Totals:         4       0       0       0       0       0       0
 11455 ;;Total ram usage:        4 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    2
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_SetHourMin
 11462 ;; This function uses a non-reentrant model
 11463 ;;
 11464                           
 11465                           	psect	text60
 11466  002E6E                     __ptext60:
 11467                           	opt stack 0
 11468  002E6E                     ___lbmod:
 11469                           	opt stack 25
 11470                           
 11471                           ;incstack = 0
 11472  002E6E  FFFF               	dw	65535
 11473                           
 11474                           ;___lbmod@dividend stored from wreg
 11475  002E70  6E08               	movwf	___lbmod@dividend,c
 11476  002E72  0E08               	movlw	8
 11477  002E74  6E09               	movwf	___lbmod@counter,c
 11478  002E76  6A0A               	clrf	___lbmod@rem,c
 11479  002E78                     l6179:
 11480  002E78  FFFF               	dw	65535	; assembler added errata NOP
 11481  002E7A  90D8               	bcf	status,0,c
 11482  002E7C  3408               	rlcf	___lbmod@dividend,w,c
 11483  002E7E  340A               	rlcf	___lbmod@rem,w,c
 11484  002E80  6E0A               	movwf	___lbmod@rem,c
 11485  002E82  90D8               	bcf	status,0,c
 11486  002E84  3608               	rlcf	___lbmod@dividend,f,c
 11487  002E86  5007               	movf	___lbmod@divisor,w,c
 11488  002E88  5C0A               	subwf	___lbmod@rem,w,c
 11489  002E8A  E302               	bnc	l6187
 11490  002E8C  5007               	movf	___lbmod@divisor,w,c
 11491  002E8E  5E0A               	subwf	___lbmod@rem,f,c
 11492  002E90                     l6187:
 11493  002E90  2E09               	decfsz	___lbmod@counter,f,c
 11494  002E92  D7F2               	goto	l6179
 11495  002E94  500A               	movf	___lbmod@rem,w,c
 11496  002E96  0012               	return		;funcret
 11497  002E98  FFFF               	dw	65535	; errata NOP
 11498  002E9A                     __end_of___lbmod:
 11499                           	opt stack 0
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           intcon	equ	0xFF2
 11507                           postinc0	equ	0xFEE
 11508                           wreg	equ	0xFE8
 11509                           indf1	equ	0xFE7
 11510                           postinc1	equ	0xFE6
 11511                           postdec1	equ	0xFE5
 11512                           fsr1h	equ	0xFE2
 11513                           fsr1l	equ	0xFE1
 11514                           indf2	equ	0xFDF
 11515                           postinc2	equ	0xFDE
 11516                           postdec2	equ	0xFDD
 11517                           plusw2	equ	0xFDB
 11518                           fsr2h	equ	0xFDA
 11519                           fsr2l	equ	0xFD9
 11520                           status	equ	0xFD8
 11521                           
 11522 ;; *************** function ___lbdiv *****************
 11523 ;; Defined at:
 11524 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
 11525 ;; Parameters:    Size  Location     Type
 11526 ;;  dividend        1    wreg     unsigned char 
 11527 ;;  divisor         1    6[COMRAM] unsigned char 
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;  dividend        1    7[COMRAM] unsigned char 
 11530 ;;  quotient        1    9[COMRAM] unsigned char 
 11531 ;;  counter         1    8[COMRAM] unsigned char 
 11532 ;; Return value:  Size  Location     Type
 11533 ;;                  1    wreg      unsigned char 
 11534 ;; Registers used:
 11535 ;;		wreg, status,2, status,0
 11536 ;; Tracked objects:
 11537 ;;		On entry : F/0
 11538 ;;		On exit  : 0/0
 11539 ;;		Unchanged: 0/0
 11540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11541 ;;      Params:         1       0       0       0       0       0       0
 11542 ;;      Locals:         3       0       0       0       0       0       0
 11543 ;;      Temps:          0       0       0       0       0       0       0
 11544 ;;      Totals:         4       0       0       0       0       0       0
 11545 ;;Total ram usage:        4 bytes
 11546 ;; Hardware stack levels used:    1
 11547 ;; Hardware stack levels required when called:    2
 11548 ;; This function calls:
 11549 ;;		Nothing
 11550 ;; This function is called by:
 11551 ;;		_SetHourMin
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text61
 11556  002CDA                     __ptext61:
 11557                           	opt stack 0
 11558  002CDA                     ___lbdiv:
 11559                           	opt stack 25
 11560                           
 11561                           ;incstack = 0
 11562  002CDA  FFFF               	dw	65535
 11563                           
 11564                           ;___lbdiv@dividend stored from wreg
 11565  002CDC  6E08               	movwf	___lbdiv@dividend,c
 11566  002CDE  6A0A               	clrf	___lbdiv@quotient,c
 11567  002CE0  5007               	movf	___lbdiv@divisor,w,c
 11568  002CE2  E017               	bz	l6171
 11569  002CE4  0E01               	movlw	1
 11570  002CE6  6E09               	movwf	___lbdiv@counter,c
 11571  002CE8  D004               	goto	l6159
 11572  002CEA                     l6155:
 11573  002CEA  FFFF               	dw	65535	; assembler added errata NOP
 11574  002CEC  90D8               	bcf	status,0,c
 11575  002CEE  3607               	rlcf	___lbdiv@divisor,f,c
 11576  002CF0  2A09               	incf	___lbdiv@counter,f,c
 11577  002CF2                     l6159:
 11578  002CF2  FFFF               	dw	65535	; assembler added errata NOP
 11579  002CF4  AE07               	btfss	___lbdiv@divisor,7,c
 11580  002CF6  D7F9               	goto	l6155
 11581  002CF8                     l6161:
 11582  002CF8  FFFF               	dw	65535	; assembler added errata NOP
 11583  002CFA  90D8               	bcf	status,0,c
 11584  002CFC  360A               	rlcf	___lbdiv@quotient,f,c
 11585  002CFE  5007               	movf	___lbdiv@divisor,w,c
 11586  002D00  5C08               	subwf	___lbdiv@dividend,w,c
 11587  002D02  E303               	bnc	l6167
 11588  002D04  5007               	movf	___lbdiv@divisor,w,c
 11589  002D06  5E08               	subwf	___lbdiv@dividend,f,c
 11590  002D08  800A               	bsf	___lbdiv@quotient,0,c
 11591  002D0A                     l6167:
 11592  002D0A  90D8               	bcf	status,0,c
 11593  002D0C  3207               	rrcf	___lbdiv@divisor,f,c
 11594  002D0E  2E09               	decfsz	___lbdiv@counter,f,c
 11595  002D10  D7F3               	goto	l6161
 11596  002D12                     l6171:
 11597  002D12  500A               	movf	___lbdiv@quotient,w,c
 11598  002D14  0012               	return		;funcret
 11599  002D16  FFFF               	dw	65535	; errata NOP
 11600  002D18                     __end_of___lbdiv:
 11601                           	opt stack 0
 11602                           tblptru	equ	0xFF8
 11603                           tblptrh	equ	0xFF7
 11604                           tblptrl	equ	0xFF6
 11605                           tablat	equ	0xFF5
 11606                           prodh	equ	0xFF4
 11607                           prodl	equ	0xFF3
 11608                           intcon	equ	0xFF2
 11609                           postinc0	equ	0xFEE
 11610                           wreg	equ	0xFE8
 11611                           indf1	equ	0xFE7
 11612                           postinc1	equ	0xFE6
 11613                           postdec1	equ	0xFE5
 11614                           fsr1h	equ	0xFE2
 11615                           fsr1l	equ	0xFE1
 11616                           indf2	equ	0xFDF
 11617                           postinc2	equ	0xFDE
 11618                           postdec2	equ	0xFDD
 11619                           plusw2	equ	0xFDB
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function _ModbusSetExceptionStatusBit *****************
 11625 ;; Defined at:
 11626 ;;		line 233 in file "ModbusRtu.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  bitNum          1    wreg     unsigned char 
 11629 ;;  value           1    6[COMRAM] unsigned char 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  bitNum          1    9[COMRAM] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      void 
 11634 ;; Registers used:
 11635 ;;		wreg, status,2, status,0
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : F/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11641 ;;      Params:         1       0       0       0       0       0       0
 11642 ;;      Locals:         1       0       0       0       0       0       0
 11643 ;;      Temps:          2       0       0       0       0       0       0
 11644 ;;      Totals:         4       0       0       0       0       0       0
 11645 ;;Total ram usage:        4 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    2
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_CommandSetLed
 11652 ;;		_CommandSetStatusLed
 11653 ;;		_ProcessUserCommands
 11654 ;;		_io_poll
 11655 ;;		_ModbusPoll
 11656 ;;		_ModbusProcess_FC100
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text62
 11661  002A9C                     __ptext62:
 11662                           	opt stack 0
 11663  002A9C                     _ModbusSetExceptionStatusBit:
 11664                           	opt stack 26
 11665                           
 11666                           ;incstack = 0
 11667  002A9C  FFFF               	dw	65535
 11668                           
 11669                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 11670  002A9E  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 11671                           
 11672                           ;ModbusRtu.c: 235: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 11673  002AA0  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
 11674  002AA2  E010               	bz	l6107
 11675  002AA4  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 11676  002AA8  0E01               	movlw	1
 11677  002AAA  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 11678  002AAC  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 11679  002AAE  D003               	goto	u5224
 11680  002AB0                     u5225:
 11681  002AB0  FFFF               	dw	65535	; assembler added errata NOP
 11682  002AB2  90D8               	bcf	status,0,c
 11683  002AB4  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 11684  002AB6                     u5224:
 11685  002AB6  FFFF               	dw	65535	; assembler added errata NOP
 11686  002AB8  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 11687  002ABA  D7FA               	goto	u5225
 11688  002ABC  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 11689  002ABE  0100               	movlb	0	; () banked
 11690  002AC0  13CC               	iorwf	__exceptionStatus& (0+255),f,b
 11691  002AC2  D00F               	goto	l770
 11692  002AC4                     l6107:
 11693  002AC4  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 11694  002AC8  0E01               	movlw	1
 11695  002ACA  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 11696  002ACC  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 11697  002ACE  D003               	goto	u5234
 11698  002AD0                     u5235:
 11699  002AD0  FFFF               	dw	65535	; assembler added errata NOP
 11700  002AD2  90D8               	bcf	status,0,c
 11701  002AD4  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 11702  002AD6                     u5234:
 11703  002AD6  FFFF               	dw	65535	; assembler added errata NOP
 11704  002AD8  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 11705  002ADA  D7FA               	goto	u5235
 11706  002ADC  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
 11707  002ADE  0100               	movlb	0	; () banked
 11708  002AE0  17CC               	andwf	__exceptionStatus& (0+255),f,b
 11709  002AE2                     l770:
 11710  002AE2  FFFF               	dw	65535	; assembler added errata NOP
 11711                           
 11712                           ; BSR set to: 0
 11713  002AE4  0012               	return		;funcret
 11714  002AE6  FFFF               	dw	65535	; errata NOP
 11715  002AE8                     __end_of_ModbusSetExceptionStatusBit:
 11716                           	opt stack 0
 11717                           tblptru	equ	0xFF8
 11718                           tblptrh	equ	0xFF7
 11719                           tblptrl	equ	0xFF6
 11720                           tablat	equ	0xFF5
 11721                           prodh	equ	0xFF4
 11722                           prodl	equ	0xFF3
 11723                           intcon	equ	0xFF2
 11724                           postinc0	equ	0xFEE
 11725                           wreg	equ	0xFE8
 11726                           indf1	equ	0xFE7
 11727                           postinc1	equ	0xFE6
 11728                           postdec1	equ	0xFE5
 11729                           fsr1h	equ	0xFE2
 11730                           fsr1l	equ	0xFE1
 11731                           indf2	equ	0xFDF
 11732                           postinc2	equ	0xFDE
 11733                           postdec2	equ	0xFDD
 11734                           plusw2	equ	0xFDB
 11735                           fsr2h	equ	0xFDA
 11736                           fsr2l	equ	0xFD9
 11737                           status	equ	0xFD8
 11738                           
 11739 ;; *************** function _ModbusProcess_FC1 *****************
 11740 ;; Defined at:
 11741 ;;		line 933 in file "ModbusRtu.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;  regs            2   21[COMRAM] unsigned short 
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 11746 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 11747 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 11748 ;;  u16coil         2   26[COMRAM] unsigned short 
 11749 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 11750 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 11751 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 11752 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      unsigned char 
 11755 ;; Registers used:
 11756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/1
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11762 ;;      Params:         2       0       0       0       0       0       0
 11763 ;;      Locals:        12       0       0       0       0       0       0
 11764 ;;      Temps:          3       0       0       0       0       0       0
 11765 ;;      Totals:        17       0       0       0       0       0       0
 11766 ;;Total ram usage:       17 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    4
 11769 ;; This function calls:
 11770 ;;		_ModbusSendTxBuffer
 11771 ;; This function is called by:
 11772 ;;		_ModbusPoll
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           	psect	text63
 11777  0016DA                     __ptext63:
 11778                           	opt stack 0
 11779  0016DA                     _ModbusProcess_FC1:
 11780                           	opt stack 25
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;incstack = 0
 11784  0016DA  FFFF               	dw	65535
 11785                           
 11786                           ;ModbusRtu.c: 936: uint8_t u8currentBit, u8bytesno, u8bitsno;
 11787                           ;ModbusRtu.c: 937: uint8_t u8CopyBufferSize;
 11788                           ;ModbusRtu.c: 938: uint16_t u16currentCoil, u16coil;
 11789                           ;ModbusRtu.c: 941: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 11790  0016DC  0101               	movlb	1	; () banked
 11791  0016DE  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 11792  0016E0  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11793  0016E2  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 11794  0016E4  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 11795  0016E6  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 11796                           
 11797                           ; BSR set to: 1
 11798                           ;ModbusRtu.c: 942: _lastAddress = u16StartCoil;
 11799  0016EA  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 11800  0016EE  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 11801                           
 11802                           ;ModbusRtu.c: 943: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 11803  0016F2  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 11804  0016F4  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11805  0016F6  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 11806  0016F8  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 11807  0016FA  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 11808                           
 11809                           ; BSR set to: 1
 11810                           ;ModbusRtu.c: 944: _lastCount = u16Coilno;
 11811  0016FE  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 11812  001702  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 11813                           
 11814                           ; BSR set to: 1
 11815                           ;ModbusRtu.c: 946: u8bytesno = (uint8_t) (u16Coilno / 8);
 11816  001706  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11817  00170A  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 11818  00170E  90D8               	bcf	status,0,c
 11819  001710  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11820  001712  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11821  001714  90D8               	bcf	status,0,c
 11822  001716  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11823  001718  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11824  00171A  90D8               	bcf	status,0,c
 11825  00171C  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11826  00171E  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11827  001720  5018               	movf	??_ModbusProcess_FC1,w,c
 11828  001722  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 11829                           
 11830                           ; BSR set to: 1
 11831                           ;ModbusRtu.c: 947: if (u16Coilno % 8 != 0)
 11832  001724  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11833  001728  0E07               	movlw	7
 11834  00172A  1618               	andwf	??_ModbusProcess_FC1,f,c
 11835  00172C  E001               	bz	l6841
 11836                           
 11837                           ; BSR set to: 1
 11838                           ;ModbusRtu.c: 948: u8bytesno++;
 11839  00172E  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 11840  001730                     l6841:
 11841                           
 11842                           ; BSR set to: 1
 11843                           ;ModbusRtu.c: 949: _au8Buffer[ ADD_HI ] = u8bytesno;
 11844  001730  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 11845                           
 11846                           ; BSR set to: 1
 11847                           ;ModbusRtu.c: 950: _u8BufferSize = ADD_LO;
 11848  001734  0E03               	movlw	3
 11849  001736  6E74               	movwf	__u8BufferSize,c
 11850                           
 11851                           ; BSR set to: 1
 11852                           ;ModbusRtu.c: 953: u8bitsno = 0;
 11853  001738  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11854                           
 11855                           ; BSR set to: 1
 11856                           ;ModbusRtu.c: 955: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 11857  00173A  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 11858  00173C  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 11859  00173E  D04F               	goto	l6867
 11860  001740                     l6849:
 11861                           
 11862                           ;ModbusRtu.c: 956: {
 11863                           ;ModbusRtu.c: 957: u16coil = u16StartCoil + u16currentCoil;
 11864  001740  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 11865  001742  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 11866  001744  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 11867  001746  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 11868  001748  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 11869  00174A  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 11870                           
 11871                           ;ModbusRtu.c: 959: u8currentBit = (uint8_t) u16coil;
 11872  00174C  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 11873                           
 11874                           ;ModbusRtu.c: 961: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 11875  001750  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 11876  001754  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 11877  001758  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 11878  00175C  2A18               	incf	??_ModbusProcess_FC1,f,c
 11879  00175E  D004               	goto	u6004
 11880  001760                     u6005:
 11881  001760  FFFF               	dw	65535	; assembler added errata NOP
 11882  001762  90D8               	bcf	status,0,c
 11883  001764  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 11884  001766  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11885  001768                     u6004:
 11886  001768  FFFF               	dw	65535	; assembler added errata NOP
 11887  00176A  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11888  00176C  D7F9               	goto	u6005
 11889  00176E  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 11890  001770  D015               	goto	l6857
 11891  001772  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11892  001776  0E01               	movlw	1
 11893  001778  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11894  00177A  2A18               	incf	??_ModbusProcess_FC1,f,c
 11895  00177C  D003               	goto	u6024
 11896  00177E                     u6025:
 11897  00177E  FFFF               	dw	65535	; assembler added errata NOP
 11898  001780  90D8               	bcf	status,0,c
 11899  001782  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11900  001784                     u6024:
 11901  001784  FFFF               	dw	65535	; assembler added errata NOP
 11902  001786  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11903  001788  D7FA               	goto	u6025
 11904  00178A  0E00               	movlw	low __au8Buffer
 11905  00178C  2474               	addwf	__u8BufferSize,w,c
 11906  00178E  6ED9               	movwf	fsr2l,c
 11907  001790  6ADA               	clrf	fsr2h,c
 11908  001792  0E01               	movlw	high __au8Buffer
 11909  001794  22DA               	addwfc	fsr2h,f,c
 11910  001796  5019               	movf	??_ModbusProcess_FC1+1,w,c
 11911  001798  12DF               	iorwf	indf2,f,c
 11912  00179A  D017               	goto	l6859
 11913  00179C                     l6857:
 11914  00179C  FFFF               	dw	65535	; assembler added errata NOP
 11915  00179E  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11916  0017A2  0E01               	movlw	1
 11917  0017A4  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11918  0017A6  2A18               	incf	??_ModbusProcess_FC1,f,c
 11919  0017A8  D003               	goto	u6034
 11920  0017AA                     u6035:
 11921  0017AA  FFFF               	dw	65535	; assembler added errata NOP
 11922  0017AC  90D8               	bcf	status,0,c
 11923  0017AE  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11924  0017B0                     u6034:
 11925  0017B0  FFFF               	dw	65535	; assembler added errata NOP
 11926  0017B2  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11927  0017B4  D7FA               	goto	u6035
 11928  0017B6  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 11929  0017B8  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 11930  0017BA  0E00               	movlw	low __au8Buffer
 11931  0017BC  2474               	addwf	__u8BufferSize,w,c
 11932  0017BE  6ED9               	movwf	fsr2l,c
 11933  0017C0  6ADA               	clrf	fsr2h,c
 11934  0017C2  0E01               	movlw	high __au8Buffer
 11935  0017C4  22DA               	addwfc	fsr2h,f,c
 11936  0017C6  501A               	movf	??_ModbusProcess_FC1+2,w,c
 11937  0017C8  16DF               	andwf	indf2,f,c
 11938  0017CA                     l6859:
 11939  0017CA  FFFF               	dw	65535	; assembler added errata NOP
 11940                           
 11941                           ;ModbusRtu.c: 965: u8bitsno++;
 11942  0017CC  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 11943                           
 11944                           ;ModbusRtu.c: 967: if (u8bitsno > 7)
 11945  0017CE  0E07               	movlw	7
 11946  0017D0  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 11947  0017D2  D002               	goto	l894
 11948                           
 11949                           ;ModbusRtu.c: 968: {
 11950                           ;ModbusRtu.c: 969: u8bitsno = 0;
 11951  0017D4  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11952                           
 11953                           ;ModbusRtu.c: 970: _u8BufferSize++;
 11954  0017D6  2A74               	incf	__u8BufferSize,f,c
 11955  0017D8                     l894:
 11956  0017D8  FFFF               	dw	65535	; assembler added errata NOP
 11957  0017DA  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 11958  0017DC  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 11959  0017DE                     l6867:
 11960  0017DE  FFFF               	dw	65535	; assembler added errata NOP
 11961  0017E0  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 11962  0017E2  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 11963  0017E4  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 11964  0017E6  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 11965  0017E8  E3AB               	bnc	l6849
 11966                           
 11967                           ;ModbusRtu.c: 971: }
 11968                           ;ModbusRtu.c: 972: }
 11969                           ;ModbusRtu.c: 975: if (u16Coilno % 8 != 0)
 11970  0017EA  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11971  0017EE  0E07               	movlw	7
 11972  0017F0  1618               	andwf	??_ModbusProcess_FC1,f,c
 11973  0017F2  E001               	bz	l6873
 11974                           
 11975                           ;ModbusRtu.c: 976: _u8BufferSize++;
 11976  0017F4  2A74               	incf	__u8BufferSize,f,c
 11977  0017F6                     l6873:
 11978                           
 11979                           ;ModbusRtu.c: 977: u8CopyBufferSize = _u8BufferSize + 2;
 11980  0017F6  5074               	movf	__u8BufferSize,w,c
 11981  0017F8  0F02               	addlw	2
 11982  0017FA  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 11983                           
 11984                           ;ModbusRtu.c: 978: ModbusSendTxBuffer();
 11985  0017FC  EC74  F015         	call	_ModbusSendTxBuffer	;wreg free
 11986                           
 11987                           ;ModbusRtu.c: 979: return u8CopyBufferSize;
 11988  001800  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 11989  001802  0012               	return		;funcret
 11990  001804  FFFF               	dw	65535	; errata NOP
 11991  001806                     __end_of_ModbusProcess_FC1:
 11992                           	opt stack 0
 11993                           tblptru	equ	0xFF8
 11994                           tblptrh	equ	0xFF7
 11995                           tblptrl	equ	0xFF6
 11996                           tablat	equ	0xFF5
 11997                           prodh	equ	0xFF4
 11998                           prodl	equ	0xFF3
 11999                           intcon	equ	0xFF2
 12000                           postinc0	equ	0xFEE
 12001                           wreg	equ	0xFE8
 12002                           indf1	equ	0xFE7
 12003                           postinc1	equ	0xFE6
 12004                           postdec1	equ	0xFE5
 12005                           fsr1h	equ	0xFE2
 12006                           fsr1l	equ	0xFE1
 12007                           indf2	equ	0xFDF
 12008                           postinc2	equ	0xFDE
 12009                           postdec2	equ	0xFDD
 12010                           plusw2	equ	0xFDB
 12011                           fsr2h	equ	0xFDA
 12012                           fsr2l	equ	0xFD9
 12013                           status	equ	0xFD8
 12014                           
 12015 ;; *************** function _ModbusSendTxBuffer *****************
 12016 ;; Defined at:
 12017 ;;		line 641 in file "ModbusRtu.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;		None
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;  u16crc          2   19[COMRAM] unsigned short 
 12022 ;; Return value:  Size  Location     Type
 12023 ;;                  1    wreg      void 
 12024 ;; Registers used:
 12025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/1
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12031 ;;      Params:         0       0       0       0       0       0       0
 12032 ;;      Locals:         2       0       0       0       0       0       0
 12033 ;;      Temps:          0       0       0       0       0       0       0
 12034 ;;      Totals:         2       0       0       0       0       0       0
 12035 ;;Total ram usage:        2 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    3
 12038 ;; This function calls:
 12039 ;;		_ModbusCalcCRC
 12040 ;;		_PortWrite
 12041 ;;		_millis
 12042 ;; This function is called by:
 12043 ;;		_ModbusPoll
 12044 ;;		_ModbusProcess_FC1
 12045 ;;		_ModbusProcess_FC3
 12046 ;;		_ModbusProcess_FC5
 12047 ;;		_ModbusProcess_FC6
 12048 ;;		_ModbusProcess_FC7
 12049 ;;		_ModbusProcess_FC15
 12050 ;;		_ModbusProcess_FC16
 12051 ;;		_ModbusProcess_FC17
 12052 ;;		_ModbusProcess_FC21
 12053 ;;		_ModbusProcess_FC43
 12054 ;;		_ModbusProcess_FC100
 12055 ;;		_ModbusProcess_FC101
 12056 ;;		_ModbusProcess_FC102
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           	psect	text64
 12061  002AE8                     __ptext64:
 12062                           	opt stack 0
 12063  002AE8                     _ModbusSendTxBuffer:
 12064                           	opt stack 26
 12065                           
 12066                           ;incstack = 0
 12067  002AE8  FFFF               	dw	65535
 12068                           
 12069                           ;ModbusRtu.c: 646: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 12070  002AEA  5074               	movf	__u8BufferSize,w,c
 12071  002AEC  ECD2  F013         	call	_ModbusCalcCRC
 12072  002AF0  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 12073  002AF4  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 12074                           
 12075                           ;ModbusRtu.c: 647: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 12076  002AF8  0E00               	movlw	low __au8Buffer
 12077  002AFA  2474               	addwf	__u8BufferSize,w,c
 12078  002AFC  6ED9               	movwf	fsr2l,c
 12079  002AFE  6ADA               	clrf	fsr2h,c
 12080  002B00  0E01               	movlw	high __au8Buffer
 12081  002B02  22DA               	addwfc	fsr2h,f,c
 12082  002B04  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 12083                           
 12084                           ;ModbusRtu.c: 648: _u8BufferSize++;
 12085  002B08  2A74               	incf	__u8BufferSize,f,c
 12086                           
 12087                           ;ModbusRtu.c: 649: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 12088  002B0A  0E00               	movlw	low __au8Buffer
 12089  002B0C  2474               	addwf	__u8BufferSize,w,c
 12090  002B0E  6ED9               	movwf	fsr2l,c
 12091  002B10  6ADA               	clrf	fsr2h,c
 12092  002B12  0E01               	movlw	high __au8Buffer
 12093  002B14  22DA               	addwfc	fsr2h,f,c
 12094  002B16  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 12095                           
 12096                           ;ModbusRtu.c: 650: _u8BufferSize++;
 12097  002B1A  2A74               	incf	__u8BufferSize,f,c
 12098                           
 12099                           ;ModbusRtu.c: 654: PortWrite(_au8Buffer, _u8BufferSize);
 12100  002B1C  0E00               	movlw	low __au8Buffer
 12101  002B1E  6E07               	movwf	PortWrite@buf,c
 12102  002B20  0E01               	movlw	high __au8Buffer
 12103  002B22  6E08               	movwf	PortWrite@buf+1,c
 12104  002B24  C074  F009         	movff	__u8BufferSize,PortWrite@buflen
 12105  002B28  EC8C  F016         	call	_PortWrite	;wreg free
 12106                           
 12107                           ;ModbusRtu.c: 660: _u8BufferSize = 0;
 12108  002B2C  6A74               	clrf	__u8BufferSize,c
 12109                           
 12110                           ;ModbusRtu.c: 666: _u16OutCnt++;
 12111  002B2E  EF62  F017         	goto	_millis	;wreg free
 12112  002B32  FFFF               	dw	65535	; errata NOP
 12113  002B34                     __end_of_ModbusSendTxBuffer:
 12114                           	opt stack 0
 12115                           tblptru	equ	0xFF8
 12116                           tblptrh	equ	0xFF7
 12117                           tblptrl	equ	0xFF6
 12118                           tablat	equ	0xFF5
 12119                           prodh	equ	0xFF4
 12120                           prodl	equ	0xFF3
 12121                           intcon	equ	0xFF2
 12122                           postinc0	equ	0xFEE
 12123                           wreg	equ	0xFE8
 12124                           indf1	equ	0xFE7
 12125                           postinc1	equ	0xFE6
 12126                           postdec1	equ	0xFE5
 12127                           fsr1h	equ	0xFE2
 12128                           fsr1l	equ	0xFE1
 12129                           indf2	equ	0xFDF
 12130                           postinc2	equ	0xFDE
 12131                           postdec2	equ	0xFDD
 12132                           plusw2	equ	0xFDB
 12133                           fsr2h	equ	0xFDA
 12134                           fsr2l	equ	0xFD9
 12135                           status	equ	0xFD8
 12136                           
 12137 ;; *************** function _millis *****************
 12138 ;; Defined at:
 12139 ;;		line 247 in file "interrupts.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  ret             4   10[COMRAM] unsigned long 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  4    6[COMRAM] unsigned long 
 12146 ;; Registers used:
 12147 ;;		None
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12153 ;;      Params:         4       0       0       0       0       0       0
 12154 ;;      Locals:         4       0       0       0       0       0       0
 12155 ;;      Temps:          0       0       0       0       0       0       0
 12156 ;;      Totals:         8       0       0       0       0       0       0
 12157 ;;Total ram usage:        8 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    2
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_SoundPlayNextStep
 12164 ;;		_main
 12165 ;;		_ModbusPoll
 12166 ;;		_ModbusSendTxBuffer
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170                           	psect	text65
 12171  002EC4                     __ptext65:
 12172                           	opt stack 0
 12173  002EC4                     _millis:
 12174                           	opt stack 28
 12175                           
 12176                           ;incstack = 0
 12177  002EC4  FFFF               	dw	65535
 12178                           
 12179                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 12180  002EC6  9EF2               	bcf	intcon,7,c	;volatile
 12181                           
 12182                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 12183  002EC8  C0B2  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 12184  002ECC  C0B3  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 12185  002ED0  C0B4  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 12186  002ED4  C0B5  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 12187                           
 12188                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 12189  002ED8  8EF2               	bsf	intcon,7,c	;volatile
 12190                           
 12191                           ;interrupts.c: 253: return ret;
 12192  002EDA  C00B  F007         	movff	millis@ret,?_millis
 12193  002EDE  C00C  F008         	movff	millis@ret+1,?_millis+1
 12194  002EE2  C00D  F009         	movff	millis@ret+2,?_millis+2
 12195  002EE6  C00E  F00A         	movff	millis@ret+3,?_millis+3
 12196  002EEA  0012               	return		;funcret
 12197  002EEC  FFFF               	dw	65535	; errata NOP
 12198  002EEE                     __end_of_millis:
 12199                           	opt stack 0
 12200                           tblptru	equ	0xFF8
 12201                           tblptrh	equ	0xFF7
 12202                           tblptrl	equ	0xFF6
 12203                           tablat	equ	0xFF5
 12204                           prodh	equ	0xFF4
 12205                           prodl	equ	0xFF3
 12206                           intcon	equ	0xFF2
 12207                           postinc0	equ	0xFEE
 12208                           wreg	equ	0xFE8
 12209                           indf1	equ	0xFE7
 12210                           postinc1	equ	0xFE6
 12211                           postdec1	equ	0xFE5
 12212                           fsr1h	equ	0xFE2
 12213                           fsr1l	equ	0xFE1
 12214                           indf2	equ	0xFDF
 12215                           postinc2	equ	0xFDE
 12216                           postdec2	equ	0xFDD
 12217                           plusw2	equ	0xFDB
 12218                           fsr2h	equ	0xFDA
 12219                           fsr2l	equ	0xFD9
 12220                           status	equ	0xFD8
 12221                           
 12222 ;; *************** function _PortWrite *****************
 12223 ;; Defined at:
 12224 ;;		line 101 in file "interrupts.c"
 12225 ;; Parameters:    Size  Location     Type
 12226 ;;  buf             2    6[COMRAM] PTR unsigned char 
 12227 ;;		 -> _au8Buffer(140), 
 12228 ;;  buflen          1    8[COMRAM] unsigned char 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  i               1    9[COMRAM] unsigned char 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  1    wreg      void 
 12233 ;; Registers used:
 12234 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/1
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12240 ;;      Params:         3       0       0       0       0       0       0
 12241 ;;      Locals:         1       0       0       0       0       0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0
 12243 ;;      Totals:         4       0       0       0       0       0       0
 12244 ;;Total ram usage:        4 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    2
 12247 ;; This function calls:
 12248 ;;		Nothing
 12249 ;; This function is called by:
 12250 ;;		_ModbusSendTxBuffer
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           	psect	text66
 12255  002D18                     __ptext66:
 12256                           	opt stack 0
 12257  002D18                     _PortWrite:
 12258                           	opt stack 26
 12259                           
 12260                           ;incstack = 0
 12261  002D18  FFFF               	dw	65535
 12262                           
 12263                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 12264  002D1A  8A8B               	bsf	3979,5,c	;volatile
 12265                           
 12266                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 12267  002D1C  0E06               	movlw	6
 12268  002D1E                     u7447:
 12269  002D1E  FFFF               	dw	65535	; errata NOP
 12270  002D20  2EE8               	decfsz	wreg,f,c
 12271  002D22  D7FD               	goto	u7447
 12272  002D24  F000               	nop	
 12273                           
 12274                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 12275  002D26  6A0A               	clrf	PortWrite@i,c
 12276  002D28  D00C               	goto	l5957
 12277  002D2A                     l74:
 12278  002D2A  FFFF               	dw	65535	; assembler added errata NOP
 12279  002D2C  A2AC               	btfss	4012,1,c	;volatile
 12280  002D2E  D7FD               	goto	l74
 12281                           
 12282                           ;interrupts.c: 108: TXREG = buf[i];
 12283  002D30  500A               	movf	PortWrite@i,w,c
 12284  002D32  2407               	addwf	PortWrite@buf,w,c
 12285  002D34  6ED9               	movwf	fsr2l,c
 12286  002D36  0E00               	movlw	0
 12287  002D38  2008               	addwfc	PortWrite@buf+1,w,c
 12288  002D3A  6EDA               	movwf	fsr2h,c
 12289  002D3C  50DF               	movf	indf2,w,c
 12290  002D3E  6EAD               	movwf	4013,c	;volatile
 12291  002D40  2A0A               	incf	PortWrite@i,f,c
 12292  002D42                     l5957:
 12293  002D42  FFFF               	dw	65535	; assembler added errata NOP
 12294  002D44  5009               	movf	PortWrite@buflen,w,c
 12295  002D46  5C0A               	subwf	PortWrite@i,w,c
 12296  002D48  E3F0               	bnc	l74
 12297  002D4A                     l78:
 12298  002D4A  FFFF               	dw	65535	; assembler added errata NOP
 12299  002D4C  A2AC               	btfss	4012,1,c	;volatile
 12300  002D4E  D7FD               	goto	l78
 12301                           
 12302                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 12303  002D50  9A8B               	bcf	3979,5,c	;volatile
 12304  002D52  0012               	return		;funcret
 12305  002D54  FFFF               	dw	65535	; errata NOP
 12306  002D56                     __end_of_PortWrite:
 12307                           	opt stack 0
 12308                           tblptru	equ	0xFF8
 12309                           tblptrh	equ	0xFF7
 12310                           tblptrl	equ	0xFF6
 12311                           tablat	equ	0xFF5
 12312                           prodh	equ	0xFF4
 12313                           prodl	equ	0xFF3
 12314                           intcon	equ	0xFF2
 12315                           postinc0	equ	0xFEE
 12316                           wreg	equ	0xFE8
 12317                           indf1	equ	0xFE7
 12318                           postinc1	equ	0xFE6
 12319                           postdec1	equ	0xFE5
 12320                           fsr1h	equ	0xFE2
 12321                           fsr1l	equ	0xFE1
 12322                           indf2	equ	0xFDF
 12323                           postinc2	equ	0xFDE
 12324                           postdec2	equ	0xFDD
 12325                           plusw2	equ	0xFDB
 12326                           fsr2h	equ	0xFDA
 12327                           fsr2l	equ	0xFD9
 12328                           status	equ	0xFD8
 12329                           
 12330 ;; *************** function _ModbusCalcCRC *****************
 12331 ;; Defined at:
 12332 ;;		line 751 in file "ModbusRtu.c"
 12333 ;; Parameters:    Size  Location     Type
 12334 ;;  u8length        1    wreg     unsigned char 
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  u8length        1   10[COMRAM] unsigned char 
 12337 ;;  j               1   16[COMRAM] unsigned char 
 12338 ;;  i               1   15[COMRAM] unsigned char 
 12339 ;;  temp            2   17[COMRAM] unsigned int 
 12340 ;;  flag            2   13[COMRAM] unsigned int 
 12341 ;;  temp2           2   11[COMRAM] unsigned int 
 12342 ;; Return value:  Size  Location     Type
 12343 ;;                  2    6[COMRAM] unsigned short 
 12344 ;; Registers used:
 12345 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12346 ;; Tracked objects:
 12347 ;;		On entry : 0/0
 12348 ;;		On exit  : 0/0
 12349 ;;		Unchanged: 0/0
 12350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12351 ;;      Params:         2       0       0       0       0       0       0
 12352 ;;      Locals:         9       0       0       0       0       0       0
 12353 ;;      Temps:          2       0       0       0       0       0       0
 12354 ;;      Totals:        13       0       0       0       0       0       0
 12355 ;;Total ram usage:       13 bytes
 12356 ;; Hardware stack levels used:    1
 12357 ;; Hardware stack levels required when called:    2
 12358 ;; This function calls:
 12359 ;;		Nothing
 12360 ;; This function is called by:
 12361 ;;		_ModbusSendTxBuffer
 12362 ;;		_ModbusValidateRequest
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text67
 12367  0027A4                     __ptext67:
 12368                           	opt stack 0
 12369  0027A4                     _ModbusCalcCRC:
 12370                           	opt stack 26
 12371                           
 12372                           ;incstack = 0
 12373  0027A4  FFFF               	dw	65535
 12374                           
 12375                           ;ModbusCalcCRC@u8length stored from wreg
 12376  0027A6  6E0B               	movwf	ModbusCalcCRC@u8length,c
 12377                           
 12378                           ;ModbusRtu.c: 753: unsigned int temp, temp2, flag;
 12379                           ;ModbusRtu.c: 754: temp = 0xFFFF;
 12380  0027A8  6812               	setf	ModbusCalcCRC@temp,c
 12381  0027AA  6813               	setf	ModbusCalcCRC@temp+1,c
 12382                           
 12383                           ;ModbusRtu.c: 755: for (uint8_t i = 0; i < u8length; i++)
 12384  0027AC  6A10               	clrf	ModbusCalcCRC@i,c
 12385  0027AE  D01E               	goto	l6141
 12386  0027B0                     l6119:
 12387                           
 12388                           ;ModbusRtu.c: 756: {
 12389                           ;ModbusRtu.c: 757: temp = temp ^ _au8Buffer[i];
 12390  0027B0  0E00               	movlw	low __au8Buffer
 12391  0027B2  2410               	addwf	ModbusCalcCRC@i,w,c
 12392  0027B4  6ED9               	movwf	fsr2l,c
 12393  0027B6  6ADA               	clrf	fsr2h,c
 12394  0027B8  0E01               	movlw	high __au8Buffer
 12395  0027BA  22DA               	addwfc	fsr2h,f,c
 12396  0027BC  50DF               	movf	indf2,w,c
 12397  0027BE  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 12398                           
 12399                           ;ModbusRtu.c: 758: for (uint8_t j = 1; j <= 8; j++)
 12400  0027C0  0E01               	movlw	1
 12401  0027C2  6E11               	movwf	ModbusCalcCRC@j,c
 12402  0027C4                     l6127:
 12403  0027C4  FFFF               	dw	65535	; assembler added errata NOP
 12404                           
 12405                           ;ModbusRtu.c: 759: {
 12406                           ;ModbusRtu.c: 760: flag = temp & 0x0001;
 12407  0027C6  0E01               	movlw	1
 12408  0027C8  1412               	andwf	ModbusCalcCRC@temp,w,c
 12409  0027CA  6E0E               	movwf	ModbusCalcCRC@flag,c
 12410  0027CC  6A0F               	clrf	ModbusCalcCRC@flag+1,c
 12411                           
 12412                           ;ModbusRtu.c: 761: temp >>= 1;
 12413  0027CE  90D8               	bcf	status,0,c
 12414  0027D0  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 12415  0027D2  3212               	rrcf	ModbusCalcCRC@temp,f,c
 12416                           
 12417                           ;ModbusRtu.c: 762: if (flag)
 12418  0027D4  500E               	movf	ModbusCalcCRC@flag,w,c
 12419  0027D6  100F               	iorwf	ModbusCalcCRC@flag+1,w,c
 12420  0027D8  E004               	bz	l6135
 12421                           
 12422                           ;ModbusRtu.c: 763: temp ^= 0xA001;
 12423  0027DA  0E01               	movlw	1
 12424  0027DC  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 12425  0027DE  0EA0               	movlw	160
 12426  0027E0  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 12427  0027E2                     l6135:
 12428  0027E2  2A11               	incf	ModbusCalcCRC@j,f,c
 12429  0027E4  0E08               	movlw	8
 12430  0027E6  6411               	cpfsgt	ModbusCalcCRC@j,c
 12431  0027E8  D7ED               	goto	l6127
 12432  0027EA  2A10               	incf	ModbusCalcCRC@i,f,c
 12433  0027EC                     l6141:
 12434  0027EC  FFFF               	dw	65535	; assembler added errata NOP
 12435  0027EE  500B               	movf	ModbusCalcCRC@u8length,w,c
 12436  0027F0  5C10               	subwf	ModbusCalcCRC@i,w,c
 12437  0027F2  E3DE               	bnc	l6119
 12438                           
 12439                           ;ModbusRtu.c: 764: }
 12440                           ;ModbusRtu.c: 765: }
 12441                           ;ModbusRtu.c: 767: temp2 = temp >> 8;
 12442  0027F4  C013  F00C         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 12443  0027F8  6A0D               	clrf	ModbusCalcCRC@temp2+1,c
 12444                           
 12445                           ;ModbusRtu.c: 768: temp = (temp << 8) | temp2;
 12446  0027FA  5012               	movf	ModbusCalcCRC@temp,w,c
 12447  0027FC  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 12448  0027FE  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 12449  002800  500C               	movf	ModbusCalcCRC@temp2,w,c
 12450  002802  1009               	iorwf	??_ModbusCalcCRC,w,c
 12451  002804  6E12               	movwf	ModbusCalcCRC@temp,c
 12452  002806  500D               	movf	ModbusCalcCRC@temp2+1,w,c
 12453  002808  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 12454  00280A  6E13               	movwf	ModbusCalcCRC@temp+1,c
 12455                           
 12456                           ;ModbusRtu.c: 772: return temp;
 12457  00280C  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 12458  002810  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 12459  002814  0012               	return		;funcret
 12460  002816  FFFF               	dw	65535	; errata NOP
 12461  002818                     __end_of_ModbusCalcCRC:
 12462                           	opt stack 0
 12463                           tblptru	equ	0xFF8
 12464                           tblptrh	equ	0xFF7
 12465                           tblptrl	equ	0xFF6
 12466                           tablat	equ	0xFF5
 12467                           prodh	equ	0xFF4
 12468                           prodl	equ	0xFF3
 12469                           intcon	equ	0xFF2
 12470                           postinc0	equ	0xFEE
 12471                           wreg	equ	0xFE8
 12472                           indf1	equ	0xFE7
 12473                           postinc1	equ	0xFE6
 12474                           postdec1	equ	0xFE5
 12475                           fsr1h	equ	0xFE2
 12476                           fsr1l	equ	0xFE1
 12477                           indf2	equ	0xFDF
 12478                           postinc2	equ	0xFDE
 12479                           postdec2	equ	0xFDD
 12480                           plusw2	equ	0xFDB
 12481                           fsr2h	equ	0xFDA
 12482                           fsr2l	equ	0xFD9
 12483                           status	equ	0xFD8
 12484                           
 12485 ;; *************** function _ModbusGetRxBufferHeader *****************
 12486 ;; Defined at:
 12487 ;;		line 584 in file "ModbusRtu.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;		None
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;  i               1    8[COMRAM] unsigned char 
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  1    wreg      unsigned char 
 12494 ;; Registers used:
 12495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12496 ;; Tracked objects:
 12497 ;;		On entry : F/0
 12498 ;;		On exit  : F/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12501 ;;      Params:         0       0       0       0       0       0       0
 12502 ;;      Locals:         1       0       0       0       0       0       0
 12503 ;;      Temps:          1       0       0       0       0       0       0
 12504 ;;      Totals:         2       0       0       0       0       0       0
 12505 ;;Total ram usage:        2 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:    3
 12508 ;; This function calls:
 12509 ;;		_PortAvailable
 12510 ;;		_PortRead
 12511 ;; This function is called by:
 12512 ;;		_ModbusPoll
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           	psect	text68
 12517  002D92                     __ptext68:
 12518                           	opt stack 0
 12519  002D92                     _ModbusGetRxBufferHeader:
 12520                           	opt stack 26
 12521                           
 12522                           ;incstack = 0
 12523  002D92  FFFF               	dw	65535
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;ModbusRtu.c: 586: _u8BufferSize = 0;
 12527  002D94  6A74               	clrf	__u8BufferSize,c
 12528                           
 12529                           ;ModbusRtu.c: 587: for(uint8_t i = 0; i < 4; i++)
 12530  002D96  6A09               	clrf	ModbusGetRxBufferHeader@i,c
 12531  002D98                     l6625:
 12532  002D98  FFFF               	dw	65535	; assembler added errata NOP
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;ModbusRtu.c: 588: {
 12536                           ;ModbusRtu.c: 589: if(!PortAvailable())
 12537  002D9A  EC48  F018         	call	_PortAvailable	;wreg free
 12538  002D9E  0900               	iorlw	0
 12539  002DA0  E102               	bnz	l6631
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;ModbusRtu.c: 590: return ERR_EXCEPTION;
 12543  002DA2  0EFB               	movlw	251
 12544  002DA4  D011               	goto	l813
 12545  002DA6                     l6631:
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;ModbusRtu.c: 591: _au8Buffer[ _u8BufferSize ] = PortRead();
 12549  002DA6  ECE7  F016         	call	_PortRead	;wreg free
 12550  002DAA  6E08               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 12551  002DAC  0E00               	movlw	low __au8Buffer
 12552  002DAE  2474               	addwf	__u8BufferSize,w,c
 12553  002DB0  6ED9               	movwf	fsr2l,c
 12554  002DB2  6ADA               	clrf	fsr2h,c
 12555  002DB4  0E01               	movlw	high __au8Buffer
 12556  002DB6  22DA               	addwfc	fsr2h,f,c
 12557  002DB8  C008  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;ModbusRtu.c: 592: _u8BufferSize++;
 12561  002DBC  2A74               	incf	__u8BufferSize,f,c
 12562                           
 12563                           ; BSR set to: 0
 12564  002DBE  2A09               	incf	ModbusGetRxBufferHeader@i,f,c
 12565                           
 12566                           ; BSR set to: 0
 12567  002DC0  0E03               	movlw	3
 12568  002DC2  6409               	cpfsgt	ModbusGetRxBufferHeader@i,c
 12569  002DC4  D7E9               	goto	l6625
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;ModbusRtu.c: 593: }
 12573                           ;ModbusRtu.c: 594: return _u8BufferSize;
 12574  002DC6  5074               	movf	__u8BufferSize,w,c
 12575  002DC8                     l813:
 12576  002DC8  FFFF               	dw	65535	; assembler added errata NOP
 12577                           
 12578                           ; BSR set to: 0
 12579  002DCA  0012               	return		;funcret
 12580  002DCC  FFFF               	dw	65535	; errata NOP
 12581  002DCE                     __end_of_ModbusGetRxBufferHeader:
 12582                           	opt stack 0
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           prodh	equ	0xFF4
 12588                           prodl	equ	0xFF3
 12589                           intcon	equ	0xFF2
 12590                           postinc0	equ	0xFEE
 12591                           wreg	equ	0xFE8
 12592                           indf1	equ	0xFE7
 12593                           postinc1	equ	0xFE6
 12594                           postdec1	equ	0xFE5
 12595                           fsr1h	equ	0xFE2
 12596                           fsr1l	equ	0xFE1
 12597                           indf2	equ	0xFDF
 12598                           postinc2	equ	0xFDE
 12599                           postdec2	equ	0xFDD
 12600                           plusw2	equ	0xFDB
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _ModbusGetRxBuffer *****************
 12606 ;; Defined at:
 12607 ;;		line 604 in file "ModbusRtu.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      unsigned char 
 12614 ;; Registers used:
 12615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : F/1
 12618 ;;		On exit  : F/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12621 ;;      Params:         0       0       0       0       0       0       0
 12622 ;;      Locals:         1       0       0       0       0       0       0
 12623 ;;      Temps:          1       0       0       0       0       0       0
 12624 ;;      Totals:         2       0       0       0       0       0       0
 12625 ;;Total ram usage:        2 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    3
 12628 ;; This function calls:
 12629 ;;		_PortAvailable
 12630 ;;		_PortRead
 12631 ;; This function is called by:
 12632 ;;		_ModbusPoll
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text69
 12637  002C52                     __ptext69:
 12638                           	opt stack 0
 12639  002C52                     _ModbusGetRxBuffer:
 12640                           	opt stack 26
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;incstack = 0
 12644  002C52  FFFF               	dw	65535
 12645                           
 12646                           ; BSR set to: 1
 12647                           ;ModbusRtu.c: 606: bool bBuffOverflow = 0;
 12648  002C54  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 12649                           
 12650                           ; BSR set to: 1
 12651                           ;ModbusRtu.c: 611: _u8BufferSize = 4;
 12652  002C56  0E04               	movlw	4
 12653  002C58  6E74               	movwf	__u8BufferSize,c
 12654                           
 12655                           ;ModbusRtu.c: 613: while (PortAvailable())
 12656  002C5A  D011               	goto	l6655
 12657  002C5C                     l6647:
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;ModbusRtu.c: 614: {
 12661                           ;ModbusRtu.c: 615: _au8Buffer[ _u8BufferSize ] = PortRead();
 12662  002C5C  ECE7  F016         	call	_PortRead	;wreg free
 12663  002C60  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 12664  002C62  0E00               	movlw	low __au8Buffer
 12665  002C64  2474               	addwf	__u8BufferSize,w,c
 12666  002C66  6ED9               	movwf	fsr2l,c
 12667  002C68  6ADA               	clrf	fsr2h,c
 12668  002C6A  0E01               	movlw	high __au8Buffer
 12669  002C6C  22DA               	addwfc	fsr2h,f,c
 12670  002C6E  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;ModbusRtu.c: 616: _u8BufferSize++;
 12674  002C72  2A74               	incf	__u8BufferSize,f,c
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;ModbusRtu.c: 617: if (_u8BufferSize >= 140)
 12678  002C74  0E8B               	movlw	139
 12679  002C76  6474               	cpfsgt	__u8BufferSize,c
 12680  002C78  D002               	goto	l6655
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;ModbusRtu.c: 618: bBuffOverflow = 1;
 12684  002C7A  0E01               	movlw	1
 12685  002C7C  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 12686  002C7E                     l6655:
 12687  002C7E  FFFF               	dw	65535	; assembler added errata NOP
 12688  002C80  EC48  F018         	call	_PortAvailable	;wreg free
 12689  002C84  0900               	iorlw	0
 12690  002C86  E1EA               	bnz	l6647
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;ModbusRtu.c: 622: {
 12694                           ;ModbusRtu.c: 623: _u16errCnt++;
 12695  002C88  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 12696  002C8A  E002               	bz	l6663
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;ModbusRtu.c: 624: return ERR_BUFF_OVERFLOW;
 12700  002C8C  0EFD               	movlw	253
 12701  002C8E  D001               	goto	l821
 12702  002C90                     l6663:
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;ModbusRtu.c: 625: }
 12706                           ;ModbusRtu.c: 626: return _u8BufferSize;
 12707  002C90  5074               	movf	__u8BufferSize,w,c
 12708  002C92                     l821:
 12709  002C92  FFFF               	dw	65535	; assembler added errata NOP
 12710                           
 12711                           ; BSR set to: 0
 12712  002C94  0012               	return		;funcret
 12713  002C96  FFFF               	dw	65535	; errata NOP
 12714  002C98                     __end_of_ModbusGetRxBuffer:
 12715                           	opt stack 0
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           postinc0	equ	0xFEE
 12724                           wreg	equ	0xFE8
 12725                           indf1	equ	0xFE7
 12726                           postinc1	equ	0xFE6
 12727                           postdec1	equ	0xFE5
 12728                           fsr1h	equ	0xFE2
 12729                           fsr1l	equ	0xFE1
 12730                           indf2	equ	0xFDF
 12731                           postinc2	equ	0xFDE
 12732                           postdec2	equ	0xFDD
 12733                           plusw2	equ	0xFDB
 12734                           fsr2h	equ	0xFDA
 12735                           fsr2l	equ	0xFD9
 12736                           status	equ	0xFD8
 12737                           
 12738 ;; *************** function _PortRead *****************
 12739 ;; Defined at:
 12740 ;;		line 57 in file "interrupts.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;		None
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;  ret             1    6[COMRAM] unsigned char 
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      unsigned char 
 12747 ;; Registers used:
 12748 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12749 ;; Tracked objects:
 12750 ;;		On entry : E/0
 12751 ;;		On exit  : F/0
 12752 ;;		Unchanged: 0/0
 12753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12754 ;;      Params:         0       0       0       0       0       0       0
 12755 ;;      Locals:         1       0       0       0       0       0       0
 12756 ;;      Temps:          0       0       0       0       0       0       0
 12757 ;;      Totals:         1       0       0       0       0       0       0
 12758 ;;Total ram usage:        1 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; Hardware stack levels required when called:    2
 12761 ;; This function calls:
 12762 ;;		Nothing
 12763 ;; This function is called by:
 12764 ;;		_ModbusGetRxBufferHeader
 12765 ;;		_ModbusGetRxBuffer
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           	psect	text70
 12770  002DCE                     __ptext70:
 12771                           	opt stack 0
 12772  002DCE                     _PortRead:
 12773                           	opt stack 26
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;incstack = 0
 12777  002DCE  FFFF               	dw	65535
 12778                           
 12779                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 12780  002DD0  9EF2               	bcf	intcon,7,c	;volatile
 12781                           
 12782                           ;interrupts.c: 60: if(UartBufferLen > 0)
 12783  002DD2  0100               	movlb	0	; () banked
 12784  002DD4  51C6               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12785  002DD6  E012               	bz	l63
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;interrupts.c: 61: {
 12789                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 12790  002DD8  0E00               	movlw	low _UartRingBuffer
 12791  002DDA  25C7               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 12792  002DDC  6ED9               	movwf	fsr2l,c
 12793  002DDE  6ADA               	clrf	fsr2h,c
 12794  002DE0  0E02               	movlw	high _UartRingBuffer
 12795  002DE2  22DA               	addwfc	fsr2h,f,c
 12796  002DE4  50DF               	movf	indf2,w,c
 12797  002DE6  6E07               	movwf	PortRead@ret,c
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;interrupts.c: 64: UartBufferLen--;
 12801  002DE8  07C6               	decf	_UartBufferLen& (0+255),f,b	;volatile
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 12805  002DEA  29C7               	incf	_UartBufferTail& (0+255),w,b
 12806  002DEC  E102               	bnz	l6231
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;interrupts.c: 66: UartBufferTail = 0;
 12810  002DEE  6BC7               	clrf	_UartBufferTail& (0+255),b	;volatile
 12811  002DF0  D001               	goto	l6233
 12812  002DF2                     l6231:
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;interrupts.c: 67: else
 12816                           ;interrupts.c: 68: UartBufferTail++;
 12817  002DF2  2BC7               	incf	_UartBufferTail& (0+255),f,b	;volatile
 12818  002DF4                     l6233:
 12819  002DF4  FFFF               	dw	65535	; assembler added errata NOP
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 12823  002DF6  8EF2               	bsf	intcon,7,c	;volatile
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;interrupts.c: 70: return ret;
 12827  002DF8  5007               	movf	PortRead@ret,w,c
 12828  002DFA  D002               	goto	l66
 12829  002DFC                     l63:
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;interrupts.c: 71: }
 12833                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 12834  002DFC  8EF2               	bsf	intcon,7,c	;volatile
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;interrupts.c: 73: return 0;
 12838  002DFE  0E00               	movlw	0
 12839  002E00                     l66:
 12840  002E00  FFFF               	dw	65535	; assembler added errata NOP
 12841                           
 12842                           ; BSR set to: 0
 12843  002E02  0012               	return		;funcret
 12844  002E04  FFFF               	dw	65535	; errata NOP
 12845  002E06                     __end_of_PortRead:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           intcon	equ	0xFF2
 12854                           postinc0	equ	0xFEE
 12855                           wreg	equ	0xFE8
 12856                           indf1	equ	0xFE7
 12857                           postinc1	equ	0xFE6
 12858                           postdec1	equ	0xFE5
 12859                           fsr1h	equ	0xFE2
 12860                           fsr1l	equ	0xFE1
 12861                           indf2	equ	0xFDF
 12862                           postinc2	equ	0xFDE
 12863                           postdec2	equ	0xFDD
 12864                           plusw2	equ	0xFDB
 12865                           fsr2h	equ	0xFDA
 12866                           fsr2l	equ	0xFD9
 12867                           status	equ	0xFD8
 12868                           
 12869 ;; *************** function _PortAvailable *****************
 12870 ;; Defined at:
 12871 ;;		line 52 in file "interrupts.c"
 12872 ;; Parameters:    Size  Location     Type
 12873 ;;		None
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;		None
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      unsigned char 
 12878 ;; Registers used:
 12879 ;;		wreg, status,2
 12880 ;; Tracked objects:
 12881 ;;		On entry : E/0
 12882 ;;		On exit  : F/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12885 ;;      Params:         0       0       0       0       0       0       0
 12886 ;;      Locals:         0       0       0       0       0       0       0
 12887 ;;      Temps:          0       0       0       0       0       0       0
 12888 ;;      Totals:         0       0       0       0       0       0       0
 12889 ;;Total ram usage:        0 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; Hardware stack levels required when called:    2
 12892 ;; This function calls:
 12893 ;;		Nothing
 12894 ;; This function is called by:
 12895 ;;		_ModbusPoll
 12896 ;;		_ModbusGetRxBufferHeader
 12897 ;;		_ModbusGetRxBuffer
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           	psect	text71
 12902  003090                     __ptext71:
 12903                           	opt stack 0
 12904  003090                     _PortAvailable:
 12905                           	opt stack 27
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;incstack = 0
 12909  003090  FFFF               	dw	65535
 12910                           
 12911                           ;interrupts.c: 54: return UartBufferLen;
 12912  003092  0100               	movlb	0	; () banked
 12913  003094  51C6               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12914                           
 12915                           ; BSR set to: 0
 12916  003096  0012               	return		;funcret
 12917  003098  FFFF               	dw	65535	; errata NOP
 12918  00309A                     __end_of_PortAvailable:
 12919                           	opt stack 0
 12920                           tblptru	equ	0xFF8
 12921                           tblptrh	equ	0xFF7
 12922                           tblptrl	equ	0xFF6
 12923                           tablat	equ	0xFF5
 12924                           prodh	equ	0xFF4
 12925                           prodl	equ	0xFF3
 12926                           intcon	equ	0xFF2
 12927                           postinc0	equ	0xFEE
 12928                           wreg	equ	0xFE8
 12929                           indf1	equ	0xFE7
 12930                           postinc1	equ	0xFE6
 12931                           postdec1	equ	0xFE5
 12932                           fsr1h	equ	0xFE2
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           plusw2	equ	0xFDB
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _ModbusBuildException *****************
 12943 ;; Defined at:
 12944 ;;		line 903 in file "ModbusRtu.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  u8exception     1    wreg     unsigned char 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;  u8exception     1    6[COMRAM] unsigned char 
 12949 ;;  u8func          1    7[COMRAM] unsigned char 
 12950 ;; Return value:  Size  Location     Type
 12951 ;;                  1    wreg      void 
 12952 ;; Registers used:
 12953 ;;		wreg, status,2, status,0
 12954 ;; Tracked objects:
 12955 ;;		On entry : 0/0
 12956 ;;		On exit  : F/1
 12957 ;;		Unchanged: 0/0
 12958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12959 ;;      Params:         0       0       0       0       0       0       0
 12960 ;;      Locals:         2       0       0       0       0       0       0
 12961 ;;      Temps:          0       0       0       0       0       0       0
 12962 ;;      Totals:         2       0       0       0       0       0       0
 12963 ;;Total ram usage:        2 bytes
 12964 ;; Hardware stack levels used:    1
 12965 ;; Hardware stack levels required when called:    2
 12966 ;; This function calls:
 12967 ;;		Nothing
 12968 ;; This function is called by:
 12969 ;;		_ModbusPoll
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text72
 12974  002F80                     __ptext72:
 12975                           	opt stack 0
 12976  002F80                     _ModbusBuildException:
 12977                           	opt stack 27
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;incstack = 0
 12981  002F80  FFFF               	dw	65535
 12982                           
 12983                           ;ModbusBuildException@u8exception stored from wreg
 12984  002F82  6E07               	movwf	ModbusBuildException@u8exception,c
 12985                           
 12986                           ;ModbusRtu.c: 905: uint8_t u8func = _au8Buffer[ FUNC ];
 12987  002F84  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 12988                           
 12989                           ;ModbusRtu.c: 907: _au8Buffer[ ID ] = _u8id;
 12990  002F88  C0D5  F100         	movff	__u8id,__au8Buffer
 12991                           
 12992                           ;ModbusRtu.c: 908: _au8Buffer[ FUNC ] = u8func + 0x80;
 12993  002F8C  5008               	movf	ModbusBuildException@u8func,w,c
 12994  002F8E  0F80               	addlw	128
 12995  002F90  0101               	movlb	1	; () banked
 12996  002F92  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 12997                           
 12998                           ; BSR set to: 1
 12999                           ;ModbusRtu.c: 909: _au8Buffer[ 2 ] = u8exception;
 13000  002F94  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 13001                           
 13002                           ; BSR set to: 1
 13003                           ;ModbusRtu.c: 910: _u8BufferSize = EXCEPTION_SIZE;
 13004  002F98  0E03               	movlw	3
 13005  002F9A  6E74               	movwf	__u8BufferSize,c
 13006                           
 13007                           ; BSR set to: 1
 13008  002F9C  0C03               	retlw	3	;funcret
 13009  002F9E  FFFF               	dw	65535	; errata NOP
 13010  002FA0                     __end_of_ModbusBuildException:
 13011                           	opt stack 0
 13012                           tblptru	equ	0xFF8
 13013                           tblptrh	equ	0xFF7
 13014                           tblptrl	equ	0xFF6
 13015                           tablat	equ	0xFF5
 13016                           prodh	equ	0xFF4
 13017                           prodl	equ	0xFF3
 13018                           intcon	equ	0xFF2
 13019                           postinc0	equ	0xFEE
 13020                           wreg	equ	0xFE8
 13021                           indf1	equ	0xFE7
 13022                           postinc1	equ	0xFE6
 13023                           postdec1	equ	0xFE5
 13024                           fsr1h	equ	0xFE2
 13025                           fsr1l	equ	0xFE1
 13026                           indf2	equ	0xFDF
 13027                           postinc2	equ	0xFDE
 13028                           postdec2	equ	0xFDD
 13029                           plusw2	equ	0xFDB
 13030                           fsr2h	equ	0xFDA
 13031                           fsr2l	equ	0xFD9
 13032                           status	equ	0xFD8
 13033                           
 13034 ;; *************** function _InitApp *****************
 13035 ;; Defined at:
 13036 ;;		line 66 in file "user.c"
 13037 ;; Parameters:    Size  Location     Type
 13038 ;;		None
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  i               1    6[COMRAM] unsigned char 
 13041 ;; Return value:  Size  Location     Type
 13042 ;;                  1    wreg      void 
 13043 ;; Registers used:
 13044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13045 ;; Tracked objects:
 13046 ;;		On entry : 0/0
 13047 ;;		On exit  : 0/0
 13048 ;;		Unchanged: 0/0
 13049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13050 ;;      Params:         0       0       0       0       0       0       0
 13051 ;;      Locals:         1       0       0       0       0       0       0
 13052 ;;      Temps:          0       0       0       0       0       0       0
 13053 ;;      Totals:         1       0       0       0       0       0       0
 13054 ;;Total ram usage:        1 bytes
 13055 ;; Hardware stack levels used:    1
 13056 ;; Hardware stack levels required when called:    3
 13057 ;; This function calls:
 13058 ;;		_InitUartBuffer
 13059 ;;		_PortBegin
 13060 ;; This function is called by:
 13061 ;;		_main
 13062 ;; This function uses a non-reentrant model
 13063 ;;
 13064                           
 13065                           	psect	text73
 13066  002720                     __ptext73:
 13067                           	opt stack 0
 13068  002720                     _InitApp:
 13069                           	opt stack 27
 13070                           
 13071                           ; BSR set to: 1
 13072                           ;incstack = 0
 13073  002720  FFFF               	dw	65535
 13074                           
 13075                           ;user.c: 77: INTCONbits.PEIE = 1;
 13076  002722  8CF2               	bsf	intcon,6,c	;volatile
 13077                           
 13078                           ;user.c: 78: (INTCONbits.GIE = 1);
 13079  002724  8EF2               	bsf	intcon,7,c	;volatile
 13080                           
 13081                           ;user.c: 79: RCONbits.IPEN = 1;
 13082  002726  8ED0               	bsf	4048,7,c	;volatile
 13083                           
 13084                           ;user.c: 84: T1CONbits.RD16 = 1;
 13085  002728  8ECD               	bsf	4045,7,c	;volatile
 13086                           
 13087                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 13088  00272A  94CD               	bcf	4045,2,c	;volatile
 13089                           
 13090                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 13091  00272C  92CD               	bcf	4045,1,c	;volatile
 13092                           
 13093                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 13094  00272E  0ECF               	movlw	-49
 13095  002730  16CD               	andwf	4045,f,c	;volatile
 13096                           
 13097                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 13098  002732  809D               	bsf	3997,0,c	;volatile
 13099                           
 13100                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 13101  002734  809F               	bsf	3999,0,c	;volatile
 13102                           
 13103                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 13104  002736  0EF6               	movlw	246
 13105  002738  6ECF               	movwf	4047,c	;volatile
 13106  00273A  0E3C               	movlw	60
 13107  00273C  6ECE               	movwf	4046,c	;volatile
 13108                           
 13109                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 13110  00273E  909E               	bcf	3998,0,c	;volatile
 13111                           
 13112                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 13113  002740  80CD               	bsf	4045,0,c	;volatile
 13114                           
 13115                           ;user.c: 103: T0CONbits.T08BIT = 0;
 13116  002742  9CD5               	bcf	4053,6,c	;volatile
 13117                           
 13118                           ;user.c: 104: T0CONbits.T0CS = 0;
 13119  002744  9AD5               	bcf	4053,5,c	;volatile
 13120                           
 13121                           ;user.c: 106: T0CONbits.PSA = 0;
 13122  002746  96D5               	bcf	4053,3,c	;volatile
 13123                           
 13124                           ;user.c: 117: T0CONbits.T0PS = 7;
 13125  002748  0E07               	movlw	7
 13126  00274A  12D5               	iorwf	4053,f,c	;volatile
 13127                           
 13128                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 13129  00274C  8AF2               	bsf	intcon,5,c	;volatile
 13130                           
 13131                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 13132  00274E  84F1               	bsf	intcon2,2,c	;volatile
 13133                           
 13134                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 13135  002750  0E1B               	movlw	27
 13136  002752  6ED7               	movwf	4055,c	;volatile
 13137  002754  0E28               	movlw	40
 13138  002756  6ED6               	movwf	4054,c	;volatile
 13139                           
 13140                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 13141  002758  94F2               	bcf	intcon,2,c	;volatile
 13142                           
 13143                           ;user.c: 133: InitUartBuffer();
 13144  00275A  EC3B  F018         	call	_InitUartBuffer	;wreg free
 13145                           
 13146                           ;user.c: 135: PortBegin();
 13147  00275E  ECF9  F017         	call	_PortBegin	;wreg free
 13148                           
 13149                           ; BSR set to: 0
 13150                           ;user.c: 136: PIE1bits.RCIE = 1;
 13151  002762  8A9D               	bsf	3997,5,c	;volatile
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;user.c: 138: IPR1bits.RCIP = 0;
 13155  002764  9A9F               	bcf	3999,5,c	;volatile
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 13159  002766  6A07               	clrf	InitApp@i,c
 13160  002768                     l7567:
 13161  002768  FFFF               	dw	65535	; assembler added errata NOP
 13162                           
 13163                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 13164  00276A  5007               	movf	InitApp@i,w,c
 13165  00276C  0D02               	mullw	2
 13166  00276E  0EAA               	movlw	low __MODBUSInputRegs
 13167  002770  24F3               	addwf	prodl,w,c
 13168  002772  6ED9               	movwf	fsr2l,c
 13169  002774  0E01               	movlw	high __MODBUSInputRegs
 13170  002776  20F4               	addwfc	prodh,w,c
 13171  002778  6EDA               	movwf	fsr2h,c
 13172  00277A  6ADE               	clrf	postinc2,c
 13173  00277C  6ADD               	clrf	postdec2,c
 13174  00277E  2A07               	incf	InitApp@i,f,c
 13175  002780  0E0E               	movlw	14
 13176  002782  6407               	cpfsgt	InitApp@i,c
 13177  002784  D7F1               	goto	l7567
 13178                           
 13179                           ;user.c: 149: TRISB = 0;
 13180  002786  6A93               	clrf	3987,c	;volatile
 13181                           
 13182                           ;user.c: 152: LATAbits.LATA0 = 0;
 13183  002788  9089               	bcf	3977,0,c	;volatile
 13184                           
 13185                           ;user.c: 153: LATAbits.LATA1 = 0;
 13186  00278A  9289               	bcf	3977,1,c	;volatile
 13187                           
 13188                           ;user.c: 154: LATAbits.LATA2 = 0;
 13189  00278C  9489               	bcf	3977,2,c	;volatile
 13190                           
 13191                           ;user.c: 155: LATAbits.LATA3 = 0;
 13192  00278E  9689               	bcf	3977,3,c	;volatile
 13193                           
 13194                           ;user.c: 156: TRISAbits.RA0 = 0;
 13195  002790  9092               	bcf	3986,0,c	;volatile
 13196                           
 13197                           ;user.c: 157: TRISAbits.RA1 = 0;
 13198  002792  9292               	bcf	3986,1,c	;volatile
 13199                           
 13200                           ;user.c: 158: TRISAbits.RA2 = 0;
 13201  002794  9492               	bcf	3986,2,c	;volatile
 13202                           
 13203                           ;user.c: 159: TRISAbits.RA3 = 0;
 13204  002796  9692               	bcf	3986,3,c	;volatile
 13205                           
 13206                           ;user.c: 161: TRISCbits.RC3 = 1;
 13207  002798  8694               	bsf	3988,3,c	;volatile
 13208                           
 13209                           ;user.c: 162: TRISCbits.RC1 = 1;
 13210  00279A  8294               	bsf	3988,1,c	;volatile
 13211                           
 13212                           ;user.c: 163: TRISCbits.RC0 = 0;
 13213  00279C  9094               	bcf	3988,0,c	;volatile
 13214                           
 13215                           ;user.c: 165: LATCbits.LATC2 = 0;
 13216  00279E  948B               	bcf	3979,2,c	;volatile
 13217  0027A0  0012               	return		;funcret
 13218  0027A2  FFFF               	dw	65535	; errata NOP
 13219  0027A4                     __end_of_InitApp:
 13220                           	opt stack 0
 13221                           tblptru	equ	0xFF8
 13222                           tblptrh	equ	0xFF7
 13223                           tblptrl	equ	0xFF6
 13224                           tablat	equ	0xFF5
 13225                           prodh	equ	0xFF4
 13226                           prodl	equ	0xFF3
 13227                           intcon	equ	0xFF2
 13228                           intcon2	equ	0xFF1
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           indf1	equ	0xFE7
 13232                           postinc1	equ	0xFE6
 13233                           postdec1	equ	0xFE5
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           plusw2	equ	0xFDB
 13240                           fsr2h	equ	0xFDA
 13241                           fsr2l	equ	0xFD9
 13242                           status	equ	0xFD8
 13243                           
 13244 ;; *************** function _PortBegin *****************
 13245 ;; Defined at:
 13246 ;;		line 48 in file "user.c"
 13247 ;; Parameters:    Size  Location     Type
 13248 ;;		None
 13249 ;; Auto vars:     Size  Location     Type
 13250 ;;		None
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  1    wreg      void 
 13253 ;; Registers used:
 13254 ;;		wreg, status,2
 13255 ;; Tracked objects:
 13256 ;;		On entry : F/0
 13257 ;;		On exit  : F/0
 13258 ;;		Unchanged: F/0
 13259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13260 ;;      Params:         0       0       0       0       0       0       0
 13261 ;;      Locals:         0       0       0       0       0       0       0
 13262 ;;      Temps:          0       0       0       0       0       0       0
 13263 ;;      Totals:         0       0       0       0       0       0       0
 13264 ;;Total ram usage:        0 bytes
 13265 ;; Hardware stack levels used:    1
 13266 ;; Hardware stack levels required when called:    2
 13267 ;; This function calls:
 13268 ;;		Nothing
 13269 ;; This function is called by:
 13270 ;;		_InitApp
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           	psect	text74
 13275  002FF2                     __ptext74:
 13276                           	opt stack 0
 13277  002FF2                     _PortBegin:
 13278                           	opt stack 27
 13279                           
 13280                           ;incstack = 0
 13281  002FF2  FFFF               	dw	65535
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;user.c: 50: TXSTA = 0;
 13285  002FF4  6AAC               	clrf	4012,c	;volatile
 13286                           
 13287                           ;user.c: 51: TXSTAbits.TXEN = 1;
 13288  002FF6  8AAC               	bsf	4012,5,c	;volatile
 13289                           
 13290                           ;user.c: 52: TXSTAbits.BRGH = 1;
 13291  002FF8  84AC               	bsf	4012,2,c	;volatile
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 13295  002FFA  0E40               	movlw	64
 13296  002FFC  6EAF               	movwf	4015,c	;volatile
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;user.c: 55: RCSTA = 0;
 13300  002FFE  6AAB               	clrf	4011,c	;volatile
 13301                           
 13302                           ; BSR set to: 0
 13303                           ;user.c: 56: RCSTAbits.SPEN = 1;
 13304  003000  8EAB               	bsf	4011,7,c	;volatile
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;user.c: 57: RCSTAbits.CREN = 1;
 13308  003002  88AB               	bsf	4011,4,c	;volatile
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;user.c: 59: TRISCbits.RC5 = 0;
 13312  003004  9A94               	bcf	3988,5,c	;volatile
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;user.c: 60: LATCbits.LATC5 = 0;
 13316  003006  9A8B               	bcf	3979,5,c	;volatile
 13317                           
 13318                           ; BSR set to: 0
 13319  003008  0012               	return		;funcret
 13320  00300A  FFFF               	dw	65535	; errata NOP
 13321  00300C                     __end_of_PortBegin:
 13322                           	opt stack 0
 13323                           tblptru	equ	0xFF8
 13324                           tblptrh	equ	0xFF7
 13325                           tblptrl	equ	0xFF6
 13326                           tablat	equ	0xFF5
 13327                           prodh	equ	0xFF4
 13328                           prodl	equ	0xFF3
 13329                           intcon	equ	0xFF2
 13330                           intcon2	equ	0xFF1
 13331                           postinc0	equ	0xFEE
 13332                           wreg	equ	0xFE8
 13333                           indf1	equ	0xFE7
 13334                           postinc1	equ	0xFE6
 13335                           postdec1	equ	0xFE5
 13336                           fsr1h	equ	0xFE2
 13337                           fsr1l	equ	0xFE1
 13338                           indf2	equ	0xFDF
 13339                           postinc2	equ	0xFDE
 13340                           postdec2	equ	0xFDD
 13341                           plusw2	equ	0xFDB
 13342                           fsr2h	equ	0xFDA
 13343                           fsr2l	equ	0xFD9
 13344                           status	equ	0xFD8
 13345                           
 13346 ;; *************** function _InitUartBuffer *****************
 13347 ;; Defined at:
 13348 ;;		line 44 in file "interrupts.c"
 13349 ;; Parameters:    Size  Location     Type
 13350 ;;		None
 13351 ;; Auto vars:     Size  Location     Type
 13352 ;;		None
 13353 ;; Return value:  Size  Location     Type
 13354 ;;                  1    wreg      void 
 13355 ;; Registers used:
 13356 ;;		None
 13357 ;; Tracked objects:
 13358 ;;		On entry : 0/0
 13359 ;;		On exit  : F/0
 13360 ;;		Unchanged: 0/0
 13361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13362 ;;      Params:         0       0       0       0       0       0       0
 13363 ;;      Locals:         0       0       0       0       0       0       0
 13364 ;;      Temps:          0       0       0       0       0       0       0
 13365 ;;      Totals:         0       0       0       0       0       0       0
 13366 ;;Total ram usage:        0 bytes
 13367 ;; Hardware stack levels used:    1
 13368 ;; Hardware stack levels required when called:    2
 13369 ;; This function calls:
 13370 ;;		Nothing
 13371 ;; This function is called by:
 13372 ;;		_PortClearReadBuffer
 13373 ;;		_InitApp
 13374 ;; This function uses a non-reentrant model
 13375 ;;
 13376                           
 13377                           	psect	text75
 13378  003076                     __ptext75:
 13379                           	opt stack 0
 13380  003076                     _InitUartBuffer:
 13381                           	opt stack 26
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;incstack = 0
 13385  003076  FFFF               	dw	65535
 13386                           
 13387                           ;interrupts.c: 46: UartBufferHead = 0;
 13388  003078  6A71               	clrf	_UartBufferHead,c	;volatile
 13389                           
 13390                           ;interrupts.c: 47: UartBufferTail = 0;
 13391  00307A  0100               	movlb	0	; () banked
 13392  00307C  6BC7               	clrf	_UartBufferTail& (0+255),b	;volatile
 13393                           
 13394                           ;interrupts.c: 48: UartBufferLen = 0;
 13395  00307E  6BC6               	clrf	_UartBufferLen& (0+255),b	;volatile
 13396                           
 13397                           ; BSR set to: 0
 13398  003080  0012               	return		;funcret
 13399  003082  FFFF               	dw	65535	; errata NOP
 13400  003084                     __end_of_InitUartBuffer:
 13401                           	opt stack 0
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           intcon2	equ	0xFF1
 13410                           postinc0	equ	0xFEE
 13411                           wreg	equ	0xFE8
 13412                           indf1	equ	0xFE7
 13413                           postinc1	equ	0xFE6
 13414                           postdec1	equ	0xFE5
 13415                           fsr1h	equ	0xFE2
 13416                           fsr1l	equ	0xFE1
 13417                           indf2	equ	0xFDF
 13418                           postinc2	equ	0xFDE
 13419                           postdec2	equ	0xFDD
 13420                           plusw2	equ	0xFDB
 13421                           fsr2h	equ	0xFDA
 13422                           fsr2l	equ	0xFD9
 13423                           status	equ	0xFD8
 13424                           
 13425 ;; *************** function _ConfigureOscillator *****************
 13426 ;; Defined at:
 13427 ;;		line 86 in file "system.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;		None
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;		None
 13432 ;; Return value:  Size  Location     Type
 13433 ;;                  1    wreg      void 
 13434 ;; Registers used:
 13435 ;;		None
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13441 ;;      Params:         0       0       0       0       0       0       0
 13442 ;;      Locals:         0       0       0       0       0       0       0
 13443 ;;      Temps:          0       0       0       0       0       0       0
 13444 ;;      Totals:         0       0       0       0       0       0       0
 13445 ;;Total ram usage:        0 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    2
 13448 ;; This function calls:
 13449 ;;		Nothing
 13450 ;; This function is called by:
 13451 ;;		_main
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           	psect	text76
 13456  0030D2                     __ptext76:
 13457                           	opt stack 0
 13458  0030D2                     _ConfigureOscillator:
 13459                           	opt stack 28
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;incstack = 0
 13463  0030D2  FFFF               	dw	65535
 13464  0030D4  0012               	return		;funcret
 13465  0030D6  FFFF               	dw	65535	; errata NOP
 13466  0030D8                     __end_of_ConfigureOscillator:
 13467                           	opt stack 0
 13468                           tblptru	equ	0xFF8
 13469                           tblptrh	equ	0xFF7
 13470                           tblptrl	equ	0xFF6
 13471                           tablat	equ	0xFF5
 13472                           prodh	equ	0xFF4
 13473                           prodl	equ	0xFF3
 13474                           intcon	equ	0xFF2
 13475                           intcon2	equ	0xFF1
 13476                           postinc0	equ	0xFEE
 13477                           wreg	equ	0xFE8
 13478                           indf1	equ	0xFE7
 13479                           postinc1	equ	0xFE6
 13480                           postdec1	equ	0xFE5
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           plusw2	equ	0xFDB
 13487                           fsr2h	equ	0xFDA
 13488                           fsr2l	equ	0xFD9
 13489                           status	equ	0xFD8
 13490                           
 13491 ;; *************** function _AddSecond *****************
 13492 ;; Defined at:
 13493 ;;		line 180 in file "user.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;		None
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;		None
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      void 
 13500 ;; Registers used:
 13501 ;;		wreg, status,2, status,0
 13502 ;; Tracked objects:
 13503 ;;		On entry : F/0
 13504 ;;		On exit  : F/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13507 ;;      Params:         0       0       0       0       0       0       0
 13508 ;;      Locals:         0       0       0       0       0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0
 13510 ;;      Totals:         0       0       0       0       0       0       0
 13511 ;;Total ram usage:        0 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; Hardware stack levels required when called:    2
 13514 ;; This function calls:
 13515 ;;		Nothing
 13516 ;; This function is called by:
 13517 ;;		_main
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text77
 13522  00304A                     __ptext77:
 13523                           	opt stack 0
 13524  00304A                     _AddSecond:
 13525                           	opt stack 28
 13526                           
 13527                           ;incstack = 0
 13528  00304A  FFFF               	dw	65535
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;user.c: 182: currentTime++;
 13532  00304C  2BD9               	incf	_currentTime& (0+255),f,b
 13533  00304E  0E00               	movlw	0
 13534  003050  23DA               	addwfc	(_currentTime+1)& (0+255),f,b
 13535  003052  23DB               	addwfc	(_currentTime+2)& (0+255),f,b
 13536  003054  23DC               	addwfc	(_currentTime+3)& (0+255),f,b
 13537                           
 13538                           ; BSR set to: 0
 13539  003056  0C00               	retlw	0	;funcret
 13540  003058  FFFF               	dw	65535	; errata NOP
 13541  00305A                     __end_of_AddSecond:
 13542                           	opt stack 0
 13543                           tblptru	equ	0xFF8
 13544                           tblptrh	equ	0xFF7
 13545                           tblptrl	equ	0xFF6
 13546                           tablat	equ	0xFF5
 13547                           prodh	equ	0xFF4
 13548                           prodl	equ	0xFF3
 13549                           intcon	equ	0xFF2
 13550                           intcon2	equ	0xFF1
 13551                           postinc0	equ	0xFEE
 13552                           wreg	equ	0xFE8
 13553                           indf1	equ	0xFE7
 13554                           postinc1	equ	0xFE6
 13555                           postdec1	equ	0xFE5
 13556                           fsr1h	equ	0xFE2
 13557                           fsr1l	equ	0xFE1
 13558                           indf2	equ	0xFDF
 13559                           postinc2	equ	0xFDE
 13560                           postdec2	equ	0xFDD
 13561                           plusw2	equ	0xFDB
 13562                           fsr2h	equ	0xFDA
 13563                           fsr2l	equ	0xFD9
 13564                           status	equ	0xFD8
 13565                           
 13566 ;; *************** function _low_isr *****************
 13567 ;; Defined at:
 13568 ;;		line 183 in file "interrupts.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;		None
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;  c               1    5[COMRAM] unsigned char 
 13573 ;; Return value:  Size  Location     Type
 13574 ;;                  1    wreg      void 
 13575 ;; Registers used:
 13576 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/0
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13582 ;;      Params:         0       0       0       0       0       0       0
 13583 ;;      Locals:         1       0       0       0       0       0       0
 13584 ;;      Temps:          5       0       0       0       0       0       0
 13585 ;;      Totals:         6       0       0       0       0       0       0
 13586 ;;Total ram usage:        6 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    1
 13589 ;; This function calls:
 13590 ;;		Nothing
 13591 ;; This function is called by:
 13592 ;;		Interrupt level 1
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	intcodelo
 13597  000018                     __pintcodelo:
 13598                           	opt stack 0
 13599  000018                     _low_isr:
 13600                           	opt stack 0
 13601  000018  FFFF               	dw	65535	; assembler added errata NOP
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;incstack = 0
 13605  00001A  8079               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13606  00001C  FFFF               	dw	65535	; errata NOP
 13607  00001E  CFD8 F001          	movff	status,??_low_isr
 13608  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 13609  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 13610  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 13611  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 13612                           
 13613                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 13614  000032  BA9E               	btfsc	3998,5,c	;volatile
 13615  000034  AA9D               	btfss	3997,5,c	;volatile
 13616  000036  D016               	goto	i1l97
 13617  000038                     i1l98:
 13618  000038  FFFF               	dw	65535	; assembler added errata NOP
 13619  00003A  AA9E               	btfss	3998,5,c	;volatile
 13620  00003C  D7FD               	goto	i1l98
 13621                           
 13622                           ;interrupts.c: 211: uint8_t c = RCREG;
 13623  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 13624                           
 13625                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 13626  000042  0E00               	movlw	low _UartRingBuffer
 13627  000044  2471               	addwf	_UartBufferHead,w,c	;volatile
 13628  000046  6ED9               	movwf	fsr2l,c
 13629  000048  6ADA               	clrf	fsr2h,c
 13630  00004A  0E02               	movlw	high _UartRingBuffer
 13631  00004C  22DA               	addwfc	fsr2h,f,c
 13632  00004E  C006  FFDF         	movff	low_isr@c,indf2
 13633                           
 13634                           ;interrupts.c: 215: UartBufferLen++;
 13635  000052  0100               	movlb	0	; () banked
 13636  000054  2BC6               	incf	_UartBufferLen& (0+255),f,b	;volatile
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 13640  000056  2871               	incf	_UartBufferHead,w,c
 13641  000058  E102               	bnz	i1l5707
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;interrupts.c: 217: UartBufferHead = 0;
 13645  00005A  6A71               	clrf	_UartBufferHead,c	;volatile
 13646  00005C  D001               	goto	i1l5709
 13647  00005E                     i1l5707:
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;interrupts.c: 218: else
 13651                           ;interrupts.c: 219: UartBufferHead++;
 13652  00005E  2A71               	incf	_UartBufferHead,f,c	;volatile
 13653  000060                     i1l5709:
 13654  000060  FFFF               	dw	65535	; assembler added errata NOP
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 13658  000062  9A9E               	bcf	3998,5,c	;volatile
 13659  000064                     i1l97:
 13660  000064  FFFF               	dw	65535	; assembler added errata NOP
 13661  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 13662  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 13663  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 13664  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 13665  000076  C001  FFD8         	movff	??_low_isr,status
 13666  00007A  9079               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13667  00007C  0010               	retfie	
 13668  00007E  FFFF               	dw	65535	; errata NOP
 13669  000080                     __end_of_low_isr:
 13670                           	opt stack 0
 13671                           tblptru	equ	0xFF8
 13672                           tblptrh	equ	0xFF7
 13673                           tblptrl	equ	0xFF6
 13674                           tablat	equ	0xFF5
 13675                           prodh	equ	0xFF4
 13676                           prodl	equ	0xFF3
 13677                           intcon	equ	0xFF2
 13678                           intcon2	equ	0xFF1
 13679                           postinc0	equ	0xFEE
 13680                           wreg	equ	0xFE8
 13681                           indf1	equ	0xFE7
 13682                           postinc1	equ	0xFE6
 13683                           postdec1	equ	0xFE5
 13684                           fsr1h	equ	0xFE2
 13685                           fsr1l	equ	0xFE1
 13686                           bsr	equ	0xFE0
 13687                           indf2	equ	0xFDF
 13688                           postinc2	equ	0xFDE
 13689                           postdec2	equ	0xFDD
 13690                           plusw2	equ	0xFDB
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function _high_isr *****************
 13696 ;; Defined at:
 13697 ;;		line 122 in file "interrupts.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;		None
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;		None
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  1    wreg      void 
 13704 ;; Registers used:
 13705 ;;		wreg, status,2, status,0
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13711 ;;      Params:         0       0       0       0       0       0       0
 13712 ;;      Locals:         0       0       0       0       0       0       0
 13713 ;;      Temps:          0       0       0       0       0       0       0
 13714 ;;      Totals:         0       0       0       0       0       0       0
 13715 ;;Total ram usage:        0 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; This function calls:
 13718 ;;		Nothing
 13719 ;; This function is called by:
 13720 ;;		Interrupt level 2
 13721 ;; This function uses a non-reentrant model
 13722 ;;
 13723                           
 13724                           	psect	intcode
 13725  000008                     __pintcode:
 13726                           	opt stack 0
 13727  000008                     _high_isr:
 13728                           	opt stack 0
 13729  000008  FFFF               	dw	65535	; assembler added errata NOP
 13730                           
 13731                           ;incstack = 0
 13732  00000A  8279               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13733  00000C  FFFF               	dw	65535	; errata NOP
 13734  00000E  EF74  F014         	goto	int_func
 13735                           tblptru	equ	0xFF8
 13736                           tblptrh	equ	0xFF7
 13737                           tblptrl	equ	0xFF6
 13738                           tablat	equ	0xFF5
 13739                           prodh	equ	0xFF4
 13740                           prodl	equ	0xFF3
 13741                           intcon	equ	0xFF2
 13742                           intcon2	equ	0xFF1
 13743                           postinc0	equ	0xFEE
 13744                           wreg	equ	0xFE8
 13745                           indf1	equ	0xFE7
 13746                           postinc1	equ	0xFE6
 13747                           postdec1	equ	0xFE5
 13748                           fsr1h	equ	0xFE2
 13749                           fsr1l	equ	0xFE1
 13750                           bsr	equ	0xFE0
 13751                           indf2	equ	0xFDF
 13752                           postinc2	equ	0xFDE
 13753                           postdec2	equ	0xFDD
 13754                           plusw2	equ	0xFDB
 13755                           fsr2h	equ	0xFDA
 13756                           fsr2l	equ	0xFD9
 13757                           status	equ	0xFD8
 13758                           
 13759                           	psect	intcode_body
 13760  0028E8                     __pintcode_body:
 13761                           	opt stack 23
 13762  0028E8                     int_func:
 13763                           	opt stack 23
 13764  0028E8  FFFF               	dw	65535	; errata NOP
 13765                           
 13766                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 13767  0028EA  B09E               	btfsc	3998,0,c	;volatile
 13768  0028EC  A09D               	btfss	3997,0,c	;volatile
 13769  0028EE  D00C               	goto	i2l84
 13770                           
 13771                           ;interrupts.c: 144: {
 13772                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 13773  0028F0  909E               	bcf	3998,0,c	;volatile
 13774                           
 13775                           ;interrupts.c: 146: millisecondsFromStart++;
 13776  0028F2  0100               	movlb	0	; () banked
 13777  0028F4  2BB2               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 13778  0028F6  0E00               	movlw	0
 13779  0028F8  23B3               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 13780  0028FA  23B4               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 13781  0028FC  23B5               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 13782                           
 13783                           ; BSR set to: 0
 13784                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 13785  0028FE  0EF6               	movlw	246
 13786  002900  6ECF               	movwf	4047,c	;volatile
 13787                           
 13788                           ; BSR set to: 0
 13789  002902  0E3C               	movlw	60
 13790  002904  6ECE               	movwf	4046,c	;volatile
 13791  002906  D01C               	goto	i2l85
 13792  002908                     i2l84:
 13793  002908  FFFF               	dw	65535	; assembler added errata NOP
 13794                           
 13795                           ;interrupts.c: 149: }
 13796                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 13797  00290A  A4F2               	btfss	intcon,2,c	;volatile
 13798  00290C  D019               	goto	i2l85
 13799                           
 13800                           ;interrupts.c: 152: {
 13801                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 13802  00290E  94F2               	bcf	intcon,2,c	;volatile
 13803                           
 13804                           ;interrupts.c: 154: _6sCounter++;
 13805  002910  0100               	movlb	0	; () banked
 13806  002912  2BC8               	incf	__6sCounter& (0+255),f,b	;volatile
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;interrupts.c: 155: if(_6sCounter == 10)
 13810  002914  0E0A               	movlw	10
 13811  002916  19C8               	xorwf	__6sCounter& (0+255),w,b	;volatile
 13812  002918  E10F               	bnz	i2l5687
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;interrupts.c: 156: {
 13816                           ;interrupts.c: 157: _6sCounter = 0;
 13817  00291A  6BC8               	clrf	__6sCounter& (0+255),b	;volatile
 13818                           
 13819                           ; BSR set to: 0
 13820                           ;interrupts.c: 158: globalMinutes++;
 13821  00291C  2A77               	incf	_globalMinutes,f,c	;volatile
 13822                           
 13823                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 13824  00291E  4BC4               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 13825  002920  2BC5               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 13826                           
 13827                           ; BSR set to: 0
 13828                           ;interrupts.c: 160: if(globalMinutes == 60)
 13829  002922  0E3C               	movlw	60
 13830  002924  1877               	xorwf	_globalMinutes,w,c	;volatile
 13831  002926  E108               	bnz	i2l5687
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;interrupts.c: 161: {
 13835                           ;interrupts.c: 162: globalMinutes = 0;
 13836  002928  6A77               	clrf	_globalMinutes,c	;volatile
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;interrupts.c: 163: globalHours++;
 13840  00292A  2A78               	incf	_globalHours,f,c	;volatile
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;interrupts.c: 164: if(globalHours == 24)
 13844  00292C  0E18               	movlw	24
 13845  00292E  1878               	xorwf	_globalHours,w,c	;volatile
 13846  002930  E103               	bnz	i2l5687
 13847                           
 13848                           ; BSR set to: 0
 13849                           ;interrupts.c: 165: {
 13850                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 13851  002932  6BC4               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 13852  002934  6BC5               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 13853                           
 13854                           ;interrupts.c: 167: globalHours = 0;
 13855  002936  6A78               	clrf	_globalHours,c	;volatile
 13856  002938                     i2l5687:
 13857                           
 13858                           ; BSR set to: 0
 13859                           ;interrupts.c: 168: }
 13860                           ;interrupts.c: 169: }
 13861                           ;interrupts.c: 170: }
 13862                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 13863  002938  0E1B               	movlw	27
 13864  00293A  6ED7               	movwf	4055,c	;volatile
 13865  00293C  0E28               	movlw	40
 13866  00293E  6ED6               	movwf	4054,c	;volatile
 13867  002940                     i2l85:
 13868  002940  FFFF               	dw	65535	; assembler added errata NOP
 13869  002942  9279               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13870  002944  0011               	retfie		f
 13871  002946  FFFF               	dw	65535	; errata NOP
 13872  002948                     __end_of_high_isr:
 13873                           	opt stack 0
 13874                           tblptru	equ	0xFF8
 13875                           tblptrh	equ	0xFF7
 13876                           tblptrl	equ	0xFF6
 13877                           tablat	equ	0xFF5
 13878                           prodh	equ	0xFF4
 13879                           prodl	equ	0xFF3
 13880                           intcon	equ	0xFF2
 13881                           intcon2	equ	0xFF1
 13882                           postinc0	equ	0xFEE
 13883                           wreg	equ	0xFE8
 13884                           indf1	equ	0xFE7
 13885                           postinc1	equ	0xFE6
 13886                           postdec1	equ	0xFE5
 13887                           fsr1h	equ	0xFE2
 13888                           fsr1l	equ	0xFE1
 13889                           bsr	equ	0xFE0
 13890                           indf2	equ	0xFDF
 13891                           postinc2	equ	0xFDE
 13892                           postdec2	equ	0xFDD
 13893                           plusw2	equ	0xFDB
 13894                           fsr2h	equ	0xFDA
 13895                           fsr2l	equ	0xFD9
 13896                           status	equ	0xFD8
 13897                           tblptru	equ	0xFF8
 13898                           tblptrh	equ	0xFF7
 13899                           tblptrl	equ	0xFF6
 13900                           tablat	equ	0xFF5
 13901                           prodh	equ	0xFF4
 13902                           prodl	equ	0xFF3
 13903                           intcon	equ	0xFF2
 13904                           intcon2	equ	0xFF1
 13905                           postinc0	equ	0xFEE
 13906                           wreg	equ	0xFE8
 13907                           indf1	equ	0xFE7
 13908                           postinc1	equ	0xFE6
 13909                           postdec1	equ	0xFE5
 13910                           fsr1h	equ	0xFE2
 13911                           fsr1l	equ	0xFE1
 13912                           bsr	equ	0xFE0
 13913                           indf2	equ	0xFDF
 13914                           postinc2	equ	0xFDE
 13915                           postdec2	equ	0xFDD
 13916                           plusw2	equ	0xFDB
 13917                           fsr2h	equ	0xFDA
 13918                           fsr2l	equ	0xFD9
 13919                           status	equ	0xFD8
 13920                           
 13921                           	psect	rparam
 13922  0000                     tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           intcon2	equ	0xFF1
 13930                           postinc0	equ	0xFEE
 13931                           wreg	equ	0xFE8
 13932                           indf1	equ	0xFE7
 13933                           postinc1	equ	0xFE6
 13934                           postdec1	equ	0xFE5
 13935                           fsr1h	equ	0xFE2
 13936                           fsr1l	equ	0xFE1
 13937                           bsr	equ	0xFE0
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           plusw2	equ	0xFDB
 13942                           fsr2h	equ	0xFDA
 13943                           fsr2l	equ	0xFD9
 13944                           status	equ	0xFD8
 13945                           
 13946                           	psect	temp
 13947  000079                     btemp:
 13948                           	opt stack 0
 13949  000079                     	ds	1
 13950  0000                     int$flags	set	btemp
 13951                           tblptru	equ	0xFF8
 13952                           tblptrh	equ	0xFF7
 13953                           tblptrl	equ	0xFF6
 13954                           tablat	equ	0xFF5
 13955                           prodh	equ	0xFF4
 13956                           prodl	equ	0xFF3
 13957                           intcon	equ	0xFF2
 13958                           intcon2	equ	0xFF1
 13959                           postinc0	equ	0xFEE
 13960                           wreg	equ	0xFE8
 13961                           indf1	equ	0xFE7
 13962                           postinc1	equ	0xFE6
 13963                           postdec1	equ	0xFE5
 13964                           fsr1h	equ	0xFE2
 13965                           fsr1l	equ	0xFE1
 13966                           bsr	equ	0xFE0
 13967                           indf2	equ	0xFDF
 13968                           postinc2	equ	0xFDE
 13969                           postdec2	equ	0xFDD
 13970                           plusw2	equ	0xFDB
 13971                           fsr2h	equ	0xFDA
 13972                           fsr2l	equ	0xFD9
 13973                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    15
    Data        1
    BSS         576
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    103     120
    BANK0           128      8     112
    BANK1           256     22     222
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> ModbusProcess_FC100@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(1) Largest target is 1
		 -> io_poll@lastCommand(COMRAM[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    io_poll@lastFunction	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandId(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(BANK0[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandData(BANK0[1]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(2) Largest target is 4
		 -> main@curMs(BANK1[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(2) Largest target is 2
		 -> main@totalMinutes(BANK1[2]), ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(2) Largest target is 1
		 -> main@minute(BANK1[1]), 

    getHourMin@hour	PTR unsigned char  size(2) Largest target is 1
		 -> main@hour(BANK1[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_ModbusPoll
    _ProcessUserCommands->_CommandSetLed
    _CommandSetStatusLed->_PlaySound
    _CommandSetLed->_PlaySound
    _InitFromEeprom->_ShowFailure
    _ShowFailure->_LightLed
    _ShowFailure->_LightStatusLed
    _Modbus->_ModbusInit
    _SwitchOffAllDiaryLeds->_LightLed
    _ResetEventFromCommand->_LightLed
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   66520
                                              0 BANK0      8     8      0
                                              0 BANK1     22    22      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
              _ResetEventFromCommand
                  _SoundPlayNextStep
                        _StopPlaying
              _SwitchOffAllDiaryLeds
                         _getHourMin
                    _getTotalMinutes
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             11    11      0   17960
                                             40 COMRAM    10    10      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  1     1      0    9314
                      _CommandSetLed
                _CommandSetStatusLed
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  4     4      0    2957
                                             30 COMRAM     4     4      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _CommandSetLed                                       10    10      0    4891
                                             30 COMRAM    10    10      0
                            _GetTime
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
  _ModbusGetUserCommandAdditional2Hi
  _ModbusGetUserCommandAdditional2Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Lo                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     373
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       4     4      0    5459
                                             15 COMRAM     4     4      0
                      _LoadNextEvent
                             _Modbus
                        _ShowFailure
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ShowFailure                                          1     1      0    4179
                                             14 COMRAM     1     1      0
                           _LightLed
                     _LightStatusLed
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1234
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           4     0      4     173
                                              6 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SwitchOffAllDiaryLeds                                1     1      0    3013
                                             14 COMRAM     1     1      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ResetEventFromCommand                                3     3      0    2982
                                             14 COMRAM     3     3      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2982
                                             14 COMRAM     5     5      0
            _GetCurrentEventDiodeNum
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    6     4      2     155
                                              7 COMRAM     6     4      2
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4444
                                             30 COMRAM     6     6      0
            _GetCurrentEventDiodeNum
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     834
                                             22 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    8     8      0     275
                                             14 COMRAM     8     8      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LoadNextEvent                                        5     5      0     438
                                              8 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _getTotalMinutes                                      2     0      2     162
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LightLed                                             8     6      2    2914
                                              6 COMRAM     8     6      2
            _GetCurrentEventDiodeNum (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentEventDiodeNum                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   25880
                                             91 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0    1187
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1041
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0    1022
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3433
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    2351
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1378
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1060
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1360
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1331
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0    6476
                                             68 COMRAM    23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          20    14      6    1081
                                             10 COMRAM    20    14      6
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     632
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1480
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     763
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     377
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _ShowFailure
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _LightStatusLed
     _SwitchOffAllLeds
   _LightStatusLed
   _LoadNextEvent
     _getTotalMinutes
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___lbdiv
         ___lbmod
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusSetExceptionStatusBit
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetCurrentEventDiodeNum
     _GetTime
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _GetCurrentEventDiodeNum
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _ResetEventFromCommand
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _SwitchOffAllDiaryLeds
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
   _getHourMin
   _getTotalMinutes
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _ShowFailure
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _LightStatusLed
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetLed
         _GetTime
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandAdditional2Hi
         _ModbusGetUserCommandAdditional2Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     67      78       1       95.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2C6      15        0.0%
DATA                 0      0     2C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jun 04 19:03:47 2016

                                             LoadNextEvent@totalMinutes 000B  
                                                         _years_to_days 1C52  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$913 0012  
                                           __end_of_CommandSetStatusLed 269C  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l63 2DFC  
                                                                    l66 2E00  
                                                                    l74 2D2A  
                                                                    l78 2D4A  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l112 2F44  
                                                                   l113 2F5A  
                                                   ModbusPoll@inputRegs 005F  
                                                                   l109 2F36  
                                                                   l401 1FEA  
                                                                   l260 0C56  
                                                                   l244 2BCC  
                                                                   l500 271A  
                                                                   l421 1A30  
                                                                   l405 2B7A  
                                                                   l413 2CD6  
                                                                   l246 2BD6  
                                                                   l318 2234  
                                                                   l247 2BE0  
                                                                   l440 243E  
                                                                   l248 2BEA  
                                                                   l504 2610  
                                                                   l249 2C06  
                                                                   l435 19C8  
                                                                   l291 1E44  
                                                                   l268 0AD2  
                                                                   l391 2168  
                                                                   l287 2EBE  
                                                                   l472 191A  
                                                                   l482 2696  
                                                                   l490 26A2  
                                                                   l395 1FF6  
                                                                   l388 217C  
                                                                   l821 2C92  
                                                                   l813 2DC8  
                                                                   l477 18AA  
                                                                   l807 2FD2  
                                                                   l488 26A0  
                                                                   l841 0F6A  
                                                                   l770 2AE2  
                                                                   l850 1160  
                                                                   l836 0F32  
                                                                   l925 1C2C  
                                                                   l837 1168  
                                                                   l774 1572  
                                                                   l944 2344  
                                                                   l962 16CA  
                                                                   l980 1E5A  
                                                                   l894 17D8  
                                                                   l982 1E5E  
                                                                   l978 1E56  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2F14  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0062  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 2888  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 0026  
                                      ModbusValidateRequest@isSupported 0022  
                                            CommandSetStatusLed@soundId 0020  
                                                         _LoadNextEvent 1920  
                                                         _globalMinutes 0077  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1402 2BBA  
                                                                  l1418 2A92  
                                                                  l1438 0690  
                                                                  l1392 2A44  
                                                                  l6001 0BA4  
                                                                  l6007 0C1A  
                                                                  l6023 1D60  
                                                                  l6201 2486  
                                                                  l6009 0C36  
                                                                  l6017 0C3E  
                                                                  l6033 1DCA  
                                                                  l6107 2AC4  
                                                                  l6035 1DE8  
                                                                  l6027 1D86  
                                                                  l6141 27EC  
                                                                  l6205 24B0  
                                                                  l6053 1F58  
                                                                  l6029 1DA4  
                                                                  l6231 2DF2  
                                                                  l6135 27E2  
                                                                  l6127 27C4  
                                                                  l6119 27B0  
                                                                  l7023 2090  
                                                                  l6055 1F8A  
                                                                  l6039 1E16  
                                                                  l6233 2DF4  
                                                                  l6161 2CF8  
                                                                  l7017 2038  
                                                                  l6065 1FAE  
                                                                  l6049 1F46  
                                                                  l6155 2CEA  
                                                                  l6171 2D12  
                                                                  l7027 20B4  
                                                                  l7221 1F06  
                                                                  l7141 1646  
                                                                  l7133 161E  
                                                                  l7117 15C2  
                                                                  l7109 158E  
                                                                  l8101 12A2  
                                                                  l8013 2212  
                                                                  l6167 2D0A  
                                                                  l6159 2CF2  
                                                                  l7223 1F18  
                                                                  l7127 1604  
                                                                  l6263 2EF2  
                                                                  l8007 2208  
                                                                  l6351 186C  
                                                                  l6441 069C  
                                                                  l7153 1682  
                                                                  l7145 165A  
                                                                  l7137 1632  
                                                                  l7129 160A  
                                                                  l8121 12DC  
                                                                  l8113 12C8  
                                                                  l8041 11EC  
                                                                  l6601 2D8C  
                                                                  l6187 2E90  
                                                                  l6179 2E78  
                                                                  l6451 0954  
                                                                  l6435 28DC  
                                                                  l7163 16B6  
                                                                  l8107 12B4  
                                                                  l8035 11D0  
                                                                  l6371 18FA  
                                                                  l6429 28B6  
                                                                  l7149 166E  
                                                                  l6701 0F96  
                                                                  l8213 23FA  
                                                                  l8205 23CE  
                                                                  l8109 12BC  
                                                                  l6631 2DA6  
                                                                  l5831 2A90  
                                                                  l7095 237A  
                                                                  l7159 1696  
                                                                  l8143 1322  
                                                                  l8135 1308  
                                                                  l8127 12EE  
                                                                  l8119 12D6  
                                                                  l8071 1246  
                                                                  l8063 122C  
                                                                  l8055 1212  
                                                                  l8047 11FA  
                                                                  l6359 1884  
                                                                  l6383 263E  
                                                                  l8303 0D8E  
                                                                  l6625 2D98  
                                                                  l7097 237C  
                                                                  l6705 0FBA  
                                                                  l6465 2BF4  
                                                                  l8145 132A  
                                                                  l8137 1310  
                                                                  l8129 12F6  
                                                                  l8073 124E  
                                                                  l8065 1234  
                                                                  l8057 121A  
                                                                  l8049 1200  
                                                                  l6393 2662  
                                                                  l8321 0E2C  
                                                                  l8305 0D92  
                                                                  l5851 2A18  
                                                                  l7195 1E86  
                                                                  l6803 1104  
                                                                  l7611 143E  
                                                                  l8171 1376  
                                                                  l8163 135C  
                                                                  l8155 1344  
                                                                  l8091 1280  
                                                                  l8083 1268  
                                                                  l7283 2EAC  
                                                                  l8315 0DFE  
                                                                  l5861 2A3A  
                                                                  l5853 2A1E  
                                                                  l7197 1E92  
                                                                  l6725 0FE2  
                                                                  l6709 0FC0  
                                                                  l8181 1398  
                                                                  l8173 137E  
                                                                  l8165 1364  
                                                                  l8157 134A  
                                                                  l8149 1336  
                                                                  l8093 1288  
                                                                  l8085 126E  
                                                                  l8077 125A  
                                                                  l6581 26DA  
                                                                  l8237 25E4  
                                                                  l6663 2C90  
                                                                  l6647 2C5C  
                                                                  l6655 2C7E  
                                                                  l5871 2B96  
                                                                  l6735 1000  
                                                                  l6727 0FEE  
                                                                  l6719 0FD8  
                                                                  l6815 1118  
                                                                  l7607 1438  
                                                                  l5919 216E  
                                                                  l7471 2B46  
                                                                  l6583 26F8  
                                                                  l8247 25F6  
                                                                  l8343 0EAA  
                                                                  l8271 0CB4  
                                                                  l6841 1730  
                                                                  l5873 2B9C  
                                                                  l5849 2A0E  
                                                                  l6921 2572  
                                                                  l7705 152E  
                                                                  l7633 1470  
                                                                  l6593 2D6C  
                                                                  l6577 26C8  
                                                                  l8281 0CFE  
                                                                  l6747 1030  
                                                                  l6683 0F58  
                                                                  l7651 14AC  
                                                                  l7643 148A  
                                                                  l7619 144E  
                                                                  l5891 20FA  
                                                                  l8179 1390  
                                                                  l8099 129A  
                                                                  l8187 13A4  
                                                                  l6579 26D4  
                                                                  l6587 26FE  
                                                                  l8347 0EB6  
                                                                  l5957 2D42  
                                                                  l5877 2BB0  
                                                                  l5869 2B8C  
                                                                  l6693 0F70  
                                                                  l7637 1474  
                                                                  l7581 13DE  
                                                                  l8189 13BA  
                                                                  l7493 2CAE  
                                                                  l6597 2D7E  
                                                                  l8349 0EC6  
                                                                  l7567 2768  
                                                                  l6919 2540  
                                                                  l6759 1056  
                                                                  l6687 0F60  
                                                                  l6679 0F36  
                                                                  l7671 14F0  
                                                                  l7663 14D8  
                                                                  l7655 14BE  
                                                                  l7647 149E  
                                                                  l5991 0AA8  
                                                                  l5983 0998  
                                                                  l7911 199A  
                                                                  l7903 196E  
                                                                  l8287 0D22  
                                                                  l6873 17F6  
                                                                  l6857 179C  
                                                                  l6849 1740  
                                                                  l6697 0F92  
                                                                  l6689 0F66  
                                                                  l7585 13E4  
                                                                  l5993 0B00  
                                                                  l5985 0A2E  
                                                                  l5977 097C  
                                                                  l7921 19BC  
                                                                  l7913 19A0  
                                                                  l6859 17CA  
                                                                  l6867 17DE  
                                                                  l6795 10F6  
                                                                  l6779 10D8  
                                                                  l7691 151C  
                                                                  l7683 1510  
                                                                  l7675 14F8  
                                                                  l7667 14EA  
                                                                  l7659 14D0  
                                                                  l7595 140E  
                                                                  l7915 19A6  
                                                                  l8299 0D82  
                                                                  l6981 1C1E  
                                                                  l6893 226E  
                                                                  l5997 0B7E  
                                                                  l7917 19AC  
                                                                  l7925 19CE  
                                                                  l7695 1522  
                                                                  l7687 1516  
                                                                  l7679 150A  
                                                                  l7919 19B4  
                                                                  l7927 19FA  
                                                                  l6969 1B82  
                                                                  l7961 21A4  
                                                                  l6979 1BEC  
                                                                  l6899 22C2  
                                                                  l7699 1528  
                                                                  l7891 193E  
                                                                  l6989 1C32  
                                                                  l7893 1940  
                                                                  l7973 21BE  
                                                                  l7887 1936  
                                                                  l7995 21EC  
                                                                  l7979 21CC  
                                                                  l7989 21DE  
                                                                  STR_1 0648  
                                                                  STR_3 063F  
                                                                  STR_5 064E  
                                                                  STR_7 0624  
                                                                  STR_9 0610  
                                                     _UpdateLedRegister 2BC6  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u5004 0BB8  
                                                                  u5005 0BB2  
                                                                  u5014 0BDC  
                                                                  u5015 0BD6  
                                                                  u5034 0C06  
                                                                  u5114 1DBC  
                                                                  u5035 0C00  
                                                                  u5115 1DB6  
                                                                  u6004 1768  
                                                                  u5044 0C2E  
                                                                  u5124 1DDC  
                                                                  u6005 1760  
                                                                  u5045 0C28  
                                                                  u5125 1DD6  
                                                                  u6024 1784  
                                                                  u5224 2AB6  
                                                                  u5320 246E  
                                                                  u6104 2556  
                                                                  u5144 1E04  
                                                                  u6025 177E  
                                                                  u5225 2AB0  
                                                                  u6105 254E  
                                                                  u5145 1DFC  
                                                                  u6034 17B0  
                                                                  u5234 2AD6  
                                                                  u6114 1BB0  
                                                                  u7010 11E8  
                                                                  u5154 1E2C  
                                                                  u6035 17AA  
                                                                  u5235 2AD0  
                                                                  u6115 1BAA  
                                                                  u5155 1E24  
                                                                  u5084 1D78  
                                                                  u5085 1D72  
                                                                  u6134 1BD6  
                                                                  u5094 1D98  
                                                                  u6135 1BCE  
                                                                  u5095 1D92  
                                                                  u6144 1C02  
                                                                  u6145 1BFA  
                                                                  u5505 2648  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u5540 0676  
                                                                  _RCIF 007CF5  
                                                                  u5445 1864  
                                                                  u5550 0690  
                                                                  u6094 252A  
                                                                  u6095 2522  
                                                                  u4735 210E  
                                                                  u4904 0A66  
                                                                  u4905 0A60  
                                                                  u5730 0F2E  
                                                                  u4924 0A94  
                                                                  u7420 0E5A  
                                                                  u4925 0A8E  
                                                                  u4934 0ABC  
                                                                  u4854 09AC  
                                                                  u4935 0AB6  
                                                                  u4855 09A6  
                                                                  u4944 0AE6  
                                                                  u4864 09D4  
                                                                  u7360 0DCC  
                                                                  i1l97 0064  
                                                                  u4945 0AE0  
                                                                  u4865 09CE  
                                                                  i1l98 0038  
                                                                  u5770 0F92  
                                                                  u4954 0B14  
                                                                  u4874 09FE  
                                                                  u4955 0B0E  
                                                                  u4875 09F8  
                                                                  i2l84 2908  
                                                                  u4964 0B3C  
                                                                  u4884 0A26  
                                                                  i2l85 2940  
                                                                  u4965 0B36  
                                                                  u4885 0A20  
                                                                  u5790 0FBA  
                                                                  u4974 0B62  
                                                                  u4894 0A42  
                                                                  u7447 2D1E  
                                                                  u4975 0B5C  
                                                                  u4895 0A3C  
                                                                  u5890 10D6  
                                                                  u4994 0B90  
                                                                  u4995 0B8A  
                                                                  u6990 11B2  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 0C5C  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0079  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 30D2  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                       __end_of_InitApp 27A4  
                                                          _soundTestEnd 00BA  
                                                            __6sCounter 00C8  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2FBE  
                                      __size_of_GetCurrentEventDiodeNum 000C  
                                           getTotalMinutes@totalMinutes 0007  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2D18  
                                                                 _EEADR 000FA9  
                                                                 STR_11 0653  
                                                                 STR_21 0624  
                                                                 STR_13 0634  
                                                                 STR_15 0648  
                                                                 STR_23 0610  
                                                                 STR_17 063F  
                                                                 STR_25 0653  
                                                                 STR_19 064E  
                                                                 STR_27 0634  
                                                       __end_of___lbmod 2E9A  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000F  
                                                       __end_of___lwdiv 2A50  
                                                       __end_of___lwmod 2BC6  
                                            __end_of_ModbusSendTxBuffer 2B34  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                   _ModbusProcess_FC100 1E4A  
                                                   _ModbusProcess_FC101 2E06  
                                                   _ModbusProcess_FC102 2FD8  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 30D2  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2182  
                                                        ?_LoadNextEvent 0001  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D5  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                        __size_of_ResetEventFromCommand 0042  
                                             __end_of_UpdateLedRegister 2C0C  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                         __end_of_ResetEventFromCommand 2CDA  
                                                       __end_of_io_poll 2616  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 0071  
                                                        _UartBufferTail 00C7  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0258  
                                                       ___lbdiv@counter 0009  
                                                  ?_ModbusProcess_FC100 0001  
                                                  ?_ModbusProcess_FC101 0001  
                                                  ?_ModbusProcess_FC102 0001  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2FA0  
                                                       __initialization 29A4  
                                                          __end_of_main 0EF0  
                                                  __eeFirstSoundAddress 00CA  
                                     __size_of_ModbusGetUserCommandData 0008  
                                   ModbusProcess_FC100@u8CopyBufferSize 0049  
                                                      __end_of_LightLed 0C5C  
                                             ?_ModbusGetUserCommandData 0007  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                              ??_ModbusGetUserCommandId 0009  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 00E8  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 223A  
                                                            _ModbusInit 2FBE  
                                                            _ModbusPoll 13C6  
                                                      __end_of_PortRead 2E06  
                                                 _ModbusUserCommandData 00E5  
                                                        _InitUartBuffer 3076  
                                                   _ProcessUserCommands 269C  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 1A36  
                                                        _LightStatusLed 1D54  
                                                                i1l5707 005E  
                                                                i1l5709 0060  
                                                                i2l5687 2938  
                                                     ??_getTotalMinutes 0009  
                                                         _ymd_to_scalar 2442  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 2B34  
                                                         main@oldMinute 01D1  
                                                 CommandSetLed@ledColor 0025  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                         ModbusProcess_FC100@newRawTime 0045  
                                                 ??_ModbusProcess_FC100 0045  
                                                 ??_ModbusProcess_FC101 0016  
                                                 ??_ModbusProcess_FC102 0016  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D7  
                                                       ??_years_to_days 0012  
                                                                _Modbus 3024  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 2948  
                                             __playingSoundStartPosInEe 0073  
                                                         ??_ShowFailure 000F  
                                                  ?_ProcessUserCommands 0001  
                                                        _UartRingBuffer 0200  
                                                SwitchOffAllDiaryLeds@i 000F  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BE  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00D0  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 2A50  
                                                                _millis 2EC4  
                                                                clear_0 29AC  
                                                                clear_1 29BE  
                                                                clear_2 29CA  
                                                                clear_3 29D6  
                                                     __end_of_AddSecond 305A  
                                                                _mktime 0658  
                                                          __lastCommand 00D0  
                                            ResetEventFromCommand@state 000F  
                                                 __end_of_PortAvailable 309A  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0029  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 0078  
                                                __end_of_InitUartBuffer 3084  
                                                          __MODBUSCoils 00DD  
                                                            PortWrite@i 000A  
                                                   _PortClearReadBuffer 3068  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                 _SwitchOffAllDiaryLeds 2E9A  
                                                    __playingSoundSteps 00D3  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                        _ModbusUserCommandAdditional1Hi 00DF  
                                        _ModbusUserCommandAdditional2Hi 00E1  
                                        _ModbusUserCommandAdditional3Hi 00E3  
                                            __size_of_UpdateLedRegister 0046  
                                        _ModbusUserCommandAdditional1Lo 00E0  
                                                      __end_of_pwm_init 304A  
                                        _ModbusUserCommandAdditional2Lo 00E2  
                                        _ModbusUserCommandAdditional3Lo 00E4  
                                                __end_of_LightStatusLed 1E4A  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D6  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 29EE  
                                                       ___lbmod@counter 0009  
                                                         __deviceStatus 00C9  
                                            __end_of_ModbusProcess_FC21 239C  
                                            __end_of_ModbusProcess_FC15 1C52  
                                            __end_of_ModbusProcess_FC16 20C4  
                                            __end_of_ModbusProcess_FC17 2888  
                                            __end_of_ModbusProcess_FC43 16DA  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 027E  
                                                 ??_ProcessUserCommands 0029  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 116E  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 27A4  
                                               _GetCurrentEventDiodeNum 3084  
                                                  __end_of_fctsupported 0610  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001E  
                                                      ___lbdiv@quotient 000A  
                                       __size_of_ModbusGetUserCommandId 0008  
                                                   __end_of_ShowFailure 2F80  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                   _ModbusUserCommandId 00E6  
                                                     ?_SwitchOffAllLeds 0001  
                                             InitFromEeprom@tmpModbusId 0013  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 005C  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                  _ModbusBuildException 2F80  
                                                    ??_SwitchOffAllLeds 0007  
                                                 __end_of_CommandSetLed 1920  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1FFA  
                                   ModbusProcess_FC101@u8CopyBufferSize 0016  
                                              ModbusGetRxBufferHeader@i 0009  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                     main@debounceDelay 01C8  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 300C  
                                                 ??_PortClearReadBuffer 0007  
                                                               ?_Modbus 000C  
                                                 __eeSoundAddressesList 00CB  
                                                     __end_of_PortWrite 2D56  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0016  
                                                 _millisecondsFromStart 00B2  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2F14  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                ?_SwitchOffAllDiaryLeds 0001  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0086  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000D  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B6  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                _ModbusGetUserCommandId 309A  
                                                    _ModbusSendTxBuffer 2AE8  
                                      __end_of_ModbusGetUserCommandData 30AA  
                                                               _GetTime 30CA  
                                         __size_of_ModbusGetLastCommand 003C  
                                                       __inputRegsCount 00CE  
                                                   __end_of_StopPlaying 3068  
                                                               _InitApp 2720  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2FA0  
                                                               __Lparam 0000  
                                             ??_GetCurrentEventDiodeNum 0007  
                                                   __size_of_ModbusInit 001A  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 01B2  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 0076  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                           _ShowFailure 2F60  
                                                               ___lbdiv 2CDA  
                                                               ___lbmod 2E6E  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 29FC  
                                                               ___lwmod 2B7E  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 0112  
                                                               __pcinit 29A4  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2E3C  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0075  
                                                       __size_of_mktime 0312  
                                                               __ptext0 0C5C  
                                                               __ptext1 3038  
                                                               __ptext2 2588  
                                                               __ptext3 269C  
                                                               __ptext4 309A  
                                                               __ptext5 2616  
                                                               __ptext6 1806  
                                                               __ptext7 30A2  
                                                               __ptext8 30AA  
                                                               __ptext9 30B2  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                main@lastButtonPinState 01D3  
                                                               _io_poll 2588  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 000B  
                                                   __size_of_ResetEvent 004A  
                                       __end_of_ModbusGetRxBufferHeader 2DCE  
                                                       _getTotalMinutes 2F3A  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 005E  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 28E8  
                                                  end_of_initialization 29EE  
                                                         __lastFunction 00E7  
                                                 _ResetEventFromCommand 2C98  
                                                         __Lmediumconst 0000  
                                                               int_func 28E8  
                                                   __playingSoundCurPos 00D2  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                             __totalMinutesFromDayStart 00C4  
                                                        ??_ProcessDiary 001F  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                            ??_pwm_init 0007  
                                   ModbusProcess_FC102@u8CopyBufferSize 0016  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 0010  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     InitFromEeprom@eeSoundCountAddress 0012  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 304A  
                                                        _months_to_days 2C0C  
                                                       __maxDiaryEvents 0072  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 2C52  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     _SoundPlayNextStep 20C4  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 305A  
                                           __end_of_ModbusProcess_FC100 1F2A  
                                           __end_of_ModbusProcess_FC101 2E3C  
                                           __end_of_ModbusProcess_FC102 2FF2  
                                           __end_of_ConfigureOscillator 30D8  
                                                    ?_SoundPlayNextStep 0001  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                     __eventFromCommand 00A0  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 01C9  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 01D6  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                              _ModbusGetUserCommandData 30A2  
                                                 __end_of_years_to_days 1D54  
                                                 main@buttonPinCurState 01D7  
                                                      CommandSetLed@led 0028  
                                                        __end_of_Modbus 3038  
                                               __end_of_getTotalMinutes 2F60  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 22F0  
                                                    _ModbusProcess_FC15 1B48  
                                                    _ModbusProcess_FC16 1FFA  
                                                    _ModbusProcess_FC17 2818  
                                                    _ModbusProcess_FC43 1578  
                                                         __pidataCOMRAM 30DA  
                                              ModbusPoll@discreteInputs 005C  
                                                        __end_of_isleap 2A9C  
                                                        __end_of_millis 2EEE  
                                                __end_of_months_to_days 2C52  
                                             __end_of_ModbusGetRxBuffer 2C98  
                                                        __end_of_mktime 096A  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                              CommandSetLed@commandData 0027  
                                                         _UartBufferLen 00C6  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0065  
                                             __end_of_SoundPlayNextStep 2182  
                                                            ?_AddSecond 0001  
                                                   start_initialization 29A4  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 1A36  
                                                ?_ResetEventFromCommand 0001  
                                                          ??_SetHourMin 0011  
                                                   __size_of_getHourMin 0026  
                                           __end_of_ProcessUserCommands 2720  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1F2A  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 000A  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                             CommandSetLed@blinkSeconds 0026  
                                                   _CommandSetStatusLed 2616  
                                                        getHourMin@hour 0007  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                      __size_of_ModbusGetRxBufferHeader 003C  
                                                    __end_of_ModbusInit 2FD8  
                                                    __end_of_ModbusPoll 1578  
                                                             _PortBegin 2FF2  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EF0  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2D18  
                                                     __size_of_PortRead 0038  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                               ??_SwitchOffAllDiaryLeds 000F  
                                                              ??_mktime 0032  
                                                  CommandSetLed@soundId 0024  
                                                    __end_of_SetHourMin 1B48  
                                                     __holdingRegsCount 00CD  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 0068  
                                                    __end_of_ResetEvent 2B7E  
                                                         __pcstackBANK0 00E8  
                                                         __pcstackBANK1 01C8  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 2442  
                                               ModbusProcess_FC3@u8size 0018  
                                               ?_ModbusGetUserCommandId 0007  
                                           __end_of_PortClearReadBuffer 3076  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2940  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0017  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001E  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                                          ?_ShowFailure 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                                __size_of_CommandSetLed 011A  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                            ?_PortWrite 0007  
                                                      ?_getTotalMinutes 0007  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2D92  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 0061  
                                            __size_of_ModbusGetRxBuffer 0046  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 3090  
                                                         __playingEndMs 00A6  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001F  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0074  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00BE  
                                           ModbusGetLastCommand@command 0008  
                                                    __MODBUSHoldingRegs 018C  
                                        __end_of_ModbusGetUserCommandId 30A2  
                                                              ?_low_isr 0001  
                                                   io_poll@lastFunction 0032  
                                                 io_poll@lastEndAddress 002D  
                                                      ___lwdiv@quotient 000C  
                                                      SetHourMin@newMin 000D  
                                             _ResetEventFromCommand$916 0010  
                                                 __end_of_ymd_to_scalar 24E6  
                                                      SetHourMin@tmpSec 001D  
                                              ProcessDiary@totalMinutes 0023  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D8  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0066  
                                                           __soundCount 00D4  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 28E8  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000B  
                                                          ??_getHourMin 000B  
                                                   LightStatusLed@blink 0008  
                                                  main@lastDebounceTime 01CD  
                                                       __isSoundPlaying 00CF  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2AE8  
                                           _ModbusSetExceptionStatusBit 2A9C  
                                                __nextEventPlayDuration 00C2  
                                                              InitApp@i 0007  
                                                           _globalHours 0078  
                                                             main@curMs 01DA  
                                                       main@buttonState 01D4  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                         _CommandSetLed 1806  
                                                     _ModbusProcess_FC1 16DA  
                                                     _ModbusProcess_FC3 223A  
                                                     _ModbusProcess_FC5 24E6  
                                                     _ModbusProcess_FC6 2948  
                                                     _ModbusProcess_FC7 300C  
                                                           _INTCON2bits 000FF1  
                                            ??_ModbusGetUserCommandData 0009  
                                        CommandSetStatusLed@commandData 0021  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 096A  
                                              ?_GetCurrentEventDiodeNum 0001  
                                                    __end_of_getHourMin 2F3A  
                                                           ??_PlaySound 0019  
                                                 ModbusPoll@u8exception 0067  
                                                      _SwitchOffAllLeds 2EEE  
                                                      __size_of_GetTime 0008  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00AA  
                                               _ModbusGetRxBufferHeader 2D92  
                                                         getHourMin@min 0009  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 2818  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 0022  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2DCE  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00A6  
                                                           _isleap$2291 000F  
                                                           _currentTime 00D9  
                                               ??_ResetEventFromCommand 000F  
                                                      __size_of_io_poll 008E  
                                                              _diffTime 00AE  
                                            ModbusProcess_FC100@newTime 004A  
                                             __end_of_ModbusProcess_FC1 1806  
                                             __end_of_ModbusProcess_FC3 22F0  
                                             __end_of_ModbusProcess_FC5 2588  
                                             __end_of_ModbusProcess_FC6 29A4  
                                             __end_of_ModbusProcess_FC7 3024  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 002F  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                        ?_CommandSetLed 0001  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 30BA  
                                                              __ptext11 30C2  
                                                              __ptext20 2E9A  
                                                              __ptext12 2D56  
                                                              __ptext21 2C98  
                                                              __ptext13 2182  
                                                              __ptext30 30CA  
                                                              __ptext22 2B34  
                                                              __ptext14 2EEE  
                                                              __ptext31 1920  
                                                              __ptext23 116E  
                                                              __ptext15 2F60  
                                                              __ptext40 24E6  
                                                              __ptext32 2F3A  
                                                              __ptext24 2BC6  
                                                              __ptext16 1D54  
                                                              __ptext41 1578  
                                                              __ptext33 096A  
                                                              __ptext25 239C  
                                                              __ptext17 3024  
                                                              __ptext50 1E4A  
                                                              __ptext42 2888  
                                                              __ptext34 3084  
                                                              __ptext26 1F2A  
                                                              __ptext18 2FBE  
                                                              __ptext51 0658  
                                                              __ptext43 223A  
                                                              __ptext35 13C6  
                                                              __ptext27 20C4  
                                                              __ptext19 2F14  
                                                              __ptext60 2E6E  
                                                              __ptext52 2442  
                                                              __ptext44 22F0  
                                                              __ptext36 3068  
                                                              __ptext28 305A  
                                                              __ptext61 2CDA  
                                                              __ptext53 1C52  
                                                              __ptext45 2818  
                                                              __ptext37 0EF0  
                                                              __ptext29 2E3C  
                                                              __ptext70 2DCE  
                                                              __ptext62 2A9C  
                                                              __ptext54 2C0C  
                                                              __ptext46 1FFA  
                                                              __ptext38 300C  
                                                              __ptext71 3090  
                                                              __ptext63 16DA  
                                                              __ptext55 29FC  
                                                              __ptext47 1B48  
                                                              __ptext39 2948  
                                                              __ptext72 2F80  
                                                              __ptext64 2AE8  
                                                              __ptext56 2A50  
                                                              __ptext48 2FD8  
                                                              __ptext73 2720  
                                                              __ptext65 2EC4  
                                                              __ptext57 2B7E  
                                                              __ptext49 2E06  
                                                              __ptext74 2FF2  
                                                              __ptext66 2D18  
                                                              __ptext58 2FA0  
                                                              __ptext75 3076  
                                                              __ptext67 27A4  
                                                              __ptext59 1A36  
                                                              __ptext76 30D2  
                                                              __ptext68 2D92  
                                                              __ptext77 304A  
                                                              __ptext69 2C52  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 0031  
                                                         __size_of_main 0294  
                                                  _ModbusGetLastCommand 2D56  
                                              ShowFailure@additionalLed 000F  
                                          __size_of_ModbusProcess_FC100 00E0  
                                          __size_of_ModbusProcess_FC101 0036  
                                          __size_of_ModbusProcess_FC102 001A  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 239C  
                                                              int$flags 0079  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 3038  
                                                       ??_PortAvailable 0007  
                                                  __size_of_ShowFailure 0020  
                                                              main@hour 01D5  
                                                      __exceptionStatus 00CC  
                                                      LightLed@ledState 0007  
                                        __size_of_SwitchOffAllDiaryLeds 002A  
                                         __end_of_SwitchOffAllDiaryLeds 2EC4  
                                                    _ymd_to_scalar$2304 0028  
                                                            _INTCONbits 000FF2  
                             __end_of_ModbusGetUserCommandAdditional1Hi 30CA  
                            __size_of_ModbusGetUserCommandAdditional1Hi 0008  
                                   ??_ModbusGetUserCommandAdditional1Hi 0009  
                                    ?_ModbusGetUserCommandAdditional1Hi 0007  
                                     _ModbusGetUserCommandAdditional1Hi 30C2  
                             __end_of_ModbusGetUserCommandAdditional2Hi 30BA  
                            __size_of_ModbusGetUserCommandAdditional2Hi 0008  
                                   ??_ModbusGetUserCommandAdditional2Hi 0009  
                                    ?_ModbusGetUserCommandAdditional2Hi 0007  
                                     _ModbusGetUserCommandAdditional2Hi 30B2  
                             __end_of_ModbusGetUserCommandAdditional1Lo 30C2  
                            __size_of_ModbusGetUserCommandAdditional1Lo 0008  
                                   ??_ModbusGetUserCommandAdditional1Lo 0009  
                                    ?_ModbusGetUserCommandAdditional1Lo 0007  
                                     _ModbusGetUserCommandAdditional1Lo 30BA  
                             __end_of_ModbusGetUserCommandAdditional2Lo 30B2  
                            __size_of_ModbusGetUserCommandAdditional2Lo 0008  
                                   ??_ModbusGetUserCommandAdditional2Lo 0009  
                                    ?_ModbusGetUserCommandAdditional2Lo 0007  
                                     _ModbusGetUserCommandAdditional2Lo 30AA  
                                               __size_of_InitFromEeprom 00B8  
                                                ProcessLightBlock@curMs 0008  
                                             SoundPlayNextStep@duration 0016  
                                       __end_of_GetCurrentEventDiodeNum 3090  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00D1  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 30D8  
                                                              intlevel2 30D8  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001D  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                             ??_ModbusGetRxBufferHeader 0008  
                                                              mktime@tt 0040  
                                                      main@totalMinutes 01D8  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                             SoundPlayNextStep@stepDuty 0014  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 0070  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 116E  
                                          __size_of_ProcessUserCommands 0084  
                                                __size_of_LoadNextEvent 0116  
                                                    ?_ProcessLightBlock 0008  
                                                 __end_of_SetBuzzerDuty 2E6E  
                                                   ModbusPoll@u8current 0065  
                                                   ??_ProcessLightBlock 000A  
                                                       ___lwmod@divisor 0009  
                                                       ??_CommandSetLed 001F  
                                                       ___lwmod@counter 000B  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                     __currenDiaryEvent 0068  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000C  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0017  
                                                  __size_of_StopPlaying 000E  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000E  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 13C6  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0064  
                                          __size_of_PortClearReadBuffer 000E  
                                            ModbusProcess_FC15@u8bitsno 0028  
