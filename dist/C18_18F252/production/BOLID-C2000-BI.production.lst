

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Jun 29 18:45:16 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           	psect	eeprom_data
   107  F00000  11 7F FF 06 09 FF 01 04 	db	17,127,255,6,9,255,1,4	;# 
   108  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
   109  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
   110  0000                     
   111                           	psect	idataCOMRAM
   112  003FFE                     __pidataCOMRAM:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _globalHours
   116  003FFE  FF                 	db	255
   117                           
   118                           	psect	smallconst
   119  000600                     __psmallconst:
   120                           	opt stack 0
   121  000600  00                 	db	0
   122  000601                     _fctsupported:
   123                           	opt stack 0
   124  000601  01                 	db	1
   125  000602  02                 	db	2
   126  000603  03                 	db	3
   127  000604  04                 	db	4
   128  000605  05                 	db	5
   129  000606  06                 	db	6
   130  000607  07                 	db	7
   131  000608  0F                 	db	15
   132  000609  10                 	db	16
   133  00060A  11                 	db	17
   134  00060B  14                 	db	20
   135  00060C  15                 	db	21
   136  00060D  2B                 	db	43
   137  00060E  64                 	db	100
   138  00060F  65                 	db	101
   139  000610  66                 	db	102
   140  000611                     __end_of_fctsupported:
   141                           	opt stack 0
   142  0000                     _CCP1CONbits	set	4029
   143  0000                     _CCPR1L	set	4030
   144  0000                     _EEADR	set	4009
   145  0000                     _EECON2	set	4007
   146  0000                     _EEDATA	set	4008
   147  0000                     _INTCON2bits	set	4081
   148  0000                     _INTCONbits	set	4082
   149  0000                     _IPR1bits	set	3999
   150  0000                     _LATA	set	3977
   151  0000                     _LATAbits	set	3977
   152  0000                     _LATB	set	3978
   153  0000                     _LATCbits	set	3979
   154  0000                     _PIE1bits	set	3997
   155  0000                     _PIR1bits	set	3998
   156  0000                     _PORTCbits	set	3970
   157  0000                     _PR2	set	4043
   158  0000                     _RCONbits	set	4048
   159  0000                     _RCREG	set	4014
   160  0000                     _RCSTA	set	4011
   161  0000                     _RCSTAbits	set	4011
   162  0000                     _SPBRG	set	4015
   163  0000                     _T0CONbits	set	4053
   164  0000                     _T1CONbits	set	4045
   165  0000                     _T2CONbits	set	4042
   166  0000                     _TMR0H	set	4055
   167  0000                     _TMR0L	set	4054
   168  0000                     _TMR1H	set	4047
   169  0000                     _TMR1L	set	4046
   170  0000                     _TRISAbits	set	3986
   171  0000                     _TRISB	set	3987
   172  0000                     _TRISCbits	set	3988
   173  0000                     _TXREG	set	4013
   174  0000                     _TXSTA	set	4012
   175  0000                     _TXSTAbits	set	4012
   176  0000                     _CARRY	set	32448
   177  0000                     _CFGS	set	32054
   178  0000                     _EEPGD	set	32055
   179  0000                     _GIE	set	32663
   180  0000                     _RCIF	set	31989
   181  0000                     _RD	set	32048
   182  0000                     _TRMT	set	32097
   183  0000                     _WR	set	32049
   184  0000                     _WREN	set	32050
   185  000611                     STR_9:
   186  000611  54                 	db	84	;'T'
   187  000612  61                 	db	97	;'a'
   188  000613  62                 	db	98	;'b'
   189  000614  6C                 	db	108	;'l'
   190  000615  6F                 	db	111	;'o'
   191  000616  20                 	db	32
   192  000617  73                 	db	115	;'s'
   193  000618  20                 	db	32
   194  000619  72                 	db	114	;'r'
   195  00061A  61                 	db	97	;'a'
   196  00061B  73                 	db	115	;'s'
   197  00061C  70                 	db	112	;'p'
   198  00061D  69                 	db	105	;'i'
   199  00061E  73                 	db	115	;'s'
   200  00061F  61                 	db	97	;'a'
   201  000620  6E                 	db	110	;'n'
   202  000621  69                 	db	105	;'i'
   203  000622  65                 	db	101	;'e'
   204  000623  6D                 	db	109	;'m'
   205  000624  00                 	db	0
   206  000625                     STR_7:
   207  000625  68                 	db	104	;'h'
   208  000626  74                 	db	116	;'t'
   209  000627  74                 	db	116	;'t'
   210  000628  70                 	db	112	;'p'
   211  000629  3A                 	db	58	;':'
   212  00062A  2F                 	db	47
   213  00062B  2F                 	db	47
   214  00062C  62                 	db	98	;'b'
   215  00062D  6F                 	db	111	;'o'
   216  00062E  6C                 	db	108	;'l'
   217  00062F  69                 	db	105	;'i'
   218  000630  64                 	db	100	;'d'
   219  000631  2E                 	db	46
   220  000632  72                 	db	114	;'r'
   221  000633  75                 	db	117	;'u'
   222  000634  00                 	db	0
   223  000635                     STR_13:
   224  000635  52                 	db	82	;'R'
   225  000636  61                 	db	97	;'a'
   226  000637  73                 	db	115	;'s'
   227  000638  70                 	db	112	;'p'
   228  000639  69                 	db	105	;'i'
   229  00063A  73                 	db	115	;'s'
   230  00063B  61                 	db	97	;'a'
   231  00063C  6E                 	db	110	;'n'
   232  00063D  69                 	db	105	;'i'
   233  00063E  65                 	db	101	;'e'
   234  00063F  00                 	db	0
   235  000640                     STR_3:
   236  000640  43                 	db	67	;'C'
   237  000641  32                 	db	50	;'2'
   238  000642  30                 	db	48	;'0'
   239  000643  30                 	db	48	;'0'
   240  000644  30                 	db	48	;'0'
   241  000645  2D                 	db	45
   242  000646  42                 	db	66	;'B'
   243  000647  49                 	db	73	;'I'
   244  000648  00                 	db	0
   245  000649                     STR_1:
   246  000649  42                 	db	66	;'B'
   247  00064A  4F                 	db	79	;'O'
   248  00064B  4C                 	db	76	;'L'
   249  00064C  49                 	db	73	;'I'
   250  00064D  44                 	db	68	;'D'
   251  00064E  00                 	db	0
   252  00064F                     STR_5:
   253  00064F  31                 	db	49	;'1'
   254  000650  2E                 	db	46
   255  000651  30                 	db	48	;'0'
   256  000652  31                 	db	49	;'1'
   257  000653  00                 	db	0
   258  000654                     STR_11:
   259  000654  4D                 	db	77	;'M'
   260  000655  4D                 	db	77	;'M'
   261  000656  4D                 	db	77	;'M'
   262  000657  00                 	db	0
   263  0000                     
   264                           ; #config settings
   265  000658  00                 	db	0	; dummy byte at the end
   266  0000                     
   267                           	psect	cinit
   268  003BD2                     __pcinit:
   269                           	opt stack 0
   270  003BD2                     start_initialization:
   271                           	opt stack 0
   272  003BD2                     __initialization:
   273                           	opt stack 0
   274                           
   275                           ; Clear objects allocated to BANK2 (256 bytes)
   276  003BD2  EE02  F000         	lfsr	0,__pbssBANK2
   277  003BD6  EE11 F000          	lfsr	1,256
   278  003BDA                     clear_0:
   279  003BDA  6AEE               	clrf	postinc0,c
   280  003BDC  50E5               	movf	postdec1,w,c
   281  003BDE  50E1               	movf	fsr1l,w,c
   282  003BE0  E1FC               	bnz	clear_0
   283  003BE2  50E2               	movf	fsr1h,w,c
   284  003BE4  E1FA               	bnz	clear_0
   285                           
   286                           ; Clear objects allocated to BANK1 (246 bytes)
   287  003BE6  EE01  F000         	lfsr	0,__pbssBANK1
   288  003BEA  0EF6               	movlw	246
   289  003BEC                     clear_1:
   290  003BEC  6AEE               	clrf	postinc0,c
   291  003BEE  06E8               	decf	wreg,f,c
   292  003BF0  E1FD               	bnz	clear_1
   293                           
   294                           ; Clear objects allocated to BANK0 (59 bytes)
   295  003BF2  EE00  F0C2         	lfsr	0,__pbssBANK0
   296  003BF6  0E3B               	movlw	59
   297  003BF8                     clear_2:
   298  003BF8  6AEE               	clrf	postinc0,c
   299  003BFA  06E8               	decf	wreg,f,c
   300  003BFC  E1FD               	bnz	clear_2
   301                           
   302                           ; Clear objects allocated to COMRAM (37 bytes)
   303  003BFE  EE00  F039         	lfsr	0,__pbssCOMRAM
   304  003C02  0E25               	movlw	37
   305  003C04                     clear_3:
   306  003C04  6AEE               	clrf	postinc0,c
   307  003C06  06E8               	decf	wreg,f,c
   308  003C08  E1FD               	bnz	clear_3
   309                           
   310                           ; Initialize objects allocated to COMRAM (1 bytes)
   311                           ; load TBLPTR registers with __pidataCOMRAM
   312  003C0A  0EFE               	movlw	low __pidataCOMRAM
   313  003C0C  6EF6               	movwf	tblptrl,c
   314  003C0E  0E3F               	movlw	high __pidataCOMRAM
   315  003C10  6EF7               	movwf	tblptrh,c
   316  003C12  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   317  003C14  6EF8               	movwf	tblptru,c
   318  003C16  0009               	tblrd		*+	;fetch initializer
   319  003C18  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   320  003C1C                     end_of_initialization:
   321                           	opt stack 0
   322  003C1C                     __end_of__initialization:
   323                           	opt stack 0
   324  003C1C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   325  003C1E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   326  003C20  0E00               	movlw	low (__Lmediumconst shr (0+16))
   327  003C22  6EF8               	movwf	tblptru,c
   328  003C24  0100               	movlb	0
   329  003C26  EF63  F007         	goto	_main	;jump to C main() function
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1h	equ	0xFE2
   338                           fsr1l	equ	0xFE1
   339                           
   340                           	psect	bssCOMRAM
   341  000039                     __pbssCOMRAM:
   342                           	opt stack 0
   343  000039                     __currenDiaryEvent:
   344                           	opt stack 0
   345  000039                     	ds	9
   346  000042                     _UartBufferHead:
   347                           	opt stack 0
   348  000042                     	ds	1
   349  000043                     _UartBufferLen:
   350                           	opt stack 0
   351  000043                     	ds	1
   352  000044                     _UartBufferTail:
   353                           	opt stack 0
   354  000044                     	ds	1
   355  000045                     __6sCounter:
   356                           	opt stack 0
   357  000045                     	ds	1
   358  000046                     __deviceStatus:
   359                           	opt stack 0
   360  000046                     	ds	1
   361  000047                     __eeFirstSoundAddress:
   362                           	opt stack 0
   363  000047                     	ds	1
   364  000048                     __eeSoundAddressesList:
   365                           	opt stack 0
   366  000048                     	ds	1
   367  000049                     __exceptionStatus:
   368                           	opt stack 0
   369  000049                     	ds	1
   370  00004A                     __holdingRegsCount:
   371                           	opt stack 0
   372  00004A                     	ds	1
   373  00004B                     __inputRegsCount:
   374                           	opt stack 0
   375  00004B                     	ds	1
   376  00004C                     __lastCommand:
   377                           	opt stack 0
   378  00004C                     	ds	1
   379  00004D                     __maxDiaryEvents:
   380                           	opt stack 0
   381  00004D                     	ds	1
   382  00004E                     __nextEventSoundId:
   383                           	opt stack 0
   384  00004E                     	ds	1
   385  00004F                     __playingSoundCurPos:
   386                           	opt stack 0
   387  00004F                     	ds	1
   388  000050                     __playingSoundStartPosInEe:
   389                           	opt stack 0
   390  000050                     	ds	1
   391  000051                     __playingSoundSteps:
   392                           	opt stack 0
   393  000051                     	ds	1
   394  000052                     __soundCount:
   395                           	opt stack 0
   396  000052                     	ds	1
   397  000053                     __u8BufferSize:
   398                           	opt stack 0
   399  000053                     	ds	1
   400  000054                     _blinkOn:
   401                           	opt stack 0
   402  000054                     	ds	1
   403  000055                     _currentLedBlock:
   404                           	opt stack 0
   405  000055                     	ds	1
   406  000056                     _eventAcceptTime:
   407                           	opt stack 0
   408  000056                     	ds	1
   409  000057                     _eventCount:
   410                           	opt stack 0
   411  000057                     	ds	1
   412  000058                     _globalMinutes:
   413                           	opt stack 0
   414  000058                     	ds	1
   415  000059                     _ModbusUserCommandAdditional1Hi:
   416                           	opt stack 0
   417  000059                     	ds	1
   418  00005A                     _ModbusUserCommandAdditional1Lo:
   419                           	opt stack 0
   420  00005A                     	ds	1
   421  00005B                     _ModbusUserCommandData:
   422                           	opt stack 0
   423  00005B                     	ds	1
   424  00005C                     _ModbusUserCommandId:
   425                           	opt stack 0
   426  00005C                     	ds	1
   427  00005D                     __lastFunction:
   428                           	opt stack 0
   429  00005D                     	ds	1
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           postdec1	equ	0xFE5
   437                           fsr1h	equ	0xFE2
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	dataCOMRAM
   441  00005E                     __pdataCOMRAM:
   442                           	opt stack 0
   443  00005E                     _globalHours:
   444                           	opt stack 0
   445  00005E                     	ds	1
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1h	equ	0xFE2
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	bssBANK0
   457  0000C2                     __pbssBANK0:
   458                           	opt stack 0
   459  0000C2                     _ledStatuses:
   460                           	opt stack 0
   461  0000C2                     	ds	16
   462  0000D2                     __eventFromCommand:
   463                           	opt stack 0
   464  0000D2                     	ds	6
   465  0000D8                     _diffTime:
   466                           	opt stack 0
   467  0000D8                     	ds	4
   468  0000DC                     _millisecondsFromStart:
   469                           	opt stack 0
   470  0000DC                     	ds	4
   471  0000E0                     __MODBUSDiscreteInputs:
   472                           	opt stack 0
   473  0000E0                     	ds	2
   474  0000E2                     __lastAddress:
   475                           	opt stack 0
   476  0000E2                     	ds	2
   477  0000E4                     __lastCount:
   478                           	opt stack 0
   479  0000E4                     	ds	2
   480  0000E6                     __nextEventPlayDuration:
   481                           	opt stack 0
   482  0000E6                     	ds	2
   483  0000E8                     __totalMinutesFromDayStart:
   484                           	opt stack 0
   485  0000E8                     	ds	2
   486  0000EA                     __u16timeOut:
   487                           	opt stack 0
   488  0000EA                     	ds	2
   489  0000EC                     _modbusState:
   490                           	opt stack 0
   491  0000EC                     	ds	2
   492  0000EE                     _IsBusserOn:
   493                           	opt stack 0
   494  0000EE                     	ds	1
   495  0000EF                     __isSoundPlaying:
   496                           	opt stack 0
   497  0000EF                     	ds	1
   498  0000F0                     __u8id:
   499                           	opt stack 0
   500  0000F0                     	ds	1
   501  0000F1                     __u8lastError:
   502                           	opt stack 0
   503  0000F1                     	ds	1
   504  0000F2                     __u8lastRec:
   505                           	opt stack 0
   506  0000F2                     	ds	1
   507  0000F3                     __u8serno:
   508                           	opt stack 0
   509  0000F3                     	ds	1
   510  0000F4                     __u8state:
   511                           	opt stack 0
   512  0000F4                     	ds	1
   513  0000F5                     __u8txenpin:
   514                           	opt stack 0
   515  0000F5                     	ds	1
   516  0000F6                     _statusLedState:
   517                           	opt stack 0
   518  0000F6                     	ds	1
   519  0000F7                     __MODBUSCoils:
   520                           	opt stack 0
   521  0000F7                     	ds	2
   522  0000F9                     _ModbusUserCommandAdditional2Hi:
   523                           	opt stack 0
   524  0000F9                     	ds	1
   525  0000FA                     _ModbusUserCommandAdditional2Lo:
   526                           	opt stack 0
   527  0000FA                     	ds	1
   528  0000FB                     _ModbusUserCommandAdditional3Hi:
   529                           	opt stack 0
   530  0000FB                     	ds	1
   531  0000FC                     _ModbusUserCommandAdditional3Lo:
   532                           	opt stack 0
   533  0000FC                     	ds	1
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK1
   545  000100                     __pbssBANK1:
   546                           	opt stack 0
   547  000100                     _ledBlink:
   548                           	opt stack 0
   549  000100                     	ds	16
   550  000110                     __playingEndMs:
   551                           	opt stack 0
   552  000110                     	ds	4
   553  000114                     __u32time:
   554                           	opt stack 0
   555  000114                     	ds	4
   556  000118                     __u32timeOut:
   557                           	opt stack 0
   558  000118                     	ds	4
   559  00011C                     _oldBlinkOnTime:
   560                           	opt stack 0
   561  00011C                     	ds	4
   562  000120                     _soundTestEnd:
   563                           	opt stack 0
   564  000120                     	ds	4
   565  000124                     __u16InCnt:
   566                           	opt stack 0
   567  000124                     	ds	2
   568  000126                     __u16OutCnt:
   569                           	opt stack 0
   570  000126                     	ds	2
   571  000128                     __u16errCnt:
   572                           	opt stack 0
   573  000128                     	ds	2
   574  00012A                     __au8Buffer:
   575                           	opt stack 0
   576  00012A                     	ds	140
   577  0001B6                     __MODBUSHoldingRegs:
   578                           	opt stack 0
   579  0001B6                     	ds	30
   580  0001D4                     __MODBUSInputRegs:
   581                           	opt stack 0
   582  0001D4                     	ds	30
   583  0001F2                     _currentTime:
   584                           	opt stack 0
   585  0001F2                     	ds	4
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postdec1	equ	0xFE5
   593                           fsr1h	equ	0xFE2
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK2
   597  000200                     __pbssBANK2:
   598                           	opt stack 0
   599  000200                     _UartRingBuffer:
   600                           	opt stack 0
   601  000200                     	ds	256
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1h	equ	0xFE2
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	cstackBANK3
   613  000300                     __pcstackBANK3:
   614                           	opt stack 0
   615  000300                     ??_main:
   616                           
   617                           ; 1 bytes @ 0x0
   618  000300                     	ds	12
   619  00030C                     main@buttonPressed:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0xC
   623  00030C                     	ds	1
   624  00030D                     main@lastMs:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0xD
   628  00030D                     	ds	4
   629  000311                     main@lastDebounceTime:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x11
   633  000311                     	ds	4
   634  000315                     main@debounceDelay:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x15
   638  000315                     	ds	1
   639  000316                     main@oldMinute:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x16
   643  000316                     	ds	2
   644  000318                     main@lastButtonPinState:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x18
   648  000318                     	ds	1
   649  000319                     main@buttonState:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x19
   653  000319                     	ds	1
   654  00031A                     main@hour:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x1A
   658  00031A                     	ds	1
   659  00031B                     main@minute:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x1B
   663  00031B                     	ds	1
   664  00031C                     main@buttonPinCurState:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x1C
   668  00031C                     	ds	1
   669  00031D                     main@totalMinutes:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x1D
   673  00031D                     	ds	2
   674  00031F                     main@curMs:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x1F
   678  00031F                     	ds	4
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1h	equ	0xFE2
   687                           fsr1l	equ	0xFE1
   688                           
   689                           	psect	cstackBANK0
   690  000080                     __pcstackBANK0:
   691                           	opt stack 0
   692  000080                     ??_ModbusValidateRequest:
   693  000080                     ??_ModbusProcess_FC16:
   694  000080                     ??_ProcessDiary:
   695  000080                     ??_CommandSetLed:
   696  000080                     ??_CommandSetStatusLed:
   697  000080                     ?_ymd_to_scalar:
   698                           	opt stack 0
   699  000080                     ModbusProcess_FC3@u8CopyBufferSize:
   700                           	opt stack 0
   701  000080                     ModbusProcess_FC5@u8CopyBufferSize:
   702                           	opt stack 0
   703  000080                     ModbusProcess_FC1@u16coil:
   704                           	opt stack 0
   705  000080                     ModbusProcess_FC6@u16val:
   706                           	opt stack 0
   707  000080                     ModbusProcess_FC15@u16coil:
   708                           	opt stack 0
   709  000080                     ymd_to_scalar@yr:
   710                           	opt stack 0
   711  000080                     ModbusProcess_FC20@recLenBytes:
   712                           	opt stack 0
   713                           
   714                           ; 5 bytes @ 0x0
   715  000080                     	ds	1
   716  000081                     CommandSetStatusLed@soundId:
   717                           	opt stack 0
   718  000081                     ModbusProcess_FC3@u16regsno:
   719                           	opt stack 0
   720  000081                     ModbusProcess_FC5@u16coil:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x1
   724  000081                     	ds	1
   725  000082                     CommandSetStatusLed@commandData:
   726                           	opt stack 0
   727  000082                     ModbusProcess_FC1@u8currentBit:
   728                           	opt stack 0
   729  000082                     ModbusProcess_FC6@u8CopyBufferSize:
   730                           	opt stack 0
   731  000082                     ModbusProcess_FC15@u8CopyBufferSize:
   732                           	opt stack 0
   733  000082                     ymd_to_scalar@mo:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x2
   737  000082                     	ds	1
   738  000083                     CommandSetStatusLed@led:
   739                           	opt stack 0
   740  000083                     ModbusProcess_FC1@u8CopyBufferSize:
   741                           	opt stack 0
   742  000083                     ModbusProcess_FC3@u8StartAdd:
   743                           	opt stack 0
   744  000083                     ModbusProcess_FC5@u8currentBit:
   745                           	opt stack 0
   746  000083                     ModbusProcess_FC15@bTemp:
   747                           	opt stack 0
   748  000083                     ModbusProcess_FC6@u16add:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x3
   752  000083                     	ds	1
   753  000084                     ModbusProcess_FC1@u8bytesno:
   754                           	opt stack 0
   755  000084                     ModbusProcess_FC3@i:
   756                           	opt stack 0
   757  000084                     ModbusProcess_FC15@u8frameByte:
   758                           	opt stack 0
   759  000084                     ProcessDiary@totalMinutes:
   760                           	opt stack 0
   761  000084                     ymd_to_scalar@day:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x4
   765  000084                     	ds	1
   766  000085                     CommandSetLed@soundId:
   767                           	opt stack 0
   768  000085                     ModbusProcess_FC1@u16StartCoil:
   769                           	opt stack 0
   770  000085                     ModbusProcess_FC15@u16StartCoil:
   771                           	opt stack 0
   772  000085                     ModbusProcess_FC20@startAddrBytes:
   773                           	opt stack 0
   774                           
   775                           ; 5 bytes @ 0x5
   776  000085                     	ds	1
   777  000086                     ??_ymd_to_scalar:
   778  000086                     CommandSetLed@ledColor:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x6
   782  000086                     	ds	1
   783  000087                     CommandSetLed@blinkSeconds:
   784                           	opt stack 0
   785  000087                     ModbusProcess_FC1@u16currentCoil:
   786                           	opt stack 0
   787  000087                     ModbusProcess_FC15@u16Coilno:
   788                           	opt stack 0
   789  000087                     ModbusProcess_FC16@temp:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x7
   793  000087                     	ds	1
   794  000088                     CommandSetLed@commandData:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x8
   798  000088                     	ds	1
   799  000089                     CommandSetLed@led:
   800                           	opt stack 0
   801  000089                     ModbusProcess_FC1@u8bitsno:
   802                           	opt stack 0
   803  000089                     ModbusProcess_FC15@u8currentBit:
   804                           	opt stack 0
   805  000089                     ModbusProcess_FC16@u8CopyBufferSize:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x9
   809  000089                     	ds	1
   810  00008A                     ??_ProcessUserCommands:
   811  00008A                     ModbusProcess_FC20@requestDataLen:
   812                           	opt stack 0
   813  00008A                     ModbusProcess_FC1@u16Coilno:
   814                           	opt stack 0
   815  00008A                     ModbusProcess_FC15@u16currentCoil:
   816                           	opt stack 0
   817  00008A                     ModbusProcess_FC16@u16StartAdd:
   818                           	opt stack 0
   819  00008A                     _ymd_to_scalar$2322:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0xA
   823  00008A                     	ds	1
   824  00008B                     ??_io_poll:
   825  00008B                     ModbusProcess_FC20@u8CopyBufferSize:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0xB
   829  00008B                     	ds	1
   830  00008C                     ModbusProcess_FC15@u8bitsno:
   831                           	opt stack 0
   832  00008C                     ModbusProcess_FC16@u8regsno:
   833                           	opt stack 0
   834  00008C                     ModbusProcess_FC20@i:
   835                           	opt stack 0
   836  00008C                     ModbusValidateRequest@startAddrBytes:
   837                           	opt stack 0
   838  00008C                     ymd_to_scalar@scalar:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0xC
   842  00008C                     	ds	1
   843  00008D                     ModbusProcess_FC16@i:
   844                           	opt stack 0
   845  00008D                     ModbusProcess_FC20@reqCount:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0xD
   849  00008D                     	ds	1
   850  00008E                     ModbusProcess_FC20@offset:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0xE
   854  00008E                     	ds	1
   855  00008F                     ModbusProcess_FC20@r:
   856                           	opt stack 0
   857  00008F                     io_poll@lastEndAddress:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0xF
   861  00008F                     	ds	1
   862  000090                     ?_mktime:
   863                           	opt stack 0
   864  000090                     mktime@timeptr:
   865                           	opt stack 0
   866  000090                     ModbusValidateRequest@recLenBytes:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x10
   870  000090                     	ds	1
   871  000091                     io_poll@lastAddress:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x11
   875  000091                     	ds	2
   876  000093                     io_poll@lastCommand:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x13
   880  000093                     	ds	1
   881  000094                     ??_mktime:
   882  000094                     io_poll@lastFunction:
   883                           	opt stack 0
   884  000094                     ModbusValidateRequest@u16MsgCRC:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x14
   888  000094                     	ds	2
   889  000096                     ModbusValidateRequest@isSupported:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x16
   893  000096                     	ds	1
   894  000097                     ModbusValidateRequest@res:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x17
   898  000097                     	ds	1
   899  000098                     ModbusValidateRequest@u16count:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x18
   903  000098                     	ds	2
   904  00009A                     ModbusValidateRequest@i:
   905                           	opt stack 0
   906  00009A                     mktime@tt:
   907                           	opt stack 0
   908                           
   909                           ; 4 bytes @ 0x1A
   910  00009A                     	ds	1
   911  00009B                     ModbusValidateRequest@readDevId:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x1B
   915  00009B                     	ds	1
   916  00009C                     ModbusValidateRequest@u8regs:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x1C
   920  00009C                     	ds	1
   921  00009D                     ModbusValidateRequest@u16regs:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x1D
   925  00009D                     	ds	1
   926  00009E                     ModbusProcess_FC100@newRawTime:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0x1E
   930  00009E                     	ds	4
   931  0000A2                     ModbusProcess_FC100@u8CopyBufferSize:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x22
   935  0000A2                     	ds	1
   936  0000A3                     ModbusProcess_FC100@newTime:
   937                           	opt stack 0
   938                           
   939                           ; 18 bytes @ 0x23
   940  0000A3                     	ds	18
   941  0000B5                     ModbusPoll@discreteInputs:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x35
   945  0000B5                     	ds	2
   946  0000B7                     ModbusPoll@coils:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x37
   950  0000B7                     	ds	2
   951  0000B9                     ModbusPoll@inputRegs:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x39
   955  0000B9                     	ds	2
   956  0000BB                     ModbusPoll@inputRegsCount:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x3B
   960  0000BB                     	ds	1
   961  0000BC                     ModbusPoll@holdingRegs:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x3C
   965  0000BC                     	ds	2
   966  0000BE                     ModbusPoll@holdingRegsCount:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x3E
   970  0000BE                     	ds	1
   971  0000BF                     ModbusPoll@u8current:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x3F
   975  0000BF                     	ds	1
   976  0000C0                     ModbusPoll@u8exception:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x40
   980  0000C0                     	ds	1
   981  0000C1                     ModbusPoll@i8state:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x41
   985  0000C1                     	ds	1
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1h	equ	0xFE2
   994                           fsr1l	equ	0xFE1
   995                           
   996                           	psect	cstackCOMRAM
   997  000001                     __pcstackCOMRAM:
   998                           	opt stack 0
   999  000001                     ??_high_isr:
  1000  000001                     
  1001                           ; 1 bytes @ 0x0
  1002  000001                     	ds	14
  1003  00000F                     ??_low_isr:
  1004                           
  1005                           ; 1 bytes @ 0xE
  1006  00000F                     	ds	17
  1007  000020                     low_isr@c:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x1F
  1011  000020                     	ds	1
  1012  000021                     ??_CheckFunc20:
  1013  000021                     ?_GetTime:
  1014                           	opt stack 0
  1015  000021                     ?_ModbusGetUserCommandData:
  1016                           	opt stack 0
  1017  000021                     ?_ModbusGetUserCommandAdditional1Hi:
  1018                           	opt stack 0
  1019  000021                     ?_ModbusGetUserCommandAdditional2Hi:
  1020                           	opt stack 0
  1021  000021                     ?_ModbusGetUserCommandAdditional2Lo:
  1022                           	opt stack 0
  1023  000021                     ?_ModbusGetUserCommandAdditional1Lo:
  1024                           	opt stack 0
  1025  000021                     ?_ModbusGetUserCommandId:
  1026                           	opt stack 0
  1027  000021                     ?_ModbusGetLastCommand:
  1028                           	opt stack 0
  1029  000021                     ?_ModbusCalcCRC:
  1030                           	opt stack 0
  1031  000021                     ?___wmul:
  1032                           	opt stack 0
  1033  000021                     ?___awdiv:
  1034                           	opt stack 0
  1035  000021                     ?___awmod:
  1036                           	opt stack 0
  1037  000021                     ?___lwmod:
  1038                           	opt stack 0
  1039  000021                     ?_millis:
  1040                           	opt stack 0
  1041  000021                     ?___lmul:
  1042                           	opt stack 0
  1043  000021                     PortRead@ret:
  1044                           	opt stack 0
  1045  000021                     UpdateLedRegister@regIndex:
  1046                           	opt stack 0
  1047  000021                     SwitchOffAllLeds@i:
  1048                           	opt stack 0
  1049  000021                     LightLed@ledState:
  1050                           	opt stack 0
  1051  000021                     LightStatusLed@on:
  1052                           	opt stack 0
  1053  000021                     InitApp@i:
  1054                           	opt stack 0
  1055  000021                     ModbusSetExceptionStatusBit@value:
  1056                           	opt stack 0
  1057  000021                     ModbusInit@u8serno:
  1058                           	opt stack 0
  1059  000021                     ModbusBuildException@u8exception:
  1060                           	opt stack 0
  1061  000021                     PortWrite@buf:
  1062                           	opt stack 0
  1063  000021                     getHourMin@hour:
  1064                           	opt stack 0
  1065  000021                     getTotalMinutes@totalMinutes:
  1066                           	opt stack 0
  1067  000021                     SetBuzzerDuty@dc:
  1068                           	opt stack 0
  1069  000021                     SetTime@newTime:
  1070                           	opt stack 0
  1071  000021                     ModbusGetLastCommand@address:
  1072                           	opt stack 0
  1073  000021                     CopyStringToBuffer@src:
  1074                           	opt stack 0
  1075  000021                     ___wmul@multiplier:
  1076                           	opt stack 0
  1077  000021                     ___awdiv@dividend:
  1078                           	opt stack 0
  1079  000021                     ___awmod@dividend:
  1080                           	opt stack 0
  1081  000021                     ___lwmod@dividend:
  1082                           	opt stack 0
  1083  000021                     ___lmul@multiplier:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x20
  1087  000021                     	ds	1
  1088  000022                     ??_ModbusSetExceptionStatusBit:
  1089  000022                     ??_ModbusGetRxBufferHeader:
  1090  000022                     ??_ModbusGetRxBuffer:
  1091  000022                     LightLed@blink:
  1092                           	opt stack 0
  1093  000022                     LightStatusLed@blink:
  1094                           	opt stack 0
  1095  000022                     ModbusInit@u8txenpin:
  1096                           	opt stack 0
  1097  000022                     ModbusBuildException@u8func:
  1098                           	opt stack 0
  1099  000022                     ProcessLightBlock@curMs:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x21
  1103  000022                     	ds	1
  1104  000023                     ??_LoadNextEvent:
  1105  000023                     ??_ModbusCalcCRC:
  1106  000023                     ??_LightLed:
  1107  000023                     ??_LightStatusLed:
  1108  000023                     ??_SetBuzzerDuty:
  1109  000023                     PortWrite@buflen:
  1110                           	opt stack 0
  1111  000023                     ModbusInit@u8id:
  1112                           	opt stack 0
  1113  000023                     ModbusGetRxBufferHeader@i:
  1114                           	opt stack 0
  1115  000023                     ModbusGetRxBuffer@bBuffOverflow:
  1116                           	opt stack 0
  1117  000023                     CopyStringToBuffer@len:
  1118                           	opt stack 0
  1119  000023                     getHourMin@min:
  1120                           	opt stack 0
  1121  000023                     ModbusGetLastCommand@count:
  1122                           	opt stack 0
  1123  000023                     ___wmul@multiplicand:
  1124                           	opt stack 0
  1125  000023                     ___awdiv@divisor:
  1126                           	opt stack 0
  1127  000023                     ___awmod@divisor:
  1128                           	opt stack 0
  1129  000023                     ___lwmod@divisor:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x22
  1133  000023                     	ds	1
  1134  000024                     ??_ProcessLightBlock:
  1135  000024                     ??_CopyStringToBuffer:
  1136  000024                     PortWrite@i:
  1137                           	opt stack 0
  1138  000024                     ModbusSetExceptionStatusBit@bitNum:
  1139                           	opt stack 0
  1140  000024                     _ModbusInit$1883:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x23
  1144  000024                     	ds	1
  1145  000025                     ModbusCalcCRC@u8length:
  1146                           	opt stack 0
  1147  000025                     ___awdiv@counter:
  1148                           	opt stack 0
  1149  000025                     ___awmod@counter:
  1150                           	opt stack 0
  1151  000025                     ___lwmod@counter:
  1152                           	opt stack 0
  1153  000025                     LoadNextEvent@totalMinutes:
  1154                           	opt stack 0
  1155  000025                     ModbusGetLastCommand@command:
  1156                           	opt stack 0
  1157  000025                     ___wmul@product:
  1158                           	opt stack 0
  1159  000025                     millis@ret:
  1160                           	opt stack 0
  1161  000025                     ___lmul@multiplicand:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0x24
  1165  000025                     	ds	1
  1166  000026                     ?_isleap:
  1167                           	opt stack 0
  1168  000026                     LightLed@ledNum:
  1169                           	opt stack 0
  1170  000026                     Modbus@u8txenpin:
  1171                           	opt stack 0
  1172  000026                     CopyStringToBuffer@objId:
  1173                           	opt stack 0
  1174  000026                     ___awdiv@sign:
  1175                           	opt stack 0
  1176  000026                     ___awmod@sign:
  1177                           	opt stack 0
  1178  000026                     ModbusCalcCRC@temp2:
  1179                           	opt stack 0
  1180  000026                     isleap@yr:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x25
  1184  000026                     	ds	1
  1185  000027                     ?___lwdiv:
  1186                           	opt stack 0
  1187  000027                     LightLed@ststusIndex:
  1188                           	opt stack 0
  1189  000027                     LoadNextEvent@v1:
  1190                           	opt stack 0
  1191  000027                     Modbus@u8serno:
  1192                           	opt stack 0
  1193  000027                     CopyStringToBuffer@i:
  1194                           	opt stack 0
  1195  000027                     ___awdiv@quotient:
  1196                           	opt stack 0
  1197  000027                     ___lwdiv@dividend:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x26
  1201  000027                     	ds	1
  1202  000028                     ??_isleap:
  1203  000028                     LightLed@statusShift:
  1204                           	opt stack 0
  1205  000028                     LightStatusLed@row:
  1206                           	opt stack 0
  1207  000028                     Modbus@tmpModbusId:
  1208                           	opt stack 0
  1209  000028                     ModbusCalcCRC@flag:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x27
  1213  000028                     	ds	1
  1214  000029                     ??_SoundPlayNextStep:
  1215  000029                     ??_ResetEvent:
  1216  000029                     SwitchOffAllDiaryLeds@i:
  1217                           	opt stack 0
  1218  000029                     ShowFailure@additionalLed:
  1219                           	opt stack 0
  1220  000029                     ResetEventFromCommand@state:
  1221                           	opt stack 0
  1222  000029                     ___lwdiv@divisor:
  1223                           	opt stack 0
  1224  000029                     CheckFunc20@startAddrBytes:
  1225                           	opt stack 0
  1226  000029                     ___lmul@product:
  1227                           	opt stack 0
  1228                           
  1229                           ; 4 bytes @ 0x28
  1230  000029                     	ds	1
  1231  00002A                     ??_InitFromEeprom:
  1232  00002A                     ModbusCalcCRC@i:
  1233                           	opt stack 0
  1234  00002A                     _isleap$2309:
  1235                           	opt stack 0
  1236  00002A                     _ResetEventFromCommand$917:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x29
  1240  00002A                     	ds	1
  1241  00002B                     ResetEvent@state:
  1242                           	opt stack 0
  1243  00002B                     ModbusCalcCRC@j:
  1244                           	opt stack 0
  1245  00002B                     ___lwdiv@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x2A
  1249  00002B                     	ds	1
  1250  00002C                     InitFromEeprom@eeSoundCountAddress:
  1251                           	opt stack 0
  1252  00002C                     _ResetEvent$914:
  1253                           	opt stack 0
  1254  00002C                     ModbusCalcCRC@temp:
  1255                           	opt stack 0
  1256  00002C                     ___lwdiv@quotient:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2B
  1260  00002C                     	ds	1
  1261  00002D                     CheckFunc20@reqCount:
  1262                           	opt stack 0
  1263  00002D                     SetHourMin@newHour:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x2C
  1267  00002D                     	ds	1
  1268  00002E                     ?_months_to_days:
  1269                           	opt stack 0
  1270  00002E                     ?_years_to_days:
  1271                           	opt stack 0
  1272  00002E                     CheckFunc20@resultLen:
  1273                           	opt stack 0
  1274  00002E                     SoundPlayNextStep@stepDuty:
  1275                           	opt stack 0
  1276  00002E                     ModbusSendTxBuffer@u16crc:
  1277                           	opt stack 0
  1278  00002E                     months_to_days@month:
  1279                           	opt stack 0
  1280  00002E                     years_to_days@yr:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x2D
  1284  00002E                     	ds	1
  1285  00002F                     SetHourMin@newMin:
  1286                           	opt stack 0
  1287  00002F                     CheckFunc20@recLenBytes:
  1288                           	opt stack 0
  1289                           
  1290                           ; 4 bytes @ 0x2E
  1291  00002F                     	ds	1
  1292  000030                     ??_ModbusProcess_FC20:
  1293  000030                     ??_ModbusProcess_FC21:
  1294  000030                     SoundPlayNextStep@duration:
  1295                           	opt stack 0
  1296  000030                     ModbusProcess_FC7@u8CopyBufferSize:
  1297                           	opt stack 0
  1298  000030                     ModbusProcess_FC17@u8CopyBufferSize:
  1299                           	opt stack 0
  1300  000030                     ModbusProcess_FC43@devIdCode:
  1301                           	opt stack 0
  1302  000030                     ModbusProcess_FC101@u8CopyBufferSize:
  1303                           	opt stack 0
  1304  000030                     ModbusProcess_FC102@u8CopyBufferSize:
  1305                           	opt stack 0
  1306  000030                     ModbusProcess_FC1@regs:
  1307                           	opt stack 0
  1308  000030                     ModbusProcess_FC3@regs:
  1309                           	opt stack 0
  1310  000030                     ModbusProcess_FC5@regs:
  1311                           	opt stack 0
  1312  000030                     ModbusProcess_FC6@regs:
  1313                           	opt stack 0
  1314  000030                     ModbusProcess_FC15@regs:
  1315                           	opt stack 0
  1316  000030                     ModbusProcess_FC16@regs:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x2F
  1320  000030                     	ds	1
  1321  000031                     ModbusProcess_FC43@u8CopyBufferSize:
  1322                           	opt stack 0
  1323  000031                     SetHourMin@sec:
  1324                           	opt stack 0
  1325  000031                     PlaySound@playDuration:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x30
  1329  000031                     	ds	1
  1330  000032                     ??_ModbusProcess_FC1:
  1331  000032                     ??_ModbusProcess_FC5:
  1332  000032                     ??_ModbusProcess_FC15:
  1333  000032                     ??_years_to_days:
  1334  000032                     ModbusProcess_FC3@u8size:
  1335                           	opt stack 0
  1336  000032                     ModbusProcess_FC6@u8size:
  1337                           	opt stack 0
  1338  000032                     ModbusProcess_FC16@u8size:
  1339                           	opt stack 0
  1340  000032                     ModbusProcess_FC21@requestDataLen:
  1341                           	opt stack 0
  1342  000032                     ModbusProcess_FC43@objId:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x31
  1346  000032                     	ds	1
  1347  000033                     ??_ModbusProcess_FC3:
  1348  000033                     ??_ModbusProcess_FC6:
  1349  000033                     ??_SetHourMin:
  1350  000033                     ??_PlaySound:
  1351  000033                     CheckFunc20@bytesCount:
  1352                           	opt stack 0
  1353  000033                     ModbusProcess_FC21@u8CopyBufferSize:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x32
  1357  000033                     	ds	1
  1358  000034                     CheckFunc20@offset:
  1359                           	opt stack 0
  1360  000034                     ModbusProcess_FC21@startAddrsBytes:
  1361                           	opt stack 0
  1362  000034                     years_to_days@ret:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x33
  1366  000034                     	ds	2
  1367  000036                     ModbusProcess_FC21@recLenBytes:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x35
  1371  000036                     	ds	1
  1372  000037                     SetHourMin@tmpSec:
  1373                           	opt stack 0
  1374  000037                     PlaySound@soundId:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x36
  1378  000037                     	ds	1
  1379  000038                     SetHourMin@secToNext6Sec:
  1380                           	opt stack 0
  1381  000038                     PlaySound@soundAddr:
  1382                           	opt stack 0
  1383  000038                     ModbusProcess_FC21@i:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x37
  1387  000038                     	ds	1
  1388  000039                     tblptru	equ	0xFF8
  1389                           tblptrh	equ	0xFF7
  1390                           tblptrl	equ	0xFF6
  1391                           tablat	equ	0xFF5
  1392                           postinc0	equ	0xFEE
  1393                           wreg	equ	0xFE8
  1394                           postdec1	equ	0xFE5
  1395                           fsr1h	equ	0xFE2
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398                           ; 1 bytes @ 0x38
  1399 ;;
  1400 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
  1401 ;;
  1402 ;; *************** function _main *****************
  1403 ;; Defined at:
  1404 ;;		line 834 in file "main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  minute          1   27[BANK3 ] unsigned char 
  1409 ;;  hour            1   26[BANK3 ] unsigned char 
  1410 ;;  totalMinutes    2   29[BANK3 ] unsigned int 
  1411 ;;  curMs           4   31[BANK3 ] unsigned long 
  1412 ;;  buttonPinCur    1   28[BANK3 ] unsigned char 
  1413 ;;  lastDebounce    4   17[BANK3 ] unsigned long 
  1414 ;;  lastMs          4   13[BANK3 ] unsigned long 
  1415 ;;  buttonPresse    4    0        unsigned long 
  1416 ;;  oldMinute       2   22[BANK3 ] unsigned int 
  1417 ;;  buttonState     1   25[BANK3 ] unsigned char 
  1418 ;;  lastButtonPi    1   24[BANK3 ] unsigned char 
  1419 ;;  debounceDela    1   21[BANK3 ] unsigned char 
  1420 ;;  buttonPresse    1   12[BANK3 ] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1430 ;;      Params:         0       0       0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0      23       0       0
  1432 ;;      Temps:          0       0       0       0      12       0       0
  1433 ;;      Totals:         0       0       0       0      35       0       0
  1434 ;;Total ram usage:       35 bytes
  1435 ;; Hardware stack levels required when called:    8
  1436 ;; This function calls:
  1437 ;;		_AddSecond
  1438 ;;		_ConfigureOscillator
  1439 ;;		_GetTime
  1440 ;;		_InitApp
  1441 ;;		_InitFromEeprom
  1442 ;;		_LightStatusLed
  1443 ;;		_LoadNextEvent
  1444 ;;		_ModbusPoll
  1445 ;;		_ProcessDiary
  1446 ;;		_ProcessLightBlock
  1447 ;;		_ResetEvent
  1448 ;;		_ResetEventFromCommand
  1449 ;;		_SoundPlayNextStep
  1450 ;;		_StopPlaying
  1451 ;;		_SwitchOffAllDiaryLeds
  1452 ;;		_getHourMin
  1453 ;;		_getTotalMinutes
  1454 ;;		_io_poll
  1455 ;;		_millis
  1456 ;;		_pwm_init
  1457 ;; This function is called by:
  1458 ;;		Startup code after reset
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text0
  1463  000EC6                     __ptext0:
  1464                           	opt stack 0
  1465  000EC6                     _main:
  1466                           	opt stack 23
  1467                           
  1468                           ;incstack = 0
  1469  000EC6  FFFF               	dw	65535
  1470                           
  1471                           ;main.c: 837: ConfigureOscillator();
  1472  000EC8  ECAB  F001         	call	_ConfigureOscillator	;wreg free
  1473                           
  1474                           ;main.c: 840: InitApp();
  1475  000ECC  EC23  F01B         	call	_InitApp	;wreg free
  1476                           
  1477                           ;main.c: 844: InitFromEeprom();
  1478  000ED0  EC06  F019         	call	_InitFromEeprom	;wreg free
  1479                           
  1480                           ;main.c: 849: unsigned long lastMs = millis();
  1481  000ED4  ECD1  F000         	call	_millis	;wreg free
  1482  000ED8  C021  F30D         	movff	?_millis,main@lastMs
  1483  000EDC  C022  F30E         	movff	?_millis+1,main@lastMs+1
  1484  000EE0  C023  F30F         	movff	?_millis+2,main@lastMs+2
  1485  000EE4  C024  F310         	movff	?_millis+3,main@lastMs+3
  1486                           
  1487                           ;main.c: 852: pwm_init();
  1488  000EE8  EC3F  F001         	call	_pwm_init	;wreg free
  1489                           
  1490                           ;main.c: 856: bool buttonPressed;
  1491                           ;main.c: 857: unsigned long buttonPressedTime;
  1492                           ;main.c: 859: uint8_t buttonState = 1;
  1493  000EEC  0E01               	movlw	1
  1494  000EEE  0103               	movlb	3	; () banked
  1495  000EF0  6F19               	movwf	main@buttonState& (0+255),b
  1496                           
  1497                           ; BSR set to: 3
  1498                           ;main.c: 860: uint8_t lastButtonPinState = 1;
  1499  000EF2  0E01               	movlw	1
  1500  000EF4  0103               	movlb	3	; () banked
  1501  000EF6  6F18               	movwf	main@lastButtonPinState& (0+255),b
  1502                           
  1503                           ; BSR set to: 3
  1504                           ;main.c: 864: unsigned long lastDebounceTime = 0;
  1505  000EF8  0E00               	movlw	0
  1506  000EFA  0103               	movlb	3	; () banked
  1507  000EFC  6F11               	movwf	main@lastDebounceTime& (0+255),b
  1508  000EFE  0E00               	movlw	0
  1509  000F00  6F12               	movwf	(main@lastDebounceTime+1)& (0+255),b
  1510  000F02  0E00               	movlw	0
  1511  000F04  6F13               	movwf	(main@lastDebounceTime+2)& (0+255),b
  1512  000F06  0E00               	movlw	0
  1513  000F08  6F14               	movwf	(main@lastDebounceTime+3)& (0+255),b
  1514                           
  1515                           ; BSR set to: 3
  1516                           ;main.c: 865: uint8_t debounceDelay = 50;
  1517  000F0A  0E32               	movlw	50
  1518  000F0C  0103               	movlb	3	; () banked
  1519  000F0E  6F15               	movwf	main@debounceDelay& (0+255),b
  1520                           
  1521                           ; BSR set to: 3
  1522                           ;main.c: 873: uint16_t oldMinute = 0xFFFF;
  1523  000F10  0103               	movlb	3	; () banked
  1524  000F12  6916               	setf	main@oldMinute& (0+255),b
  1525  000F14  6917               	setf	(main@oldMinute+1)& (0+255),b
  1526                           
  1527                           ; BSR set to: 3
  1528                           ;main.c: 875: LightStatusLed(0x07, 1, 0);
  1529  000F16  0E01               	movlw	1
  1530  000F18  6E21               	movwf	LightStatusLed@on,c
  1531  000F1A  0E00               	movlw	0
  1532  000F1C  6E22               	movwf	LightStatusLed@blink,c
  1533  000F1E  0E07               	movlw	7
  1534  000F20  ECA0  F014         	call	_LightStatusLed
  1535                           
  1536                           ;main.c: 876: LightStatusLed(0x05, 1, 1);
  1537  000F24  0E01               	movlw	1
  1538  000F26  6E21               	movwf	LightStatusLed@on,c
  1539  000F28  0E01               	movlw	1
  1540  000F2A  6E22               	movwf	LightStatusLed@blink,c
  1541  000F2C  0E05               	movlw	5
  1542  000F2E  ECA0  F014         	call	_LightStatusLed
  1543  000F32                     l450:
  1544  000F32  FFFF               	dw	65535	; assembler added errata NOP
  1545                           
  1546                           ;main.c: 878: {
  1547                           ;main.c: 879: unsigned long curMs = millis();
  1548  000F34  ECD1  F000         	call	_millis	;wreg free
  1549  000F38  C021  F31F         	movff	?_millis,main@curMs
  1550  000F3C  C022  F320         	movff	?_millis+1,main@curMs+1
  1551  000F40  C023  F321         	movff	?_millis+2,main@curMs+2
  1552  000F44  C024  F322         	movff	?_millis+3,main@curMs+3
  1553                           
  1554                           ;main.c: 880: ProcessLightBlock(&curMs);
  1555  000F48  0E1F               	movlw	low main@curMs
  1556  000F4A  6E22               	movwf	ProcessLightBlock@curMs,c
  1557  000F4C  0E03               	movlw	high main@curMs
  1558  000F4E  6E23               	movwf	ProcessLightBlock@curMs+1,c
  1559  000F50  EC42  F009         	call	_ProcessLightBlock	;wreg free
  1560                           
  1561                           ;main.c: 882: if(_isSoundPlaying && curMs >= _playingEndMs)
  1562  000F54  0100               	movlb	0	; () banked
  1563  000F56  51EF               	movf	__isSoundPlaying& (0+255),w,b
  1564  000F58  B4D8               	btfsc	status,2,c
  1565  000F5A  D013               	goto	l8617
  1566                           
  1567                           ; BSR set to: 0
  1568  000F5C  0101               	movlb	1	; () banked
  1569  000F5E  5110               	movf	__playingEndMs& (0+255),w,b
  1570  000F60  0103               	movlb	3	; () banked
  1571  000F62  5D1F               	subwf	main@curMs& (0+255),w,b
  1572  000F64  0101               	movlb	1	; () banked
  1573  000F66  5111               	movf	(__playingEndMs+1)& (0+255),w,b
  1574  000F68  0103               	movlb	3	; () banked
  1575  000F6A  5920               	subwfb	(main@curMs+1)& (0+255),w,b
  1576  000F6C  0101               	movlb	1	; () banked
  1577  000F6E  5112               	movf	(__playingEndMs+2)& (0+255),w,b
  1578  000F70  0103               	movlb	3	; () banked
  1579  000F72  5921               	subwfb	(main@curMs+2)& (0+255),w,b
  1580  000F74  0101               	movlb	1	; () banked
  1581  000F76  5113               	movf	(__playingEndMs+3)& (0+255),w,b
  1582  000F78  0103               	movlb	3	; () banked
  1583  000F7A  5922               	subwfb	(main@curMs+3)& (0+255),w,b
  1584  000F7C  B0D8               	btfsc	status,0,c
  1585                           
  1586                           ; BSR set to: 3
  1587                           ;main.c: 883: {
  1588                           ;main.c: 884: SoundPlayNextStep();
  1589  000F7E  ECA5  F015         	call	_SoundPlayNextStep	;wreg free
  1590  000F82                     l8617:
  1591  000F82  FFFF               	dw	65535	; assembler added errata NOP
  1592                           
  1593                           ;main.c: 885: }
  1594                           ;main.c: 888: uint8_t buttonPinCurState = PORTCbits.RC1;
  1595  000F84  0E00               	movlw	0
  1596  000F86  B282               	btfsc	3970,1,c	;volatile
  1597  000F88  0E01               	movlw	1
  1598  000F8A  0103               	movlb	3	; () banked
  1599  000F8C  6F1C               	movwf	main@buttonPinCurState& (0+255),b
  1600                           
  1601                           ; BSR set to: 3
  1602                           ;main.c: 894: if (buttonPinCurState != lastButtonPinState)
  1603  000F8E  0103               	movlb	3	; () banked
  1604  000F90  5118               	movf	main@lastButtonPinState& (0+255),w,b
  1605  000F92  0103               	movlb	3	; () banked
  1606  000F94  191C               	xorwf	main@buttonPinCurState& (0+255),w,b
  1607  000F96  B4D8               	btfsc	status,2,c
  1608  000F98  D00B               	goto	l8623
  1609                           
  1610                           ; BSR set to: 3
  1611                           ;main.c: 895: {
  1612                           ;main.c: 897: lastDebounceTime = curMs;
  1613  000F9A  C31F  F311         	movff	main@curMs,main@lastDebounceTime
  1614  000F9E  C320  F312         	movff	main@curMs+1,main@lastDebounceTime+1
  1615  000FA2  C321  F313         	movff	main@curMs+2,main@lastDebounceTime+2
  1616  000FA6  C322  F314         	movff	main@curMs+3,main@lastDebounceTime+3
  1617                           
  1618                           ;main.c: 898: lastButtonPinState = buttonPinCurState;
  1619  000FAA  C31C  F318         	movff	main@buttonPinCurState,main@lastButtonPinState
  1620                           
  1621                           ;main.c: 899: }
  1622  000FAE  D06B               	goto	l8643
  1623  000FB0                     l8623:
  1624  000FB0  FFFF               	dw	65535	; assembler added errata NOP
  1625                           
  1626                           ; BSR set to: 3
  1627                           ;main.c: 900: else
  1628                           ;main.c: 901: {
  1629                           ;main.c: 902: if ((curMs - lastDebounceTime) > debounceDelay)
  1630  000FB2  C311  F300         	movff	main@lastDebounceTime,??_main
  1631  000FB6  C312  F301         	movff	main@lastDebounceTime+1,??_main+1
  1632  000FBA  C313  F302         	movff	main@lastDebounceTime+2,??_main+2
  1633  000FBE  C314  F303         	movff	main@lastDebounceTime+3,??_main+3
  1634  000FC2  0103               	movlb	3	; () banked
  1635  000FC4  1F00               	comf	??_main& (0+255),f,b
  1636  000FC6  1F01               	comf	(??_main+1)& (0+255),f,b
  1637  000FC8  1F02               	comf	(??_main+2)& (0+255),f,b
  1638  000FCA  1F03               	comf	(??_main+3)& (0+255),f,b
  1639  000FCC  2B00               	incf	??_main& (0+255),f,b
  1640  000FCE  0E00               	movlw	0
  1641  000FD0  2301               	addwfc	(??_main+1)& (0+255),f,b
  1642  000FD2  2302               	addwfc	(??_main+2)& (0+255),f,b
  1643  000FD4  2303               	addwfc	(??_main+3)& (0+255),f,b
  1644  000FD6  0103               	movlb	3	; () banked
  1645  000FD8  511F               	movf	main@curMs& (0+255),w,b
  1646  000FDA  0103               	movlb	3	; () banked
  1647  000FDC  2500               	addwf	??_main& (0+255),w,b
  1648  000FDE  0103               	movlb	3	; () banked
  1649  000FE0  6F04               	movwf	(??_main+4)& (0+255),b
  1650  000FE2  0103               	movlb	3	; () banked
  1651  000FE4  5120               	movf	(main@curMs+1)& (0+255),w,b
  1652  000FE6  0103               	movlb	3	; () banked
  1653  000FE8  2101               	addwfc	(??_main+1)& (0+255),w,b
  1654  000FEA  0103               	movlb	3	; () banked
  1655  000FEC  6F05               	movwf	(??_main+5)& (0+255),b
  1656  000FEE  0103               	movlb	3	; () banked
  1657  000FF0  5121               	movf	(main@curMs+2)& (0+255),w,b
  1658  000FF2  0103               	movlb	3	; () banked
  1659  000FF4  2102               	addwfc	(??_main+2)& (0+255),w,b
  1660  000FF6  0103               	movlb	3	; () banked
  1661  000FF8  6F06               	movwf	(??_main+6)& (0+255),b
  1662  000FFA  0103               	movlb	3	; () banked
  1663  000FFC  5122               	movf	(main@curMs+3)& (0+255),w,b
  1664  000FFE  0103               	movlb	3	; () banked
  1665  001000  2103               	addwfc	(??_main+3)& (0+255),w,b
  1666  001002  0103               	movlb	3	; () banked
  1667  001004  6F07               	movwf	(??_main+7)& (0+255),b
  1668  001006  C315  F308         	movff	main@debounceDelay,??_main+8
  1669  00100A  0103               	movlb	3	; () banked
  1670  00100C  6B09               	clrf	(??_main+9)& (0+255),b
  1671  00100E  6B0A               	clrf	(??_main+10)& (0+255),b
  1672  001010  6B0B               	clrf	(??_main+11)& (0+255),b
  1673  001012  0103               	movlb	3	; () banked
  1674  001014  5104               	movf	(??_main+4)& (0+255),w,b
  1675  001016  0103               	movlb	3	; () banked
  1676  001018  5D08               	subwf	(??_main+8)& (0+255),w,b
  1677  00101A  0103               	movlb	3	; () banked
  1678  00101C  5105               	movf	(??_main+5)& (0+255),w,b
  1679  00101E  0103               	movlb	3	; () banked
  1680  001020  5909               	subwfb	(??_main+9)& (0+255),w,b
  1681  001022  0103               	movlb	3	; () banked
  1682  001024  5106               	movf	(??_main+6)& (0+255),w,b
  1683  001026  0103               	movlb	3	; () banked
  1684  001028  590A               	subwfb	(??_main+10)& (0+255),w,b
  1685  00102A  0103               	movlb	3	; () banked
  1686  00102C  5107               	movf	(??_main+7)& (0+255),w,b
  1687  00102E  0103               	movlb	3	; () banked
  1688  001030  590B               	subwfb	(??_main+11)& (0+255),w,b
  1689  001032  B0D8               	btfsc	status,0,c
  1690  001034  D028               	goto	l8643
  1691                           
  1692                           ; BSR set to: 3
  1693                           ;main.c: 903: {
  1694                           ;main.c: 908: if (buttonPinCurState != buttonState)
  1695  001036  0103               	movlb	3	; () banked
  1696  001038  5119               	movf	main@buttonState& (0+255),w,b
  1697  00103A  0103               	movlb	3	; () banked
  1698  00103C  191C               	xorwf	main@buttonPinCurState& (0+255),w,b
  1699  00103E  B4D8               	btfsc	status,2,c
  1700  001040  D022               	goto	l8643
  1701                           
  1702                           ; BSR set to: 3
  1703                           ;main.c: 909: {
  1704                           ;main.c: 910: buttonState = buttonPinCurState;
  1705  001042  C31C  F319         	movff	main@buttonPinCurState,main@buttonState
  1706                           
  1707                           ; BSR set to: 3
  1708                           ;main.c: 914: if (buttonState == 0)
  1709  001046  0103               	movlb	3	; () banked
  1710  001048  5119               	movf	main@buttonState& (0+255),w,b
  1711  00104A  0103               	movlb	3	; () banked
  1712  00104C  A4D8               	btfss	status,2,c
  1713  00104E  D017               	goto	l8641
  1714                           
  1715                           ; BSR set to: 3
  1716                           ;main.c: 915: {
  1717                           ;main.c: 916: buttonPressed = 1;
  1718  001050  0E01               	movlw	1
  1719  001052  0103               	movlb	3	; () banked
  1720  001054  6F0C               	movwf	main@buttonPressed& (0+255),b
  1721                           
  1722                           ;main.c: 918: if(_eventFromCommand.IsFire)
  1723  001056  0100               	movlb	0	; () banked
  1724  001058  51D2               	movf	__eventFromCommand& (0+255),w,b
  1725  00105A  B4D8               	btfsc	status,2,c
  1726  00105C  D004               	goto	l8635
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 919: {
  1730                           ;main.c: 920: ResetEventFromCommand(1);
  1731  00105E  0E01               	movlw	1
  1732  001060  EC41  F01E         	call	_ResetEventFromCommand
  1733                           
  1734                           ;main.c: 921: }
  1735  001064  D010               	goto	l8643
  1736  001066                     l8635:
  1737  001066  FFFF               	dw	65535	; assembler added errata NOP
  1738                           
  1739                           ;main.c: 923: else if(_currenDiaryEvent.IsFire)
  1740  001068  5039               	movf	__currenDiaryEvent,w,c
  1741  00106A  B4D8               	btfsc	status,2,c
  1742  00106C  D004               	goto	l8639
  1743                           
  1744                           ;main.c: 924: {
  1745                           ;main.c: 925: ResetEvent(1);
  1746  00106E  0E01               	movlw	1
  1747  001070  EC29  F01D         	call	_ResetEvent
  1748                           
  1749                           ;main.c: 926: }
  1750  001074  D008               	goto	l8643
  1751  001076                     l8639:
  1752  001076  FFFF               	dw	65535	; assembler added errata NOP
  1753                           
  1754                           ;main.c: 927: else
  1755                           ;main.c: 928: {
  1756                           ;main.c: 929: StopPlaying();
  1757  001078  EC4A  F001         	call	_StopPlaying	;wreg free
  1758                           
  1759                           ;main.c: 930: }
  1760                           ;main.c: 932: }
  1761  00107C  D004               	goto	l8643
  1762  00107E                     l8641:
  1763  00107E  FFFF               	dw	65535	; assembler added errata NOP
  1764                           
  1765                           ;main.c: 933: else
  1766                           ;main.c: 934: {
  1767                           ;main.c: 935: buttonPressed = 0;
  1768  001080  0E00               	movlw	0
  1769  001082  0103               	movlb	3	; () banked
  1770  001084  6F0C               	movwf	main@buttonPressed& (0+255),b
  1771  001086                     l8643:
  1772  001086  FFFF               	dw	65535	; assembler added errata NOP
  1773                           
  1774                           ;main.c: 936: }
  1775                           ;main.c: 937: }
  1776                           ;main.c: 938: }
  1777                           ;main.c: 939: }
  1778                           ;main.c: 960: if(curMs - lastMs >= 1000)
  1779  001088  C30D  F300         	movff	main@lastMs,??_main
  1780  00108C  C30E  F301         	movff	main@lastMs+1,??_main+1
  1781  001090  C30F  F302         	movff	main@lastMs+2,??_main+2
  1782  001094  C310  F303         	movff	main@lastMs+3,??_main+3
  1783  001098  0103               	movlb	3	; () banked
  1784  00109A  1F00               	comf	??_main& (0+255),f,b
  1785  00109C  1F01               	comf	(??_main+1)& (0+255),f,b
  1786  00109E  1F02               	comf	(??_main+2)& (0+255),f,b
  1787  0010A0  1F03               	comf	(??_main+3)& (0+255),f,b
  1788  0010A2  2B00               	incf	??_main& (0+255),f,b
  1789  0010A4  0E00               	movlw	0
  1790  0010A6  2301               	addwfc	(??_main+1)& (0+255),f,b
  1791  0010A8  2302               	addwfc	(??_main+2)& (0+255),f,b
  1792  0010AA  2303               	addwfc	(??_main+3)& (0+255),f,b
  1793  0010AC  0103               	movlb	3	; () banked
  1794  0010AE  511F               	movf	main@curMs& (0+255),w,b
  1795  0010B0  0103               	movlb	3	; () banked
  1796  0010B2  2500               	addwf	??_main& (0+255),w,b
  1797  0010B4  0103               	movlb	3	; () banked
  1798  0010B6  6F04               	movwf	(??_main+4)& (0+255),b
  1799  0010B8  0103               	movlb	3	; () banked
  1800  0010BA  5120               	movf	(main@curMs+1)& (0+255),w,b
  1801  0010BC  0103               	movlb	3	; () banked
  1802  0010BE  2101               	addwfc	(??_main+1)& (0+255),w,b
  1803  0010C0  0103               	movlb	3	; () banked
  1804  0010C2  6F05               	movwf	(??_main+5)& (0+255),b
  1805  0010C4  0103               	movlb	3	; () banked
  1806  0010C6  5121               	movf	(main@curMs+2)& (0+255),w,b
  1807  0010C8  0103               	movlb	3	; () banked
  1808  0010CA  2102               	addwfc	(??_main+2)& (0+255),w,b
  1809  0010CC  0103               	movlb	3	; () banked
  1810  0010CE  6F06               	movwf	(??_main+6)& (0+255),b
  1811  0010D0  0103               	movlb	3	; () banked
  1812  0010D2  5122               	movf	(main@curMs+3)& (0+255),w,b
  1813  0010D4  0103               	movlb	3	; () banked
  1814  0010D6  2103               	addwfc	(??_main+3)& (0+255),w,b
  1815  0010D8  0103               	movlb	3	; () banked
  1816  0010DA  6F07               	movwf	(??_main+7)& (0+255),b
  1817  0010DC  0103               	movlb	3	; () banked
  1818  0010DE  5107               	movf	(??_main+7)& (0+255),w,b
  1819  0010E0  0103               	movlb	3	; () banked
  1820  0010E2  1106               	iorwf	(??_main+6)& (0+255),w,b
  1821  0010E4  E108               	bnz	u7920
  1822  0010E6  0EE8               	movlw	232
  1823  0010E8  0103               	movlb	3	; () banked
  1824  0010EA  5D04               	subwf	(??_main+4)& (0+255),w,b
  1825  0010EC  0E03               	movlw	3
  1826  0010EE  0103               	movlb	3	; () banked
  1827  0010F0  5905               	subwfb	(??_main+5)& (0+255),w,b
  1828  0010F2  A0D8               	btfss	status,0,c
  1829  0010F4  D0A0               	goto	l8687
  1830  0010F6                     u7920:
  1831                           
  1832                           ; BSR set to: 3
  1833                           ;main.c: 961: {
  1834                           ;main.c: 962: AddSecond();
  1835  0010F6  EC55  F001         	call	_AddSecond	;wreg free
  1836                           
  1837                           ;main.c: 964: if(_eventFromCommand.IsFire && *GetTime() >= _eventFromCommand.ResetSecond
      +                          )
  1838  0010FA  0100               	movlb	0	; () banked
  1839  0010FC  51D2               	movf	__eventFromCommand& (0+255),w,b
  1840  0010FE  B4D8               	btfsc	status,2,c
  1841  001100  D01D               	goto	l8653
  1842                           
  1843                           ; BSR set to: 0
  1844  001102  EC92  F001         	call	_GetTime	;wreg free
  1845  001106  C021  FFD9         	movff	?_GetTime,fsr2l
  1846  00110A  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1847  00110E  0100               	movlb	0	; () banked
  1848  001110  51D4               	movf	(__eventFromCommand+2)& (0+255),w,b
  1849  001112  5CDE               	subwf	postinc2,w,c
  1850  001114  0100               	movlb	0	; () banked
  1851  001116  51D5               	movf	(__eventFromCommand+3)& (0+255),w,b
  1852  001118  58DE               	subwfb	postinc2,w,c
  1853  00111A  0100               	movlb	0	; () banked
  1854  00111C  51D6               	movf	(__eventFromCommand+4)& (0+255),w,b
  1855  00111E  58DE               	subwfb	postinc2,w,c
  1856  001120  50DE               	movf	postinc2,w,c
  1857  001122  0A80               	xorlw	128
  1858  001124  0103               	movlb	3	; () banked
  1859  001126  6F04               	movwf	(??_main+4)& (0+255),b
  1860  001128  0100               	movlb	0	; () banked
  1861  00112A  51D7               	movf	(__eventFromCommand+5)& (0+255),w,b
  1862  00112C  0A80               	xorlw	128
  1863  00112E  0103               	movlb	3	; () banked
  1864  001130  5904               	subwfb	(??_main+4)& (0+255),w,b
  1865  001132  A0D8               	btfss	status,0,c
  1866  001134  D003               	goto	l8653
  1867                           
  1868                           ; BSR set to: 3
  1869                           ;main.c: 965: {
  1870                           ;main.c: 966: ResetEventFromCommand(0);
  1871  001136  0E00               	movlw	0
  1872  001138  EC41  F01E         	call	_ResetEventFromCommand
  1873  00113C                     l8653:
  1874  00113C  FFFF               	dw	65535	; assembler added errata NOP
  1875                           
  1876                           ;main.c: 967: }
  1877                           ;main.c: 968: if(_currenDiaryEvent.IsFire && *GetTime() >= _currenDiaryEvent.ResetSecond
      +                          )
  1878  00113E  5039               	movf	__currenDiaryEvent,w,c
  1879  001140  B4D8               	btfsc	status,2,c
  1880  001142  D019               	goto	l8659
  1881  001144  EC92  F001         	call	_GetTime	;wreg free
  1882  001148  C021  FFD9         	movff	?_GetTime,fsr2l
  1883  00114C  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1884  001150  503D               	movf	__currenDiaryEvent+4,w,c
  1885  001152  5CDE               	subwf	postinc2,w,c
  1886  001154  503E               	movf	__currenDiaryEvent+5,w,c
  1887  001156  58DE               	subwfb	postinc2,w,c
  1888  001158  503F               	movf	__currenDiaryEvent+6,w,c
  1889  00115A  58DE               	subwfb	postinc2,w,c
  1890  00115C  50DE               	movf	postinc2,w,c
  1891  00115E  0A80               	xorlw	128
  1892  001160  0103               	movlb	3	; () banked
  1893  001162  6F04               	movwf	(??_main+4)& (0+255),b
  1894  001164  5040               	movf	__currenDiaryEvent+7,w,c
  1895  001166  0A80               	xorlw	128
  1896  001168  0103               	movlb	3	; () banked
  1897  00116A  5904               	subwfb	(??_main+4)& (0+255),w,b
  1898  00116C  A0D8               	btfss	status,0,c
  1899  00116E  D003               	goto	l8659
  1900                           
  1901                           ; BSR set to: 3
  1902                           ;main.c: 969: {
  1903                           ;main.c: 970: ResetEvent(0);
  1904  001170  0E00               	movlw	0
  1905  001172  EC29  F01D         	call	_ResetEvent
  1906  001176                     l8659:
  1907  001176  FFFF               	dw	65535	; assembler added errata NOP
  1908                           
  1909                           ;main.c: 971: }
  1910                           ;main.c: 973: _MODBUSInputRegs[5] = *GetTime();
  1911  001178  EC92  F001         	call	_GetTime	;wreg free
  1912  00117C  C021  FFD9         	movff	?_GetTime,fsr2l
  1913  001180  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1914  001184  CFDE F1DE          	movff	postinc2,__MODBUSInputRegs+10
  1915  001188  CFDD F1DF          	movff	postdec2,__MODBUSInputRegs+11
  1916                           
  1917                           ;main.c: 975: uint16_t totalMinutes;
  1918                           ;main.c: 976: if(getTotalMinutes(&totalMinutes) && (oldMinute != totalMinutes))
  1919  00118C  0E1D               	movlw	low main@totalMinutes
  1920  00118E  6E21               	movwf	getTotalMinutes@totalMinutes,c
  1921  001190  0E03               	movlw	high main@totalMinutes
  1922  001192  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  1923  001194  ECA7  F000         	call	_getTotalMinutes	;wreg free
  1924  001198  0900               	iorlw	0
  1925  00119A  B4D8               	btfsc	status,2,c
  1926  00119C  D043               	goto	l8685
  1927  00119E  0103               	movlb	3	; () banked
  1928  0011A0  511D               	movf	main@totalMinutes& (0+255),w,b
  1929  0011A2  0103               	movlb	3	; () banked
  1930  0011A4  1916               	xorwf	main@oldMinute& (0+255),w,b
  1931  0011A6  E106               	bnz	u7980
  1932  0011A8  0103               	movlb	3	; () banked
  1933  0011AA  511E               	movf	(main@totalMinutes+1)& (0+255),w,b
  1934  0011AC  0103               	movlb	3	; () banked
  1935  0011AE  1917               	xorwf	(main@oldMinute+1)& (0+255),w,b
  1936  0011B0  B4D8               	btfsc	status,2,c
  1937  0011B2  D038               	goto	l8685
  1938  0011B4                     u7980:
  1939                           
  1940                           ; BSR set to: 3
  1941                           ;main.c: 977: {
  1942                           ;main.c: 978: _MODBUSInputRegs[8] = totalMinutes;
  1943  0011B4  C31D  F1E4         	movff	main@totalMinutes,__MODBUSInputRegs+16
  1944  0011B8  C31E  F1E5         	movff	main@totalMinutes+1,__MODBUSInputRegs+17
  1945                           
  1946                           ; BSR set to: 3
  1947                           ;main.c: 979: uint8_t hour = 0, minute = 0;
  1948  0011BC  0E00               	movlw	0
  1949  0011BE  0103               	movlb	3	; () banked
  1950  0011C0  6F1A               	movwf	main@hour& (0+255),b
  1951  0011C2  0E00               	movlw	0
  1952  0011C4  0103               	movlb	3	; () banked
  1953  0011C6  6F1B               	movwf	main@minute& (0+255),b
  1954                           
  1955                           ; BSR set to: 3
  1956                           ;main.c: 980: getHourMin(&hour, &minute);
  1957  0011C8  0E1A               	movlw	low main@hour
  1958  0011CA  6E21               	movwf	getHourMin@hour,c
  1959  0011CC  0E03               	movlw	high main@hour
  1960  0011CE  6E22               	movwf	getHourMin@hour+1,c
  1961  0011D0  0E1B               	movlw	low main@minute
  1962  0011D2  6E23               	movwf	getHourMin@min,c
  1963  0011D4  0E03               	movlw	high main@minute
  1964  0011D6  6E24               	movwf	getHourMin@min+1,c
  1965  0011D8  EC92  F000         	call	_getHourMin	;wreg free
  1966                           
  1967                           ;main.c: 981: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1968  0011DC  0103               	movlb	3	; () banked
  1969  0011DE  511A               	movf	main@hour& (0+255),w,b
  1970  0011E0  0103               	movlb	3	; () banked
  1971  0011E2  6F00               	movwf	??_main& (0+255),b
  1972  0011E4  0103               	movlb	3	; () banked
  1973  0011E6  511B               	movf	main@minute& (0+255),w,b
  1974  0011E8  0101               	movlb	1	; () banked
  1975  0011EA  6FD6               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1976  0011EC  C300  F1D7         	movff	??_main,__MODBUSInputRegs+3
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;main.c: 984: if(totalMinutes == 0)
  1980  0011F0  0103               	movlb	3	; () banked
  1981  0011F2  511D               	movf	main@totalMinutes& (0+255),w,b
  1982  0011F4  0103               	movlb	3	; () banked
  1983  0011F6  111E               	iorwf	(main@totalMinutes+1)& (0+255),w,b
  1984  0011F8  A4D8               	btfss	status,2,c
  1985  0011FA  D00D               	goto	l8681
  1986                           
  1987                           ; BSR set to: 3
  1988                           ;main.c: 985: {
  1989                           ;main.c: 986: SwitchOffAllDiaryLeds();
  1990  0011FC  ECE7  F01F         	call	_SwitchOffAllDiaryLeds	;wreg free
  1991                           
  1992                           ;main.c: 987: _currenDiaryEvent.NextEventNum = 0xff;
  1993  001200  6841               	setf	__currenDiaryEvent+8,c
  1994                           
  1995                           ;main.c: 988: LoadNextEvent();
  1996  001202  ECFD  F011         	call	_LoadNextEvent	;wreg free
  1997                           
  1998                           ;main.c: 989: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  1999  001206  503A               	movf	__currenDiaryEvent+1,w,c
  2000  001208  0103               	movlb	3	; () banked
  2001  00120A  6F00               	movwf	??_main& (0+255),b
  2002  00120C  5041               	movf	__currenDiaryEvent+8,w,c
  2003  00120E  0101               	movlb	1	; () banked
  2004  001210  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  2005  001212  C300  F1D9         	movff	??_main,__MODBUSInputRegs+5
  2006  001216                     l8681:
  2007  001216  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;main.c: 990: }
  2010                           ;main.c: 991: oldMinute = totalMinutes;
  2011  001218  C31D  F316         	movff	main@totalMinutes,main@oldMinute
  2012  00121C  C31E  F317         	movff	main@totalMinutes+1,main@oldMinute+1
  2013                           
  2014                           ;main.c: 992: ProcessDiary();
  2015  001220  ECA2  F018         	call	_ProcessDiary	;wreg free
  2016  001224                     l8685:
  2017  001224  FFFF               	dw	65535	; assembler added errata NOP
  2018                           
  2019                           ;main.c: 993: }
  2020                           ;main.c: 997: lastMs = curMs;
  2021  001226  C31F  F30D         	movff	main@curMs,main@lastMs
  2022  00122A  C320  F30E         	movff	main@curMs+1,main@lastMs+1
  2023  00122E  C321  F30F         	movff	main@curMs+2,main@lastMs+2
  2024  001232  C322  F310         	movff	main@curMs+3,main@lastMs+3
  2025  001236                     l8687:
  2026  001236  FFFF               	dw	65535	; assembler added errata NOP
  2027                           
  2028                           ;main.c: 999: }
  2029                           ;main.c: 1000: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInp
      +                          utRegs, 15, _MODBUSHoldingRegs, 15);
  2030  001238  C0E0  F0B5         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  2031  00123C  C0E1  F0B6         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  2032  001240  0EF7               	movlw	low __MODBUSCoils
  2033  001242  0100               	movlb	0	; () banked
  2034  001244  6FB7               	movwf	ModbusPoll@coils& (0+255),b
  2035  001246  0E00               	movlw	high __MODBUSCoils
  2036  001248  0100               	movlb	0	; () banked
  2037  00124A  6FB8               	movwf	(ModbusPoll@coils+1)& (0+255),b
  2038  00124C  0ED4               	movlw	low __MODBUSInputRegs
  2039  00124E  0100               	movlb	0	; () banked
  2040  001250  6FB9               	movwf	ModbusPoll@inputRegs& (0+255),b
  2041  001252  0E01               	movlw	high __MODBUSInputRegs
  2042  001254  0100               	movlb	0	; () banked
  2043  001256  6FBA               	movwf	(ModbusPoll@inputRegs+1)& (0+255),b
  2044  001258  0E0F               	movlw	15
  2045  00125A  0100               	movlb	0	; () banked
  2046  00125C  6FBB               	movwf	ModbusPoll@inputRegsCount& (0+255),b
  2047  00125E  0EB6               	movlw	low __MODBUSHoldingRegs
  2048  001260  0100               	movlb	0	; () banked
  2049  001262  6FBC               	movwf	ModbusPoll@holdingRegs& (0+255),b
  2050  001264  0E01               	movlw	high __MODBUSHoldingRegs
  2051  001266  0100               	movlb	0	; () banked
  2052  001268  6FBD               	movwf	(ModbusPoll@holdingRegs+1)& (0+255),b
  2053  00126A  0E0F               	movlw	15
  2054  00126C  0100               	movlb	0	; () banked
  2055  00126E  6FBE               	movwf	ModbusPoll@holdingRegsCount& (0+255),b
  2056  001270  EC0B  F00C         	call	_ModbusPoll	;wreg free
  2057  001274  0100               	movlb	0	; () banked
  2058  001276  6FEC               	movwf	_modbusState& (0+255),b
  2059  001278  6BED               	clrf	(_modbusState+1)& (0+255),b
  2060  00127A  BFEC               	btfsc	_modbusState& (0+255),7,b
  2061  00127C  07ED               	decf	(_modbusState+1)& (0+255),f,b
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 1001: io_poll();
  2065  00127E  ECCF  F017         	call	_io_poll	;wreg free
  2066  001282  D657               	goto	l450
  2067  001284                     __end_of_main:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           postinc2	equ	0xFDE
  2079                           postdec2	equ	0xFDD
  2080                           fsr2h	equ	0xFDA
  2081                           fsr2l	equ	0xFD9
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _pwm_init *****************
  2085 ;; Defined at:
  2086 ;;		line 386 in file "main.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;		None
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		None
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2100 ;;      Params:         0       0       0       0       0       0       0
  2101 ;;      Locals:         0       0       0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0
  2103 ;;      Totals:         0       0       0       0       0       0       0
  2104 ;;Total ram usage:        0 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    2
  2107 ;; This function calls:
  2108 ;;		Nothing
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text1
  2115  00027E                     __ptext1:
  2116                           	opt stack 0
  2117  00027E                     _pwm_init:
  2118                           	opt stack 28
  2119                           
  2120                           ;incstack = 0
  2121  00027E  FFFF               	dw	65535
  2122                           
  2123                           ;main.c: 398: CCP1CONbits.CCP1M = 0x0f;
  2124  000280  80BD               	bsf	4029,0,c	;volatile
  2125  000282  82BD               	bsf	4029,1,c	;volatile
  2126  000284  84BD               	bsf	4029,2,c	;volatile
  2127  000286  86BD               	bsf	4029,3,c	;volatile
  2128                           
  2129                           ;main.c: 407: PR2 = 255;
  2130  000288  68CB               	setf	4043,c	;volatile
  2131                           
  2132                           ;main.c: 410: T2CONbits.T2CKPS1 = 1;
  2133  00028A  82CA               	bsf	4042,1,c	;volatile
  2134                           
  2135                           ;main.c: 411: T2CONbits.T2CKPS0 = 0;
  2136  00028C  90CA               	bcf	4042,0,c	;volatile
  2137                           
  2138                           ;main.c: 414: TRISCbits.RC2 = 0;
  2139  00028E  9494               	bcf	3988,2,c	;volatile
  2140  000290  0012               	return		;funcret
  2141  000292  FFFF               	dw	65535	; errata NOP
  2142  000294                     __end_of_pwm_init:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1h	equ	0xFE2
  2152                           fsr1l	equ	0xFE1
  2153                           postinc2	equ	0xFDE
  2154                           postdec2	equ	0xFDD
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _io_poll *****************
  2160 ;; Defined at:
  2161 ;;		line 1121 in file "main.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  lastFunction    2   20[BANK0 ] PTR unsigned char 
  2166 ;;		 -> _lastFunction(1), 
  2167 ;;  lastAddress     2   17[BANK0 ] unsigned int 
  2168 ;;  lastEndAddre    2   15[BANK0 ] unsigned int 
  2169 ;;  lastCommand     1   19[BANK0 ] unsigned char 
  2170 ;;  v1              1    0        unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2180 ;;      Params:         0       0       0       0       0       0       0
  2181 ;;      Locals:         0       7       0       0       0       0       0
  2182 ;;      Temps:          0       4       0       0       0       0       0
  2183 ;;      Totals:         0      11       0       0       0       0       0
  2184 ;;Total ram usage:       11 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    7
  2187 ;; This function calls:
  2188 ;;		_InitFromEeprom
  2189 ;;		_LightStatusLed
  2190 ;;		_LoadNextEvent
  2191 ;;		_ModbusGetLastCommand
  2192 ;;		_ModbusSetExceptionStatusBit
  2193 ;;		_ProcessUserCommands
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text2
  2200  002F9E                     __ptext2:
  2201                           	opt stack 0
  2202  002F9E                     _io_poll:
  2203                           	opt stack 23
  2204                           
  2205                           ;incstack = 0
  2206  002F9E  FFFF               	dw	65535
  2207                           
  2208                           ;main.c: 1123: uint16_t lastAddress;
  2209                           ;main.c: 1124: uint16_t lastEndAddress;
  2210                           ;main.c: 1125: uint8_t lastCommand;
  2211                           ;main.c: 1127: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddres
      +                          s, &lastCommand);
  2212  002FA0  0E91               	movlw	low io_poll@lastAddress
  2213  002FA2  6E21               	movwf	ModbusGetLastCommand@address,c
  2214  002FA4  0E00               	movlw	high io_poll@lastAddress
  2215  002FA6  6E22               	movwf	ModbusGetLastCommand@address+1,c
  2216  002FA8  0E8F               	movlw	low io_poll@lastEndAddress
  2217  002FAA  6E23               	movwf	ModbusGetLastCommand@count,c
  2218  002FAC  0E00               	movlw	high io_poll@lastEndAddress
  2219  002FAE  6E24               	movwf	ModbusGetLastCommand@count+1,c
  2220  002FB0  0E93               	movlw	low io_poll@lastCommand
  2221  002FB2  6E25               	movwf	ModbusGetLastCommand@command,c
  2222  002FB4  0E00               	movlw	high io_poll@lastCommand
  2223  002FB6  6E26               	movwf	ModbusGetLastCommand@command+1,c
  2224  002FB8  EC15  F01E         	call	_ModbusGetLastCommand	;wreg free
  2225  002FBC  C021  F094         	movff	?_ModbusGetLastCommand,io_poll@lastFunction
  2226  002FC0  C022  F095         	movff	?_ModbusGetLastCommand+1,io_poll@lastFunction+1
  2227                           
  2228                           ;main.c: 1128: if(*lastFunction == MB_FC_NONE)
  2229  002FC4  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2230  002FC8  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2231  002FCC  50DF               	movf	indf2,w,c
  2232  002FCE  B4D8               	btfsc	status,2,c
  2233  002FD0  D04D               	goto	l510
  2234                           
  2235                           ;main.c: 1131: lastEndAddress += lastAddress - 1;
  2236                           
  2237                           ;main.c: 1129: return;
  2238  002FD2  0EFF               	movlw	255
  2239  002FD4  0100               	movlb	0	; () banked
  2240  002FD6  6F8B               	movwf	??_io_poll& (0+255),b
  2241  002FD8  0EFF               	movlw	255
  2242  002FDA  0100               	movlb	0	; () banked
  2243  002FDC  6F8C               	movwf	(??_io_poll+1)& (0+255),b
  2244  002FDE  C091  F08D         	movff	io_poll@lastAddress,??_io_poll+2
  2245  002FE2  C092  F08E         	movff	io_poll@lastAddress+1,??_io_poll+3
  2246  002FE6  0100               	movlb	0	; () banked
  2247  002FE8  518B               	movf	??_io_poll& (0+255),w,b
  2248  002FEA  0100               	movlb	0	; () banked
  2249  002FEC  278D               	addwf	(??_io_poll+2)& (0+255),f,b
  2250  002FEE  0100               	movlb	0	; () banked
  2251  002FF0  518C               	movf	(??_io_poll+1)& (0+255),w,b
  2252  002FF2  0100               	movlb	0	; () banked
  2253  002FF4  238E               	addwfc	(??_io_poll+3)& (0+255),f,b
  2254  002FF6  0100               	movlb	0	; () banked
  2255  002FF8  518D               	movf	(??_io_poll+2)& (0+255),w,b
  2256  002FFA  0100               	movlb	0	; () banked
  2257  002FFC  278F               	addwf	io_poll@lastEndAddress& (0+255),f,b
  2258  002FFE  0100               	movlb	0	; () banked
  2259  003000  518E               	movf	(??_io_poll+3)& (0+255),w,b
  2260  003002  0100               	movlb	0	; () banked
  2261  003004  2390               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 1133: uint8_t v1;
  2265                           ;main.c: 1134: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  2266  003006  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2267  00300A  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2268  00300E  0E64               	movlw	100
  2269  003010  18DE               	xorwf	postinc2,w,c
  2270  003012  A4D8               	btfss	status,2,c
  2271  003014  D00F               	goto	l8571
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 1135: {
  2275                           ;main.c: 1136: if(lastCommand == 0x10)
  2276  003016  0E10               	movlw	16
  2277  003018  0100               	movlb	0	; () banked
  2278  00301A  1993               	xorwf	io_poll@lastCommand& (0+255),w,b
  2279  00301C  A4D8               	btfss	status,2,c
  2280  00301E  D026               	goto	l510
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;main.c: 1137: {
  2284                           ;main.c: 1138: LightStatusLed(0x05, 0, 0);
  2285  003020  0E00               	movlw	0
  2286  003022  6E21               	movwf	LightStatusLed@on,c
  2287  003024  0E00               	movlw	0
  2288  003026  6E22               	movwf	LightStatusLed@blink,c
  2289  003028  0E05               	movlw	5
  2290  00302A  ECA0  F014         	call	_LightStatusLed
  2291                           
  2292                           ;main.c: 1139: LoadNextEvent();
  2293  00302E  ECFD  F011         	call	_LoadNextEvent	;wreg free
  2294                           
  2295                           ;main.c: 1140: }
  2296                           ;main.c: 1141: return;
  2297  003032  D01C               	goto	l510
  2298  003034                     l8571:
  2299  003034  FFFF               	dw	65535	; assembler added errata NOP
  2300                           
  2301                           ;main.c: 1142: }
  2302                           ;main.c: 1143: if(*lastFunction == MB_FC_USER_COMMAND)
  2303  003036  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2304  00303A  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2305  00303E  0E65               	movlw	101
  2306  003040  18DE               	xorwf	postinc2,w,c
  2307  003042  A4D8               	btfss	status,2,c
  2308  003044  D003               	goto	l8581
  2309                           
  2310                           ;main.c: 1144: {
  2311                           ;main.c: 1145: ProcessUserCommands();
  2312  003046  EC68  F019         	call	_ProcessUserCommands	;wreg free
  2313                           
  2314                           ;main.c: 1146: return;
  2315  00304A  D010               	goto	l510
  2316  00304C                     l8581:
  2317  00304C  FFFF               	dw	65535	; assembler added errata NOP
  2318                           
  2319                           ;main.c: 1152: }
  2320                           ;main.c: 1155: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  2321  00304E  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2322  003052  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2323  003056  0E15               	movlw	21
  2324  003058  18DE               	xorwf	postinc2,w,c
  2325  00305A  A4D8               	btfss	status,2,c
  2326  00305C  D007               	goto	l510
  2327                           
  2328                           ;main.c: 1156: {
  2329                           ;main.c: 1157: InitFromEeprom();
  2330  00305E  EC06  F019         	call	_InitFromEeprom	;wreg free
  2331                           
  2332                           ;main.c: 1158: ModbusSetExceptionStatusBit(0, 1);
  2333  003062  0E01               	movlw	1
  2334  003064  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  2335  003066  0E00               	movlw	0
  2336  003068  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
  2337  00306C                     l510:
  2338  00306C  FFFF               	dw	65535	; assembler added errata NOP
  2339  00306E  0012               	return		;funcret
  2340  003070  FFFF               	dw	65535	; errata NOP
  2341  003072                     __end_of_io_poll:
  2342                           	opt stack 0
  2343                           tblptru	equ	0xFF8
  2344                           tblptrh	equ	0xFF7
  2345                           tblptrl	equ	0xFF6
  2346                           tablat	equ	0xFF5
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           postdec1	equ	0xFE5
  2350                           fsr1h	equ	0xFE2
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           postdec2	equ	0xFDD
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359 ;; *************** function _ProcessUserCommands *****************
  2360 ;; Defined at:
  2361 ;;		line 1093 in file "main.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;		None
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  v1              1    0        unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2375 ;;      Params:         0       0       0       0       0       0       0
  2376 ;;      Locals:         0       0       0       0       0       0       0
  2377 ;;      Temps:          0       1       0       0       0       0       0
  2378 ;;      Totals:         0       1       0       0       0       0       0
  2379 ;;Total ram usage:        1 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    6
  2382 ;; This function calls:
  2383 ;;		_CommandSetLed
  2384 ;;		_CommandSetStatusLed
  2385 ;;		_InitFromEeprom
  2386 ;;		_ModbusGetUserCommandAdditional1Lo
  2387 ;;		_ModbusGetUserCommandData
  2388 ;;		_ModbusGetUserCommandId
  2389 ;;		_ModbusSetExceptionStatusBit
  2390 ;;		_PlaySound
  2391 ;; This function is called by:
  2392 ;;		_io_poll
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text3
  2397  0032D0                     __ptext3:
  2398                           	opt stack 0
  2399  0032D0                     _ProcessUserCommands:
  2400                           	opt stack 23
  2401                           
  2402                           ;incstack = 0
  2403  0032D0  FFFF               	dw	65535
  2404                           
  2405                           ;main.c: 1095: uint8_t v1;
  2406                           ;main.c: 1096: switch(*ModbusGetUserCommandId())
  2407  0032D2  D044               	goto	l7313
  2408  0032D4                     l7277:
  2409  0032D4  FFFF               	dw	65535	; assembler added errata NOP
  2410                           
  2411                           ;main.c: 1099: eventCount = 0;
  2412  0032D6  0E00               	movlw	0
  2413  0032D8  6E57               	movwf	_eventCount,c
  2414  0032DA                     l493:
  2415  0032DA  FFFF               	dw	65535	; assembler added errata NOP
  2416  0032DC  B2A6               	btfsc	4006,1,c	;volatile
  2417  0032DE  D7FD               	goto	l493
  2418  0032E0  0E0A               	movlw	10
  2419  0032E2  6EA9               	movwf	4009,c	;volatile
  2420  0032E4  0E00               	movlw	0
  2421  0032E6  6EA8               	movwf	4008,c	;volatile
  2422  0032E8  9EA6               	bcf	4006,7,c	;volatile
  2423  0032EA  9CA6               	bcf	4006,6,c	;volatile
  2424  0032EC  90D8               	bcf	status,0,c	;volatile
  2425  0032EE  BEF2               	btfsc	intcon,7,c	;volatile
  2426  0032F0  80D8               	bsf	status,0,c	;volatile
  2427  0032F2  9EF2               	bcf	intcon,7,c	;volatile
  2428  0032F4  84A6               	bsf	4006,2,c	;volatile
  2429  0032F6  0E55               	movlw	85
  2430  0032F8  6EA7               	movwf	4007,c	;volatile
  2431  0032FA  0EAA               	movlw	170
  2432  0032FC  6EA7               	movwf	4007,c	;volatile
  2433  0032FE  82A6               	bsf	4006,1,c	;volatile
  2434  003300  94A6               	bcf	4006,2,c	;volatile
  2435  003302  B0D8               	btfsc	status,0,c	;volatile
  2436  003304  8EF2               	bsf	intcon,7,c	;volatile
  2437  003306                     l499:
  2438  003306  FFFF               	dw	65535	; assembler added errata NOP
  2439  003308  B2A6               	btfsc	4006,1,c	;volatile
  2440  00330A  D7FD               	goto	l499
  2441                           
  2442                           ;main.c: 1103: InitFromEeprom();
  2443  00330C  EC06  F019         	call	_InitFromEeprom	;wreg free
  2444                           
  2445                           ;main.c: 1104: ModbusSetExceptionStatusBit(0, 1);
  2446  003310  0E01               	movlw	1
  2447  003312  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  2448  003314  0E00               	movlw	0
  2449  003316  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
  2450                           
  2451                           ;main.c: 1105: break;
  2452  00331A  D034               	goto	l506
  2453  00331C                     l7305:
  2454  00331C  FFFF               	dw	65535	; assembler added errata NOP
  2455                           
  2456                           ;main.c: 1107: CommandSetLed();
  2457  00331E  EC63  F010         	call	_CommandSetLed	;wreg free
  2458                           
  2459                           ;main.c: 1108: break;
  2460  003322  D030               	goto	l506
  2461  003324                     l7307:
  2462  003324  FFFF               	dw	65535	; assembler added errata NOP
  2463                           
  2464                           ;main.c: 1112: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo
      +                          ());
  2465  003326  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2466  00332A  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  2467  00332E  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  2468  003332  50DF               	movf	indf2,w,c
  2469  003334  0100               	movlb	0	; () banked
  2470  003336  6F8A               	movwf	??_ProcessUserCommands& (0+255),b
  2471  003338  0100               	movlb	0	; () banked
  2472  00333A  518A               	movf	??_ProcessUserCommands& (0+255),w,b
  2473  00333C  6E31               	movwf	PlaySound@playDuration,c
  2474  00333E  6A32               	clrf	PlaySound@playDuration+1,c
  2475  003340  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  2476  003344  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  2477  003348  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  2478  00334C  50DF               	movf	indf2,w,c
  2479  00334E  EC27  F015         	call	_PlaySound
  2480                           
  2481                           ;main.c: 1113: break;
  2482  003352  D018               	goto	l506
  2483  003354                     l7309:
  2484  003354  FFFF               	dw	65535	; assembler added errata NOP
  2485                           
  2486                           ;main.c: 1116: CommandSetStatusLed();
  2487  003356  EC22  F01A         	call	_CommandSetStatusLed	;wreg free
  2488                           
  2489                           ;main.c: 1118: }
  2490                           
  2491                           ;main.c: 1117: break;
  2492  00335A  D014               	goto	l506
  2493  00335C                     l7313:
  2494  00335C  FFFF               	dw	65535	; assembler added errata NOP
  2495  00335E  EC68  F001         	call	_ModbusGetUserCommandId	;wreg free
  2496  003362  C021  FFD9         	movff	?_ModbusGetUserCommandId,fsr2l
  2497  003366  C022  FFDA         	movff	?_ModbusGetUserCommandId+1,fsr2h
  2498  00336A  50DF               	movf	indf2,w,c
  2499                           
  2500                           ; Switch size 1, requested type "space"
  2501                           ; Number of cases is 4, Range of values is 128 to 145
  2502                           ; switch strategies available:
  2503                           ; Name         Instructions Cycles
  2504                           ; simple_byte           13     7 (average)
  2505                           ;	Chosen strategy is simple_byte
  2506  00336C  0A80               	xorlw	128	; case 128
  2507  00336E  B4D8               	btfsc	status,2,c
  2508  003370  D7B1               	goto	l7277
  2509  003372  0A02               	xorlw	2	; case 130
  2510  003374  B4D8               	btfsc	status,2,c
  2511  003376  D7D2               	goto	l7305
  2512  003378  0A01               	xorlw	1	; case 131
  2513  00337A  B4D8               	btfsc	status,2,c
  2514  00337C  D7EB               	goto	l7309
  2515  00337E  0A12               	xorlw	18	; case 145
  2516  003380  B4D8               	btfsc	status,2,c
  2517  003382  D7D0               	goto	l7307
  2518  003384                     l506:
  2519  003384  FFFF               	dw	65535	; assembler added errata NOP
  2520  003386  0012               	return		;funcret
  2521  003388  FFFF               	dw	65535	; errata NOP
  2522  00338A                     __end_of_ProcessUserCommands:
  2523                           	opt stack 0
  2524                           tblptru	equ	0xFF8
  2525                           tblptrh	equ	0xFF7
  2526                           tblptrl	equ	0xFF6
  2527                           tablat	equ	0xFF5
  2528                           intcon	equ	0xFF2
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           postdec1	equ	0xFE5
  2532                           fsr1h	equ	0xFE2
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _ModbusGetUserCommandId *****************
  2542 ;; Defined at:
  2543 ;;		line 197 in file "ModbusRtu.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  2   32[COMRAM] PTR unsigned char 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2557 ;;      Params:         2       0       0       0       0       0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0
  2560 ;;      Totals:         2       0       0       0       0       0       0
  2561 ;;Total ram usage:        2 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    2
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_ProcessUserCommands
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text4
  2572  0002D0                     __ptext4:
  2573                           	opt stack 0
  2574  0002D0                     _ModbusGetUserCommandId:
  2575                           	opt stack 26
  2576                           
  2577                           ;incstack = 0
  2578  0002D0  FFFF               	dw	65535
  2579  0002D2  0E5C               	movlw	low _ModbusUserCommandId
  2580  0002D4  6E21               	movwf	?_ModbusGetUserCommandId,c
  2581  0002D6  0E00               	movlw	high _ModbusUserCommandId
  2582  0002D8  6E22               	movwf	?_ModbusGetUserCommandId+1,c
  2583  0002DA  0012               	return		;funcret
  2584  0002DC  FFFF               	dw	65535	; errata NOP
  2585  0002DE                     __end_of_ModbusGetUserCommandId:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           intcon	equ	0xFF2
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1h	equ	0xFE2
  2596                           fsr1l	equ	0xFE1
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _InitFromEeprom *****************
  2605 ;; Defined at:
  2606 ;;		line 440 in file "main.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  eeSoundCount    1   43[COMRAM] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         0       0       0       0       0       0       0
  2621 ;;      Locals:         1       0       0       0       0       0       0
  2622 ;;      Temps:          2       0       0       0       0       0       0
  2623 ;;      Totals:         3       0       0       0       0       0       0
  2624 ;;Total ram usage:        3 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    4
  2627 ;; This function calls:
  2628 ;;		_LoadNextEvent
  2629 ;;		_Modbus
  2630 ;;		_ShowFailure
  2631 ;;		_SwitchOffAllLeds
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;;		_ProcessUserCommands
  2635 ;;		_io_poll
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text5
  2640  00320C                     __ptext5:
  2641                           	opt stack 0
  2642  00320C                     _InitFromEeprom:
  2643                           	opt stack 24
  2644                           
  2645                           ;incstack = 0
  2646  00320C  FFFF               	dw	65535
  2647                           
  2648                           ;main.c: 442: SwitchOffAllLeds();
  2649  00320E  EC33  F01F         	call	_SwitchOffAllLeds	;wreg free
  2650                           
  2651                           ;main.c: 444: eventAcceptTime = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  2652  003212  0E02               	movlw	2
  2653  003214  6EA9               	movwf	4009,c	;volatile
  2654  003216  80A6               	bsf	4006,0,c	;volatile
  2655  003218  CFA8 F056          	movff	4008,_eventAcceptTime	;volatile
  2656                           
  2657                           ;main.c: 451: Modbus(0, 0);
  2658  00321C  0E00               	movlw	0
  2659  00321E  6E26               	movwf	Modbus@u8txenpin,c
  2660  003220  0E00               	movlw	0
  2661  003222  EC7C  F000         	call	_Modbus
  2662                           
  2663                           ;main.c: 454: _maxDiaryEvents = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  2664  003226  0E03               	movlw	3
  2665  003228  6EA9               	movwf	4009,c	;volatile
  2666  00322A  80A6               	bsf	4006,0,c	;volatile
  2667  00322C  CFA8 F04D          	movff	4008,__maxDiaryEvents	;volatile
  2668                           
  2669                           ;main.c: 455: if(_maxDiaryEvents == 0xff)
  2670  003230  284D               	incf	__maxDiaryEvents,w,c
  2671  003232  A4D8               	btfss	status,2,c
  2672  003234  D002               	goto	l7037
  2673                           
  2674                           ;main.c: 456: _maxDiaryEvents = 0;
  2675  003236  0E00               	movlw	0
  2676  003238  6E4D               	movwf	__maxDiaryEvents,c
  2677  00323A                     l7037:
  2678  00323A  FFFF               	dw	65535	; assembler added errata NOP
  2679                           
  2680                           ;main.c: 457: if(_maxDiaryEvents > 60)
  2681  00323C  0E3C               	movlw	60
  2682  00323E  644D               	cpfsgt	__maxDiaryEvents,c
  2683  003240  D004               	goto	l7043
  2684                           
  2685                           ;main.c: 458: {
  2686                           ;main.c: 459: ShowFailure(2);
  2687  003242  0E02               	movlw	2
  2688  003244  ECE6  F000         	call	_ShowFailure
  2689                           
  2690                           ;main.c: 460: return;
  2691  003248  D040               	goto	l321
  2692  00324A                     l7043:
  2693  00324A  FFFF               	dw	65535	; assembler added errata NOP
  2694                           
  2695                           ;main.c: 461: }
  2696                           ;main.c: 462: eventCount = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  2697  00324C  0E0A               	movlw	10
  2698  00324E  6EA9               	movwf	4009,c	;volatile
  2699  003250  80A6               	bsf	4006,0,c	;volatile
  2700  003252  CFA8 F057          	movff	4008,_eventCount	;volatile
  2701                           
  2702                           ;main.c: 463: if(eventCount == 0xff)
  2703  003256  2857               	incf	_eventCount,w,c
  2704  003258  A4D8               	btfss	status,2,c
  2705  00325A  D002               	goto	l7053
  2706                           
  2707                           ;main.c: 464: eventCount = 0;
  2708  00325C  0E00               	movlw	0
  2709  00325E  6E57               	movwf	_eventCount,c
  2710  003260                     l7053:
  2711  003260  FFFF               	dw	65535	; assembler added errata NOP
  2712                           
  2713                           ;main.c: 465: if(eventCount > _maxDiaryEvents)
  2714  003262  5057               	movf	_eventCount,w,c
  2715  003264  5C4D               	subwf	__maxDiaryEvents,w,c
  2716  003266  B0D8               	btfsc	status,0,c
  2717  003268  D004               	goto	l7059
  2718                           
  2719                           ;main.c: 466: {
  2720                           ;main.c: 467: ShowFailure(3);
  2721  00326A  0E03               	movlw	3
  2722  00326C  ECE6  F000         	call	_ShowFailure
  2723                           
  2724                           ;main.c: 468: return;
  2725  003270  D02C               	goto	l321
  2726  003272                     l7059:
  2727  003272  FFFF               	dw	65535	; assembler added errata NOP
  2728                           
  2729                           ;main.c: 469: }
  2730                           ;main.c: 474: uint8_t eeSoundCountAddress = 10 + 1 + eventCount * 2;
  2731  003274  5057               	movf	_eventCount,w,c
  2732  003276  0D02               	mullw	2
  2733  003278  50F3               	movf	prodl,w,c
  2734  00327A  0F0B               	addlw	11
  2735  00327C  6E2C               	movwf	InitFromEeprom@eeSoundCountAddress,c
  2736                           
  2737                           ;main.c: 475: _soundCount = ( EEADR = eeSoundCountAddress, (void)0, RD = 1, EEDATA);
  2738  00327E  C02C  FFA9         	movff	InitFromEeprom@eeSoundCountAddress,4009	;volatile
  2739  003282  80A6               	bsf	4006,0,c	;volatile
  2740  003284  CFA8 F052          	movff	4008,__soundCount	;volatile
  2741                           
  2742                           ;main.c: 476: if(_soundCount == 0xFF)
  2743  003288  2852               	incf	__soundCount,w,c
  2744  00328A  A4D8               	btfss	status,2,c
  2745  00328C  D003               	goto	l7071
  2746                           
  2747                           ;main.c: 477: _soundCount = 0;
  2748  00328E  0E00               	movlw	0
  2749  003290  6E52               	movwf	__soundCount,c
  2750  003292  D006               	goto	l7077
  2751  003294                     l7071:
  2752  003294  FFFF               	dw	65535	; assembler added errata NOP
  2753                           
  2754                           ;main.c: 478: else
  2755                           ;main.c: 479: {
  2756                           ;main.c: 480: _eeSoundAddressesList = eeSoundCountAddress + 1;
  2757  003296  282C               	incf	InitFromEeprom@eeSoundCountAddress,w,c
  2758  003298  6E48               	movwf	__eeSoundAddressesList,c
  2759                           
  2760                           ;main.c: 481: _eeFirstSoundAddress = _eeSoundAddressesList + _soundCount;
  2761  00329A  5048               	movf	__eeSoundAddressesList,w,c
  2762  00329C  2452               	addwf	__soundCount,w,c
  2763  00329E  6E47               	movwf	__eeFirstSoundAddress,c
  2764  0032A0                     l7077:
  2765  0032A0  FFFF               	dw	65535	; assembler added errata NOP
  2766                           
  2767                           ;main.c: 486: }
  2768                           ;main.c: 487: }
  2769                           ;main.c: 488: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  2770  0032A2  5052               	movf	__soundCount,w,c
  2771  0032A4  6E2A               	movwf	??_InitFromEeprom& (0+255),c
  2772  0032A6  5057               	movf	_eventCount,w,c
  2773  0032A8  0101               	movlb	1	; () banked
  2774  0032AA  6FE0               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  2775  0032AC  C02A  F1E1         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  2776                           
  2777                           ;main.c: 491: _eventFromCommand.IsFire = 0;
  2778  0032B0  0E00               	movlw	0
  2779  0032B2  0100               	movlb	0	; () banked
  2780  0032B4  6FD2               	movwf	__eventFromCommand& (0+255),b
  2781                           
  2782                           ;main.c: 494: _currenDiaryEvent.NextEventTotalMinutes = 0;
  2783  0032B6  0E00               	movlw	0
  2784  0032B8  6E3C               	movwf	__currenDiaryEvent+3,c
  2785  0032BA  0E00               	movlw	0
  2786  0032BC  6E3B               	movwf	__currenDiaryEvent+2,c
  2787                           
  2788                           ;main.c: 495: _currenDiaryEvent.IsFire = 0;
  2789  0032BE  0E00               	movlw	0
  2790  0032C0  6E39               	movwf	__currenDiaryEvent,c
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 496: _currenDiaryEvent.FiredEventNum = 0xff;
  2794  0032C2  683A               	setf	__currenDiaryEvent+1,c
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 497: _currenDiaryEvent.NextEventNum = 0xff;
  2798  0032C4  6841               	setf	__currenDiaryEvent+8,c
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 499: LoadNextEvent();
  2802  0032C6  ECFD  F011         	call	_LoadNextEvent	;wreg free
  2803  0032CA                     l321:
  2804  0032CA  FFFF               	dw	65535	; assembler added errata NOP
  2805  0032CC  0012               	return		;funcret
  2806  0032CE  FFFF               	dw	65535	; errata NOP
  2807  0032D0                     __end_of_InitFromEeprom:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodl	equ	0xFF3
  2814                           intcon	equ	0xFF2
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           fsr2h	equ	0xFDA
  2824                           fsr2l	equ	0xFD9
  2825                           status	equ	0xFD8
  2826                           
  2827 ;; *************** function _SwitchOffAllLeds *****************
  2828 ;; Defined at:
  2829 ;;		line 315 in file "main.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  i               1   32[COMRAM] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2843 ;;      Params:         0       0       0       0       0       0       0
  2844 ;;      Locals:         1       0       0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0
  2846 ;;      Totals:         1       0       0       0       0       0       0
  2847 ;;Total ram usage:        1 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    2
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_InitFromEeprom
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text6
  2858  003E66                     __ptext6:
  2859                           	opt stack 0
  2860  003E66                     _SwitchOffAllLeds:
  2861                           	opt stack 25
  2862                           
  2863                           ;incstack = 0
  2864  003E66  FFFF               	dw	65535
  2865                           
  2866                           ;main.c: 317: for(uint8_t i = 0; i < 16 - 1; i++)
  2867  003E68  0E00               	movlw	0
  2868  003E6A  6E21               	movwf	SwitchOffAllLeds@i,c
  2869  003E6C                     l6675:
  2870  003E6C  FFFF               	dw	65535	; assembler added errata NOP
  2871  003E6E  0E0E               	movlw	14
  2872  003E70  6421               	cpfsgt	SwitchOffAllLeds@i,c
  2873  003E72  D001               	goto	l6679
  2874  003E74  D017               	goto	l258
  2875  003E76                     l6679:
  2876  003E76  FFFF               	dw	65535	; assembler added errata NOP
  2877                           
  2878                           ;main.c: 318: {
  2879                           ;main.c: 319: ledStatuses[i] = 0;
  2880  003E78  5021               	movf	SwitchOffAllLeds@i,w,c
  2881  003E7A  0D01               	mullw	1
  2882  003E7C  0EC2               	movlw	low _ledStatuses
  2883  003E7E  24F3               	addwf	prodl,w,c
  2884  003E80  6ED9               	movwf	fsr2l,c
  2885  003E82  0E00               	movlw	high _ledStatuses
  2886  003E84  20F4               	addwfc	prodh,w,c
  2887  003E86  6EDA               	movwf	fsr2h,c
  2888  003E88  0E00               	movlw	0
  2889  003E8A  6EDF               	movwf	indf2,c
  2890                           
  2891                           ;main.c: 320: ledBlink[i] = 0;
  2892  003E8C  5021               	movf	SwitchOffAllLeds@i,w,c
  2893  003E8E  0D01               	mullw	1
  2894  003E90  0E00               	movlw	low _ledBlink
  2895  003E92  24F3               	addwf	prodl,w,c
  2896  003E94  6ED9               	movwf	fsr2l,c
  2897  003E96  0E01               	movlw	high _ledBlink
  2898  003E98  20F4               	addwfc	prodh,w,c
  2899  003E9A  6EDA               	movwf	fsr2h,c
  2900  003E9C  0E00               	movlw	0
  2901  003E9E  6EDF               	movwf	indf2,c
  2902  003EA0  2A21               	incf	SwitchOffAllLeds@i,f,c
  2903  003EA2  D7E4               	goto	l6675
  2904  003EA4                     l258:
  2905  003EA4  FFFF               	dw	65535	; assembler added errata NOP
  2906  003EA6  0012               	return		;funcret
  2907  003EA8  FFFF               	dw	65535	; errata NOP
  2908  003EAA                     __end_of_SwitchOffAllLeds:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           intcon	equ	0xFF2
  2917                           postinc0	equ	0xFEE
  2918                           wreg	equ	0xFE8
  2919                           postdec1	equ	0xFE5
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _ShowFailure *****************
  2930 ;; Defined at:
  2931 ;;		line 434 in file "main.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  additionalLe    1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  additionalLe    1   40[COMRAM] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2945 ;;      Params:         0       0       0       0       0       0       0
  2946 ;;      Locals:         1       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0
  2948 ;;      Totals:         1       0       0       0       0       0       0
  2949 ;;Total ram usage:        1 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    3
  2952 ;; This function calls:
  2953 ;;		_LightLed
  2954 ;;		_LightStatusLed
  2955 ;; This function is called by:
  2956 ;;		_InitFromEeprom
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text7
  2961  0001CC                     __ptext7:
  2962                           	opt stack 0
  2963  0001CC                     _ShowFailure:
  2964                           	opt stack 24
  2965                           
  2966                           ;incstack = 0
  2967  0001CC  FFFF               	dw	65535
  2968                           
  2969                           ;ShowFailure@additionalLed stored from wreg
  2970  0001CE  6E29               	movwf	ShowFailure@additionalLed,c
  2971                           
  2972                           ;main.c: 436: LightStatusLed(0x06, 1, 1);
  2973  0001D0  0E01               	movlw	1
  2974  0001D2  6E21               	movwf	LightStatusLed@on,c
  2975  0001D4  0E01               	movlw	1
  2976  0001D6  6E22               	movwf	LightStatusLed@blink,c
  2977  0001D8  0E06               	movlw	6
  2978  0001DA  ECA0  F014         	call	_LightStatusLed
  2979                           
  2980                           ;main.c: 437: LightLed(additionalLed, LED_RED, 1);
  2981  0001DE  0E02               	movlw	2
  2982  0001E0  6E21               	movwf	LightLed@ledState,c
  2983  0001E2  0E01               	movlw	1
  2984  0001E4  6E22               	movwf	LightLed@blink,c
  2985  0001E6  5029               	movf	ShowFailure@additionalLed,w,c
  2986  0001E8  EC5C  F005         	call	_LightLed
  2987  0001EC  0012               	return		;funcret
  2988  0001EE  FFFF               	dw	65535	; errata NOP
  2989  0001F0                     __end_of_ShowFailure:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1h	equ	0xFE2
  3002                           fsr1l	equ	0xFE1
  3003                           indf2	equ	0xFDF
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _Modbus *****************
  3011 ;; Defined at:
  3012 ;;		line 232 in file "ModbusRtu.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  u8serno         1    wreg     unsigned char 
  3015 ;;  u8txenpin       1   37[COMRAM] unsigned char 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  u8serno         1   38[COMRAM] unsigned char 
  3018 ;;  tmpModbusId     1   39[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         1       0       0       0       0       0       0
  3029 ;;      Locals:         2       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0
  3031 ;;      Totals:         3       0       0       0       0       0       0
  3032 ;;Total ram usage:        3 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		_ModbusInit
  3037 ;; This function is called by:
  3038 ;;		_InitFromEeprom
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text8
  3043  0000F8                     __ptext8:
  3044                           	opt stack 0
  3045  0000F8                     _Modbus:
  3046                           	opt stack 24
  3047                           
  3048                           ;incstack = 0
  3049  0000F8  FFFF               	dw	65535
  3050                           
  3051                           ;Modbus@u8serno stored from wreg
  3052  0000FA  6E27               	movwf	Modbus@u8serno,c
  3053                           
  3054                           ;ModbusRtu.c: 234: uint8_t tmpModbusId = ( EEADR = 1, (void)0, RD = 1, EEDATA);
  3055  0000FC  0E01               	movlw	1
  3056  0000FE  6EA9               	movwf	4009,c	;volatile
  3057  000100  80A6               	bsf	4006,0,c	;volatile
  3058  000102  CFA8 F028          	movff	4008,Modbus@tmpModbusId	;volatile
  3059                           
  3060                           ;ModbusRtu.c: 235: if(tmpModbusId == 0xff)
  3061  000106  2828               	incf	Modbus@tmpModbusId,w,c
  3062  000108  A4D8               	btfss	status,2,c
  3063  00010A  D002               	goto	l6699
  3064                           
  3065                           ;ModbusRtu.c: 236: tmpModbusId = 0x7F;
  3066  00010C  0E7F               	movlw	127
  3067  00010E  6E28               	movwf	Modbus@tmpModbusId,c
  3068  000110                     l6699:
  3069  000110  FFFF               	dw	65535	; assembler added errata NOP
  3070                           
  3071                           ;ModbusRtu.c: 237: ModbusInit(tmpModbusId, u8serno, u8txenpin);
  3072  000112  C027  F021         	movff	Modbus@u8serno,ModbusInit@u8serno
  3073  000116  C026  F022         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3074  00011A  5028               	movf	Modbus@tmpModbusId,w,c
  3075  00011C  EC77  F01F         	call	_ModbusInit
  3076  000120  0012               	return		;funcret
  3077  000122  FFFF               	dw	65535	; errata NOP
  3078  000124                     __end_of_Modbus:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           intcon	equ	0xFF2
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           postdec1	equ	0xFE5
  3090                           fsr1h	equ	0xFE2
  3091                           fsr1l	equ	0xFE1
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _ModbusInit *****************
  3100 ;; Defined at:
  3101 ;;		line 581 in file "ModbusRtu.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  u8id            1    wreg     unsigned char 
  3104 ;;  u8serno         1   32[COMRAM] unsigned char 
  3105 ;;  u8txenpin       1   33[COMRAM] unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  u8id            1   34[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         2       0       0       0       0       0       0
  3118 ;;      Locals:         3       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0
  3120 ;;      Totals:         5       0       0       0       0       0       0
  3121 ;;Total ram usage:        5 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    2
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_Modbus
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text9
  3132  003EEE                     __ptext9:
  3133                           	opt stack 0
  3134  003EEE                     _ModbusInit:
  3135                           	opt stack 24
  3136                           
  3137                           ;incstack = 0
  3138  003EEE  FFFF               	dw	65535
  3139                           
  3140                           ;ModbusInit@u8id stored from wreg
  3141  003EF0  6E23               	movwf	ModbusInit@u8id,c
  3142                           
  3143                           ;ModbusRtu.c: 584: if(1)
  3144  003EF2  0E00               	movlw	0
  3145  003EF4  6E46               	movwf	__deviceStatus,c
  3146                           
  3147                           ;ModbusRtu.c: 585: ((_deviceStatus) |= ((unsigned short)1 << (1)));
  3148  003EF6  8246               	bsf	__deviceStatus,1,c
  3149                           
  3150                           ;ModbusRtu.c: 586: _u8id = u8id;
  3151  003EF8  C023  F0F0         	movff	ModbusInit@u8id,__u8id
  3152                           
  3153                           ;ModbusRtu.c: 587: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3154  003EFC  0E04               	movlw	4
  3155  003EFE  6021               	cpfslt	ModbusInit@u8serno,c
  3156  003F00  D004               	goto	l6631
  3157  003F02  C021  F024         	movff	ModbusInit@u8serno,_ModbusInit$1883
  3158  003F06  6A25               	clrf	_ModbusInit$1883+1,c
  3159  003F08  D005               	goto	l6633
  3160  003F0A                     l6631:
  3161  003F0A  FFFF               	dw	65535	; assembler added errata NOP
  3162  003F0C  0E00               	movlw	0
  3163  003F0E  6E25               	movwf	_ModbusInit$1883+1,c
  3164  003F10  0E00               	movlw	0
  3165  003F12  6E24               	movwf	_ModbusInit$1883,c
  3166  003F14                     l6633:
  3167  003F14  FFFF               	dw	65535	; assembler added errata NOP
  3168  003F16  C024  F0F3         	movff	_ModbusInit$1883,__u8serno
  3169                           
  3170                           ;ModbusRtu.c: 588: _u8txenpin = u8txenpin;
  3171  003F1A  C022  F0F5         	movff	ModbusInit@u8txenpin,__u8txenpin
  3172                           
  3173                           ;ModbusRtu.c: 589: _u16timeOut = 1000;
  3174  003F1E  0E03               	movlw	3
  3175  003F20  0100               	movlb	0	; () banked
  3176  003F22  6FEB               	movwf	(__u16timeOut+1)& (0+255),b
  3177  003F24  0EE8               	movlw	232
  3178  003F26  6FEA               	movwf	__u16timeOut& (0+255),b
  3179                           
  3180                           ; BSR set to: 0
  3181  003F28  0012               	return		;funcret
  3182  003F2A  FFFF               	dw	65535	; errata NOP
  3183  003F2C                     __end_of_ModbusInit:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1h	equ	0xFE2
  3196                           fsr1l	equ	0xFE1
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _CommandSetStatusLed *****************
  3205 ;; Defined at:
  3206 ;;		line 1072 in file "main.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  led             1    3[BANK0 ] unsigned char 
  3211 ;;  commandData     1    2[BANK0 ] unsigned char 
  3212 ;;  soundId         1    1[BANK0 ] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3222 ;;      Params:         0       0       0       0       0       0       0
  3223 ;;      Locals:         0       3       0       0       0       0       0
  3224 ;;      Temps:          0       1       0       0       0       0       0
  3225 ;;      Totals:         0       4       0       0       0       0       0
  3226 ;;Total ram usage:        4 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    5
  3229 ;; This function calls:
  3230 ;;		_LightStatusLed
  3231 ;;		_ModbusGetUserCommandAdditional1Hi
  3232 ;;		_ModbusGetUserCommandAdditional1Lo
  3233 ;;		_ModbusGetUserCommandData
  3234 ;;		_ModbusSetExceptionStatusBit
  3235 ;;		_PlaySound
  3236 ;;		_StopPlaying
  3237 ;; This function is called by:
  3238 ;;		_ProcessUserCommands
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text10
  3243  003444                     __ptext10:
  3244                           	opt stack 0
  3245  003444                     _CommandSetStatusLed:
  3246                           	opt stack 23
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;incstack = 0
  3250  003444  FFFF               	dw	65535
  3251                           
  3252                           ;main.c: 1076: uint8_t commandData = *ModbusGetUserCommandData();
  3253  003446  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  3254  00344A  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  3255  00344E  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  3256  003452  50DF               	movf	indf2,w,c
  3257  003454  0100               	movlb	0	; () banked
  3258  003456  6F82               	movwf	CommandSetStatusLed@commandData& (0+255),b
  3259                           
  3260                           ;main.c: 1077: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  3261  003458  EC8B  F001         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  3262  00345C  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Hi,fsr2l
  3263  003460  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Hi+1,fsr2h
  3264  003464  50DF               	movf	indf2,w,c
  3265  003466  0100               	movlb	0	; () banked
  3266  003468  6F81               	movwf	CommandSetStatusLed@soundId& (0+255),b
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 1078: uint8_t led = commandData & 0x07;
  3270  00346A  0100               	movlb	0	; () banked
  3271  00346C  5182               	movf	CommandSetStatusLed@commandData& (0+255),w,b
  3272  00346E  0B07               	andlw	7
  3273  003470  0100               	movlb	0	; () banked
  3274  003472  6F83               	movwf	CommandSetStatusLed@led& (0+255),b
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 1079: if(led >= 0x05)
  3278  003474  0E04               	movlw	4
  3279  003476  0100               	movlb	0	; () banked
  3280  003478  6583               	cpfsgt	CommandSetStatusLed@led& (0+255),b
  3281  00347A  D001               	goto	l7129
  3282  00347C  D03C               	goto	l485
  3283  00347E                     l7129:
  3284  00347E  FFFF               	dw	65535	; assembler added errata NOP
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 1081: if((((commandData) >> (7)) & 0x01) == 0)
  3288  003480  0100               	movlb	0	; () banked
  3289  003482  6B80               	clrf	??_CommandSetStatusLed& (0+255),b
  3290  003484  AF82               	btfss	CommandSetStatusLed@commandData& (0+255),7,b
  3291  003486  D002               	bra	u6485
  3292  003488  0100               	movlb	0	; () banked
  3293  00348A  2B80               	incf	??_CommandSetStatusLed& (0+255),f,b
  3294  00348C                     u6485:
  3295  00348C  0100               	movlb	0	; () banked
  3296  00348E  B180               	btfsc	??_CommandSetStatusLed& (0+255),0,b
  3297  003490  D00F               	goto	l7139
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;main.c: 1082: {
  3301                           ;main.c: 1083: LightStatusLed(led, 0, 0);
  3302  003492  0E00               	movlw	0
  3303  003494  6E21               	movwf	LightStatusLed@on,c
  3304  003496  0E00               	movlw	0
  3305  003498  6E22               	movwf	LightStatusLed@blink,c
  3306  00349A  0100               	movlb	0	; () banked
  3307  00349C  5183               	movf	CommandSetStatusLed@led& (0+255),w,b
  3308  00349E  ECA0  F014         	call	_LightStatusLed
  3309                           
  3310                           ;main.c: 1084: if(soundId != 0xff)
  3311  0034A2  0100               	movlb	0	; () banked
  3312  0034A4  2981               	incf	CommandSetStatusLed@soundId& (0+255),w,b
  3313  0034A6  B4D8               	btfsc	status,2,c
  3314  0034A8  D026               	goto	l485
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;main.c: 1085: StopPlaying();
  3318  0034AA  EC4A  F001         	call	_StopPlaying	;wreg free
  3319                           
  3320                           ;main.c: 1086: return;
  3321  0034AE  D023               	goto	l485
  3322  0034B0                     l7139:
  3323  0034B0  FFFF               	dw	65535	; assembler added errata NOP
  3324                           
  3325                           ;main.c: 1087: }
  3326                           ;main.c: 1088: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  3327  0034B2  0E01               	movlw	1
  3328  0034B4  6E21               	movwf	LightStatusLed@on,c
  3329  0034B6  0100               	movlb	0	; () banked
  3330  0034B8  4582               	rlncf	CommandSetStatusLed@commandData& (0+255),w,b
  3331  0034BA  46E8               	rlncf	wreg,f,c
  3332  0034BC  0B03               	andlw	3
  3333  0034BE  0B01               	andlw	1
  3334  0034C0  6E22               	movwf	LightStatusLed@blink,c
  3335  0034C2  0100               	movlb	0	; () banked
  3336  0034C4  5183               	movf	CommandSetStatusLed@led& (0+255),w,b
  3337  0034C6  ECA0  F014         	call	_LightStatusLed
  3338                           
  3339                           ;main.c: 1089: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  3340  0034CA  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  3341  0034CE  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  3342  0034D2  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  3343  0034D6  50DF               	movf	indf2,w,c
  3344  0034D8  0100               	movlb	0	; () banked
  3345  0034DA  6F80               	movwf	??_CommandSetStatusLed& (0+255),b
  3346  0034DC  0100               	movlb	0	; () banked
  3347  0034DE  5180               	movf	??_CommandSetStatusLed& (0+255),w,b
  3348  0034E0  6E31               	movwf	PlaySound@playDuration,c
  3349  0034E2  6A32               	clrf	PlaySound@playDuration+1,c
  3350  0034E4  0100               	movlb	0	; () banked
  3351  0034E6  5181               	movf	CommandSetStatusLed@soundId& (0+255),w,b
  3352  0034E8  EC27  F015         	call	_PlaySound
  3353                           
  3354                           ;main.c: 1090: ModbusSetExceptionStatusBit(0, 1);
  3355  0034EC  0E01               	movlw	1
  3356  0034EE  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  3357  0034F0  0E00               	movlw	0
  3358  0034F2  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
  3359  0034F6                     l485:
  3360  0034F6  FFFF               	dw	65535	; assembler added errata NOP
  3361  0034F8  0012               	return		;funcret
  3362  0034FA  FFFF               	dw	65535	; errata NOP
  3363  0034FC                     __end_of_CommandSetStatusLed:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           prodh	equ	0xFF4
  3370                           prodl	equ	0xFF3
  3371                           intcon	equ	0xFF2
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           postdec1	equ	0xFE5
  3375                           fsr1h	equ	0xFE2
  3376                           fsr1l	equ	0xFE1
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _LightStatusLed *****************
  3385 ;; Defined at:
  3386 ;;		line 375 in file "main.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  row             1    wreg     unsigned char 
  3389 ;;  on              1   32[COMRAM] unsigned char 
  3390 ;;  blink           1   33[COMRAM] unsigned char 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  row             1   39[COMRAM] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         2       0       0       0       0       0       0
  3403 ;;      Locals:         1       0       0       0       0       0       0
  3404 ;;      Temps:          5       0       0       0       0       0       0
  3405 ;;      Totals:         8       0       0       0       0       0       0
  3406 ;;Total ram usage:        8 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    2
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_ShowFailure
  3413 ;;		_main
  3414 ;;		_CommandSetStatusLed
  3415 ;;		_io_poll
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text11
  3420  002940                     __ptext11:
  3421                           	opt stack 0
  3422  002940                     _LightStatusLed:
  3423                           	opt stack 24
  3424                           
  3425                           ;incstack = 0
  3426  002940  FFFF               	dw	65535
  3427                           
  3428                           ;LightStatusLed@row stored from wreg
  3429  002942  6E28               	movwf	LightStatusLed@row,c
  3430                           
  3431                           ;main.c: 377: if(row > 7)
  3432  002944  0E07               	movlw	7
  3433  002946  6428               	cpfsgt	LightStatusLed@row,c
  3434  002948  D001               	goto	l6553
  3435  00294A  D07E               	goto	l295
  3436  00294C                     l6553:
  3437  00294C  FFFF               	dw	65535	; assembler added errata NOP
  3438                           
  3439                           ;main.c: 379: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  3440  00294E  5021               	movf	LightStatusLed@on,w,c
  3441  002950  B4D8               	btfsc	status,2,c
  3442  002952  D010               	goto	l6557
  3443  002954  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3444  002958  0E01               	movlw	1
  3445  00295A  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3446  00295C  2A23               	incf	??_LightStatusLed,f,c
  3447  00295E  D003               	goto	u5784
  3448  002960                     u5785:
  3449  002960  FFFF               	dw	65535	; assembler added errata NOP
  3450  002962  90D8               	bcf	status,0,c
  3451  002964  3624               	rlcf	??_LightStatusLed+1,f,c
  3452  002966                     u5784:
  3453  002966  FFFF               	dw	65535	; assembler added errata NOP
  3454  002968  2E23               	decfsz	??_LightStatusLed,f,c
  3455  00296A  D7FA               	goto	u5785
  3456  00296C  5024               	movf	??_LightStatusLed+1,w,c
  3457  00296E  0100               	movlb	0	; () banked
  3458  002970  13D1               	iorwf	(_ledStatuses+15)& (0+255),f,b
  3459  002972  D011               	goto	l6559
  3460  002974                     l6557:
  3461  002974  FFFF               	dw	65535	; assembler added errata NOP
  3462  002976  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3463  00297A  0E01               	movlw	1
  3464  00297C  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3465  00297E  2A23               	incf	??_LightStatusLed,f,c
  3466  002980  D003               	goto	u5794
  3467  002982                     u5795:
  3468  002982  FFFF               	dw	65535	; assembler added errata NOP
  3469  002984  90D8               	bcf	status,0,c
  3470  002986  3624               	rlcf	??_LightStatusLed+1,f,c
  3471  002988                     u5794:
  3472  002988  FFFF               	dw	65535	; assembler added errata NOP
  3473  00298A  2E23               	decfsz	??_LightStatusLed,f,c
  3474  00298C  D7FA               	goto	u5795
  3475  00298E  5024               	movf	??_LightStatusLed+1,w,c
  3476  002990  0AFF               	xorlw	255
  3477  002992  0100               	movlb	0	; () banked
  3478  002994  17D1               	andwf	(_ledStatuses+15)& (0+255),f,b
  3479  002996                     l6559:
  3480  002996  FFFF               	dw	65535	; assembler added errata NOP
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;main.c: 380: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  3484  002998  5022               	movf	LightStatusLed@blink,w,c
  3485  00299A  B4D8               	btfsc	status,2,c
  3486  00299C  D010               	goto	l6563
  3487                           
  3488                           ; BSR set to: 0
  3489  00299E  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3490  0029A2  0E01               	movlw	1
  3491  0029A4  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3492  0029A6  2A23               	incf	??_LightStatusLed,f,c
  3493  0029A8  D003               	goto	u5814
  3494  0029AA                     u5815:
  3495  0029AA  FFFF               	dw	65535	; assembler added errata NOP
  3496  0029AC  90D8               	bcf	status,0,c
  3497  0029AE  3624               	rlcf	??_LightStatusLed+1,f,c
  3498  0029B0                     u5814:
  3499  0029B0  FFFF               	dw	65535	; assembler added errata NOP
  3500  0029B2  2E23               	decfsz	??_LightStatusLed,f,c
  3501  0029B4  D7FA               	goto	u5815
  3502  0029B6  5024               	movf	??_LightStatusLed+1,w,c
  3503  0029B8  0101               	movlb	1	; () banked
  3504  0029BA  130F               	iorwf	(_ledBlink+15)& (0+255),f,b
  3505  0029BC  D011               	goto	l6565
  3506  0029BE                     l6563:
  3507  0029BE  FFFF               	dw	65535	; assembler added errata NOP
  3508  0029C0  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3509  0029C4  0E01               	movlw	1
  3510  0029C6  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3511  0029C8  2A23               	incf	??_LightStatusLed,f,c
  3512  0029CA  D003               	goto	u5824
  3513  0029CC                     u5825:
  3514  0029CC  FFFF               	dw	65535	; assembler added errata NOP
  3515  0029CE  90D8               	bcf	status,0,c
  3516  0029D0  3624               	rlcf	??_LightStatusLed+1,f,c
  3517  0029D2                     u5824:
  3518  0029D2  FFFF               	dw	65535	; assembler added errata NOP
  3519  0029D4  2E23               	decfsz	??_LightStatusLed,f,c
  3520  0029D6  D7FA               	goto	u5825
  3521  0029D8  5024               	movf	??_LightStatusLed+1,w,c
  3522  0029DA  0AFF               	xorlw	255
  3523  0029DC  0101               	movlb	1	; () banked
  3524  0029DE  170F               	andwf	(_ledBlink+15)& (0+255),f,b
  3525  0029E0                     l6565:
  3526  0029E0  FFFF               	dw	65535	; assembler added errata NOP
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;main.c: 381: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  3530  0029E2  5021               	movf	LightStatusLed@on,w,c
  3531  0029E4  B4D8               	btfsc	status,2,c
  3532  0029E6  D016               	goto	l6569
  3533                           
  3534                           ; BSR set to: 1
  3535  0029E8  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3536  0029EC  0E01               	movlw	1
  3537  0029EE  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3538  0029F0  0E00               	movlw	0
  3539  0029F2  6E25               	movwf	(??_LightStatusLed+2)& (0+255),c
  3540  0029F4  2A23               	incf	??_LightStatusLed,f,c
  3541  0029F6  D004               	goto	u5844
  3542  0029F8                     u5845:
  3543  0029F8  FFFF               	dw	65535	; assembler added errata NOP
  3544  0029FA  90D8               	bcf	status,0,c
  3545  0029FC  3624               	rlcf	??_LightStatusLed+1,f,c
  3546  0029FE  3625               	rlcf	??_LightStatusLed+2,f,c
  3547  002A00                     u5844:
  3548  002A00  FFFF               	dw	65535	; assembler added errata NOP
  3549  002A02  2E23               	decfsz	??_LightStatusLed,f,c
  3550  002A04  D7F9               	goto	u5845
  3551  002A06  5024               	movf	??_LightStatusLed+1,w,c
  3552  002A08  0100               	movlb	0	; () banked
  3553  002A0A  13F7               	iorwf	__MODBUSCoils& (0+255),f,b
  3554  002A0C  5025               	movf	??_LightStatusLed+2,w,c
  3555  002A0E  0100               	movlb	0	; () banked
  3556  002A10  13F8               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  3557  002A12  D01A               	goto	l295
  3558  002A14                     l6569:
  3559  002A14  FFFF               	dw	65535	; assembler added errata NOP
  3560  002A16  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3561  002A1A  0E01               	movlw	1
  3562  002A1C  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3563  002A1E  0E00               	movlw	0
  3564  002A20  6E25               	movwf	(??_LightStatusLed+2)& (0+255),c
  3565  002A22  2A23               	incf	??_LightStatusLed,f,c
  3566  002A24  D004               	goto	u5854
  3567  002A26                     u5855:
  3568  002A26  FFFF               	dw	65535	; assembler added errata NOP
  3569  002A28  90D8               	bcf	status,0,c
  3570  002A2A  3624               	rlcf	??_LightStatusLed+1,f,c
  3571  002A2C  3625               	rlcf	??_LightStatusLed+2,f,c
  3572  002A2E                     u5854:
  3573  002A2E  FFFF               	dw	65535	; assembler added errata NOP
  3574  002A30  2E23               	decfsz	??_LightStatusLed,f,c
  3575  002A32  D7F9               	goto	u5855
  3576  002A34  1C24               	comf	??_LightStatusLed+1,w,c
  3577  002A36  6E26               	movwf	(??_LightStatusLed+3)& (0+255),c
  3578  002A38  1C25               	comf	??_LightStatusLed+2,w,c
  3579  002A3A  6E27               	movwf	(??_LightStatusLed+4)& (0+255),c
  3580  002A3C  5026               	movf	??_LightStatusLed+3,w,c
  3581  002A3E  0100               	movlb	0	; () banked
  3582  002A40  17F7               	andwf	__MODBUSCoils& (0+255),f,b
  3583  002A42  5027               	movf	??_LightStatusLed+4,w,c
  3584  002A44  0100               	movlb	0	; () banked
  3585  002A46  17F8               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  3586  002A48                     l295:
  3587  002A48  FFFF               	dw	65535	; assembler added errata NOP
  3588  002A4A  0012               	return		;funcret
  3589  002A4C  FFFF               	dw	65535	; errata NOP
  3590  002A4E                     __end_of_LightStatusLed:
  3591                           	opt stack 0
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           prodh	equ	0xFF4
  3597                           prodl	equ	0xFF3
  3598                           intcon	equ	0xFF2
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           postdec1	equ	0xFE5
  3602                           fsr1h	equ	0xFE2
  3603                           fsr1l	equ	0xFE1
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _CommandSetLed *****************
  3612 ;; Defined at:
  3613 ;;		line 1035 in file "main.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  led             1    9[BANK0 ] unsigned char 
  3618 ;;  commandData     1    8[BANK0 ] unsigned char 
  3619 ;;  blinkSeconds    1    7[BANK0 ] unsigned char 
  3620 ;;  ledColor        1    6[BANK0 ] unsigned char 
  3621 ;;  soundId         1    5[BANK0 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3631 ;;      Params:         0       0       0       0       0       0       0
  3632 ;;      Locals:         0       5       0       0       0       0       0
  3633 ;;      Temps:          0       5       0       0       0       0       0
  3634 ;;      Totals:         0      10       0       0       0       0       0
  3635 ;;Total ram usage:       10 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    5
  3638 ;; This function calls:
  3639 ;;		_GetTime
  3640 ;;		_LightLed
  3641 ;;		_ModbusGetUserCommandAdditional1Hi
  3642 ;;		_ModbusGetUserCommandAdditional1Lo
  3643 ;;		_ModbusGetUserCommandAdditional2Hi
  3644 ;;		_ModbusGetUserCommandAdditional2Lo
  3645 ;;		_ModbusGetUserCommandData
  3646 ;;		_ModbusSetExceptionStatusBit
  3647 ;;		_PlaySound
  3648 ;;		_StopPlaying
  3649 ;; This function is called by:
  3650 ;;		_ProcessUserCommands
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text12
  3655  0020C6                     __ptext12:
  3656                           	opt stack 0
  3657  0020C6                     _CommandSetLed:
  3658                           	opt stack 23
  3659                           
  3660                           ;incstack = 0
  3661  0020C6  FFFF               	dw	65535
  3662                           
  3663                           ;main.c: 1042: uint8_t commandData = *ModbusGetUserCommandData();
  3664  0020C8  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  3665  0020CC  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  3666  0020D0  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  3667  0020D4  50DF               	movf	indf2,w,c
  3668  0020D6  0100               	movlb	0	; () banked
  3669  0020D8  6F88               	movwf	CommandSetLed@commandData& (0+255),b
  3670                           
  3671                           ;main.c: 1043: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  3672  0020DA  EC8B  F001         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  3673  0020DE  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Hi,fsr2l
  3674  0020E2  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Hi+1,fsr2h
  3675  0020E6  50DF               	movf	indf2,w,c
  3676  0020E8  0100               	movlb	0	; () banked
  3677  0020EA  6F85               	movwf	CommandSetLed@soundId& (0+255),b
  3678                           
  3679                           ;main.c: 1044: uint8_t led = *ModbusGetUserCommandAdditional2Hi();
  3680  0020EC  EC7D  F001         	call	_ModbusGetUserCommandAdditional2Hi	;wreg free
  3681  0020F0  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional2Hi,fsr2l
  3682  0020F4  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional2Hi+1,fsr2h
  3683  0020F8  50DF               	movf	indf2,w,c
  3684  0020FA  0100               	movlb	0	; () banked
  3685  0020FC  6F89               	movwf	CommandSetLed@led& (0+255),b
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;main.c: 1045: if(led == 0 || led > 60 - _maxDiaryEvents)
  3689  0020FE  0100               	movlb	0	; () banked
  3690  002100  5189               	movf	CommandSetLed@led& (0+255),w,b
  3691  002102  0100               	movlb	0	; () banked
  3692  002104  B4D8               	btfsc	status,2,c
  3693  002106  D0AE               	goto	l475
  3694                           
  3695                           ; BSR set to: 0
  3696  002108  0100               	movlb	0	; () banked
  3697  00210A  5189               	movf	CommandSetLed@led& (0+255),w,b
  3698  00210C  0100               	movlb	0	; () banked
  3699  00210E  6F80               	movwf	??_CommandSetLed& (0+255),b
  3700  002110  6B81               	clrf	(??_CommandSetLed+1)& (0+255),b
  3701  002112  504D               	movf	__maxDiaryEvents,w,c
  3702  002114  0100               	movlb	0	; () banked
  3703  002116  6F82               	movwf	(??_CommandSetLed+2)& (0+255),b
  3704  002118  6B83               	clrf	(??_CommandSetLed+3)& (0+255),b
  3705  00211A  0100               	movlb	0	; () banked
  3706  00211C  1F82               	comf	(??_CommandSetLed+2)& (0+255),f,b
  3707  00211E  1F83               	comf	(??_CommandSetLed+3)& (0+255),f,b
  3708  002120  4B82               	infsnz	(??_CommandSetLed+2)& (0+255),f,b
  3709  002122  2B83               	incf	(??_CommandSetLed+3)& (0+255),f,b
  3710  002124  0E3C               	movlw	60
  3711  002126  0100               	movlb	0	; () banked
  3712  002128  2782               	addwf	(??_CommandSetLed+2)& (0+255),f,b
  3713  00212A  0E00               	movlw	0
  3714  00212C  2383               	addwfc	(??_CommandSetLed+3)& (0+255),f,b
  3715  00212E  0100               	movlb	0	; () banked
  3716  002130  5180               	movf	??_CommandSetLed& (0+255),w,b
  3717  002132  0100               	movlb	0	; () banked
  3718  002134  5D82               	subwf	(??_CommandSetLed+2)& (0+255),w,b
  3719  002136  0100               	movlb	0	; () banked
  3720  002138  5183               	movf	(??_CommandSetLed+3)& (0+255),w,b
  3721  00213A  0A80               	xorlw	128
  3722  00213C  0100               	movlb	0	; () banked
  3723  00213E  6F84               	movwf	(??_CommandSetLed+4)& (0+255),b
  3724  002140  0100               	movlb	0	; () banked
  3725  002142  5181               	movf	(??_CommandSetLed+1)& (0+255),w,b
  3726  002144  0A80               	xorlw	128
  3727  002146  0100               	movlb	0	; () banked
  3728  002148  5984               	subwfb	(??_CommandSetLed+4)& (0+255),w,b
  3729  00214A  A0D8               	btfss	status,0,c
  3730  00214C  D08B               	goto	l475
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 1047: uint8_t ledColor = commandData & 0x03;
  3734                           
  3735                           ; BSR set to: 0
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;main.c: 1046: return;
  3739  00214E  0100               	movlb	0	; () banked
  3740  002150  5188               	movf	CommandSetLed@commandData& (0+255),w,b
  3741  002152  0B03               	andlw	3
  3742  002154  0100               	movlb	0	; () banked
  3743  002156  6F86               	movwf	CommandSetLed@ledColor& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 1048: if((((commandData) >> (7)) & 0x01) == 0 || ledColor == 0)
  3747  002158  0100               	movlb	0	; () banked
  3748  00215A  6B80               	clrf	??_CommandSetLed& (0+255),b
  3749  00215C  AF88               	btfss	CommandSetLed@commandData& (0+255),7,b
  3750  00215E  D002               	bra	u6425
  3751  002160  0100               	movlb	0	; () banked
  3752  002162  2B80               	incf	??_CommandSetLed& (0+255),f,b
  3753  002164                     u6425:
  3754  002164  0100               	movlb	0	; () banked
  3755  002166  A180               	btfss	??_CommandSetLed& (0+255),0,b
  3756  002168  D005               	goto	l7097
  3757                           
  3758                           ; BSR set to: 0
  3759  00216A  0100               	movlb	0	; () banked
  3760  00216C  5186               	movf	CommandSetLed@ledColor& (0+255),w,b
  3761  00216E  0100               	movlb	0	; () banked
  3762  002170  A4D8               	btfss	status,2,c
  3763  002172  D010               	goto	l7105
  3764  002174                     l7097:
  3765  002174  FFFF               	dw	65535	; assembler added errata NOP
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;main.c: 1049: {
  3769                           ;main.c: 1050: LightLed(led, LED_OFF, 0);
  3770  002176  0E00               	movlw	0
  3771  002178  6E21               	movwf	LightLed@ledState,c
  3772  00217A  0E00               	movlw	0
  3773  00217C  6E22               	movwf	LightLed@blink,c
  3774  00217E  0100               	movlb	0	; () banked
  3775  002180  5189               	movf	CommandSetLed@led& (0+255),w,b
  3776  002182  EC5C  F005         	call	_LightLed
  3777                           
  3778                           ;main.c: 1051: if(soundId != 0xff)
  3779  002186  0100               	movlb	0	; () banked
  3780  002188  2985               	incf	CommandSetLed@soundId& (0+255),w,b
  3781  00218A  B4D8               	btfsc	status,2,c
  3782  00218C  D06B               	goto	l475
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 1052: StopPlaying();
  3786  00218E  EC4A  F001         	call	_StopPlaying	;wreg free
  3787                           
  3788                           ;main.c: 1053: return;
  3789  002192  D068               	goto	l475
  3790  002194                     l7105:
  3791  002194  FFFF               	dw	65535	; assembler added errata NOP
  3792                           
  3793                           ;main.c: 1054: }
  3794                           ;main.c: 1056: uint8_t blinkSeconds = *ModbusGetUserCommandAdditional2Lo();
  3795  002196  EC76  F001         	call	_ModbusGetUserCommandAdditional2Lo	;wreg free
  3796  00219A  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional2Lo,fsr2l
  3797  00219E  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional2Lo+1,fsr2h
  3798  0021A2  50DF               	movf	indf2,w,c
  3799  0021A4  0100               	movlb	0	; () banked
  3800  0021A6  6F87               	movwf	CommandSetLed@blinkSeconds& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;main.c: 1057: if(blinkSeconds == 0)
  3804  0021A8  0100               	movlb	0	; () banked
  3805  0021AA  5187               	movf	CommandSetLed@blinkSeconds& (0+255),w,b
  3806  0021AC  0100               	movlb	0	; () banked
  3807  0021AE  A4D8               	btfss	status,2,c
  3808  0021B0  D00D               	goto	l480
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;main.c: 1058: {
  3812                           ;main.c: 1059: LightLed(led, ledColor, (((commandData) >> (6)) & 0x01));
  3813  0021B2  C086  F021         	movff	CommandSetLed@ledColor,LightLed@ledState
  3814  0021B6  0100               	movlb	0	; () banked
  3815  0021B8  4588               	rlncf	CommandSetLed@commandData& (0+255),w,b
  3816  0021BA  46E8               	rlncf	wreg,f,c
  3817  0021BC  0B03               	andlw	3
  3818  0021BE  0B01               	andlw	1
  3819  0021C0  6E22               	movwf	LightLed@blink,c
  3820  0021C2  0100               	movlb	0	; () banked
  3821  0021C4  5189               	movf	CommandSetLed@led& (0+255),w,b
  3822  0021C6  EC5C  F005         	call	_LightLed
  3823                           
  3824                           ;main.c: 1060: }
  3825  0021CA  D035               	goto	l7117
  3826  0021CC                     l480:
  3827  0021CC  FFFF               	dw	65535	; assembler added errata NOP
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;main.c: 1061: else
  3831                           ;main.c: 1062: {
  3832                           ;main.c: 1063: _eventFromCommand.LedNum = led;
  3833  0021CE  C089  F0D3         	movff	CommandSetLed@led,__eventFromCommand+1
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;main.c: 1064: _eventFromCommand.IsFire = 1;
  3837  0021D2  0E01               	movlw	1
  3838  0021D4  0100               	movlb	0	; () banked
  3839  0021D6  6FD2               	movwf	__eventFromCommand& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;main.c: 1065: _eventFromCommand.ResetSecond = *GetTime() + blinkSeconds;
  3843  0021D8  EC92  F001         	call	_GetTime	;wreg free
  3844  0021DC  C021  FFD9         	movff	?_GetTime,fsr2l
  3845  0021E0  C022  FFDA         	movff	?_GetTime+1,fsr2h
  3846  0021E4  CFDE F080          	movff	postinc2,??_CommandSetLed
  3847  0021E8  CFDE F081          	movff	postinc2,??_CommandSetLed+1
  3848  0021EC  CFDE F082          	movff	postinc2,??_CommandSetLed+2
  3849  0021F0  CFDE F083          	movff	postinc2,??_CommandSetLed+3
  3850  0021F4  0100               	movlb	0	; () banked
  3851  0021F6  5187               	movf	CommandSetLed@blinkSeconds& (0+255),w,b
  3852  0021F8  0100               	movlb	0	; () banked
  3853  0021FA  2580               	addwf	??_CommandSetLed& (0+255),w,b
  3854  0021FC  0100               	movlb	0	; () banked
  3855  0021FE  6FD4               	movwf	(__eventFromCommand+2)& (0+255),b
  3856  002200  0E00               	movlw	0
  3857  002202  0100               	movlb	0	; () banked
  3858  002204  2181               	addwfc	(??_CommandSetLed+1)& (0+255),w,b
  3859  002206  0100               	movlb	0	; () banked
  3860  002208  6FD5               	movwf	(__eventFromCommand+3)& (0+255),b
  3861  00220A  0E00               	movlw	0
  3862  00220C  0100               	movlb	0	; () banked
  3863  00220E  2182               	addwfc	(??_CommandSetLed+2)& (0+255),w,b
  3864  002210  0100               	movlb	0	; () banked
  3865  002212  6FD6               	movwf	(__eventFromCommand+4)& (0+255),b
  3866  002214  0E00               	movlw	0
  3867  002216  0100               	movlb	0	; () banked
  3868  002218  2183               	addwfc	(??_CommandSetLed+3)& (0+255),w,b
  3869  00221A  0100               	movlb	0	; () banked
  3870  00221C  6FD7               	movwf	(__eventFromCommand+5)& (0+255),b
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 1066: LightLed(led, LED_ORANGE, (((commandData) >> (6)) & 0x01));
  3874  00221E  0E03               	movlw	3
  3875  002220  6E21               	movwf	LightLed@ledState,c
  3876  002222  0100               	movlb	0	; () banked
  3877  002224  4588               	rlncf	CommandSetLed@commandData& (0+255),w,b
  3878  002226  46E8               	rlncf	wreg,f,c
  3879  002228  0B03               	andlw	3
  3880  00222A  0B01               	andlw	1
  3881  00222C  6E22               	movwf	LightLed@blink,c
  3882  00222E  0100               	movlb	0	; () banked
  3883  002230  5189               	movf	CommandSetLed@led& (0+255),w,b
  3884  002232  EC5C  F005         	call	_LightLed
  3885  002236                     l7117:
  3886  002236  FFFF               	dw	65535	; assembler added errata NOP
  3887                           
  3888                           ;main.c: 1067: }
  3889                           ;main.c: 1068: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  3890  002238  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  3891  00223C  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  3892  002240  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  3893  002244  50DF               	movf	indf2,w,c
  3894  002246  0100               	movlb	0	; () banked
  3895  002248  6F80               	movwf	??_CommandSetLed& (0+255),b
  3896  00224A  0100               	movlb	0	; () banked
  3897  00224C  5180               	movf	??_CommandSetLed& (0+255),w,b
  3898  00224E  6E31               	movwf	PlaySound@playDuration,c
  3899  002250  6A32               	clrf	PlaySound@playDuration+1,c
  3900  002252  0100               	movlb	0	; () banked
  3901  002254  5185               	movf	CommandSetLed@soundId& (0+255),w,b
  3902  002256  EC27  F015         	call	_PlaySound
  3903                           
  3904                           ;main.c: 1069: ModbusSetExceptionStatusBit(0, 1);
  3905  00225A  0E01               	movlw	1
  3906  00225C  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  3907  00225E  0E00               	movlw	0
  3908  002260  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
  3909  002264                     l475:
  3910  002264  FFFF               	dw	65535	; assembler added errata NOP
  3911  002266  0012               	return		;funcret
  3912  002268  FFFF               	dw	65535	; errata NOP
  3913  00226A                     __end_of_CommandSetLed:
  3914                           	opt stack 0
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon	equ	0xFF2
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1h	equ	0xFE2
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _ModbusGetUserCommandData *****************
  3935 ;; Defined at:
  3936 ;;		line 198 in file "ModbusRtu.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  2   32[COMRAM] PTR unsigned char 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3950 ;;      Params:         2       0       0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0
  3953 ;;      Totals:         2       0       0       0       0       0       0
  3954 ;;Total ram usage:        2 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_CommandSetLed
  3961 ;;		_CommandSetStatusLed
  3962 ;;		_ProcessUserCommands
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text13
  3967  0002DE                     __ptext13:
  3968                           	opt stack 0
  3969  0002DE                     _ModbusGetUserCommandData:
  3970                           	opt stack 26
  3971                           
  3972                           ;incstack = 0
  3973  0002DE  FFFF               	dw	65535
  3974  0002E0  0E5B               	movlw	low _ModbusUserCommandData
  3975  0002E2  6E21               	movwf	?_ModbusGetUserCommandData,c
  3976  0002E4  0E00               	movlw	high _ModbusUserCommandData
  3977  0002E6  6E22               	movwf	?_ModbusGetUserCommandData+1,c
  3978  0002E8  0012               	return		;funcret
  3979  0002EA  FFFF               	dw	65535	; errata NOP
  3980  0002EC                     __end_of_ModbusGetUserCommandData:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           fsr1h	equ	0xFE2
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _ModbusGetUserCommandAdditional2Lo *****************
  4002 ;; Defined at:
  4003 ;;		line 210 in file "ModbusRtu.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;		None
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2   32[COMRAM] PTR unsigned char 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4017 ;;      Params:         2       0       0       0       0       0       0
  4018 ;;      Locals:         0       0       0       0       0       0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0
  4020 ;;      Totals:         2       0       0       0       0       0       0
  4021 ;;Total ram usage:        2 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    2
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_CommandSetLed
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text14
  4032  0002EC                     __ptext14:
  4033                           	opt stack 0
  4034  0002EC                     _ModbusGetUserCommandAdditional2Lo:
  4035                           	opt stack 25
  4036                           
  4037                           ;incstack = 0
  4038  0002EC  FFFF               	dw	65535
  4039  0002EE  0EFA               	movlw	low _ModbusUserCommandAdditional2Lo
  4040  0002F0  6E21               	movwf	?_ModbusGetUserCommandAdditional2Lo,c
  4041  0002F2  0E00               	movlw	high _ModbusUserCommandAdditional2Lo
  4042  0002F4  6E22               	movwf	?_ModbusGetUserCommandAdditional2Lo+1,c
  4043  0002F6  0012               	return		;funcret
  4044  0002F8  FFFF               	dw	65535	; errata NOP
  4045  0002FA                     __end_of_ModbusGetUserCommandAdditional2Lo:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _ModbusGetUserCommandAdditional2Hi *****************
  4067 ;; Defined at:
  4068 ;;		line 209 in file "ModbusRtu.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;		None
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;		None
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  2   32[COMRAM] PTR unsigned char 
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4082 ;;      Params:         2       0       0       0       0       0       0
  4083 ;;      Locals:         0       0       0       0       0       0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0
  4085 ;;      Totals:         2       0       0       0       0       0       0
  4086 ;;Total ram usage:        2 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    2
  4089 ;; This function calls:
  4090 ;;		Nothing
  4091 ;; This function is called by:
  4092 ;;		_CommandSetLed
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text15
  4097  0002FA                     __ptext15:
  4098                           	opt stack 0
  4099  0002FA                     _ModbusGetUserCommandAdditional2Hi:
  4100                           	opt stack 25
  4101                           
  4102                           ;incstack = 0
  4103  0002FA  FFFF               	dw	65535
  4104  0002FC  0EF9               	movlw	low _ModbusUserCommandAdditional2Hi
  4105  0002FE  6E21               	movwf	?_ModbusGetUserCommandAdditional2Hi,c
  4106  000300  0E00               	movlw	high _ModbusUserCommandAdditional2Hi
  4107  000302  6E22               	movwf	?_ModbusGetUserCommandAdditional2Hi+1,c
  4108  000304  0012               	return		;funcret
  4109  000306  FFFF               	dw	65535	; errata NOP
  4110  000308                     __end_of_ModbusGetUserCommandAdditional2Hi:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  4132 ;; Defined at:
  4133 ;;		line 204 in file "ModbusRtu.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  2   32[COMRAM] PTR unsigned char 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4147 ;;      Params:         2       0       0       0       0       0       0
  4148 ;;      Locals:         0       0       0       0       0       0       0
  4149 ;;      Temps:          0       0       0       0       0       0       0
  4150 ;;      Totals:         2       0       0       0       0       0       0
  4151 ;;Total ram usage:        2 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    2
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_CommandSetLed
  4158 ;;		_CommandSetStatusLed
  4159 ;;		_ProcessUserCommands
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text16
  4164  000308                     __ptext16:
  4165                           	opt stack 0
  4166  000308                     _ModbusGetUserCommandAdditional1Lo:
  4167                           	opt stack 26
  4168                           
  4169                           ;incstack = 0
  4170  000308  FFFF               	dw	65535
  4171  00030A  0E5A               	movlw	low _ModbusUserCommandAdditional1Lo
  4172  00030C  6E21               	movwf	?_ModbusGetUserCommandAdditional1Lo,c
  4173  00030E  0E00               	movlw	high _ModbusUserCommandAdditional1Lo
  4174  000310  6E22               	movwf	?_ModbusGetUserCommandAdditional1Lo+1,c
  4175  000312  0012               	return		;funcret
  4176  000314  FFFF               	dw	65535	; errata NOP
  4177  000316                     __end_of_ModbusGetUserCommandAdditional1Lo:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           postdec1	equ	0xFE5
  4189                           fsr1h	equ	0xFE2
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  4199 ;; Defined at:
  4200 ;;		line 203 in file "ModbusRtu.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  2   32[COMRAM] PTR unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4214 ;;      Params:         2       0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0
  4217 ;;      Totals:         2       0       0       0       0       0       0
  4218 ;;Total ram usage:        2 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    2
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_CommandSetLed
  4225 ;;		_CommandSetStatusLed
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text17
  4230  000316                     __ptext17:
  4231                           	opt stack 0
  4232  000316                     _ModbusGetUserCommandAdditional1Hi:
  4233                           	opt stack 25
  4234                           
  4235                           ;incstack = 0
  4236  000316  FFFF               	dw	65535
  4237  000318  0E59               	movlw	low _ModbusUserCommandAdditional1Hi
  4238  00031A  6E21               	movwf	?_ModbusGetUserCommandAdditional1Hi,c
  4239  00031C  0E00               	movlw	high _ModbusUserCommandAdditional1Hi
  4240  00031E  6E22               	movwf	?_ModbusGetUserCommandAdditional1Hi+1,c
  4241  000320  0012               	return		;funcret
  4242  000322  FFFF               	dw	65535	; errata NOP
  4243  000324                     __end_of_ModbusGetUserCommandAdditional1Hi:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           postdec1	equ	0xFE5
  4255                           fsr1h	equ	0xFE2
  4256                           fsr1l	equ	0xFE1
  4257                           indf2	equ	0xFDF
  4258                           postinc2	equ	0xFDE
  4259                           postdec2	equ	0xFDD
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _ModbusGetLastCommand *****************
  4265 ;; Defined at:
  4266 ;;		line 965 in file "ModbusRtu.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  address         2   32[COMRAM] PTR unsigned short 
  4269 ;;		 -> io_poll@lastAddress(2), 
  4270 ;;  count           2   34[COMRAM] PTR unsigned short 
  4271 ;;		 -> io_poll@lastEndAddress(2), 
  4272 ;;  command         2   36[COMRAM] PTR unsigned char 
  4273 ;;		 -> io_poll@lastCommand(1), 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  2   32[COMRAM] PTR unsigned char 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4285 ;;      Params:         6       0       0       0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0
  4288 ;;      Totals:         6       0       0       0       0       0       0
  4289 ;;Total ram usage:        6 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    2
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_io_poll
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text18
  4300  003C2A                     __ptext18:
  4301                           	opt stack 0
  4302  003C2A                     _ModbusGetLastCommand:
  4303                           	opt stack 27
  4304                           
  4305                           ;incstack = 0
  4306  003C2A  FFFF               	dw	65535
  4307                           
  4308                           ;ModbusRtu.c: 967: if (address != (0))
  4309  003C2C  5021               	movf	ModbusGetLastCommand@address,w,c
  4310  003C2E  1022               	iorwf	ModbusGetLastCommand@address+1,w,c
  4311  003C30  B4D8               	btfsc	status,2,c
  4312  003C32  D008               	goto	l7319
  4313                           
  4314                           ;ModbusRtu.c: 968: *address = _lastAddress;
  4315  003C34  C021  FFD9         	movff	ModbusGetLastCommand@address,fsr2l
  4316  003C38  C022  FFDA         	movff	ModbusGetLastCommand@address+1,fsr2h
  4317  003C3C  C0E2  FFDE         	movff	__lastAddress,postinc2
  4318  003C40  C0E3  FFDD         	movff	__lastAddress+1,postdec2
  4319  003C44                     l7319:
  4320  003C44  FFFF               	dw	65535	; assembler added errata NOP
  4321                           
  4322                           ;ModbusRtu.c: 969: if (count != (0))
  4323  003C46  5023               	movf	ModbusGetLastCommand@count,w,c
  4324  003C48  1024               	iorwf	ModbusGetLastCommand@count+1,w,c
  4325  003C4A  B4D8               	btfsc	status,2,c
  4326  003C4C  D008               	goto	l7323
  4327                           
  4328                           ;ModbusRtu.c: 970: *count = _lastCount;
  4329  003C4E  C023  FFD9         	movff	ModbusGetLastCommand@count,fsr2l
  4330  003C52  C024  FFDA         	movff	ModbusGetLastCommand@count+1,fsr2h
  4331  003C56  C0E4  FFDE         	movff	__lastCount,postinc2
  4332  003C5A  C0E5  FFDD         	movff	__lastCount+1,postdec2
  4333  003C5E                     l7323:
  4334  003C5E  FFFF               	dw	65535	; assembler added errata NOP
  4335                           
  4336                           ;ModbusRtu.c: 971: if(command != (0))
  4337  003C60  5025               	movf	ModbusGetLastCommand@command,w,c
  4338  003C62  1026               	iorwf	ModbusGetLastCommand@command+1,w,c
  4339  003C64  B4D8               	btfsc	status,2,c
  4340  003C66  D006               	goto	l7327
  4341                           
  4342                           ;ModbusRtu.c: 972: *command = _lastCommand;
  4343  003C68  C025  FFD9         	movff	ModbusGetLastCommand@command,fsr2l
  4344  003C6C  C026  FFDA         	movff	ModbusGetLastCommand@command+1,fsr2h
  4345  003C70  C04C  FFDF         	movff	__lastCommand,indf2
  4346  003C74                     l7327:
  4347  003C74  FFFF               	dw	65535	; assembler added errata NOP
  4348                           
  4349                           ;ModbusRtu.c: 973: return &_lastFunction;
  4350  003C76  0E5D               	movlw	low __lastFunction
  4351  003C78  6E21               	movwf	?_ModbusGetLastCommand,c
  4352  003C7A  0E00               	movlw	high __lastFunction
  4353  003C7C  6E22               	movwf	?_ModbusGetLastCommand+1,c
  4354  003C7E  0012               	return		;funcret
  4355  003C80  FFFF               	dw	65535	; errata NOP
  4356  003C82                     __end_of_ModbusGetLastCommand:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _getHourMin *****************
  4378 ;; Defined at:
  4379 ;;		line 256 in file "interrupts.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  hour            2   32[COMRAM] PTR unsigned char 
  4382 ;;		 -> main@hour(1), 
  4383 ;;  min             2   34[COMRAM] PTR unsigned char 
  4384 ;;		 -> main@minute(1), 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      unsigned char 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4396 ;;      Params:         4       0       0       0       0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0
  4398 ;;      Temps:          0       0       0       0       0       0       0
  4399 ;;      Totals:         4       0       0       0       0       0       0
  4400 ;;Total ram usage:        4 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    2
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text19
  4411  000124                     __ptext19:
  4412                           	opt stack 0
  4413  000124                     _getHourMin:
  4414                           	opt stack 28
  4415                           
  4416                           ;incstack = 0
  4417  000124  FFFF               	dw	65535
  4418                           
  4419                           ;interrupts.c: 258: if(globalHours == 0xFF)
  4420  000126  285E               	incf	_globalHours,w,c	;volatile
  4421  000128  B4D8               	btfsc	status,2,c
  4422  00012A  D00E               	goto	l109
  4423                           
  4424                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  4425                           
  4426                           ;interrupts.c: 259: return 0;
  4427                           ;	Return value of _getHourMin is never used
  4428  00012C  9EF2               	bcf	intcon,7,c	;volatile
  4429                           
  4430                           ;interrupts.c: 261: *hour = globalHours;
  4431  00012E  C021  FFD9         	movff	getHourMin@hour,fsr2l
  4432  000132  C022  FFDA         	movff	getHourMin@hour+1,fsr2h
  4433  000136  C05E  FFDF         	movff	_globalHours,indf2	;volatile
  4434                           
  4435                           ;interrupts.c: 262: *min = globalMinutes;
  4436  00013A  C023  FFD9         	movff	getHourMin@min,fsr2l
  4437  00013E  C024  FFDA         	movff	getHourMin@min+1,fsr2h
  4438  000142  C058  FFDF         	movff	_globalMinutes,indf2	;volatile
  4439                           
  4440                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  4441  000146  8EF2               	bsf	intcon,7,c	;volatile
  4442  000148                     l109:
  4443  000148  FFFF               	dw	65535	; assembler added errata NOP
  4444  00014A  0012               	return		;funcret
  4445  00014C  FFFF               	dw	65535	; errata NOP
  4446  00014E                     __end_of_getHourMin:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postdec1	equ	0xFE5
  4458                           fsr1h	equ	0xFE2
  4459                           fsr1l	equ	0xFE1
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           postdec2	equ	0xFDD
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _SwitchOffAllDiaryLeds *****************
  4468 ;; Defined at:
  4469 ;;		line 367 in file "main.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  i               1   40[COMRAM] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         1       0       0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0
  4486 ;;      Totals:         1       0       0       0       0       0       0
  4487 ;;Total ram usage:        1 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    3
  4490 ;; This function calls:
  4491 ;;		_LightLed
  4492 ;; This function is called by:
  4493 ;;		_main
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text20
  4498  003FCE                     __ptext20:
  4499                           	opt stack 0
  4500  003FCE                     _SwitchOffAllDiaryLeds:
  4501                           	opt stack 27
  4502                           
  4503                           ;incstack = 0
  4504  003FCE  FFFF               	dw	65535
  4505                           
  4506                           ;main.c: 369: for(uint8_t i = 60 - _maxDiaryEvents + 1; i <= 60; i++)
  4507  003FD0  504D               	movf	__maxDiaryEvents,w,c
  4508  003FD2  0800               	sublw	0
  4509  003FD4  0F3D               	addlw	61
  4510  003FD6  6E29               	movwf	SwitchOffAllDiaryLeds@i,c
  4511  003FD8  FFFF               	dw	65535	; assembler added errata NOP
  4512  003FDA  0E3C               	movlw	60
  4513  003FDC  6429               	cpfsgt	SwitchOffAllDiaryLeds@i,c
  4514  003FDE  D001               	goto	l8087
  4515  003FE0  D00A               	goto	l291
  4516  003FE2                     l8087:
  4517  003FE2  FFFF               	dw	65535	; assembler added errata NOP
  4518                           
  4519                           ;main.c: 370: {
  4520                           ;main.c: 371: LightLed(i, LED_OFF, 0);
  4521  003FE4  0E00               	movlw	0
  4522  003FE6  6E21               	movwf	LightLed@ledState,c
  4523  003FE8  0E00               	movlw	0
  4524  003FEA  6E22               	movwf	LightLed@blink,c
  4525  003FEC  5029               	movf	SwitchOffAllDiaryLeds@i,w,c
  4526  003FEE  EC5C  F005         	call	_LightLed
  4527  003FF2  2A29               	incf	SwitchOffAllDiaryLeds@i,f,c
  4528  003FF4  D7F1               	goto	L1
  4529  003FF6                     l291:
  4530  003FF6  FFFF               	dw	65535	; assembler added errata NOP
  4531  003FF8  0012               	return		;funcret
  4532  003FFA  FFFF               	dw	65535	; errata NOP
  4533  003FFC                     __end_of_SwitchOffAllDiaryLeds:
  4534                           	opt stack 0
  4535                           tblptru	equ	0xFF8
  4536                           tblptrh	equ	0xFF7
  4537                           tblptrl	equ	0xFF6
  4538                           tablat	equ	0xFF5
  4539                           prodh	equ	0xFF4
  4540                           prodl	equ	0xFF3
  4541                           intcon	equ	0xFF2
  4542                           postinc0	equ	0xFEE
  4543                           wreg	equ	0xFE8
  4544                           postdec1	equ	0xFE5
  4545                           fsr1h	equ	0xFE2
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _ResetEventFromCommand *****************
  4555 ;; Defined at:
  4556 ;;		line 693 in file "main.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  state           1    wreg     unsigned char 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  state           1   40[COMRAM] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4570 ;;      Params:         0       0       0       0       0       0       0
  4571 ;;      Locals:         3       0       0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0
  4573 ;;      Totals:         3       0       0       0       0       0       0
  4574 ;;Total ram usage:        3 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    3
  4577 ;; This function calls:
  4578 ;;		_LightLed
  4579 ;;		_StopPlaying
  4580 ;; This function is called by:
  4581 ;;		_main
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text21
  4586  003C82                     __ptext21:
  4587                           	opt stack 0
  4588  003C82                     _ResetEventFromCommand:
  4589                           	opt stack 27
  4590                           
  4591                           ;incstack = 0
  4592  003C82  FFFF               	dw	65535
  4593                           
  4594                           ;ResetEventFromCommand@state stored from wreg
  4595  003C84  6E29               	movwf	ResetEventFromCommand@state,c
  4596                           
  4597                           ;main.c: 695: if(!_eventFromCommand.IsFire)
  4598  003C86  0100               	movlb	0	; () banked
  4599  003C88  51D2               	movf	__eventFromCommand& (0+255),w,b
  4600  003C8A  B4D8               	btfsc	status,2,c
  4601  003C8C  D023               	goto	l416
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;main.c: 697: LightLed(_eventFromCommand.LedNum, state ? LED_GREEN : LED_RED, 0);
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;main.c: 696: return;
  4610  003C8E  5029               	movf	ResetEventFromCommand@state,w,c
  4611  003C90  A4D8               	btfss	status,2,c
  4612  003C92  D004               	goto	l8289
  4613                           
  4614                           ; BSR set to: 0
  4615  003C94  0E00               	movlw	0
  4616  003C96  6E2B               	movwf	_ResetEventFromCommand$917+1,c
  4617  003C98  0E02               	movlw	2
  4618  003C9A  D004               	goto	L2
  4619  003C9C                     l8289:
  4620  003C9C  FFFF               	dw	65535	; assembler added errata NOP
  4621                           
  4622                           ; BSR set to: 0
  4623  003C9E  0E00               	movlw	0
  4624  003CA0  6E2B               	movwf	_ResetEventFromCommand$917+1,c
  4625  003CA2  0E01               	movlw	1
  4626  003CA4                     L2:
  4627  003CA4  FFFF               	dw	65535	; assembler added errata NOP
  4628  003CA6  6E2A               	movwf	_ResetEventFromCommand$917,c
  4629                           
  4630                           ; BSR set to: 0
  4631                           
  4632                           ; BSR set to: 0
  4633  003CA8  C02A  F021         	movff	_ResetEventFromCommand$917,LightLed@ledState
  4634  003CAC  0E00               	movlw	0
  4635  003CAE  6E22               	movwf	LightLed@blink,c
  4636  003CB0  0100               	movlb	0	; () banked
  4637  003CB2  51D3               	movf	(__eventFromCommand+1)& (0+255),w,b
  4638  003CB4  EC5C  F005         	call	_LightLed
  4639                           
  4640                           ;main.c: 698: _eventFromCommand.IsFire = 0;
  4641  003CB8  0E00               	movlw	0
  4642  003CBA  0100               	movlb	0	; () banked
  4643  003CBC  6FD2               	movwf	__eventFromCommand& (0+255),b
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;main.c: 699: _eventFromCommand.ResetSecond = 0;
  4647  003CBE  0E00               	movlw	0
  4648  003CC0  0100               	movlb	0	; () banked
  4649  003CC2  6FD4               	movwf	(__eventFromCommand+2)& (0+255),b
  4650  003CC4  0E00               	movlw	0
  4651  003CC6  6FD5               	movwf	(__eventFromCommand+3)& (0+255),b
  4652  003CC8  0E00               	movlw	0
  4653  003CCA  6FD6               	movwf	(__eventFromCommand+4)& (0+255),b
  4654  003CCC  0E00               	movlw	0
  4655  003CCE  6FD7               	movwf	(__eventFromCommand+5)& (0+255),b
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;main.c: 700: StopPlaying();
  4659  003CD0  EC4A  F001         	call	_StopPlaying	;wreg free
  4660  003CD4                     l416:
  4661  003CD4  FFFF               	dw	65535	; assembler added errata NOP
  4662  003CD6  0012               	return		;funcret
  4663  003CD8  FFFF               	dw	65535	; errata NOP
  4664  003CDA                     __end_of_ResetEventFromCommand:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           postdec1	equ	0xFE5
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _ResetEvent *****************
  4686 ;; Defined at:
  4687 ;;		line 679 in file "main.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  state           1    wreg     unsigned char 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  state           1   42[COMRAM] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4701 ;;      Params:         0       0       0       0       0       0       0
  4702 ;;      Locals:         3       0       0       0       0       0       0
  4703 ;;      Temps:          2       0       0       0       0       0       0
  4704 ;;      Totals:         5       0       0       0       0       0       0
  4705 ;;Total ram usage:        5 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    3
  4708 ;; This function calls:
  4709 ;;		_GetCurrentEventDiodeNum
  4710 ;;		_LightLed
  4711 ;;		_StopPlaying
  4712 ;; This function is called by:
  4713 ;;		_main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text22
  4718  003A52                     __ptext22:
  4719                           	opt stack 0
  4720  003A52                     _ResetEvent:
  4721                           	opt stack 27
  4722                           
  4723                           ;incstack = 0
  4724  003A52  FFFF               	dw	65535
  4725                           
  4726                           ;ResetEvent@state stored from wreg
  4727  003A54  6E2B               	movwf	ResetEvent@state,c
  4728                           
  4729                           ;main.c: 681: if(!_currenDiaryEvent.IsFire)
  4730  003A56  5039               	movf	__currenDiaryEvent,w,c
  4731  003A58  B4D8               	btfsc	status,2,c
  4732  003A5A  D029               	goto	l408
  4733                           
  4734                           ;main.c: 683: LightLed(GetCurrentEventDiodeNum(), state ? LED_GREEN : LED_RED, 0);
  4735                           
  4736                           ;main.c: 682: return;
  4737  003A5C  502B               	movf	ResetEvent@state,w,c
  4738  003A5E  A4D8               	btfss	status,2,c
  4739  003A60  D004               	goto	l8267
  4740  003A62  0E00               	movlw	0
  4741  003A64  6E2D               	movwf	_ResetEvent$914+1,c
  4742  003A66  0E02               	movlw	2
  4743  003A68  D004               	goto	L3
  4744  003A6A                     l8267:
  4745  003A6A  FFFF               	dw	65535	; assembler added errata NOP
  4746  003A6C  0E00               	movlw	0
  4747  003A6E  6E2D               	movwf	_ResetEvent$914+1,c
  4748  003A70  0E01               	movlw	1
  4749  003A72                     L3:
  4750  003A72  FFFF               	dw	65535	; assembler added errata NOP
  4751  003A74  6E2C               	movwf	_ResetEvent$914,c
  4752  003A76  C02C  F021         	movff	_ResetEvent$914,LightLed@ledState
  4753  003A7A  0E00               	movlw	0
  4754  003A7C  6E22               	movwf	LightLed@blink,c
  4755  003A7E  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  4756  003A82  EC5C  F005         	call	_LightLed
  4757                           
  4758                           ;main.c: 684: _currenDiaryEvent.IsFire = 0;
  4759  003A86  0E00               	movlw	0
  4760  003A88  6E39               	movwf	__currenDiaryEvent,c
  4761                           
  4762                           ;main.c: 685: _currenDiaryEvent.FiredEventNum = 0xff;
  4763  003A8A  683A               	setf	__currenDiaryEvent+1,c
  4764                           
  4765                           ;main.c: 686: _currenDiaryEvent.ResetSecond = 0;
  4766  003A8C  0E00               	movlw	0
  4767  003A8E  6E3D               	movwf	__currenDiaryEvent+4,c
  4768  003A90  0E00               	movlw	0
  4769  003A92  6E3E               	movwf	__currenDiaryEvent+5,c
  4770  003A94  0E00               	movlw	0
  4771  003A96  6E3F               	movwf	__currenDiaryEvent+6,c
  4772  003A98  0E00               	movlw	0
  4773  003A9A  6E40               	movwf	__currenDiaryEvent+7,c
  4774                           
  4775                           ;main.c: 687: StopPlaying();
  4776  003A9C  EC4A  F001         	call	_StopPlaying	;wreg free
  4777                           
  4778                           ;main.c: 688: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  4779  003AA0  503A               	movf	__currenDiaryEvent+1,w,c
  4780  003AA2  6E29               	movwf	??_ResetEvent& (0+255),c
  4781  003AA4  5041               	movf	__currenDiaryEvent+8,w,c
  4782  003AA6  0101               	movlb	1	; () banked
  4783  003AA8  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4784  003AAA  C029  F1D9         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4785  003AAE                     l408:
  4786  003AAE  FFFF               	dw	65535	; assembler added errata NOP
  4787  003AB0  0012               	return		;funcret
  4788  003AB2  FFFF               	dw	65535	; errata NOP
  4789  003AB4                     __end_of_ResetEvent:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1h	equ	0xFE2
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _ProcessLightBlock *****************
  4811 ;; Defined at:
  4812 ;;		line 524 in file "main.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  curMs           2   33[COMRAM] PTR unsigned long 
  4815 ;;		 -> main@curMs(4), 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4827 ;;      Params:         2       0       0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0
  4829 ;;      Temps:          8       0       0       0       0       0       0
  4830 ;;      Totals:        10       0       0       0       0       0       0
  4831 ;;Total ram usage:       10 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    3
  4834 ;; This function calls:
  4835 ;;		_UpdateLedRegister
  4836 ;; This function is called by:
  4837 ;;		_main
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text23
  4842  001284                     __ptext23:
  4843                           	opt stack 0
  4844  001284                     _ProcessLightBlock:
  4845                           	opt stack 27
  4846                           
  4847                           ;incstack = 0
  4848  001284  FFFF               	dw	65535
  4849                           
  4850                           ;main.c: 526: diffTime = *curMs - oldBlinkOnTime;
  4851  001286  C022  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4852  00128A  C023  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4853  00128E  CFDE F024          	movff	postinc2,??_ProcessLightBlock
  4854  001292  CFDE F025          	movff	postinc2,??_ProcessLightBlock+1
  4855  001296  CFDE F026          	movff	postinc2,??_ProcessLightBlock+2
  4856  00129A  CFDE F027          	movff	postinc2,??_ProcessLightBlock+3
  4857  00129E  C11C  F028         	movff	_oldBlinkOnTime,??_ProcessLightBlock+4
  4858  0012A2  C11D  F029         	movff	_oldBlinkOnTime+1,??_ProcessLightBlock+5
  4859  0012A6  C11E  F02A         	movff	_oldBlinkOnTime+2,??_ProcessLightBlock+6
  4860  0012AA  C11F  F02B         	movff	_oldBlinkOnTime+3,??_ProcessLightBlock+7
  4861  0012AE  1E28               	comf	??_ProcessLightBlock+4,f,c
  4862  0012B0  1E29               	comf	??_ProcessLightBlock+5,f,c
  4863  0012B2  1E2A               	comf	??_ProcessLightBlock+6,f,c
  4864  0012B4  1E2B               	comf	??_ProcessLightBlock+7,f,c
  4865  0012B6  2A28               	incf	??_ProcessLightBlock+4,f,c
  4866  0012B8  0E00               	movlw	0
  4867  0012BA  2229               	addwfc	??_ProcessLightBlock+5,f,c
  4868  0012BC  222A               	addwfc	??_ProcessLightBlock+6,f,c
  4869  0012BE  222B               	addwfc	??_ProcessLightBlock+7,f,c
  4870  0012C0  5024               	movf	??_ProcessLightBlock,w,c
  4871  0012C2  2428               	addwf	??_ProcessLightBlock+4,w,c
  4872  0012C4  0100               	movlb	0	; () banked
  4873  0012C6  6FD8               	movwf	_diffTime& (0+255),b
  4874  0012C8  5025               	movf	??_ProcessLightBlock+1,w,c
  4875  0012CA  2029               	addwfc	??_ProcessLightBlock+5,w,c
  4876  0012CC  0100               	movlb	0	; () banked
  4877  0012CE  6FD9               	movwf	(_diffTime+1)& (0+255),b
  4878  0012D0  5026               	movf	??_ProcessLightBlock+2,w,c
  4879  0012D2  202A               	addwfc	??_ProcessLightBlock+6,w,c
  4880  0012D4  0100               	movlb	0	; () banked
  4881  0012D6  6FDA               	movwf	(_diffTime+2)& (0+255),b
  4882  0012D8  5027               	movf	??_ProcessLightBlock+3,w,c
  4883  0012DA  202B               	addwfc	??_ProcessLightBlock+7,w,c
  4884  0012DC  0100               	movlb	0	; () banked
  4885  0012DE  6FDB               	movwf	(_diffTime+3)& (0+255),b
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;main.c: 527: if(diffTime > 576)
  4889  0012E0  0100               	movlb	0	; () banked
  4890  0012E2  51DB               	movf	(_diffTime+3)& (0+255),w,b
  4891  0012E4  0100               	movlb	0	; () banked
  4892  0012E6  11DA               	iorwf	(_diffTime+2)& (0+255),w,b
  4893  0012E8  E108               	bnz	u7410
  4894  0012EA  0E41               	movlw	65
  4895  0012EC  0100               	movlb	0	; () banked
  4896  0012EE  5DD8               	subwf	_diffTime& (0+255),w,b
  4897  0012F0  0E02               	movlw	2
  4898  0012F2  0100               	movlb	0	; () banked
  4899  0012F4  59D9               	subwfb	(_diffTime+1)& (0+255),w,b
  4900  0012F6  A0D8               	btfss	status,0,c
  4901  0012F8  D00F               	goto	l8103
  4902  0012FA                     u7410:
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;main.c: 528: {
  4906                           ;main.c: 529: blinkOn = 1;
  4907  0012FA  0E01               	movlw	1
  4908  0012FC  6E54               	movwf	_blinkOn,c
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;main.c: 530: oldBlinkOnTime = *curMs;
  4912  0012FE  C022  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4913  001302  C023  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4914  001306  CFDE F11C          	movff	postinc2,_oldBlinkOnTime
  4915  00130A  CFDE F11D          	movff	postinc2,_oldBlinkOnTime+1
  4916  00130E  CFDE F11E          	movff	postinc2,_oldBlinkOnTime+2
  4917  001312  CFDE F11F          	movff	postinc2,_oldBlinkOnTime+3
  4918                           
  4919                           ;main.c: 531: }
  4920  001316  D128               	goto	l8255
  4921  001318                     l8103:
  4922  001318  FFFF               	dw	65535	; assembler added errata NOP
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;main.c: 532: else if(blinkOn && diffTime > 384)
  4926  00131A  5054               	movf	_blinkOn,w,c
  4927  00131C  B4D8               	btfsc	status,2,c
  4928  00131E  D124               	goto	l8255
  4929                           
  4930                           ; BSR set to: 0
  4931  001320  0100               	movlb	0	; () banked
  4932  001322  51DB               	movf	(_diffTime+3)& (0+255),w,b
  4933  001324  0100               	movlb	0	; () banked
  4934  001326  11DA               	iorwf	(_diffTime+2)& (0+255),w,b
  4935  001328  E108               	bnz	u7430
  4936  00132A  0E81               	movlw	129
  4937  00132C  0100               	movlb	0	; () banked
  4938  00132E  5DD8               	subwf	_diffTime& (0+255),w,b
  4939  001330  0E01               	movlw	1
  4940  001332  0100               	movlb	0	; () banked
  4941  001334  59D9               	subwfb	(_diffTime+1)& (0+255),w,b
  4942  001336  A0D8               	btfss	status,0,c
  4943  001338  D117               	goto	l8255
  4944  00133A                     u7430:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;main.c: 533: {
  4948                           ;main.c: 534: blinkOn = 0;
  4949  00133A  0E00               	movlw	0
  4950  00133C  6E54               	movwf	_blinkOn,c
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 535: }
  4954                           ;main.c: 539: switch(currentLedBlock)
  4955                           
  4956                           ; BSR set to: 0
  4957  00133E  D114               	goto	l8255
  4958  001340                     l8109:
  4959  001340  FFFF               	dw	65535	; assembler added errata NOP
  4960                           
  4961                           ;main.c: 542: LATA &= 0xF0;
  4962  001342  0EF0               	movlw	240
  4963  001344  1689               	andwf	3977,f,c	;volatile
  4964                           
  4965                           ;main.c: 543: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4966  001346  5054               	movf	_blinkOn,w,c
  4967  001348  B4D8               	btfsc	status,2,c
  4968  00134A  D003               	goto	l8115
  4969  00134C  C0C2  FF8A         	movff	_ledStatuses,3978	;volatile
  4970  001350  D006               	goto	l8117
  4971  001352                     l8115:
  4972  001352  FFFF               	dw	65535	; assembler added errata NOP
  4973  001354  0100               	movlb	0	; () banked
  4974  001356  51C2               	movf	_ledStatuses& (0+255),w,b
  4975  001358  0101               	movlb	1	; () banked
  4976  00135A  1900               	xorwf	_ledBlink& (0+255),w,b
  4977  00135C  6E8A               	movwf	3978,c	;volatile
  4978  00135E                     l8117:
  4979  00135E  FFFF               	dw	65535	; assembler added errata NOP
  4980  001360  0E00               	movlw	0
  4981  001362  EC6D  F01E         	call	_UpdateLedRegister
  4982                           
  4983                           ;main.c: 544: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4984  001366  5054               	movf	_blinkOn,w,c
  4985  001368  B4D8               	btfsc	status,2,c
  4986  00136A  D003               	goto	l8123
  4987  00136C  C0C3  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4988  001370  D006               	goto	l8125
  4989  001372                     l8123:
  4990  001372  FFFF               	dw	65535	; assembler added errata NOP
  4991  001374  0100               	movlb	0	; () banked
  4992  001376  51C3               	movf	(_ledStatuses+1)& (0+255),w,b
  4993  001378  0101               	movlb	1	; () banked
  4994  00137A  1901               	xorwf	(_ledBlink+1)& (0+255),w,b
  4995  00137C  6E8A               	movwf	3978,c	;volatile
  4996  00137E                     l8125:
  4997  00137E  FFFF               	dw	65535	; assembler added errata NOP
  4998  001380  0E01               	movlw	1
  4999  001382  EC6D  F01E         	call	_UpdateLedRegister
  5000                           
  5001                           ;main.c: 545: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5002  001386  5054               	movf	_blinkOn,w,c
  5003  001388  B4D8               	btfsc	status,2,c
  5004  00138A  D003               	goto	l8131
  5005  00138C  C0C4  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5006  001390  D006               	goto	l8133
  5007  001392                     l8131:
  5008  001392  FFFF               	dw	65535	; assembler added errata NOP
  5009  001394  0100               	movlb	0	; () banked
  5010  001396  51C4               	movf	(_ledStatuses+2)& (0+255),w,b
  5011  001398  0101               	movlb	1	; () banked
  5012  00139A  1902               	xorwf	(_ledBlink+2)& (0+255),w,b
  5013  00139C  6E8A               	movwf	3978,c	;volatile
  5014  00139E                     l8133:
  5015  00139E  FFFF               	dw	65535	; assembler added errata NOP
  5016  0013A0  0E02               	movlw	2
  5017  0013A2  EC6D  F01E         	call	_UpdateLedRegister
  5018                           
  5019                           ;main.c: 546: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5020  0013A6  5054               	movf	_blinkOn,w,c
  5021  0013A8  B4D8               	btfsc	status,2,c
  5022  0013AA  D003               	goto	l8139
  5023  0013AC  C0CE  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5024  0013B0  D006               	goto	l8141
  5025  0013B2                     l8139:
  5026  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  5027  0013B4  0100               	movlb	0	; () banked
  5028  0013B6  51CE               	movf	(_ledStatuses+12)& (0+255),w,b
  5029  0013B8  0101               	movlb	1	; () banked
  5030  0013BA  190C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5031  0013BC  6E8A               	movwf	3978,c	;volatile
  5032  0013BE                     l8141:
  5033  0013BE  FFFF               	dw	65535	; assembler added errata NOP
  5034  0013C0  0E03               	movlw	3
  5035  0013C2  EC6D  F01E         	call	_UpdateLedRegister
  5036                           
  5037                           ;main.c: 547: LATAbits.LATA0 = 1;
  5038  0013C6  8089               	bsf	3977,0,c	;volatile
  5039                           
  5040                           ;main.c: 548: break;
  5041  0013C8  D0DD               	goto	l8257
  5042  0013CA                     l8145:
  5043  0013CA  FFFF               	dw	65535	; assembler added errata NOP
  5044                           
  5045                           ;main.c: 550: LATA &= 0xF0;
  5046  0013CC  0EF0               	movlw	240
  5047  0013CE  1689               	andwf	3977,f,c	;volatile
  5048                           
  5049                           ;main.c: 551: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5050  0013D0  5054               	movf	_blinkOn,w,c
  5051  0013D2  B4D8               	btfsc	status,2,c
  5052  0013D4  D003               	goto	l8151
  5053  0013D6  C0C5  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5054  0013DA  D006               	goto	l8153
  5055  0013DC                     l8151:
  5056  0013DC  FFFF               	dw	65535	; assembler added errata NOP
  5057  0013DE  0100               	movlb	0	; () banked
  5058  0013E0  51C5               	movf	(_ledStatuses+3)& (0+255),w,b
  5059  0013E2  0101               	movlb	1	; () banked
  5060  0013E4  1903               	xorwf	(_ledBlink+3)& (0+255),w,b
  5061  0013E6  6E8A               	movwf	3978,c	;volatile
  5062  0013E8                     l8153:
  5063  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  5064  0013EA  0E00               	movlw	0
  5065  0013EC  EC6D  F01E         	call	_UpdateLedRegister
  5066                           
  5067                           ;main.c: 552: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5068  0013F0  5054               	movf	_blinkOn,w,c
  5069  0013F2  B4D8               	btfsc	status,2,c
  5070  0013F4  D003               	goto	l8159
  5071  0013F6  C0C6  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5072  0013FA  D006               	goto	l8161
  5073  0013FC                     l8159:
  5074  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  5075  0013FE  0100               	movlb	0	; () banked
  5076  001400  51C6               	movf	(_ledStatuses+4)& (0+255),w,b
  5077  001402  0101               	movlb	1	; () banked
  5078  001404  1904               	xorwf	(_ledBlink+4)& (0+255),w,b
  5079  001406  6E8A               	movwf	3978,c	;volatile
  5080  001408                     l8161:
  5081  001408  FFFF               	dw	65535	; assembler added errata NOP
  5082  00140A  0E01               	movlw	1
  5083  00140C  EC6D  F01E         	call	_UpdateLedRegister
  5084                           
  5085                           ;main.c: 553: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5086  001410  5054               	movf	_blinkOn,w,c
  5087  001412  B4D8               	btfsc	status,2,c
  5088  001414  D003               	goto	l8167
  5089  001416  C0C7  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5090  00141A  D006               	goto	l8169
  5091  00141C                     l8167:
  5092  00141C  FFFF               	dw	65535	; assembler added errata NOP
  5093  00141E  0100               	movlb	0	; () banked
  5094  001420  51C7               	movf	(_ledStatuses+5)& (0+255),w,b
  5095  001422  0101               	movlb	1	; () banked
  5096  001424  1905               	xorwf	(_ledBlink+5)& (0+255),w,b
  5097  001426  6E8A               	movwf	3978,c	;volatile
  5098  001428                     l8169:
  5099  001428  FFFF               	dw	65535	; assembler added errata NOP
  5100  00142A  0E02               	movlw	2
  5101  00142C  EC6D  F01E         	call	_UpdateLedRegister
  5102                           
  5103                           ;main.c: 554: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5104  001430  5054               	movf	_blinkOn,w,c
  5105  001432  B4D8               	btfsc	status,2,c
  5106  001434  D003               	goto	l8175
  5107  001436  C0CF  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5108  00143A  D006               	goto	l8177
  5109  00143C                     l8175:
  5110  00143C  FFFF               	dw	65535	; assembler added errata NOP
  5111  00143E  0100               	movlb	0	; () banked
  5112  001440  51CF               	movf	(_ledStatuses+13)& (0+255),w,b
  5113  001442  0101               	movlb	1	; () banked
  5114  001444  190D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5115  001446  6E8A               	movwf	3978,c	;volatile
  5116  001448                     l8177:
  5117  001448  FFFF               	dw	65535	; assembler added errata NOP
  5118  00144A  0E03               	movlw	3
  5119  00144C  EC6D  F01E         	call	_UpdateLedRegister
  5120                           
  5121                           ;main.c: 555: LATAbits.LATA1 = 1;
  5122  001450  8289               	bsf	3977,1,c	;volatile
  5123                           
  5124                           ;main.c: 556: break;
  5125  001452  D098               	goto	l8257
  5126  001454                     l8181:
  5127  001454  FFFF               	dw	65535	; assembler added errata NOP
  5128                           
  5129                           ;main.c: 558: LATA &= 0xF0;
  5130  001456  0EF0               	movlw	240
  5131  001458  1689               	andwf	3977,f,c	;volatile
  5132                           
  5133                           ;main.c: 559: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5134  00145A  5054               	movf	_blinkOn,w,c
  5135  00145C  B4D8               	btfsc	status,2,c
  5136  00145E  D003               	goto	l8187
  5137  001460  C0C8  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5138  001464  D006               	goto	l8189
  5139  001466                     l8187:
  5140  001466  FFFF               	dw	65535	; assembler added errata NOP
  5141  001468  0100               	movlb	0	; () banked
  5142  00146A  51C8               	movf	(_ledStatuses+6)& (0+255),w,b
  5143  00146C  0101               	movlb	1	; () banked
  5144  00146E  1906               	xorwf	(_ledBlink+6)& (0+255),w,b
  5145  001470  6E8A               	movwf	3978,c	;volatile
  5146  001472                     l8189:
  5147  001472  FFFF               	dw	65535	; assembler added errata NOP
  5148  001474  0E00               	movlw	0
  5149  001476  EC6D  F01E         	call	_UpdateLedRegister
  5150                           
  5151                           ;main.c: 560: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5152  00147A  5054               	movf	_blinkOn,w,c
  5153  00147C  B4D8               	btfsc	status,2,c
  5154  00147E  D003               	goto	l8195
  5155  001480  C0C9  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5156  001484  D006               	goto	l8197
  5157  001486                     l8195:
  5158  001486  FFFF               	dw	65535	; assembler added errata NOP
  5159  001488  0100               	movlb	0	; () banked
  5160  00148A  51C9               	movf	(_ledStatuses+7)& (0+255),w,b
  5161  00148C  0101               	movlb	1	; () banked
  5162  00148E  1907               	xorwf	(_ledBlink+7)& (0+255),w,b
  5163  001490  6E8A               	movwf	3978,c	;volatile
  5164  001492                     l8197:
  5165  001492  FFFF               	dw	65535	; assembler added errata NOP
  5166  001494  0E01               	movlw	1
  5167  001496  EC6D  F01E         	call	_UpdateLedRegister
  5168                           
  5169                           ;main.c: 561: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5170  00149A  5054               	movf	_blinkOn,w,c
  5171  00149C  B4D8               	btfsc	status,2,c
  5172  00149E  D003               	goto	l8203
  5173  0014A0  C0CA  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5174  0014A4  D006               	goto	l8205
  5175  0014A6                     l8203:
  5176  0014A6  FFFF               	dw	65535	; assembler added errata NOP
  5177  0014A8  0100               	movlb	0	; () banked
  5178  0014AA  51CA               	movf	(_ledStatuses+8)& (0+255),w,b
  5179  0014AC  0101               	movlb	1	; () banked
  5180  0014AE  1908               	xorwf	(_ledBlink+8)& (0+255),w,b
  5181  0014B0  6E8A               	movwf	3978,c	;volatile
  5182  0014B2                     l8205:
  5183  0014B2  FFFF               	dw	65535	; assembler added errata NOP
  5184  0014B4  0E02               	movlw	2
  5185  0014B6  EC6D  F01E         	call	_UpdateLedRegister
  5186                           
  5187                           ;main.c: 562: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5188  0014BA  5054               	movf	_blinkOn,w,c
  5189  0014BC  B4D8               	btfsc	status,2,c
  5190  0014BE  D003               	goto	l8211
  5191  0014C0  C0D0  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5192  0014C4  D006               	goto	l8213
  5193  0014C6                     l8211:
  5194  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  5195  0014C8  0100               	movlb	0	; () banked
  5196  0014CA  51D0               	movf	(_ledStatuses+14)& (0+255),w,b
  5197  0014CC  0101               	movlb	1	; () banked
  5198  0014CE  190E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5199  0014D0  6E8A               	movwf	3978,c	;volatile
  5200  0014D2                     l8213:
  5201  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  5202  0014D4  0E03               	movlw	3
  5203  0014D6  EC6D  F01E         	call	_UpdateLedRegister
  5204                           
  5205                           ;main.c: 563: LATAbits.LATA2 = 1;
  5206  0014DA  8489               	bsf	3977,2,c	;volatile
  5207                           
  5208                           ;main.c: 564: break;
  5209  0014DC  D053               	goto	l8257
  5210  0014DE                     l8217:
  5211  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  5212                           
  5213                           ;main.c: 566: LATA &= 0xF0;
  5214  0014E0  0EF0               	movlw	240
  5215  0014E2  1689               	andwf	3977,f,c	;volatile
  5216                           
  5217                           ;main.c: 567: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5218  0014E4  5054               	movf	_blinkOn,w,c
  5219  0014E6  B4D8               	btfsc	status,2,c
  5220  0014E8  D003               	goto	l8223
  5221  0014EA  C0CB  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5222  0014EE  D006               	goto	l8225
  5223  0014F0                     l8223:
  5224  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  5225  0014F2  0100               	movlb	0	; () banked
  5226  0014F4  51CB               	movf	(_ledStatuses+9)& (0+255),w,b
  5227  0014F6  0101               	movlb	1	; () banked
  5228  0014F8  1909               	xorwf	(_ledBlink+9)& (0+255),w,b
  5229  0014FA  6E8A               	movwf	3978,c	;volatile
  5230  0014FC                     l8225:
  5231  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  5232  0014FE  0E00               	movlw	0
  5233  001500  EC6D  F01E         	call	_UpdateLedRegister
  5234                           
  5235                           ;main.c: 568: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5236  001504  5054               	movf	_blinkOn,w,c
  5237  001506  B4D8               	btfsc	status,2,c
  5238  001508  D003               	goto	l8231
  5239  00150A  C0CC  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5240  00150E  D006               	goto	l8233
  5241  001510                     l8231:
  5242  001510  FFFF               	dw	65535	; assembler added errata NOP
  5243  001512  0100               	movlb	0	; () banked
  5244  001514  51CC               	movf	(_ledStatuses+10)& (0+255),w,b
  5245  001516  0101               	movlb	1	; () banked
  5246  001518  190A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5247  00151A  6E8A               	movwf	3978,c	;volatile
  5248  00151C                     l8233:
  5249  00151C  FFFF               	dw	65535	; assembler added errata NOP
  5250  00151E  0E01               	movlw	1
  5251  001520  EC6D  F01E         	call	_UpdateLedRegister
  5252                           
  5253                           ;main.c: 569: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5254  001524  5054               	movf	_blinkOn,w,c
  5255  001526  B4D8               	btfsc	status,2,c
  5256  001528  D003               	goto	l8239
  5257  00152A  C0CD  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5258  00152E  D006               	goto	l8241
  5259  001530                     l8239:
  5260  001530  FFFF               	dw	65535	; assembler added errata NOP
  5261  001532  0100               	movlb	0	; () banked
  5262  001534  51CD               	movf	(_ledStatuses+11)& (0+255),w,b
  5263  001536  0101               	movlb	1	; () banked
  5264  001538  190B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5265  00153A  6E8A               	movwf	3978,c	;volatile
  5266  00153C                     l8241:
  5267  00153C  FFFF               	dw	65535	; assembler added errata NOP
  5268  00153E  0E02               	movlw	2
  5269  001540  EC6D  F01E         	call	_UpdateLedRegister
  5270                           
  5271                           ;main.c: 570: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5272  001544  5054               	movf	_blinkOn,w,c
  5273  001546  B4D8               	btfsc	status,2,c
  5274  001548  D003               	goto	l8247
  5275  00154A  C0D1  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5276  00154E  D006               	goto	l8249
  5277  001550                     l8247:
  5278  001550  FFFF               	dw	65535	; assembler added errata NOP
  5279  001552  0100               	movlb	0	; () banked
  5280  001554  51D1               	movf	(_ledStatuses+15)& (0+255),w,b
  5281  001556  0101               	movlb	1	; () banked
  5282  001558  190F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5283  00155A  6E8A               	movwf	3978,c	;volatile
  5284  00155C                     l8249:
  5285  00155C  FFFF               	dw	65535	; assembler added errata NOP
  5286  00155E  0E03               	movlw	3
  5287  001560  EC6D  F01E         	call	_UpdateLedRegister
  5288                           
  5289                           ;main.c: 571: LATAbits.LATA3 = 1;
  5290  001564  8689               	bsf	3977,3,c	;volatile
  5291                           
  5292                           ;main.c: 573: }
  5293                           
  5294                           ;main.c: 572: break;
  5295  001566  D00E               	goto	l8257
  5296  001568                     l8255:
  5297  001568  FFFF               	dw	65535	; assembler added errata NOP
  5298  00156A  5055               	movf	_currentLedBlock,w,c
  5299                           
  5300                           ; Switch size 1, requested type "space"
  5301                           ; Number of cases is 4, Range of values is 0 to 3
  5302                           ; switch strategies available:
  5303                           ; Name         Instructions Cycles
  5304                           ; simple_byte           13     7 (average)
  5305                           ;	Chosen strategy is simple_byte
  5306  00156C  0A00               	xorlw	0	; case 0
  5307  00156E  B4D8               	btfsc	status,2,c
  5308  001570  D6E7               	goto	l8109
  5309  001572  0A01               	xorlw	1	; case 1
  5310  001574  B4D8               	btfsc	status,2,c
  5311  001576  D729               	goto	l8145
  5312  001578  0A03               	xorlw	3	; case 2
  5313  00157A  B4D8               	btfsc	status,2,c
  5314  00157C  D76B               	goto	l8181
  5315  00157E  0A01               	xorlw	1	; case 3
  5316  001580  B4D8               	btfsc	status,2,c
  5317  001582  D7AD               	goto	l8217
  5318  001584                     l8257:
  5319  001584  FFFF               	dw	65535	; assembler added errata NOP
  5320                           
  5321                           ;main.c: 575: currentLedBlock++;
  5322  001586  2A55               	incf	_currentLedBlock,f,c
  5323                           
  5324                           ;main.c: 578: currentLedBlock &= 0xFB;
  5325  001588  9455               	bcf	_currentLedBlock,2,c
  5326  00158A  0012               	return		;funcret
  5327  00158C  FFFF               	dw	65535	; errata NOP
  5328  00158E                     __end_of_ProcessLightBlock:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           postdec1	equ	0xFE5
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           indf2	equ	0xFDF
  5343                           postinc2	equ	0xFDE
  5344                           postdec2	equ	0xFDD
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _UpdateLedRegister *****************
  5350 ;; Defined at:
  5351 ;;		line 283 in file "main.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  regIndex        1    wreg     unsigned char 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  regIndex        1   32[COMRAM] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5365 ;;      Params:         0       0       0       0       0       0       0
  5366 ;;      Locals:         1       0       0       0       0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0
  5368 ;;      Totals:         1       0       0       0       0       0       0
  5369 ;;Total ram usage:        1 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    2
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_ProcessLightBlock
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text24
  5380  003CDA                     __ptext24:
  5381                           	opt stack 0
  5382  003CDA                     _UpdateLedRegister:
  5383                           	opt stack 27
  5384                           
  5385                           ;incstack = 0
  5386  003CDA  FFFF               	dw	65535
  5387                           
  5388                           ;UpdateLedRegister@regIndex stored from wreg
  5389  003CDC  6E21               	movwf	UpdateLedRegister@regIndex,c
  5390                           
  5391                           ;main.c: 285: switch(regIndex)
  5392  003CDE  D018               	goto	l7269
  5393  003CE0                     l248:
  5394  003CE0  FFFF               	dw	65535	; assembler added errata NOP
  5395                           
  5396                           ;main.c: 288: LATAbits.LATA4 = 0;
  5397  003CE2  9889               	bcf	3977,4,c	;volatile
  5398                           
  5399                           ;main.c: 289: TRISAbits.RA4 = 0;
  5400  003CE4  9892               	bcf	3986,4,c	;volatile
  5401                           
  5402                           ;main.c: 290: LATAbits.LATA4 = 1;
  5403  003CE6  8889               	bsf	3977,4,c	;volatile
  5404                           
  5405                           ;main.c: 291: TRISAbits.RA4 = 1;
  5406  003CE8  8892               	bsf	3986,4,c	;volatile
  5407                           
  5408                           ;main.c: 292: break;
  5409  003CEA  D020               	goto	l253
  5410  003CEC                     l250:
  5411  003CEC  FFFF               	dw	65535	; assembler added errata NOP
  5412                           
  5413                           ;main.c: 294: LATCbits.LATC3 = 0;
  5414  003CEE  968B               	bcf	3979,3,c	;volatile
  5415                           
  5416                           ;main.c: 295: TRISCbits.RC3 = 0;
  5417  003CF0  9694               	bcf	3988,3,c	;volatile
  5418                           
  5419                           ;main.c: 296: LATCbits.LATC3 = 1;
  5420  003CF2  868B               	bsf	3979,3,c	;volatile
  5421                           
  5422                           ;main.c: 297: TRISCbits.RC3 = 1;
  5423  003CF4  8694               	bsf	3988,3,c	;volatile
  5424                           
  5425                           ;main.c: 298: break;
  5426  003CF6  D01A               	goto	l253
  5427  003CF8                     l251:
  5428  003CF8  FFFF               	dw	65535	; assembler added errata NOP
  5429                           
  5430                           ;main.c: 300: LATCbits.LATC0 = 0;
  5431  003CFA  908B               	bcf	3979,0,c	;volatile
  5432                           
  5433                           ;main.c: 301: TRISCbits.RC0 = 0;
  5434  003CFC  9094               	bcf	3988,0,c	;volatile
  5435                           
  5436                           ;main.c: 302: LATCbits.LATC0 = 1;
  5437  003CFE  808B               	bsf	3979,0,c	;volatile
  5438                           
  5439                           ;main.c: 303: TRISCbits.RC0 = 1;
  5440  003D00  8094               	bsf	3988,0,c	;volatile
  5441                           
  5442                           ;main.c: 304: break;
  5443  003D02  D014               	goto	l253
  5444  003D04                     l252:
  5445  003D04  FFFF               	dw	65535	; assembler added errata NOP
  5446                           
  5447                           ;main.c: 306: LATCbits.LATC1 = 0;
  5448  003D06  928B               	bcf	3979,1,c	;volatile
  5449                           
  5450                           ;main.c: 307: TRISCbits.RC1 = 0;
  5451  003D08  9294               	bcf	3988,1,c	;volatile
  5452                           
  5453                           ;main.c: 308: LATCbits.LATC1 = 1;
  5454  003D0A  828B               	bsf	3979,1,c	;volatile
  5455                           
  5456                           ;main.c: 309: TRISCbits.RC1 = 1;
  5457  003D0C  8294               	bsf	3988,1,c	;volatile
  5458                           
  5459                           ;main.c: 311: }
  5460                           
  5461                           ;main.c: 310: break;
  5462  003D0E  D00E               	goto	l253
  5463  003D10                     l7269:
  5464  003D10  FFFF               	dw	65535	; assembler added errata NOP
  5465  003D12  5021               	movf	UpdateLedRegister@regIndex,w,c
  5466                           
  5467                           ; Switch size 1, requested type "space"
  5468                           ; Number of cases is 4, Range of values is 0 to 3
  5469                           ; switch strategies available:
  5470                           ; Name         Instructions Cycles
  5471                           ; simple_byte           13     7 (average)
  5472                           ;	Chosen strategy is simple_byte
  5473  003D14  0A00               	xorlw	0	; case 0
  5474  003D16  B4D8               	btfsc	status,2,c
  5475  003D18  D7E3               	goto	l248
  5476  003D1A  0A01               	xorlw	1	; case 1
  5477  003D1C  B4D8               	btfsc	status,2,c
  5478  003D1E  D7E6               	goto	l250
  5479  003D20  0A03               	xorlw	3	; case 2
  5480  003D22  B4D8               	btfsc	status,2,c
  5481  003D24  D7E9               	goto	l251
  5482  003D26  0A01               	xorlw	1	; case 3
  5483  003D28  B4D8               	btfsc	status,2,c
  5484  003D2A  D7EC               	goto	l252
  5485  003D2C                     l253:
  5486  003D2C  FFFF               	dw	65535	; assembler added errata NOP
  5487  003D2E  0012               	return		;funcret
  5488  003D30  FFFF               	dw	65535	; errata NOP
  5489  003D32                     __end_of_UpdateLedRegister:
  5490                           	opt stack 0
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           prodh	equ	0xFF4
  5496                           prodl	equ	0xFF3
  5497                           intcon	equ	0xFF2
  5498                           postinc0	equ	0xFEE
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _ProcessDiary *****************
  5511 ;; Defined at:
  5512 ;;		line 773 in file "main.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  totalMinutes    2    4[BANK0 ] unsigned int 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5526 ;;      Params:         0       0       0       0       0       0       0
  5527 ;;      Locals:         0       2       0       0       0       0       0
  5528 ;;      Temps:          0       4       0       0       0       0       0
  5529 ;;      Totals:         0       6       0       0       0       0       0
  5530 ;;Total ram usage:        6 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    5
  5533 ;; This function calls:
  5534 ;;		_GetCurrentEventDiodeNum
  5535 ;;		_GetTime
  5536 ;;		_LightLed
  5537 ;;		_LoadNextEvent
  5538 ;;		_PlaySound
  5539 ;;		_getTotalMinutes
  5540 ;; This function is called by:
  5541 ;;		_main
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text25
  5546  003144                     __ptext25:
  5547                           	opt stack 0
  5548  003144                     _ProcessDiary:
  5549                           	opt stack 25
  5550                           
  5551                           ;incstack = 0
  5552  003144  FFFF               	dw	65535
  5553                           
  5554                           ;main.c: 776: if(_currenDiaryEvent.NextEventNum == 0xff)
  5555  003146  2841               	incf	__currenDiaryEvent+8,w,c
  5556  003148  B4D8               	btfsc	status,2,c
  5557  00314A  D05D               	goto	l443
  5558                           
  5559                           ;main.c: 778: uint16_t totalMinutes;
  5560                           ;main.c: 782: if(!getTotalMinutes(&totalMinutes))
  5561                           
  5562                           ;main.c: 777: return;
  5563  00314C  0E84               	movlw	low ProcessDiary@totalMinutes
  5564  00314E  6E21               	movwf	getTotalMinutes@totalMinutes,c
  5565  003150  0E00               	movlw	high ProcessDiary@totalMinutes
  5566  003152  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  5567  003154  ECA7  F000         	call	_getTotalMinutes	;wreg free
  5568  003158  0900               	iorlw	0
  5569  00315A  B4D8               	btfsc	status,2,c
  5570  00315C  D054               	goto	l443
  5571                           
  5572                           ;main.c: 786: if(_currenDiaryEvent.NextEventTotalMinutes == totalMinutes)
  5573                           
  5574                           ;main.c: 783: return;
  5575  00315E  0100               	movlb	0	; () banked
  5576  003160  5184               	movf	ProcessDiary@totalMinutes& (0+255),w,b
  5577  003162  183B               	xorwf	__currenDiaryEvent+2,w,c
  5578  003164  E150               	bnz	l443
  5579  003166  0100               	movlb	0	; () banked
  5580  003168  5185               	movf	(ProcessDiary@totalMinutes+1)& (0+255),w,b
  5581  00316A  183C               	xorwf	__currenDiaryEvent+3,w,c
  5582  00316C  A4D8               	btfss	status,2,c
  5583  00316E  D04B               	goto	l443
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;main.c: 787: {
  5587                           ;main.c: 789: if(_currenDiaryEvent.IsFire)
  5588  003170  5039               	movf	__currenDiaryEvent,w,c
  5589  003172  B4D8               	btfsc	status,2,c
  5590  003174  D008               	goto	l8313
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;main.c: 790: {
  5594                           ;main.c: 791: LightLed(GetCurrentEventDiodeNum(), LED_RED, 0);
  5595  003176  0E02               	movlw	2
  5596  003178  6E21               	movwf	LightLed@ledState,c
  5597  00317A  0E00               	movlw	0
  5598  00317C  6E22               	movwf	LightLed@blink,c
  5599  00317E  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  5600  003182  EC5C  F005         	call	_LightLed
  5601  003186                     l8313:
  5602  003186  FFFF               	dw	65535	; assembler added errata NOP
  5603                           
  5604                           ;main.c: 792: }
  5605                           ;main.c: 794: {
  5606                           ;main.c: 795: _currenDiaryEvent.FiredEventNum = _currenDiaryEvent.NextEventNum;
  5607  003188  C041  F03A         	movff	__currenDiaryEvent+8,__currenDiaryEvent+1
  5608                           
  5609                           ;main.c: 796: _currenDiaryEvent.IsFire = 1;
  5610  00318C  0E01               	movlw	1
  5611  00318E  6E39               	movwf	__currenDiaryEvent,c
  5612                           
  5613                           ;main.c: 798: LightLed(GetCurrentEventDiodeNum(), LED_ORANGE, 1);
  5614  003190  0E03               	movlw	3
  5615  003192  6E21               	movwf	LightLed@ledState,c
  5616  003194  0E01               	movlw	1
  5617  003196  6E22               	movwf	LightLed@blink,c
  5618  003198  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  5619  00319C  EC5C  F005         	call	_LightLed
  5620                           
  5621                           ;main.c: 799: if(_nextEventSoundId != 0)
  5622  0031A0  504E               	movf	__nextEventSoundId,w,c
  5623  0031A2  B4D8               	btfsc	status,2,c
  5624  0031A4  D007               	goto	l8321
  5625                           
  5626                           ;main.c: 800: {
  5627                           ;main.c: 801: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5628  0031A6  C0E6  F031         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5629  0031AA  C0E7  F032         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5630  0031AE  044E               	decf	__nextEventSoundId,w,c
  5631  0031B0  EC27  F015         	call	_PlaySound
  5632  0031B4                     l8321:
  5633  0031B4  FFFF               	dw	65535	; assembler added errata NOP
  5634                           
  5635                           ;main.c: 802: }
  5636                           ;main.c: 811: _currenDiaryEvent.ResetSecond = *GetTime() + eventAcceptTime;
  5637  0031B6  EC92  F001         	call	_GetTime	;wreg free
  5638  0031BA  C021  FFD9         	movff	?_GetTime,fsr2l
  5639  0031BE  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5640  0031C2  CFDE F080          	movff	postinc2,??_ProcessDiary
  5641  0031C6  CFDE F081          	movff	postinc2,??_ProcessDiary+1
  5642  0031CA  CFDE F082          	movff	postinc2,??_ProcessDiary+2
  5643  0031CE  CFDE F083          	movff	postinc2,??_ProcessDiary+3
  5644  0031D2  5056               	movf	_eventAcceptTime,w,c
  5645  0031D4  0100               	movlb	0	; () banked
  5646  0031D6  2580               	addwf	??_ProcessDiary& (0+255),w,b
  5647  0031D8  6E3D               	movwf	__currenDiaryEvent+4,c
  5648  0031DA  0E00               	movlw	0
  5649  0031DC  0100               	movlb	0	; () banked
  5650  0031DE  2181               	addwfc	(??_ProcessDiary+1)& (0+255),w,b
  5651  0031E0  6E3E               	movwf	__currenDiaryEvent+5,c
  5652  0031E2  0E00               	movlw	0
  5653  0031E4  0100               	movlb	0	; () banked
  5654  0031E6  2182               	addwfc	(??_ProcessDiary+2)& (0+255),w,b
  5655  0031E8  6E3F               	movwf	__currenDiaryEvent+6,c
  5656  0031EA  0E00               	movlw	0
  5657  0031EC  0100               	movlb	0	; () banked
  5658  0031EE  2183               	addwfc	(??_ProcessDiary+3)& (0+255),w,b
  5659  0031F0  6E40               	movwf	__currenDiaryEvent+7,c
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;main.c: 813: LoadNextEvent();
  5663  0031F2  ECFD  F011         	call	_LoadNextEvent	;wreg free
  5664                           
  5665                           ;main.c: 814: }
  5666                           ;main.c: 815: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5667  0031F6  503A               	movf	__currenDiaryEvent+1,w,c
  5668  0031F8  0100               	movlb	0	; () banked
  5669  0031FA  6F80               	movwf	??_ProcessDiary& (0+255),b
  5670  0031FC  5041               	movf	__currenDiaryEvent+8,w,c
  5671  0031FE  0101               	movlb	1	; () banked
  5672  003200  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5673  003202  C080  F1D9         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5674  003206                     l443:
  5675  003206  FFFF               	dw	65535	; assembler added errata NOP
  5676  003208  0012               	return		;funcret
  5677  00320A  FFFF               	dw	65535	; errata NOP
  5678  00320C                     __end_of_ProcessDiary:
  5679                           	opt stack 0
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon	equ	0xFF2
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1h	equ	0xFE2
  5691                           fsr1l	equ	0xFE1
  5692                           indf2	equ	0xFDF
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function _PlaySound *****************
  5700 ;; Defined at:
  5701 ;;		line 644 in file "main.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  soundId         1    wreg     unsigned char 
  5704 ;;  playDuration    2   48[COMRAM] unsigned int 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  soundId         1   54[COMRAM] unsigned char 
  5707 ;;  soundAddr       1   55[COMRAM] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      unsigned char 
  5710 ;; Registers used:
  5711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5717 ;;      Params:         2       0       0       0       0       0       0
  5718 ;;      Locals:         2       0       0       0       0       0       0
  5719 ;;      Temps:          4       0       0       0       0       0       0
  5720 ;;      Totals:         8       0       0       0       0       0       0
  5721 ;;Total ram usage:        8 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    4
  5724 ;; This function calls:
  5725 ;;		_GetTime
  5726 ;;		_SoundPlayNextStep
  5727 ;; This function is called by:
  5728 ;;		_ProcessDiary
  5729 ;;		_CommandSetLed
  5730 ;;		_CommandSetStatusLed
  5731 ;;		_ProcessUserCommands
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text26
  5736  002A4E                     __ptext26:
  5737                           	opt stack 0
  5738  002A4E                     _PlaySound:
  5739                           	opt stack 24
  5740                           
  5741                           ;incstack = 0
  5742  002A4E  FFFF               	dw	65535
  5743                           
  5744                           ;PlaySound@soundId stored from wreg
  5745  002A50  6E37               	movwf	PlaySound@soundId,c
  5746                           
  5747                           ;main.c: 646: if(soundId >= _soundCount)
  5748  002A52  5052               	movf	__soundCount,w,c
  5749  002A54  5C37               	subwf	PlaySound@soundId,w,c
  5750  002A56  B0D8               	btfsc	status,0,c
  5751  002A58  D075               	goto	l398
  5752                           
  5753                           ;main.c: 649: if(playDuration == 0)
  5754                           
  5755                           ;main.c: 647: return 0;
  5756                           ;	Return value of _PlaySound is never used
  5757  002A5A  5031               	movf	PlaySound@playDuration,w,c
  5758  002A5C  1032               	iorwf	PlaySound@playDuration+1,w,c
  5759  002A5E  A4D8               	btfss	status,2,c
  5760  002A60  D009               	goto	l6773
  5761                           
  5762                           ;main.c: 650: soundTestEnd = 0;
  5763  002A62  0E00               	movlw	0
  5764  002A64  0101               	movlb	1	; () banked
  5765  002A66  6F20               	movwf	_soundTestEnd& (0+255),b
  5766  002A68  0E00               	movlw	0
  5767  002A6A  6F21               	movwf	(_soundTestEnd+1)& (0+255),b
  5768  002A6C  0E00               	movlw	0
  5769  002A6E  6F22               	movwf	(_soundTestEnd+2)& (0+255),b
  5770  002A70  0E00               	movlw	0
  5771  002A72  D02A               	goto	L4
  5772  002A74                     l6773:
  5773  002A74  FFFF               	dw	65535	; assembler added errata NOP
  5774                           
  5775                           ;main.c: 651: else if(playDuration == 65535)
  5776  002A76  2831               	incf	PlaySound@playDuration,w,c
  5777  002A78  E109               	bnz	l6777
  5778  002A7A  2832               	incf	PlaySound@playDuration+1,w,c
  5779  002A7C  A4D8               	btfss	status,2,c
  5780  002A7E  D006               	goto	l6777
  5781                           
  5782                           ;main.c: 652: soundTestEnd = 4294967295;
  5783  002A80  0101               	movlb	1	; () banked
  5784  002A82  6920               	setf	_soundTestEnd& (0+255),b
  5785  002A84  6921               	setf	(_soundTestEnd+1)& (0+255),b
  5786  002A86  6922               	setf	(_soundTestEnd+2)& (0+255),b
  5787  002A88  6923               	setf	(_soundTestEnd+3)& (0+255),b
  5788  002A8A  D020               	goto	l6779
  5789  002A8C                     l6777:
  5790  002A8C  FFFF               	dw	65535	; assembler added errata NOP
  5791                           
  5792                           ;main.c: 653: else
  5793                           ;main.c: 654: soundTestEnd = *GetTime() + playDuration;
  5794  002A8E  EC92  F001         	call	_GetTime	;wreg free
  5795  002A92  C021  FFD9         	movff	?_GetTime,fsr2l
  5796  002A96  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5797  002A9A  CFDE F033          	movff	postinc2,??_PlaySound
  5798  002A9E  CFDE F034          	movff	postinc2,??_PlaySound+1
  5799  002AA2  CFDE F035          	movff	postinc2,??_PlaySound+2
  5800  002AA6  CFDE F036          	movff	postinc2,??_PlaySound+3
  5801  002AAA  5031               	movf	PlaySound@playDuration,w,c
  5802  002AAC  2433               	addwf	??_PlaySound,w,c
  5803  002AAE  0101               	movlb	1	; () banked
  5804  002AB0  6F20               	movwf	_soundTestEnd& (0+255),b
  5805  002AB2  5032               	movf	PlaySound@playDuration+1,w,c
  5806  002AB4  2034               	addwfc	??_PlaySound+1,w,c
  5807  002AB6  0101               	movlb	1	; () banked
  5808  002AB8  6F21               	movwf	(_soundTestEnd+1)& (0+255),b
  5809  002ABA  0E00               	movlw	0
  5810  002ABC  2035               	addwfc	??_PlaySound+2,w,c
  5811  002ABE  0101               	movlb	1	; () banked
  5812  002AC0  6F22               	movwf	(_soundTestEnd+2)& (0+255),b
  5813  002AC2  0E00               	movlw	0
  5814  002AC4  2036               	addwfc	??_PlaySound+3,w,c
  5815  002AC6  0101               	movlb	1	; () banked
  5816  002AC8                     L4:
  5817  002AC8  FFFF               	dw	65535	; assembler added errata NOP
  5818  002ACA  6F23               	movwf	(_soundTestEnd+3)& (0+255),b
  5819  002ACC                     l6779:
  5820  002ACC  FFFF               	dw	65535	; assembler added errata NOP
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;main.c: 656: uint8_t soundAddr = ( EEADR = _eeSoundAddressesList + soundId, (void)0, RD
      +                           = 1, EEDATA);
  5824  002ACE  5048               	movf	__eeSoundAddressesList,w,c
  5825  002AD0  2437               	addwf	PlaySound@soundId,w,c
  5826  002AD2  6EA9               	movwf	4009,c	;volatile
  5827                           
  5828                           ; BSR set to: 1
  5829  002AD4  80A6               	bsf	4006,0,c	;volatile
  5830                           
  5831                           ; BSR set to: 1
  5832  002AD6  CFA8 F038          	movff	4008,PlaySound@soundAddr	;volatile
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;main.c: 657: if(_eeFirstSoundAddress + soundAddr >= 256)
  5836  002ADA  5038               	movf	PlaySound@soundAddr,w,c
  5837  002ADC  C047  F033         	movff	__eeFirstSoundAddress,??_PlaySound
  5838  002AE0  6A34               	clrf	(??_PlaySound+1)& (0+255),c
  5839  002AE2  2633               	addwf	??_PlaySound,f,c
  5840  002AE4  0E00               	movlw	0
  5841  002AE6  2234               	addwfc	??_PlaySound+1,f,c
  5842  002AE8  BE34               	btfsc	??_PlaySound+1,7,c
  5843  002AEA  D003               	goto	l6789
  5844  002AEC  0434               	decf	??_PlaySound+1,w,c
  5845  002AEE  B0D8               	btfsc	status,0,c
  5846  002AF0  D029               	goto	l398
  5847  002AF2                     l6789:
  5848  002AF2  FFFF               	dw	65535	; assembler added errata NOP
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;main.c: 660: _playingSoundSteps = ( EEADR = _eeFirstSoundAddress + soundAddr, (void)0, 
      +                          RD = 1, EEDATA);
  5852  002AF4  5047               	movf	__eeFirstSoundAddress,w,c
  5853  002AF6  2438               	addwf	PlaySound@soundAddr,w,c
  5854  002AF8  6EA9               	movwf	4009,c	;volatile
  5855                           
  5856                           ; BSR set to: 1
  5857  002AFA  80A6               	bsf	4006,0,c	;volatile
  5858                           
  5859                           ; BSR set to: 1
  5860  002AFC  CFA8 F051          	movff	4008,__playingSoundSteps	;volatile
  5861                           
  5862                           ;main.c: 662: _playingSoundStartPosInEe = _eeFirstSoundAddress + soundAddr + 1;
  5863  002B00  5047               	movf	__eeFirstSoundAddress,w,c
  5864  002B02  2438               	addwf	PlaySound@soundAddr,w,c
  5865  002B04  6E33               	movwf	??_PlaySound& (0+255),c
  5866  002B06  2833               	incf	??_PlaySound,w,c
  5867  002B08  6E50               	movwf	__playingSoundStartPosInEe,c
  5868                           
  5869                           ; BSR set to: 1
  5870                           ;main.c: 663: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5871  002B0A  5051               	movf	__playingSoundSteps,w,c
  5872  002B0C  6E33               	movwf	??_PlaySound& (0+255),c
  5873  002B0E  5050               	movf	__playingSoundStartPosInEe,w,c
  5874  002B10  0101               	movlb	1	; () banked
  5875  002B12  6FE2               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5876  002B14  C033  F1E3         	movff	??_PlaySound,__MODBUSInputRegs+15
  5877                           
  5878                           ; BSR set to: 1
  5879                           ;main.c: 664: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5880  002B18  5051               	movf	__playingSoundSteps,w,c
  5881  002B1A  0D03               	mullw	3
  5882  002B1C  5050               	movf	__playingSoundStartPosInEe,w,c
  5883  002B1E  6E33               	movwf	??_PlaySound& (0+255),c
  5884  002B20  6A34               	clrf	(??_PlaySound+1)& (0+255),c
  5885  002B22  50F3               	movf	prodl,w,c
  5886  002B24  2633               	addwf	??_PlaySound,f,c
  5887  002B26  50F4               	movf	prodh,w,c
  5888  002B28  2234               	addwfc	??_PlaySound+1,f,c
  5889  002B2A  BE34               	btfsc	??_PlaySound+1,7,c
  5890  002B2C  D003               	goto	l6801
  5891  002B2E  0434               	decf	??_PlaySound+1,w,c
  5892  002B30  B0D8               	btfsc	status,0,c
  5893  002B32  D008               	goto	l398
  5894  002B34                     l6801:
  5895  002B34  FFFF               	dw	65535	; assembler added errata NOP
  5896                           
  5897                           ; BSR set to: 1
  5898                           ;main.c: 667: _playingSoundCurPos = 0;
  5899  002B36  0E00               	movlw	0
  5900  002B38  6E4F               	movwf	__playingSoundCurPos,c
  5901                           
  5902                           ;main.c: 668: _isSoundPlaying = 1;
  5903  002B3A  0E01               	movlw	1
  5904  002B3C  0100               	movlb	0	; () banked
  5905  002B3E  6FEF               	movwf	__isSoundPlaying& (0+255),b
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;main.c: 669: SoundPlayNextStep();
  5909  002B40  ECA5  F015         	call	_SoundPlayNextStep	;wreg free
  5910  002B44                     l398:
  5911  002B44  FFFF               	dw	65535	; assembler added errata NOP
  5912  002B46  0012               	return		;funcret
  5913  002B48  FFFF               	dw	65535	; errata NOP
  5914  002B4A                     __end_of_PlaySound:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           postinc0	equ	0xFEE
  5924                           wreg	equ	0xFE8
  5925                           postdec1	equ	0xFE5
  5926                           fsr1h	equ	0xFE2
  5927                           fsr1l	equ	0xFE1
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _SoundPlayNextStep *****************
  5936 ;; Defined at:
  5937 ;;		line 599 in file "main.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  stepDuty        2   45[COMRAM] unsigned int 
  5942 ;;  duration        1   47[COMRAM] unsigned char 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  1    wreg      void 
  5945 ;; Registers used:
  5946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5952 ;;      Params:         0       0       0       0       0       0       0
  5953 ;;      Locals:         3       0       0       0       0       0       0
  5954 ;;      Temps:          5       0       0       0       0       0       0
  5955 ;;      Totals:         8       0       0       0       0       0       0
  5956 ;;Total ram usage:        8 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    3
  5959 ;; This function calls:
  5960 ;;		_GetTime
  5961 ;;		_SetBuzzerDuty
  5962 ;;		_StopPlaying
  5963 ;;		_millis
  5964 ;; This function is called by:
  5965 ;;		_PlaySound
  5966 ;;		_main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text27
  5971  002B4A                     __ptext27:
  5972                           	opt stack 0
  5973  002B4A                     _SoundPlayNextStep:
  5974                           	opt stack 24
  5975                           
  5976                           ;incstack = 0
  5977  002B4A  FFFF               	dw	65535
  5978                           
  5979                           ;main.c: 601: if(_playingSoundCurPos >= _playingSoundSteps)
  5980  002B4C  5051               	movf	__playingSoundSteps,w,c
  5981  002B4E  5C4F               	subwf	__playingSoundCurPos,w,c
  5982  002B50  A0D8               	btfss	status,0,c
  5983  002B52  D01D               	goto	l6581
  5984                           
  5985                           ;main.c: 602: {
  5986                           ;main.c: 603: _playingSoundCurPos = 0;
  5987  002B54  0E00               	movlw	0
  5988  002B56  6E4F               	movwf	__playingSoundCurPos,c
  5989                           
  5990                           ;main.c: 604: if(*GetTime() >= soundTestEnd)
  5991  002B58  EC92  F001         	call	_GetTime	;wreg free
  5992  002B5C  C021  FFD9         	movff	?_GetTime,fsr2l
  5993  002B60  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5994  002B64  0101               	movlb	1	; () banked
  5995  002B66  5120               	movf	_soundTestEnd& (0+255),w,b
  5996  002B68  5CDE               	subwf	postinc2,w,c
  5997  002B6A  0101               	movlb	1	; () banked
  5998  002B6C  5121               	movf	(_soundTestEnd+1)& (0+255),w,b
  5999  002B6E  58DE               	subwfb	postinc2,w,c
  6000  002B70  0101               	movlb	1	; () banked
  6001  002B72  5122               	movf	(_soundTestEnd+2)& (0+255),w,b
  6002  002B74  58DE               	subwfb	postinc2,w,c
  6003  002B76  50DE               	movf	postinc2,w,c
  6004  002B78  0A80               	xorlw	128
  6005  002B7A  6E2D               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  6006  002B7C  0101               	movlb	1	; () banked
  6007  002B7E  5123               	movf	(_soundTestEnd+3)& (0+255),w,b
  6008  002B80  0A80               	xorlw	128
  6009  002B82  582D               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  6010  002B84  A0D8               	btfss	status,0,c
  6011  002B86  D003               	goto	l6581
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;main.c: 605: {
  6015                           ;main.c: 606: StopPlaying();
  6016  002B88  EC4A  F001         	call	_StopPlaying	;wreg free
  6017                           
  6018                           ;main.c: 607: return;
  6019  002B8C  D04E               	goto	l391
  6020  002B8E                     l6581:
  6021  002B8E  FFFF               	dw	65535	; assembler added errata NOP
  6022                           
  6023                           ;main.c: 608: }
  6024                           ;main.c: 609: }
  6025                           ;main.c: 610: uint16_t stepDuty = ( EEADR = _playingSoundStartPosInEe + _playingSoundCur
      +                          Pos * 3, (void)0, RD = 1, EEDATA);
  6026  002B90  504F               	movf	__playingSoundCurPos,w,c
  6027  002B92  0D03               	mullw	3
  6028  002B94  50F3               	movf	prodl,w,c
  6029  002B96  2450               	addwf	__playingSoundStartPosInEe,w,c
  6030  002B98  6EA9               	movwf	4009,c	;volatile
  6031  002B9A  80A6               	bsf	4006,0,c	;volatile
  6032  002B9C  CFA8 F02E          	movff	4008,SoundPlayNextStep@stepDuty	;volatile
  6033  002BA0  6A2F               	clrf	SoundPlayNextStep@stepDuty+1,c
  6034                           
  6035                           ;main.c: 611: stepDuty <<= 6;
  6036  002BA2  0E06               	movlw	6
  6037  002BA4                     u5885:
  6038  002BA4  FFFF               	dw	65535	; assembler added errata NOP
  6039  002BA6  90D8               	bcf	status,0,c
  6040  002BA8  362E               	rlcf	SoundPlayNextStep@stepDuty,f,c
  6041  002BAA  362F               	rlcf	SoundPlayNextStep@stepDuty+1,f,c
  6042  002BAC  2EE8               	decfsz	wreg,f,c
  6043  002BAE  D7FA               	goto	u5885
  6044                           
  6045                           ;main.c: 612: _playingEndMs = millis() + stepDuty;
  6046  002BB0  ECD1  F000         	call	_millis	;wreg free
  6047  002BB4  502E               	movf	SoundPlayNextStep@stepDuty,w,c
  6048  002BB6  2421               	addwf	?_millis,w,c
  6049  002BB8  0101               	movlb	1	; () banked
  6050  002BBA  6F10               	movwf	__playingEndMs& (0+255),b
  6051  002BBC  502F               	movf	SoundPlayNextStep@stepDuty+1,w,c
  6052  002BBE  2022               	addwfc	?_millis+1,w,c
  6053  002BC0  0101               	movlb	1	; () banked
  6054  002BC2  6F11               	movwf	(__playingEndMs+1)& (0+255),b
  6055  002BC4  0E00               	movlw	0
  6056  002BC6  2023               	addwfc	?_millis+2,w,c
  6057  002BC8  0101               	movlb	1	; () banked
  6058  002BCA  6F12               	movwf	(__playingEndMs+2)& (0+255),b
  6059  002BCC  0E00               	movlw	0
  6060  002BCE  2024               	addwfc	?_millis+3,w,c
  6061  002BD0  0101               	movlb	1	; () banked
  6062  002BD2  6F13               	movwf	(__playingEndMs+3)& (0+255),b
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;main.c: 613: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  6066  002BD4  504F               	movf	__playingSoundCurPos,w,c
  6067  002BD6  0D03               	mullw	3
  6068  002BD8  50F3               	movf	prodl,w,c
  6069  002BDA  2450               	addwf	__playingSoundStartPosInEe,w,c
  6070  002BDC  6E29               	movwf	??_SoundPlayNextStep& (0+255),c
  6071  002BDE  2829               	incf	??_SoundPlayNextStep,w,c
  6072  002BE0  6EA9               	movwf	4009,c	;volatile
  6073                           
  6074                           ; BSR set to: 1
  6075  002BE2  80A6               	bsf	4006,0,c	;volatile
  6076                           
  6077                           ; BSR set to: 1
  6078  002BE4  CFA8 FFCB          	movff	4008,4043	;volatile
  6079                           
  6080                           ; BSR set to: 1
  6081                           ;main.c: 614: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  6082  002BE8  504F               	movf	__playingSoundCurPos,w,c
  6083  002BEA  0D03               	mullw	3
  6084  002BEC  50F3               	movf	prodl,w,c
  6085  002BEE  2450               	addwf	__playingSoundStartPosInEe,w,c
  6086  002BF0  0F02               	addlw	2
  6087  002BF2  6EA9               	movwf	4009,c	;volatile
  6088                           
  6089                           ; BSR set to: 1
  6090  002BF4  80A6               	bsf	4006,0,c	;volatile
  6091                           
  6092                           ; BSR set to: 1
  6093  002BF6  CFA8 F030          	movff	4008,SoundPlayNextStep@duration	;volatile
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;main.c: 615: _playingSoundCurPos++;
  6097  002BFA  2A4F               	incf	__playingSoundCurPos,f,c
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;main.c: 616: if(duration == 0 || PR2 == 0)
  6101  002BFC  5030               	movf	SoundPlayNextStep@duration,w,c
  6102  002BFE  B4D8               	btfsc	status,2,c
  6103  002C00  D003               	goto	l394
  6104                           
  6105                           ; BSR set to: 1
  6106  002C02  50CB               	movf	4043,w,c	;volatile
  6107  002C04  A4D8               	btfss	status,2,c
  6108  002C06  D005               	goto	l6613
  6109  002C08                     l394:
  6110  002C08  FFFF               	dw	65535	; assembler added errata NOP
  6111                           
  6112                           ; BSR set to: 1
  6113                           ;main.c: 617: {
  6114                           ;main.c: 618: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6115  002C0A  94CA               	bcf	4042,2,c	;volatile
  6116  002C0C  8494               	bsf	3988,2,c	;volatile
  6117                           
  6118                           ; BSR set to: 1
  6119  002C0E  0E00               	movlw	0
  6120  002C10  D009               	goto	L17
  6121  002C12                     l6613:
  6122  002C12  FFFF               	dw	65535	; assembler added errata NOP
  6123                           
  6124                           ;main.c: 620: }
  6125                           ;main.c: 621: SetBuzzerDuty(duration);
  6126  002C14  C030  F021         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  6127  002C18  6A22               	clrf	SetBuzzerDuty@dc+1,c
  6128  002C1A  ECCE  F01F         	call	_SetBuzzerDuty	;wreg free
  6129                           
  6130                           ;main.c: 622: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  6131  002C1E  9494               	bcf	3988,2,c	;volatile
  6132  002C20  84CA               	bsf	4042,2,c	;volatile
  6133  002C22  0E01               	movlw	1
  6134  002C24                     L17:
  6135  002C24  FFFF               	dw	65535	; assembler added errata NOP
  6136  002C26  0100               	movlb	0	; () banked
  6137  002C28  6FEE               	movwf	_IsBusserOn& (0+255),b
  6138  002C2A                     l391:
  6139  002C2A  FFFF               	dw	65535	; assembler added errata NOP
  6140  002C2C  0012               	return		;funcret
  6141  002C2E  FFFF               	dw	65535	; errata NOP
  6142  002C30                     __end_of_SoundPlayNextStep:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           postdec1	equ	0xFE5
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _StopPlaying *****************
  6164 ;; Defined at:
  6165 ;;		line 591 in file "main.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6179 ;;      Params:         0       0       0       0       0       0       0
  6180 ;;      Locals:         0       0       0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0
  6182 ;;      Totals:         0       0       0       0       0       0       0
  6183 ;;Total ram usage:        0 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    2
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_SoundPlayNextStep
  6190 ;;		_ResetEvent
  6191 ;;		_ResetEventFromCommand
  6192 ;;		_main
  6193 ;;		_CommandSetLed
  6194 ;;		_CommandSetStatusLed
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text28
  6199  000294                     __ptext28:
  6200                           	opt stack 0
  6201  000294                     _StopPlaying:
  6202                           	opt stack 24
  6203                           
  6204                           ;incstack = 0
  6205  000294  FFFF               	dw	65535
  6206                           
  6207                           ;main.c: 593: _isSoundPlaying = 0;
  6208  000296  0E00               	movlw	0
  6209  000298  0100               	movlb	0	; () banked
  6210  00029A  6FEF               	movwf	__isSoundPlaying& (0+255),b
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;main.c: 594: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6214  00029C  94CA               	bcf	4042,2,c	;volatile
  6215                           
  6216                           ; BSR set to: 0
  6217  00029E  8494               	bsf	3988,2,c	;volatile
  6218  0002A0  0E00               	movlw	0
  6219  0002A2  0100               	movlb	0	; () banked
  6220  0002A4  6FEE               	movwf	_IsBusserOn& (0+255),b
  6221                           
  6222                           ; BSR set to: 0
  6223  0002A6  0012               	return		;funcret
  6224  0002A8  FFFF               	dw	65535	; errata NOP
  6225  0002AA                     __end_of_StopPlaying:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           intcon	equ	0xFF2
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           postdec1	equ	0xFE5
  6237                           fsr1h	equ	0xFE2
  6238                           fsr1l	equ	0xFE1
  6239                           indf2	equ	0xFDF
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _SetBuzzerDuty *****************
  6247 ;; Defined at:
  6248 ;;		line 425 in file "main.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  dc              2   32[COMRAM] unsigned int 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6262 ;;      Params:         2       0       0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0
  6264 ;;      Temps:          2       0       0       0       0       0       0
  6265 ;;      Totals:         4       0       0       0       0       0       0
  6266 ;;Total ram usage:        4 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    2
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_SoundPlayNextStep
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text29
  6277  003F9C                     __ptext29:
  6278                           	opt stack 0
  6279  003F9C                     _SetBuzzerDuty:
  6280                           	opt stack 24
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;incstack = 0
  6284  003F9C  FFFF               	dw	65535
  6285                           
  6286                           ;main.c: 430: CCP1CONbits.DC1B = dc & 0x03;
  6287  003F9E  C021  F023         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6288  003FA2  0E03               	movlw	3
  6289  003FA4  1623               	andwf	??_SetBuzzerDuty,f,c
  6290  003FA6  3A23               	swapf	??_SetBuzzerDuty,f,c
  6291  003FA8  50BD               	movf	4029,w,c	;volatile
  6292  003FAA  1823               	xorwf	??_SetBuzzerDuty,w,c
  6293  003FAC  0BCF               	andlw	-49
  6294  003FAE  1823               	xorwf	??_SetBuzzerDuty,w,c
  6295  003FB0  6EBD               	movwf	4029,c	;volatile
  6296                           
  6297                           ;main.c: 431: CCPR1L = (uint8_t)(dc >> 2);
  6298  003FB2  C021  F023         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6299  003FB6  C022  F024         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  6300  003FBA  90D8               	bcf	status,0,c
  6301  003FBC  3224               	rrcf	??_SetBuzzerDuty+1,f,c
  6302  003FBE  3223               	rrcf	??_SetBuzzerDuty,f,c
  6303  003FC0  90D8               	bcf	status,0,c
  6304  003FC2  3224               	rrcf	??_SetBuzzerDuty+1,f,c
  6305  003FC4  3223               	rrcf	??_SetBuzzerDuty,f,c
  6306  003FC6  5023               	movf	??_SetBuzzerDuty,w,c
  6307  003FC8  6EBE               	movwf	4030,c	;volatile
  6308  003FCA  0012               	return		;funcret
  6309  003FCC  FFFF               	dw	65535	; errata NOP
  6310  003FCE                     __end_of_SetBuzzerDuty:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           intcon	equ	0xFF2
  6319                           postinc0	equ	0xFEE
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1h	equ	0xFE2
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _GetTime *****************
  6332 ;; Defined at:
  6333 ;;		line 207 in file "user.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  2   32[COMRAM] PTR long 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6347 ;;      Params:         2       0       0       0       0       0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0
  6350 ;;      Totals:         2       0       0       0       0       0       0
  6351 ;;Total ram usage:        2 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    2
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_SoundPlayNextStep
  6358 ;;		_PlaySound
  6359 ;;		_ProcessDiary
  6360 ;;		_main
  6361 ;;		_CommandSetLed
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text30
  6366  000324                     __ptext30:
  6367                           	opt stack 0
  6368  000324                     _GetTime:
  6369                           	opt stack 24
  6370                           
  6371                           ;incstack = 0
  6372  000324  FFFF               	dw	65535
  6373                           
  6374                           ;user.c: 209: return &currentTime;
  6375  000326  0EF2               	movlw	low _currentTime
  6376  000328  6E21               	movwf	?_GetTime,c
  6377  00032A  0E01               	movlw	high _currentTime
  6378  00032C  6E22               	movwf	?_GetTime+1,c
  6379  00032E  0012               	return		;funcret
  6380  000330  FFFF               	dw	65535	; errata NOP
  6381  000332                     __end_of_GetTime:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           intcon	equ	0xFF2
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1h	equ	0xFE2
  6394                           fsr1l	equ	0xFE1
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           fsr2h	equ	0xFDA
  6399                           fsr2l	equ	0xFD9
  6400                           status	equ	0xFD8
  6401                           
  6402 ;; *************** function _LoadNextEvent *****************
  6403 ;; Defined at:
  6404 ;;		line 703 in file "main.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  v1              1   38[COMRAM] unsigned char 
  6409 ;;  totalMinutes    2   36[COMRAM] unsigned int 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6419 ;;      Params:         0       0       0       0       0       0       0
  6420 ;;      Locals:         3       0       0       0       0       0       0
  6421 ;;      Temps:          2       0       0       0       0       0       0
  6422 ;;      Totals:         5       0       0       0       0       0       0
  6423 ;;Total ram usage:        5 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    3
  6426 ;; This function calls:
  6427 ;;		_getTotalMinutes
  6428 ;; This function is called by:
  6429 ;;		_InitFromEeprom
  6430 ;;		_ProcessDiary
  6431 ;;		_main
  6432 ;;		_io_poll
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text31
  6437  0023FA                     __ptext31:
  6438                           	opt stack 0
  6439  0023FA                     _LoadNextEvent:
  6440                           	opt stack 24
  6441                           
  6442                           ;incstack = 0
  6443  0023FA  FFFF               	dw	65535
  6444                           
  6445                           ;main.c: 705: if(eventCount == 0)
  6446  0023FC  5057               	movf	_eventCount,w,c
  6447  0023FE  B4D8               	btfsc	status,2,c
  6448  002400  D0BA               	goto	l424
  6449                           
  6450                           ;main.c: 707: uint16_t totalMinutes;
  6451                           ;main.c: 708: if(!getTotalMinutes(&totalMinutes))
  6452                           
  6453                           ;main.c: 706: return;
  6454  002402  0E25               	movlw	low LoadNextEvent@totalMinutes
  6455  002404  6E21               	movwf	getTotalMinutes@totalMinutes,c
  6456  002406  0E00               	movlw	high LoadNextEvent@totalMinutes
  6457  002408  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  6458  00240A  ECA7  F000         	call	_getTotalMinutes	;wreg free
  6459  00240E  0900               	iorlw	0
  6460  002410  B4D8               	btfsc	status,2,c
  6461  002412  D0B1               	goto	l424
  6462  002414                     l6709:
  6463  002414  FFFF               	dw	65535	; assembler added errata NOP
  6464                           
  6465                           ;main.c: 712: {
  6466                           ;main.c: 713: if(_currenDiaryEvent.NextEventNum == 0xff)
  6467  002416  2841               	incf	__currenDiaryEvent+8,w,c
  6468  002418  A4D8               	btfss	status,2,c
  6469  00241A  D003               	goto	l6713
  6470                           
  6471                           ;main.c: 714: _currenDiaryEvent.NextEventNum = 0;
  6472  00241C  0E00               	movlw	0
  6473  00241E  6E41               	movwf	__currenDiaryEvent+8,c
  6474  002420  D002               	goto	l6715
  6475  002422                     l6713:
  6476  002422  FFFF               	dw	65535	; assembler added errata NOP
  6477                           
  6478                           ;main.c: 715: else
  6479                           ;main.c: 716: _currenDiaryEvent.NextEventNum++;
  6480  002424  2A41               	incf	__currenDiaryEvent+8,f,c
  6481  002426                     l6715:
  6482  002426  FFFF               	dw	65535	; assembler added errata NOP
  6483                           
  6484                           ;main.c: 717: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  6485  002428  503A               	movf	__currenDiaryEvent+1,w,c
  6486  00242A  6E23               	movwf	??_LoadNextEvent& (0+255),c
  6487  00242C  5041               	movf	__currenDiaryEvent+8,w,c
  6488  00242E  0101               	movlb	1	; () banked
  6489  002430  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6490  002432  C023  F1D9         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6491                           
  6492                           ; BSR set to: 1
  6493                           ;main.c: 718: if(_currenDiaryEvent.NextEventNum >= eventCount)
  6494  002436  5057               	movf	_eventCount,w,c
  6495  002438  5C41               	subwf	__currenDiaryEvent+8,w,c
  6496  00243A  A0D8               	btfss	status,0,c
  6497  00243C  D012               	goto	l6725
  6498                           
  6499                           ; BSR set to: 1
  6500                           ;main.c: 719: {
  6501                           ;main.c: 720: _currenDiaryEvent.NextEventNum = 0xff;
  6502  00243E  6841               	setf	__currenDiaryEvent+8,c
  6503                           
  6504                           ; BSR set to: 1
  6505                           ;main.c: 721: _currenDiaryEvent.NextEventTotalMinutes = 0;
  6506  002440  0E00               	movlw	0
  6507  002442  6E3C               	movwf	__currenDiaryEvent+3,c
  6508  002444  0E00               	movlw	0
  6509  002446  6E3B               	movwf	__currenDiaryEvent+2,c
  6510                           
  6511                           ;main.c: 722: _MODBUSInputRegs[3] = 0;
  6512  002448  0E00               	movlw	0
  6513  00244A  0101               	movlb	1	; () banked
  6514  00244C  6FDB               	movwf	(__MODBUSInputRegs+7)& (0+255),b
  6515  00244E  0E00               	movlw	0
  6516  002450  6FDA               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6517                           
  6518                           ;main.c: 723: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  6519  002452  503A               	movf	__currenDiaryEvent+1,w,c
  6520  002454  6E23               	movwf	??_LoadNextEvent& (0+255),c
  6521  002456  5041               	movf	__currenDiaryEvent+8,w,c
  6522  002458  0101               	movlb	1	; () banked
  6523  00245A  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6524  00245C  C023  F1D9         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6525                           
  6526                           ; BSR set to: 1
  6527                           ;main.c: 724: return;
  6528  002460  D08A               	goto	l424
  6529  002462                     l6725:
  6530  002462  FFFF               	dw	65535	; assembler added errata NOP
  6531                           
  6532                           ; BSR set to: 1
  6533                           ;main.c: 725: }
  6534                           ;main.c: 736: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2, (void)
      +                          0, RD = 1, EEDATA);
  6535  002464  5041               	movf	__currenDiaryEvent+8,w,c
  6536  002466  0D02               	mullw	2
  6537  002468  50F3               	movf	prodl,w,c
  6538  00246A  0F0B               	addlw	11
  6539  00246C  6EA9               	movwf	4009,c	;volatile
  6540                           
  6541                           ; BSR set to: 1
  6542  00246E  80A6               	bsf	4006,0,c	;volatile
  6543                           
  6544                           ; BSR set to: 1
  6545  002470  CFA8 F027          	movff	4008,LoadNextEvent@v1	;volatile
  6546                           
  6547                           ;main.c: 737: _currenDiaryEvent.NextEventTotalMinutes = (v1 & 0x1F) * 60;
  6548  002474  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6549  002478  0E1F               	movlw	31
  6550  00247A  1623               	andwf	??_LoadNextEvent,f,c
  6551  00247C  5023               	movf	??_LoadNextEvent,w,c
  6552  00247E  0D3C               	mullw	60
  6553  002480  CFF3 F03B          	movff	prodl,__currenDiaryEvent+2
  6554  002484  CFF4 F03C          	movff	prodh,__currenDiaryEvent+3
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;main.c: 739: _nextEventPlayDuration = (v1 >> 5);
  6558  002488  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6559  00248C  0E05               	movlw	5
  6560  00248E  6E24               	movwf	(??_LoadNextEvent+1)& (0+255),c
  6561  002490                     u6055:
  6562  002490  FFFF               	dw	65535	; assembler added errata NOP
  6563  002492  90D8               	bcf	status,0,c
  6564  002494  3223               	rrcf	??_LoadNextEvent,f,c
  6565  002496  2E24               	decfsz	(??_LoadNextEvent+1)& (0+255),f,c
  6566  002498  D7FB               	goto	u6055
  6567  00249A  5023               	movf	??_LoadNextEvent,w,c
  6568  00249C  0100               	movlb	0	; () banked
  6569  00249E  6FE6               	movwf	__nextEventPlayDuration& (0+255),b
  6570  0024A0  6BE7               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6571                           
  6572                           ;main.c: 740: switch(_nextEventPlayDuration)
  6573  0024A2  D02B               	goto	l6747
  6574  0024A4                     l6733:
  6575  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;main.c: 743: _nextEventPlayDuration = 10;
  6579  0024A6  0E00               	movlw	0
  6580  0024A8  0100               	movlb	0	; () banked
  6581  0024AA  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6582  0024AC  0E0A               	movlw	10
  6583  0024AE  D01D               	goto	L9
  6584  0024B0                     l6735:
  6585  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;main.c: 746: _nextEventPlayDuration = 30;
  6589  0024B2  0E00               	movlw	0
  6590  0024B4  0100               	movlb	0	; () banked
  6591  0024B6  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6592  0024B8  0E1E               	movlw	30
  6593  0024BA  D017               	goto	L9
  6594  0024BC                     l6737:
  6595  0024BC  FFFF               	dw	65535	; assembler added errata NOP
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;main.c: 749: _nextEventPlayDuration = 60;
  6599  0024BE  0E00               	movlw	0
  6600  0024C0  0100               	movlb	0	; () banked
  6601  0024C2  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6602  0024C4  0E3C               	movlw	60
  6603  0024C6  D011               	goto	L9
  6604  0024C8                     l6739:
  6605  0024C8  FFFF               	dw	65535	; assembler added errata NOP
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;main.c: 752: _nextEventPlayDuration = 60*5;
  6609  0024CA  0E01               	movlw	1
  6610  0024CC  0100               	movlb	0	; () banked
  6611  0024CE  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6612  0024D0  0E2C               	movlw	44
  6613  0024D2  D00B               	goto	L9
  6614  0024D4                     l6741:
  6615  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;main.c: 755: _nextEventPlayDuration = 60*12;
  6619  0024D6  0E02               	movlw	2
  6620  0024D8  0100               	movlb	0	; () banked
  6621  0024DA  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6622  0024DC  0ED0               	movlw	208
  6623  0024DE  D005               	goto	L9
  6624  0024E0                     l6743:
  6625  0024E0  FFFF               	dw	65535	; assembler added errata NOP
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;main.c: 758: _nextEventPlayDuration = 60*30;
  6629  0024E2  0E07               	movlw	7
  6630  0024E4  0100               	movlb	0	; () banked
  6631  0024E6  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6632  0024E8  0E08               	movlw	8
  6633  0024EA                     L9:
  6634  0024EA  FFFF               	dw	65535	; assembler added errata NOP
  6635  0024EC  6FE6               	movwf	__nextEventPlayDuration& (0+255),b
  6636                           
  6637                           ;main.c: 759: break;
  6638  0024EE  D024               	goto	l6749
  6639  0024F0                     l438:
  6640  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;main.c: 761: _nextEventPlayDuration = 65535;
  6644  0024F2  0100               	movlb	0	; () banked
  6645  0024F4  69E6               	setf	__nextEventPlayDuration& (0+255),b
  6646  0024F6  69E7               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;main.c: 763: }
  6650                           
  6651                           ;main.c: 762: break;
  6652  0024F8  D01F               	goto	l6749
  6653  0024FA                     l6747:
  6654  0024FA  FFFF               	dw	65535	; assembler added errata NOP
  6655                           
  6656                           ; BSR set to: 0
  6657  0024FC  C0E6  F023         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6658  002500  C0E7  F024         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6659                           
  6660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6661                           ; Switch size 1, requested type "space"
  6662                           ; Number of cases is 1, Range of values is 0 to 0
  6663                           ; switch strategies available:
  6664                           ; Name         Instructions Cycles
  6665                           ; simple_byte            4     3 (average)
  6666                           ;	Chosen strategy is simple_byte
  6667  002504  5024               	movf	??_LoadNextEvent+1,w,c
  6668  002506  0A00               	xorlw	0	; case 0
  6669  002508  A4D8               	btfss	status,2,c
  6670  00250A  D016               	goto	l6749
  6671                           
  6672                           ; BSR set to: 0
  6673                           ; Switch size 1, requested type "space"
  6674                           ; Number of cases is 7, Range of values is 1 to 7
  6675                           ; switch strategies available:
  6676                           ; Name         Instructions Cycles
  6677                           ; simple_byte           22    12 (average)
  6678                           ;	Chosen strategy is simple_byte
  6679  00250C  5023               	movf	??_LoadNextEvent,w,c
  6680  00250E  0A01               	xorlw	1	; case 1
  6681  002510  B4D8               	btfsc	status,2,c
  6682  002512  D7C8               	goto	l6733
  6683  002514  0A03               	xorlw	3	; case 2
  6684  002516  B4D8               	btfsc	status,2,c
  6685  002518  D7CB               	goto	l6735
  6686  00251A  0A01               	xorlw	1	; case 3
  6687  00251C  B4D8               	btfsc	status,2,c
  6688  00251E  D7CE               	goto	l6737
  6689  002520  0A07               	xorlw	7	; case 4
  6690  002522  B4D8               	btfsc	status,2,c
  6691  002524  D7D1               	goto	l6739
  6692  002526  0A01               	xorlw	1	; case 5
  6693  002528  B4D8               	btfsc	status,2,c
  6694  00252A  D7D4               	goto	l6741
  6695  00252C  0A03               	xorlw	3	; case 6
  6696  00252E  B4D8               	btfsc	status,2,c
  6697  002530  D7D7               	goto	l6743
  6698  002532  0A01               	xorlw	1	; case 7
  6699  002534  B4D8               	btfsc	status,2,c
  6700  002536  D7DC               	goto	l438
  6701  002538                     l6749:
  6702  002538  FFFF               	dw	65535	; assembler added errata NOP
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;main.c: 764: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2 + 1, (v
      +                          oid)0, RD = 1, EEDATA);
  6706  00253A  5041               	movf	__currenDiaryEvent+8,w,c
  6707  00253C  0D02               	mullw	2
  6708  00253E  50F3               	movf	prodl,w,c
  6709  002540  0F0C               	addlw	12
  6710  002542  6EA9               	movwf	4009,c	;volatile
  6711                           
  6712                           ; BSR set to: 0
  6713  002544  80A6               	bsf	4006,0,c	;volatile
  6714                           
  6715                           ; BSR set to: 0
  6716  002546  CFA8 F027          	movff	4008,LoadNextEvent@v1	;volatile
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;main.c: 765: _currenDiaryEvent.NextEventTotalMinutes += v1 & 0x3F;
  6720  00254A  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6721  00254E  0E3F               	movlw	63
  6722  002550  1623               	andwf	??_LoadNextEvent,f,c
  6723  002552  5023               	movf	??_LoadNextEvent,w,c
  6724  002554  263B               	addwf	__currenDiaryEvent+2,f,c
  6725  002556  0E00               	movlw	0
  6726  002558  223C               	addwfc	__currenDiaryEvent+3,f,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;main.c: 766: _nextEventSoundId = v1 >> 6;
  6730  00255A  4427               	rlncf	LoadNextEvent@v1,w,c
  6731  00255C  46E8               	rlncf	wreg,f,c
  6732  00255E  0B03               	andlw	3
  6733  002560  6E4E               	movwf	__nextEventSoundId,c
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;main.c: 768: }while(_currenDiaryEvent.NextEventTotalMinutes <= totalMinutes);
  6737  002562  503B               	movf	__currenDiaryEvent+2,w,c
  6738  002564  5C25               	subwf	LoadNextEvent@totalMinutes,w,c
  6739  002566  503C               	movf	__currenDiaryEvent+3,w,c
  6740  002568  5826               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  6741  00256A  B0D8               	btfsc	status,0,c
  6742  00256C  D753               	goto	l6709
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;main.c: 769: _MODBUSInputRegs[3] = _currenDiaryEvent.NextEventTotalMinutes;
  6746  00256E  C03B  F1DA         	movff	__currenDiaryEvent+2,__MODBUSInputRegs+6
  6747  002572  C03C  F1DB         	movff	__currenDiaryEvent+3,__MODBUSInputRegs+7
  6748  002576                     l424:
  6749  002576  FFFF               	dw	65535	; assembler added errata NOP
  6750  002578  0012               	return		;funcret
  6751  00257A  FFFF               	dw	65535	; errata NOP
  6752  00257C                     __end_of_LoadNextEvent:
  6753                           	opt stack 0
  6754                           tblptru	equ	0xFF8
  6755                           tblptrh	equ	0xFF7
  6756                           tblptrl	equ	0xFF6
  6757                           tablat	equ	0xFF5
  6758                           prodh	equ	0xFF4
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           postinc0	equ	0xFEE
  6762                           wreg	equ	0xFE8
  6763                           postdec1	equ	0xFE5
  6764                           fsr1h	equ	0xFE2
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _getTotalMinutes *****************
  6774 ;; Defined at:
  6775 ;;		line 267 in file "interrupts.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  totalMinutes    2   32[COMRAM] PTR unsigned int 
  6778 ;;		 -> main@totalMinutes(2), ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      unsigned char 
  6783 ;; Registers used:
  6784 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6790 ;;      Params:         2       0       0       0       0       0       0
  6791 ;;      Locals:         0       0       0       0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0
  6793 ;;      Totals:         2       0       0       0       0       0       0
  6794 ;;Total ram usage:        2 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    2
  6797 ;; This function calls:
  6798 ;;		Nothing
  6799 ;; This function is called by:
  6800 ;;		_LoadNextEvent
  6801 ;;		_ProcessDiary
  6802 ;;		_main
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text32
  6807  00014E                     __ptext32:
  6808                           	opt stack 0
  6809  00014E                     _getTotalMinutes:
  6810                           	opt stack 24
  6811                           
  6812                           ;incstack = 0
  6813  00014E  FFFF               	dw	65535
  6814                           
  6815                           ;interrupts.c: 269: if(globalHours == 0xFF)
  6816  000150  285E               	incf	_globalHours,w,c	;volatile
  6817  000152  A4D8               	btfss	status,2,c
  6818  000154  D002               	goto	l112
  6819                           
  6820                           ;interrupts.c: 270: return 0;
  6821  000156  0E00               	movlw	0
  6822  000158  D00C               	goto	l113
  6823  00015A                     l112:
  6824  00015A  FFFF               	dw	65535	; assembler added errata NOP
  6825                           
  6826                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  6827  00015C  9EF2               	bcf	intcon,7,c	;volatile
  6828                           
  6829                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  6830  00015E  C021  FFD9         	movff	getTotalMinutes@totalMinutes,fsr2l
  6831  000162  C022  FFDA         	movff	getTotalMinutes@totalMinutes+1,fsr2h
  6832  000166  C0E8  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  6833  00016A  C0E9  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  6834                           
  6835                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  6836  00016E  8EF2               	bsf	intcon,7,c	;volatile
  6837                           
  6838                           ;interrupts.c: 274: return 1;
  6839  000170  0E01               	movlw	1
  6840  000172                     l113:
  6841  000172  FFFF               	dw	65535	; assembler added errata NOP
  6842  000174  0012               	return		;funcret
  6843  000176  FFFF               	dw	65535	; errata NOP
  6844  000178                     __end_of_getTotalMinutes:
  6845                           	opt stack 0
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           postdec1	equ	0xFE5
  6856                           fsr1h	equ	0xFE2
  6857                           fsr1l	equ	0xFE1
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           postdec2	equ	0xFDD
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _LightLed *****************
  6866 ;; Defined at:
  6867 ;;		line 328 in file "main.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  ledNum          1    wreg     unsigned char 
  6870 ;;  ledState        1   32[COMRAM] enum E2454
  6871 ;;  blink           1   33[COMRAM] unsigned char 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  ledNum          1   37[COMRAM] unsigned char 
  6874 ;;  statusShift     1   39[COMRAM] unsigned char 
  6875 ;;  ststusIndex     1   38[COMRAM] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  1    wreg      void 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6885 ;;      Params:         2       0       0       0       0       0       0
  6886 ;;      Locals:         3       0       0       0       0       0       0
  6887 ;;      Temps:          3       0       0       0       0       0       0
  6888 ;;      Totals:         8       0       0       0       0       0       0
  6889 ;;Total ram usage:        8 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_SwitchOffAllDiaryLeds
  6896 ;;		_ShowFailure
  6897 ;;		_ResetEvent
  6898 ;;		_ResetEventFromCommand
  6899 ;;		_ProcessDiary
  6900 ;;		_CommandSetLed
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text33
  6905  000AB8                     __ptext33:
  6906                           	opt stack 0
  6907  000AB8                     _LightLed:
  6908                           	opt stack 24
  6909                           
  6910                           ;incstack = 0
  6911  000AB8  FFFF               	dw	65535
  6912                           
  6913                           ;LightLed@ledNum stored from wreg
  6914  000ABA  6E26               	movwf	LightLed@ledNum,c
  6915                           
  6916                           ;main.c: 330: if(ledNum < 1 || ledNum > 60)
  6917  000ABC  5026               	movf	LightLed@ledNum,w,c
  6918  000ABE  B4D8               	btfsc	status,2,c
  6919  000AC0  D1FF               	goto	l264
  6920  000AC2  0E3C               	movlw	60
  6921  000AC4  6426               	cpfsgt	LightLed@ledNum,c
  6922  000AC6  D001               	goto	l6507
  6923  000AC8  D1FB               	goto	l264
  6924  000ACA                     l6507:
  6925  000ACA  FFFF               	dw	65535	; assembler added errata NOP
  6926                           
  6927                           ;main.c: 332: ledNum--;
  6928  000ACC  0626               	decf	LightLed@ledNum,f,c
  6929                           
  6930                           ;main.c: 334: uint8_t ststusIndex = ledNum >> 2;
  6931  000ACE  4026               	rrncf	LightLed@ledNum,w,c
  6932  000AD0  42E8               	rrncf	wreg,f,c
  6933  000AD2  0B3F               	andlw	63
  6934  000AD4  6E27               	movwf	LightLed@ststusIndex,c
  6935                           
  6936                           ;main.c: 335: uint8_t statusShift = (ledNum & 0x03) << 1;
  6937  000AD6  C026  F023         	movff	LightLed@ledNum,??_LightLed
  6938  000ADA  0E03               	movlw	3
  6939  000ADC  1623               	andwf	??_LightLed,f,c
  6940  000ADE  90D8               	bcf	status,0,c
  6941  000AE0  3423               	rlcf	??_LightLed,w,c
  6942  000AE2  6E28               	movwf	LightLed@statusShift,c
  6943                           
  6944                           ;main.c: 337: switch(ledState)
  6945  000AE4  D1DF               	goto	l6547
  6946  000AE6                     l6513:
  6947  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6948                           
  6949                           ;main.c: 340: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6950  000AE8  C028  F023         	movff	LightLed@statusShift,??_LightLed
  6951  000AEC  0E01               	movlw	1
  6952  000AEE  2623               	addwf	??_LightLed,f,c
  6953  000AF0  0E01               	movlw	1
  6954  000AF2  6E24               	movwf	(??_LightLed+1)& (0+255),c
  6955  000AF4  2A23               	incf	??_LightLed,f,c
  6956  000AF6  D003               	goto	u5524
  6957  000AF8                     u5525:
  6958  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  6959  000AFA  90D8               	bcf	status,0,c
  6960  000AFC  3624               	rlcf	??_LightLed+1,f,c
  6961  000AFE                     u5524:
  6962  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  6963  000B00  2E23               	decfsz	??_LightLed,f,c
  6964  000B02  D7FA               	goto	u5525
  6965  000B04  5024               	movf	??_LightLed+1,w,c
  6966  000B06  0AFF               	xorlw	255
  6967  000B08  6E25               	movwf	(??_LightLed+2)& (0+255),c
  6968  000B0A  5027               	movf	LightLed@ststusIndex,w,c
  6969  000B0C  0D01               	mullw	1
  6970  000B0E  0EC2               	movlw	low _ledStatuses
  6971  000B10  24F3               	addwf	prodl,w,c
  6972  000B12  6ED9               	movwf	fsr2l,c
  6973  000B14  0E00               	movlw	high _ledStatuses
  6974  000B16  20F4               	addwfc	prodh,w,c
  6975  000B18  6EDA               	movwf	fsr2h,c
  6976  000B1A  5025               	movf	??_LightLed+2,w,c
  6977  000B1C  16DF               	andwf	indf2,f,c
  6978                           
  6979                           ;main.c: 341: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6980  000B1E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  6981  000B22  0E01               	movlw	1
  6982  000B24  6E24               	movwf	(??_LightLed+1)& (0+255),c
  6983  000B26  2A23               	incf	??_LightLed,f,c
  6984  000B28  D003               	goto	u5534
  6985  000B2A                     u5535:
  6986  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  6987  000B2C  90D8               	bcf	status,0,c
  6988  000B2E  3624               	rlcf	??_LightLed+1,f,c
  6989  000B30                     u5534:
  6990  000B30  FFFF               	dw	65535	; assembler added errata NOP
  6991  000B32  2E23               	decfsz	??_LightLed,f,c
  6992  000B34  D7FA               	goto	u5535
  6993  000B36  5024               	movf	??_LightLed+1,w,c
  6994  000B38  0AFF               	xorlw	255
  6995  000B3A  6E25               	movwf	(??_LightLed+2)& (0+255),c
  6996  000B3C  5027               	movf	LightLed@ststusIndex,w,c
  6997  000B3E  0D01               	mullw	1
  6998  000B40  0EC2               	movlw	low _ledStatuses
  6999  000B42  24F3               	addwf	prodl,w,c
  7000  000B44  6ED9               	movwf	fsr2l,c
  7001  000B46  0E00               	movlw	high _ledStatuses
  7002  000B48  20F4               	addwfc	prodh,w,c
  7003  000B4A  6EDA               	movwf	fsr2h,c
  7004  000B4C  5025               	movf	??_LightLed+2,w,c
  7005  000B4E  16DF               	andwf	indf2,f,c
  7006                           
  7007                           ;main.c: 342: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7008  000B50  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7009  000B54  0E01               	movlw	1
  7010  000B56  2623               	addwf	??_LightLed,f,c
  7011  000B58  0E01               	movlw	1
  7012  000B5A  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7013  000B5C  2A23               	incf	??_LightLed,f,c
  7014  000B5E  D003               	goto	u5544
  7015  000B60                     u5545:
  7016  000B60  FFFF               	dw	65535	; assembler added errata NOP
  7017  000B62  90D8               	bcf	status,0,c
  7018  000B64  3624               	rlcf	??_LightLed+1,f,c
  7019  000B66                     u5544:
  7020  000B66  FFFF               	dw	65535	; assembler added errata NOP
  7021  000B68  2E23               	decfsz	??_LightLed,f,c
  7022  000B6A  D7FA               	goto	u5545
  7023  000B6C  5024               	movf	??_LightLed+1,w,c
  7024  000B6E  0AFF               	xorlw	255
  7025  000B70  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7026  000B72  5027               	movf	LightLed@ststusIndex,w,c
  7027  000B74  0D01               	mullw	1
  7028  000B76  0E00               	movlw	low _ledBlink
  7029  000B78  24F3               	addwf	prodl,w,c
  7030  000B7A  6ED9               	movwf	fsr2l,c
  7031  000B7C  0E01               	movlw	high _ledBlink
  7032  000B7E  20F4               	addwfc	prodh,w,c
  7033  000B80  6EDA               	movwf	fsr2h,c
  7034  000B82  5025               	movf	??_LightLed+2,w,c
  7035  000B84  16DF               	andwf	indf2,f,c
  7036                           
  7037                           ;main.c: 343: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7038  000B86  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7039  000B8A  0E01               	movlw	1
  7040  000B8C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7041  000B8E  2A23               	incf	??_LightLed,f,c
  7042  000B90  D003               	goto	u5554
  7043  000B92                     u5555:
  7044  000B92  FFFF               	dw	65535	; assembler added errata NOP
  7045  000B94  90D8               	bcf	status,0,c
  7046  000B96  3624               	rlcf	??_LightLed+1,f,c
  7047  000B98                     u5554:
  7048  000B98  FFFF               	dw	65535	; assembler added errata NOP
  7049  000B9A  2E23               	decfsz	??_LightLed,f,c
  7050  000B9C  D7FA               	goto	u5555
  7051  000B9E  D173               	goto	L13
  7052  000BA0                     l6515:
  7053  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7054                           
  7055                           ;main.c: 346: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7056  000BA2  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7057  000BA6  0E01               	movlw	1
  7058  000BA8  2623               	addwf	??_LightLed,f,c
  7059  000BAA  0E01               	movlw	1
  7060  000BAC  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7061  000BAE  2A23               	incf	??_LightLed,f,c
  7062  000BB0  D003               	goto	u5564
  7063  000BB2                     u5565:
  7064  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  7065  000BB4  90D8               	bcf	status,0,c
  7066  000BB6  3624               	rlcf	??_LightLed+1,f,c
  7067  000BB8                     u5564:
  7068  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  7069  000BBA  2E23               	decfsz	??_LightLed,f,c
  7070  000BBC  D7FA               	goto	u5565
  7071  000BBE  5027               	movf	LightLed@ststusIndex,w,c
  7072  000BC0  0D01               	mullw	1
  7073  000BC2  0EC2               	movlw	low _ledStatuses
  7074  000BC4  24F3               	addwf	prodl,w,c
  7075  000BC6  6ED9               	movwf	fsr2l,c
  7076  000BC8  0E00               	movlw	high _ledStatuses
  7077  000BCA  20F4               	addwfc	prodh,w,c
  7078  000BCC  6EDA               	movwf	fsr2h,c
  7079  000BCE  5024               	movf	??_LightLed+1,w,c
  7080  000BD0  12DF               	iorwf	indf2,f,c
  7081                           
  7082                           ;main.c: 347: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7083  000BD2  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7084  000BD6  0E01               	movlw	1
  7085  000BD8  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7086  000BDA  2A23               	incf	??_LightLed,f,c
  7087  000BDC  D003               	goto	u5574
  7088  000BDE                     u5575:
  7089  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  7090  000BE0  90D8               	bcf	status,0,c
  7091  000BE2  3624               	rlcf	??_LightLed+1,f,c
  7092  000BE4                     u5574:
  7093  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  7094  000BE6  2E23               	decfsz	??_LightLed,f,c
  7095  000BE8  D7FA               	goto	u5575
  7096  000BEA  5024               	movf	??_LightLed+1,w,c
  7097  000BEC  0AFF               	xorlw	255
  7098  000BEE  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7099  000BF0  5027               	movf	LightLed@ststusIndex,w,c
  7100  000BF2  0D01               	mullw	1
  7101  000BF4  0EC2               	movlw	low _ledStatuses
  7102  000BF6  24F3               	addwf	prodl,w,c
  7103  000BF8  6ED9               	movwf	fsr2l,c
  7104  000BFA  0E00               	movlw	high _ledStatuses
  7105  000BFC  20F4               	addwfc	prodh,w,c
  7106  000BFE  6EDA               	movwf	fsr2h,c
  7107  000C00  5025               	movf	??_LightLed+2,w,c
  7108  000C02  16DF               	andwf	indf2,f,c
  7109                           
  7110                           ;main.c: 348: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7111  000C04  5022               	movf	LightLed@blink,w,c
  7112  000C06  B4D8               	btfsc	status,2,c
  7113  000C08  D019               	goto	l6521
  7114  000C0A  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7115  000C0E  0E01               	movlw	1
  7116  000C10  2623               	addwf	??_LightLed,f,c
  7117  000C12  0E01               	movlw	1
  7118  000C14  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7119  000C16  2A23               	incf	??_LightLed,f,c
  7120  000C18  D003               	goto	u5594
  7121  000C1A                     u5595:
  7122  000C1A  FFFF               	dw	65535	; assembler added errata NOP
  7123  000C1C  90D8               	bcf	status,0,c
  7124  000C1E  3624               	rlcf	??_LightLed+1,f,c
  7125  000C20                     u5594:
  7126  000C20  FFFF               	dw	65535	; assembler added errata NOP
  7127  000C22  2E23               	decfsz	??_LightLed,f,c
  7128  000C24  D7FA               	goto	u5595
  7129  000C26  5027               	movf	LightLed@ststusIndex,w,c
  7130  000C28  0D01               	mullw	1
  7131  000C2A  0E00               	movlw	low _ledBlink
  7132  000C2C  24F3               	addwf	prodl,w,c
  7133  000C2E  6ED9               	movwf	fsr2l,c
  7134  000C30  0E01               	movlw	high _ledBlink
  7135  000C32  20F4               	addwfc	prodh,w,c
  7136  000C34  6EDA               	movwf	fsr2h,c
  7137  000C36  5024               	movf	??_LightLed+1,w,c
  7138  000C38  12DF               	iorwf	indf2,f,c
  7139  000C3A  D01C               	goto	l272
  7140  000C3C                     l6521:
  7141  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  7142  000C3E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7143  000C42  0E01               	movlw	1
  7144  000C44  2623               	addwf	??_LightLed,f,c
  7145  000C46  0E01               	movlw	1
  7146  000C48  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7147  000C4A  2A23               	incf	??_LightLed,f,c
  7148  000C4C  D003               	goto	u5604
  7149  000C4E                     u5605:
  7150  000C4E  FFFF               	dw	65535	; assembler added errata NOP
  7151  000C50  90D8               	bcf	status,0,c
  7152  000C52  3624               	rlcf	??_LightLed+1,f,c
  7153  000C54                     u5604:
  7154  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7155  000C56  2E23               	decfsz	??_LightLed,f,c
  7156  000C58  D7FA               	goto	u5605
  7157  000C5A  5024               	movf	??_LightLed+1,w,c
  7158  000C5C  0AFF               	xorlw	255
  7159  000C5E  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7160  000C60  5027               	movf	LightLed@ststusIndex,w,c
  7161  000C62  0D01               	mullw	1
  7162  000C64  0E00               	movlw	low _ledBlink
  7163  000C66  24F3               	addwf	prodl,w,c
  7164  000C68  6ED9               	movwf	fsr2l,c
  7165  000C6A  0E01               	movlw	high _ledBlink
  7166  000C6C  20F4               	addwfc	prodh,w,c
  7167  000C6E  6EDA               	movwf	fsr2h,c
  7168  000C70  5025               	movf	??_LightLed+2,w,c
  7169  000C72  16DF               	andwf	indf2,f,c
  7170  000C74                     l272:
  7171  000C74  FFFF               	dw	65535	; assembler added errata NOP
  7172                           
  7173                           ;main.c: 349: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7174  000C76  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7175  000C7A  0E01               	movlw	1
  7176  000C7C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7177  000C7E  2A23               	incf	??_LightLed,f,c
  7178  000C80  D003               	goto	u5614
  7179  000C82                     u5615:
  7180  000C82  FFFF               	dw	65535	; assembler added errata NOP
  7181  000C84  90D8               	bcf	status,0,c
  7182  000C86  3624               	rlcf	??_LightLed+1,f,c
  7183  000C88                     u5614:
  7184  000C88  FFFF               	dw	65535	; assembler added errata NOP
  7185  000C8A  2E23               	decfsz	??_LightLed,f,c
  7186  000C8C  D7FA               	goto	u5615
  7187  000C8E  D0FB               	goto	L13
  7188  000C90                     l6523:
  7189  000C90  FFFF               	dw	65535	; assembler added errata NOP
  7190                           
  7191                           ;main.c: 352: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7192  000C92  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7193  000C96  0E01               	movlw	1
  7194  000C98  2623               	addwf	??_LightLed,f,c
  7195  000C9A  0E01               	movlw	1
  7196  000C9C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7197  000C9E  2A23               	incf	??_LightLed,f,c
  7198  000CA0  D003               	goto	u5624
  7199  000CA2                     u5625:
  7200  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  7201  000CA4  90D8               	bcf	status,0,c
  7202  000CA6  3624               	rlcf	??_LightLed+1,f,c
  7203  000CA8                     u5624:
  7204  000CA8  FFFF               	dw	65535	; assembler added errata NOP
  7205  000CAA  2E23               	decfsz	??_LightLed,f,c
  7206  000CAC  D7FA               	goto	u5625
  7207  000CAE  5024               	movf	??_LightLed+1,w,c
  7208  000CB0  0AFF               	xorlw	255
  7209  000CB2  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7210  000CB4  5027               	movf	LightLed@ststusIndex,w,c
  7211  000CB6  0D01               	mullw	1
  7212  000CB8  0EC2               	movlw	low _ledStatuses
  7213  000CBA  24F3               	addwf	prodl,w,c
  7214  000CBC  6ED9               	movwf	fsr2l,c
  7215  000CBE  0E00               	movlw	high _ledStatuses
  7216  000CC0  20F4               	addwfc	prodh,w,c
  7217  000CC2  6EDA               	movwf	fsr2h,c
  7218  000CC4  5025               	movf	??_LightLed+2,w,c
  7219  000CC6  16DF               	andwf	indf2,f,c
  7220                           
  7221                           ;main.c: 353: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7222  000CC8  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7223  000CCC  0E01               	movlw	1
  7224  000CCE  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7225  000CD0  2A23               	incf	??_LightLed,f,c
  7226  000CD2  D003               	goto	u5634
  7227  000CD4                     u5635:
  7228  000CD4  FFFF               	dw	65535	; assembler added errata NOP
  7229  000CD6  90D8               	bcf	status,0,c
  7230  000CD8  3624               	rlcf	??_LightLed+1,f,c
  7231  000CDA                     u5634:
  7232  000CDA  FFFF               	dw	65535	; assembler added errata NOP
  7233  000CDC  2E23               	decfsz	??_LightLed,f,c
  7234  000CDE  D7FA               	goto	u5635
  7235  000CE0  5027               	movf	LightLed@ststusIndex,w,c
  7236  000CE2  0D01               	mullw	1
  7237  000CE4  0EC2               	movlw	low _ledStatuses
  7238  000CE6  24F3               	addwf	prodl,w,c
  7239  000CE8  6ED9               	movwf	fsr2l,c
  7240  000CEA  0E00               	movlw	high _ledStatuses
  7241  000CEC  20F4               	addwfc	prodh,w,c
  7242  000CEE  6EDA               	movwf	fsr2h,c
  7243  000CF0  5024               	movf	??_LightLed+1,w,c
  7244  000CF2  12DF               	iorwf	indf2,f,c
  7245                           
  7246                           ;main.c: 354: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7247  000CF4  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7248  000CF8  0E01               	movlw	1
  7249  000CFA  2623               	addwf	??_LightLed,f,c
  7250  000CFC  0E01               	movlw	1
  7251  000CFE  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7252  000D00  2A23               	incf	??_LightLed,f,c
  7253  000D02  D003               	goto	u5644
  7254  000D04                     u5645:
  7255  000D04  FFFF               	dw	65535	; assembler added errata NOP
  7256  000D06  90D8               	bcf	status,0,c
  7257  000D08  3624               	rlcf	??_LightLed+1,f,c
  7258  000D0A                     u5644:
  7259  000D0A  FFFF               	dw	65535	; assembler added errata NOP
  7260  000D0C  2E23               	decfsz	??_LightLed,f,c
  7261  000D0E  D7FA               	goto	u5645
  7262  000D10  5024               	movf	??_LightLed+1,w,c
  7263  000D12  0AFF               	xorlw	255
  7264  000D14  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7265  000D16  5027               	movf	LightLed@ststusIndex,w,c
  7266  000D18  0D01               	mullw	1
  7267  000D1A  0E00               	movlw	low _ledBlink
  7268  000D1C  24F3               	addwf	prodl,w,c
  7269  000D1E  6ED9               	movwf	fsr2l,c
  7270  000D20  0E01               	movlw	high _ledBlink
  7271  000D22  20F4               	addwfc	prodh,w,c
  7272  000D24  6EDA               	movwf	fsr2h,c
  7273  000D26  5025               	movf	??_LightLed+2,w,c
  7274  000D28  16DF               	andwf	indf2,f,c
  7275                           
  7276                           ;main.c: 355: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7277  000D2A  5022               	movf	LightLed@blink,w,c
  7278  000D2C  B4D8               	btfsc	status,2,c
  7279  000D2E  D00D               	goto	l6529
  7280  000D30  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7281  000D34  0E01               	movlw	1
  7282  000D36  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7283  000D38  2A23               	incf	??_LightLed,f,c
  7284  000D3A  D003               	goto	u5664
  7285  000D3C                     u5665:
  7286  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  7287  000D3E  90D8               	bcf	status,0,c
  7288  000D40  3624               	rlcf	??_LightLed+1,f,c
  7289  000D42                     u5664:
  7290  000D42  FFFF               	dw	65535	; assembler added errata NOP
  7291  000D44  2E23               	decfsz	??_LightLed,f,c
  7292  000D46  D7FA               	goto	u5665
  7293  000D48  D085               	goto	L12
  7294  000D4A                     l6529:
  7295  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  7296  000D4C  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7297  000D50  0E01               	movlw	1
  7298  000D52  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7299  000D54  2A23               	incf	??_LightLed,f,c
  7300  000D56  D003               	goto	u5674
  7301  000D58                     u5675:
  7302  000D58  FFFF               	dw	65535	; assembler added errata NOP
  7303  000D5A  90D8               	bcf	status,0,c
  7304  000D5C  3624               	rlcf	??_LightLed+1,f,c
  7305  000D5E                     u5674:
  7306  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  7307  000D60  2E23               	decfsz	??_LightLed,f,c
  7308  000D62  D7FA               	goto	u5675
  7309  000D64  D090               	goto	L13
  7310  000D66                     l6531:
  7311  000D66  FFFF               	dw	65535	; assembler added errata NOP
  7312                           
  7313                           ;main.c: 358: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7314  000D68  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7315  000D6C  0E01               	movlw	1
  7316  000D6E  2623               	addwf	??_LightLed,f,c
  7317  000D70  0E01               	movlw	1
  7318  000D72  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7319  000D74  2A23               	incf	??_LightLed,f,c
  7320  000D76  D003               	goto	u5684
  7321  000D78                     u5685:
  7322  000D78  FFFF               	dw	65535	; assembler added errata NOP
  7323  000D7A  90D8               	bcf	status,0,c
  7324  000D7C  3624               	rlcf	??_LightLed+1,f,c
  7325  000D7E                     u5684:
  7326  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  7327  000D80  2E23               	decfsz	??_LightLed,f,c
  7328  000D82  D7FA               	goto	u5685
  7329  000D84  5027               	movf	LightLed@ststusIndex,w,c
  7330  000D86  0D01               	mullw	1
  7331  000D88  0EC2               	movlw	low _ledStatuses
  7332  000D8A  24F3               	addwf	prodl,w,c
  7333  000D8C  6ED9               	movwf	fsr2l,c
  7334  000D8E  0E00               	movlw	high _ledStatuses
  7335  000D90  20F4               	addwfc	prodh,w,c
  7336  000D92  6EDA               	movwf	fsr2h,c
  7337  000D94  5024               	movf	??_LightLed+1,w,c
  7338  000D96  12DF               	iorwf	indf2,f,c
  7339                           
  7340                           ;main.c: 359: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7341  000D98  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7342  000D9C  0E01               	movlw	1
  7343  000D9E  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7344  000DA0  2A23               	incf	??_LightLed,f,c
  7345  000DA2  D003               	goto	u5694
  7346  000DA4                     u5695:
  7347  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  7348  000DA6  90D8               	bcf	status,0,c
  7349  000DA8  3624               	rlcf	??_LightLed+1,f,c
  7350  000DAA                     u5694:
  7351  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  7352  000DAC  2E23               	decfsz	??_LightLed,f,c
  7353  000DAE  D7FA               	goto	u5695
  7354  000DB0  5027               	movf	LightLed@ststusIndex,w,c
  7355  000DB2  0D01               	mullw	1
  7356  000DB4  0EC2               	movlw	low _ledStatuses
  7357  000DB6  24F3               	addwf	prodl,w,c
  7358  000DB8  6ED9               	movwf	fsr2l,c
  7359  000DBA  0E00               	movlw	high _ledStatuses
  7360  000DBC  20F4               	addwfc	prodh,w,c
  7361  000DBE  6EDA               	movwf	fsr2h,c
  7362  000DC0  5024               	movf	??_LightLed+1,w,c
  7363  000DC2  12DF               	iorwf	indf2,f,c
  7364                           
  7365                           ;main.c: 360: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7366  000DC4  5022               	movf	LightLed@blink,w,c
  7367  000DC6  B4D8               	btfsc	status,2,c
  7368  000DC8  D019               	goto	l6537
  7369  000DCA  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7370  000DCE  0E01               	movlw	1
  7371  000DD0  2623               	addwf	??_LightLed,f,c
  7372  000DD2  0E01               	movlw	1
  7373  000DD4  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7374  000DD6  2A23               	incf	??_LightLed,f,c
  7375  000DD8  D003               	goto	u5714
  7376  000DDA                     u5715:
  7377  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  7378  000DDC  90D8               	bcf	status,0,c
  7379  000DDE  3624               	rlcf	??_LightLed+1,f,c
  7380  000DE0                     u5714:
  7381  000DE0  FFFF               	dw	65535	; assembler added errata NOP
  7382  000DE2  2E23               	decfsz	??_LightLed,f,c
  7383  000DE4  D7FA               	goto	u5715
  7384  000DE6  5027               	movf	LightLed@ststusIndex,w,c
  7385  000DE8  0D01               	mullw	1
  7386  000DEA  0E00               	movlw	low _ledBlink
  7387  000DEC  24F3               	addwf	prodl,w,c
  7388  000DEE  6ED9               	movwf	fsr2l,c
  7389  000DF0  0E01               	movlw	high _ledBlink
  7390  000DF2  20F4               	addwfc	prodh,w,c
  7391  000DF4  6EDA               	movwf	fsr2h,c
  7392  000DF6  5024               	movf	??_LightLed+1,w,c
  7393  000DF8  12DF               	iorwf	indf2,f,c
  7394  000DFA  D01C               	goto	l6539
  7395  000DFC                     l6537:
  7396  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  7397  000DFE  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7398  000E02  0E01               	movlw	1
  7399  000E04  2623               	addwf	??_LightLed,f,c
  7400  000E06  0E01               	movlw	1
  7401  000E08  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7402  000E0A  2A23               	incf	??_LightLed,f,c
  7403  000E0C  D003               	goto	u5724
  7404  000E0E                     u5725:
  7405  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  7406  000E10  90D8               	bcf	status,0,c
  7407  000E12  3624               	rlcf	??_LightLed+1,f,c
  7408  000E14                     u5724:
  7409  000E14  FFFF               	dw	65535	; assembler added errata NOP
  7410  000E16  2E23               	decfsz	??_LightLed,f,c
  7411  000E18  D7FA               	goto	u5725
  7412  000E1A  5024               	movf	??_LightLed+1,w,c
  7413  000E1C  0AFF               	xorlw	255
  7414  000E1E  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7415  000E20  5027               	movf	LightLed@ststusIndex,w,c
  7416  000E22  0D01               	mullw	1
  7417  000E24  0E00               	movlw	low _ledBlink
  7418  000E26  24F3               	addwf	prodl,w,c
  7419  000E28  6ED9               	movwf	fsr2l,c
  7420  000E2A  0E01               	movlw	high _ledBlink
  7421  000E2C  20F4               	addwfc	prodh,w,c
  7422  000E2E  6EDA               	movwf	fsr2h,c
  7423  000E30  5025               	movf	??_LightLed+2,w,c
  7424  000E32  16DF               	andwf	indf2,f,c
  7425  000E34                     l6539:
  7426  000E34  FFFF               	dw	65535	; assembler added errata NOP
  7427                           
  7428                           ;main.c: 361: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7429  000E36  5022               	movf	LightLed@blink,w,c
  7430  000E38  B4D8               	btfsc	status,2,c
  7431  000E3A  D018               	goto	l6543
  7432  000E3C  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7433  000E40  0E01               	movlw	1
  7434  000E42  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7435  000E44  2A23               	incf	??_LightLed,f,c
  7436  000E46  D003               	goto	u5744
  7437  000E48                     u5745:
  7438  000E48  FFFF               	dw	65535	; assembler added errata NOP
  7439  000E4A  90D8               	bcf	status,0,c
  7440  000E4C  3624               	rlcf	??_LightLed+1,f,c
  7441  000E4E                     u5744:
  7442  000E4E  FFFF               	dw	65535	; assembler added errata NOP
  7443  000E50  2E23               	decfsz	??_LightLed,f,c
  7444  000E52  D7FA               	goto	u5745
  7445  000E54                     L12:
  7446  000E54  FFFF               	dw	65535	; assembler added errata NOP
  7447  000E56  5027               	movf	LightLed@ststusIndex,w,c
  7448  000E58  0D01               	mullw	1
  7449  000E5A  0E00               	movlw	low _ledBlink
  7450  000E5C  24F3               	addwf	prodl,w,c
  7451  000E5E  6ED9               	movwf	fsr2l,c
  7452  000E60  0E01               	movlw	high _ledBlink
  7453  000E62  20F4               	addwfc	prodh,w,c
  7454  000E64  6EDA               	movwf	fsr2h,c
  7455  000E66  5024               	movf	??_LightLed+1,w,c
  7456  000E68  12DF               	iorwf	indf2,f,c
  7457  000E6A  D02A               	goto	l264
  7458  000E6C                     l6543:
  7459  000E6C  FFFF               	dw	65535	; assembler added errata NOP
  7460  000E6E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7461  000E72  0E01               	movlw	1
  7462  000E74  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7463  000E76  2A23               	incf	??_LightLed,f,c
  7464  000E78  D003               	goto	u5754
  7465  000E7A                     u5755:
  7466  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  7467  000E7C  90D8               	bcf	status,0,c
  7468  000E7E  3624               	rlcf	??_LightLed+1,f,c
  7469  000E80                     u5754:
  7470  000E80  FFFF               	dw	65535	; assembler added errata NOP
  7471  000E82  2E23               	decfsz	??_LightLed,f,c
  7472  000E84  D7FA               	goto	u5755
  7473  000E86                     L13:
  7474  000E86  FFFF               	dw	65535	; assembler added errata NOP
  7475  000E88  5024               	movf	??_LightLed+1,w,c
  7476  000E8A  0AFF               	xorlw	255
  7477  000E8C  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7478  000E8E  5027               	movf	LightLed@ststusIndex,w,c
  7479  000E90  0D01               	mullw	1
  7480  000E92  0E00               	movlw	low _ledBlink
  7481  000E94  24F3               	addwf	prodl,w,c
  7482  000E96  6ED9               	movwf	fsr2l,c
  7483  000E98  0E01               	movlw	high _ledBlink
  7484  000E9A  20F4               	addwfc	prodh,w,c
  7485  000E9C  6EDA               	movwf	fsr2h,c
  7486  000E9E  5025               	movf	??_LightLed+2,w,c
  7487  000EA0  16DF               	andwf	indf2,f,c
  7488                           
  7489                           ;main.c: 363: }
  7490                           
  7491                           ;main.c: 362: break;
  7492  000EA2  D00E               	goto	l264
  7493  000EA4                     l6547:
  7494  000EA4  FFFF               	dw	65535	; assembler added errata NOP
  7495  000EA6  5021               	movf	LightLed@ledState,w,c
  7496                           
  7497                           ; Switch size 1, requested type "space"
  7498                           ; Number of cases is 4, Range of values is 0 to 3
  7499                           ; switch strategies available:
  7500                           ; Name         Instructions Cycles
  7501                           ; simple_byte           13     7 (average)
  7502                           ;	Chosen strategy is simple_byte
  7503  000EA8  0A00               	xorlw	0	; case 0
  7504  000EAA  B4D8               	btfsc	status,2,c
  7505  000EAC  D61C               	goto	l6513
  7506  000EAE  0A01               	xorlw	1	; case 1
  7507  000EB0  B4D8               	btfsc	status,2,c
  7508  000EB2  D676               	goto	l6515
  7509  000EB4  0A03               	xorlw	3	; case 2
  7510  000EB6  B4D8               	btfsc	status,2,c
  7511  000EB8  D6EB               	goto	l6523
  7512  000EBA  0A01               	xorlw	1	; case 3
  7513  000EBC  B4D8               	btfsc	status,2,c
  7514  000EBE  D753               	goto	l6531
  7515  000EC0                     l264:
  7516  000EC0  FFFF               	dw	65535	; assembler added errata NOP
  7517  000EC2  0012               	return		;funcret
  7518  000EC4  FFFF               	dw	65535	; errata NOP
  7519  000EC6                     __end_of_LightLed:
  7520                           	opt stack 0
  7521                           tblptru	equ	0xFF8
  7522                           tblptrh	equ	0xFF7
  7523                           tblptrl	equ	0xFF6
  7524                           tablat	equ	0xFF5
  7525                           prodh	equ	0xFF4
  7526                           prodl	equ	0xFF3
  7527                           intcon	equ	0xFF2
  7528                           postinc0	equ	0xFEE
  7529                           wreg	equ	0xFE8
  7530                           postdec1	equ	0xFE5
  7531                           fsr1h	equ	0xFE2
  7532                           fsr1l	equ	0xFE1
  7533                           indf2	equ	0xFDF
  7534                           postinc2	equ	0xFDE
  7535                           postdec2	equ	0xFDD
  7536                           fsr2h	equ	0xFDA
  7537                           fsr2l	equ	0xFD9
  7538                           status	equ	0xFD8
  7539                           
  7540 ;; *************** function _GetCurrentEventDiodeNum *****************
  7541 ;; Defined at:
  7542 ;;		line 506 in file "main.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;		None
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;		None
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      unsigned char 
  7549 ;; Registers used:
  7550 ;;		wreg, status,2, status,0
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7556 ;;      Params:         0       0       0       0       0       0       0
  7557 ;;      Locals:         0       0       0       0       0       0       0
  7558 ;;      Temps:          0       0       0       0       0       0       0
  7559 ;;      Totals:         0       0       0       0       0       0       0
  7560 ;;Total ram usage:        0 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    2
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_ResetEvent
  7567 ;;		_ProcessDiary
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text34
  7572  000332                     __ptext34:
  7573                           	opt stack 0
  7574  000332                     _GetCurrentEventDiodeNum:
  7575                           	opt stack 27
  7576                           
  7577                           ;incstack = 0
  7578  000332  FFFF               	dw	65535
  7579                           
  7580                           ;main.c: 508: return 60 - _maxDiaryEvents + _currenDiaryEvent.FiredEventNum + 1;
  7581  000334  504D               	movf	__maxDiaryEvents,w,c
  7582  000336  0800               	sublw	0
  7583  000338  243A               	addwf	__currenDiaryEvent+1,w,c
  7584  00033A  0F3D               	addlw	61
  7585  00033C  0012               	return		;funcret
  7586  00033E  FFFF               	dw	65535	; errata NOP
  7587  000340                     __end_of_GetCurrentEventDiodeNum:
  7588                           	opt stack 0
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           postinc0	equ	0xFEE
  7597                           wreg	equ	0xFE8
  7598                           postdec1	equ	0xFE5
  7599                           fsr1h	equ	0xFE2
  7600                           fsr1l	equ	0xFE1
  7601                           indf2	equ	0xFDF
  7602                           postinc2	equ	0xFDE
  7603                           postdec2	equ	0xFDD
  7604                           fsr2h	equ	0xFDA
  7605                           fsr2l	equ	0xFD9
  7606                           status	equ	0xFD8
  7607                           
  7608 ;; *************** function _ModbusPoll *****************
  7609 ;; Defined at:
  7610 ;;		line 469 in file "ModbusRtu.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;  discreteInpu    2   53[BANK0 ] unsigned short 
  7613 ;;  coils           2   55[BANK0 ] PTR unsigned short 
  7614 ;;		 -> _MODBUSCoils(2), 
  7615 ;;  inputRegs       2   57[BANK0 ] PTR unsigned short 
  7616 ;;		 -> _MODBUSInputRegs(30), 
  7617 ;;  inputRegsCou    1   59[BANK0 ] const unsigned char 
  7618 ;;  holdingRegs     2   60[BANK0 ] PTR unsigned short 
  7619 ;;		 -> _MODBUSHoldingRegs(30), 
  7620 ;;  holdingRegsC    1   62[BANK0 ] const unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  i8state         1   65[BANK0 ] unsigned char 
  7623 ;;  u8exception     1   64[BANK0 ] unsigned char 
  7624 ;;  u8current       1   63[BANK0 ] unsigned char 
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      char 
  7627 ;; Registers used:
  7628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7634 ;;      Params:         0      10       0       0       0       0       0
  7635 ;;      Locals:         0       3       0       0       0       0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0
  7637 ;;      Totals:         0      13       0       0       0       0       0
  7638 ;;Total ram usage:       13 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    7
  7641 ;; This function calls:
  7642 ;;		_ModbusBuildException
  7643 ;;		_ModbusGetRxBuffer
  7644 ;;		_ModbusGetRxBufferHeader
  7645 ;;		_ModbusProcess_FC1
  7646 ;;		_ModbusProcess_FC100
  7647 ;;		_ModbusProcess_FC101
  7648 ;;		_ModbusProcess_FC102
  7649 ;;		_ModbusProcess_FC15
  7650 ;;		_ModbusProcess_FC16
  7651 ;;		_ModbusProcess_FC17
  7652 ;;		_ModbusProcess_FC20
  7653 ;;		_ModbusProcess_FC21
  7654 ;;		_ModbusProcess_FC3
  7655 ;;		_ModbusProcess_FC43
  7656 ;;		_ModbusProcess_FC5
  7657 ;;		_ModbusProcess_FC6
  7658 ;;		_ModbusProcess_FC7
  7659 ;;		_ModbusSendTxBuffer
  7660 ;;		_ModbusSetExceptionStatusBit
  7661 ;;		_ModbusValidateRequest
  7662 ;;		_PortAvailable
  7663 ;;		_PortClearReadBuffer
  7664 ;;		_millis
  7665 ;; This function is called by:
  7666 ;;		_main
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text35
  7671  001816                     __ptext35:
  7672                           	opt stack 0
  7673  001816                     _ModbusPoll:
  7674                           	opt stack 23
  7675                           
  7676                           ;incstack = 0
  7677  001816  FFFF               	dw	65535
  7678                           
  7679                           ;ModbusRtu.c: 472: _lastFunction = MB_FC_NONE;
  7680  001818  0E00               	movlw	0
  7681  00181A  6E5D               	movwf	__lastFunction,c
  7682                           
  7683                           ;ModbusRtu.c: 476: _inputRegsCount = inputRegsCount;
  7684  00181C  C0BB  F04B         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7685                           
  7686                           ;ModbusRtu.c: 477: _holdingRegsCount = holdingRegsCount;
  7687  001820  C0BE  F04A         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7688                           
  7689                           ;ModbusRtu.c: 482: uint8_t u8current = PortAvailable();
  7690  001824  ECA7  F001         	call	_PortAvailable	;wreg free
  7691  001828  0100               	movlb	0	; () banked
  7692  00182A  6FBF               	movwf	ModbusPoll@u8current& (0+255),b
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;ModbusRtu.c: 484: if (u8current == 0) return 0;
  7696  00182C  0100               	movlb	0	; () banked
  7697  00182E  51BF               	movf	ModbusPoll@u8current& (0+255),w,b
  7698  001830  0100               	movlb	0	; () banked
  7699  001832  B4D8               	btfsc	status,2,c
  7700  001834  D045               	goto	l8447
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;ModbusRtu.c: 487: if (u8current != _u8lastRec)
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708                           
  7709                           ; BSR set to: 0
  7710  001836  0100               	movlb	0	; () banked
  7711  001838  51F2               	movf	__u8lastRec& (0+255),w,b
  7712  00183A  0100               	movlb	0	; () banked
  7713  00183C  19BF               	xorwf	ModbusPoll@u8current& (0+255),w,b
  7714  00183E  B4D8               	btfsc	status,2,c
  7715  001840  D015               	goto	l8423
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;ModbusRtu.c: 488: {
  7719                           ;ModbusRtu.c: 489: _u8lastRec = u8current;
  7720  001842  C0BF  F0F2         	movff	ModbusPoll@u8current,__u8lastRec
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;ModbusRtu.c: 490: _u32time = millis() + 5;
  7724  001846  0E05               	movlw	5
  7725  001848  ECD1  F000         	call	_millis	;wreg free
  7726  00184C  2421               	addwf	?_millis,w,c
  7727  00184E  0101               	movlb	1	; () banked
  7728  001850  6F14               	movwf	__u32time& (0+255),b
  7729  001852  0E00               	movlw	0
  7730  001854  2022               	addwfc	?_millis+1,w,c
  7731  001856  0101               	movlb	1	; () banked
  7732  001858  6F15               	movwf	(__u32time+1)& (0+255),b
  7733  00185A  0E00               	movlw	0
  7734  00185C  2023               	addwfc	?_millis+2,w,c
  7735  00185E  0101               	movlb	1	; () banked
  7736  001860  6F16               	movwf	(__u32time+2)& (0+255),b
  7737  001862  0E00               	movlw	0
  7738  001864  2024               	addwfc	?_millis+3,w,c
  7739  001866  0101               	movlb	1	; () banked
  7740  001868  6F17               	movwf	(__u32time+3)& (0+255),b
  7741  00186A  D02A               	goto	l8447
  7742  00186C                     l8423:
  7743  00186C  FFFF               	dw	65535	; assembler added errata NOP
  7744                           
  7745                           ;ModbusRtu.c: 492: }
  7746                           ;ModbusRtu.c: 493: if (millis() < _u32time)
  7747  00186E  ECD1  F000         	call	_millis	;wreg free
  7748  001872  0101               	movlb	1	; () banked
  7749  001874  5114               	movf	__u32time& (0+255),w,b
  7750  001876  5C21               	subwf	?_millis,w,c
  7751  001878  0101               	movlb	1	; () banked
  7752  00187A  5115               	movf	(__u32time+1)& (0+255),w,b
  7753  00187C  5822               	subwfb	?_millis+1,w,c
  7754  00187E  0101               	movlb	1	; () banked
  7755  001880  5116               	movf	(__u32time+2)& (0+255),w,b
  7756  001882  5823               	subwfb	?_millis+2,w,c
  7757  001884  0101               	movlb	1	; () banked
  7758  001886  5117               	movf	(__u32time+3)& (0+255),w,b
  7759  001888  5824               	subwfb	?_millis+3,w,c
  7760  00188A  A0D8               	btfss	status,0,c
  7761  00188C  D019               	goto	l8447
  7762                           
  7763                           ; BSR set to: 1
  7764                           ;ModbusRtu.c: 496: _u8lastRec = 0;
  7765                           
  7766                           ; BSR set to: 1
  7767                           
  7768                           ; BSR set to: 1
  7769                           
  7770                           ; BSR set to: 1
  7771                           ;ModbusRtu.c: 494: return 0;
  7772  00188E  0E00               	movlw	0
  7773  001890  0100               	movlb	0	; () banked
  7774  001892  6FF2               	movwf	__u8lastRec& (0+255),b
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;ModbusRtu.c: 497: int8_t i8state = ModbusGetRxBufferHeader();
  7778  001894  ECC1  F01E         	call	_ModbusGetRxBufferHeader	;wreg free
  7779  001898  0100               	movlb	0	; () banked
  7780  00189A  6FC1               	movwf	ModbusPoll@i8state& (0+255),b
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;ModbusRtu.c: 498: _u8lastError = i8state;
  7784  00189C  C0C1  F0F1         	movff	ModbusPoll@i8state,__u8lastError
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;ModbusRtu.c: 499: if (i8state < 4)
  7788  0018A0  0E04               	movlw	4
  7789  0018A2  0100               	movlb	0	; () banked
  7790  0018A4  61C1               	cpfslt	ModbusPoll@i8state& (0+255),b
  7791  0018A6  D003               	goto	l8443
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;ModbusRtu.c: 500: {
  7795                           ;ModbusRtu.c: 501: PortClearReadBuffer();
  7796  0018A8  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7797  0018AC  D0F0               	goto	l8549
  7798  0018AE                     l8443:
  7799  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;ModbusRtu.c: 503: }
  7803                           ;ModbusRtu.c: 505: if (_au8Buffer[ ID ] != _u8id)
  7804  0018B0  0100               	movlb	0	; () banked
  7805  0018B2  51F0               	movf	__u8id& (0+255),w,b
  7806  0018B4  0101               	movlb	1	; () banked
  7807  0018B6  192A               	xorwf	__au8Buffer& (0+255),w,b
  7808  0018B8  B4D8               	btfsc	status,2,c
  7809  0018BA  D005               	goto	l8451
  7810                           
  7811                           ; BSR set to: 1
  7812                           ;ModbusRtu.c: 506: {
  7813                           ;ModbusRtu.c: 507: PortClearReadBuffer();
  7814  0018BC  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7815  0018C0                     l8447:
  7816  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  7817                           
  7818                           ;ModbusRtu.c: 508: return 0;
  7819  0018C2  0E00               	movlw	0
  7820  0018C4  D0E7               	goto	l789
  7821  0018C6                     l8451:
  7822  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  7823                           
  7824                           ;ModbusRtu.c: 509: }
  7825                           ;ModbusRtu.c: 510: i8state = ModbusGetRxBuffer();
  7826  0018C8  EC8A  F01D         	call	_ModbusGetRxBuffer	;wreg free
  7827  0018CC  0100               	movlb	0	; () banked
  7828  0018CE  6FC1               	movwf	ModbusPoll@i8state& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;ModbusRtu.c: 511: PortClearReadBuffer();
  7832  0018D0  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7833                           
  7834                           ;ModbusRtu.c: 512: _u8lastError = i8state;
  7835  0018D4  C0C1  F0F1         	movff	ModbusPoll@i8state,__u8lastError
  7836                           
  7837                           ;ModbusRtu.c: 517: uint8_t u8exception = ModbusValidateRequest();
  7838  0018D8  EC2D  F003         	call	_ModbusValidateRequest	;wreg free
  7839  0018DC  0100               	movlb	0	; () banked
  7840  0018DE  6FC0               	movwf	ModbusPoll@u8exception& (0+255),b
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;ModbusRtu.c: 518: if (u8exception > 0)
  7844  0018E0  0100               	movlb	0	; () banked
  7845  0018E2  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7846  0018E4  0100               	movlb	0	; () banked
  7847  0018E6  B4D8               	btfsc	status,2,c
  7848  0018E8  D010               	goto	l8473
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;ModbusRtu.c: 519: {
  7852                           ;ModbusRtu.c: 520: if (u8exception != NO_REPLY)
  7853  0018EA  0100               	movlb	0	; () banked
  7854  0018EC  29C0               	incf	ModbusPoll@u8exception& (0+255),w,b
  7855  0018EE  B4D8               	btfsc	status,2,c
  7856  0018F0  D006               	goto	l8467
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;ModbusRtu.c: 521: {
  7860                           ;ModbusRtu.c: 522: ModbusBuildException(u8exception);
  7861  0018F2  0100               	movlb	0	; () banked
  7862  0018F4  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7863  0018F6  ECF8  F000         	call	_ModbusBuildException
  7864                           
  7865                           ;ModbusRtu.c: 523: ModbusSendTxBuffer();
  7866  0018FA  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
  7867  0018FE                     l8467:
  7868  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  7869                           
  7870                           ;ModbusRtu.c: 524: }
  7871                           ;ModbusRtu.c: 525: _u8lastError = u8exception;
  7872  001900  C0C0  F0F1         	movff	ModbusPoll@u8exception,__u8lastError
  7873                           
  7874                           ;ModbusRtu.c: 526: return u8exception;
  7875  001904  0100               	movlb	0	; () banked
  7876  001906  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7877                           
  7878                           ; BSR set to: 0
  7879  001908  D0C5               	goto	l789
  7880  00190A                     l8473:
  7881  00190A  FFFF               	dw	65535	; assembler added errata NOP
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;ModbusRtu.c: 527: }
  7885                           ;ModbusRtu.c: 529: _u32timeOut = millis() + (long) _u16timeOut;
  7886  00190C  ECD1  F000         	call	_millis	;wreg free
  7887  001910  0100               	movlb	0	; () banked
  7888  001912  51EA               	movf	__u16timeOut& (0+255),w,b
  7889  001914  2421               	addwf	?_millis,w,c
  7890  001916  0101               	movlb	1	; () banked
  7891  001918  6F18               	movwf	__u32timeOut& (0+255),b
  7892  00191A  0100               	movlb	0	; () banked
  7893  00191C  51EB               	movf	(__u16timeOut+1)& (0+255),w,b
  7894  00191E  2022               	addwfc	?_millis+1,w,c
  7895  001920  0101               	movlb	1	; () banked
  7896  001922  6F19               	movwf	(__u32timeOut+1)& (0+255),b
  7897  001924  0E00               	movlw	0
  7898  001926  2023               	addwfc	?_millis+2,w,c
  7899  001928  0101               	movlb	1	; () banked
  7900  00192A  6F1A               	movwf	(__u32timeOut+2)& (0+255),b
  7901  00192C  0E00               	movlw	0
  7902  00192E  2024               	addwfc	?_millis+3,w,c
  7903  001930  0101               	movlb	1	; () banked
  7904  001932  6F1B               	movwf	(__u32timeOut+3)& (0+255),b
  7905                           
  7906                           ; BSR set to: 1
  7907                           ;ModbusRtu.c: 530: _u8lastError = 0;
  7908  001934  0E00               	movlw	0
  7909  001936  0100               	movlb	0	; () banked
  7910  001938  6FF1               	movwf	__u8lastError& (0+255),b
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;ModbusRtu.c: 533: if(_au8Buffer[ FUNC ] != MB_FC_READ_EXCEPTION_STATUS)
  7914  00193A  0E07               	movlw	7
  7915  00193C  0101               	movlb	1	; () banked
  7916  00193E  192B               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7917  001940  B4D8               	btfsc	status,2,c
  7918  001942  D072               	goto	l8547
  7919                           
  7920                           ; BSR set to: 1
  7921                           ;ModbusRtu.c: 534: ModbusSetExceptionStatusBit(0, 0);
  7922  001944  0E00               	movlw	0
  7923  001946  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  7924  001948  0E00               	movlw	0
  7925  00194A  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
  7926                           
  7927                           ;ModbusRtu.c: 538: switch (_au8Buffer[ FUNC ])
  7928  00194E  D06C               	goto	l8547
  7929  001950                     l8481:
  7930  001950  FFFF               	dw	65535	; assembler added errata NOP
  7931                           
  7932                           ;ModbusRtu.c: 541: return ModbusProcess_FC1(*coils);
  7933  001952  C0B7  FFD9         	movff	ModbusPoll@coils,fsr2l
  7934  001956  C0B8  FFDA         	movff	ModbusPoll@coils+1,fsr2h
  7935  00195A  CFDE F030          	movff	postinc2,ModbusProcess_FC1@regs
  7936  00195E  CFDD F031          	movff	postdec2,ModbusProcess_FC1@regs+1
  7937  001962  EC35  F011         	call	_ModbusProcess_FC1	;wreg free
  7938  001966  D096               	goto	l789
  7939  001968                     l8485:
  7940  001968  FFFF               	dw	65535	; assembler added errata NOP
  7941                           
  7942                           ;ModbusRtu.c: 543: return ModbusProcess_FC1(discreteInputs);
  7943  00196A  C0B5  F030         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7944  00196E  C0B6  F031         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7945  001972  EC35  F011         	call	_ModbusProcess_FC1	;wreg free
  7946  001976  D08E               	goto	l789
  7947  001978                     l8489:
  7948  001978  FFFF               	dw	65535	; assembler added errata NOP
  7949                           
  7950                           ;ModbusRtu.c: 545: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7951  00197A  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7952  00197E  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7953  001982  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7954  001986  EC87  F016         	call	_ModbusProcess_FC3	;wreg free
  7955  00198A  D084               	goto	l789
  7956  00198C                     l8493:
  7957  00198C  FFFF               	dw	65535	; assembler added errata NOP
  7958                           
  7959                           ;ModbusRtu.c: 547: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7960  00198E  C0B9  F030         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7961  001992  C0BA  F031         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7962  001996  C0BB  F032         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7963  00199A  EC87  F016         	call	_ModbusProcess_FC3	;wreg free
  7964  00199E  D07A               	goto	l789
  7965  0019A0                     l8497:
  7966  0019A0  FFFF               	dw	65535	; assembler added errata NOP
  7967                           
  7968                           ;ModbusRtu.c: 549: return ModbusProcess_FC5(coils);
  7969  0019A2  C0B7  F030         	movff	ModbusPoll@coils,ModbusProcess_FC5@regs
  7970  0019A6  C0B8  F031         	movff	ModbusPoll@coils+1,ModbusProcess_FC5@regs+1
  7971  0019AA  ECC5  F019         	call	_ModbusProcess_FC5	;wreg free
  7972  0019AE  D072               	goto	l789
  7973  0019B0                     l8501:
  7974  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  7975                           
  7976                           ;ModbusRtu.c: 551: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7977  0019B2  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7978  0019B6  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7979  0019BA  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7980  0019BE  ECC0  F01C         	call	_ModbusProcess_FC6	;wreg free
  7981  0019C2  D068               	goto	l789
  7982  0019C4                     l8505:
  7983  0019C4  FFFF               	dw	65535	; assembler added errata NOP
  7984                           
  7985                           ;ModbusRtu.c: 553: return ModbusProcess_FC7();
  7986  0019C6  EC33  F001         	call	_ModbusProcess_FC7	;wreg free
  7987  0019CA  D064               	goto	l789
  7988  0019CC                     l8509:
  7989  0019CC  FFFF               	dw	65535	; assembler added errata NOP
  7990                           
  7991                           ;ModbusRtu.c: 555: return ModbusProcess_FC15(coils);
  7992  0019CE  C0B7  F030         	movff	ModbusPoll@coils,ModbusProcess_FC15@regs
  7993  0019D2  C0B8  F031         	movff	ModbusPoll@coils+1,ModbusProcess_FC15@regs+1
  7994  0019D6  ECBE  F012         	call	_ModbusProcess_FC15	;wreg free
  7995  0019DA  D05C               	goto	l789
  7996  0019DC                     l8513:
  7997  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  7998                           
  7999                           ;ModbusRtu.c: 557: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  8000  0019DE  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  8001  0019E2  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  8002  0019E6  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  8003  0019EA  EC6D  F013         	call	_ModbusProcess_FC16	;wreg free
  8004  0019EE  D052               	goto	l789
  8005  0019F0                     l8517:
  8006  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  8007                           
  8008                           ;ModbusRtu.c: 559: return ModbusProcess_FC17();
  8009  0019F2  ECB8  F01B         	call	_ModbusProcess_FC17	;wreg free
  8010  0019F6  D04E               	goto	l789
  8011  0019F8                     l8521:
  8012  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  8013                           
  8014                           ;ModbusRtu.c: 561: return ModbusProcess_FC20();
  8015  0019FA  EC4D  F00D         	call	_ModbusProcess_FC20	;wreg free
  8016  0019FE  D04A               	goto	l789
  8017  001A00                     l8525:
  8018  001A00  FFFF               	dw	65535	; assembler added errata NOP
  8019                           
  8020                           ;ModbusRtu.c: 563: return ModbusProcess_FC21();
  8021  001A02  EC39  F018         	call	_ModbusProcess_FC21	;wreg free
  8022  001A06  D046               	goto	l789
  8023  001A08                     l8529:
  8024  001A08  FFFF               	dw	65535	; assembler added errata NOP
  8025                           
  8026                           ;ModbusRtu.c: 565: return ModbusProcess_FC43();
  8027  001A0A  EC74  F00F         	call	_ModbusProcess_FC43	;wreg free
  8028  001A0E  D042               	goto	l789
  8029  001A10                     l8533:
  8030  001A10  FFFF               	dw	65535	; assembler added errata NOP
  8031                           
  8032                           ;ModbusRtu.c: 567: return ModbusProcess_FC100();
  8033  001A12  EC16  F014         	call	_ModbusProcess_FC100	;wreg free
  8034  001A16  D03E               	goto	l789
  8035  001A18                     l8537:
  8036  001A18  FFFF               	dw	65535	; assembler added errata NOP
  8037                           
  8038                           ;ModbusRtu.c: 569: return ModbusProcess_FC101();
  8039  001A1A  ECB3  F01F         	call	_ModbusProcess_FC101	;wreg free
  8040  001A1E  D03A               	goto	l789
  8041  001A20                     l8541:
  8042  001A20  FFFF               	dw	65535	; assembler added errata NOP
  8043                           
  8044                           ;ModbusRtu.c: 571: return ModbusProcess_FC102();
  8045  001A22  EC26  F001         	call	_ModbusProcess_FC102	;wreg free
  8046  001A26  D036               	goto	l789
  8047  001A28                     l8547:
  8048  001A28  FFFF               	dw	65535	; assembler added errata NOP
  8049  001A2A  0101               	movlb	1	; () banked
  8050  001A2C  512B               	movf	(__au8Buffer+1)& (0+255),w,b
  8051                           
  8052                           ; Switch size 1, requested type "space"
  8053                           ; Number of cases is 16, Range of values is 1 to 102
  8054                           ; switch strategies available:
  8055                           ; Name         Instructions Cycles
  8056                           ; simple_byte           49    25 (average)
  8057                           ;	Chosen strategy is simple_byte
  8058  001A2E  0A01               	xorlw	1	; case 1
  8059  001A30  B4D8               	btfsc	status,2,c
  8060  001A32  D78E               	goto	l8481
  8061  001A34  0A03               	xorlw	3	; case 2
  8062  001A36  B4D8               	btfsc	status,2,c
  8063  001A38  D797               	goto	l8485
  8064  001A3A  0A01               	xorlw	1	; case 3
  8065  001A3C  B4D8               	btfsc	status,2,c
  8066  001A3E  D79C               	goto	l8489
  8067  001A40  0A07               	xorlw	7	; case 4
  8068  001A42  B4D8               	btfsc	status,2,c
  8069  001A44  D7A3               	goto	l8493
  8070  001A46  0A01               	xorlw	1	; case 5
  8071  001A48  B4D8               	btfsc	status,2,c
  8072  001A4A  D7AA               	goto	l8497
  8073  001A4C  0A03               	xorlw	3	; case 6
  8074  001A4E  B4D8               	btfsc	status,2,c
  8075  001A50  D7AF               	goto	l8501
  8076  001A52  0A01               	xorlw	1	; case 7
  8077  001A54  B4D8               	btfsc	status,2,c
  8078  001A56  D7B6               	goto	l8505
  8079  001A58  0A08               	xorlw	8	; case 15
  8080  001A5A  B4D8               	btfsc	status,2,c
  8081  001A5C  D7B7               	goto	l8509
  8082  001A5E  0A1F               	xorlw	31	; case 16
  8083  001A60  B4D8               	btfsc	status,2,c
  8084  001A62  D7BC               	goto	l8513
  8085  001A64  0A01               	xorlw	1	; case 17
  8086  001A66  B4D8               	btfsc	status,2,c
  8087  001A68  D7C3               	goto	l8517
  8088  001A6A  0A05               	xorlw	5	; case 20
  8089  001A6C  B4D8               	btfsc	status,2,c
  8090  001A6E  D7C4               	goto	l8521
  8091  001A70  0A01               	xorlw	1	; case 21
  8092  001A72  B4D8               	btfsc	status,2,c
  8093  001A74  D7C5               	goto	l8525
  8094  001A76  0A3E               	xorlw	62	; case 43
  8095  001A78  B4D8               	btfsc	status,2,c
  8096  001A7A  D7C6               	goto	l8529
  8097  001A7C  0A4F               	xorlw	79	; case 100
  8098  001A7E  B4D8               	btfsc	status,2,c
  8099  001A80  D7C7               	goto	l8533
  8100  001A82  0A01               	xorlw	1	; case 101
  8101  001A84  B4D8               	btfsc	status,2,c
  8102  001A86  D7C8               	goto	l8537
  8103  001A88  0A03               	xorlw	3	; case 102
  8104  001A8A  B4D8               	btfsc	status,2,c
  8105  001A8C  D7C9               	goto	l8541
  8106  001A8E                     l8549:
  8107  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  8108                           
  8109                           ;ModbusRtu.c: 576: return i8state;
  8110  001A90  0100               	movlb	0	; () banked
  8111  001A92  51C1               	movf	ModbusPoll@i8state& (0+255),w,b
  8112  001A94                     l789:
  8113  001A94  FFFF               	dw	65535	; assembler added errata NOP
  8114  001A96  0012               	return		;funcret
  8115  001A98  FFFF               	dw	65535	; errata NOP
  8116  001A9A                     __end_of_ModbusPoll:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _PortClearReadBuffer *****************
  8138 ;; Defined at:
  8139 ;;		line 77 in file "interrupts.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8153 ;;      Params:         0       0       0       0       0       0       0
  8154 ;;      Locals:         0       0       0       0       0       0       0
  8155 ;;      Temps:          0       0       0       0       0       0       0
  8156 ;;      Totals:         0       0       0       0       0       0       0
  8157 ;;Total ram usage:        0 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    3
  8160 ;; This function calls:
  8161 ;;		_InitUartBuffer
  8162 ;; This function is called by:
  8163 ;;		_ModbusPoll
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text36
  8168  000340                     __ptext36:
  8169                           	opt stack 0
  8170  000340                     _PortClearReadBuffer:
  8171                           	opt stack 26
  8172                           
  8173                           ;incstack = 0
  8174  000340  FFFF               	dw	65535
  8175                           
  8176                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  8177  000342  9EF2               	bcf	intcon,7,c	;volatile
  8178                           
  8179                           ;interrupts.c: 80: InitUartBuffer();
  8180  000344  EC5F  F001         	call	_InitUartBuffer	;wreg free
  8181                           
  8182                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  8183  000348  8EF2               	bsf	intcon,7,c	;volatile
  8184  00034A  0012               	return		;funcret
  8185  00034C  FFFF               	dw	65535	; errata NOP
  8186  00034E                     __end_of_PortClearReadBuffer:
  8187                           	opt stack 0
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           postinc0	equ	0xFEE
  8196                           wreg	equ	0xFE8
  8197                           postdec1	equ	0xFE5
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           fsr2h	equ	0xFDA
  8204                           fsr2l	equ	0xFD9
  8205                           status	equ	0xFD8
  8206                           
  8207 ;; *************** function _ModbusValidateRequest *****************
  8208 ;; Defined at:
  8209 ;;		line 826 in file "ModbusRtu.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;		None
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  res             1   23[BANK0 ] unsigned char 
  8214 ;;  recLenBytes     4   16[BANK0 ] unsigned long 
  8215 ;;  startAddrByt    4   12[BANK0 ] unsigned long 
  8216 ;;  readDevId       1   27[BANK0 ] unsigned char 
  8217 ;;  i               1   26[BANK0 ] unsigned char 
  8218 ;;  u16regs         2   29[BANK0 ] unsigned short 
  8219 ;;  u16count        2   24[BANK0 ] unsigned short 
  8220 ;;  u16MsgCRC       2   20[BANK0 ] unsigned short 
  8221 ;;  u8regs          1   28[BANK0 ] unsigned char 
  8222 ;;  isSupported     1   22[BANK0 ] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      unsigned char 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8232 ;;      Params:         0       0       0       0       0       0       0
  8233 ;;      Locals:         0      19       0       0       0       0       0
  8234 ;;      Temps:          0      12       0       0       0       0       0
  8235 ;;      Totals:         0      31       0       0       0       0       0
  8236 ;;Total ram usage:       31 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    3
  8239 ;; This function calls:
  8240 ;;		_CheckFunc20
  8241 ;;		_ModbusCalcCRC
  8242 ;; This function is called by:
  8243 ;;		_ModbusPoll
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text37
  8248  00065A                     __ptext37:
  8249                           	opt stack 0
  8250  00065A                     _ModbusValidateRequest:
  8251                           	opt stack 26
  8252                           
  8253                           ;incstack = 0
  8254  00065A  FFFF               	dw	65535
  8255                           
  8256                           ;ModbusRtu.c: 829: uint16_t u16MsgCRC =
  8257                           ;ModbusRtu.c: 830: ((_au8Buffer[_u8BufferSize - 2] << 8)
  8258                           ;ModbusRtu.c: 831: | _au8Buffer[_u8BufferSize - 1]);
  8259  00065C  0EFE               	movlw	254
  8260  00065E  0100               	movlb	0	; () banked
  8261  000660  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8262  000662  0EFF               	movlw	255
  8263  000664  0100               	movlb	0	; () banked
  8264  000666  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8265  000668  5053               	movf	__u8BufferSize,w,c
  8266  00066A  0100               	movlb	0	; () banked
  8267  00066C  6F82               	movwf	(??_ModbusValidateRequest+2)& (0+255),b
  8268  00066E  6B83               	clrf	(??_ModbusValidateRequest+3)& (0+255),b
  8269  000670  0100               	movlb	0	; () banked
  8270  000672  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8271  000674  0100               	movlb	0	; () banked
  8272  000676  2782               	addwf	(??_ModbusValidateRequest+2)& (0+255),f,b
  8273  000678  0100               	movlb	0	; () banked
  8274  00067A  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8275  00067C  0100               	movlb	0	; () banked
  8276  00067E  2383               	addwfc	(??_ModbusValidateRequest+3)& (0+255),f,b
  8277  000680  0E2A               	movlw	low __au8Buffer
  8278  000682  0100               	movlb	0	; () banked
  8279  000684  2582               	addwf	(??_ModbusValidateRequest+2)& (0+255),w,b
  8280  000686  6ED9               	movwf	fsr2l,c
  8281  000688  0E01               	movlw	high __au8Buffer
  8282  00068A  0100               	movlb	0	; () banked
  8283  00068C  2183               	addwfc	(??_ModbusValidateRequest+3)& (0+255),w,b
  8284  00068E  6EDA               	movwf	fsr2h,c
  8285  000690  50DF               	movf	indf2,w,c
  8286  000692  0100               	movlb	0	; () banked
  8287  000694  6F84               	movwf	(??_ModbusValidateRequest+4)& (0+255),b
  8288  000696  0100               	movlb	0	; () banked
  8289  000698  5184               	movf	(??_ModbusValidateRequest+4)& (0+255),w,b
  8290  00069A  0100               	movlb	0	; () banked
  8291  00069C  6F86               	movwf	(??_ModbusValidateRequest+6)& (0+255),b
  8292  00069E  6B85               	clrf	(??_ModbusValidateRequest+5)& (0+255),b
  8293  0006A0  0EFF               	movlw	255
  8294  0006A2  0100               	movlb	0	; () banked
  8295  0006A4  6F87               	movwf	(??_ModbusValidateRequest+7)& (0+255),b
  8296  0006A6  0EFF               	movlw	255
  8297  0006A8  0100               	movlb	0	; () banked
  8298  0006AA  6F88               	movwf	(??_ModbusValidateRequest+8)& (0+255),b
  8299  0006AC  5053               	movf	__u8BufferSize,w,c
  8300  0006AE  0100               	movlb	0	; () banked
  8301  0006B0  6F89               	movwf	(??_ModbusValidateRequest+9)& (0+255),b
  8302  0006B2  6B8A               	clrf	(??_ModbusValidateRequest+10)& (0+255),b
  8303  0006B4  0100               	movlb	0	; () banked
  8304  0006B6  5187               	movf	(??_ModbusValidateRequest+7)& (0+255),w,b
  8305  0006B8  0100               	movlb	0	; () banked
  8306  0006BA  2789               	addwf	(??_ModbusValidateRequest+9)& (0+255),f,b
  8307  0006BC  0100               	movlb	0	; () banked
  8308  0006BE  5188               	movf	(??_ModbusValidateRequest+8)& (0+255),w,b
  8309  0006C0  0100               	movlb	0	; () banked
  8310  0006C2  238A               	addwfc	(??_ModbusValidateRequest+10)& (0+255),f,b
  8311  0006C4  0E2A               	movlw	low __au8Buffer
  8312  0006C6  0100               	movlb	0	; () banked
  8313  0006C8  2589               	addwf	(??_ModbusValidateRequest+9)& (0+255),w,b
  8314  0006CA  6ED9               	movwf	fsr2l,c
  8315  0006CC  0E01               	movlw	high __au8Buffer
  8316  0006CE  0100               	movlb	0	; () banked
  8317  0006D0  218A               	addwfc	(??_ModbusValidateRequest+10)& (0+255),w,b
  8318  0006D2  6EDA               	movwf	fsr2h,c
  8319  0006D4  50DF               	movf	indf2,w,c
  8320  0006D6  0100               	movlb	0	; () banked
  8321  0006D8  6F8B               	movwf	(??_ModbusValidateRequest+11)& (0+255),b
  8322  0006DA  0100               	movlb	0	; () banked
  8323  0006DC  518B               	movf	(??_ModbusValidateRequest+11)& (0+255),w,b
  8324  0006DE  0100               	movlb	0	; () banked
  8325  0006E0  1185               	iorwf	(??_ModbusValidateRequest+5)& (0+255),w,b
  8326  0006E2  0100               	movlb	0	; () banked
  8327  0006E4  6F94               	movwf	ModbusValidateRequest@u16MsgCRC& (0+255),b
  8328  0006E6  0100               	movlb	0	; () banked
  8329  0006E8  5186               	movf	(??_ModbusValidateRequest+6)& (0+255),w,b
  8330  0006EA  0100               	movlb	0	; () banked
  8331  0006EC  6F95               	movwf	(ModbusValidateRequest@u16MsgCRC+1)& (0+255),b
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;ModbusRtu.c: 832: if (ModbusCalcCRC(_u8BufferSize - 2) != u16MsgCRC)
  8335  0006EE  5053               	movf	__u8BufferSize,w,c
  8336  0006F0  0FFE               	addlw	254
  8337  0006F2  EC6E  F01B         	call	_ModbusCalcCRC
  8338  0006F6  0100               	movlb	0	; () banked
  8339  0006F8  5194               	movf	ModbusValidateRequest@u16MsgCRC& (0+255),w,b
  8340  0006FA  1821               	xorwf	?_ModbusCalcCRC,w,c
  8341  0006FC  E105               	bnz	u6760
  8342  0006FE  0100               	movlb	0	; () banked
  8343  000700  5195               	movf	(ModbusValidateRequest@u16MsgCRC+1)& (0+255),w,b
  8344  000702  1822               	xorwf	?_ModbusCalcCRC+1,w,c
  8345  000704  B4D8               	btfsc	status,2,c
  8346  000706  D005               	goto	l7405
  8347  000708                     u6760:
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;ModbusRtu.c: 833: {
  8351                           ;ModbusRtu.c: 834: _u16errCnt++;
  8352  000708  0101               	movlb	1	; () banked
  8353  00070A  4B28               	infsnz	__u16errCnt& (0+255),f,b
  8354  00070C  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
  8355                           
  8356                           ; BSR set to: 1
  8357                           ;ModbusRtu.c: 835: return NO_REPLY;
  8358  00070E  0EFF               	movlw	255
  8359                           
  8360                           ; BSR set to: 1
  8361  000710  D1D0               	goto	l869
  8362  000712                     l7405:
  8363  000712  FFFF               	dw	65535	; assembler added errata NOP
  8364                           
  8365                           ;ModbusRtu.c: 836: }
  8366                           ;ModbusRtu.c: 839: bool isSupported = 0;
  8367  000714  0E00               	movlw	0
  8368  000716  0100               	movlb	0	; () banked
  8369  000718  6F96               	movwf	ModbusValidateRequest@isSupported& (0+255),b
  8370                           
  8371                           ;ModbusRtu.c: 840: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  8372  00071A  0E00               	movlw	0
  8373  00071C  0100               	movlb	0	; () banked
  8374  00071E  6F9A               	movwf	ModbusValidateRequest@i& (0+255),b
  8375  000720                     l7407:
  8376  000720  FFFF               	dw	65535	; assembler added errata NOP
  8377                           
  8378                           ; BSR set to: 0
  8379  000722  0E0F               	movlw	15
  8380  000724  0100               	movlb	0	; () banked
  8381  000726  659A               	cpfsgt	ModbusValidateRequest@i& (0+255),b
  8382  000728  D001               	goto	l7411
  8383  00072A  D019               	goto	l7419
  8384  00072C                     l7411:
  8385  00072C  FFFF               	dw	65535	; assembler added errata NOP
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;ModbusRtu.c: 841: {
  8389                           ;ModbusRtu.c: 842: if (fctsupported[i] == _au8Buffer[FUNC])
  8390  00072E  0100               	movlb	0	; () banked
  8391  000730  519A               	movf	ModbusValidateRequest@i& (0+255),w,b
  8392  000732  0D01               	mullw	1
  8393  000734  0E01               	movlw	low _fctsupported
  8394  000736  24F3               	addwf	prodl,w,c
  8395  000738  6EF6               	movwf	tblptrl,c
  8396  00073A  0E06               	movlw	high _fctsupported
  8397  00073C  20F4               	addwfc	prodh,w,c
  8398  00073E  6EF7               	movwf	tblptrh,c
  8399  000740                     	if	0	;There are less than 3 active tblptr bytes
  8400  000740                     	endif
  8401  000740  0008               	tblrd		*
  8402  000742  FFFF               	dw	65535	; errata NOP
  8403  000744  50F5               	movf	tablat,w,c
  8404  000746  0101               	movlb	1	; () banked
  8405  000748  192B               	xorwf	(__au8Buffer+1)& (0+255),w,b
  8406  00074A  A4D8               	btfss	status,2,c
  8407  00074C  D004               	goto	l7415
  8408                           
  8409                           ; BSR set to: 1
  8410                           ;ModbusRtu.c: 843: {
  8411                           ;ModbusRtu.c: 844: isSupported = 1;
  8412  00074E  0E01               	movlw	1
  8413  000750  0100               	movlb	0	; () banked
  8414  000752  6F96               	movwf	ModbusValidateRequest@isSupported& (0+255),b
  8415                           
  8416                           ;ModbusRtu.c: 845: break;
  8417  000754  D004               	goto	l7419
  8418  000756                     l7415:
  8419  000756  FFFF               	dw	65535	; assembler added errata NOP
  8420  000758  0100               	movlb	0	; () banked
  8421  00075A  2B9A               	incf	ModbusValidateRequest@i& (0+255),f,b
  8422  00075C  D7E1               	goto	l7407
  8423  00075E                     l7419:
  8424  00075E  FFFF               	dw	65535	; assembler added errata NOP
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;ModbusRtu.c: 846: }
  8428                           ;ModbusRtu.c: 847: }
  8429                           ;ModbusRtu.c: 848: if (!isSupported)
  8430  000760  0100               	movlb	0	; () banked
  8431  000762  5196               	movf	ModbusValidateRequest@isSupported& (0+255),w,b
  8432  000764  0100               	movlb	0	; () banked
  8433  000766  A4D8               	btfss	status,2,c
  8434  000768  D004               	goto	l7427
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;ModbusRtu.c: 849: {
  8438                           ;ModbusRtu.c: 850: _u16errCnt++;
  8439  00076A  0101               	movlb	1	; () banked
  8440  00076C  4B28               	infsnz	__u16errCnt& (0+255),f,b
  8441  00076E  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
  8442  000770  D13C               	goto	l7525
  8443  000772                     l7427:
  8444  000772  FFFF               	dw	65535	; assembler added errata NOP
  8445                           
  8446                           ;ModbusRtu.c: 852: }
  8447                           ;ModbusRtu.c: 855: uint16_t u16regs = 0;
  8448  000774  0E00               	movlw	0
  8449  000776  0100               	movlb	0	; () banked
  8450  000778  6F9E               	movwf	(ModbusValidateRequest@u16regs+1)& (0+255),b
  8451  00077A  0E00               	movlw	0
  8452  00077C  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8453                           
  8454                           ;ModbusRtu.c: 856: uint16_t u16count = 0;
  8455  00077E  0E00               	movlw	0
  8456  000780  0100               	movlb	0	; () banked
  8457  000782  6F99               	movwf	(ModbusValidateRequest@u16count+1)& (0+255),b
  8458  000784  0E00               	movlw	0
  8459  000786  6F98               	movwf	ModbusValidateRequest@u16count& (0+255),b
  8460                           
  8461                           ;ModbusRtu.c: 857: uint8_t u8regs;
  8462                           ;ModbusRtu.c: 858: switch (_au8Buffer[ FUNC ])
  8463  000788  D163               	goto	l7559
  8464  00078A                     l7429:
  8465  00078A  FFFF               	dw	65535	; assembler added errata NOP
  8466                           
  8467                           ;ModbusRtu.c: 861: case MB_FC_READ_DISCRETE_INPUT:
  8468                           ;ModbusRtu.c: 862: case MB_FC_WRITE_MULTIPLE_COILS:
  8469                           ;ModbusRtu.c: 864: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8470  00078C  0101               	movlb	1	; () banked
  8471  00078E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8472  000790  0100               	movlb	0	; () banked
  8473  000792  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8474  000794  0101               	movlb	1	; () banked
  8475  000796  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8476  000798  0100               	movlb	0	; () banked
  8477  00079A  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8478  00079C  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8479                           
  8480                           ;ModbusRtu.c: 865: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8481  0007A0  0101               	movlb	1	; () banked
  8482  0007A2  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  8483  0007A4  0100               	movlb	0	; () banked
  8484  0007A6  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8485  0007A8  0101               	movlb	1	; () banked
  8486  0007AA  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8487  0007AC  0100               	movlb	0	; () banked
  8488  0007AE  6F98               	movwf	ModbusValidateRequest@u16count& (0+255),b
  8489  0007B0  C080  F099         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;ModbusRtu.c: 866: if (u16count > 16)
  8493  0007B4  0100               	movlb	0	; () banked
  8494  0007B6  5199               	movf	(ModbusValidateRequest@u16count+1)& (0+255),w,b
  8495  0007B8  E135               	bnz	l7451
  8496  0007BA  0E11               	movlw	17
  8497  0007BC  0100               	movlb	0	; () banked
  8498  0007BE  5D98               	subwf	ModbusValidateRequest@u16count& (0+255),w,b
  8499  0007C0  B0D8               	btfsc	status,0,c
  8500  0007C2  D143               	goto	l7553
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;ModbusRtu.c: 868: if (u16regs > 15 || u16regs + u16count > 16)
  8504                           
  8505                           ; BSR set to: 0
  8506                           
  8507                           ; BSR set to: 0
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;ModbusRtu.c: 867: return EXC_REGS_QUANT;
  8511  0007C4  0100               	movlb	0	; () banked
  8512  0007C6  519E               	movf	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8513  0007C8  E138               	bnz	l7457
  8514  0007CA  0E10               	movlw	16
  8515  0007CC  0100               	movlb	0	; () banked
  8516  0007CE  5D9D               	subwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8517  0007D0  B0D8               	btfsc	status,0,c
  8518  0007D2  D129               	goto	l7543
  8519                           
  8520                           ; BSR set to: 0
  8521  0007D4  0100               	movlb	0	; () banked
  8522  0007D6  5198               	movf	ModbusValidateRequest@u16count& (0+255),w,b
  8523  0007D8  0100               	movlb	0	; () banked
  8524  0007DA  259D               	addwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8525  0007DC  0100               	movlb	0	; () banked
  8526  0007DE  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8527  0007E0  0100               	movlb	0	; () banked
  8528  0007E2  5199               	movf	(ModbusValidateRequest@u16count+1)& (0+255),w,b
  8529  0007E4  0100               	movlb	0	; () banked
  8530  0007E6  219E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8531  0007E8  0100               	movlb	0	; () banked
  8532  0007EA  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8533  0007EC  0100               	movlb	0	; () banked
  8534  0007EE  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8535  0007F0  E124               	bnz	l7457
  8536  0007F2  0E11               	movlw	17
  8537  0007F4  0100               	movlb	0	; () banked
  8538  0007F6  5D80               	subwf	??_ModbusValidateRequest& (0+255),w,b
  8539  0007F8  D01D               	goto	L14
  8540  0007FA                     l7445:
  8541  0007FA  FFFF               	dw	65535	; assembler added errata NOP
  8542                           
  8543                           ;ModbusRtu.c: 872: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8544  0007FC  0101               	movlb	1	; () banked
  8545  0007FE  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8546  000800  0100               	movlb	0	; () banked
  8547  000802  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8548  000804  0101               	movlb	1	; () banked
  8549  000806  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8550  000808  0100               	movlb	0	; () banked
  8551  00080A  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8552  00080C  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;ModbusRtu.c: 873: u8regs = _au8Buffer[ NB_HI ];
  8556  000810  C12E  F09C         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  8557                           
  8558                           ;ModbusRtu.c: 874: if (u8regs != 0x00 && u8regs != 0xFF)
  8559  000814  0100               	movlb	0	; () banked
  8560  000816  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8561  000818  0100               	movlb	0	; () banked
  8562  00081A  B4D8               	btfsc	status,2,c
  8563  00081C  D004               	goto	l7455
  8564                           
  8565                           ; BSR set to: 0
  8566  00081E  0100               	movlb	0	; () banked
  8567  000820  299C               	incf	ModbusValidateRequest@u8regs& (0+255),w,b
  8568  000822  A4D8               	btfss	status,2,c
  8569  000824                     l7451:
  8570  000824  D112               	goto	l7553
  8571  000826                     l7455:
  8572  000826  FFFF               	dw	65535	; assembler added errata NOP
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;ModbusRtu.c: 876: if (u16regs > 15)
  8576  000828  0100               	movlb	0	; () banked
  8577  00082A  519E               	movf	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8578  00082C  E106               	bnz	u6860
  8579  00082E  0E10               	movlw	16
  8580  000830  0100               	movlb	0	; () banked
  8581  000832  5D9D               	subwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8582  000834                     L14:
  8583  000834  FFFF               	dw	65535	; assembler added errata NOP
  8584  000836  A0D8               	btfss	status,0,c
  8585  000838  D138               	goto	l882
  8586  00083A                     u6860:
  8587  00083A                     l7457:
  8588  00083A  D0F5               	goto	l7543
  8589  00083C                     l7461:
  8590  00083C  FFFF               	dw	65535	; assembler added errata NOP
  8591                           
  8592                           ;ModbusRtu.c: 880: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8593  00083E  0101               	movlb	1	; () banked
  8594  000840  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8595  000842  0100               	movlb	0	; () banked
  8596  000844  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8597  000846  0101               	movlb	1	; () banked
  8598  000848  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8599  00084A  0100               	movlb	0	; () banked
  8600  00084C  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8601  00084E  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8602  000852                     l7463:
  8603  000852  FFFF               	dw	65535	; assembler added errata NOP
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;ModbusRtu.c: 881: u8regs = (uint8_t) u16regs;
  8607  000854  C09D  F09C         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;ModbusRtu.c: 882: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  8611  000858  0100               	movlb	0	; () banked
  8612  00085A  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8613  00085C  5C4A               	subwf	__holdingRegsCount,w,c
  8614  00085E  FFFF               	dw	65535	; assembler added errata NOP
  8615  000860  B0D8               	btfsc	status,0,c
  8616  000862  D123               	goto	l882
  8617  000864  D0E0               	goto	l7543
  8618  000866                     l7471:
  8619  000866  FFFF               	dw	65535	; assembler added errata NOP
  8620                           
  8621                           ;ModbusRtu.c: 885: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8622  000868  0101               	movlb	1	; () banked
  8623  00086A  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8624  00086C  0100               	movlb	0	; () banked
  8625  00086E  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8626  000870  0101               	movlb	1	; () banked
  8627  000872  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8628  000874  0100               	movlb	0	; () banked
  8629  000876  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8630  000878  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;ModbusRtu.c: 886: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8634  00087C  0101               	movlb	1	; () banked
  8635  00087E  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8636  000880  C12E  F080         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8637  000884  0100               	movlb	0	; () banked
  8638  000886  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8639  000888  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8640  00088C  0100               	movlb	0	; () banked
  8641  00088E  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8642  000890  0100               	movlb	0	; () banked
  8643  000892  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8644  000894  0E00               	movlw	0
  8645  000896  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8646  000898  0100               	movlb	0	; () banked
  8647  00089A  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8648  00089C  0100               	movlb	0	; () banked
  8649  00089E  279D               	addwf	ModbusValidateRequest@u16regs& (0+255),f,b
  8650  0008A0  0100               	movlb	0	; () banked
  8651  0008A2  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8652  0008A4  0100               	movlb	0	; () banked
  8653  0008A6  239E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;ModbusRtu.c: 887: u8regs = (uint8_t) u16regs;
  8657  0008A8  C09D  F09C         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;ModbusRtu.c: 888: if (u8regs > _inputRegsCount)
  8661  0008AC  0100               	movlb	0	; () banked
  8662  0008AE  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8663  0008B0  5C4B               	subwf	__inputRegsCount,w,c
  8664  0008B2  D7D5               	goto	L15
  8665  0008B4                     l7483:
  8666  0008B4  FFFF               	dw	65535	; assembler added errata NOP
  8667                           
  8668                           ;ModbusRtu.c: 892: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  8669                           ;ModbusRtu.c: 893: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8670  0008B6  0101               	movlb	1	; () banked
  8671  0008B8  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8672  0008BA  0100               	movlb	0	; () banked
  8673  0008BC  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8674  0008BE  0101               	movlb	1	; () banked
  8675  0008C0  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8676  0008C2  0100               	movlb	0	; () banked
  8677  0008C4  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8678  0008C6  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;ModbusRtu.c: 894: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8682  0008CA  0101               	movlb	1	; () banked
  8683  0008CC  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8684  0008CE  C12E  F080         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8685  0008D2  0100               	movlb	0	; () banked
  8686  0008D4  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8687  0008D6  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8688  0008DA  0100               	movlb	0	; () banked
  8689  0008DC  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8690  0008DE  0100               	movlb	0	; () banked
  8691  0008E0  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8692  0008E2  0E00               	movlw	0
  8693  0008E4  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8694  0008E6  0100               	movlb	0	; () banked
  8695  0008E8  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8696  0008EA  0100               	movlb	0	; () banked
  8697  0008EC  279D               	addwf	ModbusValidateRequest@u16regs& (0+255),f,b
  8698  0008EE  0100               	movlb	0	; () banked
  8699  0008F0  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8700  0008F2  0100               	movlb	0	; () banked
  8701  0008F4  239E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),f,b
  8702  0008F6  D7AD               	goto	l7463
  8703  0008F8                     l7495:
  8704  0008F8  FFFF               	dw	65535	; assembler added errata NOP
  8705                           
  8706                           ;ModbusRtu.c: 903: {
  8707                           ;ModbusRtu.c: 904: uint8_t res = CheckFunc20();
  8708  0008FA  EC85  F00E         	call	_CheckFunc20	;wreg free
  8709  0008FE  0100               	movlb	0	; () banked
  8710  000900  6F97               	movwf	ModbusValidateRequest@res& (0+255),b
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;ModbusRtu.c: 905: if(res != 0)
  8714  000902  0100               	movlb	0	; () banked
  8715  000904  5197               	movf	ModbusValidateRequest@res& (0+255),w,b
  8716  000906  0100               	movlb	0	; () banked
  8717  000908  B4D8               	btfsc	status,2,c
  8718  00090A  D0CF               	goto	l882
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;ModbusRtu.c: 906: return res;
  8722  00090C  0100               	movlb	0	; () banked
  8723  00090E  5197               	movf	ModbusValidateRequest@res& (0+255),w,b
  8724                           
  8725                           ; BSR set to: 0
  8726  000910  D0D0               	goto	l869
  8727  000912                     l7503:
  8728  000912  FFFF               	dw	65535	; assembler added errata NOP
  8729                           
  8730                           ;ModbusRtu.c: 911: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  8731  000914  0E06               	movlw	6
  8732  000916  0101               	movlb	1	; () banked
  8733  000918  192D               	xorwf	(__au8Buffer+3)& (0+255),w,b
  8734  00091A  A4D8               	btfss	status,2,c
  8735  00091C  D084               	goto	l7543
  8736                           
  8737                           ; BSR set to: 1
  8738                           ;ModbusRtu.c: 914: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  8739                           
  8740                           ; BSR set to: 1
  8741                           
  8742                           ; BSR set to: 1
  8743                           
  8744                           ; BSR set to: 1
  8745                           ;ModbusRtu.c: 912: return EXC_ADDR_RANGE;
  8746  00091E  0101               	movlb	1	; () banked
  8747  000920  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  8748  000922  A4D8               	btfss	status,2,c
  8749  000924  D080               	goto	l7543
  8750                           
  8751                           ; BSR set to: 1
  8752  000926  0101               	movlb	1	; () banked
  8753  000928  052F               	decf	(__au8Buffer+5)& (0+255),w,b
  8754  00092A  A4D8               	btfss	status,2,c
  8755  00092C  D07C               	goto	l7543
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;ModbusRtu.c: 917: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  8759                           
  8760                           ; BSR set to: 1
  8761                           
  8762                           ; BSR set to: 1
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;ModbusRtu.c: 915: return EXC_ADDR_RANGE;
  8766                           
  8767                           ; BSR set to: 1
  8768  00092E  0101               	movlb	1	; () banked
  8769  000930  5131               	movf	(__au8Buffer+7)& (0+255),w,b
  8770  000932  C130  F080         	movff	__au8Buffer+6,??_ModbusValidateRequest
  8771  000936  0100               	movlb	0	; () banked
  8772  000938  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8773  00093A  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8774  00093E  0100               	movlb	0	; () banked
  8775  000940  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8776  000942  0100               	movlb	0	; () banked
  8777  000944  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8778  000946  0E00               	movlw	0
  8779  000948  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8780  00094A  90D8               	bcf	status,0,c
  8781  00094C  0100               	movlb	0	; () banked
  8782  00094E  3780               	rlcf	??_ModbusValidateRequest& (0+255),f,b
  8783  000950  3781               	rlcf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8784  000952  C080  F08C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  8785  000956  C081  F08D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  8786  00095A  0100               	movlb	0	; () banked
  8787  00095C  0E00               	movlw	0
  8788  00095E  BF8D               	btfsc	(ModbusValidateRequest@startAddrBytes+1)& (0+255),7,b
  8789  000960  0EFF               	movlw	-1
  8790  000962  6F8E               	movwf	(ModbusValidateRequest@startAddrBytes+2)& (0+255),b
  8791  000964  6F8F               	movwf	(ModbusValidateRequest@startAddrBytes+3)& (0+255),b
  8792                           
  8793                           ;ModbusRtu.c: 918: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  8794  000966  0101               	movlb	1	; () banked
  8795  000968  5133               	movf	(__au8Buffer+9)& (0+255),w,b
  8796  00096A  C132  F080         	movff	__au8Buffer+8,??_ModbusValidateRequest
  8797  00096E  0100               	movlb	0	; () banked
  8798  000970  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8799  000972  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8800  000976  0100               	movlb	0	; () banked
  8801  000978  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8802  00097A  0100               	movlb	0	; () banked
  8803  00097C  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8804  00097E  0E00               	movlw	0
  8805  000980  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8806  000982  90D8               	bcf	status,0,c
  8807  000984  0100               	movlb	0	; () banked
  8808  000986  3780               	rlcf	??_ModbusValidateRequest& (0+255),f,b
  8809  000988  3781               	rlcf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8810  00098A  C080  F090         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  8811  00098E  C081  F091         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  8812  000992  0100               	movlb	0	; () banked
  8813  000994  0E00               	movlw	0
  8814  000996  BF91               	btfsc	(ModbusValidateRequest@recLenBytes+1)& (0+255),7,b
  8815  000998  0EFF               	movlw	-1
  8816  00099A  6F92               	movwf	(ModbusValidateRequest@recLenBytes+2)& (0+255),b
  8817  00099C  6F93               	movwf	(ModbusValidateRequest@recLenBytes+3)& (0+255),b
  8818                           
  8819                           ;ModbusRtu.c: 920: if (startAddrBytes + recLenBytes >= 256)
  8820  00099E  0100               	movlb	0	; () banked
  8821  0009A0  5190               	movf	ModbusValidateRequest@recLenBytes& (0+255),w,b
  8822  0009A2  0100               	movlb	0	; () banked
  8823  0009A4  258C               	addwf	ModbusValidateRequest@startAddrBytes& (0+255),w,b
  8824  0009A6  0100               	movlb	0	; () banked
  8825  0009A8  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8826  0009AA  0100               	movlb	0	; () banked
  8827  0009AC  5191               	movf	(ModbusValidateRequest@recLenBytes+1)& (0+255),w,b
  8828  0009AE  0100               	movlb	0	; () banked
  8829  0009B0  218D               	addwfc	(ModbusValidateRequest@startAddrBytes+1)& (0+255),w,b
  8830  0009B2  0100               	movlb	0	; () banked
  8831  0009B4  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8832  0009B6  0100               	movlb	0	; () banked
  8833  0009B8  5192               	movf	(ModbusValidateRequest@recLenBytes+2)& (0+255),w,b
  8834  0009BA  0100               	movlb	0	; () banked
  8835  0009BC  218E               	addwfc	(ModbusValidateRequest@startAddrBytes+2)& (0+255),w,b
  8836  0009BE  0100               	movlb	0	; () banked
  8837  0009C0  6F82               	movwf	(??_ModbusValidateRequest+2)& (0+255),b
  8838  0009C2  0100               	movlb	0	; () banked
  8839  0009C4  5193               	movf	(ModbusValidateRequest@recLenBytes+3)& (0+255),w,b
  8840  0009C6  0100               	movlb	0	; () banked
  8841  0009C8  218F               	addwfc	(ModbusValidateRequest@startAddrBytes+3)& (0+255),w,b
  8842  0009CA  0100               	movlb	0	; () banked
  8843  0009CC  6F83               	movwf	(??_ModbusValidateRequest+3)& (0+255),b
  8844  0009CE  0100               	movlb	0	; () banked
  8845  0009D0  5183               	movf	(??_ModbusValidateRequest+3)& (0+255),w,b
  8846  0009D2  0100               	movlb	0	; () banked
  8847  0009D4  1182               	iorwf	(??_ModbusValidateRequest+2)& (0+255),w,b
  8848  0009D6  E127               	bnz	l7543
  8849  0009D8  0100               	movlb	0	; () banked
  8850  0009DA  0581               	decf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8851  0009DC  D72B               	goto	L14
  8852  0009DE                     l7523:
  8853  0009DE  FFFF               	dw	65535	; assembler added errata NOP
  8854                           
  8855                           ;ModbusRtu.c: 924: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  8856  0009E0  0E0E               	movlw	14
  8857  0009E2  0101               	movlb	1	; () banked
  8858  0009E4  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8859  0009E6  B4D8               	btfsc	status,2,c
  8860  0009E8  D003               	goto	l903
  8861  0009EA                     l7525:
  8862  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  8863                           
  8864                           ; BSR set to: 1
  8865                           ;ModbusRtu.c: 925: return EXC_FUNC_CODE;
  8866  0009EC  0E01               	movlw	1
  8867                           
  8868                           ; BSR set to: 1
  8869  0009EE  D061               	goto	l869
  8870  0009F0                     l903:
  8871  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  8872                           
  8873                           ; BSR set to: 1
  8874                           ;ModbusRtu.c: 926: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8875  0009F2  C12D  F09B         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8876                           
  8877                           ; BSR set to: 1
  8878                           ;ModbusRtu.c: 927: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8879  0009F6  0100               	movlb	0	; () banked
  8880  0009F8  059B               	decf	ModbusValidateRequest@readDevId& (0+255),w,b
  8881  0009FA  B4D8               	btfsc	status,2,c
  8882  0009FC  D00A               	goto	l7539
  8883                           
  8884                           ; BSR set to: 0
  8885  0009FE  0E02               	movlw	2
  8886  000A00  0100               	movlb	0	; () banked
  8887  000A02  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8888  000A04  B4D8               	btfsc	status,2,c
  8889  000A06  D005               	goto	l7539
  8890                           
  8891                           ; BSR set to: 0
  8892  000A08  0E04               	movlw	4
  8893  000A0A  0100               	movlb	0	; () banked
  8894  000A0C  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8895  000A0E  A4D8               	btfss	status,2,c
  8896  000A10  D01C               	goto	l7553
  8897  000A12                     l7539:
  8898  000A12  FFFF               	dw	65535	; assembler added errata NOP
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;ModbusRtu.c: 929: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8902  000A14  0E04               	movlw	4
  8903  000A16  0100               	movlb	0	; () banked
  8904  000A18  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8905  000A1A  A4D8               	btfss	status,2,c
  8906  000A1C  D046               	goto	l882
  8907                           
  8908                           ; BSR set to: 0
  8909  000A1E  0E06               	movlw	6
  8910  000A20  0101               	movlb	1	; () banked
  8911  000A22  652E               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8912  000A24  D042               	goto	l882
  8913  000A26                     l7543:
  8914  000A26  FFFF               	dw	65535	; assembler added errata NOP
  8915                           
  8916                           ; BSR set to: 1
  8917                           ;ModbusRtu.c: 930: return EXC_ADDR_RANGE;
  8918  000A28  0E02               	movlw	2
  8919                           
  8920                           ; BSR set to: 1
  8921  000A2A  D043               	goto	l869
  8922  000A2C                     l7547:
  8923  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  8924                           
  8925                           ; BSR set to: 1
  8926                           ;ModbusRtu.c: 934: if(_au8Buffer[COM_COM_ID] != 0x7F
  8927                           ;ModbusRtu.c: 935: && _au8Buffer[COM_COM_ID] != 0x01
  8928                           ;ModbusRtu.c: 936: && _au8Buffer[COM_COM_ID] != 0x10)
  8929  000A2E  0E7F               	movlw	127
  8930  000A30  0101               	movlb	1	; () banked
  8931  000A32  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8932  000A34  B4D8               	btfsc	status,2,c
  8933  000A36  D039               	goto	l882
  8934                           
  8935                           ; BSR set to: 1
  8936  000A38  0101               	movlb	1	; () banked
  8937  000A3A  052C               	decf	(__au8Buffer+2)& (0+255),w,b
  8938  000A3C  B4D8               	btfsc	status,2,c
  8939  000A3E  D035               	goto	l882
  8940                           
  8941                           ; BSR set to: 1
  8942  000A40  0E10               	movlw	16
  8943  000A42  0101               	movlb	1	; () banked
  8944  000A44  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8945  000A46  B4D8               	btfsc	status,2,c
  8946  000A48  D030               	goto	l882
  8947  000A4A                     l7553:
  8948  000A4A  FFFF               	dw	65535	; assembler added errata NOP
  8949                           
  8950                           ; BSR set to: 1
  8951                           ;ModbusRtu.c: 937: return EXC_REGS_QUANT;
  8952  000A4C  0E03               	movlw	3
  8953                           
  8954                           ; BSR set to: 1
  8955  000A4E  D031               	goto	l869
  8956  000A50                     l7559:
  8957  000A50  FFFF               	dw	65535	; assembler added errata NOP
  8958  000A52  0101               	movlb	1	; () banked
  8959  000A54  512B               	movf	(__au8Buffer+1)& (0+255),w,b
  8960                           
  8961                           ; Switch size 1, requested type "space"
  8962                           ; Number of cases is 15, Range of values is 1 to 102
  8963                           ; switch strategies available:
  8964                           ; Name         Instructions Cycles
  8965                           ; simple_byte           46    24 (average)
  8966                           ;	Chosen strategy is simple_byte
  8967  000A56  0A01               	xorlw	1	; case 1
  8968  000A58  B4D8               	btfsc	status,2,c
  8969  000A5A  D697               	goto	l7429
  8970  000A5C  0A03               	xorlw	3	; case 2
  8971  000A5E  B4D8               	btfsc	status,2,c
  8972  000A60  D694               	goto	l7429
  8973  000A62  0A01               	xorlw	1	; case 3
  8974  000A64  B4D8               	btfsc	status,2,c
  8975  000A66  D726               	goto	l7483
  8976  000A68  0A07               	xorlw	7	; case 4
  8977  000A6A  B4D8               	btfsc	status,2,c
  8978  000A6C  D6FC               	goto	l7471
  8979  000A6E  0A01               	xorlw	1	; case 5
  8980  000A70  B4D8               	btfsc	status,2,c
  8981  000A72  D6C3               	goto	l7445
  8982  000A74  0A03               	xorlw	3	; case 6
  8983  000A76  B4D8               	btfsc	status,2,c
  8984  000A78  D6E1               	goto	l7461
  8985  000A7A  0A09               	xorlw	9	; case 15
  8986  000A7C  B4D8               	btfsc	status,2,c
  8987  000A7E  D685               	goto	l7429
  8988  000A80  0A1F               	xorlw	31	; case 16
  8989  000A82  B4D8               	btfsc	status,2,c
  8990  000A84  D717               	goto	l7483
  8991  000A86  0A01               	xorlw	1	; case 17
  8992  000A88  B4D8               	btfsc	status,2,c
  8993  000A8A  D00F               	goto	l882
  8994  000A8C  0A05               	xorlw	5	; case 20
  8995  000A8E  B4D8               	btfsc	status,2,c
  8996  000A90  D733               	goto	l7495
  8997  000A92  0A01               	xorlw	1	; case 21
  8998  000A94  B4D8               	btfsc	status,2,c
  8999  000A96  D73D               	goto	l7503
  9000  000A98  0A3E               	xorlw	62	; case 43
  9001  000A9A  B4D8               	btfsc	status,2,c
  9002  000A9C  D7A0               	goto	l7523
  9003  000A9E  0A4F               	xorlw	79	; case 100
  9004  000AA0  B4D8               	btfsc	status,2,c
  9005  000AA2  D7C4               	goto	l7547
  9006  000AA4  0A01               	xorlw	1	; case 101
  9007  000AA6  A4D8               	btfss	status,2,c
  9008  000AA8  0A03               	xorlw	3	; case 102
  9009  000AAA                     l882:
  9010  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  9011                           
  9012                           ;ModbusRtu.c: 944: _lastFunction = _au8Buffer[ FUNC ];
  9013  000AAC  C12B  F05D         	movff	__au8Buffer+1,__lastFunction
  9014                           
  9015                           ;ModbusRtu.c: 945: return 0;
  9016  000AB0  0E00               	movlw	0
  9017  000AB2                     l869:
  9018  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  9019  000AB4  0012               	return		;funcret
  9020  000AB6  FFFF               	dw	65535	; errata NOP
  9021  000AB8                     __end_of_ModbusValidateRequest:
  9022                           	opt stack 0
  9023                           tblptru	equ	0xFF8
  9024                           tblptrh	equ	0xFF7
  9025                           tblptrl	equ	0xFF6
  9026                           tablat	equ	0xFF5
  9027                           prodh	equ	0xFF4
  9028                           prodl	equ	0xFF3
  9029                           intcon	equ	0xFF2
  9030                           postinc0	equ	0xFEE
  9031                           wreg	equ	0xFE8
  9032                           postdec1	equ	0xFE5
  9033                           fsr1h	equ	0xFE2
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _CheckFunc20 *****************
  9043 ;; Defined at:
  9044 ;;		line 786 in file "ModbusRtu.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  recLenBytes     4   46[COMRAM] unsigned long 
  9049 ;;  startAddrByt    4   40[COMRAM] unsigned long 
  9050 ;;  offset          1   51[COMRAM] unsigned char 
  9051 ;;  bytesCount      1   50[COMRAM] unsigned char 
  9052 ;;  resultLen       1   45[COMRAM] unsigned char 
  9053 ;;  reqCount        1   44[COMRAM] unsigned char 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      unsigned char 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9063 ;;      Params:         0       0       0       0       0       0       0
  9064 ;;      Locals:        12       0       0       0       0       0       0
  9065 ;;      Temps:          8       0       0       0       0       0       0
  9066 ;;      Totals:        20       0       0       0       0       0       0
  9067 ;;Total ram usage:       20 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    2
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_ModbusValidateRequest
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text38
  9078  001D0A                     __ptext38:
  9079                           	opt stack 0
  9080  001D0A                     _CheckFunc20:
  9081                           	opt stack 26
  9082                           
  9083                           ;incstack = 0
  9084  001D0A  FFFF               	dw	65535
  9085                           
  9086                           ;ModbusRtu.c: 788: uint8_t bytesCount = _au8Buffer[ FILE_DATA_LEN ];
  9087  001D0C  C12C  F033         	movff	__au8Buffer+2,CheckFunc20@bytesCount
  9088                           
  9089                           ;ModbusRtu.c: 789: if(bytesCount < 0x07 || bytesCount > 0xF5)
  9090  001D10  0E06               	movlw	6
  9091  001D12  6433               	cpfsgt	CheckFunc20@bytesCount,c
  9092  001D14  D003               	goto	l7173
  9093  001D16  0EF5               	movlw	245
  9094  001D18  6433               	cpfsgt	CheckFunc20@bytesCount,c
  9095  001D1A  D003               	goto	l7177
  9096  001D1C                     l7173:
  9097  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  9098                           
  9099                           ;ModbusRtu.c: 790: return EXC_REGS_QUANT;
  9100  001D1E  0E03               	movlw	3
  9101  001D20  D0E0               	goto	l855
  9102  001D22                     l7177:
  9103  001D22  FFFF               	dw	65535	; assembler added errata NOP
  9104                           
  9105                           ;ModbusRtu.c: 792: uint8_t offset = 0;
  9106  001D24  0E00               	movlw	0
  9107  001D26  6E34               	movwf	CheckFunc20@offset,c
  9108                           
  9109                           ;ModbusRtu.c: 793: uint8_t reqCount = 0;
  9110  001D28  0E00               	movlw	0
  9111  001D2A  6E2D               	movwf	CheckFunc20@reqCount,c
  9112                           
  9113                           ;ModbusRtu.c: 794: uint8_t resultLen = 0;
  9114  001D2C  0E00               	movlw	0
  9115  001D2E  6E2E               	movwf	CheckFunc20@resultLen,c
  9116                           
  9117                           ;ModbusRtu.c: 795: while(offset < bytesCount)
  9118  001D30  D0D2               	goto	l7217
  9119  001D32                     l7179:
  9120  001D32  FFFF               	dw	65535	; assembler added errata NOP
  9121                           
  9122                           ;ModbusRtu.c: 796: {
  9123                           ;ModbusRtu.c: 797: if (_au8Buffer[offset + FILE_REF_TYPE ] != 6)
  9124  001D34  5034               	movf	CheckFunc20@offset,w,c
  9125  001D36  6E21               	movwf	??_CheckFunc20& (0+255),c
  9126  001D38  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9127  001D3A  0E03               	movlw	3
  9128  001D3C  2621               	addwf	??_CheckFunc20,f,c
  9129  001D3E  0E00               	movlw	0
  9130  001D40  2222               	addwfc	??_CheckFunc20+1,f,c
  9131  001D42  0E2A               	movlw	low __au8Buffer
  9132  001D44  2421               	addwf	??_CheckFunc20,w,c
  9133  001D46  6ED9               	movwf	fsr2l,c
  9134  001D48  0E01               	movlw	high __au8Buffer
  9135  001D4A  2022               	addwfc	??_CheckFunc20+1,w,c
  9136  001D4C  6EDA               	movwf	fsr2h,c
  9137  001D4E  0E06               	movlw	6
  9138  001D50  18DE               	xorwf	postinc2,w,c
  9139  001D52  A4D8               	btfss	status,2,c
  9140  001D54  D0BD               	goto	l7213
  9141                           
  9142                           ;ModbusRtu.c: 800: if (_au8Buffer[offset + FILE_NUM_HI ] != 0x00 || _au8Buffer[offset + 
      +                          FILE_NUM_LO ] != 0x01)
  9143                           
  9144                           ;ModbusRtu.c: 798: return EXC_ADDR_RANGE;
  9145  001D56  5034               	movf	CheckFunc20@offset,w,c
  9146  001D58  6E21               	movwf	??_CheckFunc20& (0+255),c
  9147  001D5A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9148  001D5C  0E04               	movlw	4
  9149  001D5E  2621               	addwf	??_CheckFunc20,f,c
  9150  001D60  0E00               	movlw	0
  9151  001D62  2222               	addwfc	??_CheckFunc20+1,f,c
  9152  001D64  0E2A               	movlw	low __au8Buffer
  9153  001D66  2421               	addwf	??_CheckFunc20,w,c
  9154  001D68  6ED9               	movwf	fsr2l,c
  9155  001D6A  0E01               	movlw	high __au8Buffer
  9156  001D6C  2022               	addwfc	??_CheckFunc20+1,w,c
  9157  001D6E  6EDA               	movwf	fsr2h,c
  9158  001D70  50DF               	movf	indf2,w,c
  9159  001D72  A4D8               	btfss	status,2,c
  9160  001D74  D0AD               	goto	l7213
  9161  001D76  5034               	movf	CheckFunc20@offset,w,c
  9162  001D78  6E21               	movwf	??_CheckFunc20& (0+255),c
  9163  001D7A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9164  001D7C  0E05               	movlw	5
  9165  001D7E  2621               	addwf	??_CheckFunc20,f,c
  9166  001D80  0E00               	movlw	0
  9167  001D82  2222               	addwfc	??_CheckFunc20+1,f,c
  9168  001D84  0E2A               	movlw	low __au8Buffer
  9169  001D86  2421               	addwf	??_CheckFunc20,w,c
  9170  001D88  6ED9               	movwf	fsr2l,c
  9171  001D8A  0E01               	movlw	high __au8Buffer
  9172  001D8C  2022               	addwfc	??_CheckFunc20+1,w,c
  9173  001D8E  6EDA               	movwf	fsr2h,c
  9174  001D90  04DE               	decf	postinc2,w,c
  9175  001D92  A4D8               	btfss	status,2,c
  9176  001D94  D09D               	goto	l7213
  9177                           
  9178                           ;ModbusRtu.c: 802: unsigned long startAddrBytes = ((_au8Buffer[offset + FILE_REC_HI ] <<
      +                           8) | _au8Buffer[offset + FILE_REC_LO ]) << 1;
  9179                           
  9180                           ;ModbusRtu.c: 801: return EXC_ADDR_RANGE;
  9181  001D96  5034               	movf	CheckFunc20@offset,w,c
  9182  001D98  6E21               	movwf	??_CheckFunc20& (0+255),c
  9183  001D9A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9184  001D9C  0E06               	movlw	6
  9185  001D9E  2621               	addwf	??_CheckFunc20,f,c
  9186  001DA0  0E00               	movlw	0
  9187  001DA2  2222               	addwfc	??_CheckFunc20+1,f,c
  9188  001DA4  0E2A               	movlw	low __au8Buffer
  9189  001DA6  2421               	addwf	??_CheckFunc20,w,c
  9190  001DA8  6ED9               	movwf	fsr2l,c
  9191  001DAA  0E01               	movlw	high __au8Buffer
  9192  001DAC  2022               	addwfc	??_CheckFunc20+1,w,c
  9193  001DAE  6EDA               	movwf	fsr2h,c
  9194  001DB0  50DF               	movf	indf2,w,c
  9195  001DB2  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9196  001DB4  5023               	movf	??_CheckFunc20+2,w,c
  9197  001DB6  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9198  001DB8  6A24               	clrf	(??_CheckFunc20+3)& (0+255),c
  9199  001DBA  5034               	movf	CheckFunc20@offset,w,c
  9200  001DBC  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9201  001DBE  6A27               	clrf	(??_CheckFunc20+6)& (0+255),c
  9202  001DC0  0E07               	movlw	7
  9203  001DC2  2626               	addwf	??_CheckFunc20+5,f,c
  9204  001DC4  0E00               	movlw	0
  9205  001DC6  2227               	addwfc	??_CheckFunc20+6,f,c
  9206  001DC8  0E2A               	movlw	low __au8Buffer
  9207  001DCA  2426               	addwf	??_CheckFunc20+5,w,c
  9208  001DCC  6ED9               	movwf	fsr2l,c
  9209  001DCE  0E01               	movlw	high __au8Buffer
  9210  001DD0  2027               	addwfc	??_CheckFunc20+6,w,c
  9211  001DD2  6EDA               	movwf	fsr2h,c
  9212  001DD4  50DF               	movf	indf2,w,c
  9213  001DD6  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9214  001DD8  5028               	movf	??_CheckFunc20+7,w,c
  9215  001DDA  1224               	iorwf	??_CheckFunc20+3,f,c
  9216  001DDC  0E00               	movlw	0
  9217  001DDE  1225               	iorwf	??_CheckFunc20+4,f,c
  9218  001DE0  90D8               	bcf	status,0,c
  9219  001DE2  3624               	rlcf	??_CheckFunc20+3,f,c
  9220  001DE4  3625               	rlcf	??_CheckFunc20+4,f,c
  9221  001DE6  C024  F029         	movff	??_CheckFunc20+3,CheckFunc20@startAddrBytes
  9222  001DEA  C025  F02A         	movff	??_CheckFunc20+4,CheckFunc20@startAddrBytes+1
  9223  001DEE  0E00               	movlw	0
  9224  001DF0  BE2A               	btfsc	CheckFunc20@startAddrBytes+1,7,c
  9225  001DF2  0EFF               	movlw	-1
  9226  001DF4  6E2B               	movwf	CheckFunc20@startAddrBytes+2,c
  9227  001DF6  6E2C               	movwf	CheckFunc20@startAddrBytes+3,c
  9228                           
  9229                           ;ModbusRtu.c: 803: unsigned long recLenBytes = ((_au8Buffer[offset + FILE_REC_LEN_HI ] <
      +                          < 8) | _au8Buffer[offset + FILE_REC_LEN_LO ]) << 1;
  9230  001DF8  5034               	movf	CheckFunc20@offset,w,c
  9231  001DFA  6E21               	movwf	??_CheckFunc20& (0+255),c
  9232  001DFC  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9233  001DFE  0E08               	movlw	8
  9234  001E00  2621               	addwf	??_CheckFunc20,f,c
  9235  001E02  0E00               	movlw	0
  9236  001E04  2222               	addwfc	??_CheckFunc20+1,f,c
  9237  001E06  0E2A               	movlw	low __au8Buffer
  9238  001E08  2421               	addwf	??_CheckFunc20,w,c
  9239  001E0A  6ED9               	movwf	fsr2l,c
  9240  001E0C  0E01               	movlw	high __au8Buffer
  9241  001E0E  2022               	addwfc	??_CheckFunc20+1,w,c
  9242  001E10  6EDA               	movwf	fsr2h,c
  9243  001E12  50DF               	movf	indf2,w,c
  9244  001E14  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9245  001E16  5023               	movf	??_CheckFunc20+2,w,c
  9246  001E18  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9247  001E1A  6A24               	clrf	(??_CheckFunc20+3)& (0+255),c
  9248  001E1C  5034               	movf	CheckFunc20@offset,w,c
  9249  001E1E  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9250  001E20  6A27               	clrf	(??_CheckFunc20+6)& (0+255),c
  9251  001E22  0E09               	movlw	9
  9252  001E24  2626               	addwf	??_CheckFunc20+5,f,c
  9253  001E26  0E00               	movlw	0
  9254  001E28  2227               	addwfc	??_CheckFunc20+6,f,c
  9255  001E2A  0E2A               	movlw	low __au8Buffer
  9256  001E2C  2426               	addwf	??_CheckFunc20+5,w,c
  9257  001E2E  6ED9               	movwf	fsr2l,c
  9258  001E30  0E01               	movlw	high __au8Buffer
  9259  001E32  2027               	addwfc	??_CheckFunc20+6,w,c
  9260  001E34  6EDA               	movwf	fsr2h,c
  9261  001E36  50DF               	movf	indf2,w,c
  9262  001E38  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9263  001E3A  5028               	movf	??_CheckFunc20+7,w,c
  9264  001E3C  1224               	iorwf	??_CheckFunc20+3,f,c
  9265  001E3E  0E00               	movlw	0
  9266  001E40  1225               	iorwf	??_CheckFunc20+4,f,c
  9267  001E42  90D8               	bcf	status,0,c
  9268  001E44  3624               	rlcf	??_CheckFunc20+3,f,c
  9269  001E46  3625               	rlcf	??_CheckFunc20+4,f,c
  9270  001E48  C024  F02F         	movff	??_CheckFunc20+3,CheckFunc20@recLenBytes
  9271  001E4C  C025  F030         	movff	??_CheckFunc20+4,CheckFunc20@recLenBytes+1
  9272  001E50  0E00               	movlw	0
  9273  001E52  BE30               	btfsc	CheckFunc20@recLenBytes+1,7,c
  9274  001E54  0EFF               	movlw	-1
  9275  001E56  6E31               	movwf	CheckFunc20@recLenBytes+2,c
  9276  001E58  6E32               	movwf	CheckFunc20@recLenBytes+3,c
  9277                           
  9278                           ;ModbusRtu.c: 804: if (startAddrBytes + recLenBytes >= 256)
  9279  001E5A  502F               	movf	CheckFunc20@recLenBytes,w,c
  9280  001E5C  2429               	addwf	CheckFunc20@startAddrBytes,w,c
  9281  001E5E  6E21               	movwf	??_CheckFunc20& (0+255),c
  9282  001E60  5030               	movf	CheckFunc20@recLenBytes+1,w,c
  9283  001E62  202A               	addwfc	CheckFunc20@startAddrBytes+1,w,c
  9284  001E64  6E22               	movwf	(??_CheckFunc20+1)& (0+255),c
  9285  001E66  5031               	movf	CheckFunc20@recLenBytes+2,w,c
  9286  001E68  202B               	addwfc	CheckFunc20@startAddrBytes+2,w,c
  9287  001E6A  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9288  001E6C  5032               	movf	CheckFunc20@recLenBytes+3,w,c
  9289  001E6E  202C               	addwfc	CheckFunc20@startAddrBytes+3,w,c
  9290  001E70  6E24               	movwf	(??_CheckFunc20+3)& (0+255),c
  9291  001E72  5024               	movf	??_CheckFunc20+3,w,c
  9292  001E74  1023               	iorwf	??_CheckFunc20+2,w,c
  9293  001E76  E12C               	bnz	l7213
  9294  001E78  0422               	decf	??_CheckFunc20+1,w,c
  9295  001E7A  B0D8               	btfsc	status,0,c
  9296  001E7C  D029               	goto	l7213
  9297                           
  9298                           ;ModbusRtu.c: 806: if(resultLen + recLenBytes + 2 > 140 - 3)
  9299                           
  9300                           ;ModbusRtu.c: 805: return EXC_ADDR_RANGE;
  9301  001E7E  502E               	movf	CheckFunc20@resultLen,w,c
  9302  001E80  242F               	addwf	CheckFunc20@recLenBytes,w,c
  9303  001E82  6E21               	movwf	??_CheckFunc20& (0+255),c
  9304  001E84  0E00               	movlw	0
  9305  001E86  2030               	addwfc	CheckFunc20@recLenBytes+1,w,c
  9306  001E88  6E22               	movwf	(??_CheckFunc20+1)& (0+255),c
  9307  001E8A  0E00               	movlw	0
  9308  001E8C  2031               	addwfc	CheckFunc20@recLenBytes+2,w,c
  9309  001E8E  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9310  001E90  0E00               	movlw	0
  9311  001E92  2032               	addwfc	CheckFunc20@recLenBytes+3,w,c
  9312  001E94  6E24               	movwf	(??_CheckFunc20+3)& (0+255),c
  9313  001E96  0E02               	movlw	2
  9314  001E98  2421               	addwf	??_CheckFunc20,w,c
  9315  001E9A  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9316  001E9C  0E00               	movlw	0
  9317  001E9E  2022               	addwfc	??_CheckFunc20+1,w,c
  9318  001EA0  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9319  001EA2  0E00               	movlw	0
  9320  001EA4  2023               	addwfc	??_CheckFunc20+2,w,c
  9321  001EA6  6E27               	movwf	(??_CheckFunc20+6)& (0+255),c
  9322  001EA8  0E00               	movlw	0
  9323  001EAA  2024               	addwfc	??_CheckFunc20+3,w,c
  9324  001EAC  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9325  001EAE  5028               	movf	??_CheckFunc20+7,w,c
  9326  001EB0  1027               	iorwf	??_CheckFunc20+6,w,c
  9327  001EB2  1026               	iorwf	??_CheckFunc20+5,w,c
  9328  001EB4  E10D               	bnz	l7213
  9329  001EB6  0E8A               	movlw	138
  9330  001EB8  5C25               	subwf	??_CheckFunc20+4,w,c
  9331  001EBA  B0D8               	btfsc	status,0,c
  9332  001EBC  D009               	goto	l7213
  9333                           
  9334                           ;ModbusRtu.c: 808: resultLen += recLenBytes + 2;
  9335                           
  9336                           ;ModbusRtu.c: 807: return EXC_ADDR_RANGE;
  9337  001EBE  502F               	movf	CheckFunc20@recLenBytes,w,c
  9338  001EC0  0F02               	addlw	2
  9339  001EC2  262E               	addwf	CheckFunc20@resultLen,f,c
  9340                           
  9341                           ;ModbusRtu.c: 809: offset += 7;
  9342  001EC4  0E07               	movlw	7
  9343  001EC6  2634               	addwf	CheckFunc20@offset,f,c
  9344                           
  9345                           ;ModbusRtu.c: 810: reqCount++;
  9346  001EC8  2A2D               	incf	CheckFunc20@reqCount,f,c
  9347                           
  9348                           ;ModbusRtu.c: 812: if(reqCount > 5)
  9349  001ECA  0E05               	movlw	5
  9350  001ECC  642D               	cpfsgt	CheckFunc20@reqCount,c
  9351  001ECE  D003               	goto	l7217
  9352  001ED0                     l7213:
  9353  001ED0  FFFF               	dw	65535	; assembler added errata NOP
  9354                           
  9355                           ;ModbusRtu.c: 813: return EXC_ADDR_RANGE;
  9356  001ED2  0E02               	movlw	2
  9357  001ED4  D006               	goto	l855
  9358  001ED6                     l7217:
  9359  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  9360  001ED8  5033               	movf	CheckFunc20@bytesCount,w,c
  9361  001EDA  5C34               	subwf	CheckFunc20@offset,w,c
  9362  001EDC  A0D8               	btfss	status,0,c
  9363  001EDE  D729               	goto	l7179
  9364                           
  9365                           ;ModbusRtu.c: 814: }
  9366                           ;ModbusRtu.c: 815: return 0;
  9367  001EE0  0E00               	movlw	0
  9368  001EE2                     l855:
  9369  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  9370  001EE4  0012               	return		;funcret
  9371  001EE6  FFFF               	dw	65535	; errata NOP
  9372  001EE8                     __end_of_CheckFunc20:
  9373                           	opt stack 0
  9374                           tblptru	equ	0xFF8
  9375                           tblptrh	equ	0xFF7
  9376                           tblptrl	equ	0xFF6
  9377                           tablat	equ	0xFF5
  9378                           prodh	equ	0xFF4
  9379                           prodl	equ	0xFF3
  9380                           intcon	equ	0xFF2
  9381                           postinc0	equ	0xFEE
  9382                           wreg	equ	0xFE8
  9383                           postdec1	equ	0xFE5
  9384                           fsr1h	equ	0xFE2
  9385                           fsr1l	equ	0xFE1
  9386                           indf2	equ	0xFDF
  9387                           postinc2	equ	0xFDE
  9388                           postdec2	equ	0xFDD
  9389                           fsr2h	equ	0xFDA
  9390                           fsr2l	equ	0xFD9
  9391                           status	equ	0xFD8
  9392                           
  9393 ;; *************** function _ModbusProcess_FC7 *****************
  9394 ;; Defined at:
  9395 ;;		line 1129 in file "ModbusRtu.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      unsigned char 
  9402 ;; Registers used:
  9403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9409 ;;      Params:         0       0       0       0       0       0       0
  9410 ;;      Locals:         1       0       0       0       0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0
  9412 ;;      Totals:         1       0       0       0       0       0       0
  9413 ;;Total ram usage:        1 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    4
  9416 ;; This function calls:
  9417 ;;		_ModbusSendTxBuffer
  9418 ;; This function is called by:
  9419 ;;		_ModbusPoll
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text39
  9424  000266                     __ptext39:
  9425                           	opt stack 0
  9426  000266                     _ModbusProcess_FC7:
  9427                           	opt stack 25
  9428                           
  9429                           ;incstack = 0
  9430  000266  FFFF               	dw	65535
  9431                           
  9432                           ;ModbusRtu.c: 1131: _au8Buffer[ 2 ] = _exceptionStatus;
  9433  000268  C049  F12C         	movff	__exceptionStatus,__au8Buffer+2
  9434                           
  9435                           ;ModbusRtu.c: 1132: _u8BufferSize = 3;
  9436  00026C  0E03               	movlw	3
  9437  00026E  6E53               	movwf	__u8BufferSize,c
  9438                           
  9439                           ;ModbusRtu.c: 1133: uint8_t u8CopyBufferSize = _u8BufferSize;
  9440  000270  C053  F030         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  9441                           
  9442                           ;ModbusRtu.c: 1134: ModbusSendTxBuffer();
  9443  000274  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9444                           
  9445                           ;ModbusRtu.c: 1135: return u8CopyBufferSize;
  9446  000278  5030               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  9447  00027A  0012               	return		;funcret
  9448  00027C  FFFF               	dw	65535	; errata NOP
  9449  00027E                     __end_of_ModbusProcess_FC7:
  9450                           	opt stack 0
  9451                           tblptru	equ	0xFF8
  9452                           tblptrh	equ	0xFF7
  9453                           tblptrl	equ	0xFF6
  9454                           tablat	equ	0xFF5
  9455                           prodh	equ	0xFF4
  9456                           prodl	equ	0xFF3
  9457                           intcon	equ	0xFF2
  9458                           postinc0	equ	0xFEE
  9459                           wreg	equ	0xFE8
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _ModbusProcess_FC6 *****************
  9471 ;; Defined at:
  9472 ;;		line 1109 in file "ModbusRtu.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  regs            2   47[COMRAM] PTR unsigned short 
  9475 ;;		 -> _MODBUSHoldingRegs(30), 
  9476 ;;  u8size          1   49[COMRAM] unsigned char 
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;  u16add          2    3[BANK0 ] unsigned short 
  9479 ;;  u16val          2    0[BANK0 ] unsigned short 
  9480 ;;  u8CopyBuffer    1    2[BANK0 ] unsigned char 
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      unsigned char 
  9483 ;; Registers used:
  9484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9490 ;;      Params:         3       0       0       0       0       0       0
  9491 ;;      Locals:         0       5       0       0       0       0       0
  9492 ;;      Temps:          2       0       0       0       0       0       0
  9493 ;;      Totals:         5       5       0       0       0       0       0
  9494 ;;Total ram usage:       10 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:    4
  9497 ;; This function calls:
  9498 ;;		_ModbusSendTxBuffer
  9499 ;; This function is called by:
  9500 ;;		_ModbusPoll
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text40
  9505  003980                     __ptext40:
  9506                           	opt stack 0
  9507  003980                     _ModbusProcess_FC6:
  9508                           	opt stack 25
  9509                           
  9510                           ;incstack = 0
  9511  003980  FFFF               	dw	65535
  9512                           
  9513                           ;ModbusRtu.c: 1111: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  9514  003982  0101               	movlb	1	; () banked
  9515  003984  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  9516  003986  6E33               	movwf	??_ModbusProcess_FC6& (0+255),c
  9517  003988  0101               	movlb	1	; () banked
  9518  00398A  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  9519  00398C  0100               	movlb	0	; () banked
  9520  00398E  6F83               	movwf	ModbusProcess_FC6@u16add& (0+255),b
  9521  003990  C033  F084         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;ModbusRtu.c: 1112: _lastAddress = u16add;
  9525  003994  C083  F0E2         	movff	ModbusProcess_FC6@u16add,__lastAddress
  9526  003998  C084  F0E3         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  9527                           
  9528                           ;ModbusRtu.c: 1113: _lastCount = 1;
  9529  00399C  0E00               	movlw	0
  9530  00399E  0100               	movlb	0	; () banked
  9531  0039A0  6FE5               	movwf	(__lastCount+1)& (0+255),b
  9532  0039A2  0E01               	movlw	1
  9533  0039A4  6FE4               	movwf	__lastCount& (0+255),b
  9534                           
  9535                           ;ModbusRtu.c: 1114: uint8_t u8CopyBufferSize;
  9536                           ;ModbusRtu.c: 1115: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  9537  0039A6  0101               	movlb	1	; () banked
  9538  0039A8  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  9539  0039AA  6E33               	movwf	??_ModbusProcess_FC6& (0+255),c
  9540  0039AC  0101               	movlb	1	; () banked
  9541  0039AE  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  9542  0039B0  0100               	movlb	0	; () banked
  9543  0039B2  6F80               	movwf	ModbusProcess_FC6@u16val& (0+255),b
  9544  0039B4  C033  F081         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;ModbusRtu.c: 1117: regs[ u16add ] = u16val;
  9548  0039B8  90D8               	bcf	status,0,c
  9549  0039BA  0100               	movlb	0	; () banked
  9550  0039BC  3583               	rlcf	ModbusProcess_FC6@u16add& (0+255),w,b
  9551  0039BE  6ED9               	movwf	fsr2l,c
  9552  0039C0  0100               	movlb	0	; () banked
  9553  0039C2  3584               	rlcf	(ModbusProcess_FC6@u16add+1)& (0+255),w,b
  9554  0039C4  6EDA               	movwf	fsr2h,c
  9555  0039C6  5030               	movf	ModbusProcess_FC6@regs,w,c
  9556  0039C8  26D9               	addwf	fsr2l,f,c
  9557  0039CA  5031               	movf	ModbusProcess_FC6@regs+1,w,c
  9558  0039CC  22DA               	addwfc	fsr2h,f,c
  9559  0039CE  C080  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  9560  0039D2  C081  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;ModbusRtu.c: 1120: _u8BufferSize = RESPONSE_SIZE;
  9564  0039D6  0E06               	movlw	6
  9565  0039D8  6E53               	movwf	__u8BufferSize,c
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;ModbusRtu.c: 1122: u8CopyBufferSize = _u8BufferSize + 2;
  9569  0039DA  5053               	movf	__u8BufferSize,w,c
  9570  0039DC  0F02               	addlw	2
  9571  0039DE  0100               	movlb	0	; () banked
  9572  0039E0  6F82               	movwf	ModbusProcess_FC6@u8CopyBufferSize& (0+255),b
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;ModbusRtu.c: 1123: ModbusSendTxBuffer();
  9576  0039E2  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9577                           
  9578                           ;ModbusRtu.c: 1125: return u8CopyBufferSize;
  9579  0039E6  0100               	movlb	0	; () banked
  9580  0039E8  5182               	movf	ModbusProcess_FC6@u8CopyBufferSize& (0+255),w,b
  9581                           
  9582                           ; BSR set to: 0
  9583                           
  9584                           ; BSR set to: 0
  9585  0039EA  0012               	return		;funcret
  9586  0039EC  FFFF               	dw	65535	; errata NOP
  9587  0039EE                     __end_of_ModbusProcess_FC6:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           postinc0	equ	0xFEE
  9597                           wreg	equ	0xFE8
  9598                           postdec1	equ	0xFE5
  9599                           fsr1h	equ	0xFE2
  9600                           fsr1l	equ	0xFE1
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           postdec2	equ	0xFDD
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _ModbusProcess_FC5 *****************
  9609 ;; Defined at:
  9610 ;;		line 1074 in file "ModbusRtu.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  regs            2   47[COMRAM] PTR unsigned short 
  9613 ;;		 -> _MODBUSCoils(2), 
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;  u16coil         2    1[BANK0 ] unsigned short 
  9616 ;;  u8currentBit    1    3[BANK0 ] unsigned char 
  9617 ;;  u8CopyBuffer    1    0[BANK0 ] unsigned char 
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      unsigned char 
  9620 ;; Registers used:
  9621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9627 ;;      Params:         2       0       0       0       0       0       0
  9628 ;;      Locals:         0       4       0       0       0       0       0
  9629 ;;      Temps:          5       0       0       0       0       0       0
  9630 ;;      Totals:         7       4       0       0       0       0       0
  9631 ;;Total ram usage:       11 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    4
  9634 ;; This function calls:
  9635 ;;		_ModbusSendTxBuffer
  9636 ;; This function is called by:
  9637 ;;		_ModbusPoll
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           	psect	text41
  9642  00338A                     __ptext41:
  9643                           	opt stack 0
  9644  00338A                     _ModbusProcess_FC5:
  9645                           	opt stack 25
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;incstack = 0
  9649  00338A  FFFF               	dw	65535
  9650                           
  9651                           ;ModbusRtu.c: 1077: uint8_t u8currentBit;
  9652                           ;ModbusRtu.c: 1078: uint8_t u8CopyBufferSize;
  9653                           ;ModbusRtu.c: 1079: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  9654  00338C  0101               	movlb	1	; () banked
  9655  00338E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  9656  003390  6E32               	movwf	??_ModbusProcess_FC5& (0+255),c
  9657  003392  0101               	movlb	1	; () banked
  9658  003394  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  9659  003396  0100               	movlb	0	; () banked
  9660  003398  6F81               	movwf	ModbusProcess_FC5@u16coil& (0+255),b
  9661  00339A  C032  F082         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;ModbusRtu.c: 1080: _lastAddress = u16coil;
  9665  00339E  C081  F0E2         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  9666  0033A2  C082  F0E3         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  9667                           
  9668                           ;ModbusRtu.c: 1081: _lastCount = 1;
  9669  0033A6  0E00               	movlw	0
  9670  0033A8  0100               	movlb	0	; () banked
  9671  0033AA  6FE5               	movwf	(__lastCount+1)& (0+255),b
  9672  0033AC  0E01               	movlw	1
  9673  0033AE  6FE4               	movwf	__lastCount& (0+255),b
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;ModbusRtu.c: 1084: u8currentBit = (uint8_t) (u16coil % 16);
  9677  0033B0  0100               	movlb	0	; () banked
  9678  0033B2  5181               	movf	ModbusProcess_FC5@u16coil& (0+255),w,b
  9679  0033B4  0B0F               	andlw	15
  9680  0033B6  0100               	movlb	0	; () banked
  9681  0033B8  6F83               	movwf	ModbusProcess_FC5@u8currentBit& (0+255),b
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;ModbusRtu.c: 1087: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  9685  0033BA  0101               	movlb	1	; () banked
  9686  0033BC  292E               	incf	(__au8Buffer+4)& (0+255),w,b
  9687  0033BE  A4D8               	btfss	status,2,c
  9688  0033C0  D018               	goto	l7665
  9689                           
  9690                           ; BSR set to: 1
  9691  0033C2  C083  F032         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  9692  0033C6  0E01               	movlw	1
  9693  0033C8  6E33               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  9694  0033CA  0E00               	movlw	0
  9695  0033CC  6E34               	movwf	(??_ModbusProcess_FC5+2)& (0+255),c
  9696  0033CE  2A32               	incf	??_ModbusProcess_FC5,f,c
  9697  0033D0  D004               	goto	u7144
  9698  0033D2                     u7145:
  9699  0033D2  FFFF               	dw	65535	; assembler added errata NOP
  9700  0033D4  90D8               	bcf	status,0,c
  9701  0033D6  3633               	rlcf	??_ModbusProcess_FC5+1,f,c
  9702  0033D8  3634               	rlcf	??_ModbusProcess_FC5+2,f,c
  9703  0033DA                     u7144:
  9704  0033DA  FFFF               	dw	65535	; assembler added errata NOP
  9705  0033DC  2E32               	decfsz	??_ModbusProcess_FC5,f,c
  9706  0033DE  D7F9               	goto	u7145
  9707  0033E0  C030  FFD9         	movff	ModbusProcess_FC5@regs,fsr2l
  9708  0033E4  C031  FFDA         	movff	ModbusProcess_FC5@regs+1,fsr2h
  9709  0033E8  5033               	movf	??_ModbusProcess_FC5+1,w,c
  9710  0033EA  12DE               	iorwf	postinc2,f,c
  9711  0033EC  5034               	movf	??_ModbusProcess_FC5+2,w,c
  9712  0033EE  12DD               	iorwf	postdec2,f,c
  9713  0033F0  D01C               	goto	l7667
  9714  0033F2                     l7665:
  9715  0033F2  FFFF               	dw	65535	; assembler added errata NOP
  9716  0033F4  C083  F032         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  9717  0033F8  0E01               	movlw	1
  9718  0033FA  6E33               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  9719  0033FC  0E00               	movlw	0
  9720  0033FE  6E34               	movwf	(??_ModbusProcess_FC5+2)& (0+255),c
  9721  003400  2A32               	incf	??_ModbusProcess_FC5,f,c
  9722  003402  D004               	goto	u7154
  9723  003404                     u7155:
  9724  003404  FFFF               	dw	65535	; assembler added errata NOP
  9725  003406  90D8               	bcf	status,0,c
  9726  003408  3633               	rlcf	??_ModbusProcess_FC5+1,f,c
  9727  00340A  3634               	rlcf	??_ModbusProcess_FC5+2,f,c
  9728  00340C                     u7154:
  9729  00340C  FFFF               	dw	65535	; assembler added errata NOP
  9730  00340E  2E32               	decfsz	??_ModbusProcess_FC5,f,c
  9731  003410  D7F9               	goto	u7155
  9732  003412  1C33               	comf	??_ModbusProcess_FC5+1,w,c
  9733  003414  6E35               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  9734  003416  1C34               	comf	??_ModbusProcess_FC5+2,w,c
  9735  003418  6E36               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  9736  00341A  C030  FFD9         	movff	ModbusProcess_FC5@regs,fsr2l
  9737  00341E  C031  FFDA         	movff	ModbusProcess_FC5@regs+1,fsr2h
  9738  003422  5035               	movf	??_ModbusProcess_FC5+3,w,c
  9739  003424  16DE               	andwf	postinc2,f,c
  9740  003426  5036               	movf	??_ModbusProcess_FC5+4,w,c
  9741  003428  16DD               	andwf	postdec2,f,c
  9742  00342A                     l7667:
  9743  00342A  FFFF               	dw	65535	; assembler added errata NOP
  9744                           
  9745                           ;ModbusRtu.c: 1094: _u8BufferSize = 6;
  9746  00342C  0E06               	movlw	6
  9747  00342E  6E53               	movwf	__u8BufferSize,c
  9748                           
  9749                           ;ModbusRtu.c: 1095: u8CopyBufferSize = _u8BufferSize + 2;
  9750  003430  5053               	movf	__u8BufferSize,w,c
  9751  003432  0F02               	addlw	2
  9752  003434  0100               	movlb	0	; () banked
  9753  003436  6F80               	movwf	ModbusProcess_FC5@u8CopyBufferSize& (0+255),b
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;ModbusRtu.c: 1096: ModbusSendTxBuffer();
  9757  003438  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9758                           
  9759                           ;ModbusRtu.c: 1098: return u8CopyBufferSize;
  9760  00343C  0100               	movlb	0	; () banked
  9761  00343E  5180               	movf	ModbusProcess_FC5@u8CopyBufferSize& (0+255),w,b
  9762                           
  9763                           ; BSR set to: 0
  9764                           
  9765                           ; BSR set to: 0
  9766  003440  0012               	return		;funcret
  9767  003442  FFFF               	dw	65535	; errata NOP
  9768  003444                     __end_of_ModbusProcess_FC5:
  9769                           	opt stack 0
  9770                           tblptru	equ	0xFF8
  9771                           tblptrh	equ	0xFF7
  9772                           tblptrl	equ	0xFF6
  9773                           tablat	equ	0xFF5
  9774                           prodh	equ	0xFF4
  9775                           prodl	equ	0xFF3
  9776                           intcon	equ	0xFF2
  9777                           postinc0	equ	0xFEE
  9778                           wreg	equ	0xFE8
  9779                           postdec1	equ	0xFE5
  9780                           fsr1h	equ	0xFE2
  9781                           fsr1l	equ	0xFE1
  9782                           indf2	equ	0xFDF
  9783                           postinc2	equ	0xFDE
  9784                           postdec2	equ	0xFDD
  9785                           fsr2h	equ	0xFDA
  9786                           fsr2l	equ	0xFD9
  9787                           status	equ	0xFD8
  9788                           
  9789 ;; *************** function _ModbusProcess_FC43 *****************
  9790 ;; Defined at:
  9791 ;;		line 1376 in file "ModbusRtu.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;		None
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  objId           1   49[COMRAM] unsigned char 
  9796 ;;  u8CopyBuffer    1   48[COMRAM] unsigned char 
  9797 ;;  devIdCode       1   47[COMRAM] unsigned char 
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      unsigned char 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9807 ;;      Params:         0       0       0       0       0       0       0
  9808 ;;      Locals:         3       0       0       0       0       0       0
  9809 ;;      Temps:          0       0       0       0       0       0       0
  9810 ;;      Totals:         3       0       0       0       0       0       0
  9811 ;;Total ram usage:        3 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    4
  9814 ;; This function calls:
  9815 ;;		_CopyStringToBuffer
  9816 ;;		_ModbusSendTxBuffer
  9817 ;; This function is called by:
  9818 ;;		_ModbusPoll
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           	psect	text42
  9823  001EE8                     __ptext42:
  9824                           	opt stack 0
  9825  001EE8                     _ModbusProcess_FC43:
  9826                           	opt stack 25
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;incstack = 0
  9830  001EE8  FFFF               	dw	65535
  9831                           
  9832                           ;ModbusRtu.c: 1378: uint8_t devIdCode = _au8Buffer[ 3 ];
  9833  001EEA  C12D  F030         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  9834                           
  9835                           ;ModbusRtu.c: 1386: uint8_t objId = _au8Buffer[ 4 ];
  9836  001EEE  C12E  F032         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  9837                           
  9838                           ;ModbusRtu.c: 1397: _au8Buffer[ 5 ] = 0x00;
  9839  001EF2  0E00               	movlw	0
  9840  001EF4  0101               	movlb	1	; () banked
  9841  001EF6  6F2F               	movwf	(__au8Buffer+5)& (0+255),b
  9842                           
  9843                           ;ModbusRtu.c: 1398: _au8Buffer[ 6 ] = 0x00;
  9844  001EF8  0E00               	movlw	0
  9845  001EFA  0101               	movlb	1	; () banked
  9846  001EFC  6F30               	movwf	(__au8Buffer+6)& (0+255),b
  9847                           
  9848                           ;ModbusRtu.c: 1400: _u8BufferSize = 8;
  9849  001EFE  0E08               	movlw	8
  9850  001F00  6E53               	movwf	__u8BufferSize,c
  9851                           
  9852                           ;ModbusRtu.c: 1401: switch(devIdCode)
  9853  001F02  D0CE               	goto	l7963
  9854  001F04                     l7909:
  9855  001F04  FFFF               	dw	65535	; assembler added errata NOP
  9856                           
  9857                           ;ModbusRtu.c: 1404: _au8Buffer[ 4 ] = 0x81;
  9858  001F06  0E81               	movlw	129
  9859  001F08  0101               	movlb	1	; () banked
  9860  001F0A  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9861                           
  9862                           ;ModbusRtu.c: 1405: _au8Buffer[ 7 ] = 3;
  9863  001F0C  0E03               	movlw	3
  9864  001F0E  0101               	movlb	1	; () banked
  9865  001F10  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9866                           
  9867                           ; BSR set to: 1
  9868                           ;ModbusRtu.c: 1406: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  9869  001F12  0E49               	movlw	low STR_1
  9870  001F14  6E21               	movwf	CopyStringToBuffer@src,c
  9871  001F16  0E06               	movlw	high STR_1
  9872  001F18  6E22               	movwf	CopyStringToBuffer@src+1,c
  9873  001F1A  0E06               	movlw	6
  9874  001F1C  6E23               	movwf	CopyStringToBuffer@len,c
  9875  001F1E  0E00               	movlw	0
  9876  001F20  EC3E  F01C         	call	_CopyStringToBuffer
  9877                           
  9878                           ;ModbusRtu.c: 1407: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  9879  001F24  0E40               	movlw	low STR_3
  9880  001F26  6E21               	movwf	CopyStringToBuffer@src,c
  9881  001F28  0E06               	movlw	high STR_3
  9882  001F2A  6E22               	movwf	CopyStringToBuffer@src+1,c
  9883  001F2C  0E09               	movlw	9
  9884  001F2E  6E23               	movwf	CopyStringToBuffer@len,c
  9885  001F30  0E01               	movlw	1
  9886  001F32  EC3E  F01C         	call	_CopyStringToBuffer
  9887                           
  9888                           ;ModbusRtu.c: 1408: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  9889  001F36  0E4F               	movlw	low STR_5
  9890  001F38  6E21               	movwf	CopyStringToBuffer@src,c
  9891  001F3A  0E06               	movlw	high STR_5
  9892  001F3C  6E22               	movwf	CopyStringToBuffer@src+1,c
  9893  001F3E  0E05               	movlw	5
  9894  001F40  6E23               	movwf	CopyStringToBuffer@len,c
  9895  001F42  0E02               	movlw	2
  9896  001F44  EC3E  F01C         	call	_CopyStringToBuffer
  9897                           
  9898                           ;ModbusRtu.c: 1409: break;
  9899  001F48  D0B6               	goto	l1013
  9900  001F4A                     l7917:
  9901  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  9902                           
  9903                           ;ModbusRtu.c: 1411: _au8Buffer[ 4 ] = 0x82;
  9904  001F4C  0E82               	movlw	130
  9905  001F4E  0101               	movlb	1	; () banked
  9906  001F50  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9907                           
  9908                           ;ModbusRtu.c: 1412: _au8Buffer[ 7 ] = 4;
  9909  001F52  0E04               	movlw	4
  9910  001F54  0101               	movlb	1	; () banked
  9911  001F56  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9912                           
  9913                           ; BSR set to: 1
  9914                           ;ModbusRtu.c: 1413: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  9915  001F58  0E25               	movlw	low STR_7
  9916  001F5A  6E21               	movwf	CopyStringToBuffer@src,c
  9917  001F5C  0E06               	movlw	high STR_7
  9918  001F5E  6E22               	movwf	CopyStringToBuffer@src+1,c
  9919  001F60  0E10               	movlw	16
  9920  001F62  6E23               	movwf	CopyStringToBuffer@len,c
  9921  001F64  0E03               	movlw	3
  9922  001F66  EC3E  F01C         	call	_CopyStringToBuffer
  9923                           
  9924                           ;ModbusRtu.c: 1414: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  9925  001F6A  0E11               	movlw	low STR_9
  9926  001F6C  6E21               	movwf	CopyStringToBuffer@src,c
  9927  001F6E  0E06               	movlw	high STR_9
  9928  001F70  6E22               	movwf	CopyStringToBuffer@src+1,c
  9929  001F72  0E14               	movlw	20
  9930  001F74  6E23               	movwf	CopyStringToBuffer@len,c
  9931  001F76  0E04               	movlw	4
  9932  001F78  EC3E  F01C         	call	_CopyStringToBuffer
  9933                           
  9934                           ;ModbusRtu.c: 1415: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  9935  001F7C  0E54               	movlw	low STR_11
  9936  001F7E  6E21               	movwf	CopyStringToBuffer@src,c
  9937  001F80  0E06               	movlw	high STR_11
  9938  001F82  6E22               	movwf	CopyStringToBuffer@src+1,c
  9939  001F84  0E04               	movlw	4
  9940  001F86  6E23               	movwf	CopyStringToBuffer@len,c
  9941  001F88  0E05               	movlw	5
  9942  001F8A  EC3E  F01C         	call	_CopyStringToBuffer
  9943                           
  9944                           ;ModbusRtu.c: 1416: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  9945  001F8E  0E35               	movlw	low STR_13
  9946  001F90  6E21               	movwf	CopyStringToBuffer@src,c
  9947  001F92  0E06               	movlw	high STR_13
  9948  001F94  6E22               	movwf	CopyStringToBuffer@src+1,c
  9949  001F96  0E0B               	movlw	11
  9950  001F98  6E23               	movwf	CopyStringToBuffer@len,c
  9951  001F9A  0E06               	movlw	6
  9952  001F9C  EC3E  F01C         	call	_CopyStringToBuffer
  9953                           
  9954                           ;ModbusRtu.c: 1417: break;
  9955  001FA0  D08A               	goto	l1013
  9956  001FA2                     l7927:
  9957  001FA2  FFFF               	dw	65535	; assembler added errata NOP
  9958                           
  9959                           ;ModbusRtu.c: 1419: _au8Buffer[ 7 ] = 1;
  9960  001FA4  0E01               	movlw	1
  9961  001FA6  0101               	movlb	1	; () banked
  9962  001FA8  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9963                           
  9964                           ;ModbusRtu.c: 1420: switch(objId)
  9965  001FAA  D062               	goto	l7959
  9966  001FAC                     l7929:
  9967  001FAC  FFFF               	dw	65535	; assembler added errata NOP
  9968                           
  9969                           ;ModbusRtu.c: 1423: _au8Buffer[ 4 ] = 0x81;
  9970  001FAE  0E81               	movlw	129
  9971  001FB0  0101               	movlb	1	; () banked
  9972  001FB2  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9973                           
  9974                           ; BSR set to: 1
  9975                           ;ModbusRtu.c: 1424: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  9976  001FB4  0E49               	movlw	low STR_1
  9977  001FB6  6E21               	movwf	CopyStringToBuffer@src,c
  9978  001FB8  0E06               	movlw	high STR_1
  9979  001FBA  6E22               	movwf	CopyStringToBuffer@src+1,c
  9980  001FBC  0E06               	movlw	6
  9981  001FBE  6E23               	movwf	CopyStringToBuffer@len,c
  9982  001FC0  5032               	movf	ModbusProcess_FC43@objId,w,c
  9983  001FC2  EC3E  F01C         	call	_CopyStringToBuffer
  9984                           
  9985                           ;ModbusRtu.c: 1425: break;
  9986  001FC6  D077               	goto	l1013
  9987  001FC8                     l7933:
  9988  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  9989                           
  9990                           ;ModbusRtu.c: 1427: _au8Buffer[ 4 ] = 0x81;
  9991  001FCA  0E81               	movlw	129
  9992  001FCC  0101               	movlb	1	; () banked
  9993  001FCE  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9994                           
  9995                           ; BSR set to: 1
  9996                           ;ModbusRtu.c: 1428: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  9997  001FD0  0E40               	movlw	low STR_3
  9998  001FD2  6E21               	movwf	CopyStringToBuffer@src,c
  9999  001FD4  0E06               	movlw	high STR_3
 10000  001FD6  6E22               	movwf	CopyStringToBuffer@src+1,c
 10001  001FD8  0E09               	movlw	9
 10002  001FDA  6E23               	movwf	CopyStringToBuffer@len,c
 10003  001FDC  5032               	movf	ModbusProcess_FC43@objId,w,c
 10004  001FDE  EC3E  F01C         	call	_CopyStringToBuffer
 10005                           
 10006                           ;ModbusRtu.c: 1429: break;
 10007  001FE2  D069               	goto	l1013
 10008  001FE4                     l7937:
 10009  001FE4  FFFF               	dw	65535	; assembler added errata NOP
 10010                           
 10011                           ;ModbusRtu.c: 1431: _au8Buffer[ 4 ] = 0x81;
 10012  001FE6  0E81               	movlw	129
 10013  001FE8  0101               	movlb	1	; () banked
 10014  001FEA  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10015                           
 10016                           ; BSR set to: 1
 10017                           ;ModbusRtu.c: 1432: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
 10018  001FEC  0E4F               	movlw	low STR_5
 10019  001FEE  6E21               	movwf	CopyStringToBuffer@src,c
 10020  001FF0  0E06               	movlw	high STR_5
 10021  001FF2  6E22               	movwf	CopyStringToBuffer@src+1,c
 10022  001FF4  0E05               	movlw	5
 10023  001FF6  6E23               	movwf	CopyStringToBuffer@len,c
 10024  001FF8  5032               	movf	ModbusProcess_FC43@objId,w,c
 10025  001FFA  EC3E  F01C         	call	_CopyStringToBuffer
 10026                           
 10027                           ;ModbusRtu.c: 1433: break;
 10028  001FFE  D05B               	goto	l1013
 10029  002000                     l7941:
 10030  002000  FFFF               	dw	65535	; assembler added errata NOP
 10031                           
 10032                           ;ModbusRtu.c: 1435: _au8Buffer[ 4 ] = 0x82;
 10033  002002  0E82               	movlw	130
 10034  002004  0101               	movlb	1	; () banked
 10035  002006  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10036                           
 10037                           ; BSR set to: 1
 10038                           ;ModbusRtu.c: 1436: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
 10039  002008  0E25               	movlw	low STR_7
 10040  00200A  6E21               	movwf	CopyStringToBuffer@src,c
 10041  00200C  0E06               	movlw	high STR_7
 10042  00200E  6E22               	movwf	CopyStringToBuffer@src+1,c
 10043  002010  0E10               	movlw	16
 10044  002012  6E23               	movwf	CopyStringToBuffer@len,c
 10045  002014  5032               	movf	ModbusProcess_FC43@objId,w,c
 10046  002016  EC3E  F01C         	call	_CopyStringToBuffer
 10047                           
 10048                           ;ModbusRtu.c: 1437: break;
 10049  00201A  D04D               	goto	l1013
 10050  00201C                     l7945:
 10051  00201C  FFFF               	dw	65535	; assembler added errata NOP
 10052                           
 10053                           ;ModbusRtu.c: 1439: _au8Buffer[ 4 ] = 0x82;
 10054  00201E  0E82               	movlw	130
 10055  002020  0101               	movlb	1	; () banked
 10056  002022  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10057                           
 10058                           ; BSR set to: 1
 10059                           ;ModbusRtu.c: 1440: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
 10060  002024  0E11               	movlw	low STR_9
 10061  002026  6E21               	movwf	CopyStringToBuffer@src,c
 10062  002028  0E06               	movlw	high STR_9
 10063  00202A  6E22               	movwf	CopyStringToBuffer@src+1,c
 10064  00202C  0E14               	movlw	20
 10065  00202E  6E23               	movwf	CopyStringToBuffer@len,c
 10066  002030  5032               	movf	ModbusProcess_FC43@objId,w,c
 10067  002032  EC3E  F01C         	call	_CopyStringToBuffer
 10068                           
 10069                           ;ModbusRtu.c: 1441: break;
 10070  002036  D03F               	goto	l1013
 10071  002038                     l7949:
 10072  002038  FFFF               	dw	65535	; assembler added errata NOP
 10073                           
 10074                           ;ModbusRtu.c: 1443: _au8Buffer[ 4 ] = 0x82;
 10075  00203A  0E82               	movlw	130
 10076  00203C  0101               	movlb	1	; () banked
 10077  00203E  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10078                           
 10079                           ; BSR set to: 1
 10080                           ;ModbusRtu.c: 1444: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
 10081  002040  0E54               	movlw	low STR_11
 10082  002042  6E21               	movwf	CopyStringToBuffer@src,c
 10083  002044  0E06               	movlw	high STR_11
 10084  002046  6E22               	movwf	CopyStringToBuffer@src+1,c
 10085  002048  0E04               	movlw	4
 10086  00204A  6E23               	movwf	CopyStringToBuffer@len,c
 10087  00204C  5032               	movf	ModbusProcess_FC43@objId,w,c
 10088  00204E  EC3E  F01C         	call	_CopyStringToBuffer
 10089                           
 10090                           ;ModbusRtu.c: 1445: break;
 10091  002052  D031               	goto	l1013
 10092  002054                     l7953:
 10093  002054  FFFF               	dw	65535	; assembler added errata NOP
 10094                           
 10095                           ;ModbusRtu.c: 1447: _au8Buffer[ 4 ] = 0x82;
 10096  002056  0E82               	movlw	130
 10097  002058  0101               	movlb	1	; () banked
 10098  00205A  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10099                           
 10100                           ; BSR set to: 1
 10101                           ;ModbusRtu.c: 1448: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
 10102  00205C  0E35               	movlw	low STR_13
 10103  00205E  6E21               	movwf	CopyStringToBuffer@src,c
 10104  002060  0E06               	movlw	high STR_13
 10105  002062  6E22               	movwf	CopyStringToBuffer@src+1,c
 10106  002064  0E0B               	movlw	11
 10107  002066  6E23               	movwf	CopyStringToBuffer@len,c
 10108  002068  5032               	movf	ModbusProcess_FC43@objId,w,c
 10109  00206A  EC3E  F01C         	call	_CopyStringToBuffer
 10110                           
 10111                           ;ModbusRtu.c: 1450: }
 10112                           
 10113                           ;ModbusRtu.c: 1449: break;
 10114  00206E  D023               	goto	l1013
 10115  002070                     l7959:
 10116  002070  FFFF               	dw	65535	; assembler added errata NOP
 10117  002072  5032               	movf	ModbusProcess_FC43@objId,w,c
 10118                           
 10119                           ; Switch size 1, requested type "space"
 10120                           ; Number of cases is 7, Range of values is 0 to 6
 10121                           ; switch strategies available:
 10122                           ; Name         Instructions Cycles
 10123                           ; simple_byte           22    12 (average)
 10124                           ;	Chosen strategy is simple_byte
 10125  002074  0A00               	xorlw	0	; case 0
 10126  002076  B4D8               	btfsc	status,2,c
 10127  002078  D799               	goto	l7929
 10128  00207A  0A01               	xorlw	1	; case 1
 10129  00207C  B4D8               	btfsc	status,2,c
 10130  00207E  D7A4               	goto	l7933
 10131  002080  0A03               	xorlw	3	; case 2
 10132  002082  B4D8               	btfsc	status,2,c
 10133  002084  D7AF               	goto	l7937
 10134  002086  0A01               	xorlw	1	; case 3
 10135  002088  B4D8               	btfsc	status,2,c
 10136  00208A  D7BA               	goto	l7941
 10137  00208C  0A07               	xorlw	7	; case 4
 10138  00208E  B4D8               	btfsc	status,2,c
 10139  002090  D7C5               	goto	l7945
 10140  002092  0A01               	xorlw	1	; case 5
 10141  002094  B4D8               	btfsc	status,2,c
 10142  002096  D7D0               	goto	l7949
 10143  002098  0A03               	xorlw	3	; case 6
 10144  00209A  B4D8               	btfsc	status,2,c
 10145  00209C  D7DB               	goto	l7953
 10146                           
 10147                           ;ModbusRtu.c: 1452: }
 10148                           
 10149                           ;ModbusRtu.c: 1451: break;
 10150  00209E  D00B               	goto	l1013
 10151  0020A0                     l7963:
 10152  0020A0  FFFF               	dw	65535	; assembler added errata NOP
 10153  0020A2  5030               	movf	ModbusProcess_FC43@devIdCode,w,c
 10154                           
 10155                           ; Switch size 1, requested type "space"
 10156                           ; Number of cases is 3, Range of values is 1 to 4
 10157                           ; switch strategies available:
 10158                           ; Name         Instructions Cycles
 10159                           ; simple_byte           10     6 (average)
 10160                           ;	Chosen strategy is simple_byte
 10161  0020A4  0A01               	xorlw	1	; case 1
 10162  0020A6  B4D8               	btfsc	status,2,c
 10163  0020A8  D72D               	goto	l7909
 10164  0020AA  0A03               	xorlw	3	; case 2
 10165  0020AC  B4D8               	btfsc	status,2,c
 10166  0020AE  D74D               	goto	l7917
 10167  0020B0  0A06               	xorlw	6	; case 4
 10168  0020B2  B4D8               	btfsc	status,2,c
 10169  0020B4  D776               	goto	l7927
 10170  0020B6                     l1013:
 10171  0020B6  FFFF               	dw	65535	; assembler added errata NOP
 10172                           
 10173                           ;ModbusRtu.c: 1453: uint8_t u8CopyBufferSize = _u8BufferSize;
 10174  0020B8  C053  F031         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
 10175                           
 10176                           ;ModbusRtu.c: 1454: ModbusSendTxBuffer();
 10177  0020BC  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10178                           
 10179                           ;ModbusRtu.c: 1456: return u8CopyBufferSize;
 10180  0020C0  5031               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
 10181  0020C2  0012               	return		;funcret
 10182  0020C4  FFFF               	dw	65535	; errata NOP
 10183  0020C6                     __end_of_ModbusProcess_FC43:
 10184                           	opt stack 0
 10185                           tblptru	equ	0xFF8
 10186                           tblptrh	equ	0xFF7
 10187                           tblptrl	equ	0xFF6
 10188                           tablat	equ	0xFF5
 10189                           prodh	equ	0xFF4
 10190                           prodl	equ	0xFF3
 10191                           intcon	equ	0xFF2
 10192                           postinc0	equ	0xFEE
 10193                           wreg	equ	0xFE8
 10194                           postdec1	equ	0xFE5
 10195                           fsr1h	equ	0xFE2
 10196                           fsr1l	equ	0xFE1
 10197                           indf2	equ	0xFDF
 10198                           postinc2	equ	0xFDE
 10199                           postdec2	equ	0xFDD
 10200                           fsr2h	equ	0xFDA
 10201                           fsr2l	equ	0xFD9
 10202                           status	equ	0xFD8
 10203                           
 10204 ;; *************** function _CopyStringToBuffer *****************
 10205 ;; Defined at:
 10206 ;;		line 1367 in file "ModbusRtu.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  objId           1    wreg     unsigned char 
 10209 ;;  src             2   32[COMRAM] PTR const unsigned char 
 10210 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
 10211 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
 10212 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
 10213 ;;		 -> STR_3(9), STR_1(6), 
 10214 ;;  len             1   34[COMRAM] unsigned char 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  objId           1   37[COMRAM] unsigned char 
 10217 ;;  i               1   38[COMRAM] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  1    wreg      void 
 10220 ;; Registers used:
 10221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10227 ;;      Params:         3       0       0       0       0       0       0
 10228 ;;      Locals:         2       0       0       0       0       0       0
 10229 ;;      Temps:          2       0       0       0       0       0       0
 10230 ;;      Totals:         7       0       0       0       0       0       0
 10231 ;;Total ram usage:        7 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    2
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_ModbusProcess_FC43
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text43
 10242  00387C                     __ptext43:
 10243                           	opt stack 0
 10244  00387C                     _CopyStringToBuffer:
 10245                           	opt stack 26
 10246                           
 10247                           ;incstack = 0
 10248  00387C  FFFF               	dw	65535
 10249                           
 10250                           ;CopyStringToBuffer@objId stored from wreg
 10251  00387E  6E26               	movwf	CopyStringToBuffer@objId,c
 10252                           
 10253                           ;ModbusRtu.c: 1369: len--;
 10254  003880  0623               	decf	CopyStringToBuffer@len,f,c
 10255                           
 10256                           ;ModbusRtu.c: 1370: _au8Buffer[_u8BufferSize++] = objId;
 10257  003882  5053               	movf	__u8BufferSize,w,c
 10258  003884  0D01               	mullw	1
 10259  003886  0E2A               	movlw	low __au8Buffer
 10260  003888  24F3               	addwf	prodl,w,c
 10261  00388A  6ED9               	movwf	fsr2l,c
 10262  00388C  0E01               	movlw	high __au8Buffer
 10263  00388E  20F4               	addwfc	prodh,w,c
 10264  003890  6EDA               	movwf	fsr2h,c
 10265  003892  C026  FFDF         	movff	CopyStringToBuffer@objId,indf2
 10266  003896  2A53               	incf	__u8BufferSize,f,c
 10267                           
 10268                           ;ModbusRtu.c: 1371: _au8Buffer[_u8BufferSize++] = len;
 10269  003898  5053               	movf	__u8BufferSize,w,c
 10270  00389A  0D01               	mullw	1
 10271  00389C  0E2A               	movlw	low __au8Buffer
 10272  00389E  24F3               	addwf	prodl,w,c
 10273  0038A0  6ED9               	movwf	fsr2l,c
 10274  0038A2  0E01               	movlw	high __au8Buffer
 10275  0038A4  20F4               	addwfc	prodh,w,c
 10276  0038A6  6EDA               	movwf	fsr2h,c
 10277  0038A8  C023  FFDF         	movff	CopyStringToBuffer@len,indf2
 10278  0038AC  2A53               	incf	__u8BufferSize,f,c
 10279                           
 10280                           ;ModbusRtu.c: 1372: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
 10281  0038AE  0E00               	movlw	0
 10282  0038B0  6E27               	movwf	CopyStringToBuffer@i,c
 10283  0038B2  D01D               	goto	l7239
 10284  0038B4                     l7233:
 10285  0038B4  FFFF               	dw	65535	; assembler added errata NOP
 10286                           
 10287                           ;ModbusRtu.c: 1373: _au8Buffer[_u8BufferSize] = src[i];
 10288  0038B6  5027               	movf	CopyStringToBuffer@i,w,c
 10289  0038B8  0D01               	mullw	1
 10290  0038BA  C021  F024         	movff	CopyStringToBuffer@src,??_CopyStringToBuffer
 10291  0038BE  C022  F025         	movff	CopyStringToBuffer@src+1,??_CopyStringToBuffer+1
 10292  0038C2  50F3               	movf	prodl,w,c
 10293  0038C4  2624               	addwf	??_CopyStringToBuffer,f,c
 10294  0038C6  50F4               	movf	prodh,w,c
 10295  0038C8  2225               	addwfc	??_CopyStringToBuffer+1,f,c
 10296  0038CA  C024  FFF6         	movff	??_CopyStringToBuffer,tblptrl
 10297  0038CE  C025  FFF7         	movff	??_CopyStringToBuffer+1,tblptrh
 10298  0038D2                     	if	0	;tblptru may be non-zero
 10299  0038D2                     	endif
 10300  0038D2                     	if	0	;tblptru may be non-zero
 10301  0038D2                     	endif
 10302  0038D2  5053               	movf	__u8BufferSize,w,c
 10303  0038D4  0D01               	mullw	1
 10304  0038D6  0E2A               	movlw	low __au8Buffer
 10305  0038D8  24F3               	addwf	prodl,w,c
 10306  0038DA  6ED9               	movwf	fsr2l,c
 10307  0038DC  0E01               	movlw	high __au8Buffer
 10308  0038DE  20F4               	addwfc	prodh,w,c
 10309  0038E0  6EDA               	movwf	fsr2h,c
 10310  0038E2  0008               	tblrd		*
 10311  0038E4  FFFF               	dw	65535	; errata NOP
 10312  0038E6  CFF5 FFDF          	movff	tablat,indf2
 10313  0038EA  2A27               	incf	CopyStringToBuffer@i,f,c
 10314  0038EC  2A53               	incf	__u8BufferSize,f,c
 10315  0038EE                     l7239:
 10316  0038EE  FFFF               	dw	65535	; assembler added errata NOP
 10317  0038F0  5023               	movf	CopyStringToBuffer@len,w,c
 10318  0038F2  5C27               	subwf	CopyStringToBuffer@i,w,c
 10319  0038F4  B0D8               	btfsc	status,0,c
 10320  0038F6  0012               	return		;funcret
 10321  0038F8  FFFF               	dw	65535	; assembler added errata NOP
 10322  0038FA  D7DC               	goto	l7233
 10323  0038FC  FFFF               	dw	65535	; errata NOP
 10324  0038FE                     __end_of_CopyStringToBuffer:
 10325                           	opt stack 0
 10326                           tblptru	equ	0xFF8
 10327                           tblptrh	equ	0xFF7
 10328                           tblptrl	equ	0xFF6
 10329                           tablat	equ	0xFF5
 10330                           prodh	equ	0xFF4
 10331                           prodl	equ	0xFF3
 10332                           intcon	equ	0xFF2
 10333                           postinc0	equ	0xFEE
 10334                           wreg	equ	0xFE8
 10335                           postdec1	equ	0xFE5
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function _ModbusProcess_FC3 *****************
 10346 ;; Defined at:
 10347 ;;		line 1041 in file "ModbusRtu.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  regs            2   47[COMRAM] PTR unsigned short 
 10350 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
 10351 ;;  u8size          1   49[COMRAM] unsigned char 
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  u16regsno       2    1[BANK0 ] unsigned short 
 10354 ;;  i               1    4[BANK0 ] unsigned char 
 10355 ;;  u8StartAdd      1    3[BANK0 ] unsigned char 
 10356 ;;  u8CopyBuffer    1    0[BANK0 ] unsigned char 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  1    wreg      unsigned char 
 10359 ;; Registers used:
 10360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10366 ;;      Params:         3       0       0       0       0       0       0
 10367 ;;      Locals:         0       5       0       0       0       0       0
 10368 ;;      Temps:          4       0       0       0       0       0       0
 10369 ;;      Totals:         7       5       0       0       0       0       0
 10370 ;;Total ram usage:       12 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    4
 10373 ;; This function calls:
 10374 ;;		_ModbusSendTxBuffer
 10375 ;; This function is called by:
 10376 ;;		_ModbusPoll
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text44
 10381  002D0E                     __ptext44:
 10382                           	opt stack 0
 10383  002D0E                     _ModbusProcess_FC3:
 10384                           	opt stack 25
 10385                           
 10386                           ;incstack = 0
 10387  002D0E  FFFF               	dw	65535
 10388                           
 10389                           ;ModbusRtu.c: 1043: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer
      +                          [ ADD_LO ]);
 10390  002D10  C12D  F083         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
 10391                           
 10392                           ;ModbusRtu.c: 1044: _lastAddress = u8StartAdd;
 10393  002D14  C083  F0E2         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
 10394  002D18  0100               	movlb	0	; () banked
 10395  002D1A  6BE3               	clrf	(__lastAddress+1)& (0+255),b
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;ModbusRtu.c: 1045: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
 10399  002D1C  0101               	movlb	1	; () banked
 10400  002D1E  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 10401  002D20  6E33               	movwf	??_ModbusProcess_FC3& (0+255),c
 10402  002D22  0101               	movlb	1	; () banked
 10403  002D24  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 10404  002D26  0100               	movlb	0	; () banked
 10405  002D28  6F81               	movwf	ModbusProcess_FC3@u16regsno& (0+255),b
 10406  002D2A  C033  F082         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;ModbusRtu.c: 1046: _lastCount = u16regsno;
 10410  002D2E  C081  F0E4         	movff	ModbusProcess_FC3@u16regsno,__lastCount
 10411  002D32  C082  F0E5         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;ModbusRtu.c: 1047: uint8_t u8CopyBufferSize;
 10415                           ;ModbusRtu.c: 1048: uint8_t i;
 10416                           ;ModbusRtu.c: 1050: _au8Buffer[ 2 ] = u16regsno * 2;
 10417  002D36  0100               	movlb	0	; () banked
 10418  002D38  5181               	movf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10419  002D3A  2581               	addwf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10420  002D3C  0101               	movlb	1	; () banked
 10421  002D3E  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 10422                           
 10423                           ; BSR set to: 1
 10424                           ;ModbusRtu.c: 1051: _u8BufferSize = 3;
 10425  002D40  0E03               	movlw	3
 10426  002D42  6E53               	movwf	__u8BufferSize,c
 10427                           
 10428                           ; BSR set to: 1
 10429                           ;ModbusRtu.c: 1053: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
 10430  002D44  C083  F084         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
 10431  002D48  D032               	goto	l7645
 10432  002D4A                     l7639:
 10433  002D4A  FFFF               	dw	65535	; assembler added errata NOP
 10434                           
 10435                           ;ModbusRtu.c: 1054: {
 10436                           ;ModbusRtu.c: 1055: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF))
      +                          ;
 10437  002D4C  5053               	movf	__u8BufferSize,w,c
 10438  002D4E  0D01               	mullw	1
 10439  002D50  0E2A               	movlw	low __au8Buffer
 10440  002D52  24F3               	addwf	prodl,w,c
 10441  002D54  6ED9               	movwf	fsr2l,c
 10442  002D56  0E01               	movlw	high __au8Buffer
 10443  002D58  20F4               	addwfc	prodh,w,c
 10444  002D5A  6EDA               	movwf	fsr2h,c
 10445  002D5C  0100               	movlb	0	; () banked
 10446  002D5E  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10447  002D60  0D02               	mullw	2
 10448  002D62  50F3               	movf	prodl,w,c
 10449  002D64  2430               	addwf	ModbusProcess_FC3@regs,w,c
 10450  002D66  6EE1               	movwf	fsr1l,c
 10451  002D68  50F4               	movf	prodh,w,c
 10452  002D6A  2031               	addwfc	ModbusProcess_FC3@regs+1,w,c
 10453  002D6C  6EE2               	movwf	fsr1h,c
 10454  002D6E  CFE6 F033          	movff	postinc1,??_ModbusProcess_FC3
 10455  002D72  CFE5 F034          	movff	postdec1,??_ModbusProcess_FC3+1
 10456  002D76  C034  F033         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
 10457  002D7A  6A34               	clrf	??_ModbusProcess_FC3+1,c
 10458  002D7C  5033               	movf	??_ModbusProcess_FC3,w,c
 10459  002D7E  6EDF               	movwf	indf2,c
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;ModbusRtu.c: 1056: _u8BufferSize++;
 10463  002D80  2A53               	incf	__u8BufferSize,f,c
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;ModbusRtu.c: 1057: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
 10467  002D82  0100               	movlb	0	; () banked
 10468  002D84  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10469  002D86  0D02               	mullw	2
 10470  002D88  50F3               	movf	prodl,w,c
 10471  002D8A  2430               	addwf	ModbusProcess_FC3@regs,w,c
 10472  002D8C  6ED9               	movwf	fsr2l,c
 10473  002D8E  50F4               	movf	prodh,w,c
 10474  002D90  2031               	addwfc	ModbusProcess_FC3@regs+1,w,c
 10475  002D92  6EDA               	movwf	fsr2h,c
 10476  002D94  5053               	movf	__u8BufferSize,w,c
 10477  002D96  0D01               	mullw	1
 10478  002D98  0E2A               	movlw	low __au8Buffer
 10479  002D9A  24F3               	addwf	prodl,w,c
 10480  002D9C  6EE1               	movwf	fsr1l,c
 10481  002D9E  0E01               	movlw	high __au8Buffer
 10482  002DA0  20F4               	addwfc	prodh,w,c
 10483  002DA2  6EE2               	movwf	fsr1h,c
 10484  002DA4  CFDF FFE7          	movff	indf2,indf1
 10485                           
 10486                           ;ModbusRtu.c: 1058: _u8BufferSize++;
 10487  002DA8  2A53               	incf	__u8BufferSize,f,c
 10488  002DAA  0100               	movlb	0	; () banked
 10489  002DAC  2B84               	incf	ModbusProcess_FC3@i& (0+255),f,b
 10490  002DAE                     l7645:
 10491  002DAE  FFFF               	dw	65535	; assembler added errata NOP
 10492  002DB0  0100               	movlb	0	; () banked
 10493  002DB2  5183               	movf	ModbusProcess_FC3@u8StartAdd& (0+255),w,b
 10494  002DB4  0100               	movlb	0	; () banked
 10495  002DB6  2581               	addwf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10496  002DB8  6E33               	movwf	??_ModbusProcess_FC3& (0+255),c
 10497  002DBA  0E00               	movlw	0
 10498  002DBC  0100               	movlb	0	; () banked
 10499  002DBE  2182               	addwfc	(ModbusProcess_FC3@u16regsno+1)& (0+255),w,b
 10500  002DC0  6E34               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
 10501  002DC2  0100               	movlb	0	; () banked
 10502  002DC4  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10503  002DC6  6E35               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
 10504  002DC8  6A36               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
 10505  002DCA  5033               	movf	??_ModbusProcess_FC3,w,c
 10506  002DCC  5C35               	subwf	??_ModbusProcess_FC3+2,w,c
 10507  002DCE  5034               	movf	??_ModbusProcess_FC3+1,w,c
 10508  002DD0  5836               	subwfb	??_ModbusProcess_FC3+3,w,c
 10509  002DD2  A0D8               	btfss	status,0,c
 10510  002DD4  D7BA               	goto	l7639
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;ModbusRtu.c: 1059: }
 10514                           ;ModbusRtu.c: 1060: u8CopyBufferSize = _u8BufferSize + 2;
 10515                           
 10516                           ; BSR set to: 0
 10517  002DD6  5053               	movf	__u8BufferSize,w,c
 10518  002DD8  0F02               	addlw	2
 10519  002DDA  0100               	movlb	0	; () banked
 10520  002DDC  6F80               	movwf	ModbusProcess_FC3@u8CopyBufferSize& (0+255),b
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;ModbusRtu.c: 1061: ModbusSendTxBuffer();
 10524  002DDE  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10525                           
 10526                           ;ModbusRtu.c: 1063: return u8CopyBufferSize;
 10527  002DE2  0100               	movlb	0	; () banked
 10528  002DE4  5180               	movf	ModbusProcess_FC3@u8CopyBufferSize& (0+255),w,b
 10529                           
 10530                           ; BSR set to: 0
 10531                           
 10532                           ; BSR set to: 0
 10533  002DE6  0012               	return		;funcret
 10534  002DE8  FFFF               	dw	65535	; errata NOP
 10535  002DEA                     __end_of_ModbusProcess_FC3:
 10536                           	opt stack 0
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           postinc0	equ	0xFEE
 10545                           wreg	equ	0xFE8
 10546                           indf1	equ	0xFE7
 10547                           postinc1	equ	0xFE6
 10548                           postdec1	equ	0xFE5
 10549                           fsr1h	equ	0xFE2
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           postdec2	equ	0xFDD
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _ModbusProcess_FC21 *****************
 10559 ;; Defined at:
 10560 ;;		line 1333 in file "ModbusRtu.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;  recLenBytes     2   53[COMRAM] unsigned short 
 10565 ;;  startAddrsBy    2   51[COMRAM] unsigned short 
 10566 ;;  i               1   55[COMRAM] unsigned char 
 10567 ;;  u8CopyBuffer    1   50[COMRAM] unsigned char 
 10568 ;;  requestDataL    1   49[COMRAM] unsigned char 
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      unsigned char 
 10571 ;; Registers used:
 10572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10578 ;;      Params:         0       0       0       0       0       0       0
 10579 ;;      Locals:         7       0       0       0       0       0       0
 10580 ;;      Temps:          2       0       0       0       0       0       0
 10581 ;;      Totals:         9       0       0       0       0       0       0
 10582 ;;Total ram usage:        9 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    4
 10585 ;; This function calls:
 10586 ;;		_ModbusSendTxBuffer
 10587 ;; This function is called by:
 10588 ;;		_ModbusPoll
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           	psect	text45
 10593  003072                     __ptext45:
 10594                           	opt stack 0
 10595  003072                     _ModbusProcess_FC21:
 10596                           	opt stack 25
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;incstack = 0
 10600  003072  FFFF               	dw	65535
 10601                           
 10602                           ;ModbusRtu.c: 1337: uint8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
 10603  003074  C12C  F032         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
 10604                           
 10605                           ;ModbusRtu.c: 1339: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
 10606  003078  0101               	movlb	1	; () banked
 10607  00307A  5131               	movf	(__au8Buffer+7)& (0+255),w,b
 10608  00307C  C130  F030         	movff	__au8Buffer+6,??_ModbusProcess_FC21
 10609  003080  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10610  003082  C030  F031         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
 10611  003086  6A30               	clrf	??_ModbusProcess_FC21,c
 10612  003088  1230               	iorwf	??_ModbusProcess_FC21,f,c
 10613  00308A  0E00               	movlw	0
 10614  00308C  1231               	iorwf	??_ModbusProcess_FC21+1,f,c
 10615  00308E  90D8               	bcf	status,0,c
 10616  003090  3430               	rlcf	??_ModbusProcess_FC21,w,c
 10617  003092  6E34               	movwf	ModbusProcess_FC21@startAddrsBytes,c
 10618  003094  3431               	rlcf	??_ModbusProcess_FC21+1,w,c
 10619  003096  6E35               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
 10620                           
 10621                           ; BSR set to: 1
 10622                           ;ModbusRtu.c: 1340: _lastAddress = startAddrsBytes;
 10623  003098  C034  F0E2         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
 10624  00309C  C035  F0E3         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
 10625                           
 10626                           ;ModbusRtu.c: 1341: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
 10627  0030A0  0101               	movlb	1	; () banked
 10628  0030A2  5133               	movf	(__au8Buffer+9)& (0+255),w,b
 10629  0030A4  C132  F030         	movff	__au8Buffer+8,??_ModbusProcess_FC21
 10630  0030A8  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10631  0030AA  C030  F031         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
 10632  0030AE  6A30               	clrf	??_ModbusProcess_FC21,c
 10633  0030B0  1230               	iorwf	??_ModbusProcess_FC21,f,c
 10634  0030B2  0E00               	movlw	0
 10635  0030B4  1231               	iorwf	??_ModbusProcess_FC21+1,f,c
 10636  0030B6  90D8               	bcf	status,0,c
 10637  0030B8  3430               	rlcf	??_ModbusProcess_FC21,w,c
 10638  0030BA  6E36               	movwf	ModbusProcess_FC21@recLenBytes,c
 10639  0030BC  3431               	rlcf	??_ModbusProcess_FC21+1,w,c
 10640  0030BE  6E37               	movwf	ModbusProcess_FC21@recLenBytes+1,c
 10641                           
 10642                           ; BSR set to: 1
 10643                           ;ModbusRtu.c: 1342: _lastCount = recLenBytes;
 10644  0030C0  C036  F0E4         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
 10645  0030C4  C037  F0E5         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
 10646                           
 10647                           ;ModbusRtu.c: 1343: uint8_t u8CopyBufferSize;
 10648                           ;ModbusRtu.c: 1344: uint8_t i;
 10649                           ;ModbusRtu.c: 1350: _u8BufferSize = requestDataLen + 1;
 10650  0030C8  2832               	incf	ModbusProcess_FC21@requestDataLen,w,c
 10651  0030CA  6E53               	movwf	__u8BufferSize,c
 10652                           
 10653                           ; BSR set to: 1
 10654                           ;ModbusRtu.c: 1354: for (i = 0; i < recLenBytes; i++)
 10655  0030CC  0E00               	movlw	0
 10656  0030CE  6E38               	movwf	ModbusProcess_FC21@i,c
 10657  0030D0  D025               	goto	l7897
 10658  0030D2                     l992:
 10659  0030D2  FFFF               	dw	65535	; assembler added errata NOP
 10660  0030D4  B2A6               	btfsc	4006,1,c	;volatile
 10661  0030D6  D7FD               	goto	l992
 10662  0030D8  5038               	movf	ModbusProcess_FC21@i,w,c
 10663  0030DA  2434               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
 10664  0030DC  6EA9               	movwf	4009,c	;volatile
 10665  0030DE  5038               	movf	ModbusProcess_FC21@i,w,c
 10666  0030E0  6E30               	movwf	??_ModbusProcess_FC21& (0+255),c
 10667  0030E2  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10668  0030E4  0E0A               	movlw	10
 10669  0030E6  2630               	addwf	??_ModbusProcess_FC21,f,c
 10670  0030E8  0E00               	movlw	0
 10671  0030EA  2231               	addwfc	??_ModbusProcess_FC21+1,f,c
 10672  0030EC  0E2A               	movlw	low __au8Buffer
 10673  0030EE  2430               	addwf	??_ModbusProcess_FC21,w,c
 10674  0030F0  6ED9               	movwf	fsr2l,c
 10675  0030F2  0E01               	movlw	high __au8Buffer
 10676  0030F4  2031               	addwfc	??_ModbusProcess_FC21+1,w,c
 10677  0030F6  6EDA               	movwf	fsr2h,c
 10678  0030F8  50DF               	movf	indf2,w,c
 10679  0030FA  6EA8               	movwf	4008,c	;volatile
 10680  0030FC  9EA6               	bcf	4006,7,c	;volatile
 10681  0030FE  9CA6               	bcf	4006,6,c	;volatile
 10682  003100  90D8               	bcf	status,0,c	;volatile
 10683  003102  BEF2               	btfsc	intcon,7,c	;volatile
 10684  003104  80D8               	bsf	status,0,c	;volatile
 10685  003106  9EF2               	bcf	intcon,7,c	;volatile
 10686  003108  84A6               	bsf	4006,2,c	;volatile
 10687  00310A  0E55               	movlw	85
 10688  00310C  6EA7               	movwf	4007,c	;volatile
 10689  00310E  0EAA               	movlw	170
 10690  003110  6EA7               	movwf	4007,c	;volatile
 10691  003112  82A6               	bsf	4006,1,c	;volatile
 10692  003114  94A6               	bcf	4006,2,c	;volatile
 10693  003116  B0D8               	btfsc	status,0,c	;volatile
 10694  003118  8EF2               	bsf	intcon,7,c	;volatile
 10695  00311A  2A38               	incf	ModbusProcess_FC21@i,f,c
 10696  00311C                     l7897:
 10697  00311C  FFFF               	dw	65535	; assembler added errata NOP
 10698  00311E  5038               	movf	ModbusProcess_FC21@i,w,c
 10699  003120  6E30               	movwf	??_ModbusProcess_FC21& (0+255),c
 10700  003122  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10701  003124  5036               	movf	ModbusProcess_FC21@recLenBytes,w,c
 10702  003126  5C30               	subwf	??_ModbusProcess_FC21,w,c
 10703  003128  5037               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
 10704  00312A  5831               	subwfb	??_ModbusProcess_FC21+1,w,c
 10705  00312C  A0D8               	btfss	status,0,c
 10706  00312E  D7D1               	goto	l992
 10707  003130                     l999:
 10708  003130  FFFF               	dw	65535	; assembler added errata NOP
 10709  003132  B2A6               	btfsc	4006,1,c	;volatile
 10710  003134  D7FD               	goto	l999
 10711                           
 10712                           ;ModbusRtu.c: 1361: u8CopyBufferSize = _u8BufferSize;
 10713  003136  C053  F033         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
 10714                           
 10715                           ;ModbusRtu.c: 1362: ModbusSendTxBuffer();
 10716  00313A  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10717                           
 10718                           ;ModbusRtu.c: 1364: return u8CopyBufferSize;
 10719  00313E  5033               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
 10720  003140  0012               	return		;funcret
 10721  003142  FFFF               	dw	65535	; errata NOP
 10722  003144                     __end_of_ModbusProcess_FC21:
 10723                           	opt stack 0
 10724                           tblptru	equ	0xFF8
 10725                           tblptrh	equ	0xFF7
 10726                           tblptrl	equ	0xFF6
 10727                           tablat	equ	0xFF5
 10728                           prodh	equ	0xFF4
 10729                           prodl	equ	0xFF3
 10730                           intcon	equ	0xFF2
 10731                           postinc0	equ	0xFEE
 10732                           wreg	equ	0xFE8
 10733                           indf1	equ	0xFE7
 10734                           postinc1	equ	0xFE6
 10735                           postdec1	equ	0xFE5
 10736                           fsr1h	equ	0xFE2
 10737                           fsr1l	equ	0xFE1
 10738                           indf2	equ	0xFDF
 10739                           postinc2	equ	0xFDE
 10740                           postdec2	equ	0xFDD
 10741                           fsr2h	equ	0xFDA
 10742                           fsr2l	equ	0xFD9
 10743                           status	equ	0xFD8
 10744                           
 10745 ;; *************** function _ModbusProcess_FC20 *****************
 10746 ;; Defined at:
 10747 ;;		line 1268 in file "ModbusRtu.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;		None
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;  i               1   12[BANK0 ] unsigned char 
 10752 ;;  r               1   15[BANK0 ] unsigned char 
 10753 ;;  startAddrByt    5    5[BANK0 ] unsigned char [5]
 10754 ;;  recLenBytes     5    0[BANK0 ] unsigned char [5]
 10755 ;;  offset          1   14[BANK0 ] unsigned char 
 10756 ;;  reqCount        1   13[BANK0 ] unsigned char 
 10757 ;;  u8CopyBuffer    1   11[BANK0 ] unsigned char 
 10758 ;;  requestDataL    1   10[BANK0 ] unsigned char 
 10759 ;;  i               1    0        unsigned char 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  1    wreg      unsigned char 
 10762 ;; Registers used:
 10763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10769 ;;      Params:         0       0       0       0       0       0       0
 10770 ;;      Locals:         0      16       0       0       0       0       0
 10771 ;;      Temps:          3       0       0       0       0       0       0
 10772 ;;      Totals:         3      16       0       0       0       0       0
 10773 ;;Total ram usage:       19 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    4
 10776 ;; This function calls:
 10777 ;;		_ModbusSendTxBuffer
 10778 ;; This function is called by:
 10779 ;;		_ModbusPoll
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           	psect	text46
 10784  001A9A                     __ptext46:
 10785                           	opt stack 0
 10786  001A9A                     _ModbusProcess_FC20:
 10787                           	opt stack 25
 10788                           
 10789                           ;incstack = 0
 10790  001A9A  FFFF               	dw	65535
 10791                           
 10792                           ;ModbusRtu.c: 1272: uint8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
 10793  001A9C  C12C  F08A         	movff	__au8Buffer+2,ModbusProcess_FC20@requestDataLen
 10794                           
 10795                           ;ModbusRtu.c: 1274: uint8_t offset = 0;
 10796  001AA0  0E00               	movlw	0
 10797  001AA2  0100               	movlb	0	; () banked
 10798  001AA4  6F8E               	movwf	ModbusProcess_FC20@offset& (0+255),b
 10799                           
 10800                           ;ModbusRtu.c: 1277: uint8_t startAddrBytes[5];
 10801                           ;ModbusRtu.c: 1278: uint8_t recLenBytes[5];
 10802                           ;ModbusRtu.c: 1279: uint8_t reqCount = 0;
 10803  001AA6  0E00               	movlw	0
 10804  001AA8  0100               	movlb	0	; () banked
 10805  001AAA  6F8D               	movwf	ModbusProcess_FC20@reqCount& (0+255),b
 10806                           
 10807                           ;ModbusRtu.c: 1280: while(offset < requestDataLen)
 10808  001AAC  D03E               	goto	l7817
 10809  001AAE                     l7811:
 10810  001AAE  FFFF               	dw	65535	; assembler added errata NOP
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;ModbusRtu.c: 1281: {
 10814                           ;ModbusRtu.c: 1282: startAddrBytes[reqCount] = (_au8Buffer[offset + FILE_REC_LO ]) << 1;
 10815  001AB0  0100               	movlb	0	; () banked
 10816  001AB2  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 10817  001AB4  0D01               	mullw	1
 10818  001AB6  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 10819  001AB8  24F3               	addwf	prodl,w,c
 10820  001ABA  6ED9               	movwf	fsr2l,c
 10821  001ABC  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 10822  001ABE  20F4               	addwfc	prodh,w,c
 10823  001AC0  6EDA               	movwf	fsr2h,c
 10824  001AC2  0100               	movlb	0	; () banked
 10825  001AC4  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10826  001AC6  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10827  001AC8  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10828  001ACA  0E07               	movlw	7
 10829  001ACC  2630               	addwf	??_ModbusProcess_FC20,f,c
 10830  001ACE  0E00               	movlw	0
 10831  001AD0  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 10832  001AD2  0E2A               	movlw	low __au8Buffer
 10833  001AD4  2430               	addwf	??_ModbusProcess_FC20,w,c
 10834  001AD6  6EE1               	movwf	fsr1l,c
 10835  001AD8  0E01               	movlw	high __au8Buffer
 10836  001ADA  2031               	addwfc	??_ModbusProcess_FC20+1,w,c
 10837  001ADC  6EE2               	movwf	fsr1h,c
 10838  001ADE  50E7               	movf	indf1,w,c
 10839  001AE0  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 10840  001AE2  90D8               	bcf	status,0,c
 10841  001AE4  3432               	rlcf	??_ModbusProcess_FC20+2,w,c
 10842  001AE6  6EDF               	movwf	indf2,c
 10843                           
 10844                           ;ModbusRtu.c: 1283: recLenBytes[reqCount] = (_au8Buffer[offset + FILE_REC_LEN_LO ]) << 1
      +                          ;
 10845  001AE8  0100               	movlb	0	; () banked
 10846  001AEA  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 10847  001AEC  0D01               	mullw	1
 10848  001AEE  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 10849  001AF0  24F3               	addwf	prodl,w,c
 10850  001AF2  6ED9               	movwf	fsr2l,c
 10851  001AF4  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 10852  001AF6  20F4               	addwfc	prodh,w,c
 10853  001AF8  6EDA               	movwf	fsr2h,c
 10854  001AFA  0100               	movlb	0	; () banked
 10855  001AFC  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10856  001AFE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10857  001B00  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10858  001B02  0E09               	movlw	9
 10859  001B04  2630               	addwf	??_ModbusProcess_FC20,f,c
 10860  001B06  0E00               	movlw	0
 10861  001B08  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 10862  001B0A  0E2A               	movlw	low __au8Buffer
 10863  001B0C  2430               	addwf	??_ModbusProcess_FC20,w,c
 10864  001B0E  6EE1               	movwf	fsr1l,c
 10865  001B10  0E01               	movlw	high __au8Buffer
 10866  001B12  2031               	addwfc	??_ModbusProcess_FC20+1,w,c
 10867  001B14  6EE2               	movwf	fsr1h,c
 10868  001B16  50E7               	movf	indf1,w,c
 10869  001B18  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 10870  001B1A  90D8               	bcf	status,0,c
 10871  001B1C  3432               	rlcf	??_ModbusProcess_FC20+2,w,c
 10872  001B1E  6EDF               	movwf	indf2,c
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;ModbusRtu.c: 1284: reqCount++;
 10876  001B20  0100               	movlb	0	; () banked
 10877  001B22  2B8D               	incf	ModbusProcess_FC20@reqCount& (0+255),f,b
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;ModbusRtu.c: 1285: offset += 7;
 10881  001B24  0E07               	movlw	7
 10882  001B26  0100               	movlb	0	; () banked
 10883  001B28  278E               	addwf	ModbusProcess_FC20@offset& (0+255),f,b
 10884  001B2A                     l7817:
 10885  001B2A  FFFF               	dw	65535	; assembler added errata NOP
 10886                           
 10887                           ; BSR set to: 0
 10888  001B2C  0100               	movlb	0	; () banked
 10889  001B2E  518A               	movf	ModbusProcess_FC20@requestDataLen& (0+255),w,b
 10890  001B30  0100               	movlb	0	; () banked
 10891  001B32  5D8E               	subwf	ModbusProcess_FC20@offset& (0+255),w,b
 10892  001B34  A0D8               	btfss	status,0,c
 10893  001B36  D7BB               	goto	l7811
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;ModbusRtu.c: 1286: }
 10897                           ;ModbusRtu.c: 1288: offset = FILE_DATA_LEN + 1;
 10898                           
 10899                           ; BSR set to: 0
 10900  001B38  0E03               	movlw	3
 10901  001B3A  0100               	movlb	0	; () banked
 10902  001B3C  6F8E               	movwf	ModbusProcess_FC20@offset& (0+255),b
 10903                           
 10904                           ;ModbusRtu.c: 1289: _au8Buffer[ FILE_DATA_LEN ] = 0;
 10905  001B3E  0E00               	movlw	0
 10906  001B40  0101               	movlb	1	; () banked
 10907  001B42  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 10908                           
 10909                           ;ModbusRtu.c: 1290: _lastAddress = 0xff;
 10910  001B44  0E00               	movlw	0
 10911  001B46  0100               	movlb	0	; () banked
 10912  001B48  6FE3               	movwf	(__lastAddress+1)& (0+255),b
 10913  001B4A  69E2               	setf	__lastAddress& (0+255),b
 10914                           
 10915                           ;ModbusRtu.c: 1291: _lastCount = 0;
 10916  001B4C  0E00               	movlw	0
 10917  001B4E  0100               	movlb	0	; () banked
 10918  001B50  6FE5               	movwf	(__lastCount+1)& (0+255),b
 10919  001B52  0E00               	movlw	0
 10920  001B54  6FE4               	movwf	__lastCount& (0+255),b
 10921                           
 10922                           ;ModbusRtu.c: 1292: for(uint8_t r = 0; r < reqCount; r++)
 10923  001B56  0E00               	movlw	0
 10924  001B58  0100               	movlb	0	; () banked
 10925  001B5A  6F8F               	movwf	ModbusProcess_FC20@r& (0+255),b
 10926  001B5C  D0BF               	goto	l7849
 10927  001B5E                     l7821:
 10928  001B5E  FFFF               	dw	65535	; assembler added errata NOP
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;ModbusRtu.c: 1293: {
 10932                           ;ModbusRtu.c: 1294: _au8Buffer[offset++] = recLenBytes[r] + 1;
 10933  001B60  0100               	movlb	0	; () banked
 10934  001B62  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10935  001B64  0D01               	mullw	1
 10936  001B66  0E2A               	movlw	low __au8Buffer
 10937  001B68  24F3               	addwf	prodl,w,c
 10938  001B6A  6ED9               	movwf	fsr2l,c
 10939  001B6C  0E01               	movlw	high __au8Buffer
 10940  001B6E  20F4               	addwfc	prodh,w,c
 10941  001B70  6EDA               	movwf	fsr2h,c
 10942  001B72  0100               	movlb	0	; () banked
 10943  001B74  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 10944  001B76  0D01               	mullw	1
 10945  001B78  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 10946  001B7A  24F3               	addwf	prodl,w,c
 10947  001B7C  6EE1               	movwf	fsr1l,c
 10948  001B7E  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 10949  001B80  20F4               	addwfc	prodh,w,c
 10950  001B82  6EE2               	movwf	fsr1h,c
 10951  001B84  50E7               	movf	indf1,w,c
 10952  001B86  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10953  001B88  2830               	incf	??_ModbusProcess_FC20,w,c
 10954  001B8A  6EDF               	movwf	indf2,c
 10955                           
 10956                           ; BSR set to: 0
 10957  001B8C  0100               	movlb	0	; () banked
 10958  001B8E  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;ModbusRtu.c: 1295: _au8Buffer[offset++] = 6;
 10962  001B90  0100               	movlb	0	; () banked
 10963  001B92  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10964  001B94  0D01               	mullw	1
 10965  001B96  0E2A               	movlw	low __au8Buffer
 10966  001B98  24F3               	addwf	prodl,w,c
 10967  001B9A  6ED9               	movwf	fsr2l,c
 10968  001B9C  0E01               	movlw	high __au8Buffer
 10969  001B9E  20F4               	addwfc	prodh,w,c
 10970  001BA0  6EDA               	movwf	fsr2h,c
 10971  001BA2  0E06               	movlw	6
 10972  001BA4  6EDF               	movwf	indf2,c
 10973                           
 10974                           ; BSR set to: 0
 10975  001BA6  0100               	movlb	0	; () banked
 10976  001BA8  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;ModbusRtu.c: 1296: if(startAddrBytes[r] < _lastAddress)
 10980  001BAA  0100               	movlb	0	; () banked
 10981  001BAC  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 10982  001BAE  0D01               	mullw	1
 10983  001BB0  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 10984  001BB2  24F3               	addwf	prodl,w,c
 10985  001BB4  6ED9               	movwf	fsr2l,c
 10986  001BB6  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 10987  001BB8  20F4               	addwfc	prodh,w,c
 10988  001BBA  6EDA               	movwf	fsr2h,c
 10989  001BBC  50DF               	movf	indf2,w,c
 10990  001BBE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10991  001BC0  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10992  001BC2  0100               	movlb	0	; () banked
 10993  001BC4  51E2               	movf	__lastAddress& (0+255),w,b
 10994  001BC6  5C30               	subwf	??_ModbusProcess_FC20,w,c
 10995  001BC8  0100               	movlb	0	; () banked
 10996  001BCA  51E3               	movf	(__lastAddress+1)& (0+255),w,b
 10997  001BCC  5831               	subwfb	??_ModbusProcess_FC20+1,w,c
 10998  001BCE  B0D8               	btfsc	status,0,c
 10999  001BD0  D00F               	goto	l7833
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;ModbusRtu.c: 1297: _lastAddress = startAddrBytes[r];
 11003  001BD2  0100               	movlb	0	; () banked
 11004  001BD4  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11005  001BD6  0D01               	mullw	1
 11006  001BD8  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11007  001BDA  24F3               	addwf	prodl,w,c
 11008  001BDC  6ED9               	movwf	fsr2l,c
 11009  001BDE  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11010  001BE0  20F4               	addwfc	prodh,w,c
 11011  001BE2  6EDA               	movwf	fsr2h,c
 11012  001BE4  50DF               	movf	indf2,w,c
 11013  001BE6  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11014  001BE8  5030               	movf	??_ModbusProcess_FC20,w,c
 11015  001BEA  0100               	movlb	0	; () banked
 11016  001BEC  6FE2               	movwf	__lastAddress& (0+255),b
 11017  001BEE  6BE3               	clrf	(__lastAddress+1)& (0+255),b
 11018  001BF0                     l7833:
 11019  001BF0  FFFF               	dw	65535	; assembler added errata NOP
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;ModbusRtu.c: 1299: for(uint8_t i = 0; i < recLenBytes[r]; i++)
 11023  001BF2  0E00               	movlw	0
 11024  001BF4  0100               	movlb	0	; () banked
 11025  001BF6  6F8C               	movwf	ModbusProcess_FC20@i& (0+255),b
 11026  001BF8  D01E               	goto	l981
 11027  001BFA                     l7835:
 11028  001BFA  FFFF               	dw	65535	; assembler added errata NOP
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;ModbusRtu.c: 1300: {
 11032                           ;ModbusRtu.c: 1301: _au8Buffer[offset++] = ( EEADR = startAddrBytes[r] + i, (void)0, RD 
      +                          = 1, EEDATA);
 11033  001BFC  0100               	movlb	0	; () banked
 11034  001BFE  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11035  001C00  0D01               	mullw	1
 11036  001C02  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11037  001C04  24F3               	addwf	prodl,w,c
 11038  001C06  6ED9               	movwf	fsr2l,c
 11039  001C08  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11040  001C0A  20F4               	addwfc	prodh,w,c
 11041  001C0C  6EDA               	movwf	fsr2h,c
 11042  001C0E  50DF               	movf	indf2,w,c
 11043  001C10  0100               	movlb	0	; () banked
 11044  001C12  258C               	addwf	ModbusProcess_FC20@i& (0+255),w,b
 11045  001C14  6EA9               	movwf	4009,c	;volatile
 11046                           
 11047                           ; BSR set to: 0
 11048  001C16  80A6               	bsf	4006,0,c	;volatile
 11049  001C18  0100               	movlb	0	; () banked
 11050  001C1A  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 11051  001C1C  0D01               	mullw	1
 11052  001C1E  0E2A               	movlw	low __au8Buffer
 11053  001C20  24F3               	addwf	prodl,w,c
 11054  001C22  6ED9               	movwf	fsr2l,c
 11055  001C24  0E01               	movlw	high __au8Buffer
 11056  001C26  20F4               	addwfc	prodh,w,c
 11057  001C28  6EDA               	movwf	fsr2h,c
 11058  001C2A  CFA8 FFDF          	movff	4008,indf2	;volatile
 11059                           
 11060                           ; BSR set to: 0
 11061  001C2E  0100               	movlb	0	; () banked
 11062  001C30  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 11063                           
 11064                           ; BSR set to: 0
 11065  001C32  0100               	movlb	0	; () banked
 11066  001C34  2B8C               	incf	ModbusProcess_FC20@i& (0+255),f,b
 11067  001C36                     l981:
 11068  001C36  FFFF               	dw	65535	; assembler added errata NOP
 11069                           
 11070                           ; BSR set to: 0
 11071  001C38  0100               	movlb	0	; () banked
 11072  001C3A  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11073  001C3C  0D01               	mullw	1
 11074  001C3E  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11075  001C40  24F3               	addwf	prodl,w,c
 11076  001C42  6ED9               	movwf	fsr2l,c
 11077  001C44  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11078  001C46  20F4               	addwfc	prodh,w,c
 11079  001C48  6EDA               	movwf	fsr2h,c
 11080  001C4A  50DE               	movf	postinc2,w,c
 11081  001C4C  0100               	movlb	0	; () banked
 11082  001C4E  5D8C               	subwf	ModbusProcess_FC20@i& (0+255),w,b
 11083  001C50  A0D8               	btfss	status,0,c
 11084  001C52  D7D3               	goto	l7835
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;ModbusRtu.c: 1302: }
 11088                           ;ModbusRtu.c: 1303: if(startAddrBytes[r] + recLenBytes[r] > _lastCount)
 11089                           
 11090                           ; BSR set to: 0
 11091  001C54  0100               	movlb	0	; () banked
 11092  001C56  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11093  001C58  0D01               	mullw	1
 11094  001C5A  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11095  001C5C  24F3               	addwf	prodl,w,c
 11096  001C5E  6ED9               	movwf	fsr2l,c
 11097  001C60  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11098  001C62  20F4               	addwfc	prodh,w,c
 11099  001C64  6EDA               	movwf	fsr2h,c
 11100  001C66  50DF               	movf	indf2,w,c
 11101  001C68  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11102  001C6A  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 11103  001C6C  0100               	movlb	0	; () banked
 11104  001C6E  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11105  001C70  0D01               	mullw	1
 11106  001C72  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11107  001C74  24F3               	addwf	prodl,w,c
 11108  001C76  6ED9               	movwf	fsr2l,c
 11109  001C78  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11110  001C7A  20F4               	addwfc	prodh,w,c
 11111  001C7C  6EDA               	movwf	fsr2h,c
 11112  001C7E  50DF               	movf	indf2,w,c
 11113  001C80  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 11114  001C82  5032               	movf	??_ModbusProcess_FC20+2,w,c
 11115  001C84  2630               	addwf	??_ModbusProcess_FC20,f,c
 11116  001C86  0E00               	movlw	0
 11117  001C88  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 11118  001C8A  5030               	movf	??_ModbusProcess_FC20,w,c
 11119  001C8C  0100               	movlb	0	; () banked
 11120  001C8E  5DE4               	subwf	__lastCount& (0+255),w,b
 11121  001C90  5031               	movf	??_ModbusProcess_FC20+1,w,c
 11122  001C92  0100               	movlb	0	; () banked
 11123  001C94  59E5               	subwfb	(__lastCount+1)& (0+255),w,b
 11124  001C96  B0D8               	btfsc	status,0,c
 11125  001C98  D01E               	goto	l7847
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;ModbusRtu.c: 1304: _lastCount = startAddrBytes[r] + recLenBytes[r];
 11129  001C9A  0100               	movlb	0	; () banked
 11130  001C9C  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11131  001C9E  0D01               	mullw	1
 11132  001CA0  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11133  001CA2  24F3               	addwf	prodl,w,c
 11134  001CA4  6ED9               	movwf	fsr2l,c
 11135  001CA6  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11136  001CA8  20F4               	addwfc	prodh,w,c
 11137  001CAA  6EDA               	movwf	fsr2h,c
 11138  001CAC  50DF               	movf	indf2,w,c
 11139  001CAE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11140  001CB0  0100               	movlb	0	; () banked
 11141  001CB2  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11142  001CB4  0D01               	mullw	1
 11143  001CB6  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11144  001CB8  24F3               	addwf	prodl,w,c
 11145  001CBA  6ED9               	movwf	fsr2l,c
 11146  001CBC  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11147  001CBE  20F4               	addwfc	prodh,w,c
 11148  001CC0  6EDA               	movwf	fsr2h,c
 11149  001CC2  50DF               	movf	indf2,w,c
 11150  001CC4  6E31               	movwf	(??_ModbusProcess_FC20+1)& (0+255),c
 11151  001CC6  5031               	movf	??_ModbusProcess_FC20+1,w,c
 11152  001CC8  2430               	addwf	??_ModbusProcess_FC20,w,c
 11153  001CCA  0100               	movlb	0	; () banked
 11154  001CCC  6FE4               	movwf	__lastCount& (0+255),b
 11155  001CCE  0100               	movlb	0	; () banked
 11156  001CD0  6BE5               	clrf	(__lastCount+1)& (0+255),b
 11157  001CD2  0100               	movlb	0	; () banked
 11158  001CD4  37E5               	rlcf	(__lastCount+1)& (0+255),f,b
 11159  001CD6                     l7847:
 11160  001CD6  FFFF               	dw	65535	; assembler added errata NOP
 11161                           
 11162                           ; BSR set to: 0
 11163  001CD8  0100               	movlb	0	; () banked
 11164  001CDA  2B8F               	incf	ModbusProcess_FC20@r& (0+255),f,b
 11165  001CDC                     l7849:
 11166  001CDC  FFFF               	dw	65535	; assembler added errata NOP
 11167                           
 11168                           ; BSR set to: 0
 11169  001CDE  0100               	movlb	0	; () banked
 11170  001CE0  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 11171  001CE2  0100               	movlb	0	; () banked
 11172  001CE4  5D8F               	subwf	ModbusProcess_FC20@r& (0+255),w,b
 11173  001CE6  A0D8               	btfss	status,0,c
 11174  001CE8  D73A               	goto	l7821
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;ModbusRtu.c: 1305: }
 11178                           ;ModbusRtu.c: 1306: _au8Buffer[ FILE_DATA_LEN ] = offset - 2;
 11179                           
 11180                           ; BSR set to: 0
 11181  001CEA  0100               	movlb	0	; () banked
 11182  001CEC  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 11183  001CEE  0FFE               	addlw	254
 11184  001CF0  0101               	movlb	1	; () banked
 11185  001CF2  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 11186                           
 11187                           ;ModbusRtu.c: 1310: uint8_t u8CopyBufferSize;
 11188                           ;ModbusRtu.c: 1311: uint8_t i;
 11189                           ;ModbusRtu.c: 1317: _u8BufferSize = _au8Buffer[ FILE_DATA_LEN ] + 1;
 11190  001CF4  0101               	movlb	1	; () banked
 11191  001CF6  292C               	incf	(__au8Buffer+2)& (0+255),w,b
 11192  001CF8  6E53               	movwf	__u8BufferSize,c
 11193                           
 11194                           ; BSR set to: 1
 11195                           ;ModbusRtu.c: 1319: u8CopyBufferSize = _u8BufferSize;
 11196  001CFA  C053  F08B         	movff	__u8BufferSize,ModbusProcess_FC20@u8CopyBufferSize
 11197                           
 11198                           ; BSR set to: 1
 11199                           ;ModbusRtu.c: 1320: ModbusSendTxBuffer();
 11200  001CFE  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11201                           
 11202                           ;ModbusRtu.c: 1322: return u8CopyBufferSize;
 11203  001D02  0100               	movlb	0	; () banked
 11204  001D04  518B               	movf	ModbusProcess_FC20@u8CopyBufferSize& (0+255),w,b
 11205                           
 11206                           ; BSR set to: 0
 11207                           
 11208                           ; BSR set to: 0
 11209  001D06  0012               	return		;funcret
 11210  001D08  FFFF               	dw	65535	; errata NOP
 11211  001D0A                     __end_of_ModbusProcess_FC20:
 11212                           	opt stack 0
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           postinc0	equ	0xFEE
 11221                           wreg	equ	0xFE8
 11222                           indf1	equ	0xFE7
 11223                           postinc1	equ	0xFE6
 11224                           postdec1	equ	0xFE5
 11225                           fsr1h	equ	0xFE2
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           fsr2h	equ	0xFDA
 11231                           fsr2l	equ	0xFD9
 11232                           status	equ	0xFD8
 11233                           
 11234 ;; *************** function _ModbusProcess_FC17 *****************
 11235 ;; Defined at:
 11236 ;;		line 1242 in file "ModbusRtu.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      unsigned char 
 11243 ;; Registers used:
 11244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11250 ;;      Params:         0       0       0       0       0       0       0
 11251 ;;      Locals:         1       0       0       0       0       0       0
 11252 ;;      Temps:          0       0       0       0       0       0       0
 11253 ;;      Totals:         1       0       0       0       0       0       0
 11254 ;;Total ram usage:        1 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    4
 11257 ;; This function calls:
 11258 ;;		_ModbusSendTxBuffer
 11259 ;; This function is called by:
 11260 ;;		_ModbusPoll
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           	psect	text47
 11265  003770                     __ptext47:
 11266                           	opt stack 0
 11267  003770                     _ModbusProcess_FC17:
 11268                           	opt stack 25
 11269                           
 11270                           ; BSR set to: 0
 11271                           ;incstack = 0
 11272  003770  FFFF               	dw	65535
 11273                           
 11274                           ;ModbusRtu.c: 1244: _au8Buffer[ 2 ] = 4;
 11275  003772  0E04               	movlw	4
 11276  003774  0101               	movlb	1	; () banked
 11277  003776  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 11278                           
 11279                           ;ModbusRtu.c: 1246: _u8BufferSize = 3;
 11280  003778  0E03               	movlw	3
 11281  00377A  6E53               	movwf	__u8BufferSize,c
 11282                           
 11283                           ; BSR set to: 1
 11284                           ;ModbusRtu.c: 1247: _au8Buffer[_u8BufferSize++] = 0x01;
 11285  00377C  5053               	movf	__u8BufferSize,w,c
 11286  00377E  0D01               	mullw	1
 11287  003780  0E2A               	movlw	low __au8Buffer
 11288  003782  24F3               	addwf	prodl,w,c
 11289  003784  6ED9               	movwf	fsr2l,c
 11290  003786  0E01               	movlw	high __au8Buffer
 11291  003788  20F4               	addwfc	prodh,w,c
 11292  00378A  6EDA               	movwf	fsr2h,c
 11293  00378C  0E01               	movlw	1
 11294  00378E  6EDF               	movwf	indf2,c
 11295                           
 11296                           ; BSR set to: 1
 11297  003790  2A53               	incf	__u8BufferSize,f,c
 11298                           
 11299                           ; BSR set to: 1
 11300                           ;ModbusRtu.c: 1248: _au8Buffer[_u8BufferSize++] = 0x01;
 11301  003792  5053               	movf	__u8BufferSize,w,c
 11302  003794  0D01               	mullw	1
 11303  003796  0E2A               	movlw	low __au8Buffer
 11304  003798  24F3               	addwf	prodl,w,c
 11305  00379A  6ED9               	movwf	fsr2l,c
 11306  00379C  0E01               	movlw	high __au8Buffer
 11307  00379E  20F4               	addwfc	prodh,w,c
 11308  0037A0  6EDA               	movwf	fsr2h,c
 11309  0037A2  0E01               	movlw	1
 11310  0037A4  6EDF               	movwf	indf2,c
 11311                           
 11312                           ; BSR set to: 1
 11313  0037A6  2A53               	incf	__u8BufferSize,f,c
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;ModbusRtu.c: 1249: _au8Buffer[_u8BufferSize++] = 0x01;
 11317  0037A8  5053               	movf	__u8BufferSize,w,c
 11318  0037AA  0D01               	mullw	1
 11319  0037AC  0E2A               	movlw	low __au8Buffer
 11320  0037AE  24F3               	addwf	prodl,w,c
 11321  0037B0  6ED9               	movwf	fsr2l,c
 11322  0037B2  0E01               	movlw	high __au8Buffer
 11323  0037B4  20F4               	addwfc	prodh,w,c
 11324  0037B6  6EDA               	movwf	fsr2h,c
 11325  0037B8  0E01               	movlw	1
 11326  0037BA  6EDF               	movwf	indf2,c
 11327                           
 11328                           ; BSR set to: 1
 11329  0037BC  2A53               	incf	__u8BufferSize,f,c
 11330                           
 11331                           ; BSR set to: 1
 11332                           ;ModbusRtu.c: 1250: _au8Buffer[_u8BufferSize++] = 0x00;
 11333  0037BE  5053               	movf	__u8BufferSize,w,c
 11334  0037C0  0D01               	mullw	1
 11335  0037C2  0E2A               	movlw	low __au8Buffer
 11336  0037C4  24F3               	addwf	prodl,w,c
 11337  0037C6  6ED9               	movwf	fsr2l,c
 11338  0037C8  0E01               	movlw	high __au8Buffer
 11339  0037CA  20F4               	addwfc	prodh,w,c
 11340  0037CC  6EDA               	movwf	fsr2h,c
 11341  0037CE  0E00               	movlw	0
 11342  0037D0  6EDF               	movwf	indf2,c
 11343                           
 11344                           ; BSR set to: 1
 11345  0037D2  2A53               	incf	__u8BufferSize,f,c
 11346                           
 11347                           ; BSR set to: 1
 11348                           ;ModbusRtu.c: 1252: _au8Buffer[_u8BufferSize++] = 0xff;
 11349  0037D4  5053               	movf	__u8BufferSize,w,c
 11350  0037D6  0D01               	mullw	1
 11351  0037D8  0E2A               	movlw	low __au8Buffer
 11352  0037DA  24F3               	addwf	prodl,w,c
 11353  0037DC  6ED9               	movwf	fsr2l,c
 11354  0037DE  0E01               	movlw	high __au8Buffer
 11355  0037E0  20F4               	addwfc	prodh,w,c
 11356  0037E2  6EDA               	movwf	fsr2h,c
 11357  0037E4  0EFF               	movlw	255
 11358  0037E6  6EDF               	movwf	indf2,c
 11359                           
 11360                           ; BSR set to: 1
 11361  0037E8  2A53               	incf	__u8BufferSize,f,c
 11362                           
 11363                           ; BSR set to: 1
 11364                           ;ModbusRtu.c: 1253: uint8_t u8CopyBufferSize = _u8BufferSize;
 11365  0037EA  C053  F030         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
 11366                           
 11367                           ; BSR set to: 1
 11368                           ;ModbusRtu.c: 1254: ModbusSendTxBuffer();
 11369  0037EE  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11370                           
 11371                           ;ModbusRtu.c: 1256: return u8CopyBufferSize;
 11372  0037F2  5030               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
 11373  0037F4  0012               	return		;funcret
 11374  0037F6  FFFF               	dw	65535	; errata NOP
 11375  0037F8                     __end_of_ModbusProcess_FC17:
 11376                           	opt stack 0
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           postinc0	equ	0xFEE
 11385                           wreg	equ	0xFE8
 11386                           indf1	equ	0xFE7
 11387                           postinc1	equ	0xFE6
 11388                           postdec1	equ	0xFE5
 11389                           fsr1h	equ	0xFE2
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           fsr2h	equ	0xFDA
 11395                           fsr2l	equ	0xFD9
 11396                           status	equ	0xFD8
 11397                           
 11398 ;; *************** function _ModbusProcess_FC16 *****************
 11399 ;; Defined at:
 11400 ;;		line 1203 in file "ModbusRtu.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  regs            2   47[COMRAM] PTR unsigned short 
 11403 ;;		 -> _MODBUSHoldingRegs(30), 
 11404 ;;  u8size          1   49[COMRAM] unsigned char 
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;  u16StartAdd     2   10[BANK0 ] unsigned short 
 11407 ;;  temp            2    7[BANK0 ] unsigned short 
 11408 ;;  i               1   13[BANK0 ] unsigned char 
 11409 ;;  u8regsno        1   12[BANK0 ] unsigned char 
 11410 ;;  u8CopyBuffer    1    9[BANK0 ] unsigned char 
 11411 ;; Return value:  Size  Location     Type
 11412 ;;                  1    wreg      unsigned char 
 11413 ;; Registers used:
 11414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : 0/0
 11417 ;;		On exit  : 0/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11420 ;;      Params:         3       0       0       0       0       0       0
 11421 ;;      Locals:         0       7       0       0       0       0       0
 11422 ;;      Temps:          0       7       0       0       0       0       0
 11423 ;;      Totals:         3      14       0       0       0       0       0
 11424 ;;Total ram usage:       17 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    4
 11427 ;; This function calls:
 11428 ;;		_ModbusSendTxBuffer
 11429 ;; This function is called by:
 11430 ;;		_ModbusPoll
 11431 ;; This function uses a non-reentrant model
 11432 ;;
 11433                           
 11434                           	psect	text48
 11435  0026DA                     __ptext48:
 11436                           	opt stack 0
 11437  0026DA                     _ModbusProcess_FC16:
 11438                           	opt stack 25
 11439                           
 11440                           ;incstack = 0
 11441  0026DA  FFFF               	dw	65535
 11442                           
 11443                           ;ModbusRtu.c: 1206: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
 11444  0026DC  0101               	movlb	1	; () banked
 11445  0026DE  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 11446  0026E0  C12C  F080         	movff	__au8Buffer+2,??_ModbusProcess_FC16
 11447  0026E4  0100               	movlb	0	; () banked
 11448  0026E6  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11449  0026E8  C080  F081         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
 11450  0026EC  0100               	movlb	0	; () banked
 11451  0026EE  6B80               	clrf	??_ModbusProcess_FC16& (0+255),b
 11452  0026F0  0100               	movlb	0	; () banked
 11453  0026F2  1180               	iorwf	??_ModbusProcess_FC16& (0+255),w,b
 11454  0026F4  0100               	movlb	0	; () banked
 11455  0026F6  6F8A               	movwf	ModbusProcess_FC16@u16StartAdd& (0+255),b
 11456  0026F8  0100               	movlb	0	; () banked
 11457  0026FA  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11458  0026FC  0100               	movlb	0	; () banked
 11459  0026FE  6F8B               	movwf	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),b
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;ModbusRtu.c: 1207: _lastAddress = u16StartAdd;
 11463  002700  C08A  F0E2         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
 11464  002704  C08B  F0E3         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;ModbusRtu.c: 1208: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
 11468  002708  C12F  F08C         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;ModbusRtu.c: 1209: _lastCount = u8regsno;
 11472  00270C  C08C  F0E4         	movff	ModbusProcess_FC16@u8regsno,__lastCount
 11473  002710  0100               	movlb	0	; () banked
 11474  002712  6BE5               	clrf	(__lastCount+1)& (0+255),b
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;ModbusRtu.c: 1210: uint8_t u8CopyBufferSize;
 11478                           ;ModbusRtu.c: 1211: uint8_t i;
 11479                           ;ModbusRtu.c: 1212: uint16_t temp;
 11480                           ;ModbusRtu.c: 1215: _au8Buffer[ NB_HI ] = 0;
 11481  002714  0E00               	movlw	0
 11482  002716  0101               	movlb	1	; () banked
 11483  002718  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 11484                           
 11485                           ; BSR set to: 1
 11486                           ;ModbusRtu.c: 1216: _au8Buffer[ NB_LO ] = u8regsno;
 11487  00271A  C08C  F12F         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
 11488                           
 11489                           ; BSR set to: 1
 11490                           ;ModbusRtu.c: 1217: _u8BufferSize = RESPONSE_SIZE;
 11491  00271E  0E06               	movlw	6
 11492  002720  6E53               	movwf	__u8BufferSize,c
 11493                           
 11494                           ; BSR set to: 1
 11495                           ;ModbusRtu.c: 1220: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
 11496  002722  0E00               	movlw	0
 11497  002724  0100               	movlb	0	; () banked
 11498  002726  6F8D               	movwf	ModbusProcess_FC16@i& (0+255),b
 11499  002728  D056               	goto	l7765
 11500  00272A                     l7761:
 11501  00272A  FFFF               	dw	65535	; assembler added errata NOP
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;ModbusRtu.c: 1221: {
 11505                           ;ModbusRtu.c: 1222: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
 11506  00272C  0100               	movlb	0	; () banked
 11507  00272E  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11508  002730  0100               	movlb	0	; () banked
 11509  002732  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11510  002734  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11511  002736  90D8               	bcf	status,0,c
 11512  002738  0100               	movlb	0	; () banked
 11513  00273A  3780               	rlcf	??_ModbusProcess_FC16& (0+255),f,b
 11514  00273C  3781               	rlcf	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11515  00273E  0E08               	movlw	8
 11516  002740  0100               	movlb	0	; () banked
 11517  002742  2780               	addwf	??_ModbusProcess_FC16& (0+255),f,b
 11518  002744  0E00               	movlw	0
 11519  002746  2381               	addwfc	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11520  002748  0E2A               	movlw	low __au8Buffer
 11521  00274A  0100               	movlb	0	; () banked
 11522  00274C  2580               	addwf	??_ModbusProcess_FC16& (0+255),w,b
 11523  00274E  6ED9               	movwf	fsr2l,c
 11524  002750  0E01               	movlw	high __au8Buffer
 11525  002752  0100               	movlb	0	; () banked
 11526  002754  2181               	addwfc	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11527  002756  6EDA               	movwf	fsr2h,c
 11528  002758  50DF               	movf	indf2,w,c
 11529  00275A  0100               	movlb	0	; () banked
 11530  00275C  6F82               	movwf	(??_ModbusProcess_FC16+2)& (0+255),b
 11531  00275E  0100               	movlb	0	; () banked
 11532  002760  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11533  002762  0100               	movlb	0	; () banked
 11534  002764  6F83               	movwf	(??_ModbusProcess_FC16+3)& (0+255),b
 11535  002766  6B84               	clrf	(??_ModbusProcess_FC16+4)& (0+255),b
 11536  002768  90D8               	bcf	status,0,c
 11537  00276A  0100               	movlb	0	; () banked
 11538  00276C  3783               	rlcf	(??_ModbusProcess_FC16+3)& (0+255),f,b
 11539  00276E  3784               	rlcf	(??_ModbusProcess_FC16+4)& (0+255),f,b
 11540  002770  0E07               	movlw	7
 11541  002772  0100               	movlb	0	; () banked
 11542  002774  2783               	addwf	(??_ModbusProcess_FC16+3)& (0+255),f,b
 11543  002776  0E00               	movlw	0
 11544  002778  2384               	addwfc	(??_ModbusProcess_FC16+4)& (0+255),f,b
 11545  00277A  0E2A               	movlw	low __au8Buffer
 11546  00277C  0100               	movlb	0	; () banked
 11547  00277E  2583               	addwf	(??_ModbusProcess_FC16+3)& (0+255),w,b
 11548  002780  6ED9               	movwf	fsr2l,c
 11549  002782  0E01               	movlw	high __au8Buffer
 11550  002784  0100               	movlb	0	; () banked
 11551  002786  2184               	addwfc	(??_ModbusProcess_FC16+4)& (0+255),w,b
 11552  002788  6EDA               	movwf	fsr2h,c
 11553  00278A  50DF               	movf	indf2,w,c
 11554  00278C  0100               	movlb	0	; () banked
 11555  00278E  6F85               	movwf	(??_ModbusProcess_FC16+5)& (0+255),b
 11556  002790  0100               	movlb	0	; () banked
 11557  002792  5182               	movf	(??_ModbusProcess_FC16+2)& (0+255),w,b
 11558  002794  0100               	movlb	0	; () banked
 11559  002796  6F87               	movwf	ModbusProcess_FC16@temp& (0+255),b
 11560  002798  C085  F088         	movff	??_ModbusProcess_FC16+5,ModbusProcess_FC16@temp+1
 11561                           
 11562                           ;ModbusRtu.c: 1226: regs[ u16StartAdd + i ] = temp;
 11563  00279C  0100               	movlb	0	; () banked
 11564  00279E  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11565  0027A0  0100               	movlb	0	; () banked
 11566  0027A2  258A               	addwf	ModbusProcess_FC16@u16StartAdd& (0+255),w,b
 11567  0027A4  0100               	movlb	0	; () banked
 11568  0027A6  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11569  0027A8  0E00               	movlw	0
 11570  0027AA  0100               	movlb	0	; () banked
 11571  0027AC  218B               	addwfc	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),w,b
 11572  0027AE  0100               	movlb	0	; () banked
 11573  0027B0  6F81               	movwf	(??_ModbusProcess_FC16+1)& (0+255),b
 11574  0027B2  90D8               	bcf	status,0,c
 11575  0027B4  0100               	movlb	0	; () banked
 11576  0027B6  3780               	rlcf	??_ModbusProcess_FC16& (0+255),f,b
 11577  0027B8  3781               	rlcf	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11578  0027BA  0100               	movlb	0	; () banked
 11579  0027BC  5180               	movf	??_ModbusProcess_FC16& (0+255),w,b
 11580  0027BE  2430               	addwf	ModbusProcess_FC16@regs,w,c
 11581  0027C0  6ED9               	movwf	fsr2l,c
 11582  0027C2  0100               	movlb	0	; () banked
 11583  0027C4  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11584  0027C6  2031               	addwfc	ModbusProcess_FC16@regs+1,w,c
 11585  0027C8  6EDA               	movwf	fsr2h,c
 11586  0027CA  C087  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
 11587  0027CE  C088  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
 11588                           
 11589                           ; BSR set to: 0
 11590  0027D2  0100               	movlb	0	; () banked
 11591  0027D4  2B8D               	incf	ModbusProcess_FC16@i& (0+255),f,b
 11592  0027D6                     l7765:
 11593  0027D6  FFFF               	dw	65535	; assembler added errata NOP
 11594                           
 11595                           ; BSR set to: 0
 11596  0027D8  0100               	movlb	0	; () banked
 11597  0027DA  518C               	movf	ModbusProcess_FC16@u8regsno& (0+255),w,b
 11598  0027DC  0100               	movlb	0	; () banked
 11599  0027DE  5D8D               	subwf	ModbusProcess_FC16@i& (0+255),w,b
 11600  0027E0  B0D8               	btfsc	status,0,c
 11601  0027E2  D019               	goto	l7769
 11602                           
 11603                           ; BSR set to: 0
 11604  0027E4  5032               	movf	ModbusProcess_FC16@u8size,w,c
 11605  0027E6  0100               	movlb	0	; () banked
 11606  0027E8  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11607  0027EA  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11608  0027EC  0100               	movlb	0	; () banked
 11609  0027EE  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11610  0027F0  0100               	movlb	0	; () banked
 11611  0027F2  258A               	addwf	ModbusProcess_FC16@u16StartAdd& (0+255),w,b
 11612  0027F4  0100               	movlb	0	; () banked
 11613  0027F6  6F82               	movwf	(??_ModbusProcess_FC16+2)& (0+255),b
 11614  0027F8  0E00               	movlw	0
 11615  0027FA  0100               	movlb	0	; () banked
 11616  0027FC  218B               	addwfc	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),w,b
 11617  0027FE  0100               	movlb	0	; () banked
 11618  002800  6F83               	movwf	(??_ModbusProcess_FC16+3)& (0+255),b
 11619  002802  0100               	movlb	0	; () banked
 11620  002804  5180               	movf	??_ModbusProcess_FC16& (0+255),w,b
 11621  002806  0100               	movlb	0	; () banked
 11622  002808  5D82               	subwf	(??_ModbusProcess_FC16+2)& (0+255),w,b
 11623  00280A  0100               	movlb	0	; () banked
 11624  00280C  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11625  00280E  0100               	movlb	0	; () banked
 11626  002810  5983               	subwfb	(??_ModbusProcess_FC16+3)& (0+255),w,b
 11627  002812  A0D8               	btfss	status,0,c
 11628  002814  D78A               	goto	l7761
 11629  002816                     l7769:
 11630  002816  FFFF               	dw	65535	; assembler added errata NOP
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;ModbusRtu.c: 1227: }
 11634                           ;ModbusRtu.c: 1228: u8CopyBufferSize = _u8BufferSize + 2;
 11635  002818  5053               	movf	__u8BufferSize,w,c
 11636  00281A  0F02               	addlw	2
 11637  00281C  0100               	movlb	0	; () banked
 11638  00281E  6F89               	movwf	ModbusProcess_FC16@u8CopyBufferSize& (0+255),b
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;ModbusRtu.c: 1229: ModbusSendTxBuffer();
 11642  002820  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11643                           
 11644                           ;ModbusRtu.c: 1231: return u8CopyBufferSize;
 11645  002824  0100               	movlb	0	; () banked
 11646  002826  5189               	movf	ModbusProcess_FC16@u8CopyBufferSize& (0+255),w,b
 11647                           
 11648                           ; BSR set to: 0
 11649                           
 11650                           ; BSR set to: 0
 11651  002828  0012               	return		;funcret
 11652  00282A  FFFF               	dw	65535	; errata NOP
 11653  00282C                     __end_of_ModbusProcess_FC16:
 11654                           	opt stack 0
 11655                           tblptru	equ	0xFF8
 11656                           tblptrh	equ	0xFF7
 11657                           tblptrl	equ	0xFF6
 11658                           tablat	equ	0xFF5
 11659                           prodh	equ	0xFF4
 11660                           prodl	equ	0xFF3
 11661                           intcon	equ	0xFF2
 11662                           postinc0	equ	0xFEE
 11663                           wreg	equ	0xFE8
 11664                           indf1	equ	0xFE7
 11665                           postinc1	equ	0xFE6
 11666                           postdec1	equ	0xFE5
 11667                           fsr1h	equ	0xFE2
 11668                           fsr1l	equ	0xFE1
 11669                           indf2	equ	0xFDF
 11670                           postinc2	equ	0xFDE
 11671                           postdec2	equ	0xFDD
 11672                           fsr2h	equ	0xFDA
 11673                           fsr2l	equ	0xFD9
 11674                           status	equ	0xFD8
 11675                           
 11676 ;; *************** function _ModbusProcess_FC15 *****************
 11677 ;; Defined at:
 11678 ;;		line 1145 in file "ModbusRtu.c"
 11679 ;; Parameters:    Size  Location     Type
 11680 ;;  regs            2   47[COMRAM] PTR unsigned short 
 11681 ;;		 -> _MODBUSCoils(2), 
 11682 ;; Auto vars:     Size  Location     Type
 11683 ;;  u16currentCo    2   10[BANK0 ] unsigned short 
 11684 ;;  u16Coilno       2    7[BANK0 ] unsigned short 
 11685 ;;  u16StartCoil    2    5[BANK0 ] unsigned short 
 11686 ;;  u16coil         2    0[BANK0 ] unsigned short 
 11687 ;;  u8bitsno        1   12[BANK0 ] unsigned char 
 11688 ;;  u8currentBit    1    9[BANK0 ] unsigned char 
 11689 ;;  u8frameByte     1    4[BANK0 ] unsigned char 
 11690 ;;  bTemp           1    3[BANK0 ] unsigned char 
 11691 ;;  u8CopyBuffer    1    2[BANK0 ] unsigned char 
 11692 ;; Return value:  Size  Location     Type
 11693 ;;                  1    wreg      unsigned char 
 11694 ;; Registers used:
 11695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11696 ;; Tracked objects:
 11697 ;;		On entry : 0/0
 11698 ;;		On exit  : 0/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11701 ;;      Params:         2       0       0       0       0       0       0
 11702 ;;      Locals:         0      13       0       0       0       0       0
 11703 ;;      Temps:          5       0       0       0       0       0       0
 11704 ;;      Totals:         7      13       0       0       0       0       0
 11705 ;;Total ram usage:       20 bytes
 11706 ;; Hardware stack levels used:    1
 11707 ;; Hardware stack levels required when called:    4
 11708 ;; This function calls:
 11709 ;;		_ModbusSendTxBuffer
 11710 ;; This function is called by:
 11711 ;;		_ModbusPoll
 11712 ;; This function uses a non-reentrant model
 11713 ;;
 11714                           
 11715                           	psect	text49
 11716  00257C                     __ptext49:
 11717                           	opt stack 0
 11718  00257C                     _ModbusProcess_FC15:
 11719                           	opt stack 25
 11720                           
 11721                           ; BSR set to: 0
 11722                           ;incstack = 0
 11723  00257C  FFFF               	dw	65535
 11724                           
 11725                           ;ModbusRtu.c: 1148: uint8_t u8currentBit, u8frameByte, u8bitsno;
 11726                           ;ModbusRtu.c: 1149: uint8_t u8CopyBufferSize;
 11727                           ;ModbusRtu.c: 1150: uint16_t u16currentCoil, u16coil;
 11728                           ;ModbusRtu.c: 1151: boolean bTemp;
 11729                           ;ModbusRtu.c: 1154: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
 11730  00257E  0101               	movlb	1	; () banked
 11731  002580  512C               	movf	(__au8Buffer+2)& (0+255),w,b
 11732  002582  6E32               	movwf	??_ModbusProcess_FC15& (0+255),c
 11733  002584  0101               	movlb	1	; () banked
 11734  002586  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 11735  002588  0100               	movlb	0	; () banked
 11736  00258A  6F85               	movwf	ModbusProcess_FC15@u16StartCoil& (0+255),b
 11737  00258C  C032  F086         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;ModbusRtu.c: 1155: _lastAddress = u16StartCoil;
 11741  002590  C085  F0E2         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
 11742  002594  C086  F0E3         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
 11743                           
 11744                           ;ModbusRtu.c: 1156: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
 11745  002598  0101               	movlb	1	; () banked
 11746  00259A  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 11747  00259C  6E32               	movwf	??_ModbusProcess_FC15& (0+255),c
 11748  00259E  0101               	movlb	1	; () banked
 11749  0025A0  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 11750  0025A2  0100               	movlb	0	; () banked
 11751  0025A4  6F87               	movwf	ModbusProcess_FC15@u16Coilno& (0+255),b
 11752  0025A6  C032  F088         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;ModbusRtu.c: 1157: _lastCount = u16Coilno;
 11756  0025AA  C087  F0E4         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
 11757  0025AE  C088  F0E5         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
 11758                           
 11759                           ;ModbusRtu.c: 1160: u8bitsno = 0;
 11760  0025B2  0E00               	movlw	0
 11761  0025B4  0100               	movlb	0	; () banked
 11762  0025B6  6F8C               	movwf	ModbusProcess_FC15@u8bitsno& (0+255),b
 11763                           
 11764                           ;ModbusRtu.c: 1161: u8frameByte = 7;
 11765  0025B8  0E07               	movlw	7
 11766  0025BA  0100               	movlb	0	; () banked
 11767  0025BC  6F84               	movwf	ModbusProcess_FC15@u8frameByte& (0+255),b
 11768                           
 11769                           ;ModbusRtu.c: 1162: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
 11770  0025BE  0E00               	movlw	0
 11771  0025C0  0100               	movlb	0	; () banked
 11772  0025C2  6F8B               	movwf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),b
 11773  0025C4  0E00               	movlw	0
 11774  0025C6  6F8A               	movwf	ModbusProcess_FC15@u16currentCoil& (0+255),b
 11775  0025C8  D071               	goto	l7733
 11776  0025CA                     l7711:
 11777  0025CA  FFFF               	dw	65535	; assembler added errata NOP
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;ModbusRtu.c: 1163: {
 11781                           ;ModbusRtu.c: 1165: u16coil = u16StartCoil + u16currentCoil;
 11782  0025CC  0100               	movlb	0	; () banked
 11783  0025CE  518A               	movf	ModbusProcess_FC15@u16currentCoil& (0+255),w,b
 11784  0025D0  0100               	movlb	0	; () banked
 11785  0025D2  2585               	addwf	ModbusProcess_FC15@u16StartCoil& (0+255),w,b
 11786  0025D4  0100               	movlb	0	; () banked
 11787  0025D6  6F80               	movwf	ModbusProcess_FC15@u16coil& (0+255),b
 11788  0025D8  0100               	movlb	0	; () banked
 11789  0025DA  518B               	movf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),w,b
 11790  0025DC  0100               	movlb	0	; () banked
 11791  0025DE  2186               	addwfc	(ModbusProcess_FC15@u16StartCoil+1)& (0+255),w,b
 11792  0025E0  0100               	movlb	0	; () banked
 11793  0025E2  6F81               	movwf	(ModbusProcess_FC15@u16coil+1)& (0+255),b
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;ModbusRtu.c: 1167: u8currentBit = (uint8_t) u16coil;
 11797  0025E4  C080  F089         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;ModbusRtu.c: 1169: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
 11801  0025E8  C08C  F032         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
 11802  0025EC  0100               	movlb	0	; () banked
 11803  0025EE  5184               	movf	ModbusProcess_FC15@u8frameByte& (0+255),w,b
 11804  0025F0  0D01               	mullw	1
 11805  0025F2  0E2A               	movlw	low __au8Buffer
 11806  0025F4  24F3               	addwf	prodl,w,c
 11807  0025F6  6ED9               	movwf	fsr2l,c
 11808  0025F8  0E01               	movlw	high __au8Buffer
 11809  0025FA  20F4               	addwfc	prodh,w,c
 11810  0025FC  6EDA               	movwf	fsr2h,c
 11811  0025FE  50DF               	movf	indf2,w,c
 11812  002600  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11813  002602  2A32               	incf	??_ModbusProcess_FC15,f,c
 11814  002604  D003               	goto	u7164
 11815  002606                     u7165:
 11816  002606  FFFF               	dw	65535	; assembler added errata NOP
 11817  002608  90D8               	bcf	status,0,c
 11818  00260A  3233               	rrcf	??_ModbusProcess_FC15+1,f,c
 11819  00260C                     u7164:
 11820  00260C  FFFF               	dw	65535	; assembler added errata NOP
 11821  00260E  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11822  002610  D7FA               	goto	u7165
 11823  002612  5033               	movf	??_ModbusProcess_FC15+1,w,c
 11824  002614  0B01               	andlw	1
 11825  002616  0100               	movlb	0	; () banked
 11826  002618  6F83               	movwf	ModbusProcess_FC15@bTemp& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;ModbusRtu.c: 1173: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
 11830  00261A  0100               	movlb	0	; () banked
 11831  00261C  5183               	movf	ModbusProcess_FC15@bTemp& (0+255),w,b
 11832  00261E  0100               	movlb	0	; () banked
 11833  002620  B4D8               	btfsc	status,2,c
 11834  002622  D018               	goto	l7721
 11835                           
 11836                           ; BSR set to: 0
 11837  002624  C089  F032         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 11838  002628  0E01               	movlw	1
 11839  00262A  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11840  00262C  0E00               	movlw	0
 11841  00262E  6E34               	movwf	(??_ModbusProcess_FC15+2)& (0+255),c
 11842  002630  2A32               	incf	??_ModbusProcess_FC15,f,c
 11843  002632  D004               	goto	u7184
 11844  002634                     u7185:
 11845  002634  FFFF               	dw	65535	; assembler added errata NOP
 11846  002636  90D8               	bcf	status,0,c
 11847  002638  3633               	rlcf	??_ModbusProcess_FC15+1,f,c
 11848  00263A  3634               	rlcf	??_ModbusProcess_FC15+2,f,c
 11849  00263C                     u7184:
 11850  00263C  FFFF               	dw	65535	; assembler added errata NOP
 11851  00263E  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11852  002640  D7F9               	goto	u7185
 11853  002642  C030  FFD9         	movff	ModbusProcess_FC15@regs,fsr2l
 11854  002646  C031  FFDA         	movff	ModbusProcess_FC15@regs+1,fsr2h
 11855  00264A  5033               	movf	??_ModbusProcess_FC15+1,w,c
 11856  00264C  12DE               	iorwf	postinc2,f,c
 11857  00264E  5034               	movf	??_ModbusProcess_FC15+2,w,c
 11858  002650  12DD               	iorwf	postdec2,f,c
 11859  002652  D01C               	goto	l7723
 11860  002654                     l7721:
 11861  002654  FFFF               	dw	65535	; assembler added errata NOP
 11862  002656  C089  F032         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 11863  00265A  0E01               	movlw	1
 11864  00265C  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11865  00265E  0E00               	movlw	0
 11866  002660  6E34               	movwf	(??_ModbusProcess_FC15+2)& (0+255),c
 11867  002662  2A32               	incf	??_ModbusProcess_FC15,f,c
 11868  002664  D004               	goto	u7194
 11869  002666                     u7195:
 11870  002666  FFFF               	dw	65535	; assembler added errata NOP
 11871  002668  90D8               	bcf	status,0,c
 11872  00266A  3633               	rlcf	??_ModbusProcess_FC15+1,f,c
 11873  00266C  3634               	rlcf	??_ModbusProcess_FC15+2,f,c
 11874  00266E                     u7194:
 11875  00266E  FFFF               	dw	65535	; assembler added errata NOP
 11876  002670  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11877  002672  D7F9               	goto	u7195
 11878  002674  1C33               	comf	??_ModbusProcess_FC15+1,w,c
 11879  002676  6E35               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
 11880  002678  1C34               	comf	??_ModbusProcess_FC15+2,w,c
 11881  00267A  6E36               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
 11882  00267C  C030  FFD9         	movff	ModbusProcess_FC15@regs,fsr2l
 11883  002680  C031  FFDA         	movff	ModbusProcess_FC15@regs+1,fsr2h
 11884  002684  5035               	movf	??_ModbusProcess_FC15+3,w,c
 11885  002686  16DE               	andwf	postinc2,f,c
 11886  002688  5036               	movf	??_ModbusProcess_FC15+4,w,c
 11887  00268A  16DD               	andwf	postdec2,f,c
 11888  00268C                     l7723:
 11889  00268C  FFFF               	dw	65535	; assembler added errata NOP
 11890                           
 11891                           ;ModbusRtu.c: 1178: u8bitsno++;
 11892  00268E  0100               	movlb	0	; () banked
 11893  002690  2B8C               	incf	ModbusProcess_FC15@u8bitsno& (0+255),f,b
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;ModbusRtu.c: 1180: if (u8bitsno > 7)
 11897  002692  0E07               	movlw	7
 11898  002694  0100               	movlb	0	; () banked
 11899  002696  658C               	cpfsgt	ModbusProcess_FC15@u8bitsno& (0+255),b
 11900  002698  D005               	goto	l7731
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;ModbusRtu.c: 1181: {
 11904                           ;ModbusRtu.c: 1182: u8bitsno = 0;
 11905  00269A  0E00               	movlw	0
 11906  00269C  0100               	movlb	0	; () banked
 11907  00269E  6F8C               	movwf	ModbusProcess_FC15@u8bitsno& (0+255),b
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;ModbusRtu.c: 1183: u8frameByte++;
 11911  0026A0  0100               	movlb	0	; () banked
 11912  0026A2  2B84               	incf	ModbusProcess_FC15@u8frameByte& (0+255),f,b
 11913  0026A4                     l7731:
 11914  0026A4  FFFF               	dw	65535	; assembler added errata NOP
 11915                           
 11916                           ; BSR set to: 0
 11917  0026A6  0100               	movlb	0	; () banked
 11918  0026A8  4B8A               	infsnz	ModbusProcess_FC15@u16currentCoil& (0+255),f,b
 11919  0026AA  2B8B               	incf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),f,b
 11920  0026AC                     l7733:
 11921  0026AC  FFFF               	dw	65535	; assembler added errata NOP
 11922                           
 11923                           ; BSR set to: 0
 11924  0026AE  0100               	movlb	0	; () banked
 11925  0026B0  5187               	movf	ModbusProcess_FC15@u16Coilno& (0+255),w,b
 11926  0026B2  0100               	movlb	0	; () banked
 11927  0026B4  5D8A               	subwf	ModbusProcess_FC15@u16currentCoil& (0+255),w,b
 11928  0026B6  0100               	movlb	0	; () banked
 11929  0026B8  5188               	movf	(ModbusProcess_FC15@u16Coilno+1)& (0+255),w,b
 11930  0026BA  0100               	movlb	0	; () banked
 11931  0026BC  598B               	subwfb	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),w,b
 11932  0026BE  A0D8               	btfss	status,0,c
 11933  0026C0  D784               	goto	l7711
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;ModbusRtu.c: 1184: }
 11937                           ;ModbusRtu.c: 1185: }
 11938                           ;ModbusRtu.c: 1189: _u8BufferSize = 6;
 11939                           
 11940                           ; BSR set to: 0
 11941  0026C2  0E06               	movlw	6
 11942  0026C4  6E53               	movwf	__u8BufferSize,c
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;ModbusRtu.c: 1190: u8CopyBufferSize = _u8BufferSize + 2;
 11946  0026C6  5053               	movf	__u8BufferSize,w,c
 11947  0026C8  0F02               	addlw	2
 11948  0026CA  0100               	movlb	0	; () banked
 11949  0026CC  6F82               	movwf	ModbusProcess_FC15@u8CopyBufferSize& (0+255),b
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;ModbusRtu.c: 1191: ModbusSendTxBuffer();
 11953  0026CE  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11954                           
 11955                           ;ModbusRtu.c: 1192: return u8CopyBufferSize;
 11956  0026D2  0100               	movlb	0	; () banked
 11957  0026D4  5182               	movf	ModbusProcess_FC15@u8CopyBufferSize& (0+255),w,b
 11958                           
 11959                           ; BSR set to: 0
 11960                           
 11961                           ; BSR set to: 0
 11962  0026D6  0012               	return		;funcret
 11963  0026D8  FFFF               	dw	65535	; errata NOP
 11964  0026DA                     __end_of_ModbusProcess_FC15:
 11965                           	opt stack 0
 11966                           tblptru	equ	0xFF8
 11967                           tblptrh	equ	0xFF7
 11968                           tblptrl	equ	0xFF6
 11969                           tablat	equ	0xFF5
 11970                           prodh	equ	0xFF4
 11971                           prodl	equ	0xFF3
 11972                           intcon	equ	0xFF2
 11973                           postinc0	equ	0xFEE
 11974                           wreg	equ	0xFE8
 11975                           indf1	equ	0xFE7
 11976                           postinc1	equ	0xFE6
 11977                           postdec1	equ	0xFE5
 11978                           fsr1h	equ	0xFE2
 11979                           fsr1l	equ	0xFE1
 11980                           indf2	equ	0xFDF
 11981                           postinc2	equ	0xFDE
 11982                           postdec2	equ	0xFDD
 11983                           fsr2h	equ	0xFDA
 11984                           fsr2l	equ	0xFD9
 11985                           status	equ	0xFD8
 11986                           
 11987 ;; *************** function _ModbusProcess_FC102 *****************
 11988 ;; Defined at:
 11989 ;;		line 1520 in file "ModbusRtu.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;		None
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;                  1    wreg      unsigned char 
 11996 ;; Registers used:
 11997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12003 ;;      Params:         0       0       0       0       0       0       0
 12004 ;;      Locals:         1       0       0       0       0       0       0
 12005 ;;      Temps:          0       0       0       0       0       0       0
 12006 ;;      Totals:         1       0       0       0       0       0       0
 12007 ;;Total ram usage:        1 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    4
 12010 ;; This function calls:
 12011 ;;		_ModbusSendTxBuffer
 12012 ;; This function is called by:
 12013 ;;		_ModbusPoll
 12014 ;; This function uses a non-reentrant model
 12015 ;;
 12016                           
 12017                           	psect	text50
 12018  00024C                     __ptext50:
 12019                           	opt stack 0
 12020  00024C                     _ModbusProcess_FC102:
 12021                           	opt stack 25
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;incstack = 0
 12025  00024C  FFFF               	dw	65535
 12026                           
 12027                           ;ModbusRtu.c: 1522: _au8Buffer[FUNC + 1] = _deviceStatus;
 12028  00024E  C046  F12C         	movff	__deviceStatus,__au8Buffer+2
 12029                           
 12030                           ;ModbusRtu.c: 1523: _u8BufferSize = 3;
 12031  000252  0E03               	movlw	3
 12032  000254  6E53               	movwf	__u8BufferSize,c
 12033                           
 12034                           ;ModbusRtu.c: 1524: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12035  000256  5053               	movf	__u8BufferSize,w,c
 12036  000258  0F02               	addlw	2
 12037  00025A  6E30               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
 12038                           
 12039                           ;ModbusRtu.c: 1525: ModbusSendTxBuffer();
 12040  00025C  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12041                           
 12042                           ;ModbusRtu.c: 1527: return u8CopyBufferSize;
 12043  000260  5030               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
 12044  000262  0012               	return		;funcret
 12045  000264  FFFF               	dw	65535	; errata NOP
 12046  000266                     __end_of_ModbusProcess_FC102:
 12047                           	opt stack 0
 12048                           tblptru	equ	0xFF8
 12049                           tblptrh	equ	0xFF7
 12050                           tblptrl	equ	0xFF6
 12051                           tablat	equ	0xFF5
 12052                           prodh	equ	0xFF4
 12053                           prodl	equ	0xFF3
 12054                           intcon	equ	0xFF2
 12055                           postinc0	equ	0xFEE
 12056                           wreg	equ	0xFE8
 12057                           indf1	equ	0xFE7
 12058                           postinc1	equ	0xFE6
 12059                           postdec1	equ	0xFE5
 12060                           fsr1h	equ	0xFE2
 12061                           fsr1l	equ	0xFE1
 12062                           indf2	equ	0xFDF
 12063                           postinc2	equ	0xFDE
 12064                           postdec2	equ	0xFDD
 12065                           fsr2h	equ	0xFDA
 12066                           fsr2l	equ	0xFD9
 12067                           status	equ	0xFD8
 12068                           
 12069 ;; *************** function _ModbusProcess_FC101 *****************
 12070 ;; Defined at:
 12071 ;;		line 1502 in file "ModbusRtu.c"
 12072 ;; Parameters:    Size  Location     Type
 12073 ;;		None
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 12076 ;; Return value:  Size  Location     Type
 12077 ;;                  1    wreg      unsigned char 
 12078 ;; Registers used:
 12079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12080 ;; Tracked objects:
 12081 ;;		On entry : 0/0
 12082 ;;		On exit  : 0/0
 12083 ;;		Unchanged: 0/0
 12084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12085 ;;      Params:         0       0       0       0       0       0       0
 12086 ;;      Locals:         1       0       0       0       0       0       0
 12087 ;;      Temps:          0       0       0       0       0       0       0
 12088 ;;      Totals:         1       0       0       0       0       0       0
 12089 ;;Total ram usage:        1 bytes
 12090 ;; Hardware stack levels used:    1
 12091 ;; Hardware stack levels required when called:    4
 12092 ;; This function calls:
 12093 ;;		_ModbusSendTxBuffer
 12094 ;; This function is called by:
 12095 ;;		_ModbusPoll
 12096 ;; This function uses a non-reentrant model
 12097 ;;
 12098                           
 12099                           	psect	text51
 12100  003F66                     __ptext51:
 12101                           	opt stack 0
 12102  003F66                     _ModbusProcess_FC101:
 12103                           	opt stack 25
 12104                           
 12105                           ;incstack = 0
 12106  003F66  FFFF               	dw	65535
 12107                           
 12108                           ;ModbusRtu.c: 1504: _u8BufferSize = 10;
 12109  003F68  0E0A               	movlw	10
 12110  003F6A  6E53               	movwf	__u8BufferSize,c
 12111                           
 12112                           ;ModbusRtu.c: 1505: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
 12113  003F6C  C12C  F05C         	movff	__au8Buffer+2,_ModbusUserCommandId
 12114                           
 12115                           ;ModbusRtu.c: 1506: ModbusUserCommandData = _au8Buffer[COM_DATA];
 12116  003F70  C12D  F05B         	movff	__au8Buffer+3,_ModbusUserCommandData
 12117                           
 12118                           ;ModbusRtu.c: 1507: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
 12119  003F74  C12E  F059         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
 12120                           
 12121                           ;ModbusRtu.c: 1508: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
 12122  003F78  C12F  F05A         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
 12123                           
 12124                           ;ModbusRtu.c: 1509: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
 12125  003F7C  C130  F0F9         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
 12126                           
 12127                           ;ModbusRtu.c: 1510: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
 12128  003F80  C131  F0FA         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
 12129                           
 12130                           ;ModbusRtu.c: 1511: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
 12131  003F84  C132  F0FB         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
 12132                           
 12133                           ;ModbusRtu.c: 1512: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
 12134  003F88  C133  F0FC         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
 12135                           
 12136                           ;ModbusRtu.c: 1514: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12137  003F8C  5053               	movf	__u8BufferSize,w,c
 12138  003F8E  0F02               	addlw	2
 12139  003F90  6E30               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
 12140                           
 12141                           ;ModbusRtu.c: 1515: ModbusSendTxBuffer();
 12142  003F92  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12143                           
 12144                           ;ModbusRtu.c: 1517: return u8CopyBufferSize;
 12145  003F96  5030               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
 12146  003F98  0012               	return		;funcret
 12147  003F9A  FFFF               	dw	65535	; errata NOP
 12148  003F9C                     __end_of_ModbusProcess_FC101:
 12149                           	opt stack 0
 12150                           tblptru	equ	0xFF8
 12151                           tblptrh	equ	0xFF7
 12152                           tblptrl	equ	0xFF6
 12153                           tablat	equ	0xFF5
 12154                           prodh	equ	0xFF4
 12155                           prodl	equ	0xFF3
 12156                           intcon	equ	0xFF2
 12157                           postinc0	equ	0xFEE
 12158                           wreg	equ	0xFE8
 12159                           indf1	equ	0xFE7
 12160                           postinc1	equ	0xFE6
 12161                           postdec1	equ	0xFE5
 12162                           fsr1h	equ	0xFE2
 12163                           fsr1l	equ	0xFE1
 12164                           indf2	equ	0xFDF
 12165                           postinc2	equ	0xFDE
 12166                           postdec2	equ	0xFDD
 12167                           fsr2h	equ	0xFDA
 12168                           fsr2l	equ	0xFD9
 12169                           status	equ	0xFD8
 12170                           
 12171 ;; *************** function _ModbusProcess_FC100 *****************
 12172 ;; Defined at:
 12173 ;;		line 1460 in file "ModbusRtu.c"
 12174 ;; Parameters:    Size  Location     Type
 12175 ;;		None
 12176 ;; Auto vars:     Size  Location     Type
 12177 ;;  newTime        18   35[BANK0 ] struct tm
 12178 ;;  newRawTime      4   30[BANK0 ] long 
 12179 ;;  u8CopyBuffer    1   34[BANK0 ] unsigned char 
 12180 ;; Return value:  Size  Location     Type
 12181 ;;                  1    wreg      unsigned char 
 12182 ;; Registers used:
 12183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12184 ;; Tracked objects:
 12185 ;;		On entry : 0/0
 12186 ;;		On exit  : 0/0
 12187 ;;		Unchanged: 0/0
 12188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12189 ;;      Params:         0       0       0       0       0       0       0
 12190 ;;      Locals:         0      23       0       0       0       0       0
 12191 ;;      Temps:          0       0       0       0       0       0       0
 12192 ;;      Totals:         0      23       0       0       0       0       0
 12193 ;;Total ram usage:       23 bytes
 12194 ;; Hardware stack levels used:    1
 12195 ;; Hardware stack levels required when called:    6
 12196 ;; This function calls:
 12197 ;;		_ModbusSendTxBuffer
 12198 ;;		_ModbusSetExceptionStatusBit
 12199 ;;		_SetHourMin
 12200 ;;		_SetTime
 12201 ;;		_mktime
 12202 ;; This function is called by:
 12203 ;;		_ModbusPoll
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           	psect	text52
 12208  00282C                     __ptext52:
 12209                           	opt stack 0
 12210  00282C                     _ModbusProcess_FC100:
 12211                           	opt stack 23
 12212                           
 12213                           ;incstack = 0
 12214  00282C  FFFF               	dw	65535
 12215                           
 12216                           ;ModbusRtu.c: 1462: _u8BufferSize = 10;
 12217  00282E  0E0A               	movlw	10
 12218  002830  6E53               	movwf	__u8BufferSize,c
 12219                           
 12220                           ;ModbusRtu.c: 1463: _lastCommand = _au8Buffer[COM_COM_ID];
 12221  002832  C12C  F04C         	movff	__au8Buffer+2,__lastCommand
 12222                           
 12223                           ;ModbusRtu.c: 1464: switch(_lastCommand)
 12224  002836  D06E               	goto	l8025
 12225  002838                     l1029:
 12226  002838  FFFF               	dw	65535	; assembler added errata NOP
 12227  00283A  00FF               	reset		; ;# 
 12228                           
 12229                           ;ModbusRtu.c: 1470: break;
 12230  00283C  D076               	goto	l8027
 12231  00283E                     l1031:
 12232  00283E  FFFF               	dw	65535	; assembler added errata NOP
 12233                           
 12234                           ;ModbusRtu.c: 1472: _u8id = _au8Buffer[COM_DATA];
 12235  002840  C12D  F0F0         	movff	__au8Buffer+3,__u8id
 12236  002844                     l1033:
 12237  002844  FFFF               	dw	65535	; assembler added errata NOP
 12238  002846  B2A6               	btfsc	4006,1,c	;volatile
 12239  002848  D7FD               	goto	l1033
 12240  00284A  0E01               	movlw	1
 12241  00284C  6EA9               	movwf	4009,c	;volatile
 12242  00284E  C0F0  FFA8         	movff	__u8id,4008	;volatile
 12243  002852  9EA6               	bcf	4006,7,c	;volatile
 12244  002854  9CA6               	bcf	4006,6,c	;volatile
 12245  002856  90D8               	bcf	status,0,c	;volatile
 12246  002858  BEF2               	btfsc	intcon,7,c	;volatile
 12247  00285A  80D8               	bsf	status,0,c	;volatile
 12248  00285C  9EF2               	bcf	intcon,7,c	;volatile
 12249  00285E  84A6               	bsf	4006,2,c	;volatile
 12250  002860  0E55               	movlw	85
 12251  002862  6EA7               	movwf	4007,c	;volatile
 12252  002864  0EAA               	movlw	170
 12253  002866  6EA7               	movwf	4007,c	;volatile
 12254  002868  82A6               	bsf	4006,1,c	;volatile
 12255  00286A  94A6               	bcf	4006,2,c	;volatile
 12256  00286C  B0D8               	btfsc	status,0,c	;volatile
 12257  00286E  8EF2               	bsf	intcon,7,c	;volatile
 12258  002870                     l1039:
 12259  002870  FFFF               	dw	65535	; assembler added errata NOP
 12260  002872  B2A6               	btfsc	4006,1,c	;volatile
 12261  002874  D7FD               	goto	l1039
 12262                           
 12263                           ;ModbusRtu.c: 1476: ModbusSetExceptionStatusBit(0, 1);
 12264  002876  0E01               	movlw	1
 12265  002878  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
 12266  00287A  0E00               	movlw	0
 12267  00287C  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
 12268                           
 12269                           ;ModbusRtu.c: 1477: break;
 12270  002880  D054               	goto	l8027
 12271  002882                     l8001:
 12272  002882  FFFF               	dw	65535	; assembler added errata NOP
 12273                           
 12274                           ;ModbusRtu.c: 1479: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
 12275  002884  0E2E               	movlw	low (__au8Buffer+4)
 12276  002886  6E2D               	movwf	SetHourMin@newHour,c
 12277  002888  0E01               	movlw	high (__au8Buffer+4)
 12278  00288A  6E2E               	movwf	SetHourMin@newHour+1,c
 12279  00288C  0E2F               	movlw	low (__au8Buffer+5)
 12280  00288E  6E2F               	movwf	SetHourMin@newMin,c
 12281  002890  0E01               	movlw	high (__au8Buffer+5)
 12282  002892  6E30               	movwf	SetHourMin@newMin+1,c
 12283  002894  0E31               	movlw	low (__au8Buffer+7)
 12284  002896  6E31               	movwf	SetHourMin@sec,c
 12285  002898  0E01               	movlw	high (__au8Buffer+7)
 12286  00289A  6E32               	movwf	SetHourMin@sec+1,c
 12287  00289C  EC62  F017         	call	_SetHourMin	;wreg free
 12288                           
 12289                           ;ModbusRtu.c: 1482: struct tm newTime;
 12290                           ;ModbusRtu.c: 1483: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
 12291  0028A0  0E64               	movlw	100
 12292  0028A2  0101               	movlb	1	; () banked
 12293  0028A4  2533               	addwf	(__au8Buffer+9)& (0+255),w,b
 12294  0028A6  0100               	movlb	0	; () banked
 12295  0028A8  6FAD               	movwf	(ModbusProcess_FC100@newTime+10)& (0+255),b
 12296  0028AA  0100               	movlb	0	; () banked
 12297  0028AC  6BAE               	clrf	(ModbusProcess_FC100@newTime+11)& (0+255),b
 12298  0028AE  0E00               	movlw	0
 12299  0028B0  23AE               	addwfc	(ModbusProcess_FC100@newTime+11)& (0+255),f,b
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;ModbusRtu.c: 1484: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
 12303  0028B2  C132  F0AB         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
 12304  0028B6  0100               	movlb	0	; () banked
 12305  0028B8  6BAC               	clrf	(ModbusProcess_FC100@newTime+9)& (0+255),b
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;ModbusRtu.c: 1485: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
 12309  0028BA  C130  F0A9         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
 12310  0028BE  0100               	movlb	0	; () banked
 12311  0028C0  6BAA               	clrf	(ModbusProcess_FC100@newTime+7)& (0+255),b
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;ModbusRtu.c: 1486: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
 12315  0028C2  C12E  F0A7         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
 12316  0028C6  0100               	movlb	0	; () banked
 12317  0028C8  6BA8               	clrf	(ModbusProcess_FC100@newTime+5)& (0+255),b
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;ModbusRtu.c: 1487: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
 12321  0028CA  C12F  F0A5         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
 12322  0028CE  0100               	movlb	0	; () banked
 12323  0028D0  6BA6               	clrf	(ModbusProcess_FC100@newTime+3)& (0+255),b
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;ModbusRtu.c: 1488: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
 12327  0028D2  C131  F0A3         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
 12328  0028D6  0100               	movlb	0	; () banked
 12329  0028D8  6BA4               	clrf	(ModbusProcess_FC100@newTime+1)& (0+255),b
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;ModbusRtu.c: 1489: time_t newRawTime = mktime(&newTime);
 12333  0028DA  0EA3               	movlw	low ModbusProcess_FC100@newTime
 12334  0028DC  0100               	movlb	0	; () banked
 12335  0028DE  6F90               	movwf	mktime@timeptr& (0+255),b
 12336  0028E0  0E00               	movlw	high ModbusProcess_FC100@newTime
 12337  0028E2  0100               	movlb	0	; () banked
 12338  0028E4  6F91               	movwf	(mktime@timeptr+1)& (0+255),b
 12339  0028E6  ECC7  F00A         	call	_mktime	;wreg free
 12340  0028EA  C090  F09E         	movff	?_mktime,ModbusProcess_FC100@newRawTime
 12341  0028EE  C091  F09F         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
 12342  0028F2  C092  F0A0         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
 12343  0028F6  C093  F0A1         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
 12344                           
 12345                           ;ModbusRtu.c: 1490: SetTime(&newRawTime);
 12346  0028FA  0E9E               	movlw	low ModbusProcess_FC100@newRawTime
 12347  0028FC  6E21               	movwf	SetTime@newTime,c
 12348  0028FE  0E00               	movlw	high ModbusProcess_FC100@newRawTime
 12349  002900  6E22               	movwf	SetTime@newTime+1,c
 12350  002902  EC08  F001         	call	_SetTime	;wreg free
 12351                           
 12352                           ;ModbusRtu.c: 1492: ((_deviceStatus) |= ((unsigned short)1 << (0)));
 12353  002906  8046               	bsf	__deviceStatus,0,c
 12354                           
 12355                           ;ModbusRtu.c: 1493: ModbusSetExceptionStatusBit(0, 1);
 12356  002908  0E01               	movlw	1
 12357  00290A  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
 12358  00290C  0E00               	movlw	0
 12359  00290E  ECE9  F01E         	call	_ModbusSetExceptionStatusBit
 12360                           
 12361                           ;ModbusRtu.c: 1495: }
 12362                           
 12363                           ;ModbusRtu.c: 1494: break;
 12364  002912  D00B               	goto	l8027
 12365  002914                     l8025:
 12366  002914  FFFF               	dw	65535	; assembler added errata NOP
 12367  002916  504C               	movf	__lastCommand,w,c
 12368                           
 12369                           ; Switch size 1, requested type "space"
 12370                           ; Number of cases is 3, Range of values is 1 to 127
 12371                           ; switch strategies available:
 12372                           ; Name         Instructions Cycles
 12373                           ; simple_byte           10     6 (average)
 12374                           ;	Chosen strategy is simple_byte
 12375  002918  0A01               	xorlw	1	; case 1
 12376  00291A  B4D8               	btfsc	status,2,c
 12377  00291C  D790               	goto	l1031
 12378  00291E  0A11               	xorlw	17	; case 16
 12379  002920  B4D8               	btfsc	status,2,c
 12380  002922  D7AF               	goto	l8001
 12381  002924  0A6F               	xorlw	111	; case 127
 12382  002926  B4D8               	btfsc	status,2,c
 12383  002928  D787               	goto	l1029
 12384  00292A                     l8027:
 12385  00292A  FFFF               	dw	65535	; assembler added errata NOP
 12386                           
 12387                           ;ModbusRtu.c: 1496: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12388  00292C  5053               	movf	__u8BufferSize,w,c
 12389  00292E  0F02               	addlw	2
 12390  002930  0100               	movlb	0	; () banked
 12391  002932  6FA2               	movwf	ModbusProcess_FC100@u8CopyBufferSize& (0+255),b
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;ModbusRtu.c: 1497: ModbusSendTxBuffer();
 12395  002934  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12396                           
 12397                           ;ModbusRtu.c: 1499: return u8CopyBufferSize;
 12398  002938  0100               	movlb	0	; () banked
 12399  00293A  51A2               	movf	ModbusProcess_FC100@u8CopyBufferSize& (0+255),w,b
 12400                           
 12401                           ; BSR set to: 0
 12402                           
 12403                           ; BSR set to: 0
 12404  00293C  0012               	return		;funcret
 12405  00293E  FFFF               	dw	65535	; errata NOP
 12406  002940                     __end_of_ModbusProcess_FC100:
 12407                           	opt stack 0
 12408                           tblptru	equ	0xFF8
 12409                           tblptrh	equ	0xFF7
 12410                           tblptrl	equ	0xFF6
 12411                           tablat	equ	0xFF5
 12412                           prodh	equ	0xFF4
 12413                           prodl	equ	0xFF3
 12414                           intcon	equ	0xFF2
 12415                           postinc0	equ	0xFEE
 12416                           wreg	equ	0xFE8
 12417                           indf1	equ	0xFE7
 12418                           postinc1	equ	0xFE6
 12419                           postdec1	equ	0xFE5
 12420                           fsr1h	equ	0xFE2
 12421                           fsr1l	equ	0xFE1
 12422                           indf2	equ	0xFDF
 12423                           postinc2	equ	0xFDE
 12424                           postdec2	equ	0xFDD
 12425                           fsr2h	equ	0xFDA
 12426                           fsr2l	equ	0xFD9
 12427                           status	equ	0xFD8
 12428                           
 12429 ;; *************** function _mktime *****************
 12430 ;; Defined at:
 12431 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;  timeptr         2   16[BANK0 ] PTR struct tm
 12434 ;;		 -> ModbusProcess_FC100@newTime(18), 
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  tt              4   26[BANK0 ] long 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  4   16[BANK0 ] long 
 12439 ;; Registers used:
 12440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12446 ;;      Params:         0       4       0       0       0       0       0
 12447 ;;      Locals:         0       4       0       0       0       0       0
 12448 ;;      Temps:          0       6       0       0       0       0       0
 12449 ;;      Totals:         0      14       0       0       0       0       0
 12450 ;;Total ram usage:       14 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    5
 12453 ;; This function calls:
 12454 ;;		___lmul
 12455 ;;		_ymd_to_scalar
 12456 ;; This function is called by:
 12457 ;;		_ModbusProcess_FC100
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           	psect	text53
 12462  00158E                     __ptext53:
 12463                           	opt stack 0
 12464  00158E                     _mktime:
 12465                           	opt stack 23
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;incstack = 0
 12469  00158E  FFFF               	dw	65535
 12470  001590  0100               	movlb	0	; () banked
 12471  001592  EE20 F00A          	lfsr	2,10
 12472  001596  5190               	movf	mktime@timeptr& (0+255),w,b
 12473  001598  26D9               	addwf	fsr2l,f,c
 12474  00159A  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12475  00159C  22DA               	addwfc	fsr2h,f,c
 12476  00159E  0E01               	movlw	1
 12477  0015A0  BEDB               	btfsc	plusw2,7,c
 12478  0015A2  D018               	goto	l1498
 12479  0015A4  0E01               	movlw	1
 12480  0015A6  50DB               	movf	plusw2,w,c
 12481  0015A8  E104               	bnz	u6610
 12482  0015AA  0E46               	movlw	70
 12483  0015AC  5CDE               	subwf	postinc2,w,c
 12484  0015AE  A0D8               	btfss	status,0,c
 12485  0015B0  D011               	goto	l1498
 12486  0015B2                     u6610:
 12487                           
 12488                           ; BSR set to: 0
 12489  0015B2  0100               	movlb	0	; () banked
 12490  0015B4  EE20 F00A          	lfsr	2,10
 12491  0015B8  5190               	movf	mktime@timeptr& (0+255),w,b
 12492  0015BA  26D9               	addwf	fsr2l,f,c
 12493  0015BC  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12494  0015BE  22DA               	addwfc	fsr2h,f,c
 12495  0015C0  0E01               	movlw	1
 12496  0015C2  BEDB               	btfsc	plusw2,7,c
 12497  0015C4  D00E               	goto	l7245
 12498  0015C6  0E01               	movlw	1
 12499  0015C8  50DB               	movf	plusw2,w,c
 12500  0015CA  E104               	bnz	u6620
 12501  0015CC  0E8B               	movlw	139
 12502  0015CE  5CDE               	subwf	postinc2,w,c
 12503  0015D0  A0D8               	btfss	status,0,c
 12504  0015D2  D007               	goto	l7245
 12505  0015D4                     u6620:
 12506  0015D4                     l1498:
 12507  0015D4  FFFF               	dw	65535	; assembler added errata NOP
 12508                           
 12509                           ; BSR set to: 0
 12510  0015D6  0100               	movlb	0	; () banked
 12511  0015D8  699A               	setf	mktime@tt& (0+255),b
 12512  0015DA  699B               	setf	(mktime@tt+1)& (0+255),b
 12513  0015DC  699C               	setf	(mktime@tt+2)& (0+255),b
 12514  0015DE  699D               	setf	(mktime@tt+3)& (0+255),b
 12515  0015E0  D10F               	goto	l7255
 12516  0015E2                     l7245:
 12517  0015E2  FFFF               	dw	65535	; assembler added errata NOP
 12518                           
 12519                           ; BSR set to: 0
 12520  0015E4  0100               	movlb	0	; () banked
 12521  0015E6  EE20 F00A          	lfsr	2,10
 12522  0015EA  5190               	movf	mktime@timeptr& (0+255),w,b
 12523  0015EC  26D9               	addwf	fsr2l,f,c
 12524  0015EE  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12525  0015F0  22DA               	addwfc	fsr2h,f,c
 12526  0015F2  CFDE F094          	movff	postinc2,??_mktime
 12527  0015F6  CFDD F095          	movff	postdec2,??_mktime+1
 12528  0015FA  0E6C               	movlw	108
 12529  0015FC  0100               	movlb	0	; () banked
 12530  0015FE  2594               	addwf	??_mktime& (0+255),w,b
 12531  001600  0100               	movlb	0	; () banked
 12532  001602  6F80               	movwf	ymd_to_scalar@yr& (0+255),b
 12533  001604  0E07               	movlw	7
 12534  001606  0100               	movlb	0	; () banked
 12535  001608  2195               	addwfc	(??_mktime+1)& (0+255),w,b
 12536  00160A  0100               	movlb	0	; () banked
 12537  00160C  6F81               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
 12538  00160E  0100               	movlb	0	; () banked
 12539  001610  EE20 F008          	lfsr	2,8
 12540  001614  5190               	movf	mktime@timeptr& (0+255),w,b
 12541  001616  26D9               	addwf	fsr2l,f,c
 12542  001618  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12543  00161A  22DA               	addwfc	fsr2h,f,c
 12544  00161C  CFDE F096          	movff	postinc2,??_mktime+2
 12545  001620  CFDD F097          	movff	postdec2,??_mktime+3
 12546  001624  0E01               	movlw	1
 12547  001626  0100               	movlb	0	; () banked
 12548  001628  2596               	addwf	(??_mktime+2)& (0+255),w,b
 12549  00162A  0100               	movlb	0	; () banked
 12550  00162C  6F82               	movwf	ymd_to_scalar@mo& (0+255),b
 12551  00162E  0E00               	movlw	0
 12552  001630  0100               	movlb	0	; () banked
 12553  001632  2197               	addwfc	(??_mktime+3)& (0+255),w,b
 12554  001634  0100               	movlb	0	; () banked
 12555  001636  6F83               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
 12556  001638  0100               	movlb	0	; () banked
 12557  00163A  EE20 F006          	lfsr	2,6
 12558  00163E  5190               	movf	mktime@timeptr& (0+255),w,b
 12559  001640  26D9               	addwf	fsr2l,f,c
 12560  001642  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12561  001644  22DA               	addwfc	fsr2h,f,c
 12562  001646  CFDE F084          	movff	postinc2,ymd_to_scalar@day
 12563  00164A  CFDD F085          	movff	postdec2,ymd_to_scalar@day+1
 12564  00164E  ECF5  F016         	call	_ymd_to_scalar	;wreg free
 12565  001652  C080  F09A         	movff	?_ymd_to_scalar,mktime@tt
 12566  001656  C081  F09B         	movff	?_ymd_to_scalar+1,mktime@tt+1
 12567  00165A  C082  F09C         	movff	?_ymd_to_scalar+2,mktime@tt+2
 12568  00165E  C083  F09D         	movff	?_ymd_to_scalar+3,mktime@tt+3
 12569  001662  0E07               	movlw	7
 12570  001664  0100               	movlb	0	; () banked
 12571  001666  6F81               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
 12572  001668  0EB2               	movlw	178
 12573  00166A  6F80               	movwf	ymd_to_scalar@yr& (0+255),b
 12574  00166C  0E00               	movlw	0
 12575  00166E  0100               	movlb	0	; () banked
 12576  001670  6F83               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
 12577  001672  0E01               	movlw	1
 12578  001674  6F82               	movwf	ymd_to_scalar@mo& (0+255),b
 12579  001676  0E00               	movlw	0
 12580  001678  0100               	movlb	0	; () banked
 12581  00167A  6F85               	movwf	(ymd_to_scalar@day+1)& (0+255),b
 12582  00167C  0E01               	movlw	1
 12583  00167E  6F84               	movwf	ymd_to_scalar@day& (0+255),b
 12584  001680  ECF5  F016         	call	_ymd_to_scalar	;wreg free
 12585  001684  0100               	movlb	0	; () banked
 12586  001686  5180               	movf	?_ymd_to_scalar& (0+255),w,b
 12587  001688  0100               	movlb	0	; () banked
 12588  00168A  5F9A               	subwf	mktime@tt& (0+255),f,b
 12589  00168C  0100               	movlb	0	; () banked
 12590  00168E  5181               	movf	(?_ymd_to_scalar+1)& (0+255),w,b
 12591  001690  0100               	movlb	0	; () banked
 12592  001692  5B9B               	subwfb	(mktime@tt+1)& (0+255),f,b
 12593  001694  0100               	movlb	0	; () banked
 12594  001696  5182               	movf	(?_ymd_to_scalar+2)& (0+255),w,b
 12595  001698  0100               	movlb	0	; () banked
 12596  00169A  5B9C               	subwfb	(mktime@tt+2)& (0+255),f,b
 12597  00169C  0100               	movlb	0	; () banked
 12598  00169E  5183               	movf	(?_ymd_to_scalar+3)& (0+255),w,b
 12599  0016A0  0100               	movlb	0	; () banked
 12600  0016A2  5B9D               	subwfb	(mktime@tt+3)& (0+255),f,b
 12601                           
 12602                           ; BSR set to: 0
 12603  0016A4  0100               	movlb	0	; () banked
 12604  0016A6  EE20 F004          	lfsr	2,4
 12605  0016AA  5190               	movf	mktime@timeptr& (0+255),w,b
 12606  0016AC  26D9               	addwf	fsr2l,f,c
 12607  0016AE  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12608  0016B0  22DA               	addwfc	fsr2h,f,c
 12609  0016B2  CFDE F094          	movff	postinc2,??_mktime
 12610  0016B6  CFDD F095          	movff	postdec2,??_mktime+1
 12611  0016BA  C094  F096         	movff	??_mktime,??_mktime+2
 12612  0016BE  C095  F097         	movff	??_mktime+1,??_mktime+3
 12613  0016C2  0E00               	movlw	0
 12614  0016C4  0100               	movlb	0	; () banked
 12615  0016C6  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12616  0016C8  0EFF               	movlw	255
 12617  0016CA  6F98               	movwf	(??_mktime+4)& (0+255),b
 12618  0016CC  6F99               	movwf	(??_mktime+5)& (0+255),b
 12619  0016CE  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12620  0016D2  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12621  0016D6  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12622  0016DA  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12623  0016DE  0E18               	movlw	24
 12624  0016E0  6E25               	movwf	___lmul@multiplicand,c
 12625  0016E2  0E00               	movlw	0
 12626  0016E4  6E26               	movwf	___lmul@multiplicand+1,c
 12627  0016E6  0E00               	movlw	0
 12628  0016E8  6E27               	movwf	___lmul@multiplicand+2,c
 12629  0016EA  0E00               	movlw	0
 12630  0016EC  6E28               	movwf	___lmul@multiplicand+3,c
 12631  0016EE  ECBA  F01D         	call	___lmul	;wreg free
 12632  0016F2  0100               	movlb	0	; () banked
 12633  0016F4  5196               	movf	(??_mktime+2)& (0+255),w,b
 12634  0016F6  2421               	addwf	?___lmul,w,c
 12635  0016F8  0100               	movlb	0	; () banked
 12636  0016FA  6F9A               	movwf	mktime@tt& (0+255),b
 12637  0016FC  0100               	movlb	0	; () banked
 12638  0016FE  5197               	movf	(??_mktime+3)& (0+255),w,b
 12639  001700  2022               	addwfc	?___lmul+1,w,c
 12640  001702  0100               	movlb	0	; () banked
 12641  001704  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12642  001706  0100               	movlb	0	; () banked
 12643  001708  5198               	movf	(??_mktime+4)& (0+255),w,b
 12644  00170A  2023               	addwfc	?___lmul+2,w,c
 12645  00170C  0100               	movlb	0	; () banked
 12646  00170E  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12647  001710  0100               	movlb	0	; () banked
 12648  001712  5199               	movf	(??_mktime+5)& (0+255),w,b
 12649  001714  2024               	addwfc	?___lmul+3,w,c
 12650  001716  0100               	movlb	0	; () banked
 12651  001718  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12652                           
 12653                           ; BSR set to: 0
 12654  00171A  0100               	movlb	0	; () banked
 12655  00171C  EE20 F002          	lfsr	2,2
 12656  001720  5190               	movf	mktime@timeptr& (0+255),w,b
 12657  001722  26D9               	addwf	fsr2l,f,c
 12658  001724  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12659  001726  22DA               	addwfc	fsr2h,f,c
 12660  001728  CFDE F094          	movff	postinc2,??_mktime
 12661  00172C  CFDD F095          	movff	postdec2,??_mktime+1
 12662  001730  C094  F096         	movff	??_mktime,??_mktime+2
 12663  001734  C095  F097         	movff	??_mktime+1,??_mktime+3
 12664  001738  0E00               	movlw	0
 12665  00173A  0100               	movlb	0	; () banked
 12666  00173C  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12667  00173E  0EFF               	movlw	255
 12668  001740  6F98               	movwf	(??_mktime+4)& (0+255),b
 12669  001742  6F99               	movwf	(??_mktime+5)& (0+255),b
 12670  001744  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12671  001748  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12672  00174C  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12673  001750  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12674  001754  0E3C               	movlw	60
 12675  001756  6E25               	movwf	___lmul@multiplicand,c
 12676  001758  0E00               	movlw	0
 12677  00175A  6E26               	movwf	___lmul@multiplicand+1,c
 12678  00175C  0E00               	movlw	0
 12679  00175E  6E27               	movwf	___lmul@multiplicand+2,c
 12680  001760  0E00               	movlw	0
 12681  001762  6E28               	movwf	___lmul@multiplicand+3,c
 12682  001764  ECBA  F01D         	call	___lmul	;wreg free
 12683  001768  0100               	movlb	0	; () banked
 12684  00176A  5196               	movf	(??_mktime+2)& (0+255),w,b
 12685  00176C  2421               	addwf	?___lmul,w,c
 12686  00176E  0100               	movlb	0	; () banked
 12687  001770  6F9A               	movwf	mktime@tt& (0+255),b
 12688  001772  0100               	movlb	0	; () banked
 12689  001774  5197               	movf	(??_mktime+3)& (0+255),w,b
 12690  001776  2022               	addwfc	?___lmul+1,w,c
 12691  001778  0100               	movlb	0	; () banked
 12692  00177A  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12693  00177C  0100               	movlb	0	; () banked
 12694  00177E  5198               	movf	(??_mktime+4)& (0+255),w,b
 12695  001780  2023               	addwfc	?___lmul+2,w,c
 12696  001782  0100               	movlb	0	; () banked
 12697  001784  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12698  001786  0100               	movlb	0	; () banked
 12699  001788  5199               	movf	(??_mktime+5)& (0+255),w,b
 12700  00178A  2024               	addwfc	?___lmul+3,w,c
 12701  00178C  0100               	movlb	0	; () banked
 12702  00178E  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12703                           
 12704                           ; BSR set to: 0
 12705  001790  C090  FFD9         	movff	mktime@timeptr,fsr2l
 12706  001794  C091  FFDA         	movff	mktime@timeptr+1,fsr2h
 12707  001798  CFDE F094          	movff	postinc2,??_mktime
 12708  00179C  CFDD F095          	movff	postdec2,??_mktime+1
 12709  0017A0  C094  F096         	movff	??_mktime,??_mktime+2
 12710  0017A4  C095  F097         	movff	??_mktime+1,??_mktime+3
 12711  0017A8  0E00               	movlw	0
 12712  0017AA  0100               	movlb	0	; () banked
 12713  0017AC  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12714  0017AE  0EFF               	movlw	255
 12715  0017B0  6F98               	movwf	(??_mktime+4)& (0+255),b
 12716  0017B2  6F99               	movwf	(??_mktime+5)& (0+255),b
 12717  0017B4  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12718  0017B8  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12719  0017BC  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12720  0017C0  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12721  0017C4  0E3C               	movlw	60
 12722  0017C6  6E25               	movwf	___lmul@multiplicand,c
 12723  0017C8  0E00               	movlw	0
 12724  0017CA  6E26               	movwf	___lmul@multiplicand+1,c
 12725  0017CC  0E00               	movlw	0
 12726  0017CE  6E27               	movwf	___lmul@multiplicand+2,c
 12727  0017D0  0E00               	movlw	0
 12728  0017D2  6E28               	movwf	___lmul@multiplicand+3,c
 12729  0017D4  ECBA  F01D         	call	___lmul	;wreg free
 12730  0017D8  0100               	movlb	0	; () banked
 12731  0017DA  5196               	movf	(??_mktime+2)& (0+255),w,b
 12732  0017DC  2421               	addwf	?___lmul,w,c
 12733  0017DE  0100               	movlb	0	; () banked
 12734  0017E0  6F9A               	movwf	mktime@tt& (0+255),b
 12735  0017E2  0100               	movlb	0	; () banked
 12736  0017E4  5197               	movf	(??_mktime+3)& (0+255),w,b
 12737  0017E6  2022               	addwfc	?___lmul+1,w,c
 12738  0017E8  0100               	movlb	0	; () banked
 12739  0017EA  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12740  0017EC  0100               	movlb	0	; () banked
 12741  0017EE  5198               	movf	(??_mktime+4)& (0+255),w,b
 12742  0017F0  2023               	addwfc	?___lmul+2,w,c
 12743  0017F2  0100               	movlb	0	; () banked
 12744  0017F4  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12745  0017F6  0100               	movlb	0	; () banked
 12746  0017F8  5199               	movf	(??_mktime+5)& (0+255),w,b
 12747  0017FA  2024               	addwfc	?___lmul+3,w,c
 12748  0017FC  0100               	movlb	0	; () banked
 12749  0017FE  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12750  001800                     l7255:
 12751  001800  FFFF               	dw	65535	; assembler added errata NOP
 12752                           
 12753                           ; BSR set to: 0
 12754  001802  C09A  F090         	movff	mktime@tt,?_mktime
 12755  001806  C09B  F091         	movff	mktime@tt+1,?_mktime+1
 12756  00180A  C09C  F092         	movff	mktime@tt+2,?_mktime+2
 12757  00180E  C09D  F093         	movff	mktime@tt+3,?_mktime+3
 12758                           
 12759                           ; BSR set to: 0
 12760                           
 12761                           ; BSR set to: 0
 12762  001812  0012               	return		;funcret
 12763  001814  FFFF               	dw	65535	; errata NOP
 12764  001816                     __end_of_mktime:
 12765                           	opt stack 0
 12766                           tblptru	equ	0xFF8
 12767                           tblptrh	equ	0xFF7
 12768                           tblptrl	equ	0xFF6
 12769                           tablat	equ	0xFF5
 12770                           prodh	equ	0xFF4
 12771                           prodl	equ	0xFF3
 12772                           intcon	equ	0xFF2
 12773                           postinc0	equ	0xFEE
 12774                           wreg	equ	0xFE8
 12775                           indf1	equ	0xFE7
 12776                           postinc1	equ	0xFE6
 12777                           postdec1	equ	0xFE5
 12778                           fsr1h	equ	0xFE2
 12779                           fsr1l	equ	0xFE1
 12780                           indf2	equ	0xFDF
 12781                           postinc2	equ	0xFDE
 12782                           postdec2	equ	0xFDD
 12783                           plusw2	equ	0xFDB
 12784                           fsr2h	equ	0xFDA
 12785                           fsr2l	equ	0xFD9
 12786                           status	equ	0xFD8
 12787                           
 12788 ;; *************** function _ymd_to_scalar *****************
 12789 ;; Defined at:
 12790 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;  yr              2    0[BANK0 ] unsigned int 
 12793 ;;  mo              2    2[BANK0 ] unsigned int 
 12794 ;;  day             2    4[BANK0 ] unsigned int 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  scalar          4   12[BANK0 ] long 
 12797 ;; Return value:  Size  Location     Type
 12798 ;;                  4    0[BANK0 ] long 
 12799 ;; Registers used:
 12800 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12801 ;; Tracked objects:
 12802 ;;		On entry : 0/0
 12803 ;;		On exit  : 0/0
 12804 ;;		Unchanged: 0/0
 12805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12806 ;;      Params:         0       6       0       0       0       0       0
 12807 ;;      Locals:         0       6       0       0       0       0       0
 12808 ;;      Temps:          0       4       0       0       0       0       0
 12809 ;;      Totals:         0      16       0       0       0       0       0
 12810 ;;Total ram usage:       16 bytes
 12811 ;; Hardware stack levels used:    1
 12812 ;; Hardware stack levels required when called:    4
 12813 ;; This function calls:
 12814 ;;		_isleap
 12815 ;;		_months_to_days
 12816 ;;		_years_to_days
 12817 ;; This function is called by:
 12818 ;;		_mktime
 12819 ;; This function uses a non-reentrant model
 12820 ;;
 12821                           
 12822                           	psect	text54
 12823  002DEA                     __ptext54:
 12824                           	opt stack 0
 12825  002DEA                     _ymd_to_scalar:
 12826                           	opt stack 23
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;incstack = 0
 12830  002DEA  FFFF               	dw	65535
 12831  002DEC  C082  F02E         	movff	ymd_to_scalar@mo,months_to_days@month
 12832  002DF0  C083  F02F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
 12833  002DF4  EC96  F01F         	call	_months_to_days	;wreg free
 12834  002DF8  0100               	movlb	0	; () banked
 12835  002DFA  5184               	movf	ymd_to_scalar@day& (0+255),w,b
 12836  002DFC  262E               	addwf	?_months_to_days,f,c
 12837  002DFE  0100               	movlb	0	; () banked
 12838  002E00  5185               	movf	(ymd_to_scalar@day+1)& (0+255),w,b
 12839  002E02  222F               	addwfc	?_months_to_days+1,f,c
 12840  002E04  C02E  F08C         	movff	?_months_to_days,ymd_to_scalar@scalar
 12841  002E08  C02F  F08D         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
 12842  002E0C  0100               	movlb	0	; () banked
 12843  002E0E  6B8E               	clrf	(ymd_to_scalar@scalar+2)& (0+255),b
 12844  002E10  6B8F               	clrf	(ymd_to_scalar@scalar+3)& (0+255),b
 12845                           
 12846                           ; BSR set to: 0
 12847  002E12  0100               	movlb	0	; () banked
 12848  002E14  5183               	movf	(ymd_to_scalar@mo+1)& (0+255),w,b
 12849  002E16  E105               	bnz	u6310
 12850  002E18  0E03               	movlw	3
 12851  002E1A  0100               	movlb	0	; () banked
 12852  002E1C  5D82               	subwf	ymd_to_scalar@mo& (0+255),w,b
 12853  002E1E  A0D8               	btfss	status,0,c
 12854  002E20  D030               	goto	l6961
 12855  002E22                     u6310:
 12856                           
 12857                           ; BSR set to: 0
 12858  002E22  C080  F026         	movff	ymd_to_scalar@yr,isleap@yr
 12859  002E26  C081  F027         	movff	ymd_to_scalar@yr+1,isleap@yr+1
 12860  002E2A  ECF7  F01C         	call	_isleap	;wreg free
 12861  002E2E  5026               	movf	?_isleap,w,c
 12862  002E30  1027               	iorwf	?_isleap+1,w,c
 12863  002E32  A4D8               	btfss	status,2,c
 12864  002E34  D005               	goto	l6957
 12865  002E36  0E00               	movlw	0
 12866  002E38  0100               	movlb	0	; () banked
 12867  002E3A  6F8B               	movwf	(_ymd_to_scalar$2322+1)& (0+255),b
 12868  002E3C  0E02               	movlw	2
 12869  002E3E  D005               	goto	L16
 12870  002E40                     l6957:
 12871  002E40  FFFF               	dw	65535	; assembler added errata NOP
 12872  002E42  0E00               	movlw	0
 12873  002E44  0100               	movlb	0	; () banked
 12874  002E46  6F8B               	movwf	(_ymd_to_scalar$2322+1)& (0+255),b
 12875  002E48  0E01               	movlw	1
 12876  002E4A                     L16:
 12877  002E4A  FFFF               	dw	65535	; assembler added errata NOP
 12878  002E4C  6F8A               	movwf	_ymd_to_scalar$2322& (0+255),b
 12879                           
 12880                           ; BSR set to: 0
 12881                           
 12882                           ; BSR set to: 0
 12883  002E4E  C08A  F086         	movff	_ymd_to_scalar$2322,??_ymd_to_scalar
 12884  002E52  C08B  F087         	movff	_ymd_to_scalar$2322+1,??_ymd_to_scalar+1
 12885  002E56  0E00               	movlw	0
 12886  002E58  0100               	movlb	0	; () banked
 12887  002E5A  BF87               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,b
 12888  002E5C  0EFF               	movlw	255
 12889  002E5E  6F88               	movwf	(??_ymd_to_scalar+2)& (0+255),b
 12890  002E60  6F89               	movwf	(??_ymd_to_scalar+3)& (0+255),b
 12891  002E62  0100               	movlb	0	; () banked
 12892  002E64  5186               	movf	??_ymd_to_scalar& (0+255),w,b
 12893  002E66  0100               	movlb	0	; () banked
 12894  002E68  5F8C               	subwf	ymd_to_scalar@scalar& (0+255),f,b
 12895  002E6A  0100               	movlb	0	; () banked
 12896  002E6C  5187               	movf	(??_ymd_to_scalar+1)& (0+255),w,b
 12897  002E6E  0100               	movlb	0	; () banked
 12898  002E70  5B8D               	subwfb	(ymd_to_scalar@scalar+1)& (0+255),f,b
 12899  002E72  0100               	movlb	0	; () banked
 12900  002E74  5188               	movf	(??_ymd_to_scalar+2)& (0+255),w,b
 12901  002E76  0100               	movlb	0	; () banked
 12902  002E78  5B8E               	subwfb	(ymd_to_scalar@scalar+2)& (0+255),f,b
 12903  002E7A  0100               	movlb	0	; () banked
 12904  002E7C  5189               	movf	(??_ymd_to_scalar+3)& (0+255),w,b
 12905  002E7E  0100               	movlb	0	; () banked
 12906  002E80  5B8F               	subwfb	(ymd_to_scalar@scalar+3)& (0+255),f,b
 12907  002E82                     l6961:
 12908  002E82  FFFF               	dw	65535	; assembler added errata NOP
 12909                           
 12910                           ; BSR set to: 0
 12911  002E84  0100               	movlb	0	; () banked
 12912  002E86  0780               	decf	ymd_to_scalar@yr& (0+255),f,b
 12913  002E88  A0D8               	btfss	status,0,c
 12914  002E8A  0781               	decf	(ymd_to_scalar@yr+1)& (0+255),f,b
 12915                           
 12916                           ; BSR set to: 0
 12917  002E8C  C080  F02E         	movff	ymd_to_scalar@yr,years_to_days@yr
 12918  002E90  C081  F02F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
 12919  002E94  EC7E  F01A         	call	_years_to_days	;wreg free
 12920  002E98  502E               	movf	?_years_to_days,w,c
 12921  002E9A  0100               	movlb	0	; () banked
 12922  002E9C  278C               	addwf	ymd_to_scalar@scalar& (0+255),f,b
 12923  002E9E  502F               	movf	?_years_to_days+1,w,c
 12924  002EA0  0100               	movlb	0	; () banked
 12925  002EA2  238D               	addwfc	(ymd_to_scalar@scalar+1)& (0+255),f,b
 12926  002EA4  5030               	movf	?_years_to_days+2,w,c
 12927  002EA6  0100               	movlb	0	; () banked
 12928  002EA8  238E               	addwfc	(ymd_to_scalar@scalar+2)& (0+255),f,b
 12929  002EAA  5031               	movf	?_years_to_days+3,w,c
 12930  002EAC  0100               	movlb	0	; () banked
 12931  002EAE  238F               	addwfc	(ymd_to_scalar@scalar+3)& (0+255),f,b
 12932                           
 12933                           ; BSR set to: 0
 12934  002EB0  C08C  F080         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
 12935  002EB4  C08D  F081         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
 12936  002EB8  C08E  F082         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
 12937  002EBC  C08F  F083         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
 12938                           
 12939                           ; BSR set to: 0
 12940                           
 12941                           ; BSR set to: 0
 12942  002EC0  0012               	return		;funcret
 12943  002EC2  FFFF               	dw	65535	; errata NOP
 12944  002EC4                     __end_of_ymd_to_scalar:
 12945                           	opt stack 0
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           postinc0	equ	0xFEE
 12954                           wreg	equ	0xFE8
 12955                           indf1	equ	0xFE7
 12956                           postinc1	equ	0xFE6
 12957                           postdec1	equ	0xFE5
 12958                           fsr1h	equ	0xFE2
 12959                           fsr1l	equ	0xFE1
 12960                           indf2	equ	0xFDF
 12961                           postinc2	equ	0xFDE
 12962                           postdec2	equ	0xFDD
 12963                           plusw2	equ	0xFDB
 12964                           fsr2h	equ	0xFDA
 12965                           fsr2l	equ	0xFD9
 12966                           status	equ	0xFD8
 12967                           
 12968 ;; *************** function _years_to_days *****************
 12969 ;; Defined at:
 12970 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12971 ;; Parameters:    Size  Location     Type
 12972 ;;  yr              2   45[COMRAM] unsigned int 
 12973 ;; Auto vars:     Size  Location     Type
 12974 ;;  ret             4   51[COMRAM] long 
 12975 ;; Return value:  Size  Location     Type
 12976 ;;                  4   45[COMRAM] long 
 12977 ;; Registers used:
 12978 ;;		wreg, status,2, status,0, cstack
 12979 ;; Tracked objects:
 12980 ;;		On entry : 0/0
 12981 ;;		On exit  : 0/0
 12982 ;;		Unchanged: 0/0
 12983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12984 ;;      Params:         4       0       0       0       0       0       0
 12985 ;;      Locals:         4       0       0       0       0       0       0
 12986 ;;      Temps:          2       0       0       0       0       0       0
 12987 ;;      Totals:        10       0       0       0       0       0       0
 12988 ;;Total ram usage:       10 bytes
 12989 ;; Hardware stack levels used:    1
 12990 ;; Hardware stack levels required when called:    3
 12991 ;; This function calls:
 12992 ;;		___lmul
 12993 ;;		___lwdiv
 12994 ;; This function is called by:
 12995 ;;		_ymd_to_scalar
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text55
 13000  0034FC                     __ptext55:
 13001                           	opt stack 0
 13002  0034FC                     _years_to_days:
 13003                           	opt stack 23
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;incstack = 0
 13007  0034FC  FFFF               	dw	65535
 13008  0034FE  C02E  F021         	movff	years_to_days@yr,___lmul@multiplier
 13009  003502  C02F  F022         	movff	years_to_days@yr+1,___lmul@multiplier+1
 13010  003506  6A23               	clrf	___lmul@multiplier+2,c
 13011  003508  6A24               	clrf	___lmul@multiplier+3,c
 13012  00350A  0E6D               	movlw	109
 13013  00350C  6E25               	movwf	___lmul@multiplicand,c
 13014  00350E  0E01               	movlw	1
 13015  003510  6E26               	movwf	___lmul@multiplicand+1,c
 13016  003512  0E00               	movlw	0
 13017  003514  6E27               	movwf	___lmul@multiplicand+2,c
 13018  003516  0E00               	movlw	0
 13019  003518  6E28               	movwf	___lmul@multiplicand+3,c
 13020  00351A  ECBA  F01D         	call	___lmul	;wreg free
 13021  00351E  C021  F034         	movff	?___lmul,years_to_days@ret
 13022  003522  C022  F035         	movff	?___lmul+1,years_to_days@ret+1
 13023  003526  C023  F036         	movff	?___lmul+2,years_to_days@ret+2
 13024  00352A  C024  F037         	movff	?___lmul+3,years_to_days@ret+3
 13025  00352E  C02E  F027         	movff	years_to_days@yr,___lwdiv@dividend
 13026  003532  C02F  F028         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 13027  003536  0E00               	movlw	0
 13028  003538  6E2A               	movwf	___lwdiv@divisor+1,c
 13029  00353A  0E64               	movlw	100
 13030  00353C  6E29               	movwf	___lwdiv@divisor,c
 13031  00353E  EC5A  F01D         	call	___lwdiv	;wreg free
 13032  003542  1E27               	comf	?___lwdiv,f,c
 13033  003544  1E28               	comf	?___lwdiv+1,f,c
 13034  003546  4A27               	infsnz	?___lwdiv,f,c
 13035  003548  2A28               	incf	?___lwdiv+1,f,c
 13036  00354A  C02E  F032         	movff	years_to_days@yr,??_years_to_days
 13037  00354E  C02F  F033         	movff	years_to_days@yr+1,??_years_to_days+1
 13038  003552  90D8               	bcf	status,0,c
 13039  003554  3233               	rrcf	??_years_to_days+1,f,c
 13040  003556  3232               	rrcf	??_years_to_days,f,c
 13041  003558  90D8               	bcf	status,0,c
 13042  00355A  3233               	rrcf	??_years_to_days+1,f,c
 13043  00355C  3232               	rrcf	??_years_to_days,f,c
 13044  00355E  5027               	movf	?___lwdiv,w,c
 13045  003560  2632               	addwf	??_years_to_days,f,c
 13046  003562  5028               	movf	?___lwdiv+1,w,c
 13047  003564  2233               	addwfc	??_years_to_days+1,f,c
 13048  003566  5032               	movf	??_years_to_days,w,c
 13049  003568  2634               	addwf	years_to_days@ret,f,c
 13050  00356A  5033               	movf	??_years_to_days+1,w,c
 13051  00356C  2235               	addwfc	years_to_days@ret+1,f,c
 13052  00356E  0E00               	movlw	0
 13053  003570  2236               	addwfc	years_to_days@ret+2,f,c
 13054  003572  0E00               	movlw	0
 13055  003574  2237               	addwfc	years_to_days@ret+3,f,c
 13056  003576  C02E  F027         	movff	years_to_days@yr,___lwdiv@dividend
 13057  00357A  C02F  F028         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 13058  00357E  0E01               	movlw	1
 13059  003580  6E2A               	movwf	___lwdiv@divisor+1,c
 13060  003582  0E90               	movlw	144
 13061  003584  6E29               	movwf	___lwdiv@divisor,c
 13062  003586  EC5A  F01D         	call	___lwdiv	;wreg free
 13063  00358A  5027               	movf	?___lwdiv,w,c
 13064  00358C  2634               	addwf	years_to_days@ret,f,c
 13065  00358E  5028               	movf	?___lwdiv+1,w,c
 13066  003590  2235               	addwfc	years_to_days@ret+1,f,c
 13067  003592  0E00               	movlw	0
 13068  003594  2236               	addwfc	years_to_days@ret+2,f,c
 13069  003596  0E00               	movlw	0
 13070  003598  2237               	addwfc	years_to_days@ret+3,f,c
 13071  00359A  C034  F02E         	movff	years_to_days@ret,?_years_to_days
 13072  00359E  C035  F02F         	movff	years_to_days@ret+1,?_years_to_days+1
 13073  0035A2  C036  F030         	movff	years_to_days@ret+2,?_years_to_days+2
 13074  0035A6  C037  F031         	movff	years_to_days@ret+3,?_years_to_days+3
 13075  0035AA  0012               	return		;funcret
 13076  0035AC  FFFF               	dw	65535	; errata NOP
 13077  0035AE                     __end_of_years_to_days:
 13078                           	opt stack 0
 13079                           tblptru	equ	0xFF8
 13080                           tblptrh	equ	0xFF7
 13081                           tblptrl	equ	0xFF6
 13082                           tablat	equ	0xFF5
 13083                           prodh	equ	0xFF4
 13084                           prodl	equ	0xFF3
 13085                           intcon	equ	0xFF2
 13086                           postinc0	equ	0xFEE
 13087                           wreg	equ	0xFE8
 13088                           indf1	equ	0xFE7
 13089                           postinc1	equ	0xFE6
 13090                           postdec1	equ	0xFE5
 13091                           fsr1h	equ	0xFE2
 13092                           fsr1l	equ	0xFE1
 13093                           indf2	equ	0xFDF
 13094                           postinc2	equ	0xFDE
 13095                           postdec2	equ	0xFDD
 13096                           plusw2	equ	0xFDB
 13097                           fsr2h	equ	0xFDA
 13098                           fsr2l	equ	0xFD9
 13099                           status	equ	0xFD8
 13100                           
 13101 ;; *************** function _months_to_days *****************
 13102 ;; Defined at:
 13103 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;  month           2   45[COMRAM] unsigned int 
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;		None
 13108 ;; Return value:  Size  Location     Type
 13109 ;;                  2   45[COMRAM] unsigned int 
 13110 ;; Registers used:
 13111 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13117 ;;      Params:         2       0       0       0       0       0       0
 13118 ;;      Locals:         0       0       0       0       0       0       0
 13119 ;;      Temps:          0       0       0       0       0       0       0
 13120 ;;      Totals:         2       0       0       0       0       0       0
 13121 ;;Total ram usage:        2 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; Hardware stack levels required when called:    3
 13124 ;; This function calls:
 13125 ;;		___lwdiv
 13126 ;;		___wmul
 13127 ;; This function is called by:
 13128 ;;		_ymd_to_scalar
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           	psect	text56
 13133  003F2C                     __ptext56:
 13134                           	opt stack 0
 13135  003F2C                     _months_to_days:
 13136                           	opt stack 23
 13137                           
 13138                           ;incstack = 0
 13139  003F2C  FFFF               	dw	65535
 13140  003F2E  C02E  F021         	movff	months_to_days@month,___wmul@multiplier
 13141  003F32  C02F  F022         	movff	months_to_days@month+1,___wmul@multiplier+1
 13142  003F36  0E0B               	movlw	11
 13143  003F38  6E24               	movwf	___wmul@multiplicand+1,c
 13144  003F3A  0EF1               	movlw	241
 13145  003F3C  6E23               	movwf	___wmul@multiplicand,c
 13146  003F3E  ECBC  F000         	call	___wmul	;wreg free
 13147  003F42  0E41               	movlw	65
 13148  003F44  2421               	addwf	?___wmul,w,c
 13149  003F46  6E27               	movwf	___lwdiv@dividend,c
 13150  003F48  0EF4               	movlw	244
 13151  003F4A  2022               	addwfc	?___wmul+1,w,c
 13152  003F4C  6E28               	movwf	___lwdiv@dividend+1,c
 13153  003F4E  0E00               	movlw	0
 13154  003F50  6E2A               	movwf	___lwdiv@divisor+1,c
 13155  003F52  0E64               	movlw	100
 13156  003F54  6E29               	movwf	___lwdiv@divisor,c
 13157  003F56  EC5A  F01D         	call	___lwdiv	;wreg free
 13158  003F5A  C027  F02E         	movff	?___lwdiv,?_months_to_days
 13159  003F5E  C028  F02F         	movff	?___lwdiv+1,?_months_to_days+1
 13160  003F62  0012               	return		;funcret
 13161  003F64  FFFF               	dw	65535	; errata NOP
 13162  003F66                     __end_of_months_to_days:
 13163                           	opt stack 0
 13164                           tblptru	equ	0xFF8
 13165                           tblptrh	equ	0xFF7
 13166                           tblptrl	equ	0xFF6
 13167                           tablat	equ	0xFF5
 13168                           prodh	equ	0xFF4
 13169                           prodl	equ	0xFF3
 13170                           intcon	equ	0xFF2
 13171                           postinc0	equ	0xFEE
 13172                           wreg	equ	0xFE8
 13173                           indf1	equ	0xFE7
 13174                           postinc1	equ	0xFE6
 13175                           postdec1	equ	0xFE5
 13176                           fsr1h	equ	0xFE2
 13177                           fsr1l	equ	0xFE1
 13178                           indf2	equ	0xFDF
 13179                           postinc2	equ	0xFDE
 13180                           postdec2	equ	0xFDD
 13181                           plusw2	equ	0xFDB
 13182                           fsr2h	equ	0xFDA
 13183                           fsr2l	equ	0xFD9
 13184                           status	equ	0xFD8
 13185                           
 13186 ;; *************** function ___wmul *****************
 13187 ;; Defined at:
 13188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 13189 ;; Parameters:    Size  Location     Type
 13190 ;;  multiplier      2   32[COMRAM] unsigned int 
 13191 ;;  multiplicand    2   34[COMRAM] unsigned int 
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;  product         2   36[COMRAM] unsigned int 
 13194 ;; Return value:  Size  Location     Type
 13195 ;;                  2   32[COMRAM] unsigned int 
 13196 ;; Registers used:
 13197 ;;		wreg, status,2, status,0, prodl, prodh
 13198 ;; Tracked objects:
 13199 ;;		On entry : 0/0
 13200 ;;		On exit  : 0/0
 13201 ;;		Unchanged: 0/0
 13202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13203 ;;      Params:         4       0       0       0       0       0       0
 13204 ;;      Locals:         2       0       0       0       0       0       0
 13205 ;;      Temps:          0       0       0       0       0       0       0
 13206 ;;      Totals:         6       0       0       0       0       0       0
 13207 ;;Total ram usage:        6 bytes
 13208 ;; Hardware stack levels used:    1
 13209 ;; Hardware stack levels required when called:    2
 13210 ;; This function calls:
 13211 ;;		Nothing
 13212 ;; This function is called by:
 13213 ;;		_months_to_days
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           	psect	text57
 13218  000178                     __ptext57:
 13219                           	opt stack 0
 13220  000178                     ___wmul:
 13221                           	opt stack 23
 13222                           
 13223                           ;incstack = 0
 13224  000178  FFFF               	dw	65535
 13225  00017A  5021               	movf	___wmul@multiplier,w,c
 13226  00017C  0223               	mulwf	___wmul@multiplicand,c
 13227  00017E  CFF3 F025          	movff	prodl,___wmul@product
 13228  000182  CFF4 F026          	movff	prodh,___wmul@product+1
 13229  000186  5021               	movf	___wmul@multiplier,w,c
 13230  000188  0224               	mulwf	___wmul@multiplicand+1,c
 13231  00018A  50F3               	movf	prodl,w,c
 13232  00018C  2626               	addwf	___wmul@product+1,f,c
 13233  00018E  5022               	movf	___wmul@multiplier+1,w,c
 13234  000190  0223               	mulwf	___wmul@multiplicand,c
 13235  000192  50F3               	movf	prodl,w,c
 13236  000194  2626               	addwf	___wmul@product+1,f,c
 13237  000196  C025  F021         	movff	___wmul@product,?___wmul
 13238  00019A  C026  F022         	movff	___wmul@product+1,?___wmul+1
 13239  00019E  0012               	return		;funcret
 13240  0001A0  FFFF               	dw	65535	; errata NOP
 13241  0001A2                     __end_of___wmul:
 13242                           	opt stack 0
 13243                           tblptru	equ	0xFF8
 13244                           tblptrh	equ	0xFF7
 13245                           tblptrl	equ	0xFF6
 13246                           tablat	equ	0xFF5
 13247                           prodh	equ	0xFF4
 13248                           prodl	equ	0xFF3
 13249                           intcon	equ	0xFF2
 13250                           postinc0	equ	0xFEE
 13251                           wreg	equ	0xFE8
 13252                           indf1	equ	0xFE7
 13253                           postinc1	equ	0xFE6
 13254                           postdec1	equ	0xFE5
 13255                           fsr1h	equ	0xFE2
 13256                           fsr1l	equ	0xFE1
 13257                           indf2	equ	0xFDF
 13258                           postinc2	equ	0xFDE
 13259                           postdec2	equ	0xFDD
 13260                           plusw2	equ	0xFDB
 13261                           fsr2h	equ	0xFDA
 13262                           fsr2l	equ	0xFD9
 13263                           status	equ	0xFD8
 13264                           
 13265 ;; *************** function ___lwdiv *****************
 13266 ;; Defined at:
 13267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 13268 ;; Parameters:    Size  Location     Type
 13269 ;;  dividend        2   38[COMRAM] unsigned int 
 13270 ;;  divisor         2   40[COMRAM] unsigned int 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  quotient        2   43[COMRAM] unsigned int 
 13273 ;;  counter         1   42[COMRAM] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  2   38[COMRAM] unsigned int 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13283 ;;      Params:         4       0       0       0       0       0       0
 13284 ;;      Locals:         3       0       0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0
 13286 ;;      Totals:         7       0       0       0       0       0       0
 13287 ;;Total ram usage:        7 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    2
 13290 ;; This function calls:
 13291 ;;		Nothing
 13292 ;; This function is called by:
 13293 ;;		_months_to_days
 13294 ;;		_years_to_days
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           	psect	text58
 13299  003AB4                     __ptext58:
 13300                           	opt stack 0
 13301  003AB4                     ___lwdiv:
 13302                           	opt stack 23
 13303                           
 13304                           ;incstack = 0
 13305  003AB4  FFFF               	dw	65535
 13306  003AB6  0E00               	movlw	0
 13307  003AB8  6E2D               	movwf	___lwdiv@quotient+1,c
 13308  003ABA  0E00               	movlw	0
 13309  003ABC  6E2C               	movwf	___lwdiv@quotient,c
 13310  003ABE  5029               	movf	___lwdiv@divisor,w,c
 13311  003AC0  102A               	iorwf	___lwdiv@divisor+1,w,c
 13312  003AC2  B4D8               	btfsc	status,2,c
 13313  003AC4  D020               	goto	l1452
 13314  003AC6  0E01               	movlw	1
 13315  003AC8  6E2B               	movwf	___lwdiv@counter,c
 13316  003ACA  D005               	goto	l6459
 13317  003ACC                     l6457:
 13318  003ACC  FFFF               	dw	65535	; assembler added errata NOP
 13319  003ACE  90D8               	bcf	status,0,c
 13320  003AD0  3629               	rlcf	___lwdiv@divisor,f,c
 13321  003AD2  362A               	rlcf	___lwdiv@divisor+1,f,c
 13322  003AD4  2A2B               	incf	___lwdiv@counter,f,c
 13323  003AD6                     l6459:
 13324  003AD6  FFFF               	dw	65535	; assembler added errata NOP
 13325  003AD8  AE2A               	btfss	___lwdiv@divisor+1,7,c
 13326  003ADA  D7F8               	goto	l6457
 13327  003ADC                     l6461:
 13328  003ADC  FFFF               	dw	65535	; assembler added errata NOP
 13329  003ADE  90D8               	bcf	status,0,c
 13330  003AE0  362C               	rlcf	___lwdiv@quotient,f,c
 13331  003AE2  362D               	rlcf	___lwdiv@quotient+1,f,c
 13332  003AE4  5029               	movf	___lwdiv@divisor,w,c
 13333  003AE6  5C27               	subwf	___lwdiv@dividend,w,c
 13334  003AE8  502A               	movf	___lwdiv@divisor+1,w,c
 13335  003AEA  5828               	subwfb	___lwdiv@dividend+1,w,c
 13336  003AEC  A0D8               	btfss	status,0,c
 13337  003AEE  D005               	goto	l6469
 13338  003AF0  5029               	movf	___lwdiv@divisor,w,c
 13339  003AF2  5E27               	subwf	___lwdiv@dividend,f,c
 13340  003AF4  502A               	movf	___lwdiv@divisor+1,w,c
 13341  003AF6  5A28               	subwfb	___lwdiv@dividend+1,f,c
 13342  003AF8  802C               	bsf	___lwdiv@quotient,0,c
 13343  003AFA                     l6469:
 13344  003AFA  FFFF               	dw	65535	; assembler added errata NOP
 13345  003AFC  90D8               	bcf	status,0,c
 13346  003AFE  322A               	rrcf	___lwdiv@divisor+1,f,c
 13347  003B00  3229               	rrcf	___lwdiv@divisor,f,c
 13348  003B02  2E2B               	decfsz	___lwdiv@counter,f,c
 13349  003B04  D7EB               	goto	l6461
 13350  003B06                     l1452:
 13351  003B06  FFFF               	dw	65535	; assembler added errata NOP
 13352  003B08  C02C  F027         	movff	___lwdiv@quotient,?___lwdiv
 13353  003B0C  C02D  F028         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13354  003B10  0012               	return		;funcret
 13355  003B12  FFFF               	dw	65535	; errata NOP
 13356  003B14                     __end_of___lwdiv:
 13357                           	opt stack 0
 13358                           tblptru	equ	0xFF8
 13359                           tblptrh	equ	0xFF7
 13360                           tblptrl	equ	0xFF6
 13361                           tablat	equ	0xFF5
 13362                           prodh	equ	0xFF4
 13363                           prodl	equ	0xFF3
 13364                           intcon	equ	0xFF2
 13365                           postinc0	equ	0xFEE
 13366                           wreg	equ	0xFE8
 13367                           indf1	equ	0xFE7
 13368                           postinc1	equ	0xFE6
 13369                           postdec1	equ	0xFE5
 13370                           fsr1h	equ	0xFE2
 13371                           fsr1l	equ	0xFE1
 13372                           indf2	equ	0xFDF
 13373                           postinc2	equ	0xFDE
 13374                           postdec2	equ	0xFDD
 13375                           plusw2	equ	0xFDB
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function _isleap *****************
 13381 ;; Defined at:
 13382 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;  yr              2   37[COMRAM] unsigned int 
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;		None
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  2   37[COMRAM] int 
 13389 ;; Registers used:
 13390 ;;		wreg, status,2, status,0, cstack
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/0
 13393 ;;		On exit  : 0/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13396 ;;      Params:         2       0       0       0       0       0       0
 13397 ;;      Locals:         1       0       0       0       0       0       0
 13398 ;;      Temps:          2       0       0       0       0       0       0
 13399 ;;      Totals:         5       0       0       0       0       0       0
 13400 ;;Total ram usage:        5 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; Hardware stack levels required when called:    3
 13403 ;; This function calls:
 13404 ;;		___lwmod
 13405 ;; This function is called by:
 13406 ;;		_ymd_to_scalar
 13407 ;; This function uses a non-reentrant model
 13408 ;;
 13409                           
 13410                           	psect	text59
 13411  0039EE                     __ptext59:
 13412                           	opt stack 0
 13413  0039EE                     _isleap:
 13414                           	opt stack 23
 13415                           
 13416                           ;incstack = 0
 13417  0039EE  FFFF               	dw	65535
 13418  0039F0  0E01               	movlw	1
 13419  0039F2  6E2A               	movwf	_isleap$2309,c
 13420  0039F4  C026  F021         	movff	isleap@yr,___lwmod@dividend
 13421  0039F8  C027  F022         	movff	isleap@yr+1,___lwmod@dividend+1
 13422  0039FC  0E01               	movlw	1
 13423  0039FE  6E24               	movwf	___lwmod@divisor+1,c
 13424  003A00  0E90               	movlw	144
 13425  003A02  6E23               	movwf	___lwmod@divisor,c
 13426  003A04  EC99  F01E         	call	___lwmod	;wreg free
 13427  003A08  5021               	movf	?___lwmod,w,c
 13428  003A0A  1022               	iorwf	?___lwmod+1,w,c
 13429  003A0C  B4D8               	btfsc	status,2,c
 13430  003A0E  D01B               	goto	l6647
 13431  003A10  0E03               	movlw	3
 13432  003A12  1426               	andwf	isleap@yr,w,c
 13433  003A14  6E28               	movwf	??_isleap& (0+255),c
 13434  003A16  0E00               	movlw	0
 13435  003A18  1427               	andwf	isleap@yr+1,w,c
 13436  003A1A  6E29               	movwf	(??_isleap+1)& (0+255),c
 13437  003A1C  5028               	movf	??_isleap,w,c
 13438  003A1E  1029               	iorwf	??_isleap+1,w,c
 13439  003A20  A4D8               	btfss	status,2,c
 13440  003A22  D00E               	goto	l6645
 13441  003A24  C026  F021         	movff	isleap@yr,___lwmod@dividend
 13442  003A28  C027  F022         	movff	isleap@yr+1,___lwmod@dividend+1
 13443  003A2C  0E00               	movlw	0
 13444  003A2E  6E24               	movwf	___lwmod@divisor+1,c
 13445  003A30  0E64               	movlw	100
 13446  003A32  6E23               	movwf	___lwmod@divisor,c
 13447  003A34  EC99  F01E         	call	___lwmod	;wreg free
 13448  003A38  5021               	movf	?___lwmod,w,c
 13449  003A3A  1022               	iorwf	?___lwmod+1,w,c
 13450  003A3C  A4D8               	btfss	status,2,c
 13451  003A3E  D003               	goto	l6647
 13452  003A40                     l6645:
 13453  003A40  FFFF               	dw	65535	; assembler added errata NOP
 13454  003A42  0E00               	movlw	0
 13455  003A44  6E2A               	movwf	_isleap$2309,c
 13456  003A46                     l6647:
 13457  003A46  FFFF               	dw	65535	; assembler added errata NOP
 13458  003A48  C02A  F026         	movff	_isleap$2309,?_isleap
 13459  003A4C  6A27               	clrf	?_isleap+1,c
 13460  003A4E  0012               	return		;funcret
 13461  003A50  FFFF               	dw	65535	; errata NOP
 13462  003A52                     __end_of_isleap:
 13463                           	opt stack 0
 13464                           tblptru	equ	0xFF8
 13465                           tblptrh	equ	0xFF7
 13466                           tblptrl	equ	0xFF6
 13467                           tablat	equ	0xFF5
 13468                           prodh	equ	0xFF4
 13469                           prodl	equ	0xFF3
 13470                           intcon	equ	0xFF2
 13471                           postinc0	equ	0xFEE
 13472                           wreg	equ	0xFE8
 13473                           indf1	equ	0xFE7
 13474                           postinc1	equ	0xFE6
 13475                           postdec1	equ	0xFE5
 13476                           fsr1h	equ	0xFE2
 13477                           fsr1l	equ	0xFE1
 13478                           indf2	equ	0xFDF
 13479                           postinc2	equ	0xFDE
 13480                           postdec2	equ	0xFDD
 13481                           plusw2	equ	0xFDB
 13482                           fsr2h	equ	0xFDA
 13483                           fsr2l	equ	0xFD9
 13484                           status	equ	0xFD8
 13485                           
 13486 ;; *************** function ___lwmod *****************
 13487 ;; Defined at:
 13488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 13489 ;; Parameters:    Size  Location     Type
 13490 ;;  dividend        2   32[COMRAM] unsigned int 
 13491 ;;  divisor         2   34[COMRAM] unsigned int 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  counter         1   36[COMRAM] unsigned char 
 13494 ;; Return value:  Size  Location     Type
 13495 ;;                  2   32[COMRAM] unsigned int 
 13496 ;; Registers used:
 13497 ;;		wreg, status,2, status,0
 13498 ;; Tracked objects:
 13499 ;;		On entry : 0/0
 13500 ;;		On exit  : 0/0
 13501 ;;		Unchanged: 0/0
 13502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13503 ;;      Params:         4       0       0       0       0       0       0
 13504 ;;      Locals:         1       0       0       0       0       0       0
 13505 ;;      Temps:          0       0       0       0       0       0       0
 13506 ;;      Totals:         5       0       0       0       0       0       0
 13507 ;;Total ram usage:        5 bytes
 13508 ;; Hardware stack levels used:    1
 13509 ;; Hardware stack levels required when called:    2
 13510 ;; This function calls:
 13511 ;;		Nothing
 13512 ;; This function is called by:
 13513 ;;		_isleap
 13514 ;; This function uses a non-reentrant model
 13515 ;;
 13516                           
 13517                           	psect	text60
 13518  003D32                     __ptext60:
 13519                           	opt stack 0
 13520  003D32                     ___lwmod:
 13521                           	opt stack 23
 13522                           
 13523                           ;incstack = 0
 13524  003D32  FFFF               	dw	65535
 13525  003D34  5023               	movf	___lwmod@divisor,w,c
 13526  003D36  1024               	iorwf	___lwmod@divisor+1,w,c
 13527  003D38  B4D8               	btfsc	status,2,c
 13528  003D3A  D01C               	goto	l1462
 13529  003D3C  0E01               	movlw	1
 13530  003D3E  6E25               	movwf	___lwmod@counter,c
 13531  003D40  D005               	goto	l6479
 13532  003D42                     l6477:
 13533  003D42  FFFF               	dw	65535	; assembler added errata NOP
 13534  003D44  90D8               	bcf	status,0,c
 13535  003D46  3623               	rlcf	___lwmod@divisor,f,c
 13536  003D48  3624               	rlcf	___lwmod@divisor+1,f,c
 13537  003D4A  2A25               	incf	___lwmod@counter,f,c
 13538  003D4C                     l6479:
 13539  003D4C  FFFF               	dw	65535	; assembler added errata NOP
 13540  003D4E  AE24               	btfss	___lwmod@divisor+1,7,c
 13541  003D50  D7F8               	goto	l6477
 13542  003D52                     l6481:
 13543  003D52  FFFF               	dw	65535	; assembler added errata NOP
 13544  003D54  5023               	movf	___lwmod@divisor,w,c
 13545  003D56  5C21               	subwf	___lwmod@dividend,w,c
 13546  003D58  5024               	movf	___lwmod@divisor+1,w,c
 13547  003D5A  5822               	subwfb	___lwmod@dividend+1,w,c
 13548  003D5C  A0D8               	btfss	status,0,c
 13549  003D5E  D004               	goto	l6485
 13550  003D60  5023               	movf	___lwmod@divisor,w,c
 13551  003D62  5E21               	subwf	___lwmod@dividend,f,c
 13552  003D64  5024               	movf	___lwmod@divisor+1,w,c
 13553  003D66  5A22               	subwfb	___lwmod@dividend+1,f,c
 13554  003D68                     l6485:
 13555  003D68  FFFF               	dw	65535	; assembler added errata NOP
 13556  003D6A  90D8               	bcf	status,0,c
 13557  003D6C  3224               	rrcf	___lwmod@divisor+1,f,c
 13558  003D6E  3223               	rrcf	___lwmod@divisor,f,c
 13559  003D70  2E25               	decfsz	___lwmod@counter,f,c
 13560  003D72  D7EF               	goto	l6481
 13561  003D74                     l1462:
 13562  003D74  FFFF               	dw	65535	; assembler added errata NOP
 13563  003D76  C021  F021         	movff	___lwmod@dividend,?___lwmod
 13564  003D7A  C022  F022         	movff	___lwmod@dividend+1,?___lwmod+1
 13565  003D7E  0012               	return		;funcret
 13566  003D80  FFFF               	dw	65535	; errata NOP
 13567  003D82                     __end_of___lwmod:
 13568                           	opt stack 0
 13569                           tblptru	equ	0xFF8
 13570                           tblptrh	equ	0xFF7
 13571                           tblptrl	equ	0xFF6
 13572                           tablat	equ	0xFF5
 13573                           prodh	equ	0xFF4
 13574                           prodl	equ	0xFF3
 13575                           intcon	equ	0xFF2
 13576                           postinc0	equ	0xFEE
 13577                           wreg	equ	0xFE8
 13578                           indf1	equ	0xFE7
 13579                           postinc1	equ	0xFE6
 13580                           postdec1	equ	0xFE5
 13581                           fsr1h	equ	0xFE2
 13582                           fsr1l	equ	0xFE1
 13583                           indf2	equ	0xFDF
 13584                           postinc2	equ	0xFDE
 13585                           postdec2	equ	0xFDD
 13586                           plusw2	equ	0xFDB
 13587                           fsr2h	equ	0xFDA
 13588                           fsr2l	equ	0xFD9
 13589                           status	equ	0xFD8
 13590                           
 13591 ;; *************** function _SetTime *****************
 13592 ;; Defined at:
 13593 ;;		line 169 in file "user.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  newTime         2   32[COMRAM] PTR long 
 13596 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;		None
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      void 
 13601 ;; Registers used:
 13602 ;;		fsr2l, fsr2h
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13608 ;;      Params:         2       0       0       0       0       0       0
 13609 ;;      Locals:         0       0       0       0       0       0       0
 13610 ;;      Temps:          0       0       0       0       0       0       0
 13611 ;;      Totals:         2       0       0       0       0       0       0
 13612 ;;Total ram usage:        2 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:    2
 13615 ;; This function calls:
 13616 ;;		Nothing
 13617 ;; This function is called by:
 13618 ;;		_ModbusProcess_FC100
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           	psect	text61
 13623  000210                     __ptext61:
 13624                           	opt stack 0
 13625  000210                     _SetTime:
 13626                           	opt stack 26
 13627                           
 13628                           ;incstack = 0
 13629  000210  FFFF               	dw	65535
 13630                           
 13631                           ;user.c: 171: currentTime = *newTime;
 13632  000212  C021  FFD9         	movff	SetTime@newTime,fsr2l
 13633  000216  C022  FFDA         	movff	SetTime@newTime+1,fsr2h
 13634  00021A  CFDE F1F2          	movff	postinc2,_currentTime
 13635  00021E  CFDE F1F3          	movff	postinc2,_currentTime+1
 13636  000222  CFDE F1F4          	movff	postinc2,_currentTime+2
 13637  000226  CFDE F1F5          	movff	postinc2,_currentTime+3
 13638  00022A  0012               	return		;funcret
 13639  00022C  FFFF               	dw	65535	; errata NOP
 13640  00022E                     __end_of_SetTime:
 13641                           	opt stack 0
 13642                           tblptru	equ	0xFF8
 13643                           tblptrh	equ	0xFF7
 13644                           tblptrl	equ	0xFF6
 13645                           tablat	equ	0xFF5
 13646                           prodh	equ	0xFF4
 13647                           prodl	equ	0xFF3
 13648                           intcon	equ	0xFF2
 13649                           postinc0	equ	0xFEE
 13650                           wreg	equ	0xFE8
 13651                           indf1	equ	0xFE7
 13652                           postinc1	equ	0xFE6
 13653                           postdec1	equ	0xFE5
 13654                           fsr1h	equ	0xFE2
 13655                           fsr1l	equ	0xFE1
 13656                           indf2	equ	0xFDF
 13657                           postinc2	equ	0xFDE
 13658                           postdec2	equ	0xFDD
 13659                           plusw2	equ	0xFDB
 13660                           fsr2h	equ	0xFDA
 13661                           fsr2l	equ	0xFD9
 13662                           status	equ	0xFD8
 13663                           
 13664 ;; *************** function _SetHourMin *****************
 13665 ;; Defined at:
 13666 ;;		line 277 in file "interrupts.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  newHour         2   44[COMRAM] PTR unsigned char 
 13669 ;;		 -> _au8Buffer(140), 
 13670 ;;  newMin          2   46[COMRAM] PTR unsigned char 
 13671 ;;		 -> _au8Buffer(140), 
 13672 ;;  sec             2   48[COMRAM] PTR unsigned char 
 13673 ;;		 -> _au8Buffer(140), 
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;  secToNext6Se    1   55[COMRAM] unsigned char 
 13676 ;;  tmpSec          1   54[COMRAM] unsigned char 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  1    wreg      void 
 13679 ;; Registers used:
 13680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13686 ;;      Params:         6       0       0       0       0       0       0
 13687 ;;      Locals:         2       0       0       0       0       0       0
 13688 ;;      Temps:          4       0       0       0       0       0       0
 13689 ;;      Totals:        12       0       0       0       0       0       0
 13690 ;;Total ram usage:       12 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    3
 13693 ;; This function calls:
 13694 ;;		___awdiv
 13695 ;;		___awmod
 13696 ;;		___lmul
 13697 ;; This function is called by:
 13698 ;;		_ModbusProcess_FC100
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text62
 13703  002EC4                     __ptext62:
 13704                           	opt stack 0
 13705  002EC4                     _SetHourMin:
 13706                           	opt stack 25
 13707                           
 13708                           ;incstack = 0
 13709  002EC4  FFFF               	dw	65535
 13710                           
 13711                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 13712  002EC6  9ED5               	bcf	4053,7,c	;volatile
 13713                           
 13714                           ;interrupts.c: 281: globalHours = *newHour;
 13715  002EC8  C02D  FFD9         	movff	SetHourMin@newHour,fsr2l
 13716  002ECC  C02E  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 13717  002ED0  50DF               	movf	indf2,w,c
 13718  002ED2  6E5E               	movwf	_globalHours,c	;volatile
 13719                           
 13720                           ;interrupts.c: 282: globalMinutes = *newMin;
 13721  002ED4  C02F  FFD9         	movff	SetHourMin@newMin,fsr2l
 13722  002ED8  C030  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 13723  002EDC  50DF               	movf	indf2,w,c
 13724  002EDE  6E58               	movwf	_globalMinutes,c	;volatile
 13725                           
 13726                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 13727  002EE0  505E               	movf	_globalHours,w,c	;volatile
 13728  002EE2  0D3C               	mullw	60
 13729  002EE4  5058               	movf	_globalMinutes,w,c	;volatile
 13730  002EE6  24F3               	addwf	prodl,w,c
 13731  002EE8  0100               	movlb	0	; () banked
 13732  002EEA  6FE8               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 13733  002EEC  0E00               	movlw	0
 13734  002EEE  20F4               	addwfc	prodh,w,c
 13735  002EF0  0100               	movlb	0	; () banked
 13736  002EF2  6FE9               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 13740  002EF4  C031  FFD9         	movff	SetHourMin@sec,fsr2l
 13741  002EF8  C032  FFDA         	movff	SetHourMin@sec+1,fsr2h
 13742  002EFC  50DF               	movf	indf2,w,c
 13743  002EFE  6E37               	movwf	SetHourMin@tmpSec,c
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 13747  002F00  C037  F021         	movff	SetHourMin@tmpSec,___awdiv@dividend
 13748  002F04  6A22               	clrf	___awdiv@dividend+1,c
 13749  002F06  0E00               	movlw	0
 13750  002F08  6E24               	movwf	___awdiv@divisor+1,c
 13751  002F0A  0E06               	movlw	6
 13752  002F0C  6E23               	movwf	___awdiv@divisor,c
 13753  002F0E  ECD7  F01A         	call	___awdiv	;wreg free
 13754  002F12  5021               	movf	?___awdiv,w,c
 13755  002F14  6E45               	movwf	__6sCounter,c	;volatile
 13756                           
 13757                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 13758  002F16  C037  F021         	movff	SetHourMin@tmpSec,___awmod@dividend
 13759  002F1A  6A22               	clrf	___awmod@dividend+1,c
 13760  002F1C  0E00               	movlw	0
 13761  002F1E  6E24               	movwf	___awmod@divisor+1,c
 13762  002F20  0E06               	movlw	6
 13763  002F22  6E23               	movwf	___awmod@divisor,c
 13764  002F24  ECFC  F01B         	call	___awmod	;wreg free
 13765  002F28  5021               	movf	?___awmod,w,c
 13766  002F2A  0800               	sublw	0
 13767  002F2C  0F06               	addlw	6
 13768  002F2E  6E38               	movwf	SetHourMin@secToNext6Sec,c
 13769                           
 13770                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)&0xFF)));
 13771  002F30  5038               	movf	SetHourMin@secToNext6Sec,w,c
 13772  002F32  6E21               	movwf	___lmul@multiplier,c
 13773  002F34  6A22               	clrf	___lmul@multiplier+1,c
 13774  002F36  6A23               	clrf	___lmul@multiplier+2,c
 13775  002F38  6A24               	clrf	___lmul@multiplier+3,c
 13776  002F3A  0E24               	movlw	36
 13777  002F3C  6E25               	movwf	___lmul@multiplicand,c
 13778  002F3E  0E26               	movlw	38
 13779  002F40  6E26               	movwf	___lmul@multiplicand+1,c
 13780  002F42  0E00               	movlw	0
 13781  002F44  6E27               	movwf	___lmul@multiplicand+2,c
 13782  002F46  0E00               	movlw	0
 13783  002F48  6E28               	movwf	___lmul@multiplicand+3,c
 13784  002F4A  ECBA  F01D         	call	___lmul	;wreg free
 13785  002F4E  1E21               	comf	?___lmul,f,c
 13786  002F50  1E22               	comf	?___lmul+1,f,c
 13787  002F52  1E23               	comf	?___lmul+2,f,c
 13788  002F54  1E24               	comf	?___lmul+3,f,c
 13789  002F56  2A21               	incf	?___lmul,f,c
 13790  002F58  0E00               	movlw	0
 13791  002F5A  2222               	addwfc	?___lmul+1,f,c
 13792  002F5C  2223               	addwfc	?___lmul+2,f,c
 13793  002F5E  2224               	addwfc	?___lmul+3,f,c
 13794  002F60  0E00               	movlw	0
 13795  002F62  2421               	addwf	?___lmul,w,c
 13796  002F64  6E33               	movwf	??_SetHourMin& (0+255),c
 13797  002F66  0E00               	movlw	0
 13798  002F68  2022               	addwfc	?___lmul+1,w,c
 13799  002F6A  6E34               	movwf	(??_SetHourMin+1)& (0+255),c
 13800  002F6C  0E01               	movlw	1
 13801  002F6E  2023               	addwfc	?___lmul+2,w,c
 13802  002F70  6E35               	movwf	(??_SetHourMin+2)& (0+255),c
 13803  002F72  0E00               	movlw	0
 13804  002F74  2024               	addwfc	?___lmul+3,w,c
 13805  002F76  6E36               	movwf	(??_SetHourMin+3)& (0+255),c
 13806  002F78  C034  F033         	movff	??_SetHourMin+1,??_SetHourMin
 13807  002F7C  C035  F034         	movff	??_SetHourMin+2,??_SetHourMin+1
 13808  002F80  C036  F035         	movff	??_SetHourMin+3,??_SetHourMin+2
 13809  002F84  6A36               	clrf	??_SetHourMin+3,c
 13810  002F86  BE35               	btfsc	??_SetHourMin+2,7,c
 13811  002F88  6836               	setf	??_SetHourMin+3,c
 13812  002F8A  5033               	movf	??_SetHourMin,w,c
 13813  002F8C  6ED7               	movwf	4055,c	;volatile
 13814  002F8E  5038               	movf	SetHourMin@secToNext6Sec,w,c
 13815  002F90  0D24               	mullw	36
 13816  002F92  50F3               	movf	prodl,w,c
 13817  002F94  0800               	sublw	0
 13818  002F96  6ED6               	movwf	4054,c	;volatile
 13819                           
 13820                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 13821  002F98  8ED5               	bsf	4053,7,c	;volatile
 13822  002F9A  0012               	return		;funcret
 13823  002F9C  FFFF               	dw	65535	; errata NOP
 13824  002F9E                     __end_of_SetHourMin:
 13825                           	opt stack 0
 13826                           tblptru	equ	0xFF8
 13827                           tblptrh	equ	0xFF7
 13828                           tblptrl	equ	0xFF6
 13829                           tablat	equ	0xFF5
 13830                           prodh	equ	0xFF4
 13831                           prodl	equ	0xFF3
 13832                           intcon	equ	0xFF2
 13833                           postinc0	equ	0xFEE
 13834                           wreg	equ	0xFE8
 13835                           indf1	equ	0xFE7
 13836                           postinc1	equ	0xFE6
 13837                           postdec1	equ	0xFE5
 13838                           fsr1h	equ	0xFE2
 13839                           fsr1l	equ	0xFE1
 13840                           indf2	equ	0xFDF
 13841                           postinc2	equ	0xFDE
 13842                           postdec2	equ	0xFDD
 13843                           plusw2	equ	0xFDB
 13844                           fsr2h	equ	0xFDA
 13845                           fsr2l	equ	0xFD9
 13846                           status	equ	0xFD8
 13847                           
 13848 ;; *************** function ___lmul *****************
 13849 ;; Defined at:
 13850 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13851 ;; Parameters:    Size  Location     Type
 13852 ;;  multiplier      4   32[COMRAM] unsigned long 
 13853 ;;  multiplicand    4   36[COMRAM] unsigned long 
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;  product         4   40[COMRAM] unsigned long 
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  4   32[COMRAM] unsigned long 
 13858 ;; Registers used:
 13859 ;;		wreg, status,2, status,0
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 0/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13865 ;;      Params:         8       0       0       0       0       0       0
 13866 ;;      Locals:         4       0       0       0       0       0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0
 13868 ;;      Totals:        12       0       0       0       0       0       0
 13869 ;;Total ram usage:       12 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    2
 13872 ;; This function calls:
 13873 ;;		Nothing
 13874 ;; This function is called by:
 13875 ;;		_SetHourMin
 13876 ;;		_years_to_days
 13877 ;;		_mktime
 13878 ;; This function uses a non-reentrant model
 13879 ;;
 13880                           
 13881                           	psect	text63
 13882  003B74                     __ptext63:
 13883                           	opt stack 0
 13884  003B74                     ___lmul:
 13885                           	opt stack 23
 13886                           
 13887                           ;incstack = 0
 13888  003B74  FFFF               	dw	65535
 13889  003B76  0E00               	movlw	0
 13890  003B78  6E29               	movwf	___lmul@product,c
 13891  003B7A  0E00               	movlw	0
 13892  003B7C  6E2A               	movwf	___lmul@product+1,c
 13893  003B7E  0E00               	movlw	0
 13894  003B80  6E2B               	movwf	___lmul@product+2,c
 13895  003B82  0E00               	movlw	0
 13896  003B84  6E2C               	movwf	___lmul@product+3,c
 13897  003B86                     l6443:
 13898  003B86  FFFF               	dw	65535	; assembler added errata NOP
 13899  003B88  A021               	btfss	___lmul@multiplier,0,c
 13900  003B8A  D008               	goto	l6447
 13901  003B8C  5025               	movf	___lmul@multiplicand,w,c
 13902  003B8E  2629               	addwf	___lmul@product,f,c
 13903  003B90  5026               	movf	___lmul@multiplicand+1,w,c
 13904  003B92  222A               	addwfc	___lmul@product+1,f,c
 13905  003B94  5027               	movf	___lmul@multiplicand+2,w,c
 13906  003B96  222B               	addwfc	___lmul@product+2,f,c
 13907  003B98  5028               	movf	___lmul@multiplicand+3,w,c
 13908  003B9A  222C               	addwfc	___lmul@product+3,f,c
 13909  003B9C                     l6447:
 13910  003B9C  FFFF               	dw	65535	; assembler added errata NOP
 13911  003B9E  90D8               	bcf	status,0,c
 13912  003BA0  3625               	rlcf	___lmul@multiplicand,f,c
 13913  003BA2  3626               	rlcf	___lmul@multiplicand+1,f,c
 13914  003BA4  3627               	rlcf	___lmul@multiplicand+2,f,c
 13915  003BA6  3628               	rlcf	___lmul@multiplicand+3,f,c
 13916  003BA8  90D8               	bcf	status,0,c
 13917  003BAA  3224               	rrcf	___lmul@multiplier+3,f,c
 13918  003BAC  3223               	rrcf	___lmul@multiplier+2,f,c
 13919  003BAE  3222               	rrcf	___lmul@multiplier+1,f,c
 13920  003BB0  3221               	rrcf	___lmul@multiplier,f,c
 13921  003BB2  5021               	movf	___lmul@multiplier,w,c
 13922  003BB4  1022               	iorwf	___lmul@multiplier+1,w,c
 13923  003BB6  1023               	iorwf	___lmul@multiplier+2,w,c
 13924  003BB8  1024               	iorwf	___lmul@multiplier+3,w,c
 13925  003BBA  A4D8               	btfss	status,2,c
 13926  003BBC  D7E4               	goto	l6443
 13927  003BBE  C029  F021         	movff	___lmul@product,?___lmul
 13928  003BC2  C02A  F022         	movff	___lmul@product+1,?___lmul+1
 13929  003BC6  C02B  F023         	movff	___lmul@product+2,?___lmul+2
 13930  003BCA  C02C  F024         	movff	___lmul@product+3,?___lmul+3
 13931  003BCE  0012               	return		;funcret
 13932  003BD0  FFFF               	dw	65535	; errata NOP
 13933  003BD2                     __end_of___lmul:
 13934                           	opt stack 0
 13935                           tblptru	equ	0xFF8
 13936                           tblptrh	equ	0xFF7
 13937                           tblptrl	equ	0xFF6
 13938                           tablat	equ	0xFF5
 13939                           prodh	equ	0xFF4
 13940                           prodl	equ	0xFF3
 13941                           intcon	equ	0xFF2
 13942                           postinc0	equ	0xFEE
 13943                           wreg	equ	0xFE8
 13944                           indf1	equ	0xFE7
 13945                           postinc1	equ	0xFE6
 13946                           postdec1	equ	0xFE5
 13947                           fsr1h	equ	0xFE2
 13948                           fsr1l	equ	0xFE1
 13949                           indf2	equ	0xFDF
 13950                           postinc2	equ	0xFDE
 13951                           postdec2	equ	0xFDD
 13952                           plusw2	equ	0xFDB
 13953                           fsr2h	equ	0xFDA
 13954                           fsr2l	equ	0xFD9
 13955                           status	equ	0xFD8
 13956                           
 13957 ;; *************** function ___awmod *****************
 13958 ;; Defined at:
 13959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;  dividend        2   32[COMRAM] int 
 13962 ;;  divisor         2   34[COMRAM] int 
 13963 ;; Auto vars:     Size  Location     Type
 13964 ;;  sign            1   37[COMRAM] unsigned char 
 13965 ;;  counter         1   36[COMRAM] unsigned char 
 13966 ;; Return value:  Size  Location     Type
 13967 ;;                  2   32[COMRAM] int 
 13968 ;; Registers used:
 13969 ;;		wreg, status,2, status,0
 13970 ;; Tracked objects:
 13971 ;;		On entry : 0/0
 13972 ;;		On exit  : 0/0
 13973 ;;		Unchanged: 0/0
 13974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13975 ;;      Params:         4       0       0       0       0       0       0
 13976 ;;      Locals:         2       0       0       0       0       0       0
 13977 ;;      Temps:          0       0       0       0       0       0       0
 13978 ;;      Totals:         6       0       0       0       0       0       0
 13979 ;;Total ram usage:        6 bytes
 13980 ;; Hardware stack levels used:    1
 13981 ;; Hardware stack levels required when called:    2
 13982 ;; This function calls:
 13983 ;;		Nothing
 13984 ;; This function is called by:
 13985 ;;		_SetHourMin
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           	psect	text64
 13990  0037F8                     __ptext64:
 13991                           	opt stack 0
 13992  0037F8                     ___awmod:
 13993                           	opt stack 25
 13994                           
 13995                           ;incstack = 0
 13996  0037F8  FFFF               	dw	65535
 13997  0037FA  0E00               	movlw	0
 13998  0037FC  6E26               	movwf	___awmod@sign,c
 13999  0037FE  AE22               	btfss	___awmod@dividend+1,7,c
 14000  003800  D006               	goto	l6921
 14001  003802  6C21               	negf	___awmod@dividend,c
 14002  003804  1E22               	comf	___awmod@dividend+1,f,c
 14003  003806  B0D8               	btfsc	status,0,c
 14004  003808  2A22               	incf	___awmod@dividend+1,f,c
 14005  00380A  0E01               	movlw	1
 14006  00380C  6E26               	movwf	___awmod@sign,c
 14007  00380E                     l6921:
 14008  00380E  FFFF               	dw	65535	; assembler added errata NOP
 14009  003810  AE24               	btfss	___awmod@divisor+1,7,c
 14010  003812  D004               	goto	l6925
 14011  003814  6C23               	negf	___awmod@divisor,c
 14012  003816  1E24               	comf	___awmod@divisor+1,f,c
 14013  003818  B0D8               	btfsc	status,0,c
 14014  00381A  2A24               	incf	___awmod@divisor+1,f,c
 14015  00381C                     l6925:
 14016  00381C  FFFF               	dw	65535	; assembler added errata NOP
 14017  00381E  5023               	movf	___awmod@divisor,w,c
 14018  003820  1024               	iorwf	___awmod@divisor+1,w,c
 14019  003822  B4D8               	btfsc	status,2,c
 14020  003824  D01C               	goto	l6941
 14021  003826  0E01               	movlw	1
 14022  003828  6E25               	movwf	___awmod@counter,c
 14023  00382A  D005               	goto	l6931
 14024  00382C                     l6929:
 14025  00382C  FFFF               	dw	65535	; assembler added errata NOP
 14026  00382E  90D8               	bcf	status,0,c
 14027  003830  3623               	rlcf	___awmod@divisor,f,c
 14028  003832  3624               	rlcf	___awmod@divisor+1,f,c
 14029  003834  2A25               	incf	___awmod@counter,f,c
 14030  003836                     l6931:
 14031  003836  FFFF               	dw	65535	; assembler added errata NOP
 14032  003838  AE24               	btfss	___awmod@divisor+1,7,c
 14033  00383A  D7F8               	goto	l6929
 14034  00383C                     l6933:
 14035  00383C  FFFF               	dw	65535	; assembler added errata NOP
 14036  00383E  5023               	movf	___awmod@divisor,w,c
 14037  003840  5C21               	subwf	___awmod@dividend,w,c
 14038  003842  5024               	movf	___awmod@divisor+1,w,c
 14039  003844  5822               	subwfb	___awmod@dividend+1,w,c
 14040  003846  A0D8               	btfss	status,0,c
 14041  003848  D004               	goto	l6937
 14042  00384A  5023               	movf	___awmod@divisor,w,c
 14043  00384C  5E21               	subwf	___awmod@dividend,f,c
 14044  00384E  5024               	movf	___awmod@divisor+1,w,c
 14045  003850  5A22               	subwfb	___awmod@dividend+1,f,c
 14046  003852                     l6937:
 14047  003852  FFFF               	dw	65535	; assembler added errata NOP
 14048  003854  90D8               	bcf	status,0,c
 14049  003856  3224               	rrcf	___awmod@divisor+1,f,c
 14050  003858  3223               	rrcf	___awmod@divisor,f,c
 14051  00385A  2E25               	decfsz	___awmod@counter,f,c
 14052  00385C  D7EF               	goto	l6933
 14053  00385E                     l6941:
 14054  00385E  FFFF               	dw	65535	; assembler added errata NOP
 14055  003860  5026               	movf	___awmod@sign,w,c
 14056  003862  B4D8               	btfsc	status,2,c
 14057  003864  D004               	goto	l6945
 14058  003866  6C21               	negf	___awmod@dividend,c
 14059  003868  1E22               	comf	___awmod@dividend+1,f,c
 14060  00386A  B0D8               	btfsc	status,0,c
 14061  00386C  2A22               	incf	___awmod@dividend+1,f,c
 14062  00386E                     l6945:
 14063  00386E  FFFF               	dw	65535	; assembler added errata NOP
 14064  003870  C021  F021         	movff	___awmod@dividend,?___awmod
 14065  003874  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
 14066  003878  0012               	return		;funcret
 14067  00387A  FFFF               	dw	65535	; errata NOP
 14068  00387C                     __end_of___awmod:
 14069                           	opt stack 0
 14070                           tblptru	equ	0xFF8
 14071                           tblptrh	equ	0xFF7
 14072                           tblptrl	equ	0xFF6
 14073                           tablat	equ	0xFF5
 14074                           prodh	equ	0xFF4
 14075                           prodl	equ	0xFF3
 14076                           intcon	equ	0xFF2
 14077                           postinc0	equ	0xFEE
 14078                           wreg	equ	0xFE8
 14079                           indf1	equ	0xFE7
 14080                           postinc1	equ	0xFE6
 14081                           postdec1	equ	0xFE5
 14082                           fsr1h	equ	0xFE2
 14083                           fsr1l	equ	0xFE1
 14084                           indf2	equ	0xFDF
 14085                           postinc2	equ	0xFDE
 14086                           postdec2	equ	0xFDD
 14087                           plusw2	equ	0xFDB
 14088                           fsr2h	equ	0xFDA
 14089                           fsr2l	equ	0xFD9
 14090                           status	equ	0xFD8
 14091                           
 14092 ;; *************** function ___awdiv *****************
 14093 ;; Defined at:
 14094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14095 ;; Parameters:    Size  Location     Type
 14096 ;;  dividend        2   32[COMRAM] int 
 14097 ;;  divisor         2   34[COMRAM] int 
 14098 ;; Auto vars:     Size  Location     Type
 14099 ;;  quotient        2   38[COMRAM] int 
 14100 ;;  sign            1   37[COMRAM] unsigned char 
 14101 ;;  counter         1   36[COMRAM] unsigned char 
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  2   32[COMRAM] int 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2, status,0
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14111 ;;      Params:         4       0       0       0       0       0       0
 14112 ;;      Locals:         4       0       0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0
 14114 ;;      Totals:         8       0       0       0       0       0       0
 14115 ;;Total ram usage:        8 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    2
 14118 ;; This function calls:
 14119 ;;		Nothing
 14120 ;; This function is called by:
 14121 ;;		_SetHourMin
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           	psect	text65
 14126  0035AE                     __ptext65:
 14127                           	opt stack 0
 14128  0035AE                     ___awdiv:
 14129                           	opt stack 25
 14130                           
 14131                           ;incstack = 0
 14132  0035AE  FFFF               	dw	65535
 14133  0035B0  0E00               	movlw	0
 14134  0035B2  6E26               	movwf	___awdiv@sign,c
 14135  0035B4  AE24               	btfss	___awdiv@divisor+1,7,c
 14136  0035B6  D006               	goto	l6877
 14137  0035B8  6C23               	negf	___awdiv@divisor,c
 14138  0035BA  1E24               	comf	___awdiv@divisor+1,f,c
 14139  0035BC  B0D8               	btfsc	status,0,c
 14140  0035BE  2A24               	incf	___awdiv@divisor+1,f,c
 14141  0035C0  0E01               	movlw	1
 14142  0035C2  6E26               	movwf	___awdiv@sign,c
 14143  0035C4                     l6877:
 14144  0035C4  FFFF               	dw	65535	; assembler added errata NOP
 14145  0035C6  AE22               	btfss	___awdiv@dividend+1,7,c
 14146  0035C8  D006               	goto	l6883
 14147  0035CA  6C21               	negf	___awdiv@dividend,c
 14148  0035CC  1E22               	comf	___awdiv@dividend+1,f,c
 14149  0035CE  B0D8               	btfsc	status,0,c
 14150  0035D0  2A22               	incf	___awdiv@dividend+1,f,c
 14151  0035D2  0E01               	movlw	1
 14152  0035D4  1A26               	xorwf	___awdiv@sign,f,c
 14153  0035D6                     l6883:
 14154  0035D6  FFFF               	dw	65535	; assembler added errata NOP
 14155  0035D8  0E00               	movlw	0
 14156  0035DA  6E28               	movwf	___awdiv@quotient+1,c
 14157  0035DC  0E00               	movlw	0
 14158  0035DE  6E27               	movwf	___awdiv@quotient,c
 14159  0035E0  5023               	movf	___awdiv@divisor,w,c
 14160  0035E2  1024               	iorwf	___awdiv@divisor+1,w,c
 14161  0035E4  B4D8               	btfsc	status,2,c
 14162  0035E6  D020               	goto	l6905
 14163  0035E8  0E01               	movlw	1
 14164  0035EA  6E25               	movwf	___awdiv@counter,c
 14165  0035EC  D005               	goto	l6891
 14166  0035EE                     l6889:
 14167  0035EE  FFFF               	dw	65535	; assembler added errata NOP
 14168  0035F0  90D8               	bcf	status,0,c
 14169  0035F2  3623               	rlcf	___awdiv@divisor,f,c
 14170  0035F4  3624               	rlcf	___awdiv@divisor+1,f,c
 14171  0035F6  2A25               	incf	___awdiv@counter,f,c
 14172  0035F8                     l6891:
 14173  0035F8  FFFF               	dw	65535	; assembler added errata NOP
 14174  0035FA  AE24               	btfss	___awdiv@divisor+1,7,c
 14175  0035FC  D7F8               	goto	l6889
 14176  0035FE                     l6893:
 14177  0035FE  FFFF               	dw	65535	; assembler added errata NOP
 14178  003600  90D8               	bcf	status,0,c
 14179  003602  3627               	rlcf	___awdiv@quotient,f,c
 14180  003604  3628               	rlcf	___awdiv@quotient+1,f,c
 14181  003606  5023               	movf	___awdiv@divisor,w,c
 14182  003608  5C21               	subwf	___awdiv@dividend,w,c
 14183  00360A  5024               	movf	___awdiv@divisor+1,w,c
 14184  00360C  5822               	subwfb	___awdiv@dividend+1,w,c
 14185  00360E  A0D8               	btfss	status,0,c
 14186  003610  D005               	goto	l6901
 14187  003612  5023               	movf	___awdiv@divisor,w,c
 14188  003614  5E21               	subwf	___awdiv@dividend,f,c
 14189  003616  5024               	movf	___awdiv@divisor+1,w,c
 14190  003618  5A22               	subwfb	___awdiv@dividend+1,f,c
 14191  00361A  8027               	bsf	___awdiv@quotient,0,c
 14192  00361C                     l6901:
 14193  00361C  FFFF               	dw	65535	; assembler added errata NOP
 14194  00361E  90D8               	bcf	status,0,c
 14195  003620  3224               	rrcf	___awdiv@divisor+1,f,c
 14196  003622  3223               	rrcf	___awdiv@divisor,f,c
 14197  003624  2E25               	decfsz	___awdiv@counter,f,c
 14198  003626  D7EB               	goto	l6893
 14199  003628                     l6905:
 14200  003628  FFFF               	dw	65535	; assembler added errata NOP
 14201  00362A  5026               	movf	___awdiv@sign,w,c
 14202  00362C  B4D8               	btfsc	status,2,c
 14203  00362E  D004               	goto	l6909
 14204  003630  6C27               	negf	___awdiv@quotient,c
 14205  003632  1E28               	comf	___awdiv@quotient+1,f,c
 14206  003634  B0D8               	btfsc	status,0,c
 14207  003636  2A28               	incf	___awdiv@quotient+1,f,c
 14208  003638                     l6909:
 14209  003638  FFFF               	dw	65535	; assembler added errata NOP
 14210  00363A  C027  F021         	movff	___awdiv@quotient,?___awdiv
 14211  00363E  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
 14212  003642  0012               	return		;funcret
 14213  003644  FFFF               	dw	65535	; errata NOP
 14214  003646                     __end_of___awdiv:
 14215                           	opt stack 0
 14216                           tblptru	equ	0xFF8
 14217                           tblptrh	equ	0xFF7
 14218                           tblptrl	equ	0xFF6
 14219                           tablat	equ	0xFF5
 14220                           prodh	equ	0xFF4
 14221                           prodl	equ	0xFF3
 14222                           intcon	equ	0xFF2
 14223                           postinc0	equ	0xFEE
 14224                           wreg	equ	0xFE8
 14225                           indf1	equ	0xFE7
 14226                           postinc1	equ	0xFE6
 14227                           postdec1	equ	0xFE5
 14228                           fsr1h	equ	0xFE2
 14229                           fsr1l	equ	0xFE1
 14230                           indf2	equ	0xFDF
 14231                           postinc2	equ	0xFDE
 14232                           postdec2	equ	0xFDD
 14233                           plusw2	equ	0xFDB
 14234                           fsr2h	equ	0xFDA
 14235                           fsr2l	equ	0xFD9
 14236                           status	equ	0xFD8
 14237                           
 14238 ;; *************** function _ModbusSetExceptionStatusBit *****************
 14239 ;; Defined at:
 14240 ;;		line 240 in file "ModbusRtu.c"
 14241 ;; Parameters:    Size  Location     Type
 14242 ;;  bitNum          1    wreg     unsigned char 
 14243 ;;  value           1   32[COMRAM] unsigned char 
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;  bitNum          1   35[COMRAM] unsigned char 
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		wreg, status,2, status,0
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14255 ;;      Params:         1       0       0       0       0       0       0
 14256 ;;      Locals:         1       0       0       0       0       0       0
 14257 ;;      Temps:          2       0       0       0       0       0       0
 14258 ;;      Totals:         4       0       0       0       0       0       0
 14259 ;;Total ram usage:        4 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    2
 14262 ;; This function calls:
 14263 ;;		Nothing
 14264 ;; This function is called by:
 14265 ;;		_CommandSetLed
 14266 ;;		_CommandSetStatusLed
 14267 ;;		_ProcessUserCommands
 14268 ;;		_io_poll
 14269 ;;		_ModbusPoll
 14270 ;;		_ModbusProcess_FC100
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           	psect	text66
 14275  003DD2                     __ptext66:
 14276                           	opt stack 0
 14277  003DD2                     _ModbusSetExceptionStatusBit:
 14278                           	opt stack 26
 14279                           
 14280                           ;incstack = 0
 14281  003DD2  FFFF               	dw	65535
 14282                           
 14283                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 14284  003DD4  6E24               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 14285                           
 14286                           ;ModbusRtu.c: 242: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 14287  003DD6  5021               	movf	ModbusSetExceptionStatusBit@value,w,c
 14288  003DD8  B4D8               	btfsc	status,2,c
 14289  003DDA  D00F               	goto	l6831
 14290  003DDC  C024  F022         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 14291  003DE0  0E01               	movlw	1
 14292  003DE2  6E23               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 14293  003DE4  2A22               	incf	??_ModbusSetExceptionStatusBit,f,c
 14294  003DE6  D003               	goto	u6134
 14295  003DE8                     u6135:
 14296  003DE8  FFFF               	dw	65535	; assembler added errata NOP
 14297  003DEA  90D8               	bcf	status,0,c
 14298  003DEC  3623               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 14299  003DEE                     u6134:
 14300  003DEE  FFFF               	dw	65535	; assembler added errata NOP
 14301  003DF0  2E22               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 14302  003DF2  D7FA               	goto	u6135
 14303  003DF4  5023               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 14304  003DF6  1249               	iorwf	__exceptionStatus,f,c
 14305  003DF8  D010               	goto	l785
 14306  003DFA                     l6831:
 14307  003DFA  FFFF               	dw	65535	; assembler added errata NOP
 14308  003DFC  C024  F022         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 14309  003E00  0E01               	movlw	1
 14310  003E02  6E23               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 14311  003E04  2A22               	incf	??_ModbusSetExceptionStatusBit,f,c
 14312  003E06  D003               	goto	u6144
 14313  003E08                     u6145:
 14314  003E08  FFFF               	dw	65535	; assembler added errata NOP
 14315  003E0A  90D8               	bcf	status,0,c
 14316  003E0C  3623               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 14317  003E0E                     u6144:
 14318  003E0E  FFFF               	dw	65535	; assembler added errata NOP
 14319  003E10  2E22               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 14320  003E12  D7FA               	goto	u6145
 14321  003E14  5023               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 14322  003E16  0AFF               	xorlw	255
 14323  003E18  1649               	andwf	__exceptionStatus,f,c
 14324  003E1A                     l785:
 14325  003E1A  FFFF               	dw	65535	; assembler added errata NOP
 14326  003E1C  0012               	return		;funcret
 14327  003E1E  FFFF               	dw	65535	; errata NOP
 14328  003E20                     __end_of_ModbusSetExceptionStatusBit:
 14329                           	opt stack 0
 14330                           tblptru	equ	0xFF8
 14331                           tblptrh	equ	0xFF7
 14332                           tblptrl	equ	0xFF6
 14333                           tablat	equ	0xFF5
 14334                           prodh	equ	0xFF4
 14335                           prodl	equ	0xFF3
 14336                           intcon	equ	0xFF2
 14337                           postinc0	equ	0xFEE
 14338                           wreg	equ	0xFE8
 14339                           indf1	equ	0xFE7
 14340                           postinc1	equ	0xFE6
 14341                           postdec1	equ	0xFE5
 14342                           fsr1h	equ	0xFE2
 14343                           fsr1l	equ	0xFE1
 14344                           indf2	equ	0xFDF
 14345                           postinc2	equ	0xFDE
 14346                           postdec2	equ	0xFDD
 14347                           plusw2	equ	0xFDB
 14348                           fsr2h	equ	0xFDA
 14349                           fsr2l	equ	0xFD9
 14350                           status	equ	0xFD8
 14351                           
 14352 ;; *************** function _ModbusProcess_FC1 *****************
 14353 ;; Defined at:
 14354 ;;		line 984 in file "ModbusRtu.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;  regs            2   47[COMRAM] unsigned short 
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;  u16Coilno       2   10[BANK0 ] unsigned short 
 14359 ;;  u16currentCo    2    7[BANK0 ] unsigned short 
 14360 ;;  u16StartCoil    2    5[BANK0 ] unsigned short 
 14361 ;;  u16coil         2    0[BANK0 ] unsigned short 
 14362 ;;  u8bitsno        1    9[BANK0 ] unsigned char 
 14363 ;;  u8bytesno       1    4[BANK0 ] unsigned char 
 14364 ;;  u8CopyBuffer    1    3[BANK0 ] unsigned char 
 14365 ;;  u8currentBit    1    2[BANK0 ] unsigned char 
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      unsigned char 
 14368 ;; Registers used:
 14369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14375 ;;      Params:         2       0       0       0       0       0       0
 14376 ;;      Locals:         0      12       0       0       0       0       0
 14377 ;;      Temps:          3       0       0       0       0       0       0
 14378 ;;      Totals:         5      12       0       0       0       0       0
 14379 ;;Total ram usage:       17 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    4
 14382 ;; This function calls:
 14383 ;;		_ModbusSendTxBuffer
 14384 ;; This function is called by:
 14385 ;;		_ModbusPoll
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           	psect	text67
 14390  00226A                     __ptext67:
 14391                           	opt stack 0
 14392  00226A                     _ModbusProcess_FC1:
 14393                           	opt stack 25
 14394                           
 14395                           ;incstack = 0
 14396  00226A  FFFF               	dw	65535
 14397                           
 14398                           ;ModbusRtu.c: 987: uint8_t u8currentBit, u8bytesno, u8bitsno;
 14399                           ;ModbusRtu.c: 988: uint8_t u8CopyBufferSize;
 14400                           ;ModbusRtu.c: 989: uint16_t u16currentCoil, u16coil;
 14401                           ;ModbusRtu.c: 992: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 14402  00226C  0101               	movlb	1	; () banked
 14403  00226E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
 14404  002270  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14405  002272  0101               	movlb	1	; () banked
 14406  002274  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 14407  002276  0100               	movlb	0	; () banked
 14408  002278  6F85               	movwf	ModbusProcess_FC1@u16StartCoil& (0+255),b
 14409  00227A  C032  F086         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;ModbusRtu.c: 993: _lastAddress = u16StartCoil;
 14413  00227E  C085  F0E2         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 14414  002282  C086  F0E3         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 14415                           
 14416                           ;ModbusRtu.c: 994: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 14417  002286  0101               	movlb	1	; () banked
 14418  002288  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 14419  00228A  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14420  00228C  0101               	movlb	1	; () banked
 14421  00228E  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 14422  002290  0100               	movlb	0	; () banked
 14423  002292  6F8A               	movwf	ModbusProcess_FC1@u16Coilno& (0+255),b
 14424  002294  C032  F08B         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 14425                           
 14426                           ; BSR set to: 0
 14427                           ;ModbusRtu.c: 995: _lastCount = u16Coilno;
 14428  002298  C08A  F0E4         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 14429  00229C  C08B  F0E5         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;ModbusRtu.c: 997: u8bytesno = (uint8_t) (u16Coilno / 8);
 14433  0022A0  C08A  F032         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 14434  0022A4  C08B  F033         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 14435  0022A8  90D8               	bcf	status,0,c
 14436  0022AA  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14437  0022AC  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14438  0022AE  90D8               	bcf	status,0,c
 14439  0022B0  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14440  0022B2  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14441  0022B4  90D8               	bcf	status,0,c
 14442  0022B6  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14443  0022B8  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14444  0022BA  5032               	movf	??_ModbusProcess_FC1,w,c
 14445  0022BC  0100               	movlb	0	; () banked
 14446  0022BE  6F84               	movwf	ModbusProcess_FC1@u8bytesno& (0+255),b
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;ModbusRtu.c: 998: if (u16Coilno % 8 != 0)
 14450  0022C0  0E07               	movlw	7
 14451  0022C2  0100               	movlb	0	; () banked
 14452  0022C4  158A               	andwf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14453  0022C6  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14454  0022C8  0E00               	movlw	0
 14455  0022CA  0100               	movlb	0	; () banked
 14456  0022CC  158B               	andwf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14457  0022CE  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14458  0022D0  5032               	movf	??_ModbusProcess_FC1,w,c
 14459  0022D2  1033               	iorwf	??_ModbusProcess_FC1+1,w,c
 14460  0022D4  B4D8               	btfsc	status,2,c
 14461  0022D6  D002               	goto	l7585
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;ModbusRtu.c: 999: u8bytesno++;
 14465  0022D8  0100               	movlb	0	; () banked
 14466  0022DA  2B84               	incf	ModbusProcess_FC1@u8bytesno& (0+255),f,b
 14467  0022DC                     l7585:
 14468  0022DC  FFFF               	dw	65535	; assembler added errata NOP
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;ModbusRtu.c: 1000: _au8Buffer[ ADD_HI ] = u8bytesno;
 14472  0022DE  C084  F12C         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;ModbusRtu.c: 1001: _u8BufferSize = ADD_LO;
 14476  0022E2  0E03               	movlw	3
 14477  0022E4  6E53               	movwf	__u8BufferSize,c
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;ModbusRtu.c: 1004: u8bitsno = 0;
 14481  0022E6  0E00               	movlw	0
 14482  0022E8  0100               	movlb	0	; () banked
 14483  0022EA  6F89               	movwf	ModbusProcess_FC1@u8bitsno& (0+255),b
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
 14487  0022EC  0E00               	movlw	0
 14488  0022EE  0100               	movlb	0	; () banked
 14489  0022F0  6F88               	movwf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),b
 14490  0022F2  0E00               	movlw	0
 14491  0022F4  6F87               	movwf	ModbusProcess_FC1@u16currentCoil& (0+255),b
 14492  0022F6  D060               	goto	l7613
 14493  0022F8                     l7593:
 14494  0022F8  FFFF               	dw	65535	; assembler added errata NOP
 14495                           
 14496                           ; BSR set to: 0
 14497                           ;ModbusRtu.c: 1007: {
 14498                           ;ModbusRtu.c: 1008: u16coil = u16StartCoil + u16currentCoil;
 14499  0022FA  0100               	movlb	0	; () banked
 14500  0022FC  5187               	movf	ModbusProcess_FC1@u16currentCoil& (0+255),w,b
 14501  0022FE  0100               	movlb	0	; () banked
 14502  002300  2585               	addwf	ModbusProcess_FC1@u16StartCoil& (0+255),w,b
 14503  002302  0100               	movlb	0	; () banked
 14504  002304  6F80               	movwf	ModbusProcess_FC1@u16coil& (0+255),b
 14505  002306  0100               	movlb	0	; () banked
 14506  002308  5188               	movf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),w,b
 14507  00230A  0100               	movlb	0	; () banked
 14508  00230C  2186               	addwfc	(ModbusProcess_FC1@u16StartCoil+1)& (0+255),w,b
 14509  00230E  0100               	movlb	0	; () banked
 14510  002310  6F81               	movwf	(ModbusProcess_FC1@u16coil+1)& (0+255),b
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;ModbusRtu.c: 1010: u8currentBit = (uint8_t) u16coil;
 14514  002312  C080  F082         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 14515                           
 14516                           ; BSR set to: 0
 14517                           ;ModbusRtu.c: 1012: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ]
      +                          ) |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned 
      +                          short)1 << (u8bitsno))));
 14518  002316  C082  F032         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 14519  00231A  C030  F033         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 14520  00231E  C031  F034         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 14521  002322  2A32               	incf	??_ModbusProcess_FC1,f,c
 14522  002324  D004               	goto	u7054
 14523  002326                     u7055:
 14524  002326  FFFF               	dw	65535	; assembler added errata NOP
 14525  002328  90D8               	bcf	status,0,c
 14526  00232A  3234               	rrcf	??_ModbusProcess_FC1+2,f,c
 14527  00232C  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14528  00232E                     u7054:
 14529  00232E  FFFF               	dw	65535	; assembler added errata NOP
 14530  002330  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14531  002332  D7F9               	goto	u7055
 14532  002334  A033               	btfss	??_ModbusProcess_FC1+1,0,c
 14533  002336  D017               	goto	l7601
 14534  002338  C089  F032         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 14535  00233C  0E01               	movlw	1
 14536  00233E  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14537  002340  2A32               	incf	??_ModbusProcess_FC1,f,c
 14538  002342  D003               	goto	u7074
 14539  002344                     u7075:
 14540  002344  FFFF               	dw	65535	; assembler added errata NOP
 14541  002346  90D8               	bcf	status,0,c
 14542  002348  3633               	rlcf	??_ModbusProcess_FC1+1,f,c
 14543  00234A                     u7074:
 14544  00234A  FFFF               	dw	65535	; assembler added errata NOP
 14545  00234C  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14546  00234E  D7FA               	goto	u7075
 14547  002350  5053               	movf	__u8BufferSize,w,c
 14548  002352  0D01               	mullw	1
 14549  002354  0E2A               	movlw	low __au8Buffer
 14550  002356  24F3               	addwf	prodl,w,c
 14551  002358  6ED9               	movwf	fsr2l,c
 14552  00235A  0E01               	movlw	high __au8Buffer
 14553  00235C  20F4               	addwfc	prodh,w,c
 14554  00235E  6EDA               	movwf	fsr2h,c
 14555  002360  5033               	movf	??_ModbusProcess_FC1+1,w,c
 14556  002362  12DF               	iorwf	indf2,f,c
 14557  002364  D01A               	goto	l7603
 14558  002366                     l7601:
 14559  002366  FFFF               	dw	65535	; assembler added errata NOP
 14560  002368  C089  F032         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 14561  00236C  0E01               	movlw	1
 14562  00236E  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14563  002370  2A32               	incf	??_ModbusProcess_FC1,f,c
 14564  002372  D003               	goto	u7084
 14565  002374                     u7085:
 14566  002374  FFFF               	dw	65535	; assembler added errata NOP
 14567  002376  90D8               	bcf	status,0,c
 14568  002378  3633               	rlcf	??_ModbusProcess_FC1+1,f,c
 14569  00237A                     u7084:
 14570  00237A  FFFF               	dw	65535	; assembler added errata NOP
 14571  00237C  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14572  00237E  D7FA               	goto	u7085
 14573  002380  5033               	movf	??_ModbusProcess_FC1+1,w,c
 14574  002382  0AFF               	xorlw	255
 14575  002384  6E34               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 14576  002386  5053               	movf	__u8BufferSize,w,c
 14577  002388  0D01               	mullw	1
 14578  00238A  0E2A               	movlw	low __au8Buffer
 14579  00238C  24F3               	addwf	prodl,w,c
 14580  00238E  6ED9               	movwf	fsr2l,c
 14581  002390  0E01               	movlw	high __au8Buffer
 14582  002392  20F4               	addwfc	prodh,w,c
 14583  002394  6EDA               	movwf	fsr2h,c
 14584  002396  5034               	movf	??_ModbusProcess_FC1+2,w,c
 14585  002398  16DF               	andwf	indf2,f,c
 14586  00239A                     l7603:
 14587  00239A  FFFF               	dw	65535	; assembler added errata NOP
 14588                           
 14589                           ;ModbusRtu.c: 1016: u8bitsno++;
 14590  00239C  0100               	movlb	0	; () banked
 14591  00239E  2B89               	incf	ModbusProcess_FC1@u8bitsno& (0+255),f,b
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;ModbusRtu.c: 1018: if (u8bitsno > 7)
 14595  0023A0  0E07               	movlw	7
 14596  0023A2  0100               	movlb	0	; () banked
 14597  0023A4  6589               	cpfsgt	ModbusProcess_FC1@u8bitsno& (0+255),b
 14598  0023A6  D004               	goto	l7611
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;ModbusRtu.c: 1019: {
 14602                           ;ModbusRtu.c: 1020: u8bitsno = 0;
 14603  0023A8  0E00               	movlw	0
 14604  0023AA  0100               	movlb	0	; () banked
 14605  0023AC  6F89               	movwf	ModbusProcess_FC1@u8bitsno& (0+255),b
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;ModbusRtu.c: 1021: _u8BufferSize++;
 14609  0023AE  2A53               	incf	__u8BufferSize,f,c
 14610  0023B0                     l7611:
 14611  0023B0  FFFF               	dw	65535	; assembler added errata NOP
 14612                           
 14613                           ; BSR set to: 0
 14614  0023B2  0100               	movlb	0	; () banked
 14615  0023B4  4B87               	infsnz	ModbusProcess_FC1@u16currentCoil& (0+255),f,b
 14616  0023B6  2B88               	incf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),f,b
 14617  0023B8                     l7613:
 14618  0023B8  FFFF               	dw	65535	; assembler added errata NOP
 14619                           
 14620                           ; BSR set to: 0
 14621  0023BA  0100               	movlb	0	; () banked
 14622  0023BC  518A               	movf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14623  0023BE  0100               	movlb	0	; () banked
 14624  0023C0  5D87               	subwf	ModbusProcess_FC1@u16currentCoil& (0+255),w,b
 14625  0023C2  0100               	movlb	0	; () banked
 14626  0023C4  518B               	movf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14627  0023C6  0100               	movlb	0	; () banked
 14628  0023C8  5988               	subwfb	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),w,b
 14629  0023CA  A0D8               	btfss	status,0,c
 14630  0023CC  D795               	goto	l7593
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;ModbusRtu.c: 1022: }
 14634                           ;ModbusRtu.c: 1023: }
 14635                           ;ModbusRtu.c: 1026: if (u16Coilno % 8 != 0)
 14636                           
 14637                           ; BSR set to: 0
 14638  0023CE  0E07               	movlw	7
 14639  0023D0  0100               	movlb	0	; () banked
 14640  0023D2  158A               	andwf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14641  0023D4  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14642  0023D6  0E00               	movlw	0
 14643  0023D8  0100               	movlb	0	; () banked
 14644  0023DA  158B               	andwf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14645  0023DC  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14646  0023DE  5032               	movf	??_ModbusProcess_FC1,w,c
 14647  0023E0  1033               	iorwf	??_ModbusProcess_FC1+1,w,c
 14648  0023E2  A4D8               	btfss	status,2,c
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;ModbusRtu.c: 1027: _u8BufferSize++;
 14652  0023E4  2A53               	incf	__u8BufferSize,f,c
 14653                           
 14654                           ; BSR set to: 0
 14655                           ;ModbusRtu.c: 1028: u8CopyBufferSize = _u8BufferSize + 2;
 14656                           
 14657                           ; BSR set to: 0
 14658  0023E6  5053               	movf	__u8BufferSize,w,c
 14659  0023E8  0F02               	addlw	2
 14660  0023EA  0100               	movlb	0	; () banked
 14661  0023EC  6F83               	movwf	ModbusProcess_FC1@u8CopyBufferSize& (0+255),b
 14662                           
 14663                           ; BSR set to: 0
 14664                           ;ModbusRtu.c: 1029: ModbusSendTxBuffer();
 14665  0023EE  EC7F  F01C         	call	_ModbusSendTxBuffer	;wreg free
 14666                           
 14667                           ;ModbusRtu.c: 1030: return u8CopyBufferSize;
 14668  0023F2  0100               	movlb	0	; () banked
 14669  0023F4  5183               	movf	ModbusProcess_FC1@u8CopyBufferSize& (0+255),w,b
 14670                           
 14671                           ; BSR set to: 0
 14672                           
 14673                           ; BSR set to: 0
 14674  0023F6  0012               	return		;funcret
 14675  0023F8  FFFF               	dw	65535	; errata NOP
 14676  0023FA                     __end_of_ModbusProcess_FC1:
 14677                           	opt stack 0
 14678                           tblptru	equ	0xFF8
 14679                           tblptrh	equ	0xFF7
 14680                           tblptrl	equ	0xFF6
 14681                           tablat	equ	0xFF5
 14682                           prodh	equ	0xFF4
 14683                           prodl	equ	0xFF3
 14684                           intcon	equ	0xFF2
 14685                           postinc0	equ	0xFEE
 14686                           wreg	equ	0xFE8
 14687                           indf1	equ	0xFE7
 14688                           postinc1	equ	0xFE6
 14689                           postdec1	equ	0xFE5
 14690                           fsr1h	equ	0xFE2
 14691                           fsr1l	equ	0xFE1
 14692                           indf2	equ	0xFDF
 14693                           postinc2	equ	0xFDE
 14694                           postdec2	equ	0xFDD
 14695                           plusw2	equ	0xFDB
 14696                           fsr2h	equ	0xFDA
 14697                           fsr2l	equ	0xFD9
 14698                           status	equ	0xFD8
 14699                           
 14700 ;; *************** function _ModbusSendTxBuffer *****************
 14701 ;; Defined at:
 14702 ;;		line 650 in file "ModbusRtu.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;		None
 14705 ;; Auto vars:     Size  Location     Type
 14706 ;;  u16crc          2   45[COMRAM] unsigned short 
 14707 ;; Return value:  Size  Location     Type
 14708 ;;                  1    wreg      void 
 14709 ;; Registers used:
 14710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14711 ;; Tracked objects:
 14712 ;;		On entry : 0/0
 14713 ;;		On exit  : 0/0
 14714 ;;		Unchanged: 0/0
 14715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14716 ;;      Params:         0       0       0       0       0       0       0
 14717 ;;      Locals:         2       0       0       0       0       0       0
 14718 ;;      Temps:          0       0       0       0       0       0       0
 14719 ;;      Totals:         2       0       0       0       0       0       0
 14720 ;;Total ram usage:        2 bytes
 14721 ;; Hardware stack levels used:    1
 14722 ;; Hardware stack levels required when called:    3
 14723 ;; This function calls:
 14724 ;;		_ModbusCalcCRC
 14725 ;;		_PortWrite
 14726 ;;		_millis
 14727 ;; This function is called by:
 14728 ;;		_ModbusPoll
 14729 ;;		_ModbusProcess_FC1
 14730 ;;		_ModbusProcess_FC3
 14731 ;;		_ModbusProcess_FC5
 14732 ;;		_ModbusProcess_FC6
 14733 ;;		_ModbusProcess_FC7
 14734 ;;		_ModbusProcess_FC15
 14735 ;;		_ModbusProcess_FC16
 14736 ;;		_ModbusProcess_FC17
 14737 ;;		_ModbusProcess_FC20
 14738 ;;		_ModbusProcess_FC21
 14739 ;;		_ModbusProcess_FC43
 14740 ;;		_ModbusProcess_FC100
 14741 ;;		_ModbusProcess_FC101
 14742 ;;		_ModbusProcess_FC102
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           	psect	text68
 14747  0038FE                     __ptext68:
 14748                           	opt stack 0
 14749  0038FE                     _ModbusSendTxBuffer:
 14750                           	opt stack 26
 14751                           
 14752                           ; BSR set to: 0
 14753                           ;incstack = 0
 14754  0038FE  FFFF               	dw	65535
 14755                           
 14756                           ;ModbusRtu.c: 655: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 14757  003900  5053               	movf	__u8BufferSize,w,c
 14758  003902  EC6E  F01B         	call	_ModbusCalcCRC
 14759  003906  C021  F02E         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 14760  00390A  C022  F02F         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 14761                           
 14762                           ;ModbusRtu.c: 656: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 14763  00390E  5053               	movf	__u8BufferSize,w,c
 14764  003910  0D01               	mullw	1
 14765  003912  0E2A               	movlw	low __au8Buffer
 14766  003914  24F3               	addwf	prodl,w,c
 14767  003916  6ED9               	movwf	fsr2l,c
 14768  003918  0E01               	movlw	high __au8Buffer
 14769  00391A  20F4               	addwfc	prodh,w,c
 14770  00391C  6EDA               	movwf	fsr2h,c
 14771  00391E  502F               	movf	ModbusSendTxBuffer@u16crc+1,w,c
 14772  003920  6EDF               	movwf	indf2,c
 14773                           
 14774                           ;ModbusRtu.c: 657: _u8BufferSize++;
 14775  003922  2A53               	incf	__u8BufferSize,f,c
 14776                           
 14777                           ;ModbusRtu.c: 658: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 14778  003924  5053               	movf	__u8BufferSize,w,c
 14779  003926  0D01               	mullw	1
 14780  003928  0E2A               	movlw	low __au8Buffer
 14781  00392A  24F3               	addwf	prodl,w,c
 14782  00392C  6ED9               	movwf	fsr2l,c
 14783  00392E  0E01               	movlw	high __au8Buffer
 14784  003930  20F4               	addwfc	prodh,w,c
 14785  003932  6EDA               	movwf	fsr2h,c
 14786  003934  C02E  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 14787                           
 14788                           ;ModbusRtu.c: 659: _u8BufferSize++;
 14789  003938  2A53               	incf	__u8BufferSize,f,c
 14790                           
 14791                           ;ModbusRtu.c: 663: PortWrite(_au8Buffer, _u8BufferSize);
 14792  00393A  0E2A               	movlw	low __au8Buffer
 14793  00393C  6E21               	movwf	PortWrite@buf,c
 14794  00393E  0E01               	movlw	high __au8Buffer
 14795  003940  6E22               	movwf	PortWrite@buf+1,c
 14796  003942  C053  F023         	movff	__u8BufferSize,PortWrite@buflen
 14797  003946  EC10  F01F         	call	_PortWrite	;wreg free
 14798                           
 14799                           ;ModbusRtu.c: 669: _u8BufferSize = 0;
 14800  00394A  0E00               	movlw	0
 14801  00394C  6E53               	movwf	__u8BufferSize,c
 14802                           
 14803                           ;ModbusRtu.c: 672: _u32timeOut = millis() + (unsigned long) _u16timeOut;
 14804  00394E  ECD1  F000         	call	_millis	;wreg free
 14805  003952  0100               	movlb	0	; () banked
 14806  003954  51EA               	movf	__u16timeOut& (0+255),w,b
 14807  003956  2421               	addwf	?_millis,w,c
 14808  003958  0101               	movlb	1	; () banked
 14809  00395A  6F18               	movwf	__u32timeOut& (0+255),b
 14810  00395C  0100               	movlb	0	; () banked
 14811  00395E  51EB               	movf	(__u16timeOut+1)& (0+255),w,b
 14812  003960  2022               	addwfc	?_millis+1,w,c
 14813  003962  0101               	movlb	1	; () banked
 14814  003964  6F19               	movwf	(__u32timeOut+1)& (0+255),b
 14815  003966  0E00               	movlw	0
 14816  003968  2023               	addwfc	?_millis+2,w,c
 14817  00396A  0101               	movlb	1	; () banked
 14818  00396C  6F1A               	movwf	(__u32timeOut+2)& (0+255),b
 14819  00396E  0E00               	movlw	0
 14820  003970  2024               	addwfc	?_millis+3,w,c
 14821  003972  0101               	movlb	1	; () banked
 14822  003974  6F1B               	movwf	(__u32timeOut+3)& (0+255),b
 14823                           
 14824                           ; BSR set to: 1
 14825                           ;ModbusRtu.c: 675: _u16OutCnt++;
 14826  003976  0101               	movlb	1	; () banked
 14827  003978  4B26               	infsnz	__u16OutCnt& (0+255),f,b
 14828  00397A  2B27               	incf	(__u16OutCnt+1)& (0+255),f,b
 14829                           
 14830                           ; BSR set to: 1
 14831  00397C  0012               	return		;funcret
 14832  00397E  FFFF               	dw	65535	; errata NOP
 14833  003980                     __end_of_ModbusSendTxBuffer:
 14834                           	opt stack 0
 14835                           tblptru	equ	0xFF8
 14836                           tblptrh	equ	0xFF7
 14837                           tblptrl	equ	0xFF6
 14838                           tablat	equ	0xFF5
 14839                           prodh	equ	0xFF4
 14840                           prodl	equ	0xFF3
 14841                           intcon	equ	0xFF2
 14842                           postinc0	equ	0xFEE
 14843                           wreg	equ	0xFE8
 14844                           indf1	equ	0xFE7
 14845                           postinc1	equ	0xFE6
 14846                           postdec1	equ	0xFE5
 14847                           fsr1h	equ	0xFE2
 14848                           fsr1l	equ	0xFE1
 14849                           indf2	equ	0xFDF
 14850                           postinc2	equ	0xFDE
 14851                           postdec2	equ	0xFDD
 14852                           plusw2	equ	0xFDB
 14853                           fsr2h	equ	0xFDA
 14854                           fsr2l	equ	0xFD9
 14855                           status	equ	0xFD8
 14856                           
 14857 ;; *************** function _millis *****************
 14858 ;; Defined at:
 14859 ;;		line 247 in file "interrupts.c"
 14860 ;; Parameters:    Size  Location     Type
 14861 ;;		None
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;  ret             4   36[COMRAM] unsigned long 
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  4   32[COMRAM] unsigned long 
 14866 ;; Registers used:
 14867 ;;		None
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14873 ;;      Params:         4       0       0       0       0       0       0
 14874 ;;      Locals:         4       0       0       0       0       0       0
 14875 ;;      Temps:          0       0       0       0       0       0       0
 14876 ;;      Totals:         8       0       0       0       0       0       0
 14877 ;;Total ram usage:        8 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; Hardware stack levels required when called:    2
 14880 ;; This function calls:
 14881 ;;		Nothing
 14882 ;; This function is called by:
 14883 ;;		_SoundPlayNextStep
 14884 ;;		_main
 14885 ;;		_ModbusPoll
 14886 ;;		_ModbusSendTxBuffer
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text69
 14891  0001A2                     __ptext69:
 14892                           	opt stack 0
 14893  0001A2                     _millis:
 14894                           	opt stack 28
 14895                           
 14896                           ; BSR set to: 1
 14897                           ;incstack = 0
 14898  0001A2  FFFF               	dw	65535
 14899                           
 14900                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 14901  0001A4  9EF2               	bcf	intcon,7,c	;volatile
 14902                           
 14903                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 14904  0001A6  C0DC  F025         	movff	_millisecondsFromStart,millis@ret	;volatile
 14905  0001AA  C0DD  F026         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 14906  0001AE  C0DE  F027         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 14907  0001B2  C0DF  F028         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 14908                           
 14909                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 14910  0001B6  8EF2               	bsf	intcon,7,c	;volatile
 14911                           
 14912                           ;interrupts.c: 253: return ret;
 14913  0001B8  C025  F021         	movff	millis@ret,?_millis
 14914  0001BC  C026  F022         	movff	millis@ret+1,?_millis+1
 14915  0001C0  C027  F023         	movff	millis@ret+2,?_millis+2
 14916  0001C4  C028  F024         	movff	millis@ret+3,?_millis+3
 14917  0001C8  0012               	return		;funcret
 14918  0001CA  FFFF               	dw	65535	; errata NOP
 14919  0001CC                     __end_of_millis:
 14920                           	opt stack 0
 14921                           tblptru	equ	0xFF8
 14922                           tblptrh	equ	0xFF7
 14923                           tblptrl	equ	0xFF6
 14924                           tablat	equ	0xFF5
 14925                           prodh	equ	0xFF4
 14926                           prodl	equ	0xFF3
 14927                           intcon	equ	0xFF2
 14928                           postinc0	equ	0xFEE
 14929                           wreg	equ	0xFE8
 14930                           indf1	equ	0xFE7
 14931                           postinc1	equ	0xFE6
 14932                           postdec1	equ	0xFE5
 14933                           fsr1h	equ	0xFE2
 14934                           fsr1l	equ	0xFE1
 14935                           indf2	equ	0xFDF
 14936                           postinc2	equ	0xFDE
 14937                           postdec2	equ	0xFDD
 14938                           plusw2	equ	0xFDB
 14939                           fsr2h	equ	0xFDA
 14940                           fsr2l	equ	0xFD9
 14941                           status	equ	0xFD8
 14942                           
 14943 ;; *************** function _PortWrite *****************
 14944 ;; Defined at:
 14945 ;;		line 101 in file "interrupts.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;  buf             2   32[COMRAM] PTR unsigned char 
 14948 ;;		 -> _au8Buffer(140), 
 14949 ;;  buflen          1   34[COMRAM] unsigned char 
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;  i               1   35[COMRAM] unsigned char 
 14952 ;; Return value:  Size  Location     Type
 14953 ;;                  1    wreg      void 
 14954 ;; Registers used:
 14955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14956 ;; Tracked objects:
 14957 ;;		On entry : 0/0
 14958 ;;		On exit  : 0/0
 14959 ;;		Unchanged: 0/0
 14960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14961 ;;      Params:         3       0       0       0       0       0       0
 14962 ;;      Locals:         1       0       0       0       0       0       0
 14963 ;;      Temps:          0       0       0       0       0       0       0
 14964 ;;      Totals:         4       0       0       0       0       0       0
 14965 ;;Total ram usage:        4 bytes
 14966 ;; Hardware stack levels used:    1
 14967 ;; Hardware stack levels required when called:    2
 14968 ;; This function calls:
 14969 ;;		Nothing
 14970 ;; This function is called by:
 14971 ;;		_ModbusSendTxBuffer
 14972 ;; This function uses a non-reentrant model
 14973 ;;
 14974                           
 14975                           	psect	text70
 14976  003E20                     __ptext70:
 14977                           	opt stack 0
 14978  003E20                     _PortWrite:
 14979                           	opt stack 26
 14980                           
 14981                           ;incstack = 0
 14982  003E20  FFFF               	dw	65535
 14983                           
 14984                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 14985  003E22  8A8B               	bsf	3979,5,c	;volatile
 14986                           
 14987                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 14988  003E24  0E06               	movlw	6
 14989  003E26                     u8007:
 14990  003E26  FFFF               	dw	65535	; errata NOP
 14991  003E28  2EE8               	decfsz	wreg,f,c
 14992  003E2A  D7FD               	goto	u8007
 14993  003E2C  F000               	nop	
 14994                           
 14995                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 14996  003E2E  0E00               	movlw	0
 14997  003E30  6E24               	movwf	PortWrite@i,c
 14998  003E32  D00E               	goto	l6671
 14999  003E34                     l74:
 15000  003E34  FFFF               	dw	65535	; assembler added errata NOP
 15001  003E36  A2AC               	btfss	4012,1,c	;volatile
 15002  003E38  D7FD               	goto	l74
 15003                           
 15004                           ;interrupts.c: 108: TXREG = buf[i];
 15005  003E3A  5024               	movf	PortWrite@i,w,c
 15006  003E3C  0D01               	mullw	1
 15007  003E3E  50F3               	movf	prodl,w,c
 15008  003E40  2421               	addwf	PortWrite@buf,w,c
 15009  003E42  6ED9               	movwf	fsr2l,c
 15010  003E44  50F4               	movf	prodh,w,c
 15011  003E46  2022               	addwfc	PortWrite@buf+1,w,c
 15012  003E48  6EDA               	movwf	fsr2h,c
 15013  003E4A  50DF               	movf	indf2,w,c
 15014  003E4C  6EAD               	movwf	4013,c	;volatile
 15015  003E4E  2A24               	incf	PortWrite@i,f,c
 15016  003E50                     l6671:
 15017  003E50  FFFF               	dw	65535	; assembler added errata NOP
 15018  003E52  5023               	movf	PortWrite@buflen,w,c
 15019  003E54  5C24               	subwf	PortWrite@i,w,c
 15020  003E56  A0D8               	btfss	status,0,c
 15021  003E58  D7ED               	goto	l74
 15022  003E5A                     l78:
 15023  003E5A  FFFF               	dw	65535	; assembler added errata NOP
 15024  003E5C  A2AC               	btfss	4012,1,c	;volatile
 15025  003E5E  D7FD               	goto	l78
 15026                           
 15027                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 15028  003E60  9A8B               	bcf	3979,5,c	;volatile
 15029  003E62  0012               	return		;funcret
 15030  003E64  FFFF               	dw	65535	; errata NOP
 15031  003E66                     __end_of_PortWrite:
 15032                           	opt stack 0
 15033                           tblptru	equ	0xFF8
 15034                           tblptrh	equ	0xFF7
 15035                           tblptrl	equ	0xFF6
 15036                           tablat	equ	0xFF5
 15037                           prodh	equ	0xFF4
 15038                           prodl	equ	0xFF3
 15039                           intcon	equ	0xFF2
 15040                           postinc0	equ	0xFEE
 15041                           wreg	equ	0xFE8
 15042                           indf1	equ	0xFE7
 15043                           postinc1	equ	0xFE6
 15044                           postdec1	equ	0xFE5
 15045                           fsr1h	equ	0xFE2
 15046                           fsr1l	equ	0xFE1
 15047                           indf2	equ	0xFDF
 15048                           postinc2	equ	0xFDE
 15049                           postdec2	equ	0xFDD
 15050                           plusw2	equ	0xFDB
 15051                           fsr2h	equ	0xFDA
 15052                           fsr2l	equ	0xFD9
 15053                           status	equ	0xFD8
 15054                           
 15055 ;; *************** function _ModbusCalcCRC *****************
 15056 ;; Defined at:
 15057 ;;		line 760 in file "ModbusRtu.c"
 15058 ;; Parameters:    Size  Location     Type
 15059 ;;  u8length        1    wreg     unsigned char 
 15060 ;; Auto vars:     Size  Location     Type
 15061 ;;  u8length        1   36[COMRAM] unsigned char 
 15062 ;;  j               1   42[COMRAM] unsigned char 
 15063 ;;  i               1   41[COMRAM] unsigned char 
 15064 ;;  temp            2   43[COMRAM] unsigned int 
 15065 ;;  flag            2   39[COMRAM] unsigned int 
 15066 ;;  temp2           2   37[COMRAM] unsigned int 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  2   32[COMRAM] unsigned short 
 15069 ;; Registers used:
 15070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15076 ;;      Params:         2       0       0       0       0       0       0
 15077 ;;      Locals:         9       0       0       0       0       0       0
 15078 ;;      Temps:          2       0       0       0       0       0       0
 15079 ;;      Totals:        13       0       0       0       0       0       0
 15080 ;;Total ram usage:       13 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    2
 15083 ;; This function calls:
 15084 ;;		Nothing
 15085 ;; This function is called by:
 15086 ;;		_ModbusSendTxBuffer
 15087 ;;		_ModbusValidateRequest
 15088 ;; This function uses a non-reentrant model
 15089 ;;
 15090                           
 15091                           	psect	text71
 15092  0036DC                     __ptext71:
 15093                           	opt stack 0
 15094  0036DC                     _ModbusCalcCRC:
 15095                           	opt stack 26
 15096                           
 15097                           ;incstack = 0
 15098  0036DC  FFFF               	dw	65535
 15099                           
 15100                           ;ModbusCalcCRC@u8length stored from wreg
 15101  0036DE  6E25               	movwf	ModbusCalcCRC@u8length,c
 15102                           
 15103                           ;ModbusRtu.c: 762: unsigned int temp, temp2, flag;
 15104                           ;ModbusRtu.c: 763: temp = 0xFFFF;
 15105  0036E0  682C               	setf	ModbusCalcCRC@temp,c
 15106  0036E2  682D               	setf	ModbusCalcCRC@temp+1,c
 15107                           
 15108                           ;ModbusRtu.c: 764: for (uint8_t i = 0; i < u8length; i++)
 15109  0036E4  0E00               	movlw	0
 15110  0036E6  6E2A               	movwf	ModbusCalcCRC@i,c
 15111  0036E8  D02C               	goto	l6859
 15112  0036EA                     l6837:
 15113  0036EA  FFFF               	dw	65535	; assembler added errata NOP
 15114                           
 15115                           ;ModbusRtu.c: 765: {
 15116                           ;ModbusRtu.c: 766: temp = temp ^ _au8Buffer[i];
 15117  0036EC  502A               	movf	ModbusCalcCRC@i,w,c
 15118  0036EE  0D01               	mullw	1
 15119  0036F0  0E2A               	movlw	low __au8Buffer
 15120  0036F2  24F3               	addwf	prodl,w,c
 15121  0036F4  6ED9               	movwf	fsr2l,c
 15122  0036F6  0E01               	movlw	high __au8Buffer
 15123  0036F8  20F4               	addwfc	prodh,w,c
 15124  0036FA  6EDA               	movwf	fsr2h,c
 15125  0036FC  50DF               	movf	indf2,w,c
 15126  0036FE  6E23               	movwf	??_ModbusCalcCRC& (0+255),c
 15127  003700  502C               	movf	ModbusCalcCRC@temp,w,c
 15128  003702  1823               	xorwf	??_ModbusCalcCRC,w,c
 15129  003704  6E2C               	movwf	ModbusCalcCRC@temp,c
 15130  003706  502D               	movf	ModbusCalcCRC@temp+1,w,c
 15131  003708  6E2D               	movwf	ModbusCalcCRC@temp+1,c
 15132                           
 15133                           ;ModbusRtu.c: 767: for (uint8_t j = 1; j <= 8; j++)
 15134  00370A  0E01               	movlw	1
 15135  00370C  6E2B               	movwf	ModbusCalcCRC@j,c
 15136  00370E                     l6841:
 15137  00370E  FFFF               	dw	65535	; assembler added errata NOP
 15138  003710  0E08               	movlw	8
 15139  003712  642B               	cpfsgt	ModbusCalcCRC@j,c
 15140  003714  D001               	goto	l6845
 15141  003716  D013               	goto	l6857
 15142  003718                     l6845:
 15143  003718  FFFF               	dw	65535	; assembler added errata NOP
 15144                           
 15145                           ;ModbusRtu.c: 768: {
 15146                           ;ModbusRtu.c: 769: flag = temp & 0x0001;
 15147  00371A  0E01               	movlw	1
 15148  00371C  142C               	andwf	ModbusCalcCRC@temp,w,c
 15149  00371E  6E28               	movwf	ModbusCalcCRC@flag,c
 15150  003720  6A29               	clrf	ModbusCalcCRC@flag+1,c
 15151                           
 15152                           ;ModbusRtu.c: 770: temp >>= 1;
 15153  003722  90D8               	bcf	status,0,c
 15154  003724  322D               	rrcf	ModbusCalcCRC@temp+1,f,c
 15155  003726  322C               	rrcf	ModbusCalcCRC@temp,f,c
 15156                           
 15157                           ;ModbusRtu.c: 771: if (flag)
 15158  003728  5028               	movf	ModbusCalcCRC@flag,w,c
 15159  00372A  1029               	iorwf	ModbusCalcCRC@flag+1,w,c
 15160  00372C  B4D8               	btfsc	status,2,c
 15161  00372E  D004               	goto	l6853
 15162                           
 15163                           ;ModbusRtu.c: 772: temp ^= 0xA001;
 15164  003730  0E01               	movlw	1
 15165  003732  1A2C               	xorwf	ModbusCalcCRC@temp,f,c
 15166  003734  0EA0               	movlw	160
 15167  003736  1A2D               	xorwf	ModbusCalcCRC@temp+1,f,c
 15168  003738                     l6853:
 15169  003738  FFFF               	dw	65535	; assembler added errata NOP
 15170  00373A  2A2B               	incf	ModbusCalcCRC@j,f,c
 15171  00373C  D7E8               	goto	l6841
 15172  00373E                     l6857:
 15173  00373E  FFFF               	dw	65535	; assembler added errata NOP
 15174  003740  2A2A               	incf	ModbusCalcCRC@i,f,c
 15175  003742                     l6859:
 15176  003742  FFFF               	dw	65535	; assembler added errata NOP
 15177  003744  5025               	movf	ModbusCalcCRC@u8length,w,c
 15178  003746  5C2A               	subwf	ModbusCalcCRC@i,w,c
 15179  003748  A0D8               	btfss	status,0,c
 15180  00374A  D7CF               	goto	l6837
 15181                           
 15182                           ;ModbusRtu.c: 773: }
 15183                           ;ModbusRtu.c: 774: }
 15184                           ;ModbusRtu.c: 776: temp2 = temp >> 8;
 15185  00374C  502D               	movf	ModbusCalcCRC@temp+1,w,c
 15186  00374E  6E26               	movwf	ModbusCalcCRC@temp2,c
 15187  003750  6A27               	clrf	ModbusCalcCRC@temp2+1,c
 15188                           
 15189                           ;ModbusRtu.c: 777: temp = (temp << 8) | temp2;
 15190  003752  502C               	movf	ModbusCalcCRC@temp,w,c
 15191  003754  6E24               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 15192  003756  6A23               	clrf	??_ModbusCalcCRC& (0+255),c
 15193  003758  5026               	movf	ModbusCalcCRC@temp2,w,c
 15194  00375A  1023               	iorwf	??_ModbusCalcCRC,w,c
 15195  00375C  6E2C               	movwf	ModbusCalcCRC@temp,c
 15196  00375E  5027               	movf	ModbusCalcCRC@temp2+1,w,c
 15197  003760  1024               	iorwf	??_ModbusCalcCRC+1,w,c
 15198  003762  6E2D               	movwf	ModbusCalcCRC@temp+1,c
 15199                           
 15200                           ;ModbusRtu.c: 781: return temp;
 15201  003764  C02C  F021         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 15202  003768  C02D  F022         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 15203  00376C  0012               	return		;funcret
 15204  00376E  FFFF               	dw	65535	; errata NOP
 15205  003770                     __end_of_ModbusCalcCRC:
 15206                           	opt stack 0
 15207                           tblptru	equ	0xFF8
 15208                           tblptrh	equ	0xFF7
 15209                           tblptrl	equ	0xFF6
 15210                           tablat	equ	0xFF5
 15211                           prodh	equ	0xFF4
 15212                           prodl	equ	0xFF3
 15213                           intcon	equ	0xFF2
 15214                           postinc0	equ	0xFEE
 15215                           wreg	equ	0xFE8
 15216                           indf1	equ	0xFE7
 15217                           postinc1	equ	0xFE6
 15218                           postdec1	equ	0xFE5
 15219                           fsr1h	equ	0xFE2
 15220                           fsr1l	equ	0xFE1
 15221                           indf2	equ	0xFDF
 15222                           postinc2	equ	0xFDE
 15223                           postdec2	equ	0xFDD
 15224                           plusw2	equ	0xFDB
 15225                           fsr2h	equ	0xFDA
 15226                           fsr2l	equ	0xFD9
 15227                           status	equ	0xFD8
 15228                           
 15229 ;; *************** function _ModbusGetRxBufferHeader *****************
 15230 ;; Defined at:
 15231 ;;		line 593 in file "ModbusRtu.c"
 15232 ;; Parameters:    Size  Location     Type
 15233 ;;		None
 15234 ;; Auto vars:     Size  Location     Type
 15235 ;;  i               1   34[COMRAM] unsigned char 
 15236 ;; Return value:  Size  Location     Type
 15237 ;;                  1    wreg      unsigned char 
 15238 ;; Registers used:
 15239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15240 ;; Tracked objects:
 15241 ;;		On entry : 0/0
 15242 ;;		On exit  : 0/0
 15243 ;;		Unchanged: 0/0
 15244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15245 ;;      Params:         0       0       0       0       0       0       0
 15246 ;;      Locals:         1       0       0       0       0       0       0
 15247 ;;      Temps:          1       0       0       0       0       0       0
 15248 ;;      Totals:         2       0       0       0       0       0       0
 15249 ;;Total ram usage:        2 bytes
 15250 ;; Hardware stack levels used:    1
 15251 ;; Hardware stack levels required when called:    3
 15252 ;; This function calls:
 15253 ;;		_PortAvailable
 15254 ;;		_PortRead
 15255 ;; This function is called by:
 15256 ;;		_ModbusPoll
 15257 ;; This function uses a non-reentrant model
 15258 ;;
 15259                           
 15260                           	psect	text72
 15261  003D82                     __ptext72:
 15262                           	opt stack 0
 15263  003D82                     _ModbusGetRxBufferHeader:
 15264                           	opt stack 26
 15265                           
 15266                           ;incstack = 0
 15267  003D82  FFFF               	dw	65535
 15268                           
 15269                           ;ModbusRtu.c: 595: _u8BufferSize = 0;
 15270  003D84  0E00               	movlw	0
 15271  003D86  6E53               	movwf	__u8BufferSize,c
 15272                           
 15273                           ;ModbusRtu.c: 596: for(uint8_t i = 0; i < 4; i++)
 15274  003D88  0E00               	movlw	0
 15275  003D8A  6E23               	movwf	ModbusGetRxBufferHeader@i,c
 15276  003D8C                     l7347:
 15277  003D8C  FFFF               	dw	65535	; assembler added errata NOP
 15278  003D8E  0E03               	movlw	3
 15279  003D90  6423               	cpfsgt	ModbusGetRxBufferHeader@i,c
 15280  003D92  D001               	goto	l7351
 15281  003D94  D019               	goto	l7365
 15282  003D96                     l7351:
 15283  003D96  FFFF               	dw	65535	; assembler added errata NOP
 15284                           
 15285                           ;ModbusRtu.c: 597: {
 15286                           ;ModbusRtu.c: 598: if(!PortAvailable())
 15287  003D98  ECA7  F001         	call	_PortAvailable	;wreg free
 15288  003D9C  0900               	iorlw	0
 15289  003D9E  A4D8               	btfss	status,2,c
 15290  003DA0  D002               	goto	l7357
 15291                           
 15292                           ;ModbusRtu.c: 599: return ERR_EXCEPTION;
 15293  003DA2  0EFB               	movlw	251
 15294  003DA4  D013               	goto	l829
 15295  003DA6                     l7357:
 15296  003DA6  FFFF               	dw	65535	; assembler added errata NOP
 15297                           
 15298                           ;ModbusRtu.c: 600: _au8Buffer[ _u8BufferSize ] = PortRead();
 15299  003DA8  EC55  F01F         	call	_PortRead	;wreg free
 15300  003DAC  6E22               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 15301  003DAE  5053               	movf	__u8BufferSize,w,c
 15302  003DB0  0D01               	mullw	1
 15303  003DB2  0E2A               	movlw	low __au8Buffer
 15304  003DB4  24F3               	addwf	prodl,w,c
 15305  003DB6  6ED9               	movwf	fsr2l,c
 15306  003DB8  0E01               	movlw	high __au8Buffer
 15307  003DBA  20F4               	addwfc	prodh,w,c
 15308  003DBC  6EDA               	movwf	fsr2h,c
 15309  003DBE  C022  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 15310                           
 15311                           ;ModbusRtu.c: 601: _u8BufferSize++;
 15312  003DC2  2A53               	incf	__u8BufferSize,f,c
 15313  003DC4  2A23               	incf	ModbusGetRxBufferHeader@i,f,c
 15314  003DC6  D7E2               	goto	l7347
 15315  003DC8                     l7365:
 15316  003DC8  FFFF               	dw	65535	; assembler added errata NOP
 15317                           
 15318                           ;ModbusRtu.c: 602: }
 15319                           ;ModbusRtu.c: 603: return _u8BufferSize;
 15320  003DCA  5053               	movf	__u8BufferSize,w,c
 15321  003DCC                     l829:
 15322  003DCC  FFFF               	dw	65535	; assembler added errata NOP
 15323  003DCE  0012               	return		;funcret
 15324  003DD0  FFFF               	dw	65535	; errata NOP
 15325  003DD2                     __end_of_ModbusGetRxBufferHeader:
 15326                           	opt stack 0
 15327                           tblptru	equ	0xFF8
 15328                           tblptrh	equ	0xFF7
 15329                           tblptrl	equ	0xFF6
 15330                           tablat	equ	0xFF5
 15331                           prodh	equ	0xFF4
 15332                           prodl	equ	0xFF3
 15333                           intcon	equ	0xFF2
 15334                           postinc0	equ	0xFEE
 15335                           wreg	equ	0xFE8
 15336                           indf1	equ	0xFE7
 15337                           postinc1	equ	0xFE6
 15338                           postdec1	equ	0xFE5
 15339                           fsr1h	equ	0xFE2
 15340                           fsr1l	equ	0xFE1
 15341                           indf2	equ	0xFDF
 15342                           postinc2	equ	0xFDE
 15343                           postdec2	equ	0xFDD
 15344                           plusw2	equ	0xFDB
 15345                           fsr2h	equ	0xFDA
 15346                           fsr2l	equ	0xFD9
 15347                           status	equ	0xFD8
 15348                           
 15349 ;; *************** function _ModbusGetRxBuffer *****************
 15350 ;; Defined at:
 15351 ;;		line 613 in file "ModbusRtu.c"
 15352 ;; Parameters:    Size  Location     Type
 15353 ;;		None
 15354 ;; Auto vars:     Size  Location     Type
 15355 ;;  bBuffOverflo    1   34[COMRAM] unsigned char 
 15356 ;; Return value:  Size  Location     Type
 15357 ;;                  1    wreg      unsigned char 
 15358 ;; Registers used:
 15359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15360 ;; Tracked objects:
 15361 ;;		On entry : 0/0
 15362 ;;		On exit  : 0/0
 15363 ;;		Unchanged: 0/0
 15364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15365 ;;      Params:         0       0       0       0       0       0       0
 15366 ;;      Locals:         1       0       0       0       0       0       0
 15367 ;;      Temps:          1       0       0       0       0       0       0
 15368 ;;      Totals:         2       0       0       0       0       0       0
 15369 ;;Total ram usage:        2 bytes
 15370 ;; Hardware stack levels used:    1
 15371 ;; Hardware stack levels required when called:    3
 15372 ;; This function calls:
 15373 ;;		_PortAvailable
 15374 ;;		_PortRead
 15375 ;; This function is called by:
 15376 ;;		_ModbusPoll
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           	psect	text73
 15381  003B14                     __ptext73:
 15382                           	opt stack 0
 15383  003B14                     _ModbusGetRxBuffer:
 15384                           	opt stack 26
 15385                           
 15386                           ;incstack = 0
 15387  003B14  FFFF               	dw	65535
 15388                           
 15389                           ;ModbusRtu.c: 615: bool bBuffOverflow = 0;
 15390  003B16  0E00               	movlw	0
 15391  003B18  6E23               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 15392                           
 15393                           ;ModbusRtu.c: 620: _u8BufferSize = 4;
 15394  003B1A  0E04               	movlw	4
 15395  003B1C  6E53               	movwf	__u8BufferSize,c
 15396                           
 15397                           ;ModbusRtu.c: 622: while (PortAvailable())
 15398  003B1E  D014               	goto	l7379
 15399  003B20                     l7371:
 15400  003B20  FFFF               	dw	65535	; assembler added errata NOP
 15401                           
 15402                           ;ModbusRtu.c: 623: {
 15403                           ;ModbusRtu.c: 624: _au8Buffer[ _u8BufferSize ] = PortRead();
 15404  003B22  EC55  F01F         	call	_PortRead	;wreg free
 15405  003B26  6E22               	movwf	??_ModbusGetRxBuffer& (0+255),c
 15406  003B28  5053               	movf	__u8BufferSize,w,c
 15407  003B2A  0D01               	mullw	1
 15408  003B2C  0E2A               	movlw	low __au8Buffer
 15409  003B2E  24F3               	addwf	prodl,w,c
 15410  003B30  6ED9               	movwf	fsr2l,c
 15411  003B32  0E01               	movlw	high __au8Buffer
 15412  003B34  20F4               	addwfc	prodh,w,c
 15413  003B36  6EDA               	movwf	fsr2h,c
 15414  003B38  C022  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 15415                           
 15416                           ;ModbusRtu.c: 625: _u8BufferSize++;
 15417  003B3C  2A53               	incf	__u8BufferSize,f,c
 15418                           
 15419                           ;ModbusRtu.c: 626: if (_u8BufferSize >= 140)
 15420  003B3E  0E8B               	movlw	139
 15421  003B40  6453               	cpfsgt	__u8BufferSize,c
 15422  003B42  D002               	goto	l7379
 15423                           
 15424                           ;ModbusRtu.c: 627: bBuffOverflow = 1;
 15425  003B44  0E01               	movlw	1
 15426  003B46  6E23               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 15427  003B48                     l7379:
 15428  003B48  FFFF               	dw	65535	; assembler added errata NOP
 15429  003B4A  ECA7  F001         	call	_PortAvailable	;wreg free
 15430  003B4E  0900               	iorlw	0
 15431  003B50  A4D8               	btfss	status,2,c
 15432  003B52  D7E6               	goto	l7371
 15433                           
 15434                           ;ModbusRtu.c: 628: }
 15435                           ;ModbusRtu.c: 629: _u16InCnt++;
 15436  003B54  0101               	movlb	1	; () banked
 15437  003B56  4B24               	infsnz	__u16InCnt& (0+255),f,b
 15438  003B58  2B25               	incf	(__u16InCnt+1)& (0+255),f,b
 15439                           
 15440                           ; BSR set to: 1
 15441                           ;ModbusRtu.c: 630: if (bBuffOverflow)
 15442  003B5A  5023               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 15443  003B5C  B4D8               	btfsc	status,2,c
 15444  003B5E  D005               	goto	l7391
 15445                           
 15446                           ; BSR set to: 1
 15447                           ;ModbusRtu.c: 631: {
 15448                           ;ModbusRtu.c: 632: _u16errCnt++;
 15449  003B60  0101               	movlb	1	; () banked
 15450  003B62  4B28               	infsnz	__u16errCnt& (0+255),f,b
 15451  003B64  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
 15452                           
 15453                           ; BSR set to: 1
 15454                           ;ModbusRtu.c: 633: return ERR_BUFF_OVERFLOW;
 15455  003B66  0EFD               	movlw	253
 15456                           
 15457                           ; BSR set to: 1
 15458  003B68  D002               	goto	l837
 15459  003B6A                     l7391:
 15460  003B6A  FFFF               	dw	65535	; assembler added errata NOP
 15461                           
 15462                           ; BSR set to: 1
 15463                           ;ModbusRtu.c: 634: }
 15464                           ;ModbusRtu.c: 635: return _u8BufferSize;
 15465  003B6C  5053               	movf	__u8BufferSize,w,c
 15466  003B6E                     l837:
 15467  003B6E  FFFF               	dw	65535	; assembler added errata NOP
 15468                           
 15469                           ; BSR set to: 1
 15470  003B70  0012               	return		;funcret
 15471  003B72  FFFF               	dw	65535	; errata NOP
 15472  003B74                     __end_of_ModbusGetRxBuffer:
 15473                           	opt stack 0
 15474                           tblptru	equ	0xFF8
 15475                           tblptrh	equ	0xFF7
 15476                           tblptrl	equ	0xFF6
 15477                           tablat	equ	0xFF5
 15478                           prodh	equ	0xFF4
 15479                           prodl	equ	0xFF3
 15480                           intcon	equ	0xFF2
 15481                           postinc0	equ	0xFEE
 15482                           wreg	equ	0xFE8
 15483                           indf1	equ	0xFE7
 15484                           postinc1	equ	0xFE6
 15485                           postdec1	equ	0xFE5
 15486                           fsr1h	equ	0xFE2
 15487                           fsr1l	equ	0xFE1
 15488                           indf2	equ	0xFDF
 15489                           postinc2	equ	0xFDE
 15490                           postdec2	equ	0xFDD
 15491                           plusw2	equ	0xFDB
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _PortRead *****************
 15497 ;; Defined at:
 15498 ;;		line 57 in file "interrupts.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;		None
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  ret             1   32[COMRAM] unsigned char 
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  1    wreg      unsigned char 
 15505 ;; Registers used:
 15506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15512 ;;      Params:         0       0       0       0       0       0       0
 15513 ;;      Locals:         1       0       0       0       0       0       0
 15514 ;;      Temps:          0       0       0       0       0       0       0
 15515 ;;      Totals:         1       0       0       0       0       0       0
 15516 ;;Total ram usage:        1 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    2
 15519 ;; This function calls:
 15520 ;;		Nothing
 15521 ;; This function is called by:
 15522 ;;		_ModbusGetRxBufferHeader
 15523 ;;		_ModbusGetRxBuffer
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           	psect	text74
 15528  003EAA                     __ptext74:
 15529                           	opt stack 0
 15530  003EAA                     _PortRead:
 15531                           	opt stack 26
 15532                           
 15533                           ; BSR set to: 1
 15534                           ;incstack = 0
 15535  003EAA  FFFF               	dw	65535
 15536                           
 15537                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 15538  003EAC  9EF2               	bcf	intcon,7,c	;volatile
 15539                           
 15540                           ;interrupts.c: 60: if(UartBufferLen > 0)
 15541  003EAE  5043               	movf	_UartBufferLen,w,c	;volatile
 15542  003EB0  B4D8               	btfsc	status,2,c
 15543  003EB2  D017               	goto	l63
 15544                           
 15545                           ;interrupts.c: 61: {
 15546                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 15547  003EB4  5044               	movf	_UartBufferTail,w,c	;volatile
 15548  003EB6  0D01               	mullw	1
 15549  003EB8  0E00               	movlw	low _UartRingBuffer
 15550  003EBA  24F3               	addwf	prodl,w,c
 15551  003EBC  6ED9               	movwf	fsr2l,c
 15552  003EBE  0E02               	movlw	high _UartRingBuffer
 15553  003EC0  20F4               	addwfc	prodh,w,c
 15554  003EC2  6EDA               	movwf	fsr2h,c
 15555  003EC4  50DF               	movf	indf2,w,c
 15556  003EC6  6E21               	movwf	PortRead@ret,c
 15557                           
 15558                           ;interrupts.c: 64: UartBufferLen--;
 15559  003EC8  0643               	decf	_UartBufferLen,f,c	;volatile
 15560                           
 15561                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 15562  003ECA  2844               	incf	_UartBufferTail,w,c	;volatile
 15563  003ECC  A4D8               	btfss	status,2,c
 15564  003ECE  D003               	goto	l6987
 15565                           
 15566                           ;interrupts.c: 66: UartBufferTail = 0;
 15567  003ED0  0E00               	movlw	0
 15568  003ED2  6E44               	movwf	_UartBufferTail,c	;volatile
 15569  003ED4  D002               	goto	l6989
 15570  003ED6                     l6987:
 15571  003ED6  FFFF               	dw	65535	; assembler added errata NOP
 15572                           
 15573                           ;interrupts.c: 67: else
 15574                           ;interrupts.c: 68: UartBufferTail++;
 15575  003ED8  2A44               	incf	_UartBufferTail,f,c	;volatile
 15576  003EDA                     l6989:
 15577  003EDA  FFFF               	dw	65535	; assembler added errata NOP
 15578                           
 15579                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 15580  003EDC  8EF2               	bsf	intcon,7,c	;volatile
 15581                           
 15582                           ;interrupts.c: 70: return ret;
 15583  003EDE  5021               	movf	PortRead@ret,w,c
 15584  003EE0  D003               	goto	l66
 15585  003EE2                     l63:
 15586  003EE2  FFFF               	dw	65535	; assembler added errata NOP
 15587                           
 15588                           ;interrupts.c: 71: }
 15589                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 15590  003EE4  8EF2               	bsf	intcon,7,c	;volatile
 15591                           
 15592                           ;interrupts.c: 73: return 0;
 15593  003EE6  0E00               	movlw	0
 15594  003EE8                     l66:
 15595  003EE8  FFFF               	dw	65535	; assembler added errata NOP
 15596  003EEA  0012               	return		;funcret
 15597  003EEC  FFFF               	dw	65535	; errata NOP
 15598  003EEE                     __end_of_PortRead:
 15599                           	opt stack 0
 15600                           tblptru	equ	0xFF8
 15601                           tblptrh	equ	0xFF7
 15602                           tblptrl	equ	0xFF6
 15603                           tablat	equ	0xFF5
 15604                           prodh	equ	0xFF4
 15605                           prodl	equ	0xFF3
 15606                           intcon	equ	0xFF2
 15607                           postinc0	equ	0xFEE
 15608                           wreg	equ	0xFE8
 15609                           indf1	equ	0xFE7
 15610                           postinc1	equ	0xFE6
 15611                           postdec1	equ	0xFE5
 15612                           fsr1h	equ	0xFE2
 15613                           fsr1l	equ	0xFE1
 15614                           indf2	equ	0xFDF
 15615                           postinc2	equ	0xFDE
 15616                           postdec2	equ	0xFDD
 15617                           plusw2	equ	0xFDB
 15618                           fsr2h	equ	0xFDA
 15619                           fsr2l	equ	0xFD9
 15620                           status	equ	0xFD8
 15621                           
 15622 ;; *************** function _PortAvailable *****************
 15623 ;; Defined at:
 15624 ;;		line 52 in file "interrupts.c"
 15625 ;; Parameters:    Size  Location     Type
 15626 ;;		None
 15627 ;; Auto vars:     Size  Location     Type
 15628 ;;		None
 15629 ;; Return value:  Size  Location     Type
 15630 ;;                  1    wreg      unsigned char 
 15631 ;; Registers used:
 15632 ;;		wreg, status,2
 15633 ;; Tracked objects:
 15634 ;;		On entry : 0/0
 15635 ;;		On exit  : 0/0
 15636 ;;		Unchanged: 0/0
 15637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15638 ;;      Params:         0       0       0       0       0       0       0
 15639 ;;      Locals:         0       0       0       0       0       0       0
 15640 ;;      Temps:          0       0       0       0       0       0       0
 15641 ;;      Totals:         0       0       0       0       0       0       0
 15642 ;;Total ram usage:        0 bytes
 15643 ;; Hardware stack levels used:    1
 15644 ;; Hardware stack levels required when called:    2
 15645 ;; This function calls:
 15646 ;;		Nothing
 15647 ;; This function is called by:
 15648 ;;		_ModbusPoll
 15649 ;;		_ModbusGetRxBufferHeader
 15650 ;;		_ModbusGetRxBuffer
 15651 ;; This function uses a non-reentrant model
 15652 ;;
 15653                           
 15654                           	psect	text75
 15655  00034E                     __ptext75:
 15656                           	opt stack 0
 15657  00034E                     _PortAvailable:
 15658                           	opt stack 27
 15659                           
 15660                           ;incstack = 0
 15661  00034E  FFFF               	dw	65535
 15662                           
 15663                           ;interrupts.c: 54: return UartBufferLen;
 15664  000350  5043               	movf	_UartBufferLen,w,c	;volatile
 15665  000352  0012               	return		;funcret
 15666  000354  FFFF               	dw	65535	; errata NOP
 15667  000356                     __end_of_PortAvailable:
 15668                           	opt stack 0
 15669                           tblptru	equ	0xFF8
 15670                           tblptrh	equ	0xFF7
 15671                           tblptrl	equ	0xFF6
 15672                           tablat	equ	0xFF5
 15673                           prodh	equ	0xFF4
 15674                           prodl	equ	0xFF3
 15675                           intcon	equ	0xFF2
 15676                           postinc0	equ	0xFEE
 15677                           wreg	equ	0xFE8
 15678                           indf1	equ	0xFE7
 15679                           postinc1	equ	0xFE6
 15680                           postdec1	equ	0xFE5
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           plusw2	equ	0xFDB
 15687                           fsr2h	equ	0xFDA
 15688                           fsr2l	equ	0xFD9
 15689                           status	equ	0xFD8
 15690                           
 15691 ;; *************** function _ModbusBuildException *****************
 15692 ;; Defined at:
 15693 ;;		line 954 in file "ModbusRtu.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  u8exception     1    wreg     unsigned char 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  u8exception     1   32[COMRAM] unsigned char 
 15698 ;;  u8func          1   33[COMRAM] unsigned char 
 15699 ;; Return value:  Size  Location     Type
 15700 ;;                  1    wreg      void 
 15701 ;; Registers used:
 15702 ;;		wreg, status,2, status,0
 15703 ;; Tracked objects:
 15704 ;;		On entry : 0/0
 15705 ;;		On exit  : 0/0
 15706 ;;		Unchanged: 0/0
 15707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15708 ;;      Params:         0       0       0       0       0       0       0
 15709 ;;      Locals:         2       0       0       0       0       0       0
 15710 ;;      Temps:          0       0       0       0       0       0       0
 15711 ;;      Totals:         2       0       0       0       0       0       0
 15712 ;;Total ram usage:        2 bytes
 15713 ;; Hardware stack levels used:    1
 15714 ;; Hardware stack levels required when called:    2
 15715 ;; This function calls:
 15716 ;;		Nothing
 15717 ;; This function is called by:
 15718 ;;		_ModbusPoll
 15719 ;; This function uses a non-reentrant model
 15720 ;;
 15721                           
 15722                           	psect	text76
 15723  0001F0                     __ptext76:
 15724                           	opt stack 0
 15725  0001F0                     _ModbusBuildException:
 15726                           	opt stack 27
 15727                           
 15728                           ;incstack = 0
 15729  0001F0  FFFF               	dw	65535
 15730                           
 15731                           ;ModbusBuildException@u8exception stored from wreg
 15732  0001F2  6E21               	movwf	ModbusBuildException@u8exception,c
 15733                           
 15734                           ;ModbusRtu.c: 956: uint8_t u8func = _au8Buffer[ FUNC ];
 15735  0001F4  C12B  F022         	movff	__au8Buffer+1,ModbusBuildException@u8func
 15736                           
 15737                           ;ModbusRtu.c: 958: _au8Buffer[ ID ] = _u8id;
 15738  0001F8  C0F0  F12A         	movff	__u8id,__au8Buffer
 15739                           
 15740                           ;ModbusRtu.c: 959: _au8Buffer[ FUNC ] = u8func + 0x80;
 15741  0001FC  5022               	movf	ModbusBuildException@u8func,w,c
 15742  0001FE  0F80               	addlw	128
 15743  000200  0101               	movlb	1	; () banked
 15744  000202  6F2B               	movwf	(__au8Buffer+1)& (0+255),b
 15745                           
 15746                           ; BSR set to: 1
 15747                           ;ModbusRtu.c: 960: _au8Buffer[ 2 ] = u8exception;
 15748  000204  C021  F12C         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 15749                           
 15750                           ; BSR set to: 1
 15751                           ;ModbusRtu.c: 961: _u8BufferSize = EXCEPTION_SIZE;
 15752  000208  0E03               	movlw	3
 15753  00020A  6E53               	movwf	__u8BufferSize,c
 15754                           
 15755                           ; BSR set to: 1
 15756  00020C  0012               	return		;funcret
 15757  00020E  FFFF               	dw	65535	; errata NOP
 15758  000210                     __end_of_ModbusBuildException:
 15759                           	opt stack 0
 15760                           tblptru	equ	0xFF8
 15761                           tblptrh	equ	0xFF7
 15762                           tblptrl	equ	0xFF6
 15763                           tablat	equ	0xFF5
 15764                           prodh	equ	0xFF4
 15765                           prodl	equ	0xFF3
 15766                           intcon	equ	0xFF2
 15767                           postinc0	equ	0xFEE
 15768                           wreg	equ	0xFE8
 15769                           indf1	equ	0xFE7
 15770                           postinc1	equ	0xFE6
 15771                           postdec1	equ	0xFE5
 15772                           fsr1h	equ	0xFE2
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           plusw2	equ	0xFDB
 15778                           fsr2h	equ	0xFDA
 15779                           fsr2l	equ	0xFD9
 15780                           status	equ	0xFD8
 15781                           
 15782 ;; *************** function _InitApp *****************
 15783 ;; Defined at:
 15784 ;;		line 66 in file "user.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;		None
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  i               1   32[COMRAM] unsigned char 
 15789 ;; Return value:  Size  Location     Type
 15790 ;;                  1    wreg      void 
 15791 ;; Registers used:
 15792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15798 ;;      Params:         0       0       0       0       0       0       0
 15799 ;;      Locals:         1       0       0       0       0       0       0
 15800 ;;      Temps:          0       0       0       0       0       0       0
 15801 ;;      Totals:         1       0       0       0       0       0       0
 15802 ;;Total ram usage:        1 bytes
 15803 ;; Hardware stack levels used:    1
 15804 ;; Hardware stack levels required when called:    3
 15805 ;; This function calls:
 15806 ;;		_InitUartBuffer
 15807 ;;		_PortBegin
 15808 ;; This function is called by:
 15809 ;;		_main
 15810 ;; This function uses a non-reentrant model
 15811 ;;
 15812                           
 15813                           	psect	text77
 15814  003646                     __ptext77:
 15815                           	opt stack 0
 15816  003646                     _InitApp:
 15817                           	opt stack 27
 15818                           
 15819                           ; BSR set to: 1
 15820                           ;incstack = 0
 15821  003646  FFFF               	dw	65535
 15822                           
 15823                           ;user.c: 77: INTCONbits.PEIE = 1;
 15824  003648  8CF2               	bsf	intcon,6,c	;volatile
 15825                           
 15826                           ;user.c: 78: (INTCONbits.GIE = 1);
 15827  00364A  8EF2               	bsf	intcon,7,c	;volatile
 15828                           
 15829                           ;user.c: 79: RCONbits.IPEN = 1;
 15830  00364C  8ED0               	bsf	4048,7,c	;volatile
 15831                           
 15832                           ;user.c: 84: T1CONbits.RD16 = 1;
 15833  00364E  8ECD               	bsf	4045,7,c	;volatile
 15834                           
 15835                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 15836  003650  94CD               	bcf	4045,2,c	;volatile
 15837                           
 15838                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 15839  003652  92CD               	bcf	4045,1,c	;volatile
 15840                           
 15841                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 15842  003654  0ECF               	movlw	-49
 15843  003656  16CD               	andwf	4045,f,c	;volatile
 15844                           
 15845                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 15846  003658  809D               	bsf	3997,0,c	;volatile
 15847                           
 15848                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 15849  00365A  809F               	bsf	3999,0,c	;volatile
 15850                           
 15851                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 15852  00365C  0EF6               	movlw	246
 15853  00365E  6ECF               	movwf	4047,c	;volatile
 15854  003660  0E3C               	movlw	60
 15855  003662  6ECE               	movwf	4046,c	;volatile
 15856                           
 15857                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 15858  003664  909E               	bcf	3998,0,c	;volatile
 15859                           
 15860                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 15861  003666  80CD               	bsf	4045,0,c	;volatile
 15862                           
 15863                           ;user.c: 103: T0CONbits.T08BIT = 0;
 15864  003668  9CD5               	bcf	4053,6,c	;volatile
 15865                           
 15866                           ;user.c: 104: T0CONbits.T0CS = 0;
 15867  00366A  9AD5               	bcf	4053,5,c	;volatile
 15868                           
 15869                           ;user.c: 106: T0CONbits.PSA = 0;
 15870  00366C  96D5               	bcf	4053,3,c	;volatile
 15871                           
 15872                           ;user.c: 117: T0CONbits.T0PS = 7;
 15873  00366E  80D5               	bsf	4053,0,c	;volatile
 15874  003670  82D5               	bsf	4053,1,c	;volatile
 15875  003672  84D5               	bsf	4053,2,c	;volatile
 15876                           
 15877                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 15878  003674  8AF2               	bsf	intcon,5,c	;volatile
 15879                           
 15880                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 15881  003676  84F1               	bsf	intcon2,2,c	;volatile
 15882                           
 15883                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 15884  003678  0E1B               	movlw	27
 15885  00367A  6ED7               	movwf	4055,c	;volatile
 15886  00367C  0E28               	movlw	40
 15887  00367E  6ED6               	movwf	4054,c	;volatile
 15888                           
 15889                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 15890  003680  94F2               	bcf	intcon,2,c	;volatile
 15891                           
 15892                           ;user.c: 133: InitUartBuffer();
 15893  003682  EC5F  F001         	call	_InitUartBuffer	;wreg free
 15894                           
 15895                           ;user.c: 135: PortBegin();
 15896  003686  EC17  F001         	call	_PortBegin	;wreg free
 15897                           
 15898                           ;user.c: 136: PIE1bits.RCIE = 1;
 15899  00368A  8A9D               	bsf	3997,5,c	;volatile
 15900                           
 15901                           ;user.c: 138: IPR1bits.RCIP = 0;
 15902  00368C  9A9F               	bcf	3999,5,c	;volatile
 15903                           
 15904                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 15905  00368E  0E00               	movlw	0
 15906  003690  6E21               	movwf	InitApp@i,c
 15907  003692                     l8361:
 15908  003692  FFFF               	dw	65535	; assembler added errata NOP
 15909  003694  0E0E               	movlw	14
 15910  003696  6421               	cpfsgt	InitApp@i,c
 15911  003698  D001               	goto	l8365
 15912  00369A  D00F               	goto	l8371
 15913  00369C                     l8365:
 15914  00369C  FFFF               	dw	65535	; assembler added errata NOP
 15915                           
 15916                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 15917  00369E  5021               	movf	InitApp@i,w,c
 15918  0036A0  0D02               	mullw	2
 15919  0036A2  0ED4               	movlw	low __MODBUSInputRegs
 15920  0036A4  24F3               	addwf	prodl,w,c
 15921  0036A6  6ED9               	movwf	fsr2l,c
 15922  0036A8  0E01               	movlw	high __MODBUSInputRegs
 15923  0036AA  20F4               	addwfc	prodh,w,c
 15924  0036AC  6EDA               	movwf	fsr2h,c
 15925  0036AE  0E00               	movlw	0
 15926  0036B0  6EDE               	movwf	postinc2,c
 15927  0036B2  0E00               	movlw	0
 15928  0036B4  6EDD               	movwf	postdec2,c
 15929  0036B6  2A21               	incf	InitApp@i,f,c
 15930  0036B8  D7EC               	goto	l8361
 15931  0036BA                     l8371:
 15932  0036BA  FFFF               	dw	65535	; assembler added errata NOP
 15933                           
 15934                           ;user.c: 149: TRISB = 0;
 15935  0036BC  0E00               	movlw	0
 15936  0036BE  6E93               	movwf	3987,c	;volatile
 15937                           
 15938                           ;user.c: 152: LATAbits.LATA0 = 0;
 15939  0036C0  9089               	bcf	3977,0,c	;volatile
 15940                           
 15941                           ;user.c: 153: LATAbits.LATA1 = 0;
 15942  0036C2  9289               	bcf	3977,1,c	;volatile
 15943                           
 15944                           ;user.c: 154: LATAbits.LATA2 = 0;
 15945  0036C4  9489               	bcf	3977,2,c	;volatile
 15946                           
 15947                           ;user.c: 155: LATAbits.LATA3 = 0;
 15948  0036C6  9689               	bcf	3977,3,c	;volatile
 15949                           
 15950                           ;user.c: 156: TRISAbits.RA0 = 0;
 15951  0036C8  9092               	bcf	3986,0,c	;volatile
 15952                           
 15953                           ;user.c: 157: TRISAbits.RA1 = 0;
 15954  0036CA  9292               	bcf	3986,1,c	;volatile
 15955                           
 15956                           ;user.c: 158: TRISAbits.RA2 = 0;
 15957  0036CC  9492               	bcf	3986,2,c	;volatile
 15958                           
 15959                           ;user.c: 159: TRISAbits.RA3 = 0;
 15960  0036CE  9692               	bcf	3986,3,c	;volatile
 15961                           
 15962                           ;user.c: 161: TRISCbits.RC3 = 1;
 15963  0036D0  8694               	bsf	3988,3,c	;volatile
 15964                           
 15965                           ;user.c: 162: TRISCbits.RC1 = 1;
 15966  0036D2  8294               	bsf	3988,1,c	;volatile
 15967                           
 15968                           ;user.c: 163: TRISCbits.RC0 = 0;
 15969  0036D4  9094               	bcf	3988,0,c	;volatile
 15970                           
 15971                           ;user.c: 165: LATCbits.LATC2 = 0;
 15972  0036D6  948B               	bcf	3979,2,c	;volatile
 15973  0036D8  0012               	return		;funcret
 15974  0036DA  FFFF               	dw	65535	; errata NOP
 15975  0036DC                     __end_of_InitApp:
 15976                           	opt stack 0
 15977                           tblptru	equ	0xFF8
 15978                           tblptrh	equ	0xFF7
 15979                           tblptrl	equ	0xFF6
 15980                           tablat	equ	0xFF5
 15981                           prodh	equ	0xFF4
 15982                           prodl	equ	0xFF3
 15983                           intcon	equ	0xFF2
 15984                           intcon2	equ	0xFF1
 15985                           postinc0	equ	0xFEE
 15986                           wreg	equ	0xFE8
 15987                           indf1	equ	0xFE7
 15988                           postinc1	equ	0xFE6
 15989                           postdec1	equ	0xFE5
 15990                           fsr1h	equ	0xFE2
 15991                           fsr1l	equ	0xFE1
 15992                           indf2	equ	0xFDF
 15993                           postinc2	equ	0xFDE
 15994                           postdec2	equ	0xFDD
 15995                           plusw2	equ	0xFDB
 15996                           fsr2h	equ	0xFDA
 15997                           fsr2l	equ	0xFD9
 15998                           status	equ	0xFD8
 15999                           
 16000 ;; *************** function _PortBegin *****************
 16001 ;; Defined at:
 16002 ;;		line 48 in file "user.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;		None
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;		None
 16007 ;; Return value:  Size  Location     Type
 16008 ;;                  1    wreg      void 
 16009 ;; Registers used:
 16010 ;;		wreg, status,2
 16011 ;; Tracked objects:
 16012 ;;		On entry : 0/0
 16013 ;;		On exit  : 0/0
 16014 ;;		Unchanged: 0/0
 16015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16016 ;;      Params:         0       0       0       0       0       0       0
 16017 ;;      Locals:         0       0       0       0       0       0       0
 16018 ;;      Temps:          0       0       0       0       0       0       0
 16019 ;;      Totals:         0       0       0       0       0       0       0
 16020 ;;Total ram usage:        0 bytes
 16021 ;; Hardware stack levels used:    1
 16022 ;; Hardware stack levels required when called:    2
 16023 ;; This function calls:
 16024 ;;		Nothing
 16025 ;; This function is called by:
 16026 ;;		_InitApp
 16027 ;; This function uses a non-reentrant model
 16028 ;;
 16029                           
 16030                           	psect	text78
 16031  00022E                     __ptext78:
 16032                           	opt stack 0
 16033  00022E                     _PortBegin:
 16034                           	opt stack 27
 16035                           
 16036                           ;incstack = 0
 16037  00022E  FFFF               	dw	65535
 16038                           
 16039                           ;user.c: 50: TXSTA = 0;
 16040  000230  0E00               	movlw	0
 16041  000232  6EAC               	movwf	4012,c	;volatile
 16042                           
 16043                           ;user.c: 51: TXSTAbits.TXEN = 1;
 16044  000234  8AAC               	bsf	4012,5,c	;volatile
 16045                           
 16046                           ;user.c: 52: TXSTAbits.BRGH = 1;
 16047  000236  84AC               	bsf	4012,2,c	;volatile
 16048                           
 16049                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 16050  000238  0E40               	movlw	64
 16051  00023A  6EAF               	movwf	4015,c	;volatile
 16052                           
 16053                           ;user.c: 55: RCSTA = 0;
 16054  00023C  0E00               	movlw	0
 16055  00023E  6EAB               	movwf	4011,c	;volatile
 16056                           
 16057                           ;user.c: 56: RCSTAbits.SPEN = 1;
 16058  000240  8EAB               	bsf	4011,7,c	;volatile
 16059                           
 16060                           ;user.c: 57: RCSTAbits.CREN = 1;
 16061  000242  88AB               	bsf	4011,4,c	;volatile
 16062                           
 16063                           ;user.c: 59: TRISCbits.RC5 = 0;
 16064  000244  9A94               	bcf	3988,5,c	;volatile
 16065                           
 16066                           ;user.c: 60: LATCbits.LATC5 = 0;
 16067  000246  9A8B               	bcf	3979,5,c	;volatile
 16068  000248  0012               	return		;funcret
 16069  00024A  FFFF               	dw	65535	; errata NOP
 16070  00024C                     __end_of_PortBegin:
 16071                           	opt stack 0
 16072                           tblptru	equ	0xFF8
 16073                           tblptrh	equ	0xFF7
 16074                           tblptrl	equ	0xFF6
 16075                           tablat	equ	0xFF5
 16076                           prodh	equ	0xFF4
 16077                           prodl	equ	0xFF3
 16078                           intcon	equ	0xFF2
 16079                           intcon2	equ	0xFF1
 16080                           postinc0	equ	0xFEE
 16081                           wreg	equ	0xFE8
 16082                           indf1	equ	0xFE7
 16083                           postinc1	equ	0xFE6
 16084                           postdec1	equ	0xFE5
 16085                           fsr1h	equ	0xFE2
 16086                           fsr1l	equ	0xFE1
 16087                           indf2	equ	0xFDF
 16088                           postinc2	equ	0xFDE
 16089                           postdec2	equ	0xFDD
 16090                           plusw2	equ	0xFDB
 16091                           fsr2h	equ	0xFDA
 16092                           fsr2l	equ	0xFD9
 16093                           status	equ	0xFD8
 16094                           
 16095 ;; *************** function _InitUartBuffer *****************
 16096 ;; Defined at:
 16097 ;;		line 44 in file "interrupts.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;		None
 16100 ;; Auto vars:     Size  Location     Type
 16101 ;;		None
 16102 ;; Return value:  Size  Location     Type
 16103 ;;                  1    wreg      void 
 16104 ;; Registers used:
 16105 ;;		wreg, status,2
 16106 ;; Tracked objects:
 16107 ;;		On entry : 0/0
 16108 ;;		On exit  : 0/0
 16109 ;;		Unchanged: 0/0
 16110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16111 ;;      Params:         0       0       0       0       0       0       0
 16112 ;;      Locals:         0       0       0       0       0       0       0
 16113 ;;      Temps:          0       0       0       0       0       0       0
 16114 ;;      Totals:         0       0       0       0       0       0       0
 16115 ;;Total ram usage:        0 bytes
 16116 ;; Hardware stack levels used:    1
 16117 ;; Hardware stack levels required when called:    2
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		_PortClearReadBuffer
 16122 ;;		_InitApp
 16123 ;; This function uses a non-reentrant model
 16124 ;;
 16125                           
 16126                           	psect	text79
 16127  0002BE                     __ptext79:
 16128                           	opt stack 0
 16129  0002BE                     _InitUartBuffer:
 16130                           	opt stack 26
 16131                           
 16132                           ;incstack = 0
 16133  0002BE  FFFF               	dw	65535
 16134                           
 16135                           ;interrupts.c: 46: UartBufferHead = 0;
 16136  0002C0  0E00               	movlw	0
 16137  0002C2  6E42               	movwf	_UartBufferHead,c	;volatile
 16138                           
 16139                           ;interrupts.c: 47: UartBufferTail = 0;
 16140  0002C4  0E00               	movlw	0
 16141  0002C6  6E44               	movwf	_UartBufferTail,c	;volatile
 16142                           
 16143                           ;interrupts.c: 48: UartBufferLen = 0;
 16144  0002C8  0E00               	movlw	0
 16145  0002CA  6E43               	movwf	_UartBufferLen,c	;volatile
 16146  0002CC  0012               	return		;funcret
 16147  0002CE  FFFF               	dw	65535	; errata NOP
 16148  0002D0                     __end_of_InitUartBuffer:
 16149                           	opt stack 0
 16150                           tblptru	equ	0xFF8
 16151                           tblptrh	equ	0xFF7
 16152                           tblptrl	equ	0xFF6
 16153                           tablat	equ	0xFF5
 16154                           prodh	equ	0xFF4
 16155                           prodl	equ	0xFF3
 16156                           intcon	equ	0xFF2
 16157                           intcon2	equ	0xFF1
 16158                           postinc0	equ	0xFEE
 16159                           wreg	equ	0xFE8
 16160                           indf1	equ	0xFE7
 16161                           postinc1	equ	0xFE6
 16162                           postdec1	equ	0xFE5
 16163                           fsr1h	equ	0xFE2
 16164                           fsr1l	equ	0xFE1
 16165                           indf2	equ	0xFDF
 16166                           postinc2	equ	0xFDE
 16167                           postdec2	equ	0xFDD
 16168                           plusw2	equ	0xFDB
 16169                           fsr2h	equ	0xFDA
 16170                           fsr2l	equ	0xFD9
 16171                           status	equ	0xFD8
 16172                           
 16173 ;; *************** function _ConfigureOscillator *****************
 16174 ;; Defined at:
 16175 ;;		line 86 in file "system.c"
 16176 ;; Parameters:    Size  Location     Type
 16177 ;;		None
 16178 ;; Auto vars:     Size  Location     Type
 16179 ;;		None
 16180 ;; Return value:  Size  Location     Type
 16181 ;;                  1    wreg      void 
 16182 ;; Registers used:
 16183 ;;		None
 16184 ;; Tracked objects:
 16185 ;;		On entry : 0/0
 16186 ;;		On exit  : 0/0
 16187 ;;		Unchanged: 0/0
 16188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16189 ;;      Params:         0       0       0       0       0       0       0
 16190 ;;      Locals:         0       0       0       0       0       0       0
 16191 ;;      Temps:          0       0       0       0       0       0       0
 16192 ;;      Totals:         0       0       0       0       0       0       0
 16193 ;;Total ram usage:        0 bytes
 16194 ;; Hardware stack levels used:    1
 16195 ;; Hardware stack levels required when called:    2
 16196 ;; This function calls:
 16197 ;;		Nothing
 16198 ;; This function is called by:
 16199 ;;		_main
 16200 ;; This function uses a non-reentrant model
 16201 ;;
 16202                           
 16203                           	psect	text80
 16204  000356                     __ptext80:
 16205                           	opt stack 0
 16206  000356                     _ConfigureOscillator:
 16207                           	opt stack 28
 16208                           
 16209                           ;incstack = 0
 16210  000356  FFFF               	dw	65535
 16211  000358  0012               	return		;funcret
 16212  00035A  FFFF               	dw	65535	; errata NOP
 16213  00035C                     __end_of_ConfigureOscillator:
 16214                           	opt stack 0
 16215                           tblptru	equ	0xFF8
 16216                           tblptrh	equ	0xFF7
 16217                           tblptrl	equ	0xFF6
 16218                           tablat	equ	0xFF5
 16219                           prodh	equ	0xFF4
 16220                           prodl	equ	0xFF3
 16221                           intcon	equ	0xFF2
 16222                           intcon2	equ	0xFF1
 16223                           postinc0	equ	0xFEE
 16224                           wreg	equ	0xFE8
 16225                           indf1	equ	0xFE7
 16226                           postinc1	equ	0xFE6
 16227                           postdec1	equ	0xFE5
 16228                           fsr1h	equ	0xFE2
 16229                           fsr1l	equ	0xFE1
 16230                           indf2	equ	0xFDF
 16231                           postinc2	equ	0xFDE
 16232                           postdec2	equ	0xFDD
 16233                           plusw2	equ	0xFDB
 16234                           fsr2h	equ	0xFDA
 16235                           fsr2l	equ	0xFD9
 16236                           status	equ	0xFD8
 16237                           
 16238 ;; *************** function _AddSecond *****************
 16239 ;; Defined at:
 16240 ;;		line 180 in file "user.c"
 16241 ;; Parameters:    Size  Location     Type
 16242 ;;		None
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;		None
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  1    wreg      void 
 16247 ;; Registers used:
 16248 ;;		wreg, status,2, status,0
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16254 ;;      Params:         0       0       0       0       0       0       0
 16255 ;;      Locals:         0       0       0       0       0       0       0
 16256 ;;      Temps:          0       0       0       0       0       0       0
 16257 ;;      Totals:         0       0       0       0       0       0       0
 16258 ;;Total ram usage:        0 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    2
 16261 ;; This function calls:
 16262 ;;		Nothing
 16263 ;; This function is called by:
 16264 ;;		_main
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           	psect	text81
 16269  0002AA                     __ptext81:
 16270                           	opt stack 0
 16271  0002AA                     _AddSecond:
 16272                           	opt stack 28
 16273                           
 16274                           ;incstack = 0
 16275  0002AA  FFFF               	dw	65535
 16276                           
 16277                           ;user.c: 182: currentTime++;
 16278  0002AC  0E01               	movlw	1
 16279  0002AE  0101               	movlb	1	; () banked
 16280  0002B0  27F2               	addwf	_currentTime& (0+255),f,b
 16281  0002B2  0E00               	movlw	0
 16282  0002B4  23F3               	addwfc	(_currentTime+1)& (0+255),f,b
 16283  0002B6  23F4               	addwfc	(_currentTime+2)& (0+255),f,b
 16284  0002B8  23F5               	addwfc	(_currentTime+3)& (0+255),f,b
 16285                           
 16286                           ; BSR set to: 1
 16287  0002BA  0012               	return		;funcret
 16288  0002BC  FFFF               	dw	65535	; errata NOP
 16289  0002BE                     __end_of_AddSecond:
 16290                           	opt stack 0
 16291                           tblptru	equ	0xFF8
 16292                           tblptrh	equ	0xFF7
 16293                           tblptrl	equ	0xFF6
 16294                           tablat	equ	0xFF5
 16295                           prodh	equ	0xFF4
 16296                           prodl	equ	0xFF3
 16297                           intcon	equ	0xFF2
 16298                           intcon2	equ	0xFF1
 16299                           postinc0	equ	0xFEE
 16300                           wreg	equ	0xFE8
 16301                           indf1	equ	0xFE7
 16302                           postinc1	equ	0xFE6
 16303                           postdec1	equ	0xFE5
 16304                           fsr1h	equ	0xFE2
 16305                           fsr1l	equ	0xFE1
 16306                           indf2	equ	0xFDF
 16307                           postinc2	equ	0xFDE
 16308                           postdec2	equ	0xFDD
 16309                           plusw2	equ	0xFDB
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function _low_isr *****************
 16315 ;; Defined at:
 16316 ;;		line 183 in file "interrupts.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;		None
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  c               1   31[COMRAM] unsigned char 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  1    wreg      void 
 16323 ;; Registers used:
 16324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16330 ;;      Params:         0       0       0       0       0       0       0
 16331 ;;      Locals:         1       0       0       0       0       0       0
 16332 ;;      Temps:         17       0       0       0       0       0       0
 16333 ;;      Totals:        18       0       0       0       0       0       0
 16334 ;;Total ram usage:       18 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    1
 16337 ;; This function calls:
 16338 ;;		Nothing
 16339 ;; This function is called by:
 16340 ;;		Interrupt level 1
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	intcodelo
 16345  000018                     __pintcodelo:
 16346                           	opt stack 0
 16347  000018                     _low_isr:
 16348                           	opt stack 0
 16349  000018  FFFF               	dw	65535	; assembler added errata NOP
 16350                           
 16351                           ; BSR set to: 1
 16352                           ;incstack = 0
 16353  00001A  805F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 16354  00001C  FFFF               	dw	65535	; errata NOP
 16355  00001E  CFD8 F00F          	movff	status,??_low_isr
 16356  000022  CFE8 F010          	movff	wreg,??_low_isr+1
 16357  000026  CFE0 F011          	movff	bsr,??_low_isr+2
 16358  00002A  CFFA F012          	movff	pclath,??_low_isr+3
 16359  00002E  CFFB F013          	movff	pclatu,??_low_isr+4
 16360  000032  CFE9 F014          	movff	fsr0l,??_low_isr+5
 16361  000036  CFEA F015          	movff	fsr0h,??_low_isr+6
 16362  00003A  CFE1 F016          	movff	fsr1l,??_low_isr+7
 16363  00003E  CFE2 F017          	movff	fsr1h,??_low_isr+8
 16364  000042  CFD9 F018          	movff	fsr2l,??_low_isr+9
 16365  000046  CFDA F019          	movff	fsr2h,??_low_isr+10
 16366  00004A  CFF3 F01A          	movff	prodl,??_low_isr+11
 16367  00004E  CFF4 F01B          	movff	prodh,??_low_isr+12
 16368  000052  CFF6 F01C          	movff	tblptrl,??_low_isr+13
 16369  000056  CFF7 F01D          	movff	tblptrh,??_low_isr+14
 16370  00005A  CFF8 F01E          	movff	tblptru,??_low_isr+15
 16371  00005E  CFF5 F01F          	movff	tablat,??_low_isr+16
 16372                           
 16373                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 16374  000062  AA9E               	btfss	3998,5,c	;volatile
 16375  000064  D021               	goto	i1l97
 16376  000066  BA9D               	btfsc	3997,5,c	;volatile
 16377  000068  D005               	goto	i1l98
 16378  00006A  D01E               	goto	i1l97
 16379  00006C                     i1l94:
 16380  00006C  FFFF               	dw	65535	; assembler added errata NOP
 16381  00006E  AA9E               	btfss	3998,5,c	;volatile
 16382  000070  D7FD               	goto	i1l94
 16383  000072  D018               	goto	i1l6293
 16384  000074                     i1l98:
 16385  000074  FFFF               	dw	65535	; assembler added errata NOP
 16386  000076  AA9E               	btfss	3998,5,c	;volatile
 16387  000078  D7FD               	goto	i1l98
 16388                           
 16389                           ;interrupts.c: 211: uint8_t c = RCREG;
 16390  00007A  CFAE F020          	movff	4014,low_isr@c	;volatile
 16391                           
 16392                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 16393  00007E  5042               	movf	_UartBufferHead,w,c	;volatile
 16394  000080  0D01               	mullw	1
 16395  000082  0E00               	movlw	low _UartRingBuffer
 16396  000084  24F3               	addwf	prodl,w,c
 16397  000086  6ED9               	movwf	fsr2l,c
 16398  000088  0E02               	movlw	high _UartRingBuffer
 16399  00008A  20F4               	addwfc	prodh,w,c
 16400  00008C  6EDA               	movwf	fsr2h,c
 16401  00008E  C020  FFDF         	movff	low_isr@c,indf2
 16402                           
 16403                           ;interrupts.c: 215: UartBufferLen++;
 16404  000092  2A43               	incf	_UartBufferLen,f,c	;volatile
 16405                           
 16406                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 16407  000094  2842               	incf	_UartBufferHead,w,c	;volatile
 16408  000096  A4D8               	btfss	status,2,c
 16409  000098  D003               	goto	i1l6291
 16410                           
 16411                           ;interrupts.c: 217: UartBufferHead = 0;
 16412  00009A  0E00               	movlw	0
 16413  00009C  6E42               	movwf	_UartBufferHead,c	;volatile
 16414  00009E  D002               	goto	i1l6293
 16415  0000A0                     i1l6291:
 16416  0000A0  FFFF               	dw	65535	; assembler added errata NOP
 16417                           
 16418                           ;interrupts.c: 218: else
 16419                           ;interrupts.c: 219: UartBufferHead++;
 16420  0000A2  2A42               	incf	_UartBufferHead,f,c	;volatile
 16421  0000A4                     i1l6293:
 16422  0000A4  FFFF               	dw	65535	; assembler added errata NOP
 16423                           
 16424                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 16425  0000A6  9A9E               	bcf	3998,5,c	;volatile
 16426  0000A8                     i1l97:
 16427  0000A8  FFFF               	dw	65535	; assembler added errata NOP
 16428  0000AA  C01F  FFF5         	movff	??_low_isr+16,tablat
 16429  0000AE  C01E  FFF8         	movff	??_low_isr+15,tblptru
 16430  0000B2  C01D  FFF7         	movff	??_low_isr+14,tblptrh
 16431  0000B6  C01C  FFF6         	movff	??_low_isr+13,tblptrl
 16432  0000BA  C01B  FFF4         	movff	??_low_isr+12,prodh
 16433  0000BE  C01A  FFF3         	movff	??_low_isr+11,prodl
 16434  0000C2  C019  FFDA         	movff	??_low_isr+10,fsr2h
 16435  0000C6  C018  FFD9         	movff	??_low_isr+9,fsr2l
 16436  0000CA  C017  FFE2         	movff	??_low_isr+8,fsr1h
 16437  0000CE  C016  FFE1         	movff	??_low_isr+7,fsr1l
 16438  0000D2  C015  FFEA         	movff	??_low_isr+6,fsr0h
 16439  0000D6  C014  FFE9         	movff	??_low_isr+5,fsr0l
 16440  0000DA  C013  FFFB         	movff	??_low_isr+4,pclatu
 16441  0000DE  C012  FFFA         	movff	??_low_isr+3,pclath
 16442  0000E2  C011  FFE0         	movff	??_low_isr+2,bsr
 16443  0000E6  C010  FFE8         	movff	??_low_isr+1,wreg
 16444  0000EA  C00F  FFD8         	movff	??_low_isr,status
 16445  0000EE  905F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 16446  0000F0  0010               	retfie	
 16447  0000F2  FFFF               	dw	65535	; errata NOP
 16448  0000F4                     __end_of_low_isr:
 16449                           	opt stack 0
 16450                           pclatu	equ	0xFFB
 16451                           pclath	equ	0xFFA
 16452                           tblptru	equ	0xFF8
 16453                           tblptrh	equ	0xFF7
 16454                           tblptrl	equ	0xFF6
 16455                           tablat	equ	0xFF5
 16456                           prodh	equ	0xFF4
 16457                           prodl	equ	0xFF3
 16458                           intcon	equ	0xFF2
 16459                           intcon2	equ	0xFF1
 16460                           postinc0	equ	0xFEE
 16461                           fsr0h	equ	0xFEA
 16462                           fsr0l	equ	0xFE9
 16463                           wreg	equ	0xFE8
 16464                           indf1	equ	0xFE7
 16465                           postinc1	equ	0xFE6
 16466                           postdec1	equ	0xFE5
 16467                           fsr1h	equ	0xFE2
 16468                           fsr1l	equ	0xFE1
 16469                           bsr	equ	0xFE0
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           plusw2	equ	0xFDB
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function _high_isr *****************
 16479 ;; Defined at:
 16480 ;;		line 122 in file "interrupts.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;		None
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;		None
 16485 ;; Return value:  Size  Location     Type
 16486 ;;                  1    wreg      void 
 16487 ;; Registers used:
 16488 ;;		wreg, status,2, status,0
 16489 ;; Tracked objects:
 16490 ;;		On entry : 0/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16494 ;;      Params:         0       0       0       0       0       0       0
 16495 ;;      Locals:         0       0       0       0       0       0       0
 16496 ;;      Temps:         14       0       0       0       0       0       0
 16497 ;;      Totals:        14       0       0       0       0       0       0
 16498 ;;Total ram usage:       14 bytes
 16499 ;; Hardware stack levels used:    1
 16500 ;; This function calls:
 16501 ;;		Nothing
 16502 ;; This function is called by:
 16503 ;;		Interrupt level 2
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           	psect	intcode
 16508  000008                     __pintcode:
 16509                           	opt stack 0
 16510  000008                     _high_isr:
 16511                           	opt stack 0
 16512  000008  FFFF               	dw	65535	; assembler added errata NOP
 16513                           
 16514                           ;incstack = 0
 16515  00000A  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16516  00000C  FFFF               	dw	65535	; errata NOP
 16517  00000E  CFFA F001          	movff	pclath,??_high_isr
 16518  000012  CFFB F002          	movff	pclatu,??_high_isr+1
 16519  000016  EF18  F016         	goto	int_func
 16520                           pclatu	equ	0xFFB
 16521                           pclath	equ	0xFFA
 16522                           tblptru	equ	0xFF8
 16523                           tblptrh	equ	0xFF7
 16524                           tblptrl	equ	0xFF6
 16525                           tablat	equ	0xFF5
 16526                           prodh	equ	0xFF4
 16527                           prodl	equ	0xFF3
 16528                           intcon	equ	0xFF2
 16529                           intcon2	equ	0xFF1
 16530                           postinc0	equ	0xFEE
 16531                           fsr0h	equ	0xFEA
 16532                           fsr0l	equ	0xFE9
 16533                           wreg	equ	0xFE8
 16534                           indf1	equ	0xFE7
 16535                           postinc1	equ	0xFE6
 16536                           postdec1	equ	0xFE5
 16537                           fsr1h	equ	0xFE2
 16538                           fsr1l	equ	0xFE1
 16539                           bsr	equ	0xFE0
 16540                           indf2	equ	0xFDF
 16541                           postinc2	equ	0xFDE
 16542                           postdec2	equ	0xFDD
 16543                           plusw2	equ	0xFDB
 16544                           fsr2h	equ	0xFDA
 16545                           fsr2l	equ	0xFD9
 16546                           status	equ	0xFD8
 16547                           
 16548                           	psect	intcode_body
 16549  002C30                     __pintcode_body:
 16550                           	opt stack 23
 16551  002C30                     int_func:
 16552                           	opt stack 23
 16553  002C30  FFFF               	dw	65535	; errata NOP
 16554  002C32  CFE9 F003          	movff	fsr0l,??_high_isr+2
 16555  002C36  CFEA F004          	movff	fsr0h,??_high_isr+3
 16556  002C3A  CFE1 F005          	movff	fsr1l,??_high_isr+4
 16557  002C3E  CFE2 F006          	movff	fsr1h,??_high_isr+5
 16558  002C42  CFD9 F007          	movff	fsr2l,??_high_isr+6
 16559  002C46  CFDA F008          	movff	fsr2h,??_high_isr+7
 16560  002C4A  CFF3 F009          	movff	prodl,??_high_isr+8
 16561  002C4E  CFF4 F00A          	movff	prodh,??_high_isr+9
 16562  002C52  CFF6 F00B          	movff	tblptrl,??_high_isr+10
 16563  002C56  CFF7 F00C          	movff	tblptrh,??_high_isr+11
 16564  002C5A  CFF8 F00D          	movff	tblptru,??_high_isr+12
 16565  002C5E  CFF5 F00E          	movff	tablat,??_high_isr+13
 16566                           
 16567                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 16568  002C62  B09E               	btfsc	3998,0,c	;volatile
 16569  002C64  A09D               	btfss	3997,0,c	;volatile
 16570  002C66  D00D               	goto	i2l84
 16571                           
 16572                           ;interrupts.c: 144: {
 16573                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 16574  002C68  909E               	bcf	3998,0,c	;volatile
 16575                           
 16576                           ;interrupts.c: 146: millisecondsFromStart++;
 16577  002C6A  0E01               	movlw	1
 16578  002C6C  0100               	movlb	0	; () banked
 16579  002C6E  27DC               	addwf	_millisecondsFromStart& (0+255),f,b	;volatile
 16580  002C70  0E00               	movlw	0
 16581  002C72  23DD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 16582  002C74  23DE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 16583  002C76  23DF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 16584                           
 16585                           ; BSR set to: 0
 16586                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 16587  002C78  0EF6               	movlw	246
 16588  002C7A  6ECF               	movwf	4047,c	;volatile
 16589                           
 16590                           ; BSR set to: 0
 16591  002C7C  0E3C               	movlw	60
 16592  002C7E  6ECE               	movwf	4046,c	;volatile
 16593                           
 16594                           ; BSR set to: 0
 16595                           ;interrupts.c: 148: return;
 16596  002C80  D026               	goto	i2l85
 16597  002C82                     i2l84:
 16598  002C82  FFFF               	dw	65535	; assembler added errata NOP
 16599                           
 16600                           ;interrupts.c: 149: }
 16601                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 16602  002C84  A4F2               	btfss	intcon,2,c	;volatile
 16603  002C86  D023               	goto	i2l85
 16604                           
 16605                           ;interrupts.c: 152: {
 16606                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 16607  002C88  94F2               	bcf	intcon,2,c	;volatile
 16608                           
 16609                           ;interrupts.c: 154: _6sCounter++;
 16610  002C8A  2A45               	incf	__6sCounter,f,c	;volatile
 16611                           
 16612                           ;interrupts.c: 155: if(_6sCounter == 10)
 16613  002C8C  0E0A               	movlw	10
 16614  002C8E  1845               	xorwf	__6sCounter,w,c	;volatile
 16615  002C90  A4D8               	btfss	status,2,c
 16616  002C92  D018               	goto	i2l87
 16617                           
 16618                           ;interrupts.c: 156: {
 16619                           ;interrupts.c: 157: _6sCounter = 0;
 16620  002C94  0E00               	movlw	0
 16621  002C96  6E45               	movwf	__6sCounter,c	;volatile
 16622                           
 16623                           ;interrupts.c: 158: globalMinutes++;
 16624  002C98  2A58               	incf	_globalMinutes,f,c	;volatile
 16625                           
 16626                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 16627  002C9A  0100               	movlb	0	; () banked
 16628  002C9C  4BE8               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 16629  002C9E  2BE9               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;interrupts.c: 160: if(globalMinutes == 60)
 16633  002CA0  0E3C               	movlw	60
 16634  002CA2  1858               	xorwf	_globalMinutes,w,c	;volatile
 16635  002CA4  A4D8               	btfss	status,2,c
 16636  002CA6  D00E               	goto	i2l87
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;interrupts.c: 161: {
 16640                           ;interrupts.c: 162: globalMinutes = 0;
 16641  002CA8  0E00               	movlw	0
 16642  002CAA  6E58               	movwf	_globalMinutes,c	;volatile
 16643                           
 16644                           ; BSR set to: 0
 16645                           ;interrupts.c: 163: globalHours++;
 16646  002CAC  2A5E               	incf	_globalHours,f,c	;volatile
 16647                           
 16648                           ; BSR set to: 0
 16649                           ;interrupts.c: 164: if(globalHours == 24)
 16650  002CAE  0E18               	movlw	24
 16651  002CB0  185E               	xorwf	_globalHours,w,c	;volatile
 16652  002CB2  A4D8               	btfss	status,2,c
 16653  002CB4  D007               	goto	i2l87
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;interrupts.c: 165: {
 16657                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 16658  002CB6  0E00               	movlw	0
 16659  002CB8  0100               	movlb	0	; () banked
 16660  002CBA  6FE9               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 16661  002CBC  0E00               	movlw	0
 16662  002CBE  6FE8               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 16663                           
 16664                           ;interrupts.c: 167: globalHours = 0;
 16665  002CC0  0E00               	movlw	0
 16666  002CC2  6E5E               	movwf	_globalHours,c	;volatile
 16667  002CC4                     i2l87:
 16668  002CC4  FFFF               	dw	65535	; assembler added errata NOP
 16669                           
 16670                           ;interrupts.c: 168: }
 16671                           ;interrupts.c: 169: }
 16672                           ;interrupts.c: 170: }
 16673                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 16674  002CC6  0E1B               	movlw	27
 16675  002CC8  6ED7               	movwf	4055,c	;volatile
 16676  002CCA  0E28               	movlw	40
 16677  002CCC  6ED6               	movwf	4054,c	;volatile
 16678  002CCE                     i2l85:
 16679  002CCE  FFFF               	dw	65535	; assembler added errata NOP
 16680  002CD0  C00E  FFF5         	movff	??_high_isr+13,tablat
 16681  002CD4  C00D  FFF8         	movff	??_high_isr+12,tblptru
 16682  002CD8  C00C  FFF7         	movff	??_high_isr+11,tblptrh
 16683  002CDC  C00B  FFF6         	movff	??_high_isr+10,tblptrl
 16684  002CE0  C00A  FFF4         	movff	??_high_isr+9,prodh
 16685  002CE4  C009  FFF3         	movff	??_high_isr+8,prodl
 16686  002CE8  C008  FFDA         	movff	??_high_isr+7,fsr2h
 16687  002CEC  C007  FFD9         	movff	??_high_isr+6,fsr2l
 16688  002CF0  C006  FFE2         	movff	??_high_isr+5,fsr1h
 16689  002CF4  C005  FFE1         	movff	??_high_isr+4,fsr1l
 16690  002CF8  C004  FFEA         	movff	??_high_isr+3,fsr0h
 16691  002CFC  C003  FFE9         	movff	??_high_isr+2,fsr0l
 16692  002D00  C002  FFFB         	movff	??_high_isr+1,pclatu
 16693  002D04  C001  FFFA         	movff	??_high_isr,pclath
 16694  002D08  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16695  002D0A  0011               	retfie		f
 16696  002D0C  FFFF               	dw	65535	; errata NOP
 16697  002D0E                     __end_of_high_isr:
 16698                           	opt stack 0
 16699                           pclatu	equ	0xFFB
 16700                           pclath	equ	0xFFA
 16701                           tblptru	equ	0xFF8
 16702                           tblptrh	equ	0xFF7
 16703                           tblptrl	equ	0xFF6
 16704                           tablat	equ	0xFF5
 16705                           prodh	equ	0xFF4
 16706                           prodl	equ	0xFF3
 16707                           intcon	equ	0xFF2
 16708                           intcon2	equ	0xFF1
 16709                           postinc0	equ	0xFEE
 16710                           fsr0h	equ	0xFEA
 16711                           fsr0l	equ	0xFE9
 16712                           wreg	equ	0xFE8
 16713                           indf1	equ	0xFE7
 16714                           postinc1	equ	0xFE6
 16715                           postdec1	equ	0xFE5
 16716                           fsr1h	equ	0xFE2
 16717                           fsr1l	equ	0xFE1
 16718                           bsr	equ	0xFE0
 16719                           indf2	equ	0xFDF
 16720                           postinc2	equ	0xFDE
 16721                           postdec2	equ	0xFDD
 16722                           plusw2	equ	0xFDB
 16723                           fsr2h	equ	0xFDA
 16724                           fsr2l	equ	0xFD9
 16725                           status	equ	0xFD8
 16726                           pclatu	equ	0xFFB
 16727                           pclath	equ	0xFFA
 16728                           tblptru	equ	0xFF8
 16729                           tblptrh	equ	0xFF7
 16730                           tblptrl	equ	0xFF6
 16731                           tablat	equ	0xFF5
 16732                           prodh	equ	0xFF4
 16733                           prodl	equ	0xFF3
 16734                           intcon	equ	0xFF2
 16735                           intcon2	equ	0xFF1
 16736                           postinc0	equ	0xFEE
 16737                           fsr0h	equ	0xFEA
 16738                           fsr0l	equ	0xFE9
 16739                           wreg	equ	0xFE8
 16740                           indf1	equ	0xFE7
 16741                           postinc1	equ	0xFE6
 16742                           postdec1	equ	0xFE5
 16743                           fsr1h	equ	0xFE2
 16744                           fsr1l	equ	0xFE1
 16745                           bsr	equ	0xFE0
 16746                           indf2	equ	0xFDF
 16747                           postinc2	equ	0xFDE
 16748                           postdec2	equ	0xFDD
 16749                           plusw2	equ	0xFDB
 16750                           fsr2h	equ	0xFDA
 16751                           fsr2l	equ	0xFD9
 16752                           status	equ	0xFD8
 16753                           
 16754                           	psect	rparam
 16755  0000                     pclatu	equ	0xFFB
 16756                           pclath	equ	0xFFA
 16757                           tblptru	equ	0xFF8
 16758                           tblptrh	equ	0xFF7
 16759                           tblptrl	equ	0xFF6
 16760                           tablat	equ	0xFF5
 16761                           prodh	equ	0xFF4
 16762                           prodl	equ	0xFF3
 16763                           intcon	equ	0xFF2
 16764                           intcon2	equ	0xFF1
 16765                           postinc0	equ	0xFEE
 16766                           fsr0h	equ	0xFEA
 16767                           fsr0l	equ	0xFE9
 16768                           wreg	equ	0xFE8
 16769                           indf1	equ	0xFE7
 16770                           postinc1	equ	0xFE6
 16771                           postdec1	equ	0xFE5
 16772                           fsr1h	equ	0xFE2
 16773                           fsr1l	equ	0xFE1
 16774                           bsr	equ	0xFE0
 16775                           indf2	equ	0xFDF
 16776                           postinc2	equ	0xFDE
 16777                           postdec2	equ	0xFDD
 16778                           plusw2	equ	0xFDB
 16779                           fsr2h	equ	0xFDA
 16780                           fsr2l	equ	0xFD9
 16781                           status	equ	0xFD8
 16782                           
 16783                           	psect	temp
 16784  00005F                     btemp:
 16785                           	opt stack 0
 16786  00005F                     	ds	1
 16787  0000                     int$flags	set	btemp
 16788                           pclatu	equ	0xFFB
 16789                           pclath	equ	0xFFA
 16790                           tblptru	equ	0xFF8
 16791                           tblptrh	equ	0xFF7
 16792                           tblptrl	equ	0xFF6
 16793                           tablat	equ	0xFF5
 16794                           prodh	equ	0xFF4
 16795                           prodl	equ	0xFF3
 16796                           intcon	equ	0xFF2
 16797                           intcon2	equ	0xFF1
 16798                           postinc0	equ	0xFEE
 16799                           fsr0h	equ	0xFEA
 16800                           fsr0l	equ	0xFE9
 16801                           wreg	equ	0xFE8
 16802                           indf1	equ	0xFE7
 16803                           postinc1	equ	0xFE6
 16804                           postdec1	equ	0xFE5
 16805                           fsr1h	equ	0xFE2
 16806                           fsr1l	equ	0xFE1
 16807                           bsr	equ	0xFE0
 16808                           indf2	equ	0xFDF
 16809                           postinc2	equ	0xFDE
 16810                           postdec2	equ	0xFDD
 16811                           plusw2	equ	0xFDB
 16812                           fsr2h	equ	0xFDA
 16813                           fsr2l	equ	0xFD9
 16814                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    16
    Data        1
    BSS         598
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     56      94
    BANK0           128     66     125
    BANK1           256      0     246
    BANK2           256      0     256
    BANK3           256     35      35
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(2) Largest target is 18
		 -> ModbusProcess_FC100@newTime(BANK0[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(2) Largest target is 1
		 -> io_poll@lastCommand(BANK0[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(2) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(2) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    SetTime@newTime	PTR long  size(2) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(BANK0[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(2) Largest target is 1
		 -> _lastFunction(COMRAM[1]), 

    io_poll@lastFunction	PTR unsigned char  size(2) Largest target is 1
		 -> _lastFunction(COMRAM[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandId(COMRAM[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(COMRAM[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(COMRAM[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandData(COMRAM[1]), 

    sp__GetTime	PTR long  size(2) Largest target is 4
		 -> currentTime(BANK1[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(2) Largest target is 4
		 -> main@curMs(BANK3[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(2) Largest target is 2
		 -> main@totalMinutes(BANK3[2]), ProcessDiary@totalMinutes(BANK0[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(2) Largest target is 1
		 -> main@minute(BANK3[1]), 

    getHourMin@hour	PTR unsigned char  size(2) Largest target is 1
		 -> main@hour(BANK3[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _ProcessUserCommands->_PlaySound
    _InitFromEeprom->_ShowFailure
    _ShowFailure->_LightLed
    _ShowFailure->_LightStatusLed
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _CommandSetLed->_PlaySound
    _SwitchOffAllDiaryLeds->_LightLed
    _ResetEventFromCommand->_LightLed
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusProcess_FC21
    _ModbusValidateRequest->_CheckFunc20
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC20->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_SetHourMin
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    ___lwdiv->___wmul
    _isleap->___lwmod
    _SetHourMin->___lmul
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ModbusPoll
    _io_poll->_ProcessUserCommands
    _ProcessUserCommands->_CommandSetLed
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   78862
                                              0 BANK3     35    35      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
              _ResetEventFromCommand
                  _SoundPlayNextStep
                        _StopPlaying
              _SwitchOffAllDiaryLeds
                         _getHourMin
                    _getTotalMinutes
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             12    12      0   23134
                                             11 BANK0     11    11      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  2     2      0   14670
                                             10 BANK0      1     1      0
                      _CommandSetLed
                _CommandSetStatusLed
                     _InitFromEeprom
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _InitFromEeprom                                       3     3      0    5356
                                             41 COMRAM     3     3      0
                      _LoadNextEvent
                             _Modbus
                        _ShowFailure
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (4) _SwitchOffAllLeds                                     1     1      0     130
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ShowFailure                                          1     1      0    4179
                                             40 COMRAM     1     1      0
                           _LightLed
                     _LightStatusLed
 ---------------------------------------------------------------------------------
 (4) _Modbus                                               3     2      1     522
                                             37 COMRAM     3     2      1
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (5) _ModbusInit                                           5     3      2     315
                                             32 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  4     4      0    2957
                                              0 BANK0      4     4      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (5) _LightStatusLed                                       8     6      2    1234
                                             32 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetLed                                       10    10      0    4891
                                              0 BANK0     10    10      0
                            _GetTime
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
  _ModbusGetUserCommandAdditional2Hi
  _ModbusGetUserCommandAdditional2Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Lo                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Hi                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 6     0      6     417
                                             32 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           4     0      4     216
                                             32 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SwitchOffAllDiaryLeds                                1     1      0    3013
                                             40 COMRAM     1     1      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ResetEventFromCommand                                3     3      0    2982
                                             40 COMRAM     3     3      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2982
                                             40 COMRAM     5     5      0
            _GetCurrentEventDiodeNum
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                   10     8      2     170
                                             33 COMRAM    10     8      2
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4538
                                              0 BANK0      6     6      0
            _GetCurrentEventDiodeNum
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     834
                                             48 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    8     8      0     275
                                             40 COMRAM     8     8      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     460
                                             34 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (5) _getTotalMinutes                                      2     0      2     262
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _LightLed                                             8     6      2    2914
                                             32 COMRAM     8     6      2
            _GetCurrentEventDiodeNum (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentEventDiodeNum                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          13     3     10   33226
                                             53 BANK0     13     3     10
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC20
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               31    31      0    1834
                                              0 BANK0     31    31      0
                        _CheckFunc20
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (3) _CheckFunc20                                         20    20      0     554
                                             32 COMRAM    20    20      0
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1106
                                             47 COMRAM     5     2      3
                                              0 BANK0      5     5      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   11     9      2    1091
                                             47 COMRAM     7     5      2
                                              0 BANK0      4     4      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3458
                                             47 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   7     4      3    2351
                                             32 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1483
                                             47 COMRAM     7     4      3
                                              0 BANK0      5     5      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1085
                                             47 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC20                                  20    20      0    1954
                                             47 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  17    14      3    1425
                                             47 COMRAM     3     0      3
                                              0 BANK0     14    14      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  20    18      2    1400
                                             47 COMRAM     7     5      2
                                              0 BANK0     13    13      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0   10594
                                             30 BANK0     23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              14    10      4    6092
                                             16 BANK0     14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    4605
                                              0 BANK0     16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       10     6      4    1964
                                             45 COMRAM    10     6      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       2     0      2    1197
                                             45 COMRAM     2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     386
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                             38 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _isleap                                               5     3      2     747
                                             37 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                             32 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          12     6      6    2660
                                             44 COMRAM    12     6      6
                            ___awdiv
                            ___awmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    1020
                                             32 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     587
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     599
                                             32 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     632
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1505
                                             47 COMRAM     5     3      2
                                              0 BANK0     12    12      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     788
                                             45 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                             32 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                             32 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     405
                                             32 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                             33 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                             33 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                             32 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             18    18      0      23
                                             14 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _ShowFailure
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _LightStatusLed
     _SwitchOffAllLeds
   _LightStatusLed
   _LoadNextEvent
     _getTotalMinutes
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___awdiv
         ___awmod
         ___lmul
       _SetTime
       _mktime
         ___lmul
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
               ___wmul (ARG)
             ___wmul
           _years_to_days
             ___lmul
             ___lwdiv
               ___wmul (ARG)
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC20
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusSetExceptionStatusBit
     _ModbusValidateRequest
       _CheckFunc20
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetCurrentEventDiodeNum
     _GetTime
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _GetCurrentEventDiodeNum
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _ResetEventFromCommand
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _SwitchOffAllDiaryLeds
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
   _getHourMin
   _getTotalMinutes
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _ShowFailure
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _LightStatusLed
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetLed
         _GetTime
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandAdditional2Hi
         _ModbusGetUserCommandAdditional2Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _InitFromEeprom
         _LoadNextEvent
           _getTotalMinutes
         _Modbus
           _ModbusInit
         _ShowFailure
           _LightLed
             _GetCurrentEventDiodeNum (ARG)
           _LightStatusLed
         _SwitchOffAllLeds
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     23      23      11       13.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F6       7       96.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     38      5E       1       74.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F4      15        0.0%
DATA                 0      0     2F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Jun 29 18:45:16 2016

                                             LoadNextEvent@totalMinutes 0025  
                                                         _years_to_days 34FC  
                                    ModbusProcess_FC15@u8CopyBufferSize 0082  
                                                        _ResetEvent$914 002C  
                                           __end_of_CommandSetStatusLed 34FC  
                                            ModbusProcess_FC20@reqCount 008D  
                                            ModbusProcess_FC16@u8regsno 008C  
                                                                    l63 3EE2  
                                                                    l66 3EE8  
                                                                    l74 3E34  
                                                                    l78 3E5A  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                          ___awdiv@sign 0026  
                                                   months_to_days@month 002E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                                   ___wmul@multiplicand 0023  
                                         ModbusProcess_FC5@u8currentBit 0083  
                                        ModbusProcess_FC15@u16StartCoil 0085  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                  CheckFunc20@resultLen 002E  
                                                                   l112 015A  
                                                                   l113 0172  
                                                   ModbusPoll@inputRegs 00B9  
                                                                   l109 0148  
                                                                   l321 32CA  
                                                                   l250 3CEC  
                                                                   l251 3CF8  
                                                                   l252 3D04  
                                                                   l253 3D2C  
                                                                   l510 306C  
                                                                   l272 0C74  
                                                                   l264 0EC0  
                                                                   l424 2576  
                                                                   l248 3CE0  
                                                                   l408 3AAE  
                                                                   l416 3CD4  
                                                                   l258 3EA4  
                                                                   l506 3384  
                                                                   l450 0F32  
                                                                   l443 3206  
                                                                   l291 3FF6  
                                                                   l438 24F0  
                                                                   l391 2C2A  
                                                                   l295 2A48  
                                                                   l480 21CC  
                                                                   l394 2C08  
                                                                   l475 2264  
                                                                   l485 34F6  
                                                                   l493 32DA  
                                                                   l398 2B44  
                                                                   l903 09F0  
                                                                   l499 3306  
                                                                   l837 3B6E  
                                                                   l829 3DCC  
                                                                   l855 1EE2  
                                                                   l785 3E1A  
                                                                   l882 0AAA  
                                                                   l981 1C36  
                                                                   l869 0AB2  
                                                                   l789 1A94  
                                                                   l992 30D2  
                                                                   _GIE 007F97  
                                                                   l999 3130  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 3EAA  
                                      ModbusValidateRequest@recLenBytes 0090  
                                                 ModbusPoll@holdingRegs 00BC  
                                                          __CFG_BORV$42 000000  
                                                          ___awmod@sign 0026  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 387C  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 002A  
                                      ModbusValidateRequest@isSupported 0096  
                                            CommandSetStatusLed@soundId 0081  
                                                         _LoadNextEvent 23FA  
                                                         _globalMinutes 0058  
                                                     main@buttonPressed 030C  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1013 20B6  
                                                                  l1031 283E  
                                                                  l1033 2844  
                                                                  l1029 2838  
                                                                  l1039 2870  
                                                                  l1452 3B06  
                                                                  l1462 3D74  
                                                                  l1498 15D4  
                                                                  l8001 2882  
                                                                  l7105 2194  
                                                                  l7043 324A  
                                                                  l7213 1ED0  
                                                                  l7117 2236  
                                                                  l7053 3260  
                                                                  l7037 323A  
                                                                  l8103 1318  
                                                                  l7071 3294  
                                                                  l8025 2914  
                                                                  l7233 38B4  
                                                                  l7217 1ED6  
                                                                  l6521 0C3C  
                                                                  l6513 0AE6  
                                                                  l7129 347E  
                                                                  l7305 331C  
                                                                  l7313 335C  
                                                                  l6443 3B86  
                                                                  l8027 292A  
                                                                  l7411 072C  
                                                                  l6531 0D66  
                                                                  l6523 0C90  
                                                                  l6515 0BA0  
                                                                  l6507 0ACA  
                                                                  l8211 14C6  
                                                                  l8203 14A6  
                                                                  l8131 1392  
                                                                  l8123 1372  
                                                                  l8115 1352  
                                                                  l7323 3C5E  
                                                                  l7139 34B0  
                                                                  l7059 3272  
                                                                  l7307 3324  
                                                                  l6461 3ADC  
                                                                  l7245 15E2  
                                                                  l7173 1D1C  
                                                                  l7405 0712  
                                                                  l6613 2C12  
                                                                  l8213 14D2  
                                                                  l8205 14B2  
                                                                  l8141 13BE  
                                                                  l8133 139E  
                                                                  l8125 137E  
                                                                  l8117 135E  
                                                                  l8109 1340  
                                                                  l7077 32A0  
                                                                  l7309 3354  
                                                                  l7351 3D96  
                                                                  l6447 3B9C  
                                                                  l7255 1800  
                                                                  l7239 38EE  
                                                                  l7503 0912  
                                                                  l7415 0756  
                                                                  l7407 0720  
                                                                  l6543 0E6C  
                                                                  l8231 1510  
                                                                  l8223 14F0  
                                                                  l8151 13DC  
                                                                  l7327 3C74  
                                                                  l7319 3C44  
                                                                  l6631 3F0A  
                                                                  l7601 2366  
                                                                  l6481 3D52  
                                                                  l6457 3ACC  
                                                                  l7177 1D22  
                                                                  l6537 0DFC  
                                                                  l6529 0D4A  
                                                                  l6713 2422  
                                                                  l6801 2B34  
                                                                  l8321 31B4  
                                                                  l8313 3186  
                                                                  l8241 153C  
                                                                  l8233 151C  
                                                                  l8225 14FC  
                                                                  l8217 14DE  
                                                                  l8161 1408  
                                                                  l8153 13E8  
                                                                  l8145 13CA  
                                                                  l7097 2174  
                                                                  l6553 294C  
                                                                  l6633 3F14  
                                                                  l7371 3B20  
                                                                  l7347 3D8C  
                                                                  l7611 23B0  
                                                                  l7603 239A  
                                                                  l6459 3AD6  
                                                                  l7179 1D32  
                                                                  l7523 09DE  
                                                                  l7451 0824  
                                                                  l7427 0772  
                                                                  l7419 075E  
                                                                  l6539 0E34  
                                                                  l6547 0EA4  
                                                                  l6715 2426  
                                                                  l8139 13B2  
                                                                  l6563 29BE  
                                                                  l7357 3DA6  
                                                                  l7365 3DC8  
                                                                  l7613 23B8  
                                                                  l6901 361C  
                                                                  l6485 3D68  
                                                                  l6477 3D42  
                                                                  l6645 3A40  
                                                                  l6469 3AFA  
                                                                  l7525 09EA  
                                                                  l7461 083C  
                                                                  l7445 07FA  
                                                                  l7429 078A  
                                                                  l8501 19B0  
                                                                  l6741 24D4  
                                                                  l6733 24A4  
                                                                  l6725 2462  
                                                                  l6709 2414  
                                                                  l6581 2B8E  
                                                                  l7269 3D10  
                                                                  l8181 1454  
                                                                  l6565 29E0  
                                                                  l6557 2974  
                                                                  l7277 32D4  
                                                                  l7391 3B6A  
                                                                  l6671 3E50  
                                                                  l6831 3DFA  
                                                                  l6479 3D4C  
                                                                  l6647 3A46  
                                                                  l7711 25CA  
                                                                  l7543 0A26  
                                                                  l7471 0866  
                                                                  l7463 0852  
                                                                  l7455 0826  
                                                                  l8423 186C  
                                                                  l6743 24E0  
                                                                  l6735 24B0  
                                                                  l8247 1550  
                                                                  l8239 1530  
                                                                  l8175 143C  
                                                                  l8167 141C  
                                                                  l8159 13FC  
                                                                  l8255 1568  
                                                                  l8087 3FE2  
                                                                  l6559 2996  
                                                                  l8361 3692  
                                                                  l6841 370E  
                                                                  l6905 3628  
                                                                  l6921 380E  
                                                                  l7721 2654  
                                                                  l7553 0A4A  
                                                                  l7457 083A  
                                                                  l8521 19F8  
                                                                  l8513 19DC  
                                                                  l8505 19C4  
                                                                  l6737 24BC  
                                                                  l8249 155C  
                                                                  l8177 1448  
                                                                  l8169 1428  
                                                                  l8257 1584  
                                                                  l6569 2A14  
                                                                  l8371 36BA  
                                                                  l7379 3B48  
                                                                  l6931 3836  
                                                                  l7731 26A4  
                                                                  l7723 268C  
                                                                  l7811 1AAE  
                                                                  l7547 0A2C  
                                                                  l7539 0A12  
                                                                  l7483 08B4  
                                                                  l8451 18C6  
                                                                  l8443 18AE  
                                                                  l6739 24C8  
                                                                  l6747 24FA  
                                                                  l8195 1486  
                                                                  l8187 1466  
                                                                  l8267 3A6A  
                                                                  l6675 3E6C  
                                                                  l8365 369C  
                                                                  l6853 3738  
                                                                  l6845 3718  
                                                                  l6837 36EA  
                                                                  l6909 3638  
                                                                  l6933 383C  
                                                                  l6941 385E  
                                                                  l6925 381C  
                                                                  l7733 26AC  
                                                                  l7821 1B5E  
                                                                  l7645 2DAE  
                                                                  l8541 1A20  
                                                                  l8533 1A10  
                                                                  l8525 1A00  
                                                                  l8517 19F0  
                                                                  l8509 19CC  
                                                                  l6749 2538  
                                                                  l6773 2A74  
                                                                  l8197 1492  
                                                                  l8189 1472  
                                                                  l7639 2D4A  
                                                                  l7495 08F8  
                                                                  l7559 0A50  
                                                                  l8447 18C0  
                                                                  l6679 3E76  
                                                                  l8623 0FB0  
                                                                  l6857 373E  
                                                                  l7593 22F8  
                                                                  l7585 22DC  
                                                                  l6945 386E  
                                                                  l6937 3852  
                                                                  l6929 382C  
                                                                  l6961 2E82  
                                                                  l7761 272A  
                                                                  l7833 1BF0  
                                                                  l7817 1B2A  
                                                                  l7665 33F2  
                                                                  l8537 1A18  
                                                                  l8529 1A08  
                                                                  l8481 1950  
                                                                  l8473 190A  
                                                                  l6777 2A8C  
                                                                  l8289 3C9C  
                                                                  l8641 107E  
                                                                  l8617 0F82  
                                                                  l6859 3742  
                                                                  l6891 35F8  
                                                                  l6883 35D6  
                                                                  l7835 1BFA  
                                                                  l7667 342A  
                                                                  l8547 1A28  
                                                                  l8467 18FE  
                                                                  l6779 2ACC  
                                                                  l6699 0110  
                                                                  l8571 3034  
                                                                  l8635 1066  
                                                                  l8643 1086  
                                                                  l6893 35FE  
                                                                  l6877 35C4  
                                                                  l6957 2E40  
                                                                  l7765 27D6  
                                                                  l7941 2000  
                                                                  l7933 1FC8  
                                                                  l7917 1F4A  
                                                                  l7909 1F04  
                                                                  l8549 1A8E  
                                                                  l8493 198C  
                                                                  l8485 1968  
                                                                  l6789 2AF2  
                                                                  l8581 304C  
                                                                  l8653 113C  
                                                                  l7847 1CD6  
                                                                  l7927 1FA2  
                                                                  l8639 1076  
                                                                  l6889 35EE  
                                                                  l7769 2816  
                                                                  l7849 1CDC  
                                                                  l7953 2054  
                                                                  l7945 201C  
                                                                  l7937 1FE4  
                                                                  l7929 1FAC  
                                                                  l8497 19A0  
                                                                  l8489 1978  
                                                                  l8681 1216  
                                                                  l6987 3ED6  
                                                                  l7963 20A0  
                                                                  l8659 1176  
                                                                  l6989 3EDA  
                                                                  l7949 2038  
                                                                  l8685 1224  
                                                                  l7959 2070  
                                                                  l8687 1236  
                                                                  l7897 311C  
                                                                  _CFGS 007D36  
                                                                  STR_1 0649  
                                                                  STR_3 0640  
                                                                  STR_5 064F  
                                                                  STR_7 0625  
                                                                  STR_9 0611  
                                                     _UpdateLedRegister 3CDA  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u6134 3DEE  
                                                                  u6310 2E22  
                                                                  u6135 3DE8  
                                                                  u6055 2490  
                                                                  u6144 3E0E  
                                                                  u6145 3E08  
                                                   ?_CopyStringToBuffer 0021  
                                                                  u5604 0C54  
                                                                  u5524 0AFE  
                                                                  _RCIF 007CF5  
                                                                  u5605 0C4E  
                                                                  u5525 0AF8  
                                                                  u7054 232E  
                                                                  u5614 0C88  
                                                                  u5534 0B30  
                                                                  u8007 3E26  
                                                                  u7055 2326  
                                                                  u5615 0C82  
                                                                  u5535 0B2A  
                                                                  u7144 33DA  
                                                                  u5624 0CA8  
                                                                  u5544 0B66  
                                                                  u7145 33D2  
                                                                  u5625 0CA2  
                                                                  u5545 0B60  
                                                                  u6425 2164  
                                                                  u7074 234A  
                                                                  u6610 15B2  
                                                                  u7154 340C  
                                                                  u5714 0DE0  
                                                                  u5634 0CDA  
                                                                  u5554 0B98  
                                                                  u7410 12FA  
                                                                  u7075 2344  
                                                                  u7155 3404  
                                                                  u5715 0DDA  
                                                                  u5635 0CD4  
                                                                  u5555 0B92  
                                                                  u7084 237A  
                                                                  u6620 15D4  
                                                                  u7164 260C  
                                                                  u5724 0E14  
                                                                  u5644 0D0A  
                                                                  u5564 0BB8  
                                                                  u7085 2374  
                                                                  u7165 2606  
                                                                  u5725 0E0E  
                                                                  u5645 0D04  
                                                                  u5565 0BB2  
                                                                  i1l94 006C  
                                                                  u5574 0BE4  
                                                                  u7430 133A  
                                                                  u5814 29B0  
                                                                  u5575 0BDE  
                                                                  u5815 29AA  
                                                                  u7184 263C  
                                                                  u5744 0E4E  
                                                                  u5664 0D42  
                                                                  u5824 29D2  
                                                                  i1l97 00A8  
                                                                  u7185 2634  
                                                                  u5745 0E48  
                                                                  u5665 0D3C  
                                                                  u5825 29CC  
                                                                  i1l98 0074  
                                                                  u7194 266E  
                                                                  u5754 0E80  
                                                                  u5674 0D5E  
                                                                  u5594 0C20  
                                                                  u7195 2666  
                                                                  u5755 0E7A  
                                                                  u5675 0D58  
                                                                  u5595 0C1A  
                                                                  i2l84 2C82  
                                                                  u5684 0D7E  
                                                                  u5844 2A00  
                                                                  i2l85 2CCE  
                                                                  u5685 0D78  
                                                                  u5845 29F8  
                                                                  u6485 348C  
                                                                  u5694 0DAA  
                                                                  u5854 2A2E  
                                                                  i2l87 2CC4  
                                                                  u5695 0DA4  
                                                                  u5855 2A26  
                                                                  u6760 0708  
                                                                  u5784 2966  
                                                                  u5785 2960  
                                                                  u5794 2988  
                                                                  u5795 2982  
                                                                  u6860 083A  
                                                                  u5885 2BA4  
                                                                  u7920 10F6  
                                                                  u7980 11B4  
                                                ??_ModbusGetLastCommand 0027  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0098  
                                  __size_of_ModbusSetExceptionStatusBit 004E  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 0EC6  
                                                                  fsr0h 000FEA  
                                                                  fsr1h 000FE2  
                                                                  fsr0l 000FE9  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 005F  
                                                                  pclat 000FFA  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 00F4  
                                                       __end_of_GetTime 0332  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0021  
                                                        ?_years_to_days 002E  
                                                       __end_of_InitApp 36DC  
                                                          _soundTestEnd 0120  
                                                            __6sCounter 0045  
                                                           _CheckFunc20 1D0A  
                                                  ??_CopyStringToBuffer 0024  
                                                       __end_of_SetTime 022E  
                                      __size_of_GetCurrentEventDiodeNum 000E  
                                           getTotalMinutes@totalMinutes 0021  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00DA  
                                                       __end_of___awdiv 3646  
                                                                 _EEADR 000FA9  
                                                                 STR_11 0654  
                                                                 STR_21 0625  
                                                                 STR_13 0635  
                                                                 STR_15 0649  
                                                                 STR_23 0611  
                                                                 STR_17 0640  
                                                                 STR_25 0654  
                                                                 STR_19 064F  
                                                                 STR_27 0635  
                                                       __end_of___awmod 387C  
                                                                 _CARRY 007EC0  
                                                                 _EEPGD 007D37  
                                                       ___awdiv@divisor 0023  
                                                         SetHourMin@sec 0031  
                                                       __end_of___lwdiv 3B14  
                                                       __end_of___lwmod 3D82  
                                            __end_of_ModbusSendTxBuffer 3980  
                                                       ___awdiv@counter 0025  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                            _IsBusserOn 00EE  
                                                   _ModbusProcess_FC100 282C  
                                                   _ModbusProcess_FC101 3F66  
                                                   _ModbusProcess_FC102 024C  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 0356  
                                           ModbusProcess_FC3@u8StartAdd 0083  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                   ___lmul@multiplicand 0025  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 320C  
                                                        ?_LoadNextEvent 0001  
                                                                 __u8id 00F0  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                        __size_of_ResetEventFromCommand 0058  
                                             __end_of_UpdateLedRegister 3D32  
                                            ModbusBuildException@u8func 0022  
                                                        __CFG_EBTRB$OFF 000000  
                                         __end_of_ResetEventFromCommand 3CDA  
                                                       __end_of_io_poll 3072  
                                                       __end_of_low_isr 00F4  
                                                    __size_of_AddSecond 0014  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0084  
                                                        _UartBufferHead 0042  
                                                        _UartBufferTail 0044  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0089  
                                                                 status 000FD8  
                                                       years_to_days@yr 002E  
                                            __size_of_ProcessLightBlock 030A  
                                                  ?_ModbusProcess_FC100 0001  
                                                  ?_ModbusProcess_FC101 0001  
                                                  ?_ModbusProcess_FC102 0001  
                                                       _ModbusInit$1883 0024  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 0210  
                                                       __initialization 3BD2  
                                                          __end_of_main 1284  
                                                  __eeFirstSoundAddress 0047  
                                     __size_of_ModbusGetUserCommandData 000E  
                                   ModbusProcess_FC100@u8CopyBufferSize 00A2  
                                                      __end_of_LightLed 0EC6  
                                             ?_ModbusGetUserCommandData 0021  
                                     ModbusProcess_FC5@u8CopyBufferSize 0080  
                                              ??_ModbusGetUserCommandId 0023  
                                            ModbusProcess_FC1@u16Coilno 008A  
                                                                ??_main 0300  
                                                       ResetEvent@state 002B  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 32D0  
                                                            _ModbusInit 3EEE  
                                                            _ModbusPoll 1816  
                                                      __end_of_PortRead 3EEE  
                                                 _ModbusUserCommandData 005B  
                                                            __u16OutCnt 0126  
                                                        _InitUartBuffer 02BE  
                                                   _ProcessUserCommands 32D0  
                                                __size_of_ModbusCalcCRC 0094  
                                    ModbusProcess_FC16@u8CopyBufferSize 0089  
                                              ModbusSendTxBuffer@u16crc 002E  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                      ___awdiv@dividend 0021  
                                                            _SetHourMin 2EC4  
                                                            __u16errCnt 0128  
                                                        _LightStatusLed 2940  
                                                                i1l6291 00A0  
                                                                i1l6293 00A4  
                                                     ??_getTotalMinutes 0023  
                                                         _ymd_to_scalar 2DEA  
                                                             ??_GetTime 0023  
                                                     LightStatusLed@row 0028  
                                                            _ResetEvent 3A52  
                                                         main@oldMinute 0316  
                                                 CommandSetLed@ledColor 0086  
                                      ModbusProcess_FC15@u16currentCoil 008A  
                                                 ??_ModbusProcess_FC100 0039  
                                         ModbusProcess_FC100@newRawTime 009E  
                                                 ??_ModbusProcess_FC101 0030  
                                                 ??_ModbusProcess_FC102 0030  
                                                             ??_InitApp 0021  
                                                 ??_ConfigureOscillator 0021  
                                                       _currentLedBlock 0055  
                                                       ??_years_to_days 0032  
                                                                _Modbus 00F8  
                                                             ??_SetTime 0023  
                                                      __end_of_high_isr 2D0E  
                                             __playingSoundStartPosInEe 0050  
                                                         ??_ShowFailure 0029  
                                                  ?_ProcessUserCommands 0001  
                                                                ___lmul 3B74  
                                                        _UartRingBuffer 0200  
                                                SwitchOffAllDiaryLeds@i 0029  
                                                                ___wmul 0178  
                                                             ??___awdiv 0025  
                                                             ??___awmod 0025  
                                                          __lastAddress 00E2  
                                              ModbusProcess_FC20@offset 008E  
                                            ModbusProcess_FC3@u16regsno 0081  
                                                    __size_of_PlaySound 00FC  
                                              ModbusProcess_FC16@u8size 0032  
                                                             ??___lwdiv 002B  
                                                             ??___lwmod 0025  
                                                                _isleap 39EE  
                                                                _millis 01A2  
                                                                clear_0 3BDA  
                                                                clear_1 3BEC  
                                                                clear_2 3BF8  
                                                                clear_3 3C04  
                                                     __end_of_AddSecond 02BE  
                                                      ___awdiv@quotient 0027  
                                                                _mktime 158E  
                                                       ___awmod@divisor 0023  
                                                          __lastCommand 004C  
                                            ResetEventFromCommand@state 0029  
                                                       ___awmod@counter 0025  
                                                 __end_of_PortAvailable 0356  
                                                            __au8Buffer 012A  
                                                    __size_of_PortBegin 001E  
                                                             ??_io_poll 008B  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0023  
                                                          __pdataCOMRAM 005E  
                                                __end_of_InitUartBuffer 02D0  
                                                          __MODBUSCoils 00F7  
                                                            PortWrite@i 0024  
                                                   _PortClearReadBuffer 0340  
                                                    __size_of_PortWrite 0046  
                                                          __mediumconst 0000  
                                                 _SwitchOffAllDiaryLeds 3FCE  
                                                    __playingSoundSteps 0051  
                                       ModbusBuildException@u8exception 0021  
                                                             ??_low_isr 000F  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                        _ModbusUserCommandAdditional1Hi 0059  
                                        _ModbusUserCommandAdditional2Hi 00F9  
                                        _ModbusUserCommandAdditional3Hi 00FB  
                                            __size_of_UpdateLedRegister 0058  
                                        _ModbusUserCommandAdditional1Lo 005A  
                                                      __end_of_pwm_init 0294  
                                        _ModbusUserCommandAdditional2Lo 00FA  
                                        _ModbusUserCommandAdditional3Lo 00FC  
                                                __end_of_LightStatusLed 2A4E  
                                            ModbusProcess_FC1@u8bytesno 0084  
                                                      years_to_days@ret 0034  
                                              ModbusProcess_FC1@u16coil 0080  
                                                        ?_ymd_to_scalar 0080  
                                                            __u8lastRec 00F2  
                                                            __accesstop 0080  
                                               __end_of__initialization 3C1C  
                                                        _statusLedState 00F6  
                                                         __deviceStatus 0046  
                                            __end_of_ModbusProcess_FC20 1D0A  
                                            __end_of_ModbusProcess_FC21 3144  
                                            __end_of_ModbusProcess_FC15 26DA  
                                            __end_of_ModbusProcess_FC16 282C  
                                            __end_of_ModbusProcess_FC17 37F8  
                                            __end_of_ModbusProcess_FC43 20C6  
                                                       Modbus@u8txenpin 0026  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 0081  
                                        __size_of_ModbusValidateRequest 045E  
                                                 ??_ProcessUserCommands 008A  
                                     ModbusProcess_FC21@startAddrsBytes 0034  
                                         __end_of_ModbusValidateRequest 0AB8  
                                   ModbusValidateRequest@startAddrBytes 008C  
                                                            __u8txenpin 00F5  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 36DC  
                                               _GetCurrentEventDiodeNum 0332  
                                                  __end_of_fctsupported 0611  
                                         ModbusProcess_FC16@u16StartAdd 008A  
                                               SetHourMin@secToNext6Sec 0038  
                                       __size_of_ModbusGetUserCommandId 000E  
                                                   __end_of_ShowFailure 01F0  
                                          ?_ModbusSetExceptionStatusBit 0021  
                                      ModbusProcess_FC20@startAddrBytes 0085  
                                                   _ModbusUserCommandId 005C  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0021  
                                                           ?_ModbusPoll 00B5  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 003A  
                                                  _ModbusBuildException 01F0  
                                                    ??_SwitchOffAllLeds 0021  
                                                 __end_of_CommandSetLed 226A  
                                                         ??_StopPlaying 0021  
                                                            __lastCount 00E4  
                                                       ?_LightStatusLed 0021  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 002D  
                                                     __end_of_PlaySound 2B4A  
                                   ModbusProcess_FC101@u8CopyBufferSize 0030  
                                              ModbusGetRxBufferHeader@i 0023  
                                                            __pbssBANK0 00C2  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 0082  
                                                             ?_LightLed 0021  
                                                     main@debounceDelay 0315  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 024C  
                                                 ??_PortClearReadBuffer 0021  
                                                               ?_Modbus 0026  
                                                 __eeSoundAddressesList 0048  
                                                     __end_of_PortWrite 3E66  
                                                        ?_ModbusCalcCRC 0021  
                                                       PortWrite@buflen 0023  
                                                             ?_PortRead 0001  
                                                               ?___lmul 0021  
                                    ModbusProcess_FC17@u8CopyBufferSize 0030  
                                                               ?___wmul 0021  
                                                          ?_CheckFunc20 0001  
                                                 _millisecondsFromStart 00DC  
                                                        SetTime@newTime 0021  
                                                            _getHourMin 0124  
                                                               ?_isleap 0026  
                                                        ___lmul@product 0029  
                                                               ?_millis 0021  
                                                     Modbus@tmpModbusId 0028  
                                                               ?_mktime 0090  
                                      ModbusProcess_FC21@requestDataLen 0032  
                                                ?_SwitchOffAllDiaryLeds 0001  
                                                         LightLed@blink 0022  
                                          __size_of_CommandSetStatusLed 00B8  
                                         ??_ModbusSetExceptionStatusBit 0022  
                                                 ?_ModbusBuildException 0001  
                                                           __u32timeOut 0118  
                                                           __u16timeOut 00EA  
                                                       ??_ymd_to_scalar 0086  
                                                       LoadNextEvent@v1 0027  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 011C  
                                        ModbusGetRxBuffer@bBuffOverflow 0023  
                                                            ??_LightLed 0023  
                                                _ModbusGetUserCommandId 02D0  
                                                    _ModbusSendTxBuffer 38FE  
                                      __end_of_ModbusGetUserCommandData 02EC  
                                                               _GetTime 0324  
                                         __size_of_ModbusGetLastCommand 0058  
                                                       __inputRegsCount 004B  
                                                   __end_of_StopPlaying 02AA  
                                                               _InitApp 3646  
                                                   LightLed@statusShift 0028  
                                                               __Hparam 0000  
                                                               _SetTime 0210  
                                                               __Lparam 0000  
                                             ??_GetCurrentEventDiodeNum 0021  
                                                   __size_of_ModbusInit 003E  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0284  
                                                       __size_of_Modbus 002C  
                                                            _eventCount 0057  
                                                   CopyStringToBuffer@i 0027  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0021  
                                                           _ShowFailure 01CC  
                                                               ___awdiv 35AE  
                                                       __size_of___lmul 005E  
                                                               ___awmod 37F8  
                                                       __size_of___wmul 002A  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 3AB4  
                                                               ___lwmod 3D32  
                                                       SetBuzzerDuty@dc 0021  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0087  
                                           __size_of_CopyStringToBuffer 0082  
                                                   __size_of_SetHourMin 00DA  
                                                               __pcinit 3BD2  
                                                       __size_of_isleap 0064  
                                                         _SetBuzzerDuty 3F9C  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0054  
                                                       __size_of_mktime 0288  
                                                               __ptext0 0EC6  
                                                               __ptext1 027E  
                                                               __ptext2 2F9E  
                                                               __ptext3 32D0  
                                                               __ptext4 02D0  
                                                               __ptext5 320C  
                                                               __ptext6 3E66  
                                                               __ptext7 01CC  
                                                               __ptext8 00F8  
                                                               __ptext9 3EEE  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0021  
                                                main@lastButtonPinState 0318  
                                                               _io_poll 2F9E  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 002D  
                                                   __size_of_ResetEvent 0062  
                                       __end_of_ModbusGetRxBufferHeader 3DD2  
                                                       _getTotalMinutes 014E  
                                                      ___awmod@dividend 0021  
                                                         mktime@timeptr 0090  
                                                  ??_ModbusSendTxBuffer 002E  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 00B7  
                                               CopyStringToBuffer@objId 0026  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2C30  
                                                  end_of_initialization 3C1C  
                                                         __lastFunction 005D  
                                                 _ResetEventFromCommand 3C82  
                                                         __Lmediumconst 0000  
                                                               int_func 2C30  
                                                   __playingSoundCurPos 004F  
                                             UpdateLedRegister@regIndex 0021  
                                                       ??_ModbusCalcCRC 0023  
                                             __totalMinutesFromDayStart 00E8  
                                                        ??_ProcessDiary 0080  
                                                   LightLed@ststusIndex 0027  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 0082  
                                                   ModbusProcess_FC20@i 008C  
                                                   ModbusProcess_FC21@i 0038  
                                                   ModbusProcess_FC20@r 008F  
                                                   ModbusProcess_FC16@i 008D  
                                                            ??_pwm_init 0021  
                                   ModbusProcess_FC102@u8CopyBufferSize 0030  
                                                     SwitchOffAllLeds@i 0021  
                                                      ??_InitFromEeprom 002A  
                                                           ?_getHourMin 0021  
                                                        ?_SetBuzzerDuty 0021  
                                     InitFromEeprom@eeSoundCountAddress 002C  
                                     ModbusProcess_FC1@u8CopyBufferSize 0083  
                                     ModbusProcess_FC7@u8CopyBufferSize 0030  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0021  
                                                ??_ModbusBuildException 0021  
                                                     ModbusInit@u8serno 0021  
                                                             _AddSecond 02AA  
                                                        _months_to_days 3F2C  
                                                       __maxDiaryEvents 004D  
                                                     _ModbusGetRxBuffer 3B14  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0087  
                                                     _SoundPlayNextStep 2B4A  
                                                    ?_ModbusGetRxBuffer 0001  
                                    ModbusProcess_FC20@u8CopyBufferSize 008B  
                                                           _StopPlaying 0294  
                                           __end_of_ModbusProcess_FC100 2940  
                                           __end_of_ModbusProcess_FC101 3F9C  
                                           __end_of_ModbusProcess_FC102 0266  
                                           __end_of_ConfigureOscillator 035C  
                                                    ?_SoundPlayNextStep 0001  
                                                          _fctsupported 0601  
                                                     __eventFromCommand 00D2  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 0084  
                                                   ??_ModbusGetRxBuffer 0022  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 030D  
                                          ModbusValidateRequest@u16regs 009D  
                                                            main@minute 031B  
                                                   ??_SoundPlayNextStep 0029  
                                             ModbusGetLastCommand@count 0023  
                                              _ModbusGetUserCommandData 02DE  
                                                 __end_of_years_to_days 35AE  
                                                 main@buttonPinCurState 031C  
                                                      CommandSetLed@led 0089  
                                                        __end_of_Modbus 0124  
                                                        __end_of___lmul 3BD2  
                                               __end_of_getTotalMinutes 0178  
                                                        __end_of___wmul 01A2  
                                                      ??_InitUartBuffer 0021  
                                                    _ModbusProcess_FC20 1A9A  
                                                    _ModbusProcess_FC21 3072  
                                                    _ModbusProcess_FC15 257C  
                                                    _ModbusProcess_FC16 26DA  
                                                    _ModbusProcess_FC17 3770  
                                                    _ModbusProcess_FC43 1EE8  
                                                         __pidataCOMRAM 3FFE  
                                                  __size_of_CheckFunc20 01DE  
                                              ModbusPoll@discreteInputs 00B5  
                                                        __end_of_isleap 3A52  
                                                        __end_of_millis 01CC  
                                                __end_of_months_to_days 3F66  
                                             __end_of_ModbusGetRxBuffer 3B74  
                                                        __end_of_mktime 1816  
                                         ModbusProcess_FC20@recLenBytes 0080  
                                                      ??_LightStatusLed 0023  
                                                       ymd_to_scalar@mo 0082  
                                              CommandSetLed@commandData 0088  
                                                         _UartBufferLen 0043  
                                                       ymd_to_scalar@yr 0080  
                                     ModbusSetExceptionStatusBit@bitNum 0024  
                                                          ??_ModbusInit 0023  
                                                          ??_ModbusPoll 0039  
                                             __end_of_SoundPlayNextStep 2C30  
                                                            ?_AddSecond 0001  
                                                   start_initialization 3BD2  
                                                   ?_ModbusProcess_FC20 0001  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0030  
                                                   ?_ModbusProcess_FC16 0030  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 257C  
                                                ?_ResetEventFromCommand 0001  
                                                          ??_SetHourMin 0033  
                                                             __u16InCnt 0124  
                                                   __size_of_getHourMin 002A  
                                           __end_of_ProcessUserCommands 338A  
                                                          ??_ResetEvent 0029  
                                                             _PlaySound 2A4E  
                                             __size_of_SwitchOffAllLeds 0044  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 040E  
                                                      LightStatusLed@on 0021  
                                             CommandSetLed@blinkSeconds 0087  
                                                   _CommandSetStatusLed 3444  
                                                        getHourMin@hour 0021  
                                                  ??_ModbusProcess_FC20 0030  
                                                  ??_ModbusProcess_FC21 0030  
                                                  ??_ModbusProcess_FC15 0032  
                                                  ??_ModbusProcess_FC16 0080  
                                                  ??_ModbusProcess_FC17 0030  
                                                  ??_ModbusProcess_FC43 0030  
                                                              ??_Modbus 0027  
                                               ModbusProcess_FC15@bTemp 0083  
                                      __size_of_ModbusGetRxBufferHeader 0050  
                                                    __end_of_ModbusInit 3F2C  
                                                    __end_of_ModbusPoll 1A9A  
                                                             _PortBegin 022E  
                                                              ??___lmul 0029  
                                                       ??_SetBuzzerDuty 0023  
                                                              ??___wmul 0025  
                                               ModbusProcess_FC43@objId 0032  
                                                 _ModbusValidateRequest 065A  
                                                 CopyStringToBuffer@len 0023  
                                                 CopyStringToBuffer@src 0021  
                                                             _PortWrite 3E20  
                                                     __size_of_PortRead 0044  
                                                              ??_isleap 0028  
                                                              ??_millis 0025  
                                               ??_SwitchOffAllDiaryLeds 0029  
                                                              ??_mktime 0094  
                                                  CommandSetLed@soundId 0085  
                                                    __end_of_SetHourMin 2F9E  
                                                     __holdingRegsCount 004A  
                                                       ?_months_to_days 002E  
                                                        ModbusCalcCRC@i 002A  
                                                        ModbusCalcCRC@j 002B  
                                         ModbusProcess_FC21@recLenBytes 0036  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 0039  
                                                    __end_of_ResetEvent 3AB4  
                                                         __pcstackBANK0 0080  
                                                         __pcstackBANK3 0300  
                                               ModbusProcess_FC6@u16add 0083  
                                               ModbusProcess_FC6@u16val 0080  
                                                  __end_of_ProcessDiary 320C  
                                               ModbusProcess_FC3@u8size 0032  
                                               ?_ModbusGetUserCommandId 0021  
                                           __end_of_PortClearReadBuffer 034E  
                                               ModbusProcess_FC6@u8size 0032  
                                                     __size_of_high_isr 2D06  
                                             CheckFunc20@startAddrBytes 0029  
                                                              ?_GetTime 0021  
                                                            ?_PlaySound 0031  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 0038  
                                                              ?_SetTime 0021  
                                                      ___lwdiv@dividend 0027  
                                           ModbusProcess_FC43@devIdCode 0030  
                                        ModbusProcess_FC15@u8currentBit 0089  
                                        ModbusValidateRequest@u16MsgCRC 0094  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                                          ?_ShowFailure 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0033  
                                    ModbusProcess_FC43@u8CopyBufferSize 0031  
                                                              ?___awdiv 0021  
                                                              ?___awmod 0021  
                                                __size_of_CommandSetLed 01A4  
                                                              ?___lwdiv 0027  
                                                              ?___lwmod 0021  
                                                            ?_PortWrite 0021  
                                                      ?_getTotalMinutes 0021  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 3C82  
                                                     __size_of_pwm_init 0016  
                                                        ModbusInit@u8id 0023  
                                              ModbusPoll@inputRegsCount 00BB  
                                            __size_of_ModbusGetRxBuffer 0060  
                                           ModbusGetLastCommand@address 0021  
                                                         _PortAvailable 034E  
                                                         __playingEndMs 0110  
                                                      __MODBUSInputRegs 01D4  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 0080  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0053  
                                                           ??_AddSecond 0021  
                                            __size_of_SoundPlayNextStep 00E6  
                                           ModbusGetLastCommand@command 0025  
                                                    __MODBUSHoldingRegs 01B6  
                                        __end_of_ModbusGetUserCommandId 02DE  
                                                              ?_low_isr 0001  
                                                   io_poll@lastFunction 0094  
                                                 io_poll@lastEndAddress 008F  
                                                      ___lwdiv@quotient 002C  
                                                      SetHourMin@newMin 002F  
                                             _ResetEventFromCommand$917 002A  
                                                 __end_of_ymd_to_scalar 2EC4  
                                                      SetHourMin@tmpSec 0037  
                                              ProcessDiary@totalMinutes 0084  
                                                ModbusValidateRequest@i 009A  
                                                        ___wmul@product 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 0056  
                                                        LightLed@ledNum 0026  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 00C1  
                                                           __soundCount 0052  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 00C2  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 38FE  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0084  
                                                 ModbusCalcCRC@u8length 0025  
                                                          ??_getHourMin 0025  
                                                   LightStatusLed@blink 0022  
                                                  main@lastDebounceTime 0311  
                                                       __isSoundPlaying 00EF  
                                                     CheckFunc20@offset 0034  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 3E20  
                                           _ModbusSetExceptionStatusBit 3DD2  
                                                     ___wmul@multiplier 0021  
                                                __nextEventPlayDuration 00E6  
                                                              InitApp@i 0021  
                                                           _globalHours 005E  
                                                             main@curMs 031F  
                                                       main@buttonState 0319  
                                           __size_of_ModbusSendTxBuffer 0082  
                                                          ?_StopPlaying 0001  
                                                         _CommandSetLed 20C6  
                                                     _ModbusProcess_FC1 226A  
                                                     _ModbusProcess_FC3 2D0E  
                                                     _ModbusProcess_FC5 338A  
                                                     _ModbusProcess_FC6 3980  
                                                     _ModbusProcess_FC7 0266  
                                                     ___lmul@multiplier 0021  
                                                           _INTCON2bits 000FF1  
                                            ??_ModbusGetUserCommandData 0023  
                                        CommandSetStatusLed@commandData 0082  
                                                    ?_ModbusProcess_FC1 0030  
                                                    ?_ModbusProcess_FC3 0030  
                                                    ?_ModbusProcess_FC5 0030  
                                                    ?_ModbusProcess_FC6 0030  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0AB8  
                                              ?_GetCurrentEventDiodeNum 0001  
                                                    __end_of_getHourMin 014E  
                                                           ??_PlaySound 0033  
                                                 ModbusPoll@u8exception 00C0  
                                                      _SwitchOffAllLeds 3E66  
                                                      __size_of_GetTime 000E  
                                                      __size_of_InitApp 0096  
                                                              __Hrparam 0000  
                                                              __u32time 0114  
                                               _ModbusGetRxBufferHeader 3D82  
                                                         getHourMin@min 0023  
                                                   ??_ModbusProcess_FC1 0032  
                                                   ??_ModbusProcess_FC3 0033  
                                                   ??_ModbusProcess_FC5 0032  
                                                   ??_ModbusProcess_FC6 0033  
                                                   ??_ModbusProcess_FC7 0030  
                                                 __end_of_ModbusCalcCRC 3770  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 0083  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0021  
                                                ModbusProcess_FC15@regs 0030  
                                                              _PortRead 3EAA  
                                                ModbusProcess_FC16@regs 0030  
                                                ModbusProcess_FC16@temp 0087  
                                                           ??_PortWrite 0024  
                                                      __size_of___awdiv 0098  
                                                         Modbus@u8serno 0027  
                                                      __size_of___awmod 0084  
                                                      __size_of___lwdiv 0060  
                                      ModbusProcess_FC20@requestDataLen 008A  
                                                              __u8serno 00F3  
                                                      __size_of___lwmod 0050  
                                     ModbusProcess_FC3@u8CopyBufferSize 0080  
                                                              __u8state 00F4  
                                        ModbusValidateRequest@readDevId 009B  
                                                             millis@ret 0025  
                                         ModbusProcess_FC1@u16StartCoil 0085  
                                                 __size_of_ProcessDiary 00C8  
                                                           _isleap$2309 002A  
                                                           _currentTime 01F2  
                                               ??_ResetEventFromCommand 0029  
                                                      __size_of_io_poll 00D4  
                                                              _diffTime 00D8  
                                            ModbusProcess_FC100@newTime 00A3  
                                             __end_of_ModbusProcess_FC1 23FA  
                                             __end_of_ModbusProcess_FC3 2DEA  
                                             __end_of_ModbusProcess_FC5 3444  
                                             __end_of_ModbusProcess_FC6 39EE  
                                             __end_of_ModbusProcess_FC7 027E  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0029  
                                                    io_poll@lastAddress 0091  
                                                       ___lwdiv@counter 002B  
                                                              _ledBlink 0100  
                                                        ?_CommandSetLed 0001  
                                                      __size_of_low_isr 00DC  
                                                              __ptext10 3444  
                                                              __ptext11 2940  
                                                              __ptext20 3FCE  
                                                              __ptext12 20C6  
                                                              __ptext21 3C82  
                                                              __ptext13 02DE  
                                                              __ptext30 0324  
                                                              __ptext22 3A52  
                                                              __ptext14 02EC  
                                                              __ptext31 23FA  
                                                              __ptext23 1284  
                                                              __ptext15 02FA  
                                                              __ptext40 3980  
                                                              __ptext32 014E  
                                                              __ptext24 3CDA  
                                                              __ptext16 0308  
                                                              __ptext41 338A  
                                                              __ptext33 0AB8  
                                                              __ptext25 3144  
                                                              __ptext17 0316  
                                                              __ptext50 024C  
                                                              __ptext42 1EE8  
                                                              __ptext34 0332  
                                                              __ptext26 2A4E  
                                                              __ptext18 3C2A  
                                                              __ptext51 3F66  
                                                              __ptext43 387C  
                                                              __ptext35 1816  
                                                              __ptext27 2B4A  
                                                              __ptext19 0124  
                                                              __ptext60 3D32  
                                                              __ptext52 282C  
                                                              __ptext44 2D0E  
                                                              __ptext36 0340  
                                                              __ptext28 0294  
                                                              __ptext61 0210  
                                                              __ptext53 158E  
                                                              __ptext45 3072  
                                                              __ptext37 065A  
                                                              __ptext29 3F9C  
                                                              __ptext70 3E20  
                                                              __ptext62 2EC4  
                                                              __ptext54 2DEA  
                                                              __ptext46 1A9A  
                                                              __ptext38 1D0A  
                                                              __ptext71 36DC  
                                                              __ptext63 3B74  
                                                              __ptext55 34FC  
                                                              __ptext47 3770  
                                                              __ptext39 0266  
                                                              __ptext80 0356  
                                                              __ptext72 3D82  
                                                              __ptext64 37F8  
                                                              __ptext56 3F2C  
                                                              __ptext48 26DA  
                                                              __ptext81 02AA  
                                                              __ptext73 3B14  
                                                              __ptext65 35AE  
                                                              __ptext57 0178  
                                                              __ptext49 257C  
                                                              __ptext74 3EAA  
                                                              __ptext66 3DD2  
                                                              __ptext58 3AB4  
                                                              __ptext75 034E  
                                                              __ptext67 226A  
                                                              __ptext59 39EE  
                                                              __ptext76 01F0  
                                                              __ptext68 38FE  
                                                              __ptext77 3646  
                                                              __ptext69 01A2  
                                                              __ptext78 022E  
                                                              __ptext79 02BE  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 0093  
                                                         __size_of_main 03BE  
                                                  _ModbusGetLastCommand 3C2A  
                                              ShowFailure@additionalLed 0029  
                                          __size_of_ModbusProcess_FC100 0114  
                                          __size_of_ModbusProcess_FC101 0036  
                                          __size_of_ModbusProcess_FC102 001A  
                                          __size_of_ConfigureOscillator 0006  
                                                           _modbusState 00EC  
                                                          _ProcessDiary 3144  
                                                         ??_CheckFunc20 0021  
                                                              int$flags 005F  
                                                      ??_months_to_days 0030  
                                                              _pwm_init 027E  
                                                       ??_PortAvailable 0021  
                                              ModbusValidateRequest@res 0097  
                                                  __size_of_ShowFailure 0024  
                                                              main@hour 031A  
                                                      __exceptionStatus 0049  
                                                      LightLed@ledState 0021  
                                        __size_of_SwitchOffAllDiaryLeds 002E  
                                         __end_of_SwitchOffAllDiaryLeds 3FFC  
                                                    _ymd_to_scalar$2322 008A  
                                                            _INTCONbits 000FF2  
                             __end_of_ModbusGetUserCommandAdditional1Hi 0324  
                            __size_of_ModbusGetUserCommandAdditional1Hi 000E  
                                   ??_ModbusGetUserCommandAdditional1Hi 0023  
                                    ?_ModbusGetUserCommandAdditional1Hi 0021  
                                     _ModbusGetUserCommandAdditional1Hi 0316  
                             __end_of_ModbusGetUserCommandAdditional2Hi 0308  
                            __size_of_ModbusGetUserCommandAdditional2Hi 000E  
                                   ??_ModbusGetUserCommandAdditional2Hi 0023  
                                    ?_ModbusGetUserCommandAdditional2Hi 0021  
                                     _ModbusGetUserCommandAdditional2Hi 02FA  
                             __end_of_ModbusGetUserCommandAdditional1Lo 0316  
                            __size_of_ModbusGetUserCommandAdditional1Lo 000E  
                                   ??_ModbusGetUserCommandAdditional1Lo 0023  
                                    ?_ModbusGetUserCommandAdditional1Lo 0021  
                                     _ModbusGetUserCommandAdditional1Lo 0308  
                             __end_of_ModbusGetUserCommandAdditional2Lo 02FA  
                            __size_of_ModbusGetUserCommandAdditional2Lo 000E  
                                   ??_ModbusGetUserCommandAdditional2Lo 0023  
                                    ?_ModbusGetUserCommandAdditional2Lo 0021  
                                     _ModbusGetUserCommandAdditional2Lo 02EC  
                                               __size_of_InitFromEeprom 00C4  
                                                ProcessLightBlock@curMs 0022  
                                             SoundPlayNextStep@duration 0030  
                                       __end_of_GetCurrentEventDiodeNum 0340  
                                                __size_of_years_to_days 00B2  
                                                     __nextEventSoundId 004E  
                                                              isleap@yr 0026  
                                                 ModbusProcess_FC1@regs 0030  
                                                 ModbusProcess_FC3@regs 0030  
                                                              intlevel1 3FFC  
                                                              intlevel2 3FFC  
                                                 ModbusProcess_FC5@regs 0030  
                                                 ModbusProcess_FC6@regs 0030  
                                                      PlaySound@soundId 0037  
                                                          PortWrite@buf 0021  
                                                      ___lwmod@dividend 0021  
                                                 ?_ModbusGetLastCommand 0021  
                                                CheckFunc20@recLenBytes 002F  
                                             ??_ModbusGetRxBufferHeader 0022  
                                                              mktime@tt 009A  
                                                      main@totalMinutes 031D  
                                                              low_isr@c 0020  
                                                   ymd_to_scalar@scalar 008C  
                                             SoundPlayNextStep@stepDuty 002E  
                                           __size_of_ModbusProcess_FC20 0270  
                                           __size_of_ModbusProcess_FC21 00D2  
                                           __size_of_ModbusProcess_FC15 015E  
                                           __size_of_ModbusProcess_FC16 0152  
                                           __size_of_ModbusProcess_FC17 0088  
                                           __size_of_ModbusProcess_FC43 01DE  
                                                     _ProcessLightBlock 1284  
                                                 __MODBUSDiscreteInputs 00E0  
                                          __size_of_ProcessUserCommands 00BA  
                                                __size_of_LoadNextEvent 0182  
                                                    ?_ProcessLightBlock 0022  
                                                 __end_of_SetBuzzerDuty 3FCE  
                                                   ModbusPoll@u8current 00BF  
                                                   ??_ProcessLightBlock 0024  
                                                   __end_of_CheckFunc20 1EE8  
                                                       ___lwmod@divisor 0023  
                                                       ??_CommandSetLed 0080  
                                                       ___lwmod@counter 0025  
                                            __size_of_ModbusProcess_FC1 0190  
                                            __size_of_ModbusProcess_FC3 00DC  
                                            __size_of_ModbusProcess_FC5 00BA  
                                            __size_of_ModbusProcess_FC6 006E  
                                            __size_of_ModbusProcess_FC7 0018  
                                                     __currenDiaryEvent 0039  
                                               __size_of_InitUartBuffer 0012  
                                                    ModbusCalcCRC@temp2 0026  
                                                 CheckFunc20@bytesCount 0033  
                                           ModbusValidateRequest@u8regs 009C  
                                             ModbusProcess_FC15@u16coil 0080  
                                               __size_of_LightStatusLed 010E  
                                                 PlaySound@playDuration 0031  
                                                  __size_of_StopPlaying 0016  
                                                   ModbusInit@u8txenpin 0022  
                                                     ModbusCalcCRC@flag 0028  
                                                     ModbusCalcCRC@temp 002C  
                                             __end_of_ProcessLightBlock 158E  
                                               ??_ModbusValidateRequest 0080  
                                            ModbusPoll@holdingRegsCount 00BE  
                                          __size_of_PortClearReadBuffer 000E  
                                                          __u8lastError 00F1  
                                            ModbusProcess_FC15@u8bitsno 008C  
                                                   CheckFunc20@reqCount 002D  
