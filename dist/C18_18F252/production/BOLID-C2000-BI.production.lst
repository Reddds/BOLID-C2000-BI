

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Mon May 16 21:29:40 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	eeprom_data
    86  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    87  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    88  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    89  0000                     
    90                           	psect	idataCOMRAM
    91  002D0E                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _curEventNum
    95  002D0E  FF                 	db	255
    96                           
    97                           ;initializer for _currentAlarmedEventNum
    98  002D0F  FF                 	db	255
    99                           
   100                           ;initializer for _globalHours
   101  002D10  FF                 	db	255
   102                           
   103                           	psect	idataBANK0
   104  002D0A                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _buzzerOnOffDuration
   108  002D0A  0100               	dw	256
   109                           
   110                           ;initializer for _buzzerOnOffPeriod
   111  002D0C  0400               	dw	1024
   112                           
   113                           	psect	smallconst
   114  000600                     __psmallconst:
   115                           	opt stack 0
   116  000600  00                 	db	0
   117  000601                     _fctsupported:
   118                           	opt stack 0
   119  000601  01                 	db	1
   120  000602  02                 	db	2
   121  000603  03                 	db	3
   122  000604  04                 	db	4
   123  000605  05                 	db	5
   124  000606  06                 	db	6
   125  000607  07                 	db	7
   126  000608  0F                 	db	15
   127  000609  10                 	db	16
   128  00060A  11                 	db	17
   129  00060B  15                 	db	21
   130  00060C  2B                 	db	43
   131  00060D                     __end_of_fctsupported:
   132                           	opt stack 0
   133  0000                     _CCP1CONbits	set	4029
   134  0000                     _CCPR1L	set	4030
   135  0000                     _EEADR	set	4009
   136  0000                     _EECON2	set	4007
   137  0000                     _EEDATA	set	4008
   138  0000                     _INTCON2bits	set	4081
   139  0000                     _INTCONbits	set	4082
   140  0000                     _IPR1bits	set	3999
   141  0000                     _LATA	set	3977
   142  0000                     _LATAbits	set	3977
   143  0000                     _LATB	set	3978
   144  0000                     _LATCbits	set	3979
   145  0000                     _PIE1bits	set	3997
   146  0000                     _PIR1bits	set	3998
   147  0000                     _PORTCbits	set	3970
   148  0000                     _PR2	set	4043
   149  0000                     _RCONbits	set	4048
   150  0000                     _RCREG	set	4014
   151  0000                     _RCSTA	set	4011
   152  0000                     _RCSTAbits	set	4011
   153  0000                     _SPBRG	set	4015
   154  0000                     _T0CONbits	set	4053
   155  0000                     _T1CONbits	set	4045
   156  0000                     _T2CONbits	set	4042
   157  0000                     _TMR0H	set	4055
   158  0000                     _TMR0L	set	4054
   159  0000                     _TMR1H	set	4047
   160  0000                     _TMR1L	set	4046
   161  0000                     _TRISAbits	set	3986
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISCbits	set	3988
   164  0000                     _TXREG	set	4013
   165  0000                     _TXSTA	set	4012
   166  0000                     _TXSTAbits	set	4012
   167  0000                     _CARRY	set	32448
   168  0000                     _GIE	set	32663
   169  0000                     _RCIF	set	31989
   170  0000                     _RD	set	32048
   171  0000                     _TRMT	set	32097
   172  0000                     _WR	set	32049
   173  0000                     _WREN	set	32050
   174  00060D                     STR_3:
   175  00060D  54                 	db	84	;'T'
   176  00060E  61                 	db	97	;'a'
   177  00060F  62                 	db	98	;'b'
   178  000610  6C                 	db	108	;'l'
   179  000611  6F                 	db	111	;'o'
   180  000612  20                 	db	32
   181  000613  73                 	db	115	;'s'
   182  000614  20                 	db	32
   183  000615  72                 	db	114	;'r'
   184  000616  61                 	db	97	;'a'
   185  000617  73                 	db	115	;'s'
   186  000618  70                 	db	112	;'p'
   187  000619  69                 	db	105	;'i'
   188  00061A  73                 	db	115	;'s'
   189  00061B  61                 	db	97	;'a'
   190  00061C  6E                 	db	110	;'n'
   191  00061D  69                 	db	105	;'i'
   192  00061E  65                 	db	101	;'e'
   193  00061F  6D                 	db	109	;'m'
   194  000620  20                 	db	32
   195  000621  74                 	db	116	;'t'
   196  000622  75                 	db	117	;'u'
   197  000623  72                 	db	114	;'r'
   198  000624  6F                 	db	111	;'o'
   199  000625  00                 	db	0
   200  000626                     STR_12:
   201  000626  54                 	db	84	;'T'
   202  000627  61                 	db	97	;'a'
   203  000628  62                 	db	98	;'b'
   204  000629  6C                 	db	108	;'l'
   205  00062A  6F                 	db	111	;'o'
   206  00062B  20                 	db	32
   207  00062C  73                 	db	115	;'s'
   208  00062D  20                 	db	32
   209  00062E  72                 	db	114	;'r'
   210  00062F  61                 	db	97	;'a'
   211  000630  73                 	db	115	;'s'
   212  000631  70                 	db	112	;'p'
   213  000632  69                 	db	105	;'i'
   214  000633  73                 	db	115	;'s'
   215  000634  61                 	db	97	;'a'
   216  000635  6E                 	db	110	;'n'
   217  000636  69                 	db	105	;'i'
   218  000637  65                 	db	101	;'e'
   219  000638  6D                 	db	109	;'m'
   220  000639  00                 	db	0
   221  00063A                     STR_10:
   222  00063A  68                 	db	104	;'h'
   223  00063B  74                 	db	116	;'t'
   224  00063C  74                 	db	116	;'t'
   225  00063D  70                 	db	112	;'p'
   226  00063E  3A                 	db	58	;':'
   227  00063F  2F                 	db	47
   228  000640  2F                 	db	47
   229  000641  62                 	db	98	;'b'
   230  000642  6F                 	db	111	;'o'
   231  000643  6C                 	db	108	;'l'
   232  000644  69                 	db	105	;'i'
   233  000645  64                 	db	100	;'d'
   234  000646  2E                 	db	46
   235  000647  72                 	db	114	;'r'
   236  000648  75                 	db	117	;'u'
   237  000649  00                 	db	0
   238  00064A                     STR_16:
   239  00064A  52                 	db	82	;'R'
   240  00064B  61                 	db	97	;'a'
   241  00064C  73                 	db	115	;'s'
   242  00064D  70                 	db	112	;'p'
   243  00064E  69                 	db	105	;'i'
   244  00064F  73                 	db	115	;'s'
   245  000650  61                 	db	97	;'a'
   246  000651  6E                 	db	110	;'n'
   247  000652  69                 	db	105	;'i'
   248  000653  65                 	db	101	;'e'
   249  000654  00                 	db	0
   250  000655                     STR_6:
   251  000655  43                 	db	67	;'C'
   252  000656  32                 	db	50	;'2'
   253  000657  30                 	db	48	;'0'
   254  000658  30                 	db	48	;'0'
   255  000659  30                 	db	48	;'0'
   256  00065A  2D                 	db	45
   257  00065B  42                 	db	66	;'B'
   258  00065C  49                 	db	73	;'I'
   259  00065D  00                 	db	0
   260  00065E                     STR_4:
   261  00065E  42                 	db	66	;'B'
   262  00065F  4F                 	db	79	;'O'
   263  000660  4C                 	db	76	;'L'
   264  000661  49                 	db	73	;'I'
   265  000662  44                 	db	68	;'D'
   266  000663  00                 	db	0
   267  000664                     STR_8:
   268  000664  31                 	db	49	;'1'
   269  000665  2E                 	db	46
   270  000666  30                 	db	48	;'0'
   271  000667  31                 	db	49	;'1'
   272  000668  00                 	db	0
   273  000669                     STR_14:
   274  000669  4D                 	db	77	;'M'
   275  00066A  4D                 	db	77	;'M'
   276  00066B  4D                 	db	77	;'M'
   277  00066C  00                 	db	0
   278  0000                     
   279                           ; #config settings
   280  00066D  00                 	db	0	; dummy byte at the end
   281  0000                     
   282                           	psect	cinit
   283  002512                     __pcinit:
   284                           	opt stack 0
   285  002512                     start_initialization:
   286                           	opt stack 0
   287  002512                     __initialization:
   288                           	opt stack 0
   289                           
   290                           ; Clear objects allocated to BANK2 (256 bytes)
   291  002512  EE02  F000         	lfsr	0,__pbssBANK2
   292  002516  EE11 F000          	lfsr	1,256
   293  00251A                     clear_0:
   294  00251A  6AEE               	clrf	postinc0,c
   295  00251C  50E5               	movf	postdec1,w,c
   296  00251E  50E1               	movf	fsr1l,w,c
   297  002520  E1FC               	bnz	clear_0
   298  002522  50E2               	movf	fsr1h,w,c
   299  002524  E1FA               	bnz	clear_0
   300                           
   301                           ; Clear objects allocated to BANK1 (200 bytes)
   302  002526  EE01  F000         	lfsr	0,__pbssBANK1
   303  00252A  0EC8               	movlw	200
   304  00252C                     clear_1:
   305  00252C  6AEE               	clrf	postinc0,c
   306  00252E  06E8               	decf	wreg,f,c
   307  002530  E1FD               	bnz	clear_1
   308                           
   309                           ; Clear objects allocated to BANK0 (98 bytes)
   310  002532  EE00  F080         	lfsr	0,__pbssBANK0
   311  002536  0E62               	movlw	98
   312  002538                     clear_2:
   313  002538  6AEE               	clrf	postinc0,c
   314  00253A  06E8               	decf	wreg,f,c
   315  00253C  E1FD               	bnz	clear_2
   316                           
   317                           ; Clear objects allocated to COMRAM (5 bytes)
   318  00253E  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   319  002540  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   320  002542  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   321  002544  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   322  002546  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   323                           
   324                           ; Initialize objects allocated to BANK0 (4 bytes)
   325                           ; load TBLPTR registers with __pidataBANK0
   326  002548  0E0A               	movlw	low __pidataBANK0
   327  00254A  6EF6               	movwf	tblptrl,c
   328  00254C  0E2D               	movlw	high __pidataBANK0
   329  00254E  6EF7               	movwf	tblptrh,c
   330  002550  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   331  002552  6EF8               	movwf	tblptru,c
   332  002554  EE00  F0F9         	lfsr	0,__pdataBANK0
   333  002558  EE10 F004          	lfsr	1,4
   334  00255C                     copy_data0:
   335  00255C  0009               	tblrd		*+
   336  00255E  CFF5 FFEE          	movff	tablat,postinc0
   337  002562  50E5               	movf	postdec1,w,c
   338  002564  50E1               	movf	fsr1l,w,c
   339  002566  E1FA               	bnz	copy_data0
   340                           
   341                           ; Initialize objects allocated to COMRAM (3 bytes)
   342                           ; load TBLPTR registers with __pidataCOMRAM
   343  002568  0E0E               	movlw	low __pidataCOMRAM
   344  00256A  6EF6               	movwf	tblptrl,c
   345  00256C  0E2D               	movlw	high __pidataCOMRAM
   346  00256E  6EF7               	movwf	tblptrh,c
   347  002570  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   348  002572  6EF8               	movwf	tblptru,c
   349  002574  0009               	tblrd		*+	;fetch initializer
   350  002576  CFF5 F074          	movff	tablat,__pdataCOMRAM
   351  00257A  0009               	tblrd		*+	;fetch initializer
   352  00257C  CFF5 F075          	movff	tablat,__pdataCOMRAM+1
   353  002580  0009               	tblrd		*+	;fetch initializer
   354  002582  CFF5 F076          	movff	tablat,__pdataCOMRAM+2
   355  002586                     end_of_initialization:
   356                           	opt stack 0
   357  002586                     __end_of__initialization:
   358                           	opt stack 0
   359  002586  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   360  002588  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   361  00258A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   362  00258C  6EF8               	movwf	tblptru,c
   363  00258E  0100               	movlb	0
   364  002590  EFAE  F009         	goto	_main	;jump to C main() function
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1h	equ	0xFE2
   373                           fsr1l	equ	0xFE1
   374                           
   375                           	psect	bssCOMRAM
   376  00006F                     __pbssCOMRAM:
   377                           	opt stack 0
   378  00006F                     __playingSoundStartPosInEe:
   379                           	opt stack 0
   380  00006F                     	ds	1
   381  000070                     __soundCount:
   382                           	opt stack 0
   383  000070                     	ds	1
   384  000071                     __u8BufferSize:
   385                           	opt stack 0
   386  000071                     	ds	1
   387  000072                     _blinkOn:
   388                           	opt stack 0
   389  000072                     	ds	1
   390  000073                     _eventCount:
   391                           	opt stack 0
   392  000073                     	ds	1
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1h	equ	0xFE2
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	dataCOMRAM
   404  000074                     __pdataCOMRAM:
   405                           	opt stack 0
   406  000074                     _curEventNum:
   407                           	opt stack 0
   408  000074                     	ds	1
   409  000075                     _currentAlarmedEventNum:
   410                           	opt stack 0
   411  000075                     	ds	1
   412  000076                     _globalHours:
   413                           	opt stack 0
   414  000076                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1h	equ	0xFE2
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBANK0
   426  000080                     __pbssBANK0:
   427                           	opt stack 0
   428  000080                     _ledBlink:
   429                           	opt stack 0
   430  000080                     	ds	16
   431  000090                     _ledStatuses:
   432                           	opt stack 0
   433  000090                     	ds	16
   434  0000A0                     __playingEndMs:
   435                           	opt stack 0
   436  0000A0                     	ds	4
   437  0000A4                     __u32time:
   438                           	opt stack 0
   439  0000A4                     	ds	4
   440  0000A8                     _diffTime:
   441                           	opt stack 0
   442  0000A8                     	ds	4
   443  0000AC                     _eventResetSecond:
   444                           	opt stack 0
   445  0000AC                     	ds	4
   446  0000B0                     _millisecondsFromStart:
   447                           	opt stack 0
   448  0000B0                     	ds	4
   449  0000B4                     _oldBlinkOnTime:
   450                           	opt stack 0
   451  0000B4                     	ds	4
   452  0000B8                     _soundTestEnd:
   453                           	opt stack 0
   454  0000B8                     	ds	4
   455  0000BC                     __MODBUSDiscreteInputs:
   456                           	opt stack 0
   457  0000BC                     	ds	2
   458  0000BE                     __lastAddress:
   459                           	opt stack 0
   460  0000BE                     	ds	2
   461  0000C0                     __lastCount:
   462                           	opt stack 0
   463  0000C0                     	ds	2
   464  0000C2                     _blinkDuration:
   465                           	opt stack 0
   466  0000C2                     	ds	2
   467  0000C4                     _blinkPeriod:
   468                           	opt stack 0
   469  0000C4                     	ds	2
   470  0000C6                     _IsBusserOn:
   471                           	opt stack 0
   472  0000C6                     	ds	1
   473  0000C7                     _UartBufferHead:
   474                           	opt stack 0
   475  0000C7                     	ds	1
   476  0000C8                     _UartBufferLen:
   477                           	opt stack 0
   478  0000C8                     	ds	1
   479  0000C9                     _UartBufferTail:
   480                           	opt stack 0
   481  0000C9                     	ds	1
   482  0000CA                     __6sCounter:
   483                           	opt stack 0
   484  0000CA                     	ds	1
   485  0000CB                     __exceptionStatus:
   486                           	opt stack 0
   487  0000CB                     	ds	1
   488  0000CC                     __holdingRegsCount:
   489                           	opt stack 0
   490  0000CC                     	ds	1
   491  0000CD                     __inputRegsCount:
   492                           	opt stack 0
   493  0000CD                     	ds	1
   494  0000CE                     __isSoundPlaying:
   495                           	opt stack 0
   496  0000CE                     	ds	1
   497  0000CF                     __playingSoundCurPos:
   498                           	opt stack 0
   499  0000CF                     	ds	1
   500  0000D0                     __playingSoundSteps:
   501                           	opt stack 0
   502  0000D0                     	ds	1
   503  0000D1                     __u8id:
   504                           	opt stack 0
   505  0000D1                     	ds	1
   506  0000D2                     __u8lastRec:
   507                           	opt stack 0
   508  0000D2                     	ds	1
   509  0000D3                     _buzzeLoudDuration:
   510                           	opt stack 0
   511  0000D3                     	ds	1
   512  0000D4                     _buzzerAlarmPeriod:
   513                           	opt stack 0
   514  0000D4                     	ds	1
   515  0000D5                     _curEventHour:
   516                           	opt stack 0
   517  0000D5                     	ds	1
   518  0000D6                     _curEventMinute:
   519                           	opt stack 0
   520  0000D6                     	ds	1
   521  0000D7                     _curEventType:
   522                           	opt stack 0
   523  0000D7                     	ds	1
   524  0000D8                     _currentLedBlock:
   525                           	opt stack 0
   526  0000D8                     	ds	1
   527  0000D9                     _eventAcceptTime:
   528                           	opt stack 0
   529  0000D9                     	ds	1
   530  0000DA                     _globalMinutes:
   531                           	opt stack 0
   532  0000DA                     	ds	1
   533  0000DB                     _currentTime:
   534                           	opt stack 0
   535  0000DB                     	ds	4
   536  0000DF                     __MODBUSCoils:
   537                           	opt stack 0
   538  0000DF                     	ds	2
   539  0000E1                     __lastCommand:
   540                           	opt stack 0
   541  0000E1                     	ds	1
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1h	equ	0xFE2
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	dataBANK0
   553  0000F9                     __pdataBANK0:
   554                           	opt stack 0
   555  0000F9                     _buzzerOnOffDuration:
   556                           	opt stack 0
   557  0000F9                     	ds	2
   558  0000FB                     _buzzerOnOffPeriod:
   559                           	opt stack 0
   560  0000FB                     	ds	2
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1h	equ	0xFE2
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	bssBANK1
   572  000100                     __pbssBANK1:
   573                           	opt stack 0
   574  000100                     __au8Buffer:
   575                           	opt stack 0
   576  000100                     	ds	140
   577  00018C                     __MODBUSHoldingRegs:
   578                           	opt stack 0
   579  00018C                     	ds	30
   580  0001AA                     __MODBUSInputRegs:
   581                           	opt stack 0
   582  0001AA                     	ds	30
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1h	equ	0xFE2
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssBANK2
   594  000200                     __pbssBANK2:
   595                           	opt stack 0
   596  000200                     _UartRingBuffer:
   597                           	opt stack 0
   598  000200                     	ds	256
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1h	equ	0xFE2
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	cstackBANK0
   610  0000E2                     __pcstackBANK0:
   611                           	opt stack 0
   612  0000E2                     io_poll@command:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x0
   616  0000E2                     	ds	1
   617  0000E3                     io_poll@lastEndAddress:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x1
   621  0000E3                     	ds	2
   622  0000E5                     io_poll@eventEeAddr:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x3
   626  0000E5                     	ds	1
   627  0000E6                     io_poll@lastAddress:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x4
   631  0000E6                     	ds	2
   632  0000E8                     io_poll@lastCommand:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x6
   636  0000E8                     	ds	1
   637  0000E9                     io_poll@v1:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x7
   641  0000E9                     	ds	1
   642  0000EA                     main@lastMs:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x8
   646  0000EA                     	ds	4
   647  0000EE                     main@oldBuzzerOnTime:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0xC
   651  0000EE                     	ds	4
   652  0000F2                     main@oldMinute:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x10
   656  0000F2                     	ds	1
   657  0000F3                     main@hour:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x11
   661  0000F3                     	ds	1
   662  0000F4                     main@minute:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x12
   666  0000F4                     	ds	1
   667  0000F5                     main@curMs:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x13
   671  0000F5                     	ds	4
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1h	equ	0xFE2
   680                           fsr1l	equ	0xFE1
   681                           
   682                           	psect	cstackCOMRAM
   683  000001                     __pcstackCOMRAM:
   684                           	opt stack 0
   685  000001                     ??_low_isr:
   686  000001                     
   687                           ; 1 bytes @ 0x0
   688  000001                     	ds	5
   689  000006                     low_isr@c:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x5
   693  000006                     	ds	1
   694  000007                     ??_StopPlaying:
   695  000007                     ?_ModbusCalcCRC:
   696                           	opt stack 0
   697  000007                     ?___lwdiv:
   698                           	opt stack 0
   699  000007                     ?___lwmod:
   700                           	opt stack 0
   701  000007                     ?_millis:
   702                           	opt stack 0
   703  000007                     PortRead@ret:
   704                           	opt stack 0
   705  000007                     getHourMin@min:
   706                           	opt stack 0
   707  000007                     SetHourMin@newMin:
   708                           	opt stack 0
   709  000007                     UpdateLedRegister@regIndex:
   710                           	opt stack 0
   711  000007                     SwitchOffAllLeds@i:
   712                           	opt stack 0
   713  000007                     LightLed@ledState:
   714                           	opt stack 0
   715  000007                     LightStatusLed@on:
   716                           	opt stack 0
   717  000007                     InitApp@i:
   718                           	opt stack 0
   719  000007                     SetTime@newTime:
   720                           	opt stack 0
   721  000007                     ModbusSetExceptionStatusBit@value:
   722                           	opt stack 0
   723  000007                     ModbusInit@u8serno:
   724                           	opt stack 0
   725  000007                     ModbusBuildException@u8exception:
   726                           	opt stack 0
   727  000007                     ModbusGetLastCommand@count:
   728                           	opt stack 0
   729  000007                     CopyStringToBuffer@src:
   730                           	opt stack 0
   731  000007                     PortWrite@buf:
   732                           	opt stack 0
   733  000007                     SetBuzzerDuty@dc:
   734                           	opt stack 0
   735  000007                     ___lwdiv@dividend:
   736                           	opt stack 0
   737  000007                     ___lwmod@dividend:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x6
   741  000007                     	ds	1
   742  000008                     ??_ModbusSetExceptionStatusBit:
   743  000008                     ??_ModbusGetRxBuffer:
   744  000008                     ??_ProcessLightBlock:
   745  000008                     getHourMin@hour:
   746                           	opt stack 0
   747  000008                     SetHourMin@newHour:
   748                           	opt stack 0
   749  000008                     LightLed@blink:
   750                           	opt stack 0
   751  000008                     LightStatusLed@blink:
   752                           	opt stack 0
   753  000008                     ModbusInit@u8txenpin:
   754                           	opt stack 0
   755  000008                     ModbusBuildException@u8func:
   756                           	opt stack 0
   757  000008                     CopyStringToBuffer@len:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x7
   761  000008                     	ds	1
   762  000009                     ??_LoadNextEvent:
   763  000009                     ??_ModbusCalcCRC:
   764  000009                     ??_LightLed:
   765  000009                     ??_LightStatusLed:
   766  000009                     ??_SetBuzzerDuty:
   767  000009                     ??_CopyStringToBuffer:
   768  000009                     PortWrite@buflen:
   769                           	opt stack 0
   770  000009                     ModbusGetRxBuffer@bBuffOverflow:
   771                           	opt stack 0
   772  000009                     ModbusGetLastCommand@address:
   773                           	opt stack 0
   774  000009                     ___lwdiv@divisor:
   775                           	opt stack 0
   776  000009                     ___lwmod@divisor:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x8
   780  000009                     	ds	1
   781  00000A                     PortWrite@i:
   782                           	opt stack 0
   783  00000A                     ModbusSetExceptionStatusBit@bitNum:
   784                           	opt stack 0
   785  00000A                     CopyStringToBuffer@objId:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x9
   789  00000A                     	ds	1
   790  00000B                     LoadNextEvent@v1:
   791                           	opt stack 0
   792  00000B                     ModbusInit@u8id:
   793                           	opt stack 0
   794  00000B                     CopyStringToBuffer@i:
   795                           	opt stack 0
   796  00000B                     ___lwdiv@counter:
   797                           	opt stack 0
   798  00000B                     ___lwmod@counter:
   799                           	opt stack 0
   800  00000B                     ModbusCalcCRC@temp2:
   801                           	opt stack 0
   802  00000B                     millis@ret:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0xA
   806  00000B                     	ds	1
   807  00000C                     ?_isleap:
   808                           	opt stack 0
   809  00000C                     LightLed@ledNum:
   810                           	opt stack 0
   811  00000C                     ProcessLightBlock@curMs:
   812                           	opt stack 0
   813  00000C                     LoadNextEvent@hour:
   814                           	opt stack 0
   815  00000C                     Modbus@u8serno:
   816                           	opt stack 0
   817  00000C                     ___lwdiv@quotient:
   818                           	opt stack 0
   819  00000C                     isleap@yr:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0xB
   823  00000C                     	ds	1
   824  00000D                     LightLed@ststusIndex:
   825                           	opt stack 0
   826  00000D                     LoadNextEvent@minute:
   827                           	opt stack 0
   828  00000D                     Modbus@u8txenpin:
   829                           	opt stack 0
   830  00000D                     ModbusCalcCRC@flag:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0xC
   834  00000D                     	ds	1
   835  00000E                     ??_isleap:
   836  00000E                     ?_months_to_days:
   837                           	opt stack 0
   838  00000E                     ?_years_to_days:
   839                           	opt stack 0
   840  00000E                     LightLed@statusShift:
   841                           	opt stack 0
   842  00000E                     LightStatusLed@row:
   843                           	opt stack 0
   844  00000E                     Modbus@u8id:
   845                           	opt stack 0
   846  00000E                     months_to_days@month:
   847                           	opt stack 0
   848  00000E                     years_to_days@yr:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0xD
   852  00000E                     	ds	1
   853  00000F                     ??_InitFromEeprom:
   854  00000F                     ??_SoundPlayNextStep:
   855  00000F                     ??_ResetEvent:
   856  00000F                     ??_ProcessDiary:
   857  00000F                     ModbusCalcCRC@u8length:
   858                           	opt stack 0
   859  00000F                     _isleap$2159:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0xE
   863  00000F                     	ds	1
   864  000010                     ??_months_to_days:
   865  000010                     ModbusCalcCRC@i:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0xF
   869  000010                     	ds	1
   870  000011                     ResetEvent@state:
   871                           	opt stack 0
   872  000011                     ModbusCalcCRC@j:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x10
   876  000011                     	ds	1
   877  000012                     ??_years_to_days:
   878  000012                     _ResetEvent$852:
   879                           	opt stack 0
   880  000012                     ModbusCalcCRC@temp:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x11
   884  000012                     	ds	1
   885  000013                     ProcessDiary@hour:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x12
   889  000013                     	ds	1
   890  000014                     ??_ModbusValidateRequest:
   891  000014                     SoundPlayNextStep@duration:
   892                           	opt stack 0
   893  000014                     ProcessDiary@minute:
   894                           	opt stack 0
   895  000014                     ModbusSendTxBuffer@u16crc:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x13
   899  000014                     	ds	1
   900  000015                     PlaySound@playDuration:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x14
   904  000015                     	ds	1
   905  000016                     ??_ModbusProcess_FC5:
   906  000016                     ??_ModbusProcess_FC15:
   907  000016                     ??_ModbusProcess_FC17:
   908  000016                     ??_ModbusProcess_FC21:
   909  000016                     ??_PlaySound:
   910  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   911                           	opt stack 0
   912  000016                     ModbusProcess_FC43@devIdCode:
   913                           	opt stack 0
   914  000016                     ModbusProcess_FC1@regs:
   915                           	opt stack 0
   916  000016                     ModbusProcess_FC3@regs:
   917                           	opt stack 0
   918  000016                     ModbusProcess_FC6@regs:
   919                           	opt stack 0
   920  000016                     ModbusProcess_FC16@regs:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x15
   924  000016                     	ds	1
   925  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   926                           	opt stack 0
   927  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x16
   931  000017                     	ds	1
   932  000018                     ??_ModbusProcess_FC1:
   933  000018                     ModbusProcess_FC3@u8size:
   934                           	opt stack 0
   935  000018                     ModbusProcess_FC6@u8size:
   936                           	opt stack 0
   937  000018                     ModbusProcess_FC16@u8size:
   938                           	opt stack 0
   939  000018                     ModbusProcess_FC17@i:
   940                           	opt stack 0
   941  000018                     ModbusProcess_FC21@requestDataLen:
   942                           	opt stack 0
   943  000018                     ModbusProcess_FC43@objId:
   944                           	opt stack 0
   945  000018                     ModbusValidateRequest@startAddrBytes:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x17
   949  000018                     	ds	1
   950  000019                     ??_ModbusProcess_FC3:
   951  000019                     ??_ModbusProcess_FC6:
   952  000019                     ??_ModbusProcess_FC16:
   953  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x18
   957  000019                     	ds	1
   958  00001A                     PlaySound@soundId:
   959                           	opt stack 0
   960  00001A                     ModbusProcess_FC21@startAddrsBytes:
   961                           	opt stack 0
   962  00001A                     years_to_days@ret:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x19
   966  00001A                     	ds	1
   967  00001B                     PlaySound@soundAddr:
   968                           	opt stack 0
   969  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   970                           	opt stack 0
   971  00001B                     ModbusProcess_FC1@u16coil:
   972                           	opt stack 0
   973  00001B                     ModbusProcess_FC6@u16val:
   974                           	opt stack 0
   975  00001B                     ModbusProcess_FC15@u16coil:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x1A
   979  00001B                     	ds	1
   980  00001C                     ??_CommandSetStatusLed:
   981  00001C                     ModbusProcess_FC5@u16coil:
   982                           	opt stack 0
   983  00001C                     ModbusProcess_FC21@recLenBytes:
   984                           	opt stack 0
   985  00001C                     ModbusValidateRequest@recLenBytes:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0x1B
   989  00001C                     	ds	1
   990  00001D                     CommandSetStatusLed@commandData:
   991                           	opt stack 0
   992  00001D                     ModbusProcess_FC1@u8currentBit:
   993                           	opt stack 0
   994  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   995                           	opt stack 0
   996  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   997                           	opt stack 0
   998  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   999                           	opt stack 0
  1000  00001D                     ModbusProcess_FC16@temp:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x1C
  1004  00001D                     	ds	1
  1005  00001E                     ?_ymd_to_scalar:
  1006                           	opt stack 0
  1007  00001E                     CommandSetStatusLed@led:
  1008                           	opt stack 0
  1009  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
  1010                           	opt stack 0
  1011  00001E                     ModbusProcess_FC5@regs:
  1012                           	opt stack 0
  1013  00001E                     ModbusProcess_FC15@bTemp:
  1014                           	opt stack 0
  1015  00001E                     ModbusProcess_FC21@i:
  1016                           	opt stack 0
  1017  00001E                     ModbusProcess_FC3@u16regsno:
  1018                           	opt stack 0
  1019  00001E                     ModbusProcess_FC6@u16add:
  1020                           	opt stack 0
  1021  00001E                     ymd_to_scalar@yr:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x1D
  1025  00001E                     	ds	1
  1026  00001F                     ModbusProcess_FC1@u8bytesno:
  1027                           	opt stack 0
  1028  00001F                     ModbusProcess_FC5@u8currentBit:
  1029                           	opt stack 0
  1030  00001F                     ModbusProcess_FC15@u8frameByte:
  1031                           	opt stack 0
  1032  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x1E
  1036  00001F                     	ds	1
  1037  000020                     ModbusProcess_FC3@u8StartAdd:
  1038                           	opt stack 0
  1039  000020                     ModbusValidateRequest@u16MsgCRC:
  1040                           	opt stack 0
  1041  000020                     ModbusProcess_FC1@u16StartCoil:
  1042                           	opt stack 0
  1043  000020                     ModbusProcess_FC15@u16StartCoil:
  1044                           	opt stack 0
  1045  000020                     ModbusProcess_FC16@u16StartAdd:
  1046                           	opt stack 0
  1047  000020                     ymd_to_scalar@mo:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x1F
  1051  000020                     	ds	1
  1052  000021                     ModbusProcess_FC3@i:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x20
  1056  000021                     	ds	1
  1057  000022                     ModbusValidateRequest@isSupported:
  1058                           	opt stack 0
  1059  000022                     ModbusProcess_FC16@u8regsno:
  1060                           	opt stack 0
  1061  000022                     ModbusProcess_FC1@u16currentCoil:
  1062                           	opt stack 0
  1063  000022                     ModbusProcess_FC15@u16Coilno:
  1064                           	opt stack 0
  1065  000022                     ymd_to_scalar@day:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x21
  1069  000022                     	ds	1
  1070  000023                     ModbusProcess_FC16@i:
  1071                           	opt stack 0
  1072  000023                     ModbusValidateRequest@u16count:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x22
  1076  000023                     	ds	1
  1077  000024                     ??_ymd_to_scalar:
  1078  000024                     ModbusProcess_FC1@u8bitsno:
  1079                           	opt stack 0
  1080  000024                     ModbusProcess_FC15@regs:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x23
  1084  000024                     	ds	1
  1085  000025                     ModbusValidateRequest@i:
  1086                           	opt stack 0
  1087  000025                     ModbusProcess_FC15@u8currentBit:
  1088                           	opt stack 0
  1089  000025                     ModbusProcess_FC1@u16Coilno:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x24
  1093  000025                     	ds	1
  1094  000026                     ModbusValidateRequest@readDevId:
  1095                           	opt stack 0
  1096  000026                     ModbusProcess_FC15@u16currentCoil:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x25
  1100  000026                     	ds	1
  1101  000027                     ModbusValidateRequest@u8regs:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x26
  1105  000027                     	ds	1
  1106  000028                     ModbusProcess_FC15@u8bitsno:
  1107                           	opt stack 0
  1108  000028                     ModbusValidateRequest@u16regs:
  1109                           	opt stack 0
  1110  000028                     _ymd_to_scalar$2172:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x27
  1114  000028                     	ds	2
  1115  00002A                     ModbusPoll@discreteInputs:
  1116                           	opt stack 0
  1117  00002A                     ymd_to_scalar@scalar:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x29
  1121  00002A                     	ds	2
  1122  00002C                     ModbusPoll@coils:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x2B
  1126  00002C                     	ds	1
  1127  00002D                     ModbusPoll@inputRegs:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x2C
  1131  00002D                     	ds	1
  1132  00002E                     ?_mktime:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x2D
  1136  00002E                     	ds	1
  1137  00002F                     ModbusPoll@inputRegsCount:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x2E
  1141  00002F                     	ds	1
  1142  000030                     ModbusPoll@holdingRegs:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x2F
  1146  000030                     	ds	2
  1147  000032                     ??_mktime:
  1148  000032                     ModbusPoll@holdingRegsCount:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x31
  1152  000032                     	ds	1
  1153  000033                     ModbusPoll@u8current:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x32
  1157  000033                     	ds	1
  1158  000034                     ModbusPoll@i8state:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x33
  1162  000034                     	ds	1
  1163  000035                     ModbusPoll@u8exception:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x34
  1167  000035                     	ds	11
  1168  000040                     mktime@tt:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x3F
  1172  000040                     	ds	4
  1173  000044                     mktime@timeptr:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x43
  1177  000044                     	ds	1
  1178  000045                     SetTimeFromRegs@daySec:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x44
  1182  000045                     	ds	1
  1183  000046                     SetTimeFromRegs@yearMonth:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x45
  1187  000046                     	ds	1
  1188  000047                     ??_SetTimeFromRegs:
  1189                           
  1190                           ; 1 bytes @ 0x46
  1191  000047                     	ds	2
  1192  000049                     SetTimeFromRegs@newRawTime:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x48
  1196  000049                     	ds	4
  1197  00004D                     SetTimeFromRegs@hourMin:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x4C
  1201  00004D                     	ds	1
  1202  00004E                     SetTimeFromRegs@newTime:
  1203                           	opt stack 0
  1204                           
  1205                           ; 18 bytes @ 0x4D
  1206  00004E                     	ds	18
  1207  000060                     SetTimeCommand@hourMin:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x5F
  1211  000060                     	ds	2
  1212  000062                     SetTimeCommand@daySec:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x61
  1216  000062                     	ds	2
  1217  000064                     SetTimeCommand@yearMonth:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x63
  1221  000064                     	ds	2
  1222  000066                     ??_io_poll:
  1223                           
  1224                           ; 1 bytes @ 0x65
  1225  000066                     	ds	4
  1226  00006A                     ??_main:
  1227                           
  1228                           ; 1 bytes @ 0x69
  1229  00006A                     	ds	5
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           
  1240 ;;
  1241 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1242 ;;
  1243 ;; *************** function _main *****************
  1244 ;; Defined at:
  1245 ;;		line 716 in file "main.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;		None
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  minute          1   18[BANK0 ] unsigned char 
  1250 ;;  hour            1   17[BANK0 ] unsigned char 
  1251 ;;  curMs           4   19[BANK0 ] unsigned long 
  1252 ;;  oldBuzzerOnT    4   12[BANK0 ] unsigned long 
  1253 ;;  lastMs          4    8[BANK0 ] unsigned long 
  1254 ;;  oldMinute       1   16[BANK0 ] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1264 ;;      Params:         0       0       0       0       0       0       0
  1265 ;;      Locals:         0      15       0       0       0       0       0
  1266 ;;      Temps:          5       0       0       0       0       0       0
  1267 ;;      Totals:         5      15       0       0       0       0       0
  1268 ;;Total ram usage:       20 bytes
  1269 ;; Hardware stack levels required when called:    9
  1270 ;; This function calls:
  1271 ;;		_AddSecond
  1272 ;;		_ConfigureOscillator
  1273 ;;		_GetTime
  1274 ;;		_InitApp
  1275 ;;		_InitFromEeprom
  1276 ;;		_LightStatusLed
  1277 ;;		_ModbusPoll
  1278 ;;		_ProcessDiary
  1279 ;;		_ProcessLightBlock
  1280 ;;		_ResetEvent
  1281 ;;		_SetBuzzerDuty
  1282 ;;		_SoundPlayNextStep
  1283 ;;		_getHourMin
  1284 ;;		_io_poll
  1285 ;;		_millis
  1286 ;;		_pwm_init
  1287 ;; This function is called by:
  1288 ;;		Startup code after reset
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text0
  1293  00135C                     __ptext0:
  1294                           	opt stack 0
  1295  00135C                     _main:
  1296                           	opt stack 22
  1297                           
  1298                           ;incstack = 0
  1299  00135C  FFFF               	dw	65535
  1300                           
  1301                           ;main.c: 719: ConfigureOscillator();
  1302  00135E  EC82  F016         	call	_ConfigureOscillator	;wreg free
  1303                           
  1304                           ;main.c: 722: InitApp();
  1305  001362  EC46  F012         	call	_InitApp	;wreg free
  1306                           
  1307                           ;main.c: 726: InitFromEeprom();
  1308  001366  ECB3  F00C         	call	_InitFromEeprom	;wreg free
  1309                           
  1310                           ;main.c: 735: unsigned long lastMs = millis();
  1311  00136A  ECD1  F015         	call	_millis	;wreg free
  1312  00136E  C007  F0EA         	movff	?_millis,main@lastMs
  1313  001372  C008  F0EB         	movff	?_millis+1,main@lastMs+1
  1314  001376  C009  F0EC         	movff	?_millis+2,main@lastMs+2
  1315  00137A  C00A  F0ED         	movff	?_millis+3,main@lastMs+3
  1316                           
  1317                           ;main.c: 738: pwm_init();
  1318  00137E  EC62  F016         	call	_pwm_init	;wreg free
  1319                           
  1320                           ;main.c: 744: unsigned long oldBuzzerOnTime = 0;
  1321  001382  0100               	movlb	0	; () banked
  1322  001384  6BEE               	clrf	main@oldBuzzerOnTime& (0+255),b
  1323  001386  6BEF               	clrf	(main@oldBuzzerOnTime+1)& (0+255),b
  1324  001388  6BF0               	clrf	(main@oldBuzzerOnTime+2)& (0+255),b
  1325  00138A  6BF1               	clrf	(main@oldBuzzerOnTime+3)& (0+255),b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 745: uint8_t oldMinute = 0xff;
  1329  00138C  69F2               	setf	main@oldMinute& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 747: LightStatusLed(0x07, 1, 0);
  1333  00138E  0E01               	movlw	1
  1334  001390  6E07               	movwf	LightStatusLed@on,c
  1335  001392  0E00               	movlw	0
  1336  001394  6E08               	movwf	LightStatusLed@blink,c
  1337  001396  0E07               	movlw	7
  1338  001398  EC42  F00E         	call	_LightStatusLed
  1339                           
  1340                           ;main.c: 748: LightStatusLed(0x05, 1, 1);
  1341  00139C  0E01               	movlw	1
  1342  00139E  6E07               	movwf	LightStatusLed@on,c
  1343  0013A0  6E08               	movwf	LightStatusLed@blink,c
  1344  0013A2  0E05               	movlw	5
  1345  0013A4  EC42  F00E         	call	_LightStatusLed
  1346  0013A8                     l6362:
  1347  0013A8  FFFF               	dw	65535	; assembler added errata NOP
  1348                           
  1349                           ;main.c: 750: {
  1350                           ;main.c: 751: unsigned long curMs = millis();
  1351  0013AA  ECD1  F015         	call	_millis	;wreg free
  1352  0013AE  C007  F0F5         	movff	?_millis,main@curMs
  1353  0013B2  C008  F0F6         	movff	?_millis+1,main@curMs+1
  1354  0013B6  C009  F0F7         	movff	?_millis+2,main@curMs+2
  1355  0013BA  C00A  F0F8         	movff	?_millis+3,main@curMs+3
  1356                           
  1357                           ;main.c: 752: ProcessLightBlock(&curMs);
  1358  0013BE  0EF5               	movlw	main@curMs& (0+255)
  1359  0013C0  EC39  F006         	call	_ProcessLightBlock
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 756: if(currentAlarmedEventNum != 0xff)
  1363  0013C4  2875               	incf	_currentAlarmedEventNum,w,c
  1364  0013C6  E044               	bz	l6388
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;main.c: 757: {
  1368                           ;main.c: 758: diffTime = curMs - oldBuzzerOnTime;
  1369  0013C8  51EE               	movf	main@oldBuzzerOnTime& (0+255),w,b
  1370  0013CA  5DF5               	subwf	main@curMs& (0+255),w,b
  1371  0013CC  6FA8               	movwf	_diffTime& (0+255),b
  1372  0013CE  51EF               	movf	(main@oldBuzzerOnTime+1)& (0+255),w,b
  1373  0013D0  59F6               	subwfb	(main@curMs+1)& (0+255),w,b
  1374  0013D2  6FA9               	movwf	(_diffTime+1)& (0+255),b
  1375  0013D4  51F0               	movf	(main@oldBuzzerOnTime+2)& (0+255),w,b
  1376  0013D6  59F7               	subwfb	(main@curMs+2)& (0+255),w,b
  1377  0013D8  6FAA               	movwf	(_diffTime+2)& (0+255),b
  1378  0013DA  51F1               	movf	(main@oldBuzzerOnTime+3)& (0+255),w,b
  1379  0013DC  59F8               	subwfb	(main@curMs+3)& (0+255),w,b
  1380  0013DE  6FAB               	movwf	(_diffTime+3)& (0+255),b
  1381                           
  1382                           ;main.c: 759: if(diffTime > buzzerOnOffPeriod)
  1383  0013E0  51FB               	movf	_buzzerOnOffPeriod& (0+255),w,b
  1384  0013E2  6E6A               	movwf	??_main& (0+255),c
  1385  0013E4  51FC               	movf	(_buzzerOnOffPeriod+1)& (0+255),w,b
  1386  0013E6  6E6B               	movwf	(??_main+1)& (0+255),c
  1387  0013E8  6A6C               	clrf	(??_main+2)& (0+255),c
  1388  0013EA  6A6D               	clrf	(??_main+3)& (0+255),c
  1389  0013EC  51A8               	movf	_diffTime& (0+255),w,b
  1390  0013EE  5C6A               	subwf	??_main,w,c
  1391  0013F0  51A9               	movf	(_diffTime+1)& (0+255),w,b
  1392  0013F2  586B               	subwfb	??_main+1,w,c
  1393  0013F4  51AA               	movf	(_diffTime+2)& (0+255),w,b
  1394  0013F6  586C               	subwfb	??_main+2,w,c
  1395  0013F8  51AB               	movf	(_diffTime+3)& (0+255),w,b
  1396  0013FA  586D               	subwfb	??_main+3,w,c
  1397  0013FC  E215               	bc	l6382
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 760: {
  1401                           ;main.c: 761: SetBuzzerDuty(buzzeLoudDuration);
  1402  0013FE  C0D3  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  1403  001402  6A08               	clrf	SetBuzzerDuty@dc+1,c
  1404  001404  EC73  F015         	call	_SetBuzzerDuty	;wreg free
  1405                           
  1406                           ;main.c: 762: PR2 = buzzerAlarmPeriod;
  1407  001408  C0D4  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  1408                           
  1409                           ;main.c: 763: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  1410  00140C  9494               	bcf	3988,2,c	;volatile
  1411  00140E  84CA               	bsf	4042,2,c	;volatile
  1412  001410  0E01               	movlw	1
  1413  001412  0100               	movlb	0	; () banked
  1414  001414  6FC6               	movwf	_IsBusserOn& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 764: oldBuzzerOnTime = curMs;
  1418  001416  C0F5  F0EE         	movff	main@curMs,main@oldBuzzerOnTime
  1419  00141A  C0F6  F0EF         	movff	main@curMs+1,main@oldBuzzerOnTime+1
  1420  00141E  C0F7  F0F0         	movff	main@curMs+2,main@oldBuzzerOnTime+2
  1421  001422  C0F8  F0F1         	movff	main@curMs+3,main@oldBuzzerOnTime+3
  1422                           
  1423                           ;main.c: 765: }
  1424  001426  D014               	goto	l6388
  1425  001428                     l6382:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;main.c: 766: else if(IsBusserOn && diffTime > buzzerOnOffDuration)
  1429  001428  51C6               	movf	_IsBusserOn& (0+255),w,b
  1430  00142A  E012               	bz	l6388
  1431                           
  1432                           ; BSR set to: 0
  1433  00142C  51F9               	movf	_buzzerOnOffDuration& (0+255),w,b
  1434  00142E  6E6A               	movwf	??_main& (0+255),c
  1435  001430  51FA               	movf	(_buzzerOnOffDuration+1)& (0+255),w,b
  1436  001432  6E6B               	movwf	(??_main+1)& (0+255),c
  1437  001434  6A6C               	clrf	(??_main+2)& (0+255),c
  1438  001436  6A6D               	clrf	(??_main+3)& (0+255),c
  1439  001438  51A8               	movf	_diffTime& (0+255),w,b
  1440  00143A  5C6A               	subwf	??_main,w,c
  1441  00143C  51A9               	movf	(_diffTime+1)& (0+255),w,b
  1442  00143E  586B               	subwfb	??_main+1,w,c
  1443  001440  51AA               	movf	(_diffTime+2)& (0+255),w,b
  1444  001442  586C               	subwfb	??_main+2,w,c
  1445  001444  51AB               	movf	(_diffTime+3)& (0+255),w,b
  1446  001446  586D               	subwfb	??_main+3,w,c
  1447  001448  E203               	bc	l6388
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 767: {
  1451                           ;main.c: 768: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  1452  00144A  94CA               	bcf	4042,2,c	;volatile
  1453  00144C  8494               	bsf	3988,2,c	;volatile
  1454  00144E  6BC6               	clrf	_IsBusserOn& (0+255),b
  1455  001450                     l6388:
  1456  001450  FFFF               	dw	65535	; assembler added errata NOP
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 769: }
  1460                           ;main.c: 770: }
  1461                           ;main.c: 772: if(_isSoundPlaying && curMs >= _playingEndMs)
  1462  001452  51CE               	movf	__isSoundPlaying& (0+255),w,b
  1463  001454  E00B               	bz	l6394
  1464                           
  1465                           ; BSR set to: 0
  1466  001456  51A0               	movf	__playingEndMs& (0+255),w,b
  1467  001458  5DF5               	subwf	main@curMs& (0+255),w,b
  1468  00145A  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1469  00145C  59F6               	subwfb	(main@curMs+1)& (0+255),w,b
  1470  00145E  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1471  001460  59F7               	subwfb	(main@curMs+2)& (0+255),w,b
  1472  001462  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1473  001464  59F8               	subwfb	(main@curMs+3)& (0+255),w,b
  1474  001466  E302               	bnc	l6394
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 773: {
  1478                           ;main.c: 774: SoundPlayNextStep();
  1479  001468  EC54  F010         	call	_SoundPlayNextStep	;wreg free
  1480  00146C                     l6394:
  1481                           
  1482                           ;main.c: 775: }
  1483                           ;main.c: 778: if(PORTCbits.RC1 == 0)
  1484  00146C  B282               	btfsc	3970,1,c	;volatile
  1485  00146E  D005               	goto	l6400
  1486                           
  1487                           ;main.c: 779: {
  1488                           ;main.c: 781: if(currentAlarmedEventNum != 0xff)
  1489  001470  2875               	incf	_currentAlarmedEventNum,w,c
  1490  001472  E003               	bz	l6400
  1491                           
  1492                           ;main.c: 782: {
  1493                           ;main.c: 783: ResetEvent(1);
  1494  001474  0E01               	movlw	1
  1495  001476  EC19  F015         	call	_ResetEvent
  1496  00147A                     l6400:
  1497  00147A  FFFF               	dw	65535	; assembler added errata NOP
  1498                           
  1499                           ;main.c: 784: }
  1500                           ;main.c: 801: }
  1501                           ;main.c: 808: if(curMs - lastMs >= 1000)
  1502  00147C  0100               	movlb	0	; () banked
  1503  00147E  51EA               	movf	main@lastMs& (0+255),w,b
  1504  001480  5DF5               	subwf	main@curMs& (0+255),w,b
  1505  001482  6E6A               	movwf	??_main& (0+255),c
  1506  001484  51EB               	movf	(main@lastMs+1)& (0+255),w,b
  1507  001486  59F6               	subwfb	(main@curMs+1)& (0+255),w,b
  1508  001488  6E6B               	movwf	(??_main+1)& (0+255),c
  1509  00148A  51EC               	movf	(main@lastMs+2)& (0+255),w,b
  1510  00148C  59F7               	subwfb	(main@curMs+2)& (0+255),w,b
  1511  00148E  6E6C               	movwf	(??_main+2)& (0+255),c
  1512  001490  51ED               	movf	(main@lastMs+3)& (0+255),w,b
  1513  001492  59F8               	subwfb	(main@curMs+3)& (0+255),w,b
  1514  001494  6E6D               	movwf	(??_main+3)& (0+255),c
  1515  001496  506D               	movf	??_main+3,w,c
  1516  001498  106C               	iorwf	??_main+2,w,c
  1517  00149A  E105               	bnz	u5670
  1518  00149C  0EE8               	movlw	232
  1519  00149E  5C6A               	subwf	??_main,w,c
  1520  0014A0  0E03               	movlw	3
  1521  0014A2  586B               	subwfb	??_main+1,w,c
  1522  0014A4  E34A               	bnc	l6430
  1523  0014A6                     u5670:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 809: {
  1527                           ;main.c: 810: AddSecond();
  1528  0014A6  EC6B  F016         	call	_AddSecond	;wreg free
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 812: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1532  0014AA  2875               	incf	_currentAlarmedEventNum,w,c
  1533  0014AC  E015               	bz	l6410
  1534                           
  1535                           ; BSR set to: 0
  1536  0014AE  EC7A  F016         	call	_GetTime	;wreg free
  1537  0014B2  6ED9               	movwf	fsr2l,c
  1538  0014B4  6ADA               	clrf	fsr2h,c
  1539  0014B6  0100               	movlb	0	; () banked
  1540  0014B8  51AC               	movf	_eventResetSecond& (0+255),w,b
  1541  0014BA  5CDE               	subwf	postinc2,w,c
  1542  0014BC  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1543  0014BE  58DE               	subwfb	postinc2,w,c
  1544  0014C0  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1545  0014C2  58DE               	subwfb	postinc2,w,c
  1546  0014C4  50DE               	movf	postinc2,w,c
  1547  0014C6  0A80               	xorlw	128
  1548  0014C8  6E6E               	movwf	(??_main+4)& (0+255),c
  1549  0014CA  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1550  0014CC  0A80               	xorlw	128
  1551  0014CE  586E               	subwfb	(??_main+4)& (0+255),w,c
  1552  0014D0  E303               	bnc	l6410
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;main.c: 813: {
  1556                           ;main.c: 814: ResetEvent(0);
  1557  0014D2  0E00               	movlw	0
  1558  0014D4  EC19  F015         	call	_ResetEvent
  1559  0014D8                     l6410:
  1560                           
  1561                           ;main.c: 815: }
  1562                           ;main.c: 817: _MODBUSInputRegs[5] = *GetTime();
  1563  0014D8  EC7A  F016         	call	_GetTime	;wreg free
  1564  0014DC  6ED9               	movwf	fsr2l,c
  1565  0014DE  6ADA               	clrf	fsr2h,c
  1566  0014E0  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1567  0014E4  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1568                           
  1569                           ;main.c: 818: uint8_t hour = 0, minute = 0;
  1570  0014E8  0100               	movlb	0	; () banked
  1571  0014EA  6BF3               	clrf	main@hour& (0+255),b
  1572                           
  1573                           ; BSR set to: 0
  1574  0014EC  6BF4               	clrf	main@minute& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 820: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1578  0014EE  0EF4               	movlw	low main@minute
  1579  0014F0  6E07               	movwf	getHourMin@min,c
  1580  0014F2  0EF3               	movlw	main@hour& (0+255)
  1581  0014F4  ECBB  F015         	call	_getHourMin
  1582  0014F8  0900               	iorlw	0
  1583  0014FA  E00F               	bz	l6426
  1584  0014FC  0100               	movlb	0	; () banked
  1585  0014FE  51F4               	movf	main@minute& (0+255),w,b
  1586  001500  19F2               	xorwf	main@oldMinute& (0+255),w,b
  1587  001502  E00B               	bz	l6426
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 821: {
  1591                           ;main.c: 822: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1592  001504  51F3               	movf	main@hour& (0+255),w,b
  1593  001506  6E6A               	movwf	??_main& (0+255),c
  1594  001508  51F4               	movf	main@minute& (0+255),w,b
  1595  00150A  0101               	movlb	1	; () banked
  1596  00150C  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1597  00150E  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;main.c: 824: oldMinute = minute;
  1601  001512  C0F4  F0F2         	movff	main@minute,main@oldMinute
  1602                           
  1603                           ; BSR set to: 1
  1604                           ;main.c: 825: ProcessDiary();
  1605  001516  ECF5  F00F         	call	_ProcessDiary	;wreg free
  1606  00151A                     l6426:
  1607                           
  1608                           ;main.c: 826: }
  1609                           ;main.c: 828: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1610  00151A  0100               	movlb	0	; () banked
  1611  00151C  51F3               	movf	main@hour& (0+255),w,b
  1612  00151E  6E6A               	movwf	??_main& (0+255),c
  1613  001520  51F4               	movf	main@minute& (0+255),w,b
  1614  001522  0101               	movlb	1	; () banked
  1615  001524  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1616  001526  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1617                           
  1618                           ; BSR set to: 1
  1619                           ;main.c: 830: lastMs = curMs;
  1620  00152A  C0F5  F0EA         	movff	main@curMs,main@lastMs
  1621  00152E  C0F6  F0EB         	movff	main@curMs+1,main@lastMs+1
  1622  001532  C0F7  F0EC         	movff	main@curMs+2,main@lastMs+2
  1623  001536  C0F8  F0ED         	movff	main@curMs+3,main@lastMs+3
  1624  00153A                     l6430:
  1625                           
  1626                           ;main.c: 837: }
  1627                           ;main.c: 838: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1628  00153A  C0BC  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1629  00153E  C0BD  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1630  001542  0EDF               	movlw	low __MODBUSCoils
  1631  001544  6E2C               	movwf	ModbusPoll@coils,c
  1632  001546  0EAA               	movlw	low __MODBUSInputRegs
  1633  001548  6E2D               	movwf	ModbusPoll@inputRegs,c
  1634  00154A  0E01               	movlw	high __MODBUSInputRegs
  1635  00154C  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1636  00154E  0E0F               	movlw	15
  1637  001550  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1638  001552  0E8C               	movlw	low __MODBUSHoldingRegs
  1639  001554  6E30               	movwf	ModbusPoll@holdingRegs,c
  1640  001556  0E01               	movlw	high __MODBUSHoldingRegs
  1641  001558  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1642  00155A  0E0F               	movlw	15
  1643  00155C  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1644  00155E  ECB4  F00A         	call	_ModbusPoll	;wreg free
  1645                           
  1646                           ;main.c: 839: io_poll();
  1647  001562  ECA2  F008         	call	_io_poll	;wreg free
  1648  001566  D720               	goto	l6362
  1649  001568                     __end_of_main:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           postinc2	equ	0xFDE
  1661                           postdec2	equ	0xFDD
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           
  1665 ;; *************** function _pwm_init *****************
  1666 ;; Defined at:
  1667 ;;		line 346 in file "main.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1681 ;;      Params:         0       0       0       0       0       0       0
  1682 ;;      Locals:         0       0       0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0
  1684 ;;      Totals:         0       0       0       0       0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    2
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           	psect	text1
  1696  002CC4                     __ptext1:
  1697                           	opt stack 0
  1698  002CC4                     _pwm_init:
  1699                           	opt stack 28
  1700                           
  1701                           ;incstack = 0
  1702  002CC4  FFFF               	dw	65535
  1703                           
  1704                           ;main.c: 358: CCP1CONbits.CCP1M = 0x0f;
  1705  002CC6  0E0F               	movlw	15
  1706  002CC8  12BD               	iorwf	4029,f,c	;volatile
  1707                           
  1708                           ;main.c: 365: PR2 = 255;
  1709  002CCA  68CB               	setf	4043,c	;volatile
  1710                           
  1711                           ;main.c: 368: T2CONbits.T2CKPS1 = 1;
  1712  002CCC  82CA               	bsf	4042,1,c	;volatile
  1713                           
  1714                           ;main.c: 369: T2CONbits.T2CKPS0 = 0;
  1715  002CCE  90CA               	bcf	4042,0,c	;volatile
  1716                           
  1717                           ;main.c: 372: TRISCbits.RC2 = 0;
  1718  002CD0  9494               	bcf	3988,2,c	;volatile
  1719  002CD2  0012               	return		;funcret
  1720  002CD4  FFFF               	dw	65535	; errata NOP
  1721  002CD6                     __end_of_pwm_init:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           fsr1h	equ	0xFE2
  1731                           fsr1l	equ	0xFE1
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           
  1737 ;; *************** function _io_poll *****************
  1738 ;; Defined at:
  1739 ;;		line 890 in file "main.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  eventEeAddr     1    3[BANK0 ] unsigned char 
  1744 ;;  hourMin         2    0        unsigned int 
  1745 ;;  command         1    0[BANK0 ] unsigned char 
  1746 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1747 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1748 ;;  v1              1    7[BANK0 ] unsigned char 
  1749 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1750 ;;		 -> _lastCommand(1), 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1760 ;;      Params:         0       0       0       0       0       0       0
  1761 ;;      Locals:         0       8       0       0       0       0       0
  1762 ;;      Temps:          4       0       0       0       0       0       0
  1763 ;;      Totals:         4       8       0       0       0       0       0
  1764 ;;Total ram usage:       12 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    8
  1767 ;; This function calls:
  1768 ;;		_CommandSetStatusLed
  1769 ;;		_InitFromEeprom
  1770 ;;		_LightLed
  1771 ;;		_ModbusGetLastCommand
  1772 ;;		_ModbusSetExceptionStatusBit
  1773 ;;		_PlaySound
  1774 ;;		_SetBuzzerDuty
  1775 ;;		_SetTimeCommand
  1776 ;; This function is called by:
  1777 ;;		_main
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text2
  1782  001144                     __ptext2:
  1783                           	opt stack 0
  1784  001144                     _io_poll:
  1785                           	opt stack 22
  1786                           
  1787                           ;incstack = 0
  1788  001144  FFFF               	dw	65535
  1789                           
  1790                           ;main.c: 892: uint16_t lastAddress;
  1791                           ;main.c: 893: uint16_t lastEndAddress;
  1792                           ;main.c: 895: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1793  001146  0EE3               	movlw	low io_poll@lastEndAddress
  1794  001148  6E07               	movwf	ModbusGetLastCommand@count,c
  1795  00114A  0EE6               	movlw	io_poll@lastAddress& (0+255)
  1796  00114C  ECA4  F015         	call	_ModbusGetLastCommand
  1797  001150  0100               	movlb	0	; () banked
  1798  001152  6FE8               	movwf	io_poll@lastCommand& (0+255),b
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 896: if(*lastCommand == MB_FC_NONE)
  1802  001154  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1803  001156  6ED9               	movwf	fsr2l,c
  1804  001158  6ADA               	clrf	fsr2h,c
  1805  00115A  50DF               	movf	indf2,w,c
  1806  00115C  E101 D0FB          	bz	l454
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 899: lastEndAddress += lastAddress - 1;
  1810  001160  6866               	setf	??_io_poll& (0+255),c
  1811  001162  6867               	setf	(??_io_poll+1)& (0+255),c
  1812  001164  C0E6  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1813  001168  C0E7  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1814  00116C  5066               	movf	??_io_poll,w,c
  1815  00116E  2668               	addwf	??_io_poll+2,f,c
  1816  001170  5067               	movf	??_io_poll+1,w,c
  1817  001172  2269               	addwfc	??_io_poll+3,f,c
  1818  001174  5068               	movf	??_io_poll+2,w,c
  1819  001176  27E3               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1820  001178  5069               	movf	??_io_poll+3,w,c
  1821  00117A  23E4               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 901: uint8_t v1;
  1825                           ;main.c: 902: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1826  00117C  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1827  00117E  6ED9               	movwf	fsr2l,c
  1828  001180  6ADA               	clrf	fsr2h,c
  1829  001182  0E06               	movlw	6
  1830  001184  18DE               	xorwf	postinc2,w,c
  1831  001186  E007               	bz	l6224
  1832                           
  1833                           ; BSR set to: 0
  1834  001188  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1835  00118A  6ED9               	movwf	fsr2l,c
  1836  00118C  6ADA               	clrf	fsr2h,c
  1837  00118E  0E10               	movlw	16
  1838  001190  18DE               	xorwf	postinc2,w,c
  1839  001192  E001 D0D2          	bnz	l6338
  1840  001196                     l6224:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 903: {
  1844                           ;main.c: 905: if(lastAddress == 0)
  1845  001196  51E6               	movf	io_poll@lastAddress& (0+255),w,b
  1846  001198  11E7               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1847  00119A  E001 D0CE          	bnz	l6338
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 906: {
  1851                           ;main.c: 907: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1852  00119E  C18D  F0E2         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1853                           
  1854                           ;main.c: 908: uint16_t hourMin;
  1855                           ;main.c: 909: switch(command)
  1856  0011A2  D0AD               	goto	l6336
  1857  0011A4                     l460:
  1858                           
  1859                           ; BSR set to: 0
  1860  0011A4  00FF               	reset		; ;# 
  1861                           
  1862                           ;main.c: 915: return;
  1863  0011A6  D0D7               	goto	l454
  1864  0011A8                     l6228:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 919: SetTimeCommand();
  1868  0011A8  EC8C  F015         	call	_SetTimeCommand	;wreg free
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;main.c: 920: ModbusSetExceptionStatusBit(0, 1);
  1872  0011AC  0E01               	movlw	1
  1873  0011AE  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1874  0011B0  0E00               	movlw	0
  1875  0011B2  EC41  F014         	call	_ModbusSetExceptionStatusBit
  1876                           
  1877                           ;main.c: 921: break;
  1878  0011B6  D0BB               	goto	l462
  1879  0011B8                     l464:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;main.c: 925: eventCount = 0;
  1883  0011B8  6A73               	clrf	_eventCount,c
  1884  0011BA                     l466:
  1885  0011BA  FFFF               	dw	65535	; assembler added errata NOP
  1886  0011BC  B2A6               	btfsc	4006,1,c	;volatile
  1887  0011BE  D7FD               	goto	l466
  1888  0011C0  0E12               	movlw	18
  1889  0011C2  6EA9               	movwf	4009,c	;volatile
  1890  0011C4  6AA8               	clrf	4008,c	;volatile
  1891  0011C6  90D8               	bcf	status,0,c	;volatile
  1892  0011C8  BEF2               	btfsc	intcon,7,c	;volatile
  1893  0011CA  80D8               	bsf	status,0,c	;volatile
  1894  0011CC  9EF2               	bcf	intcon,7,c	;volatile
  1895  0011CE  84A6               	bsf	4006,2,c	;volatile
  1896  0011D0  0E55               	movlw	85
  1897  0011D2  6EA7               	movwf	4007,c	;volatile
  1898  0011D4  0EAA               	movlw	170
  1899  0011D6  6EA7               	movwf	4007,c	;volatile
  1900  0011D8  82A6               	bsf	4006,1,c	;volatile
  1901  0011DA  94A6               	bcf	4006,2,c	;volatile
  1902  0011DC  E301               	bnc	l6252
  1903  0011DE  8EF2               	bsf	intcon,7,c	;volatile
  1904  0011E0                     l6252:
  1905                           
  1906                           ;main.c: 927: ModbusSetExceptionStatusBit(0, 1);
  1907  0011E0  0E01               	movlw	1
  1908  0011E2  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1909  0011E4  0E00               	movlw	0
  1910  0011E6  EC41  F014         	call	_ModbusSetExceptionStatusBit
  1911                           
  1912                           ;main.c: 928: break;
  1913  0011EA  D0A1               	goto	l462
  1914  0011EC                     l6254:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 931: if(eventCount < 60)
  1918  0011EC  0E3C               	movlw	60
  1919  0011EE  6073               	cpfslt	_eventCount,c
  1920  0011F0  D056               	goto	l6318
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 932: {
  1924                           ;main.c: 933: uint8_t eventEeAddr = 18 + 1 + (eventCount << 1);
  1925  0011F2  5073               	movf	_eventCount,w,c
  1926  0011F4  0D02               	mullw	2
  1927  0011F6  50F3               	movf	prodl,w,c
  1928  0011F8  0F13               	addlw	19
  1929  0011FA  6FE5               	movwf	io_poll@eventEeAddr& (0+255),b
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 934: v1 = ((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF));
  1933  0011FC  0101               	movlb	1	; () banked
  1934  0011FE  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1935  001200  0100               	movlb	0	; () banked
  1936  001202  6FE9               	movwf	io_poll@v1& (0+255),b
  1937  001204                     l475:
  1938  001204  FFFF               	dw	65535	; assembler added errata NOP
  1939  001206  B2A6               	btfsc	4006,1,c	;volatile
  1940  001208  D7FD               	goto	l475
  1941  00120A  C0E5  FFA9         	movff	io_poll@eventEeAddr,4009	;volatile
  1942  00120E  C0E9  FFA8         	movff	io_poll@v1,4008	;volatile
  1943  001212  90D8               	bcf	status,0,c	;volatile
  1944  001214  BEF2               	btfsc	intcon,7,c	;volatile
  1945  001216  80D8               	bsf	status,0,c	;volatile
  1946  001218  9EF2               	bcf	intcon,7,c	;volatile
  1947  00121A  84A6               	bsf	4006,2,c	;volatile
  1948  00121C  0E55               	movlw	85
  1949  00121E  6EA7               	movwf	4007,c	;volatile
  1950  001220  0EAA               	movlw	170
  1951  001222  6EA7               	movwf	4007,c	;volatile
  1952  001224  82A6               	bsf	4006,1,c	;volatile
  1953  001226  94A6               	bcf	4006,2,c	;volatile
  1954  001228  E301               	bnc	l480
  1955  00122A  8EF2               	bsf	intcon,7,c	;volatile
  1956  00122C                     l480:
  1957                           
  1958                           ;main.c: 936: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1959  00122C  C18E  F0E9         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1960  001230                     l482:
  1961  001230  FFFF               	dw	65535	; assembler added errata NOP
  1962  001232  B2A6               	btfsc	4006,1,c	;volatile
  1963  001234  D7FD               	goto	l482
  1964  001236  0100               	movlb	0	; () banked
  1965  001238  29E5               	incf	io_poll@eventEeAddr& (0+255),w,b
  1966  00123A  6EA9               	movwf	4009,c	;volatile
  1967                           
  1968                           ; BSR set to: 0
  1969  00123C  C0E9  FFA8         	movff	io_poll@v1,4008	;volatile
  1970                           
  1971                           ; BSR set to: 0
  1972  001240  90D8               	bcf	status,0,c	;volatile
  1973                           
  1974                           ; BSR set to: 0
  1975  001242  BEF2               	btfsc	intcon,7,c	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978  001244  80D8               	bsf	status,0,c	;volatile
  1979                           
  1980                           ; BSR set to: 0
  1981  001246  9EF2               	bcf	intcon,7,c	;volatile
  1982  001248  84A6               	bsf	4006,2,c	;volatile
  1983                           
  1984                           ; BSR set to: 0
  1985  00124A  0E55               	movlw	85
  1986  00124C  6EA7               	movwf	4007,c	;volatile
  1987  00124E  0EAA               	movlw	170
  1988  001250  6EA7               	movwf	4007,c	;volatile
  1989                           
  1990                           ; BSR set to: 0
  1991  001252  82A6               	bsf	4006,1,c	;volatile
  1992                           
  1993                           ; BSR set to: 0
  1994  001254  94A6               	bcf	4006,2,c	;volatile
  1995                           
  1996                           ; BSR set to: 0
  1997  001256  E301               	bnc	l6292
  1998                           
  1999                           ; BSR set to: 0
  2000  001258  8EF2               	bsf	intcon,7,c	;volatile
  2001  00125A                     l6292:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 940: LightLed(eventCount, LED_GREEN, 0);
  2005  00125A  0E01               	movlw	1
  2006  00125C  6E07               	movwf	LightLed@ledState,c
  2007  00125E  0E00               	movlw	0
  2008  001260  6E08               	movwf	LightLed@blink,c
  2009  001262  5073               	movf	_eventCount,w,c
  2010  001264  ECC0  F004         	call	_LightLed
  2011                           
  2012                           ;main.c: 942: eventCount++;
  2013  001268  2A73               	incf	_eventCount,f,c
  2014  00126A                     l489:
  2015  00126A  FFFF               	dw	65535	; assembler added errata NOP
  2016  00126C  B2A6               	btfsc	4006,1,c	;volatile
  2017  00126E  D7FD               	goto	l489
  2018  001270  0E12               	movlw	18
  2019  001272  6EA9               	movwf	4009,c	;volatile
  2020  001274  C073  FFA8         	movff	_eventCount,4008	;volatile
  2021  001278  90D8               	bcf	status,0,c	;volatile
  2022  00127A  BEF2               	btfsc	intcon,7,c	;volatile
  2023  00127C  80D8               	bsf	status,0,c	;volatile
  2024  00127E  9EF2               	bcf	intcon,7,c	;volatile
  2025  001280  84A6               	bsf	4006,2,c	;volatile
  2026  001282  0E55               	movlw	85
  2027  001284  6EA7               	movwf	4007,c	;volatile
  2028  001286  0EAA               	movlw	170
  2029  001288  6EA7               	movwf	4007,c	;volatile
  2030  00128A  82A6               	bsf	4006,1,c	;volatile
  2031  00128C  94A6               	bcf	4006,2,c	;volatile
  2032  00128E  E301               	bnc	l6316
  2033  001290  8EF2               	bsf	intcon,7,c	;volatile
  2034  001292                     l6316:
  2035                           
  2036                           ;main.c: 945: ModbusSetExceptionStatusBit(0, 1);
  2037  001292  0E01               	movlw	1
  2038  001294  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2039  001296  0E00               	movlw	0
  2040  001298  EC41  F014         	call	_ModbusSetExceptionStatusBit
  2041                           
  2042                           ;main.c: 946: }
  2043  00129C  D048               	goto	l462
  2044  00129E                     l6318:
  2045  00129E  FFFF               	dw	65535	; assembler added errata NOP
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 947: else
  2049                           ;main.c: 948: ModbusSetExceptionStatusBit(0, 0);
  2050  0012A0  0E00               	movlw	0
  2051  0012A2  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2052  0012A4  EC41  F014         	call	_ModbusSetExceptionStatusBit
  2053  0012A8  D042               	goto	l462
  2054  0012AA                     l496:
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;main.c: 954: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  2058  0012AA  C18E  F0E9         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 956: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  2062  0012AE  51E9               	movf	io_poll@v1& (0+255),w,b
  2063  0012B0  0B03               	andlw	3
  2064  0012B2  6E07               	movwf	LightLed@ledState,c
  2065  0012B4  41E9               	rrncf	io_poll@v1& (0+255),w,b
  2066  0012B6  42E8               	rrncf	wreg,f,c
  2067  0012B8  0B3F               	andlw	63
  2068  0012BA  0B01               	andlw	1
  2069  0012BC  6E08               	movwf	LightLed@blink,c
  2070  0012BE  0101               	movlb	1	; () banked
  2071  0012C0  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  2072  0012C2  ECC0  F004         	call	_LightLed
  2073                           
  2074                           ;main.c: 957: _MODBUSHoldingRegs[1] = 0;
  2075  0012C6  0101               	movlb	1	; () banked
  2076  0012C8  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  2077  0012CA  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  2078                           
  2079                           ; BSR set to: 1
  2080                           ;main.c: 958: ModbusSetExceptionStatusBit(0, 1);
  2081  0012CC  0E01               	movlw	1
  2082  0012CE  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2083  0012D0  0E00               	movlw	0
  2084  0012D2  EC41  F014         	call	_ModbusSetExceptionStatusBit
  2085                           
  2086                           ;main.c: 959: break;
  2087  0012D6  D02B               	goto	l462
  2088  0012D8                     l6326:
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;main.c: 961: SetBuzzerDuty(_MODBUSHoldingRegs[1]);
  2092  0012D8  C18E  F007         	movff	__MODBUSHoldingRegs+2,SetBuzzerDuty@dc
  2093  0012DC  C18F  F008         	movff	__MODBUSHoldingRegs+3,SetBuzzerDuty@dc+1
  2094  0012E0  EC73  F015         	call	_SetBuzzerDuty	;wreg free
  2095                           
  2096                           ;main.c: 962: PR2 = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  2097  0012E4  C18C  FFCB         	movff	__MODBUSHoldingRegs,4043	;volatile
  2098                           
  2099                           ;main.c: 965: break;
  2100  0012E8  D022               	goto	l462
  2101  0012EA                     l6330:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;main.c: 968: PlaySound(((unsigned char)((_MODBUSHoldingRegs[0])&0xFF)), ((unsigned char
      +                          )((_MODBUSHoldingRegs[1])&0xFF)));
  2105  0012EA  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  2106  0012EE  0101               	movlb	1	; () banked
  2107  0012F0  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  2108  0012F2  ECBD  F00E         	call	_PlaySound
  2109                           
  2110                           ;main.c: 969: break;
  2111  0012F6  D01B               	goto	l462
  2112  0012F8                     l6332:
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;main.c: 972: CommandSetStatusLed();
  2116  0012F8  EC99  F013         	call	_CommandSetStatusLed	;wreg free
  2117                           
  2118                           ;main.c: 973: break;
  2119  0012FC  D018               	goto	l462
  2120  0012FE                     l6336:
  2121  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2122                           
  2123                           ; BSR set to: 0
  2124  001300  51E2               	movf	io_poll@command& (0+255),w,b
  2125                           
  2126                           ; Switch size 1, requested type "speed"
  2127                           ; Number of cases is 9, Range of values is 1 to 145
  2128                           ; switch strategies available:
  2129                           ; Name         Instructions Cycles
  2130                           ; simple_byte           28    15 (average)
  2131                           ;	Chosen strategy is simple_byte
  2132  001302  0A01               	xorlw	1	; case 1
  2133  001304  E014               	bz	l462
  2134  001306  0A11               	xorlw	17	; case 16
  2135  001308  E101 D74E          	bz	l6228
  2136  00130C  0A6F               	xorlw	111	; case 127
  2137  00130E  E101 D749          	bz	l460
  2138  001312  0AFF               	xorlw	255	; case 128
  2139  001314  E101 D750          	bz	l464
  2140  001318  0A01               	xorlw	1	; case 129
  2141  00131A  E101 D767          	bz	l6254
  2142  00131E  0A03               	xorlw	3	; case 130
  2143  001320  E0C4               	bz	l496
  2144  001322  0A01               	xorlw	1	; case 131
  2145  001324  E0E9               	bz	l6332
  2146  001326  0A13               	xorlw	19	; case 144
  2147  001328  E0D7               	bz	l6326
  2148  00132A  0A01               	xorlw	1	; case 145
  2149  00132C  E0DE               	bz	l6330
  2150  00132E                     l462:
  2151  00132E  FFFF               	dw	65535	; assembler added errata NOP
  2152                           
  2153                           ;main.c: 975: _MODBUSHoldingRegs[0] = 0;
  2154  001330  0101               	movlb	1	; () banked
  2155  001332  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  2156  001334  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  2157                           
  2158                           ;main.c: 976: _MODBUSHoldingRegs[1] = 0;
  2159  001336  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  2160  001338  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  2161  00133A                     l6338:
  2162                           
  2163                           ;main.c: 977: }
  2164                           ;main.c: 978: }
  2165                           ;main.c: 981: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  2166  00133A  0100               	movlb	0	; () banked
  2167  00133C  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  2168  00133E  6ED9               	movwf	fsr2l,c
  2169  001340  6ADA               	clrf	fsr2h,c
  2170  001342  0E15               	movlw	21
  2171  001344  18DE               	xorwf	postinc2,w,c
  2172  001346  E107               	bnz	l454
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 982: {
  2176                           ;main.c: 983: InitFromEeprom();
  2177  001348  ECB3  F00C         	call	_InitFromEeprom	;wreg free
  2178                           
  2179                           ; BSR set to: 1
  2180                           ;main.c: 984: ModbusSetExceptionStatusBit(0, 1);
  2181  00134C  0E01               	movlw	1
  2182  00134E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2183  001350  0E00               	movlw	0
  2184  001352  EC41  F014         	call	_ModbusSetExceptionStatusBit
  2185  001356                     l454:
  2186  001356  FFFF               	dw	65535	; assembler added errata NOP
  2187  001358  0012               	return		;funcret
  2188  00135A  FFFF               	dw	65535	; errata NOP
  2189  00135C                     __end_of_io_poll:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           prodl	equ	0xFF3
  2196                           intcon	equ	0xFF2
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1h	equ	0xFE2
  2201                           fsr1l	equ	0xFE1
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _SetTimeCommand *****************
  2210 ;; Defined at:
  2211 ;;		line 862 in file "main.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  yearMonth       2   99[COMRAM] unsigned int 
  2216 ;;  daySec          2   97[COMRAM] unsigned int 
  2217 ;;  hourMin         2   95[COMRAM] unsigned int 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : F/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2227 ;;      Params:         0       0       0       0       0       0       0
  2228 ;;      Locals:         6       0       0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0
  2230 ;;      Totals:         6       0       0       0       0       0       0
  2231 ;;Total ram usage:        6 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    7
  2234 ;; This function calls:
  2235 ;;		_SetTimeFromRegs
  2236 ;; This function is called by:
  2237 ;;		_io_poll
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text3
  2242  002B18                     __ptext3:
  2243                           	opt stack 0
  2244  002B18                     _SetTimeCommand:
  2245                           	opt stack 22
  2246                           
  2247                           ;incstack = 0
  2248  002B18  FFFF               	dw	65535
  2249                           
  2250                           ;main.c: 864: uint16_t hourMin = _MODBUSHoldingRegs[1];
  2251  002B1A  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  2252  002B1E  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  2253                           
  2254                           ;main.c: 866: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  2255  002B22  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  2256  002B26  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  2257                           
  2258                           ;main.c: 867: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  2259  002B2A  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  2260  002B2E  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  2261                           
  2262                           ;main.c: 868: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  2263  002B32  0E62               	movlw	low SetTimeCommand@daySec
  2264  002B34  6E45               	movwf	SetTimeFromRegs@daySec,c
  2265  002B36  0E64               	movlw	low SetTimeCommand@yearMonth
  2266  002B38  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  2267  002B3A  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  2268  002B3C  EC94  F00F         	call	_SetTimeFromRegs
  2269                           
  2270                           ;main.c: 869: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  2271  002B40  0100               	movlb	0	; () banked
  2272  002B42  81BC               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  2273                           
  2274                           ; BSR set to: 0
  2275  002B44  0012               	return		;funcret
  2276  002B46  FFFF               	dw	65535	; errata NOP
  2277  002B48                     __end_of_SetTimeCommand:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           postdec1	equ	0xFE5
  2288                           fsr1h	equ	0xFE2
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           postinc2	equ	0xFDE
  2292                           postdec2	equ	0xFDD
  2293                           fsr2h	equ	0xFDA
  2294                           fsr2l	equ	0xFD9
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _SetTimeFromRegs *****************
  2298 ;; Defined at:
  2299 ;;		line 845 in file "main.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  hourMin         1    wreg     PTR unsigned int 
  2302 ;;		 -> SetTimeCommand@hourMin(2), 
  2303 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2304 ;;		 -> SetTimeCommand@daySec(2), 
  2305 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2306 ;;		 -> SetTimeCommand@yearMonth(2), 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2309 ;;		 -> SetTimeCommand@hourMin(2), 
  2310 ;;  newTime        18   77[COMRAM] struct tm
  2311 ;;  newRawTime      4   72[COMRAM] long 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2321 ;;      Params:         2       0       0       0       0       0       0
  2322 ;;      Locals:        23       0       0       0       0       0       0
  2323 ;;      Temps:          2       0       0       0       0       0       0
  2324 ;;      Totals:        27       0       0       0       0       0       0
  2325 ;;Total ram usage:       27 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    6
  2328 ;; This function calls:
  2329 ;;		_LightStatusLed
  2330 ;;		_LoadNextEvent
  2331 ;;		_SetHourMin
  2332 ;;		_SetTime
  2333 ;;		_mktime
  2334 ;; This function is called by:
  2335 ;;		_SetTimeCommand
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text4
  2340  001F28                     __ptext4:
  2341                           	opt stack 0
  2342  001F28                     _SetTimeFromRegs:
  2343                           	opt stack 22
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;incstack = 0
  2347  001F28  FFFF               	dw	65535
  2348                           
  2349                           ;SetTimeFromRegs@hourMin stored from wreg
  2350  001F2A  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2351                           
  2352                           ;main.c: 847: struct tm newTime;
  2353                           ;main.c: 848: newTime.tm_year = (*yearMonth >> 8) + 100;
  2354  001F2C  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2355  001F2E  6ED9               	movwf	fsr2l,c
  2356  001F30  6ADA               	clrf	fsr2h,c
  2357  001F32  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2358  001F36  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2359  001F3A  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2360  001F3E  6A48               	clrf	??_SetTimeFromRegs+1,c
  2361  001F40  0E64               	movlw	100
  2362  001F42  2447               	addwf	??_SetTimeFromRegs,w,c
  2363  001F44  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2364  001F46  0E00               	movlw	0
  2365  001F48  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2366  001F4A  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2367                           
  2368                           ;main.c: 849: newTime.tm_mon = *yearMonth & 0xFF;
  2369  001F4C  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2370  001F4E  6ED9               	movwf	fsr2l,c
  2371  001F50  6ADA               	clrf	fsr2h,c
  2372  001F52  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2373  001F56  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2374  001F5A  5047               	movf	??_SetTimeFromRegs,w,c
  2375  001F5C  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2376  001F5E  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2377                           
  2378                           ;main.c: 850: newTime.tm_mday = *daySec >> 8;
  2379  001F60  5045               	movf	SetTimeFromRegs@daySec,w,c
  2380  001F62  6ED9               	movwf	fsr2l,c
  2381  001F64  6ADA               	clrf	fsr2h,c
  2382  001F66  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2383  001F6A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2384  001F6E  5048               	movf	??_SetTimeFromRegs+1,w,c
  2385  001F70  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2386  001F72  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2387                           
  2388                           ;main.c: 851: newTime.tm_hour = *hourMin >> 8;
  2389  001F74  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2390  001F76  6ED9               	movwf	fsr2l,c
  2391  001F78  6ADA               	clrf	fsr2h,c
  2392  001F7A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2393  001F7E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2394  001F82  5048               	movf	??_SetTimeFromRegs+1,w,c
  2395  001F84  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2396  001F86  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2397                           
  2398                           ;main.c: 852: newTime.tm_min = *hourMin & 0xFF;
  2399  001F88  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2400  001F8A  6ED9               	movwf	fsr2l,c
  2401  001F8C  6ADA               	clrf	fsr2h,c
  2402  001F8E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2403  001F92  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2404  001F96  5047               	movf	??_SetTimeFromRegs,w,c
  2405  001F98  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2406  001F9A  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2407                           
  2408                           ;main.c: 853: newTime.tm_sec = *daySec & 0xFF;
  2409  001F9C  5045               	movf	SetTimeFromRegs@daySec,w,c
  2410  001F9E  6ED9               	movwf	fsr2l,c
  2411  001FA0  6ADA               	clrf	fsr2h,c
  2412  001FA2  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2413  001FA6  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2414  001FAA  5047               	movf	??_SetTimeFromRegs,w,c
  2415  001FAC  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2416  001FAE  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2417                           
  2418                           ;main.c: 854: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  2419  001FB0  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2420  001FB2  6E07               	movwf	SetHourMin@newMin,c
  2421  001FB4  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2422  001FB6  0F04               	addlw	4
  2423  001FB8  EC18  F016         	call	_SetHourMin
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;main.c: 855: time_t newRawTime = mktime(&newTime);
  2427  001FBC  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2428  001FBE  EC37  F003         	call	_mktime
  2429  001FC2  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2430  001FC6  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2431  001FCA  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2432  001FCE  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2433                           
  2434                           ;main.c: 856: SetTime(&newRawTime);
  2435  001FD2  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2436  001FD4  EC09  F016         	call	_SetTime
  2437                           
  2438                           ;main.c: 857: LightStatusLed(0x05, 0, 0);
  2439  001FD8  0E00               	movlw	0
  2440  001FDA  6E07               	movwf	LightStatusLed@on,c
  2441  001FDC  6E08               	movwf	LightStatusLed@blink,c
  2442  001FDE  0E05               	movlw	5
  2443  001FE0  EC42  F00E         	call	_LightStatusLed
  2444                           
  2445                           ;main.c: 858: LoadNextEvent();
  2446  001FE4  EF03  F012         	goto	_LoadNextEvent	;wreg free
  2447  001FE8  FFFF               	dw	65535	; errata NOP
  2448  001FEA                     __end_of_SetTimeFromRegs:
  2449                           	opt stack 0
  2450                           tblptru	equ	0xFF8
  2451                           tblptrh	equ	0xFF7
  2452                           tblptrl	equ	0xFF6
  2453                           tablat	equ	0xFF5
  2454                           prodl	equ	0xFF3
  2455                           intcon	equ	0xFF2
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postdec1	equ	0xFE5
  2459                           fsr1h	equ	0xFE2
  2460                           fsr1l	equ	0xFE1
  2461                           indf2	equ	0xFDF
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _mktime *****************
  2469 ;; Defined at:
  2470 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  timeptr         1    wreg     PTR struct tm
  2473 ;;		 -> SetTimeFromRegs@newTime(18), 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2476 ;;		 -> SetTimeFromRegs@newTime(18), 
  2477 ;;  tt              4   63[COMRAM] long 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  4   45[COMRAM] long 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : F/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2487 ;;      Params:         4       0       0       0       0       0       0
  2488 ;;      Locals:         5       0       0       0       0       0       0
  2489 ;;      Temps:         14       0       0       0       0       0       0
  2490 ;;      Totals:        23       0       0       0       0       0       0
  2491 ;;Total ram usage:       23 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    5
  2494 ;; This function calls:
  2495 ;;		_ymd_to_scalar
  2496 ;; This function is called by:
  2497 ;;		_SetTimeFromRegs
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text5
  2502  00066E                     __ptext5:
  2503                           	opt stack 0
  2504  00066E                     _mktime:
  2505                           	opt stack 22
  2506                           
  2507                           ;incstack = 0
  2508  00066E  FFFF               	dw	65535
  2509                           
  2510                           ;mktime@timeptr stored from wreg
  2511  000670  6E44               	movwf	mktime@timeptr,c
  2512  000672  5044               	movf	mktime@timeptr,w,c
  2513  000674  6ED9               	movwf	fsr2l,c
  2514  000676  6ADA               	clrf	fsr2h,c
  2515  000678  0E0A               	movlw	10
  2516  00067A  26D9               	addwf	fsr2l,f,c
  2517  00067C  0E01               	movlw	1
  2518  00067E  BEDB               	btfsc	plusw2,7,c
  2519  000680  D012               	goto	l1323
  2520  000682  50DB               	movf	plusw2,w,c
  2521  000684  E103               	bnz	u4570
  2522  000686  0E46               	movlw	70
  2523  000688  5CDE               	subwf	postinc2,w,c
  2524  00068A  E30D               	bnc	l1323
  2525  00068C                     u4570:
  2526  00068C  5044               	movf	mktime@timeptr,w,c
  2527  00068E  6ED9               	movwf	fsr2l,c
  2528  000690  6ADA               	clrf	fsr2h,c
  2529  000692  0E0A               	movlw	10
  2530  000694  26D9               	addwf	fsr2l,f,c
  2531  000696  0E01               	movlw	1
  2532  000698  BEDB               	btfsc	plusw2,7,c
  2533  00069A  D00B               	goto	l5396
  2534  00069C  50DB               	movf	plusw2,w,c
  2535  00069E  E103               	bnz	u4580
  2536  0006A0  0E8B               	movlw	139
  2537  0006A2  5CDE               	subwf	postinc2,w,c
  2538  0006A4  E306               	bnc	l5396
  2539  0006A6                     u4580:
  2540  0006A6                     l1323:
  2541  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2542  0006A8  6840               	setf	mktime@tt,c
  2543  0006AA  6841               	setf	mktime@tt+1,c
  2544  0006AC  6842               	setf	mktime@tt+2,c
  2545  0006AE  6843               	setf	mktime@tt+3,c
  2546  0006B0  D15C               	goto	l5406
  2547  0006B2                     l5396:
  2548  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2549  0006B4  5044               	movf	mktime@timeptr,w,c
  2550  0006B6  6ED9               	movwf	fsr2l,c
  2551  0006B8  6ADA               	clrf	fsr2h,c
  2552  0006BA  0E0A               	movlw	10
  2553  0006BC  26D9               	addwf	fsr2l,f,c
  2554  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2555  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2556  0006C6  0E6C               	movlw	108
  2557  0006C8  2432               	addwf	??_mktime,w,c
  2558  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2559  0006CC  0E07               	movlw	7
  2560  0006CE  2033               	addwfc	??_mktime+1,w,c
  2561  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2562  0006D2  5044               	movf	mktime@timeptr,w,c
  2563  0006D4  6ED9               	movwf	fsr2l,c
  2564  0006D6  6ADA               	clrf	fsr2h,c
  2565  0006D8  0E08               	movlw	8
  2566  0006DA  26D9               	addwf	fsr2l,f,c
  2567  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2568  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2569  0006E4  2834               	incf	??_mktime+2,w,c
  2570  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2571  0006E8  0E00               	movlw	0
  2572  0006EA  2035               	addwfc	??_mktime+3,w,c
  2573  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2574  0006EE  5044               	movf	mktime@timeptr,w,c
  2575  0006F0  6ED9               	movwf	fsr2l,c
  2576  0006F2  6ADA               	clrf	fsr2h,c
  2577  0006F4  0E06               	movlw	6
  2578  0006F6  26D9               	addwf	fsr2l,f,c
  2579  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2580  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2581  000700  EC60  F011         	call	_ymd_to_scalar	;wreg free
  2582  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2583  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2584  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2585  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2586  000714  0E07               	movlw	7
  2587  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2588  000718  0EB2               	movlw	178
  2589  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2590  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2591  00071E  0E01               	movlw	1
  2592  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2593  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2594  000724  6E22               	movwf	ymd_to_scalar@day,c
  2595  000726  EC60  F011         	call	_ymd_to_scalar	;wreg free
  2596  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2597  00072C  5E40               	subwf	mktime@tt,f,c
  2598  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2599  000730  5A41               	subwfb	mktime@tt+1,f,c
  2600  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2601  000734  5A42               	subwfb	mktime@tt+2,f,c
  2602  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2603  000738  5A43               	subwfb	mktime@tt+3,f,c
  2604  00073A  5044               	movf	mktime@timeptr,w,c
  2605  00073C  6ED9               	movwf	fsr2l,c
  2606  00073E  6ADA               	clrf	fsr2h,c
  2607  000740  0E04               	movlw	4
  2608  000742  26D9               	addwf	fsr2l,f,c
  2609  000744  CFDE F032          	movff	postinc2,??_mktime
  2610  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2611  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2612  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2613  000754  0E00               	movlw	0
  2614  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2615  000758  0EFF               	movlw	255
  2616  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2617  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2618  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2619  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2620  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2621  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2622  00076E  0E18               	movlw	24
  2623  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2624  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2625  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2626  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2627  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2628  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2629  000780  50F3               	movf	prodl,w,c
  2630  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2631  000784  50F4               	movf	prodh,w,c
  2632  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2633  000788  0E00               	movlw	0
  2634  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2635  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2636  00078E  50F3               	movf	prodl,w,c
  2637  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2638  000792  50F4               	movf	prodh,w,c
  2639  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2640  000796  0E00               	movlw	0
  2641  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2642  00079A  0E18               	movlw	24
  2643  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2644  00079E  50F3               	movf	prodl,w,c
  2645  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2646  0007A2  50F4               	movf	prodh,w,c
  2647  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2648  0007A6  0E00               	movlw	0
  2649  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2650  0007AA  50F3               	movf	prodl,w,c
  2651  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2652  0007AE  50F4               	movf	prodh,w,c
  2653  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2654  0007B2  0E00               	movlw	0
  2655  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2656  0007B6  50F3               	movf	prodl,w,c
  2657  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2658  0007BA  50F4               	movf	prodh,w,c
  2659  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2660  0007BE  0E18               	movlw	24
  2661  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2662  0007C2  50F3               	movf	prodl,w,c
  2663  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2664  0007C6  0E00               	movlw	0
  2665  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2666  0007CA  50F3               	movf	prodl,w,c
  2667  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2668  0007CE  0E00               	movlw	0
  2669  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2670  0007D2  50F3               	movf	prodl,w,c
  2671  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2672  0007D6  0E00               	movlw	0
  2673  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2674  0007DA  50F3               	movf	prodl,w,c
  2675  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2676  0007DE  5034               	movf	??_mktime+2,w,c
  2677  0007E0  243C               	addwf	??_mktime+10,w,c
  2678  0007E2  6E40               	movwf	mktime@tt,c
  2679  0007E4  5035               	movf	??_mktime+3,w,c
  2680  0007E6  203D               	addwfc	??_mktime+11,w,c
  2681  0007E8  6E41               	movwf	mktime@tt+1,c
  2682  0007EA  5036               	movf	??_mktime+4,w,c
  2683  0007EC  203E               	addwfc	??_mktime+12,w,c
  2684  0007EE  6E42               	movwf	mktime@tt+2,c
  2685  0007F0  5037               	movf	??_mktime+5,w,c
  2686  0007F2  203F               	addwfc	??_mktime+13,w,c
  2687  0007F4  6E43               	movwf	mktime@tt+3,c
  2688  0007F6  5044               	movf	mktime@timeptr,w,c
  2689  0007F8  6ED9               	movwf	fsr2l,c
  2690  0007FA  6ADA               	clrf	fsr2h,c
  2691  0007FC  0E02               	movlw	2
  2692  0007FE  26D9               	addwf	fsr2l,f,c
  2693  000800  CFDE F032          	movff	postinc2,??_mktime
  2694  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2695  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2696  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2697  000810  0E00               	movlw	0
  2698  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2699  000814  0EFF               	movlw	255
  2700  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2701  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2702  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2703  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2704  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2705  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2706  00082A  0E3C               	movlw	60
  2707  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2708  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2709  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2710  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2711  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2712  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2713  00083C  50F3               	movf	prodl,w,c
  2714  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2715  000840  50F4               	movf	prodh,w,c
  2716  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2717  000844  0E00               	movlw	0
  2718  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2719  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2720  00084A  50F3               	movf	prodl,w,c
  2721  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2722  00084E  50F4               	movf	prodh,w,c
  2723  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2724  000852  0E00               	movlw	0
  2725  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2726  000856  0E3C               	movlw	60
  2727  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2728  00085A  50F3               	movf	prodl,w,c
  2729  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2730  00085E  50F4               	movf	prodh,w,c
  2731  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2732  000862  0E00               	movlw	0
  2733  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2734  000866  50F3               	movf	prodl,w,c
  2735  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2736  00086A  50F4               	movf	prodh,w,c
  2737  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2738  00086E  0E00               	movlw	0
  2739  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2740  000872  50F3               	movf	prodl,w,c
  2741  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2742  000876  50F4               	movf	prodh,w,c
  2743  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2744  00087A  0E3C               	movlw	60
  2745  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2746  00087E  50F3               	movf	prodl,w,c
  2747  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2748  000882  0E00               	movlw	0
  2749  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2750  000886  50F3               	movf	prodl,w,c
  2751  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2752  00088A  0E00               	movlw	0
  2753  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2754  00088E  50F3               	movf	prodl,w,c
  2755  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2756  000892  0E00               	movlw	0
  2757  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2758  000896  50F3               	movf	prodl,w,c
  2759  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2760  00089A  5034               	movf	??_mktime+2,w,c
  2761  00089C  243C               	addwf	??_mktime+10,w,c
  2762  00089E  6E40               	movwf	mktime@tt,c
  2763  0008A0  5035               	movf	??_mktime+3,w,c
  2764  0008A2  203D               	addwfc	??_mktime+11,w,c
  2765  0008A4  6E41               	movwf	mktime@tt+1,c
  2766  0008A6  5036               	movf	??_mktime+4,w,c
  2767  0008A8  203E               	addwfc	??_mktime+12,w,c
  2768  0008AA  6E42               	movwf	mktime@tt+2,c
  2769  0008AC  5037               	movf	??_mktime+5,w,c
  2770  0008AE  203F               	addwfc	??_mktime+13,w,c
  2771  0008B0  6E43               	movwf	mktime@tt+3,c
  2772  0008B2  5044               	movf	mktime@timeptr,w,c
  2773  0008B4  6ED9               	movwf	fsr2l,c
  2774  0008B6  6ADA               	clrf	fsr2h,c
  2775  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2776  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2777  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2778  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2779  0008C8  0E00               	movlw	0
  2780  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2781  0008CC  0EFF               	movlw	255
  2782  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2783  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2784  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2785  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2786  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2787  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2788  0008E2  0E3C               	movlw	60
  2789  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2790  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2791  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2792  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2793  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2794  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2795  0008F4  50F3               	movf	prodl,w,c
  2796  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2797  0008F8  50F4               	movf	prodh,w,c
  2798  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2799  0008FC  0E00               	movlw	0
  2800  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2801  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2802  000902  50F3               	movf	prodl,w,c
  2803  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2804  000906  50F4               	movf	prodh,w,c
  2805  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2806  00090A  0E00               	movlw	0
  2807  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2808  00090E  0E3C               	movlw	60
  2809  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2810  000912  50F3               	movf	prodl,w,c
  2811  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2812  000916  50F4               	movf	prodh,w,c
  2813  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2814  00091A  0E00               	movlw	0
  2815  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2816  00091E  50F3               	movf	prodl,w,c
  2817  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2818  000922  50F4               	movf	prodh,w,c
  2819  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2820  000926  0E00               	movlw	0
  2821  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2822  00092A  50F3               	movf	prodl,w,c
  2823  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2824  00092E  50F4               	movf	prodh,w,c
  2825  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2826  000932  0E3C               	movlw	60
  2827  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2828  000936  50F3               	movf	prodl,w,c
  2829  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2830  00093A  0E00               	movlw	0
  2831  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2832  00093E  50F3               	movf	prodl,w,c
  2833  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2834  000942  0E00               	movlw	0
  2835  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2836  000946  50F3               	movf	prodl,w,c
  2837  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2838  00094A  0E00               	movlw	0
  2839  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2840  00094E  50F3               	movf	prodl,w,c
  2841  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2842  000952  5034               	movf	??_mktime+2,w,c
  2843  000954  243C               	addwf	??_mktime+10,w,c
  2844  000956  6E40               	movwf	mktime@tt,c
  2845  000958  5035               	movf	??_mktime+3,w,c
  2846  00095A  203D               	addwfc	??_mktime+11,w,c
  2847  00095C  6E41               	movwf	mktime@tt+1,c
  2848  00095E  5036               	movf	??_mktime+4,w,c
  2849  000960  203E               	addwfc	??_mktime+12,w,c
  2850  000962  6E42               	movwf	mktime@tt+2,c
  2851  000964  5037               	movf	??_mktime+5,w,c
  2852  000966  203F               	addwfc	??_mktime+13,w,c
  2853  000968  6E43               	movwf	mktime@tt+3,c
  2854  00096A                     l5406:
  2855  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2856  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2857  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2858  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2859  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2860  00097C  0012               	return		;funcret
  2861  00097E  FFFF               	dw	65535	; errata NOP
  2862  000980                     __end_of_mktime:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           postdec1	equ	0xFE5
  2874                           fsr1h	equ	0xFE2
  2875                           fsr1l	equ	0xFE1
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           plusw2	equ	0xFDB
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _ymd_to_scalar *****************
  2885 ;; Defined at:
  2886 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  yr              2   29[COMRAM] unsigned int 
  2889 ;;  mo              2   31[COMRAM] unsigned int 
  2890 ;;  day             2   33[COMRAM] unsigned int 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  scalar          4   41[COMRAM] long 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  4   29[COMRAM] long 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         6       0       0       0       0       0       0
  2903 ;;      Locals:         6       0       0       0       0       0       0
  2904 ;;      Temps:          4       0       0       0       0       0       0
  2905 ;;      Totals:        16       0       0       0       0       0       0
  2906 ;;Total ram usage:       16 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    4
  2909 ;; This function calls:
  2910 ;;		_isleap
  2911 ;;		_months_to_days
  2912 ;;		_years_to_days
  2913 ;; This function is called by:
  2914 ;;		_mktime
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text6
  2919  0022C0                     __ptext6:
  2920                           	opt stack 0
  2921  0022C0                     _ymd_to_scalar:
  2922                           	opt stack 22
  2923                           
  2924                           ;incstack = 0
  2925  0022C0  FFFF               	dw	65535
  2926  0022C2  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2927  0022C6  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2928  0022CA  ECB1  F014         	call	_months_to_days	;wreg free
  2929  0022CE  5022               	movf	ymd_to_scalar@day,w,c
  2930  0022D0  260E               	addwf	?_months_to_days,f,c
  2931  0022D2  5023               	movf	ymd_to_scalar@day+1,w,c
  2932  0022D4  220F               	addwfc	?_months_to_days+1,f,c
  2933  0022D6  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2934  0022DA  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2935  0022DE  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2936  0022E0  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2937  0022E2  5021               	movf	ymd_to_scalar@mo+1,w,c
  2938  0022E4  E103               	bnz	u4350
  2939  0022E6  0E03               	movlw	3
  2940  0022E8  5C20               	subwf	ymd_to_scalar@mo,w,c
  2941  0022EA  E321               	bnc	l5276
  2942  0022EC                     u4350:
  2943  0022EC  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2944  0022F0  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2945  0022F4  EC1B  F014         	call	_isleap	;wreg free
  2946  0022F8  500C               	movf	?_isleap,w,c
  2947  0022FA  100D               	iorwf	?_isleap+1,w,c
  2948  0022FC  E103               	bnz	l5272
  2949  0022FE  6A29               	clrf	_ymd_to_scalar$2172+1,c
  2950  002300  0E02               	movlw	2
  2951  002302  D002               	goto	L1
  2952  002304                     l5272:
  2953  002304  6A29               	clrf	_ymd_to_scalar$2172+1,c
  2954  002306  0E01               	movlw	1
  2955  002308                     L1:
  2956  002308  FFFF               	dw	65535	; assembler added errata NOP
  2957  00230A  6E28               	movwf	_ymd_to_scalar$2172,c
  2958  00230C  C028  F024         	movff	_ymd_to_scalar$2172,??_ymd_to_scalar
  2959  002310  C029  F025         	movff	_ymd_to_scalar$2172+1,??_ymd_to_scalar+1
  2960  002314  0E00               	movlw	0
  2961  002316  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2962  002318  0EFF               	movlw	255
  2963  00231A  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2964  00231C  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2965  00231E  5024               	movf	??_ymd_to_scalar,w,c
  2966  002320  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2967  002322  5025               	movf	??_ymd_to_scalar+1,w,c
  2968  002324  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2969  002326  5026               	movf	??_ymd_to_scalar+2,w,c
  2970  002328  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2971  00232A  5027               	movf	??_ymd_to_scalar+3,w,c
  2972  00232C  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2973  00232E                     l5276:
  2974  00232E  061E               	decf	ymd_to_scalar@yr,f,c
  2975  002330  A0D8               	btfss	status,0,c
  2976  002332  061F               	decf	ymd_to_scalar@yr+1,f,c
  2977  002334  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2978  002338  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2979  00233C  ECC1  F00D         	call	_years_to_days	;wreg free
  2980  002340  500E               	movf	?_years_to_days,w,c
  2981  002342  262A               	addwf	ymd_to_scalar@scalar,f,c
  2982  002344  500F               	movf	?_years_to_days+1,w,c
  2983  002346  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2984  002348  5010               	movf	?_years_to_days+2,w,c
  2985  00234A  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2986  00234C  5011               	movf	?_years_to_days+3,w,c
  2987  00234E  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2988  002350  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2989  002354  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2990  002358  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2991  00235C  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2992  002360  0012               	return		;funcret
  2993  002362  FFFF               	dw	65535	; errata NOP
  2994  002364                     __end_of_ymd_to_scalar:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           plusw2	equ	0xFDB
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _years_to_days *****************
  3017 ;; Defined at:
  3018 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  yr              2   13[COMRAM] unsigned int 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  ret             4   25[COMRAM] long 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  4   13[COMRAM] long 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3032 ;;      Params:         4       0       0       0       0       0       0
  3033 ;;      Locals:         4       0       0       0       0       0       0
  3034 ;;      Temps:          8       0       0       0       0       0       0
  3035 ;;      Totals:        16       0       0       0       0       0       0
  3036 ;;Total ram usage:       16 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    3
  3039 ;; This function calls:
  3040 ;;		___lwdiv
  3041 ;; This function is called by:
  3042 ;;		_ymd_to_scalar
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text7
  3047  001B82                     __ptext7:
  3048                           	opt stack 0
  3049  001B82                     _years_to_days:
  3050                           	opt stack 22
  3051                           
  3052                           ;incstack = 0
  3053  001B82  FFFF               	dw	65535
  3054  001B84  500E               	movf	years_to_days@yr,w,c
  3055  001B86  6E12               	movwf	??_years_to_days& (0+255),c
  3056  001B88  500F               	movf	years_to_days@yr+1,w,c
  3057  001B8A  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  3058  001B8C  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  3059  001B8E  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  3060  001B90  0E6D               	movlw	109
  3061  001B92  0212               	mulwf	??_years_to_days& (0+255),c
  3062  001B94  CFF3 F016          	movff	prodl,??_years_to_days+4
  3063  001B98  CFF4 F017          	movff	prodh,??_years_to_days+5
  3064  001B9C  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  3065  001B9E  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  3066  001BA0  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3067  001BA2  50F3               	movf	prodl,w,c
  3068  001BA4  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  3069  001BA6  50F4               	movf	prodh,w,c
  3070  001BA8  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3071  001BAA  0E00               	movlw	0
  3072  001BAC  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3073  001BAE  0E01               	movlw	1
  3074  001BB0  0212               	mulwf	??_years_to_days& (0+255),c
  3075  001BB2  50F3               	movf	prodl,w,c
  3076  001BB4  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  3077  001BB6  50F4               	movf	prodh,w,c
  3078  001BB8  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3079  001BBA  0E00               	movlw	0
  3080  001BBC  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3081  001BBE  0E6D               	movlw	109
  3082  001BC0  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  3083  001BC2  50F3               	movf	prodl,w,c
  3084  001BC4  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3085  001BC6  50F4               	movf	prodh,w,c
  3086  001BC8  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3087  001BCA  0E01               	movlw	1
  3088  001BCC  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3089  001BCE  50F3               	movf	prodl,w,c
  3090  001BD0  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3091  001BD2  50F4               	movf	prodh,w,c
  3092  001BD4  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3093  001BD6  0E00               	movlw	0
  3094  001BD8  0212               	mulwf	??_years_to_days& (0+255),c
  3095  001BDA  50F3               	movf	prodl,w,c
  3096  001BDC  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3097  001BDE  50F4               	movf	prodh,w,c
  3098  001BE0  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3099  001BE2  0E6D               	movlw	109
  3100  001BE4  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  3101  001BE6  50F3               	movf	prodl,w,c
  3102  001BE8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3103  001BEA  0E01               	movlw	1
  3104  001BEC  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  3105  001BEE  50F3               	movf	prodl,w,c
  3106  001BF0  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3107  001BF2  0E00               	movlw	0
  3108  001BF4  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3109  001BF6  50F3               	movf	prodl,w,c
  3110  001BF8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3111  001BFA  0E00               	movlw	0
  3112  001BFC  0212               	mulwf	??_years_to_days& (0+255),c
  3113  001BFE  50F3               	movf	prodl,w,c
  3114  001C00  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3115  001C02  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  3116  001C06  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  3117  001C0A  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  3118  001C0E  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  3119  001C12  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3120  001C16  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3121  001C1A  6A0A               	clrf	___lwdiv@divisor+1,c
  3122  001C1C  0E64               	movlw	100
  3123  001C1E  6E09               	movwf	___lwdiv@divisor,c
  3124  001C20  ECF1  F013         	call	___lwdiv	;wreg free
  3125  001C24  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  3126  001C28  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  3127  001C2C  90D8               	bcf	status,0,c
  3128  001C2E  3213               	rrcf	??_years_to_days+1,f,c
  3129  001C30  3212               	rrcf	??_years_to_days,f,c
  3130  001C32  90D8               	bcf	status,0,c
  3131  001C34  3213               	rrcf	??_years_to_days+1,f,c
  3132  001C36  3212               	rrcf	??_years_to_days,f,c
  3133  001C38  5007               	movf	?___lwdiv,w,c
  3134  001C3A  5E12               	subwf	??_years_to_days,f,c
  3135  001C3C  5008               	movf	?___lwdiv+1,w,c
  3136  001C3E  5A13               	subwfb	??_years_to_days+1,f,c
  3137  001C40  5012               	movf	??_years_to_days,w,c
  3138  001C42  261A               	addwf	years_to_days@ret,f,c
  3139  001C44  5013               	movf	??_years_to_days+1,w,c
  3140  001C46  221B               	addwfc	years_to_days@ret+1,f,c
  3141  001C48  0E00               	movlw	0
  3142  001C4A  221C               	addwfc	years_to_days@ret+2,f,c
  3143  001C4C  221D               	addwfc	years_to_days@ret+3,f,c
  3144  001C4E  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3145  001C52  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3146  001C56  0E01               	movlw	1
  3147  001C58  6E0A               	movwf	___lwdiv@divisor+1,c
  3148  001C5A  0E90               	movlw	144
  3149  001C5C  6E09               	movwf	___lwdiv@divisor,c
  3150  001C5E  ECF1  F013         	call	___lwdiv	;wreg free
  3151  001C62  5007               	movf	?___lwdiv,w,c
  3152  001C64  261A               	addwf	years_to_days@ret,f,c
  3153  001C66  5008               	movf	?___lwdiv+1,w,c
  3154  001C68  221B               	addwfc	years_to_days@ret+1,f,c
  3155  001C6A  0E00               	movlw	0
  3156  001C6C  221C               	addwfc	years_to_days@ret+2,f,c
  3157  001C6E  221D               	addwfc	years_to_days@ret+3,f,c
  3158  001C70  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  3159  001C74  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  3160  001C78  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  3161  001C7C  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  3162  001C80  0C00               	retlw	0	;funcret
  3163  001C82  FFFF               	dw	65535	; errata NOP
  3164  001C84                     __end_of_years_to_days:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1h	equ	0xFE2
  3177                           fsr1l	equ	0xFE1
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           plusw2	equ	0xFDB
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _months_to_days *****************
  3187 ;; Defined at:
  3188 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  month           2   13[COMRAM] unsigned int 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  2   13[COMRAM] unsigned int 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3202 ;;      Params:         2       0       0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0
  3204 ;;      Temps:          4       0       0       0       0       0       0
  3205 ;;      Totals:         6       0       0       0       0       0       0
  3206 ;;Total ram usage:        6 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    3
  3209 ;; This function calls:
  3210 ;;		___lwdiv
  3211 ;; This function is called by:
  3212 ;;		_ymd_to_scalar
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text8
  3217  002962                     __ptext8:
  3218                           	opt stack 0
  3219  002962                     _months_to_days:
  3220                           	opt stack 22
  3221                           
  3222                           ;incstack = 0
  3223  002962  FFFF               	dw	65535
  3224  002964  0EF1               	movlw	241
  3225  002966  6E10               	movwf	??_months_to_days& (0+255),c
  3226  002968  0E0B               	movlw	11
  3227  00296A  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  3228  00296C  5010               	movf	??_months_to_days& (0+255),w,c
  3229  00296E  020E               	mulwf	months_to_days@month,c
  3230  002970  CFF3 F012          	movff	prodl,??_months_to_days+2
  3231  002974  CFF4 F013          	movff	prodh,??_months_to_days+3
  3232  002978  020F               	mulwf	months_to_days@month+1,c
  3233  00297A  50F3               	movf	prodl,w,c
  3234  00297C  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3235  00297E  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  3236  002980  020E               	mulwf	months_to_days@month,c
  3237  002982  50F3               	movf	prodl,w,c
  3238  002984  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3239  002986  0E41               	movlw	65
  3240  002988  2412               	addwf	??_months_to_days+2,w,c
  3241  00298A  6E07               	movwf	___lwdiv@dividend,c
  3242  00298C  0EF4               	movlw	244
  3243  00298E  2013               	addwfc	??_months_to_days+3,w,c
  3244  002990  6E08               	movwf	___lwdiv@dividend+1,c
  3245  002992  6A0A               	clrf	___lwdiv@divisor+1,c
  3246  002994  0E64               	movlw	100
  3247  002996  6E09               	movwf	___lwdiv@divisor,c
  3248  002998  ECF1  F013         	call	___lwdiv	;wreg free
  3249  00299C  C007  F00E         	movff	?___lwdiv,?_months_to_days
  3250  0029A0  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  3251  0029A4  0012               	return		;funcret
  3252  0029A6  FFFF               	dw	65535	; errata NOP
  3253  0029A8                     __end_of_months_to_days:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1h	equ	0xFE2
  3266                           fsr1l	equ	0xFE1
  3267                           indf2	equ	0xFDF
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           plusw2	equ	0xFDB
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function ___lwdiv *****************
  3276 ;; Defined at:
  3277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  dividend        2    6[COMRAM] unsigned int 
  3280 ;;  divisor         2    8[COMRAM] unsigned int 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  quotient        2   11[COMRAM] unsigned int 
  3283 ;;  counter         1   10[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  2    6[COMRAM] unsigned int 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3293 ;;      Params:         4       0       0       0       0       0       0
  3294 ;;      Locals:         3       0       0       0       0       0       0
  3295 ;;      Temps:          0       0       0       0       0       0       0
  3296 ;;      Totals:         7       0       0       0       0       0       0
  3297 ;;Total ram usage:        7 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    2
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_months_to_days
  3304 ;;		_years_to_days
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text9
  3309  0027E2                     __ptext9:
  3310                           	opt stack 0
  3311  0027E2                     ___lwdiv:
  3312                           	opt stack 22
  3313                           
  3314                           ;incstack = 0
  3315  0027E2  FFFF               	dw	65535
  3316  0027E4  6A0C               	clrf	___lwdiv@quotient,c
  3317  0027E6  6A0D               	clrf	___lwdiv@quotient+1,c
  3318  0027E8  5009               	movf	___lwdiv@divisor,w,c
  3319  0027EA  100A               	iorwf	___lwdiv@divisor+1,w,c
  3320  0027EC  E01E               	bz	l1277
  3321  0027EE  0E01               	movlw	1
  3322  0027F0  6E0B               	movwf	___lwdiv@counter,c
  3323  0027F2  D005               	goto	l5186
  3324  0027F4                     l5184:
  3325  0027F4  FFFF               	dw	65535	; assembler added errata NOP
  3326  0027F6  90D8               	bcf	status,0,c
  3327  0027F8  3609               	rlcf	___lwdiv@divisor,f,c
  3328  0027FA  360A               	rlcf	___lwdiv@divisor+1,f,c
  3329  0027FC  2A0B               	incf	___lwdiv@counter,f,c
  3330  0027FE                     l5186:
  3331  0027FE  FFFF               	dw	65535	; assembler added errata NOP
  3332  002800  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3333  002802  D7F8               	goto	l5184
  3334  002804                     l5188:
  3335  002804  FFFF               	dw	65535	; assembler added errata NOP
  3336  002806  90D8               	bcf	status,0,c
  3337  002808  360C               	rlcf	___lwdiv@quotient,f,c
  3338  00280A  360D               	rlcf	___lwdiv@quotient+1,f,c
  3339  00280C  5009               	movf	___lwdiv@divisor,w,c
  3340  00280E  5C07               	subwf	___lwdiv@dividend,w,c
  3341  002810  500A               	movf	___lwdiv@divisor+1,w,c
  3342  002812  5808               	subwfb	___lwdiv@dividend+1,w,c
  3343  002814  E305               	bnc	l5196
  3344  002816  5009               	movf	___lwdiv@divisor,w,c
  3345  002818  5E07               	subwf	___lwdiv@dividend,f,c
  3346  00281A  500A               	movf	___lwdiv@divisor+1,w,c
  3347  00281C  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3348  00281E  800C               	bsf	___lwdiv@quotient,0,c
  3349  002820                     l5196:
  3350  002820  90D8               	bcf	status,0,c
  3351  002822  320A               	rrcf	___lwdiv@divisor+1,f,c
  3352  002824  3209               	rrcf	___lwdiv@divisor,f,c
  3353  002826  2E0B               	decfsz	___lwdiv@counter,f,c
  3354  002828  D7ED               	goto	l5188
  3355  00282A                     l1277:
  3356  00282A  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3357  00282E  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3358  002832  0012               	return		;funcret
  3359  002834  FFFF               	dw	65535	; errata NOP
  3360  002836                     __end_of___lwdiv:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postdec1	equ	0xFE5
  3372                           fsr1h	equ	0xFE2
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           plusw2	equ	0xFDB
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _isleap *****************
  3383 ;; Defined at:
  3384 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  yr              2   11[COMRAM] unsigned int 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  2   11[COMRAM] int 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3398 ;;      Params:         2       0       0       0       0       0       0
  3399 ;;      Locals:         1       0       0       0       0       0       0
  3400 ;;      Temps:          1       0       0       0       0       0       0
  3401 ;;      Totals:         4       0       0       0       0       0       0
  3402 ;;Total ram usage:        4 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    3
  3405 ;; This function calls:
  3406 ;;		___lwmod
  3407 ;; This function is called by:
  3408 ;;		_ymd_to_scalar
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text10
  3413  002836                     __ptext10:
  3414                           	opt stack 0
  3415  002836                     _isleap:
  3416                           	opt stack 22
  3417                           
  3418                           ;incstack = 0
  3419  002836  FFFF               	dw	65535
  3420  002838  0E01               	movlw	1
  3421  00283A  6E0F               	movwf	_isleap$2159,c
  3422  00283C  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3423  002840  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3424  002844  6E0A               	movwf	___lwmod@divisor+1,c
  3425  002846  0E90               	movlw	144
  3426  002848  6E09               	movwf	___lwmod@divisor,c
  3427  00284A  EC8D  F014         	call	___lwmod	;wreg free
  3428  00284E  5007               	movf	?___lwmod,w,c
  3429  002850  1008               	iorwf	?___lwmod+1,w,c
  3430  002852  E012               	bz	l1303
  3431  002854  C00C  F00E         	movff	isleap@yr,??_isleap
  3432  002858  0E03               	movlw	3
  3433  00285A  160E               	andwf	??_isleap,f,c
  3434  00285C  E10C               	bnz	l5176
  3435  00285E  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3436  002862  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3437  002866  6A0A               	clrf	___lwmod@divisor+1,c
  3438  002868  0E64               	movlw	100
  3439  00286A  6E09               	movwf	___lwmod@divisor,c
  3440  00286C  EC8D  F014         	call	___lwmod	;wreg free
  3441  002870  5007               	movf	?___lwmod,w,c
  3442  002872  1008               	iorwf	?___lwmod+1,w,c
  3443  002874  E101               	bnz	l1303
  3444  002876                     l5176:
  3445  002876  6A0F               	clrf	_isleap$2159,c
  3446  002878                     l1303:
  3447  002878  C00F  F00C         	movff	_isleap$2159,?_isleap
  3448  00287C  6A0D               	clrf	?_isleap+1,c
  3449  00287E  0012               	return		;funcret
  3450  002880  FFFF               	dw	65535	; errata NOP
  3451  002882                     __end_of_isleap:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           postinc0	equ	0xFEE
  3461                           wreg	equ	0xFE8
  3462                           postdec1	equ	0xFE5
  3463                           fsr1h	equ	0xFE2
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           plusw2	equ	0xFDB
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function ___lwmod *****************
  3474 ;; Defined at:
  3475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  dividend        2    6[COMRAM] unsigned int 
  3478 ;;  divisor         2    8[COMRAM] unsigned int 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  counter         1   10[COMRAM] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  2    6[COMRAM] unsigned int 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3490 ;;      Params:         4       0       0       0       0       0       0
  3491 ;;      Locals:         1       0       0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0
  3493 ;;      Totals:         5       0       0       0       0       0       0
  3494 ;;Total ram usage:        5 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    2
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_isleap
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text11
  3505  00291A                     __ptext11:
  3506                           	opt stack 0
  3507  00291A                     ___lwmod:
  3508                           	opt stack 22
  3509                           
  3510                           ;incstack = 0
  3511  00291A  FFFF               	dw	65535
  3512  00291C  5009               	movf	___lwmod@divisor,w,c
  3513  00291E  100A               	iorwf	___lwmod@divisor+1,w,c
  3514  002920  E01A               	bz	l1287
  3515  002922  0E01               	movlw	1
  3516  002924  6E0B               	movwf	___lwmod@counter,c
  3517  002926  D005               	goto	l5206
  3518  002928                     l5204:
  3519  002928  FFFF               	dw	65535	; assembler added errata NOP
  3520  00292A  90D8               	bcf	status,0,c
  3521  00292C  3609               	rlcf	___lwmod@divisor,f,c
  3522  00292E  360A               	rlcf	___lwmod@divisor+1,f,c
  3523  002930  2A0B               	incf	___lwmod@counter,f,c
  3524  002932                     l5206:
  3525  002932  FFFF               	dw	65535	; assembler added errata NOP
  3526  002934  AE0A               	btfss	___lwmod@divisor+1,7,c
  3527  002936  D7F8               	goto	l5204
  3528  002938                     l5208:
  3529  002938  FFFF               	dw	65535	; assembler added errata NOP
  3530  00293A  5009               	movf	___lwmod@divisor,w,c
  3531  00293C  5C07               	subwf	___lwmod@dividend,w,c
  3532  00293E  500A               	movf	___lwmod@divisor+1,w,c
  3533  002940  5808               	subwfb	___lwmod@dividend+1,w,c
  3534  002942  E304               	bnc	l5212
  3535  002944  5009               	movf	___lwmod@divisor,w,c
  3536  002946  5E07               	subwf	___lwmod@dividend,f,c
  3537  002948  500A               	movf	___lwmod@divisor+1,w,c
  3538  00294A  5A08               	subwfb	___lwmod@dividend+1,f,c
  3539  00294C                     l5212:
  3540  00294C  90D8               	bcf	status,0,c
  3541  00294E  320A               	rrcf	___lwmod@divisor+1,f,c
  3542  002950  3209               	rrcf	___lwmod@divisor,f,c
  3543  002952  2E0B               	decfsz	___lwmod@counter,f,c
  3544  002954  D7F1               	goto	l5208
  3545  002956                     l1287:
  3546  002956  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3547  00295A  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3548  00295E  0012               	return		;funcret
  3549  002960  FFFF               	dw	65535	; errata NOP
  3550  002962                     __end_of___lwmod:
  3551                           	opt stack 0
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           postdec1	equ	0xFE5
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _SetTime *****************
  3573 ;; Defined at:
  3574 ;;		line 168 in file "user.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  newTime         1    wreg     PTR long 
  3577 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  newTime         1    6[COMRAM] PTR long 
  3580 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr2l, fsr2h, status,2
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3590 ;;      Params:         0       0       0       0       0       0       0
  3591 ;;      Locals:         1       0       0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0
  3593 ;;      Totals:         1       0       0       0       0       0       0
  3594 ;;Total ram usage:        1 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_SetTimeFromRegs
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text12
  3605  002C12                     __ptext12:
  3606                           	opt stack 0
  3607  002C12                     _SetTime:
  3608                           	opt stack 25
  3609                           
  3610                           ;incstack = 0
  3611  002C12  FFFF               	dw	65535
  3612                           
  3613                           ;SetTime@newTime stored from wreg
  3614  002C14  6E07               	movwf	SetTime@newTime,c
  3615                           
  3616                           ;user.c: 170: currentTime = *newTime;
  3617  002C16  5007               	movf	SetTime@newTime,w,c
  3618  002C18  6ED9               	movwf	fsr2l,c
  3619  002C1A  6ADA               	clrf	fsr2h,c
  3620  002C1C  CFDE F0DB          	movff	postinc2,_currentTime
  3621  002C20  CFDE F0DC          	movff	postinc2,_currentTime+1
  3622  002C24  CFDE F0DD          	movff	postinc2,_currentTime+2
  3623  002C28  CFDE F0DE          	movff	postinc2,_currentTime+3
  3624  002C2C  0012               	return		;funcret
  3625  002C2E  FFFF               	dw	65535	; errata NOP
  3626  002C30                     __end_of_SetTime:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           intcon	equ	0xFF2
  3635                           postinc0	equ	0xFEE
  3636                           wreg	equ	0xFE8
  3637                           postdec1	equ	0xFE5
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           postdec2	equ	0xFDD
  3643                           plusw2	equ	0xFDB
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _SetHourMin *****************
  3649 ;; Defined at:
  3650 ;;		line 256 in file "interrupts.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  newHour         1    wreg     PTR int 
  3653 ;;		 -> SetTimeFromRegs@newTime(18), 
  3654 ;;  newMin          1    6[COMRAM] PTR int 
  3655 ;;		 -> SetTimeFromRegs@newTime(18), 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  newHour         1    7[COMRAM] PTR int 
  3658 ;;		 -> SetTimeFromRegs@newTime(18), 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr2l, fsr2h, status,2
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : F/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         1       0       0       0       0       0       0
  3669 ;;      Locals:         1       0       0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0
  3671 ;;      Totals:         2       0       0       0       0       0       0
  3672 ;;Total ram usage:        2 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    2
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_SetTimeFromRegs
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text13
  3683  002C30                     __ptext13:
  3684                           	opt stack 0
  3685  002C30                     _SetHourMin:
  3686                           	opt stack 25
  3687                           
  3688                           ;incstack = 0
  3689  002C30  FFFF               	dw	65535
  3690                           
  3691                           ;SetHourMin@newHour stored from wreg
  3692  002C32  6E08               	movwf	SetHourMin@newHour,c
  3693                           
  3694                           ;interrupts.c: 258: globalHours = *newHour;
  3695  002C34  5008               	movf	SetHourMin@newHour,w,c
  3696  002C36  6ED9               	movwf	fsr2l,c
  3697  002C38  6ADA               	clrf	fsr2h,c
  3698  002C3A  50DF               	movf	indf2,w,c
  3699  002C3C  6E76               	movwf	_globalHours,c	;volatile
  3700                           
  3701                           ;interrupts.c: 259: globalMinutes = *newMin;
  3702  002C3E  5007               	movf	SetHourMin@newMin,w,c
  3703  002C40  6ED9               	movwf	fsr2l,c
  3704  002C42  6ADA               	clrf	fsr2h,c
  3705  002C44  50DF               	movf	indf2,w,c
  3706  002C46  0100               	movlb	0	; () banked
  3707  002C48  6FDA               	movwf	_globalMinutes& (0+255),b	;volatile
  3708                           
  3709                           ; BSR set to: 0
  3710  002C4A  0012               	return		;funcret
  3711  002C4C  FFFF               	dw	65535	; errata NOP
  3712  002C4E                     __end_of_SetHourMin:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           intcon	equ	0xFF2
  3721                           postinc0	equ	0xFEE
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           fsr1h	equ	0xFE2
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           plusw2	equ	0xFDB
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _ModbusSetExceptionStatusBit *****************
  3735 ;; Defined at:
  3736 ;;		line 175 in file "ModbusRtu.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  bitNum          1    wreg     unsigned char 
  3739 ;;  value           1    6[COMRAM] unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  bitNum          1    9[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : F/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3751 ;;      Params:         1       0       0       0       0       0       0
  3752 ;;      Locals:         1       0       0       0       0       0       0
  3753 ;;      Temps:          2       0       0       0       0       0       0
  3754 ;;      Totals:         4       0       0       0       0       0       0
  3755 ;;Total ram usage:        4 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    2
  3758 ;; This function calls:
  3759 ;;		Nothing
  3760 ;; This function is called by:
  3761 ;;		_io_poll
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text14
  3766  002882                     __ptext14:
  3767                           	opt stack 0
  3768  002882                     _ModbusSetExceptionStatusBit:
  3769                           	opt stack 27
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;incstack = 0
  3773  002882  FFFF               	dw	65535
  3774                           
  3775                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  3776  002884  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  3777                           
  3778                           ;ModbusRtu.c: 177: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  3779  002886  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  3780  002888  E010               	bz	l5704
  3781  00288A  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  3782  00288E  0E01               	movlw	1
  3783  002890  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  3784  002892  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  3785  002894  D003               	goto	u4984
  3786  002896                     u4985:
  3787  002896  FFFF               	dw	65535	; assembler added errata NOP
  3788  002898  90D8               	bcf	status,0,c
  3789  00289A  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  3790  00289C                     u4984:
  3791  00289C  FFFF               	dw	65535	; assembler added errata NOP
  3792  00289E  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  3793  0028A0  D7FA               	goto	u4985
  3794  0028A2  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  3795  0028A4  0100               	movlb	0	; () banked
  3796  0028A6  13CB               	iorwf	__exceptionStatus& (0+255),f,b
  3797  0028A8  D00F               	goto	l690
  3798  0028AA                     l5704:
  3799  0028AA  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  3800  0028AE  0E01               	movlw	1
  3801  0028B0  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  3802  0028B2  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  3803  0028B4  D003               	goto	u4994
  3804  0028B6                     u4995:
  3805  0028B6  FFFF               	dw	65535	; assembler added errata NOP
  3806  0028B8  90D8               	bcf	status,0,c
  3807  0028BA  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  3808  0028BC                     u4994:
  3809  0028BC  FFFF               	dw	65535	; assembler added errata NOP
  3810  0028BE  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  3811  0028C0  D7FA               	goto	u4995
  3812  0028C2  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  3813  0028C4  0100               	movlb	0	; () banked
  3814  0028C6  17CB               	andwf	__exceptionStatus& (0+255),f,b
  3815  0028C8                     l690:
  3816  0028C8  FFFF               	dw	65535	; assembler added errata NOP
  3817                           
  3818                           ; BSR set to: 0
  3819  0028CA  0012               	return		;funcret
  3820  0028CC  FFFF               	dw	65535	; errata NOP
  3821  0028CE                     __end_of_ModbusSetExceptionStatusBit:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           intcon	equ	0xFF2
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           postdec1	equ	0xFE5
  3833                           fsr1h	equ	0xFE2
  3834                           fsr1l	equ	0xFE1
  3835                           indf2	equ	0xFDF
  3836                           postinc2	equ	0xFDE
  3837                           postdec2	equ	0xFDD
  3838                           plusw2	equ	0xFDB
  3839                           fsr2h	equ	0xFDA
  3840                           fsr2l	equ	0xFD9
  3841                           status	equ	0xFD8
  3842                           
  3843 ;; *************** function _ModbusGetLastCommand *****************
  3844 ;; Defined at:
  3845 ;;		line 811 in file "ModbusRtu.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  address         1    wreg     PTR unsigned short 
  3848 ;;		 -> io_poll@lastAddress(2), 
  3849 ;;  count           1    6[COMRAM] PTR unsigned short 
  3850 ;;		 -> io_poll@lastEndAddress(2), 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  address         1    8[COMRAM] PTR unsigned short 
  3853 ;;		 -> io_poll@lastAddress(2), 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      PTR unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg, fsr2l, fsr2h, status,2
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         2       0       0       0       0       0       0
  3864 ;;      Locals:         1       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0
  3866 ;;      Totals:         3       0       0       0       0       0       0
  3867 ;;Total ram usage:        3 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    2
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_io_poll
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text15
  3878  002B48                     __ptext15:
  3879                           	opt stack 0
  3880  002B48                     _ModbusGetLastCommand:
  3881                           	opt stack 27
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;incstack = 0
  3885  002B48  FFFF               	dw	65535
  3886                           
  3887                           ;ModbusGetLastCommand@address stored from wreg
  3888  002B4A  6E09               	movwf	ModbusGetLastCommand@address,c
  3889                           
  3890                           ;ModbusRtu.c: 813: if (address != (0))
  3891  002B4C  5009               	movf	ModbusGetLastCommand@address,w,c
  3892  002B4E  E007               	bz	l5692
  3893                           
  3894                           ;ModbusRtu.c: 814: *address = _lastAddress;
  3895  002B50  5009               	movf	ModbusGetLastCommand@address,w,c
  3896  002B52  6ED9               	movwf	fsr2l,c
  3897  002B54  6ADA               	clrf	fsr2h,c
  3898  002B56  C0BE  FFDE         	movff	__lastAddress,postinc2
  3899  002B5A  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3900  002B5E                     l5692:
  3901                           
  3902                           ;ModbusRtu.c: 815: if (count != (0))
  3903  002B5E  5007               	movf	ModbusGetLastCommand@count,w,c
  3904  002B60  E007               	bz	l5696
  3905                           
  3906                           ;ModbusRtu.c: 816: *count = _lastCount;
  3907  002B62  5007               	movf	ModbusGetLastCommand@count,w,c
  3908  002B64  6ED9               	movwf	fsr2l,c
  3909  002B66  6ADA               	clrf	fsr2h,c
  3910  002B68  C0C0  FFDE         	movff	__lastCount,postinc2
  3911  002B6C  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3912  002B70                     l5696:
  3913                           
  3914                           ;ModbusRtu.c: 817: return &_lastCommand;
  3915  002B70  0EE1               	movlw	__lastCommand& (0+255)
  3916  002B72  0012               	return		;funcret
  3917  002B74  FFFF               	dw	65535	; errata NOP
  3918  002B76                     __end_of_ModbusGetLastCommand:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           intcon	equ	0xFF2
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _InitFromEeprom *****************
  3941 ;; Defined at:
  3942 ;;		line 413 in file "main.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : F/1
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3956 ;;      Params:         0       0       0       0       0       0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0
  3958 ;;      Temps:          2       0       0       0       0       0       0
  3959 ;;      Totals:         2       0       0       0       0       0       0
  3960 ;;Total ram usage:        2 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    4
  3963 ;; This function calls:
  3964 ;;		_LoadNextEvent
  3965 ;;		_Modbus
  3966 ;;		_SetBuzzerDuty
  3967 ;;		_SwitchOffAllLeds
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;;		_io_poll
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text16
  3975  001966                     __ptext16:
  3976                           	opt stack 0
  3977  001966                     _InitFromEeprom:
  3978                           	opt stack 25
  3979                           
  3980                           ;incstack = 0
  3981  001966  FFFF               	dw	65535
  3982                           
  3983                           ;main.c: 415: buzzeLoudDuration = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  3984  001968  0E02               	movlw	2
  3985  00196A  6EA9               	movwf	4009,c	;volatile
  3986  00196C  80A6               	bsf	4006,0,c	;volatile
  3987  00196E  CFA8 F0D3          	movff	4008,_buzzeLoudDuration	;volatile
  3988                           
  3989                           ;main.c: 416: buzzeQuietDuration = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  3990  001972  0E03               	movlw	3
  3991  001974  6EA9               	movwf	4009,c	;volatile
  3992  001976  80A6               	bsf	4006,0,c	;volatile
  3993  001978  50A8               	movf	4008,w,c	;volatile
  3994                           
  3995                           ;main.c: 417: buzzerInfoPeriod = ( EEADR = 4, (void)0, RD = 1, EEDATA);
  3996  00197A  0E04               	movlw	4
  3997  00197C  6EA9               	movwf	4009,c	;volatile
  3998  00197E  80A6               	bsf	4006,0,c	;volatile
  3999  001980  50A8               	movf	4008,w,c	;volatile
  4000                           
  4001                           ;main.c: 418: buzzerAlarmPeriod = ( EEADR = 5, (void)0, RD = 1, EEDATA);
  4002  001982  0E05               	movlw	5
  4003  001984  6EA9               	movwf	4009,c	;volatile
  4004  001986  80A6               	bsf	4006,0,c	;volatile
  4005  001988  CFA8 F0D4          	movff	4008,_buzzerAlarmPeriod	;volatile
  4006                           
  4007                           ;main.c: 419: buzzerOnOffDuration = (((uint16_t)( EEADR = 6, (void)0, RD = 1, EEDATA)<<8
      +                          )|0);
  4008  00198C  0E06               	movlw	6
  4009  00198E  6EA9               	movwf	4009,c	;volatile
  4010  001990  80A6               	bsf	4006,0,c	;volatile
  4011  001992  50A8               	movf	4008,w,c	;volatile
  4012  001994  0100               	movlb	0	; () banked
  4013  001996  6FFA               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  4014  001998  6BF9               	clrf	_buzzerOnOffDuration& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;main.c: 420: buzzerOnOffPeriod = (((uint16_t)( EEADR = 7, (void)0, RD = 1, EEDATA)<<8)|
      +                          0);
  4018  00199A  0E07               	movlw	7
  4019  00199C  6EA9               	movwf	4009,c	;volatile
  4020                           
  4021                           ; BSR set to: 0
  4022  00199E  80A6               	bsf	4006,0,c	;volatile
  4023                           
  4024                           ; BSR set to: 0
  4025  0019A0  50A8               	movf	4008,w,c	;volatile
  4026  0019A2  6FFC               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  4027  0019A4  6BFB               	clrf	_buzzerOnOffPeriod& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;main.c: 421: buzzeEscaladeTime = ( EEADR = 8, (void)0, RD = 1, EEDATA);
  4031  0019A6  0E08               	movlw	8
  4032  0019A8  6EA9               	movwf	4009,c	;volatile
  4033                           
  4034                           ; BSR set to: 0
  4035  0019AA  80A6               	bsf	4006,0,c	;volatile
  4036  0019AC  50A8               	movf	4008,w,c	;volatile
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;main.c: 422: buzzerStartDurationDiv = ( EEADR = 9, (void)0, RD = 1, EEDATA);
  4040  0019AE  0E09               	movlw	9
  4041  0019B0  6EA9               	movwf	4009,c	;volatile
  4042                           
  4043                           ; BSR set to: 0
  4044  0019B2  80A6               	bsf	4006,0,c	;volatile
  4045                           
  4046                           ; BSR set to: 0
  4047  0019B4  50A8               	movf	4008,w,c	;volatile
  4048                           
  4049                           ;main.c: 423: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  4050  0019B6  0E0A               	movlw	10
  4051  0019B8  6EA9               	movwf	4009,c	;volatile
  4052                           
  4053                           ; BSR set to: 0
  4054  0019BA  80A6               	bsf	4006,0,c	;volatile
  4055                           
  4056                           ; BSR set to: 0
  4057  0019BC  CFA8 F0D9          	movff	4008,_eventAcceptTime	;volatile
  4058                           
  4059                           ;main.c: 424: eveningTimeHour = ( EEADR = 11, (void)0, RD = 1, EEDATA);
  4060  0019C0  0E0B               	movlw	11
  4061  0019C2  6EA9               	movwf	4009,c	;volatile
  4062                           
  4063                           ; BSR set to: 0
  4064  0019C4  80A6               	bsf	4006,0,c	;volatile
  4065                           
  4066                           ; BSR set to: 0
  4067  0019C6  50A8               	movf	4008,w,c	;volatile
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;main.c: 425: nightStartHour = ( EEADR = 12, (void)0, RD = 1, EEDATA);
  4071  0019C8  0E0C               	movlw	12
  4072  0019CA  6EA9               	movwf	4009,c	;volatile
  4073                           
  4074                           ; BSR set to: 0
  4075  0019CC  80A6               	bsf	4006,0,c	;volatile
  4076  0019CE  50A8               	movf	4008,w,c	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;main.c: 426: nightEndHour = ( EEADR = 13, (void)0, RD = 1, EEDATA);
  4080  0019D0  0E0D               	movlw	13
  4081  0019D2  6EA9               	movwf	4009,c	;volatile
  4082                           
  4083                           ; BSR set to: 0
  4084  0019D4  80A6               	bsf	4006,0,c	;volatile
  4085                           
  4086                           ; BSR set to: 0
  4087  0019D6  50A8               	movf	4008,w,c	;volatile
  4088                           
  4089                           ;main.c: 427: morningTimeHour = ( EEADR = 14, (void)0, RD = 1, EEDATA);
  4090  0019D8  0E0E               	movlw	14
  4091  0019DA  6EA9               	movwf	4009,c	;volatile
  4092                           
  4093                           ; BSR set to: 0
  4094  0019DC  80A6               	bsf	4006,0,c	;volatile
  4095                           
  4096                           ; BSR set to: 0
  4097  0019DE  50A8               	movf	4008,w,c	;volatile
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 428: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  4101  0019E0  0E0F               	movlw	15
  4102  0019E2  6EA9               	movwf	4009,c	;volatile
  4103                           
  4104                           ; BSR set to: 0
  4105  0019E4  80A6               	bsf	4006,0,c	;volatile
  4106                           
  4107                           ; BSR set to: 0
  4108  0019E6  50A8               	movf	4008,w,c	;volatile
  4109  0019E8  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4110  0019EA  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4111  0019EC  0E06               	movlw	6
  4112  0019EE                     u4895:
  4113  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  4114  0019F0  90D8               	bcf	status,0,c
  4115  0019F2  360F               	rlcf	??_InitFromEeprom,f,c
  4116  0019F4  3610               	rlcf	??_InitFromEeprom+1,f,c
  4117  0019F6  2EE8               	decfsz	wreg,f,c
  4118  0019F8  D7FA               	goto	u4895
  4119  0019FA  C00F  F0C2         	movff	??_InitFromEeprom,_blinkDuration
  4120  0019FE  C010  F0C3         	movff	??_InitFromEeprom+1,_blinkDuration+1
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;main.c: 429: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  4124  001A02  0E10               	movlw	16
  4125  001A04  6EA9               	movwf	4009,c	;volatile
  4126                           
  4127                           ; BSR set to: 0
  4128  001A06  80A6               	bsf	4006,0,c	;volatile
  4129                           
  4130                           ; BSR set to: 0
  4131  001A08  50A8               	movf	4008,w,c	;volatile
  4132  001A0A  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4133  001A0C  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4134  001A0E  0E06               	movlw	6
  4135  001A10                     u4905:
  4136  001A10  FFFF               	dw	65535	; assembler added errata NOP
  4137  001A12  90D8               	bcf	status,0,c
  4138  001A14  360F               	rlcf	??_InitFromEeprom,f,c
  4139  001A16  3610               	rlcf	??_InitFromEeprom+1,f,c
  4140  001A18  2EE8               	decfsz	wreg,f,c
  4141  001A1A  D7FA               	goto	u4905
  4142  001A1C  C00F  F0C4         	movff	??_InitFromEeprom,_blinkPeriod
  4143  001A20  C010  F0C5         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;main.c: 431: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  4147  001A24  0E12               	movlw	18
  4148  001A26  6EA9               	movwf	4009,c	;volatile
  4149                           
  4150                           ; BSR set to: 0
  4151  001A28  80A6               	bsf	4006,0,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154  001A2A  CFA8 F073          	movff	4008,_eventCount	;volatile
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;main.c: 433: SetBuzzerDuty(buzzeLoudDuration);
  4158  001A2E  C0D3  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  4159  001A32  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4160  001A34  EC73  F015         	call	_SetBuzzerDuty	;wreg free
  4161                           
  4162                           ;main.c: 434: PR2 = buzzerAlarmPeriod;
  4163  001A38  C0D4  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  4164                           
  4165                           ;main.c: 436: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  4166  001A3C  0E8C               	movlw	140
  4167  001A3E  6EA9               	movwf	4009,c	;volatile
  4168  001A40  80A6               	bsf	4006,0,c	;volatile
  4169  001A42  CFA8 F070          	movff	4008,__soundCount	;volatile
  4170                           
  4171                           ;main.c: 437: if(_soundCount == 0xFF)
  4172  001A46  2870               	incf	__soundCount,w,c
  4173  001A48  E101               	bnz	l5654
  4174                           
  4175                           ;main.c: 438: _soundCount = 0;
  4176  001A4A  6A70               	clrf	__soundCount,c
  4177  001A4C                     l5654:
  4178                           
  4179                           ;main.c: 440: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  4180  001A4C  0E01               	movlw	1
  4181  001A4E  6EA9               	movwf	4009,c	;volatile
  4182  001A50  80A6               	bsf	4006,0,c	;volatile
  4183  001A52  6A0C               	clrf	Modbus@u8serno,c
  4184  001A54  6A0D               	clrf	Modbus@u8txenpin,c
  4185  001A56  50A8               	movf	4008,w,c	;volatile
  4186  001A58  EC4E  F016         	call	_Modbus
  4187                           
  4188                           ;main.c: 441: SwitchOffAllLeds();
  4189  001A5C  ECE6  F015         	call	_SwitchOffAllLeds	;wreg free
  4190                           
  4191                           ;main.c: 443: LoadNextEvent();
  4192  001A60  EC03  F012         	call	_LoadNextEvent	;wreg free
  4193                           
  4194                           ;main.c: 445: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  4195  001A64  5070               	movf	__soundCount,w,c
  4196  001A66  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4197  001A68  0100               	movlb	0	; () banked
  4198  001A6A  51CE               	movf	__isSoundPlaying& (0+255),w,b
  4199  001A6C  0101               	movlb	1	; () banked
  4200  001A6E  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  4201  001A70  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  4202                           
  4203                           ; BSR set to: 1
  4204  001A74  0012               	return		;funcret
  4205  001A76  FFFF               	dw	65535	; errata NOP
  4206  001A78                     __end_of_InitFromEeprom:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           postdec1	equ	0xFE5
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           plusw2	equ	0xFDB
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _Modbus *****************
  4229 ;; Defined at:
  4230 ;;		line 170 in file "ModbusRtu.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  u8id            1    wreg     unsigned char 
  4233 ;;  u8serno         1   11[COMRAM] unsigned char 
  4234 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  u8id            1   13[COMRAM] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, status,2, status,0, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4246 ;;      Params:         2       0       0       0       0       0       0
  4247 ;;      Locals:         1       0       0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0
  4249 ;;      Totals:         3       0       0       0       0       0       0
  4250 ;;Total ram usage:        3 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    3
  4253 ;; This function calls:
  4254 ;;		_ModbusInit
  4255 ;; This function is called by:
  4256 ;;		_InitFromEeprom
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text17
  4261  002C9C                     __ptext17:
  4262                           	opt stack 0
  4263  002C9C                     _Modbus:
  4264                           	opt stack 25
  4265                           
  4266                           ; BSR set to: 1
  4267                           ;incstack = 0
  4268  002C9C  FFFF               	dw	65535
  4269                           
  4270                           ;Modbus@u8id stored from wreg
  4271  002C9E  6E0E               	movwf	Modbus@u8id,c
  4272                           
  4273                           ;ModbusRtu.c: 172: ModbusInit(u8id, u8serno, u8txenpin);
  4274  002CA0  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4275  002CA4  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4276  002CA8  500E               	movf	Modbus@u8id,w,c
  4277  002CAA  EF58  F016         	goto	_ModbusInit
  4278  002CAE  FFFF               	dw	65535	; errata NOP
  4279  002CB0                     __end_of_Modbus:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           postdec1	equ	0xFE5
  4291                           fsr1h	equ	0xFE2
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           plusw2	equ	0xFDB
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _ModbusInit *****************
  4302 ;; Defined at:
  4303 ;;		line 494 in file "ModbusRtu.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  u8id            1    wreg     unsigned char 
  4306 ;;  u8serno         1    6[COMRAM] unsigned char 
  4307 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  u8id            1   10[COMRAM] unsigned char 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, status,2, status,0
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4319 ;;      Params:         2       0       0       0       0       0       0
  4320 ;;      Locals:         3       0       0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0
  4322 ;;      Totals:         5       0       0       0       0       0       0
  4323 ;;Total ram usage:        5 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    2
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_Modbus
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text18
  4334  002CB0                     __ptext18:
  4335                           	opt stack 0
  4336  002CB0                     _ModbusInit:
  4337                           	opt stack 25
  4338                           
  4339                           ;incstack = 0
  4340  002CB0  FFFF               	dw	65535
  4341                           
  4342                           ;ModbusInit@u8id stored from wreg
  4343  002CB2  6E0B               	movwf	ModbusInit@u8id,c
  4344                           
  4345                           ;ModbusRtu.c: 496: _u8id = u8id;
  4346  002CB4  C00B  F0D1         	movff	ModbusInit@u8id,__u8id
  4347                           
  4348                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4349  002CB8  0E04               	movlw	4
  4350  002CBA  6007               	cpfslt	ModbusInit@u8serno,c
  4351  002CBC  D000               	goto	l722
  4352  002CBE                     l722:
  4353  002CBE  FFFF               	dw	65535	; assembler added errata NOP
  4354  002CC0  0012               	return		;funcret
  4355  002CC2  FFFF               	dw	65535	; errata NOP
  4356  002CC4                     __end_of_ModbusInit:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _CommandSetStatusLed *****************
  4379 ;; Defined at:
  4380 ;;		line 872 in file "main.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  led             1   29[COMRAM] unsigned char 
  4385 ;;  commandData     1   28[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4395 ;;      Params:         0       0       0       0       0       0       0
  4396 ;;      Locals:         2       0       0       0       0       0       0
  4397 ;;      Temps:          1       0       0       0       0       0       0
  4398 ;;      Totals:         3       0       0       0       0       0       0
  4399 ;;Total ram usage:        3 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    5
  4402 ;; This function calls:
  4403 ;;		_LightStatusLed
  4404 ;;		_PlaySound
  4405 ;; This function is called by:
  4406 ;;		_io_poll
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text19
  4411  002732                     __ptext19:
  4412                           	opt stack 0
  4413  002732                     _CommandSetStatusLed:
  4414                           	opt stack 24
  4415                           
  4416                           ;incstack = 0
  4417  002732  FFFF               	dw	65535
  4418                           
  4419                           ;main.c: 876: uint8_t commandData = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  4420  002734  C18C  F01D         	movff	__MODBUSHoldingRegs,CommandSetStatusLed@commandData
  4421                           
  4422                           ;main.c: 877: uint8_t led = commandData & 0x07;
  4423  002738  501D               	movf	CommandSetStatusLed@commandData,w,c
  4424  00273A  0B07               	andlw	7
  4425  00273C  6E1E               	movwf	CommandSetStatusLed@led,c
  4426                           
  4427                           ;main.c: 878: if(led >= 0x05)
  4428  00273E  0E04               	movlw	4
  4429  002740  641E               	cpfsgt	CommandSetStatusLed@led,c
  4430  002742  D001               	goto	l5678
  4431  002744  D01F               	goto	l449
  4432  002746                     l5678:
  4433  002746  FFFF               	dw	65535	; assembler added errata NOP
  4434                           
  4435                           ;main.c: 880: if((((commandData) >> (7)) & 0x01) == 0)
  4436  002748  6A1C               	clrf	??_CommandSetStatusLed& (0+255),c
  4437  00274A  AE1D               	btfss	CommandSetStatusLed@commandData,7,c
  4438  00274C  D001               	bra	u4935
  4439  00274E  2A1C               	incf	??_CommandSetStatusLed& (0+255),f,c
  4440  002750                     u4935:
  4441  002750  B01C               	btfsc	??_CommandSetStatusLed,0,c
  4442  002752  D007               	goto	l5684
  4443                           
  4444                           ;main.c: 881: {
  4445                           ;main.c: 882: LightStatusLed(led, 0, 0);
  4446  002754  0E00               	movlw	0
  4447  002756  6E07               	movwf	LightStatusLed@on,c
  4448  002758  6E08               	movwf	LightStatusLed@blink,c
  4449  00275A  501E               	movf	CommandSetStatusLed@led,w,c
  4450  00275C  EC42  F00E         	call	_LightStatusLed
  4451  002760  D011               	goto	l449
  4452  002762                     l5684:
  4453  002762  FFFF               	dw	65535	; assembler added errata NOP
  4454                           
  4455                           ;main.c: 884: }
  4456                           ;main.c: 885: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  4457  002764  0E01               	movlw	1
  4458  002766  6E07               	movwf	LightStatusLed@on,c
  4459  002768  441D               	rlncf	CommandSetStatusLed@commandData,w,c
  4460  00276A  46E8               	rlncf	wreg,f,c
  4461  00276C  0B03               	andlw	3
  4462  00276E  0B01               	andlw	1
  4463  002770  6E08               	movwf	LightStatusLed@blink,c
  4464  002772  501E               	movf	CommandSetStatusLed@led,w,c
  4465  002774  EC42  F00E         	call	_LightStatusLed
  4466                           
  4467                           ;main.c: 886: PlaySound(((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF)), ((unsigned
      +                           char)((_MODBUSHoldingRegs[1])&0xFF)));
  4468  002778  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  4469  00277C  0101               	movlb	1	; () banked
  4470  00277E  518D               	movf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  4471  002780  ECBD  F00E         	call	_PlaySound
  4472  002784                     l449:
  4473  002784  FFFF               	dw	65535	; assembler added errata NOP
  4474  002786  0012               	return		;funcret
  4475  002788  FFFF               	dw	65535	; errata NOP
  4476  00278A                     __end_of_CommandSetStatusLed:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           intcon	equ	0xFF2
  4485                           postinc0	equ	0xFEE
  4486                           wreg	equ	0xFE8
  4487                           postdec1	equ	0xFE5
  4488                           fsr1h	equ	0xFE2
  4489                           fsr1l	equ	0xFE1
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           plusw2	equ	0xFDB
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _PlaySound *****************
  4499 ;; Defined at:
  4500 ;;		line 579 in file "main.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  soundId         1    wreg     unsigned char 
  4503 ;;  playDuration    1   20[COMRAM] unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  soundId         1   25[COMRAM] unsigned char 
  4506 ;;  soundAddr       1   26[COMRAM] unsigned char 
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      unsigned char 
  4509 ;; Registers used:
  4510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : F/1
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4516 ;;      Params:         1       0       0       0       0       0       0
  4517 ;;      Locals:         2       0       0       0       0       0       0
  4518 ;;      Temps:          4       0       0       0       0       0       0
  4519 ;;      Totals:         7       0       0       0       0       0       0
  4520 ;;Total ram usage:        7 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    4
  4523 ;; This function calls:
  4524 ;;		_GetTime
  4525 ;;		_SoundPlayNextStep
  4526 ;; This function is called by:
  4527 ;;		_CommandSetStatusLed
  4528 ;;		_io_poll
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text20
  4533  001D7A                     __ptext20:
  4534                           	opt stack 0
  4535  001D7A                     _PlaySound:
  4536                           	opt stack 25
  4537                           
  4538                           ;incstack = 0
  4539  001D7A  FFFF               	dw	65535
  4540                           
  4541                           ;PlaySound@soundId stored from wreg
  4542  001D7C  6E1A               	movwf	PlaySound@soundId,c
  4543                           
  4544                           ;main.c: 581: if(soundId >= _soundCount)
  4545  001D7E  5070               	movf	__soundCount,w,c
  4546  001D80  5C1A               	subwf	PlaySound@soundId,w,c
  4547  001D82  E26B               	bc	l390
  4548                           
  4549                           ;main.c: 584: if(playDuration == 0)
  4550  001D84  5015               	movf	PlaySound@playDuration,w,c
  4551  001D86  E106               	bnz	l5440
  4552                           
  4553                           ;main.c: 585: soundTestEnd = 0;
  4554  001D88  0100               	movlb	0	; () banked
  4555  001D8A  6BB8               	clrf	_soundTestEnd& (0+255),b
  4556  001D8C  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  4557  001D8E  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  4558  001D90  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  4559  001D92  D021               	goto	l5446
  4560  001D94                     l5440:
  4561                           
  4562                           ;main.c: 586: else if(playDuration == 0xff)
  4563  001D94  2815               	incf	PlaySound@playDuration,w,c
  4564  001D96  E106               	bnz	l5444
  4565                           
  4566                           ;main.c: 587: soundTestEnd = 4294967295;
  4567  001D98  0100               	movlb	0	; () banked
  4568  001D9A  69B8               	setf	_soundTestEnd& (0+255),b
  4569  001D9C  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  4570  001D9E  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  4571  001DA0  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  4572  001DA2  D019               	goto	l5446
  4573  001DA4                     l5444:
  4574                           
  4575                           ;main.c: 588: else
  4576                           ;main.c: 589: soundTestEnd = *GetTime() + playDuration;
  4577  001DA4  EC7A  F016         	call	_GetTime	;wreg free
  4578  001DA8  6ED9               	movwf	fsr2l,c
  4579  001DAA  6ADA               	clrf	fsr2h,c
  4580  001DAC  CFDE F016          	movff	postinc2,??_PlaySound
  4581  001DB0  CFDE F017          	movff	postinc2,??_PlaySound+1
  4582  001DB4  CFDE F018          	movff	postinc2,??_PlaySound+2
  4583  001DB8  CFDE F019          	movff	postinc2,??_PlaySound+3
  4584  001DBC  5015               	movf	PlaySound@playDuration,w,c
  4585  001DBE  2416               	addwf	??_PlaySound,w,c
  4586  001DC0  0100               	movlb	0	; () banked
  4587  001DC2  6FB8               	movwf	_soundTestEnd& (0+255),b
  4588  001DC4  0E00               	movlw	0
  4589  001DC6  2017               	addwfc	??_PlaySound+1,w,c
  4590  001DC8  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  4591  001DCA  0E00               	movlw	0
  4592  001DCC  2018               	addwfc	??_PlaySound+2,w,c
  4593  001DCE  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  4594  001DD0  0E00               	movlw	0
  4595  001DD2  2019               	addwfc	??_PlaySound+3,w,c
  4596  001DD4  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  4597  001DD6                     l5446:
  4598  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;main.c: 591: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  4602  001DD8  501A               	movf	PlaySound@soundId,w,c
  4603  001DDA  0F8D               	addlw	141
  4604  001DDC  6EA9               	movwf	4009,c	;volatile
  4605                           
  4606                           ; BSR set to: 0
  4607  001DDE  80A6               	bsf	4006,0,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610  001DE0  CFA8 F01B          	movff	4008,PlaySound@soundAddr	;volatile
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;main.c: 592: if(140 + _soundCount + soundAddr >= 256)
  4614  001DE4  501B               	movf	PlaySound@soundAddr,w,c
  4615  001DE6  C070  F016         	movff	__soundCount,??_PlaySound
  4616  001DEA  6A17               	clrf	(??_PlaySound+1)& (0+255),c
  4617  001DEC  2616               	addwf	??_PlaySound,f,c
  4618  001DEE  0E00               	movlw	0
  4619  001DF0  2217               	addwfc	??_PlaySound+1,f,c
  4620  001DF2  0E8C               	movlw	140
  4621  001DF4  2616               	addwf	??_PlaySound,f,c
  4622  001DF6  0E00               	movlw	0
  4623  001DF8  2217               	addwfc	??_PlaySound+1,f,c
  4624  001DFA  BE17               	btfsc	??_PlaySound+1,7,c
  4625  001DFC  D002               	goto	l5456
  4626  001DFE  0417               	decf	??_PlaySound+1,w,c
  4627  001E00  E22C               	bc	l390
  4628  001E02                     l5456:
  4629  001E02  FFFF               	dw	65535	; assembler added errata NOP
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 595: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  4633  001E04  5070               	movf	__soundCount,w,c
  4634  001E06  241B               	addwf	PlaySound@soundAddr,w,c
  4635  001E08  0F8D               	addlw	141
  4636  001E0A  6EA9               	movwf	4009,c	;volatile
  4637                           
  4638                           ; BSR set to: 0
  4639  001E0C  80A6               	bsf	4006,0,c	;volatile
  4640                           
  4641                           ; BSR set to: 0
  4642  001E0E  CFA8 F0D0          	movff	4008,__playingSoundSteps	;volatile
  4643                           
  4644                           ;main.c: 597: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  4645  001E12  5070               	movf	__soundCount,w,c
  4646  001E14  241B               	addwf	PlaySound@soundAddr,w,c
  4647  001E16  0F8E               	addlw	142
  4648  001E18  6E6F               	movwf	__playingSoundStartPosInEe,c
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;main.c: 598: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  4652  001E1A  51D0               	movf	__playingSoundSteps& (0+255),w,b
  4653  001E1C  6E16               	movwf	??_PlaySound& (0+255),c
  4654  001E1E  506F               	movf	__playingSoundStartPosInEe,w,c
  4655  001E20  0101               	movlb	1	; () banked
  4656  001E22  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  4657  001E24  C016  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;main.c: 599: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  4661  001E28  0100               	movlb	0	; () banked
  4662  001E2A  51D0               	movf	__playingSoundSteps& (0+255),w,b
  4663  001E2C  0D03               	mullw	3
  4664  001E2E  506F               	movf	__playingSoundStartPosInEe,w,c
  4665  001E30  26F3               	addwf	prodl,f,c
  4666  001E32  0E00               	movlw	0
  4667  001E34  22F4               	addwfc	prodh,f,c
  4668  001E36  BEF4               	btfsc	prodh,7,c
  4669  001E38  D002               	goto	l396
  4670  001E3A  04F4               	decf	prodh,w,c
  4671  001E3C  E20E               	bc	l390
  4672  001E3E                     l396:
  4673  001E3E  FFFF               	dw	65535	; assembler added errata NOP
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;main.c: 602: _playingSoundCurPos = 0;
  4677  001E40  6BCF               	clrf	__playingSoundCurPos& (0+255),b
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;main.c: 603: _isSoundPlaying = 1;
  4681  001E42  0E01               	movlw	1
  4682  001E44  6FCE               	movwf	__isSoundPlaying& (0+255),b
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;main.c: 604: SoundPlayNextStep();
  4686  001E46  EC54  F010         	call	_SoundPlayNextStep	;wreg free
  4687                           
  4688                           ;main.c: 606: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  4689  001E4A  5070               	movf	__soundCount,w,c
  4690  001E4C  6E16               	movwf	??_PlaySound& (0+255),c
  4691  001E4E  0100               	movlb	0	; () banked
  4692  001E50  51CE               	movf	__isSoundPlaying& (0+255),w,b
  4693  001E52  0101               	movlb	1	; () banked
  4694  001E54  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  4695  001E56  C016  F1B7         	movff	??_PlaySound,__MODBUSInputRegs+13
  4696  001E5A                     l390:
  4697  001E5A  0012               	return		;funcret
  4698  001E5C  FFFF               	dw	65535	; errata NOP
  4699  001E5E                     __end_of_PlaySound:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           plusw2	equ	0xFDB
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _SoundPlayNextStep *****************
  4722 ;; Defined at:
  4723 ;;		line 536 in file "main.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  duration        1   19[COMRAM] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : F/0
  4734 ;;		On exit  : E/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4737 ;;      Params:         0       0       0       0       0       0       0
  4738 ;;      Locals:         1       0       0       0       0       0       0
  4739 ;;      Temps:          5       0       0       0       0       0       0
  4740 ;;      Totals:         6       0       0       0       0       0       0
  4741 ;;Total ram usage:        6 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    3
  4744 ;; This function calls:
  4745 ;;		_GetTime
  4746 ;;		_SetBuzzerDuty
  4747 ;;		_StopPlaying
  4748 ;;		_millis
  4749 ;; This function is called by:
  4750 ;;		_PlaySound
  4751 ;;		_main
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text21
  4756  0020A8                     __ptext21:
  4757                           	opt stack 0
  4758  0020A8                     _SoundPlayNextStep:
  4759                           	opt stack 25
  4760                           
  4761                           ;incstack = 0
  4762  0020A8  FFFF               	dw	65535
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;main.c: 538: if(_playingSoundCurPos >= _playingSoundSteps)
  4766  0020AA  51D0               	movf	__playingSoundSteps& (0+255),w,b
  4767  0020AC  5DCF               	subwf	__playingSoundCurPos& (0+255),w,b
  4768  0020AE  E316               	bnc	l5360
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;main.c: 539: {
  4772                           ;main.c: 540: _playingSoundCurPos = 0;
  4773  0020B0  6BCF               	clrf	__playingSoundCurPos& (0+255),b
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 541: if(*GetTime() >= soundTestEnd)
  4777  0020B2  EC7A  F016         	call	_GetTime	;wreg free
  4778  0020B6  6ED9               	movwf	fsr2l,c
  4779  0020B8  6ADA               	clrf	fsr2h,c
  4780  0020BA  0100               	movlb	0	; () banked
  4781  0020BC  51B8               	movf	_soundTestEnd& (0+255),w,b
  4782  0020BE  5CDE               	subwf	postinc2,w,c
  4783  0020C0  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  4784  0020C2  58DE               	subwfb	postinc2,w,c
  4785  0020C4  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  4786  0020C6  58DE               	subwfb	postinc2,w,c
  4787  0020C8  50DE               	movf	postinc2,w,c
  4788  0020CA  0A80               	xorlw	128
  4789  0020CC  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  4790  0020CE  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  4791  0020D0  0A80               	xorlw	128
  4792  0020D2  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  4793  0020D4  E303               	bnc	l5360
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;main.c: 542: {
  4797                           ;main.c: 543: StopPlaying();
  4798  0020D6  EC27  F016         	call	_StopPlaying	;wreg free
  4799  0020DA  D03E               	goto	l383
  4800  0020DC                     l5360:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;main.c: 545: }
  4804                           ;main.c: 546: }
  4805                           ;main.c: 547: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  4806  0020DC  51CF               	movf	__playingSoundCurPos& (0+255),w,b
  4807  0020DE  0D03               	mullw	3
  4808  0020E0  50F3               	movf	prodl,w,c
  4809  0020E2  246F               	addwf	__playingSoundStartPosInEe,w,c
  4810  0020E4  6EA9               	movwf	4009,c	;volatile
  4811                           
  4812                           ; BSR set to: 0
  4813  0020E6  80A6               	bsf	4006,0,c	;volatile
  4814                           
  4815                           ; BSR set to: 0
  4816  0020E8  50A8               	movf	4008,w,c	;volatile
  4817  0020EA  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  4818  0020EC  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  4819  0020EE  ECD1  F015         	call	_millis	;wreg free
  4820  0020F2  500F               	movf	??_SoundPlayNextStep,w,c
  4821  0020F4  2407               	addwf	?_millis,w,c
  4822  0020F6  0100               	movlb	0	; () banked
  4823  0020F8  6FA0               	movwf	__playingEndMs& (0+255),b
  4824  0020FA  5010               	movf	??_SoundPlayNextStep+1,w,c
  4825  0020FC  2008               	addwfc	?_millis+1,w,c
  4826  0020FE  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  4827  002100  0E00               	movlw	0
  4828  002102  2009               	addwfc	?_millis+2,w,c
  4829  002104  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  4830  002106  0E00               	movlw	0
  4831  002108  200A               	addwfc	?_millis+3,w,c
  4832  00210A  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;main.c: 548: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  4836  00210C  51CF               	movf	__playingSoundCurPos& (0+255),w,b
  4837  00210E  0D03               	mullw	3
  4838  002110  50F3               	movf	prodl,w,c
  4839  002112  246F               	addwf	__playingSoundStartPosInEe,w,c
  4840  002114  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  4841  002116  280F               	incf	??_SoundPlayNextStep,w,c
  4842  002118  6EA9               	movwf	4009,c	;volatile
  4843                           
  4844                           ; BSR set to: 0
  4845  00211A  80A6               	bsf	4006,0,c	;volatile
  4846                           
  4847                           ; BSR set to: 0
  4848  00211C  CFA8 FFCB          	movff	4008,4043	;volatile
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;main.c: 549: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  4852  002120  51CF               	movf	__playingSoundCurPos& (0+255),w,b
  4853  002122  0D03               	mullw	3
  4854  002124  50F3               	movf	prodl,w,c
  4855  002126  246F               	addwf	__playingSoundStartPosInEe,w,c
  4856  002128  0F02               	addlw	2
  4857  00212A  6EA9               	movwf	4009,c	;volatile
  4858                           
  4859                           ; BSR set to: 0
  4860  00212C  80A6               	bsf	4006,0,c	;volatile
  4861                           
  4862                           ; BSR set to: 0
  4863  00212E  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 550: _playingSoundCurPos++;
  4867  002132  2BCF               	incf	__playingSoundCurPos& (0+255),f,b
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;main.c: 551: if(duration == 0 || PR2 == 0)
  4871  002134  5014               	movf	SoundPlayNextStep@duration,w,c
  4872  002136  E002               	bz	l386
  4873                           
  4874                           ; BSR set to: 0
  4875  002138  50CB               	movf	4043,w,c	;volatile
  4876  00213A  E104               	bnz	l5384
  4877  00213C                     l386:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;main.c: 552: {
  4881                           ;main.c: 553: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4882  00213C  94CA               	bcf	4042,2,c	;volatile
  4883  00213E  8494               	bsf	3988,2,c	;volatile
  4884  002140  6BC6               	clrf	_IsBusserOn& (0+255),b
  4885                           
  4886                           ;main.c: 554: return;
  4887  002142  D00A               	goto	l383
  4888  002144                     l5384:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;main.c: 555: }
  4892                           ;main.c: 556: SetBuzzerDuty(duration);
  4893  002144  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  4894  002148  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4895  00214A  EC73  F015         	call	_SetBuzzerDuty	;wreg free
  4896                           
  4897                           ;main.c: 557: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  4898  00214E  9494               	bcf	3988,2,c	;volatile
  4899  002150  84CA               	bsf	4042,2,c	;volatile
  4900  002152  0E01               	movlw	1
  4901  002154  0100               	movlb	0	; () banked
  4902  002156  6FC6               	movwf	_IsBusserOn& (0+255),b
  4903  002158                     l383:
  4904  002158  FFFF               	dw	65535	; assembler added errata NOP
  4905  00215A  0012               	return		;funcret
  4906  00215C  FFFF               	dw	65535	; errata NOP
  4907  00215E                     __end_of_SoundPlayNextStep:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           postdec1	equ	0xFE5
  4919                           fsr1h	equ	0xFE2
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           plusw2	equ	0xFDB
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _StopPlaying *****************
  4930 ;; Defined at:
  4931 ;;		line 528 in file "main.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;		None
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;		None
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2
  4940 ;; Tracked objects:
  4941 ;;		On entry : F/0
  4942 ;;		On exit  : F/1
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4945 ;;      Params:         0       0       0       0       0       0       0
  4946 ;;      Locals:         0       0       0       0       0       0       0
  4947 ;;      Temps:          2       0       0       0       0       0       0
  4948 ;;      Totals:         2       0       0       0       0       0       0
  4949 ;;Total ram usage:        2 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    2
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_SoundPlayNextStep
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text22
  4960  002C4E                     __ptext22:
  4961                           	opt stack 0
  4962  002C4E                     _StopPlaying:
  4963                           	opt stack 25
  4964                           
  4965                           ;incstack = 0
  4966  002C4E  FFFF               	dw	65535
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;main.c: 530: _isSoundPlaying = 0;
  4970  002C50  6BCE               	clrf	__isSoundPlaying& (0+255),b
  4971                           
  4972                           ;main.c: 531: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4973  002C52  94CA               	bcf	4042,2,c	;volatile
  4974  002C54  8494               	bsf	3988,2,c	;volatile
  4975  002C56  6BC6               	clrf	_IsBusserOn& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 533: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  4979  002C58  5070               	movf	__soundCount,w,c
  4980  002C5A  6E07               	movwf	??_StopPlaying& (0+255),c
  4981  002C5C  51CE               	movf	__isSoundPlaying& (0+255),w,b
  4982  002C5E  0101               	movlb	1	; () banked
  4983  002C60  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  4984  002C62  C007  F1B7         	movff	??_StopPlaying,__MODBUSInputRegs+13
  4985                           
  4986                           ; BSR set to: 1
  4987  002C66  0012               	return		;funcret
  4988  002C68  FFFF               	dw	65535	; errata NOP
  4989  002C6A                     __end_of_StopPlaying:
  4990                           	opt stack 0
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           postinc0	equ	0xFEE
  4999                           wreg	equ	0xFE8
  5000                           postdec1	equ	0xFE5
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           postdec2	equ	0xFDD
  5006                           plusw2	equ	0xFDB
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _SetBuzzerDuty *****************
  5012 ;; Defined at:
  5013 ;;		line 383 in file "main.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  dc              2    6[COMRAM] unsigned int 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5027 ;;      Params:         2       0       0       0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0
  5029 ;;      Temps:          2       0       0       0       0       0       0
  5030 ;;      Totals:         4       0       0       0       0       0       0
  5031 ;;Total ram usage:        4 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    2
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_InitFromEeprom
  5038 ;;		_SoundPlayNextStep
  5039 ;;		_main
  5040 ;;		_io_poll
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text23
  5045  002AE6                     __ptext23:
  5046                           	opt stack 0
  5047  002AE6                     _SetBuzzerDuty:
  5048                           	opt stack 27
  5049                           
  5050                           ; BSR set to: 1
  5051                           ;incstack = 0
  5052  002AE6  FFFF               	dw	65535
  5053                           
  5054                           ;main.c: 388: CCP1CONbits.DC1B = dc & 0x03;
  5055  002AE8  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5056  002AEC  0E03               	movlw	3
  5057  002AEE  1609               	andwf	??_SetBuzzerDuty,f,c
  5058  002AF0  3A09               	swapf	??_SetBuzzerDuty,f,c
  5059  002AF2  50BD               	movf	4029,w,c	;volatile
  5060  002AF4  1809               	xorwf	??_SetBuzzerDuty,w,c
  5061  002AF6  0BCF               	andlw	-49
  5062  002AF8  1809               	xorwf	??_SetBuzzerDuty,w,c
  5063  002AFA  6EBD               	movwf	4029,c	;volatile
  5064                           
  5065                           ;main.c: 392: CCPR1L = (uint8_t)(dc >> 2);
  5066  002AFC  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5067  002B00  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  5068  002B04  90D8               	bcf	status,0,c
  5069  002B06  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5070  002B08  3209               	rrcf	??_SetBuzzerDuty,f,c
  5071  002B0A  90D8               	bcf	status,0,c
  5072  002B0C  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5073  002B0E  3209               	rrcf	??_SetBuzzerDuty,f,c
  5074  002B10  5009               	movf	??_SetBuzzerDuty,w,c
  5075  002B12  6EBE               	movwf	4030,c	;volatile
  5076  002B14  0012               	return		;funcret
  5077  002B16  FFFF               	dw	65535	; errata NOP
  5078  002B18                     __end_of_SetBuzzerDuty:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           postinc0	equ	0xFEE
  5088                           wreg	equ	0xFE8
  5089                           postdec1	equ	0xFE5
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           plusw2	equ	0xFDB
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function _LightStatusLed *****************
  5101 ;; Defined at:
  5102 ;;		line 335 in file "main.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  row             1    wreg     unsigned char 
  5105 ;;  on              1    6[COMRAM] unsigned char 
  5106 ;;  blink           1    7[COMRAM] unsigned char 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  row             1   13[COMRAM] unsigned char 
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg, status,2, status,0
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5118 ;;      Params:         2       0       0       0       0       0       0
  5119 ;;      Locals:         1       0       0       0       0       0       0
  5120 ;;      Temps:          5       0       0       0       0       0       0
  5121 ;;      Totals:         8       0       0       0       0       0       0
  5122 ;;Total ram usage:        8 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    2
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_main
  5129 ;;		_SetTimeFromRegs
  5130 ;;		_CommandSetStatusLed
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text24
  5135  001C84                     __ptext24:
  5136                           	opt stack 0
  5137  001C84                     _LightStatusLed:
  5138                           	opt stack 25
  5139                           
  5140                           ;incstack = 0
  5141  001C84  FFFF               	dw	65535
  5142                           
  5143                           ;LightStatusLed@row stored from wreg
  5144  001C86  6E0E               	movwf	LightStatusLed@row,c
  5145                           
  5146                           ;main.c: 337: if(row > 7)
  5147  001C88  0E07               	movlw	7
  5148  001C8A  640E               	cpfsgt	LightStatusLed@row,c
  5149  001C8C  D001               	goto	l5292
  5150  001C8E  D072               	goto	l289
  5151  001C90                     l5292:
  5152  001C90  FFFF               	dw	65535	; assembler added errata NOP
  5153                           
  5154                           ;main.c: 339: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  5155  001C92  5007               	movf	LightStatusLed@on,w,c
  5156  001C94  E010               	bz	l5296
  5157  001C96  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5158  001C9A  0E01               	movlw	1
  5159  001C9C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5160  001C9E  2A09               	incf	??_LightStatusLed,f,c
  5161  001CA0  D003               	goto	u4394
  5162  001CA2                     u4395:
  5163  001CA2  FFFF               	dw	65535	; assembler added errata NOP
  5164  001CA4  90D8               	bcf	status,0,c
  5165  001CA6  360A               	rlcf	??_LightStatusLed+1,f,c
  5166  001CA8                     u4394:
  5167  001CA8  FFFF               	dw	65535	; assembler added errata NOP
  5168  001CAA  2E09               	decfsz	??_LightStatusLed,f,c
  5169  001CAC  D7FA               	goto	u4395
  5170  001CAE  500A               	movf	??_LightStatusLed+1,w,c
  5171  001CB0  0100               	movlb	0	; () banked
  5172  001CB2  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  5173  001CB4  D00F               	goto	l5298
  5174  001CB6                     l5296:
  5175  001CB6  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5176  001CBA  0E01               	movlw	1
  5177  001CBC  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5178  001CBE  2A09               	incf	??_LightStatusLed,f,c
  5179  001CC0  D003               	goto	u4404
  5180  001CC2                     u4405:
  5181  001CC2  FFFF               	dw	65535	; assembler added errata NOP
  5182  001CC4  90D8               	bcf	status,0,c
  5183  001CC6  360A               	rlcf	??_LightStatusLed+1,f,c
  5184  001CC8                     u4404:
  5185  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  5186  001CCA  2E09               	decfsz	??_LightStatusLed,f,c
  5187  001CCC  D7FA               	goto	u4405
  5188  001CCE  1C0A               	comf	??_LightStatusLed+1,w,c
  5189  001CD0  0100               	movlb	0	; () banked
  5190  001CD2  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  5191  001CD4                     l5298:
  5192  001CD4  FFFF               	dw	65535	; assembler added errata NOP
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;main.c: 340: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  5196  001CD6  5008               	movf	LightStatusLed@blink,w,c
  5197  001CD8  E010               	bz	l5302
  5198                           
  5199                           ; BSR set to: 0
  5200  001CDA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5201  001CDE  0E01               	movlw	1
  5202  001CE0  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5203  001CE2  2A09               	incf	??_LightStatusLed,f,c
  5204  001CE4  D003               	goto	u4424
  5205  001CE6                     u4425:
  5206  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  5207  001CE8  90D8               	bcf	status,0,c
  5208  001CEA  360A               	rlcf	??_LightStatusLed+1,f,c
  5209  001CEC                     u4424:
  5210  001CEC  FFFF               	dw	65535	; assembler added errata NOP
  5211  001CEE  2E09               	decfsz	??_LightStatusLed,f,c
  5212  001CF0  D7FA               	goto	u4425
  5213  001CF2  500A               	movf	??_LightStatusLed+1,w,c
  5214  001CF4  0100               	movlb	0	; () banked
  5215  001CF6  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  5216  001CF8  D00F               	goto	l5304
  5217  001CFA                     l5302:
  5218                           
  5219                           ; BSR set to: 0
  5220  001CFA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5221  001CFE  0E01               	movlw	1
  5222  001D00  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5223  001D02  2A09               	incf	??_LightStatusLed,f,c
  5224  001D04  D003               	goto	u4434
  5225  001D06                     u4435:
  5226  001D06  FFFF               	dw	65535	; assembler added errata NOP
  5227  001D08  90D8               	bcf	status,0,c
  5228  001D0A  360A               	rlcf	??_LightStatusLed+1,f,c
  5229  001D0C                     u4434:
  5230  001D0C  FFFF               	dw	65535	; assembler added errata NOP
  5231  001D0E  2E09               	decfsz	??_LightStatusLed,f,c
  5232  001D10  D7FA               	goto	u4435
  5233  001D12  1C0A               	comf	??_LightStatusLed+1,w,c
  5234  001D14  0100               	movlb	0	; () banked
  5235  001D16  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  5236  001D18                     l5304:
  5237  001D18  FFFF               	dw	65535	; assembler added errata NOP
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;main.c: 341: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  5241  001D1A  5007               	movf	LightStatusLed@on,w,c
  5242  001D1C  E014               	bz	l5308
  5243                           
  5244                           ; BSR set to: 0
  5245  001D1E  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5246  001D22  0E01               	movlw	1
  5247  001D24  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5248  001D26  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  5249  001D28  2A09               	incf	??_LightStatusLed,f,c
  5250  001D2A  D004               	goto	u4454
  5251  001D2C                     u4455:
  5252  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  5253  001D2E  90D8               	bcf	status,0,c
  5254  001D30  360A               	rlcf	??_LightStatusLed+1,f,c
  5255  001D32  360B               	rlcf	??_LightStatusLed+2,f,c
  5256  001D34                     u4454:
  5257  001D34  FFFF               	dw	65535	; assembler added errata NOP
  5258  001D36  2E09               	decfsz	??_LightStatusLed,f,c
  5259  001D38  D7F9               	goto	u4455
  5260  001D3A  500A               	movf	??_LightStatusLed+1,w,c
  5261  001D3C  0100               	movlb	0	; () banked
  5262  001D3E  13DF               	iorwf	__MODBUSCoils& (0+255),f,b
  5263  001D40  500B               	movf	??_LightStatusLed+2,w,c
  5264  001D42  13E0               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  5265  001D44  D017               	goto	l289
  5266  001D46                     l5308:
  5267                           
  5268                           ; BSR set to: 0
  5269  001D46  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  5270  001D4A  0E01               	movlw	1
  5271  001D4C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  5272  001D4E  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  5273  001D50  2A09               	incf	??_LightStatusLed,f,c
  5274  001D52  D004               	goto	u4464
  5275  001D54                     u4465:
  5276  001D54  FFFF               	dw	65535	; assembler added errata NOP
  5277  001D56  90D8               	bcf	status,0,c
  5278  001D58  360A               	rlcf	??_LightStatusLed+1,f,c
  5279  001D5A  360B               	rlcf	??_LightStatusLed+2,f,c
  5280  001D5C                     u4464:
  5281  001D5C  FFFF               	dw	65535	; assembler added errata NOP
  5282  001D5E  2E09               	decfsz	??_LightStatusLed,f,c
  5283  001D60  D7F9               	goto	u4465
  5284  001D62  1C0A               	comf	??_LightStatusLed+1,w,c
  5285  001D64  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  5286  001D66  1C0B               	comf	??_LightStatusLed+2,w,c
  5287  001D68  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  5288  001D6A  500C               	movf	??_LightStatusLed+3,w,c
  5289  001D6C  0100               	movlb	0	; () banked
  5290  001D6E  17DF               	andwf	__MODBUSCoils& (0+255),f,b
  5291  001D70  500D               	movf	??_LightStatusLed+4,w,c
  5292  001D72  17E0               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  5293  001D74                     l289:
  5294  001D74  FFFF               	dw	65535	; assembler added errata NOP
  5295  001D76  0012               	return		;funcret
  5296  001D78  FFFF               	dw	65535	; errata NOP
  5297  001D7A                     __end_of_LightStatusLed:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1h	equ	0xFE2
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           plusw2	equ	0xFDB
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _ResetEvent *****************
  5320 ;; Defined at:
  5321 ;;		line 614 in file "main.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  state           1    wreg     unsigned char 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  state           1   16[COMRAM] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : E/0
  5332 ;;		On exit  : F/1
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5335 ;;      Params:         0       0       0       0       0       0       0
  5336 ;;      Locals:         3       0       0       0       0       0       0
  5337 ;;      Temps:          2       0       0       0       0       0       0
  5338 ;;      Totals:         5       0       0       0       0       0       0
  5339 ;;Total ram usage:        5 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		_LightLed
  5344 ;; This function is called by:
  5345 ;;		_main
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text25
  5350  002A32                     __ptext25:
  5351                           	opt stack 0
  5352  002A32                     _ResetEvent:
  5353                           	opt stack 27
  5354                           
  5355                           ;incstack = 0
  5356  002A32  FFFF               	dw	65535
  5357                           
  5358                           ;ResetEvent@state stored from wreg
  5359  002A34  6E11               	movwf	ResetEvent@state,c
  5360                           
  5361                           ;main.c: 616: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  5362  002A36  5011               	movf	ResetEvent@state,w,c
  5363  002A38  E103               	bnz	l6052
  5364  002A3A  6A13               	clrf	_ResetEvent$852+1,c
  5365  002A3C  0E02               	movlw	2
  5366  002A3E  D002               	goto	L2
  5367  002A40                     l6052:
  5368  002A40  6A13               	clrf	_ResetEvent$852+1,c
  5369  002A42  0E01               	movlw	1
  5370  002A44                     L2:
  5371  002A44  FFFF               	dw	65535	; assembler added errata NOP
  5372  002A46  6E12               	movwf	_ResetEvent$852,c
  5373  002A48  C012  F007         	movff	_ResetEvent$852,LightLed@ledState
  5374  002A4C  6A08               	clrf	LightLed@blink,c
  5375  002A4E  2875               	incf	_currentAlarmedEventNum,w,c
  5376  002A50  ECC0  F004         	call	_LightLed
  5377                           
  5378                           ;main.c: 617: currentAlarmedEventNum = 0xff;
  5379  002A54  6875               	setf	_currentAlarmedEventNum,c
  5380                           
  5381                           ;main.c: 618: eventResetSecond = 0;
  5382  002A56  0100               	movlb	0	; () banked
  5383  002A58  6BAC               	clrf	_eventResetSecond& (0+255),b
  5384  002A5A  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  5385  002A5C  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  5386  002A5E  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;main.c: 619: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5390  002A60  5075               	movf	_currentAlarmedEventNum,w,c
  5391  002A62  6E0F               	movwf	??_ResetEvent& (0+255),c
  5392  002A64  5074               	movf	_curEventNum,w,c
  5393  002A66  0101               	movlb	1	; () banked
  5394  002A68  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5395  002A6A  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  5396                           
  5397                           ; BSR set to: 1
  5398  002A6E  0012               	return		;funcret
  5399  002A70  FFFF               	dw	65535	; errata NOP
  5400  002A72                     __end_of_ResetEvent:
  5401                           	opt stack 0
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           intcon	equ	0xFF2
  5409                           postinc0	equ	0xFEE
  5410                           wreg	equ	0xFE8
  5411                           postdec1	equ	0xFE5
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _ProcessLightBlock *****************
  5423 ;; Defined at:
  5424 ;;		line 461 in file "main.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  curMs           1    wreg     PTR unsigned long 
  5427 ;;		 -> main@curMs(4), 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  5430 ;;		 -> main@curMs(4), 
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : F/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5440 ;;      Params:         0       0       0       0       0       0       0
  5441 ;;      Locals:         1       0       0       0       0       0       0
  5442 ;;      Temps:          4       0       0       0       0       0       0
  5443 ;;      Totals:         5       0       0       0       0       0       0
  5444 ;;Total ram usage:        5 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    3
  5447 ;; This function calls:
  5448 ;;		_UpdateLedRegister
  5449 ;; This function is called by:
  5450 ;;		_main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text26
  5455  000C72                     __ptext26:
  5456                           	opt stack 0
  5457  000C72                     _ProcessLightBlock:
  5458                           	opt stack 27
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;incstack = 0
  5462  000C72  FFFF               	dw	65535
  5463                           
  5464                           ;ProcessLightBlock@curMs stored from wreg
  5465  000C74  6E0C               	movwf	ProcessLightBlock@curMs,c
  5466                           
  5467                           ;main.c: 463: diffTime = *curMs - oldBlinkOnTime;
  5468  000C76  500C               	movf	ProcessLightBlock@curMs,w,c
  5469  000C78  6ED9               	movwf	fsr2l,c
  5470  000C7A  6ADA               	clrf	fsr2h,c
  5471  000C7C  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  5472  000C80  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  5473  000C84  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  5474  000C88  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  5475  000C8C  0100               	movlb	0	; () banked
  5476  000C8E  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  5477  000C90  5C08               	subwf	??_ProcessLightBlock,w,c
  5478  000C92  6FA8               	movwf	_diffTime& (0+255),b
  5479  000C94  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  5480  000C96  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5481  000C98  6FA9               	movwf	(_diffTime+1)& (0+255),b
  5482  000C9A  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  5483  000C9C  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5484  000C9E  6FAA               	movwf	(_diffTime+2)& (0+255),b
  5485  000CA0  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  5486  000CA2  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5487  000CA4  6FAB               	movwf	(_diffTime+3)& (0+255),b
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;main.c: 464: if(diffTime > blinkPeriod)
  5491  000CA6  51C4               	movf	_blinkPeriod& (0+255),w,b
  5492  000CA8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  5493  000CAA  51C5               	movf	(_blinkPeriod+1)& (0+255),w,b
  5494  000CAC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5495  000CAE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5496  000CB0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5497  000CB2  51A8               	movf	_diffTime& (0+255),w,b
  5498  000CB4  5C08               	subwf	??_ProcessLightBlock,w,c
  5499  000CB6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  5500  000CB8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5501  000CBA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  5502  000CBC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5503  000CBE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  5504  000CC0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5505  000CC2  E20E               	bc	l4528
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;main.c: 465: {
  5509                           ;main.c: 466: blinkOn = 1;
  5510  000CC4  0E01               	movlw	1
  5511  000CC6  6E72               	movwf	_blinkOn,c
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;main.c: 467: oldBlinkOnTime = *curMs;
  5515  000CC8  500C               	movf	ProcessLightBlock@curMs,w,c
  5516  000CCA  6ED9               	movwf	fsr2l,c
  5517  000CCC  6ADA               	clrf	fsr2h,c
  5518  000CCE  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  5519  000CD2  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  5520  000CD6  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  5521  000CDA  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  5522                           
  5523                           ;main.c: 468: }
  5524  000CDE  D0F1               	goto	l4680
  5525  000CE0                     l4528:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;main.c: 469: else if(blinkOn && diffTime > blinkDuration)
  5529  000CE0  5072               	movf	_blinkOn,w,c
  5530  000CE2  E101 D0EE          	bz	l4680
  5531                           
  5532                           ; BSR set to: 0
  5533  000CE6  51C2               	movf	_blinkDuration& (0+255),w,b
  5534  000CE8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  5535  000CEA  51C3               	movf	(_blinkDuration+1)& (0+255),w,b
  5536  000CEC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5537  000CEE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5538  000CF0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5539  000CF2  51A8               	movf	_diffTime& (0+255),w,b
  5540  000CF4  5C08               	subwf	??_ProcessLightBlock,w,c
  5541  000CF6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  5542  000CF8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5543  000CFA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  5544  000CFC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5545  000CFE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  5546  000D00  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5547  000D02  E301 D0DE          	bc	l4680
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;main.c: 470: {
  5551                           ;main.c: 471: blinkOn = 0;
  5552  000D06  6A72               	clrf	_blinkOn,c
  5553  000D08  D0DC               	goto	l4680
  5554  000D0A                     l4534:
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;main.c: 479: LATA &= 0xF0;
  5558  000D0A  0EF0               	movlw	240
  5559  000D0C  1689               	andwf	3977,f,c	;volatile
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;main.c: 480: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  5563  000D0E  5072               	movf	_blinkOn,w,c
  5564  000D10  E003               	bz	l4540
  5565                           
  5566                           ; BSR set to: 0
  5567  000D12  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  5568  000D16  D003               	goto	l4542
  5569  000D18                     l4540:
  5570                           
  5571                           ; BSR set to: 0
  5572  000D18  5190               	movf	_ledStatuses& (0+255),w,b
  5573  000D1A  1980               	xorwf	_ledBlink& (0+255),w,b
  5574  000D1C  6E8A               	movwf	3978,c	;volatile
  5575  000D1E                     l4542:
  5576  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  5577                           
  5578                           ; BSR set to: 0
  5579  000D20  0E00               	movlw	0
  5580  000D22  ECD4  F014         	call	_UpdateLedRegister
  5581                           
  5582                           ;main.c: 481: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  5583  000D26  5072               	movf	_blinkOn,w,c
  5584  000D28  E003               	bz	l4548
  5585  000D2A  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  5586  000D2E  D004               	goto	l4550
  5587  000D30                     l4548:
  5588  000D30  0100               	movlb	0	; () banked
  5589  000D32  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  5590  000D34  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  5591  000D36  6E8A               	movwf	3978,c	;volatile
  5592  000D38                     l4550:
  5593  000D38  FFFF               	dw	65535	; assembler added errata NOP
  5594  000D3A  0E01               	movlw	1
  5595  000D3C  ECD4  F014         	call	_UpdateLedRegister
  5596                           
  5597                           ;main.c: 482: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5598  000D40  5072               	movf	_blinkOn,w,c
  5599  000D42  E003               	bz	l4556
  5600  000D44  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5601  000D48  D004               	goto	l4558
  5602  000D4A                     l4556:
  5603  000D4A  0100               	movlb	0	; () banked
  5604  000D4C  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  5605  000D4E  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  5606  000D50  6E8A               	movwf	3978,c	;volatile
  5607  000D52                     l4558:
  5608  000D52  FFFF               	dw	65535	; assembler added errata NOP
  5609  000D54  0E02               	movlw	2
  5610  000D56  ECD4  F014         	call	_UpdateLedRegister
  5611                           
  5612                           ;main.c: 483: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5613  000D5A  5072               	movf	_blinkOn,w,c
  5614  000D5C  E003               	bz	l4564
  5615  000D5E  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5616  000D62  D004               	goto	l4566
  5617  000D64                     l4564:
  5618  000D64  0100               	movlb	0	; () banked
  5619  000D66  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  5620  000D68  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5621  000D6A  6E8A               	movwf	3978,c	;volatile
  5622  000D6C                     l4566:
  5623  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  5624  000D6E  0E03               	movlw	3
  5625  000D70  ECD4  F014         	call	_UpdateLedRegister
  5626                           
  5627                           ;main.c: 484: LATAbits.LATA0 = 1;
  5628  000D74  8089               	bsf	3977,0,c	;volatile
  5629                           
  5630                           ;main.c: 485: break;
  5631  000D76  D0B0               	goto	l4682
  5632  000D78                     l4570:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;main.c: 487: LATA &= 0xF0;
  5636  000D78  0EF0               	movlw	240
  5637  000D7A  1689               	andwf	3977,f,c	;volatile
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;main.c: 488: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5641  000D7C  5072               	movf	_blinkOn,w,c
  5642  000D7E  E003               	bz	l4576
  5643                           
  5644                           ; BSR set to: 0
  5645  000D80  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5646  000D84  D003               	goto	l4578
  5647  000D86                     l4576:
  5648                           
  5649                           ; BSR set to: 0
  5650  000D86  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  5651  000D88  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  5652  000D8A  6E8A               	movwf	3978,c	;volatile
  5653  000D8C                     l4578:
  5654  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  5655                           
  5656                           ; BSR set to: 0
  5657  000D8E  0E00               	movlw	0
  5658  000D90  ECD4  F014         	call	_UpdateLedRegister
  5659                           
  5660                           ;main.c: 489: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5661  000D94  5072               	movf	_blinkOn,w,c
  5662  000D96  E003               	bz	l4584
  5663  000D98  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5664  000D9C  D004               	goto	l4586
  5665  000D9E                     l4584:
  5666  000D9E  0100               	movlb	0	; () banked
  5667  000DA0  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  5668  000DA2  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  5669  000DA4  6E8A               	movwf	3978,c	;volatile
  5670  000DA6                     l4586:
  5671  000DA6  FFFF               	dw	65535	; assembler added errata NOP
  5672  000DA8  0E01               	movlw	1
  5673  000DAA  ECD4  F014         	call	_UpdateLedRegister
  5674                           
  5675                           ;main.c: 490: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5676  000DAE  5072               	movf	_blinkOn,w,c
  5677  000DB0  E003               	bz	l4592
  5678  000DB2  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5679  000DB6  D004               	goto	l4594
  5680  000DB8                     l4592:
  5681  000DB8  0100               	movlb	0	; () banked
  5682  000DBA  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  5683  000DBC  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  5684  000DBE  6E8A               	movwf	3978,c	;volatile
  5685  000DC0                     l4594:
  5686  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  5687  000DC2  0E02               	movlw	2
  5688  000DC4  ECD4  F014         	call	_UpdateLedRegister
  5689                           
  5690                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5691  000DC8  5072               	movf	_blinkOn,w,c
  5692  000DCA  E003               	bz	l4600
  5693  000DCC  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5694  000DD0  D004               	goto	l4602
  5695  000DD2                     l4600:
  5696  000DD2  0100               	movlb	0	; () banked
  5697  000DD4  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  5698  000DD6  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5699  000DD8  6E8A               	movwf	3978,c	;volatile
  5700  000DDA                     l4602:
  5701  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  5702  000DDC  0E03               	movlw	3
  5703  000DDE  ECD4  F014         	call	_UpdateLedRegister
  5704                           
  5705                           ;main.c: 492: LATAbits.LATA1 = 1;
  5706  000DE2  8289               	bsf	3977,1,c	;volatile
  5707                           
  5708                           ;main.c: 493: break;
  5709  000DE4  D079               	goto	l4682
  5710  000DE6                     l4606:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;main.c: 495: LATA &= 0xF0;
  5714  000DE6  0EF0               	movlw	240
  5715  000DE8  1689               	andwf	3977,f,c	;volatile
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;main.c: 496: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5719  000DEA  5072               	movf	_blinkOn,w,c
  5720  000DEC  E003               	bz	l4612
  5721                           
  5722                           ; BSR set to: 0
  5723  000DEE  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5724  000DF2  D003               	goto	l4614
  5725  000DF4                     l4612:
  5726                           
  5727                           ; BSR set to: 0
  5728  000DF4  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5729  000DF6  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5730  000DF8  6E8A               	movwf	3978,c	;volatile
  5731  000DFA                     l4614:
  5732  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  5733                           
  5734                           ; BSR set to: 0
  5735  000DFC  0E00               	movlw	0
  5736  000DFE  ECD4  F014         	call	_UpdateLedRegister
  5737                           
  5738                           ;main.c: 497: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5739  000E02  5072               	movf	_blinkOn,w,c
  5740  000E04  E003               	bz	l4620
  5741  000E06  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5742  000E0A  D004               	goto	l4622
  5743  000E0C                     l4620:
  5744  000E0C  0100               	movlb	0	; () banked
  5745  000E0E  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5746  000E10  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5747  000E12  6E8A               	movwf	3978,c	;volatile
  5748  000E14                     l4622:
  5749  000E14  FFFF               	dw	65535	; assembler added errata NOP
  5750  000E16  0E01               	movlw	1
  5751  000E18  ECD4  F014         	call	_UpdateLedRegister
  5752                           
  5753                           ;main.c: 498: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5754  000E1C  5072               	movf	_blinkOn,w,c
  5755  000E1E  E003               	bz	l4628
  5756  000E20  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5757  000E24  D004               	goto	l4630
  5758  000E26                     l4628:
  5759  000E26  0100               	movlb	0	; () banked
  5760  000E28  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5761  000E2A  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5762  000E2C  6E8A               	movwf	3978,c	;volatile
  5763  000E2E                     l4630:
  5764  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  5765  000E30  0E02               	movlw	2
  5766  000E32  ECD4  F014         	call	_UpdateLedRegister
  5767                           
  5768                           ;main.c: 499: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5769  000E36  5072               	movf	_blinkOn,w,c
  5770  000E38  E003               	bz	l4636
  5771  000E3A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5772  000E3E  D004               	goto	l4638
  5773  000E40                     l4636:
  5774  000E40  0100               	movlb	0	; () banked
  5775  000E42  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5776  000E44  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5777  000E46  6E8A               	movwf	3978,c	;volatile
  5778  000E48                     l4638:
  5779  000E48  FFFF               	dw	65535	; assembler added errata NOP
  5780  000E4A  0E03               	movlw	3
  5781  000E4C  ECD4  F014         	call	_UpdateLedRegister
  5782                           
  5783                           ;main.c: 500: LATAbits.LATA2 = 1;
  5784  000E50  8489               	bsf	3977,2,c	;volatile
  5785                           
  5786                           ;main.c: 501: break;
  5787  000E52  D042               	goto	l4682
  5788  000E54                     l4642:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;main.c: 503: LATA &= 0xF0;
  5792  000E54  0EF0               	movlw	240
  5793  000E56  1689               	andwf	3977,f,c	;volatile
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;main.c: 504: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5797  000E58  5072               	movf	_blinkOn,w,c
  5798  000E5A  E003               	bz	l4648
  5799                           
  5800                           ; BSR set to: 0
  5801  000E5C  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5802  000E60  D003               	goto	l4650
  5803  000E62                     l4648:
  5804                           
  5805                           ; BSR set to: 0
  5806  000E62  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5807  000E64  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5808  000E66  6E8A               	movwf	3978,c	;volatile
  5809  000E68                     l4650:
  5810  000E68  FFFF               	dw	65535	; assembler added errata NOP
  5811                           
  5812                           ; BSR set to: 0
  5813  000E6A  0E00               	movlw	0
  5814  000E6C  ECD4  F014         	call	_UpdateLedRegister
  5815                           
  5816                           ;main.c: 505: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5817  000E70  5072               	movf	_blinkOn,w,c
  5818  000E72  E003               	bz	l4656
  5819  000E74  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5820  000E78  D004               	goto	l4658
  5821  000E7A                     l4656:
  5822  000E7A  0100               	movlb	0	; () banked
  5823  000E7C  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5824  000E7E  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5825  000E80  6E8A               	movwf	3978,c	;volatile
  5826  000E82                     l4658:
  5827  000E82  FFFF               	dw	65535	; assembler added errata NOP
  5828  000E84  0E01               	movlw	1
  5829  000E86  ECD4  F014         	call	_UpdateLedRegister
  5830                           
  5831                           ;main.c: 506: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5832  000E8A  5072               	movf	_blinkOn,w,c
  5833  000E8C  E003               	bz	l4664
  5834  000E8E  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5835  000E92  D004               	goto	l4666
  5836  000E94                     l4664:
  5837  000E94  0100               	movlb	0	; () banked
  5838  000E96  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5839  000E98  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5840  000E9A  6E8A               	movwf	3978,c	;volatile
  5841  000E9C                     l4666:
  5842  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  5843  000E9E  0E02               	movlw	2
  5844  000EA0  ECD4  F014         	call	_UpdateLedRegister
  5845                           
  5846                           ;main.c: 507: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5847  000EA4  5072               	movf	_blinkOn,w,c
  5848  000EA6  E003               	bz	l4672
  5849  000EA8  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5850  000EAC  D004               	goto	l4674
  5851  000EAE                     l4672:
  5852  000EAE  0100               	movlb	0	; () banked
  5853  000EB0  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5854  000EB2  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5855  000EB4  6E8A               	movwf	3978,c	;volatile
  5856  000EB6                     l4674:
  5857  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  5858  000EB8  0E03               	movlw	3
  5859  000EBA  ECD4  F014         	call	_UpdateLedRegister
  5860                           
  5861                           ;main.c: 508: LATAbits.LATA3 = 1;
  5862  000EBE  8689               	bsf	3977,3,c	;volatile
  5863                           
  5864                           ;main.c: 509: break;
  5865  000EC0  D00B               	goto	l4682
  5866  000EC2                     l4680:
  5867  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  5868                           
  5869                           ; BSR set to: 0
  5870  000EC4  51D8               	movf	_currentLedBlock& (0+255),w,b
  5871                           
  5872                           ; Switch size 1, requested type "speed"
  5873                           ; Number of cases is 4, Range of values is 0 to 3
  5874                           ; switch strategies available:
  5875                           ; Name         Instructions Cycles
  5876                           ; simple_byte           13     7 (average)
  5877                           ;	Chosen strategy is simple_byte
  5878  000EC6  E101 D720          	bz	l4534
  5879  000ECA  0A01               	xorlw	1	; case 1
  5880  000ECC  E101 D754          	bz	l4570
  5881  000ED0  0A03               	xorlw	3	; case 2
  5882  000ED2  E089               	bz	l4606
  5883  000ED4  0A01               	xorlw	1	; case 3
  5884  000ED6  E0BE               	bz	l4642
  5885  000ED8                     l4682:
  5886  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  5887                           
  5888                           ;main.c: 512: currentLedBlock++;
  5889  000EDA  0100               	movlb	0	; () banked
  5890  000EDC  2BD8               	incf	_currentLedBlock& (0+255),f,b
  5891                           
  5892                           ;main.c: 515: currentLedBlock &= 0xFB;
  5893  000EDE  95D8               	bcf	_currentLedBlock& (0+255),2,b
  5894                           
  5895                           ; BSR set to: 0
  5896  000EE0  0012               	return		;funcret
  5897  000EE2  FFFF               	dw	65535	; errata NOP
  5898  000EE4                     __end_of_ProcessLightBlock:
  5899                           	opt stack 0
  5900                           tblptru	equ	0xFF8
  5901                           tblptrh	equ	0xFF7
  5902                           tblptrl	equ	0xFF6
  5903                           tablat	equ	0xFF5
  5904                           prodh	equ	0xFF4
  5905                           prodl	equ	0xFF3
  5906                           intcon	equ	0xFF2
  5907                           postinc0	equ	0xFEE
  5908                           wreg	equ	0xFE8
  5909                           postdec1	equ	0xFE5
  5910                           fsr1h	equ	0xFE2
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function _UpdateLedRegister *****************
  5921 ;; Defined at:
  5922 ;;		line 251 in file "main.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  regIndex        1    wreg     unsigned char 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  regIndex        1    6[COMRAM] unsigned char 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5936 ;;      Params:         0       0       0       0       0       0       0
  5937 ;;      Locals:         1       0       0       0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0
  5939 ;;      Totals:         1       0       0       0       0       0       0
  5940 ;;Total ram usage:        1 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    2
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_ProcessLightBlock
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text27
  5951  0029A8                     __ptext27:
  5952                           	opt stack 0
  5953  0029A8                     _UpdateLedRegister:
  5954                           	opt stack 27
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;incstack = 0
  5958  0029A8  FFFF               	dw	65535
  5959                           
  5960                           ;UpdateLedRegister@regIndex stored from wreg
  5961  0029AA  6E07               	movwf	UpdateLedRegister@regIndex,c
  5962                           
  5963                           ;main.c: 253: switch(regIndex)
  5964  0029AC  D014               	goto	l3784
  5965  0029AE                     l247:
  5966                           
  5967                           ;main.c: 256: LATAbits.LATA4 = 0;
  5968  0029AE  9889               	bcf	3977,4,c	;volatile
  5969                           
  5970                           ;main.c: 257: TRISAbits.RA4 = 0;
  5971  0029B0  9892               	bcf	3986,4,c	;volatile
  5972                           
  5973                           ;main.c: 258: LATAbits.LATA4 = 1;
  5974  0029B2  8889               	bsf	3977,4,c	;volatile
  5975                           
  5976                           ;main.c: 259: TRISAbits.RA4 = 1;
  5977  0029B4  8892               	bsf	3986,4,c	;volatile
  5978                           
  5979                           ;main.c: 260: break;
  5980  0029B6  D018               	goto	l252
  5981  0029B8                     l249:
  5982                           
  5983                           ;main.c: 262: LATCbits.LATC3 = 0;
  5984  0029B8  968B               	bcf	3979,3,c	;volatile
  5985                           
  5986                           ;main.c: 263: TRISCbits.RC3 = 0;
  5987  0029BA  9694               	bcf	3988,3,c	;volatile
  5988                           
  5989                           ;main.c: 264: LATCbits.LATC3 = 1;
  5990  0029BC  868B               	bsf	3979,3,c	;volatile
  5991                           
  5992                           ;main.c: 265: TRISCbits.RC3 = 1;
  5993  0029BE  8694               	bsf	3988,3,c	;volatile
  5994                           
  5995                           ;main.c: 266: break;
  5996  0029C0  D013               	goto	l252
  5997  0029C2                     l250:
  5998                           
  5999                           ;main.c: 268: LATCbits.LATC0 = 0;
  6000  0029C2  908B               	bcf	3979,0,c	;volatile
  6001                           
  6002                           ;main.c: 269: TRISCbits.RC0 = 0;
  6003  0029C4  9094               	bcf	3988,0,c	;volatile
  6004                           
  6005                           ;main.c: 270: LATCbits.LATC0 = 1;
  6006  0029C6  808B               	bsf	3979,0,c	;volatile
  6007                           
  6008                           ;main.c: 271: TRISCbits.RC0 = 1;
  6009  0029C8  8094               	bsf	3988,0,c	;volatile
  6010                           
  6011                           ;main.c: 272: break;
  6012  0029CA  D00E               	goto	l252
  6013  0029CC                     l251:
  6014                           
  6015                           ;main.c: 274: LATCbits.LATC1 = 0;
  6016  0029CC  928B               	bcf	3979,1,c	;volatile
  6017                           
  6018                           ;main.c: 275: TRISCbits.RC1 = 0;
  6019  0029CE  9294               	bcf	3988,1,c	;volatile
  6020                           
  6021                           ;main.c: 276: LATCbits.LATC1 = 1;
  6022  0029D0  828B               	bsf	3979,1,c	;volatile
  6023                           
  6024                           ;main.c: 277: TRISCbits.RC1 = 1;
  6025  0029D2  8294               	bsf	3988,1,c	;volatile
  6026                           
  6027                           ;main.c: 278: break;
  6028  0029D4  D009               	goto	l252
  6029  0029D6                     l3784:
  6030  0029D6  FFFF               	dw	65535	; assembler added errata NOP
  6031  0029D8  5007               	movf	UpdateLedRegister@regIndex,w,c
  6032                           
  6033                           ; Switch size 1, requested type "speed"
  6034                           ; Number of cases is 4, Range of values is 0 to 3
  6035                           ; switch strategies available:
  6036                           ; Name         Instructions Cycles
  6037                           ; simple_byte           13     7 (average)
  6038                           ;	Chosen strategy is simple_byte
  6039  0029DA  E0E9               	bz	l247
  6040  0029DC  0A01               	xorlw	1	; case 1
  6041  0029DE  E0EC               	bz	l249
  6042  0029E0  0A03               	xorlw	3	; case 2
  6043  0029E2  E0EF               	bz	l250
  6044  0029E4  0A01               	xorlw	1	; case 3
  6045  0029E6  E0F2               	bz	l251
  6046  0029E8                     l252:
  6047  0029E8  FFFF               	dw	65535	; assembler added errata NOP
  6048  0029EA  0012               	return		;funcret
  6049  0029EC  FFFF               	dw	65535	; errata NOP
  6050  0029EE                     __end_of_UpdateLedRegister:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           intcon	equ	0xFF2
  6059                           postinc0	equ	0xFEE
  6060                           wreg	equ	0xFE8
  6061                           postdec1	equ	0xFE5
  6062                           fsr1h	equ	0xFE2
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           plusw2	equ	0xFDB
  6068                           fsr2h	equ	0xFDA
  6069                           fsr2l	equ	0xFD9
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function _ProcessDiary *****************
  6073 ;; Defined at:
  6074 ;;		line 657 in file "main.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;		None
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  minute          1   19[COMRAM] unsigned char 
  6079 ;;  hour            1   18[COMRAM] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : F/1
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6089 ;;      Params:         0       0       0       0       0       0       0
  6090 ;;      Locals:         2       0       0       0       0       0       0
  6091 ;;      Temps:          4       0       0       0       0       0       0
  6092 ;;      Totals:         6       0       0       0       0       0       0
  6093 ;;Total ram usage:        6 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    4
  6096 ;; This function calls:
  6097 ;;		_GetTime
  6098 ;;		_LightLed
  6099 ;;		_LoadNextEvent
  6100 ;;		_SwitchOffAllLeds
  6101 ;;		_getHourMin
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text28
  6108  001FEA                     __ptext28:
  6109                           	opt stack 0
  6110  001FEA                     _ProcessDiary:
  6111                           	opt stack 26
  6112                           
  6113                           ;incstack = 0
  6114  001FEA  FFFF               	dw	65535
  6115                           
  6116                           ; BSR set to: 1
  6117                           ;main.c: 660: if(curEventNum == 0xff)
  6118  001FEC  2874               	incf	_curEventNum,w,c
  6119  001FEE  E05A               	bz	l417
  6120                           
  6121                           ; BSR set to: 1
  6122                           ;main.c: 662: uint8_t hour, minute;
  6123                           ;main.c: 663: if(!getHourMin(&hour, &minute))
  6124  001FF0  0E14               	movlw	low ProcessDiary@minute
  6125  001FF2  6E07               	movwf	getHourMin@min,c
  6126  001FF4  0E13               	movlw	ProcessDiary@hour& (0+255)
  6127  001FF6  ECBB  F015         	call	_getHourMin
  6128  001FFA  0900               	iorlw	0
  6129  001FFC  E053               	bz	l417
  6130                           
  6131                           ;main.c: 666: if(hour == 0 && minute == 0)
  6132  001FFE  5013               	movf	ProcessDiary@hour,w,c
  6133  002000  E10C               	bnz	l6080
  6134  002002  5014               	movf	ProcessDiary@minute,w,c
  6135  002004  E10A               	bnz	l6080
  6136                           
  6137                           ;main.c: 667: {
  6138                           ;main.c: 668: SwitchOffAllLeds();
  6139  002006  ECE6  F015         	call	_SwitchOffAllLeds	;wreg free
  6140                           
  6141                           ;main.c: 669: curEventNum = 0xff;
  6142  00200A  6874               	setf	_curEventNum,c
  6143                           
  6144                           ;main.c: 670: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6145  00200C  5075               	movf	_currentAlarmedEventNum,w,c
  6146  00200E  6E0F               	movwf	??_ProcessDiary& (0+255),c
  6147  002010  5074               	movf	_curEventNum,w,c
  6148  002012  0101               	movlb	1	; () banked
  6149  002014  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6150  002016  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  6151  00201A                     l6080:
  6152                           
  6153                           ;main.c: 672: }
  6154                           ;main.c: 675: if(curEventHour == hour && curEventMinute == minute)
  6155  00201A  5013               	movf	ProcessDiary@hour,w,c
  6156  00201C  0100               	movlb	0	; () banked
  6157  00201E  19D5               	xorwf	_curEventHour& (0+255),w,b
  6158  002020  E141               	bnz	l417
  6159                           
  6160                           ; BSR set to: 0
  6161  002022  5014               	movf	ProcessDiary@minute,w,c
  6162  002024  19D6               	xorwf	_curEventMinute& (0+255),w,b
  6163  002026  E13E               	bnz	l417
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;main.c: 676: {
  6167                           ;main.c: 678: if(currentAlarmedEventNum != 0xff)
  6168  002028  2875               	incf	_currentAlarmedEventNum,w,c
  6169  00202A  E006               	bz	l6088
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;main.c: 679: {
  6173                           ;main.c: 680: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  6174  00202C  0E02               	movlw	2
  6175  00202E  6E07               	movwf	LightLed@ledState,c
  6176  002030  6A08               	clrf	LightLed@blink,c
  6177  002032  2875               	incf	_currentAlarmedEventNum,w,c
  6178  002034  ECC0  F004         	call	_LightLed
  6179  002038                     l6088:
  6180                           
  6181                           ;main.c: 681: }
  6182                           ;main.c: 683: {
  6183                           ;main.c: 684: currentAlarmedEventNum = curEventNum;
  6184  002038  C074  F075         	movff	_curEventNum,_currentAlarmedEventNum
  6185                           
  6186                           ;main.c: 686: if(curEventType == 0)
  6187  00203C  0100               	movlb	0	; () banked
  6188  00203E  51D7               	movf	_curEventType& (0+255),w,b
  6189  002040  E107               	bnz	l6094
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;main.c: 687: {
  6193                           ;main.c: 688: LightLed(currentAlarmedEventNum + 1, LED_GREEN, 1);
  6194  002042  0E01               	movlw	1
  6195  002044  6E07               	movwf	LightLed@ledState,c
  6196  002046  6E08               	movwf	LightLed@blink,c
  6197  002048  2875               	incf	_currentAlarmedEventNum,w,c
  6198  00204A  ECC0  F004         	call	_LightLed
  6199                           
  6200                           ;main.c: 689: }
  6201  00204E  D007               	goto	l423
  6202  002050                     l6094:
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;main.c: 690: else
  6206                           ;main.c: 691: {
  6207                           ;main.c: 692: LightLed(currentAlarmedEventNum + 1, LED_RED, 1);
  6208  002050  0E02               	movlw	2
  6209  002052  6E07               	movwf	LightLed@ledState,c
  6210  002054  0E01               	movlw	1
  6211  002056  6E08               	movwf	LightLed@blink,c
  6212  002058  2875               	incf	_currentAlarmedEventNum,w,c
  6213  00205A  ECC0  F004         	call	_LightLed
  6214  00205E                     l423:
  6215  00205E  FFFF               	dw	65535	; assembler added errata NOP
  6216                           
  6217                           ;main.c: 693: }
  6218                           ;main.c: 694: eventResetSecond = *GetTime() + eventAcceptTime;
  6219  002060  EC7A  F016         	call	_GetTime	;wreg free
  6220  002064  6ED9               	movwf	fsr2l,c
  6221  002066  6ADA               	clrf	fsr2h,c
  6222  002068  CFDE F00F          	movff	postinc2,??_ProcessDiary
  6223  00206C  CFDE F010          	movff	postinc2,??_ProcessDiary+1
  6224  002070  CFDE F011          	movff	postinc2,??_ProcessDiary+2
  6225  002074  CFDE F012          	movff	postinc2,??_ProcessDiary+3
  6226  002078  0100               	movlb	0	; () banked
  6227  00207A  51D9               	movf	_eventAcceptTime& (0+255),w,b
  6228  00207C  240F               	addwf	??_ProcessDiary,w,c
  6229  00207E  6FAC               	movwf	_eventResetSecond& (0+255),b
  6230  002080  0E00               	movlw	0
  6231  002082  2010               	addwfc	??_ProcessDiary+1,w,c
  6232  002084  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  6233  002086  0E00               	movlw	0
  6234  002088  2011               	addwfc	??_ProcessDiary+2,w,c
  6235  00208A  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  6236  00208C  0E00               	movlw	0
  6237  00208E  2012               	addwfc	??_ProcessDiary+3,w,c
  6238  002090  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;main.c: 695: LoadNextEvent();
  6242  002092  EC03  F012         	call	_LoadNextEvent	;wreg free
  6243                           
  6244                           ;main.c: 696: }
  6245                           ;main.c: 697: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6246  002096  5075               	movf	_currentAlarmedEventNum,w,c
  6247  002098  6E0F               	movwf	??_ProcessDiary& (0+255),c
  6248  00209A  5074               	movf	_curEventNum,w,c
  6249  00209C  0101               	movlb	1	; () banked
  6250  00209E  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6251  0020A0  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  6252  0020A4                     l417:
  6253  0020A4  0012               	return		;funcret
  6254  0020A6  FFFF               	dw	65535	; errata NOP
  6255  0020A8                     __end_of_ProcessDiary:
  6256                           	opt stack 0
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           postdec1	equ	0xFE5
  6267                           fsr1h	equ	0xFE2
  6268                           fsr1l	equ	0xFE1
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           plusw2	equ	0xFDB
  6273                           fsr2h	equ	0xFDA
  6274                           fsr2l	equ	0xFD9
  6275                           status	equ	0xFD8
  6276                           
  6277 ;; *************** function _SwitchOffAllLeds *****************
  6278 ;; Defined at:
  6279 ;;		line 283 in file "main.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  i               1    6[COMRAM] unsigned char 
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6293 ;;      Params:         0       0       0       0       0       0       0
  6294 ;;      Locals:         1       0       0       0       0       0       0
  6295 ;;      Temps:          0       0       0       0       0       0       0
  6296 ;;      Totals:         1       0       0       0       0       0       0
  6297 ;;Total ram usage:        1 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    2
  6300 ;; This function calls:
  6301 ;;		Nothing
  6302 ;; This function is called by:
  6303 ;;		_InitFromEeprom
  6304 ;;		_ProcessDiary
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text29
  6309  002BCC                     __ptext29:
  6310                           	opt stack 0
  6311  002BCC                     _SwitchOffAllLeds:
  6312                           	opt stack 26
  6313                           
  6314                           ;incstack = 0
  6315  002BCC  FFFF               	dw	65535
  6316                           
  6317                           ;main.c: 285: for(uint8_t i = 0; i < 16 - 1; i++)
  6318  002BCE  6A07               	clrf	SwitchOffAllLeds@i,c
  6319  002BD0                     l5424:
  6320  002BD0  FFFF               	dw	65535	; assembler added errata NOP
  6321                           
  6322                           ;main.c: 286: {
  6323                           ;main.c: 287: ledStatuses[i] = 0;
  6324  002BD2  5007               	movf	SwitchOffAllLeds@i,w,c
  6325  002BD4  0F90               	addlw	low _ledStatuses
  6326  002BD6  6ED9               	movwf	fsr2l,c
  6327  002BD8  6ADA               	clrf	fsr2h,c
  6328  002BDA  6ADF               	clrf	indf2,c
  6329                           
  6330                           ;main.c: 288: ledBlink[i] = 0;
  6331  002BDC  5007               	movf	SwitchOffAllLeds@i,w,c
  6332  002BDE  0F80               	addlw	low _ledBlink
  6333  002BE0  6ED9               	movwf	fsr2l,c
  6334  002BE2  6ADA               	clrf	fsr2h,c
  6335  002BE4  6ADF               	clrf	indf2,c
  6336  002BE6  2A07               	incf	SwitchOffAllLeds@i,f,c
  6337  002BE8  0E0E               	movlw	14
  6338  002BEA  6407               	cpfsgt	SwitchOffAllLeds@i,c
  6339  002BEC  D7F1               	goto	l5424
  6340  002BEE  0C0E               	retlw	14	;funcret
  6341  002BF0  FFFF               	dw	65535	; errata NOP
  6342  002BF2                     __end_of_SwitchOffAllLeds:
  6343                           	opt stack 0
  6344                           tblptru	equ	0xFF8
  6345                           tblptrh	equ	0xFF7
  6346                           tblptrl	equ	0xFF6
  6347                           tablat	equ	0xFF5
  6348                           prodh	equ	0xFF4
  6349                           prodl	equ	0xFF3
  6350                           intcon	equ	0xFF2
  6351                           postinc0	equ	0xFEE
  6352                           wreg	equ	0xFE8
  6353                           postdec1	equ	0xFE5
  6354                           fsr1h	equ	0xFE2
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           plusw2	equ	0xFDB
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _LoadNextEvent *****************
  6365 ;; Defined at:
  6366 ;;		line 624 in file "main.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;  v1              1   10[COMRAM] unsigned char 
  6371 ;;  minute          1   12[COMRAM] unsigned char 
  6372 ;;  hour            1   11[COMRAM] unsigned char 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         0       0       0       0       0       0       0
  6383 ;;      Locals:         3       0       0       0       0       0       0
  6384 ;;      Temps:          2       0       0       0       0       0       0
  6385 ;;      Totals:         5       0       0       0       0       0       0
  6386 ;;Total ram usage:        5 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    3
  6389 ;; This function calls:
  6390 ;;		_getHourMin
  6391 ;; This function is called by:
  6392 ;;		_InitFromEeprom
  6393 ;;		_ProcessDiary
  6394 ;;		_SetTimeFromRegs
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text30
  6399  002406                     __ptext30:
  6400                           	opt stack 0
  6401  002406                     _LoadNextEvent:
  6402                           	opt stack 24
  6403                           
  6404                           ;incstack = 0
  6405  002406  FFFF               	dw	65535
  6406                           
  6407                           ;main.c: 626: if(eventCount == 0)
  6408  002408  5073               	movf	_eventCount,w,c
  6409  00240A  E03E               	bz	l407
  6410                           
  6411                           ;main.c: 628: uint8_t hour, minute;
  6412                           ;main.c: 629: if(!getHourMin(&hour, &minute))
  6413  00240C  0E0D               	movlw	low LoadNextEvent@minute
  6414  00240E  6E07               	movwf	getHourMin@min,c
  6415  002410  0E0C               	movlw	LoadNextEvent@hour& (0+255)
  6416  002412  ECBB  F015         	call	_getHourMin
  6417  002416  0900               	iorlw	0
  6418  002418  E037               	bz	l407
  6419  00241A                     l5318:
  6420                           
  6421                           ;main.c: 639: {
  6422                           ;main.c: 640: if(curEventNum == 0xff)
  6423  00241A  2874               	incf	_curEventNum,w,c
  6424  00241C  E102               	bnz	l5322
  6425                           
  6426                           ;main.c: 641: curEventNum = 0;
  6427  00241E  6A74               	clrf	_curEventNum,c
  6428  002420  D001               	goto	l5324
  6429  002422                     l5322:
  6430                           
  6431                           ;main.c: 642: else
  6432                           ;main.c: 643: curEventNum++;
  6433  002422  2A74               	incf	_curEventNum,f,c
  6434  002424                     l5324:
  6435  002424  FFFF               	dw	65535	; assembler added errata NOP
  6436                           
  6437                           ;main.c: 644: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6438  002426  5075               	movf	_currentAlarmedEventNum,w,c
  6439  002428  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6440  00242A  5074               	movf	_curEventNum,w,c
  6441  00242C  0101               	movlb	1	; () banked
  6442  00242E  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6443  002430  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6444                           
  6445                           ; BSR set to: 1
  6446                           ;main.c: 645: if(curEventNum >= eventCount)
  6447  002434  5073               	movf	_eventCount,w,c
  6448  002436  5C74               	subwf	_curEventNum,w,c
  6449  002438  E227               	bc	l407
  6450                           
  6451                           ; BSR set to: 1
  6452                           ;main.c: 648: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6453  00243A  5074               	movf	_curEventNum,w,c
  6454  00243C  0D02               	mullw	2
  6455  00243E  50F3               	movf	prodl,w,c
  6456  002440  0F13               	addlw	19
  6457  002442  6EA9               	movwf	4009,c	;volatile
  6458                           
  6459                           ; BSR set to: 1
  6460  002444  80A6               	bsf	4006,0,c	;volatile
  6461                           
  6462                           ; BSR set to: 1
  6463  002446  CFA8 F00B          	movff	4008,LoadNextEvent@v1	;volatile
  6464                           
  6465                           ; BSR set to: 1
  6466                           ;main.c: 649: curEventHour = v1 & 0x1F;
  6467  00244A  500B               	movf	LoadNextEvent@v1,w,c
  6468  00244C  0B1F               	andlw	31
  6469  00244E  0100               	movlb	0	; () banked
  6470  002450  6FD5               	movwf	_curEventHour& (0+255),b
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 650: curEventType = (((v1) >> (5)) & 0x01);
  6474  002452  380B               	swapf	LoadNextEvent@v1,w,c
  6475  002454  42E8               	rrncf	wreg,f,c
  6476  002456  0B07               	andlw	7
  6477  002458  0B01               	andlw	1
  6478  00245A  6FD7               	movwf	_curEventType& (0+255),b
  6479                           
  6480                           ;main.c: 651: curEventMinute = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, 
      +                          EEDATA);
  6481  00245C  5074               	movf	_curEventNum,w,c
  6482  00245E  0D02               	mullw	2
  6483  002460  50F3               	movf	prodl,w,c
  6484  002462  0F14               	addlw	20
  6485  002464  6EA9               	movwf	4009,c	;volatile
  6486                           
  6487                           ; BSR set to: 0
  6488  002466  80A6               	bsf	4006,0,c	;volatile
  6489                           
  6490                           ; BSR set to: 0
  6491  002468  CFA8 F0D6          	movff	4008,_curEventMinute	;volatile
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;main.c: 652: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6495  00246C  51D5               	movf	_curEventHour& (0+255),w,b
  6496  00246E  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6497  002470  51D6               	movf	_curEventMinute& (0+255),w,b
  6498  002472  0101               	movlb	1	; () banked
  6499  002474  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6500  002476  C009  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6501                           
  6502                           ; BSR set to: 1
  6503                           ;main.c: 653: }while(curEventHour < hour || curEventMinute <= minute);
  6504  00247A  500C               	movf	LoadNextEvent@hour,w,c
  6505  00247C  0100               	movlb	0	; () banked
  6506  00247E  5DD5               	subwf	_curEventHour& (0+255),w,b
  6507  002480  E3CC               	bnc	l5318
  6508                           
  6509                           ; BSR set to: 0
  6510  002482  51D6               	movf	_curEventMinute& (0+255),w,b
  6511  002484  5C0D               	subwf	LoadNextEvent@minute,w,c
  6512  002486  E2C9               	bc	l5318
  6513  002488                     l407:
  6514  002488  0012               	return		;funcret
  6515  00248A  FFFF               	dw	65535	; errata NOP
  6516  00248C                     __end_of_LoadNextEvent:
  6517                           	opt stack 0
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           postinc0	equ	0xFEE
  6526                           wreg	equ	0xFE8
  6527                           postdec1	equ	0xFE5
  6528                           fsr1h	equ	0xFE2
  6529                           fsr1l	equ	0xFE1
  6530                           indf2	equ	0xFDF
  6531                           postinc2	equ	0xFDE
  6532                           postdec2	equ	0xFDD
  6533                           plusw2	equ	0xFDB
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function _getHourMin *****************
  6539 ;; Defined at:
  6540 ;;		line 245 in file "interrupts.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  hour            1    wreg     PTR unsigned char 
  6543 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6544 ;;  min             1    6[COMRAM] PTR unsigned char 
  6545 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  hour            1    7[COMRAM] PTR unsigned char 
  6548 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      unsigned char 
  6551 ;; Registers used:
  6552 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6558 ;;      Params:         1       0       0       0       0       0       0
  6559 ;;      Locals:         1       0       0       0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0
  6561 ;;      Totals:         2       0       0       0       0       0       0
  6562 ;;Total ram usage:        2 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    2
  6565 ;; This function calls:
  6566 ;;		Nothing
  6567 ;; This function is called by:
  6568 ;;		_LoadNextEvent
  6569 ;;		_ProcessDiary
  6570 ;;		_main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text31
  6575  002B76                     __ptext31:
  6576                           	opt stack 0
  6577  002B76                     _getHourMin:
  6578                           	opt stack 24
  6579                           
  6580                           ;incstack = 0
  6581  002B76  FFFF               	dw	65535
  6582                           
  6583                           ;getHourMin@hour stored from wreg
  6584  002B78  6E08               	movwf	getHourMin@hour,c
  6585                           
  6586                           ;interrupts.c: 247: if(globalHours == 0xFF)
  6587  002B7A  2876               	incf	_globalHours,w,c	;volatile
  6588  002B7C  E102               	bnz	l101
  6589                           
  6590                           ;interrupts.c: 248: return 0;
  6591  002B7E  0E00               	movlw	0
  6592  002B80  D00D               	goto	l102
  6593  002B82                     l101:
  6594                           
  6595                           ;interrupts.c: 249: (INTCONbits.GIE = 0);
  6596  002B82  9EF2               	bcf	intcon,7,c	;volatile
  6597                           
  6598                           ;interrupts.c: 250: *hour = globalHours;
  6599  002B84  5008               	movf	getHourMin@hour,w,c
  6600  002B86  6ED9               	movwf	fsr2l,c
  6601  002B88  6ADA               	clrf	fsr2h,c
  6602  002B8A  C076  FFDF         	movff	_globalHours,indf2	;volatile
  6603                           
  6604                           ;interrupts.c: 251: *min = globalMinutes;
  6605  002B8E  5007               	movf	getHourMin@min,w,c
  6606  002B90  6ED9               	movwf	fsr2l,c
  6607  002B92  6ADA               	clrf	fsr2h,c
  6608  002B94  C0DA  FFDF         	movff	_globalMinutes,indf2	;volatile
  6609                           
  6610                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
  6611  002B98  8EF2               	bsf	intcon,7,c	;volatile
  6612                           
  6613                           ;interrupts.c: 253: return 1;
  6614  002B9A  0E01               	movlw	1
  6615  002B9C                     l102:
  6616  002B9C  FFFF               	dw	65535	; assembler added errata NOP
  6617  002B9E  0012               	return		;funcret
  6618  002BA0  FFFF               	dw	65535	; errata NOP
  6619  002BA2                     __end_of_getHourMin:
  6620                           	opt stack 0
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           postinc0	equ	0xFEE
  6629                           wreg	equ	0xFE8
  6630                           postdec1	equ	0xFE5
  6631                           fsr1h	equ	0xFE2
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           plusw2	equ	0xFDB
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function _LightLed *****************
  6642 ;; Defined at:
  6643 ;;		line 294 in file "main.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  ledNum          1    wreg     unsigned char 
  6646 ;;  ledState        1    6[COMRAM] enum E2434
  6647 ;;  blink           1    7[COMRAM] unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  ledNum          1   11[COMRAM] unsigned char 
  6650 ;;  statusShift     1   13[COMRAM] unsigned char 
  6651 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         2       0       0       0       0       0       0
  6662 ;;      Locals:         3       0       0       0       0       0       0
  6663 ;;      Temps:          3       0       0       0       0       0       0
  6664 ;;      Totals:         8       0       0       0       0       0       0
  6665 ;;Total ram usage:        8 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    2
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_ResetEvent
  6672 ;;		_ProcessDiary
  6673 ;;		_io_poll
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text32
  6678  000980                     __ptext32:
  6679                           	opt stack 0
  6680  000980                     _LightLed:
  6681                           	opt stack 27
  6682                           
  6683                           ;incstack = 0
  6684  000980  FFFF               	dw	65535
  6685                           
  6686                           ;LightLed@ledNum stored from wreg
  6687  000982  6E0C               	movwf	LightLed@ledNum,c
  6688                           
  6689                           ;main.c: 296: if(ledNum < 1 || ledNum > 60)
  6690  000984  500C               	movf	LightLed@ledNum,w,c
  6691  000986  E101 D171          	bz	l263
  6692  00098A  0E3C               	movlw	60
  6693  00098C  640C               	cpfsgt	LightLed@ledNum,c
  6694  00098E  D001               	goto	l5516
  6695  000990  D16D               	goto	l263
  6696  000992                     l5516:
  6697  000992  FFFF               	dw	65535	; assembler added errata NOP
  6698                           
  6699                           ;main.c: 298: ledNum--;
  6700  000994  060C               	decf	LightLed@ledNum,f,c
  6701                           
  6702                           ;main.c: 300: uint8_t ststusIndex = ledNum >> 2;
  6703  000996  400C               	rrncf	LightLed@ledNum,w,c
  6704  000998  42E8               	rrncf	wreg,f,c
  6705  00099A  0B3F               	andlw	63
  6706  00099C  6E0D               	movwf	LightLed@ststusIndex,c
  6707                           
  6708                           ;main.c: 301: uint8_t statusShift = (ledNum & 0x03) << 1;
  6709  00099E  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6710  0009A2  0E03               	movlw	3
  6711  0009A4  1609               	andwf	??_LightLed,f,c
  6712  0009A6  90D8               	bcf	status,0,c
  6713  0009A8  3409               	rlcf	??_LightLed,w,c
  6714  0009AA  6E0E               	movwf	LightLed@statusShift,c
  6715                           
  6716                           ;main.c: 303: switch(ledState)
  6717  0009AC  D153               	goto	l5556
  6718  0009AE                     l5522:
  6719                           
  6720                           ;main.c: 306: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6721  0009AE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6722  0009B2  2A09               	incf	??_LightLed,f,c
  6723  0009B4  0E01               	movlw	1
  6724  0009B6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6725  0009B8  2A09               	incf	??_LightLed,f,c
  6726  0009BA  D003               	goto	u4684
  6727  0009BC                     u4685:
  6728  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  6729  0009BE  90D8               	bcf	status,0,c
  6730  0009C0  360A               	rlcf	??_LightLed+1,f,c
  6731  0009C2                     u4684:
  6732  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  6733  0009C4  2E09               	decfsz	??_LightLed,f,c
  6734  0009C6  D7FA               	goto	u4685
  6735  0009C8  1C0A               	comf	??_LightLed+1,w,c
  6736  0009CA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6737  0009CC  500D               	movf	LightLed@ststusIndex,w,c
  6738  0009CE  0F90               	addlw	low _ledStatuses
  6739  0009D0  6ED9               	movwf	fsr2l,c
  6740  0009D2  6ADA               	clrf	fsr2h,c
  6741  0009D4  500B               	movf	??_LightLed+2,w,c
  6742  0009D6  16DF               	andwf	indf2,f,c
  6743                           
  6744                           ;main.c: 307: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6745  0009D8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6746  0009DC  0E01               	movlw	1
  6747  0009DE  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6748  0009E0  2A09               	incf	??_LightLed,f,c
  6749  0009E2  D003               	goto	u4694
  6750  0009E4                     u4695:
  6751  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  6752  0009E6  90D8               	bcf	status,0,c
  6753  0009E8  360A               	rlcf	??_LightLed+1,f,c
  6754  0009EA                     u4694:
  6755  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  6756  0009EC  2E09               	decfsz	??_LightLed,f,c
  6757  0009EE  D7FA               	goto	u4695
  6758  0009F0  1C0A               	comf	??_LightLed+1,w,c
  6759  0009F2  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6760  0009F4  500D               	movf	LightLed@ststusIndex,w,c
  6761  0009F6  0F90               	addlw	low _ledStatuses
  6762  0009F8  6ED9               	movwf	fsr2l,c
  6763  0009FA  6ADA               	clrf	fsr2h,c
  6764  0009FC  500B               	movf	??_LightLed+2,w,c
  6765  0009FE  16DF               	andwf	indf2,f,c
  6766                           
  6767                           ;main.c: 308: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6768  000A00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6769  000A04  2A09               	incf	??_LightLed,f,c
  6770  000A06  0E01               	movlw	1
  6771  000A08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6772  000A0A  2A09               	incf	??_LightLed,f,c
  6773  000A0C  D003               	goto	u4704
  6774  000A0E                     u4705:
  6775  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  6776  000A10  90D8               	bcf	status,0,c
  6777  000A12  360A               	rlcf	??_LightLed+1,f,c
  6778  000A14                     u4704:
  6779  000A14  FFFF               	dw	65535	; assembler added errata NOP
  6780  000A16  2E09               	decfsz	??_LightLed,f,c
  6781  000A18  D7FA               	goto	u4705
  6782  000A1A  1C0A               	comf	??_LightLed+1,w,c
  6783  000A1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6784  000A1E  500D               	movf	LightLed@ststusIndex,w,c
  6785  000A20  0F80               	addlw	low _ledBlink
  6786  000A22  6ED9               	movwf	fsr2l,c
  6787  000A24  6ADA               	clrf	fsr2h,c
  6788  000A26  500B               	movf	??_LightLed+2,w,c
  6789  000A28  16DF               	andwf	indf2,f,c
  6790                           
  6791                           ;main.c: 309: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6792  000A2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6793  000A2E  0E01               	movlw	1
  6794  000A30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6795  000A32  2A09               	incf	??_LightLed,f,c
  6796  000A34  D003               	goto	u4714
  6797  000A36                     u4715:
  6798  000A36  FFFF               	dw	65535	; assembler added errata NOP
  6799  000A38  90D8               	bcf	status,0,c
  6800  000A3A  360A               	rlcf	??_LightLed+1,f,c
  6801  000A3C                     u4714:
  6802  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  6803  000A3E  2E09               	decfsz	??_LightLed,f,c
  6804  000A40  D7FA               	goto	u4715
  6805  000A42  D05F               	goto	L3
  6806  000A44                     l5524:
  6807                           
  6808                           ;main.c: 312: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6809  000A44  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6810  000A48  2A09               	incf	??_LightLed,f,c
  6811  000A4A  0E01               	movlw	1
  6812  000A4C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6813  000A4E  2A09               	incf	??_LightLed,f,c
  6814  000A50  D003               	goto	u4724
  6815  000A52                     u4725:
  6816  000A52  FFFF               	dw	65535	; assembler added errata NOP
  6817  000A54  90D8               	bcf	status,0,c
  6818  000A56  360A               	rlcf	??_LightLed+1,f,c
  6819  000A58                     u4724:
  6820  000A58  FFFF               	dw	65535	; assembler added errata NOP
  6821  000A5A  2E09               	decfsz	??_LightLed,f,c
  6822  000A5C  D7FA               	goto	u4725
  6823  000A5E  500D               	movf	LightLed@ststusIndex,w,c
  6824  000A60  0F90               	addlw	low _ledStatuses
  6825  000A62  6ED9               	movwf	fsr2l,c
  6826  000A64  6ADA               	clrf	fsr2h,c
  6827  000A66  500A               	movf	??_LightLed+1,w,c
  6828  000A68  12DF               	iorwf	indf2,f,c
  6829                           
  6830                           ;main.c: 313: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6831  000A6A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6832  000A6E  0E01               	movlw	1
  6833  000A70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6834  000A72  2A09               	incf	??_LightLed,f,c
  6835  000A74  D003               	goto	u4734
  6836  000A76                     u4735:
  6837  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6838  000A78  90D8               	bcf	status,0,c
  6839  000A7A  360A               	rlcf	??_LightLed+1,f,c
  6840  000A7C                     u4734:
  6841  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  6842  000A7E  2E09               	decfsz	??_LightLed,f,c
  6843  000A80  D7FA               	goto	u4735
  6844  000A82  1C0A               	comf	??_LightLed+1,w,c
  6845  000A84  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6846  000A86  500D               	movf	LightLed@ststusIndex,w,c
  6847  000A88  0F90               	addlw	low _ledStatuses
  6848  000A8A  6ED9               	movwf	fsr2l,c
  6849  000A8C  6ADA               	clrf	fsr2h,c
  6850  000A8E  500B               	movf	??_LightLed+2,w,c
  6851  000A90  16DF               	andwf	indf2,f,c
  6852                           
  6853                           ;main.c: 314: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6854  000A92  5008               	movf	LightLed@blink,w,c
  6855  000A94  E014               	bz	l5530
  6856  000A96  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6857  000A9A  2A09               	incf	??_LightLed,f,c
  6858  000A9C  0E01               	movlw	1
  6859  000A9E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6860  000AA0  2A09               	incf	??_LightLed,f,c
  6861  000AA2  D003               	goto	u4754
  6862  000AA4                     u4755:
  6863  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  6864  000AA6  90D8               	bcf	status,0,c
  6865  000AA8  360A               	rlcf	??_LightLed+1,f,c
  6866  000AAA                     u4754:
  6867  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  6868  000AAC  2E09               	decfsz	??_LightLed,f,c
  6869  000AAE  D7FA               	goto	u4755
  6870  000AB0  500D               	movf	LightLed@ststusIndex,w,c
  6871  000AB2  0F80               	addlw	low _ledBlink
  6872  000AB4  6ED9               	movwf	fsr2l,c
  6873  000AB6  6ADA               	clrf	fsr2h,c
  6874  000AB8  500A               	movf	??_LightLed+1,w,c
  6875  000ABA  12DF               	iorwf	indf2,f,c
  6876  000ABC  D015               	goto	l271
  6877  000ABE                     l5530:
  6878  000ABE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6879  000AC2  2A09               	incf	??_LightLed,f,c
  6880  000AC4  0E01               	movlw	1
  6881  000AC6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6882  000AC8  2A09               	incf	??_LightLed,f,c
  6883  000ACA  D003               	goto	u4764
  6884  000ACC                     u4765:
  6885  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  6886  000ACE  90D8               	bcf	status,0,c
  6887  000AD0  360A               	rlcf	??_LightLed+1,f,c
  6888  000AD2                     u4764:
  6889  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  6890  000AD4  2E09               	decfsz	??_LightLed,f,c
  6891  000AD6  D7FA               	goto	u4765
  6892  000AD8  1C0A               	comf	??_LightLed+1,w,c
  6893  000ADA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6894  000ADC  500D               	movf	LightLed@ststusIndex,w,c
  6895  000ADE  0F80               	addlw	low _ledBlink
  6896  000AE0  6ED9               	movwf	fsr2l,c
  6897  000AE2  6ADA               	clrf	fsr2h,c
  6898  000AE4  500B               	movf	??_LightLed+2,w,c
  6899  000AE6  16DF               	andwf	indf2,f,c
  6900  000AE8                     l271:
  6901  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  6902                           
  6903                           ;main.c: 315: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6904  000AEA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6905  000AEE  0E01               	movlw	1
  6906  000AF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6907  000AF2  2A09               	incf	??_LightLed,f,c
  6908  000AF4  D003               	goto	u4774
  6909  000AF6                     u4775:
  6910  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6911  000AF8  90D8               	bcf	status,0,c
  6912  000AFA  360A               	rlcf	??_LightLed+1,f,c
  6913  000AFC                     u4774:
  6914  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6915  000AFE  2E09               	decfsz	??_LightLed,f,c
  6916  000B00  D7FA               	goto	u4775
  6917  000B02                     L3:
  6918  000B02  FFFF               	dw	65535	; assembler added errata NOP
  6919  000B04  1C0A               	comf	??_LightLed+1,w,c
  6920  000B06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6921  000B08  500D               	movf	LightLed@ststusIndex,w,c
  6922  000B0A  0F80               	addlw	low _ledBlink
  6923  000B0C  6ED9               	movwf	fsr2l,c
  6924  000B0E  6ADA               	clrf	fsr2h,c
  6925  000B10  500B               	movf	??_LightLed+2,w,c
  6926  000B12  16DF               	andwf	indf2,f,c
  6927                           
  6928                           ;main.c: 316: break;
  6929  000B14  D0AB               	goto	l263
  6930  000B16                     l5532:
  6931                           
  6932                           ;main.c: 318: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6933  000B16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6934  000B1A  2A09               	incf	??_LightLed,f,c
  6935  000B1C  0E01               	movlw	1
  6936  000B1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6937  000B20  2A09               	incf	??_LightLed,f,c
  6938  000B22  D003               	goto	u4784
  6939  000B24                     u4785:
  6940  000B24  FFFF               	dw	65535	; assembler added errata NOP
  6941  000B26  90D8               	bcf	status,0,c
  6942  000B28  360A               	rlcf	??_LightLed+1,f,c
  6943  000B2A                     u4784:
  6944  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  6945  000B2C  2E09               	decfsz	??_LightLed,f,c
  6946  000B2E  D7FA               	goto	u4785
  6947  000B30  1C0A               	comf	??_LightLed+1,w,c
  6948  000B32  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6949  000B34  500D               	movf	LightLed@ststusIndex,w,c
  6950  000B36  0F90               	addlw	low _ledStatuses
  6951  000B38  6ED9               	movwf	fsr2l,c
  6952  000B3A  6ADA               	clrf	fsr2h,c
  6953  000B3C  500B               	movf	??_LightLed+2,w,c
  6954  000B3E  16DF               	andwf	indf2,f,c
  6955                           
  6956                           ;main.c: 319: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6957  000B40  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6958  000B44  0E01               	movlw	1
  6959  000B46  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6960  000B48  2A09               	incf	??_LightLed,f,c
  6961  000B4A  D003               	goto	u4794
  6962  000B4C                     u4795:
  6963  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  6964  000B4E  90D8               	bcf	status,0,c
  6965  000B50  360A               	rlcf	??_LightLed+1,f,c
  6966  000B52                     u4794:
  6967  000B52  FFFF               	dw	65535	; assembler added errata NOP
  6968  000B54  2E09               	decfsz	??_LightLed,f,c
  6969  000B56  D7FA               	goto	u4795
  6970  000B58  500D               	movf	LightLed@ststusIndex,w,c
  6971  000B5A  0F90               	addlw	low _ledStatuses
  6972  000B5C  6ED9               	movwf	fsr2l,c
  6973  000B5E  6ADA               	clrf	fsr2h,c
  6974  000B60  500A               	movf	??_LightLed+1,w,c
  6975  000B62  12DF               	iorwf	indf2,f,c
  6976                           
  6977                           ;main.c: 320: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6978  000B64  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6979  000B68  2A09               	incf	??_LightLed,f,c
  6980  000B6A  0E01               	movlw	1
  6981  000B6C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6982  000B6E  2A09               	incf	??_LightLed,f,c
  6983  000B70  D003               	goto	u4804
  6984  000B72                     u4805:
  6985  000B72  FFFF               	dw	65535	; assembler added errata NOP
  6986  000B74  90D8               	bcf	status,0,c
  6987  000B76  360A               	rlcf	??_LightLed+1,f,c
  6988  000B78                     u4804:
  6989  000B78  FFFF               	dw	65535	; assembler added errata NOP
  6990  000B7A  2E09               	decfsz	??_LightLed,f,c
  6991  000B7C  D7FA               	goto	u4805
  6992  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  6993  000B80  1C0A               	comf	??_LightLed+1,w,c
  6994  000B82  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6995  000B84  500D               	movf	LightLed@ststusIndex,w,c
  6996  000B86  0F80               	addlw	low _ledBlink
  6997  000B88  6ED9               	movwf	fsr2l,c
  6998  000B8A  6ADA               	clrf	fsr2h,c
  6999  000B8C  500B               	movf	??_LightLed+2,w,c
  7000  000B8E  16DF               	andwf	indf2,f,c
  7001                           
  7002                           ;main.c: 321: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7003  000B90  5008               	movf	LightLed@blink,w,c
  7004  000B92  E0AA               	bz	l271
  7005  000B94                     l5536:
  7006  000B94  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7007  000B98  0E01               	movlw	1
  7008  000B9A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7009  000B9C  2A09               	incf	??_LightLed,f,c
  7010  000B9E  D003               	goto	u4824
  7011  000BA0                     u4825:
  7012  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7013  000BA2  90D8               	bcf	status,0,c
  7014  000BA4  360A               	rlcf	??_LightLed+1,f,c
  7015  000BA6                     u4824:
  7016  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  7017  000BA8  2E09               	decfsz	??_LightLed,f,c
  7018  000BAA  D7FA               	goto	u4825
  7019  000BAC  500D               	movf	LightLed@ststusIndex,w,c
  7020  000BAE  0F80               	addlw	low _ledBlink
  7021  000BB0  6ED9               	movwf	fsr2l,c
  7022  000BB2  6ADA               	clrf	fsr2h,c
  7023  000BB4  500A               	movf	??_LightLed+1,w,c
  7024  000BB6  12DF               	iorwf	indf2,f,c
  7025  000BB8  D059               	goto	l263
  7026  000BBA                     l5540:
  7027                           
  7028                           ;main.c: 324: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7029  000BBA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7030  000BBE  2A09               	incf	??_LightLed,f,c
  7031  000BC0  0E01               	movlw	1
  7032  000BC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7033  000BC4  2A09               	incf	??_LightLed,f,c
  7034  000BC6  D003               	goto	u4834
  7035  000BC8                     u4835:
  7036  000BC8  FFFF               	dw	65535	; assembler added errata NOP
  7037  000BCA  90D8               	bcf	status,0,c
  7038  000BCC  360A               	rlcf	??_LightLed+1,f,c
  7039  000BCE                     u4834:
  7040  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  7041  000BD0  2E09               	decfsz	??_LightLed,f,c
  7042  000BD2  D7FA               	goto	u4835
  7043  000BD4  500D               	movf	LightLed@ststusIndex,w,c
  7044  000BD6  0F90               	addlw	low _ledStatuses
  7045  000BD8  6ED9               	movwf	fsr2l,c
  7046  000BDA  6ADA               	clrf	fsr2h,c
  7047  000BDC  500A               	movf	??_LightLed+1,w,c
  7048  000BDE  12DF               	iorwf	indf2,f,c
  7049                           
  7050                           ;main.c: 325: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7051  000BE0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7052  000BE4  0E01               	movlw	1
  7053  000BE6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7054  000BE8  2A09               	incf	??_LightLed,f,c
  7055  000BEA  D003               	goto	u4844
  7056  000BEC                     u4845:
  7057  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  7058  000BEE  90D8               	bcf	status,0,c
  7059  000BF0  360A               	rlcf	??_LightLed+1,f,c
  7060  000BF2                     u4844:
  7061  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  7062  000BF4  2E09               	decfsz	??_LightLed,f,c
  7063  000BF6  D7FA               	goto	u4845
  7064  000BF8  500D               	movf	LightLed@ststusIndex,w,c
  7065  000BFA  0F90               	addlw	low _ledStatuses
  7066  000BFC  6ED9               	movwf	fsr2l,c
  7067  000BFE  6ADA               	clrf	fsr2h,c
  7068  000C00  500A               	movf	??_LightLed+1,w,c
  7069  000C02  12DF               	iorwf	indf2,f,c
  7070                           
  7071                           ;main.c: 326: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7072  000C04  5008               	movf	LightLed@blink,w,c
  7073  000C06  E014               	bz	l5546
  7074  000C08  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7075  000C0C  2A09               	incf	??_LightLed,f,c
  7076  000C0E  0E01               	movlw	1
  7077  000C10  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7078  000C12  2A09               	incf	??_LightLed,f,c
  7079  000C14  D003               	goto	u4864
  7080  000C16                     u4865:
  7081  000C16  FFFF               	dw	65535	; assembler added errata NOP
  7082  000C18  90D8               	bcf	status,0,c
  7083  000C1A  360A               	rlcf	??_LightLed+1,f,c
  7084  000C1C                     u4864:
  7085  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  7086  000C1E  2E09               	decfsz	??_LightLed,f,c
  7087  000C20  D7FA               	goto	u4865
  7088  000C22  500D               	movf	LightLed@ststusIndex,w,c
  7089  000C24  0F80               	addlw	low _ledBlink
  7090  000C26  6ED9               	movwf	fsr2l,c
  7091  000C28  6ADA               	clrf	fsr2h,c
  7092  000C2A  500A               	movf	??_LightLed+1,w,c
  7093  000C2C  12DF               	iorwf	indf2,f,c
  7094  000C2E  D00E               	goto	l5548
  7095  000C30                     l5546:
  7096  000C30  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7097  000C34  2A09               	incf	??_LightLed,f,c
  7098  000C36  0E01               	movlw	1
  7099  000C38  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7100  000C3A  2A09               	incf	??_LightLed,f,c
  7101  000C3C  D003               	goto	u4874
  7102  000C3E                     u4875:
  7103  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  7104  000C40  90D8               	bcf	status,0,c
  7105  000C42  360A               	rlcf	??_LightLed+1,f,c
  7106  000C44                     u4874:
  7107  000C44  FFFF               	dw	65535	; assembler added errata NOP
  7108  000C46  2E09               	decfsz	??_LightLed,f,c
  7109  000C48  D7FA               	goto	u4875
  7110  000C4A  D799               	goto	L4
  7111  000C4C                     l5548:
  7112  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  7113                           
  7114                           ;main.c: 327: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7115  000C4E  5008               	movf	LightLed@blink,w,c
  7116  000C50  E1A1               	bnz	l5536
  7117  000C52  D74A               	goto	l271
  7118  000C54                     l5556:
  7119  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7120  000C56  5007               	movf	LightLed@ledState,w,c
  7121                           
  7122                           ; Switch size 1, requested type "speed"
  7123                           ; Number of cases is 4, Range of values is 0 to 3
  7124                           ; switch strategies available:
  7125                           ; Name         Instructions Cycles
  7126                           ; simple_byte           13     7 (average)
  7127                           ;	Chosen strategy is simple_byte
  7128  000C58  E101 D6A9          	bz	l5522
  7129  000C5C  0A01               	xorlw	1	; case 1
  7130  000C5E  E101 D6F1          	bz	l5524
  7131  000C62  0A03               	xorlw	3	; case 2
  7132  000C64  E101 D757          	bz	l5532
  7133  000C68  0A01               	xorlw	1	; case 3
  7134  000C6A  E0A7               	bz	l5540
  7135  000C6C                     l263:
  7136  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  7137  000C6E  0012               	return		;funcret
  7138  000C70  FFFF               	dw	65535	; errata NOP
  7139  000C72                     __end_of_LightLed:
  7140                           	opt stack 0
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           postdec1	equ	0xFE5
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           postinc2	equ	0xFDE
  7155                           postdec2	equ	0xFDD
  7156                           plusw2	equ	0xFDB
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _GetTime *****************
  7162 ;; Defined at:
  7163 ;;		line 206 in file "user.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      PTR long 
  7170 ;; Registers used:
  7171 ;;		wreg
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7177 ;;      Params:         2       0       0       0       0       0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0
  7180 ;;      Totals:         2       0       0       0       0       0       0
  7181 ;;Total ram usage:        2 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    2
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_SoundPlayNextStep
  7188 ;;		_PlaySound
  7189 ;;		_ProcessDiary
  7190 ;;		_main
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           	psect	text33
  7195  002CF4                     __ptext33:
  7196                           	opt stack 0
  7197  002CF4                     _GetTime:
  7198                           	opt stack 25
  7199                           
  7200                           ;incstack = 0
  7201  002CF4  FFFF               	dw	65535
  7202                           
  7203                           ;user.c: 208: return &currentTime;
  7204  002CF6  0EDB               	movlw	_currentTime& (0+255)
  7205  002CF8  0012               	return		;funcret
  7206  002CFA  FFFF               	dw	65535	; errata NOP
  7207  002CFC                     __end_of_GetTime:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           intcon	equ	0xFF2
  7216                           postinc0	equ	0xFEE
  7217                           wreg	equ	0xFE8
  7218                           postdec1	equ	0xFE5
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           plusw2	equ	0xFDB
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _ModbusPoll *****************
  7230 ;; Defined at:
  7231 ;;		line 404 in file "ModbusRtu.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  7234 ;;  coils           1   43[COMRAM] PTR unsigned short 
  7235 ;;		 -> _MODBUSCoils(2), 
  7236 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  7237 ;;		 -> _MODBUSInputRegs(30), 
  7238 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  7239 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  7240 ;;		 -> _MODBUSHoldingRegs(30), 
  7241 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  u8exception     1   52[COMRAM] unsigned char 
  7244 ;;  i8state         1   51[COMRAM] unsigned char 
  7245 ;;  u8current       1   50[COMRAM] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  1    wreg      char 
  7248 ;; Registers used:
  7249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : E/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7255 ;;      Params:         9       0       0       0       0       0       0
  7256 ;;      Locals:         3       0       0       0       0       0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0
  7258 ;;      Totals:        12       0       0       0       0       0       0
  7259 ;;Total ram usage:       12 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    5
  7262 ;; This function calls:
  7263 ;;		_ModbusBuildException
  7264 ;;		_ModbusGetRxBuffer
  7265 ;;		_ModbusProcess_FC1
  7266 ;;		_ModbusProcess_FC15
  7267 ;;		_ModbusProcess_FC16
  7268 ;;		_ModbusProcess_FC17
  7269 ;;		_ModbusProcess_FC21
  7270 ;;		_ModbusProcess_FC3
  7271 ;;		_ModbusProcess_FC43
  7272 ;;		_ModbusProcess_FC5
  7273 ;;		_ModbusProcess_FC6
  7274 ;;		_ModbusProcess_FC7
  7275 ;;		_ModbusSendTxBuffer
  7276 ;;		_ModbusValidateRequest
  7277 ;;		_PortAvailable
  7278 ;;		_millis
  7279 ;; This function is called by:
  7280 ;;		_main
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text34
  7285  001568                     __ptext34:
  7286                           	opt stack 0
  7287  001568                     _ModbusPoll:
  7288                           	opt stack 25
  7289                           
  7290                           ;incstack = 0
  7291  001568  FFFF               	dw	65535
  7292                           
  7293                           ;ModbusRtu.c: 407: _lastCommand = MB_FC_NONE;
  7294  00156A  0100               	movlb	0	; () banked
  7295  00156C  6BE1               	clrf	__lastCommand& (0+255),b
  7296                           
  7297                           ;ModbusRtu.c: 411: _inputRegsCount = inputRegsCount;
  7298  00156E  C02F  F0CD         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7299                           
  7300                           ;ModbusRtu.c: 412: _holdingRegsCount = holdingRegsCount;
  7301  001572  C032  F0CC         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;ModbusRtu.c: 417: uint8_t u8current = PortAvailable();
  7305  001576  EC7E  F016         	call	_PortAvailable	;wreg free
  7306  00157A  6E33               	movwf	ModbusPoll@u8current,c
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;ModbusRtu.c: 421: if (u8current == 0) return 0;
  7310  00157C  5033               	movf	ModbusPoll@u8current,w,c
  7311  00157E  E103               	bnz	l6110
  7312  001580                     l6106:
  7313  001580  FFFF               	dw	65535	; assembler added errata NOP
  7314  001582  0E00               	movlw	0
  7315  001584  D0A6               	goto	l694
  7316  001586                     l6110:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;ModbusRtu.c: 424: if (u8current != _u8lastRec)
  7320  001586  51D2               	movf	__u8lastRec& (0+255),w,b
  7321  001588  1833               	xorwf	ModbusPoll@u8current,w,c
  7322  00158A  E012               	bz	l6120
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;ModbusRtu.c: 425: {
  7326                           ;ModbusRtu.c: 426: _u8lastRec = u8current;
  7327  00158C  C033  F0D2         	movff	ModbusPoll@u8current,__u8lastRec
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;ModbusRtu.c: 427: _u32time = millis() + 5;
  7331  001590  0E05               	movlw	5
  7332  001592  ECD1  F015         	call	_millis	;wreg free
  7333  001596  2407               	addwf	?_millis,w,c
  7334  001598  0100               	movlb	0	; () banked
  7335  00159A  6FA4               	movwf	__u32time& (0+255),b
  7336  00159C  0E00               	movlw	0
  7337  00159E  2008               	addwfc	?_millis+1,w,c
  7338  0015A0  6FA5               	movwf	(__u32time+1)& (0+255),b
  7339  0015A2  0E00               	movlw	0
  7340  0015A4  2009               	addwfc	?_millis+2,w,c
  7341  0015A6  6FA6               	movwf	(__u32time+2)& (0+255),b
  7342  0015A8  0E00               	movlw	0
  7343  0015AA  200A               	addwfc	?_millis+3,w,c
  7344  0015AC  6FA7               	movwf	(__u32time+3)& (0+255),b
  7345  0015AE  D7E8               	goto	l6106
  7346  0015B0                     l6120:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;ModbusRtu.c: 429: }
  7350                           ;ModbusRtu.c: 430: if (millis() < _u32time)
  7351  0015B0  ECD1  F015         	call	_millis	;wreg free
  7352  0015B4  0100               	movlb	0	; () banked
  7353  0015B6  51A4               	movf	__u32time& (0+255),w,b
  7354  0015B8  5C07               	subwf	?_millis,w,c
  7355  0015BA  51A5               	movf	(__u32time+1)& (0+255),w,b
  7356  0015BC  5808               	subwfb	?_millis+1,w,c
  7357  0015BE  51A6               	movf	(__u32time+2)& (0+255),w,b
  7358  0015C0  5809               	subwfb	?_millis+2,w,c
  7359  0015C2  51A7               	movf	(__u32time+3)& (0+255),w,b
  7360  0015C4  580A               	subwfb	?_millis+3,w,c
  7361  0015C6  E3DC               	bnc	l6106
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;ModbusRtu.c: 433: _u8lastRec = 0;
  7365  0015C8  6BD2               	clrf	__u8lastRec& (0+255),b
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;ModbusRtu.c: 435: _u8lastError = i8state;
  7369  0015CA  ECF7  F014         	call	_ModbusGetRxBuffer	;wreg free
  7370  0015CE  6E34               	movwf	ModbusPoll@i8state,c
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;ModbusRtu.c: 436: if (i8state < 4)
  7374  0015D0  0E04               	movlw	4
  7375  0015D2  6034               	cpfslt	ModbusPoll@i8state,c
  7376  0015D4  D003               	goto	l6134
  7377  0015D6                     l6130:
  7378  0015D6  FFFF               	dw	65535	; assembler added errata NOP
  7379                           
  7380                           ;ModbusRtu.c: 437: return i8state;
  7381  0015D8  5034               	movf	ModbusPoll@i8state,w,c
  7382  0015DA  D07B               	goto	l694
  7383  0015DC                     l6134:
  7384  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;ModbusRtu.c: 440: if (_au8Buffer[ ID ] != _u8id)
  7388  0015DE  51D1               	movf	__u8id& (0+255),w,b
  7389  0015E0  0101               	movlb	1	; () banked
  7390  0015E2  1900               	xorwf	__au8Buffer& (0+255),w,b
  7391  0015E4  E1CD               	bnz	l6106
  7392                           
  7393                           ; BSR set to: 1
  7394                           ;ModbusRtu.c: 444: uint8_t u8exception = ModbusValidateRequest();
  7395  0015E6  EC72  F007         	call	_ModbusValidateRequest	;wreg free
  7396  0015EA  6E35               	movwf	ModbusPoll@u8exception,c
  7397                           
  7398                           ;ModbusRtu.c: 445: if (u8exception > 0)
  7399  0015EC  5035               	movf	ModbusPoll@u8exception,w,c
  7400  0015EE  E009               	bz	l6154
  7401                           
  7402                           ;ModbusRtu.c: 446: {
  7403                           ;ModbusRtu.c: 447: if (u8exception != NO_REPLY)
  7404  0015F0  2835               	incf	ModbusPoll@u8exception,w,c
  7405  0015F2  E005               	bz	l6150
  7406                           
  7407                           ;ModbusRtu.c: 448: {
  7408                           ;ModbusRtu.c: 449: ModbusBuildException(u8exception);
  7409  0015F4  5035               	movf	ModbusPoll@u8exception,w,c
  7410  0015F6  ECF9  F015         	call	_ModbusBuildException
  7411                           
  7412                           ; BSR set to: 1
  7413                           ;ModbusRtu.c: 450: ModbusSendTxBuffer();
  7414  0015FA  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  7415  0015FE                     l6150:
  7416                           
  7417                           ;ModbusRtu.c: 453: return u8exception;
  7418  0015FE  5035               	movf	ModbusPoll@u8exception,w,c
  7419  001600  D068               	goto	l694
  7420  001602                     l6154:
  7421                           
  7422                           ;ModbusRtu.c: 457: _u8lastError = 0;
  7423  001602  ECD1  F015         	call	_millis	;wreg free
  7424                           
  7425                           ;ModbusRtu.c: 460: switch (_au8Buffer[ FUNC ])
  7426  001606  D049               	goto	l6206
  7427  001608                     l6156:
  7428                           
  7429                           ; BSR set to: 1
  7430                           ;ModbusRtu.c: 463: return ModbusProcess_FC1(*coils);
  7431  001608  502C               	movf	ModbusPoll@coils,w,c
  7432  00160A  6ED9               	movwf	fsr2l,c
  7433  00160C  6ADA               	clrf	fsr2h,c
  7434  00160E  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  7435  001612  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  7436  001616  EC1D  F00C         	call	_ModbusProcess_FC1	;wreg free
  7437  00161A  D05B               	goto	l694
  7438  00161C                     l6160:
  7439                           
  7440                           ; BSR set to: 1
  7441                           ;ModbusRtu.c: 465: return ModbusProcess_FC1(discreteInputs);
  7442  00161C  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7443  001620  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7444  001624  EC1D  F00C         	call	_ModbusProcess_FC1	;wreg free
  7445  001628  D054               	goto	l694
  7446  00162A                     l6164:
  7447                           
  7448                           ; BSR set to: 1
  7449                           ;ModbusRtu.c: 467: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7450  00162A  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7451  00162E  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7452  001632  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7453  001636  ECAF  F010         	call	_ModbusProcess_FC3	;wreg free
  7454  00163A  D04B               	goto	l694
  7455  00163C                     l6168:
  7456                           
  7457                           ; BSR set to: 1
  7458                           ;ModbusRtu.c: 469: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7459  00163C  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7460  001640  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7461  001644  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7462  001648  ECAF  F010         	call	_ModbusProcess_FC3	;wreg free
  7463  00164C  D042               	goto	l694
  7464  00164E                     l6172:
  7465                           
  7466                           ; BSR set to: 1
  7467                           ;ModbusRtu.c: 471: return ModbusProcess_FC5(coils);
  7468  00164E  502C               	movf	ModbusPoll@coils,w,c
  7469  001650  ECB2  F011         	call	_ModbusProcess_FC5
  7470  001654  D03E               	goto	l694
  7471  001656                     l6176:
  7472                           
  7473                           ; BSR set to: 1
  7474                           ;ModbusRtu.c: 473: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7475  001656  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7476  00165A  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7477  00165E  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7478  001662  EC6B  F013         	call	_ModbusProcess_FC6	;wreg free
  7479  001666  D035               	goto	l694
  7480  001668                     l6180:
  7481                           
  7482                           ; BSR set to: 1
  7483                           ;ModbusRtu.c: 475: return ModbusProcess_FC7();
  7484  001668  EC42  F016         	call	_ModbusProcess_FC7	;wreg free
  7485  00166C  D032               	goto	l694
  7486  00166E                     l6184:
  7487                           
  7488                           ; BSR set to: 1
  7489                           ;ModbusRtu.c: 477: return ModbusProcess_FC15(coils);
  7490  00166E  502C               	movf	ModbusPoll@coils,w,c
  7491  001670  EC3C  F00D         	call	_ModbusProcess_FC15
  7492  001674  D02E               	goto	l694
  7493  001676                     l6188:
  7494                           
  7495                           ; BSR set to: 1
  7496                           ;ModbusRtu.c: 479: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7497  001676  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7498  00167A  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7499  00167E  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7500  001682  EC2F  F00F         	call	_ModbusProcess_FC16	;wreg free
  7501  001686  D025               	goto	l694
  7502  001688                     l6192:
  7503                           
  7504                           ; BSR set to: 1
  7505                           ;ModbusRtu.c: 481: return ModbusProcess_FC17();
  7506  001688  EC04  F013         	call	_ModbusProcess_FC17	;wreg free
  7507  00168C  D022               	goto	l694
  7508  00168E                     l6196:
  7509                           
  7510                           ; BSR set to: 1
  7511                           ;ModbusRtu.c: 483: return ModbusProcess_FC21();
  7512  00168E  EC0A  F011         	call	_ModbusProcess_FC21	;wreg free
  7513  001692  D01F               	goto	l694
  7514  001694                     l6200:
  7515                           
  7516                           ; BSR set to: 1
  7517                           ;ModbusRtu.c: 485: return ModbusProcess_FC43();
  7518  001694  EC6C  F00B         	call	_ModbusProcess_FC43	;wreg free
  7519  001698  D01C               	goto	l694
  7520  00169A                     l6206:
  7521  00169A  FFFF               	dw	65535	; assembler added errata NOP
  7522  00169C  0101               	movlb	1	; () banked
  7523  00169E  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7524                           
  7525                           ; Switch size 1, requested type "speed"
  7526                           ; Number of cases is 12, Range of values is 1 to 43
  7527                           ; switch strategies available:
  7528                           ; Name         Instructions Cycles
  7529                           ; simple_byte           37    19 (average)
  7530                           ;	Chosen strategy is simple_byte
  7531  0016A0  0A01               	xorlw	1	; case 1
  7532  0016A2  E0B2               	bz	l6156
  7533  0016A4  0A03               	xorlw	3	; case 2
  7534  0016A6  E0BA               	bz	l6160
  7535  0016A8  0A01               	xorlw	1	; case 3
  7536  0016AA  E0BF               	bz	l6164
  7537  0016AC  0A07               	xorlw	7	; case 4
  7538  0016AE  E0C6               	bz	l6168
  7539  0016B0  0A01               	xorlw	1	; case 5
  7540  0016B2  E0CD               	bz	l6172
  7541  0016B4  0A03               	xorlw	3	; case 6
  7542  0016B6  E0CF               	bz	l6176
  7543  0016B8  0A01               	xorlw	1	; case 7
  7544  0016BA  E0D6               	bz	l6180
  7545  0016BC  0A08               	xorlw	8	; case 15
  7546  0016BE  E0D7               	bz	l6184
  7547  0016C0  0A1F               	xorlw	31	; case 16
  7548  0016C2  E0D9               	bz	l6188
  7549  0016C4  0A01               	xorlw	1	; case 17
  7550  0016C6  E0E0               	bz	l6192
  7551  0016C8  0A04               	xorlw	4	; case 21
  7552  0016CA  E0E1               	bz	l6196
  7553  0016CC  0A3E               	xorlw	62	; case 43
  7554  0016CE  E0E2               	bz	l6200
  7555  0016D0  D782               	goto	l6130
  7556  0016D2                     l694:
  7557  0016D2  FFFF               	dw	65535	; assembler added errata NOP
  7558  0016D4  0012               	return		;funcret
  7559  0016D6  FFFF               	dw	65535	; errata NOP
  7560  0016D8                     __end_of_ModbusPoll:
  7561                           	opt stack 0
  7562                           tblptru	equ	0xFF8
  7563                           tblptrh	equ	0xFF7
  7564                           tblptrl	equ	0xFF6
  7565                           tablat	equ	0xFF5
  7566                           prodh	equ	0xFF4
  7567                           prodl	equ	0xFF3
  7568                           intcon	equ	0xFF2
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           postdec1	equ	0xFE5
  7572                           fsr1h	equ	0xFE2
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           plusw2	equ	0xFDB
  7578                           fsr2h	equ	0xFDA
  7579                           fsr2l	equ	0xFD9
  7580                           status	equ	0xFD8
  7581                           
  7582 ;; *************** function _ModbusValidateRequest *****************
  7583 ;; Defined at:
  7584 ;;		line 691 in file "ModbusRtu.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;		None
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7589 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7590 ;;  readDevId       1   37[COMRAM] unsigned char 
  7591 ;;  i               1   36[COMRAM] unsigned char 
  7592 ;;  u16regs         2   39[COMRAM] unsigned short 
  7593 ;;  u16count        2   34[COMRAM] unsigned short 
  7594 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7595 ;;  u8regs          1   38[COMRAM] unsigned char 
  7596 ;;  isSupported     1   33[COMRAM] unsigned char 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      unsigned char 
  7599 ;; Registers used:
  7600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : F/1
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         0       0       0       0       0       0       0
  7607 ;;      Locals:        18       0       0       0       0       0       0
  7608 ;;      Temps:          4       0       0       0       0       0       0
  7609 ;;      Totals:        22       0       0       0       0       0       0
  7610 ;;Total ram usage:       22 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    3
  7613 ;; This function calls:
  7614 ;;		_ModbusCalcCRC
  7615 ;; This function is called by:
  7616 ;;		_ModbusPoll
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text35
  7621  000EE4                     __ptext35:
  7622                           	opt stack 0
  7623  000EE4                     _ModbusValidateRequest:
  7624                           	opt stack 26
  7625                           
  7626                           ;incstack = 0
  7627  000EE4  FFFF               	dw	65535
  7628                           
  7629                           ; BSR set to: 1
  7630                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  7631                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7632                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  7633  000EE6  0EFE               	movlw	low (__au8Buffer+65534)
  7634  000EE8  2471               	addwf	__u8BufferSize,w,c
  7635  000EEA  6ED9               	movwf	fsr2l,c
  7636  000EEC  6ADA               	clrf	fsr2h,c
  7637  000EEE  0E00               	movlw	high (__au8Buffer+65534)
  7638  000EF0  22DA               	addwfc	fsr2h,f,c
  7639  000EF2  50DF               	movf	indf2,w,c
  7640  000EF4  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7641  000EF6  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7642  000EF8  0EFF               	movlw	low (__au8Buffer+65535)
  7643  000EFA  2471               	addwf	__u8BufferSize,w,c
  7644  000EFC  6ED9               	movwf	fsr2l,c
  7645  000EFE  6ADA               	clrf	fsr2h,c
  7646  000F00  0E00               	movlw	high (__au8Buffer+65535)
  7647  000F02  22DA               	addwfc	fsr2h,f,c
  7648  000F04  50DF               	movf	indf2,w,c
  7649  000F06  1014               	iorwf	??_ModbusValidateRequest,w,c
  7650  000F08  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7651  000F0A  5015               	movf	??_ModbusValidateRequest+1,w,c
  7652  000F0C  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7653                           
  7654                           ; BSR set to: 1
  7655                           ;ModbusRtu.c: 698: {
  7656                           ;ModbusRtu.c: 699: _u16errCnt++;
  7657  000F0E  5071               	movf	__u8BufferSize,w,c
  7658  000F10  0FFE               	addlw	254
  7659  000F12  ECCA  F012         	call	_ModbusCalcCRC
  7660  000F16  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7661  000F18  1807               	xorwf	?_ModbusCalcCRC,w,c
  7662  000F1A  E103               	bnz	u3000
  7663  000F1C  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7664  000F1E  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7665  000F20  E002               	bz	l745
  7666  000F22                     u3000:
  7667                           
  7668                           ;ModbusRtu.c: 700: return NO_REPLY;
  7669  000F22  0EFF               	movlw	255
  7670  000F24  D10C               	goto	l746
  7671  000F26                     l745:
  7672                           
  7673                           ;ModbusRtu.c: 701: }
  7674                           ;ModbusRtu.c: 704: bool isSupported = 0;
  7675  000F26  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7676                           
  7677                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7678  000F28  6A25               	clrf	ModbusValidateRequest@i,c
  7679  000F2A                     l4028:
  7680  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  7681                           
  7682                           ;ModbusRtu.c: 706: {
  7683                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  7684  000F2C  5025               	movf	ModbusValidateRequest@i,w,c
  7685  000F2E  0F01               	addlw	low _fctsupported
  7686  000F30  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7687  000F32  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7688  000F36                     	if	1	;There is more than 1 active tblptr byte
  7689  000F36  0E06               	movlw	high __smallconst
  7690  000F38  6EF7               	movwf	tblptrh,c
  7691  000F3A                     	endif
  7692  000F3A                     	if	0	;tblptru may be non-zero
  7693  000F3A                     	endif
  7694  000F3A                     	if	0	;tblptru may be non-zero
  7695  000F3A                     	endif
  7696  000F3A  0008               	tblrd		*
  7697  000F3C  FFFF               	dw	65535	; errata NOP
  7698  000F3E  50F5               	movf	tablat,w,c
  7699  000F40  0101               	movlb	1	; () banked
  7700  000F42  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7701  000F44  E103               	bnz	l4032
  7702                           
  7703                           ; BSR set to: 1
  7704                           ;ModbusRtu.c: 708: {
  7705                           ;ModbusRtu.c: 709: isSupported = 1;
  7706  000F46  0E01               	movlw	1
  7707  000F48  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7708                           
  7709                           ;ModbusRtu.c: 710: break;
  7710  000F4A  D004               	goto	l4036
  7711  000F4C                     l4032:
  7712                           
  7713                           ; BSR set to: 1
  7714  000F4C  2A25               	incf	ModbusValidateRequest@i,f,c
  7715                           
  7716                           ; BSR set to: 1
  7717  000F4E  0E0B               	movlw	11
  7718  000F50  6425               	cpfsgt	ModbusValidateRequest@i,c
  7719  000F52  D7EB               	goto	l4028
  7720  000F54                     l4036:
  7721  000F54  FFFF               	dw	65535	; assembler added errata NOP
  7722                           
  7723                           ; BSR set to: 1
  7724                           ;ModbusRtu.c: 714: {
  7725                           ;ModbusRtu.c: 715: _u16errCnt++;
  7726  000F56  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7727  000F58  E102               	bnz	l750
  7728  000F5A                     l4038:
  7729                           
  7730                           ; BSR set to: 1
  7731                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  7732  000F5A  0E01               	movlw	1
  7733  000F5C  D0F0               	goto	l746
  7734  000F5E                     l750:
  7735                           
  7736                           ; BSR set to: 1
  7737                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  7738  000F5E  6A23               	clrf	ModbusValidateRequest@u16count,c
  7739  000F60  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7740                           
  7741                           ;ModbusRtu.c: 722: uint8_t u8regs;
  7742                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  7743  000F62  D0CA               	goto	l4154
  7744  000F64                     l4042:
  7745                           
  7746                           ; BSR set to: 1
  7747                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  7748                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  7749                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7750  000F64  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7751  000F66  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7752  000F68  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7753  000F6A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7754  000F6C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7755                           
  7756                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7757  000F70  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7758  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7759  000F74  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7760  000F76  6E23               	movwf	ModbusValidateRequest@u16count,c
  7761  000F78  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7762                           
  7763                           ; BSR set to: 1
  7764                           ;ModbusRtu.c: 731: if (u16count > 16)
  7765  000F7C  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7766  000F7E  E103               	bnz	u3040
  7767  000F80  0E11               	movlw	17
  7768  000F82  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7769  000F84  E302               	bnc	l4050
  7770  000F86                     u3040:
  7771  000F86                     l4046:
  7772                           
  7773                           ; BSR set to: 1
  7774                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  7775  000F86  0E03               	movlw	3
  7776  000F88  D0DA               	goto	l746
  7777  000F8A                     l4050:
  7778                           
  7779                           ; BSR set to: 1
  7780                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  7781  000F8A  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7782  000F8C  E110               	bnz	l4054
  7783  000F8E  0E10               	movlw	16
  7784  000F90  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7785  000F92  E20D               	bc	l4054
  7786                           
  7787                           ; BSR set to: 1
  7788  000F94  5023               	movf	ModbusValidateRequest@u16count,w,c
  7789  000F96  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7790  000F98  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7791  000F9A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7792  000F9C  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7793  000F9E  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7794  000FA0  5015               	movf	??_ModbusValidateRequest+1,w,c
  7795  000FA2  E105               	bnz	u3060
  7796  000FA4  0E11               	movlw	17
  7797  000FA6  5C14               	subwf	??_ModbusValidateRequest,w,c
  7798  000FA8                     L5:
  7799  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  7800  000FAA  E201 D0C4          	bnc	l759
  7801  000FAE                     u3060:
  7802  000FAE                     l4054:
  7803  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  7804                           
  7805                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  7806  000FB0  0E02               	movlw	2
  7807  000FB2  D0C5               	goto	l746
  7808  000FB4                     l4058:
  7809                           
  7810                           ; BSR set to: 1
  7811                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7812  000FB4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7813  000FB6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7814  000FB8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7815  000FBA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7816  000FBC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7817                           
  7818                           ; BSR set to: 1
  7819                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  7820  000FC0  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7821                           
  7822                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  7823  000FC4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7824  000FC6  E002               	bz	l4068
  7825                           
  7826                           ; BSR set to: 1
  7827  000FC8  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7828  000FCA  E1DD               	bnz	l4046
  7829  000FCC                     l4068:
  7830                           
  7831                           ; BSR set to: 1
  7832                           ;ModbusRtu.c: 741: if (u16regs > 15)
  7833  000FCC  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7834  000FCE  E1EF               	bnz	l4054
  7835  000FD0  0E10               	movlw	16
  7836  000FD2  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7837  000FD4  D7E9               	goto	L5
  7838  000FD6                     l4074:
  7839                           
  7840                           ; BSR set to: 1
  7841                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7842  000FD6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7843  000FD8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7844  000FDA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7845  000FDC  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7846  000FDE  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7847  000FE2                     l4076:
  7848  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  7849                           
  7850                           ; BSR set to: 1
  7851                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7852  000FE4  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7853                           
  7854                           ; BSR set to: 1
  7855                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7856  000FE8  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7857  000FEA  0100               	movlb	0	; () banked
  7858  000FEC  5DCC               	subwf	__holdingRegsCount& (0+255),w,b
  7859  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  7860  000FF0  E3DE               	bnc	l4054
  7861  000FF2  D0A1               	goto	l759
  7862  000FF4                     l4084:
  7863                           
  7864                           ; BSR set to: 1
  7865                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7866  000FF4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7867  000FF6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7868  000FF8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7869  000FFA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7870  000FFC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7871                           
  7872                           ; BSR set to: 1
  7873                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7874  001000  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7875  001002  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7876  001006  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7877  001008  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7878  00100C  6A14               	clrf	??_ModbusValidateRequest,c
  7879  00100E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7880  001010  5014               	movf	??_ModbusValidateRequest,w,c
  7881  001012  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7882  001014  5015               	movf	??_ModbusValidateRequest+1,w,c
  7883  001016  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7884                           
  7885                           ; BSR set to: 1
  7886                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  7887  001018  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7888                           
  7889                           ; BSR set to: 1
  7890                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  7891  00101C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7892  00101E  0100               	movlb	0	; () banked
  7893  001020  5DCD               	subwf	__inputRegsCount& (0+255),w,b
  7894  001022  D7E5               	goto	L6
  7895  001024                     l4096:
  7896                           
  7897                           ; BSR set to: 1
  7898                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7899                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7900  001024  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7901  001026  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7902  001028  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7903  00102A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7904  00102C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7905                           
  7906                           ; BSR set to: 1
  7907                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7908  001030  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7909  001032  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7910  001036  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7911  001038  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7912  00103C  6A14               	clrf	??_ModbusValidateRequest,c
  7913  00103E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7914  001040  5014               	movf	??_ModbusValidateRequest,w,c
  7915  001042  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7916  001044  5015               	movf	??_ModbusValidateRequest+1,w,c
  7917  001046  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7918  001048  D7CC               	goto	l4076
  7919  00104A                     l4108:
  7920                           
  7921                           ; BSR set to: 1
  7922                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7923  00104A  0E06               	movlw	6
  7924  00104C  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7925  00104E  E1AF               	bnz	l4054
  7926                           
  7927                           ; BSR set to: 1
  7928                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7929  001050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7930  001052  E1AD               	bnz	l4054
  7931                           
  7932                           ; BSR set to: 1
  7933  001054  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7934  001056  E1AB               	bnz	l4054
  7935                           
  7936                           ; BSR set to: 1
  7937                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7938  001058  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7939  00105A  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7940  00105E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7941  001060  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7942  001064  6A14               	clrf	??_ModbusValidateRequest,c
  7943  001066  1214               	iorwf	??_ModbusValidateRequest,f,c
  7944  001068  0E00               	movlw	0
  7945  00106A  90D8               	bcf	status,0,c
  7946  00106C  3614               	rlcf	??_ModbusValidateRequest,f,c
  7947  00106E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7948  001070  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7949  001074  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7950  001078  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7951  00107A  0EFF               	movlw	-1
  7952  00107C  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7953  00107E  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7954                           
  7955                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7956  001080  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7957  001082  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7958  001086  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7959  001088  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7960  00108C  6A14               	clrf	??_ModbusValidateRequest,c
  7961  00108E  1214               	iorwf	??_ModbusValidateRequest,f,c
  7962  001090  0E00               	movlw	0
  7963  001092  90D8               	bcf	status,0,c
  7964  001094  3614               	rlcf	??_ModbusValidateRequest,f,c
  7965  001096  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7966  001098  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7967  00109C  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7968  0010A0  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7969  0010A2  0EFF               	movlw	-1
  7970  0010A4  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7971  0010A6  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7972                           
  7973                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  7974  0010A8  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7975  0010AA  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7976  0010AC  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7977  0010AE  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7978  0010B0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7979  0010B2  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7980  0010B4  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7981  0010B6  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7982  0010B8  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7983  0010BA  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7984  0010BC  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7985  0010BE  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7986  0010C0  5017               	movf	??_ModbusValidateRequest+3,w,c
  7987  0010C2  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7988  0010C4  E102               	bnz	u3160
  7989  0010C6  0415               	decf	??_ModbusValidateRequest+1,w,c
  7990  0010C8  D76F               	goto	L5
  7991  0010CA                     u3160:
  7992  0010CA  D771               	goto	l4054
  7993  0010CC                     l4128:
  7994                           
  7995                           ; BSR set to: 1
  7996                           ;ModbusRtu.c: 781: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  7997  0010CC  0E0E               	movlw	14
  7998  0010CE  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7999  0010D0  E001 D743          	bnz	l4038
  8000                           
  8001                           ; BSR set to: 1
  8002                           ;ModbusRtu.c: 783: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8003  0010D4  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8004                           
  8005                           ; BSR set to: 1
  8006                           ;ModbusRtu.c: 784: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8007  0010D8  0426               	decf	ModbusValidateRequest@readDevId,w,c
  8008  0010DA  E007               	bz	l4144
  8009                           
  8010                           ; BSR set to: 1
  8011  0010DC  0E02               	movlw	2
  8012  0010DE  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8013  0010E0  E004               	bz	l4144
  8014                           
  8015                           ; BSR set to: 1
  8016  0010E2  0E04               	movlw	4
  8017  0010E4  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8018  0010E6  E001 D74E          	bnz	l4046
  8019  0010EA                     l4144:
  8020                           
  8021                           ; BSR set to: 1
  8022                           ;ModbusRtu.c: 786: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8023  0010EA  0E04               	movlw	4
  8024  0010EC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8025  0010EE  E123               	bnz	l759
  8026                           
  8027                           ; BSR set to: 1
  8028  0010F0  0E06               	movlw	6
  8029  0010F2  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8030  0010F4  D020               	goto	l759
  8031  0010F6  D75B               	goto	l4054
  8032  0010F8                     l4154:
  8033  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  8034                           
  8035                           ; BSR set to: 1
  8036  0010FA  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  8037                           
  8038                           ; Switch size 1, requested type "speed"
  8039                           ; Number of cases is 11, Range of values is 1 to 43
  8040                           ; switch strategies available:
  8041                           ; Name         Instructions Cycles
  8042                           ; simple_byte           34    18 (average)
  8043                           ;	Chosen strategy is simple_byte
  8044  0010FC  0A01               	xorlw	1	; case 1
  8045  0010FE  E101 D731          	bz	l4042
  8046  001102  0A03               	xorlw	3	; case 2
  8047  001104  E101 D72E          	bz	l4042
  8048  001108  0A01               	xorlw	1	; case 3
  8049  00110A  E08C               	bz	l4096
  8050  00110C  0A07               	xorlw	7	; case 4
  8051  00110E  E101 D771          	bz	l4084
  8052  001112  0A01               	xorlw	1	; case 5
  8053  001114  E101 D74E          	bz	l4058
  8054  001118  0A03               	xorlw	3	; case 6
  8055  00111A  E101 D75C          	bz	l4074
  8056  00111E  0A09               	xorlw	9	; case 15
  8057  001120  E101 D720          	bz	l4042
  8058  001124  0A1F               	xorlw	31	; case 16
  8059  001126  E101 D77D          	bz	l4096
  8060  00112A  0A01               	xorlw	1	; case 17
  8061  00112C  E004               	bz	l759
  8062  00112E  0A04               	xorlw	4	; case 21
  8063  001130  E08C               	bz	l4108
  8064  001132  0A3E               	xorlw	62	; case 43
  8065  001134  E0CB               	bz	l4128
  8066  001136                     l759:
  8067  001136  FFFF               	dw	65535	; assembler added errata NOP
  8068                           
  8069                           ;ModbusRtu.c: 790: _lastCommand = _au8Buffer[ FUNC ];
  8070  001138  C101  F0E1         	movff	__au8Buffer+1,__lastCommand
  8071                           
  8072                           ;ModbusRtu.c: 791: return 0;
  8073  00113C  0E00               	movlw	0
  8074  00113E                     l746:
  8075  00113E  FFFF               	dw	65535	; assembler added errata NOP
  8076  001140  0012               	return		;funcret
  8077  001142  FFFF               	dw	65535	; errata NOP
  8078  001144                     __end_of_ModbusValidateRequest:
  8079                           	opt stack 0
  8080                           tblptru	equ	0xFF8
  8081                           tblptrh	equ	0xFF7
  8082                           tblptrl	equ	0xFF6
  8083                           tablat	equ	0xFF5
  8084                           prodh	equ	0xFF4
  8085                           prodl	equ	0xFF3
  8086                           intcon	equ	0xFF2
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           postdec1	equ	0xFE5
  8090                           fsr1h	equ	0xFE2
  8091                           fsr1l	equ	0xFE1
  8092                           indf2	equ	0xFDF
  8093                           postinc2	equ	0xFDE
  8094                           postdec2	equ	0xFDD
  8095                           plusw2	equ	0xFDB
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _ModbusProcess_FC7 *****************
  8101 ;; Defined at:
  8102 ;;		line 973 in file "ModbusRtu.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      unsigned char 
  8109 ;; Registers used:
  8110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : E/1
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8116 ;;      Params:         0       0       0       0       0       0       0
  8117 ;;      Locals:         1       0       0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0
  8119 ;;      Totals:         1       0       0       0       0       0       0
  8120 ;;Total ram usage:        1 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    4
  8123 ;; This function calls:
  8124 ;;		_ModbusSendTxBuffer
  8125 ;; This function is called by:
  8126 ;;		_ModbusPoll
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text36
  8131  002C84                     __ptext36:
  8132                           	opt stack 0
  8133  002C84                     _ModbusProcess_FC7:
  8134                           	opt stack 25
  8135                           
  8136                           ;incstack = 0
  8137  002C84  FFFF               	dw	65535
  8138                           
  8139                           ;ModbusRtu.c: 975: _au8Buffer[ 2 ] = _exceptionStatus;
  8140  002C86  C0CB  F102         	movff	__exceptionStatus,__au8Buffer+2
  8141                           
  8142                           ;ModbusRtu.c: 976: _u8BufferSize = 3;
  8143  002C8A  0E03               	movlw	3
  8144  002C8C  6E71               	movwf	__u8BufferSize,c
  8145                           
  8146                           ;ModbusRtu.c: 977: uint8_t u8CopyBufferSize = _u8BufferSize;
  8147  002C8E  C071  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  8148                           
  8149                           ;ModbusRtu.c: 978: ModbusSendTxBuffer();
  8150  002C92  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  8151                           
  8152                           ;ModbusRtu.c: 979: return u8CopyBufferSize;
  8153  002C96  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  8154  002C98  0012               	return		;funcret
  8155  002C9A  FFFF               	dw	65535	; errata NOP
  8156  002C9C                     __end_of_ModbusProcess_FC7:
  8157                           	opt stack 0
  8158                           tblptru	equ	0xFF8
  8159                           tblptrh	equ	0xFF7
  8160                           tblptrl	equ	0xFF6
  8161                           tablat	equ	0xFF5
  8162                           prodh	equ	0xFF4
  8163                           prodl	equ	0xFF3
  8164                           intcon	equ	0xFF2
  8165                           postinc0	equ	0xFEE
  8166                           wreg	equ	0xFE8
  8167                           postdec1	equ	0xFE5
  8168                           fsr1h	equ	0xFE2
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           plusw2	equ	0xFDB
  8174                           fsr2h	equ	0xFDA
  8175                           fsr2l	equ	0xFD9
  8176                           status	equ	0xFD8
  8177                           
  8178 ;; *************** function _ModbusProcess_FC6 *****************
  8179 ;; Defined at:
  8180 ;;		line 953 in file "ModbusRtu.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8183 ;;		 -> _MODBUSHoldingRegs(30), 
  8184 ;;  u8size          1   23[COMRAM] unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  u16add          2   29[COMRAM] unsigned short 
  8187 ;;  u16val          2   26[COMRAM] unsigned short 
  8188 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      unsigned char 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : E/1
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8198 ;;      Params:         3       0       0       0       0       0       0
  8199 ;;      Locals:         5       0       0       0       0       0       0
  8200 ;;      Temps:          2       0       0       0       0       0       0
  8201 ;;      Totals:        10       0       0       0       0       0       0
  8202 ;;Total ram usage:       10 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    4
  8205 ;; This function calls:
  8206 ;;		_ModbusSendTxBuffer
  8207 ;; This function is called by:
  8208 ;;		_ModbusPoll
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text37
  8213  0026D6                     __ptext37:
  8214                           	opt stack 0
  8215  0026D6                     _ModbusProcess_FC6:
  8216                           	opt stack 25
  8217                           
  8218                           ;incstack = 0
  8219  0026D6  FFFF               	dw	65535
  8220                           
  8221                           ;ModbusRtu.c: 955: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ AD
      +                          D_LO ]);
  8222  0026D8  0101               	movlb	1	; () banked
  8223  0026DA  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8224  0026DC  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8225  0026DE  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8226  0026E0  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  8227  0026E2  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  8228                           
  8229                           ; BSR set to: 1
  8230                           ;ModbusRtu.c: 956: _lastAddress = u16add;
  8231  0026E6  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  8232  0026EA  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  8233                           
  8234                           ;ModbusRtu.c: 957: _lastCount = 1;
  8235  0026EE  0100               	movlb	0	; () banked
  8236  0026F0  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8237  0026F2  0E01               	movlw	1
  8238  0026F4  6FC0               	movwf	__lastCount& (0+255),b
  8239                           
  8240                           ;ModbusRtu.c: 958: uint8_t u8CopyBufferSize;
  8241                           ;ModbusRtu.c: 959: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_
      +                          LO ]);
  8242  0026F6  0101               	movlb	1	; () banked
  8243  0026F8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8244  0026FA  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8245  0026FC  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8246  0026FE  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  8247  002700  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  8248                           
  8249                           ; BSR set to: 1
  8250                           ;ModbusRtu.c: 961: regs[ u16add ] = u16val;
  8251  002704  90D8               	bcf	status,0,c
  8252  002706  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  8253  002708  6ED9               	movwf	fsr2l,c
  8254  00270A  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  8255  00270C  6EDA               	movwf	fsr2h,c
  8256  00270E  5016               	movf	ModbusProcess_FC6@regs,w,c
  8257  002710  26D9               	addwf	fsr2l,f,c
  8258  002712  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  8259  002714  22DA               	addwfc	fsr2h,f,c
  8260  002716  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  8261  00271A  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  8262                           
  8263                           ; BSR set to: 1
  8264                           ;ModbusRtu.c: 964: _u8BufferSize = RESPONSE_SIZE;
  8265  00271E  0E06               	movlw	6
  8266  002720  6E71               	movwf	__u8BufferSize,c
  8267                           
  8268                           ; BSR set to: 1
  8269                           ;ModbusRtu.c: 966: u8CopyBufferSize = _u8BufferSize + 2;
  8270  002722  5071               	movf	__u8BufferSize,w,c
  8271  002724  0F02               	addlw	2
  8272  002726  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  8273                           
  8274                           ; BSR set to: 1
  8275                           ;ModbusRtu.c: 967: ModbusSendTxBuffer();
  8276  002728  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  8277                           
  8278                           ;ModbusRtu.c: 969: return u8CopyBufferSize;
  8279  00272C  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  8280  00272E  0012               	return		;funcret
  8281  002730  FFFF               	dw	65535	; errata NOP
  8282  002732                     __end_of_ModbusProcess_FC6:
  8283                           	opt stack 0
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           postinc0	equ	0xFEE
  8292                           wreg	equ	0xFE8
  8293                           postdec1	equ	0xFE5
  8294                           fsr1h	equ	0xFE2
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           plusw2	equ	0xFDB
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _ModbusProcess_FC5 *****************
  8305 ;; Defined at:
  8306 ;;		line 918 in file "ModbusRtu.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  regs            1    wreg     PTR unsigned short 
  8309 ;;		 -> _MODBUSCoils(2), 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  regs            1   29[COMRAM] PTR unsigned short 
  8312 ;;		 -> _MODBUSCoils(2), 
  8313 ;;  u16coil         2   27[COMRAM] unsigned short 
  8314 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  8315 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      unsigned char 
  8318 ;; Registers used:
  8319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : E/1
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8325 ;;      Params:         0       0       0       0       0       0       0
  8326 ;;      Locals:         5       0       0       0       0       0       0
  8327 ;;      Temps:          5       0       0       0       0       0       0
  8328 ;;      Totals:        10       0       0       0       0       0       0
  8329 ;;Total ram usage:       10 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    4
  8332 ;; This function calls:
  8333 ;;		_ModbusSendTxBuffer
  8334 ;; This function is called by:
  8335 ;;		_ModbusPoll
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           	psect	text38
  8340  002364                     __ptext38:
  8341                           	opt stack 0
  8342  002364                     _ModbusProcess_FC5:
  8343                           	opt stack 25
  8344                           
  8345                           ;incstack = 0
  8346  002364  FFFF               	dw	65535
  8347                           
  8348                           ;ModbusProcess_FC5@regs stored from wreg
  8349  002366  6E1E               	movwf	ModbusProcess_FC5@regs,c
  8350                           
  8351                           ;ModbusRtu.c: 921: uint8_t u8currentBit;
  8352                           ;ModbusRtu.c: 922: uint8_t u8CopyBufferSize;
  8353                           ;ModbusRtu.c: 923: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  8354  002368  0101               	movlb	1	; () banked
  8355  00236A  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8356  00236C  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8357  00236E  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8358  002370  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8359  002372  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8360                           
  8361                           ; BSR set to: 1
  8362                           ;ModbusRtu.c: 924: _lastAddress = u16coil;
  8363  002376  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8364  00237A  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8365                           
  8366                           ;ModbusRtu.c: 925: _lastCount = 1;
  8367  00237E  0100               	movlb	0	; () banked
  8368  002380  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8369  002382  0E01               	movlw	1
  8370  002384  6FC0               	movwf	__lastCount& (0+255),b
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;ModbusRtu.c: 928: u8currentBit = (uint8_t) (u16coil % 16);
  8374  002386  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8375  002388  0B0F               	andlw	15
  8376  00238A  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;ModbusRtu.c: 931: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8380  00238C  0101               	movlb	1	; () banked
  8381  00238E  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8382  002390  E116               	bnz	l5796
  8383                           
  8384                           ; BSR set to: 1
  8385  002392  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8386  002396  0E01               	movlw	1
  8387  002398  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8388  00239A  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8389  00239C  2A16               	incf	??_ModbusProcess_FC5,f,c
  8390  00239E  D004               	goto	u5104
  8391  0023A0                     u5105:
  8392  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  8393  0023A2  90D8               	bcf	status,0,c
  8394  0023A4  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8395  0023A6  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8396  0023A8                     u5104:
  8397  0023A8  FFFF               	dw	65535	; assembler added errata NOP
  8398  0023AA  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8399  0023AC  D7F9               	goto	u5105
  8400  0023AE  501E               	movf	ModbusProcess_FC5@regs,w,c
  8401  0023B0  6ED9               	movwf	fsr2l,c
  8402  0023B2  6ADA               	clrf	fsr2h,c
  8403  0023B4  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8404  0023B6  12DE               	iorwf	postinc2,f,c
  8405  0023B8  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8406  0023BA  12DD               	iorwf	postdec2,f,c
  8407  0023BC  D019               	goto	l5798
  8408  0023BE                     l5796:
  8409                           
  8410                           ; BSR set to: 1
  8411  0023BE  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8412  0023C2  0E01               	movlw	1
  8413  0023C4  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8414  0023C6  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8415  0023C8  2A16               	incf	??_ModbusProcess_FC5,f,c
  8416  0023CA  D004               	goto	u5114
  8417  0023CC                     u5115:
  8418  0023CC  FFFF               	dw	65535	; assembler added errata NOP
  8419  0023CE  90D8               	bcf	status,0,c
  8420  0023D0  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8421  0023D2  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8422  0023D4                     u5114:
  8423  0023D4  FFFF               	dw	65535	; assembler added errata NOP
  8424  0023D6  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8425  0023D8  D7F9               	goto	u5115
  8426  0023DA  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8427  0023DC  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8428  0023DE  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8429  0023E0  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8430  0023E2  501E               	movf	ModbusProcess_FC5@regs,w,c
  8431  0023E4  6ED9               	movwf	fsr2l,c
  8432  0023E6  6ADA               	clrf	fsr2h,c
  8433  0023E8  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8434  0023EA  16DE               	andwf	postinc2,f,c
  8435  0023EC  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8436  0023EE  16DD               	andwf	postdec2,f,c
  8437  0023F0                     l5798:
  8438  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  8439                           
  8440                           ;ModbusRtu.c: 938: _u8BufferSize = 6;
  8441  0023F2  0E06               	movlw	6
  8442  0023F4  6E71               	movwf	__u8BufferSize,c
  8443                           
  8444                           ;ModbusRtu.c: 939: u8CopyBufferSize = _u8BufferSize + 2;
  8445  0023F6  5071               	movf	__u8BufferSize,w,c
  8446  0023F8  0F02               	addlw	2
  8447  0023FA  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8448                           
  8449                           ;ModbusRtu.c: 940: ModbusSendTxBuffer();
  8450  0023FC  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  8451                           
  8452                           ;ModbusRtu.c: 942: return u8CopyBufferSize;
  8453  002400  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8454  002402  0012               	return		;funcret
  8455  002404  FFFF               	dw	65535	; errata NOP
  8456  002406                     __end_of_ModbusProcess_FC5:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           postinc0	equ	0xFEE
  8466                           wreg	equ	0xFE8
  8467                           postdec1	equ	0xFE5
  8468                           fsr1h	equ	0xFE2
  8469                           fsr1l	equ	0xFE1
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           plusw2	equ	0xFDB
  8474                           fsr2h	equ	0xFDA
  8475                           fsr2l	equ	0xFD9
  8476                           status	equ	0xFD8
  8477                           
  8478 ;; *************** function _ModbusProcess_FC43 *****************
  8479 ;; Defined at:
  8480 ;;		line 1152 in file "ModbusRtu.c"
  8481 ;; Parameters:    Size  Location     Type
  8482 ;;		None
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  objId           1   23[COMRAM] unsigned char 
  8485 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8486 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  1    wreg      unsigned char 
  8489 ;; Registers used:
  8490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : E/1
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8496 ;;      Params:         0       0       0       0       0       0       0
  8497 ;;      Locals:         3       0       0       0       0       0       0
  8498 ;;      Temps:          0       0       0       0       0       0       0
  8499 ;;      Totals:         3       0       0       0       0       0       0
  8500 ;;Total ram usage:        3 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    4
  8503 ;; This function calls:
  8504 ;;		_CopyStringToBuffer
  8505 ;;		_ModbusSendTxBuffer
  8506 ;; This function is called by:
  8507 ;;		_ModbusPoll
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text39
  8512  0016D8                     __ptext39:
  8513                           	opt stack 0
  8514  0016D8                     _ModbusProcess_FC43:
  8515                           	opt stack 25
  8516                           
  8517                           ;incstack = 0
  8518  0016D8  FFFF               	dw	65535
  8519                           
  8520                           ;ModbusRtu.c: 1154: uint8_t devIdCode = _au8Buffer[ 3 ];
  8521  0016DA  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8522                           
  8523                           ;ModbusRtu.c: 1162: uint8_t objId = _au8Buffer[ 4 ];
  8524  0016DE  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8525                           
  8526                           ;ModbusRtu.c: 1173: _au8Buffer[ 5 ] = 0x00;
  8527  0016E2  0101               	movlb	1	; () banked
  8528  0016E4  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8529                           
  8530                           ;ModbusRtu.c: 1174: _au8Buffer[ 6 ] = 0x00;
  8531  0016E6  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8532                           
  8533                           ; BSR set to: 1
  8534                           ;ModbusRtu.c: 1176: _u8BufferSize = 8;
  8535  0016E8  0E08               	movlw	8
  8536  0016EA  6E71               	movwf	__u8BufferSize,c
  8537                           
  8538                           ;ModbusRtu.c: 1177: switch(devIdCode)
  8539  0016EC  D094               	goto	l6040
  8540  0016EE                     l5986:
  8541                           
  8542                           ; BSR set to: 1
  8543                           ;ModbusRtu.c: 1180: _au8Buffer[ 4 ] = 0x81;
  8544  0016EE  0E81               	movlw	129
  8545  0016F0  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8546                           
  8547                           ;ModbusRtu.c: 1181: _au8Buffer[ 7 ] = 3;
  8548  0016F2  0E03               	movlw	3
  8549  0016F4  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8550                           
  8551                           ; BSR set to: 1
  8552                           ;ModbusRtu.c: 1182: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8553  0016F6  0E5E               	movlw	low STR_4
  8554  0016F8  6E07               	movwf	CopyStringToBuffer@src,c
  8555  0016FA  0E06               	movlw	6
  8556  0016FC  6E08               	movwf	CopyStringToBuffer@len,c
  8557  0016FE  0E00               	movlw	0
  8558  001700  EC3B  F013         	call	_CopyStringToBuffer
  8559                           
  8560                           ;ModbusRtu.c: 1183: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8561  001704  0E55               	movlw	low STR_6
  8562  001706  6E07               	movwf	CopyStringToBuffer@src,c
  8563  001708  0E09               	movlw	9
  8564  00170A  6E08               	movwf	CopyStringToBuffer@len,c
  8565  00170C  0E01               	movlw	1
  8566  00170E  EC3B  F013         	call	_CopyStringToBuffer
  8567                           
  8568                           ;ModbusRtu.c: 1184: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8569  001712  0E64               	movlw	low STR_8
  8570  001714  6E07               	movwf	CopyStringToBuffer@src,c
  8571  001716  0E05               	movlw	5
  8572  001718  6E08               	movwf	CopyStringToBuffer@len,c
  8573  00171A  0E02               	movlw	2
  8574  00171C  EC3B  F013         	call	_CopyStringToBuffer
  8575                           
  8576                           ;ModbusRtu.c: 1185: break;
  8577  001720  D084               	goto	l868
  8578  001722                     l5994:
  8579                           
  8580                           ; BSR set to: 1
  8581                           ;ModbusRtu.c: 1187: _au8Buffer[ 4 ] = 0x82;
  8582  001722  0E82               	movlw	130
  8583  001724  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8584                           
  8585                           ;ModbusRtu.c: 1188: _au8Buffer[ 7 ] = 4;
  8586  001726  0E04               	movlw	4
  8587  001728  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8588                           
  8589                           ; BSR set to: 1
  8590                           ;ModbusRtu.c: 1189: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8591  00172A  0E3A               	movlw	low STR_10
  8592  00172C  6E07               	movwf	CopyStringToBuffer@src,c
  8593  00172E  0E10               	movlw	16
  8594  001730  6E08               	movwf	CopyStringToBuffer@len,c
  8595  001732  0E03               	movlw	3
  8596  001734  EC3B  F013         	call	_CopyStringToBuffer
  8597                           
  8598                           ;ModbusRtu.c: 1190: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8599  001738  0E26               	movlw	low STR_12
  8600  00173A  6E07               	movwf	CopyStringToBuffer@src,c
  8601  00173C  0E14               	movlw	20
  8602  00173E  6E08               	movwf	CopyStringToBuffer@len,c
  8603  001740  0E04               	movlw	4
  8604  001742  EC3B  F013         	call	_CopyStringToBuffer
  8605                           
  8606                           ;ModbusRtu.c: 1191: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8607  001746  0E69               	movlw	low STR_14
  8608  001748  6E07               	movwf	CopyStringToBuffer@src,c
  8609  00174A  0E04               	movlw	4
  8610  00174C  6E08               	movwf	CopyStringToBuffer@len,c
  8611  00174E  0E05               	movlw	5
  8612  001750  EC3B  F013         	call	_CopyStringToBuffer
  8613                           
  8614                           ;ModbusRtu.c: 1192: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8615  001754  0E4A               	movlw	low STR_16
  8616  001756  6E07               	movwf	CopyStringToBuffer@src,c
  8617  001758  0E0B               	movlw	11
  8618  00175A  6E08               	movwf	CopyStringToBuffer@len,c
  8619  00175C  0E06               	movlw	6
  8620  00175E  EC3B  F013         	call	_CopyStringToBuffer
  8621                           
  8622                           ;ModbusRtu.c: 1193: break;
  8623  001762  D063               	goto	l868
  8624  001764                     l6004:
  8625                           
  8626                           ; BSR set to: 1
  8627                           ;ModbusRtu.c: 1195: _au8Buffer[ 7 ] = 1;
  8628  001764  0E01               	movlw	1
  8629  001766  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8630                           
  8631                           ;ModbusRtu.c: 1196: switch(objId)
  8632  001768  D046               	goto	l6036
  8633  00176A                     l6006:
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;ModbusRtu.c: 1199: _au8Buffer[ 4 ] = 0x81;
  8637  00176A  0E81               	movlw	129
  8638  00176C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8639                           
  8640                           ; BSR set to: 1
  8641                           ;ModbusRtu.c: 1200: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8642  00176E  0E5E               	movlw	low STR_4
  8643  001770  6E07               	movwf	CopyStringToBuffer@src,c
  8644  001772  0E06               	movlw	6
  8645  001774  6E08               	movwf	CopyStringToBuffer@len,c
  8646  001776  5018               	movf	ModbusProcess_FC43@objId,w,c
  8647  001778  EC3B  F013         	call	_CopyStringToBuffer
  8648                           
  8649                           ;ModbusRtu.c: 1201: break;
  8650  00177C  D056               	goto	l868
  8651  00177E                     l6010:
  8652                           
  8653                           ; BSR set to: 1
  8654                           ;ModbusRtu.c: 1203: _au8Buffer[ 4 ] = 0x81;
  8655  00177E  0E81               	movlw	129
  8656  001780  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8657                           
  8658                           ; BSR set to: 1
  8659                           ;ModbusRtu.c: 1204: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8660  001782  0E55               	movlw	low STR_6
  8661  001784  6E07               	movwf	CopyStringToBuffer@src,c
  8662  001786  0E09               	movlw	9
  8663  001788  6E08               	movwf	CopyStringToBuffer@len,c
  8664  00178A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8665  00178C  EC3B  F013         	call	_CopyStringToBuffer
  8666                           
  8667                           ;ModbusRtu.c: 1205: break;
  8668  001790  D04C               	goto	l868
  8669  001792                     l6014:
  8670                           
  8671                           ; BSR set to: 1
  8672                           ;ModbusRtu.c: 1207: _au8Buffer[ 4 ] = 0x81;
  8673  001792  0E81               	movlw	129
  8674  001794  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8675                           
  8676                           ; BSR set to: 1
  8677                           ;ModbusRtu.c: 1208: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8678  001796  0E64               	movlw	low STR_8
  8679  001798  6E07               	movwf	CopyStringToBuffer@src,c
  8680  00179A  0E05               	movlw	5
  8681  00179C  6E08               	movwf	CopyStringToBuffer@len,c
  8682  00179E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8683  0017A0  EC3B  F013         	call	_CopyStringToBuffer
  8684                           
  8685                           ;ModbusRtu.c: 1209: break;
  8686  0017A4  D042               	goto	l868
  8687  0017A6                     l6018:
  8688                           
  8689                           ; BSR set to: 1
  8690                           ;ModbusRtu.c: 1211: _au8Buffer[ 4 ] = 0x82;
  8691  0017A6  0E82               	movlw	130
  8692  0017A8  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8693                           
  8694                           ; BSR set to: 1
  8695                           ;ModbusRtu.c: 1212: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8696  0017AA  0E3A               	movlw	low STR_10
  8697  0017AC  6E07               	movwf	CopyStringToBuffer@src,c
  8698  0017AE  0E10               	movlw	16
  8699  0017B0  6E08               	movwf	CopyStringToBuffer@len,c
  8700  0017B2  5018               	movf	ModbusProcess_FC43@objId,w,c
  8701  0017B4  EC3B  F013         	call	_CopyStringToBuffer
  8702                           
  8703                           ;ModbusRtu.c: 1213: break;
  8704  0017B8  D038               	goto	l868
  8705  0017BA                     l6022:
  8706                           
  8707                           ; BSR set to: 1
  8708                           ;ModbusRtu.c: 1215: _au8Buffer[ 4 ] = 0x82;
  8709  0017BA  0E82               	movlw	130
  8710  0017BC  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8711                           
  8712                           ; BSR set to: 1
  8713                           ;ModbusRtu.c: 1216: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8714  0017BE  0E26               	movlw	low STR_12
  8715  0017C0  6E07               	movwf	CopyStringToBuffer@src,c
  8716  0017C2  0E14               	movlw	20
  8717  0017C4  6E08               	movwf	CopyStringToBuffer@len,c
  8718  0017C6  5018               	movf	ModbusProcess_FC43@objId,w,c
  8719  0017C8  EC3B  F013         	call	_CopyStringToBuffer
  8720                           
  8721                           ;ModbusRtu.c: 1217: break;
  8722  0017CC  D02E               	goto	l868
  8723  0017CE                     l6026:
  8724                           
  8725                           ; BSR set to: 1
  8726                           ;ModbusRtu.c: 1219: _au8Buffer[ 4 ] = 0x82;
  8727  0017CE  0E82               	movlw	130
  8728  0017D0  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8729                           
  8730                           ; BSR set to: 1
  8731                           ;ModbusRtu.c: 1220: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8732  0017D2  0E69               	movlw	low STR_14
  8733  0017D4  6E07               	movwf	CopyStringToBuffer@src,c
  8734  0017D6  0E04               	movlw	4
  8735  0017D8  6E08               	movwf	CopyStringToBuffer@len,c
  8736  0017DA  5018               	movf	ModbusProcess_FC43@objId,w,c
  8737  0017DC  EC3B  F013         	call	_CopyStringToBuffer
  8738                           
  8739                           ;ModbusRtu.c: 1221: break;
  8740  0017E0  D024               	goto	l868
  8741  0017E2                     l6030:
  8742                           
  8743                           ; BSR set to: 1
  8744                           ;ModbusRtu.c: 1223: _au8Buffer[ 4 ] = 0x82;
  8745  0017E2  0E82               	movlw	130
  8746  0017E4  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8747                           
  8748                           ; BSR set to: 1
  8749                           ;ModbusRtu.c: 1224: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8750  0017E6  0E4A               	movlw	low STR_16
  8751  0017E8  6E07               	movwf	CopyStringToBuffer@src,c
  8752  0017EA  0E0B               	movlw	11
  8753  0017EC  6E08               	movwf	CopyStringToBuffer@len,c
  8754  0017EE  5018               	movf	ModbusProcess_FC43@objId,w,c
  8755  0017F0  EC3B  F013         	call	_CopyStringToBuffer
  8756                           
  8757                           ;ModbusRtu.c: 1225: break;
  8758  0017F4  D01A               	goto	l868
  8759  0017F6                     l6036:
  8760  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  8761                           
  8762                           ; BSR set to: 1
  8763  0017F8  5018               	movf	ModbusProcess_FC43@objId,w,c
  8764                           
  8765                           ; Switch size 1, requested type "speed"
  8766                           ; Number of cases is 7, Range of values is 0 to 6
  8767                           ; switch strategies available:
  8768                           ; Name         Instructions Cycles
  8769                           ; simple_byte           22    12 (average)
  8770                           ;	Chosen strategy is simple_byte
  8771  0017FA  E0B7               	bz	l6006
  8772  0017FC  0A01               	xorlw	1	; case 1
  8773  0017FE  E0BF               	bz	l6010
  8774  001800  0A03               	xorlw	3	; case 2
  8775  001802  E0C7               	bz	l6014
  8776  001804  0A01               	xorlw	1	; case 3
  8777  001806  E0CF               	bz	l6018
  8778  001808  0A07               	xorlw	7	; case 4
  8779  00180A  E0D7               	bz	l6022
  8780  00180C  0A01               	xorlw	1	; case 5
  8781  00180E  E0DF               	bz	l6026
  8782  001810  0A03               	xorlw	3	; case 6
  8783  001812  E0E7               	bz	l6030
  8784  001814  D00A               	goto	l868
  8785  001816                     l6040:
  8786  001816  FFFF               	dw	65535	; assembler added errata NOP
  8787                           
  8788                           ; BSR set to: 1
  8789  001818  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8790                           
  8791                           ; Switch size 1, requested type "speed"
  8792                           ; Number of cases is 3, Range of values is 1 to 4
  8793                           ; switch strategies available:
  8794                           ; Name         Instructions Cycles
  8795                           ; simple_byte           10     6 (average)
  8796                           ;	Chosen strategy is simple_byte
  8797  00181A  0A01               	xorlw	1	; case 1
  8798  00181C  E101 D767          	bz	l5986
  8799  001820  0A03               	xorlw	3	; case 2
  8800  001822  E101 D77E          	bz	l5994
  8801  001826  0A06               	xorlw	6	; case 4
  8802  001828  E09D               	bz	l6004
  8803  00182A                     l868:
  8804  00182A  FFFF               	dw	65535	; assembler added errata NOP
  8805                           
  8806                           ;ModbusRtu.c: 1229: uint8_t u8CopyBufferSize = _u8BufferSize;
  8807  00182C  C071  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8808                           
  8809                           ;ModbusRtu.c: 1230: ModbusSendTxBuffer();
  8810  001830  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  8811                           
  8812                           ;ModbusRtu.c: 1232: return u8CopyBufferSize;
  8813  001834  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8814  001836  0012               	return		;funcret
  8815  001838  FFFF               	dw	65535	; errata NOP
  8816  00183A                     __end_of_ModbusProcess_FC43:
  8817                           	opt stack 0
  8818                           tblptru	equ	0xFF8
  8819                           tblptrh	equ	0xFF7
  8820                           tblptrl	equ	0xFF6
  8821                           tablat	equ	0xFF5
  8822                           prodh	equ	0xFF4
  8823                           prodl	equ	0xFF3
  8824                           intcon	equ	0xFF2
  8825                           postinc0	equ	0xFEE
  8826                           wreg	equ	0xFE8
  8827                           postdec1	equ	0xFE5
  8828                           fsr1h	equ	0xFE2
  8829                           fsr1l	equ	0xFE1
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           plusw2	equ	0xFDB
  8834                           fsr2h	equ	0xFDA
  8835                           fsr2l	equ	0xFD9
  8836                           status	equ	0xFD8
  8837                           
  8838 ;; *************** function _CopyStringToBuffer *****************
  8839 ;; Defined at:
  8840 ;;		line 1143 in file "ModbusRtu.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  objId           1    wreg     unsigned char 
  8843 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8844 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  8845 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  8846 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  8847 ;;		 -> STR_6(9), STR_4(6), 
  8848 ;;  len             1    7[COMRAM] unsigned char 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  objId           1    9[COMRAM] unsigned char 
  8851 ;;  i               1   10[COMRAM] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/1
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8861 ;;      Params:         2       0       0       0       0       0       0
  8862 ;;      Locals:         2       0       0       0       0       0       0
  8863 ;;      Temps:          1       0       0       0       0       0       0
  8864 ;;      Totals:         5       0       0       0       0       0       0
  8865 ;;Total ram usage:        5 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    2
  8868 ;; This function calls:
  8869 ;;		Nothing
  8870 ;; This function is called by:
  8871 ;;		_ModbusProcess_FC43
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text40
  8876  002676                     __ptext40:
  8877                           	opt stack 0
  8878  002676                     _CopyStringToBuffer:
  8879                           	opt stack 26
  8880                           
  8881                           ;incstack = 0
  8882  002676  FFFF               	dw	65535
  8883                           
  8884                           ;CopyStringToBuffer@objId stored from wreg
  8885  002678  6E0A               	movwf	CopyStringToBuffer@objId,c
  8886                           
  8887                           ;ModbusRtu.c: 1145: len--;
  8888  00267A  0608               	decf	CopyStringToBuffer@len,f,c
  8889                           
  8890                           ;ModbusRtu.c: 1146: _au8Buffer[_u8BufferSize++] = objId;
  8891  00267C  0E00               	movlw	low __au8Buffer
  8892  00267E  2471               	addwf	__u8BufferSize,w,c
  8893  002680  6ED9               	movwf	fsr2l,c
  8894  002682  6ADA               	clrf	fsr2h,c
  8895  002684  0E01               	movlw	high __au8Buffer
  8896  002686  22DA               	addwfc	fsr2h,f,c
  8897  002688  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8898  00268C  2A71               	incf	__u8BufferSize,f,c
  8899                           
  8900                           ;ModbusRtu.c: 1147: _au8Buffer[_u8BufferSize++] = len;
  8901  00268E  0E00               	movlw	low __au8Buffer
  8902  002690  2471               	addwf	__u8BufferSize,w,c
  8903  002692  6ED9               	movwf	fsr2l,c
  8904  002694  6ADA               	clrf	fsr2h,c
  8905  002696  0E01               	movlw	high __au8Buffer
  8906  002698  22DA               	addwfc	fsr2h,f,c
  8907  00269A  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8908  00269E  2A71               	incf	__u8BufferSize,f,c
  8909                           
  8910                           ;ModbusRtu.c: 1148: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8911  0026A0  6A0B               	clrf	CopyStringToBuffer@i,c
  8912  0026A2  D013               	goto	l3776
  8913  0026A4                     l3770:
  8914                           
  8915                           ;ModbusRtu.c: 1149: _au8Buffer[_u8BufferSize] = src[i];
  8916  0026A4  5007               	movf	CopyStringToBuffer@src,w,c
  8917  0026A6  240B               	addwf	CopyStringToBuffer@i,w,c
  8918  0026A8  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8919  0026AA  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8920  0026AE                     	if	1	;There is more than 1 active tblptr byte
  8921  0026AE  0E06               	movlw	high __smallconst
  8922  0026B0  6EF7               	movwf	tblptrh,c
  8923  0026B2                     	endif
  8924  0026B2                     	if	0	;tblptru may be non-zero
  8925  0026B2                     	endif
  8926  0026B2                     	if	0	;tblptru may be non-zero
  8927  0026B2                     	endif
  8928  0026B2  0E00               	movlw	low __au8Buffer
  8929  0026B4  2471               	addwf	__u8BufferSize,w,c
  8930  0026B6  6ED9               	movwf	fsr2l,c
  8931  0026B8  6ADA               	clrf	fsr2h,c
  8932  0026BA  0E01               	movlw	high __au8Buffer
  8933  0026BC  22DA               	addwfc	fsr2h,f,c
  8934  0026BE  0008               	tblrd		*
  8935  0026C0  FFFF               	dw	65535	; errata NOP
  8936  0026C2  CFF5 FFDF          	movff	tablat,indf2
  8937  0026C6  2A0B               	incf	CopyStringToBuffer@i,f,c
  8938  0026C8  2A71               	incf	__u8BufferSize,f,c
  8939  0026CA                     l3776:
  8940  0026CA  FFFF               	dw	65535	; assembler added errata NOP
  8941  0026CC  5008               	movf	CopyStringToBuffer@len,w,c
  8942  0026CE  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8943  0026D0  E3E9               	bnc	l3770
  8944  0026D2  0012               	return		;funcret
  8945  0026D4  FFFF               	dw	65535	; errata NOP
  8946  0026D6                     __end_of_CopyStringToBuffer:
  8947                           	opt stack 0
  8948                           tblptru	equ	0xFF8
  8949                           tblptrh	equ	0xFF7
  8950                           tblptrl	equ	0xFF6
  8951                           tablat	equ	0xFF5
  8952                           prodh	equ	0xFF4
  8953                           prodl	equ	0xFF3
  8954                           intcon	equ	0xFF2
  8955                           postinc0	equ	0xFEE
  8956                           wreg	equ	0xFE8
  8957                           postdec1	equ	0xFE5
  8958                           fsr1h	equ	0xFE2
  8959                           fsr1l	equ	0xFE1
  8960                           indf2	equ	0xFDF
  8961                           postinc2	equ	0xFDE
  8962                           postdec2	equ	0xFDD
  8963                           plusw2	equ	0xFDB
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function _ModbusProcess_FC3 *****************
  8969 ;; Defined at:
  8970 ;;		line 885 in file "ModbusRtu.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8973 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8974 ;;  u8size          1   23[COMRAM] unsigned char 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  u16regsno       2   29[COMRAM] unsigned short 
  8977 ;;  i               1   32[COMRAM] unsigned char 
  8978 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  8979 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      unsigned char 
  8982 ;; Registers used:
  8983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : E/1
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8989 ;;      Params:         3       0       0       0       0       0       0
  8990 ;;      Locals:         5       0       0       0       0       0       0
  8991 ;;      Temps:          4       0       0       0       0       0       0
  8992 ;;      Totals:        12       0       0       0       0       0       0
  8993 ;;Total ram usage:       12 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    4
  8996 ;; This function calls:
  8997 ;;		_ModbusSendTxBuffer
  8998 ;; This function is called by:
  8999 ;;		_ModbusPoll
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text41
  9004  00215E                     __ptext41:
  9005                           	opt stack 0
  9006  00215E                     _ModbusProcess_FC3:
  9007                           	opt stack 25
  9008                           
  9009                           ;incstack = 0
  9010  00215E  FFFF               	dw	65535
  9011                           
  9012                           ;ModbusRtu.c: 887: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  9013  002160  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  9014                           
  9015                           ;ModbusRtu.c: 888: _lastAddress = u8StartAdd;
  9016  002164  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  9017  002168  0100               	movlb	0	; () banked
  9018  00216A  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;ModbusRtu.c: 889: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9022  00216C  0101               	movlb	1	; () banked
  9023  00216E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9024  002170  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9025  002172  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9026  002174  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  9027  002176  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  9028                           
  9029                           ; BSR set to: 1
  9030                           ;ModbusRtu.c: 890: _lastCount = u16regsno;
  9031  00217A  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  9032  00217E  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  9033                           
  9034                           ; BSR set to: 1
  9035                           ;ModbusRtu.c: 891: uint8_t u8CopyBufferSize;
  9036                           ;ModbusRtu.c: 892: uint8_t i;
  9037                           ;ModbusRtu.c: 894: _au8Buffer[ 2 ] = u16regsno * 2;
  9038  002182  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  9039  002184  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9040  002186  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9041                           
  9042                           ; BSR set to: 1
  9043                           ;ModbusRtu.c: 895: _u8BufferSize = 3;
  9044  002188  0E03               	movlw	3
  9045  00218A  6E71               	movwf	__u8BufferSize,c
  9046                           
  9047                           ; BSR set to: 1
  9048                           ;ModbusRtu.c: 897: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  9049  00218C  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  9050  002190  D02A               	goto	l5776
  9051  002192                     l5770:
  9052                           
  9053                           ; BSR set to: 1
  9054                           ;ModbusRtu.c: 898: {
  9055                           ;ModbusRtu.c: 899: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  9056  002192  0E00               	movlw	low __au8Buffer
  9057  002194  2471               	addwf	__u8BufferSize,w,c
  9058  002196  6ED9               	movwf	fsr2l,c
  9059  002198  6ADA               	clrf	fsr2h,c
  9060  00219A  0E01               	movlw	high __au8Buffer
  9061  00219C  22DA               	addwfc	fsr2h,f,c
  9062  00219E  5021               	movf	ModbusProcess_FC3@i,w,c
  9063  0021A0  0D02               	mullw	2
  9064  0021A2  50F3               	movf	prodl,w,c
  9065  0021A4  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9066  0021A6  6EE1               	movwf	fsr1l,c
  9067  0021A8  50F4               	movf	prodh,w,c
  9068  0021AA  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9069  0021AC  6EE2               	movwf	fsr1h,c
  9070  0021AE  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  9071  0021B2  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  9072  0021B6  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  9073  0021BA  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  9074  0021BC  5019               	movf	??_ModbusProcess_FC3,w,c
  9075  0021BE  6EDF               	movwf	indf2,c
  9076                           
  9077                           ; BSR set to: 1
  9078                           ;ModbusRtu.c: 900: _u8BufferSize++;
  9079  0021C0  2A71               	incf	__u8BufferSize,f,c
  9080                           
  9081                           ; BSR set to: 1
  9082                           ;ModbusRtu.c: 901: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  9083  0021C2  5021               	movf	ModbusProcess_FC3@i,w,c
  9084  0021C4  0D02               	mullw	2
  9085  0021C6  50F3               	movf	prodl,w,c
  9086  0021C8  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9087  0021CA  6ED9               	movwf	fsr2l,c
  9088  0021CC  50F4               	movf	prodh,w,c
  9089  0021CE  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9090  0021D0  6EDA               	movwf	fsr2h,c
  9091  0021D2  0E00               	movlw	low __au8Buffer
  9092  0021D4  2471               	addwf	__u8BufferSize,w,c
  9093  0021D6  6EE1               	movwf	fsr1l,c
  9094  0021D8  6AE2               	clrf	fsr1h,c
  9095  0021DA  0E01               	movlw	high __au8Buffer
  9096  0021DC  22E2               	addwfc	fsr1h,f,c
  9097  0021DE  CFDF FFE7          	movff	indf2,indf1
  9098                           
  9099                           ;ModbusRtu.c: 902: _u8BufferSize++;
  9100  0021E2  2A71               	incf	__u8BufferSize,f,c
  9101  0021E4  2A21               	incf	ModbusProcess_FC3@i,f,c
  9102  0021E6                     l5776:
  9103  0021E6  FFFF               	dw	65535	; assembler added errata NOP
  9104                           
  9105                           ; BSR set to: 1
  9106  0021E8  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  9107  0021EA  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9108  0021EC  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9109  0021EE  0E00               	movlw	0
  9110  0021F0  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  9111  0021F2  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  9112  0021F4  5021               	movf	ModbusProcess_FC3@i,w,c
  9113  0021F6  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  9114  0021F8  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  9115  0021FA  5019               	movf	??_ModbusProcess_FC3,w,c
  9116  0021FC  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  9117  0021FE  501A               	movf	??_ModbusProcess_FC3+1,w,c
  9118  002200  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  9119  002202  E3C7               	bnc	l5770
  9120                           
  9121                           ; BSR set to: 1
  9122                           ;ModbusRtu.c: 903: }
  9123                           ;ModbusRtu.c: 904: u8CopyBufferSize = _u8BufferSize + 2;
  9124  002204  5071               	movf	__u8BufferSize,w,c
  9125  002206  0F02               	addlw	2
  9126  002208  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  9127                           
  9128                           ; BSR set to: 1
  9129                           ;ModbusRtu.c: 905: ModbusSendTxBuffer();
  9130  00220A  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  9131                           
  9132                           ;ModbusRtu.c: 907: return u8CopyBufferSize;
  9133  00220E  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  9134  002210  0012               	return		;funcret
  9135  002212  FFFF               	dw	65535	; errata NOP
  9136  002214                     __end_of_ModbusProcess_FC3:
  9137                           	opt stack 0
  9138                           tblptru	equ	0xFF8
  9139                           tblptrh	equ	0xFF7
  9140                           tblptrl	equ	0xFF6
  9141                           tablat	equ	0xFF5
  9142                           prodh	equ	0xFF4
  9143                           prodl	equ	0xFF3
  9144                           intcon	equ	0xFF2
  9145                           postinc0	equ	0xFEE
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _ModbusProcess_FC21 *****************
  9161 ;; Defined at:
  9162 ;;		line 1111 in file "ModbusRtu.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  9167 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  9168 ;;  i               1   29[COMRAM] unsigned char 
  9169 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  9170 ;;  requestDataL    1   23[COMRAM] unsigned char 
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      unsigned char 
  9173 ;; Registers used:
  9174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9175 ;; Tracked objects:
  9176 ;;		On entry : E/1
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9180 ;;      Params:         0       0       0       0       0       0       0
  9181 ;;      Locals:         7       0       0       0       0       0       0
  9182 ;;      Temps:          2       0       0       0       0       0       0
  9183 ;;      Totals:         9       0       0       0       0       0       0
  9184 ;;Total ram usage:        9 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    4
  9187 ;; This function calls:
  9188 ;;		_ModbusSendTxBuffer
  9189 ;; This function is called by:
  9190 ;;		_ModbusPoll
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text42
  9195  002214                     __ptext42:
  9196                           	opt stack 0
  9197  002214                     _ModbusProcess_FC21:
  9198                           	opt stack 25
  9199                           
  9200                           ;incstack = 0
  9201  002214  FFFF               	dw	65535
  9202                           
  9203                           ;ModbusRtu.c: 1115: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  9204  002216  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  9205                           
  9206                           ;ModbusRtu.c: 1117: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  9207  00221A  0101               	movlb	1	; () banked
  9208  00221C  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  9209  00221E  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  9210  002222  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9211  002224  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9212  002228  6A16               	clrf	??_ModbusProcess_FC21,c
  9213  00222A  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9214  00222C  90D8               	bcf	status,0,c
  9215  00222E  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9216  002230  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  9217  002232  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9218  002234  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  9219                           
  9220                           ; BSR set to: 1
  9221                           ;ModbusRtu.c: 1118: _lastAddress = startAddrsBytes;
  9222  002236  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  9223  00223A  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  9224                           
  9225                           ;ModbusRtu.c: 1119: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  9226  00223E  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  9227  002240  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  9228  002244  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9229  002246  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9230  00224A  6A16               	clrf	??_ModbusProcess_FC21,c
  9231  00224C  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9232  00224E  90D8               	bcf	status,0,c
  9233  002250  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9234  002252  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  9235  002254  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9236  002256  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  9237                           
  9238                           ; BSR set to: 1
  9239                           ;ModbusRtu.c: 1120: _lastCount = recLenBytes;
  9240  002258  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  9241  00225C  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  9242                           
  9243                           ;ModbusRtu.c: 1121: uint8_t u8CopyBufferSize;
  9244                           ;ModbusRtu.c: 1122: uint8_t i;
  9245                           ;ModbusRtu.c: 1128: _u8BufferSize = requestDataLen + 1;
  9246  002260  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  9247  002262  6E71               	movwf	__u8BufferSize,c
  9248                           
  9249                           ; BSR set to: 1
  9250                           ;ModbusRtu.c: 1132: for (i = 0; i < recLenBytes; i++)
  9251  002264  6A1E               	clrf	ModbusProcess_FC21@i,c
  9252  002266  D01C               	goto	l5974
  9253  002268                     l850:
  9254  002268  FFFF               	dw	65535	; assembler added errata NOP
  9255                           
  9256                           ; BSR set to: 1
  9257  00226A  B2A6               	btfsc	4006,1,c	;volatile
  9258  00226C  D7FD               	goto	l850
  9259                           
  9260                           ; BSR set to: 1
  9261  00226E  501E               	movf	ModbusProcess_FC21@i,w,c
  9262  002270  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  9263  002272  6EA9               	movwf	4009,c	;volatile
  9264                           
  9265                           ; BSR set to: 1
  9266  002274  0E0A               	movlw	low (__au8Buffer+10)
  9267  002276  241E               	addwf	ModbusProcess_FC21@i,w,c
  9268  002278  6ED9               	movwf	fsr2l,c
  9269  00227A  6ADA               	clrf	fsr2h,c
  9270  00227C  0E01               	movlw	high (__au8Buffer+10)
  9271  00227E  22DA               	addwfc	fsr2h,f,c
  9272  002280  50DF               	movf	indf2,w,c
  9273  002282  6EA8               	movwf	4008,c	;volatile
  9274                           
  9275                           ; BSR set to: 1
  9276  002284  90D8               	bcf	status,0,c	;volatile
  9277                           
  9278                           ; BSR set to: 1
  9279  002286  BEF2               	btfsc	intcon,7,c	;volatile
  9280                           
  9281                           ; BSR set to: 1
  9282  002288  80D8               	bsf	status,0,c	;volatile
  9283                           
  9284                           ; BSR set to: 1
  9285  00228A  9EF2               	bcf	intcon,7,c	;volatile
  9286  00228C  84A6               	bsf	4006,2,c	;volatile
  9287                           
  9288                           ; BSR set to: 1
  9289  00228E  0E55               	movlw	85
  9290  002290  6EA7               	movwf	4007,c	;volatile
  9291  002292  0EAA               	movlw	170
  9292  002294  6EA7               	movwf	4007,c	;volatile
  9293                           
  9294                           ; BSR set to: 1
  9295  002296  82A6               	bsf	4006,1,c	;volatile
  9296                           
  9297                           ; BSR set to: 1
  9298  002298  94A6               	bcf	4006,2,c	;volatile
  9299                           
  9300                           ; BSR set to: 1
  9301  00229A  E301               	bnc	l5972
  9302                           
  9303                           ; BSR set to: 1
  9304  00229C  8EF2               	bsf	intcon,7,c	;volatile
  9305  00229E                     l5972:
  9306                           
  9307                           ; BSR set to: 1
  9308  00229E  2A1E               	incf	ModbusProcess_FC21@i,f,c
  9309  0022A0                     l5974:
  9310  0022A0  FFFF               	dw	65535	; assembler added errata NOP
  9311                           
  9312                           ; BSR set to: 1
  9313  0022A2  501E               	movf	ModbusProcess_FC21@i,w,c
  9314  0022A4  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  9315  0022A6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9316  0022A8  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  9317  0022AA  5C16               	subwf	??_ModbusProcess_FC21,w,c
  9318  0022AC  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  9319  0022AE  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  9320  0022B0  E3DB               	bnc	l850
  9321                           
  9322                           ; BSR set to: 1
  9323                           ;ModbusRtu.c: 1135: }
  9324                           ;ModbusRtu.c: 1137: u8CopyBufferSize = _u8BufferSize;
  9325  0022B2  C071  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  9326                           
  9327                           ; BSR set to: 1
  9328                           ;ModbusRtu.c: 1138: ModbusSendTxBuffer();
  9329  0022B6  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  9330                           
  9331                           ;ModbusRtu.c: 1140: return u8CopyBufferSize;
  9332  0022BA  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  9333  0022BC  0012               	return		;funcret
  9334  0022BE  FFFF               	dw	65535	; errata NOP
  9335  0022C0                     __end_of_ModbusProcess_FC21:
  9336                           	opt stack 0
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           postinc0	equ	0xFEE
  9345                           wreg	equ	0xFE8
  9346                           indf1	equ	0xFE7
  9347                           postinc1	equ	0xFE6
  9348                           postdec1	equ	0xFE5
  9349                           fsr1h	equ	0xFE2
  9350                           fsr1l	equ	0xFE1
  9351                           indf2	equ	0xFDF
  9352                           postinc2	equ	0xFDE
  9353                           postdec2	equ	0xFDD
  9354                           plusw2	equ	0xFDB
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function _ModbusProcess_FC17 *****************
  9360 ;; Defined at:
  9361 ;;		line 1086 in file "ModbusRtu.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;		None
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;  i               1   23[COMRAM] unsigned char 
  9366 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      unsigned char 
  9369 ;; Registers used:
  9370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : E/1
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9376 ;;      Params:         0       0       0       0       0       0       0
  9377 ;;      Locals:         2       0       0       0       0       0       0
  9378 ;;      Temps:          1       0       0       0       0       0       0
  9379 ;;      Totals:         3       0       0       0       0       0       0
  9380 ;;Total ram usage:        3 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    4
  9383 ;; This function calls:
  9384 ;;		_ModbusSendTxBuffer
  9385 ;; This function is called by:
  9386 ;;		_ModbusPoll
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text43
  9391  002608                     __ptext43:
  9392                           	opt stack 0
  9393  002608                     _ModbusProcess_FC17:
  9394                           	opt stack 25
  9395                           
  9396                           ;incstack = 0
  9397  002608  FFFF               	dw	65535
  9398                           
  9399                           ;ModbusRtu.c: 1088: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  9400  00260A  0E1B               	movlw	27
  9401  00260C  0101               	movlb	1	; () banked
  9402  00260E  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9403                           
  9404                           ;ModbusRtu.c: 1090: _u8BufferSize = 3;
  9405  002610  0E03               	movlw	3
  9406  002612  6E71               	movwf	__u8BufferSize,c
  9407                           
  9408                           ; BSR set to: 1
  9409                           ;ModbusRtu.c: 1092: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  9410  002614  6A18               	clrf	ModbusProcess_FC17@i,c
  9411  002616                     l5920:
  9412  002616  FFFF               	dw	65535	; assembler added errata NOP
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;ModbusRtu.c: 1093: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  9416  002618  5018               	movf	ModbusProcess_FC17@i,w,c
  9417  00261A  0F0D               	addlw	low STR_3
  9418  00261C  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  9419  00261E  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  9420  002622                     	if	1	;There is more than 1 active tblptr byte
  9421  002622  0E06               	movlw	high __smallconst
  9422  002624  6EF7               	movwf	tblptrh,c
  9423  002626                     	endif
  9424  002626                     	if	0	;tblptru may be non-zero
  9425  002626                     	endif
  9426  002626                     	if	0	;tblptru may be non-zero
  9427  002626                     	endif
  9428  002626  0E00               	movlw	low __au8Buffer
  9429  002628  2471               	addwf	__u8BufferSize,w,c
  9430  00262A  6ED9               	movwf	fsr2l,c
  9431  00262C  6ADA               	clrf	fsr2h,c
  9432  00262E  0E01               	movlw	high __au8Buffer
  9433  002630  22DA               	addwfc	fsr2h,f,c
  9434  002632  0008               	tblrd		*
  9435  002634  FFFF               	dw	65535	; errata NOP
  9436  002636  CFF5 FFDF          	movff	tablat,indf2
  9437                           
  9438                           ; BSR set to: 1
  9439  00263A  2A18               	incf	ModbusProcess_FC17@i,f,c
  9440                           
  9441                           ; BSR set to: 1
  9442  00263C  2A71               	incf	__u8BufferSize,f,c
  9443                           
  9444                           ; BSR set to: 1
  9445  00263E  0E18               	movlw	24
  9446  002640  6418               	cpfsgt	ModbusProcess_FC17@i,c
  9447  002642  D7E9               	goto	l5920
  9448                           
  9449                           ; BSR set to: 1
  9450                           ;ModbusRtu.c: 1095: _au8Buffer[_u8BufferSize++] = '!';
  9451  002644  0E00               	movlw	low __au8Buffer
  9452  002646  2471               	addwf	__u8BufferSize,w,c
  9453  002648  6ED9               	movwf	fsr2l,c
  9454  00264A  6ADA               	clrf	fsr2h,c
  9455  00264C  0E01               	movlw	high __au8Buffer
  9456  00264E  22DA               	addwfc	fsr2h,f,c
  9457  002650  0E21               	movlw	33
  9458  002652  6EDF               	movwf	indf2,c
  9459                           
  9460                           ; BSR set to: 1
  9461  002654  2A71               	incf	__u8BufferSize,f,c
  9462                           
  9463                           ; BSR set to: 1
  9464                           ;ModbusRtu.c: 1096: _au8Buffer[_u8BufferSize++] = '>';
  9465  002656  0E00               	movlw	low __au8Buffer
  9466  002658  2471               	addwf	__u8BufferSize,w,c
  9467  00265A  6ED9               	movwf	fsr2l,c
  9468  00265C  6ADA               	clrf	fsr2h,c
  9469  00265E  0E01               	movlw	high __au8Buffer
  9470  002660  22DA               	addwfc	fsr2h,f,c
  9471  002662  0E3E               	movlw	62
  9472  002664  6EDF               	movwf	indf2,c
  9473  002666  2A71               	incf	__u8BufferSize,f,c
  9474                           
  9475                           ; BSR set to: 1
  9476                           ;ModbusRtu.c: 1097: uint8_t u8CopyBufferSize = _u8BufferSize;
  9477  002668  C071  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9478                           
  9479                           ; BSR set to: 1
  9480                           ;ModbusRtu.c: 1098: ModbusSendTxBuffer();
  9481  00266C  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  9482                           
  9483                           ;ModbusRtu.c: 1100: return u8CopyBufferSize;
  9484  002670  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9485  002672  0012               	return		;funcret
  9486  002674  FFFF               	dw	65535	; errata NOP
  9487  002676                     __end_of_ModbusProcess_FC17:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           postinc0	equ	0xFEE
  9497                           wreg	equ	0xFE8
  9498                           indf1	equ	0xFE7
  9499                           postinc1	equ	0xFE6
  9500                           postdec1	equ	0xFE5
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           plusw2	equ	0xFDB
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _ModbusProcess_FC16 *****************
  9512 ;; Defined at:
  9513 ;;		line 1047 in file "ModbusRtu.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9516 ;;		 -> _MODBUSHoldingRegs(30), 
  9517 ;;  u8size          1   23[COMRAM] unsigned char 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9520 ;;  temp            2   28[COMRAM] unsigned short 
  9521 ;;  i               1   34[COMRAM] unsigned char 
  9522 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9523 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9524 ;; Return value:  Size  Location     Type
  9525 ;;                  1    wreg      unsigned char 
  9526 ;; Registers used:
  9527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9528 ;; Tracked objects:
  9529 ;;		On entry : E/1
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9533 ;;      Params:         3       0       0       0       0       0       0
  9534 ;;      Locals:         7       0       0       0       0       0       0
  9535 ;;      Temps:          4       0       0       0       0       0       0
  9536 ;;      Totals:        14       0       0       0       0       0       0
  9537 ;;Total ram usage:       14 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    4
  9540 ;; This function calls:
  9541 ;;		_ModbusSendTxBuffer
  9542 ;; This function is called by:
  9543 ;;		_ModbusPoll
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text44
  9548  001E5E                     __ptext44:
  9549                           	opt stack 0
  9550  001E5E                     _ModbusProcess_FC16:
  9551                           	opt stack 25
  9552                           
  9553                           ;incstack = 0
  9554  001E5E  FFFF               	dw	65535
  9555                           
  9556                           ;ModbusRtu.c: 1050: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9557  001E60  0101               	movlb	1	; () banked
  9558  001E62  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9559  001E64  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9560  001E68  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9561  001E6A  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9562  001E6E  6A19               	clrf	??_ModbusProcess_FC16,c
  9563  001E70  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9564  001E72  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9565  001E74  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9566  001E76  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9567                           
  9568                           ; BSR set to: 1
  9569                           ;ModbusRtu.c: 1051: _lastAddress = u16StartAdd;
  9570  001E78  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9571  001E7C  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9572                           
  9573                           ; BSR set to: 1
  9574                           ;ModbusRtu.c: 1052: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9575  001E80  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9576                           
  9577                           ; BSR set to: 1
  9578                           ;ModbusRtu.c: 1053: _lastCount = u8regsno;
  9579  001E84  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9580  001E88  0100               	movlb	0	; () banked
  9581  001E8A  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;ModbusRtu.c: 1054: uint8_t u8CopyBufferSize;
  9585                           ;ModbusRtu.c: 1055: uint8_t i;
  9586                           ;ModbusRtu.c: 1056: uint16_t temp;
  9587                           ;ModbusRtu.c: 1059: _au8Buffer[ NB_HI ] = 0;
  9588  001E8C  0101               	movlb	1	; () banked
  9589  001E8E  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9590                           
  9591                           ; BSR set to: 1
  9592                           ;ModbusRtu.c: 1060: _au8Buffer[ NB_LO ] = u8regsno;
  9593  001E90  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9594                           
  9595                           ; BSR set to: 1
  9596                           ;ModbusRtu.c: 1061: _u8BufferSize = RESPONSE_SIZE;
  9597  001E94  0E06               	movlw	6
  9598  001E96  6E71               	movwf	__u8BufferSize,c
  9599                           
  9600                           ; BSR set to: 1
  9601                           ;ModbusRtu.c: 1064: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9602  001E98  6A23               	clrf	ModbusProcess_FC16@i,c
  9603  001E9A  D02C               	goto	l5900
  9604  001E9C                     l5894:
  9605                           
  9606                           ; BSR set to: 1
  9607                           ;ModbusRtu.c: 1065: {
  9608                           ;ModbusRtu.c: 1066: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9609  001E9C  5023               	movf	ModbusProcess_FC16@i,w,c
  9610  001E9E  0D02               	mullw	2
  9611  001EA0  0E08               	movlw	low (__au8Buffer+8)
  9612  001EA2  24F3               	addwf	prodl,w,c
  9613  001EA4  6ED9               	movwf	fsr2l,c
  9614  001EA6  0E01               	movlw	high (__au8Buffer+8)
  9615  001EA8  20F4               	addwfc	prodh,w,c
  9616  001EAA  6EDA               	movwf	fsr2h,c
  9617  001EAC  50DF               	movf	indf2,w,c
  9618  001EAE  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9619  001EB0  5023               	movf	ModbusProcess_FC16@i,w,c
  9620  001EB2  0D02               	mullw	2
  9621  001EB4  0E07               	movlw	low (__au8Buffer+7)
  9622  001EB6  24F3               	addwf	prodl,w,c
  9623  001EB8  6ED9               	movwf	fsr2l,c
  9624  001EBA  0E01               	movlw	high (__au8Buffer+7)
  9625  001EBC  20F4               	addwfc	prodh,w,c
  9626  001EBE  6EDA               	movwf	fsr2h,c
  9627  001EC0  50DF               	movf	indf2,w,c
  9628  001EC2  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9629  001EC4  5019               	movf	??_ModbusProcess_FC16,w,c
  9630  001EC6  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9631  001EC8  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9632                           
  9633                           ; BSR set to: 1
  9634                           ;ModbusRtu.c: 1070: regs[ u16StartAdd + i ] = temp;
  9635  001ECC  5023               	movf	ModbusProcess_FC16@i,w,c
  9636  001ECE  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9637  001ED0  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9638  001ED2  0E00               	movlw	0
  9639  001ED4  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9640  001ED6  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9641  001ED8  90D8               	bcf	status,0,c
  9642  001EDA  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9643  001EDC  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9644  001EDE  5019               	movf	??_ModbusProcess_FC16,w,c
  9645  001EE0  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9646  001EE2  6ED9               	movwf	fsr2l,c
  9647  001EE4  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9648  001EE6  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9649  001EE8  6EDA               	movwf	fsr2h,c
  9650  001EEA  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9651  001EEE  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9652                           
  9653                           ; BSR set to: 1
  9654  001EF2  2A23               	incf	ModbusProcess_FC16@i,f,c
  9655  001EF4                     l5900:
  9656  001EF4  FFFF               	dw	65535	; assembler added errata NOP
  9657                           
  9658                           ; BSR set to: 1
  9659  001EF6  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9660  001EF8  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9661  001EFA  E20E               	bc	l5904
  9662                           
  9663                           ; BSR set to: 1
  9664  001EFC  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9665  001EFE  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9666  001F00  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9667  001F02  5023               	movf	ModbusProcess_FC16@i,w,c
  9668  001F04  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9669  001F06  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9670  001F08  0E00               	movlw	0
  9671  001F0A  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9672  001F0C  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9673  001F0E  5019               	movf	??_ModbusProcess_FC16,w,c
  9674  001F10  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9675  001F12  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9676  001F14  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9677  001F16  E3C2               	bnc	l5894
  9678  001F18                     l5904:
  9679                           
  9680                           ; BSR set to: 1
  9681                           ;ModbusRtu.c: 1071: }
  9682                           ;ModbusRtu.c: 1072: u8CopyBufferSize = _u8BufferSize + 2;
  9683  001F18  5071               	movf	__u8BufferSize,w,c
  9684  001F1A  0F02               	addlw	2
  9685  001F1C  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9686                           
  9687                           ; BSR set to: 1
  9688                           ;ModbusRtu.c: 1073: ModbusSendTxBuffer();
  9689  001F1E  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  9690                           
  9691                           ;ModbusRtu.c: 1075: return u8CopyBufferSize;
  9692  001F22  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9693  001F24  0012               	return		;funcret
  9694  001F26  FFFF               	dw	65535	; errata NOP
  9695  001F28                     __end_of_ModbusProcess_FC16:
  9696                           	opt stack 0
  9697                           tblptru	equ	0xFF8
  9698                           tblptrh	equ	0xFF7
  9699                           tblptrl	equ	0xFF6
  9700                           tablat	equ	0xFF5
  9701                           prodh	equ	0xFF4
  9702                           prodl	equ	0xFF3
  9703                           intcon	equ	0xFF2
  9704                           postinc0	equ	0xFEE
  9705                           wreg	equ	0xFE8
  9706                           indf1	equ	0xFE7
  9707                           postinc1	equ	0xFE6
  9708                           postdec1	equ	0xFE5
  9709                           fsr1h	equ	0xFE2
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           plusw2	equ	0xFDB
  9715                           fsr2h	equ	0xFDA
  9716                           fsr2l	equ	0xFD9
  9717                           status	equ	0xFD8
  9718                           
  9719 ;; *************** function _ModbusProcess_FC15 *****************
  9720 ;; Defined at:
  9721 ;;		line 989 in file "ModbusRtu.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;  regs            1    wreg     PTR unsigned short 
  9724 ;;		 -> _MODBUSCoils(2), 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9727 ;;		 -> _MODBUSCoils(2), 
  9728 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9729 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9730 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9731 ;;  u16coil         2   26[COMRAM] unsigned short 
  9732 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9733 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9734 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9735 ;;  bTemp           1   29[COMRAM] unsigned char 
  9736 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      unsigned char 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : E/1
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9746 ;;      Params:         0       0       0       0       0       0       0
  9747 ;;      Locals:        14       0       0       0       0       0       0
  9748 ;;      Temps:          5       0       0       0       0       0       0
  9749 ;;      Totals:        19       0       0       0       0       0       0
  9750 ;;Total ram usage:       19 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    4
  9753 ;; This function calls:
  9754 ;;		_ModbusSendTxBuffer
  9755 ;; This function is called by:
  9756 ;;		_ModbusPoll
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text45
  9761  001A78                     __ptext45:
  9762                           	opt stack 0
  9763  001A78                     _ModbusProcess_FC15:
  9764                           	opt stack 25
  9765                           
  9766                           ;incstack = 0
  9767  001A78  FFFF               	dw	65535
  9768                           
  9769                           ;ModbusProcess_FC15@regs stored from wreg
  9770  001A7A  6E24               	movwf	ModbusProcess_FC15@regs,c
  9771                           
  9772                           ;ModbusRtu.c: 992: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9773                           ;ModbusRtu.c: 993: uint8_t u8CopyBufferSize;
  9774                           ;ModbusRtu.c: 994: uint16_t u16currentCoil, u16coil;
  9775                           ;ModbusRtu.c: 995: boolean bTemp;
  9776                           ;ModbusRtu.c: 998: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9777  001A7C  0101               	movlb	1	; () banked
  9778  001A7E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9779  001A80  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9780  001A82  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9781  001A84  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9782  001A86  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9783                           
  9784                           ; BSR set to: 1
  9785                           ;ModbusRtu.c: 999: _lastAddress = u16StartCoil;
  9786  001A8A  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9787  001A8E  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9788                           
  9789                           ;ModbusRtu.c: 1000: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9790  001A92  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9791  001A94  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9792  001A96  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9793  001A98  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9794  001A9A  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9795                           
  9796                           ; BSR set to: 1
  9797                           ;ModbusRtu.c: 1001: _lastCount = u16Coilno;
  9798  001A9E  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9799  001AA2  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9800                           
  9801                           ; BSR set to: 1
  9802                           ;ModbusRtu.c: 1004: u8bitsno = 0;
  9803  001AA6  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9804                           
  9805                           ;ModbusRtu.c: 1005: u8frameByte = 7;
  9806  001AA8  0E07               	movlw	7
  9807  001AAA  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9808                           
  9809                           ; BSR set to: 1
  9810                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9811  001AAC  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9812  001AAE  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9813  001AB0  D058               	goto	l5866
  9814  001AB2                     l5846:
  9815                           
  9816                           ;ModbusRtu.c: 1007: {
  9817                           ;ModbusRtu.c: 1009: u16coil = u16StartCoil + u16currentCoil;
  9818  001AB2  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9819  001AB4  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9820  001AB6  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9821  001AB8  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9822  001ABA  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9823  001ABC  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9824                           
  9825                           ;ModbusRtu.c: 1011: u8currentBit = (uint8_t) u16coil;
  9826  001ABE  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9827                           
  9828                           ;ModbusRtu.c: 1013: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9829  001AC2  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9830  001AC6  0E00               	movlw	low __au8Buffer
  9831  001AC8  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9832  001ACA  6ED9               	movwf	fsr2l,c
  9833  001ACC  6ADA               	clrf	fsr2h,c
  9834  001ACE  0E01               	movlw	high __au8Buffer
  9835  001AD0  22DA               	addwfc	fsr2h,f,c
  9836  001AD2  50DF               	movf	indf2,w,c
  9837  001AD4  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9838  001AD6  2A16               	incf	??_ModbusProcess_FC15,f,c
  9839  001AD8  D003               	goto	u5124
  9840  001ADA                     u5125:
  9841  001ADA  FFFF               	dw	65535	; assembler added errata NOP
  9842  001ADC  90D8               	bcf	status,0,c
  9843  001ADE  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9844  001AE0                     u5124:
  9845  001AE0  FFFF               	dw	65535	; assembler added errata NOP
  9846  001AE2  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9847  001AE4  D7FA               	goto	u5125
  9848  001AE6  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9849  001AE8  0B01               	andlw	1
  9850  001AEA  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9851                           
  9852                           ;ModbusRtu.c: 1017: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9853  001AEC  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9854  001AEE  E016               	bz	l5856
  9855  001AF0  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9856  001AF4  0E01               	movlw	1
  9857  001AF6  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9858  001AF8  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9859  001AFA  2A16               	incf	??_ModbusProcess_FC15,f,c
  9860  001AFC  D004               	goto	u5144
  9861  001AFE                     u5145:
  9862  001AFE  FFFF               	dw	65535	; assembler added errata NOP
  9863  001B00  90D8               	bcf	status,0,c
  9864  001B02  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9865  001B04  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9866  001B06                     u5144:
  9867  001B06  FFFF               	dw	65535	; assembler added errata NOP
  9868  001B08  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9869  001B0A  D7F9               	goto	u5145
  9870  001B0C  5024               	movf	ModbusProcess_FC15@regs,w,c
  9871  001B0E  6ED9               	movwf	fsr2l,c
  9872  001B10  6ADA               	clrf	fsr2h,c
  9873  001B12  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9874  001B14  12DE               	iorwf	postinc2,f,c
  9875  001B16  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9876  001B18  12DD               	iorwf	postdec2,f,c
  9877  001B1A  D019               	goto	l5858
  9878  001B1C                     l5856:
  9879  001B1C  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9880  001B20  0E01               	movlw	1
  9881  001B22  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9882  001B24  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9883  001B26  2A16               	incf	??_ModbusProcess_FC15,f,c
  9884  001B28  D004               	goto	u5154
  9885  001B2A                     u5155:
  9886  001B2A  FFFF               	dw	65535	; assembler added errata NOP
  9887  001B2C  90D8               	bcf	status,0,c
  9888  001B2E  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9889  001B30  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9890  001B32                     u5154:
  9891  001B32  FFFF               	dw	65535	; assembler added errata NOP
  9892  001B34  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9893  001B36  D7F9               	goto	u5155
  9894  001B38  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9895  001B3A  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9896  001B3C  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9897  001B3E  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9898  001B40  5024               	movf	ModbusProcess_FC15@regs,w,c
  9899  001B42  6ED9               	movwf	fsr2l,c
  9900  001B44  6ADA               	clrf	fsr2h,c
  9901  001B46  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9902  001B48  16DE               	andwf	postinc2,f,c
  9903  001B4A  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9904  001B4C  16DD               	andwf	postdec2,f,c
  9905  001B4E                     l5858:
  9906  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  9907                           
  9908                           ;ModbusRtu.c: 1022: u8bitsno++;
  9909  001B50  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9910                           
  9911                           ;ModbusRtu.c: 1024: if (u8bitsno > 7)
  9912  001B52  0E07               	movlw	7
  9913  001B54  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9914  001B56  D002               	goto	l829
  9915                           
  9916                           ;ModbusRtu.c: 1025: {
  9917                           ;ModbusRtu.c: 1026: u8bitsno = 0;
  9918  001B58  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9919                           
  9920                           ;ModbusRtu.c: 1027: u8frameByte++;
  9921  001B5A  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9922  001B5C                     l829:
  9923  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  9924  001B5E  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9925  001B60  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9926  001B62                     l5866:
  9927  001B62  FFFF               	dw	65535	; assembler added errata NOP
  9928  001B64  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9929  001B66  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9930  001B68  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9931  001B6A  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9932  001B6C  E3A2               	bnc	l5846
  9933                           
  9934                           ;ModbusRtu.c: 1028: }
  9935                           ;ModbusRtu.c: 1029: }
  9936                           ;ModbusRtu.c: 1033: _u8BufferSize = 6;
  9937  001B6E  0E06               	movlw	6
  9938  001B70  6E71               	movwf	__u8BufferSize,c
  9939                           
  9940                           ;ModbusRtu.c: 1034: u8CopyBufferSize = _u8BufferSize + 2;
  9941  001B72  5071               	movf	__u8BufferSize,w,c
  9942  001B74  0F02               	addlw	2
  9943  001B76  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9944                           
  9945                           ;ModbusRtu.c: 1035: ModbusSendTxBuffer();
  9946  001B78  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
  9947                           
  9948                           ;ModbusRtu.c: 1036: return u8CopyBufferSize;
  9949  001B7C  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9950  001B7E  0012               	return		;funcret
  9951  001B80  FFFF               	dw	65535	; errata NOP
  9952  001B82                     __end_of_ModbusProcess_FC15:
  9953                           	opt stack 0
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           postinc0	equ	0xFEE
  9962                           wreg	equ	0xFE8
  9963                           indf1	equ	0xFE7
  9964                           postinc1	equ	0xFE6
  9965                           postdec1	equ	0xFE5
  9966                           fsr1h	equ	0xFE2
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           postdec2	equ	0xFDD
  9971                           plusw2	equ	0xFDB
  9972                           fsr2h	equ	0xFDA
  9973                           fsr2l	equ	0xFD9
  9974                           status	equ	0xFD8
  9975                           
  9976 ;; *************** function _ModbusProcess_FC1 *****************
  9977 ;; Defined at:
  9978 ;;		line 828 in file "ModbusRtu.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  regs            2   21[COMRAM] unsigned short 
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;  u16Coilno       2   36[COMRAM] unsigned short 
  9983 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  9984 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9985 ;;  u16coil         2   26[COMRAM] unsigned short 
  9986 ;;  u8bitsno        1   35[COMRAM] unsigned char 
  9987 ;;  u8bytesno       1   30[COMRAM] unsigned char 
  9988 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
  9989 ;;  u8currentBit    1   28[COMRAM] unsigned char 
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  1    wreg      unsigned char 
  9992 ;; Registers used:
  9993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9994 ;; Tracked objects:
  9995 ;;		On entry : E/1
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9999 ;;      Params:         2       0       0       0       0       0       0
 10000 ;;      Locals:        12       0       0       0       0       0       0
 10001 ;;      Temps:          3       0       0       0       0       0       0
 10002 ;;      Totals:        17       0       0       0       0       0       0
 10003 ;;Total ram usage:       17 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    4
 10006 ;; This function calls:
 10007 ;;		_ModbusSendTxBuffer
 10008 ;; This function is called by:
 10009 ;;		_ModbusPoll
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           	psect	text46
 10014  00183A                     __ptext46:
 10015                           	opt stack 0
 10016  00183A                     _ModbusProcess_FC1:
 10017                           	opt stack 25
 10018                           
 10019                           ;incstack = 0
 10020  00183A  FFFF               	dw	65535
 10021                           
 10022                           ;ModbusRtu.c: 831: uint8_t u8currentBit, u8bytesno, u8bitsno;
 10023                           ;ModbusRtu.c: 832: uint8_t u8CopyBufferSize;
 10024                           ;ModbusRtu.c: 833: uint16_t u16currentCoil, u16coil;
 10025                           ;ModbusRtu.c: 836: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 10026  00183C  0101               	movlb	1	; () banked
 10027  00183E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10028  001840  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10029  001842  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10030  001844  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 10031  001846  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 10032                           
 10033                           ; BSR set to: 1
 10034                           ;ModbusRtu.c: 837: _lastAddress = u16StartCoil;
 10035  00184A  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 10036  00184E  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 10037                           
 10038                           ;ModbusRtu.c: 838: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 10039  001852  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10040  001854  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10041  001856  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10042  001858  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 10043  00185A  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 10044                           
 10045                           ; BSR set to: 1
 10046                           ;ModbusRtu.c: 839: _lastCount = u16Coilno;
 10047  00185E  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 10048  001862  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 10049                           
 10050                           ; BSR set to: 1
 10051                           ;ModbusRtu.c: 841: u8bytesno = (uint8_t) (u16Coilno / 8);
 10052  001866  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10053  00186A  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 10054  00186E  90D8               	bcf	status,0,c
 10055  001870  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10056  001872  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10057  001874  90D8               	bcf	status,0,c
 10058  001876  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10059  001878  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10060  00187A  90D8               	bcf	status,0,c
 10061  00187C  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10062  00187E  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10063  001880  5018               	movf	??_ModbusProcess_FC1,w,c
 10064  001882  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 10065                           
 10066                           ; BSR set to: 1
 10067                           ;ModbusRtu.c: 842: if (u16Coilno % 8 != 0)
 10068  001884  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10069  001888  0E07               	movlw	7
 10070  00188A  1618               	andwf	??_ModbusProcess_FC1,f,c
 10071  00188C  E001               	bz	l5718
 10072                           
 10073                           ; BSR set to: 1
 10074                           ;ModbusRtu.c: 843: u8bytesno++;
 10075  00188E  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 10076  001890                     l5718:
 10077                           
 10078                           ; BSR set to: 1
 10079                           ;ModbusRtu.c: 844: _au8Buffer[ ADD_HI ] = u8bytesno;
 10080  001890  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 10081                           
 10082                           ; BSR set to: 1
 10083                           ;ModbusRtu.c: 845: _u8BufferSize = ADD_LO;
 10084  001894  0E03               	movlw	3
 10085  001896  6E71               	movwf	__u8BufferSize,c
 10086                           
 10087                           ; BSR set to: 1
 10088                           ;ModbusRtu.c: 848: u8bitsno = 0;
 10089  001898  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10090                           
 10091                           ; BSR set to: 1
 10092                           ;ModbusRtu.c: 850: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 10093  00189A  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 10094  00189C  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 10095  00189E  D04F               	goto	l5744
 10096  0018A0                     l5726:
 10097                           
 10098                           ;ModbusRtu.c: 851: {
 10099                           ;ModbusRtu.c: 852: u16coil = u16StartCoil + u16currentCoil;
 10100  0018A0  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 10101  0018A2  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 10102  0018A4  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 10103  0018A6  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 10104  0018A8  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 10105  0018AA  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 10106                           
 10107                           ;ModbusRtu.c: 854: u8currentBit = (uint8_t) u16coil;
 10108  0018AC  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 10109                           
 10110                           ;ModbusRtu.c: 856: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 10111  0018B0  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 10112  0018B4  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 10113  0018B8  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 10114  0018BC  2A18               	incf	??_ModbusProcess_FC1,f,c
 10115  0018BE  D004               	goto	u5014
 10116  0018C0                     u5015:
 10117  0018C0  FFFF               	dw	65535	; assembler added errata NOP
 10118  0018C2  90D8               	bcf	status,0,c
 10119  0018C4  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 10120  0018C6  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10121  0018C8                     u5014:
 10122  0018C8  FFFF               	dw	65535	; assembler added errata NOP
 10123  0018CA  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10124  0018CC  D7F9               	goto	u5015
 10125  0018CE  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 10126  0018D0  D015               	goto	l5734
 10127  0018D2  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10128  0018D6  0E01               	movlw	1
 10129  0018D8  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10130  0018DA  2A18               	incf	??_ModbusProcess_FC1,f,c
 10131  0018DC  D003               	goto	u5034
 10132  0018DE                     u5035:
 10133  0018DE  FFFF               	dw	65535	; assembler added errata NOP
 10134  0018E0  90D8               	bcf	status,0,c
 10135  0018E2  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10136  0018E4                     u5034:
 10137  0018E4  FFFF               	dw	65535	; assembler added errata NOP
 10138  0018E6  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10139  0018E8  D7FA               	goto	u5035
 10140  0018EA  0E00               	movlw	low __au8Buffer
 10141  0018EC  2471               	addwf	__u8BufferSize,w,c
 10142  0018EE  6ED9               	movwf	fsr2l,c
 10143  0018F0  6ADA               	clrf	fsr2h,c
 10144  0018F2  0E01               	movlw	high __au8Buffer
 10145  0018F4  22DA               	addwfc	fsr2h,f,c
 10146  0018F6  5019               	movf	??_ModbusProcess_FC1+1,w,c
 10147  0018F8  12DF               	iorwf	indf2,f,c
 10148  0018FA  D017               	goto	l5736
 10149  0018FC                     l5734:
 10150  0018FC  FFFF               	dw	65535	; assembler added errata NOP
 10151  0018FE  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10152  001902  0E01               	movlw	1
 10153  001904  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10154  001906  2A18               	incf	??_ModbusProcess_FC1,f,c
 10155  001908  D003               	goto	u5044
 10156  00190A                     u5045:
 10157  00190A  FFFF               	dw	65535	; assembler added errata NOP
 10158  00190C  90D8               	bcf	status,0,c
 10159  00190E  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10160  001910                     u5044:
 10161  001910  FFFF               	dw	65535	; assembler added errata NOP
 10162  001912  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10163  001914  D7FA               	goto	u5045
 10164  001916  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 10165  001918  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 10166  00191A  0E00               	movlw	low __au8Buffer
 10167  00191C  2471               	addwf	__u8BufferSize,w,c
 10168  00191E  6ED9               	movwf	fsr2l,c
 10169  001920  6ADA               	clrf	fsr2h,c
 10170  001922  0E01               	movlw	high __au8Buffer
 10171  001924  22DA               	addwfc	fsr2h,f,c
 10172  001926  501A               	movf	??_ModbusProcess_FC1+2,w,c
 10173  001928  16DF               	andwf	indf2,f,c
 10174  00192A                     l5736:
 10175  00192A  FFFF               	dw	65535	; assembler added errata NOP
 10176                           
 10177                           ;ModbusRtu.c: 860: u8bitsno++;
 10178  00192C  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 10179                           
 10180                           ;ModbusRtu.c: 862: if (u8bitsno > 7)
 10181  00192E  0E07               	movlw	7
 10182  001930  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 10183  001932  D002               	goto	l798
 10184                           
 10185                           ;ModbusRtu.c: 863: {
 10186                           ;ModbusRtu.c: 864: u8bitsno = 0;
 10187  001934  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10188                           
 10189                           ;ModbusRtu.c: 865: _u8BufferSize++;
 10190  001936  2A71               	incf	__u8BufferSize,f,c
 10191  001938                     l798:
 10192  001938  FFFF               	dw	65535	; assembler added errata NOP
 10193  00193A  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 10194  00193C  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 10195  00193E                     l5744:
 10196  00193E  FFFF               	dw	65535	; assembler added errata NOP
 10197  001940  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 10198  001942  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 10199  001944  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 10200  001946  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 10201  001948  E3AB               	bnc	l5726
 10202                           
 10203                           ;ModbusRtu.c: 866: }
 10204                           ;ModbusRtu.c: 867: }
 10205                           ;ModbusRtu.c: 870: if (u16Coilno % 8 != 0)
 10206  00194A  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10207  00194E  0E07               	movlw	7
 10208  001950  1618               	andwf	??_ModbusProcess_FC1,f,c
 10209  001952  E001               	bz	l5750
 10210                           
 10211                           ;ModbusRtu.c: 871: _u8BufferSize++;
 10212  001954  2A71               	incf	__u8BufferSize,f,c
 10213  001956                     l5750:
 10214                           
 10215                           ;ModbusRtu.c: 872: u8CopyBufferSize = _u8BufferSize + 2;
 10216  001956  5071               	movf	__u8BufferSize,w,c
 10217  001958  0F02               	addlw	2
 10218  00195A  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 10219                           
 10220                           ;ModbusRtu.c: 873: ModbusSendTxBuffer();
 10221  00195C  EC67  F014         	call	_ModbusSendTxBuffer	;wreg free
 10222                           
 10223                           ;ModbusRtu.c: 874: return u8CopyBufferSize;
 10224  001960  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 10225  001962  0012               	return		;funcret
 10226  001964  FFFF               	dw	65535	; errata NOP
 10227  001966                     __end_of_ModbusProcess_FC1:
 10228                           	opt stack 0
 10229                           tblptru	equ	0xFF8
 10230                           tblptrh	equ	0xFF7
 10231                           tblptrl	equ	0xFF6
 10232                           tablat	equ	0xFF5
 10233                           prodh	equ	0xFF4
 10234                           prodl	equ	0xFF3
 10235                           intcon	equ	0xFF2
 10236                           postinc0	equ	0xFEE
 10237                           wreg	equ	0xFE8
 10238                           indf1	equ	0xFE7
 10239                           postinc1	equ	0xFE6
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           plusw2	equ	0xFDB
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _ModbusSendTxBuffer *****************
 10252 ;; Defined at:
 10253 ;;		line 549 in file "ModbusRtu.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;		None
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;  u16crc          2   19[COMRAM] unsigned short 
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      void 
 10260 ;; Registers used:
 10261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/1
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10267 ;;      Params:         0       0       0       0       0       0       0
 10268 ;;      Locals:         2       0       0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0
 10270 ;;      Totals:         2       0       0       0       0       0       0
 10271 ;;Total ram usage:        2 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    3
 10274 ;; This function calls:
 10275 ;;		_ModbusCalcCRC
 10276 ;;		_PortWrite
 10277 ;;		_millis
 10278 ;; This function is called by:
 10279 ;;		_ModbusPoll
 10280 ;;		_ModbusProcess_FC1
 10281 ;;		_ModbusProcess_FC3
 10282 ;;		_ModbusProcess_FC5
 10283 ;;		_ModbusProcess_FC6
 10284 ;;		_ModbusProcess_FC7
 10285 ;;		_ModbusProcess_FC15
 10286 ;;		_ModbusProcess_FC16
 10287 ;;		_ModbusProcess_FC17
 10288 ;;		_ModbusProcess_FC21
 10289 ;;		_ModbusProcess_FC43
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           	psect	text47
 10294  0028CE                     __ptext47:
 10295                           	opt stack 0
 10296  0028CE                     _ModbusSendTxBuffer:
 10297                           	opt stack 26
 10298                           
 10299                           ;incstack = 0
 10300  0028CE  FFFF               	dw	65535
 10301                           
 10302                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10303  0028D0  5071               	movf	__u8BufferSize,w,c
 10304  0028D2  ECCA  F012         	call	_ModbusCalcCRC
 10305  0028D6  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10306  0028DA  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10307                           
 10308                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10309  0028DE  0E00               	movlw	low __au8Buffer
 10310  0028E0  2471               	addwf	__u8BufferSize,w,c
 10311  0028E2  6ED9               	movwf	fsr2l,c
 10312  0028E4  6ADA               	clrf	fsr2h,c
 10313  0028E6  0E01               	movlw	high __au8Buffer
 10314  0028E8  22DA               	addwfc	fsr2h,f,c
 10315  0028EA  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10316                           
 10317                           ;ModbusRtu.c: 556: _u8BufferSize++;
 10318  0028EE  2A71               	incf	__u8BufferSize,f,c
 10319                           
 10320                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10321  0028F0  0E00               	movlw	low __au8Buffer
 10322  0028F2  2471               	addwf	__u8BufferSize,w,c
 10323  0028F4  6ED9               	movwf	fsr2l,c
 10324  0028F6  6ADA               	clrf	fsr2h,c
 10325  0028F8  0E01               	movlw	high __au8Buffer
 10326  0028FA  22DA               	addwfc	fsr2h,f,c
 10327  0028FC  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10328                           
 10329                           ;ModbusRtu.c: 558: _u8BufferSize++;
 10330  002900  2A71               	incf	__u8BufferSize,f,c
 10331                           
 10332                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
 10333  002902  0E00               	movlw	low __au8Buffer
 10334  002904  6E07               	movwf	PortWrite@buf,c
 10335  002906  0E01               	movlw	high __au8Buffer
 10336  002908  6E08               	movwf	PortWrite@buf+1,c
 10337  00290A  C071  F009         	movff	__u8BufferSize,PortWrite@buflen
 10338  00290E  EC39  F015         	call	_PortWrite	;wreg free
 10339                           
 10340                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
 10341  002912  6A71               	clrf	__u8BufferSize,c
 10342                           
 10343                           ;ModbusRtu.c: 574: _u16OutCnt++;
 10344  002914  EFD1  F015         	goto	_millis	;wreg free
 10345  002918  FFFF               	dw	65535	; errata NOP
 10346  00291A                     __end_of_ModbusSendTxBuffer:
 10347                           	opt stack 0
 10348                           tblptru	equ	0xFF8
 10349                           tblptrh	equ	0xFF7
 10350                           tblptrl	equ	0xFF6
 10351                           tablat	equ	0xFF5
 10352                           prodh	equ	0xFF4
 10353                           prodl	equ	0xFF3
 10354                           intcon	equ	0xFF2
 10355                           postinc0	equ	0xFEE
 10356                           wreg	equ	0xFE8
 10357                           indf1	equ	0xFE7
 10358                           postinc1	equ	0xFE6
 10359                           postdec1	equ	0xFE5
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           plusw2	equ	0xFDB
 10366                           fsr2h	equ	0xFDA
 10367                           fsr2l	equ	0xFD9
 10368                           status	equ	0xFD8
 10369                           
 10370 ;; *************** function _millis *****************
 10371 ;; Defined at:
 10372 ;;		line 236 in file "interrupts.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  ret             4   10[COMRAM] unsigned long 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  4    6[COMRAM] unsigned long 
 10379 ;; Registers used:
 10380 ;;		None
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/1
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10386 ;;      Params:         4       0       0       0       0       0       0
 10387 ;;      Locals:         4       0       0       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0
 10389 ;;      Totals:         8       0       0       0       0       0       0
 10390 ;;Total ram usage:        8 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    2
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_SoundPlayNextStep
 10397 ;;		_main
 10398 ;;		_ModbusPoll
 10399 ;;		_ModbusSendTxBuffer
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text48
 10404  002BA2                     __ptext48:
 10405                           	opt stack 0
 10406  002BA2                     _millis:
 10407                           	opt stack 28
 10408                           
 10409                           ;incstack = 0
 10410  002BA2  FFFF               	dw	65535
 10411                           
 10412                           ;interrupts.c: 239: (INTCONbits.GIE = 0);
 10413  002BA4  9EF2               	bcf	intcon,7,c	;volatile
 10414                           
 10415                           ;interrupts.c: 240: unsigned long ret = millisecondsFromStart;
 10416  002BA6  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 10417  002BAA  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 10418  002BAE  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 10419  002BB2  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 10420                           
 10421                           ;interrupts.c: 241: (INTCONbits.GIE = 1);
 10422  002BB6  8EF2               	bsf	intcon,7,c	;volatile
 10423                           
 10424                           ;interrupts.c: 242: return ret;
 10425  002BB8  C00B  F007         	movff	millis@ret,?_millis
 10426  002BBC  C00C  F008         	movff	millis@ret+1,?_millis+1
 10427  002BC0  C00D  F009         	movff	millis@ret+2,?_millis+2
 10428  002BC4  C00E  F00A         	movff	millis@ret+3,?_millis+3
 10429  002BC8  0012               	return		;funcret
 10430  002BCA  FFFF               	dw	65535	; errata NOP
 10431  002BCC                     __end_of_millis:
 10432                           	opt stack 0
 10433                           tblptru	equ	0xFF8
 10434                           tblptrh	equ	0xFF7
 10435                           tblptrl	equ	0xFF6
 10436                           tablat	equ	0xFF5
 10437                           prodh	equ	0xFF4
 10438                           prodl	equ	0xFF3
 10439                           intcon	equ	0xFF2
 10440                           postinc0	equ	0xFEE
 10441                           wreg	equ	0xFE8
 10442                           indf1	equ	0xFE7
 10443                           postinc1	equ	0xFE6
 10444                           postdec1	equ	0xFE5
 10445                           fsr1h	equ	0xFE2
 10446                           fsr1l	equ	0xFE1
 10447                           indf2	equ	0xFDF
 10448                           postinc2	equ	0xFDE
 10449                           postdec2	equ	0xFDD
 10450                           plusw2	equ	0xFDB
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function _PortWrite *****************
 10456 ;; Defined at:
 10457 ;;		line 93 in file "interrupts.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  buf             2    6[COMRAM] PTR unsigned char 
 10460 ;;		 -> _au8Buffer(140), 
 10461 ;;  buflen          1    8[COMRAM] unsigned char 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  i               1    9[COMRAM] unsigned char 
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/1
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10473 ;;      Params:         3       0       0       0       0       0       0
 10474 ;;      Locals:         1       0       0       0       0       0       0
 10475 ;;      Temps:          0       0       0       0       0       0       0
 10476 ;;      Totals:         4       0       0       0       0       0       0
 10477 ;;Total ram usage:        4 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    2
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		_ModbusSendTxBuffer
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text49
 10488  002A72                     __ptext49:
 10489                           	opt stack 0
 10490  002A72                     _PortWrite:
 10491                           	opt stack 26
 10492                           
 10493                           ;incstack = 0
 10494  002A72  FFFF               	dw	65535
 10495                           
 10496                           ;interrupts.c: 95: LATCbits.LATC5 = 1;
 10497  002A74  8A8B               	bsf	3979,5,c	;volatile
 10498                           
 10499                           ;interrupts.c: 96: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 10500  002A76  0E06               	movlw	6
 10501  002A78                     u5727:
 10502  002A78  FFFF               	dw	65535	; errata NOP
 10503  002A7A  2EE8               	decfsz	wreg,f,c
 10504  002A7C  D7FD               	goto	u5727
 10505  002A7E  F000               	nop	
 10506                           
 10507                           ;interrupts.c: 97: for(uint8_t i = 0; i < buflen; i++)
 10508  002A80  6A0A               	clrf	PortWrite@i,c
 10509  002A82  D00C               	goto	l3470
 10510  002A84                     l67:
 10511  002A84  FFFF               	dw	65535	; assembler added errata NOP
 10512  002A86  A2AC               	btfss	4012,1,c	;volatile
 10513  002A88  D7FD               	goto	l67
 10514                           
 10515                           ;interrupts.c: 100: TXREG = buf[i];
 10516  002A8A  500A               	movf	PortWrite@i,w,c
 10517  002A8C  2407               	addwf	PortWrite@buf,w,c
 10518  002A8E  6ED9               	movwf	fsr2l,c
 10519  002A90  0E00               	movlw	0
 10520  002A92  2008               	addwfc	PortWrite@buf+1,w,c
 10521  002A94  6EDA               	movwf	fsr2h,c
 10522  002A96  50DF               	movf	indf2,w,c
 10523  002A98  6EAD               	movwf	4013,c	;volatile
 10524  002A9A  2A0A               	incf	PortWrite@i,f,c
 10525  002A9C                     l3470:
 10526  002A9C  FFFF               	dw	65535	; assembler added errata NOP
 10527  002A9E  5009               	movf	PortWrite@buflen,w,c
 10528  002AA0  5C0A               	subwf	PortWrite@i,w,c
 10529  002AA2  E3F0               	bnc	l67
 10530  002AA4                     l71:
 10531  002AA4  FFFF               	dw	65535	; assembler added errata NOP
 10532  002AA6  A2AC               	btfss	4012,1,c	;volatile
 10533  002AA8  D7FD               	goto	l71
 10534                           
 10535                           ;interrupts.c: 103: LATCbits.LATC5 = 0;
 10536  002AAA  9A8B               	bcf	3979,5,c	;volatile
 10537  002AAC  0012               	return		;funcret
 10538  002AAE  FFFF               	dw	65535	; errata NOP
 10539  002AB0                     __end_of_PortWrite:
 10540                           	opt stack 0
 10541                           tblptru	equ	0xFF8
 10542                           tblptrh	equ	0xFF7
 10543                           tblptrl	equ	0xFF6
 10544                           tablat	equ	0xFF5
 10545                           prodh	equ	0xFF4
 10546                           prodl	equ	0xFF3
 10547                           intcon	equ	0xFF2
 10548                           postinc0	equ	0xFEE
 10549                           wreg	equ	0xFE8
 10550                           indf1	equ	0xFE7
 10551                           postinc1	equ	0xFE6
 10552                           postdec1	equ	0xFE5
 10553                           fsr1h	equ	0xFE2
 10554                           fsr1l	equ	0xFE1
 10555                           indf2	equ	0xFDF
 10556                           postinc2	equ	0xFDE
 10557                           postdec2	equ	0xFDD
 10558                           plusw2	equ	0xFDB
 10559                           fsr2h	equ	0xFDA
 10560                           fsr2l	equ	0xFD9
 10561                           status	equ	0xFD8
 10562                           
 10563 ;; *************** function _ModbusCalcCRC *****************
 10564 ;; Defined at:
 10565 ;;		line 659 in file "ModbusRtu.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;  u8length        1    wreg     unsigned char 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;  u8length        1   14[COMRAM] unsigned char 
 10570 ;;  j               1   16[COMRAM] unsigned char 
 10571 ;;  i               1   15[COMRAM] unsigned char 
 10572 ;;  temp            2   17[COMRAM] unsigned int 
 10573 ;;  flag            2   12[COMRAM] unsigned int 
 10574 ;;  temp2           2   10[COMRAM] unsigned int 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  2    6[COMRAM] unsigned short 
 10577 ;; Registers used:
 10578 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/1
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10584 ;;      Params:         2       0       0       0       0       0       0
 10585 ;;      Locals:         9       0       0       0       0       0       0
 10586 ;;      Temps:          2       0       0       0       0       0       0
 10587 ;;      Totals:        13       0       0       0       0       0       0
 10588 ;;Total ram usage:       13 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    2
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_ModbusSendTxBuffer
 10595 ;;		_ModbusValidateRequest
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text50
 10600  002594                     __ptext50:
 10601                           	opt stack 0
 10602  002594                     _ModbusCalcCRC:
 10603                           	opt stack 26
 10604                           
 10605                           ;incstack = 0
 10606  002594  FFFF               	dw	65535
 10607                           
 10608                           ;ModbusCalcCRC@u8length stored from wreg
 10609  002596  6E0F               	movwf	ModbusCalcCRC@u8length,c
 10610                           
 10611                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
 10612                           ;ModbusRtu.c: 662: temp = 0xFFFF;
 10613  002598  6812               	setf	ModbusCalcCRC@temp,c
 10614  00259A  6813               	setf	ModbusCalcCRC@temp+1,c
 10615                           
 10616                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
 10617  00259C  6A10               	clrf	ModbusCalcCRC@i,c
 10618  00259E  D01E               	goto	l3630
 10619  0025A0                     l3608:
 10620                           
 10621                           ;ModbusRtu.c: 664: {
 10622                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
 10623  0025A0  0E00               	movlw	low __au8Buffer
 10624  0025A2  2410               	addwf	ModbusCalcCRC@i,w,c
 10625  0025A4  6ED9               	movwf	fsr2l,c
 10626  0025A6  6ADA               	clrf	fsr2h,c
 10627  0025A8  0E01               	movlw	high __au8Buffer
 10628  0025AA  22DA               	addwfc	fsr2h,f,c
 10629  0025AC  50DF               	movf	indf2,w,c
 10630  0025AE  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10631                           
 10632                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
 10633  0025B0  0E01               	movlw	1
 10634  0025B2  6E11               	movwf	ModbusCalcCRC@j,c
 10635  0025B4                     l3616:
 10636  0025B4  FFFF               	dw	65535	; assembler added errata NOP
 10637                           
 10638                           ;ModbusRtu.c: 667: {
 10639                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
 10640  0025B6  0E01               	movlw	1
 10641  0025B8  1412               	andwf	ModbusCalcCRC@temp,w,c
 10642  0025BA  6E0D               	movwf	ModbusCalcCRC@flag,c
 10643  0025BC  6A0E               	clrf	ModbusCalcCRC@flag+1,c
 10644                           
 10645                           ;ModbusRtu.c: 669: temp >>= 1;
 10646  0025BE  90D8               	bcf	status,0,c
 10647  0025C0  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 10648  0025C2  3212               	rrcf	ModbusCalcCRC@temp,f,c
 10649                           
 10650                           ;ModbusRtu.c: 670: if (flag)
 10651  0025C4  500D               	movf	ModbusCalcCRC@flag,w,c
 10652  0025C6  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
 10653  0025C8  E004               	bz	l3624
 10654                           
 10655                           ;ModbusRtu.c: 671: temp ^= 0xA001;
 10656  0025CA  0E01               	movlw	1
 10657  0025CC  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10658  0025CE  0EA0               	movlw	160
 10659  0025D0  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 10660  0025D2                     l3624:
 10661  0025D2  2A11               	incf	ModbusCalcCRC@j,f,c
 10662  0025D4  0E08               	movlw	8
 10663  0025D6  6411               	cpfsgt	ModbusCalcCRC@j,c
 10664  0025D8  D7ED               	goto	l3616
 10665  0025DA  2A10               	incf	ModbusCalcCRC@i,f,c
 10666  0025DC                     l3630:
 10667  0025DC  FFFF               	dw	65535	; assembler added errata NOP
 10668  0025DE  500F               	movf	ModbusCalcCRC@u8length,w,c
 10669  0025E0  5C10               	subwf	ModbusCalcCRC@i,w,c
 10670  0025E2  E3DE               	bnc	l3608
 10671                           
 10672                           ;ModbusRtu.c: 672: }
 10673                           ;ModbusRtu.c: 673: }
 10674                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
 10675  0025E4  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 10676  0025E8  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
 10677                           
 10678                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
 10679  0025EA  5012               	movf	ModbusCalcCRC@temp,w,c
 10680  0025EC  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 10681  0025EE  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 10682  0025F0  500B               	movf	ModbusCalcCRC@temp2,w,c
 10683  0025F2  1009               	iorwf	??_ModbusCalcCRC,w,c
 10684  0025F4  6E12               	movwf	ModbusCalcCRC@temp,c
 10685  0025F6  500C               	movf	ModbusCalcCRC@temp2+1,w,c
 10686  0025F8  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 10687  0025FA  6E13               	movwf	ModbusCalcCRC@temp+1,c
 10688                           
 10689                           ;ModbusRtu.c: 680: return temp;
 10690  0025FC  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 10691  002600  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 10692  002604  0012               	return		;funcret
 10693  002606  FFFF               	dw	65535	; errata NOP
 10694  002608                     __end_of_ModbusCalcCRC:
 10695                           	opt stack 0
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           intcon	equ	0xFF2
 10703                           postinc0	equ	0xFEE
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postinc1	equ	0xFE6
 10707                           postdec1	equ	0xFE5
 10708                           fsr1h	equ	0xFE2
 10709                           fsr1l	equ	0xFE1
 10710                           indf2	equ	0xFDF
 10711                           postinc2	equ	0xFDE
 10712                           postdec2	equ	0xFDD
 10713                           plusw2	equ	0xFDB
 10714                           fsr2h	equ	0xFDA
 10715                           fsr2l	equ	0xFD9
 10716                           status	equ	0xFD8
 10717                           
 10718 ;; *************** function _ModbusGetRxBuffer *****************
 10719 ;; Defined at:
 10720 ;;		line 509 in file "ModbusRtu.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      unsigned char 
 10727 ;; Registers used:
 10728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : F/0
 10731 ;;		On exit  : F/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10734 ;;      Params:         0       0       0       0       0       0       0
 10735 ;;      Locals:         1       0       0       0       0       0       0
 10736 ;;      Temps:          1       0       0       0       0       0       0
 10737 ;;      Totals:         2       0       0       0       0       0       0
 10738 ;;Total ram usage:        2 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    3
 10741 ;; This function calls:
 10742 ;;		_PortAvailable
 10743 ;;		_PortRead
 10744 ;; This function is called by:
 10745 ;;		_ModbusPoll
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	text51
 10750  0029EE                     __ptext51:
 10751                           	opt stack 0
 10752  0029EE                     _ModbusGetRxBuffer:
 10753                           	opt stack 26
 10754                           
 10755                           ;incstack = 0
 10756  0029EE  FFFF               	dw	65535
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
 10760  0029F0  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 10761                           
 10762                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
 10763  0029F2  6A71               	clrf	__u8BufferSize,c
 10764                           
 10765                           ;ModbusRtu.c: 518: while (PortAvailable())
 10766  0029F4  D011               	goto	l4004
 10767  0029F6                     l3996:
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;ModbusRtu.c: 519: {
 10771                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
 10772  0029F6  EC58  F015         	call	_PortRead	;wreg free
 10773  0029FA  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 10774  0029FC  0E00               	movlw	low __au8Buffer
 10775  0029FE  2471               	addwf	__u8BufferSize,w,c
 10776  002A00  6ED9               	movwf	fsr2l,c
 10777  002A02  6ADA               	clrf	fsr2h,c
 10778  002A04  0E01               	movlw	high __au8Buffer
 10779  002A06  22DA               	addwfc	fsr2h,f,c
 10780  002A08  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;ModbusRtu.c: 522: _u8BufferSize++;
 10784  002A0C  2A71               	incf	__u8BufferSize,f,c
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
 10788  002A0E  0E8B               	movlw	139
 10789  002A10  6471               	cpfsgt	__u8BufferSize,c
 10790  002A12  D002               	goto	l4004
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
 10794  002A14  0E01               	movlw	1
 10795  002A16  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 10796  002A18                     l4004:
 10797  002A18  FFFF               	dw	65535	; assembler added errata NOP
 10798                           
 10799                           ; BSR set to: 0
 10800  002A1A  EC7E  F016         	call	_PortAvailable	;wreg free
 10801  002A1E  0900               	iorlw	0
 10802  002A20  E1EA               	bnz	l3996
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;ModbusRtu.c: 530: {
 10806                           ;ModbusRtu.c: 531: _u16errCnt++;
 10807  002A22  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 10808  002A24  E002               	bz	l4012
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
 10812  002A26  0EFD               	movlw	253
 10813  002A28  D001               	goto	l730
 10814  002A2A                     l4012:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;ModbusRtu.c: 533: }
 10818                           ;ModbusRtu.c: 534: return _u8BufferSize;
 10819  002A2A  5071               	movf	__u8BufferSize,w,c
 10820  002A2C                     l730:
 10821  002A2C  FFFF               	dw	65535	; assembler added errata NOP
 10822                           
 10823                           ; BSR set to: 0
 10824  002A2E  0012               	return		;funcret
 10825  002A30  FFFF               	dw	65535	; errata NOP
 10826  002A32                     __end_of_ModbusGetRxBuffer:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           indf1	equ	0xFE7
 10838                           postinc1	equ	0xFE6
 10839                           postdec1	equ	0xFE5
 10840                           fsr1h	equ	0xFE2
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           plusw2	equ	0xFDB
 10846                           fsr2h	equ	0xFDA
 10847                           fsr2l	equ	0xFD9
 10848                           status	equ	0xFD8
 10849                           
 10850 ;; *************** function _PortRead *****************
 10851 ;; Defined at:
 10852 ;;		line 57 in file "interrupts.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  ret             1    6[COMRAM] unsigned char 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10861 ;; Tracked objects:
 10862 ;;		On entry : F/0
 10863 ;;		On exit  : F/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10866 ;;      Params:         0       0       0       0       0       0       0
 10867 ;;      Locals:         1       0       0       0       0       0       0
 10868 ;;      Temps:          0       0       0       0       0       0       0
 10869 ;;      Totals:         1       0       0       0       0       0       0
 10870 ;;Total ram usage:        1 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    2
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_ModbusGetRxBuffer
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text52
 10881  002AB0                     __ptext52:
 10882                           	opt stack 0
 10883  002AB0                     _PortRead:
 10884                           	opt stack 26
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;incstack = 0
 10888  002AB0  FFFF               	dw	65535
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 10892  002AB2  9EF2               	bcf	intcon,7,c	;volatile
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;interrupts.c: 60: if(UartBufferLen > 0)
 10896  002AB4  51C8               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10897  002AB6  E012               	bz	l59
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;interrupts.c: 61: {
 10901                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 10902  002AB8  0E00               	movlw	low _UartRingBuffer
 10903  002ABA  25C9               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 10904  002ABC  6ED9               	movwf	fsr2l,c
 10905  002ABE  6ADA               	clrf	fsr2h,c
 10906  002AC0  0E02               	movlw	high _UartRingBuffer
 10907  002AC2  22DA               	addwfc	fsr2h,f,c
 10908  002AC4  50DF               	movf	indf2,w,c
 10909  002AC6  6E07               	movwf	PortRead@ret,c
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;interrupts.c: 64: UartBufferLen--;
 10913  002AC8  07C8               	decf	_UartBufferLen& (0+255),f,b	;volatile
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 10917  002ACA  29C9               	incf	_UartBufferTail& (0+255),w,b
 10918  002ACC  E102               	bnz	l3654
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;interrupts.c: 66: UartBufferTail = 0;
 10922  002ACE  6BC9               	clrf	_UartBufferTail& (0+255),b	;volatile
 10923  002AD0  D001               	goto	l3656
 10924  002AD2                     l3654:
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;interrupts.c: 67: else
 10928                           ;interrupts.c: 68: UartBufferTail++;
 10929  002AD2  2BC9               	incf	_UartBufferTail& (0+255),f,b	;volatile
 10930  002AD4                     l3656:
 10931  002AD4  FFFF               	dw	65535	; assembler added errata NOP
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 10935  002AD6  8EF2               	bsf	intcon,7,c	;volatile
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;interrupts.c: 70: return ret;
 10939  002AD8  5007               	movf	PortRead@ret,w,c
 10940  002ADA  D002               	goto	l62
 10941  002ADC                     l59:
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;interrupts.c: 71: }
 10945                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 10946  002ADC  8EF2               	bsf	intcon,7,c	;volatile
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;interrupts.c: 73: return 0;
 10950  002ADE  0E00               	movlw	0
 10951  002AE0                     l62:
 10952  002AE0  FFFF               	dw	65535	; assembler added errata NOP
 10953                           
 10954                           ; BSR set to: 0
 10955  002AE2  0012               	return		;funcret
 10956  002AE4  FFFF               	dw	65535	; errata NOP
 10957  002AE6                     __end_of_PortRead:
 10958                           	opt stack 0
 10959                           tblptru	equ	0xFF8
 10960                           tblptrh	equ	0xFF7
 10961                           tblptrl	equ	0xFF6
 10962                           tablat	equ	0xFF5
 10963                           prodh	equ	0xFF4
 10964                           prodl	equ	0xFF3
 10965                           intcon	equ	0xFF2
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           indf1	equ	0xFE7
 10969                           postinc1	equ	0xFE6
 10970                           postdec1	equ	0xFE5
 10971                           fsr1h	equ	0xFE2
 10972                           fsr1l	equ	0xFE1
 10973                           indf2	equ	0xFDF
 10974                           postinc2	equ	0xFDE
 10975                           postdec2	equ	0xFDD
 10976                           plusw2	equ	0xFDB
 10977                           fsr2h	equ	0xFDA
 10978                           fsr2l	equ	0xFD9
 10979                           status	equ	0xFD8
 10980                           
 10981 ;; *************** function _PortAvailable *****************
 10982 ;; Defined at:
 10983 ;;		line 52 in file "interrupts.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;		None
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;		None
 10988 ;; Return value:  Size  Location     Type
 10989 ;;                  1    wreg      unsigned char 
 10990 ;; Registers used:
 10991 ;;		wreg, status,2
 10992 ;; Tracked objects:
 10993 ;;		On entry : F/0
 10994 ;;		On exit  : F/0
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10997 ;;      Params:         0       0       0       0       0       0       0
 10998 ;;      Locals:         0       0       0       0       0       0       0
 10999 ;;      Temps:          0       0       0       0       0       0       0
 11000 ;;      Totals:         0       0       0       0       0       0       0
 11001 ;;Total ram usage:        0 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; Hardware stack levels required when called:    2
 11004 ;; This function calls:
 11005 ;;		Nothing
 11006 ;; This function is called by:
 11007 ;;		_ModbusPoll
 11008 ;;		_ModbusGetRxBuffer
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           	psect	text53
 11013  002CFC                     __ptext53:
 11014                           	opt stack 0
 11015  002CFC                     _PortAvailable:
 11016                           	opt stack 27
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;incstack = 0
 11020  002CFC  FFFF               	dw	65535
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;interrupts.c: 54: return UartBufferLen;
 11024  002CFE  51C8               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11025                           
 11026                           ; BSR set to: 0
 11027  002D00  0012               	return		;funcret
 11028  002D02  FFFF               	dw	65535	; errata NOP
 11029  002D04                     __end_of_PortAvailable:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           intcon	equ	0xFF2
 11038                           postinc0	equ	0xFEE
 11039                           wreg	equ	0xFE8
 11040                           indf1	equ	0xFE7
 11041                           postinc1	equ	0xFE6
 11042                           postdec1	equ	0xFE5
 11043                           fsr1h	equ	0xFE2
 11044                           fsr1l	equ	0xFE1
 11045                           indf2	equ	0xFDF
 11046                           postinc2	equ	0xFDE
 11047                           postdec2	equ	0xFDD
 11048                           plusw2	equ	0xFDB
 11049                           fsr2h	equ	0xFDA
 11050                           fsr2l	equ	0xFD9
 11051                           status	equ	0xFD8
 11052                           
 11053 ;; *************** function _ModbusBuildException *****************
 11054 ;; Defined at:
 11055 ;;		line 800 in file "ModbusRtu.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;  u8exception     1    wreg     unsigned char 
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;  u8exception     1    6[COMRAM] unsigned char 
 11060 ;;  u8func          1    7[COMRAM] unsigned char 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  1    wreg      void 
 11063 ;; Registers used:
 11064 ;;		wreg, status,2, status,0
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/1
 11067 ;;		On exit  : F/1
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11070 ;;      Params:         0       0       0       0       0       0       0
 11071 ;;      Locals:         2       0       0       0       0       0       0
 11072 ;;      Temps:          0       0       0       0       0       0       0
 11073 ;;      Totals:         2       0       0       0       0       0       0
 11074 ;;Total ram usage:        2 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; Hardware stack levels required when called:    2
 11077 ;; This function calls:
 11078 ;;		Nothing
 11079 ;; This function is called by:
 11080 ;;		_ModbusPoll
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           	psect	text54
 11085  002BF2                     __ptext54:
 11086                           	opt stack 0
 11087  002BF2                     _ModbusBuildException:
 11088                           	opt stack 27
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;incstack = 0
 11092  002BF2  FFFF               	dw	65535
 11093                           
 11094                           ;ModbusBuildException@u8exception stored from wreg
 11095  002BF4  6E07               	movwf	ModbusBuildException@u8exception,c
 11096                           
 11097                           ;ModbusRtu.c: 802: uint8_t u8func = _au8Buffer[ FUNC ];
 11098  002BF6  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 11099                           
 11100                           ;ModbusRtu.c: 804: _au8Buffer[ ID ] = _u8id;
 11101  002BFA  C0D1  F100         	movff	__u8id,__au8Buffer
 11102                           
 11103                           ;ModbusRtu.c: 805: _au8Buffer[ FUNC ] = u8func + 0x80;
 11104  002BFE  5008               	movf	ModbusBuildException@u8func,w,c
 11105  002C00  0F80               	addlw	128
 11106  002C02  0101               	movlb	1	; () banked
 11107  002C04  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 11108                           
 11109                           ; BSR set to: 1
 11110                           ;ModbusRtu.c: 806: _au8Buffer[ 2 ] = u8exception;
 11111  002C06  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 11112                           
 11113                           ; BSR set to: 1
 11114                           ;ModbusRtu.c: 807: _u8BufferSize = EXCEPTION_SIZE;
 11115  002C0A  0E03               	movlw	3
 11116  002C0C  6E71               	movwf	__u8BufferSize,c
 11117                           
 11118                           ; BSR set to: 1
 11119  002C0E  0C03               	retlw	3	;funcret
 11120  002C10  FFFF               	dw	65535	; errata NOP
 11121  002C12                     __end_of_ModbusBuildException:
 11122                           	opt stack 0
 11123                           tblptru	equ	0xFF8
 11124                           tblptrh	equ	0xFF7
 11125                           tblptrl	equ	0xFF6
 11126                           tablat	equ	0xFF5
 11127                           prodh	equ	0xFF4
 11128                           prodl	equ	0xFF3
 11129                           intcon	equ	0xFF2
 11130                           postinc0	equ	0xFEE
 11131                           wreg	equ	0xFE8
 11132                           indf1	equ	0xFE7
 11133                           postinc1	equ	0xFE6
 11134                           postdec1	equ	0xFE5
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           plusw2	equ	0xFDB
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _InitApp *****************
 11146 ;; Defined at:
 11147 ;;		line 66 in file "user.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  i               1    6[COMRAM] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11161 ;;      Params:         0       0       0       0       0       0       0
 11162 ;;      Locals:         1       0       0       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0
 11164 ;;      Totals:         1       0       0       0       0       0       0
 11165 ;;Total ram usage:        1 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    3
 11168 ;; This function calls:
 11169 ;;		_InitUartBuffer
 11170 ;;		_PortBegin
 11171 ;; This function is called by:
 11172 ;;		_main
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text55
 11177  00248C                     __ptext55:
 11178                           	opt stack 0
 11179  00248C                     _InitApp:
 11180                           	opt stack 27
 11181                           
 11182                           ; BSR set to: 1
 11183                           ;incstack = 0
 11184  00248C  FFFF               	dw	65535
 11185                           
 11186                           ;user.c: 77: INTCONbits.PEIE = 1;
 11187  00248E  8CF2               	bsf	intcon,6,c	;volatile
 11188                           
 11189                           ;user.c: 78: (INTCONbits.GIE = 1);
 11190  002490  8EF2               	bsf	intcon,7,c	;volatile
 11191                           
 11192                           ;user.c: 79: RCONbits.IPEN = 1;
 11193  002492  8ED0               	bsf	4048,7,c	;volatile
 11194                           
 11195                           ;user.c: 84: T1CONbits.RD16 = 1;
 11196  002494  8ECD               	bsf	4045,7,c	;volatile
 11197                           
 11198                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 11199  002496  94CD               	bcf	4045,2,c	;volatile
 11200                           
 11201                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 11202  002498  92CD               	bcf	4045,1,c	;volatile
 11203                           
 11204                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 11205  00249A  0ECF               	movlw	-49
 11206  00249C  16CD               	andwf	4045,f,c	;volatile
 11207                           
 11208                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 11209  00249E  809D               	bsf	3997,0,c	;volatile
 11210                           
 11211                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 11212  0024A0  809F               	bsf	3999,0,c	;volatile
 11213                           
 11214                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 11215  0024A2  0EF6               	movlw	246
 11216  0024A4  6ECF               	movwf	4047,c	;volatile
 11217  0024A6  0E3C               	movlw	60
 11218  0024A8  6ECE               	movwf	4046,c	;volatile
 11219                           
 11220                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 11221  0024AA  909E               	bcf	3998,0,c	;volatile
 11222                           
 11223                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 11224  0024AC  80CD               	bsf	4045,0,c	;volatile
 11225                           
 11226                           ;user.c: 102: T0CONbits.T08BIT = 0;
 11227  0024AE  9CD5               	bcf	4053,6,c	;volatile
 11228                           
 11229                           ;user.c: 103: T0CONbits.T0CS = 0;
 11230  0024B0  9AD5               	bcf	4053,5,c	;volatile
 11231                           
 11232                           ;user.c: 105: T0CONbits.PSA = 0;
 11233  0024B2  96D5               	bcf	4053,3,c	;volatile
 11234                           
 11235                           ;user.c: 116: T0CONbits.T0PS = 7;
 11236  0024B4  0E07               	movlw	7
 11237  0024B6  12D5               	iorwf	4053,f,c	;volatile
 11238                           
 11239                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 11240  0024B8  8AF2               	bsf	intcon,5,c	;volatile
 11241                           
 11242                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 11243  0024BA  84F1               	bsf	intcon2,2,c	;volatile
 11244                           
 11245                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 11246  0024BC  0E1B               	movlw	27
 11247  0024BE  6ED7               	movwf	4055,c	;volatile
 11248  0024C0  0E1F               	movlw	31
 11249  0024C2  6ED6               	movwf	4054,c	;volatile
 11250                           
 11251                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 11252  0024C4  94F2               	bcf	intcon,2,c	;volatile
 11253                           
 11254                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 11255  0024C6  8ED5               	bsf	4053,7,c	;volatile
 11256                           
 11257                           ;user.c: 132: InitUartBuffer();
 11258  0024C8  EC73  F016         	call	_InitUartBuffer	;wreg free
 11259                           
 11260                           ;user.c: 134: PortBegin();
 11261  0024CC  EC35  F016         	call	_PortBegin	;wreg free
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;user.c: 135: PIE1bits.RCIE = 1;
 11265  0024D0  8A9D               	bsf	3997,5,c	;volatile
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;user.c: 137: IPR1bits.RCIP = 0;
 11269  0024D2  9A9F               	bcf	3999,5,c	;volatile
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 11273  0024D4  6A07               	clrf	InitApp@i,c
 11274  0024D6                     l4774:
 11275  0024D6  FFFF               	dw	65535	; assembler added errata NOP
 11276                           
 11277                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 11278  0024D8  5007               	movf	InitApp@i,w,c
 11279  0024DA  0D02               	mullw	2
 11280  0024DC  0EAA               	movlw	low __MODBUSInputRegs
 11281  0024DE  24F3               	addwf	prodl,w,c
 11282  0024E0  6ED9               	movwf	fsr2l,c
 11283  0024E2  0E01               	movlw	high __MODBUSInputRegs
 11284  0024E4  20F4               	addwfc	prodh,w,c
 11285  0024E6  6EDA               	movwf	fsr2h,c
 11286  0024E8  6ADE               	clrf	postinc2,c
 11287  0024EA  6ADD               	clrf	postdec2,c
 11288  0024EC  2A07               	incf	InitApp@i,f,c
 11289  0024EE  0E0E               	movlw	14
 11290  0024F0  6407               	cpfsgt	InitApp@i,c
 11291  0024F2  D7F1               	goto	l4774
 11292                           
 11293                           ;user.c: 148: TRISB = 0;
 11294  0024F4  6A93               	clrf	3987,c	;volatile
 11295                           
 11296                           ;user.c: 151: LATAbits.LATA0 = 0;
 11297  0024F6  9089               	bcf	3977,0,c	;volatile
 11298                           
 11299                           ;user.c: 152: LATAbits.LATA1 = 0;
 11300  0024F8  9289               	bcf	3977,1,c	;volatile
 11301                           
 11302                           ;user.c: 153: LATAbits.LATA2 = 0;
 11303  0024FA  9489               	bcf	3977,2,c	;volatile
 11304                           
 11305                           ;user.c: 154: LATAbits.LATA3 = 0;
 11306  0024FC  9689               	bcf	3977,3,c	;volatile
 11307                           
 11308                           ;user.c: 155: TRISAbits.RA0 = 0;
 11309  0024FE  9092               	bcf	3986,0,c	;volatile
 11310                           
 11311                           ;user.c: 156: TRISAbits.RA1 = 0;
 11312  002500  9292               	bcf	3986,1,c	;volatile
 11313                           
 11314                           ;user.c: 157: TRISAbits.RA2 = 0;
 11315  002502  9492               	bcf	3986,2,c	;volatile
 11316                           
 11317                           ;user.c: 158: TRISAbits.RA3 = 0;
 11318  002504  9692               	bcf	3986,3,c	;volatile
 11319                           
 11320                           ;user.c: 160: TRISCbits.RC3 = 1;
 11321  002506  8694               	bsf	3988,3,c	;volatile
 11322                           
 11323                           ;user.c: 161: TRISCbits.RC1 = 1;
 11324  002508  8294               	bsf	3988,1,c	;volatile
 11325                           
 11326                           ;user.c: 162: TRISCbits.RC0 = 0;
 11327  00250A  9094               	bcf	3988,0,c	;volatile
 11328                           
 11329                           ;user.c: 164: LATCbits.LATC2 = 0;
 11330  00250C  948B               	bcf	3979,2,c	;volatile
 11331  00250E  0012               	return		;funcret
 11332  002510  FFFF               	dw	65535	; errata NOP
 11333  002512                     __end_of_InitApp:
 11334                           	opt stack 0
 11335                           tblptru	equ	0xFF8
 11336                           tblptrh	equ	0xFF7
 11337                           tblptrl	equ	0xFF6
 11338                           tablat	equ	0xFF5
 11339                           prodh	equ	0xFF4
 11340                           prodl	equ	0xFF3
 11341                           intcon	equ	0xFF2
 11342                           intcon2	equ	0xFF1
 11343                           postinc0	equ	0xFEE
 11344                           wreg	equ	0xFE8
 11345                           indf1	equ	0xFE7
 11346                           postinc1	equ	0xFE6
 11347                           postdec1	equ	0xFE5
 11348                           fsr1h	equ	0xFE2
 11349                           fsr1l	equ	0xFE1
 11350                           indf2	equ	0xFDF
 11351                           postinc2	equ	0xFDE
 11352                           postdec2	equ	0xFDD
 11353                           plusw2	equ	0xFDB
 11354                           fsr2h	equ	0xFDA
 11355                           fsr2l	equ	0xFD9
 11356                           status	equ	0xFD8
 11357                           
 11358 ;; *************** function _PortBegin *****************
 11359 ;; Defined at:
 11360 ;;		line 48 in file "user.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;		None
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		wreg, status,2
 11369 ;; Tracked objects:
 11370 ;;		On entry : F/0
 11371 ;;		On exit  : F/0
 11372 ;;		Unchanged: F/0
 11373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11374 ;;      Params:         0       0       0       0       0       0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0
 11377 ;;      Totals:         0       0       0       0       0       0       0
 11378 ;;Total ram usage:        0 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    2
 11381 ;; This function calls:
 11382 ;;		Nothing
 11383 ;; This function is called by:
 11384 ;;		_InitApp
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text56
 11389  002C6A                     __ptext56:
 11390                           	opt stack 0
 11391  002C6A                     _PortBegin:
 11392                           	opt stack 27
 11393                           
 11394                           ;incstack = 0
 11395  002C6A  FFFF               	dw	65535
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;user.c: 50: TXSTA = 0;
 11399  002C6C  6AAC               	clrf	4012,c	;volatile
 11400                           
 11401                           ;user.c: 51: TXSTAbits.TXEN = 1;
 11402  002C6E  8AAC               	bsf	4012,5,c	;volatile
 11403                           
 11404                           ;user.c: 52: TXSTAbits.BRGH = 1;
 11405  002C70  84AC               	bsf	4012,2,c	;volatile
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 11409  002C72  0E40               	movlw	64
 11410  002C74  6EAF               	movwf	4015,c	;volatile
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;user.c: 55: RCSTA = 0;
 11414  002C76  6AAB               	clrf	4011,c	;volatile
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;user.c: 56: RCSTAbits.SPEN = 1;
 11418  002C78  8EAB               	bsf	4011,7,c	;volatile
 11419                           
 11420                           ; BSR set to: 0
 11421                           ;user.c: 57: RCSTAbits.CREN = 1;
 11422  002C7A  88AB               	bsf	4011,4,c	;volatile
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;user.c: 59: TRISCbits.RC5 = 0;
 11426  002C7C  9A94               	bcf	3988,5,c	;volatile
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;user.c: 60: LATCbits.LATC5 = 0;
 11430  002C7E  9A8B               	bcf	3979,5,c	;volatile
 11431                           
 11432                           ; BSR set to: 0
 11433  002C80  0012               	return		;funcret
 11434  002C82  FFFF               	dw	65535	; errata NOP
 11435  002C84                     __end_of_PortBegin:
 11436                           	opt stack 0
 11437                           tblptru	equ	0xFF8
 11438                           tblptrh	equ	0xFF7
 11439                           tblptrl	equ	0xFF6
 11440                           tablat	equ	0xFF5
 11441                           prodh	equ	0xFF4
 11442                           prodl	equ	0xFF3
 11443                           intcon	equ	0xFF2
 11444                           intcon2	equ	0xFF1
 11445                           postinc0	equ	0xFEE
 11446                           wreg	equ	0xFE8
 11447                           indf1	equ	0xFE7
 11448                           postinc1	equ	0xFE6
 11449                           postdec1	equ	0xFE5
 11450                           fsr1h	equ	0xFE2
 11451                           fsr1l	equ	0xFE1
 11452                           indf2	equ	0xFDF
 11453                           postinc2	equ	0xFDE
 11454                           postdec2	equ	0xFDD
 11455                           plusw2	equ	0xFDB
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function _InitUartBuffer *****************
 11461 ;; Defined at:
 11462 ;;		line 43 in file "interrupts.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;		None
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;		None
 11467 ;; Return value:  Size  Location     Type
 11468 ;;                  1    wreg      void 
 11469 ;; Registers used:
 11470 ;;		None
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : F/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11476 ;;      Params:         0       0       0       0       0       0       0
 11477 ;;      Locals:         0       0       0       0       0       0       0
 11478 ;;      Temps:          0       0       0       0       0       0       0
 11479 ;;      Totals:         0       0       0       0       0       0       0
 11480 ;;Total ram usage:        0 bytes
 11481 ;; Hardware stack levels used:    1
 11482 ;; Hardware stack levels required when called:    2
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_InitApp
 11487 ;; This function uses a non-reentrant model
 11488 ;;
 11489                           
 11490                           	psect	text57
 11491  002CE6                     __ptext57:
 11492                           	opt stack 0
 11493  002CE6                     _InitUartBuffer:
 11494                           	opt stack 27
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;incstack = 0
 11498  002CE6  FFFF               	dw	65535
 11499                           
 11500                           ;interrupts.c: 45: UartBufferHead = 0;
 11501  002CE8  0100               	movlb	0	; () banked
 11502  002CEA  6BC7               	clrf	_UartBufferHead& (0+255),b
 11503                           
 11504                           ;interrupts.c: 46: UartBufferTail = 0;
 11505  002CEC  6BC9               	clrf	_UartBufferTail& (0+255),b	;volatile
 11506                           
 11507                           ;interrupts.c: 47: UartBufferLen = 0;
 11508  002CEE  6BC8               	clrf	_UartBufferLen& (0+255),b	;volatile
 11509                           
 11510                           ; BSR set to: 0
 11511  002CF0  0012               	return		;funcret
 11512  002CF2  FFFF               	dw	65535	; errata NOP
 11513  002CF4                     __end_of_InitUartBuffer:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           postinc0	equ	0xFEE
 11524                           wreg	equ	0xFE8
 11525                           indf1	equ	0xFE7
 11526                           postinc1	equ	0xFE6
 11527                           postdec1	equ	0xFE5
 11528                           fsr1h	equ	0xFE2
 11529                           fsr1l	equ	0xFE1
 11530                           indf2	equ	0xFDF
 11531                           postinc2	equ	0xFDE
 11532                           postdec2	equ	0xFDD
 11533                           plusw2	equ	0xFDB
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _ConfigureOscillator *****************
 11539 ;; Defined at:
 11540 ;;		line 50 in file "system.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;		None
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;		None
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      void 
 11547 ;; Registers used:
 11548 ;;		None
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11554 ;;      Params:         0       0       0       0       0       0       0
 11555 ;;      Locals:         0       0       0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0
 11557 ;;      Totals:         0       0       0       0       0       0       0
 11558 ;;Total ram usage:        0 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    2
 11561 ;; This function calls:
 11562 ;;		Nothing
 11563 ;; This function is called by:
 11564 ;;		_main
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           	psect	text58
 11569  002D04                     __ptext58:
 11570                           	opt stack 0
 11571  002D04                     _ConfigureOscillator:
 11572                           	opt stack 28
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;incstack = 0
 11576  002D04  FFFF               	dw	65535
 11577  002D06  0012               	return		;funcret
 11578  002D08  FFFF               	dw	65535	; errata NOP
 11579  002D0A                     __end_of_ConfigureOscillator:
 11580                           	opt stack 0
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           intcon2	equ	0xFF1
 11589                           postinc0	equ	0xFEE
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postinc1	equ	0xFE6
 11593                           postdec1	equ	0xFE5
 11594                           fsr1h	equ	0xFE2
 11595                           fsr1l	equ	0xFE1
 11596                           indf2	equ	0xFDF
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           plusw2	equ	0xFDB
 11600                           fsr2h	equ	0xFDA
 11601                           fsr2l	equ	0xFD9
 11602                           status	equ	0xFD8
 11603                           
 11604 ;; *************** function _AddSecond *****************
 11605 ;; Defined at:
 11606 ;;		line 179 in file "user.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;		None
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;		None
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  1    wreg      void 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : F/0
 11617 ;;		On exit  : F/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11620 ;;      Params:         0       0       0       0       0       0       0
 11621 ;;      Locals:         0       0       0       0       0       0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0
 11623 ;;      Totals:         0       0       0       0       0       0       0
 11624 ;;Total ram usage:        0 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:    2
 11627 ;; This function calls:
 11628 ;;		Nothing
 11629 ;; This function is called by:
 11630 ;;		_main
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           	psect	text59
 11635  002CD6                     __ptext59:
 11636                           	opt stack 0
 11637  002CD6                     _AddSecond:
 11638                           	opt stack 28
 11639                           
 11640                           ;incstack = 0
 11641  002CD6  FFFF               	dw	65535
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;user.c: 181: currentTime++;
 11645  002CD8  2BDB               	incf	_currentTime& (0+255),f,b
 11646  002CDA  0E00               	movlw	0
 11647  002CDC  23DC               	addwfc	(_currentTime+1)& (0+255),f,b
 11648  002CDE  23DD               	addwfc	(_currentTime+2)& (0+255),f,b
 11649  002CE0  23DE               	addwfc	(_currentTime+3)& (0+255),f,b
 11650                           
 11651                           ; BSR set to: 0
 11652  002CE2  0C00               	retlw	0	;funcret
 11653  002CE4  FFFF               	dw	65535	; errata NOP
 11654  002CE6                     __end_of_AddSecond:
 11655                           	opt stack 0
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           intcon2	equ	0xFF1
 11664                           postinc0	equ	0xFEE
 11665                           wreg	equ	0xFE8
 11666                           indf1	equ	0xFE7
 11667                           postinc1	equ	0xFE6
 11668                           postdec1	equ	0xFE5
 11669                           fsr1h	equ	0xFE2
 11670                           fsr1l	equ	0xFE1
 11671                           indf2	equ	0xFDF
 11672                           postinc2	equ	0xFDE
 11673                           postdec2	equ	0xFDD
 11674                           plusw2	equ	0xFDB
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679 ;; *************** function _low_isr *****************
 11680 ;; Defined at:
 11681 ;;		line 172 in file "interrupts.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  c               1    5[COMRAM] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  1    wreg      void 
 11688 ;; Registers used:
 11689 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11695 ;;      Params:         0       0       0       0       0       0       0
 11696 ;;      Locals:         1       0       0       0       0       0       0
 11697 ;;      Temps:          5       0       0       0       0       0       0
 11698 ;;      Totals:         6       0       0       0       0       0       0
 11699 ;;Total ram usage:        6 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    1
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		Interrupt level 1
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	intcodelo
 11710  000018                     __pintcodelo:
 11711                           	opt stack 0
 11712  000018                     _low_isr:
 11713                           	opt stack 0
 11714  000018  FFFF               	dw	65535	; assembler added errata NOP
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;incstack = 0
 11718  00001A  8077               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 11719  00001C  FFFF               	dw	65535	; errata NOP
 11720  00001E  CFD8 F001          	movff	status,??_low_isr
 11721  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 11722  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 11723  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 11724  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 11725                           
 11726                           ;interrupts.c: 186: if (PIR1bits.RCIF && PIE1bits.RCIE)
 11727  000032  BA9E               	btfsc	3998,5,c	;volatile
 11728  000034  AA9D               	btfss	3997,5,c	;volatile
 11729  000036  D016               	goto	i1l90
 11730  000038                     i1l91:
 11731  000038  FFFF               	dw	65535	; assembler added errata NOP
 11732  00003A  AA9E               	btfss	3998,5,c	;volatile
 11733  00003C  D7FD               	goto	i1l91
 11734                           
 11735                           ;interrupts.c: 200: uint8_t c = RCREG;
 11736  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 11737                           
 11738                           ;interrupts.c: 203: UartRingBuffer[UartBufferHead] = c;
 11739  000042  0E00               	movlw	low _UartRingBuffer
 11740  000044  0100               	movlb	0	; () banked
 11741  000046  25C7               	addwf	_UartBufferHead& (0+255),w,b
 11742  000048  6ED9               	movwf	fsr2l,c
 11743  00004A  6ADA               	clrf	fsr2h,c
 11744  00004C  0E02               	movlw	high _UartRingBuffer
 11745  00004E  22DA               	addwfc	fsr2h,f,c
 11746  000050  C006  FFDF         	movff	low_isr@c,indf2
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;interrupts.c: 204: UartBufferLen++;
 11750  000054  2BC8               	incf	_UartBufferLen& (0+255),f,b	;volatile
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;interrupts.c: 205: if(UartBufferHead == 256u - 1)
 11754  000056  29C7               	incf	_UartBufferHead& (0+255),w,b
 11755  000058  E102               	bnz	i1l5082
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;interrupts.c: 206: UartBufferHead = 0;
 11759  00005A  6BC7               	clrf	_UartBufferHead& (0+255),b
 11760  00005C  D001               	goto	i1l5084
 11761  00005E                     i1l5082:
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;interrupts.c: 207: else
 11765                           ;interrupts.c: 208: UartBufferHead++;
 11766  00005E  2BC7               	incf	_UartBufferHead& (0+255),f,b
 11767  000060                     i1l5084:
 11768  000060  FFFF               	dw	65535	; assembler added errata NOP
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;interrupts.c: 211: PIR1bits.RCIF = 0;
 11772  000062  9A9E               	bcf	3998,5,c	;volatile
 11773  000064                     i1l90:
 11774  000064  FFFF               	dw	65535	; assembler added errata NOP
 11775  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 11776  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 11777  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 11778  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 11779  000076  C001  FFD8         	movff	??_low_isr,status
 11780  00007A  9077               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 11781  00007C  0010               	retfie	
 11782  00007E  FFFF               	dw	65535	; errata NOP
 11783  000080                     __end_of_low_isr:
 11784                           	opt stack 0
 11785                           tblptru	equ	0xFF8
 11786                           tblptrh	equ	0xFF7
 11787                           tblptrl	equ	0xFF6
 11788                           tablat	equ	0xFF5
 11789                           prodh	equ	0xFF4
 11790                           prodl	equ	0xFF3
 11791                           intcon	equ	0xFF2
 11792                           intcon2	equ	0xFF1
 11793                           postinc0	equ	0xFEE
 11794                           wreg	equ	0xFE8
 11795                           indf1	equ	0xFE7
 11796                           postinc1	equ	0xFE6
 11797                           postdec1	equ	0xFE5
 11798                           fsr1h	equ	0xFE2
 11799                           fsr1l	equ	0xFE1
 11800                           bsr	equ	0xFE0
 11801                           indf2	equ	0xFDF
 11802                           postinc2	equ	0xFDE
 11803                           postdec2	equ	0xFDD
 11804                           plusw2	equ	0xFDB
 11805                           fsr2h	equ	0xFDA
 11806                           fsr2l	equ	0xFD9
 11807                           status	equ	0xFD8
 11808                           
 11809 ;; *************** function _high_isr *****************
 11810 ;; Defined at:
 11811 ;;		line 113 in file "interrupts.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;		None
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  1    wreg      void 
 11818 ;; Registers used:
 11819 ;;		wreg, status,2, status,0
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11825 ;;      Params:         0       0       0       0       0       0       0
 11826 ;;      Locals:         0       0       0       0       0       0       0
 11827 ;;      Temps:          0       0       0       0       0       0       0
 11828 ;;      Totals:         0       0       0       0       0       0       0
 11829 ;;Total ram usage:        0 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; This function calls:
 11832 ;;		Nothing
 11833 ;; This function is called by:
 11834 ;;		Interrupt level 2
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	intcode
 11839  000008                     __pintcode:
 11840                           	opt stack 0
 11841  000008                     _high_isr:
 11842                           	opt stack 0
 11843  000008  FFFF               	dw	65535	; assembler added errata NOP
 11844                           
 11845                           ;incstack = 0
 11846  00000A  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11847  00000C  FFFF               	dw	65535	; errata NOP
 11848  00000E  EFC5  F013         	goto	int_func
 11849                           tblptru	equ	0xFF8
 11850                           tblptrh	equ	0xFF7
 11851                           tblptrl	equ	0xFF6
 11852                           tablat	equ	0xFF5
 11853                           prodh	equ	0xFF4
 11854                           prodl	equ	0xFF3
 11855                           intcon	equ	0xFF2
 11856                           intcon2	equ	0xFF1
 11857                           postinc0	equ	0xFEE
 11858                           wreg	equ	0xFE8
 11859                           indf1	equ	0xFE7
 11860                           postinc1	equ	0xFE6
 11861                           postdec1	equ	0xFE5
 11862                           fsr1h	equ	0xFE2
 11863                           fsr1l	equ	0xFE1
 11864                           bsr	equ	0xFE0
 11865                           indf2	equ	0xFDF
 11866                           postinc2	equ	0xFDE
 11867                           postdec2	equ	0xFDD
 11868                           plusw2	equ	0xFDB
 11869                           fsr2h	equ	0xFDA
 11870                           fsr2l	equ	0xFD9
 11871                           status	equ	0xFD8
 11872                           
 11873                           	psect	intcode_body
 11874  00278A                     __pintcode_body:
 11875                           	opt stack 22
 11876  00278A                     int_func:
 11877                           	opt stack 22
 11878  00278A  FFFF               	dw	65535	; errata NOP
 11879                           
 11880                           ;interrupts.c: 134: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 11881  00278C  B09E               	btfsc	3998,0,c	;volatile
 11882  00278E  A09D               	btfss	3997,0,c	;volatile
 11883  002790  D00C               	goto	i2l77
 11884                           
 11885                           ;interrupts.c: 135: {
 11886                           ;interrupts.c: 136: PIR1bits.TMR1IF = 0;
 11887  002792  909E               	bcf	3998,0,c	;volatile
 11888                           
 11889                           ;interrupts.c: 137: millisecondsFromStart++;
 11890  002794  0100               	movlb	0	; () banked
 11891  002796  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 11892  002798  0E00               	movlw	0
 11893  00279A  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 11894  00279C  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 11895  00279E  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;interrupts.c: 138: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 11899  0027A0  0EF6               	movlw	246
 11900  0027A2  6ECF               	movwf	4047,c	;volatile
 11901                           
 11902                           ; BSR set to: 0
 11903  0027A4  0E3C               	movlw	60
 11904  0027A6  6ECE               	movwf	4046,c	;volatile
 11905  0027A8  D018               	goto	i2l78
 11906  0027AA                     i2l77:
 11907  0027AA  FFFF               	dw	65535	; assembler added errata NOP
 11908                           
 11909                           ;interrupts.c: 140: }
 11910                           ;interrupts.c: 142: if(INTCONbits.TMR0IF)
 11911  0027AC  A4F2               	btfss	intcon,2,c	;volatile
 11912  0027AE  D015               	goto	i2l78
 11913                           
 11914                           ;interrupts.c: 143: {
 11915                           ;interrupts.c: 144: INTCONbits.TMR0IF = 0;
 11916  0027B0  94F2               	bcf	intcon,2,c	;volatile
 11917                           
 11918                           ;interrupts.c: 145: _6sCounter++;
 11919  0027B2  0100               	movlb	0	; () banked
 11920  0027B4  2BCA               	incf	__6sCounter& (0+255),f,b	;volatile
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;interrupts.c: 146: if(_6sCounter == 10)
 11924  0027B6  0E0A               	movlw	10
 11925  0027B8  19CA               	xorwf	__6sCounter& (0+255),w,b	;volatile
 11926  0027BA  E10B               	bnz	i2l5062
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;interrupts.c: 147: {
 11930                           ;interrupts.c: 148: _6sCounter = 0;
 11931  0027BC  6BCA               	clrf	__6sCounter& (0+255),b	;volatile
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;interrupts.c: 149: globalMinutes++;
 11935  0027BE  2BDA               	incf	_globalMinutes& (0+255),f,b	;volatile
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;interrupts.c: 150: if(globalMinutes == 60)
 11939  0027C0  0E3C               	movlw	60
 11940  0027C2  19DA               	xorwf	_globalMinutes& (0+255),w,b	;volatile
 11941  0027C4  E106               	bnz	i2l5062
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;interrupts.c: 151: {
 11945                           ;interrupts.c: 152: globalMinutes = 0;
 11946  0027C6  6BDA               	clrf	_globalMinutes& (0+255),b	;volatile
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;interrupts.c: 153: globalHours++;
 11950  0027C8  2A76               	incf	_globalHours,f,c	;volatile
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;interrupts.c: 154: if(globalHours == 24)
 11954  0027CA  0E18               	movlw	24
 11955  0027CC  1876               	xorwf	_globalHours,w,c	;volatile
 11956  0027CE  E101               	bnz	i2l5062
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;interrupts.c: 155: {
 11960                           ;interrupts.c: 156: globalHours = 0;
 11961  0027D0  6A76               	clrf	_globalHours,c	;volatile
 11962  0027D2                     i2l5062:
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;interrupts.c: 157: }
 11966                           ;interrupts.c: 158: }
 11967                           ;interrupts.c: 159: }
 11968                           ;interrupts.c: 160: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 11969  0027D2  0E1B               	movlw	27
 11970  0027D4  6ED7               	movwf	4055,c	;volatile
 11971  0027D6  0E1F               	movlw	31
 11972  0027D8  6ED6               	movwf	4054,c	;volatile
 11973  0027DA                     i2l78:
 11974  0027DA  FFFF               	dw	65535	; assembler added errata NOP
 11975  0027DC  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11976  0027DE  0011               	retfie		f
 11977  0027E0  FFFF               	dw	65535	; errata NOP
 11978  0027E2                     __end_of_high_isr:
 11979                           	opt stack 0
 11980                           tblptru	equ	0xFF8
 11981                           tblptrh	equ	0xFF7
 11982                           tblptrl	equ	0xFF6
 11983                           tablat	equ	0xFF5
 11984                           prodh	equ	0xFF4
 11985                           prodl	equ	0xFF3
 11986                           intcon	equ	0xFF2
 11987                           intcon2	equ	0xFF1
 11988                           postinc0	equ	0xFEE
 11989                           wreg	equ	0xFE8
 11990                           indf1	equ	0xFE7
 11991                           postinc1	equ	0xFE6
 11992                           postdec1	equ	0xFE5
 11993                           fsr1h	equ	0xFE2
 11994                           fsr1l	equ	0xFE1
 11995                           bsr	equ	0xFE0
 11996                           indf2	equ	0xFDF
 11997                           postinc2	equ	0xFDE
 11998                           postdec2	equ	0xFDD
 11999                           plusw2	equ	0xFDB
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           tblptru	equ	0xFF8
 12004                           tblptrh	equ	0xFF7
 12005                           tblptrl	equ	0xFF6
 12006                           tablat	equ	0xFF5
 12007                           prodh	equ	0xFF4
 12008                           prodl	equ	0xFF3
 12009                           intcon	equ	0xFF2
 12010                           intcon2	equ	0xFF1
 12011                           postinc0	equ	0xFEE
 12012                           wreg	equ	0xFE8
 12013                           indf1	equ	0xFE7
 12014                           postinc1	equ	0xFE6
 12015                           postdec1	equ	0xFE5
 12016                           fsr1h	equ	0xFE2
 12017                           fsr1l	equ	0xFE1
 12018                           bsr	equ	0xFE0
 12019                           indf2	equ	0xFDF
 12020                           postinc2	equ	0xFDE
 12021                           postdec2	equ	0xFDD
 12022                           plusw2	equ	0xFDB
 12023                           fsr2h	equ	0xFDA
 12024                           fsr2l	equ	0xFD9
 12025                           status	equ	0xFD8
 12026                           
 12027                           	psect	rparam
 12028  0000                     tblptru	equ	0xFF8
 12029                           tblptrh	equ	0xFF7
 12030                           tblptrl	equ	0xFF6
 12031                           tablat	equ	0xFF5
 12032                           prodh	equ	0xFF4
 12033                           prodl	equ	0xFF3
 12034                           intcon	equ	0xFF2
 12035                           intcon2	equ	0xFF1
 12036                           postinc0	equ	0xFEE
 12037                           wreg	equ	0xFE8
 12038                           indf1	equ	0xFE7
 12039                           postinc1	equ	0xFE6
 12040                           postdec1	equ	0xFE5
 12041                           fsr1h	equ	0xFE2
 12042                           fsr1l	equ	0xFE1
 12043                           bsr	equ	0xFE0
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           plusw2	equ	0xFDB
 12048                           fsr2h	equ	0xFDA
 12049                           fsr2l	equ	0xFD9
 12050                           status	equ	0xFD8
 12051                           
 12052                           	psect	temp
 12053  000077                     btemp:
 12054                           	opt stack 0
 12055  000077                     	ds	1
 12056  0000                     int$flags	set	btemp
 12057                           tblptru	equ	0xFF8
 12058                           tblptrh	equ	0xFF7
 12059                           tblptrl	equ	0xFF6
 12060                           tablat	equ	0xFF5
 12061                           prodh	equ	0xFF4
 12062                           prodl	equ	0xFF3
 12063                           intcon	equ	0xFF2
 12064                           intcon2	equ	0xFF1
 12065                           postinc0	equ	0xFEE
 12066                           wreg	equ	0xFE8
 12067                           indf1	equ	0xFE7
 12068                           postinc1	equ	0xFE6
 12069                           postdec1	equ	0xFE5
 12070                           fsr1h	equ	0xFE2
 12071                           fsr1l	equ	0xFE1
 12072                           bsr	equ	0xFE0
 12073                           indf2	equ	0xFDF
 12074                           postinc2	equ	0xFDE
 12075                           postdec2	equ	0xFDD
 12076                           plusw2	equ	0xFDB
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        7
    BSS         559
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     118
    BANK0           128     23     125
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_LightLed
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   40334
                                            105 COMRAM     5     5      0
                                              8 BANK0     15    15      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                      _SetBuzzerDuty
                  _SoundPlayNextStep
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             14    14      0   15120
                                            101 COMRAM     4     4      0
                                              0 BANK0      8     8      0
                _CommandSetStatusLed
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                          _PlaySound
                      _SetBuzzerDuty
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    6372
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    6252
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     555
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1619
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                      _SetBuzzerDuty
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CommandSetStatusLed                                  3     3      0    2146
                                             27 COMRAM     3     3      0
                     _LightStatusLed
                          _PlaySound
 ---------------------------------------------------------------------------------
 (2) _PlaySound                                            7     6      1     874
                                             20 COMRAM     7     6      1
                            _GetTime
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (3) _SoundPlayNextStep                                    6     6      0     469
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (4) _StopPlaying                                          2     2      0       0
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SetBuzzerDuty                                        4     2      2     370
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2520
                                             14 COMRAM     5     5      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3765
                                             14 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     593
                                              8 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (5) _getHourMin                                           2     1      1     392
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2452
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (4) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   14229
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     608
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     852
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     833
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2820
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1189
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     871
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     707
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1171
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1142
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1291
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     574
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SetBuzzerDuty
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
   _SetBuzzerDuty
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _getHourMin
   _io_poll
     _CommandSetStatusLed
       _LightStatusLed
       _PlaySound
         _GetTime
         _SoundPlayNextStep
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SetBuzzerDuty
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SetBuzzerDuty
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getHourMin
         _SetHourMin
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      76       1       93.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BB      15        0.0%
DATA                 0      0     2BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon May 16 21:29:40 2016

                                                   LoadNextEvent@minute 000D  
                                                         _years_to_days 1B82  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$852 0012  
                                           __end_of_CommandSetStatusLed 278A  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l62 2AE0  
                                                                    l71 2AA4  
                                                                    l59 2ADC  
                                                                    l67 2A84  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l101 2B82  
                                                                   l102 2B9C  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l250 29C2  
                                                                   l251 29CC  
                                                                   l252 29E8  
                                                                   l271 0AE8  
                                                                   l263 0C6C  
                                                                   l407 2488  
                                                                   l423 205E  
                                                                   l247 29AE  
                                                                   l417 20A4  
                                                                   l249 29B8  
                                                                   l460 11A4  
                                                                   l390 1E5A  
                                                                   l462 132E  
                                                                   l454 1356  
                                                                   l383 2158  
                                                                   l480 122C  
                                                                   l464 11B8  
                                                                   l289 1D74  
                                                                   l449 2784  
                                                                   l730 2A2C  
                                                                   l386 213C  
                                                                   l722 2CBE  
                                                                   l482 1230  
                                                                   l466 11BA  
                                                                   l475 1204  
                                                                   l396 1E3E  
                                                                   l750 0F5E  
                                                                   l496 12AA  
                                                                   l745 0F26  
                                                                   l489 126A  
                                                                   l850 2268  
                                                                   l746 113E  
                                                                   l690 28C8  
                                                                   l829 1B5C  
                                                                   l694 16D2  
                                                                   l759 1136  
                                                                   l868 182A  
                                                                   l798 1938  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2BF2  
                                                      ProcessDiary@hour 0013  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 2676  
                                                                   wreg 000FE8  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 2406  
                                                     _buzzeLoudDuration 00D3  
                                                   main@oldBuzzerOnTime 00EE  
                                                         _globalMinutes 00DA  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1303 2878  
                                                                  l1323 06A6  
                                                                  l4012 2A2A  
                                                                  l4004 2A18  
                                                                  l1277 282A  
                                                                  l1287 2956  
                                                                  l4032 0F4C  
                                                                  l4050 0F8A  
                                                                  l4042 0F64  
                                                                  l4108 104A  
                                                                  l4036 0F54  
                                                                  l4028 0F2A  
                                                                  l4054 0FAE  
                                                                  l4046 0F86  
                                                                  l4038 0F5A  
                                                                  l4144 10EA  
                                                                  l4128 10CC  
                                                                  l6010 177E  
                                                                  l4074 0FD6  
                                                                  l4058 0FB4  
                                                                  l4154 10F8  
                                                                  l6004 1764  
                                                                  l4084 0FF4  
                                                                  l4076 0FE2  
                                                                  l4068 0FCC  
                                                                  l5212 294C  
                                                                  l5204 2928  
                                                                  l3630 25DC  
                                                                  l3470 2A9C  
                                                                  l6030 17E2  
                                                                  l6022 17BA  
                                                                  l6014 1792  
                                                                  l6006 176A  
                                                                  l6110 1586  
                                                                  l5302 1CFA  
                                                                  l5206 2932  
                                                                  l3624 25D2  
                                                                  l3616 25B4  
                                                                  l3608 25A0  
                                                                  l6040 1816  
                                                                  l4096 1024  
                                                                  l6200 1694  
                                                                  l6120 15B0  
                                                                  l4600 0DD2  
                                                                  l5304 1D18  
                                                                  l5208 2938  
                                                                  l6026 17CE  
                                                                  l6018 17A6  
                                                                  l6130 15D6  
                                                                  l6106 1580  
                                                                  l5322 2422  
                                                                  l4602 0DDA  
                                                                  l6036 17F6  
                                                                  l5324 2424  
                                                                  l4620 0E0C  
                                                                  l4612 0DF4  
                                                                  l4540 0D18  
                                                                  l6052 2A40  
                                                                  l5308 1D46  
                                                                  l3654 2AD2  
                                                                  l6206 169A  
                                                                  l6150 15FE  
                                                                  l6134 15DC  
                                                                  l5318 241A  
                                                                  l4630 0E2E  
                                                                  l4622 0E14  
                                                                  l4614 0DFA  
                                                                  l4606 0DE6  
                                                                  l4550 0D38  
                                                                  l4542 0D1E  
                                                                  l4534 0D0A  
                                                                  l5406 096A  
                                                                  l3656 2AD4  
                                                                  l6160 161C  
                                                                  l5424 2BD0  
                                                                  l6080 201A  
                                                                  l4528 0CE0  
                                                                  l5360 20DC  
                                                                  l5440 1D94  
                                                                  l5176 2876  
                                                                  l5184 27F4  
                                                                  l5272 2304  
                                                                  l6224 1196  
                                                                  l6400 147A  
                                                                  l3770 26A4  
                                                                  l6154 1602  
                                                                  l5530 0ABE  
                                                                  l5522 09AE  
                                                                  l4650 0E68  
                                                                  l4642 0E54  
                                                                  l4570 0D78  
                                                                  l5186 27FE  
                                                                  l6330 12EA  
                                                                  l6410 14D8  
                                                                  l6180 1668  
                                                                  l6172 164E  
                                                                  l6164 162A  
                                                                  l6156 1608  
                                                                  l5540 0BBA  
                                                                  l5532 0B16  
                                                                  l5524 0A44  
                                                                  l5516 0992  
                                                                  l4636 0E40  
                                                                  l4628 0E26  
                                                                  l4564 0D64  
                                                                  l4556 0D4A  
                                                                  l4548 0D30  
                                                                  l5292 1C90  
                                                                  l5444 1DA4  
                                                                  l5196 2820  
                                                                  l5188 2804  
                                                                  l5276 232E  
                                                                  l6332 12F8  
                                                                  l6316 1292  
                                                                  l6252 11E0  
                                                                  l6228 11A8  
                                                                  l6094 2050  
                                                                  l4638 0E48  
                                                                  l4566 0D6C  
                                                                  l4558 0D52  
                                                                  l5446 1DD6  
                                                                  l6326 12D8  
                                                                  l6318 129E  
                                                                  l6254 11EC  
                                                                  l6430 153A  
                                                                  l3776 26CA  
                                                                  l6192 1688  
                                                                  l6184 166E  
                                                                  l6176 1656  
                                                                  l6168 163C  
                                                                  l5536 0B94  
                                                                  l6088 2038  
                                                                  l3784 29D6  
                                                                  l4672 0EAE  
                                                                  l4664 0E94  
                                                                  l4656 0E7A  
                                                                  l4648 0E62  
                                                                  l4592 0DB8  
                                                                  l4584 0D9E  
                                                                  l4576 0D86  
                                                                  l4680 0EC2  
                                                                  l5296 1CB6  
                                                                  l5384 2144  
                                                                  l5456 1E02  
                                                                  l5704 28AA  
                                                                  l6336 12FE  
                                                                  l5546 0C30  
                                                                  l4674 0EB6  
                                                                  l4666 0E9C  
                                                                  l4658 0E82  
                                                                  l4594 0DC0  
                                                                  l4586 0DA6  
                                                                  l4578 0D8C  
                                                                  l4682 0ED8  
                                                                  l5298 1CD4  
                                                                  l6338 133A  
                                                                  l6426 151A  
                                                                  l6362 13A8  
                                                                  l5900 1EF4  
                                                                  l6196 168E  
                                                                  l6188 1676  
                                                                  l5548 0C4C  
                                                                  l5556 0C54  
                                                                  l5396 06B2  
                                                                  l6292 125A  
                                                                  l4774 24D6  
                                                                  l5750 1956  
                                                                  l5734 18FC  
                                                                  l5726 18A0  
                                                                  l5718 1890  
                                                                  l5654 1A4C  
                                                                  l6382 1428  
                                                                  l5736 192A  
                                                                  l5744 193E  
                                                                  l5904 1F18  
                                                                  l5920 2616  
                                                                  l5770 2192  
                                                                  l6394 146C  
                                                                  l3996 29F6  
                                                                  l5684 2762  
                                                                  l5692 2B5E  
                                                                  l6388 1450  
                                                                  l5846 1AB2  
                                                                  l5678 2746  
                                                                  l5856 1B1C  
                                                                  l5776 21E6  
                                                                  l5696 2B70  
                                                                  l5858 1B4E  
                                                                  l5866 1B62  
                                                                  l5972 229E  
                                                                  l5796 23BE  
                                                                  l5894 1E9C  
                                                                  l5974 22A0  
                                                                  l5798 23F0  
                                                                  l5994 1722  
                                                                  l5986 16EE  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 29A8  
                                                                  u3000 0F22  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u3040 0F86  
                                                                  u3060 0FAE  
                                                                  u3160 10CA  
                                                                  u5014 18C8  
                                                                  u5015 18C0  
                                                                  u5104 23A8  
                                                                  u5105 23A0  
                                                                  u5034 18E4  
                                                                  u5114 23D4  
                                                                  u5035 18DE  
                                                                  u5115 23CC  
                                                                  u5044 1910  
                                                                  u5124 1AE0  
                                                                  u4404 1CC8  
                                                                  u5045 190A  
                                                                  u5125 1ADA  
                                                                  u4405 1CC2  
                                                                  u4350 22EC  
                                                                  u5144 1B06  
                                                                  u4424 1CEC  
                                                                  u5145 1AFE  
                                                                  u4425 1CE6  
                                                                  u5154 1B32  
                                                                  u4434 1D0C  
                                                                  u5155 1B2A  
                                                                  u4435 1D06  
                                                                  u4454 1D34  
                                                                  u4455 1D2C  
                                                                  u4704 0A14  
                                                                  u4464 1D5C  
                                                                  u4705 0A0E  
                                                                  u4465 1D54  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u4714 0A3C  
                                                                  u4394 1CA8  
                                                                  u4570 068C  
                                                                  u4715 0A36  
                                                                  u4395 1CA2  
                                                                  u4804 0B78  
                                                                  u4724 0A58  
                                                                  u4580 06A6  
                                                                  _RCIF 007CF5  
                                                                  u4805 0B72  
                                                                  u4725 0A52  
                                                                  u4734 0A7C  
                                                                  u4735 0A76  
                                                                  u4824 0BA6  
                                                                  u4825 0BA0  
                                                                  u4905 1A10  
                                                                  i1l90 0064  
                                                                  u4834 0BCE  
                                                                  u4754 0AAA  
                                                                  i1l91 0038  
                                                                  u4835 0BC8  
                                                                  u4755 0AA4  
                                                                  u4844 0BF2  
                                                                  u4764 0AD2  
                                                                  u4684 09C2  
                                                                  u4845 0BEC  
                                                                  u4765 0ACC  
                                                                  u4685 09BC  
                                                                  u4774 0AFC  
                                                                  u4694 09EA  
                                                                  u5670 14A6  
                                                                  u5727 2A78  
                                                                  u4775 0AF6  
                                                                  u4695 09E4  
                                                                  u4935 2750  
                                                                  u4864 0C1C  
                                                                  u4784 0B2A  
                                                                  u4865 0C16  
                                                                  u4785 0B24  
                                                                  u4874 0C44  
                                                                  u4794 0B52  
                                                                  u4875 0C3E  
                                                                  u4795 0B4C  
                                                                  i2l77 27AA  
                                                                  i2l78 27DA  
                                                                  u4895 19EE  
                                                                  u4984 289C  
                                                                  u4985 2896  
                                                                  u4994 28BC  
                                                                  u4995 28B6  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 135C  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0077  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2CFC  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0075  
                                                       __end_of_InitApp 2512  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CA  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2C30  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                                 _CARRY 007EC0  
                                                       __end_of___lwdiv 2836  
                                                       __end_of___lwmod 2962  
                                            __end_of_ModbusSendTxBuffer 291A  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                            _IsBusserOn 00C6  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2D04  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 1966  
                                                        ?_LoadNextEvent 0001  
                                                    ProcessDiary@minute 0014  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D1  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 29EE  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 135C  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00C7  
                                                        _UartBufferTail 00C9  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2C12  
                                                       __initialization 2512  
                                                          __end_of_main 1568  
                                                      __end_of_LightLed 0C72  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 1A78  
                                                            _ModbusInit 2CB0  
                                                            _ModbusPoll 1568  
                                                      __end_of_PortRead 2AE6  
                                                        _InitUartBuffer 2CE6  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 2C30  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1C84  
                                                                i1l5082 005E  
                                                                i1l5084 0060  
                                                                i2l5062 27D2  
                                                         _ymd_to_scalar 22C0  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 2A32  
                                                         main@oldMinute 00F2  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D8  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2C9C  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 27E2  
                                             __playingSoundStartPosInEe 006F  
                                                        _UartRingBuffer 0200  
                                                          __lastAddress 00BE  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00E4  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 2836  
                                                                _millis 2BA2  
                                                                clear_0 251A  
                                                                clear_1 252C  
                                                                clear_2 2538  
                                                     __end_of_AddSecond 2CE6  
                                                                _mktime 066E  
                                                          __lastCommand 00E1  
                                                 __end_of_PortAvailable 2D04  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 0074  
                                                __end_of_InitUartBuffer 2CF4  
                                                          __MODBUSCoils 00DF  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D0  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2CD6  
                                                __end_of_LightStatusLed 1D7A  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D2  
                                                            __accesstop 0080  
                                               __end_of__initialization 2586  
                                            __end_of_ModbusProcess_FC21 22C0  
                                            __end_of_ModbusProcess_FC15 1B82  
                                            __end_of_ModbusProcess_FC16 1F28  
                                            __end_of_ModbusProcess_FC17 2676  
                                            __end_of_ModbusProcess_FC43 183A  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1144  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 2594  
                                                          __pidataBANK0 2D0A  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00E2  
                                                  _ModbusBuildException 2BF2  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                                           ?_SetHourMin 0007  
                                                     __end_of_PlaySound 1E5E  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2C84  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2AB0  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2B76  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0058  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000B  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 28CE  
                                                               _GetTime 2CF4  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00CD  
                                                   __end_of_StopPlaying 2C6A  
                                                               _InitApp 248C  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2C12  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0170  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 0073  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 27E2  
                                                               ___lwmod 291A  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 001E  
                                                               __pcinit 2512  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2AE6  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0072  
                                                       __size_of_mktime 0312  
                                                               __ptext0 135C  
                                                               __ptext1 2CC4  
                                                               __ptext2 1144  
                                                               __ptext3 2B18  
                                                               __ptext4 1F28  
                                                               __ptext5 066E  
                                                               __ptext6 22C0  
                                                               __ptext7 1B82  
                                                               __ptext8 2962  
                                                               __ptext9 27E2  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 1144  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0008  
                                                   __size_of_ResetEvent 0040  
                                              __size_of_SetTimeFromRegs 00C2  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 278A  
                                                  end_of_initialization 2586  
                                                         __Lmediumconst 0000  
                                                               int_func 278A  
                                                   __playingSoundCurPos 00CF  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                                        ??_ProcessDiary 000F  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                          _curEventHour 00D5  
                                                ??_ModbusBuildException 0007  
                                                          _curEventType 00D7  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2CD6  
                                                        _months_to_days 2962  
                                                     _ModbusGetRxBuffer 29EE  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     LoadNextEvent@hour 000C  
                                                     _SoundPlayNextStep 20A8  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2C4E  
                                           __end_of_ConfigureOscillator 2D0A  
                                                    ?_SoundPlayNextStep 0001  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00EA  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F4  
                                                   ??_SoundPlayNextStep 000F  
                                                     _buzzerAlarmPeriod 00D4  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1C84  
                                                        __end_of_Modbus 2CB0  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 2214  
                                                    _ModbusProcess_FC15 1A78  
                                                    _ModbusProcess_FC16 1E5E  
                                                    _ModbusProcess_FC17 2608  
                                                    _ModbusProcess_FC43 16D8  
                                                         __pidataCOMRAM 2D0E  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 2882  
                                                        __end_of_millis 2BCC  
                                                __end_of_months_to_days 29A8  
                                             __end_of_ModbusGetRxBuffer 2A32  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00C8  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                             __end_of_SoundPlayNextStep 215E  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2512  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 248C  
                                                          ??_SetHourMin 0008  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1D7A  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 2732  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 2CC4  
                                                    __end_of_ModbusPoll 16D8  
                                                             _PortBegin 2C6A  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EE4  
                                                 CopyStringToBuffer@len 0008  
                                                           __pdataBANK0 00F9  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2A72  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 2C4E  
                                                     __holdingRegsCount 00CC  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 2A72  
                                                         __pcstackBANK0 00E2  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 20A8  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 27DA  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001B  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                                     _buzzerOnOffPeriod 00FB  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C4  
                                                            ?_PortWrite 0007  
                                                           __pintcodelo 0018  
                                                   _buzzerOnOffDuration 00F9  
                                          __end_of_ModbusGetLastCommand 2B76  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2CFC  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001C  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0071  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00B6  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C2  
                                                 io_poll@lastEndAddress 00E3  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 0007  
                                                 __end_of_ymd_to_scalar 2364  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D9  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                           __soundCount 0070  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 26D6  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0074  
                                                       __isSoundPlaying 00CE  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 28CE  
                                           _ModbusSetExceptionStatusBit 2882  
                                                              InitApp@i 0007  
                                                           _globalHours 0076  
                                                             main@curMs 00F5  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 183A  
                                                     _ModbusProcess_FC3 215E  
                                                     _ModbusProcess_FC5 2364  
                                                     _ModbusProcess_FC6 26D6  
                                                     _ModbusProcess_FC7 2C84  
                                                           _INTCON2bits 000FF1  
                                                             copy_data0 255C  
                                        CommandSetStatusLed@commandData 001D  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0980  
                                                    __end_of_getHourMin 2BA2  
                                                           ??_PlaySound 0016  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 2BCC  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E9  
                                                      __size_of_InitApp 0086  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 2608  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001E  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2AB0  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BE  
                                                           _isleap$2159 000F  
                                                       _SetTimeFromRegs 1F28  
                                                           _currentTime 00DB  
                                                      __size_of_io_poll 0218  
                                                              _diffTime 00A8  
                                             __end_of_ModbusProcess_FC1 1966  
                                             __end_of_ModbusProcess_FC3 2214  
                                             __end_of_ModbusProcess_FC5 2406  
                                             __end_of_ModbusProcess_FC6 2732  
                                             __end_of_ModbusProcess_FC7 2C9C  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E6  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 2836  
                                                              __ptext11 291A  
                                                              __ptext20 1D7A  
                                                              __ptext12 2C12  
                                                              __ptext21 20A8  
                                                              __ptext13 2C30  
                                                              __ptext30 2406  
                                                              __ptext22 2C4E  
                                                              __ptext14 2882  
                                                              __ptext31 2B76  
                                                              __ptext23 2AE6  
                                                              __ptext15 2B48  
                                                              __ptext40 2676  
                                                              __ptext32 0980  
                                                              __ptext24 1C84  
                                                              __ptext16 1966  
                                                              __ptext41 215E  
                                                              __ptext33 2CF4  
                                                              __ptext25 2A32  
                                                              __ptext17 2C9C  
                                                              __ptext50 2594  
                                                              __ptext42 2214  
                                                              __ptext34 1568  
                                                              __ptext26 0C72  
                                                              __ptext18 2CB0  
                                                              __ptext51 29EE  
                                                              __ptext43 2608  
                                                              __ptext35 0EE4  
                                                              __ptext27 29A8  
                                                              __ptext19 2732  
                                                              __ptext52 2AB0  
                                                              __ptext44 1E5E  
                                                              __ptext36 2C84  
                                                              __ptext28 1FEA  
                                                              __ptext53 2CFC  
                                                              __ptext45 1A78  
                                                              __ptext37 26D6  
                                                              __ptext29 2BCC  
                                                              __ptext54 2BF2  
                                                              __ptext46 183A  
                                                              __ptext38 2364  
                                                              __ptext55 248C  
                                                              __ptext47 28CE  
                                                              __ptext39 16D8  
                                                              __ptext56 2C6A  
                                                              __ptext48 2BA2  
                                                              __ptext57 2CE6  
                                                              __ptext49 2A72  
                                                              __ptext58 2D04  
                                                              __ptext59 2CD6  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E8  
                                                    io_poll@eventEeAddr 00E5  
                                                         __size_of_main 020C  
                                                  _ModbusGetLastCommand 2B48  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1FEA  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0077  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2CC4  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00F3  
                                                      __exceptionStatus 00CB  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2172 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 0112  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                        _SetTimeCommand 2B18  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2D12  
                                                              intlevel2 2D12  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001A  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0C72  
                                                 __MODBUSDiscreteInputs 00BC  
                                                __size_of_LoadNextEvent 0086  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1FEA  
                                                 __end_of_SetBuzzerDuty 2B18  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                                        _curEventMinute 00D6  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 2B48  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 001C  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0EE4  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                            ModbusProcess_FC15@u8bitsno 0028  
