

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jul 02 15:13:04 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           	psect	eeprom_data
   107  F00000  11 7F FF 06 09 FF 01 04 	db	17,127,255,6,9,255,1,4	;# 
   108  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
   109  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
   110  0000                     
   111                           	psect	idataCOMRAM
   112  00035E                     __pidataCOMRAM:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _globalHours
   116  00035E  FF                 	db	255
   117                           
   118                           	psect	smallconst
   119  000600                     __psmallconst:
   120                           	opt stack 0
   121  000600  00                 	db	0
   122  000601                     _fctsupported:
   123                           	opt stack 0
   124  000601  01                 	db	1
   125  000602  02                 	db	2
   126  000603  03                 	db	3
   127  000604  04                 	db	4
   128  000605  05                 	db	5
   129  000606  06                 	db	6
   130  000607  07                 	db	7
   131  000608  0F                 	db	15
   132  000609  10                 	db	16
   133  00060A  11                 	db	17
   134  00060B  14                 	db	20
   135  00060C  15                 	db	21
   136  00060D  2B                 	db	43
   137  00060E  64                 	db	100
   138  00060F  65                 	db	101
   139  000610  66                 	db	102
   140  000611                     __end_of_fctsupported:
   141                           	opt stack 0
   142  0000                     _CCP1CONbits	set	4029
   143  0000                     _CCPR1L	set	4030
   144  0000                     _EEADR	set	4009
   145  0000                     _EECON2	set	4007
   146  0000                     _EEDATA	set	4008
   147  0000                     _INTCON2bits	set	4081
   148  0000                     _INTCONbits	set	4082
   149  0000                     _IPR1bits	set	3999
   150  0000                     _LATA	set	3977
   151  0000                     _LATAbits	set	3977
   152  0000                     _LATB	set	3978
   153  0000                     _LATCbits	set	3979
   154  0000                     _PIE1bits	set	3997
   155  0000                     _PIR1bits	set	3998
   156  0000                     _PORTCbits	set	3970
   157  0000                     _PR2	set	4043
   158  0000                     _RCONbits	set	4048
   159  0000                     _RCREG	set	4014
   160  0000                     _RCSTA	set	4011
   161  0000                     _RCSTAbits	set	4011
   162  0000                     _SPBRG	set	4015
   163  0000                     _T0CONbits	set	4053
   164  0000                     _T1CONbits	set	4045
   165  0000                     _T2CONbits	set	4042
   166  0000                     _TMR0H	set	4055
   167  0000                     _TMR0L	set	4054
   168  0000                     _TMR1H	set	4047
   169  0000                     _TMR1L	set	4046
   170  0000                     _TRISAbits	set	3986
   171  0000                     _TRISB	set	3987
   172  0000                     _TRISCbits	set	3988
   173  0000                     _TXREG	set	4013
   174  0000                     _TXSTA	set	4012
   175  0000                     _TXSTAbits	set	4012
   176  0000                     _BOR	set	32384
   177  0000                     _CARRY	set	32448
   178  0000                     _CFGS	set	32054
   179  0000                     _EEPGD	set	32055
   180  0000                     _GIE	set	32663
   181  0000                     _POR	set	32385
   182  0000                     _RCIF	set	31989
   183  0000                     _RD	set	32048
   184  0000                     _TRMT	set	32097
   185  0000                     _WR	set	32049
   186  0000                     _WREN	set	32050
   187  000611                     STR_9:
   188  000611  54                 	db	84	;'T'
   189  000612  61                 	db	97	;'a'
   190  000613  62                 	db	98	;'b'
   191  000614  6C                 	db	108	;'l'
   192  000615  6F                 	db	111	;'o'
   193  000616  20                 	db	32
   194  000617  73                 	db	115	;'s'
   195  000618  20                 	db	32
   196  000619  72                 	db	114	;'r'
   197  00061A  61                 	db	97	;'a'
   198  00061B  73                 	db	115	;'s'
   199  00061C  70                 	db	112	;'p'
   200  00061D  69                 	db	105	;'i'
   201  00061E  73                 	db	115	;'s'
   202  00061F  61                 	db	97	;'a'
   203  000620  6E                 	db	110	;'n'
   204  000621  69                 	db	105	;'i'
   205  000622  65                 	db	101	;'e'
   206  000623  6D                 	db	109	;'m'
   207  000624  00                 	db	0
   208  000625                     STR_7:
   209  000625  68                 	db	104	;'h'
   210  000626  74                 	db	116	;'t'
   211  000627  74                 	db	116	;'t'
   212  000628  70                 	db	112	;'p'
   213  000629  3A                 	db	58	;':'
   214  00062A  2F                 	db	47
   215  00062B  2F                 	db	47
   216  00062C  62                 	db	98	;'b'
   217  00062D  6F                 	db	111	;'o'
   218  00062E  6C                 	db	108	;'l'
   219  00062F  69                 	db	105	;'i'
   220  000630  64                 	db	100	;'d'
   221  000631  2E                 	db	46
   222  000632  72                 	db	114	;'r'
   223  000633  75                 	db	117	;'u'
   224  000634  00                 	db	0
   225  000635                     STR_13:
   226  000635  52                 	db	82	;'R'
   227  000636  61                 	db	97	;'a'
   228  000637  73                 	db	115	;'s'
   229  000638  70                 	db	112	;'p'
   230  000639  69                 	db	105	;'i'
   231  00063A  73                 	db	115	;'s'
   232  00063B  61                 	db	97	;'a'
   233  00063C  6E                 	db	110	;'n'
   234  00063D  69                 	db	105	;'i'
   235  00063E  65                 	db	101	;'e'
   236  00063F  00                 	db	0
   237  000640                     STR_3:
   238  000640  43                 	db	67	;'C'
   239  000641  32                 	db	50	;'2'
   240  000642  30                 	db	48	;'0'
   241  000643  30                 	db	48	;'0'
   242  000644  30                 	db	48	;'0'
   243  000645  2D                 	db	45
   244  000646  42                 	db	66	;'B'
   245  000647  49                 	db	73	;'I'
   246  000648  00                 	db	0
   247  000649                     STR_1:
   248  000649  42                 	db	66	;'B'
   249  00064A  4F                 	db	79	;'O'
   250  00064B  4C                 	db	76	;'L'
   251  00064C  49                 	db	73	;'I'
   252  00064D  44                 	db	68	;'D'
   253  00064E  00                 	db	0
   254  00064F                     STR_5:
   255  00064F  31                 	db	49	;'1'
   256  000650  2E                 	db	46
   257  000651  30                 	db	48	;'0'
   258  000652  31                 	db	49	;'1'
   259  000653  00                 	db	0
   260  000654                     STR_11:
   261  000654  4D                 	db	77	;'M'
   262  000655  4D                 	db	77	;'M'
   263  000656  4D                 	db	77	;'M'
   264  000657  00                 	db	0
   265  0000                     
   266                           ; #config settings
   267  000658  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  003BD6                     __pcinit:
   271                           	opt stack 0
   272  003BD6                     start_initialization:
   273                           	opt stack 0
   274  003BD6                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Clear objects allocated to BANK2 (256 bytes)
   278  003BD6  EE02  F000         	lfsr	0,__pbssBANK2
   279  003BDA  EE11 F000          	lfsr	1,256
   280  003BDE                     clear_0:
   281  003BDE  6AEE               	clrf	postinc0,c
   282  003BE0  50E5               	movf	postdec1,w,c
   283  003BE2  50E1               	movf	fsr1l,w,c
   284  003BE4  E1FC               	bnz	clear_0
   285  003BE6  50E2               	movf	fsr1h,w,c
   286  003BE8  E1FA               	bnz	clear_0
   287                           
   288                           ; Clear objects allocated to BANK1 (246 bytes)
   289  003BEA  EE01  F000         	lfsr	0,__pbssBANK1
   290  003BEE  0EF6               	movlw	246
   291  003BF0                     clear_1:
   292  003BF0  6AEE               	clrf	postinc0,c
   293  003BF2  06E8               	decf	wreg,f,c
   294  003BF4  E1FD               	bnz	clear_1
   295                           
   296                           ; Clear objects allocated to BANK0 (59 bytes)
   297  003BF6  EE00  F0C2         	lfsr	0,__pbssBANK0
   298  003BFA  0E3B               	movlw	59
   299  003BFC                     clear_2:
   300  003BFC  6AEE               	clrf	postinc0,c
   301  003BFE  06E8               	decf	wreg,f,c
   302  003C00  E1FD               	bnz	clear_2
   303                           
   304                           ; Clear objects allocated to COMRAM (37 bytes)
   305  003C02  EE00  F039         	lfsr	0,__pbssCOMRAM
   306  003C06  0E25               	movlw	37
   307  003C08                     clear_3:
   308  003C08  6AEE               	clrf	postinc0,c
   309  003C0A  06E8               	decf	wreg,f,c
   310  003C0C  E1FD               	bnz	clear_3
   311                           
   312                           ; Initialize objects allocated to COMRAM (1 bytes)
   313                           ; load TBLPTR registers with __pidataCOMRAM
   314  003C0E  0E5E               	movlw	low __pidataCOMRAM
   315  003C10  6EF6               	movwf	tblptrl,c
   316  003C12  0E03               	movlw	high __pidataCOMRAM
   317  003C14  6EF7               	movwf	tblptrh,c
   318  003C16  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   319  003C18  6EF8               	movwf	tblptru,c
   320  003C1A  0009               	tblrd		*+	;fetch initializer
   321  003C1C  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   322  003C20                     end_of_initialization:
   323                           	opt stack 0
   324  003C20                     __end_of__initialization:
   325                           	opt stack 0
   326  003C20  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   327  003C22  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   328  003C24  0E00               	movlw	low (__Lmediumconst shr (0+16))
   329  003C26  6EF8               	movwf	tblptru,c
   330  003C28  0100               	movlb	0
   331  003C2A  EF63  F007         	goto	_main	;jump to C main() function
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1h	equ	0xFE2
   340                           fsr1l	equ	0xFE1
   341                           
   342                           	psect	bssCOMRAM
   343  000039                     __pbssCOMRAM:
   344                           	opt stack 0
   345  000039                     __currenDiaryEvent:
   346                           	opt stack 0
   347  000039                     	ds	9
   348  000042                     _UartBufferHead:
   349                           	opt stack 0
   350  000042                     	ds	1
   351  000043                     _UartBufferLen:
   352                           	opt stack 0
   353  000043                     	ds	1
   354  000044                     _UartBufferTail:
   355                           	opt stack 0
   356  000044                     	ds	1
   357  000045                     __6sCounter:
   358                           	opt stack 0
   359  000045                     	ds	1
   360  000046                     __deviceStatus:
   361                           	opt stack 0
   362  000046                     	ds	1
   363  000047                     __eeFirstSoundAddress:
   364                           	opt stack 0
   365  000047                     	ds	1
   366  000048                     __eeSoundAddressesList:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     __exceptionStatus:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     __holdingRegsCount:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     __inputRegsCount:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     __lastCommand:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     __maxDiaryEvents:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     __nextEventSoundId:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     __playingSoundCurPos:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     __playingSoundStartPosInEe:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     __playingSoundSteps:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     __soundCount:
   397                           	opt stack 0
   398  000052                     	ds	1
   399  000053                     __u8BufferSize:
   400                           	opt stack 0
   401  000053                     	ds	1
   402  000054                     _blinkOn:
   403                           	opt stack 0
   404  000054                     	ds	1
   405  000055                     _currentLedBlock:
   406                           	opt stack 0
   407  000055                     	ds	1
   408  000056                     _eventAcceptTime:
   409                           	opt stack 0
   410  000056                     	ds	1
   411  000057                     _eventCount:
   412                           	opt stack 0
   413  000057                     	ds	1
   414  000058                     _globalMinutes:
   415                           	opt stack 0
   416  000058                     	ds	1
   417  000059                     _ModbusUserCommandAdditional1Hi:
   418                           	opt stack 0
   419  000059                     	ds	1
   420  00005A                     _ModbusUserCommandAdditional1Lo:
   421                           	opt stack 0
   422  00005A                     	ds	1
   423  00005B                     _ModbusUserCommandData:
   424                           	opt stack 0
   425  00005B                     	ds	1
   426  00005C                     _ModbusUserCommandId:
   427                           	opt stack 0
   428  00005C                     	ds	1
   429  00005D                     __lastFunction:
   430                           	opt stack 0
   431  00005D                     	ds	1
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1h	equ	0xFE2
   440                           fsr1l	equ	0xFE1
   441                           
   442                           	psect	dataCOMRAM
   443  00005E                     __pdataCOMRAM:
   444                           	opt stack 0
   445  00005E                     _globalHours:
   446                           	opt stack 0
   447  00005E                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1h	equ	0xFE2
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	bssBANK0
   459  0000C2                     __pbssBANK0:
   460                           	opt stack 0
   461  0000C2                     _ledStatuses:
   462                           	opt stack 0
   463  0000C2                     	ds	16
   464  0000D2                     __eventFromCommand:
   465                           	opt stack 0
   466  0000D2                     	ds	6
   467  0000D8                     _diffTime:
   468                           	opt stack 0
   469  0000D8                     	ds	4
   470  0000DC                     _millisecondsFromStart:
   471                           	opt stack 0
   472  0000DC                     	ds	4
   473  0000E0                     __MODBUSDiscreteInputs:
   474                           	opt stack 0
   475  0000E0                     	ds	2
   476  0000E2                     __lastAddress:
   477                           	opt stack 0
   478  0000E2                     	ds	2
   479  0000E4                     __lastCount:
   480                           	opt stack 0
   481  0000E4                     	ds	2
   482  0000E6                     __nextEventPlayDuration:
   483                           	opt stack 0
   484  0000E6                     	ds	2
   485  0000E8                     __totalMinutesFromDayStart:
   486                           	opt stack 0
   487  0000E8                     	ds	2
   488  0000EA                     __u16timeOut:
   489                           	opt stack 0
   490  0000EA                     	ds	2
   491  0000EC                     _modbusState:
   492                           	opt stack 0
   493  0000EC                     	ds	2
   494  0000EE                     _IsBusserOn:
   495                           	opt stack 0
   496  0000EE                     	ds	1
   497  0000EF                     __isSoundPlaying:
   498                           	opt stack 0
   499  0000EF                     	ds	1
   500  0000F0                     __u8id:
   501                           	opt stack 0
   502  0000F0                     	ds	1
   503  0000F1                     __u8lastError:
   504                           	opt stack 0
   505  0000F1                     	ds	1
   506  0000F2                     __u8lastRec:
   507                           	opt stack 0
   508  0000F2                     	ds	1
   509  0000F3                     __u8serno:
   510                           	opt stack 0
   511  0000F3                     	ds	1
   512  0000F4                     __u8state:
   513                           	opt stack 0
   514  0000F4                     	ds	1
   515  0000F5                     __u8txenpin:
   516                           	opt stack 0
   517  0000F5                     	ds	1
   518  0000F6                     _statusLedState:
   519                           	opt stack 0
   520  0000F6                     	ds	1
   521  0000F7                     __MODBUSCoils:
   522                           	opt stack 0
   523  0000F7                     	ds	2
   524  0000F9                     _ModbusUserCommandAdditional2Hi:
   525                           	opt stack 0
   526  0000F9                     	ds	1
   527  0000FA                     _ModbusUserCommandAdditional2Lo:
   528                           	opt stack 0
   529  0000FA                     	ds	1
   530  0000FB                     _ModbusUserCommandAdditional3Hi:
   531                           	opt stack 0
   532  0000FB                     	ds	1
   533  0000FC                     _ModbusUserCommandAdditional3Lo:
   534                           	opt stack 0
   535  0000FC                     	ds	1
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1h	equ	0xFE2
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	bssBANK1
   547  000100                     __pbssBANK1:
   548                           	opt stack 0
   549  000100                     _ledBlink:
   550                           	opt stack 0
   551  000100                     	ds	16
   552  000110                     __playingEndMs:
   553                           	opt stack 0
   554  000110                     	ds	4
   555  000114                     __u32time:
   556                           	opt stack 0
   557  000114                     	ds	4
   558  000118                     __u32timeOut:
   559                           	opt stack 0
   560  000118                     	ds	4
   561  00011C                     _oldBlinkOnTime:
   562                           	opt stack 0
   563  00011C                     	ds	4
   564  000120                     _soundTestEnd:
   565                           	opt stack 0
   566  000120                     	ds	4
   567  000124                     __u16InCnt:
   568                           	opt stack 0
   569  000124                     	ds	2
   570  000126                     __u16OutCnt:
   571                           	opt stack 0
   572  000126                     	ds	2
   573  000128                     __u16errCnt:
   574                           	opt stack 0
   575  000128                     	ds	2
   576  00012A                     __au8Buffer:
   577                           	opt stack 0
   578  00012A                     	ds	140
   579  0001B6                     __MODBUSHoldingRegs:
   580                           	opt stack 0
   581  0001B6                     	ds	30
   582  0001D4                     __MODBUSInputRegs:
   583                           	opt stack 0
   584  0001D4                     	ds	30
   585  0001F2                     _currentTime:
   586                           	opt stack 0
   587  0001F2                     	ds	4
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1h	equ	0xFE2
   596                           fsr1l	equ	0xFE1
   597                           
   598                           	psect	bssBANK2
   599  000200                     __pbssBANK2:
   600                           	opt stack 0
   601  000200                     _UartRingBuffer:
   602                           	opt stack 0
   603  000200                     	ds	256
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           postdec1	equ	0xFE5
   611                           fsr1h	equ	0xFE2
   612                           fsr1l	equ	0xFE1
   613                           
   614                           	psect	cstackBANK3
   615  000300                     __pcstackBANK3:
   616                           	opt stack 0
   617  000300                     ??_main:
   618                           
   619                           ; 1 bytes @ 0x0
   620  000300                     	ds	12
   621  00030C                     main@buttonPressed:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0xC
   625  00030C                     	ds	1
   626  00030D                     main@lastMs:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0xD
   630  00030D                     	ds	4
   631  000311                     main@lastDebounceTime:
   632                           	opt stack 0
   633                           
   634                           ; 4 bytes @ 0x11
   635  000311                     	ds	4
   636  000315                     main@debounceDelay:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x15
   640  000315                     	ds	1
   641  000316                     main@oldMinute:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x16
   645  000316                     	ds	2
   646  000318                     main@lastButtonPinState:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x18
   650  000318                     	ds	1
   651  000319                     main@buttonState:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x19
   655  000319                     	ds	1
   656  00031A                     main@hour:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x1A
   660  00031A                     	ds	1
   661  00031B                     main@minute:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x1B
   665  00031B                     	ds	1
   666  00031C                     main@buttonPinCurState:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x1C
   670  00031C                     	ds	1
   671  00031D                     main@totalMinutes:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x1D
   675  00031D                     	ds	2
   676  00031F                     main@curMs:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x1F
   680  00031F                     	ds	4
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           tblptrl	equ	0xFF6
   684                           tablat	equ	0xFF5
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1h	equ	0xFE2
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	cstackBANK0
   692  000080                     __pcstackBANK0:
   693                           	opt stack 0
   694  000080                     ??_ModbusValidateRequest:
   695  000080                     ??_ModbusProcess_FC16:
   696  000080                     ??_ProcessDiary:
   697  000080                     ??_CommandSetLed:
   698  000080                     ??_CommandSetStatusLed:
   699  000080                     ?_ymd_to_scalar:
   700                           	opt stack 0
   701  000080                     ModbusProcess_FC3@u8CopyBufferSize:
   702                           	opt stack 0
   703  000080                     ModbusProcess_FC5@u8CopyBufferSize:
   704                           	opt stack 0
   705  000080                     ModbusProcess_FC1@u16coil:
   706                           	opt stack 0
   707  000080                     ModbusProcess_FC6@u16val:
   708                           	opt stack 0
   709  000080                     ModbusProcess_FC15@u16coil:
   710                           	opt stack 0
   711  000080                     ymd_to_scalar@yr:
   712                           	opt stack 0
   713  000080                     ModbusProcess_FC20@recLenBytes:
   714                           	opt stack 0
   715                           
   716                           ; 5 bytes @ 0x0
   717  000080                     	ds	1
   718  000081                     CommandSetStatusLed@soundId:
   719                           	opt stack 0
   720  000081                     ModbusProcess_FC3@u16regsno:
   721                           	opt stack 0
   722  000081                     ModbusProcess_FC5@u16coil:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x1
   726  000081                     	ds	1
   727  000082                     CommandSetStatusLed@commandData:
   728                           	opt stack 0
   729  000082                     ModbusProcess_FC1@u8currentBit:
   730                           	opt stack 0
   731  000082                     ModbusProcess_FC6@u8CopyBufferSize:
   732                           	opt stack 0
   733  000082                     ModbusProcess_FC15@u8CopyBufferSize:
   734                           	opt stack 0
   735  000082                     ymd_to_scalar@mo:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x2
   739  000082                     	ds	1
   740  000083                     CommandSetStatusLed@led:
   741                           	opt stack 0
   742  000083                     ModbusProcess_FC1@u8CopyBufferSize:
   743                           	opt stack 0
   744  000083                     ModbusProcess_FC3@u8StartAdd:
   745                           	opt stack 0
   746  000083                     ModbusProcess_FC5@u8currentBit:
   747                           	opt stack 0
   748  000083                     ModbusProcess_FC15@bTemp:
   749                           	opt stack 0
   750  000083                     ModbusProcess_FC6@u16add:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x3
   754  000083                     	ds	1
   755  000084                     ModbusProcess_FC1@u8bytesno:
   756                           	opt stack 0
   757  000084                     ModbusProcess_FC3@i:
   758                           	opt stack 0
   759  000084                     ModbusProcess_FC15@u8frameByte:
   760                           	opt stack 0
   761  000084                     ProcessDiary@totalMinutes:
   762                           	opt stack 0
   763  000084                     ymd_to_scalar@day:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x4
   767  000084                     	ds	1
   768  000085                     CommandSetLed@soundId:
   769                           	opt stack 0
   770  000085                     ModbusProcess_FC1@u16StartCoil:
   771                           	opt stack 0
   772  000085                     ModbusProcess_FC15@u16StartCoil:
   773                           	opt stack 0
   774  000085                     ModbusProcess_FC20@startAddrBytes:
   775                           	opt stack 0
   776                           
   777                           ; 5 bytes @ 0x5
   778  000085                     	ds	1
   779  000086                     ??_ymd_to_scalar:
   780  000086                     CommandSetLed@ledColor:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x6
   784  000086                     	ds	1
   785  000087                     CommandSetLed@blinkSeconds:
   786                           	opt stack 0
   787  000087                     ModbusProcess_FC1@u16currentCoil:
   788                           	opt stack 0
   789  000087                     ModbusProcess_FC15@u16Coilno:
   790                           	opt stack 0
   791  000087                     ModbusProcess_FC16@temp:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x7
   795  000087                     	ds	1
   796  000088                     CommandSetLed@commandData:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x8
   800  000088                     	ds	1
   801  000089                     CommandSetLed@led:
   802                           	opt stack 0
   803  000089                     ModbusProcess_FC1@u8bitsno:
   804                           	opt stack 0
   805  000089                     ModbusProcess_FC15@u8currentBit:
   806                           	opt stack 0
   807  000089                     ModbusProcess_FC16@u8CopyBufferSize:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x9
   811  000089                     	ds	1
   812  00008A                     ??_ProcessUserCommands:
   813  00008A                     ModbusProcess_FC20@requestDataLen:
   814                           	opt stack 0
   815  00008A                     ModbusProcess_FC1@u16Coilno:
   816                           	opt stack 0
   817  00008A                     ModbusProcess_FC15@u16currentCoil:
   818                           	opt stack 0
   819  00008A                     ModbusProcess_FC16@u16StartAdd:
   820                           	opt stack 0
   821  00008A                     _ymd_to_scalar$2324:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0xA
   825  00008A                     	ds	1
   826  00008B                     ??_io_poll:
   827  00008B                     ModbusProcess_FC20@u8CopyBufferSize:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0xB
   831  00008B                     	ds	1
   832  00008C                     ModbusProcess_FC15@u8bitsno:
   833                           	opt stack 0
   834  00008C                     ModbusProcess_FC16@u8regsno:
   835                           	opt stack 0
   836  00008C                     ModbusProcess_FC20@i:
   837                           	opt stack 0
   838  00008C                     ModbusValidateRequest@startAddrBytes:
   839                           	opt stack 0
   840  00008C                     ymd_to_scalar@scalar:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0xC
   844  00008C                     	ds	1
   845  00008D                     ModbusProcess_FC16@i:
   846                           	opt stack 0
   847  00008D                     ModbusProcess_FC20@reqCount:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0xD
   851  00008D                     	ds	1
   852  00008E                     ModbusProcess_FC20@offset:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0xE
   856  00008E                     	ds	1
   857  00008F                     ModbusProcess_FC20@r:
   858                           	opt stack 0
   859  00008F                     io_poll@lastEndAddress:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0xF
   863  00008F                     	ds	1
   864  000090                     ?_mktime:
   865                           	opt stack 0
   866  000090                     mktime@timeptr:
   867                           	opt stack 0
   868  000090                     ModbusValidateRequest@recLenBytes:
   869                           	opt stack 0
   870                           
   871                           ; 4 bytes @ 0x10
   872  000090                     	ds	1
   873  000091                     io_poll@lastAddress:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x11
   877  000091                     	ds	2
   878  000093                     io_poll@lastCommand:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x13
   882  000093                     	ds	1
   883  000094                     ??_mktime:
   884  000094                     io_poll@lastFunction:
   885                           	opt stack 0
   886  000094                     ModbusValidateRequest@u16MsgCRC:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x14
   890  000094                     	ds	2
   891  000096                     ModbusValidateRequest@isSupported:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x16
   895  000096                     	ds	1
   896  000097                     ModbusValidateRequest@res:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x17
   900  000097                     	ds	1
   901  000098                     ModbusValidateRequest@u16count:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x18
   905  000098                     	ds	2
   906  00009A                     ModbusValidateRequest@i:
   907                           	opt stack 0
   908  00009A                     mktime@tt:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x1A
   912  00009A                     	ds	1
   913  00009B                     ModbusValidateRequest@readDevId:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1B
   917  00009B                     	ds	1
   918  00009C                     ModbusValidateRequest@u8regs:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x1C
   922  00009C                     	ds	1
   923  00009D                     ModbusValidateRequest@u16regs:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x1D
   927  00009D                     	ds	1
   928  00009E                     ModbusProcess_FC100@newRawTime:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x1E
   932  00009E                     	ds	4
   933  0000A2                     ModbusProcess_FC100@u8CopyBufferSize:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x22
   937  0000A2                     	ds	1
   938  0000A3                     ModbusProcess_FC100@newTime:
   939                           	opt stack 0
   940                           
   941                           ; 18 bytes @ 0x23
   942  0000A3                     	ds	18
   943  0000B5                     ModbusPoll@discreteInputs:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x35
   947  0000B5                     	ds	2
   948  0000B7                     ModbusPoll@coils:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x37
   952  0000B7                     	ds	2
   953  0000B9                     ModbusPoll@inputRegs:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x39
   957  0000B9                     	ds	2
   958  0000BB                     ModbusPoll@inputRegsCount:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x3B
   962  0000BB                     	ds	1
   963  0000BC                     ModbusPoll@holdingRegs:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x3C
   967  0000BC                     	ds	2
   968  0000BE                     ModbusPoll@holdingRegsCount:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x3E
   972  0000BE                     	ds	1
   973  0000BF                     ModbusPoll@u8current:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3F
   977  0000BF                     	ds	1
   978  0000C0                     ModbusPoll@u8exception:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x40
   982  0000C0                     	ds	1
   983  0000C1                     ModbusPoll@i8state:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x41
   987  0000C1                     	ds	1
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1h	equ	0xFE2
   996                           fsr1l	equ	0xFE1
   997                           
   998                           	psect	cstackCOMRAM
   999  000001                     __pcstackCOMRAM:
  1000                           	opt stack 0
  1001  000001                     ??_high_isr:
  1002  000001                     
  1003                           ; 1 bytes @ 0x0
  1004  000001                     	ds	14
  1005  00000F                     ??_low_isr:
  1006                           
  1007                           ; 1 bytes @ 0xE
  1008  00000F                     	ds	17
  1009  000020                     low_isr@c:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x1F
  1013  000020                     	ds	1
  1014  000021                     ??_CheckFunc20:
  1015  000021                     ?_GetTime:
  1016                           	opt stack 0
  1017  000021                     ?_ModbusGetUserCommandData:
  1018                           	opt stack 0
  1019  000021                     ?_ModbusGetUserCommandAdditional1Hi:
  1020                           	opt stack 0
  1021  000021                     ?_ModbusGetUserCommandAdditional2Hi:
  1022                           	opt stack 0
  1023  000021                     ?_ModbusGetUserCommandAdditional2Lo:
  1024                           	opt stack 0
  1025  000021                     ?_ModbusGetUserCommandAdditional1Lo:
  1026                           	opt stack 0
  1027  000021                     ?_ModbusGetUserCommandId:
  1028                           	opt stack 0
  1029  000021                     ?_ModbusGetLastCommand:
  1030                           	opt stack 0
  1031  000021                     ?_ModbusCalcCRC:
  1032                           	opt stack 0
  1033  000021                     ?___wmul:
  1034                           	opt stack 0
  1035  000021                     ?___awdiv:
  1036                           	opt stack 0
  1037  000021                     ?___awmod:
  1038                           	opt stack 0
  1039  000021                     ?___lwmod:
  1040                           	opt stack 0
  1041  000021                     ?_millis:
  1042                           	opt stack 0
  1043  000021                     ?___lmul:
  1044                           	opt stack 0
  1045  000021                     PortRead@ret:
  1046                           	opt stack 0
  1047  000021                     UpdateLedRegister@regIndex:
  1048                           	opt stack 0
  1049  000021                     SwitchOffAllLeds@i:
  1050                           	opt stack 0
  1051  000021                     LightLed@ledState:
  1052                           	opt stack 0
  1053  000021                     LightStatusLed@on:
  1054                           	opt stack 0
  1055  000021                     InitApp@i:
  1056                           	opt stack 0
  1057  000021                     ModbusSetExceptionStatusBit@value:
  1058                           	opt stack 0
  1059  000021                     ModbusInit@u8serno:
  1060                           	opt stack 0
  1061  000021                     ModbusBuildException@u8exception:
  1062                           	opt stack 0
  1063  000021                     PortWrite@buf:
  1064                           	opt stack 0
  1065  000021                     getHourMin@hour:
  1066                           	opt stack 0
  1067  000021                     getTotalMinutes@totalMinutes:
  1068                           	opt stack 0
  1069  000021                     SetBuzzerDuty@dc:
  1070                           	opt stack 0
  1071  000021                     SetTime@newTime:
  1072                           	opt stack 0
  1073  000021                     ModbusGetLastCommand@address:
  1074                           	opt stack 0
  1075  000021                     CopyStringToBuffer@src:
  1076                           	opt stack 0
  1077  000021                     ___wmul@multiplier:
  1078                           	opt stack 0
  1079  000021                     ___awdiv@dividend:
  1080                           	opt stack 0
  1081  000021                     ___awmod@dividend:
  1082                           	opt stack 0
  1083  000021                     ___lwmod@dividend:
  1084                           	opt stack 0
  1085  000021                     ___lmul@multiplier:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x20
  1089  000021                     	ds	1
  1090  000022                     ??_ModbusSetExceptionStatusBit:
  1091  000022                     ??_ModbusGetRxBufferHeader:
  1092  000022                     ??_ModbusGetRxBuffer:
  1093  000022                     LightLed@blink:
  1094                           	opt stack 0
  1095  000022                     LightStatusLed@blink:
  1096                           	opt stack 0
  1097  000022                     ModbusInit@u8txenpin:
  1098                           	opt stack 0
  1099  000022                     ModbusBuildException@u8func:
  1100                           	opt stack 0
  1101  000022                     ProcessLightBlock@curMs:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x21
  1105  000022                     	ds	1
  1106  000023                     ??_LoadNextEvent:
  1107  000023                     ??_ModbusCalcCRC:
  1108  000023                     ??_LightLed:
  1109  000023                     ??_LightStatusLed:
  1110  000023                     ??_SetBuzzerDuty:
  1111  000023                     PortWrite@buflen:
  1112                           	opt stack 0
  1113  000023                     ModbusInit@u8id:
  1114                           	opt stack 0
  1115  000023                     ModbusGetRxBufferHeader@i:
  1116                           	opt stack 0
  1117  000023                     ModbusGetRxBuffer@bBuffOverflow:
  1118                           	opt stack 0
  1119  000023                     CopyStringToBuffer@len:
  1120                           	opt stack 0
  1121  000023                     getHourMin@min:
  1122                           	opt stack 0
  1123  000023                     ModbusGetLastCommand@count:
  1124                           	opt stack 0
  1125  000023                     ___wmul@multiplicand:
  1126                           	opt stack 0
  1127  000023                     ___awdiv@divisor:
  1128                           	opt stack 0
  1129  000023                     ___awmod@divisor:
  1130                           	opt stack 0
  1131  000023                     ___lwmod@divisor:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x22
  1135  000023                     	ds	1
  1136  000024                     ??_ProcessLightBlock:
  1137  000024                     ??_CopyStringToBuffer:
  1138  000024                     PortWrite@i:
  1139                           	opt stack 0
  1140  000024                     ModbusSetExceptionStatusBit@bitNum:
  1141                           	opt stack 0
  1142  000024                     _ModbusInit$1885:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x23
  1146  000024                     	ds	1
  1147  000025                     ModbusCalcCRC@u8length:
  1148                           	opt stack 0
  1149  000025                     ___awdiv@counter:
  1150                           	opt stack 0
  1151  000025                     ___awmod@counter:
  1152                           	opt stack 0
  1153  000025                     ___lwmod@counter:
  1154                           	opt stack 0
  1155  000025                     LoadNextEvent@totalMinutes:
  1156                           	opt stack 0
  1157  000025                     ModbusGetLastCommand@command:
  1158                           	opt stack 0
  1159  000025                     ___wmul@product:
  1160                           	opt stack 0
  1161  000025                     millis@ret:
  1162                           	opt stack 0
  1163  000025                     ___lmul@multiplicand:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x24
  1167  000025                     	ds	1
  1168  000026                     ?_isleap:
  1169                           	opt stack 0
  1170  000026                     LightLed@ledNum:
  1171                           	opt stack 0
  1172  000026                     Modbus@u8txenpin:
  1173                           	opt stack 0
  1174  000026                     CopyStringToBuffer@objId:
  1175                           	opt stack 0
  1176  000026                     ___awdiv@sign:
  1177                           	opt stack 0
  1178  000026                     ___awmod@sign:
  1179                           	opt stack 0
  1180  000026                     ModbusCalcCRC@temp2:
  1181                           	opt stack 0
  1182  000026                     isleap@yr:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x25
  1186  000026                     	ds	1
  1187  000027                     ?___lwdiv:
  1188                           	opt stack 0
  1189  000027                     LightLed@ststusIndex:
  1190                           	opt stack 0
  1191  000027                     LoadNextEvent@v1:
  1192                           	opt stack 0
  1193  000027                     Modbus@u8serno:
  1194                           	opt stack 0
  1195  000027                     CopyStringToBuffer@i:
  1196                           	opt stack 0
  1197  000027                     ___awdiv@quotient:
  1198                           	opt stack 0
  1199  000027                     ___lwdiv@dividend:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x26
  1203  000027                     	ds	1
  1204  000028                     ??_isleap:
  1205  000028                     LightLed@statusShift:
  1206                           	opt stack 0
  1207  000028                     LightStatusLed@row:
  1208                           	opt stack 0
  1209  000028                     Modbus@tmpModbusId:
  1210                           	opt stack 0
  1211  000028                     ModbusCalcCRC@flag:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x27
  1215  000028                     	ds	1
  1216  000029                     ??_SoundPlayNextStep:
  1217  000029                     ??_ResetEvent:
  1218  000029                     SwitchOffAllDiaryLeds@i:
  1219                           	opt stack 0
  1220  000029                     ShowFailure@additionalLed:
  1221                           	opt stack 0
  1222  000029                     ResetEventFromCommand@state:
  1223                           	opt stack 0
  1224  000029                     ___lwdiv@divisor:
  1225                           	opt stack 0
  1226  000029                     CheckFunc20@startAddrBytes:
  1227                           	opt stack 0
  1228  000029                     ___lmul@product:
  1229                           	opt stack 0
  1230                           
  1231                           ; 4 bytes @ 0x28
  1232  000029                     	ds	1
  1233  00002A                     ??_InitFromEeprom:
  1234  00002A                     ModbusCalcCRC@i:
  1235                           	opt stack 0
  1236  00002A                     _isleap$2311:
  1237                           	opt stack 0
  1238  00002A                     _ResetEventFromCommand$917:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x29
  1242  00002A                     	ds	1
  1243  00002B                     ResetEvent@state:
  1244                           	opt stack 0
  1245  00002B                     ModbusCalcCRC@j:
  1246                           	opt stack 0
  1247  00002B                     ___lwdiv@counter:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x2A
  1251  00002B                     	ds	1
  1252  00002C                     InitFromEeprom@eeSoundCountAddress:
  1253                           	opt stack 0
  1254  00002C                     _ResetEvent$914:
  1255                           	opt stack 0
  1256  00002C                     ModbusCalcCRC@temp:
  1257                           	opt stack 0
  1258  00002C                     ___lwdiv@quotient:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x2B
  1262  00002C                     	ds	1
  1263  00002D                     CheckFunc20@reqCount:
  1264                           	opt stack 0
  1265  00002D                     SetHourMin@newHour:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x2C
  1269  00002D                     	ds	1
  1270  00002E                     ?_months_to_days:
  1271                           	opt stack 0
  1272  00002E                     ?_years_to_days:
  1273                           	opt stack 0
  1274  00002E                     CheckFunc20@resultLen:
  1275                           	opt stack 0
  1276  00002E                     SoundPlayNextStep@stepDuty:
  1277                           	opt stack 0
  1278  00002E                     ModbusSendTxBuffer@u16crc:
  1279                           	opt stack 0
  1280  00002E                     months_to_days@month:
  1281                           	opt stack 0
  1282  00002E                     years_to_days@yr:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x2D
  1286  00002E                     	ds	1
  1287  00002F                     SetHourMin@newMin:
  1288                           	opt stack 0
  1289  00002F                     CheckFunc20@recLenBytes:
  1290                           	opt stack 0
  1291                           
  1292                           ; 4 bytes @ 0x2E
  1293  00002F                     	ds	1
  1294  000030                     ??_ModbusProcess_FC20:
  1295  000030                     ??_ModbusProcess_FC21:
  1296  000030                     SoundPlayNextStep@duration:
  1297                           	opt stack 0
  1298  000030                     ModbusProcess_FC7@u8CopyBufferSize:
  1299                           	opt stack 0
  1300  000030                     ModbusProcess_FC17@u8CopyBufferSize:
  1301                           	opt stack 0
  1302  000030                     ModbusProcess_FC43@devIdCode:
  1303                           	opt stack 0
  1304  000030                     ModbusProcess_FC101@u8CopyBufferSize:
  1305                           	opt stack 0
  1306  000030                     ModbusProcess_FC102@u8CopyBufferSize:
  1307                           	opt stack 0
  1308  000030                     ModbusProcess_FC1@regs:
  1309                           	opt stack 0
  1310  000030                     ModbusProcess_FC3@regs:
  1311                           	opt stack 0
  1312  000030                     ModbusProcess_FC5@regs:
  1313                           	opt stack 0
  1314  000030                     ModbusProcess_FC6@regs:
  1315                           	opt stack 0
  1316  000030                     ModbusProcess_FC15@regs:
  1317                           	opt stack 0
  1318  000030                     ModbusProcess_FC16@regs:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x2F
  1322  000030                     	ds	1
  1323  000031                     ModbusProcess_FC43@u8CopyBufferSize:
  1324                           	opt stack 0
  1325  000031                     SetHourMin@sec:
  1326                           	opt stack 0
  1327  000031                     PlaySound@playDuration:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x30
  1331  000031                     	ds	1
  1332  000032                     ??_ModbusProcess_FC1:
  1333  000032                     ??_ModbusProcess_FC5:
  1334  000032                     ??_ModbusProcess_FC15:
  1335  000032                     ??_years_to_days:
  1336  000032                     ModbusProcess_FC3@u8size:
  1337                           	opt stack 0
  1338  000032                     ModbusProcess_FC6@u8size:
  1339                           	opt stack 0
  1340  000032                     ModbusProcess_FC16@u8size:
  1341                           	opt stack 0
  1342  000032                     ModbusProcess_FC21@requestDataLen:
  1343                           	opt stack 0
  1344  000032                     ModbusProcess_FC43@objId:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x31
  1348  000032                     	ds	1
  1349  000033                     ??_ModbusProcess_FC3:
  1350  000033                     ??_ModbusProcess_FC6:
  1351  000033                     ??_SetHourMin:
  1352  000033                     ??_PlaySound:
  1353  000033                     CheckFunc20@bytesCount:
  1354                           	opt stack 0
  1355  000033                     ModbusProcess_FC21@u8CopyBufferSize:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x32
  1359  000033                     	ds	1
  1360  000034                     CheckFunc20@offset:
  1361                           	opt stack 0
  1362  000034                     ModbusProcess_FC21@startAddrsBytes:
  1363                           	opt stack 0
  1364  000034                     years_to_days@ret:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x33
  1368  000034                     	ds	2
  1369  000036                     ModbusProcess_FC21@recLenBytes:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x35
  1373  000036                     	ds	1
  1374  000037                     SetHourMin@tmpSec:
  1375                           	opt stack 0
  1376  000037                     PlaySound@soundId:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x36
  1380  000037                     	ds	1
  1381  000038                     SetHourMin@secToNext6Sec:
  1382                           	opt stack 0
  1383  000038                     PlaySound@soundAddr:
  1384                           	opt stack 0
  1385  000038                     ModbusProcess_FC21@i:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x37
  1389  000038                     	ds	1
  1390  000039                     tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1h	equ	0xFE2
  1398                           fsr1l	equ	0xFE1
  1399                           
  1400                           ; 1 bytes @ 0x38
  1401 ;;
  1402 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
  1403 ;;
  1404 ;; *************** function _main *****************
  1405 ;; Defined at:
  1406 ;;		line 834 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  minute          1   27[BANK3 ] unsigned char 
  1411 ;;  hour            1   26[BANK3 ] unsigned char 
  1412 ;;  totalMinutes    2   29[BANK3 ] unsigned int 
  1413 ;;  curMs           4   31[BANK3 ] unsigned long 
  1414 ;;  buttonPinCur    1   28[BANK3 ] unsigned char 
  1415 ;;  lastDebounce    4   17[BANK3 ] unsigned long 
  1416 ;;  lastMs          4   13[BANK3 ] unsigned long 
  1417 ;;  buttonPresse    4    0        unsigned long 
  1418 ;;  oldMinute       2   22[BANK3 ] unsigned int 
  1419 ;;  buttonState     1   25[BANK3 ] unsigned char 
  1420 ;;  lastButtonPi    1   24[BANK3 ] unsigned char 
  1421 ;;  debounceDela    1   21[BANK3 ] unsigned char 
  1422 ;;  buttonPresse    1   12[BANK3 ] unsigned char 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1432 ;;      Params:         0       0       0       0       0       0       0
  1433 ;;      Locals:         0       0       0       0      23       0       0
  1434 ;;      Temps:          0       0       0       0      12       0       0
  1435 ;;      Totals:         0       0       0       0      35       0       0
  1436 ;;Total ram usage:       35 bytes
  1437 ;; Hardware stack levels required when called:    8
  1438 ;; This function calls:
  1439 ;;		_AddSecond
  1440 ;;		_ConfigureOscillator
  1441 ;;		_GetTime
  1442 ;;		_InitApp
  1443 ;;		_InitFromEeprom
  1444 ;;		_LightStatusLed
  1445 ;;		_LoadNextEvent
  1446 ;;		_ModbusPoll
  1447 ;;		_ProcessDiary
  1448 ;;		_ProcessLightBlock
  1449 ;;		_ResetEvent
  1450 ;;		_ResetEventFromCommand
  1451 ;;		_SoundPlayNextStep
  1452 ;;		_StopPlaying
  1453 ;;		_SwitchOffAllDiaryLeds
  1454 ;;		_getHourMin
  1455 ;;		_getTotalMinutes
  1456 ;;		_io_poll
  1457 ;;		_millis
  1458 ;;		_pwm_init
  1459 ;; This function is called by:
  1460 ;;		Startup code after reset
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text0
  1465  000EC6                     __ptext0:
  1466                           	opt stack 0
  1467  000EC6                     _main:
  1468                           	opt stack 23
  1469                           
  1470                           ;incstack = 0
  1471  000EC6  FFFF               	dw	65535
  1472                           
  1473                           ;main.c: 837: ConfigureOscillator();
  1474  000EC8  ECAB  F001         	call	_ConfigureOscillator	;wreg free
  1475                           
  1476                           ;main.c: 840: InitApp();
  1477  000ECC  ECD7  F01A         	call	_InitApp	;wreg free
  1478                           
  1479                           ;main.c: 844: InitFromEeprom();
  1480  000ED0  EC06  F019         	call	_InitFromEeprom	;wreg free
  1481                           
  1482                           ;main.c: 849: unsigned long lastMs = millis();
  1483  000ED4  ECD1  F000         	call	_millis	;wreg free
  1484  000ED8  C021  F30D         	movff	?_millis,main@lastMs
  1485  000EDC  C022  F30E         	movff	?_millis+1,main@lastMs+1
  1486  000EE0  C023  F30F         	movff	?_millis+2,main@lastMs+2
  1487  000EE4  C024  F310         	movff	?_millis+3,main@lastMs+3
  1488                           
  1489                           ;main.c: 852: pwm_init();
  1490  000EE8  EC3F  F001         	call	_pwm_init	;wreg free
  1491                           
  1492                           ;main.c: 856: bool buttonPressed;
  1493                           ;main.c: 857: unsigned long buttonPressedTime;
  1494                           ;main.c: 859: uint8_t buttonState = 1;
  1495  000EEC  0E01               	movlw	1
  1496  000EEE  0103               	movlb	3	; () banked
  1497  000EF0  6F19               	movwf	main@buttonState& (0+255),b
  1498                           
  1499                           ; BSR set to: 3
  1500                           ;main.c: 860: uint8_t lastButtonPinState = 1;
  1501  000EF2  0E01               	movlw	1
  1502  000EF4  0103               	movlb	3	; () banked
  1503  000EF6  6F18               	movwf	main@lastButtonPinState& (0+255),b
  1504                           
  1505                           ; BSR set to: 3
  1506                           ;main.c: 864: unsigned long lastDebounceTime = 0;
  1507  000EF8  0E00               	movlw	0
  1508  000EFA  0103               	movlb	3	; () banked
  1509  000EFC  6F11               	movwf	main@lastDebounceTime& (0+255),b
  1510  000EFE  0E00               	movlw	0
  1511  000F00  6F12               	movwf	(main@lastDebounceTime+1)& (0+255),b
  1512  000F02  0E00               	movlw	0
  1513  000F04  6F13               	movwf	(main@lastDebounceTime+2)& (0+255),b
  1514  000F06  0E00               	movlw	0
  1515  000F08  6F14               	movwf	(main@lastDebounceTime+3)& (0+255),b
  1516                           
  1517                           ; BSR set to: 3
  1518                           ;main.c: 865: uint8_t debounceDelay = 50;
  1519  000F0A  0E32               	movlw	50
  1520  000F0C  0103               	movlb	3	; () banked
  1521  000F0E  6F15               	movwf	main@debounceDelay& (0+255),b
  1522                           
  1523                           ; BSR set to: 3
  1524                           ;main.c: 873: uint16_t oldMinute = 0xFFFF;
  1525  000F10  0103               	movlb	3	; () banked
  1526  000F12  6916               	setf	main@oldMinute& (0+255),b
  1527  000F14  6917               	setf	(main@oldMinute+1)& (0+255),b
  1528                           
  1529                           ; BSR set to: 3
  1530                           ;main.c: 875: LightStatusLed(0x07, 1, 0);
  1531  000F16  0E01               	movlw	1
  1532  000F18  6E21               	movwf	LightStatusLed@on,c
  1533  000F1A  0E00               	movlw	0
  1534  000F1C  6E22               	movwf	LightStatusLed@blink,c
  1535  000F1E  0E07               	movlw	7
  1536  000F20  ECA0  F014         	call	_LightStatusLed
  1537                           
  1538                           ;main.c: 876: LightStatusLed(0x05, 1, 1);
  1539  000F24  0E01               	movlw	1
  1540  000F26  6E21               	movwf	LightStatusLed@on,c
  1541  000F28  0E01               	movlw	1
  1542  000F2A  6E22               	movwf	LightStatusLed@blink,c
  1543  000F2C  0E05               	movlw	5
  1544  000F2E  ECA0  F014         	call	_LightStatusLed
  1545  000F32                     l450:
  1546  000F32  FFFF               	dw	65535	; assembler added errata NOP
  1547                           
  1548                           ;main.c: 878: {
  1549                           ;main.c: 879: unsigned long curMs = millis();
  1550  000F34  ECD1  F000         	call	_millis	;wreg free
  1551  000F38  C021  F31F         	movff	?_millis,main@curMs
  1552  000F3C  C022  F320         	movff	?_millis+1,main@curMs+1
  1553  000F40  C023  F321         	movff	?_millis+2,main@curMs+2
  1554  000F44  C024  F322         	movff	?_millis+3,main@curMs+3
  1555                           
  1556                           ;main.c: 880: ProcessLightBlock(&curMs);
  1557  000F48  0E1F               	movlw	low main@curMs
  1558  000F4A  6E22               	movwf	ProcessLightBlock@curMs,c
  1559  000F4C  0E03               	movlw	high main@curMs
  1560  000F4E  6E23               	movwf	ProcessLightBlock@curMs+1,c
  1561  000F50  EC42  F009         	call	_ProcessLightBlock	;wreg free
  1562                           
  1563                           ;main.c: 882: if(_isSoundPlaying && curMs >= _playingEndMs)
  1564  000F54  0100               	movlb	0	; () banked
  1565  000F56  51EF               	movf	__isSoundPlaying& (0+255),w,b
  1566  000F58  B4D8               	btfsc	status,2,c
  1567  000F5A  D013               	goto	l8621
  1568                           
  1569                           ; BSR set to: 0
  1570  000F5C  0101               	movlb	1	; () banked
  1571  000F5E  5110               	movf	__playingEndMs& (0+255),w,b
  1572  000F60  0103               	movlb	3	; () banked
  1573  000F62  5D1F               	subwf	main@curMs& (0+255),w,b
  1574  000F64  0101               	movlb	1	; () banked
  1575  000F66  5111               	movf	(__playingEndMs+1)& (0+255),w,b
  1576  000F68  0103               	movlb	3	; () banked
  1577  000F6A  5920               	subwfb	(main@curMs+1)& (0+255),w,b
  1578  000F6C  0101               	movlb	1	; () banked
  1579  000F6E  5112               	movf	(__playingEndMs+2)& (0+255),w,b
  1580  000F70  0103               	movlb	3	; () banked
  1581  000F72  5921               	subwfb	(main@curMs+2)& (0+255),w,b
  1582  000F74  0101               	movlb	1	; () banked
  1583  000F76  5113               	movf	(__playingEndMs+3)& (0+255),w,b
  1584  000F78  0103               	movlb	3	; () banked
  1585  000F7A  5922               	subwfb	(main@curMs+3)& (0+255),w,b
  1586  000F7C  B0D8               	btfsc	status,0,c
  1587                           
  1588                           ; BSR set to: 3
  1589                           ;main.c: 883: {
  1590                           ;main.c: 884: SoundPlayNextStep();
  1591  000F7E  ECA5  F015         	call	_SoundPlayNextStep	;wreg free
  1592  000F82                     l8621:
  1593  000F82  FFFF               	dw	65535	; assembler added errata NOP
  1594                           
  1595                           ;main.c: 885: }
  1596                           ;main.c: 888: uint8_t buttonPinCurState = PORTCbits.RC1;
  1597  000F84  0E00               	movlw	0
  1598  000F86  B282               	btfsc	3970,1,c	;volatile
  1599  000F88  0E01               	movlw	1
  1600  000F8A  0103               	movlb	3	; () banked
  1601  000F8C  6F1C               	movwf	main@buttonPinCurState& (0+255),b
  1602                           
  1603                           ; BSR set to: 3
  1604                           ;main.c: 894: if (buttonPinCurState != lastButtonPinState)
  1605  000F8E  0103               	movlb	3	; () banked
  1606  000F90  5118               	movf	main@lastButtonPinState& (0+255),w,b
  1607  000F92  0103               	movlb	3	; () banked
  1608  000F94  191C               	xorwf	main@buttonPinCurState& (0+255),w,b
  1609  000F96  B4D8               	btfsc	status,2,c
  1610  000F98  D00B               	goto	l8627
  1611                           
  1612                           ; BSR set to: 3
  1613                           ;main.c: 895: {
  1614                           ;main.c: 897: lastDebounceTime = curMs;
  1615  000F9A  C31F  F311         	movff	main@curMs,main@lastDebounceTime
  1616  000F9E  C320  F312         	movff	main@curMs+1,main@lastDebounceTime+1
  1617  000FA2  C321  F313         	movff	main@curMs+2,main@lastDebounceTime+2
  1618  000FA6  C322  F314         	movff	main@curMs+3,main@lastDebounceTime+3
  1619                           
  1620                           ;main.c: 898: lastButtonPinState = buttonPinCurState;
  1621  000FAA  C31C  F318         	movff	main@buttonPinCurState,main@lastButtonPinState
  1622                           
  1623                           ;main.c: 899: }
  1624  000FAE  D06B               	goto	l8647
  1625  000FB0                     l8627:
  1626  000FB0  FFFF               	dw	65535	; assembler added errata NOP
  1627                           
  1628                           ; BSR set to: 3
  1629                           ;main.c: 900: else
  1630                           ;main.c: 901: {
  1631                           ;main.c: 902: if ((curMs - lastDebounceTime) > debounceDelay)
  1632  000FB2  C311  F300         	movff	main@lastDebounceTime,??_main
  1633  000FB6  C312  F301         	movff	main@lastDebounceTime+1,??_main+1
  1634  000FBA  C313  F302         	movff	main@lastDebounceTime+2,??_main+2
  1635  000FBE  C314  F303         	movff	main@lastDebounceTime+3,??_main+3
  1636  000FC2  0103               	movlb	3	; () banked
  1637  000FC4  1F00               	comf	??_main& (0+255),f,b
  1638  000FC6  1F01               	comf	(??_main+1)& (0+255),f,b
  1639  000FC8  1F02               	comf	(??_main+2)& (0+255),f,b
  1640  000FCA  1F03               	comf	(??_main+3)& (0+255),f,b
  1641  000FCC  2B00               	incf	??_main& (0+255),f,b
  1642  000FCE  0E00               	movlw	0
  1643  000FD0  2301               	addwfc	(??_main+1)& (0+255),f,b
  1644  000FD2  2302               	addwfc	(??_main+2)& (0+255),f,b
  1645  000FD4  2303               	addwfc	(??_main+3)& (0+255),f,b
  1646  000FD6  0103               	movlb	3	; () banked
  1647  000FD8  511F               	movf	main@curMs& (0+255),w,b
  1648  000FDA  0103               	movlb	3	; () banked
  1649  000FDC  2500               	addwf	??_main& (0+255),w,b
  1650  000FDE  0103               	movlb	3	; () banked
  1651  000FE0  6F04               	movwf	(??_main+4)& (0+255),b
  1652  000FE2  0103               	movlb	3	; () banked
  1653  000FE4  5120               	movf	(main@curMs+1)& (0+255),w,b
  1654  000FE6  0103               	movlb	3	; () banked
  1655  000FE8  2101               	addwfc	(??_main+1)& (0+255),w,b
  1656  000FEA  0103               	movlb	3	; () banked
  1657  000FEC  6F05               	movwf	(??_main+5)& (0+255),b
  1658  000FEE  0103               	movlb	3	; () banked
  1659  000FF0  5121               	movf	(main@curMs+2)& (0+255),w,b
  1660  000FF2  0103               	movlb	3	; () banked
  1661  000FF4  2102               	addwfc	(??_main+2)& (0+255),w,b
  1662  000FF6  0103               	movlb	3	; () banked
  1663  000FF8  6F06               	movwf	(??_main+6)& (0+255),b
  1664  000FFA  0103               	movlb	3	; () banked
  1665  000FFC  5122               	movf	(main@curMs+3)& (0+255),w,b
  1666  000FFE  0103               	movlb	3	; () banked
  1667  001000  2103               	addwfc	(??_main+3)& (0+255),w,b
  1668  001002  0103               	movlb	3	; () banked
  1669  001004  6F07               	movwf	(??_main+7)& (0+255),b
  1670  001006  C315  F308         	movff	main@debounceDelay,??_main+8
  1671  00100A  0103               	movlb	3	; () banked
  1672  00100C  6B09               	clrf	(??_main+9)& (0+255),b
  1673  00100E  6B0A               	clrf	(??_main+10)& (0+255),b
  1674  001010  6B0B               	clrf	(??_main+11)& (0+255),b
  1675  001012  0103               	movlb	3	; () banked
  1676  001014  5104               	movf	(??_main+4)& (0+255),w,b
  1677  001016  0103               	movlb	3	; () banked
  1678  001018  5D08               	subwf	(??_main+8)& (0+255),w,b
  1679  00101A  0103               	movlb	3	; () banked
  1680  00101C  5105               	movf	(??_main+5)& (0+255),w,b
  1681  00101E  0103               	movlb	3	; () banked
  1682  001020  5909               	subwfb	(??_main+9)& (0+255),w,b
  1683  001022  0103               	movlb	3	; () banked
  1684  001024  5106               	movf	(??_main+6)& (0+255),w,b
  1685  001026  0103               	movlb	3	; () banked
  1686  001028  590A               	subwfb	(??_main+10)& (0+255),w,b
  1687  00102A  0103               	movlb	3	; () banked
  1688  00102C  5107               	movf	(??_main+7)& (0+255),w,b
  1689  00102E  0103               	movlb	3	; () banked
  1690  001030  590B               	subwfb	(??_main+11)& (0+255),w,b
  1691  001032  B0D8               	btfsc	status,0,c
  1692  001034  D028               	goto	l8647
  1693                           
  1694                           ; BSR set to: 3
  1695                           ;main.c: 903: {
  1696                           ;main.c: 908: if (buttonPinCurState != buttonState)
  1697  001036  0103               	movlb	3	; () banked
  1698  001038  5119               	movf	main@buttonState& (0+255),w,b
  1699  00103A  0103               	movlb	3	; () banked
  1700  00103C  191C               	xorwf	main@buttonPinCurState& (0+255),w,b
  1701  00103E  B4D8               	btfsc	status,2,c
  1702  001040  D022               	goto	l8647
  1703                           
  1704                           ; BSR set to: 3
  1705                           ;main.c: 909: {
  1706                           ;main.c: 910: buttonState = buttonPinCurState;
  1707  001042  C31C  F319         	movff	main@buttonPinCurState,main@buttonState
  1708                           
  1709                           ; BSR set to: 3
  1710                           ;main.c: 914: if (buttonState == 0)
  1711  001046  0103               	movlb	3	; () banked
  1712  001048  5119               	movf	main@buttonState& (0+255),w,b
  1713  00104A  0103               	movlb	3	; () banked
  1714  00104C  A4D8               	btfss	status,2,c
  1715  00104E  D017               	goto	l8645
  1716                           
  1717                           ; BSR set to: 3
  1718                           ;main.c: 915: {
  1719                           ;main.c: 916: buttonPressed = 1;
  1720  001050  0E01               	movlw	1
  1721  001052  0103               	movlb	3	; () banked
  1722  001054  6F0C               	movwf	main@buttonPressed& (0+255),b
  1723                           
  1724                           ;main.c: 918: if(_eventFromCommand.IsFire)
  1725  001056  0100               	movlb	0	; () banked
  1726  001058  51D2               	movf	__eventFromCommand& (0+255),w,b
  1727  00105A  B4D8               	btfsc	status,2,c
  1728  00105C  D004               	goto	l8639
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 919: {
  1732                           ;main.c: 920: ResetEventFromCommand(1);
  1733  00105E  0E01               	movlw	1
  1734  001060  EC43  F01E         	call	_ResetEventFromCommand
  1735                           
  1736                           ;main.c: 921: }
  1737  001064  D010               	goto	l8647
  1738  001066                     l8639:
  1739  001066  FFFF               	dw	65535	; assembler added errata NOP
  1740                           
  1741                           ;main.c: 923: else if(_currenDiaryEvent.IsFire)
  1742  001068  5039               	movf	__currenDiaryEvent,w,c
  1743  00106A  B4D8               	btfsc	status,2,c
  1744  00106C  D004               	goto	l8643
  1745                           
  1746                           ;main.c: 924: {
  1747                           ;main.c: 925: ResetEvent(1);
  1748  00106E  0E01               	movlw	1
  1749  001070  EC2B  F01D         	call	_ResetEvent
  1750                           
  1751                           ;main.c: 926: }
  1752  001074  D008               	goto	l8647
  1753  001076                     l8643:
  1754  001076  FFFF               	dw	65535	; assembler added errata NOP
  1755                           
  1756                           ;main.c: 927: else
  1757                           ;main.c: 928: {
  1758                           ;main.c: 929: StopPlaying();
  1759  001078  EC4A  F001         	call	_StopPlaying	;wreg free
  1760                           
  1761                           ;main.c: 930: }
  1762                           ;main.c: 932: }
  1763  00107C  D004               	goto	l8647
  1764  00107E                     l8645:
  1765  00107E  FFFF               	dw	65535	; assembler added errata NOP
  1766                           
  1767                           ;main.c: 933: else
  1768                           ;main.c: 934: {
  1769                           ;main.c: 935: buttonPressed = 0;
  1770  001080  0E00               	movlw	0
  1771  001082  0103               	movlb	3	; () banked
  1772  001084  6F0C               	movwf	main@buttonPressed& (0+255),b
  1773  001086                     l8647:
  1774  001086  FFFF               	dw	65535	; assembler added errata NOP
  1775                           
  1776                           ;main.c: 936: }
  1777                           ;main.c: 937: }
  1778                           ;main.c: 938: }
  1779                           ;main.c: 939: }
  1780                           ;main.c: 960: if(curMs - lastMs >= 1000)
  1781  001088  C30D  F300         	movff	main@lastMs,??_main
  1782  00108C  C30E  F301         	movff	main@lastMs+1,??_main+1
  1783  001090  C30F  F302         	movff	main@lastMs+2,??_main+2
  1784  001094  C310  F303         	movff	main@lastMs+3,??_main+3
  1785  001098  0103               	movlb	3	; () banked
  1786  00109A  1F00               	comf	??_main& (0+255),f,b
  1787  00109C  1F01               	comf	(??_main+1)& (0+255),f,b
  1788  00109E  1F02               	comf	(??_main+2)& (0+255),f,b
  1789  0010A0  1F03               	comf	(??_main+3)& (0+255),f,b
  1790  0010A2  2B00               	incf	??_main& (0+255),f,b
  1791  0010A4  0E00               	movlw	0
  1792  0010A6  2301               	addwfc	(??_main+1)& (0+255),f,b
  1793  0010A8  2302               	addwfc	(??_main+2)& (0+255),f,b
  1794  0010AA  2303               	addwfc	(??_main+3)& (0+255),f,b
  1795  0010AC  0103               	movlb	3	; () banked
  1796  0010AE  511F               	movf	main@curMs& (0+255),w,b
  1797  0010B0  0103               	movlb	3	; () banked
  1798  0010B2  2500               	addwf	??_main& (0+255),w,b
  1799  0010B4  0103               	movlb	3	; () banked
  1800  0010B6  6F04               	movwf	(??_main+4)& (0+255),b
  1801  0010B8  0103               	movlb	3	; () banked
  1802  0010BA  5120               	movf	(main@curMs+1)& (0+255),w,b
  1803  0010BC  0103               	movlb	3	; () banked
  1804  0010BE  2101               	addwfc	(??_main+1)& (0+255),w,b
  1805  0010C0  0103               	movlb	3	; () banked
  1806  0010C2  6F05               	movwf	(??_main+5)& (0+255),b
  1807  0010C4  0103               	movlb	3	; () banked
  1808  0010C6  5121               	movf	(main@curMs+2)& (0+255),w,b
  1809  0010C8  0103               	movlb	3	; () banked
  1810  0010CA  2102               	addwfc	(??_main+2)& (0+255),w,b
  1811  0010CC  0103               	movlb	3	; () banked
  1812  0010CE  6F06               	movwf	(??_main+6)& (0+255),b
  1813  0010D0  0103               	movlb	3	; () banked
  1814  0010D2  5122               	movf	(main@curMs+3)& (0+255),w,b
  1815  0010D4  0103               	movlb	3	; () banked
  1816  0010D6  2103               	addwfc	(??_main+3)& (0+255),w,b
  1817  0010D8  0103               	movlb	3	; () banked
  1818  0010DA  6F07               	movwf	(??_main+7)& (0+255),b
  1819  0010DC  0103               	movlb	3	; () banked
  1820  0010DE  5107               	movf	(??_main+7)& (0+255),w,b
  1821  0010E0  0103               	movlb	3	; () banked
  1822  0010E2  1106               	iorwf	(??_main+6)& (0+255),w,b
  1823  0010E4  E108               	bnz	u7920
  1824  0010E6  0EE8               	movlw	232
  1825  0010E8  0103               	movlb	3	; () banked
  1826  0010EA  5D04               	subwf	(??_main+4)& (0+255),w,b
  1827  0010EC  0E03               	movlw	3
  1828  0010EE  0103               	movlb	3	; () banked
  1829  0010F0  5905               	subwfb	(??_main+5)& (0+255),w,b
  1830  0010F2  A0D8               	btfss	status,0,c
  1831  0010F4  D0A0               	goto	l8691
  1832  0010F6                     u7920:
  1833                           
  1834                           ; BSR set to: 3
  1835                           ;main.c: 961: {
  1836                           ;main.c: 962: AddSecond();
  1837  0010F6  EC55  F001         	call	_AddSecond	;wreg free
  1838                           
  1839                           ;main.c: 964: if(_eventFromCommand.IsFire && *GetTime() >= _eventFromCommand.ResetSecond
      +                          )
  1840  0010FA  0100               	movlb	0	; () banked
  1841  0010FC  51D2               	movf	__eventFromCommand& (0+255),w,b
  1842  0010FE  B4D8               	btfsc	status,2,c
  1843  001100  D01D               	goto	l8657
  1844                           
  1845                           ; BSR set to: 0
  1846  001102  EC92  F001         	call	_GetTime	;wreg free
  1847  001106  C021  FFD9         	movff	?_GetTime,fsr2l
  1848  00110A  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1849  00110E  0100               	movlb	0	; () banked
  1850  001110  51D4               	movf	(__eventFromCommand+2)& (0+255),w,b
  1851  001112  5CDE               	subwf	postinc2,w,c
  1852  001114  0100               	movlb	0	; () banked
  1853  001116  51D5               	movf	(__eventFromCommand+3)& (0+255),w,b
  1854  001118  58DE               	subwfb	postinc2,w,c
  1855  00111A  0100               	movlb	0	; () banked
  1856  00111C  51D6               	movf	(__eventFromCommand+4)& (0+255),w,b
  1857  00111E  58DE               	subwfb	postinc2,w,c
  1858  001120  50DE               	movf	postinc2,w,c
  1859  001122  0A80               	xorlw	128
  1860  001124  0103               	movlb	3	; () banked
  1861  001126  6F04               	movwf	(??_main+4)& (0+255),b
  1862  001128  0100               	movlb	0	; () banked
  1863  00112A  51D7               	movf	(__eventFromCommand+5)& (0+255),w,b
  1864  00112C  0A80               	xorlw	128
  1865  00112E  0103               	movlb	3	; () banked
  1866  001130  5904               	subwfb	(??_main+4)& (0+255),w,b
  1867  001132  A0D8               	btfss	status,0,c
  1868  001134  D003               	goto	l8657
  1869                           
  1870                           ; BSR set to: 3
  1871                           ;main.c: 965: {
  1872                           ;main.c: 966: ResetEventFromCommand(0);
  1873  001136  0E00               	movlw	0
  1874  001138  EC43  F01E         	call	_ResetEventFromCommand
  1875  00113C                     l8657:
  1876  00113C  FFFF               	dw	65535	; assembler added errata NOP
  1877                           
  1878                           ;main.c: 967: }
  1879                           ;main.c: 968: if(_currenDiaryEvent.IsFire && *GetTime() >= _currenDiaryEvent.ResetSecond
      +                          )
  1880  00113E  5039               	movf	__currenDiaryEvent,w,c
  1881  001140  B4D8               	btfsc	status,2,c
  1882  001142  D019               	goto	l8663
  1883  001144  EC92  F001         	call	_GetTime	;wreg free
  1884  001148  C021  FFD9         	movff	?_GetTime,fsr2l
  1885  00114C  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1886  001150  503D               	movf	__currenDiaryEvent+4,w,c
  1887  001152  5CDE               	subwf	postinc2,w,c
  1888  001154  503E               	movf	__currenDiaryEvent+5,w,c
  1889  001156  58DE               	subwfb	postinc2,w,c
  1890  001158  503F               	movf	__currenDiaryEvent+6,w,c
  1891  00115A  58DE               	subwfb	postinc2,w,c
  1892  00115C  50DE               	movf	postinc2,w,c
  1893  00115E  0A80               	xorlw	128
  1894  001160  0103               	movlb	3	; () banked
  1895  001162  6F04               	movwf	(??_main+4)& (0+255),b
  1896  001164  5040               	movf	__currenDiaryEvent+7,w,c
  1897  001166  0A80               	xorlw	128
  1898  001168  0103               	movlb	3	; () banked
  1899  00116A  5904               	subwfb	(??_main+4)& (0+255),w,b
  1900  00116C  A0D8               	btfss	status,0,c
  1901  00116E  D003               	goto	l8663
  1902                           
  1903                           ; BSR set to: 3
  1904                           ;main.c: 969: {
  1905                           ;main.c: 970: ResetEvent(0);
  1906  001170  0E00               	movlw	0
  1907  001172  EC2B  F01D         	call	_ResetEvent
  1908  001176                     l8663:
  1909  001176  FFFF               	dw	65535	; assembler added errata NOP
  1910                           
  1911                           ;main.c: 971: }
  1912                           ;main.c: 973: _MODBUSInputRegs[5] = *GetTime();
  1913  001178  EC92  F001         	call	_GetTime	;wreg free
  1914  00117C  C021  FFD9         	movff	?_GetTime,fsr2l
  1915  001180  C022  FFDA         	movff	?_GetTime+1,fsr2h
  1916  001184  CFDE F1DE          	movff	postinc2,__MODBUSInputRegs+10
  1917  001188  CFDD F1DF          	movff	postdec2,__MODBUSInputRegs+11
  1918                           
  1919                           ;main.c: 975: uint16_t totalMinutes;
  1920                           ;main.c: 976: if(getTotalMinutes(&totalMinutes) && (oldMinute != totalMinutes))
  1921  00118C  0E1D               	movlw	low main@totalMinutes
  1922  00118E  6E21               	movwf	getTotalMinutes@totalMinutes,c
  1923  001190  0E03               	movlw	high main@totalMinutes
  1924  001192  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  1925  001194  ECA7  F000         	call	_getTotalMinutes	;wreg free
  1926  001198  0900               	iorlw	0
  1927  00119A  B4D8               	btfsc	status,2,c
  1928  00119C  D043               	goto	l8689
  1929  00119E  0103               	movlb	3	; () banked
  1930  0011A0  511D               	movf	main@totalMinutes& (0+255),w,b
  1931  0011A2  0103               	movlb	3	; () banked
  1932  0011A4  1916               	xorwf	main@oldMinute& (0+255),w,b
  1933  0011A6  E106               	bnz	u7980
  1934  0011A8  0103               	movlb	3	; () banked
  1935  0011AA  511E               	movf	(main@totalMinutes+1)& (0+255),w,b
  1936  0011AC  0103               	movlb	3	; () banked
  1937  0011AE  1917               	xorwf	(main@oldMinute+1)& (0+255),w,b
  1938  0011B0  B4D8               	btfsc	status,2,c
  1939  0011B2  D038               	goto	l8689
  1940  0011B4                     u7980:
  1941                           
  1942                           ; BSR set to: 3
  1943                           ;main.c: 977: {
  1944                           ;main.c: 978: _MODBUSInputRegs[8] = totalMinutes;
  1945  0011B4  C31D  F1E4         	movff	main@totalMinutes,__MODBUSInputRegs+16
  1946  0011B8  C31E  F1E5         	movff	main@totalMinutes+1,__MODBUSInputRegs+17
  1947                           
  1948                           ; BSR set to: 3
  1949                           ;main.c: 979: uint8_t hour = 0, minute = 0;
  1950  0011BC  0E00               	movlw	0
  1951  0011BE  0103               	movlb	3	; () banked
  1952  0011C0  6F1A               	movwf	main@hour& (0+255),b
  1953  0011C2  0E00               	movlw	0
  1954  0011C4  0103               	movlb	3	; () banked
  1955  0011C6  6F1B               	movwf	main@minute& (0+255),b
  1956                           
  1957                           ; BSR set to: 3
  1958                           ;main.c: 980: getHourMin(&hour, &minute);
  1959  0011C8  0E1A               	movlw	low main@hour
  1960  0011CA  6E21               	movwf	getHourMin@hour,c
  1961  0011CC  0E03               	movlw	high main@hour
  1962  0011CE  6E22               	movwf	getHourMin@hour+1,c
  1963  0011D0  0E1B               	movlw	low main@minute
  1964  0011D2  6E23               	movwf	getHourMin@min,c
  1965  0011D4  0E03               	movlw	high main@minute
  1966  0011D6  6E24               	movwf	getHourMin@min+1,c
  1967  0011D8  EC92  F000         	call	_getHourMin	;wreg free
  1968                           
  1969                           ;main.c: 981: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1970  0011DC  0103               	movlb	3	; () banked
  1971  0011DE  511A               	movf	main@hour& (0+255),w,b
  1972  0011E0  0103               	movlb	3	; () banked
  1973  0011E2  6F00               	movwf	??_main& (0+255),b
  1974  0011E4  0103               	movlb	3	; () banked
  1975  0011E6  511B               	movf	main@minute& (0+255),w,b
  1976  0011E8  0101               	movlb	1	; () banked
  1977  0011EA  6FD6               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1978  0011EC  C300  F1D7         	movff	??_main,__MODBUSInputRegs+3
  1979                           
  1980                           ; BSR set to: 1
  1981                           ;main.c: 984: if(totalMinutes == 0)
  1982  0011F0  0103               	movlb	3	; () banked
  1983  0011F2  511D               	movf	main@totalMinutes& (0+255),w,b
  1984  0011F4  0103               	movlb	3	; () banked
  1985  0011F6  111E               	iorwf	(main@totalMinutes+1)& (0+255),w,b
  1986  0011F8  A4D8               	btfss	status,2,c
  1987  0011FA  D00D               	goto	l8685
  1988                           
  1989                           ; BSR set to: 3
  1990                           ;main.c: 985: {
  1991                           ;main.c: 986: SwitchOffAllDiaryLeds();
  1992  0011FC  ECE9  F01F         	call	_SwitchOffAllDiaryLeds	;wreg free
  1993                           
  1994                           ;main.c: 987: _currenDiaryEvent.NextEventNum = 0xff;
  1995  001200  6841               	setf	__currenDiaryEvent+8,c
  1996                           
  1997                           ;main.c: 988: LoadNextEvent();
  1998  001202  ECFD  F011         	call	_LoadNextEvent	;wreg free
  1999                           
  2000                           ;main.c: 989: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  2001  001206  503A               	movf	__currenDiaryEvent+1,w,c
  2002  001208  0103               	movlb	3	; () banked
  2003  00120A  6F00               	movwf	??_main& (0+255),b
  2004  00120C  5041               	movf	__currenDiaryEvent+8,w,c
  2005  00120E  0101               	movlb	1	; () banked
  2006  001210  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  2007  001212  C300  F1D9         	movff	??_main,__MODBUSInputRegs+5
  2008  001216                     l8685:
  2009  001216  FFFF               	dw	65535	; assembler added errata NOP
  2010                           
  2011                           ;main.c: 990: }
  2012                           ;main.c: 991: oldMinute = totalMinutes;
  2013  001218  C31D  F316         	movff	main@totalMinutes,main@oldMinute
  2014  00121C  C31E  F317         	movff	main@totalMinutes+1,main@oldMinute+1
  2015                           
  2016                           ;main.c: 992: ProcessDiary();
  2017  001220  ECA2  F018         	call	_ProcessDiary	;wreg free
  2018  001224                     l8689:
  2019  001224  FFFF               	dw	65535	; assembler added errata NOP
  2020                           
  2021                           ;main.c: 993: }
  2022                           ;main.c: 997: lastMs = curMs;
  2023  001226  C31F  F30D         	movff	main@curMs,main@lastMs
  2024  00122A  C320  F30E         	movff	main@curMs+1,main@lastMs+1
  2025  00122E  C321  F30F         	movff	main@curMs+2,main@lastMs+2
  2026  001232  C322  F310         	movff	main@curMs+3,main@lastMs+3
  2027  001236                     l8691:
  2028  001236  FFFF               	dw	65535	; assembler added errata NOP
  2029                           
  2030                           ;main.c: 999: }
  2031                           ;main.c: 1000: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInp
      +                          utRegs, 15, _MODBUSHoldingRegs, 15);
  2032  001238  C0E0  F0B5         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  2033  00123C  C0E1  F0B6         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  2034  001240  0EF7               	movlw	low __MODBUSCoils
  2035  001242  0100               	movlb	0	; () banked
  2036  001244  6FB7               	movwf	ModbusPoll@coils& (0+255),b
  2037  001246  0E00               	movlw	high __MODBUSCoils
  2038  001248  0100               	movlb	0	; () banked
  2039  00124A  6FB8               	movwf	(ModbusPoll@coils+1)& (0+255),b
  2040  00124C  0ED4               	movlw	low __MODBUSInputRegs
  2041  00124E  0100               	movlb	0	; () banked
  2042  001250  6FB9               	movwf	ModbusPoll@inputRegs& (0+255),b
  2043  001252  0E01               	movlw	high __MODBUSInputRegs
  2044  001254  0100               	movlb	0	; () banked
  2045  001256  6FBA               	movwf	(ModbusPoll@inputRegs+1)& (0+255),b
  2046  001258  0E0F               	movlw	15
  2047  00125A  0100               	movlb	0	; () banked
  2048  00125C  6FBB               	movwf	ModbusPoll@inputRegsCount& (0+255),b
  2049  00125E  0EB6               	movlw	low __MODBUSHoldingRegs
  2050  001260  0100               	movlb	0	; () banked
  2051  001262  6FBC               	movwf	ModbusPoll@holdingRegs& (0+255),b
  2052  001264  0E01               	movlw	high __MODBUSHoldingRegs
  2053  001266  0100               	movlb	0	; () banked
  2054  001268  6FBD               	movwf	(ModbusPoll@holdingRegs+1)& (0+255),b
  2055  00126A  0E0F               	movlw	15
  2056  00126C  0100               	movlb	0	; () banked
  2057  00126E  6FBE               	movwf	ModbusPoll@holdingRegsCount& (0+255),b
  2058  001270  EC0B  F00C         	call	_ModbusPoll	;wreg free
  2059  001274  0100               	movlb	0	; () banked
  2060  001276  6FEC               	movwf	_modbusState& (0+255),b
  2061  001278  6BED               	clrf	(_modbusState+1)& (0+255),b
  2062  00127A  BFEC               	btfsc	_modbusState& (0+255),7,b
  2063  00127C  07ED               	decf	(_modbusState+1)& (0+255),f,b
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 1001: io_poll();
  2067  00127E  ECCF  F017         	call	_io_poll	;wreg free
  2068  001282  D657               	goto	l450
  2069  001284                     __end_of_main:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1h	equ	0xFE2
  2079                           fsr1l	equ	0xFE1
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _pwm_init *****************
  2087 ;; Defined at:
  2088 ;;		line 386 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		None
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2102 ;;      Params:         0       0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    2
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text1
  2117  00027E                     __ptext1:
  2118                           	opt stack 0
  2119  00027E                     _pwm_init:
  2120                           	opt stack 28
  2121                           
  2122                           ;incstack = 0
  2123  00027E  FFFF               	dw	65535
  2124                           
  2125                           ;main.c: 398: CCP1CONbits.CCP1M = 0x0f;
  2126  000280  80BD               	bsf	4029,0,c	;volatile
  2127  000282  82BD               	bsf	4029,1,c	;volatile
  2128  000284  84BD               	bsf	4029,2,c	;volatile
  2129  000286  86BD               	bsf	4029,3,c	;volatile
  2130                           
  2131                           ;main.c: 407: PR2 = 255;
  2132  000288  68CB               	setf	4043,c	;volatile
  2133                           
  2134                           ;main.c: 410: T2CONbits.T2CKPS1 = 1;
  2135  00028A  82CA               	bsf	4042,1,c	;volatile
  2136                           
  2137                           ;main.c: 411: T2CONbits.T2CKPS0 = 0;
  2138  00028C  90CA               	bcf	4042,0,c	;volatile
  2139                           
  2140                           ;main.c: 414: TRISCbits.RC2 = 0;
  2141  00028E  9494               	bcf	3988,2,c	;volatile
  2142  000290  0012               	return		;funcret
  2143  000292  FFFF               	dw	65535	; errata NOP
  2144  000294                     __end_of_pwm_init:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1h	equ	0xFE2
  2154                           fsr1l	equ	0xFE1
  2155                           postinc2	equ	0xFDE
  2156                           postdec2	equ	0xFDD
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _io_poll *****************
  2162 ;; Defined at:
  2163 ;;		line 1121 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  lastFunction    2   20[BANK0 ] PTR unsigned char 
  2168 ;;		 -> _lastFunction(1), 
  2169 ;;  lastAddress     2   17[BANK0 ] unsigned int 
  2170 ;;  lastEndAddre    2   15[BANK0 ] unsigned int 
  2171 ;;  lastCommand     1   19[BANK0 ] unsigned char 
  2172 ;;  v1              1    0        unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2182 ;;      Params:         0       0       0       0       0       0       0
  2183 ;;      Locals:         0       7       0       0       0       0       0
  2184 ;;      Temps:          0       4       0       0       0       0       0
  2185 ;;      Totals:         0      11       0       0       0       0       0
  2186 ;;Total ram usage:       11 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    7
  2189 ;; This function calls:
  2190 ;;		_InitFromEeprom
  2191 ;;		_LightStatusLed
  2192 ;;		_LoadNextEvent
  2193 ;;		_ModbusGetLastCommand
  2194 ;;		_ModbusSetExceptionStatusBit
  2195 ;;		_ProcessUserCommands
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text2
  2202  002F9E                     __ptext2:
  2203                           	opt stack 0
  2204  002F9E                     _io_poll:
  2205                           	opt stack 23
  2206                           
  2207                           ;incstack = 0
  2208  002F9E  FFFF               	dw	65535
  2209                           
  2210                           ;main.c: 1123: uint16_t lastAddress;
  2211                           ;main.c: 1124: uint16_t lastEndAddress;
  2212                           ;main.c: 1125: uint8_t lastCommand;
  2213                           ;main.c: 1127: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddres
      +                          s, &lastCommand);
  2214  002FA0  0E91               	movlw	low io_poll@lastAddress
  2215  002FA2  6E21               	movwf	ModbusGetLastCommand@address,c
  2216  002FA4  0E00               	movlw	high io_poll@lastAddress
  2217  002FA6  6E22               	movwf	ModbusGetLastCommand@address+1,c
  2218  002FA8  0E8F               	movlw	low io_poll@lastEndAddress
  2219  002FAA  6E23               	movwf	ModbusGetLastCommand@count,c
  2220  002FAC  0E00               	movlw	high io_poll@lastEndAddress
  2221  002FAE  6E24               	movwf	ModbusGetLastCommand@count+1,c
  2222  002FB0  0E93               	movlw	low io_poll@lastCommand
  2223  002FB2  6E25               	movwf	ModbusGetLastCommand@command,c
  2224  002FB4  0E00               	movlw	high io_poll@lastCommand
  2225  002FB6  6E26               	movwf	ModbusGetLastCommand@command+1,c
  2226  002FB8  EC17  F01E         	call	_ModbusGetLastCommand	;wreg free
  2227  002FBC  C021  F094         	movff	?_ModbusGetLastCommand,io_poll@lastFunction
  2228  002FC0  C022  F095         	movff	?_ModbusGetLastCommand+1,io_poll@lastFunction+1
  2229                           
  2230                           ;main.c: 1128: if(*lastFunction == MB_FC_NONE)
  2231  002FC4  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2232  002FC8  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2233  002FCC  50DF               	movf	indf2,w,c
  2234  002FCE  B4D8               	btfsc	status,2,c
  2235  002FD0  D04D               	goto	l510
  2236                           
  2237                           ;main.c: 1131: lastEndAddress += lastAddress - 1;
  2238                           
  2239                           ;main.c: 1129: return;
  2240  002FD2  0EFF               	movlw	255
  2241  002FD4  0100               	movlb	0	; () banked
  2242  002FD6  6F8B               	movwf	??_io_poll& (0+255),b
  2243  002FD8  0EFF               	movlw	255
  2244  002FDA  0100               	movlb	0	; () banked
  2245  002FDC  6F8C               	movwf	(??_io_poll+1)& (0+255),b
  2246  002FDE  C091  F08D         	movff	io_poll@lastAddress,??_io_poll+2
  2247  002FE2  C092  F08E         	movff	io_poll@lastAddress+1,??_io_poll+3
  2248  002FE6  0100               	movlb	0	; () banked
  2249  002FE8  518B               	movf	??_io_poll& (0+255),w,b
  2250  002FEA  0100               	movlb	0	; () banked
  2251  002FEC  278D               	addwf	(??_io_poll+2)& (0+255),f,b
  2252  002FEE  0100               	movlb	0	; () banked
  2253  002FF0  518C               	movf	(??_io_poll+1)& (0+255),w,b
  2254  002FF2  0100               	movlb	0	; () banked
  2255  002FF4  238E               	addwfc	(??_io_poll+3)& (0+255),f,b
  2256  002FF6  0100               	movlb	0	; () banked
  2257  002FF8  518D               	movf	(??_io_poll+2)& (0+255),w,b
  2258  002FFA  0100               	movlb	0	; () banked
  2259  002FFC  278F               	addwf	io_poll@lastEndAddress& (0+255),f,b
  2260  002FFE  0100               	movlb	0	; () banked
  2261  003000  518E               	movf	(??_io_poll+3)& (0+255),w,b
  2262  003002  0100               	movlb	0	; () banked
  2263  003004  2390               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;main.c: 1133: uint8_t v1;
  2267                           ;main.c: 1134: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  2268  003006  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2269  00300A  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2270  00300E  0E64               	movlw	100
  2271  003010  18DE               	xorwf	postinc2,w,c
  2272  003012  A4D8               	btfss	status,2,c
  2273  003014  D00F               	goto	l8575
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;main.c: 1135: {
  2277                           ;main.c: 1136: if(lastCommand == 0x10)
  2278  003016  0E10               	movlw	16
  2279  003018  0100               	movlb	0	; () banked
  2280  00301A  1993               	xorwf	io_poll@lastCommand& (0+255),w,b
  2281  00301C  A4D8               	btfss	status,2,c
  2282  00301E  D026               	goto	l510
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 1137: {
  2286                           ;main.c: 1138: LightStatusLed(0x05, 0, 0);
  2287  003020  0E00               	movlw	0
  2288  003022  6E21               	movwf	LightStatusLed@on,c
  2289  003024  0E00               	movlw	0
  2290  003026  6E22               	movwf	LightStatusLed@blink,c
  2291  003028  0E05               	movlw	5
  2292  00302A  ECA0  F014         	call	_LightStatusLed
  2293                           
  2294                           ;main.c: 1139: LoadNextEvent();
  2295  00302E  ECFD  F011         	call	_LoadNextEvent	;wreg free
  2296                           
  2297                           ;main.c: 1140: }
  2298                           ;main.c: 1141: return;
  2299  003032  D01C               	goto	l510
  2300  003034                     l8575:
  2301  003034  FFFF               	dw	65535	; assembler added errata NOP
  2302                           
  2303                           ;main.c: 1142: }
  2304                           ;main.c: 1143: if(*lastFunction == MB_FC_USER_COMMAND)
  2305  003036  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2306  00303A  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2307  00303E  0E65               	movlw	101
  2308  003040  18DE               	xorwf	postinc2,w,c
  2309  003042  A4D8               	btfss	status,2,c
  2310  003044  D003               	goto	l8585
  2311                           
  2312                           ;main.c: 1144: {
  2313                           ;main.c: 1145: ProcessUserCommands();
  2314  003046  EC68  F019         	call	_ProcessUserCommands	;wreg free
  2315                           
  2316                           ;main.c: 1146: return;
  2317  00304A  D010               	goto	l510
  2318  00304C                     l8585:
  2319  00304C  FFFF               	dw	65535	; assembler added errata NOP
  2320                           
  2321                           ;main.c: 1152: }
  2322                           ;main.c: 1155: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  2323  00304E  C094  FFD9         	movff	io_poll@lastFunction,fsr2l
  2324  003052  C095  FFDA         	movff	io_poll@lastFunction+1,fsr2h
  2325  003056  0E15               	movlw	21
  2326  003058  18DE               	xorwf	postinc2,w,c
  2327  00305A  A4D8               	btfss	status,2,c
  2328  00305C  D007               	goto	l510
  2329                           
  2330                           ;main.c: 1156: {
  2331                           ;main.c: 1157: InitFromEeprom();
  2332  00305E  EC06  F019         	call	_InitFromEeprom	;wreg free
  2333                           
  2334                           ;main.c: 1158: ModbusSetExceptionStatusBit(0, 1);
  2335  003062  0E01               	movlw	1
  2336  003064  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  2337  003066  0E00               	movlw	0
  2338  003068  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
  2339  00306C                     l510:
  2340  00306C  FFFF               	dw	65535	; assembler added errata NOP
  2341  00306E  0012               	return		;funcret
  2342  003070  FFFF               	dw	65535	; errata NOP
  2343  003072                     __end_of_io_poll:
  2344                           	opt stack 0
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1h	equ	0xFE2
  2353                           fsr1l	equ	0xFE1
  2354                           indf2	equ	0xFDF
  2355                           postinc2	equ	0xFDE
  2356                           postdec2	equ	0xFDD
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function _ProcessUserCommands *****************
  2362 ;; Defined at:
  2363 ;;		line 1093 in file "main.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  v1              1    0        unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2377 ;;      Params:         0       0       0       0       0       0       0
  2378 ;;      Locals:         0       0       0       0       0       0       0
  2379 ;;      Temps:          0       1       0       0       0       0       0
  2380 ;;      Totals:         0       1       0       0       0       0       0
  2381 ;;Total ram usage:        1 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    6
  2384 ;; This function calls:
  2385 ;;		_CommandSetLed
  2386 ;;		_CommandSetStatusLed
  2387 ;;		_InitFromEeprom
  2388 ;;		_ModbusGetUserCommandAdditional1Lo
  2389 ;;		_ModbusGetUserCommandData
  2390 ;;		_ModbusGetUserCommandId
  2391 ;;		_ModbusSetExceptionStatusBit
  2392 ;;		_PlaySound
  2393 ;; This function is called by:
  2394 ;;		_io_poll
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text3
  2399  0032D0                     __ptext3:
  2400                           	opt stack 0
  2401  0032D0                     _ProcessUserCommands:
  2402                           	opt stack 23
  2403                           
  2404                           ;incstack = 0
  2405  0032D0  FFFF               	dw	65535
  2406                           
  2407                           ;main.c: 1095: uint8_t v1;
  2408                           ;main.c: 1096: switch(*ModbusGetUserCommandId())
  2409  0032D2  D044               	goto	l7317
  2410  0032D4                     l7281:
  2411  0032D4  FFFF               	dw	65535	; assembler added errata NOP
  2412                           
  2413                           ;main.c: 1099: eventCount = 0;
  2414  0032D6  0E00               	movlw	0
  2415  0032D8  6E57               	movwf	_eventCount,c
  2416  0032DA                     l493:
  2417  0032DA  FFFF               	dw	65535	; assembler added errata NOP
  2418  0032DC  B2A6               	btfsc	4006,1,c	;volatile
  2419  0032DE  D7FD               	goto	l493
  2420  0032E0  0E0A               	movlw	10
  2421  0032E2  6EA9               	movwf	4009,c	;volatile
  2422  0032E4  0E00               	movlw	0
  2423  0032E6  6EA8               	movwf	4008,c	;volatile
  2424  0032E8  9EA6               	bcf	4006,7,c	;volatile
  2425  0032EA  9CA6               	bcf	4006,6,c	;volatile
  2426  0032EC  90D8               	bcf	status,0,c	;volatile
  2427  0032EE  BEF2               	btfsc	intcon,7,c	;volatile
  2428  0032F0  80D8               	bsf	status,0,c	;volatile
  2429  0032F2  9EF2               	bcf	intcon,7,c	;volatile
  2430  0032F4  84A6               	bsf	4006,2,c	;volatile
  2431  0032F6  0E55               	movlw	85
  2432  0032F8  6EA7               	movwf	4007,c	;volatile
  2433  0032FA  0EAA               	movlw	170
  2434  0032FC  6EA7               	movwf	4007,c	;volatile
  2435  0032FE  82A6               	bsf	4006,1,c	;volatile
  2436  003300  94A6               	bcf	4006,2,c	;volatile
  2437  003302  B0D8               	btfsc	status,0,c	;volatile
  2438  003304  8EF2               	bsf	intcon,7,c	;volatile
  2439  003306                     l499:
  2440  003306  FFFF               	dw	65535	; assembler added errata NOP
  2441  003308  B2A6               	btfsc	4006,1,c	;volatile
  2442  00330A  D7FD               	goto	l499
  2443                           
  2444                           ;main.c: 1103: InitFromEeprom();
  2445  00330C  EC06  F019         	call	_InitFromEeprom	;wreg free
  2446                           
  2447                           ;main.c: 1104: ModbusSetExceptionStatusBit(0, 1);
  2448  003310  0E01               	movlw	1
  2449  003312  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  2450  003314  0E00               	movlw	0
  2451  003316  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
  2452                           
  2453                           ;main.c: 1105: break;
  2454  00331A  D034               	goto	l506
  2455  00331C                     l7309:
  2456  00331C  FFFF               	dw	65535	; assembler added errata NOP
  2457                           
  2458                           ;main.c: 1107: CommandSetLed();
  2459  00331E  EC63  F010         	call	_CommandSetLed	;wreg free
  2460                           
  2461                           ;main.c: 1108: break;
  2462  003322  D030               	goto	l506
  2463  003324                     l7311:
  2464  003324  FFFF               	dw	65535	; assembler added errata NOP
  2465                           
  2466                           ;main.c: 1112: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo
      +                          ());
  2467  003326  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2468  00332A  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  2469  00332E  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  2470  003332  50DF               	movf	indf2,w,c
  2471  003334  0100               	movlb	0	; () banked
  2472  003336  6F8A               	movwf	??_ProcessUserCommands& (0+255),b
  2473  003338  0100               	movlb	0	; () banked
  2474  00333A  518A               	movf	??_ProcessUserCommands& (0+255),w,b
  2475  00333C  6E31               	movwf	PlaySound@playDuration,c
  2476  00333E  6A32               	clrf	PlaySound@playDuration+1,c
  2477  003340  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  2478  003344  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  2479  003348  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  2480  00334C  50DF               	movf	indf2,w,c
  2481  00334E  EC27  F015         	call	_PlaySound
  2482                           
  2483                           ;main.c: 1113: break;
  2484  003352  D018               	goto	l506
  2485  003354                     l7313:
  2486  003354  FFFF               	dw	65535	; assembler added errata NOP
  2487                           
  2488                           ;main.c: 1116: CommandSetStatusLed();
  2489  003356  EC22  F01A         	call	_CommandSetStatusLed	;wreg free
  2490                           
  2491                           ;main.c: 1118: }
  2492                           
  2493                           ;main.c: 1117: break;
  2494  00335A  D014               	goto	l506
  2495  00335C                     l7317:
  2496  00335C  FFFF               	dw	65535	; assembler added errata NOP
  2497  00335E  EC68  F001         	call	_ModbusGetUserCommandId	;wreg free
  2498  003362  C021  FFD9         	movff	?_ModbusGetUserCommandId,fsr2l
  2499  003366  C022  FFDA         	movff	?_ModbusGetUserCommandId+1,fsr2h
  2500  00336A  50DF               	movf	indf2,w,c
  2501                           
  2502                           ; Switch size 1, requested type "space"
  2503                           ; Number of cases is 4, Range of values is 128 to 145
  2504                           ; switch strategies available:
  2505                           ; Name         Instructions Cycles
  2506                           ; simple_byte           13     7 (average)
  2507                           ;	Chosen strategy is simple_byte
  2508  00336C  0A80               	xorlw	128	; case 128
  2509  00336E  B4D8               	btfsc	status,2,c
  2510  003370  D7B1               	goto	l7281
  2511  003372  0A02               	xorlw	2	; case 130
  2512  003374  B4D8               	btfsc	status,2,c
  2513  003376  D7D2               	goto	l7309
  2514  003378  0A01               	xorlw	1	; case 131
  2515  00337A  B4D8               	btfsc	status,2,c
  2516  00337C  D7EB               	goto	l7313
  2517  00337E  0A12               	xorlw	18	; case 145
  2518  003380  B4D8               	btfsc	status,2,c
  2519  003382  D7D0               	goto	l7311
  2520  003384                     l506:
  2521  003384  FFFF               	dw	65535	; assembler added errata NOP
  2522  003386  0012               	return		;funcret
  2523  003388  FFFF               	dw	65535	; errata NOP
  2524  00338A                     __end_of_ProcessUserCommands:
  2525                           	opt stack 0
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           intcon	equ	0xFF2
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postdec1	equ	0xFE5
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _ModbusGetUserCommandId *****************
  2544 ;; Defined at:
  2545 ;;		line 197 in file "ModbusRtu.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  2   32[COMRAM] PTR unsigned char 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2559 ;;      Params:         2       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0
  2562 ;;      Totals:         2       0       0       0       0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    2
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_ProcessUserCommands
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text4
  2574  0002D0                     __ptext4:
  2575                           	opt stack 0
  2576  0002D0                     _ModbusGetUserCommandId:
  2577                           	opt stack 26
  2578                           
  2579                           ;incstack = 0
  2580  0002D0  FFFF               	dw	65535
  2581  0002D2  0E5C               	movlw	low _ModbusUserCommandId
  2582  0002D4  6E21               	movwf	?_ModbusGetUserCommandId,c
  2583  0002D6  0E00               	movlw	high _ModbusUserCommandId
  2584  0002D8  6E22               	movwf	?_ModbusGetUserCommandId+1,c
  2585  0002DA  0012               	return		;funcret
  2586  0002DC  FFFF               	dw	65535	; errata NOP
  2587  0002DE                     __end_of_ModbusGetUserCommandId:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           intcon	equ	0xFF2
  2594                           postinc0	equ	0xFEE
  2595                           wreg	equ	0xFE8
  2596                           postdec1	equ	0xFE5
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _InitFromEeprom *****************
  2607 ;; Defined at:
  2608 ;;		line 440 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  eeSoundCount    1   43[COMRAM] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2622 ;;      Params:         0       0       0       0       0       0       0
  2623 ;;      Locals:         1       0       0       0       0       0       0
  2624 ;;      Temps:          2       0       0       0       0       0       0
  2625 ;;      Totals:         3       0       0       0       0       0       0
  2626 ;;Total ram usage:        3 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    4
  2629 ;; This function calls:
  2630 ;;		_LoadNextEvent
  2631 ;;		_Modbus
  2632 ;;		_ShowFailure
  2633 ;;		_SwitchOffAllLeds
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;;		_ProcessUserCommands
  2637 ;;		_io_poll
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text5
  2642  00320C                     __ptext5:
  2643                           	opt stack 0
  2644  00320C                     _InitFromEeprom:
  2645                           	opt stack 24
  2646                           
  2647                           ;incstack = 0
  2648  00320C  FFFF               	dw	65535
  2649                           
  2650                           ;main.c: 442: SwitchOffAllLeds();
  2651  00320E  EC35  F01F         	call	_SwitchOffAllLeds	;wreg free
  2652                           
  2653                           ;main.c: 444: eventAcceptTime = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  2654  003212  0E02               	movlw	2
  2655  003214  6EA9               	movwf	4009,c	;volatile
  2656  003216  80A6               	bsf	4006,0,c	;volatile
  2657  003218  CFA8 F056          	movff	4008,_eventAcceptTime	;volatile
  2658                           
  2659                           ;main.c: 451: Modbus(0, 0);
  2660  00321C  0E00               	movlw	0
  2661  00321E  6E26               	movwf	Modbus@u8txenpin,c
  2662  003220  0E00               	movlw	0
  2663  003222  EC7C  F000         	call	_Modbus
  2664                           
  2665                           ;main.c: 454: _maxDiaryEvents = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  2666  003226  0E03               	movlw	3
  2667  003228  6EA9               	movwf	4009,c	;volatile
  2668  00322A  80A6               	bsf	4006,0,c	;volatile
  2669  00322C  CFA8 F04D          	movff	4008,__maxDiaryEvents	;volatile
  2670                           
  2671                           ;main.c: 455: if(_maxDiaryEvents == 0xff)
  2672  003230  284D               	incf	__maxDiaryEvents,w,c
  2673  003232  A4D8               	btfss	status,2,c
  2674  003234  D002               	goto	l7041
  2675                           
  2676                           ;main.c: 456: _maxDiaryEvents = 0;
  2677  003236  0E00               	movlw	0
  2678  003238  6E4D               	movwf	__maxDiaryEvents,c
  2679  00323A                     l7041:
  2680  00323A  FFFF               	dw	65535	; assembler added errata NOP
  2681                           
  2682                           ;main.c: 457: if(_maxDiaryEvents > 60)
  2683  00323C  0E3C               	movlw	60
  2684  00323E  644D               	cpfsgt	__maxDiaryEvents,c
  2685  003240  D004               	goto	l7047
  2686                           
  2687                           ;main.c: 458: {
  2688                           ;main.c: 459: ShowFailure(2);
  2689  003242  0E02               	movlw	2
  2690  003244  ECE6  F000         	call	_ShowFailure
  2691                           
  2692                           ;main.c: 460: return;
  2693  003248  D040               	goto	l321
  2694  00324A                     l7047:
  2695  00324A  FFFF               	dw	65535	; assembler added errata NOP
  2696                           
  2697                           ;main.c: 461: }
  2698                           ;main.c: 462: eventCount = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  2699  00324C  0E0A               	movlw	10
  2700  00324E  6EA9               	movwf	4009,c	;volatile
  2701  003250  80A6               	bsf	4006,0,c	;volatile
  2702  003252  CFA8 F057          	movff	4008,_eventCount	;volatile
  2703                           
  2704                           ;main.c: 463: if(eventCount == 0xff)
  2705  003256  2857               	incf	_eventCount,w,c
  2706  003258  A4D8               	btfss	status,2,c
  2707  00325A  D002               	goto	l7057
  2708                           
  2709                           ;main.c: 464: eventCount = 0;
  2710  00325C  0E00               	movlw	0
  2711  00325E  6E57               	movwf	_eventCount,c
  2712  003260                     l7057:
  2713  003260  FFFF               	dw	65535	; assembler added errata NOP
  2714                           
  2715                           ;main.c: 465: if(eventCount > _maxDiaryEvents)
  2716  003262  5057               	movf	_eventCount,w,c
  2717  003264  5C4D               	subwf	__maxDiaryEvents,w,c
  2718  003266  B0D8               	btfsc	status,0,c
  2719  003268  D004               	goto	l7063
  2720                           
  2721                           ;main.c: 466: {
  2722                           ;main.c: 467: ShowFailure(3);
  2723  00326A  0E03               	movlw	3
  2724  00326C  ECE6  F000         	call	_ShowFailure
  2725                           
  2726                           ;main.c: 468: return;
  2727  003270  D02C               	goto	l321
  2728  003272                     l7063:
  2729  003272  FFFF               	dw	65535	; assembler added errata NOP
  2730                           
  2731                           ;main.c: 469: }
  2732                           ;main.c: 474: uint8_t eeSoundCountAddress = 10 + 1 + eventCount * 2;
  2733  003274  5057               	movf	_eventCount,w,c
  2734  003276  0D02               	mullw	2
  2735  003278  50F3               	movf	prodl,w,c
  2736  00327A  0F0B               	addlw	11
  2737  00327C  6E2C               	movwf	InitFromEeprom@eeSoundCountAddress,c
  2738                           
  2739                           ;main.c: 475: _soundCount = ( EEADR = eeSoundCountAddress, (void)0, RD = 1, EEDATA);
  2740  00327E  C02C  FFA9         	movff	InitFromEeprom@eeSoundCountAddress,4009	;volatile
  2741  003282  80A6               	bsf	4006,0,c	;volatile
  2742  003284  CFA8 F052          	movff	4008,__soundCount	;volatile
  2743                           
  2744                           ;main.c: 476: if(_soundCount == 0xFF)
  2745  003288  2852               	incf	__soundCount,w,c
  2746  00328A  A4D8               	btfss	status,2,c
  2747  00328C  D003               	goto	l7075
  2748                           
  2749                           ;main.c: 477: _soundCount = 0;
  2750  00328E  0E00               	movlw	0
  2751  003290  6E52               	movwf	__soundCount,c
  2752  003292  D006               	goto	l7081
  2753  003294                     l7075:
  2754  003294  FFFF               	dw	65535	; assembler added errata NOP
  2755                           
  2756                           ;main.c: 478: else
  2757                           ;main.c: 479: {
  2758                           ;main.c: 480: _eeSoundAddressesList = eeSoundCountAddress + 1;
  2759  003296  282C               	incf	InitFromEeprom@eeSoundCountAddress,w,c
  2760  003298  6E48               	movwf	__eeSoundAddressesList,c
  2761                           
  2762                           ;main.c: 481: _eeFirstSoundAddress = _eeSoundAddressesList + _soundCount;
  2763  00329A  5048               	movf	__eeSoundAddressesList,w,c
  2764  00329C  2452               	addwf	__soundCount,w,c
  2765  00329E  6E47               	movwf	__eeFirstSoundAddress,c
  2766  0032A0                     l7081:
  2767  0032A0  FFFF               	dw	65535	; assembler added errata NOP
  2768                           
  2769                           ;main.c: 486: }
  2770                           ;main.c: 487: }
  2771                           ;main.c: 488: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  2772  0032A2  5052               	movf	__soundCount,w,c
  2773  0032A4  6E2A               	movwf	??_InitFromEeprom& (0+255),c
  2774  0032A6  5057               	movf	_eventCount,w,c
  2775  0032A8  0101               	movlb	1	; () banked
  2776  0032AA  6FE0               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  2777  0032AC  C02A  F1E1         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  2778                           
  2779                           ;main.c: 491: _eventFromCommand.IsFire = 0;
  2780  0032B0  0E00               	movlw	0
  2781  0032B2  0100               	movlb	0	; () banked
  2782  0032B4  6FD2               	movwf	__eventFromCommand& (0+255),b
  2783                           
  2784                           ;main.c: 494: _currenDiaryEvent.NextEventTotalMinutes = 0;
  2785  0032B6  0E00               	movlw	0
  2786  0032B8  6E3C               	movwf	__currenDiaryEvent+3,c
  2787  0032BA  0E00               	movlw	0
  2788  0032BC  6E3B               	movwf	__currenDiaryEvent+2,c
  2789                           
  2790                           ;main.c: 495: _currenDiaryEvent.IsFire = 0;
  2791  0032BE  0E00               	movlw	0
  2792  0032C0  6E39               	movwf	__currenDiaryEvent,c
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 496: _currenDiaryEvent.FiredEventNum = 0xff;
  2796  0032C2  683A               	setf	__currenDiaryEvent+1,c
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 497: _currenDiaryEvent.NextEventNum = 0xff;
  2800  0032C4  6841               	setf	__currenDiaryEvent+8,c
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 499: LoadNextEvent();
  2804  0032C6  ECFD  F011         	call	_LoadNextEvent	;wreg free
  2805  0032CA                     l321:
  2806  0032CA  FFFF               	dw	65535	; assembler added errata NOP
  2807  0032CC  0012               	return		;funcret
  2808  0032CE  FFFF               	dw	65535	; errata NOP
  2809  0032D0                     __end_of_InitFromEeprom:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           postinc2	equ	0xFDE
  2824                           postdec2	equ	0xFDD
  2825                           fsr2h	equ	0xFDA
  2826                           fsr2l	equ	0xFD9
  2827                           status	equ	0xFD8
  2828                           
  2829 ;; *************** function _SwitchOffAllLeds *****************
  2830 ;; Defined at:
  2831 ;;		line 315 in file "main.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;		None
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  i               1   32[COMRAM] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         0       0       0       0       0       0       0
  2846 ;;      Locals:         1       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0
  2848 ;;      Totals:         1       0       0       0       0       0       0
  2849 ;;Total ram usage:        1 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    2
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_InitFromEeprom
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text6
  2860  003E6A                     __ptext6:
  2861                           	opt stack 0
  2862  003E6A                     _SwitchOffAllLeds:
  2863                           	opt stack 25
  2864                           
  2865                           ;incstack = 0
  2866  003E6A  FFFF               	dw	65535
  2867                           
  2868                           ;main.c: 317: for(uint8_t i = 0; i < 16 - 1; i++)
  2869  003E6C  0E00               	movlw	0
  2870  003E6E  6E21               	movwf	SwitchOffAllLeds@i,c
  2871  003E70                     l6679:
  2872  003E70  FFFF               	dw	65535	; assembler added errata NOP
  2873  003E72  0E0E               	movlw	14
  2874  003E74  6421               	cpfsgt	SwitchOffAllLeds@i,c
  2875  003E76  D001               	goto	l6683
  2876  003E78  D017               	goto	l258
  2877  003E7A                     l6683:
  2878  003E7A  FFFF               	dw	65535	; assembler added errata NOP
  2879                           
  2880                           ;main.c: 318: {
  2881                           ;main.c: 319: ledStatuses[i] = 0;
  2882  003E7C  5021               	movf	SwitchOffAllLeds@i,w,c
  2883  003E7E  0D01               	mullw	1
  2884  003E80  0EC2               	movlw	low _ledStatuses
  2885  003E82  24F3               	addwf	prodl,w,c
  2886  003E84  6ED9               	movwf	fsr2l,c
  2887  003E86  0E00               	movlw	high _ledStatuses
  2888  003E88  20F4               	addwfc	prodh,w,c
  2889  003E8A  6EDA               	movwf	fsr2h,c
  2890  003E8C  0E00               	movlw	0
  2891  003E8E  6EDF               	movwf	indf2,c
  2892                           
  2893                           ;main.c: 320: ledBlink[i] = 0;
  2894  003E90  5021               	movf	SwitchOffAllLeds@i,w,c
  2895  003E92  0D01               	mullw	1
  2896  003E94  0E00               	movlw	low _ledBlink
  2897  003E96  24F3               	addwf	prodl,w,c
  2898  003E98  6ED9               	movwf	fsr2l,c
  2899  003E9A  0E01               	movlw	high _ledBlink
  2900  003E9C  20F4               	addwfc	prodh,w,c
  2901  003E9E  6EDA               	movwf	fsr2h,c
  2902  003EA0  0E00               	movlw	0
  2903  003EA2  6EDF               	movwf	indf2,c
  2904  003EA4  2A21               	incf	SwitchOffAllLeds@i,f,c
  2905  003EA6  D7E4               	goto	l6679
  2906  003EA8                     l258:
  2907  003EA8  FFFF               	dw	65535	; assembler added errata NOP
  2908  003EAA  0012               	return		;funcret
  2909  003EAC  FFFF               	dw	65535	; errata NOP
  2910  003EAE                     __end_of_SwitchOffAllLeds:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           intcon	equ	0xFF2
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           postdec1	equ	0xFE5
  2922                           fsr1h	equ	0xFE2
  2923                           fsr1l	equ	0xFE1
  2924                           indf2	equ	0xFDF
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _ShowFailure *****************
  2932 ;; Defined at:
  2933 ;;		line 434 in file "main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  additionalLe    1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  additionalLe    1   40[COMRAM] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2947 ;;      Params:         0       0       0       0       0       0       0
  2948 ;;      Locals:         1       0       0       0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0
  2950 ;;      Totals:         1       0       0       0       0       0       0
  2951 ;;Total ram usage:        1 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    3
  2954 ;; This function calls:
  2955 ;;		_LightLed
  2956 ;;		_LightStatusLed
  2957 ;; This function is called by:
  2958 ;;		_InitFromEeprom
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text7
  2963  0001CC                     __ptext7:
  2964                           	opt stack 0
  2965  0001CC                     _ShowFailure:
  2966                           	opt stack 24
  2967                           
  2968                           ;incstack = 0
  2969  0001CC  FFFF               	dw	65535
  2970                           
  2971                           ;ShowFailure@additionalLed stored from wreg
  2972  0001CE  6E29               	movwf	ShowFailure@additionalLed,c
  2973                           
  2974                           ;main.c: 436: LightStatusLed(0x06, 1, 1);
  2975  0001D0  0E01               	movlw	1
  2976  0001D2  6E21               	movwf	LightStatusLed@on,c
  2977  0001D4  0E01               	movlw	1
  2978  0001D6  6E22               	movwf	LightStatusLed@blink,c
  2979  0001D8  0E06               	movlw	6
  2980  0001DA  ECA0  F014         	call	_LightStatusLed
  2981                           
  2982                           ;main.c: 437: LightLed(additionalLed, LED_RED, 1);
  2983  0001DE  0E02               	movlw	2
  2984  0001E0  6E21               	movwf	LightLed@ledState,c
  2985  0001E2  0E01               	movlw	1
  2986  0001E4  6E22               	movwf	LightLed@blink,c
  2987  0001E6  5029               	movf	ShowFailure@additionalLed,w,c
  2988  0001E8  EC5C  F005         	call	_LightLed
  2989  0001EC  0012               	return		;funcret
  2990  0001EE  FFFF               	dw	65535	; errata NOP
  2991  0001F0                     __end_of_ShowFailure:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _Modbus *****************
  3013 ;; Defined at:
  3014 ;;		line 232 in file "ModbusRtu.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  u8serno         1    wreg     unsigned char 
  3017 ;;  u8txenpin       1   37[COMRAM] unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  u8serno         1   38[COMRAM] unsigned char 
  3020 ;;  tmpModbusId     1   39[COMRAM] unsigned char 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3030 ;;      Params:         1       0       0       0       0       0       0
  3031 ;;      Locals:         2       0       0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0
  3033 ;;      Totals:         3       0       0       0       0       0       0
  3034 ;;Total ram usage:        3 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    3
  3037 ;; This function calls:
  3038 ;;		_ModbusInit
  3039 ;; This function is called by:
  3040 ;;		_InitFromEeprom
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text8
  3045  0000F8                     __ptext8:
  3046                           	opt stack 0
  3047  0000F8                     _Modbus:
  3048                           	opt stack 24
  3049                           
  3050                           ;incstack = 0
  3051  0000F8  FFFF               	dw	65535
  3052                           
  3053                           ;Modbus@u8serno stored from wreg
  3054  0000FA  6E27               	movwf	Modbus@u8serno,c
  3055                           
  3056                           ;ModbusRtu.c: 234: uint8_t tmpModbusId = ( EEADR = 1, (void)0, RD = 1, EEDATA);
  3057  0000FC  0E01               	movlw	1
  3058  0000FE  6EA9               	movwf	4009,c	;volatile
  3059  000100  80A6               	bsf	4006,0,c	;volatile
  3060  000102  CFA8 F028          	movff	4008,Modbus@tmpModbusId	;volatile
  3061                           
  3062                           ;ModbusRtu.c: 235: if(tmpModbusId == 0xff)
  3063  000106  2828               	incf	Modbus@tmpModbusId,w,c
  3064  000108  A4D8               	btfss	status,2,c
  3065  00010A  D002               	goto	l6703
  3066                           
  3067                           ;ModbusRtu.c: 236: tmpModbusId = 0x7F;
  3068  00010C  0E7F               	movlw	127
  3069  00010E  6E28               	movwf	Modbus@tmpModbusId,c
  3070  000110                     l6703:
  3071  000110  FFFF               	dw	65535	; assembler added errata NOP
  3072                           
  3073                           ;ModbusRtu.c: 237: ModbusInit(tmpModbusId, u8serno, u8txenpin);
  3074  000112  C027  F021         	movff	Modbus@u8serno,ModbusInit@u8serno
  3075  000116  C026  F022         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3076  00011A  5028               	movf	Modbus@tmpModbusId,w,c
  3077  00011C  EC79  F01F         	call	_ModbusInit
  3078  000120  0012               	return		;funcret
  3079  000122  FFFF               	dw	65535	; errata NOP
  3080  000124                     __end_of_Modbus:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           intcon	equ	0xFF2
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _ModbusInit *****************
  3102 ;; Defined at:
  3103 ;;		line 581 in file "ModbusRtu.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  u8id            1    wreg     unsigned char 
  3106 ;;  u8serno         1   32[COMRAM] unsigned char 
  3107 ;;  u8txenpin       1   33[COMRAM] unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  u8id            1   34[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3119 ;;      Params:         2       0       0       0       0       0       0
  3120 ;;      Locals:         3       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0
  3122 ;;      Totals:         5       0       0       0       0       0       0
  3123 ;;Total ram usage:        5 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    2
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_Modbus
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text9
  3134  003EF2                     __ptext9:
  3135                           	opt stack 0
  3136  003EF2                     _ModbusInit:
  3137                           	opt stack 24
  3138                           
  3139                           ;incstack = 0
  3140  003EF2  FFFF               	dw	65535
  3141                           
  3142                           ;ModbusInit@u8id stored from wreg
  3143  003EF4  6E23               	movwf	ModbusInit@u8id,c
  3144                           
  3145                           ;ModbusRtu.c: 584: if(1)
  3146  003EF6  0E00               	movlw	0
  3147  003EF8  6E46               	movwf	__deviceStatus,c
  3148                           
  3149                           ;ModbusRtu.c: 585: ((_deviceStatus) |= ((unsigned short)1 << (1)));
  3150  003EFA  8246               	bsf	__deviceStatus,1,c
  3151                           
  3152                           ;ModbusRtu.c: 586: _u8id = u8id;
  3153  003EFC  C023  F0F0         	movff	ModbusInit@u8id,__u8id
  3154                           
  3155                           ;ModbusRtu.c: 587: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3156  003F00  0E04               	movlw	4
  3157  003F02  6021               	cpfslt	ModbusInit@u8serno,c
  3158  003F04  D004               	goto	l6635
  3159  003F06  C021  F024         	movff	ModbusInit@u8serno,_ModbusInit$1885
  3160  003F0A  6A25               	clrf	_ModbusInit$1885+1,c
  3161  003F0C  D005               	goto	l6637
  3162  003F0E                     l6635:
  3163  003F0E  FFFF               	dw	65535	; assembler added errata NOP
  3164  003F10  0E00               	movlw	0
  3165  003F12  6E25               	movwf	_ModbusInit$1885+1,c
  3166  003F14  0E00               	movlw	0
  3167  003F16  6E24               	movwf	_ModbusInit$1885,c
  3168  003F18                     l6637:
  3169  003F18  FFFF               	dw	65535	; assembler added errata NOP
  3170  003F1A  C024  F0F3         	movff	_ModbusInit$1885,__u8serno
  3171                           
  3172                           ;ModbusRtu.c: 588: _u8txenpin = u8txenpin;
  3173  003F1E  C022  F0F5         	movff	ModbusInit@u8txenpin,__u8txenpin
  3174                           
  3175                           ;ModbusRtu.c: 589: _u16timeOut = 1000;
  3176  003F22  0E03               	movlw	3
  3177  003F24  0100               	movlb	0	; () banked
  3178  003F26  6FEB               	movwf	(__u16timeOut+1)& (0+255),b
  3179  003F28  0EE8               	movlw	232
  3180  003F2A  6FEA               	movwf	__u16timeOut& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183  003F2C  0012               	return		;funcret
  3184  003F2E  FFFF               	dw	65535	; errata NOP
  3185  003F30                     __end_of_ModbusInit:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           intcon	equ	0xFF2
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           postdec1	equ	0xFE5
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _CommandSetStatusLed *****************
  3207 ;; Defined at:
  3208 ;;		line 1072 in file "main.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  led             1    3[BANK0 ] unsigned char 
  3213 ;;  commandData     1    2[BANK0 ] unsigned char 
  3214 ;;  soundId         1    1[BANK0 ] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      void 
  3217 ;; Registers used:
  3218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3224 ;;      Params:         0       0       0       0       0       0       0
  3225 ;;      Locals:         0       3       0       0       0       0       0
  3226 ;;      Temps:          0       1       0       0       0       0       0
  3227 ;;      Totals:         0       4       0       0       0       0       0
  3228 ;;Total ram usage:        4 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    5
  3231 ;; This function calls:
  3232 ;;		_LightStatusLed
  3233 ;;		_ModbusGetUserCommandAdditional1Hi
  3234 ;;		_ModbusGetUserCommandAdditional1Lo
  3235 ;;		_ModbusGetUserCommandData
  3236 ;;		_ModbusSetExceptionStatusBit
  3237 ;;		_PlaySound
  3238 ;;		_StopPlaying
  3239 ;; This function is called by:
  3240 ;;		_ProcessUserCommands
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text10
  3245  003444                     __ptext10:
  3246                           	opt stack 0
  3247  003444                     _CommandSetStatusLed:
  3248                           	opt stack 23
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;incstack = 0
  3252  003444  FFFF               	dw	65535
  3253                           
  3254                           ;main.c: 1076: uint8_t commandData = *ModbusGetUserCommandData();
  3255  003446  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  3256  00344A  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  3257  00344E  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  3258  003452  50DF               	movf	indf2,w,c
  3259  003454  0100               	movlb	0	; () banked
  3260  003456  6F82               	movwf	CommandSetStatusLed@commandData& (0+255),b
  3261                           
  3262                           ;main.c: 1077: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  3263  003458  EC8B  F001         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  3264  00345C  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Hi,fsr2l
  3265  003460  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Hi+1,fsr2h
  3266  003464  50DF               	movf	indf2,w,c
  3267  003466  0100               	movlb	0	; () banked
  3268  003468  6F81               	movwf	CommandSetStatusLed@soundId& (0+255),b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 1078: uint8_t led = commandData & 0x07;
  3272  00346A  0100               	movlb	0	; () banked
  3273  00346C  5182               	movf	CommandSetStatusLed@commandData& (0+255),w,b
  3274  00346E  0B07               	andlw	7
  3275  003470  0100               	movlb	0	; () banked
  3276  003472  6F83               	movwf	CommandSetStatusLed@led& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 1079: if(led >= 0x05)
  3280  003474  0E04               	movlw	4
  3281  003476  0100               	movlb	0	; () banked
  3282  003478  6583               	cpfsgt	CommandSetStatusLed@led& (0+255),b
  3283  00347A  D001               	goto	l7133
  3284  00347C  D03C               	goto	l485
  3285  00347E                     l7133:
  3286  00347E  FFFF               	dw	65535	; assembler added errata NOP
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 1081: if((((commandData) >> (7)) & 0x01) == 0)
  3290  003480  0100               	movlb	0	; () banked
  3291  003482  6B80               	clrf	??_CommandSetStatusLed& (0+255),b
  3292  003484  AF82               	btfss	CommandSetStatusLed@commandData& (0+255),7,b
  3293  003486  D002               	bra	u6485
  3294  003488  0100               	movlb	0	; () banked
  3295  00348A  2B80               	incf	??_CommandSetStatusLed& (0+255),f,b
  3296  00348C                     u6485:
  3297  00348C  0100               	movlb	0	; () banked
  3298  00348E  B180               	btfsc	??_CommandSetStatusLed& (0+255),0,b
  3299  003490  D00F               	goto	l7143
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 1082: {
  3303                           ;main.c: 1083: LightStatusLed(led, 0, 0);
  3304  003492  0E00               	movlw	0
  3305  003494  6E21               	movwf	LightStatusLed@on,c
  3306  003496  0E00               	movlw	0
  3307  003498  6E22               	movwf	LightStatusLed@blink,c
  3308  00349A  0100               	movlb	0	; () banked
  3309  00349C  5183               	movf	CommandSetStatusLed@led& (0+255),w,b
  3310  00349E  ECA0  F014         	call	_LightStatusLed
  3311                           
  3312                           ;main.c: 1084: if(soundId != 0xff)
  3313  0034A2  0100               	movlb	0	; () banked
  3314  0034A4  2981               	incf	CommandSetStatusLed@soundId& (0+255),w,b
  3315  0034A6  B4D8               	btfsc	status,2,c
  3316  0034A8  D026               	goto	l485
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 1085: StopPlaying();
  3320  0034AA  EC4A  F001         	call	_StopPlaying	;wreg free
  3321                           
  3322                           ;main.c: 1086: return;
  3323  0034AE  D023               	goto	l485
  3324  0034B0                     l7143:
  3325  0034B0  FFFF               	dw	65535	; assembler added errata NOP
  3326                           
  3327                           ;main.c: 1087: }
  3328                           ;main.c: 1088: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  3329  0034B2  0E01               	movlw	1
  3330  0034B4  6E21               	movwf	LightStatusLed@on,c
  3331  0034B6  0100               	movlb	0	; () banked
  3332  0034B8  4582               	rlncf	CommandSetStatusLed@commandData& (0+255),w,b
  3333  0034BA  46E8               	rlncf	wreg,f,c
  3334  0034BC  0B03               	andlw	3
  3335  0034BE  0B01               	andlw	1
  3336  0034C0  6E22               	movwf	LightStatusLed@blink,c
  3337  0034C2  0100               	movlb	0	; () banked
  3338  0034C4  5183               	movf	CommandSetStatusLed@led& (0+255),w,b
  3339  0034C6  ECA0  F014         	call	_LightStatusLed
  3340                           
  3341                           ;main.c: 1089: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  3342  0034CA  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  3343  0034CE  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  3344  0034D2  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  3345  0034D6  50DF               	movf	indf2,w,c
  3346  0034D8  0100               	movlb	0	; () banked
  3347  0034DA  6F80               	movwf	??_CommandSetStatusLed& (0+255),b
  3348  0034DC  0100               	movlb	0	; () banked
  3349  0034DE  5180               	movf	??_CommandSetStatusLed& (0+255),w,b
  3350  0034E0  6E31               	movwf	PlaySound@playDuration,c
  3351  0034E2  6A32               	clrf	PlaySound@playDuration+1,c
  3352  0034E4  0100               	movlb	0	; () banked
  3353  0034E6  5181               	movf	CommandSetStatusLed@soundId& (0+255),w,b
  3354  0034E8  EC27  F015         	call	_PlaySound
  3355                           
  3356                           ;main.c: 1090: ModbusSetExceptionStatusBit(0, 1);
  3357  0034EC  0E01               	movlw	1
  3358  0034EE  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  3359  0034F0  0E00               	movlw	0
  3360  0034F2  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
  3361  0034F6                     l485:
  3362  0034F6  FFFF               	dw	65535	; assembler added errata NOP
  3363  0034F8  0012               	return		;funcret
  3364  0034FA  FFFF               	dw	65535	; errata NOP
  3365  0034FC                     __end_of_CommandSetStatusLed:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon	equ	0xFF2
  3374                           postinc0	equ	0xFEE
  3375                           wreg	equ	0xFE8
  3376                           postdec1	equ	0xFE5
  3377                           fsr1h	equ	0xFE2
  3378                           fsr1l	equ	0xFE1
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _LightStatusLed *****************
  3387 ;; Defined at:
  3388 ;;		line 375 in file "main.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  row             1    wreg     unsigned char 
  3391 ;;  on              1   32[COMRAM] unsigned char 
  3392 ;;  blink           1   33[COMRAM] unsigned char 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  row             1   39[COMRAM] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3404 ;;      Params:         2       0       0       0       0       0       0
  3405 ;;      Locals:         1       0       0       0       0       0       0
  3406 ;;      Temps:          5       0       0       0       0       0       0
  3407 ;;      Totals:         8       0       0       0       0       0       0
  3408 ;;Total ram usage:        8 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    2
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_ShowFailure
  3415 ;;		_main
  3416 ;;		_CommandSetStatusLed
  3417 ;;		_io_poll
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text11
  3422  002940                     __ptext11:
  3423                           	opt stack 0
  3424  002940                     _LightStatusLed:
  3425                           	opt stack 24
  3426                           
  3427                           ;incstack = 0
  3428  002940  FFFF               	dw	65535
  3429                           
  3430                           ;LightStatusLed@row stored from wreg
  3431  002942  6E28               	movwf	LightStatusLed@row,c
  3432                           
  3433                           ;main.c: 377: if(row > 7)
  3434  002944  0E07               	movlw	7
  3435  002946  6428               	cpfsgt	LightStatusLed@row,c
  3436  002948  D001               	goto	l6557
  3437  00294A  D07E               	goto	l295
  3438  00294C                     l6557:
  3439  00294C  FFFF               	dw	65535	; assembler added errata NOP
  3440                           
  3441                           ;main.c: 379: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  3442  00294E  5021               	movf	LightStatusLed@on,w,c
  3443  002950  B4D8               	btfsc	status,2,c
  3444  002952  D010               	goto	l6561
  3445  002954  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3446  002958  0E01               	movlw	1
  3447  00295A  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3448  00295C  2A23               	incf	??_LightStatusLed,f,c
  3449  00295E  D003               	goto	u5784
  3450  002960                     u5785:
  3451  002960  FFFF               	dw	65535	; assembler added errata NOP
  3452  002962  90D8               	bcf	status,0,c
  3453  002964  3624               	rlcf	??_LightStatusLed+1,f,c
  3454  002966                     u5784:
  3455  002966  FFFF               	dw	65535	; assembler added errata NOP
  3456  002968  2E23               	decfsz	??_LightStatusLed,f,c
  3457  00296A  D7FA               	goto	u5785
  3458  00296C  5024               	movf	??_LightStatusLed+1,w,c
  3459  00296E  0100               	movlb	0	; () banked
  3460  002970  13D1               	iorwf	(_ledStatuses+15)& (0+255),f,b
  3461  002972  D011               	goto	l6563
  3462  002974                     l6561:
  3463  002974  FFFF               	dw	65535	; assembler added errata NOP
  3464  002976  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3465  00297A  0E01               	movlw	1
  3466  00297C  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3467  00297E  2A23               	incf	??_LightStatusLed,f,c
  3468  002980  D003               	goto	u5794
  3469  002982                     u5795:
  3470  002982  FFFF               	dw	65535	; assembler added errata NOP
  3471  002984  90D8               	bcf	status,0,c
  3472  002986  3624               	rlcf	??_LightStatusLed+1,f,c
  3473  002988                     u5794:
  3474  002988  FFFF               	dw	65535	; assembler added errata NOP
  3475  00298A  2E23               	decfsz	??_LightStatusLed,f,c
  3476  00298C  D7FA               	goto	u5795
  3477  00298E  5024               	movf	??_LightStatusLed+1,w,c
  3478  002990  0AFF               	xorlw	255
  3479  002992  0100               	movlb	0	; () banked
  3480  002994  17D1               	andwf	(_ledStatuses+15)& (0+255),f,b
  3481  002996                     l6563:
  3482  002996  FFFF               	dw	65535	; assembler added errata NOP
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;main.c: 380: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  3486  002998  5022               	movf	LightStatusLed@blink,w,c
  3487  00299A  B4D8               	btfsc	status,2,c
  3488  00299C  D010               	goto	l6567
  3489                           
  3490                           ; BSR set to: 0
  3491  00299E  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3492  0029A2  0E01               	movlw	1
  3493  0029A4  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3494  0029A6  2A23               	incf	??_LightStatusLed,f,c
  3495  0029A8  D003               	goto	u5814
  3496  0029AA                     u5815:
  3497  0029AA  FFFF               	dw	65535	; assembler added errata NOP
  3498  0029AC  90D8               	bcf	status,0,c
  3499  0029AE  3624               	rlcf	??_LightStatusLed+1,f,c
  3500  0029B0                     u5814:
  3501  0029B0  FFFF               	dw	65535	; assembler added errata NOP
  3502  0029B2  2E23               	decfsz	??_LightStatusLed,f,c
  3503  0029B4  D7FA               	goto	u5815
  3504  0029B6  5024               	movf	??_LightStatusLed+1,w,c
  3505  0029B8  0101               	movlb	1	; () banked
  3506  0029BA  130F               	iorwf	(_ledBlink+15)& (0+255),f,b
  3507  0029BC  D011               	goto	l6569
  3508  0029BE                     l6567:
  3509  0029BE  FFFF               	dw	65535	; assembler added errata NOP
  3510  0029C0  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3511  0029C4  0E01               	movlw	1
  3512  0029C6  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3513  0029C8  2A23               	incf	??_LightStatusLed,f,c
  3514  0029CA  D003               	goto	u5824
  3515  0029CC                     u5825:
  3516  0029CC  FFFF               	dw	65535	; assembler added errata NOP
  3517  0029CE  90D8               	bcf	status,0,c
  3518  0029D0  3624               	rlcf	??_LightStatusLed+1,f,c
  3519  0029D2                     u5824:
  3520  0029D2  FFFF               	dw	65535	; assembler added errata NOP
  3521  0029D4  2E23               	decfsz	??_LightStatusLed,f,c
  3522  0029D6  D7FA               	goto	u5825
  3523  0029D8  5024               	movf	??_LightStatusLed+1,w,c
  3524  0029DA  0AFF               	xorlw	255
  3525  0029DC  0101               	movlb	1	; () banked
  3526  0029DE  170F               	andwf	(_ledBlink+15)& (0+255),f,b
  3527  0029E0                     l6569:
  3528  0029E0  FFFF               	dw	65535	; assembler added errata NOP
  3529                           
  3530                           ; BSR set to: 1
  3531                           ;main.c: 381: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  3532  0029E2  5021               	movf	LightStatusLed@on,w,c
  3533  0029E4  B4D8               	btfsc	status,2,c
  3534  0029E6  D016               	goto	l6573
  3535                           
  3536                           ; BSR set to: 1
  3537  0029E8  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3538  0029EC  0E01               	movlw	1
  3539  0029EE  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3540  0029F0  0E00               	movlw	0
  3541  0029F2  6E25               	movwf	(??_LightStatusLed+2)& (0+255),c
  3542  0029F4  2A23               	incf	??_LightStatusLed,f,c
  3543  0029F6  D004               	goto	u5844
  3544  0029F8                     u5845:
  3545  0029F8  FFFF               	dw	65535	; assembler added errata NOP
  3546  0029FA  90D8               	bcf	status,0,c
  3547  0029FC  3624               	rlcf	??_LightStatusLed+1,f,c
  3548  0029FE  3625               	rlcf	??_LightStatusLed+2,f,c
  3549  002A00                     u5844:
  3550  002A00  FFFF               	dw	65535	; assembler added errata NOP
  3551  002A02  2E23               	decfsz	??_LightStatusLed,f,c
  3552  002A04  D7F9               	goto	u5845
  3553  002A06  5024               	movf	??_LightStatusLed+1,w,c
  3554  002A08  0100               	movlb	0	; () banked
  3555  002A0A  13F7               	iorwf	__MODBUSCoils& (0+255),f,b
  3556  002A0C  5025               	movf	??_LightStatusLed+2,w,c
  3557  002A0E  0100               	movlb	0	; () banked
  3558  002A10  13F8               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  3559  002A12  D01A               	goto	l295
  3560  002A14                     l6573:
  3561  002A14  FFFF               	dw	65535	; assembler added errata NOP
  3562  002A16  C028  F023         	movff	LightStatusLed@row,??_LightStatusLed
  3563  002A1A  0E01               	movlw	1
  3564  002A1C  6E24               	movwf	(??_LightStatusLed+1)& (0+255),c
  3565  002A1E  0E00               	movlw	0
  3566  002A20  6E25               	movwf	(??_LightStatusLed+2)& (0+255),c
  3567  002A22  2A23               	incf	??_LightStatusLed,f,c
  3568  002A24  D004               	goto	u5854
  3569  002A26                     u5855:
  3570  002A26  FFFF               	dw	65535	; assembler added errata NOP
  3571  002A28  90D8               	bcf	status,0,c
  3572  002A2A  3624               	rlcf	??_LightStatusLed+1,f,c
  3573  002A2C  3625               	rlcf	??_LightStatusLed+2,f,c
  3574  002A2E                     u5854:
  3575  002A2E  FFFF               	dw	65535	; assembler added errata NOP
  3576  002A30  2E23               	decfsz	??_LightStatusLed,f,c
  3577  002A32  D7F9               	goto	u5855
  3578  002A34  1C24               	comf	??_LightStatusLed+1,w,c
  3579  002A36  6E26               	movwf	(??_LightStatusLed+3)& (0+255),c
  3580  002A38  1C25               	comf	??_LightStatusLed+2,w,c
  3581  002A3A  6E27               	movwf	(??_LightStatusLed+4)& (0+255),c
  3582  002A3C  5026               	movf	??_LightStatusLed+3,w,c
  3583  002A3E  0100               	movlb	0	; () banked
  3584  002A40  17F7               	andwf	__MODBUSCoils& (0+255),f,b
  3585  002A42  5027               	movf	??_LightStatusLed+4,w,c
  3586  002A44  0100               	movlb	0	; () banked
  3587  002A46  17F8               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  3588  002A48                     l295:
  3589  002A48  FFFF               	dw	65535	; assembler added errata NOP
  3590  002A4A  0012               	return		;funcret
  3591  002A4C  FFFF               	dw	65535	; errata NOP
  3592  002A4E                     __end_of_LightStatusLed:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           postdec1	equ	0xFE5
  3604                           fsr1h	equ	0xFE2
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _CommandSetLed *****************
  3614 ;; Defined at:
  3615 ;;		line 1035 in file "main.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  led             1    9[BANK0 ] unsigned char 
  3620 ;;  commandData     1    8[BANK0 ] unsigned char 
  3621 ;;  blinkSeconds    1    7[BANK0 ] unsigned char 
  3622 ;;  ledColor        1    6[BANK0 ] unsigned char 
  3623 ;;  soundId         1    5[BANK0 ] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3633 ;;      Params:         0       0       0       0       0       0       0
  3634 ;;      Locals:         0       5       0       0       0       0       0
  3635 ;;      Temps:          0       5       0       0       0       0       0
  3636 ;;      Totals:         0      10       0       0       0       0       0
  3637 ;;Total ram usage:       10 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_GetTime
  3642 ;;		_LightLed
  3643 ;;		_ModbusGetUserCommandAdditional1Hi
  3644 ;;		_ModbusGetUserCommandAdditional1Lo
  3645 ;;		_ModbusGetUserCommandAdditional2Hi
  3646 ;;		_ModbusGetUserCommandAdditional2Lo
  3647 ;;		_ModbusGetUserCommandData
  3648 ;;		_ModbusSetExceptionStatusBit
  3649 ;;		_PlaySound
  3650 ;;		_StopPlaying
  3651 ;; This function is called by:
  3652 ;;		_ProcessUserCommands
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text12
  3657  0020C6                     __ptext12:
  3658                           	opt stack 0
  3659  0020C6                     _CommandSetLed:
  3660                           	opt stack 23
  3661                           
  3662                           ;incstack = 0
  3663  0020C6  FFFF               	dw	65535
  3664                           
  3665                           ;main.c: 1042: uint8_t commandData = *ModbusGetUserCommandData();
  3666  0020C8  EC6F  F001         	call	_ModbusGetUserCommandData	;wreg free
  3667  0020CC  C021  FFD9         	movff	?_ModbusGetUserCommandData,fsr2l
  3668  0020D0  C022  FFDA         	movff	?_ModbusGetUserCommandData+1,fsr2h
  3669  0020D4  50DF               	movf	indf2,w,c
  3670  0020D6  0100               	movlb	0	; () banked
  3671  0020D8  6F88               	movwf	CommandSetLed@commandData& (0+255),b
  3672                           
  3673                           ;main.c: 1043: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  3674  0020DA  EC8B  F001         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  3675  0020DE  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Hi,fsr2l
  3676  0020E2  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Hi+1,fsr2h
  3677  0020E6  50DF               	movf	indf2,w,c
  3678  0020E8  0100               	movlb	0	; () banked
  3679  0020EA  6F85               	movwf	CommandSetLed@soundId& (0+255),b
  3680                           
  3681                           ;main.c: 1044: uint8_t led = *ModbusGetUserCommandAdditional2Hi();
  3682  0020EC  EC7D  F001         	call	_ModbusGetUserCommandAdditional2Hi	;wreg free
  3683  0020F0  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional2Hi,fsr2l
  3684  0020F4  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional2Hi+1,fsr2h
  3685  0020F8  50DF               	movf	indf2,w,c
  3686  0020FA  0100               	movlb	0	; () banked
  3687  0020FC  6F89               	movwf	CommandSetLed@led& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;main.c: 1045: if(led == 0 || led > 60 - _maxDiaryEvents)
  3691  0020FE  0100               	movlb	0	; () banked
  3692  002100  5189               	movf	CommandSetLed@led& (0+255),w,b
  3693  002102  0100               	movlb	0	; () banked
  3694  002104  B4D8               	btfsc	status,2,c
  3695  002106  D0AE               	goto	l475
  3696                           
  3697                           ; BSR set to: 0
  3698  002108  0100               	movlb	0	; () banked
  3699  00210A  5189               	movf	CommandSetLed@led& (0+255),w,b
  3700  00210C  0100               	movlb	0	; () banked
  3701  00210E  6F80               	movwf	??_CommandSetLed& (0+255),b
  3702  002110  6B81               	clrf	(??_CommandSetLed+1)& (0+255),b
  3703  002112  504D               	movf	__maxDiaryEvents,w,c
  3704  002114  0100               	movlb	0	; () banked
  3705  002116  6F82               	movwf	(??_CommandSetLed+2)& (0+255),b
  3706  002118  6B83               	clrf	(??_CommandSetLed+3)& (0+255),b
  3707  00211A  0100               	movlb	0	; () banked
  3708  00211C  1F82               	comf	(??_CommandSetLed+2)& (0+255),f,b
  3709  00211E  1F83               	comf	(??_CommandSetLed+3)& (0+255),f,b
  3710  002120  4B82               	infsnz	(??_CommandSetLed+2)& (0+255),f,b
  3711  002122  2B83               	incf	(??_CommandSetLed+3)& (0+255),f,b
  3712  002124  0E3C               	movlw	60
  3713  002126  0100               	movlb	0	; () banked
  3714  002128  2782               	addwf	(??_CommandSetLed+2)& (0+255),f,b
  3715  00212A  0E00               	movlw	0
  3716  00212C  2383               	addwfc	(??_CommandSetLed+3)& (0+255),f,b
  3717  00212E  0100               	movlb	0	; () banked
  3718  002130  5180               	movf	??_CommandSetLed& (0+255),w,b
  3719  002132  0100               	movlb	0	; () banked
  3720  002134  5D82               	subwf	(??_CommandSetLed+2)& (0+255),w,b
  3721  002136  0100               	movlb	0	; () banked
  3722  002138  5183               	movf	(??_CommandSetLed+3)& (0+255),w,b
  3723  00213A  0A80               	xorlw	128
  3724  00213C  0100               	movlb	0	; () banked
  3725  00213E  6F84               	movwf	(??_CommandSetLed+4)& (0+255),b
  3726  002140  0100               	movlb	0	; () banked
  3727  002142  5181               	movf	(??_CommandSetLed+1)& (0+255),w,b
  3728  002144  0A80               	xorlw	128
  3729  002146  0100               	movlb	0	; () banked
  3730  002148  5984               	subwfb	(??_CommandSetLed+4)& (0+255),w,b
  3731  00214A  A0D8               	btfss	status,0,c
  3732  00214C  D08B               	goto	l475
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;main.c: 1047: uint8_t ledColor = commandData & 0x03;
  3736                           
  3737                           ; BSR set to: 0
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;main.c: 1046: return;
  3741  00214E  0100               	movlb	0	; () banked
  3742  002150  5188               	movf	CommandSetLed@commandData& (0+255),w,b
  3743  002152  0B03               	andlw	3
  3744  002154  0100               	movlb	0	; () banked
  3745  002156  6F86               	movwf	CommandSetLed@ledColor& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;main.c: 1048: if((((commandData) >> (7)) & 0x01) == 0 || ledColor == 0)
  3749  002158  0100               	movlb	0	; () banked
  3750  00215A  6B80               	clrf	??_CommandSetLed& (0+255),b
  3751  00215C  AF88               	btfss	CommandSetLed@commandData& (0+255),7,b
  3752  00215E  D002               	bra	u6425
  3753  002160  0100               	movlb	0	; () banked
  3754  002162  2B80               	incf	??_CommandSetLed& (0+255),f,b
  3755  002164                     u6425:
  3756  002164  0100               	movlb	0	; () banked
  3757  002166  A180               	btfss	??_CommandSetLed& (0+255),0,b
  3758  002168  D005               	goto	l7101
  3759                           
  3760                           ; BSR set to: 0
  3761  00216A  0100               	movlb	0	; () banked
  3762  00216C  5186               	movf	CommandSetLed@ledColor& (0+255),w,b
  3763  00216E  0100               	movlb	0	; () banked
  3764  002170  A4D8               	btfss	status,2,c
  3765  002172  D010               	goto	l7109
  3766  002174                     l7101:
  3767  002174  FFFF               	dw	65535	; assembler added errata NOP
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;main.c: 1049: {
  3771                           ;main.c: 1050: LightLed(led, LED_OFF, 0);
  3772  002176  0E00               	movlw	0
  3773  002178  6E21               	movwf	LightLed@ledState,c
  3774  00217A  0E00               	movlw	0
  3775  00217C  6E22               	movwf	LightLed@blink,c
  3776  00217E  0100               	movlb	0	; () banked
  3777  002180  5189               	movf	CommandSetLed@led& (0+255),w,b
  3778  002182  EC5C  F005         	call	_LightLed
  3779                           
  3780                           ;main.c: 1051: if(soundId != 0xff)
  3781  002186  0100               	movlb	0	; () banked
  3782  002188  2985               	incf	CommandSetLed@soundId& (0+255),w,b
  3783  00218A  B4D8               	btfsc	status,2,c
  3784  00218C  D06B               	goto	l475
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;main.c: 1052: StopPlaying();
  3788  00218E  EC4A  F001         	call	_StopPlaying	;wreg free
  3789                           
  3790                           ;main.c: 1053: return;
  3791  002192  D068               	goto	l475
  3792  002194                     l7109:
  3793  002194  FFFF               	dw	65535	; assembler added errata NOP
  3794                           
  3795                           ;main.c: 1054: }
  3796                           ;main.c: 1056: uint8_t blinkSeconds = *ModbusGetUserCommandAdditional2Lo();
  3797  002196  EC76  F001         	call	_ModbusGetUserCommandAdditional2Lo	;wreg free
  3798  00219A  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional2Lo,fsr2l
  3799  00219E  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional2Lo+1,fsr2h
  3800  0021A2  50DF               	movf	indf2,w,c
  3801  0021A4  0100               	movlb	0	; () banked
  3802  0021A6  6F87               	movwf	CommandSetLed@blinkSeconds& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;main.c: 1057: if(blinkSeconds == 0)
  3806  0021A8  0100               	movlb	0	; () banked
  3807  0021AA  5187               	movf	CommandSetLed@blinkSeconds& (0+255),w,b
  3808  0021AC  0100               	movlb	0	; () banked
  3809  0021AE  A4D8               	btfss	status,2,c
  3810  0021B0  D00D               	goto	l480
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 1058: {
  3814                           ;main.c: 1059: LightLed(led, ledColor, (((commandData) >> (6)) & 0x01));
  3815  0021B2  C086  F021         	movff	CommandSetLed@ledColor,LightLed@ledState
  3816  0021B6  0100               	movlb	0	; () banked
  3817  0021B8  4588               	rlncf	CommandSetLed@commandData& (0+255),w,b
  3818  0021BA  46E8               	rlncf	wreg,f,c
  3819  0021BC  0B03               	andlw	3
  3820  0021BE  0B01               	andlw	1
  3821  0021C0  6E22               	movwf	LightLed@blink,c
  3822  0021C2  0100               	movlb	0	; () banked
  3823  0021C4  5189               	movf	CommandSetLed@led& (0+255),w,b
  3824  0021C6  EC5C  F005         	call	_LightLed
  3825                           
  3826                           ;main.c: 1060: }
  3827  0021CA  D035               	goto	l7121
  3828  0021CC                     l480:
  3829  0021CC  FFFF               	dw	65535	; assembler added errata NOP
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 1061: else
  3833                           ;main.c: 1062: {
  3834                           ;main.c: 1063: _eventFromCommand.LedNum = led;
  3835  0021CE  C089  F0D3         	movff	CommandSetLed@led,__eventFromCommand+1
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 1064: _eventFromCommand.IsFire = 1;
  3839  0021D2  0E01               	movlw	1
  3840  0021D4  0100               	movlb	0	; () banked
  3841  0021D6  6FD2               	movwf	__eventFromCommand& (0+255),b
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;main.c: 1065: _eventFromCommand.ResetSecond = *GetTime() + blinkSeconds;
  3845  0021D8  EC92  F001         	call	_GetTime	;wreg free
  3846  0021DC  C021  FFD9         	movff	?_GetTime,fsr2l
  3847  0021E0  C022  FFDA         	movff	?_GetTime+1,fsr2h
  3848  0021E4  CFDE F080          	movff	postinc2,??_CommandSetLed
  3849  0021E8  CFDE F081          	movff	postinc2,??_CommandSetLed+1
  3850  0021EC  CFDE F082          	movff	postinc2,??_CommandSetLed+2
  3851  0021F0  CFDE F083          	movff	postinc2,??_CommandSetLed+3
  3852  0021F4  0100               	movlb	0	; () banked
  3853  0021F6  5187               	movf	CommandSetLed@blinkSeconds& (0+255),w,b
  3854  0021F8  0100               	movlb	0	; () banked
  3855  0021FA  2580               	addwf	??_CommandSetLed& (0+255),w,b
  3856  0021FC  0100               	movlb	0	; () banked
  3857  0021FE  6FD4               	movwf	(__eventFromCommand+2)& (0+255),b
  3858  002200  0E00               	movlw	0
  3859  002202  0100               	movlb	0	; () banked
  3860  002204  2181               	addwfc	(??_CommandSetLed+1)& (0+255),w,b
  3861  002206  0100               	movlb	0	; () banked
  3862  002208  6FD5               	movwf	(__eventFromCommand+3)& (0+255),b
  3863  00220A  0E00               	movlw	0
  3864  00220C  0100               	movlb	0	; () banked
  3865  00220E  2182               	addwfc	(??_CommandSetLed+2)& (0+255),w,b
  3866  002210  0100               	movlb	0	; () banked
  3867  002212  6FD6               	movwf	(__eventFromCommand+4)& (0+255),b
  3868  002214  0E00               	movlw	0
  3869  002216  0100               	movlb	0	; () banked
  3870  002218  2183               	addwfc	(??_CommandSetLed+3)& (0+255),w,b
  3871  00221A  0100               	movlb	0	; () banked
  3872  00221C  6FD7               	movwf	(__eventFromCommand+5)& (0+255),b
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;main.c: 1066: LightLed(led, LED_ORANGE, (((commandData) >> (6)) & 0x01));
  3876  00221E  0E03               	movlw	3
  3877  002220  6E21               	movwf	LightLed@ledState,c
  3878  002222  0100               	movlb	0	; () banked
  3879  002224  4588               	rlncf	CommandSetLed@commandData& (0+255),w,b
  3880  002226  46E8               	rlncf	wreg,f,c
  3881  002228  0B03               	andlw	3
  3882  00222A  0B01               	andlw	1
  3883  00222C  6E22               	movwf	LightLed@blink,c
  3884  00222E  0100               	movlb	0	; () banked
  3885  002230  5189               	movf	CommandSetLed@led& (0+255),w,b
  3886  002232  EC5C  F005         	call	_LightLed
  3887  002236                     l7121:
  3888  002236  FFFF               	dw	65535	; assembler added errata NOP
  3889                           
  3890                           ;main.c: 1067: }
  3891                           ;main.c: 1068: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  3892  002238  EC84  F001         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  3893  00223C  C021  FFD9         	movff	?_ModbusGetUserCommandAdditional1Lo,fsr2l
  3894  002240  C022  FFDA         	movff	?_ModbusGetUserCommandAdditional1Lo+1,fsr2h
  3895  002244  50DF               	movf	indf2,w,c
  3896  002246  0100               	movlb	0	; () banked
  3897  002248  6F80               	movwf	??_CommandSetLed& (0+255),b
  3898  00224A  0100               	movlb	0	; () banked
  3899  00224C  5180               	movf	??_CommandSetLed& (0+255),w,b
  3900  00224E  6E31               	movwf	PlaySound@playDuration,c
  3901  002250  6A32               	clrf	PlaySound@playDuration+1,c
  3902  002252  0100               	movlb	0	; () banked
  3903  002254  5185               	movf	CommandSetLed@soundId& (0+255),w,b
  3904  002256  EC27  F015         	call	_PlaySound
  3905                           
  3906                           ;main.c: 1069: ModbusSetExceptionStatusBit(0, 1);
  3907  00225A  0E01               	movlw	1
  3908  00225C  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  3909  00225E  0E00               	movlw	0
  3910  002260  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
  3911  002264                     l475:
  3912  002264  FFFF               	dw	65535	; assembler added errata NOP
  3913  002266  0012               	return		;funcret
  3914  002268  FFFF               	dw	65535	; errata NOP
  3915  00226A                     __end_of_CommandSetLed:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           postdec1	equ	0xFE5
  3927                           fsr1h	equ	0xFE2
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _ModbusGetUserCommandData *****************
  3937 ;; Defined at:
  3938 ;;		line 198 in file "ModbusRtu.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  2   32[COMRAM] PTR unsigned char 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3952 ;;      Params:         2       0       0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0
  3955 ;;      Totals:         2       0       0       0       0       0       0
  3956 ;;Total ram usage:        2 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    2
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_CommandSetLed
  3963 ;;		_CommandSetStatusLed
  3964 ;;		_ProcessUserCommands
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text13
  3969  0002DE                     __ptext13:
  3970                           	opt stack 0
  3971  0002DE                     _ModbusGetUserCommandData:
  3972                           	opt stack 26
  3973                           
  3974                           ;incstack = 0
  3975  0002DE  FFFF               	dw	65535
  3976  0002E0  0E5B               	movlw	low _ModbusUserCommandData
  3977  0002E2  6E21               	movwf	?_ModbusGetUserCommandData,c
  3978  0002E4  0E00               	movlw	high _ModbusUserCommandData
  3979  0002E6  6E22               	movwf	?_ModbusGetUserCommandData+1,c
  3980  0002E8  0012               	return		;funcret
  3981  0002EA  FFFF               	dw	65535	; errata NOP
  3982  0002EC                     __end_of_ModbusGetUserCommandData:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon	equ	0xFF2
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           postdec1	equ	0xFE5
  3994                           fsr1h	equ	0xFE2
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _ModbusGetUserCommandAdditional2Lo *****************
  4004 ;; Defined at:
  4005 ;;		line 210 in file "ModbusRtu.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  2   32[COMRAM] PTR unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4019 ;;      Params:         2       0       0       0       0       0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0
  4022 ;;      Totals:         2       0       0       0       0       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    2
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_CommandSetLed
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text14
  4034  0002EC                     __ptext14:
  4035                           	opt stack 0
  4036  0002EC                     _ModbusGetUserCommandAdditional2Lo:
  4037                           	opt stack 25
  4038                           
  4039                           ;incstack = 0
  4040  0002EC  FFFF               	dw	65535
  4041  0002EE  0EFA               	movlw	low _ModbusUserCommandAdditional2Lo
  4042  0002F0  6E21               	movwf	?_ModbusGetUserCommandAdditional2Lo,c
  4043  0002F2  0E00               	movlw	high _ModbusUserCommandAdditional2Lo
  4044  0002F4  6E22               	movwf	?_ModbusGetUserCommandAdditional2Lo+1,c
  4045  0002F6  0012               	return		;funcret
  4046  0002F8  FFFF               	dw	65535	; errata NOP
  4047  0002FA                     __end_of_ModbusGetUserCommandAdditional2Lo:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postdec1	equ	0xFE5
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _ModbusGetUserCommandAdditional2Hi *****************
  4069 ;; Defined at:
  4070 ;;		line 209 in file "ModbusRtu.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;		None
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  2   32[COMRAM] PTR unsigned char 
  4077 ;; Registers used:
  4078 ;;		wreg, status,2, status,0
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4084 ;;      Params:         2       0       0       0       0       0       0
  4085 ;;      Locals:         0       0       0       0       0       0       0
  4086 ;;      Temps:          0       0       0       0       0       0       0
  4087 ;;      Totals:         2       0       0       0       0       0       0
  4088 ;;Total ram usage:        2 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    2
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_CommandSetLed
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text15
  4099  0002FA                     __ptext15:
  4100                           	opt stack 0
  4101  0002FA                     _ModbusGetUserCommandAdditional2Hi:
  4102                           	opt stack 25
  4103                           
  4104                           ;incstack = 0
  4105  0002FA  FFFF               	dw	65535
  4106  0002FC  0EF9               	movlw	low _ModbusUserCommandAdditional2Hi
  4107  0002FE  6E21               	movwf	?_ModbusGetUserCommandAdditional2Hi,c
  4108  000300  0E00               	movlw	high _ModbusUserCommandAdditional2Hi
  4109  000302  6E22               	movwf	?_ModbusGetUserCommandAdditional2Hi+1,c
  4110  000304  0012               	return		;funcret
  4111  000306  FFFF               	dw	65535	; errata NOP
  4112  000308                     __end_of_ModbusGetUserCommandAdditional2Hi:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           intcon	equ	0xFF2
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           postdec1	equ	0xFE5
  4124                           fsr1h	equ	0xFE2
  4125                           fsr1l	equ	0xFE1
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           postdec2	equ	0xFDD
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  4134 ;; Defined at:
  4135 ;;		line 204 in file "ModbusRtu.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  2   32[COMRAM] PTR unsigned char 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4149 ;;      Params:         2       0       0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0
  4152 ;;      Totals:         2       0       0       0       0       0       0
  4153 ;;Total ram usage:        2 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    2
  4156 ;; This function calls:
  4157 ;;		Nothing
  4158 ;; This function is called by:
  4159 ;;		_CommandSetLed
  4160 ;;		_CommandSetStatusLed
  4161 ;;		_ProcessUserCommands
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text16
  4166  000308                     __ptext16:
  4167                           	opt stack 0
  4168  000308                     _ModbusGetUserCommandAdditional1Lo:
  4169                           	opt stack 26
  4170                           
  4171                           ;incstack = 0
  4172  000308  FFFF               	dw	65535
  4173  00030A  0E5A               	movlw	low _ModbusUserCommandAdditional1Lo
  4174  00030C  6E21               	movwf	?_ModbusGetUserCommandAdditional1Lo,c
  4175  00030E  0E00               	movlw	high _ModbusUserCommandAdditional1Lo
  4176  000310  6E22               	movwf	?_ModbusGetUserCommandAdditional1Lo+1,c
  4177  000312  0012               	return		;funcret
  4178  000314  FFFF               	dw	65535	; errata NOP
  4179  000316                     __end_of_ModbusGetUserCommandAdditional1Lo:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           intcon	equ	0xFF2
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1h	equ	0xFE2
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  4201 ;; Defined at:
  4202 ;;		line 203 in file "ModbusRtu.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  2   32[COMRAM] PTR unsigned char 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4216 ;;      Params:         2       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0
  4219 ;;      Totals:         2       0       0       0       0       0       0
  4220 ;;Total ram usage:        2 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    2
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_CommandSetLed
  4227 ;;		_CommandSetStatusLed
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text17
  4232  000316                     __ptext17:
  4233                           	opt stack 0
  4234  000316                     _ModbusGetUserCommandAdditional1Hi:
  4235                           	opt stack 25
  4236                           
  4237                           ;incstack = 0
  4238  000316  FFFF               	dw	65535
  4239  000318  0E59               	movlw	low _ModbusUserCommandAdditional1Hi
  4240  00031A  6E21               	movwf	?_ModbusGetUserCommandAdditional1Hi,c
  4241  00031C  0E00               	movlw	high _ModbusUserCommandAdditional1Hi
  4242  00031E  6E22               	movwf	?_ModbusGetUserCommandAdditional1Hi+1,c
  4243  000320  0012               	return		;funcret
  4244  000322  FFFF               	dw	65535	; errata NOP
  4245  000324                     __end_of_ModbusGetUserCommandAdditional1Hi:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postdec1	equ	0xFE5
  4257                           fsr1h	equ	0xFE2
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           postdec2	equ	0xFDD
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _ModbusGetLastCommand *****************
  4267 ;; Defined at:
  4268 ;;		line 965 in file "ModbusRtu.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  address         2   32[COMRAM] PTR unsigned short 
  4271 ;;		 -> io_poll@lastAddress(2), 
  4272 ;;  count           2   34[COMRAM] PTR unsigned short 
  4273 ;;		 -> io_poll@lastEndAddress(2), 
  4274 ;;  command         2   36[COMRAM] PTR unsigned char 
  4275 ;;		 -> io_poll@lastCommand(1), 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;		None
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  2   32[COMRAM] PTR unsigned char 
  4280 ;; Registers used:
  4281 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4287 ;;      Params:         6       0       0       0       0       0       0
  4288 ;;      Locals:         0       0       0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0
  4290 ;;      Totals:         6       0       0       0       0       0       0
  4291 ;;Total ram usage:        6 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    2
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_io_poll
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text18
  4302  003C2E                     __ptext18:
  4303                           	opt stack 0
  4304  003C2E                     _ModbusGetLastCommand:
  4305                           	opt stack 27
  4306                           
  4307                           ;incstack = 0
  4308  003C2E  FFFF               	dw	65535
  4309                           
  4310                           ;ModbusRtu.c: 967: if (address != (0))
  4311  003C30  5021               	movf	ModbusGetLastCommand@address,w,c
  4312  003C32  1022               	iorwf	ModbusGetLastCommand@address+1,w,c
  4313  003C34  B4D8               	btfsc	status,2,c
  4314  003C36  D008               	goto	l7323
  4315                           
  4316                           ;ModbusRtu.c: 968: *address = _lastAddress;
  4317  003C38  C021  FFD9         	movff	ModbusGetLastCommand@address,fsr2l
  4318  003C3C  C022  FFDA         	movff	ModbusGetLastCommand@address+1,fsr2h
  4319  003C40  C0E2  FFDE         	movff	__lastAddress,postinc2
  4320  003C44  C0E3  FFDD         	movff	__lastAddress+1,postdec2
  4321  003C48                     l7323:
  4322  003C48  FFFF               	dw	65535	; assembler added errata NOP
  4323                           
  4324                           ;ModbusRtu.c: 969: if (count != (0))
  4325  003C4A  5023               	movf	ModbusGetLastCommand@count,w,c
  4326  003C4C  1024               	iorwf	ModbusGetLastCommand@count+1,w,c
  4327  003C4E  B4D8               	btfsc	status,2,c
  4328  003C50  D008               	goto	l7327
  4329                           
  4330                           ;ModbusRtu.c: 970: *count = _lastCount;
  4331  003C52  C023  FFD9         	movff	ModbusGetLastCommand@count,fsr2l
  4332  003C56  C024  FFDA         	movff	ModbusGetLastCommand@count+1,fsr2h
  4333  003C5A  C0E4  FFDE         	movff	__lastCount,postinc2
  4334  003C5E  C0E5  FFDD         	movff	__lastCount+1,postdec2
  4335  003C62                     l7327:
  4336  003C62  FFFF               	dw	65535	; assembler added errata NOP
  4337                           
  4338                           ;ModbusRtu.c: 971: if(command != (0))
  4339  003C64  5025               	movf	ModbusGetLastCommand@command,w,c
  4340  003C66  1026               	iorwf	ModbusGetLastCommand@command+1,w,c
  4341  003C68  B4D8               	btfsc	status,2,c
  4342  003C6A  D006               	goto	l7331
  4343                           
  4344                           ;ModbusRtu.c: 972: *command = _lastCommand;
  4345  003C6C  C025  FFD9         	movff	ModbusGetLastCommand@command,fsr2l
  4346  003C70  C026  FFDA         	movff	ModbusGetLastCommand@command+1,fsr2h
  4347  003C74  C04C  FFDF         	movff	__lastCommand,indf2
  4348  003C78                     l7331:
  4349  003C78  FFFF               	dw	65535	; assembler added errata NOP
  4350                           
  4351                           ;ModbusRtu.c: 973: return &_lastFunction;
  4352  003C7A  0E5D               	movlw	low __lastFunction
  4353  003C7C  6E21               	movwf	?_ModbusGetLastCommand,c
  4354  003C7E  0E00               	movlw	high __lastFunction
  4355  003C80  6E22               	movwf	?_ModbusGetLastCommand+1,c
  4356  003C82  0012               	return		;funcret
  4357  003C84  FFFF               	dw	65535	; errata NOP
  4358  003C86                     __end_of_ModbusGetLastCommand:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           intcon	equ	0xFF2
  4367                           postinc0	equ	0xFEE
  4368                           wreg	equ	0xFE8
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _getHourMin *****************
  4380 ;; Defined at:
  4381 ;;		line 256 in file "interrupts.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  hour            2   32[COMRAM] PTR unsigned char 
  4384 ;;		 -> main@hour(1), 
  4385 ;;  min             2   34[COMRAM] PTR unsigned char 
  4386 ;;		 -> main@minute(1), 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      unsigned char 
  4391 ;; Registers used:
  4392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4398 ;;      Params:         4       0       0       0       0       0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0
  4400 ;;      Temps:          0       0       0       0       0       0       0
  4401 ;;      Totals:         4       0       0       0       0       0       0
  4402 ;;Total ram usage:        4 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    2
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_main
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text19
  4413  000124                     __ptext19:
  4414                           	opt stack 0
  4415  000124                     _getHourMin:
  4416                           	opt stack 28
  4417                           
  4418                           ;incstack = 0
  4419  000124  FFFF               	dw	65535
  4420                           
  4421                           ;interrupts.c: 258: if(globalHours == 0xFF)
  4422  000126  285E               	incf	_globalHours,w,c	;volatile
  4423  000128  B4D8               	btfsc	status,2,c
  4424  00012A  D00E               	goto	l109
  4425                           
  4426                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  4427                           
  4428                           ;interrupts.c: 259: return 0;
  4429                           ;	Return value of _getHourMin is never used
  4430  00012C  9EF2               	bcf	intcon,7,c	;volatile
  4431                           
  4432                           ;interrupts.c: 261: *hour = globalHours;
  4433  00012E  C021  FFD9         	movff	getHourMin@hour,fsr2l
  4434  000132  C022  FFDA         	movff	getHourMin@hour+1,fsr2h
  4435  000136  C05E  FFDF         	movff	_globalHours,indf2	;volatile
  4436                           
  4437                           ;interrupts.c: 262: *min = globalMinutes;
  4438  00013A  C023  FFD9         	movff	getHourMin@min,fsr2l
  4439  00013E  C024  FFDA         	movff	getHourMin@min+1,fsr2h
  4440  000142  C058  FFDF         	movff	_globalMinutes,indf2	;volatile
  4441                           
  4442                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  4443  000146  8EF2               	bsf	intcon,7,c	;volatile
  4444  000148                     l109:
  4445  000148  FFFF               	dw	65535	; assembler added errata NOP
  4446  00014A  0012               	return		;funcret
  4447  00014C  FFFF               	dw	65535	; errata NOP
  4448  00014E                     __end_of_getHourMin:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           postinc2	equ	0xFDE
  4464                           postdec2	equ	0xFDD
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _SwitchOffAllDiaryLeds *****************
  4470 ;; Defined at:
  4471 ;;		line 367 in file "main.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               1   40[COMRAM] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      void 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4485 ;;      Params:         0       0       0       0       0       0       0
  4486 ;;      Locals:         1       0       0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0
  4488 ;;      Totals:         1       0       0       0       0       0       0
  4489 ;;Total ram usage:        1 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    3
  4492 ;; This function calls:
  4493 ;;		_LightLed
  4494 ;; This function is called by:
  4495 ;;		_main
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text20
  4500  003FD2                     __ptext20:
  4501                           	opt stack 0
  4502  003FD2                     _SwitchOffAllDiaryLeds:
  4503                           	opt stack 27
  4504                           
  4505                           ;incstack = 0
  4506  003FD2  FFFF               	dw	65535
  4507                           
  4508                           ;main.c: 369: for(uint8_t i = 60 - _maxDiaryEvents + 1; i <= 60; i++)
  4509  003FD4  504D               	movf	__maxDiaryEvents,w,c
  4510  003FD6  0800               	sublw	0
  4511  003FD8  0F3D               	addlw	61
  4512  003FDA  6E29               	movwf	SwitchOffAllDiaryLeds@i,c
  4513  003FDC  FFFF               	dw	65535	; assembler added errata NOP
  4514  003FDE  0E3C               	movlw	60
  4515  003FE0  6429               	cpfsgt	SwitchOffAllDiaryLeds@i,c
  4516  003FE2  D001               	goto	l8091
  4517  003FE4  D00A               	goto	l291
  4518  003FE6                     l8091:
  4519  003FE6  FFFF               	dw	65535	; assembler added errata NOP
  4520                           
  4521                           ;main.c: 370: {
  4522                           ;main.c: 371: LightLed(i, LED_OFF, 0);
  4523  003FE8  0E00               	movlw	0
  4524  003FEA  6E21               	movwf	LightLed@ledState,c
  4525  003FEC  0E00               	movlw	0
  4526  003FEE  6E22               	movwf	LightLed@blink,c
  4527  003FF0  5029               	movf	SwitchOffAllDiaryLeds@i,w,c
  4528  003FF2  EC5C  F005         	call	_LightLed
  4529  003FF6  2A29               	incf	SwitchOffAllDiaryLeds@i,f,c
  4530  003FF8  D7F1               	goto	L1
  4531  003FFA                     l291:
  4532  003FFA  FFFF               	dw	65535	; assembler added errata NOP
  4533  003FFC  0012               	return		;funcret
  4534  003FFE  FFFF               	dw	65535	; errata NOP
  4535  004000                     __end_of_SwitchOffAllDiaryLeds:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           intcon	equ	0xFF2
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           postdec2	equ	0xFDD
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _ResetEventFromCommand *****************
  4557 ;; Defined at:
  4558 ;;		line 693 in file "main.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  state           1    wreg     unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  state           1   40[COMRAM] unsigned char 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4572 ;;      Params:         0       0       0       0       0       0       0
  4573 ;;      Locals:         3       0       0       0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0
  4575 ;;      Totals:         3       0       0       0       0       0       0
  4576 ;;Total ram usage:        3 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    3
  4579 ;; This function calls:
  4580 ;;		_LightLed
  4581 ;;		_StopPlaying
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text21
  4588  003C86                     __ptext21:
  4589                           	opt stack 0
  4590  003C86                     _ResetEventFromCommand:
  4591                           	opt stack 27
  4592                           
  4593                           ;incstack = 0
  4594  003C86  FFFF               	dw	65535
  4595                           
  4596                           ;ResetEventFromCommand@state stored from wreg
  4597  003C88  6E29               	movwf	ResetEventFromCommand@state,c
  4598                           
  4599                           ;main.c: 695: if(!_eventFromCommand.IsFire)
  4600  003C8A  0100               	movlb	0	; () banked
  4601  003C8C  51D2               	movf	__eventFromCommand& (0+255),w,b
  4602  003C8E  B4D8               	btfsc	status,2,c
  4603  003C90  D023               	goto	l416
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 697: LightLed(_eventFromCommand.LedNum, state ? LED_GREEN : LED_RED, 0);
  4607                           
  4608                           ; BSR set to: 0
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;main.c: 696: return;
  4612  003C92  5029               	movf	ResetEventFromCommand@state,w,c
  4613  003C94  A4D8               	btfss	status,2,c
  4614  003C96  D004               	goto	l8293
  4615                           
  4616                           ; BSR set to: 0
  4617  003C98  0E00               	movlw	0
  4618  003C9A  6E2B               	movwf	_ResetEventFromCommand$917+1,c
  4619  003C9C  0E02               	movlw	2
  4620  003C9E  D004               	goto	L2
  4621  003CA0                     l8293:
  4622  003CA0  FFFF               	dw	65535	; assembler added errata NOP
  4623                           
  4624                           ; BSR set to: 0
  4625  003CA2  0E00               	movlw	0
  4626  003CA4  6E2B               	movwf	_ResetEventFromCommand$917+1,c
  4627  003CA6  0E01               	movlw	1
  4628  003CA8                     L2:
  4629  003CA8  FFFF               	dw	65535	; assembler added errata NOP
  4630  003CAA  6E2A               	movwf	_ResetEventFromCommand$917,c
  4631                           
  4632                           ; BSR set to: 0
  4633                           
  4634                           ; BSR set to: 0
  4635  003CAC  C02A  F021         	movff	_ResetEventFromCommand$917,LightLed@ledState
  4636  003CB0  0E00               	movlw	0
  4637  003CB2  6E22               	movwf	LightLed@blink,c
  4638  003CB4  0100               	movlb	0	; () banked
  4639  003CB6  51D3               	movf	(__eventFromCommand+1)& (0+255),w,b
  4640  003CB8  EC5C  F005         	call	_LightLed
  4641                           
  4642                           ;main.c: 698: _eventFromCommand.IsFire = 0;
  4643  003CBC  0E00               	movlw	0
  4644  003CBE  0100               	movlb	0	; () banked
  4645  003CC0  6FD2               	movwf	__eventFromCommand& (0+255),b
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;main.c: 699: _eventFromCommand.ResetSecond = 0;
  4649  003CC2  0E00               	movlw	0
  4650  003CC4  0100               	movlb	0	; () banked
  4651  003CC6  6FD4               	movwf	(__eventFromCommand+2)& (0+255),b
  4652  003CC8  0E00               	movlw	0
  4653  003CCA  6FD5               	movwf	(__eventFromCommand+3)& (0+255),b
  4654  003CCC  0E00               	movlw	0
  4655  003CCE  6FD6               	movwf	(__eventFromCommand+4)& (0+255),b
  4656  003CD0  0E00               	movlw	0
  4657  003CD2  6FD7               	movwf	(__eventFromCommand+5)& (0+255),b
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;main.c: 700: StopPlaying();
  4661  003CD4  EC4A  F001         	call	_StopPlaying	;wreg free
  4662  003CD8                     l416:
  4663  003CD8  FFFF               	dw	65535	; assembler added errata NOP
  4664  003CDA  0012               	return		;funcret
  4665  003CDC  FFFF               	dw	65535	; errata NOP
  4666  003CDE                     __end_of_ResetEventFromCommand:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1h	equ	0xFE2
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _ResetEvent *****************
  4688 ;; Defined at:
  4689 ;;		line 679 in file "main.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  state           1    wreg     unsigned char 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  state           1   42[COMRAM] unsigned char 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         0       0       0       0       0       0       0
  4704 ;;      Locals:         3       0       0       0       0       0       0
  4705 ;;      Temps:          2       0       0       0       0       0       0
  4706 ;;      Totals:         5       0       0       0       0       0       0
  4707 ;;Total ram usage:        5 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    3
  4710 ;; This function calls:
  4711 ;;		_GetCurrentEventDiodeNum
  4712 ;;		_LightLed
  4713 ;;		_StopPlaying
  4714 ;; This function is called by:
  4715 ;;		_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text22
  4720  003A56                     __ptext22:
  4721                           	opt stack 0
  4722  003A56                     _ResetEvent:
  4723                           	opt stack 27
  4724                           
  4725                           ;incstack = 0
  4726  003A56  FFFF               	dw	65535
  4727                           
  4728                           ;ResetEvent@state stored from wreg
  4729  003A58  6E2B               	movwf	ResetEvent@state,c
  4730                           
  4731                           ;main.c: 681: if(!_currenDiaryEvent.IsFire)
  4732  003A5A  5039               	movf	__currenDiaryEvent,w,c
  4733  003A5C  B4D8               	btfsc	status,2,c
  4734  003A5E  D029               	goto	l408
  4735                           
  4736                           ;main.c: 683: LightLed(GetCurrentEventDiodeNum(), state ? LED_GREEN : LED_RED, 0);
  4737                           
  4738                           ;main.c: 682: return;
  4739  003A60  502B               	movf	ResetEvent@state,w,c
  4740  003A62  A4D8               	btfss	status,2,c
  4741  003A64  D004               	goto	l8271
  4742  003A66  0E00               	movlw	0
  4743  003A68  6E2D               	movwf	_ResetEvent$914+1,c
  4744  003A6A  0E02               	movlw	2
  4745  003A6C  D004               	goto	L3
  4746  003A6E                     l8271:
  4747  003A6E  FFFF               	dw	65535	; assembler added errata NOP
  4748  003A70  0E00               	movlw	0
  4749  003A72  6E2D               	movwf	_ResetEvent$914+1,c
  4750  003A74  0E01               	movlw	1
  4751  003A76                     L3:
  4752  003A76  FFFF               	dw	65535	; assembler added errata NOP
  4753  003A78  6E2C               	movwf	_ResetEvent$914,c
  4754  003A7A  C02C  F021         	movff	_ResetEvent$914,LightLed@ledState
  4755  003A7E  0E00               	movlw	0
  4756  003A80  6E22               	movwf	LightLed@blink,c
  4757  003A82  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  4758  003A86  EC5C  F005         	call	_LightLed
  4759                           
  4760                           ;main.c: 684: _currenDiaryEvent.IsFire = 0;
  4761  003A8A  0E00               	movlw	0
  4762  003A8C  6E39               	movwf	__currenDiaryEvent,c
  4763                           
  4764                           ;main.c: 685: _currenDiaryEvent.FiredEventNum = 0xff;
  4765  003A8E  683A               	setf	__currenDiaryEvent+1,c
  4766                           
  4767                           ;main.c: 686: _currenDiaryEvent.ResetSecond = 0;
  4768  003A90  0E00               	movlw	0
  4769  003A92  6E3D               	movwf	__currenDiaryEvent+4,c
  4770  003A94  0E00               	movlw	0
  4771  003A96  6E3E               	movwf	__currenDiaryEvent+5,c
  4772  003A98  0E00               	movlw	0
  4773  003A9A  6E3F               	movwf	__currenDiaryEvent+6,c
  4774  003A9C  0E00               	movlw	0
  4775  003A9E  6E40               	movwf	__currenDiaryEvent+7,c
  4776                           
  4777                           ;main.c: 687: StopPlaying();
  4778  003AA0  EC4A  F001         	call	_StopPlaying	;wreg free
  4779                           
  4780                           ;main.c: 688: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  4781  003AA4  503A               	movf	__currenDiaryEvent+1,w,c
  4782  003AA6  6E29               	movwf	??_ResetEvent& (0+255),c
  4783  003AA8  5041               	movf	__currenDiaryEvent+8,w,c
  4784  003AAA  0101               	movlb	1	; () banked
  4785  003AAC  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4786  003AAE  C029  F1D9         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4787  003AB2                     l408:
  4788  003AB2  FFFF               	dw	65535	; assembler added errata NOP
  4789  003AB4  0012               	return		;funcret
  4790  003AB6  FFFF               	dw	65535	; errata NOP
  4791  003AB8                     __end_of_ResetEvent:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postdec1	equ	0xFE5
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _ProcessLightBlock *****************
  4813 ;; Defined at:
  4814 ;;		line 524 in file "main.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  curMs           2   33[COMRAM] PTR unsigned long 
  4817 ;;		 -> main@curMs(4), 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4829 ;;      Params:         2       0       0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0
  4831 ;;      Temps:          8       0       0       0       0       0       0
  4832 ;;      Totals:        10       0       0       0       0       0       0
  4833 ;;Total ram usage:       10 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    3
  4836 ;; This function calls:
  4837 ;;		_UpdateLedRegister
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text23
  4844  001284                     __ptext23:
  4845                           	opt stack 0
  4846  001284                     _ProcessLightBlock:
  4847                           	opt stack 27
  4848                           
  4849                           ;incstack = 0
  4850  001284  FFFF               	dw	65535
  4851                           
  4852                           ;main.c: 526: diffTime = *curMs - oldBlinkOnTime;
  4853  001286  C022  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4854  00128A  C023  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4855  00128E  CFDE F024          	movff	postinc2,??_ProcessLightBlock
  4856  001292  CFDE F025          	movff	postinc2,??_ProcessLightBlock+1
  4857  001296  CFDE F026          	movff	postinc2,??_ProcessLightBlock+2
  4858  00129A  CFDE F027          	movff	postinc2,??_ProcessLightBlock+3
  4859  00129E  C11C  F028         	movff	_oldBlinkOnTime,??_ProcessLightBlock+4
  4860  0012A2  C11D  F029         	movff	_oldBlinkOnTime+1,??_ProcessLightBlock+5
  4861  0012A6  C11E  F02A         	movff	_oldBlinkOnTime+2,??_ProcessLightBlock+6
  4862  0012AA  C11F  F02B         	movff	_oldBlinkOnTime+3,??_ProcessLightBlock+7
  4863  0012AE  1E28               	comf	??_ProcessLightBlock+4,f,c
  4864  0012B0  1E29               	comf	??_ProcessLightBlock+5,f,c
  4865  0012B2  1E2A               	comf	??_ProcessLightBlock+6,f,c
  4866  0012B4  1E2B               	comf	??_ProcessLightBlock+7,f,c
  4867  0012B6  2A28               	incf	??_ProcessLightBlock+4,f,c
  4868  0012B8  0E00               	movlw	0
  4869  0012BA  2229               	addwfc	??_ProcessLightBlock+5,f,c
  4870  0012BC  222A               	addwfc	??_ProcessLightBlock+6,f,c
  4871  0012BE  222B               	addwfc	??_ProcessLightBlock+7,f,c
  4872  0012C0  5024               	movf	??_ProcessLightBlock,w,c
  4873  0012C2  2428               	addwf	??_ProcessLightBlock+4,w,c
  4874  0012C4  0100               	movlb	0	; () banked
  4875  0012C6  6FD8               	movwf	_diffTime& (0+255),b
  4876  0012C8  5025               	movf	??_ProcessLightBlock+1,w,c
  4877  0012CA  2029               	addwfc	??_ProcessLightBlock+5,w,c
  4878  0012CC  0100               	movlb	0	; () banked
  4879  0012CE  6FD9               	movwf	(_diffTime+1)& (0+255),b
  4880  0012D0  5026               	movf	??_ProcessLightBlock+2,w,c
  4881  0012D2  202A               	addwfc	??_ProcessLightBlock+6,w,c
  4882  0012D4  0100               	movlb	0	; () banked
  4883  0012D6  6FDA               	movwf	(_diffTime+2)& (0+255),b
  4884  0012D8  5027               	movf	??_ProcessLightBlock+3,w,c
  4885  0012DA  202B               	addwfc	??_ProcessLightBlock+7,w,c
  4886  0012DC  0100               	movlb	0	; () banked
  4887  0012DE  6FDB               	movwf	(_diffTime+3)& (0+255),b
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;main.c: 527: if(diffTime > 576)
  4891  0012E0  0100               	movlb	0	; () banked
  4892  0012E2  51DB               	movf	(_diffTime+3)& (0+255),w,b
  4893  0012E4  0100               	movlb	0	; () banked
  4894  0012E6  11DA               	iorwf	(_diffTime+2)& (0+255),w,b
  4895  0012E8  E108               	bnz	u7410
  4896  0012EA  0E41               	movlw	65
  4897  0012EC  0100               	movlb	0	; () banked
  4898  0012EE  5DD8               	subwf	_diffTime& (0+255),w,b
  4899  0012F0  0E02               	movlw	2
  4900  0012F2  0100               	movlb	0	; () banked
  4901  0012F4  59D9               	subwfb	(_diffTime+1)& (0+255),w,b
  4902  0012F6  A0D8               	btfss	status,0,c
  4903  0012F8  D00F               	goto	l8107
  4904  0012FA                     u7410:
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;main.c: 528: {
  4908                           ;main.c: 529: blinkOn = 1;
  4909  0012FA  0E01               	movlw	1
  4910  0012FC  6E54               	movwf	_blinkOn,c
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;main.c: 530: oldBlinkOnTime = *curMs;
  4914  0012FE  C022  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4915  001302  C023  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4916  001306  CFDE F11C          	movff	postinc2,_oldBlinkOnTime
  4917  00130A  CFDE F11D          	movff	postinc2,_oldBlinkOnTime+1
  4918  00130E  CFDE F11E          	movff	postinc2,_oldBlinkOnTime+2
  4919  001312  CFDE F11F          	movff	postinc2,_oldBlinkOnTime+3
  4920                           
  4921                           ;main.c: 531: }
  4922  001316  D128               	goto	l8259
  4923  001318                     l8107:
  4924  001318  FFFF               	dw	65535	; assembler added errata NOP
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;main.c: 532: else if(blinkOn && diffTime > 384)
  4928  00131A  5054               	movf	_blinkOn,w,c
  4929  00131C  B4D8               	btfsc	status,2,c
  4930  00131E  D124               	goto	l8259
  4931                           
  4932                           ; BSR set to: 0
  4933  001320  0100               	movlb	0	; () banked
  4934  001322  51DB               	movf	(_diffTime+3)& (0+255),w,b
  4935  001324  0100               	movlb	0	; () banked
  4936  001326  11DA               	iorwf	(_diffTime+2)& (0+255),w,b
  4937  001328  E108               	bnz	u7430
  4938  00132A  0E81               	movlw	129
  4939  00132C  0100               	movlb	0	; () banked
  4940  00132E  5DD8               	subwf	_diffTime& (0+255),w,b
  4941  001330  0E01               	movlw	1
  4942  001332  0100               	movlb	0	; () banked
  4943  001334  59D9               	subwfb	(_diffTime+1)& (0+255),w,b
  4944  001336  A0D8               	btfss	status,0,c
  4945  001338  D117               	goto	l8259
  4946  00133A                     u7430:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 533: {
  4950                           ;main.c: 534: blinkOn = 0;
  4951  00133A  0E00               	movlw	0
  4952  00133C  6E54               	movwf	_blinkOn,c
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;main.c: 535: }
  4956                           ;main.c: 539: switch(currentLedBlock)
  4957                           
  4958                           ; BSR set to: 0
  4959  00133E  D114               	goto	l8259
  4960  001340                     l8113:
  4961  001340  FFFF               	dw	65535	; assembler added errata NOP
  4962                           
  4963                           ;main.c: 542: LATA &= 0xF0;
  4964  001342  0EF0               	movlw	240
  4965  001344  1689               	andwf	3977,f,c	;volatile
  4966                           
  4967                           ;main.c: 543: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4968  001346  5054               	movf	_blinkOn,w,c
  4969  001348  B4D8               	btfsc	status,2,c
  4970  00134A  D003               	goto	l8119
  4971  00134C  C0C2  FF8A         	movff	_ledStatuses,3978	;volatile
  4972  001350  D006               	goto	l8121
  4973  001352                     l8119:
  4974  001352  FFFF               	dw	65535	; assembler added errata NOP
  4975  001354  0100               	movlb	0	; () banked
  4976  001356  51C2               	movf	_ledStatuses& (0+255),w,b
  4977  001358  0101               	movlb	1	; () banked
  4978  00135A  1900               	xorwf	_ledBlink& (0+255),w,b
  4979  00135C  6E8A               	movwf	3978,c	;volatile
  4980  00135E                     l8121:
  4981  00135E  FFFF               	dw	65535	; assembler added errata NOP
  4982  001360  0E00               	movlw	0
  4983  001362  EC6F  F01E         	call	_UpdateLedRegister
  4984                           
  4985                           ;main.c: 544: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4986  001366  5054               	movf	_blinkOn,w,c
  4987  001368  B4D8               	btfsc	status,2,c
  4988  00136A  D003               	goto	l8127
  4989  00136C  C0C3  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4990  001370  D006               	goto	l8129
  4991  001372                     l8127:
  4992  001372  FFFF               	dw	65535	; assembler added errata NOP
  4993  001374  0100               	movlb	0	; () banked
  4994  001376  51C3               	movf	(_ledStatuses+1)& (0+255),w,b
  4995  001378  0101               	movlb	1	; () banked
  4996  00137A  1901               	xorwf	(_ledBlink+1)& (0+255),w,b
  4997  00137C  6E8A               	movwf	3978,c	;volatile
  4998  00137E                     l8129:
  4999  00137E  FFFF               	dw	65535	; assembler added errata NOP
  5000  001380  0E01               	movlw	1
  5001  001382  EC6F  F01E         	call	_UpdateLedRegister
  5002                           
  5003                           ;main.c: 545: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5004  001386  5054               	movf	_blinkOn,w,c
  5005  001388  B4D8               	btfsc	status,2,c
  5006  00138A  D003               	goto	l8135
  5007  00138C  C0C4  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5008  001390  D006               	goto	l8137
  5009  001392                     l8135:
  5010  001392  FFFF               	dw	65535	; assembler added errata NOP
  5011  001394  0100               	movlb	0	; () banked
  5012  001396  51C4               	movf	(_ledStatuses+2)& (0+255),w,b
  5013  001398  0101               	movlb	1	; () banked
  5014  00139A  1902               	xorwf	(_ledBlink+2)& (0+255),w,b
  5015  00139C  6E8A               	movwf	3978,c	;volatile
  5016  00139E                     l8137:
  5017  00139E  FFFF               	dw	65535	; assembler added errata NOP
  5018  0013A0  0E02               	movlw	2
  5019  0013A2  EC6F  F01E         	call	_UpdateLedRegister
  5020                           
  5021                           ;main.c: 546: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5022  0013A6  5054               	movf	_blinkOn,w,c
  5023  0013A8  B4D8               	btfsc	status,2,c
  5024  0013AA  D003               	goto	l8143
  5025  0013AC  C0CE  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5026  0013B0  D006               	goto	l8145
  5027  0013B2                     l8143:
  5028  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  5029  0013B4  0100               	movlb	0	; () banked
  5030  0013B6  51CE               	movf	(_ledStatuses+12)& (0+255),w,b
  5031  0013B8  0101               	movlb	1	; () banked
  5032  0013BA  190C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5033  0013BC  6E8A               	movwf	3978,c	;volatile
  5034  0013BE                     l8145:
  5035  0013BE  FFFF               	dw	65535	; assembler added errata NOP
  5036  0013C0  0E03               	movlw	3
  5037  0013C2  EC6F  F01E         	call	_UpdateLedRegister
  5038                           
  5039                           ;main.c: 547: LATAbits.LATA0 = 1;
  5040  0013C6  8089               	bsf	3977,0,c	;volatile
  5041                           
  5042                           ;main.c: 548: break;
  5043  0013C8  D0DD               	goto	l8261
  5044  0013CA                     l8149:
  5045  0013CA  FFFF               	dw	65535	; assembler added errata NOP
  5046                           
  5047                           ;main.c: 550: LATA &= 0xF0;
  5048  0013CC  0EF0               	movlw	240
  5049  0013CE  1689               	andwf	3977,f,c	;volatile
  5050                           
  5051                           ;main.c: 551: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5052  0013D0  5054               	movf	_blinkOn,w,c
  5053  0013D2  B4D8               	btfsc	status,2,c
  5054  0013D4  D003               	goto	l8155
  5055  0013D6  C0C5  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5056  0013DA  D006               	goto	l8157
  5057  0013DC                     l8155:
  5058  0013DC  FFFF               	dw	65535	; assembler added errata NOP
  5059  0013DE  0100               	movlb	0	; () banked
  5060  0013E0  51C5               	movf	(_ledStatuses+3)& (0+255),w,b
  5061  0013E2  0101               	movlb	1	; () banked
  5062  0013E4  1903               	xorwf	(_ledBlink+3)& (0+255),w,b
  5063  0013E6  6E8A               	movwf	3978,c	;volatile
  5064  0013E8                     l8157:
  5065  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  5066  0013EA  0E00               	movlw	0
  5067  0013EC  EC6F  F01E         	call	_UpdateLedRegister
  5068                           
  5069                           ;main.c: 552: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5070  0013F0  5054               	movf	_blinkOn,w,c
  5071  0013F2  B4D8               	btfsc	status,2,c
  5072  0013F4  D003               	goto	l8163
  5073  0013F6  C0C6  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5074  0013FA  D006               	goto	l8165
  5075  0013FC                     l8163:
  5076  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  5077  0013FE  0100               	movlb	0	; () banked
  5078  001400  51C6               	movf	(_ledStatuses+4)& (0+255),w,b
  5079  001402  0101               	movlb	1	; () banked
  5080  001404  1904               	xorwf	(_ledBlink+4)& (0+255),w,b
  5081  001406  6E8A               	movwf	3978,c	;volatile
  5082  001408                     l8165:
  5083  001408  FFFF               	dw	65535	; assembler added errata NOP
  5084  00140A  0E01               	movlw	1
  5085  00140C  EC6F  F01E         	call	_UpdateLedRegister
  5086                           
  5087                           ;main.c: 553: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5088  001410  5054               	movf	_blinkOn,w,c
  5089  001412  B4D8               	btfsc	status,2,c
  5090  001414  D003               	goto	l8171
  5091  001416  C0C7  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5092  00141A  D006               	goto	l8173
  5093  00141C                     l8171:
  5094  00141C  FFFF               	dw	65535	; assembler added errata NOP
  5095  00141E  0100               	movlb	0	; () banked
  5096  001420  51C7               	movf	(_ledStatuses+5)& (0+255),w,b
  5097  001422  0101               	movlb	1	; () banked
  5098  001424  1905               	xorwf	(_ledBlink+5)& (0+255),w,b
  5099  001426  6E8A               	movwf	3978,c	;volatile
  5100  001428                     l8173:
  5101  001428  FFFF               	dw	65535	; assembler added errata NOP
  5102  00142A  0E02               	movlw	2
  5103  00142C  EC6F  F01E         	call	_UpdateLedRegister
  5104                           
  5105                           ;main.c: 554: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5106  001430  5054               	movf	_blinkOn,w,c
  5107  001432  B4D8               	btfsc	status,2,c
  5108  001434  D003               	goto	l8179
  5109  001436  C0CF  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5110  00143A  D006               	goto	l8181
  5111  00143C                     l8179:
  5112  00143C  FFFF               	dw	65535	; assembler added errata NOP
  5113  00143E  0100               	movlb	0	; () banked
  5114  001440  51CF               	movf	(_ledStatuses+13)& (0+255),w,b
  5115  001442  0101               	movlb	1	; () banked
  5116  001444  190D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5117  001446  6E8A               	movwf	3978,c	;volatile
  5118  001448                     l8181:
  5119  001448  FFFF               	dw	65535	; assembler added errata NOP
  5120  00144A  0E03               	movlw	3
  5121  00144C  EC6F  F01E         	call	_UpdateLedRegister
  5122                           
  5123                           ;main.c: 555: LATAbits.LATA1 = 1;
  5124  001450  8289               	bsf	3977,1,c	;volatile
  5125                           
  5126                           ;main.c: 556: break;
  5127  001452  D098               	goto	l8261
  5128  001454                     l8185:
  5129  001454  FFFF               	dw	65535	; assembler added errata NOP
  5130                           
  5131                           ;main.c: 558: LATA &= 0xF0;
  5132  001456  0EF0               	movlw	240
  5133  001458  1689               	andwf	3977,f,c	;volatile
  5134                           
  5135                           ;main.c: 559: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5136  00145A  5054               	movf	_blinkOn,w,c
  5137  00145C  B4D8               	btfsc	status,2,c
  5138  00145E  D003               	goto	l8191
  5139  001460  C0C8  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5140  001464  D006               	goto	l8193
  5141  001466                     l8191:
  5142  001466  FFFF               	dw	65535	; assembler added errata NOP
  5143  001468  0100               	movlb	0	; () banked
  5144  00146A  51C8               	movf	(_ledStatuses+6)& (0+255),w,b
  5145  00146C  0101               	movlb	1	; () banked
  5146  00146E  1906               	xorwf	(_ledBlink+6)& (0+255),w,b
  5147  001470  6E8A               	movwf	3978,c	;volatile
  5148  001472                     l8193:
  5149  001472  FFFF               	dw	65535	; assembler added errata NOP
  5150  001474  0E00               	movlw	0
  5151  001476  EC6F  F01E         	call	_UpdateLedRegister
  5152                           
  5153                           ;main.c: 560: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5154  00147A  5054               	movf	_blinkOn,w,c
  5155  00147C  B4D8               	btfsc	status,2,c
  5156  00147E  D003               	goto	l8199
  5157  001480  C0C9  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5158  001484  D006               	goto	l8201
  5159  001486                     l8199:
  5160  001486  FFFF               	dw	65535	; assembler added errata NOP
  5161  001488  0100               	movlb	0	; () banked
  5162  00148A  51C9               	movf	(_ledStatuses+7)& (0+255),w,b
  5163  00148C  0101               	movlb	1	; () banked
  5164  00148E  1907               	xorwf	(_ledBlink+7)& (0+255),w,b
  5165  001490  6E8A               	movwf	3978,c	;volatile
  5166  001492                     l8201:
  5167  001492  FFFF               	dw	65535	; assembler added errata NOP
  5168  001494  0E01               	movlw	1
  5169  001496  EC6F  F01E         	call	_UpdateLedRegister
  5170                           
  5171                           ;main.c: 561: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5172  00149A  5054               	movf	_blinkOn,w,c
  5173  00149C  B4D8               	btfsc	status,2,c
  5174  00149E  D003               	goto	l8207
  5175  0014A0  C0CA  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5176  0014A4  D006               	goto	l8209
  5177  0014A6                     l8207:
  5178  0014A6  FFFF               	dw	65535	; assembler added errata NOP
  5179  0014A8  0100               	movlb	0	; () banked
  5180  0014AA  51CA               	movf	(_ledStatuses+8)& (0+255),w,b
  5181  0014AC  0101               	movlb	1	; () banked
  5182  0014AE  1908               	xorwf	(_ledBlink+8)& (0+255),w,b
  5183  0014B0  6E8A               	movwf	3978,c	;volatile
  5184  0014B2                     l8209:
  5185  0014B2  FFFF               	dw	65535	; assembler added errata NOP
  5186  0014B4  0E02               	movlw	2
  5187  0014B6  EC6F  F01E         	call	_UpdateLedRegister
  5188                           
  5189                           ;main.c: 562: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5190  0014BA  5054               	movf	_blinkOn,w,c
  5191  0014BC  B4D8               	btfsc	status,2,c
  5192  0014BE  D003               	goto	l8215
  5193  0014C0  C0D0  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5194  0014C4  D006               	goto	l8217
  5195  0014C6                     l8215:
  5196  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  5197  0014C8  0100               	movlb	0	; () banked
  5198  0014CA  51D0               	movf	(_ledStatuses+14)& (0+255),w,b
  5199  0014CC  0101               	movlb	1	; () banked
  5200  0014CE  190E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5201  0014D0  6E8A               	movwf	3978,c	;volatile
  5202  0014D2                     l8217:
  5203  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  5204  0014D4  0E03               	movlw	3
  5205  0014D6  EC6F  F01E         	call	_UpdateLedRegister
  5206                           
  5207                           ;main.c: 563: LATAbits.LATA2 = 1;
  5208  0014DA  8489               	bsf	3977,2,c	;volatile
  5209                           
  5210                           ;main.c: 564: break;
  5211  0014DC  D053               	goto	l8261
  5212  0014DE                     l8221:
  5213  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  5214                           
  5215                           ;main.c: 566: LATA &= 0xF0;
  5216  0014E0  0EF0               	movlw	240
  5217  0014E2  1689               	andwf	3977,f,c	;volatile
  5218                           
  5219                           ;main.c: 567: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5220  0014E4  5054               	movf	_blinkOn,w,c
  5221  0014E6  B4D8               	btfsc	status,2,c
  5222  0014E8  D003               	goto	l8227
  5223  0014EA  C0CB  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5224  0014EE  D006               	goto	l8229
  5225  0014F0                     l8227:
  5226  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  5227  0014F2  0100               	movlb	0	; () banked
  5228  0014F4  51CB               	movf	(_ledStatuses+9)& (0+255),w,b
  5229  0014F6  0101               	movlb	1	; () banked
  5230  0014F8  1909               	xorwf	(_ledBlink+9)& (0+255),w,b
  5231  0014FA  6E8A               	movwf	3978,c	;volatile
  5232  0014FC                     l8229:
  5233  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  5234  0014FE  0E00               	movlw	0
  5235  001500  EC6F  F01E         	call	_UpdateLedRegister
  5236                           
  5237                           ;main.c: 568: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5238  001504  5054               	movf	_blinkOn,w,c
  5239  001506  B4D8               	btfsc	status,2,c
  5240  001508  D003               	goto	l8235
  5241  00150A  C0CC  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5242  00150E  D006               	goto	l8237
  5243  001510                     l8235:
  5244  001510  FFFF               	dw	65535	; assembler added errata NOP
  5245  001512  0100               	movlb	0	; () banked
  5246  001514  51CC               	movf	(_ledStatuses+10)& (0+255),w,b
  5247  001516  0101               	movlb	1	; () banked
  5248  001518  190A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5249  00151A  6E8A               	movwf	3978,c	;volatile
  5250  00151C                     l8237:
  5251  00151C  FFFF               	dw	65535	; assembler added errata NOP
  5252  00151E  0E01               	movlw	1
  5253  001520  EC6F  F01E         	call	_UpdateLedRegister
  5254                           
  5255                           ;main.c: 569: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5256  001524  5054               	movf	_blinkOn,w,c
  5257  001526  B4D8               	btfsc	status,2,c
  5258  001528  D003               	goto	l8243
  5259  00152A  C0CD  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5260  00152E  D006               	goto	l8245
  5261  001530                     l8243:
  5262  001530  FFFF               	dw	65535	; assembler added errata NOP
  5263  001532  0100               	movlb	0	; () banked
  5264  001534  51CD               	movf	(_ledStatuses+11)& (0+255),w,b
  5265  001536  0101               	movlb	1	; () banked
  5266  001538  190B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5267  00153A  6E8A               	movwf	3978,c	;volatile
  5268  00153C                     l8245:
  5269  00153C  FFFF               	dw	65535	; assembler added errata NOP
  5270  00153E  0E02               	movlw	2
  5271  001540  EC6F  F01E         	call	_UpdateLedRegister
  5272                           
  5273                           ;main.c: 570: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5274  001544  5054               	movf	_blinkOn,w,c
  5275  001546  B4D8               	btfsc	status,2,c
  5276  001548  D003               	goto	l8251
  5277  00154A  C0D1  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5278  00154E  D006               	goto	l8253
  5279  001550                     l8251:
  5280  001550  FFFF               	dw	65535	; assembler added errata NOP
  5281  001552  0100               	movlb	0	; () banked
  5282  001554  51D1               	movf	(_ledStatuses+15)& (0+255),w,b
  5283  001556  0101               	movlb	1	; () banked
  5284  001558  190F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5285  00155A  6E8A               	movwf	3978,c	;volatile
  5286  00155C                     l8253:
  5287  00155C  FFFF               	dw	65535	; assembler added errata NOP
  5288  00155E  0E03               	movlw	3
  5289  001560  EC6F  F01E         	call	_UpdateLedRegister
  5290                           
  5291                           ;main.c: 571: LATAbits.LATA3 = 1;
  5292  001564  8689               	bsf	3977,3,c	;volatile
  5293                           
  5294                           ;main.c: 573: }
  5295                           
  5296                           ;main.c: 572: break;
  5297  001566  D00E               	goto	l8261
  5298  001568                     l8259:
  5299  001568  FFFF               	dw	65535	; assembler added errata NOP
  5300  00156A  5055               	movf	_currentLedBlock,w,c
  5301                           
  5302                           ; Switch size 1, requested type "space"
  5303                           ; Number of cases is 4, Range of values is 0 to 3
  5304                           ; switch strategies available:
  5305                           ; Name         Instructions Cycles
  5306                           ; simple_byte           13     7 (average)
  5307                           ;	Chosen strategy is simple_byte
  5308  00156C  0A00               	xorlw	0	; case 0
  5309  00156E  B4D8               	btfsc	status,2,c
  5310  001570  D6E7               	goto	l8113
  5311  001572  0A01               	xorlw	1	; case 1
  5312  001574  B4D8               	btfsc	status,2,c
  5313  001576  D729               	goto	l8149
  5314  001578  0A03               	xorlw	3	; case 2
  5315  00157A  B4D8               	btfsc	status,2,c
  5316  00157C  D76B               	goto	l8185
  5317  00157E  0A01               	xorlw	1	; case 3
  5318  001580  B4D8               	btfsc	status,2,c
  5319  001582  D7AD               	goto	l8221
  5320  001584                     l8261:
  5321  001584  FFFF               	dw	65535	; assembler added errata NOP
  5322                           
  5323                           ;main.c: 575: currentLedBlock++;
  5324  001586  2A55               	incf	_currentLedBlock,f,c
  5325                           
  5326                           ;main.c: 578: currentLedBlock &= 0xFB;
  5327  001588  9455               	bcf	_currentLedBlock,2,c
  5328  00158A  0012               	return		;funcret
  5329  00158C  FFFF               	dw	65535	; errata NOP
  5330  00158E                     __end_of_ProcessLightBlock:
  5331                           	opt stack 0
  5332                           tblptru	equ	0xFF8
  5333                           tblptrh	equ	0xFF7
  5334                           tblptrl	equ	0xFF6
  5335                           tablat	equ	0xFF5
  5336                           prodh	equ	0xFF4
  5337                           prodl	equ	0xFF3
  5338                           intcon	equ	0xFF2
  5339                           postinc0	equ	0xFEE
  5340                           wreg	equ	0xFE8
  5341                           postdec1	equ	0xFE5
  5342                           fsr1h	equ	0xFE2
  5343                           fsr1l	equ	0xFE1
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _UpdateLedRegister *****************
  5352 ;; Defined at:
  5353 ;;		line 283 in file "main.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  regIndex        1    wreg     unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  regIndex        1   32[COMRAM] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5367 ;;      Params:         0       0       0       0       0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0
  5370 ;;      Totals:         1       0       0       0       0       0       0
  5371 ;;Total ram usage:        1 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_ProcessLightBlock
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text24
  5382  003CDE                     __ptext24:
  5383                           	opt stack 0
  5384  003CDE                     _UpdateLedRegister:
  5385                           	opt stack 27
  5386                           
  5387                           ;incstack = 0
  5388  003CDE  FFFF               	dw	65535
  5389                           
  5390                           ;UpdateLedRegister@regIndex stored from wreg
  5391  003CE0  6E21               	movwf	UpdateLedRegister@regIndex,c
  5392                           
  5393                           ;main.c: 285: switch(regIndex)
  5394  003CE2  D018               	goto	l7273
  5395  003CE4                     l248:
  5396  003CE4  FFFF               	dw	65535	; assembler added errata NOP
  5397                           
  5398                           ;main.c: 288: LATAbits.LATA4 = 0;
  5399  003CE6  9889               	bcf	3977,4,c	;volatile
  5400                           
  5401                           ;main.c: 289: TRISAbits.RA4 = 0;
  5402  003CE8  9892               	bcf	3986,4,c	;volatile
  5403                           
  5404                           ;main.c: 290: LATAbits.LATA4 = 1;
  5405  003CEA  8889               	bsf	3977,4,c	;volatile
  5406                           
  5407                           ;main.c: 291: TRISAbits.RA4 = 1;
  5408  003CEC  8892               	bsf	3986,4,c	;volatile
  5409                           
  5410                           ;main.c: 292: break;
  5411  003CEE  D020               	goto	l253
  5412  003CF0                     l250:
  5413  003CF0  FFFF               	dw	65535	; assembler added errata NOP
  5414                           
  5415                           ;main.c: 294: LATCbits.LATC3 = 0;
  5416  003CF2  968B               	bcf	3979,3,c	;volatile
  5417                           
  5418                           ;main.c: 295: TRISCbits.RC3 = 0;
  5419  003CF4  9694               	bcf	3988,3,c	;volatile
  5420                           
  5421                           ;main.c: 296: LATCbits.LATC3 = 1;
  5422  003CF6  868B               	bsf	3979,3,c	;volatile
  5423                           
  5424                           ;main.c: 297: TRISCbits.RC3 = 1;
  5425  003CF8  8694               	bsf	3988,3,c	;volatile
  5426                           
  5427                           ;main.c: 298: break;
  5428  003CFA  D01A               	goto	l253
  5429  003CFC                     l251:
  5430  003CFC  FFFF               	dw	65535	; assembler added errata NOP
  5431                           
  5432                           ;main.c: 300: LATCbits.LATC0 = 0;
  5433  003CFE  908B               	bcf	3979,0,c	;volatile
  5434                           
  5435                           ;main.c: 301: TRISCbits.RC0 = 0;
  5436  003D00  9094               	bcf	3988,0,c	;volatile
  5437                           
  5438                           ;main.c: 302: LATCbits.LATC0 = 1;
  5439  003D02  808B               	bsf	3979,0,c	;volatile
  5440                           
  5441                           ;main.c: 303: TRISCbits.RC0 = 1;
  5442  003D04  8094               	bsf	3988,0,c	;volatile
  5443                           
  5444                           ;main.c: 304: break;
  5445  003D06  D014               	goto	l253
  5446  003D08                     l252:
  5447  003D08  FFFF               	dw	65535	; assembler added errata NOP
  5448                           
  5449                           ;main.c: 306: LATCbits.LATC1 = 0;
  5450  003D0A  928B               	bcf	3979,1,c	;volatile
  5451                           
  5452                           ;main.c: 307: TRISCbits.RC1 = 0;
  5453  003D0C  9294               	bcf	3988,1,c	;volatile
  5454                           
  5455                           ;main.c: 308: LATCbits.LATC1 = 1;
  5456  003D0E  828B               	bsf	3979,1,c	;volatile
  5457                           
  5458                           ;main.c: 309: TRISCbits.RC1 = 1;
  5459  003D10  8294               	bsf	3988,1,c	;volatile
  5460                           
  5461                           ;main.c: 311: }
  5462                           
  5463                           ;main.c: 310: break;
  5464  003D12  D00E               	goto	l253
  5465  003D14                     l7273:
  5466  003D14  FFFF               	dw	65535	; assembler added errata NOP
  5467  003D16  5021               	movf	UpdateLedRegister@regIndex,w,c
  5468                           
  5469                           ; Switch size 1, requested type "space"
  5470                           ; Number of cases is 4, Range of values is 0 to 3
  5471                           ; switch strategies available:
  5472                           ; Name         Instructions Cycles
  5473                           ; simple_byte           13     7 (average)
  5474                           ;	Chosen strategy is simple_byte
  5475  003D18  0A00               	xorlw	0	; case 0
  5476  003D1A  B4D8               	btfsc	status,2,c
  5477  003D1C  D7E3               	goto	l248
  5478  003D1E  0A01               	xorlw	1	; case 1
  5479  003D20  B4D8               	btfsc	status,2,c
  5480  003D22  D7E6               	goto	l250
  5481  003D24  0A03               	xorlw	3	; case 2
  5482  003D26  B4D8               	btfsc	status,2,c
  5483  003D28  D7E9               	goto	l251
  5484  003D2A  0A01               	xorlw	1	; case 3
  5485  003D2C  B4D8               	btfsc	status,2,c
  5486  003D2E  D7EC               	goto	l252
  5487  003D30                     l253:
  5488  003D30  FFFF               	dw	65535	; assembler added errata NOP
  5489  003D32  0012               	return		;funcret
  5490  003D34  FFFF               	dw	65535	; errata NOP
  5491  003D36                     __end_of_UpdateLedRegister:
  5492                           	opt stack 0
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           postdec1	equ	0xFE5
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function _ProcessDiary *****************
  5513 ;; Defined at:
  5514 ;;		line 773 in file "main.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;		None
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  totalMinutes    2    4[BANK0 ] unsigned int 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      void 
  5521 ;; Registers used:
  5522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5528 ;;      Params:         0       0       0       0       0       0       0
  5529 ;;      Locals:         0       2       0       0       0       0       0
  5530 ;;      Temps:          0       4       0       0       0       0       0
  5531 ;;      Totals:         0       6       0       0       0       0       0
  5532 ;;Total ram usage:        6 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    5
  5535 ;; This function calls:
  5536 ;;		_GetCurrentEventDiodeNum
  5537 ;;		_GetTime
  5538 ;;		_LightLed
  5539 ;;		_LoadNextEvent
  5540 ;;		_PlaySound
  5541 ;;		_getTotalMinutes
  5542 ;; This function is called by:
  5543 ;;		_main
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text25
  5548  003144                     __ptext25:
  5549                           	opt stack 0
  5550  003144                     _ProcessDiary:
  5551                           	opt stack 25
  5552                           
  5553                           ;incstack = 0
  5554  003144  FFFF               	dw	65535
  5555                           
  5556                           ;main.c: 776: if(_currenDiaryEvent.NextEventNum == 0xff)
  5557  003146  2841               	incf	__currenDiaryEvent+8,w,c
  5558  003148  B4D8               	btfsc	status,2,c
  5559  00314A  D05D               	goto	l443
  5560                           
  5561                           ;main.c: 778: uint16_t totalMinutes;
  5562                           ;main.c: 782: if(!getTotalMinutes(&totalMinutes))
  5563                           
  5564                           ;main.c: 777: return;
  5565  00314C  0E84               	movlw	low ProcessDiary@totalMinutes
  5566  00314E  6E21               	movwf	getTotalMinutes@totalMinutes,c
  5567  003150  0E00               	movlw	high ProcessDiary@totalMinutes
  5568  003152  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  5569  003154  ECA7  F000         	call	_getTotalMinutes	;wreg free
  5570  003158  0900               	iorlw	0
  5571  00315A  B4D8               	btfsc	status,2,c
  5572  00315C  D054               	goto	l443
  5573                           
  5574                           ;main.c: 786: if(_currenDiaryEvent.NextEventTotalMinutes == totalMinutes)
  5575                           
  5576                           ;main.c: 783: return;
  5577  00315E  0100               	movlb	0	; () banked
  5578  003160  5184               	movf	ProcessDiary@totalMinutes& (0+255),w,b
  5579  003162  183B               	xorwf	__currenDiaryEvent+2,w,c
  5580  003164  E150               	bnz	l443
  5581  003166  0100               	movlb	0	; () banked
  5582  003168  5185               	movf	(ProcessDiary@totalMinutes+1)& (0+255),w,b
  5583  00316A  183C               	xorwf	__currenDiaryEvent+3,w,c
  5584  00316C  A4D8               	btfss	status,2,c
  5585  00316E  D04B               	goto	l443
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;main.c: 787: {
  5589                           ;main.c: 789: if(_currenDiaryEvent.IsFire)
  5590  003170  5039               	movf	__currenDiaryEvent,w,c
  5591  003172  B4D8               	btfsc	status,2,c
  5592  003174  D008               	goto	l8317
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;main.c: 790: {
  5596                           ;main.c: 791: LightLed(GetCurrentEventDiodeNum(), LED_RED, 0);
  5597  003176  0E02               	movlw	2
  5598  003178  6E21               	movwf	LightLed@ledState,c
  5599  00317A  0E00               	movlw	0
  5600  00317C  6E22               	movwf	LightLed@blink,c
  5601  00317E  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  5602  003182  EC5C  F005         	call	_LightLed
  5603  003186                     l8317:
  5604  003186  FFFF               	dw	65535	; assembler added errata NOP
  5605                           
  5606                           ;main.c: 792: }
  5607                           ;main.c: 794: {
  5608                           ;main.c: 795: _currenDiaryEvent.FiredEventNum = _currenDiaryEvent.NextEventNum;
  5609  003188  C041  F03A         	movff	__currenDiaryEvent+8,__currenDiaryEvent+1
  5610                           
  5611                           ;main.c: 796: _currenDiaryEvent.IsFire = 1;
  5612  00318C  0E01               	movlw	1
  5613  00318E  6E39               	movwf	__currenDiaryEvent,c
  5614                           
  5615                           ;main.c: 798: LightLed(GetCurrentEventDiodeNum(), LED_ORANGE, 1);
  5616  003190  0E03               	movlw	3
  5617  003192  6E21               	movwf	LightLed@ledState,c
  5618  003194  0E01               	movlw	1
  5619  003196  6E22               	movwf	LightLed@blink,c
  5620  003198  EC99  F001         	call	_GetCurrentEventDiodeNum	;wreg free
  5621  00319C  EC5C  F005         	call	_LightLed
  5622                           
  5623                           ;main.c: 799: if(_nextEventSoundId != 0)
  5624  0031A0  504E               	movf	__nextEventSoundId,w,c
  5625  0031A2  B4D8               	btfsc	status,2,c
  5626  0031A4  D007               	goto	l8325
  5627                           
  5628                           ;main.c: 800: {
  5629                           ;main.c: 801: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5630  0031A6  C0E6  F031         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5631  0031AA  C0E7  F032         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5632  0031AE  044E               	decf	__nextEventSoundId,w,c
  5633  0031B0  EC27  F015         	call	_PlaySound
  5634  0031B4                     l8325:
  5635  0031B4  FFFF               	dw	65535	; assembler added errata NOP
  5636                           
  5637                           ;main.c: 802: }
  5638                           ;main.c: 811: _currenDiaryEvent.ResetSecond = *GetTime() + eventAcceptTime;
  5639  0031B6  EC92  F001         	call	_GetTime	;wreg free
  5640  0031BA  C021  FFD9         	movff	?_GetTime,fsr2l
  5641  0031BE  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5642  0031C2  CFDE F080          	movff	postinc2,??_ProcessDiary
  5643  0031C6  CFDE F081          	movff	postinc2,??_ProcessDiary+1
  5644  0031CA  CFDE F082          	movff	postinc2,??_ProcessDiary+2
  5645  0031CE  CFDE F083          	movff	postinc2,??_ProcessDiary+3
  5646  0031D2  5056               	movf	_eventAcceptTime,w,c
  5647  0031D4  0100               	movlb	0	; () banked
  5648  0031D6  2580               	addwf	??_ProcessDiary& (0+255),w,b
  5649  0031D8  6E3D               	movwf	__currenDiaryEvent+4,c
  5650  0031DA  0E00               	movlw	0
  5651  0031DC  0100               	movlb	0	; () banked
  5652  0031DE  2181               	addwfc	(??_ProcessDiary+1)& (0+255),w,b
  5653  0031E0  6E3E               	movwf	__currenDiaryEvent+5,c
  5654  0031E2  0E00               	movlw	0
  5655  0031E4  0100               	movlb	0	; () banked
  5656  0031E6  2182               	addwfc	(??_ProcessDiary+2)& (0+255),w,b
  5657  0031E8  6E3F               	movwf	__currenDiaryEvent+6,c
  5658  0031EA  0E00               	movlw	0
  5659  0031EC  0100               	movlb	0	; () banked
  5660  0031EE  2183               	addwfc	(??_ProcessDiary+3)& (0+255),w,b
  5661  0031F0  6E40               	movwf	__currenDiaryEvent+7,c
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;main.c: 813: LoadNextEvent();
  5665  0031F2  ECFD  F011         	call	_LoadNextEvent	;wreg free
  5666                           
  5667                           ;main.c: 814: }
  5668                           ;main.c: 815: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5669  0031F6  503A               	movf	__currenDiaryEvent+1,w,c
  5670  0031F8  0100               	movlb	0	; () banked
  5671  0031FA  6F80               	movwf	??_ProcessDiary& (0+255),b
  5672  0031FC  5041               	movf	__currenDiaryEvent+8,w,c
  5673  0031FE  0101               	movlb	1	; () banked
  5674  003200  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5675  003202  C080  F1D9         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5676  003206                     l443:
  5677  003206  FFFF               	dw	65535	; assembler added errata NOP
  5678  003208  0012               	return		;funcret
  5679  00320A  FFFF               	dw	65535	; errata NOP
  5680  00320C                     __end_of_ProcessDiary:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           fsr1h	equ	0xFE2
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _PlaySound *****************
  5702 ;; Defined at:
  5703 ;;		line 644 in file "main.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  soundId         1    wreg     unsigned char 
  5706 ;;  playDuration    2   48[COMRAM] unsigned int 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  soundId         1   54[COMRAM] unsigned char 
  5709 ;;  soundAddr       1   55[COMRAM] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      unsigned char 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5719 ;;      Params:         2       0       0       0       0       0       0
  5720 ;;      Locals:         2       0       0       0       0       0       0
  5721 ;;      Temps:          4       0       0       0       0       0       0
  5722 ;;      Totals:         8       0       0       0       0       0       0
  5723 ;;Total ram usage:        8 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    4
  5726 ;; This function calls:
  5727 ;;		_GetTime
  5728 ;;		_SoundPlayNextStep
  5729 ;; This function is called by:
  5730 ;;		_ProcessDiary
  5731 ;;		_CommandSetLed
  5732 ;;		_CommandSetStatusLed
  5733 ;;		_ProcessUserCommands
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text26
  5738  002A4E                     __ptext26:
  5739                           	opt stack 0
  5740  002A4E                     _PlaySound:
  5741                           	opt stack 24
  5742                           
  5743                           ;incstack = 0
  5744  002A4E  FFFF               	dw	65535
  5745                           
  5746                           ;PlaySound@soundId stored from wreg
  5747  002A50  6E37               	movwf	PlaySound@soundId,c
  5748                           
  5749                           ;main.c: 646: if(soundId >= _soundCount)
  5750  002A52  5052               	movf	__soundCount,w,c
  5751  002A54  5C37               	subwf	PlaySound@soundId,w,c
  5752  002A56  B0D8               	btfsc	status,0,c
  5753  002A58  D075               	goto	l398
  5754                           
  5755                           ;main.c: 649: if(playDuration == 0)
  5756                           
  5757                           ;main.c: 647: return 0;
  5758                           ;	Return value of _PlaySound is never used
  5759  002A5A  5031               	movf	PlaySound@playDuration,w,c
  5760  002A5C  1032               	iorwf	PlaySound@playDuration+1,w,c
  5761  002A5E  A4D8               	btfss	status,2,c
  5762  002A60  D009               	goto	l6777
  5763                           
  5764                           ;main.c: 650: soundTestEnd = 0;
  5765  002A62  0E00               	movlw	0
  5766  002A64  0101               	movlb	1	; () banked
  5767  002A66  6F20               	movwf	_soundTestEnd& (0+255),b
  5768  002A68  0E00               	movlw	0
  5769  002A6A  6F21               	movwf	(_soundTestEnd+1)& (0+255),b
  5770  002A6C  0E00               	movlw	0
  5771  002A6E  6F22               	movwf	(_soundTestEnd+2)& (0+255),b
  5772  002A70  0E00               	movlw	0
  5773  002A72  D02A               	goto	L4
  5774  002A74                     l6777:
  5775  002A74  FFFF               	dw	65535	; assembler added errata NOP
  5776                           
  5777                           ;main.c: 651: else if(playDuration == 65535)
  5778  002A76  2831               	incf	PlaySound@playDuration,w,c
  5779  002A78  E109               	bnz	l6781
  5780  002A7A  2832               	incf	PlaySound@playDuration+1,w,c
  5781  002A7C  A4D8               	btfss	status,2,c
  5782  002A7E  D006               	goto	l6781
  5783                           
  5784                           ;main.c: 652: soundTestEnd = 4294967295;
  5785  002A80  0101               	movlb	1	; () banked
  5786  002A82  6920               	setf	_soundTestEnd& (0+255),b
  5787  002A84  6921               	setf	(_soundTestEnd+1)& (0+255),b
  5788  002A86  6922               	setf	(_soundTestEnd+2)& (0+255),b
  5789  002A88  6923               	setf	(_soundTestEnd+3)& (0+255),b
  5790  002A8A  D020               	goto	l6783
  5791  002A8C                     l6781:
  5792  002A8C  FFFF               	dw	65535	; assembler added errata NOP
  5793                           
  5794                           ;main.c: 653: else
  5795                           ;main.c: 654: soundTestEnd = *GetTime() + playDuration;
  5796  002A8E  EC92  F001         	call	_GetTime	;wreg free
  5797  002A92  C021  FFD9         	movff	?_GetTime,fsr2l
  5798  002A96  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5799  002A9A  CFDE F033          	movff	postinc2,??_PlaySound
  5800  002A9E  CFDE F034          	movff	postinc2,??_PlaySound+1
  5801  002AA2  CFDE F035          	movff	postinc2,??_PlaySound+2
  5802  002AA6  CFDE F036          	movff	postinc2,??_PlaySound+3
  5803  002AAA  5031               	movf	PlaySound@playDuration,w,c
  5804  002AAC  2433               	addwf	??_PlaySound,w,c
  5805  002AAE  0101               	movlb	1	; () banked
  5806  002AB0  6F20               	movwf	_soundTestEnd& (0+255),b
  5807  002AB2  5032               	movf	PlaySound@playDuration+1,w,c
  5808  002AB4  2034               	addwfc	??_PlaySound+1,w,c
  5809  002AB6  0101               	movlb	1	; () banked
  5810  002AB8  6F21               	movwf	(_soundTestEnd+1)& (0+255),b
  5811  002ABA  0E00               	movlw	0
  5812  002ABC  2035               	addwfc	??_PlaySound+2,w,c
  5813  002ABE  0101               	movlb	1	; () banked
  5814  002AC0  6F22               	movwf	(_soundTestEnd+2)& (0+255),b
  5815  002AC2  0E00               	movlw	0
  5816  002AC4  2036               	addwfc	??_PlaySound+3,w,c
  5817  002AC6  0101               	movlb	1	; () banked
  5818  002AC8                     L4:
  5819  002AC8  FFFF               	dw	65535	; assembler added errata NOP
  5820  002ACA  6F23               	movwf	(_soundTestEnd+3)& (0+255),b
  5821  002ACC                     l6783:
  5822  002ACC  FFFF               	dw	65535	; assembler added errata NOP
  5823                           
  5824                           ; BSR set to: 1
  5825                           ;main.c: 656: uint8_t soundAddr = ( EEADR = _eeSoundAddressesList + soundId, (void)0, RD
      +                           = 1, EEDATA);
  5826  002ACE  5048               	movf	__eeSoundAddressesList,w,c
  5827  002AD0  2437               	addwf	PlaySound@soundId,w,c
  5828  002AD2  6EA9               	movwf	4009,c	;volatile
  5829                           
  5830                           ; BSR set to: 1
  5831  002AD4  80A6               	bsf	4006,0,c	;volatile
  5832                           
  5833                           ; BSR set to: 1
  5834  002AD6  CFA8 F038          	movff	4008,PlaySound@soundAddr	;volatile
  5835                           
  5836                           ; BSR set to: 1
  5837                           ;main.c: 657: if(_eeFirstSoundAddress + soundAddr >= 256)
  5838  002ADA  5038               	movf	PlaySound@soundAddr,w,c
  5839  002ADC  C047  F033         	movff	__eeFirstSoundAddress,??_PlaySound
  5840  002AE0  6A34               	clrf	(??_PlaySound+1)& (0+255),c
  5841  002AE2  2633               	addwf	??_PlaySound,f,c
  5842  002AE4  0E00               	movlw	0
  5843  002AE6  2234               	addwfc	??_PlaySound+1,f,c
  5844  002AE8  BE34               	btfsc	??_PlaySound+1,7,c
  5845  002AEA  D003               	goto	l6793
  5846  002AEC  0434               	decf	??_PlaySound+1,w,c
  5847  002AEE  B0D8               	btfsc	status,0,c
  5848  002AF0  D029               	goto	l398
  5849  002AF2                     l6793:
  5850  002AF2  FFFF               	dw	65535	; assembler added errata NOP
  5851                           
  5852                           ; BSR set to: 1
  5853                           ;main.c: 660: _playingSoundSteps = ( EEADR = _eeFirstSoundAddress + soundAddr, (void)0, 
      +                          RD = 1, EEDATA);
  5854  002AF4  5047               	movf	__eeFirstSoundAddress,w,c
  5855  002AF6  2438               	addwf	PlaySound@soundAddr,w,c
  5856  002AF8  6EA9               	movwf	4009,c	;volatile
  5857                           
  5858                           ; BSR set to: 1
  5859  002AFA  80A6               	bsf	4006,0,c	;volatile
  5860                           
  5861                           ; BSR set to: 1
  5862  002AFC  CFA8 F051          	movff	4008,__playingSoundSteps	;volatile
  5863                           
  5864                           ;main.c: 662: _playingSoundStartPosInEe = _eeFirstSoundAddress + soundAddr + 1;
  5865  002B00  5047               	movf	__eeFirstSoundAddress,w,c
  5866  002B02  2438               	addwf	PlaySound@soundAddr,w,c
  5867  002B04  6E33               	movwf	??_PlaySound& (0+255),c
  5868  002B06  2833               	incf	??_PlaySound,w,c
  5869  002B08  6E50               	movwf	__playingSoundStartPosInEe,c
  5870                           
  5871                           ; BSR set to: 1
  5872                           ;main.c: 663: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5873  002B0A  5051               	movf	__playingSoundSteps,w,c
  5874  002B0C  6E33               	movwf	??_PlaySound& (0+255),c
  5875  002B0E  5050               	movf	__playingSoundStartPosInEe,w,c
  5876  002B10  0101               	movlb	1	; () banked
  5877  002B12  6FE2               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5878  002B14  C033  F1E3         	movff	??_PlaySound,__MODBUSInputRegs+15
  5879                           
  5880                           ; BSR set to: 1
  5881                           ;main.c: 664: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5882  002B18  5051               	movf	__playingSoundSteps,w,c
  5883  002B1A  0D03               	mullw	3
  5884  002B1C  5050               	movf	__playingSoundStartPosInEe,w,c
  5885  002B1E  6E33               	movwf	??_PlaySound& (0+255),c
  5886  002B20  6A34               	clrf	(??_PlaySound+1)& (0+255),c
  5887  002B22  50F3               	movf	prodl,w,c
  5888  002B24  2633               	addwf	??_PlaySound,f,c
  5889  002B26  50F4               	movf	prodh,w,c
  5890  002B28  2234               	addwfc	??_PlaySound+1,f,c
  5891  002B2A  BE34               	btfsc	??_PlaySound+1,7,c
  5892  002B2C  D003               	goto	l6805
  5893  002B2E  0434               	decf	??_PlaySound+1,w,c
  5894  002B30  B0D8               	btfsc	status,0,c
  5895  002B32  D008               	goto	l398
  5896  002B34                     l6805:
  5897  002B34  FFFF               	dw	65535	; assembler added errata NOP
  5898                           
  5899                           ; BSR set to: 1
  5900                           ;main.c: 667: _playingSoundCurPos = 0;
  5901  002B36  0E00               	movlw	0
  5902  002B38  6E4F               	movwf	__playingSoundCurPos,c
  5903                           
  5904                           ;main.c: 668: _isSoundPlaying = 1;
  5905  002B3A  0E01               	movlw	1
  5906  002B3C  0100               	movlb	0	; () banked
  5907  002B3E  6FEF               	movwf	__isSoundPlaying& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;main.c: 669: SoundPlayNextStep();
  5911  002B40  ECA5  F015         	call	_SoundPlayNextStep	;wreg free
  5912  002B44                     l398:
  5913  002B44  FFFF               	dw	65535	; assembler added errata NOP
  5914  002B46  0012               	return		;funcret
  5915  002B48  FFFF               	dw	65535	; errata NOP
  5916  002B4A                     __end_of_PlaySound:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           intcon	equ	0xFF2
  5925                           postinc0	equ	0xFEE
  5926                           wreg	equ	0xFE8
  5927                           postdec1	equ	0xFE5
  5928                           fsr1h	equ	0xFE2
  5929                           fsr1l	equ	0xFE1
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           postdec2	equ	0xFDD
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _SoundPlayNextStep *****************
  5938 ;; Defined at:
  5939 ;;		line 599 in file "main.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  stepDuty        2   45[COMRAM] unsigned int 
  5944 ;;  duration        1   47[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5954 ;;      Params:         0       0       0       0       0       0       0
  5955 ;;      Locals:         3       0       0       0       0       0       0
  5956 ;;      Temps:          5       0       0       0       0       0       0
  5957 ;;      Totals:         8       0       0       0       0       0       0
  5958 ;;Total ram usage:        8 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    3
  5961 ;; This function calls:
  5962 ;;		_GetTime
  5963 ;;		_SetBuzzerDuty
  5964 ;;		_StopPlaying
  5965 ;;		_millis
  5966 ;; This function is called by:
  5967 ;;		_PlaySound
  5968 ;;		_main
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text27
  5973  002B4A                     __ptext27:
  5974                           	opt stack 0
  5975  002B4A                     _SoundPlayNextStep:
  5976                           	opt stack 24
  5977                           
  5978                           ;incstack = 0
  5979  002B4A  FFFF               	dw	65535
  5980                           
  5981                           ;main.c: 601: if(_playingSoundCurPos >= _playingSoundSteps)
  5982  002B4C  5051               	movf	__playingSoundSteps,w,c
  5983  002B4E  5C4F               	subwf	__playingSoundCurPos,w,c
  5984  002B50  A0D8               	btfss	status,0,c
  5985  002B52  D01D               	goto	l6585
  5986                           
  5987                           ;main.c: 602: {
  5988                           ;main.c: 603: _playingSoundCurPos = 0;
  5989  002B54  0E00               	movlw	0
  5990  002B56  6E4F               	movwf	__playingSoundCurPos,c
  5991                           
  5992                           ;main.c: 604: if(*GetTime() >= soundTestEnd)
  5993  002B58  EC92  F001         	call	_GetTime	;wreg free
  5994  002B5C  C021  FFD9         	movff	?_GetTime,fsr2l
  5995  002B60  C022  FFDA         	movff	?_GetTime+1,fsr2h
  5996  002B64  0101               	movlb	1	; () banked
  5997  002B66  5120               	movf	_soundTestEnd& (0+255),w,b
  5998  002B68  5CDE               	subwf	postinc2,w,c
  5999  002B6A  0101               	movlb	1	; () banked
  6000  002B6C  5121               	movf	(_soundTestEnd+1)& (0+255),w,b
  6001  002B6E  58DE               	subwfb	postinc2,w,c
  6002  002B70  0101               	movlb	1	; () banked
  6003  002B72  5122               	movf	(_soundTestEnd+2)& (0+255),w,b
  6004  002B74  58DE               	subwfb	postinc2,w,c
  6005  002B76  50DE               	movf	postinc2,w,c
  6006  002B78  0A80               	xorlw	128
  6007  002B7A  6E2D               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  6008  002B7C  0101               	movlb	1	; () banked
  6009  002B7E  5123               	movf	(_soundTestEnd+3)& (0+255),w,b
  6010  002B80  0A80               	xorlw	128
  6011  002B82  582D               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  6012  002B84  A0D8               	btfss	status,0,c
  6013  002B86  D003               	goto	l6585
  6014                           
  6015                           ; BSR set to: 1
  6016                           ;main.c: 605: {
  6017                           ;main.c: 606: StopPlaying();
  6018  002B88  EC4A  F001         	call	_StopPlaying	;wreg free
  6019                           
  6020                           ;main.c: 607: return;
  6021  002B8C  D04E               	goto	l391
  6022  002B8E                     l6585:
  6023  002B8E  FFFF               	dw	65535	; assembler added errata NOP
  6024                           
  6025                           ;main.c: 608: }
  6026                           ;main.c: 609: }
  6027                           ;main.c: 610: uint16_t stepDuty = ( EEADR = _playingSoundStartPosInEe + _playingSoundCur
      +                          Pos * 3, (void)0, RD = 1, EEDATA);
  6028  002B90  504F               	movf	__playingSoundCurPos,w,c
  6029  002B92  0D03               	mullw	3
  6030  002B94  50F3               	movf	prodl,w,c
  6031  002B96  2450               	addwf	__playingSoundStartPosInEe,w,c
  6032  002B98  6EA9               	movwf	4009,c	;volatile
  6033  002B9A  80A6               	bsf	4006,0,c	;volatile
  6034  002B9C  CFA8 F02E          	movff	4008,SoundPlayNextStep@stepDuty	;volatile
  6035  002BA0  6A2F               	clrf	SoundPlayNextStep@stepDuty+1,c
  6036                           
  6037                           ;main.c: 611: stepDuty <<= 6;
  6038  002BA2  0E06               	movlw	6
  6039  002BA4                     u5885:
  6040  002BA4  FFFF               	dw	65535	; assembler added errata NOP
  6041  002BA6  90D8               	bcf	status,0,c
  6042  002BA8  362E               	rlcf	SoundPlayNextStep@stepDuty,f,c
  6043  002BAA  362F               	rlcf	SoundPlayNextStep@stepDuty+1,f,c
  6044  002BAC  2EE8               	decfsz	wreg,f,c
  6045  002BAE  D7FA               	goto	u5885
  6046                           
  6047                           ;main.c: 612: _playingEndMs = millis() + stepDuty;
  6048  002BB0  ECD1  F000         	call	_millis	;wreg free
  6049  002BB4  502E               	movf	SoundPlayNextStep@stepDuty,w,c
  6050  002BB6  2421               	addwf	?_millis,w,c
  6051  002BB8  0101               	movlb	1	; () banked
  6052  002BBA  6F10               	movwf	__playingEndMs& (0+255),b
  6053  002BBC  502F               	movf	SoundPlayNextStep@stepDuty+1,w,c
  6054  002BBE  2022               	addwfc	?_millis+1,w,c
  6055  002BC0  0101               	movlb	1	; () banked
  6056  002BC2  6F11               	movwf	(__playingEndMs+1)& (0+255),b
  6057  002BC4  0E00               	movlw	0
  6058  002BC6  2023               	addwfc	?_millis+2,w,c
  6059  002BC8  0101               	movlb	1	; () banked
  6060  002BCA  6F12               	movwf	(__playingEndMs+2)& (0+255),b
  6061  002BCC  0E00               	movlw	0
  6062  002BCE  2024               	addwfc	?_millis+3,w,c
  6063  002BD0  0101               	movlb	1	; () banked
  6064  002BD2  6F13               	movwf	(__playingEndMs+3)& (0+255),b
  6065                           
  6066                           ; BSR set to: 1
  6067                           ;main.c: 613: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  6068  002BD4  504F               	movf	__playingSoundCurPos,w,c
  6069  002BD6  0D03               	mullw	3
  6070  002BD8  50F3               	movf	prodl,w,c
  6071  002BDA  2450               	addwf	__playingSoundStartPosInEe,w,c
  6072  002BDC  6E29               	movwf	??_SoundPlayNextStep& (0+255),c
  6073  002BDE  2829               	incf	??_SoundPlayNextStep,w,c
  6074  002BE0  6EA9               	movwf	4009,c	;volatile
  6075                           
  6076                           ; BSR set to: 1
  6077  002BE2  80A6               	bsf	4006,0,c	;volatile
  6078                           
  6079                           ; BSR set to: 1
  6080  002BE4  CFA8 FFCB          	movff	4008,4043	;volatile
  6081                           
  6082                           ; BSR set to: 1
  6083                           ;main.c: 614: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  6084  002BE8  504F               	movf	__playingSoundCurPos,w,c
  6085  002BEA  0D03               	mullw	3
  6086  002BEC  50F3               	movf	prodl,w,c
  6087  002BEE  2450               	addwf	__playingSoundStartPosInEe,w,c
  6088  002BF0  0F02               	addlw	2
  6089  002BF2  6EA9               	movwf	4009,c	;volatile
  6090                           
  6091                           ; BSR set to: 1
  6092  002BF4  80A6               	bsf	4006,0,c	;volatile
  6093                           
  6094                           ; BSR set to: 1
  6095  002BF6  CFA8 F030          	movff	4008,SoundPlayNextStep@duration	;volatile
  6096                           
  6097                           ; BSR set to: 1
  6098                           ;main.c: 615: _playingSoundCurPos++;
  6099  002BFA  2A4F               	incf	__playingSoundCurPos,f,c
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;main.c: 616: if(duration == 0 || PR2 == 0)
  6103  002BFC  5030               	movf	SoundPlayNextStep@duration,w,c
  6104  002BFE  B4D8               	btfsc	status,2,c
  6105  002C00  D003               	goto	l394
  6106                           
  6107                           ; BSR set to: 1
  6108  002C02  50CB               	movf	4043,w,c	;volatile
  6109  002C04  A4D8               	btfss	status,2,c
  6110  002C06  D005               	goto	l6617
  6111  002C08                     l394:
  6112  002C08  FFFF               	dw	65535	; assembler added errata NOP
  6113                           
  6114                           ; BSR set to: 1
  6115                           ;main.c: 617: {
  6116                           ;main.c: 618: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6117  002C0A  94CA               	bcf	4042,2,c	;volatile
  6118  002C0C  8494               	bsf	3988,2,c	;volatile
  6119                           
  6120                           ; BSR set to: 1
  6121  002C0E  0E00               	movlw	0
  6122  002C10  D009               	goto	L17
  6123  002C12                     l6617:
  6124  002C12  FFFF               	dw	65535	; assembler added errata NOP
  6125                           
  6126                           ;main.c: 620: }
  6127                           ;main.c: 621: SetBuzzerDuty(duration);
  6128  002C14  C030  F021         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  6129  002C18  6A22               	clrf	SetBuzzerDuty@dc+1,c
  6130  002C1A  ECD0  F01F         	call	_SetBuzzerDuty	;wreg free
  6131                           
  6132                           ;main.c: 622: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  6133  002C1E  9494               	bcf	3988,2,c	;volatile
  6134  002C20  84CA               	bsf	4042,2,c	;volatile
  6135  002C22  0E01               	movlw	1
  6136  002C24                     L17:
  6137  002C24  FFFF               	dw	65535	; assembler added errata NOP
  6138  002C26  0100               	movlb	0	; () banked
  6139  002C28  6FEE               	movwf	_IsBusserOn& (0+255),b
  6140  002C2A                     l391:
  6141  002C2A  FFFF               	dw	65535	; assembler added errata NOP
  6142  002C2C  0012               	return		;funcret
  6143  002C2E  FFFF               	dw	65535	; errata NOP
  6144  002C30                     __end_of_SoundPlayNextStep:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           postinc0	equ	0xFEE
  6154                           wreg	equ	0xFE8
  6155                           postdec1	equ	0xFE5
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _StopPlaying *****************
  6166 ;; Defined at:
  6167 ;;		line 591 in file "main.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;		None
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;		None
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         0       0       0       0       0       0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0
  6184 ;;      Totals:         0       0       0       0       0       0       0
  6185 ;;Total ram usage:        0 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    2
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_SoundPlayNextStep
  6192 ;;		_ResetEvent
  6193 ;;		_ResetEventFromCommand
  6194 ;;		_main
  6195 ;;		_CommandSetLed
  6196 ;;		_CommandSetStatusLed
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text28
  6201  000294                     __ptext28:
  6202                           	opt stack 0
  6203  000294                     _StopPlaying:
  6204                           	opt stack 24
  6205                           
  6206                           ;incstack = 0
  6207  000294  FFFF               	dw	65535
  6208                           
  6209                           ;main.c: 593: _isSoundPlaying = 0;
  6210  000296  0E00               	movlw	0
  6211  000298  0100               	movlb	0	; () banked
  6212  00029A  6FEF               	movwf	__isSoundPlaying& (0+255),b
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;main.c: 594: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6216  00029C  94CA               	bcf	4042,2,c	;volatile
  6217                           
  6218                           ; BSR set to: 0
  6219  00029E  8494               	bsf	3988,2,c	;volatile
  6220  0002A0  0E00               	movlw	0
  6221  0002A2  0100               	movlb	0	; () banked
  6222  0002A4  6FEE               	movwf	_IsBusserOn& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225  0002A6  0012               	return		;funcret
  6226  0002A8  FFFF               	dw	65535	; errata NOP
  6227  0002AA                     __end_of_StopPlaying:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon	equ	0xFF2
  6236                           postinc0	equ	0xFEE
  6237                           wreg	equ	0xFE8
  6238                           postdec1	equ	0xFE5
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function _SetBuzzerDuty *****************
  6249 ;; Defined at:
  6250 ;;		line 425 in file "main.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;  dc              2   32[COMRAM] unsigned int 
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6264 ;;      Params:         2       0       0       0       0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0
  6266 ;;      Temps:          2       0       0       0       0       0       0
  6267 ;;      Totals:         4       0       0       0       0       0       0
  6268 ;;Total ram usage:        4 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    2
  6271 ;; This function calls:
  6272 ;;		Nothing
  6273 ;; This function is called by:
  6274 ;;		_SoundPlayNextStep
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text29
  6279  003FA0                     __ptext29:
  6280                           	opt stack 0
  6281  003FA0                     _SetBuzzerDuty:
  6282                           	opt stack 24
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;incstack = 0
  6286  003FA0  FFFF               	dw	65535
  6287                           
  6288                           ;main.c: 430: CCP1CONbits.DC1B = dc & 0x03;
  6289  003FA2  C021  F023         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6290  003FA6  0E03               	movlw	3
  6291  003FA8  1623               	andwf	??_SetBuzzerDuty,f,c
  6292  003FAA  3A23               	swapf	??_SetBuzzerDuty,f,c
  6293  003FAC  50BD               	movf	4029,w,c	;volatile
  6294  003FAE  1823               	xorwf	??_SetBuzzerDuty,w,c
  6295  003FB0  0BCF               	andlw	-49
  6296  003FB2  1823               	xorwf	??_SetBuzzerDuty,w,c
  6297  003FB4  6EBD               	movwf	4029,c	;volatile
  6298                           
  6299                           ;main.c: 431: CCPR1L = (uint8_t)(dc >> 2);
  6300  003FB6  C021  F023         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6301  003FBA  C022  F024         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  6302  003FBE  90D8               	bcf	status,0,c
  6303  003FC0  3224               	rrcf	??_SetBuzzerDuty+1,f,c
  6304  003FC2  3223               	rrcf	??_SetBuzzerDuty,f,c
  6305  003FC4  90D8               	bcf	status,0,c
  6306  003FC6  3224               	rrcf	??_SetBuzzerDuty+1,f,c
  6307  003FC8  3223               	rrcf	??_SetBuzzerDuty,f,c
  6308  003FCA  5023               	movf	??_SetBuzzerDuty,w,c
  6309  003FCC  6EBE               	movwf	4030,c	;volatile
  6310  003FCE  0012               	return		;funcret
  6311  003FD0  FFFF               	dw	65535	; errata NOP
  6312  003FD2                     __end_of_SetBuzzerDuty:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           postinc0	equ	0xFEE
  6322                           wreg	equ	0xFE8
  6323                           postdec1	equ	0xFE5
  6324                           fsr1h	equ	0xFE2
  6325                           fsr1l	equ	0xFE1
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           postdec2	equ	0xFDD
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function _GetTime *****************
  6334 ;; Defined at:
  6335 ;;		line 210 in file "user.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  2   32[COMRAM] PTR long 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6349 ;;      Params:         2       0       0       0       0       0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0
  6352 ;;      Totals:         2       0       0       0       0       0       0
  6353 ;;Total ram usage:        2 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    2
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_SoundPlayNextStep
  6360 ;;		_PlaySound
  6361 ;;		_ProcessDiary
  6362 ;;		_main
  6363 ;;		_CommandSetLed
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           	psect	text30
  6368  000324                     __ptext30:
  6369                           	opt stack 0
  6370  000324                     _GetTime:
  6371                           	opt stack 24
  6372                           
  6373                           ;incstack = 0
  6374  000324  FFFF               	dw	65535
  6375                           
  6376                           ;user.c: 212: return &currentTime;
  6377  000326  0EF2               	movlw	low _currentTime
  6378  000328  6E21               	movwf	?_GetTime,c
  6379  00032A  0E01               	movlw	high _currentTime
  6380  00032C  6E22               	movwf	?_GetTime+1,c
  6381  00032E  0012               	return		;funcret
  6382  000330  FFFF               	dw	65535	; errata NOP
  6383  000332                     __end_of_GetTime:
  6384                           	opt stack 0
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           intcon	equ	0xFF2
  6392                           postinc0	equ	0xFEE
  6393                           wreg	equ	0xFE8
  6394                           postdec1	equ	0xFE5
  6395                           fsr1h	equ	0xFE2
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _LoadNextEvent *****************
  6405 ;; Defined at:
  6406 ;;		line 703 in file "main.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  v1              1   38[COMRAM] unsigned char 
  6411 ;;  totalMinutes    2   36[COMRAM] unsigned int 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6421 ;;      Params:         0       0       0       0       0       0       0
  6422 ;;      Locals:         3       0       0       0       0       0       0
  6423 ;;      Temps:          2       0       0       0       0       0       0
  6424 ;;      Totals:         5       0       0       0       0       0       0
  6425 ;;Total ram usage:        5 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    3
  6428 ;; This function calls:
  6429 ;;		_getTotalMinutes
  6430 ;; This function is called by:
  6431 ;;		_InitFromEeprom
  6432 ;;		_ProcessDiary
  6433 ;;		_main
  6434 ;;		_io_poll
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text31
  6439  0023FA                     __ptext31:
  6440                           	opt stack 0
  6441  0023FA                     _LoadNextEvent:
  6442                           	opt stack 24
  6443                           
  6444                           ;incstack = 0
  6445  0023FA  FFFF               	dw	65535
  6446                           
  6447                           ;main.c: 705: if(eventCount == 0)
  6448  0023FC  5057               	movf	_eventCount,w,c
  6449  0023FE  B4D8               	btfsc	status,2,c
  6450  002400  D0BA               	goto	l424
  6451                           
  6452                           ;main.c: 707: uint16_t totalMinutes;
  6453                           ;main.c: 708: if(!getTotalMinutes(&totalMinutes))
  6454                           
  6455                           ;main.c: 706: return;
  6456  002402  0E25               	movlw	low LoadNextEvent@totalMinutes
  6457  002404  6E21               	movwf	getTotalMinutes@totalMinutes,c
  6458  002406  0E00               	movlw	high LoadNextEvent@totalMinutes
  6459  002408  6E22               	movwf	getTotalMinutes@totalMinutes+1,c
  6460  00240A  ECA7  F000         	call	_getTotalMinutes	;wreg free
  6461  00240E  0900               	iorlw	0
  6462  002410  B4D8               	btfsc	status,2,c
  6463  002412  D0B1               	goto	l424
  6464  002414                     l6713:
  6465  002414  FFFF               	dw	65535	; assembler added errata NOP
  6466                           
  6467                           ;main.c: 712: {
  6468                           ;main.c: 713: if(_currenDiaryEvent.NextEventNum == 0xff)
  6469  002416  2841               	incf	__currenDiaryEvent+8,w,c
  6470  002418  A4D8               	btfss	status,2,c
  6471  00241A  D003               	goto	l6717
  6472                           
  6473                           ;main.c: 714: _currenDiaryEvent.NextEventNum = 0;
  6474  00241C  0E00               	movlw	0
  6475  00241E  6E41               	movwf	__currenDiaryEvent+8,c
  6476  002420  D002               	goto	l6719
  6477  002422                     l6717:
  6478  002422  FFFF               	dw	65535	; assembler added errata NOP
  6479                           
  6480                           ;main.c: 715: else
  6481                           ;main.c: 716: _currenDiaryEvent.NextEventNum++;
  6482  002424  2A41               	incf	__currenDiaryEvent+8,f,c
  6483  002426                     l6719:
  6484  002426  FFFF               	dw	65535	; assembler added errata NOP
  6485                           
  6486                           ;main.c: 717: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  6487  002428  503A               	movf	__currenDiaryEvent+1,w,c
  6488  00242A  6E23               	movwf	??_LoadNextEvent& (0+255),c
  6489  00242C  5041               	movf	__currenDiaryEvent+8,w,c
  6490  00242E  0101               	movlb	1	; () banked
  6491  002430  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6492  002432  C023  F1D9         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6493                           
  6494                           ; BSR set to: 1
  6495                           ;main.c: 718: if(_currenDiaryEvent.NextEventNum >= eventCount)
  6496  002436  5057               	movf	_eventCount,w,c
  6497  002438  5C41               	subwf	__currenDiaryEvent+8,w,c
  6498  00243A  A0D8               	btfss	status,0,c
  6499  00243C  D012               	goto	l6729
  6500                           
  6501                           ; BSR set to: 1
  6502                           ;main.c: 719: {
  6503                           ;main.c: 720: _currenDiaryEvent.NextEventNum = 0xff;
  6504  00243E  6841               	setf	__currenDiaryEvent+8,c
  6505                           
  6506                           ; BSR set to: 1
  6507                           ;main.c: 721: _currenDiaryEvent.NextEventTotalMinutes = 0;
  6508  002440  0E00               	movlw	0
  6509  002442  6E3C               	movwf	__currenDiaryEvent+3,c
  6510  002444  0E00               	movlw	0
  6511  002446  6E3B               	movwf	__currenDiaryEvent+2,c
  6512                           
  6513                           ;main.c: 722: _MODBUSInputRegs[3] = 0;
  6514  002448  0E00               	movlw	0
  6515  00244A  0101               	movlb	1	; () banked
  6516  00244C  6FDB               	movwf	(__MODBUSInputRegs+7)& (0+255),b
  6517  00244E  0E00               	movlw	0
  6518  002450  6FDA               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6519                           
  6520                           ;main.c: 723: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  6521  002452  503A               	movf	__currenDiaryEvent+1,w,c
  6522  002454  6E23               	movwf	??_LoadNextEvent& (0+255),c
  6523  002456  5041               	movf	__currenDiaryEvent+8,w,c
  6524  002458  0101               	movlb	1	; () banked
  6525  00245A  6FD8               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6526  00245C  C023  F1D9         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6527                           
  6528                           ; BSR set to: 1
  6529                           ;main.c: 724: return;
  6530  002460  D08A               	goto	l424
  6531  002462                     l6729:
  6532  002462  FFFF               	dw	65535	; assembler added errata NOP
  6533                           
  6534                           ; BSR set to: 1
  6535                           ;main.c: 725: }
  6536                           ;main.c: 736: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2, (void)
      +                          0, RD = 1, EEDATA);
  6537  002464  5041               	movf	__currenDiaryEvent+8,w,c
  6538  002466  0D02               	mullw	2
  6539  002468  50F3               	movf	prodl,w,c
  6540  00246A  0F0B               	addlw	11
  6541  00246C  6EA9               	movwf	4009,c	;volatile
  6542                           
  6543                           ; BSR set to: 1
  6544  00246E  80A6               	bsf	4006,0,c	;volatile
  6545                           
  6546                           ; BSR set to: 1
  6547  002470  CFA8 F027          	movff	4008,LoadNextEvent@v1	;volatile
  6548                           
  6549                           ;main.c: 737: _currenDiaryEvent.NextEventTotalMinutes = (v1 & 0x1F) * 60;
  6550  002474  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6551  002478  0E1F               	movlw	31
  6552  00247A  1623               	andwf	??_LoadNextEvent,f,c
  6553  00247C  5023               	movf	??_LoadNextEvent,w,c
  6554  00247E  0D3C               	mullw	60
  6555  002480  CFF3 F03B          	movff	prodl,__currenDiaryEvent+2
  6556  002484  CFF4 F03C          	movff	prodh,__currenDiaryEvent+3
  6557                           
  6558                           ; BSR set to: 1
  6559                           ;main.c: 739: _nextEventPlayDuration = (v1 >> 5);
  6560  002488  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6561  00248C  0E05               	movlw	5
  6562  00248E  6E24               	movwf	(??_LoadNextEvent+1)& (0+255),c
  6563  002490                     u6055:
  6564  002490  FFFF               	dw	65535	; assembler added errata NOP
  6565  002492  90D8               	bcf	status,0,c
  6566  002494  3223               	rrcf	??_LoadNextEvent,f,c
  6567  002496  2E24               	decfsz	(??_LoadNextEvent+1)& (0+255),f,c
  6568  002498  D7FB               	goto	u6055
  6569  00249A  5023               	movf	??_LoadNextEvent,w,c
  6570  00249C  0100               	movlb	0	; () banked
  6571  00249E  6FE6               	movwf	__nextEventPlayDuration& (0+255),b
  6572  0024A0  6BE7               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6573                           
  6574                           ;main.c: 740: switch(_nextEventPlayDuration)
  6575  0024A2  D02B               	goto	l6751
  6576  0024A4                     l6737:
  6577  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;main.c: 743: _nextEventPlayDuration = 10;
  6581  0024A6  0E00               	movlw	0
  6582  0024A8  0100               	movlb	0	; () banked
  6583  0024AA  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6584  0024AC  0E0A               	movlw	10
  6585  0024AE  D01D               	goto	L9
  6586  0024B0                     l6739:
  6587  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;main.c: 746: _nextEventPlayDuration = 30;
  6591  0024B2  0E00               	movlw	0
  6592  0024B4  0100               	movlb	0	; () banked
  6593  0024B6  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6594  0024B8  0E1E               	movlw	30
  6595  0024BA  D017               	goto	L9
  6596  0024BC                     l6741:
  6597  0024BC  FFFF               	dw	65535	; assembler added errata NOP
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;main.c: 749: _nextEventPlayDuration = 60;
  6601  0024BE  0E00               	movlw	0
  6602  0024C0  0100               	movlb	0	; () banked
  6603  0024C2  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6604  0024C4  0E3C               	movlw	60
  6605  0024C6  D011               	goto	L9
  6606  0024C8                     l6743:
  6607  0024C8  FFFF               	dw	65535	; assembler added errata NOP
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 752: _nextEventPlayDuration = 60*5;
  6611  0024CA  0E01               	movlw	1
  6612  0024CC  0100               	movlb	0	; () banked
  6613  0024CE  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6614  0024D0  0E2C               	movlw	44
  6615  0024D2  D00B               	goto	L9
  6616  0024D4                     l6745:
  6617  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;main.c: 755: _nextEventPlayDuration = 60*12;
  6621  0024D6  0E02               	movlw	2
  6622  0024D8  0100               	movlb	0	; () banked
  6623  0024DA  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6624  0024DC  0ED0               	movlw	208
  6625  0024DE  D005               	goto	L9
  6626  0024E0                     l6747:
  6627  0024E0  FFFF               	dw	65535	; assembler added errata NOP
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 758: _nextEventPlayDuration = 60*30;
  6631  0024E2  0E07               	movlw	7
  6632  0024E4  0100               	movlb	0	; () banked
  6633  0024E6  6FE7               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6634  0024E8  0E08               	movlw	8
  6635  0024EA                     L9:
  6636  0024EA  FFFF               	dw	65535	; assembler added errata NOP
  6637  0024EC  6FE6               	movwf	__nextEventPlayDuration& (0+255),b
  6638                           
  6639                           ;main.c: 759: break;
  6640  0024EE  D024               	goto	l6753
  6641  0024F0                     l438:
  6642  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 761: _nextEventPlayDuration = 65535;
  6646  0024F2  0100               	movlb	0	; () banked
  6647  0024F4  69E6               	setf	__nextEventPlayDuration& (0+255),b
  6648  0024F6  69E7               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;main.c: 763: }
  6652                           
  6653                           ;main.c: 762: break;
  6654  0024F8  D01F               	goto	l6753
  6655  0024FA                     l6751:
  6656  0024FA  FFFF               	dw	65535	; assembler added errata NOP
  6657                           
  6658                           ; BSR set to: 0
  6659  0024FC  C0E6  F023         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6660  002500  C0E7  F024         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6661                           
  6662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6663                           ; Switch size 1, requested type "space"
  6664                           ; Number of cases is 1, Range of values is 0 to 0
  6665                           ; switch strategies available:
  6666                           ; Name         Instructions Cycles
  6667                           ; simple_byte            4     3 (average)
  6668                           ;	Chosen strategy is simple_byte
  6669  002504  5024               	movf	??_LoadNextEvent+1,w,c
  6670  002506  0A00               	xorlw	0	; case 0
  6671  002508  A4D8               	btfss	status,2,c
  6672  00250A  D016               	goto	l6753
  6673                           
  6674                           ; BSR set to: 0
  6675                           ; Switch size 1, requested type "space"
  6676                           ; Number of cases is 7, Range of values is 1 to 7
  6677                           ; switch strategies available:
  6678                           ; Name         Instructions Cycles
  6679                           ; simple_byte           22    12 (average)
  6680                           ;	Chosen strategy is simple_byte
  6681  00250C  5023               	movf	??_LoadNextEvent,w,c
  6682  00250E  0A01               	xorlw	1	; case 1
  6683  002510  B4D8               	btfsc	status,2,c
  6684  002512  D7C8               	goto	l6737
  6685  002514  0A03               	xorlw	3	; case 2
  6686  002516  B4D8               	btfsc	status,2,c
  6687  002518  D7CB               	goto	l6739
  6688  00251A  0A01               	xorlw	1	; case 3
  6689  00251C  B4D8               	btfsc	status,2,c
  6690  00251E  D7CE               	goto	l6741
  6691  002520  0A07               	xorlw	7	; case 4
  6692  002522  B4D8               	btfsc	status,2,c
  6693  002524  D7D1               	goto	l6743
  6694  002526  0A01               	xorlw	1	; case 5
  6695  002528  B4D8               	btfsc	status,2,c
  6696  00252A  D7D4               	goto	l6745
  6697  00252C  0A03               	xorlw	3	; case 6
  6698  00252E  B4D8               	btfsc	status,2,c
  6699  002530  D7D7               	goto	l6747
  6700  002532  0A01               	xorlw	1	; case 7
  6701  002534  B4D8               	btfsc	status,2,c
  6702  002536  D7DC               	goto	l438
  6703  002538                     l6753:
  6704  002538  FFFF               	dw	65535	; assembler added errata NOP
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 764: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2 + 1, (v
      +                          oid)0, RD = 1, EEDATA);
  6708  00253A  5041               	movf	__currenDiaryEvent+8,w,c
  6709  00253C  0D02               	mullw	2
  6710  00253E  50F3               	movf	prodl,w,c
  6711  002540  0F0C               	addlw	12
  6712  002542  6EA9               	movwf	4009,c	;volatile
  6713                           
  6714                           ; BSR set to: 0
  6715  002544  80A6               	bsf	4006,0,c	;volatile
  6716                           
  6717                           ; BSR set to: 0
  6718  002546  CFA8 F027          	movff	4008,LoadNextEvent@v1	;volatile
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;main.c: 765: _currenDiaryEvent.NextEventTotalMinutes += v1 & 0x3F;
  6722  00254A  C027  F023         	movff	LoadNextEvent@v1,??_LoadNextEvent
  6723  00254E  0E3F               	movlw	63
  6724  002550  1623               	andwf	??_LoadNextEvent,f,c
  6725  002552  5023               	movf	??_LoadNextEvent,w,c
  6726  002554  263B               	addwf	__currenDiaryEvent+2,f,c
  6727  002556  0E00               	movlw	0
  6728  002558  223C               	addwfc	__currenDiaryEvent+3,f,c
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;main.c: 766: _nextEventSoundId = v1 >> 6;
  6732  00255A  4427               	rlncf	LoadNextEvent@v1,w,c
  6733  00255C  46E8               	rlncf	wreg,f,c
  6734  00255E  0B03               	andlw	3
  6735  002560  6E4E               	movwf	__nextEventSoundId,c
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;main.c: 768: }while(_currenDiaryEvent.NextEventTotalMinutes <= totalMinutes);
  6739  002562  503B               	movf	__currenDiaryEvent+2,w,c
  6740  002564  5C25               	subwf	LoadNextEvent@totalMinutes,w,c
  6741  002566  503C               	movf	__currenDiaryEvent+3,w,c
  6742  002568  5826               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  6743  00256A  B0D8               	btfsc	status,0,c
  6744  00256C  D753               	goto	l6713
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;main.c: 769: _MODBUSInputRegs[3] = _currenDiaryEvent.NextEventTotalMinutes;
  6748  00256E  C03B  F1DA         	movff	__currenDiaryEvent+2,__MODBUSInputRegs+6
  6749  002572  C03C  F1DB         	movff	__currenDiaryEvent+3,__MODBUSInputRegs+7
  6750  002576                     l424:
  6751  002576  FFFF               	dw	65535	; assembler added errata NOP
  6752  002578  0012               	return		;funcret
  6753  00257A  FFFF               	dw	65535	; errata NOP
  6754  00257C                     __end_of_LoadNextEvent:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           postdec1	equ	0xFE5
  6766                           fsr1h	equ	0xFE2
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           postinc2	equ	0xFDE
  6770                           postdec2	equ	0xFDD
  6771                           fsr2h	equ	0xFDA
  6772                           fsr2l	equ	0xFD9
  6773                           status	equ	0xFD8
  6774                           
  6775 ;; *************** function _getTotalMinutes *****************
  6776 ;; Defined at:
  6777 ;;		line 267 in file "interrupts.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  totalMinutes    2   32[COMRAM] PTR unsigned int 
  6780 ;;		 -> main@totalMinutes(2), ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      unsigned char 
  6785 ;; Registers used:
  6786 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6792 ;;      Params:         2       0       0       0       0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0
  6795 ;;      Totals:         2       0       0       0       0       0       0
  6796 ;;Total ram usage:        2 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    2
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		_LoadNextEvent
  6803 ;;		_ProcessDiary
  6804 ;;		_main
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text32
  6809  00014E                     __ptext32:
  6810                           	opt stack 0
  6811  00014E                     _getTotalMinutes:
  6812                           	opt stack 24
  6813                           
  6814                           ;incstack = 0
  6815  00014E  FFFF               	dw	65535
  6816                           
  6817                           ;interrupts.c: 269: if(globalHours == 0xFF)
  6818  000150  285E               	incf	_globalHours,w,c	;volatile
  6819  000152  A4D8               	btfss	status,2,c
  6820  000154  D002               	goto	l112
  6821                           
  6822                           ;interrupts.c: 270: return 0;
  6823  000156  0E00               	movlw	0
  6824  000158  D00C               	goto	l113
  6825  00015A                     l112:
  6826  00015A  FFFF               	dw	65535	; assembler added errata NOP
  6827                           
  6828                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  6829  00015C  9EF2               	bcf	intcon,7,c	;volatile
  6830                           
  6831                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  6832  00015E  C021  FFD9         	movff	getTotalMinutes@totalMinutes,fsr2l
  6833  000162  C022  FFDA         	movff	getTotalMinutes@totalMinutes+1,fsr2h
  6834  000166  C0E8  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  6835  00016A  C0E9  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  6836                           
  6837                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  6838  00016E  8EF2               	bsf	intcon,7,c	;volatile
  6839                           
  6840                           ;interrupts.c: 274: return 1;
  6841  000170  0E01               	movlw	1
  6842  000172                     l113:
  6843  000172  FFFF               	dw	65535	; assembler added errata NOP
  6844  000174  0012               	return		;funcret
  6845  000176  FFFF               	dw	65535	; errata NOP
  6846  000178                     __end_of_getTotalMinutes:
  6847                           	opt stack 0
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           intcon	equ	0xFF2
  6855                           postinc0	equ	0xFEE
  6856                           wreg	equ	0xFE8
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function _LightLed *****************
  6868 ;; Defined at:
  6869 ;;		line 328 in file "main.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  ledNum          1    wreg     unsigned char 
  6872 ;;  ledState        1   32[COMRAM] enum E2454
  6873 ;;  blink           1   33[COMRAM] unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  ledNum          1   37[COMRAM] unsigned char 
  6876 ;;  statusShift     1   39[COMRAM] unsigned char 
  6877 ;;  ststusIndex     1   38[COMRAM] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      void 
  6880 ;; Registers used:
  6881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6887 ;;      Params:         2       0       0       0       0       0       0
  6888 ;;      Locals:         3       0       0       0       0       0       0
  6889 ;;      Temps:          3       0       0       0       0       0       0
  6890 ;;      Totals:         8       0       0       0       0       0       0
  6891 ;;Total ram usage:        8 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    2
  6894 ;; This function calls:
  6895 ;;		Nothing
  6896 ;; This function is called by:
  6897 ;;		_SwitchOffAllDiaryLeds
  6898 ;;		_ShowFailure
  6899 ;;		_ResetEvent
  6900 ;;		_ResetEventFromCommand
  6901 ;;		_ProcessDiary
  6902 ;;		_CommandSetLed
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text33
  6907  000AB8                     __ptext33:
  6908                           	opt stack 0
  6909  000AB8                     _LightLed:
  6910                           	opt stack 24
  6911                           
  6912                           ;incstack = 0
  6913  000AB8  FFFF               	dw	65535
  6914                           
  6915                           ;LightLed@ledNum stored from wreg
  6916  000ABA  6E26               	movwf	LightLed@ledNum,c
  6917                           
  6918                           ;main.c: 330: if(ledNum < 1 || ledNum > 60)
  6919  000ABC  5026               	movf	LightLed@ledNum,w,c
  6920  000ABE  B4D8               	btfsc	status,2,c
  6921  000AC0  D1FF               	goto	l264
  6922  000AC2  0E3C               	movlw	60
  6923  000AC4  6426               	cpfsgt	LightLed@ledNum,c
  6924  000AC6  D001               	goto	l6511
  6925  000AC8  D1FB               	goto	l264
  6926  000ACA                     l6511:
  6927  000ACA  FFFF               	dw	65535	; assembler added errata NOP
  6928                           
  6929                           ;main.c: 332: ledNum--;
  6930  000ACC  0626               	decf	LightLed@ledNum,f,c
  6931                           
  6932                           ;main.c: 334: uint8_t ststusIndex = ledNum >> 2;
  6933  000ACE  4026               	rrncf	LightLed@ledNum,w,c
  6934  000AD0  42E8               	rrncf	wreg,f,c
  6935  000AD2  0B3F               	andlw	63
  6936  000AD4  6E27               	movwf	LightLed@ststusIndex,c
  6937                           
  6938                           ;main.c: 335: uint8_t statusShift = (ledNum & 0x03) << 1;
  6939  000AD6  C026  F023         	movff	LightLed@ledNum,??_LightLed
  6940  000ADA  0E03               	movlw	3
  6941  000ADC  1623               	andwf	??_LightLed,f,c
  6942  000ADE  90D8               	bcf	status,0,c
  6943  000AE0  3423               	rlcf	??_LightLed,w,c
  6944  000AE2  6E28               	movwf	LightLed@statusShift,c
  6945                           
  6946                           ;main.c: 337: switch(ledState)
  6947  000AE4  D1DF               	goto	l6551
  6948  000AE6                     l6517:
  6949  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6950                           
  6951                           ;main.c: 340: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6952  000AE8  C028  F023         	movff	LightLed@statusShift,??_LightLed
  6953  000AEC  0E01               	movlw	1
  6954  000AEE  2623               	addwf	??_LightLed,f,c
  6955  000AF0  0E01               	movlw	1
  6956  000AF2  6E24               	movwf	(??_LightLed+1)& (0+255),c
  6957  000AF4  2A23               	incf	??_LightLed,f,c
  6958  000AF6  D003               	goto	u5524
  6959  000AF8                     u5525:
  6960  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  6961  000AFA  90D8               	bcf	status,0,c
  6962  000AFC  3624               	rlcf	??_LightLed+1,f,c
  6963  000AFE                     u5524:
  6964  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  6965  000B00  2E23               	decfsz	??_LightLed,f,c
  6966  000B02  D7FA               	goto	u5525
  6967  000B04  5024               	movf	??_LightLed+1,w,c
  6968  000B06  0AFF               	xorlw	255
  6969  000B08  6E25               	movwf	(??_LightLed+2)& (0+255),c
  6970  000B0A  5027               	movf	LightLed@ststusIndex,w,c
  6971  000B0C  0D01               	mullw	1
  6972  000B0E  0EC2               	movlw	low _ledStatuses
  6973  000B10  24F3               	addwf	prodl,w,c
  6974  000B12  6ED9               	movwf	fsr2l,c
  6975  000B14  0E00               	movlw	high _ledStatuses
  6976  000B16  20F4               	addwfc	prodh,w,c
  6977  000B18  6EDA               	movwf	fsr2h,c
  6978  000B1A  5025               	movf	??_LightLed+2,w,c
  6979  000B1C  16DF               	andwf	indf2,f,c
  6980                           
  6981                           ;main.c: 341: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6982  000B1E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  6983  000B22  0E01               	movlw	1
  6984  000B24  6E24               	movwf	(??_LightLed+1)& (0+255),c
  6985  000B26  2A23               	incf	??_LightLed,f,c
  6986  000B28  D003               	goto	u5534
  6987  000B2A                     u5535:
  6988  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  6989  000B2C  90D8               	bcf	status,0,c
  6990  000B2E  3624               	rlcf	??_LightLed+1,f,c
  6991  000B30                     u5534:
  6992  000B30  FFFF               	dw	65535	; assembler added errata NOP
  6993  000B32  2E23               	decfsz	??_LightLed,f,c
  6994  000B34  D7FA               	goto	u5535
  6995  000B36  5024               	movf	??_LightLed+1,w,c
  6996  000B38  0AFF               	xorlw	255
  6997  000B3A  6E25               	movwf	(??_LightLed+2)& (0+255),c
  6998  000B3C  5027               	movf	LightLed@ststusIndex,w,c
  6999  000B3E  0D01               	mullw	1
  7000  000B40  0EC2               	movlw	low _ledStatuses
  7001  000B42  24F3               	addwf	prodl,w,c
  7002  000B44  6ED9               	movwf	fsr2l,c
  7003  000B46  0E00               	movlw	high _ledStatuses
  7004  000B48  20F4               	addwfc	prodh,w,c
  7005  000B4A  6EDA               	movwf	fsr2h,c
  7006  000B4C  5025               	movf	??_LightLed+2,w,c
  7007  000B4E  16DF               	andwf	indf2,f,c
  7008                           
  7009                           ;main.c: 342: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7010  000B50  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7011  000B54  0E01               	movlw	1
  7012  000B56  2623               	addwf	??_LightLed,f,c
  7013  000B58  0E01               	movlw	1
  7014  000B5A  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7015  000B5C  2A23               	incf	??_LightLed,f,c
  7016  000B5E  D003               	goto	u5544
  7017  000B60                     u5545:
  7018  000B60  FFFF               	dw	65535	; assembler added errata NOP
  7019  000B62  90D8               	bcf	status,0,c
  7020  000B64  3624               	rlcf	??_LightLed+1,f,c
  7021  000B66                     u5544:
  7022  000B66  FFFF               	dw	65535	; assembler added errata NOP
  7023  000B68  2E23               	decfsz	??_LightLed,f,c
  7024  000B6A  D7FA               	goto	u5545
  7025  000B6C  5024               	movf	??_LightLed+1,w,c
  7026  000B6E  0AFF               	xorlw	255
  7027  000B70  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7028  000B72  5027               	movf	LightLed@ststusIndex,w,c
  7029  000B74  0D01               	mullw	1
  7030  000B76  0E00               	movlw	low _ledBlink
  7031  000B78  24F3               	addwf	prodl,w,c
  7032  000B7A  6ED9               	movwf	fsr2l,c
  7033  000B7C  0E01               	movlw	high _ledBlink
  7034  000B7E  20F4               	addwfc	prodh,w,c
  7035  000B80  6EDA               	movwf	fsr2h,c
  7036  000B82  5025               	movf	??_LightLed+2,w,c
  7037  000B84  16DF               	andwf	indf2,f,c
  7038                           
  7039                           ;main.c: 343: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7040  000B86  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7041  000B8A  0E01               	movlw	1
  7042  000B8C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7043  000B8E  2A23               	incf	??_LightLed,f,c
  7044  000B90  D003               	goto	u5554
  7045  000B92                     u5555:
  7046  000B92  FFFF               	dw	65535	; assembler added errata NOP
  7047  000B94  90D8               	bcf	status,0,c
  7048  000B96  3624               	rlcf	??_LightLed+1,f,c
  7049  000B98                     u5554:
  7050  000B98  FFFF               	dw	65535	; assembler added errata NOP
  7051  000B9A  2E23               	decfsz	??_LightLed,f,c
  7052  000B9C  D7FA               	goto	u5555
  7053  000B9E  D173               	goto	L13
  7054  000BA0                     l6519:
  7055  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7056                           
  7057                           ;main.c: 346: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7058  000BA2  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7059  000BA6  0E01               	movlw	1
  7060  000BA8  2623               	addwf	??_LightLed,f,c
  7061  000BAA  0E01               	movlw	1
  7062  000BAC  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7063  000BAE  2A23               	incf	??_LightLed,f,c
  7064  000BB0  D003               	goto	u5564
  7065  000BB2                     u5565:
  7066  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  7067  000BB4  90D8               	bcf	status,0,c
  7068  000BB6  3624               	rlcf	??_LightLed+1,f,c
  7069  000BB8                     u5564:
  7070  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  7071  000BBA  2E23               	decfsz	??_LightLed,f,c
  7072  000BBC  D7FA               	goto	u5565
  7073  000BBE  5027               	movf	LightLed@ststusIndex,w,c
  7074  000BC0  0D01               	mullw	1
  7075  000BC2  0EC2               	movlw	low _ledStatuses
  7076  000BC4  24F3               	addwf	prodl,w,c
  7077  000BC6  6ED9               	movwf	fsr2l,c
  7078  000BC8  0E00               	movlw	high _ledStatuses
  7079  000BCA  20F4               	addwfc	prodh,w,c
  7080  000BCC  6EDA               	movwf	fsr2h,c
  7081  000BCE  5024               	movf	??_LightLed+1,w,c
  7082  000BD0  12DF               	iorwf	indf2,f,c
  7083                           
  7084                           ;main.c: 347: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7085  000BD2  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7086  000BD6  0E01               	movlw	1
  7087  000BD8  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7088  000BDA  2A23               	incf	??_LightLed,f,c
  7089  000BDC  D003               	goto	u5574
  7090  000BDE                     u5575:
  7091  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  7092  000BE0  90D8               	bcf	status,0,c
  7093  000BE2  3624               	rlcf	??_LightLed+1,f,c
  7094  000BE4                     u5574:
  7095  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  7096  000BE6  2E23               	decfsz	??_LightLed,f,c
  7097  000BE8  D7FA               	goto	u5575
  7098  000BEA  5024               	movf	??_LightLed+1,w,c
  7099  000BEC  0AFF               	xorlw	255
  7100  000BEE  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7101  000BF0  5027               	movf	LightLed@ststusIndex,w,c
  7102  000BF2  0D01               	mullw	1
  7103  000BF4  0EC2               	movlw	low _ledStatuses
  7104  000BF6  24F3               	addwf	prodl,w,c
  7105  000BF8  6ED9               	movwf	fsr2l,c
  7106  000BFA  0E00               	movlw	high _ledStatuses
  7107  000BFC  20F4               	addwfc	prodh,w,c
  7108  000BFE  6EDA               	movwf	fsr2h,c
  7109  000C00  5025               	movf	??_LightLed+2,w,c
  7110  000C02  16DF               	andwf	indf2,f,c
  7111                           
  7112                           ;main.c: 348: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7113  000C04  5022               	movf	LightLed@blink,w,c
  7114  000C06  B4D8               	btfsc	status,2,c
  7115  000C08  D019               	goto	l6525
  7116  000C0A  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7117  000C0E  0E01               	movlw	1
  7118  000C10  2623               	addwf	??_LightLed,f,c
  7119  000C12  0E01               	movlw	1
  7120  000C14  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7121  000C16  2A23               	incf	??_LightLed,f,c
  7122  000C18  D003               	goto	u5594
  7123  000C1A                     u5595:
  7124  000C1A  FFFF               	dw	65535	; assembler added errata NOP
  7125  000C1C  90D8               	bcf	status,0,c
  7126  000C1E  3624               	rlcf	??_LightLed+1,f,c
  7127  000C20                     u5594:
  7128  000C20  FFFF               	dw	65535	; assembler added errata NOP
  7129  000C22  2E23               	decfsz	??_LightLed,f,c
  7130  000C24  D7FA               	goto	u5595
  7131  000C26  5027               	movf	LightLed@ststusIndex,w,c
  7132  000C28  0D01               	mullw	1
  7133  000C2A  0E00               	movlw	low _ledBlink
  7134  000C2C  24F3               	addwf	prodl,w,c
  7135  000C2E  6ED9               	movwf	fsr2l,c
  7136  000C30  0E01               	movlw	high _ledBlink
  7137  000C32  20F4               	addwfc	prodh,w,c
  7138  000C34  6EDA               	movwf	fsr2h,c
  7139  000C36  5024               	movf	??_LightLed+1,w,c
  7140  000C38  12DF               	iorwf	indf2,f,c
  7141  000C3A  D01C               	goto	l272
  7142  000C3C                     l6525:
  7143  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  7144  000C3E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7145  000C42  0E01               	movlw	1
  7146  000C44  2623               	addwf	??_LightLed,f,c
  7147  000C46  0E01               	movlw	1
  7148  000C48  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7149  000C4A  2A23               	incf	??_LightLed,f,c
  7150  000C4C  D003               	goto	u5604
  7151  000C4E                     u5605:
  7152  000C4E  FFFF               	dw	65535	; assembler added errata NOP
  7153  000C50  90D8               	bcf	status,0,c
  7154  000C52  3624               	rlcf	??_LightLed+1,f,c
  7155  000C54                     u5604:
  7156  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7157  000C56  2E23               	decfsz	??_LightLed,f,c
  7158  000C58  D7FA               	goto	u5605
  7159  000C5A  5024               	movf	??_LightLed+1,w,c
  7160  000C5C  0AFF               	xorlw	255
  7161  000C5E  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7162  000C60  5027               	movf	LightLed@ststusIndex,w,c
  7163  000C62  0D01               	mullw	1
  7164  000C64  0E00               	movlw	low _ledBlink
  7165  000C66  24F3               	addwf	prodl,w,c
  7166  000C68  6ED9               	movwf	fsr2l,c
  7167  000C6A  0E01               	movlw	high _ledBlink
  7168  000C6C  20F4               	addwfc	prodh,w,c
  7169  000C6E  6EDA               	movwf	fsr2h,c
  7170  000C70  5025               	movf	??_LightLed+2,w,c
  7171  000C72  16DF               	andwf	indf2,f,c
  7172  000C74                     l272:
  7173  000C74  FFFF               	dw	65535	; assembler added errata NOP
  7174                           
  7175                           ;main.c: 349: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7176  000C76  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7177  000C7A  0E01               	movlw	1
  7178  000C7C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7179  000C7E  2A23               	incf	??_LightLed,f,c
  7180  000C80  D003               	goto	u5614
  7181  000C82                     u5615:
  7182  000C82  FFFF               	dw	65535	; assembler added errata NOP
  7183  000C84  90D8               	bcf	status,0,c
  7184  000C86  3624               	rlcf	??_LightLed+1,f,c
  7185  000C88                     u5614:
  7186  000C88  FFFF               	dw	65535	; assembler added errata NOP
  7187  000C8A  2E23               	decfsz	??_LightLed,f,c
  7188  000C8C  D7FA               	goto	u5615
  7189  000C8E  D0FB               	goto	L13
  7190  000C90                     l6527:
  7191  000C90  FFFF               	dw	65535	; assembler added errata NOP
  7192                           
  7193                           ;main.c: 352: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7194  000C92  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7195  000C96  0E01               	movlw	1
  7196  000C98  2623               	addwf	??_LightLed,f,c
  7197  000C9A  0E01               	movlw	1
  7198  000C9C  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7199  000C9E  2A23               	incf	??_LightLed,f,c
  7200  000CA0  D003               	goto	u5624
  7201  000CA2                     u5625:
  7202  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  7203  000CA4  90D8               	bcf	status,0,c
  7204  000CA6  3624               	rlcf	??_LightLed+1,f,c
  7205  000CA8                     u5624:
  7206  000CA8  FFFF               	dw	65535	; assembler added errata NOP
  7207  000CAA  2E23               	decfsz	??_LightLed,f,c
  7208  000CAC  D7FA               	goto	u5625
  7209  000CAE  5024               	movf	??_LightLed+1,w,c
  7210  000CB0  0AFF               	xorlw	255
  7211  000CB2  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7212  000CB4  5027               	movf	LightLed@ststusIndex,w,c
  7213  000CB6  0D01               	mullw	1
  7214  000CB8  0EC2               	movlw	low _ledStatuses
  7215  000CBA  24F3               	addwf	prodl,w,c
  7216  000CBC  6ED9               	movwf	fsr2l,c
  7217  000CBE  0E00               	movlw	high _ledStatuses
  7218  000CC0  20F4               	addwfc	prodh,w,c
  7219  000CC2  6EDA               	movwf	fsr2h,c
  7220  000CC4  5025               	movf	??_LightLed+2,w,c
  7221  000CC6  16DF               	andwf	indf2,f,c
  7222                           
  7223                           ;main.c: 353: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7224  000CC8  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7225  000CCC  0E01               	movlw	1
  7226  000CCE  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7227  000CD0  2A23               	incf	??_LightLed,f,c
  7228  000CD2  D003               	goto	u5634
  7229  000CD4                     u5635:
  7230  000CD4  FFFF               	dw	65535	; assembler added errata NOP
  7231  000CD6  90D8               	bcf	status,0,c
  7232  000CD8  3624               	rlcf	??_LightLed+1,f,c
  7233  000CDA                     u5634:
  7234  000CDA  FFFF               	dw	65535	; assembler added errata NOP
  7235  000CDC  2E23               	decfsz	??_LightLed,f,c
  7236  000CDE  D7FA               	goto	u5635
  7237  000CE0  5027               	movf	LightLed@ststusIndex,w,c
  7238  000CE2  0D01               	mullw	1
  7239  000CE4  0EC2               	movlw	low _ledStatuses
  7240  000CE6  24F3               	addwf	prodl,w,c
  7241  000CE8  6ED9               	movwf	fsr2l,c
  7242  000CEA  0E00               	movlw	high _ledStatuses
  7243  000CEC  20F4               	addwfc	prodh,w,c
  7244  000CEE  6EDA               	movwf	fsr2h,c
  7245  000CF0  5024               	movf	??_LightLed+1,w,c
  7246  000CF2  12DF               	iorwf	indf2,f,c
  7247                           
  7248                           ;main.c: 354: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7249  000CF4  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7250  000CF8  0E01               	movlw	1
  7251  000CFA  2623               	addwf	??_LightLed,f,c
  7252  000CFC  0E01               	movlw	1
  7253  000CFE  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7254  000D00  2A23               	incf	??_LightLed,f,c
  7255  000D02  D003               	goto	u5644
  7256  000D04                     u5645:
  7257  000D04  FFFF               	dw	65535	; assembler added errata NOP
  7258  000D06  90D8               	bcf	status,0,c
  7259  000D08  3624               	rlcf	??_LightLed+1,f,c
  7260  000D0A                     u5644:
  7261  000D0A  FFFF               	dw	65535	; assembler added errata NOP
  7262  000D0C  2E23               	decfsz	??_LightLed,f,c
  7263  000D0E  D7FA               	goto	u5645
  7264  000D10  5024               	movf	??_LightLed+1,w,c
  7265  000D12  0AFF               	xorlw	255
  7266  000D14  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7267  000D16  5027               	movf	LightLed@ststusIndex,w,c
  7268  000D18  0D01               	mullw	1
  7269  000D1A  0E00               	movlw	low _ledBlink
  7270  000D1C  24F3               	addwf	prodl,w,c
  7271  000D1E  6ED9               	movwf	fsr2l,c
  7272  000D20  0E01               	movlw	high _ledBlink
  7273  000D22  20F4               	addwfc	prodh,w,c
  7274  000D24  6EDA               	movwf	fsr2h,c
  7275  000D26  5025               	movf	??_LightLed+2,w,c
  7276  000D28  16DF               	andwf	indf2,f,c
  7277                           
  7278                           ;main.c: 355: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7279  000D2A  5022               	movf	LightLed@blink,w,c
  7280  000D2C  B4D8               	btfsc	status,2,c
  7281  000D2E  D00D               	goto	l6533
  7282  000D30  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7283  000D34  0E01               	movlw	1
  7284  000D36  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7285  000D38  2A23               	incf	??_LightLed,f,c
  7286  000D3A  D003               	goto	u5664
  7287  000D3C                     u5665:
  7288  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  7289  000D3E  90D8               	bcf	status,0,c
  7290  000D40  3624               	rlcf	??_LightLed+1,f,c
  7291  000D42                     u5664:
  7292  000D42  FFFF               	dw	65535	; assembler added errata NOP
  7293  000D44  2E23               	decfsz	??_LightLed,f,c
  7294  000D46  D7FA               	goto	u5665
  7295  000D48  D085               	goto	L12
  7296  000D4A                     l6533:
  7297  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  7298  000D4C  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7299  000D50  0E01               	movlw	1
  7300  000D52  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7301  000D54  2A23               	incf	??_LightLed,f,c
  7302  000D56  D003               	goto	u5674
  7303  000D58                     u5675:
  7304  000D58  FFFF               	dw	65535	; assembler added errata NOP
  7305  000D5A  90D8               	bcf	status,0,c
  7306  000D5C  3624               	rlcf	??_LightLed+1,f,c
  7307  000D5E                     u5674:
  7308  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  7309  000D60  2E23               	decfsz	??_LightLed,f,c
  7310  000D62  D7FA               	goto	u5675
  7311  000D64  D090               	goto	L13
  7312  000D66                     l6535:
  7313  000D66  FFFF               	dw	65535	; assembler added errata NOP
  7314                           
  7315                           ;main.c: 358: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7316  000D68  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7317  000D6C  0E01               	movlw	1
  7318  000D6E  2623               	addwf	??_LightLed,f,c
  7319  000D70  0E01               	movlw	1
  7320  000D72  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7321  000D74  2A23               	incf	??_LightLed,f,c
  7322  000D76  D003               	goto	u5684
  7323  000D78                     u5685:
  7324  000D78  FFFF               	dw	65535	; assembler added errata NOP
  7325  000D7A  90D8               	bcf	status,0,c
  7326  000D7C  3624               	rlcf	??_LightLed+1,f,c
  7327  000D7E                     u5684:
  7328  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  7329  000D80  2E23               	decfsz	??_LightLed,f,c
  7330  000D82  D7FA               	goto	u5685
  7331  000D84  5027               	movf	LightLed@ststusIndex,w,c
  7332  000D86  0D01               	mullw	1
  7333  000D88  0EC2               	movlw	low _ledStatuses
  7334  000D8A  24F3               	addwf	prodl,w,c
  7335  000D8C  6ED9               	movwf	fsr2l,c
  7336  000D8E  0E00               	movlw	high _ledStatuses
  7337  000D90  20F4               	addwfc	prodh,w,c
  7338  000D92  6EDA               	movwf	fsr2h,c
  7339  000D94  5024               	movf	??_LightLed+1,w,c
  7340  000D96  12DF               	iorwf	indf2,f,c
  7341                           
  7342                           ;main.c: 359: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7343  000D98  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7344  000D9C  0E01               	movlw	1
  7345  000D9E  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7346  000DA0  2A23               	incf	??_LightLed,f,c
  7347  000DA2  D003               	goto	u5694
  7348  000DA4                     u5695:
  7349  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  7350  000DA6  90D8               	bcf	status,0,c
  7351  000DA8  3624               	rlcf	??_LightLed+1,f,c
  7352  000DAA                     u5694:
  7353  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  7354  000DAC  2E23               	decfsz	??_LightLed,f,c
  7355  000DAE  D7FA               	goto	u5695
  7356  000DB0  5027               	movf	LightLed@ststusIndex,w,c
  7357  000DB2  0D01               	mullw	1
  7358  000DB4  0EC2               	movlw	low _ledStatuses
  7359  000DB6  24F3               	addwf	prodl,w,c
  7360  000DB8  6ED9               	movwf	fsr2l,c
  7361  000DBA  0E00               	movlw	high _ledStatuses
  7362  000DBC  20F4               	addwfc	prodh,w,c
  7363  000DBE  6EDA               	movwf	fsr2h,c
  7364  000DC0  5024               	movf	??_LightLed+1,w,c
  7365  000DC2  12DF               	iorwf	indf2,f,c
  7366                           
  7367                           ;main.c: 360: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7368  000DC4  5022               	movf	LightLed@blink,w,c
  7369  000DC6  B4D8               	btfsc	status,2,c
  7370  000DC8  D019               	goto	l6541
  7371  000DCA  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7372  000DCE  0E01               	movlw	1
  7373  000DD0  2623               	addwf	??_LightLed,f,c
  7374  000DD2  0E01               	movlw	1
  7375  000DD4  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7376  000DD6  2A23               	incf	??_LightLed,f,c
  7377  000DD8  D003               	goto	u5714
  7378  000DDA                     u5715:
  7379  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  7380  000DDC  90D8               	bcf	status,0,c
  7381  000DDE  3624               	rlcf	??_LightLed+1,f,c
  7382  000DE0                     u5714:
  7383  000DE0  FFFF               	dw	65535	; assembler added errata NOP
  7384  000DE2  2E23               	decfsz	??_LightLed,f,c
  7385  000DE4  D7FA               	goto	u5715
  7386  000DE6  5027               	movf	LightLed@ststusIndex,w,c
  7387  000DE8  0D01               	mullw	1
  7388  000DEA  0E00               	movlw	low _ledBlink
  7389  000DEC  24F3               	addwf	prodl,w,c
  7390  000DEE  6ED9               	movwf	fsr2l,c
  7391  000DF0  0E01               	movlw	high _ledBlink
  7392  000DF2  20F4               	addwfc	prodh,w,c
  7393  000DF4  6EDA               	movwf	fsr2h,c
  7394  000DF6  5024               	movf	??_LightLed+1,w,c
  7395  000DF8  12DF               	iorwf	indf2,f,c
  7396  000DFA  D01C               	goto	l6543
  7397  000DFC                     l6541:
  7398  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  7399  000DFE  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7400  000E02  0E01               	movlw	1
  7401  000E04  2623               	addwf	??_LightLed,f,c
  7402  000E06  0E01               	movlw	1
  7403  000E08  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7404  000E0A  2A23               	incf	??_LightLed,f,c
  7405  000E0C  D003               	goto	u5724
  7406  000E0E                     u5725:
  7407  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  7408  000E10  90D8               	bcf	status,0,c
  7409  000E12  3624               	rlcf	??_LightLed+1,f,c
  7410  000E14                     u5724:
  7411  000E14  FFFF               	dw	65535	; assembler added errata NOP
  7412  000E16  2E23               	decfsz	??_LightLed,f,c
  7413  000E18  D7FA               	goto	u5725
  7414  000E1A  5024               	movf	??_LightLed+1,w,c
  7415  000E1C  0AFF               	xorlw	255
  7416  000E1E  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7417  000E20  5027               	movf	LightLed@ststusIndex,w,c
  7418  000E22  0D01               	mullw	1
  7419  000E24  0E00               	movlw	low _ledBlink
  7420  000E26  24F3               	addwf	prodl,w,c
  7421  000E28  6ED9               	movwf	fsr2l,c
  7422  000E2A  0E01               	movlw	high _ledBlink
  7423  000E2C  20F4               	addwfc	prodh,w,c
  7424  000E2E  6EDA               	movwf	fsr2h,c
  7425  000E30  5025               	movf	??_LightLed+2,w,c
  7426  000E32  16DF               	andwf	indf2,f,c
  7427  000E34                     l6543:
  7428  000E34  FFFF               	dw	65535	; assembler added errata NOP
  7429                           
  7430                           ;main.c: 361: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7431  000E36  5022               	movf	LightLed@blink,w,c
  7432  000E38  B4D8               	btfsc	status,2,c
  7433  000E3A  D018               	goto	l6547
  7434  000E3C  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7435  000E40  0E01               	movlw	1
  7436  000E42  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7437  000E44  2A23               	incf	??_LightLed,f,c
  7438  000E46  D003               	goto	u5744
  7439  000E48                     u5745:
  7440  000E48  FFFF               	dw	65535	; assembler added errata NOP
  7441  000E4A  90D8               	bcf	status,0,c
  7442  000E4C  3624               	rlcf	??_LightLed+1,f,c
  7443  000E4E                     u5744:
  7444  000E4E  FFFF               	dw	65535	; assembler added errata NOP
  7445  000E50  2E23               	decfsz	??_LightLed,f,c
  7446  000E52  D7FA               	goto	u5745
  7447  000E54                     L12:
  7448  000E54  FFFF               	dw	65535	; assembler added errata NOP
  7449  000E56  5027               	movf	LightLed@ststusIndex,w,c
  7450  000E58  0D01               	mullw	1
  7451  000E5A  0E00               	movlw	low _ledBlink
  7452  000E5C  24F3               	addwf	prodl,w,c
  7453  000E5E  6ED9               	movwf	fsr2l,c
  7454  000E60  0E01               	movlw	high _ledBlink
  7455  000E62  20F4               	addwfc	prodh,w,c
  7456  000E64  6EDA               	movwf	fsr2h,c
  7457  000E66  5024               	movf	??_LightLed+1,w,c
  7458  000E68  12DF               	iorwf	indf2,f,c
  7459  000E6A  D02A               	goto	l264
  7460  000E6C                     l6547:
  7461  000E6C  FFFF               	dw	65535	; assembler added errata NOP
  7462  000E6E  C028  F023         	movff	LightLed@statusShift,??_LightLed
  7463  000E72  0E01               	movlw	1
  7464  000E74  6E24               	movwf	(??_LightLed+1)& (0+255),c
  7465  000E76  2A23               	incf	??_LightLed,f,c
  7466  000E78  D003               	goto	u5754
  7467  000E7A                     u5755:
  7468  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  7469  000E7C  90D8               	bcf	status,0,c
  7470  000E7E  3624               	rlcf	??_LightLed+1,f,c
  7471  000E80                     u5754:
  7472  000E80  FFFF               	dw	65535	; assembler added errata NOP
  7473  000E82  2E23               	decfsz	??_LightLed,f,c
  7474  000E84  D7FA               	goto	u5755
  7475  000E86                     L13:
  7476  000E86  FFFF               	dw	65535	; assembler added errata NOP
  7477  000E88  5024               	movf	??_LightLed+1,w,c
  7478  000E8A  0AFF               	xorlw	255
  7479  000E8C  6E25               	movwf	(??_LightLed+2)& (0+255),c
  7480  000E8E  5027               	movf	LightLed@ststusIndex,w,c
  7481  000E90  0D01               	mullw	1
  7482  000E92  0E00               	movlw	low _ledBlink
  7483  000E94  24F3               	addwf	prodl,w,c
  7484  000E96  6ED9               	movwf	fsr2l,c
  7485  000E98  0E01               	movlw	high _ledBlink
  7486  000E9A  20F4               	addwfc	prodh,w,c
  7487  000E9C  6EDA               	movwf	fsr2h,c
  7488  000E9E  5025               	movf	??_LightLed+2,w,c
  7489  000EA0  16DF               	andwf	indf2,f,c
  7490                           
  7491                           ;main.c: 363: }
  7492                           
  7493                           ;main.c: 362: break;
  7494  000EA2  D00E               	goto	l264
  7495  000EA4                     l6551:
  7496  000EA4  FFFF               	dw	65535	; assembler added errata NOP
  7497  000EA6  5021               	movf	LightLed@ledState,w,c
  7498                           
  7499                           ; Switch size 1, requested type "space"
  7500                           ; Number of cases is 4, Range of values is 0 to 3
  7501                           ; switch strategies available:
  7502                           ; Name         Instructions Cycles
  7503                           ; simple_byte           13     7 (average)
  7504                           ;	Chosen strategy is simple_byte
  7505  000EA8  0A00               	xorlw	0	; case 0
  7506  000EAA  B4D8               	btfsc	status,2,c
  7507  000EAC  D61C               	goto	l6517
  7508  000EAE  0A01               	xorlw	1	; case 1
  7509  000EB0  B4D8               	btfsc	status,2,c
  7510  000EB2  D676               	goto	l6519
  7511  000EB4  0A03               	xorlw	3	; case 2
  7512  000EB6  B4D8               	btfsc	status,2,c
  7513  000EB8  D6EB               	goto	l6527
  7514  000EBA  0A01               	xorlw	1	; case 3
  7515  000EBC  B4D8               	btfsc	status,2,c
  7516  000EBE  D753               	goto	l6535
  7517  000EC0                     l264:
  7518  000EC0  FFFF               	dw	65535	; assembler added errata NOP
  7519  000EC2  0012               	return		;funcret
  7520  000EC4  FFFF               	dw	65535	; errata NOP
  7521  000EC6                     __end_of_LightLed:
  7522                           	opt stack 0
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           intcon	equ	0xFF2
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           postdec1	equ	0xFE5
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _GetCurrentEventDiodeNum *****************
  7543 ;; Defined at:
  7544 ;;		line 506 in file "main.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      unsigned char 
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7558 ;;      Params:         0       0       0       0       0       0       0
  7559 ;;      Locals:         0       0       0       0       0       0       0
  7560 ;;      Temps:          0       0       0       0       0       0       0
  7561 ;;      Totals:         0       0       0       0       0       0       0
  7562 ;;Total ram usage:        0 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    2
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		_ResetEvent
  7569 ;;		_ProcessDiary
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text34
  7574  000332                     __ptext34:
  7575                           	opt stack 0
  7576  000332                     _GetCurrentEventDiodeNum:
  7577                           	opt stack 27
  7578                           
  7579                           ;incstack = 0
  7580  000332  FFFF               	dw	65535
  7581                           
  7582                           ;main.c: 508: return 60 - _maxDiaryEvents + _currenDiaryEvent.FiredEventNum + 1;
  7583  000334  504D               	movf	__maxDiaryEvents,w,c
  7584  000336  0800               	sublw	0
  7585  000338  243A               	addwf	__currenDiaryEvent+1,w,c
  7586  00033A  0F3D               	addlw	61
  7587  00033C  0012               	return		;funcret
  7588  00033E  FFFF               	dw	65535	; errata NOP
  7589  000340                     __end_of_GetCurrentEventDiodeNum:
  7590                           	opt stack 0
  7591                           tblptru	equ	0xFF8
  7592                           tblptrh	equ	0xFF7
  7593                           tblptrl	equ	0xFF6
  7594                           tablat	equ	0xFF5
  7595                           prodh	equ	0xFF4
  7596                           prodl	equ	0xFF3
  7597                           intcon	equ	0xFF2
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _ModbusPoll *****************
  7611 ;; Defined at:
  7612 ;;		line 469 in file "ModbusRtu.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  discreteInpu    2   53[BANK0 ] unsigned short 
  7615 ;;  coils           2   55[BANK0 ] PTR unsigned short 
  7616 ;;		 -> _MODBUSCoils(2), 
  7617 ;;  inputRegs       2   57[BANK0 ] PTR unsigned short 
  7618 ;;		 -> _MODBUSInputRegs(30), 
  7619 ;;  inputRegsCou    1   59[BANK0 ] const unsigned char 
  7620 ;;  holdingRegs     2   60[BANK0 ] PTR unsigned short 
  7621 ;;		 -> _MODBUSHoldingRegs(30), 
  7622 ;;  holdingRegsC    1   62[BANK0 ] const unsigned char 
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  i8state         1   65[BANK0 ] unsigned char 
  7625 ;;  u8exception     1   64[BANK0 ] unsigned char 
  7626 ;;  u8current       1   63[BANK0 ] unsigned char 
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      char 
  7629 ;; Registers used:
  7630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7636 ;;      Params:         0      10       0       0       0       0       0
  7637 ;;      Locals:         0       3       0       0       0       0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0
  7639 ;;      Totals:         0      13       0       0       0       0       0
  7640 ;;Total ram usage:       13 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    7
  7643 ;; This function calls:
  7644 ;;		_ModbusBuildException
  7645 ;;		_ModbusGetRxBuffer
  7646 ;;		_ModbusGetRxBufferHeader
  7647 ;;		_ModbusProcess_FC1
  7648 ;;		_ModbusProcess_FC100
  7649 ;;		_ModbusProcess_FC101
  7650 ;;		_ModbusProcess_FC102
  7651 ;;		_ModbusProcess_FC15
  7652 ;;		_ModbusProcess_FC16
  7653 ;;		_ModbusProcess_FC17
  7654 ;;		_ModbusProcess_FC20
  7655 ;;		_ModbusProcess_FC21
  7656 ;;		_ModbusProcess_FC3
  7657 ;;		_ModbusProcess_FC43
  7658 ;;		_ModbusProcess_FC5
  7659 ;;		_ModbusProcess_FC6
  7660 ;;		_ModbusProcess_FC7
  7661 ;;		_ModbusSendTxBuffer
  7662 ;;		_ModbusSetExceptionStatusBit
  7663 ;;		_ModbusValidateRequest
  7664 ;;		_PortAvailable
  7665 ;;		_PortClearReadBuffer
  7666 ;;		_millis
  7667 ;; This function is called by:
  7668 ;;		_main
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text35
  7673  001816                     __ptext35:
  7674                           	opt stack 0
  7675  001816                     _ModbusPoll:
  7676                           	opt stack 23
  7677                           
  7678                           ;incstack = 0
  7679  001816  FFFF               	dw	65535
  7680                           
  7681                           ;ModbusRtu.c: 472: _lastFunction = MB_FC_NONE;
  7682  001818  0E00               	movlw	0
  7683  00181A  6E5D               	movwf	__lastFunction,c
  7684                           
  7685                           ;ModbusRtu.c: 476: _inputRegsCount = inputRegsCount;
  7686  00181C  C0BB  F04B         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7687                           
  7688                           ;ModbusRtu.c: 477: _holdingRegsCount = holdingRegsCount;
  7689  001820  C0BE  F04A         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7690                           
  7691                           ;ModbusRtu.c: 482: uint8_t u8current = PortAvailable();
  7692  001824  ECA7  F001         	call	_PortAvailable	;wreg free
  7693  001828  0100               	movlb	0	; () banked
  7694  00182A  6FBF               	movwf	ModbusPoll@u8current& (0+255),b
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;ModbusRtu.c: 484: if (u8current == 0) return 0;
  7698  00182C  0100               	movlb	0	; () banked
  7699  00182E  51BF               	movf	ModbusPoll@u8current& (0+255),w,b
  7700  001830  0100               	movlb	0	; () banked
  7701  001832  B4D8               	btfsc	status,2,c
  7702  001834  D045               	goto	l8451
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;ModbusRtu.c: 487: if (u8current != _u8lastRec)
  7706                           
  7707                           ; BSR set to: 0
  7708                           
  7709                           ; BSR set to: 0
  7710                           
  7711                           ; BSR set to: 0
  7712  001836  0100               	movlb	0	; () banked
  7713  001838  51F2               	movf	__u8lastRec& (0+255),w,b
  7714  00183A  0100               	movlb	0	; () banked
  7715  00183C  19BF               	xorwf	ModbusPoll@u8current& (0+255),w,b
  7716  00183E  B4D8               	btfsc	status,2,c
  7717  001840  D015               	goto	l8427
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;ModbusRtu.c: 488: {
  7721                           ;ModbusRtu.c: 489: _u8lastRec = u8current;
  7722  001842  C0BF  F0F2         	movff	ModbusPoll@u8current,__u8lastRec
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;ModbusRtu.c: 490: _u32time = millis() + 5;
  7726  001846  0E05               	movlw	5
  7727  001848  ECD1  F000         	call	_millis	;wreg free
  7728  00184C  2421               	addwf	?_millis,w,c
  7729  00184E  0101               	movlb	1	; () banked
  7730  001850  6F14               	movwf	__u32time& (0+255),b
  7731  001852  0E00               	movlw	0
  7732  001854  2022               	addwfc	?_millis+1,w,c
  7733  001856  0101               	movlb	1	; () banked
  7734  001858  6F15               	movwf	(__u32time+1)& (0+255),b
  7735  00185A  0E00               	movlw	0
  7736  00185C  2023               	addwfc	?_millis+2,w,c
  7737  00185E  0101               	movlb	1	; () banked
  7738  001860  6F16               	movwf	(__u32time+2)& (0+255),b
  7739  001862  0E00               	movlw	0
  7740  001864  2024               	addwfc	?_millis+3,w,c
  7741  001866  0101               	movlb	1	; () banked
  7742  001868  6F17               	movwf	(__u32time+3)& (0+255),b
  7743  00186A  D02A               	goto	l8451
  7744  00186C                     l8427:
  7745  00186C  FFFF               	dw	65535	; assembler added errata NOP
  7746                           
  7747                           ;ModbusRtu.c: 492: }
  7748                           ;ModbusRtu.c: 493: if (millis() < _u32time)
  7749  00186E  ECD1  F000         	call	_millis	;wreg free
  7750  001872  0101               	movlb	1	; () banked
  7751  001874  5114               	movf	__u32time& (0+255),w,b
  7752  001876  5C21               	subwf	?_millis,w,c
  7753  001878  0101               	movlb	1	; () banked
  7754  00187A  5115               	movf	(__u32time+1)& (0+255),w,b
  7755  00187C  5822               	subwfb	?_millis+1,w,c
  7756  00187E  0101               	movlb	1	; () banked
  7757  001880  5116               	movf	(__u32time+2)& (0+255),w,b
  7758  001882  5823               	subwfb	?_millis+2,w,c
  7759  001884  0101               	movlb	1	; () banked
  7760  001886  5117               	movf	(__u32time+3)& (0+255),w,b
  7761  001888  5824               	subwfb	?_millis+3,w,c
  7762  00188A  A0D8               	btfss	status,0,c
  7763  00188C  D019               	goto	l8451
  7764                           
  7765                           ; BSR set to: 1
  7766                           ;ModbusRtu.c: 496: _u8lastRec = 0;
  7767                           
  7768                           ; BSR set to: 1
  7769                           
  7770                           ; BSR set to: 1
  7771                           
  7772                           ; BSR set to: 1
  7773                           ;ModbusRtu.c: 494: return 0;
  7774  00188E  0E00               	movlw	0
  7775  001890  0100               	movlb	0	; () banked
  7776  001892  6FF2               	movwf	__u8lastRec& (0+255),b
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;ModbusRtu.c: 497: int8_t i8state = ModbusGetRxBufferHeader();
  7780  001894  ECC3  F01E         	call	_ModbusGetRxBufferHeader	;wreg free
  7781  001898  0100               	movlb	0	; () banked
  7782  00189A  6FC1               	movwf	ModbusPoll@i8state& (0+255),b
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;ModbusRtu.c: 498: _u8lastError = i8state;
  7786  00189C  C0C1  F0F1         	movff	ModbusPoll@i8state,__u8lastError
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;ModbusRtu.c: 499: if (i8state < 4)
  7790  0018A0  0E04               	movlw	4
  7791  0018A2  0100               	movlb	0	; () banked
  7792  0018A4  61C1               	cpfslt	ModbusPoll@i8state& (0+255),b
  7793  0018A6  D003               	goto	l8447
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;ModbusRtu.c: 500: {
  7797                           ;ModbusRtu.c: 501: PortClearReadBuffer();
  7798  0018A8  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7799  0018AC  D0F0               	goto	l8553
  7800  0018AE                     l8447:
  7801  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;ModbusRtu.c: 503: }
  7805                           ;ModbusRtu.c: 505: if (_au8Buffer[ ID ] != _u8id)
  7806  0018B0  0100               	movlb	0	; () banked
  7807  0018B2  51F0               	movf	__u8id& (0+255),w,b
  7808  0018B4  0101               	movlb	1	; () banked
  7809  0018B6  192A               	xorwf	__au8Buffer& (0+255),w,b
  7810  0018B8  B4D8               	btfsc	status,2,c
  7811  0018BA  D005               	goto	l8455
  7812                           
  7813                           ; BSR set to: 1
  7814                           ;ModbusRtu.c: 506: {
  7815                           ;ModbusRtu.c: 507: PortClearReadBuffer();
  7816  0018BC  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7817  0018C0                     l8451:
  7818  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  7819                           
  7820                           ;ModbusRtu.c: 508: return 0;
  7821  0018C2  0E00               	movlw	0
  7822  0018C4  D0E7               	goto	l793
  7823  0018C6                     l8455:
  7824  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  7825                           
  7826                           ;ModbusRtu.c: 509: }
  7827                           ;ModbusRtu.c: 510: i8state = ModbusGetRxBuffer();
  7828  0018C8  EC8C  F01D         	call	_ModbusGetRxBuffer	;wreg free
  7829  0018CC  0100               	movlb	0	; () banked
  7830  0018CE  6FC1               	movwf	ModbusPoll@i8state& (0+255),b
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;ModbusRtu.c: 511: PortClearReadBuffer();
  7834  0018D0  ECA0  F001         	call	_PortClearReadBuffer	;wreg free
  7835                           
  7836                           ;ModbusRtu.c: 512: _u8lastError = i8state;
  7837  0018D4  C0C1  F0F1         	movff	ModbusPoll@i8state,__u8lastError
  7838                           
  7839                           ;ModbusRtu.c: 517: uint8_t u8exception = ModbusValidateRequest();
  7840  0018D8  EC2D  F003         	call	_ModbusValidateRequest	;wreg free
  7841  0018DC  0100               	movlb	0	; () banked
  7842  0018DE  6FC0               	movwf	ModbusPoll@u8exception& (0+255),b
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;ModbusRtu.c: 518: if (u8exception > 0)
  7846  0018E0  0100               	movlb	0	; () banked
  7847  0018E2  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7848  0018E4  0100               	movlb	0	; () banked
  7849  0018E6  B4D8               	btfsc	status,2,c
  7850  0018E8  D010               	goto	l8477
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;ModbusRtu.c: 519: {
  7854                           ;ModbusRtu.c: 520: if (u8exception != NO_REPLY)
  7855  0018EA  0100               	movlb	0	; () banked
  7856  0018EC  29C0               	incf	ModbusPoll@u8exception& (0+255),w,b
  7857  0018EE  B4D8               	btfsc	status,2,c
  7858  0018F0  D006               	goto	l8471
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;ModbusRtu.c: 521: {
  7862                           ;ModbusRtu.c: 522: ModbusBuildException(u8exception);
  7863  0018F2  0100               	movlb	0	; () banked
  7864  0018F4  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7865  0018F6  ECF8  F000         	call	_ModbusBuildException
  7866                           
  7867                           ;ModbusRtu.c: 523: ModbusSendTxBuffer();
  7868  0018FA  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
  7869  0018FE                     l8471:
  7870  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  7871                           
  7872                           ;ModbusRtu.c: 524: }
  7873                           ;ModbusRtu.c: 525: _u8lastError = u8exception;
  7874  001900  C0C0  F0F1         	movff	ModbusPoll@u8exception,__u8lastError
  7875                           
  7876                           ;ModbusRtu.c: 526: return u8exception;
  7877  001904  0100               	movlb	0	; () banked
  7878  001906  51C0               	movf	ModbusPoll@u8exception& (0+255),w,b
  7879                           
  7880                           ; BSR set to: 0
  7881  001908  D0C5               	goto	l793
  7882  00190A                     l8477:
  7883  00190A  FFFF               	dw	65535	; assembler added errata NOP
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;ModbusRtu.c: 527: }
  7887                           ;ModbusRtu.c: 529: _u32timeOut = millis() + (long) _u16timeOut;
  7888  00190C  ECD1  F000         	call	_millis	;wreg free
  7889  001910  0100               	movlb	0	; () banked
  7890  001912  51EA               	movf	__u16timeOut& (0+255),w,b
  7891  001914  2421               	addwf	?_millis,w,c
  7892  001916  0101               	movlb	1	; () banked
  7893  001918  6F18               	movwf	__u32timeOut& (0+255),b
  7894  00191A  0100               	movlb	0	; () banked
  7895  00191C  51EB               	movf	(__u16timeOut+1)& (0+255),w,b
  7896  00191E  2022               	addwfc	?_millis+1,w,c
  7897  001920  0101               	movlb	1	; () banked
  7898  001922  6F19               	movwf	(__u32timeOut+1)& (0+255),b
  7899  001924  0E00               	movlw	0
  7900  001926  2023               	addwfc	?_millis+2,w,c
  7901  001928  0101               	movlb	1	; () banked
  7902  00192A  6F1A               	movwf	(__u32timeOut+2)& (0+255),b
  7903  00192C  0E00               	movlw	0
  7904  00192E  2024               	addwfc	?_millis+3,w,c
  7905  001930  0101               	movlb	1	; () banked
  7906  001932  6F1B               	movwf	(__u32timeOut+3)& (0+255),b
  7907                           
  7908                           ; BSR set to: 1
  7909                           ;ModbusRtu.c: 530: _u8lastError = 0;
  7910  001934  0E00               	movlw	0
  7911  001936  0100               	movlb	0	; () banked
  7912  001938  6FF1               	movwf	__u8lastError& (0+255),b
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;ModbusRtu.c: 533: if(_au8Buffer[ FUNC ] != MB_FC_READ_EXCEPTION_STATUS)
  7916  00193A  0E07               	movlw	7
  7917  00193C  0101               	movlb	1	; () banked
  7918  00193E  192B               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7919  001940  B4D8               	btfsc	status,2,c
  7920  001942  D072               	goto	l8551
  7921                           
  7922                           ; BSR set to: 1
  7923                           ;ModbusRtu.c: 534: ModbusSetExceptionStatusBit(0, 0);
  7924  001944  0E00               	movlw	0
  7925  001946  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
  7926  001948  0E00               	movlw	0
  7927  00194A  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
  7928                           
  7929                           ;ModbusRtu.c: 538: switch (_au8Buffer[ FUNC ])
  7930  00194E  D06C               	goto	l8551
  7931  001950                     l8485:
  7932  001950  FFFF               	dw	65535	; assembler added errata NOP
  7933                           
  7934                           ;ModbusRtu.c: 541: return ModbusProcess_FC1(*coils);
  7935  001952  C0B7  FFD9         	movff	ModbusPoll@coils,fsr2l
  7936  001956  C0B8  FFDA         	movff	ModbusPoll@coils+1,fsr2h
  7937  00195A  CFDE F030          	movff	postinc2,ModbusProcess_FC1@regs
  7938  00195E  CFDD F031          	movff	postdec2,ModbusProcess_FC1@regs+1
  7939  001962  EC35  F011         	call	_ModbusProcess_FC1	;wreg free
  7940  001966  D096               	goto	l793
  7941  001968                     l8489:
  7942  001968  FFFF               	dw	65535	; assembler added errata NOP
  7943                           
  7944                           ;ModbusRtu.c: 543: return ModbusProcess_FC1(discreteInputs);
  7945  00196A  C0B5  F030         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7946  00196E  C0B6  F031         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7947  001972  EC35  F011         	call	_ModbusProcess_FC1	;wreg free
  7948  001976  D08E               	goto	l793
  7949  001978                     l8493:
  7950  001978  FFFF               	dw	65535	; assembler added errata NOP
  7951                           
  7952                           ;ModbusRtu.c: 545: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7953  00197A  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7954  00197E  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7955  001982  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7956  001986  EC87  F016         	call	_ModbusProcess_FC3	;wreg free
  7957  00198A  D084               	goto	l793
  7958  00198C                     l8497:
  7959  00198C  FFFF               	dw	65535	; assembler added errata NOP
  7960                           
  7961                           ;ModbusRtu.c: 547: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7962  00198E  C0B9  F030         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7963  001992  C0BA  F031         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7964  001996  C0BB  F032         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7965  00199A  EC87  F016         	call	_ModbusProcess_FC3	;wreg free
  7966  00199E  D07A               	goto	l793
  7967  0019A0                     l8501:
  7968  0019A0  FFFF               	dw	65535	; assembler added errata NOP
  7969                           
  7970                           ;ModbusRtu.c: 549: return ModbusProcess_FC5(coils);
  7971  0019A2  C0B7  F030         	movff	ModbusPoll@coils,ModbusProcess_FC5@regs
  7972  0019A6  C0B8  F031         	movff	ModbusPoll@coils+1,ModbusProcess_FC5@regs+1
  7973  0019AA  ECC5  F019         	call	_ModbusProcess_FC5	;wreg free
  7974  0019AE  D072               	goto	l793
  7975  0019B0                     l8505:
  7976  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  7977                           
  7978                           ;ModbusRtu.c: 551: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7979  0019B2  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7980  0019B6  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7981  0019BA  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7982  0019BE  ECC2  F01C         	call	_ModbusProcess_FC6	;wreg free
  7983  0019C2  D068               	goto	l793
  7984  0019C4                     l8509:
  7985  0019C4  FFFF               	dw	65535	; assembler added errata NOP
  7986                           
  7987                           ;ModbusRtu.c: 553: return ModbusProcess_FC7();
  7988  0019C6  EC33  F001         	call	_ModbusProcess_FC7	;wreg free
  7989  0019CA  D064               	goto	l793
  7990  0019CC                     l8513:
  7991  0019CC  FFFF               	dw	65535	; assembler added errata NOP
  7992                           
  7993                           ;ModbusRtu.c: 555: return ModbusProcess_FC15(coils);
  7994  0019CE  C0B7  F030         	movff	ModbusPoll@coils,ModbusProcess_FC15@regs
  7995  0019D2  C0B8  F031         	movff	ModbusPoll@coils+1,ModbusProcess_FC15@regs+1
  7996  0019D6  ECBE  F012         	call	_ModbusProcess_FC15	;wreg free
  7997  0019DA  D05C               	goto	l793
  7998  0019DC                     l8517:
  7999  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  8000                           
  8001                           ;ModbusRtu.c: 557: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  8002  0019DE  C0BC  F030         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  8003  0019E2  C0BD  F031         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  8004  0019E6  C0BE  F032         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  8005  0019EA  EC6D  F013         	call	_ModbusProcess_FC16	;wreg free
  8006  0019EE  D052               	goto	l793
  8007  0019F0                     l8521:
  8008  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  8009                           
  8010                           ;ModbusRtu.c: 559: return ModbusProcess_FC17();
  8011  0019F2  ECBA  F01B         	call	_ModbusProcess_FC17	;wreg free
  8012  0019F6  D04E               	goto	l793
  8013  0019F8                     l8525:
  8014  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  8015                           
  8016                           ;ModbusRtu.c: 561: return ModbusProcess_FC20();
  8017  0019FA  EC4D  F00D         	call	_ModbusProcess_FC20	;wreg free
  8018  0019FE  D04A               	goto	l793
  8019  001A00                     l8529:
  8020  001A00  FFFF               	dw	65535	; assembler added errata NOP
  8021                           
  8022                           ;ModbusRtu.c: 563: return ModbusProcess_FC21();
  8023  001A02  EC39  F018         	call	_ModbusProcess_FC21	;wreg free
  8024  001A06  D046               	goto	l793
  8025  001A08                     l8533:
  8026  001A08  FFFF               	dw	65535	; assembler added errata NOP
  8027                           
  8028                           ;ModbusRtu.c: 565: return ModbusProcess_FC43();
  8029  001A0A  EC74  F00F         	call	_ModbusProcess_FC43	;wreg free
  8030  001A0E  D042               	goto	l793
  8031  001A10                     l8537:
  8032  001A10  FFFF               	dw	65535	; assembler added errata NOP
  8033                           
  8034                           ;ModbusRtu.c: 567: return ModbusProcess_FC100();
  8035  001A12  EC16  F014         	call	_ModbusProcess_FC100	;wreg free
  8036  001A16  D03E               	goto	l793
  8037  001A18                     l8541:
  8038  001A18  FFFF               	dw	65535	; assembler added errata NOP
  8039                           
  8040                           ;ModbusRtu.c: 569: return ModbusProcess_FC101();
  8041  001A1A  ECB5  F01F         	call	_ModbusProcess_FC101	;wreg free
  8042  001A1E  D03A               	goto	l793
  8043  001A20                     l8545:
  8044  001A20  FFFF               	dw	65535	; assembler added errata NOP
  8045                           
  8046                           ;ModbusRtu.c: 571: return ModbusProcess_FC102();
  8047  001A22  EC26  F001         	call	_ModbusProcess_FC102	;wreg free
  8048  001A26  D036               	goto	l793
  8049  001A28                     l8551:
  8050  001A28  FFFF               	dw	65535	; assembler added errata NOP
  8051  001A2A  0101               	movlb	1	; () banked
  8052  001A2C  512B               	movf	(__au8Buffer+1)& (0+255),w,b
  8053                           
  8054                           ; Switch size 1, requested type "space"
  8055                           ; Number of cases is 16, Range of values is 1 to 102
  8056                           ; switch strategies available:
  8057                           ; Name         Instructions Cycles
  8058                           ; simple_byte           49    25 (average)
  8059                           ;	Chosen strategy is simple_byte
  8060  001A2E  0A01               	xorlw	1	; case 1
  8061  001A30  B4D8               	btfsc	status,2,c
  8062  001A32  D78E               	goto	l8485
  8063  001A34  0A03               	xorlw	3	; case 2
  8064  001A36  B4D8               	btfsc	status,2,c
  8065  001A38  D797               	goto	l8489
  8066  001A3A  0A01               	xorlw	1	; case 3
  8067  001A3C  B4D8               	btfsc	status,2,c
  8068  001A3E  D79C               	goto	l8493
  8069  001A40  0A07               	xorlw	7	; case 4
  8070  001A42  B4D8               	btfsc	status,2,c
  8071  001A44  D7A3               	goto	l8497
  8072  001A46  0A01               	xorlw	1	; case 5
  8073  001A48  B4D8               	btfsc	status,2,c
  8074  001A4A  D7AA               	goto	l8501
  8075  001A4C  0A03               	xorlw	3	; case 6
  8076  001A4E  B4D8               	btfsc	status,2,c
  8077  001A50  D7AF               	goto	l8505
  8078  001A52  0A01               	xorlw	1	; case 7
  8079  001A54  B4D8               	btfsc	status,2,c
  8080  001A56  D7B6               	goto	l8509
  8081  001A58  0A08               	xorlw	8	; case 15
  8082  001A5A  B4D8               	btfsc	status,2,c
  8083  001A5C  D7B7               	goto	l8513
  8084  001A5E  0A1F               	xorlw	31	; case 16
  8085  001A60  B4D8               	btfsc	status,2,c
  8086  001A62  D7BC               	goto	l8517
  8087  001A64  0A01               	xorlw	1	; case 17
  8088  001A66  B4D8               	btfsc	status,2,c
  8089  001A68  D7C3               	goto	l8521
  8090  001A6A  0A05               	xorlw	5	; case 20
  8091  001A6C  B4D8               	btfsc	status,2,c
  8092  001A6E  D7C4               	goto	l8525
  8093  001A70  0A01               	xorlw	1	; case 21
  8094  001A72  B4D8               	btfsc	status,2,c
  8095  001A74  D7C5               	goto	l8529
  8096  001A76  0A3E               	xorlw	62	; case 43
  8097  001A78  B4D8               	btfsc	status,2,c
  8098  001A7A  D7C6               	goto	l8533
  8099  001A7C  0A4F               	xorlw	79	; case 100
  8100  001A7E  B4D8               	btfsc	status,2,c
  8101  001A80  D7C7               	goto	l8537
  8102  001A82  0A01               	xorlw	1	; case 101
  8103  001A84  B4D8               	btfsc	status,2,c
  8104  001A86  D7C8               	goto	l8541
  8105  001A88  0A03               	xorlw	3	; case 102
  8106  001A8A  B4D8               	btfsc	status,2,c
  8107  001A8C  D7C9               	goto	l8545
  8108  001A8E                     l8553:
  8109  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  8110                           
  8111                           ;ModbusRtu.c: 576: return i8state;
  8112  001A90  0100               	movlb	0	; () banked
  8113  001A92  51C1               	movf	ModbusPoll@i8state& (0+255),w,b
  8114  001A94                     l793:
  8115  001A94  FFFF               	dw	65535	; assembler added errata NOP
  8116  001A96  0012               	return		;funcret
  8117  001A98  FFFF               	dw	65535	; errata NOP
  8118  001A9A                     __end_of_ModbusPoll:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           intcon	equ	0xFF2
  8127                           postinc0	equ	0xFEE
  8128                           wreg	equ	0xFE8
  8129                           postdec1	equ	0xFE5
  8130                           fsr1h	equ	0xFE2
  8131                           fsr1l	equ	0xFE1
  8132                           indf2	equ	0xFDF
  8133                           postinc2	equ	0xFDE
  8134                           postdec2	equ	0xFDD
  8135                           fsr2h	equ	0xFDA
  8136                           fsr2l	equ	0xFD9
  8137                           status	equ	0xFD8
  8138                           
  8139 ;; *************** function _PortClearReadBuffer *****************
  8140 ;; Defined at:
  8141 ;;		line 77 in file "interrupts.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;		None
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  1    wreg      void 
  8148 ;; Registers used:
  8149 ;;		wreg, status,2, cstack
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8155 ;;      Params:         0       0       0       0       0       0       0
  8156 ;;      Locals:         0       0       0       0       0       0       0
  8157 ;;      Temps:          0       0       0       0       0       0       0
  8158 ;;      Totals:         0       0       0       0       0       0       0
  8159 ;;Total ram usage:        0 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    3
  8162 ;; This function calls:
  8163 ;;		_InitUartBuffer
  8164 ;; This function is called by:
  8165 ;;		_ModbusPoll
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	text36
  8170  000340                     __ptext36:
  8171                           	opt stack 0
  8172  000340                     _PortClearReadBuffer:
  8173                           	opt stack 26
  8174                           
  8175                           ;incstack = 0
  8176  000340  FFFF               	dw	65535
  8177                           
  8178                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  8179  000342  9EF2               	bcf	intcon,7,c	;volatile
  8180                           
  8181                           ;interrupts.c: 80: InitUartBuffer();
  8182  000344  EC5F  F001         	call	_InitUartBuffer	;wreg free
  8183                           
  8184                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  8185  000348  8EF2               	bsf	intcon,7,c	;volatile
  8186  00034A  0012               	return		;funcret
  8187  00034C  FFFF               	dw	65535	; errata NOP
  8188  00034E                     __end_of_PortClearReadBuffer:
  8189                           	opt stack 0
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon	equ	0xFF2
  8197                           postinc0	equ	0xFEE
  8198                           wreg	equ	0xFE8
  8199                           postdec1	equ	0xFE5
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _ModbusValidateRequest *****************
  8210 ;; Defined at:
  8211 ;;		line 826 in file "ModbusRtu.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  res             1   23[BANK0 ] unsigned char 
  8216 ;;  recLenBytes     4   16[BANK0 ] unsigned long 
  8217 ;;  startAddrByt    4   12[BANK0 ] unsigned long 
  8218 ;;  readDevId       1   27[BANK0 ] unsigned char 
  8219 ;;  i               1   26[BANK0 ] unsigned char 
  8220 ;;  u16regs         2   29[BANK0 ] unsigned short 
  8221 ;;  u16count        2   24[BANK0 ] unsigned short 
  8222 ;;  u16MsgCRC       2   20[BANK0 ] unsigned short 
  8223 ;;  u8regs          1   28[BANK0 ] unsigned char 
  8224 ;;  isSupported     1   22[BANK0 ] unsigned char 
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      unsigned char 
  8227 ;; Registers used:
  8228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8234 ;;      Params:         0       0       0       0       0       0       0
  8235 ;;      Locals:         0      19       0       0       0       0       0
  8236 ;;      Temps:          0      12       0       0       0       0       0
  8237 ;;      Totals:         0      31       0       0       0       0       0
  8238 ;;Total ram usage:       31 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    3
  8241 ;; This function calls:
  8242 ;;		_CheckFunc20
  8243 ;;		_ModbusCalcCRC
  8244 ;; This function is called by:
  8245 ;;		_ModbusPoll
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text37
  8250  00065A                     __ptext37:
  8251                           	opt stack 0
  8252  00065A                     _ModbusValidateRequest:
  8253                           	opt stack 26
  8254                           
  8255                           ;incstack = 0
  8256  00065A  FFFF               	dw	65535
  8257                           
  8258                           ;ModbusRtu.c: 829: uint16_t u16MsgCRC =
  8259                           ;ModbusRtu.c: 830: ((_au8Buffer[_u8BufferSize - 2] << 8)
  8260                           ;ModbusRtu.c: 831: | _au8Buffer[_u8BufferSize - 1]);
  8261  00065C  0EFE               	movlw	254
  8262  00065E  0100               	movlb	0	; () banked
  8263  000660  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8264  000662  0EFF               	movlw	255
  8265  000664  0100               	movlb	0	; () banked
  8266  000666  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8267  000668  5053               	movf	__u8BufferSize,w,c
  8268  00066A  0100               	movlb	0	; () banked
  8269  00066C  6F82               	movwf	(??_ModbusValidateRequest+2)& (0+255),b
  8270  00066E  6B83               	clrf	(??_ModbusValidateRequest+3)& (0+255),b
  8271  000670  0100               	movlb	0	; () banked
  8272  000672  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8273  000674  0100               	movlb	0	; () banked
  8274  000676  2782               	addwf	(??_ModbusValidateRequest+2)& (0+255),f,b
  8275  000678  0100               	movlb	0	; () banked
  8276  00067A  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8277  00067C  0100               	movlb	0	; () banked
  8278  00067E  2383               	addwfc	(??_ModbusValidateRequest+3)& (0+255),f,b
  8279  000680  0E2A               	movlw	low __au8Buffer
  8280  000682  0100               	movlb	0	; () banked
  8281  000684  2582               	addwf	(??_ModbusValidateRequest+2)& (0+255),w,b
  8282  000686  6ED9               	movwf	fsr2l,c
  8283  000688  0E01               	movlw	high __au8Buffer
  8284  00068A  0100               	movlb	0	; () banked
  8285  00068C  2183               	addwfc	(??_ModbusValidateRequest+3)& (0+255),w,b
  8286  00068E  6EDA               	movwf	fsr2h,c
  8287  000690  50DF               	movf	indf2,w,c
  8288  000692  0100               	movlb	0	; () banked
  8289  000694  6F84               	movwf	(??_ModbusValidateRequest+4)& (0+255),b
  8290  000696  0100               	movlb	0	; () banked
  8291  000698  5184               	movf	(??_ModbusValidateRequest+4)& (0+255),w,b
  8292  00069A  0100               	movlb	0	; () banked
  8293  00069C  6F86               	movwf	(??_ModbusValidateRequest+6)& (0+255),b
  8294  00069E  6B85               	clrf	(??_ModbusValidateRequest+5)& (0+255),b
  8295  0006A0  0EFF               	movlw	255
  8296  0006A2  0100               	movlb	0	; () banked
  8297  0006A4  6F87               	movwf	(??_ModbusValidateRequest+7)& (0+255),b
  8298  0006A6  0EFF               	movlw	255
  8299  0006A8  0100               	movlb	0	; () banked
  8300  0006AA  6F88               	movwf	(??_ModbusValidateRequest+8)& (0+255),b
  8301  0006AC  5053               	movf	__u8BufferSize,w,c
  8302  0006AE  0100               	movlb	0	; () banked
  8303  0006B0  6F89               	movwf	(??_ModbusValidateRequest+9)& (0+255),b
  8304  0006B2  6B8A               	clrf	(??_ModbusValidateRequest+10)& (0+255),b
  8305  0006B4  0100               	movlb	0	; () banked
  8306  0006B6  5187               	movf	(??_ModbusValidateRequest+7)& (0+255),w,b
  8307  0006B8  0100               	movlb	0	; () banked
  8308  0006BA  2789               	addwf	(??_ModbusValidateRequest+9)& (0+255),f,b
  8309  0006BC  0100               	movlb	0	; () banked
  8310  0006BE  5188               	movf	(??_ModbusValidateRequest+8)& (0+255),w,b
  8311  0006C0  0100               	movlb	0	; () banked
  8312  0006C2  238A               	addwfc	(??_ModbusValidateRequest+10)& (0+255),f,b
  8313  0006C4  0E2A               	movlw	low __au8Buffer
  8314  0006C6  0100               	movlb	0	; () banked
  8315  0006C8  2589               	addwf	(??_ModbusValidateRequest+9)& (0+255),w,b
  8316  0006CA  6ED9               	movwf	fsr2l,c
  8317  0006CC  0E01               	movlw	high __au8Buffer
  8318  0006CE  0100               	movlb	0	; () banked
  8319  0006D0  218A               	addwfc	(??_ModbusValidateRequest+10)& (0+255),w,b
  8320  0006D2  6EDA               	movwf	fsr2h,c
  8321  0006D4  50DF               	movf	indf2,w,c
  8322  0006D6  0100               	movlb	0	; () banked
  8323  0006D8  6F8B               	movwf	(??_ModbusValidateRequest+11)& (0+255),b
  8324  0006DA  0100               	movlb	0	; () banked
  8325  0006DC  518B               	movf	(??_ModbusValidateRequest+11)& (0+255),w,b
  8326  0006DE  0100               	movlb	0	; () banked
  8327  0006E0  1185               	iorwf	(??_ModbusValidateRequest+5)& (0+255),w,b
  8328  0006E2  0100               	movlb	0	; () banked
  8329  0006E4  6F94               	movwf	ModbusValidateRequest@u16MsgCRC& (0+255),b
  8330  0006E6  0100               	movlb	0	; () banked
  8331  0006E8  5186               	movf	(??_ModbusValidateRequest+6)& (0+255),w,b
  8332  0006EA  0100               	movlb	0	; () banked
  8333  0006EC  6F95               	movwf	(ModbusValidateRequest@u16MsgCRC+1)& (0+255),b
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;ModbusRtu.c: 832: if (ModbusCalcCRC(_u8BufferSize - 2) != u16MsgCRC)
  8337  0006EE  5053               	movf	__u8BufferSize,w,c
  8338  0006F0  0FFE               	addlw	254
  8339  0006F2  EC70  F01B         	call	_ModbusCalcCRC
  8340  0006F6  0100               	movlb	0	; () banked
  8341  0006F8  5194               	movf	ModbusValidateRequest@u16MsgCRC& (0+255),w,b
  8342  0006FA  1821               	xorwf	?_ModbusCalcCRC,w,c
  8343  0006FC  E105               	bnz	u6760
  8344  0006FE  0100               	movlb	0	; () banked
  8345  000700  5195               	movf	(ModbusValidateRequest@u16MsgCRC+1)& (0+255),w,b
  8346  000702  1822               	xorwf	?_ModbusCalcCRC+1,w,c
  8347  000704  B4D8               	btfsc	status,2,c
  8348  000706  D005               	goto	l7409
  8349  000708                     u6760:
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;ModbusRtu.c: 833: {
  8353                           ;ModbusRtu.c: 834: _u16errCnt++;
  8354  000708  0101               	movlb	1	; () banked
  8355  00070A  4B28               	infsnz	__u16errCnt& (0+255),f,b
  8356  00070C  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
  8357                           
  8358                           ; BSR set to: 1
  8359                           ;ModbusRtu.c: 835: return NO_REPLY;
  8360  00070E  0EFF               	movlw	255
  8361                           
  8362                           ; BSR set to: 1
  8363  000710  D1D0               	goto	l873
  8364  000712                     l7409:
  8365  000712  FFFF               	dw	65535	; assembler added errata NOP
  8366                           
  8367                           ;ModbusRtu.c: 836: }
  8368                           ;ModbusRtu.c: 839: bool isSupported = 0;
  8369  000714  0E00               	movlw	0
  8370  000716  0100               	movlb	0	; () banked
  8371  000718  6F96               	movwf	ModbusValidateRequest@isSupported& (0+255),b
  8372                           
  8373                           ;ModbusRtu.c: 840: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  8374  00071A  0E00               	movlw	0
  8375  00071C  0100               	movlb	0	; () banked
  8376  00071E  6F9A               	movwf	ModbusValidateRequest@i& (0+255),b
  8377  000720                     l7411:
  8378  000720  FFFF               	dw	65535	; assembler added errata NOP
  8379                           
  8380                           ; BSR set to: 0
  8381  000722  0E0F               	movlw	15
  8382  000724  0100               	movlb	0	; () banked
  8383  000726  659A               	cpfsgt	ModbusValidateRequest@i& (0+255),b
  8384  000728  D001               	goto	l7415
  8385  00072A  D019               	goto	l7423
  8386  00072C                     l7415:
  8387  00072C  FFFF               	dw	65535	; assembler added errata NOP
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;ModbusRtu.c: 841: {
  8391                           ;ModbusRtu.c: 842: if (fctsupported[i] == _au8Buffer[FUNC])
  8392  00072E  0100               	movlb	0	; () banked
  8393  000730  519A               	movf	ModbusValidateRequest@i& (0+255),w,b
  8394  000732  0D01               	mullw	1
  8395  000734  0E01               	movlw	low _fctsupported
  8396  000736  24F3               	addwf	prodl,w,c
  8397  000738  6EF6               	movwf	tblptrl,c
  8398  00073A  0E06               	movlw	high _fctsupported
  8399  00073C  20F4               	addwfc	prodh,w,c
  8400  00073E  6EF7               	movwf	tblptrh,c
  8401  000740                     	if	0	;There are less than 3 active tblptr bytes
  8402  000740                     	endif
  8403  000740  0008               	tblrd		*
  8404  000742  FFFF               	dw	65535	; errata NOP
  8405  000744  50F5               	movf	tablat,w,c
  8406  000746  0101               	movlb	1	; () banked
  8407  000748  192B               	xorwf	(__au8Buffer+1)& (0+255),w,b
  8408  00074A  A4D8               	btfss	status,2,c
  8409  00074C  D004               	goto	l7419
  8410                           
  8411                           ; BSR set to: 1
  8412                           ;ModbusRtu.c: 843: {
  8413                           ;ModbusRtu.c: 844: isSupported = 1;
  8414  00074E  0E01               	movlw	1
  8415  000750  0100               	movlb	0	; () banked
  8416  000752  6F96               	movwf	ModbusValidateRequest@isSupported& (0+255),b
  8417                           
  8418                           ;ModbusRtu.c: 845: break;
  8419  000754  D004               	goto	l7423
  8420  000756                     l7419:
  8421  000756  FFFF               	dw	65535	; assembler added errata NOP
  8422  000758  0100               	movlb	0	; () banked
  8423  00075A  2B9A               	incf	ModbusValidateRequest@i& (0+255),f,b
  8424  00075C  D7E1               	goto	l7411
  8425  00075E                     l7423:
  8426  00075E  FFFF               	dw	65535	; assembler added errata NOP
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;ModbusRtu.c: 846: }
  8430                           ;ModbusRtu.c: 847: }
  8431                           ;ModbusRtu.c: 848: if (!isSupported)
  8432  000760  0100               	movlb	0	; () banked
  8433  000762  5196               	movf	ModbusValidateRequest@isSupported& (0+255),w,b
  8434  000764  0100               	movlb	0	; () banked
  8435  000766  A4D8               	btfss	status,2,c
  8436  000768  D004               	goto	l7431
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;ModbusRtu.c: 849: {
  8440                           ;ModbusRtu.c: 850: _u16errCnt++;
  8441  00076A  0101               	movlb	1	; () banked
  8442  00076C  4B28               	infsnz	__u16errCnt& (0+255),f,b
  8443  00076E  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
  8444  000770  D13C               	goto	l7529
  8445  000772                     l7431:
  8446  000772  FFFF               	dw	65535	; assembler added errata NOP
  8447                           
  8448                           ;ModbusRtu.c: 852: }
  8449                           ;ModbusRtu.c: 855: uint16_t u16regs = 0;
  8450  000774  0E00               	movlw	0
  8451  000776  0100               	movlb	0	; () banked
  8452  000778  6F9E               	movwf	(ModbusValidateRequest@u16regs+1)& (0+255),b
  8453  00077A  0E00               	movlw	0
  8454  00077C  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8455                           
  8456                           ;ModbusRtu.c: 856: uint16_t u16count = 0;
  8457  00077E  0E00               	movlw	0
  8458  000780  0100               	movlb	0	; () banked
  8459  000782  6F99               	movwf	(ModbusValidateRequest@u16count+1)& (0+255),b
  8460  000784  0E00               	movlw	0
  8461  000786  6F98               	movwf	ModbusValidateRequest@u16count& (0+255),b
  8462                           
  8463                           ;ModbusRtu.c: 857: uint8_t u8regs;
  8464                           ;ModbusRtu.c: 858: switch (_au8Buffer[ FUNC ])
  8465  000788  D163               	goto	l7563
  8466  00078A                     l7433:
  8467  00078A  FFFF               	dw	65535	; assembler added errata NOP
  8468                           
  8469                           ;ModbusRtu.c: 861: case MB_FC_READ_DISCRETE_INPUT:
  8470                           ;ModbusRtu.c: 862: case MB_FC_WRITE_MULTIPLE_COILS:
  8471                           ;ModbusRtu.c: 864: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8472  00078C  0101               	movlb	1	; () banked
  8473  00078E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8474  000790  0100               	movlb	0	; () banked
  8475  000792  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8476  000794  0101               	movlb	1	; () banked
  8477  000796  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8478  000798  0100               	movlb	0	; () banked
  8479  00079A  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8480  00079C  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8481                           
  8482                           ;ModbusRtu.c: 865: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8483  0007A0  0101               	movlb	1	; () banked
  8484  0007A2  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  8485  0007A4  0100               	movlb	0	; () banked
  8486  0007A6  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8487  0007A8  0101               	movlb	1	; () banked
  8488  0007AA  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8489  0007AC  0100               	movlb	0	; () banked
  8490  0007AE  6F98               	movwf	ModbusValidateRequest@u16count& (0+255),b
  8491  0007B0  C080  F099         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;ModbusRtu.c: 866: if (u16count > 16)
  8495  0007B4  0100               	movlb	0	; () banked
  8496  0007B6  5199               	movf	(ModbusValidateRequest@u16count+1)& (0+255),w,b
  8497  0007B8  E135               	bnz	l7455
  8498  0007BA  0E11               	movlw	17
  8499  0007BC  0100               	movlb	0	; () banked
  8500  0007BE  5D98               	subwf	ModbusValidateRequest@u16count& (0+255),w,b
  8501  0007C0  B0D8               	btfsc	status,0,c
  8502  0007C2  D143               	goto	l7557
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;ModbusRtu.c: 868: if (u16regs > 15 || u16regs + u16count > 16)
  8506                           
  8507                           ; BSR set to: 0
  8508                           
  8509                           ; BSR set to: 0
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;ModbusRtu.c: 867: return EXC_REGS_QUANT;
  8513  0007C4  0100               	movlb	0	; () banked
  8514  0007C6  519E               	movf	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8515  0007C8  E138               	bnz	l7461
  8516  0007CA  0E10               	movlw	16
  8517  0007CC  0100               	movlb	0	; () banked
  8518  0007CE  5D9D               	subwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8519  0007D0  B0D8               	btfsc	status,0,c
  8520  0007D2  D129               	goto	l7547
  8521                           
  8522                           ; BSR set to: 0
  8523  0007D4  0100               	movlb	0	; () banked
  8524  0007D6  5198               	movf	ModbusValidateRequest@u16count& (0+255),w,b
  8525  0007D8  0100               	movlb	0	; () banked
  8526  0007DA  259D               	addwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8527  0007DC  0100               	movlb	0	; () banked
  8528  0007DE  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8529  0007E0  0100               	movlb	0	; () banked
  8530  0007E2  5199               	movf	(ModbusValidateRequest@u16count+1)& (0+255),w,b
  8531  0007E4  0100               	movlb	0	; () banked
  8532  0007E6  219E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8533  0007E8  0100               	movlb	0	; () banked
  8534  0007EA  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8535  0007EC  0100               	movlb	0	; () banked
  8536  0007EE  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8537  0007F0  E124               	bnz	l7461
  8538  0007F2  0E11               	movlw	17
  8539  0007F4  0100               	movlb	0	; () banked
  8540  0007F6  5D80               	subwf	??_ModbusValidateRequest& (0+255),w,b
  8541  0007F8  D01D               	goto	L14
  8542  0007FA                     l7449:
  8543  0007FA  FFFF               	dw	65535	; assembler added errata NOP
  8544                           
  8545                           ;ModbusRtu.c: 872: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8546  0007FC  0101               	movlb	1	; () banked
  8547  0007FE  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8548  000800  0100               	movlb	0	; () banked
  8549  000802  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8550  000804  0101               	movlb	1	; () banked
  8551  000806  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8552  000808  0100               	movlb	0	; () banked
  8553  00080A  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8554  00080C  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;ModbusRtu.c: 873: u8regs = _au8Buffer[ NB_HI ];
  8558  000810  C12E  F09C         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  8559                           
  8560                           ;ModbusRtu.c: 874: if (u8regs != 0x00 && u8regs != 0xFF)
  8561  000814  0100               	movlb	0	; () banked
  8562  000816  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8563  000818  0100               	movlb	0	; () banked
  8564  00081A  B4D8               	btfsc	status,2,c
  8565  00081C  D004               	goto	l7459
  8566                           
  8567                           ; BSR set to: 0
  8568  00081E  0100               	movlb	0	; () banked
  8569  000820  299C               	incf	ModbusValidateRequest@u8regs& (0+255),w,b
  8570  000822  A4D8               	btfss	status,2,c
  8571  000824                     l7455:
  8572  000824  D112               	goto	l7557
  8573  000826                     l7459:
  8574  000826  FFFF               	dw	65535	; assembler added errata NOP
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ModbusRtu.c: 876: if (u16regs > 15)
  8578  000828  0100               	movlb	0	; () banked
  8579  00082A  519E               	movf	(ModbusValidateRequest@u16regs+1)& (0+255),w,b
  8580  00082C  E106               	bnz	u6860
  8581  00082E  0E10               	movlw	16
  8582  000830  0100               	movlb	0	; () banked
  8583  000832  5D9D               	subwf	ModbusValidateRequest@u16regs& (0+255),w,b
  8584  000834                     L14:
  8585  000834  FFFF               	dw	65535	; assembler added errata NOP
  8586  000836  A0D8               	btfss	status,0,c
  8587  000838  D138               	goto	l886
  8588  00083A                     u6860:
  8589  00083A                     l7461:
  8590  00083A  D0F5               	goto	l7547
  8591  00083C                     l7465:
  8592  00083C  FFFF               	dw	65535	; assembler added errata NOP
  8593                           
  8594                           ;ModbusRtu.c: 880: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8595  00083E  0101               	movlb	1	; () banked
  8596  000840  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8597  000842  0100               	movlb	0	; () banked
  8598  000844  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8599  000846  0101               	movlb	1	; () banked
  8600  000848  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8601  00084A  0100               	movlb	0	; () banked
  8602  00084C  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8603  00084E  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8604  000852                     l7467:
  8605  000852  FFFF               	dw	65535	; assembler added errata NOP
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;ModbusRtu.c: 881: u8regs = (uint8_t) u16regs;
  8609  000854  C09D  F09C         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;ModbusRtu.c: 882: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  8613  000858  0100               	movlb	0	; () banked
  8614  00085A  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8615  00085C  5C4A               	subwf	__holdingRegsCount,w,c
  8616  00085E  FFFF               	dw	65535	; assembler added errata NOP
  8617  000860  B0D8               	btfsc	status,0,c
  8618  000862  D123               	goto	l886
  8619  000864  D0E0               	goto	l7547
  8620  000866                     l7475:
  8621  000866  FFFF               	dw	65535	; assembler added errata NOP
  8622                           
  8623                           ;ModbusRtu.c: 885: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8624  000868  0101               	movlb	1	; () banked
  8625  00086A  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8626  00086C  0100               	movlb	0	; () banked
  8627  00086E  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8628  000870  0101               	movlb	1	; () banked
  8629  000872  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8630  000874  0100               	movlb	0	; () banked
  8631  000876  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8632  000878  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;ModbusRtu.c: 886: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8636  00087C  0101               	movlb	1	; () banked
  8637  00087E  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8638  000880  C12E  F080         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8639  000884  0100               	movlb	0	; () banked
  8640  000886  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8641  000888  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8642  00088C  0100               	movlb	0	; () banked
  8643  00088E  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8644  000890  0100               	movlb	0	; () banked
  8645  000892  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8646  000894  0E00               	movlw	0
  8647  000896  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8648  000898  0100               	movlb	0	; () banked
  8649  00089A  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8650  00089C  0100               	movlb	0	; () banked
  8651  00089E  279D               	addwf	ModbusValidateRequest@u16regs& (0+255),f,b
  8652  0008A0  0100               	movlb	0	; () banked
  8653  0008A2  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8654  0008A4  0100               	movlb	0	; () banked
  8655  0008A6  239E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),f,b
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;ModbusRtu.c: 887: u8regs = (uint8_t) u16regs;
  8659  0008A8  C09D  F09C         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;ModbusRtu.c: 888: if (u8regs > _inputRegsCount)
  8663  0008AC  0100               	movlb	0	; () banked
  8664  0008AE  519C               	movf	ModbusValidateRequest@u8regs& (0+255),w,b
  8665  0008B0  5C4B               	subwf	__inputRegsCount,w,c
  8666  0008B2  D7D5               	goto	L15
  8667  0008B4                     l7487:
  8668  0008B4  FFFF               	dw	65535	; assembler added errata NOP
  8669                           
  8670                           ;ModbusRtu.c: 892: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  8671                           ;ModbusRtu.c: 893: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8672  0008B6  0101               	movlb	1	; () banked
  8673  0008B8  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  8674  0008BA  0100               	movlb	0	; () banked
  8675  0008BC  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8676  0008BE  0101               	movlb	1	; () banked
  8677  0008C0  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  8678  0008C2  0100               	movlb	0	; () banked
  8679  0008C4  6F9D               	movwf	ModbusValidateRequest@u16regs& (0+255),b
  8680  0008C6  C080  F09E         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;ModbusRtu.c: 894: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8684  0008CA  0101               	movlb	1	; () banked
  8685  0008CC  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  8686  0008CE  C12E  F080         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8687  0008D2  0100               	movlb	0	; () banked
  8688  0008D4  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8689  0008D6  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8690  0008DA  0100               	movlb	0	; () banked
  8691  0008DC  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8692  0008DE  0100               	movlb	0	; () banked
  8693  0008E0  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8694  0008E2  0E00               	movlw	0
  8695  0008E4  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8696  0008E6  0100               	movlb	0	; () banked
  8697  0008E8  5180               	movf	??_ModbusValidateRequest& (0+255),w,b
  8698  0008EA  0100               	movlb	0	; () banked
  8699  0008EC  279D               	addwf	ModbusValidateRequest@u16regs& (0+255),f,b
  8700  0008EE  0100               	movlb	0	; () banked
  8701  0008F0  5181               	movf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8702  0008F2  0100               	movlb	0	; () banked
  8703  0008F4  239E               	addwfc	(ModbusValidateRequest@u16regs+1)& (0+255),f,b
  8704  0008F6  D7AD               	goto	l7467
  8705  0008F8                     l7499:
  8706  0008F8  FFFF               	dw	65535	; assembler added errata NOP
  8707                           
  8708                           ;ModbusRtu.c: 903: {
  8709                           ;ModbusRtu.c: 904: uint8_t res = CheckFunc20();
  8710  0008FA  EC85  F00E         	call	_CheckFunc20	;wreg free
  8711  0008FE  0100               	movlb	0	; () banked
  8712  000900  6F97               	movwf	ModbusValidateRequest@res& (0+255),b
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;ModbusRtu.c: 905: if(res != 0)
  8716  000902  0100               	movlb	0	; () banked
  8717  000904  5197               	movf	ModbusValidateRequest@res& (0+255),w,b
  8718  000906  0100               	movlb	0	; () banked
  8719  000908  B4D8               	btfsc	status,2,c
  8720  00090A  D0CF               	goto	l886
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;ModbusRtu.c: 906: return res;
  8724  00090C  0100               	movlb	0	; () banked
  8725  00090E  5197               	movf	ModbusValidateRequest@res& (0+255),w,b
  8726                           
  8727                           ; BSR set to: 0
  8728  000910  D0D0               	goto	l873
  8729  000912                     l7507:
  8730  000912  FFFF               	dw	65535	; assembler added errata NOP
  8731                           
  8732                           ;ModbusRtu.c: 911: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  8733  000914  0E06               	movlw	6
  8734  000916  0101               	movlb	1	; () banked
  8735  000918  192D               	xorwf	(__au8Buffer+3)& (0+255),w,b
  8736  00091A  A4D8               	btfss	status,2,c
  8737  00091C  D084               	goto	l7547
  8738                           
  8739                           ; BSR set to: 1
  8740                           ;ModbusRtu.c: 914: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  8741                           
  8742                           ; BSR set to: 1
  8743                           
  8744                           ; BSR set to: 1
  8745                           
  8746                           ; BSR set to: 1
  8747                           ;ModbusRtu.c: 912: return EXC_ADDR_RANGE;
  8748  00091E  0101               	movlb	1	; () banked
  8749  000920  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  8750  000922  A4D8               	btfss	status,2,c
  8751  000924  D080               	goto	l7547
  8752                           
  8753                           ; BSR set to: 1
  8754  000926  0101               	movlb	1	; () banked
  8755  000928  052F               	decf	(__au8Buffer+5)& (0+255),w,b
  8756  00092A  A4D8               	btfss	status,2,c
  8757  00092C  D07C               	goto	l7547
  8758                           
  8759                           ; BSR set to: 1
  8760                           ;ModbusRtu.c: 917: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  8761                           
  8762                           ; BSR set to: 1
  8763                           
  8764                           ; BSR set to: 1
  8765                           
  8766                           ; BSR set to: 1
  8767                           ;ModbusRtu.c: 915: return EXC_ADDR_RANGE;
  8768                           
  8769                           ; BSR set to: 1
  8770  00092E  0101               	movlb	1	; () banked
  8771  000930  5131               	movf	(__au8Buffer+7)& (0+255),w,b
  8772  000932  C130  F080         	movff	__au8Buffer+6,??_ModbusValidateRequest
  8773  000936  0100               	movlb	0	; () banked
  8774  000938  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8775  00093A  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8776  00093E  0100               	movlb	0	; () banked
  8777  000940  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8778  000942  0100               	movlb	0	; () banked
  8779  000944  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8780  000946  0E00               	movlw	0
  8781  000948  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8782  00094A  90D8               	bcf	status,0,c
  8783  00094C  0100               	movlb	0	; () banked
  8784  00094E  3780               	rlcf	??_ModbusValidateRequest& (0+255),f,b
  8785  000950  3781               	rlcf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8786  000952  C080  F08C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  8787  000956  C081  F08D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  8788  00095A  0100               	movlb	0	; () banked
  8789  00095C  0E00               	movlw	0
  8790  00095E  BF8D               	btfsc	(ModbusValidateRequest@startAddrBytes+1)& (0+255),7,b
  8791  000960  0EFF               	movlw	-1
  8792  000962  6F8E               	movwf	(ModbusValidateRequest@startAddrBytes+2)& (0+255),b
  8793  000964  6F8F               	movwf	(ModbusValidateRequest@startAddrBytes+3)& (0+255),b
  8794                           
  8795                           ;ModbusRtu.c: 918: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  8796  000966  0101               	movlb	1	; () banked
  8797  000968  5133               	movf	(__au8Buffer+9)& (0+255),w,b
  8798  00096A  C132  F080         	movff	__au8Buffer+8,??_ModbusValidateRequest
  8799  00096E  0100               	movlb	0	; () banked
  8800  000970  6B81               	clrf	(??_ModbusValidateRequest+1)& (0+255),b
  8801  000972  C080  F081         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8802  000976  0100               	movlb	0	; () banked
  8803  000978  6B80               	clrf	??_ModbusValidateRequest& (0+255),b
  8804  00097A  0100               	movlb	0	; () banked
  8805  00097C  1380               	iorwf	??_ModbusValidateRequest& (0+255),f,b
  8806  00097E  0E00               	movlw	0
  8807  000980  1381               	iorwf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8808  000982  90D8               	bcf	status,0,c
  8809  000984  0100               	movlb	0	; () banked
  8810  000986  3780               	rlcf	??_ModbusValidateRequest& (0+255),f,b
  8811  000988  3781               	rlcf	(??_ModbusValidateRequest+1)& (0+255),f,b
  8812  00098A  C080  F090         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  8813  00098E  C081  F091         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  8814  000992  0100               	movlb	0	; () banked
  8815  000994  0E00               	movlw	0
  8816  000996  BF91               	btfsc	(ModbusValidateRequest@recLenBytes+1)& (0+255),7,b
  8817  000998  0EFF               	movlw	-1
  8818  00099A  6F92               	movwf	(ModbusValidateRequest@recLenBytes+2)& (0+255),b
  8819  00099C  6F93               	movwf	(ModbusValidateRequest@recLenBytes+3)& (0+255),b
  8820                           
  8821                           ;ModbusRtu.c: 920: if (startAddrBytes + recLenBytes >= 256)
  8822  00099E  0100               	movlb	0	; () banked
  8823  0009A0  5190               	movf	ModbusValidateRequest@recLenBytes& (0+255),w,b
  8824  0009A2  0100               	movlb	0	; () banked
  8825  0009A4  258C               	addwf	ModbusValidateRequest@startAddrBytes& (0+255),w,b
  8826  0009A6  0100               	movlb	0	; () banked
  8827  0009A8  6F80               	movwf	??_ModbusValidateRequest& (0+255),b
  8828  0009AA  0100               	movlb	0	; () banked
  8829  0009AC  5191               	movf	(ModbusValidateRequest@recLenBytes+1)& (0+255),w,b
  8830  0009AE  0100               	movlb	0	; () banked
  8831  0009B0  218D               	addwfc	(ModbusValidateRequest@startAddrBytes+1)& (0+255),w,b
  8832  0009B2  0100               	movlb	0	; () banked
  8833  0009B4  6F81               	movwf	(??_ModbusValidateRequest+1)& (0+255),b
  8834  0009B6  0100               	movlb	0	; () banked
  8835  0009B8  5192               	movf	(ModbusValidateRequest@recLenBytes+2)& (0+255),w,b
  8836  0009BA  0100               	movlb	0	; () banked
  8837  0009BC  218E               	addwfc	(ModbusValidateRequest@startAddrBytes+2)& (0+255),w,b
  8838  0009BE  0100               	movlb	0	; () banked
  8839  0009C0  6F82               	movwf	(??_ModbusValidateRequest+2)& (0+255),b
  8840  0009C2  0100               	movlb	0	; () banked
  8841  0009C4  5193               	movf	(ModbusValidateRequest@recLenBytes+3)& (0+255),w,b
  8842  0009C6  0100               	movlb	0	; () banked
  8843  0009C8  218F               	addwfc	(ModbusValidateRequest@startAddrBytes+3)& (0+255),w,b
  8844  0009CA  0100               	movlb	0	; () banked
  8845  0009CC  6F83               	movwf	(??_ModbusValidateRequest+3)& (0+255),b
  8846  0009CE  0100               	movlb	0	; () banked
  8847  0009D0  5183               	movf	(??_ModbusValidateRequest+3)& (0+255),w,b
  8848  0009D2  0100               	movlb	0	; () banked
  8849  0009D4  1182               	iorwf	(??_ModbusValidateRequest+2)& (0+255),w,b
  8850  0009D6  E127               	bnz	l7547
  8851  0009D8  0100               	movlb	0	; () banked
  8852  0009DA  0581               	decf	(??_ModbusValidateRequest+1)& (0+255),w,b
  8853  0009DC  D72B               	goto	L14
  8854  0009DE                     l7527:
  8855  0009DE  FFFF               	dw	65535	; assembler added errata NOP
  8856                           
  8857                           ;ModbusRtu.c: 924: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  8858  0009E0  0E0E               	movlw	14
  8859  0009E2  0101               	movlb	1	; () banked
  8860  0009E4  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8861  0009E6  B4D8               	btfsc	status,2,c
  8862  0009E8  D003               	goto	l907
  8863  0009EA                     l7529:
  8864  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;ModbusRtu.c: 925: return EXC_FUNC_CODE;
  8868  0009EC  0E01               	movlw	1
  8869                           
  8870                           ; BSR set to: 1
  8871  0009EE  D061               	goto	l873
  8872  0009F0                     l907:
  8873  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  8874                           
  8875                           ; BSR set to: 1
  8876                           ;ModbusRtu.c: 926: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8877  0009F2  C12D  F09B         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8878                           
  8879                           ; BSR set to: 1
  8880                           ;ModbusRtu.c: 927: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8881  0009F6  0100               	movlb	0	; () banked
  8882  0009F8  059B               	decf	ModbusValidateRequest@readDevId& (0+255),w,b
  8883  0009FA  B4D8               	btfsc	status,2,c
  8884  0009FC  D00A               	goto	l7543
  8885                           
  8886                           ; BSR set to: 0
  8887  0009FE  0E02               	movlw	2
  8888  000A00  0100               	movlb	0	; () banked
  8889  000A02  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8890  000A04  B4D8               	btfsc	status,2,c
  8891  000A06  D005               	goto	l7543
  8892                           
  8893                           ; BSR set to: 0
  8894  000A08  0E04               	movlw	4
  8895  000A0A  0100               	movlb	0	; () banked
  8896  000A0C  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8897  000A0E  A4D8               	btfss	status,2,c
  8898  000A10  D01C               	goto	l7557
  8899  000A12                     l7543:
  8900  000A12  FFFF               	dw	65535	; assembler added errata NOP
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;ModbusRtu.c: 929: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8904  000A14  0E04               	movlw	4
  8905  000A16  0100               	movlb	0	; () banked
  8906  000A18  199B               	xorwf	ModbusValidateRequest@readDevId& (0+255),w,b
  8907  000A1A  A4D8               	btfss	status,2,c
  8908  000A1C  D046               	goto	l886
  8909                           
  8910                           ; BSR set to: 0
  8911  000A1E  0E06               	movlw	6
  8912  000A20  0101               	movlb	1	; () banked
  8913  000A22  652E               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8914  000A24  D042               	goto	l886
  8915  000A26                     l7547:
  8916  000A26  FFFF               	dw	65535	; assembler added errata NOP
  8917                           
  8918                           ; BSR set to: 1
  8919                           ;ModbusRtu.c: 930: return EXC_ADDR_RANGE;
  8920  000A28  0E02               	movlw	2
  8921                           
  8922                           ; BSR set to: 1
  8923  000A2A  D043               	goto	l873
  8924  000A2C                     l7551:
  8925  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  8926                           
  8927                           ; BSR set to: 1
  8928                           ;ModbusRtu.c: 934: if(_au8Buffer[COM_COM_ID] != 0x7F
  8929                           ;ModbusRtu.c: 935: && _au8Buffer[COM_COM_ID] != 0x01
  8930                           ;ModbusRtu.c: 936: && _au8Buffer[COM_COM_ID] != 0x10)
  8931  000A2E  0E7F               	movlw	127
  8932  000A30  0101               	movlb	1	; () banked
  8933  000A32  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8934  000A34  B4D8               	btfsc	status,2,c
  8935  000A36  D039               	goto	l886
  8936                           
  8937                           ; BSR set to: 1
  8938  000A38  0101               	movlb	1	; () banked
  8939  000A3A  052C               	decf	(__au8Buffer+2)& (0+255),w,b
  8940  000A3C  B4D8               	btfsc	status,2,c
  8941  000A3E  D035               	goto	l886
  8942                           
  8943                           ; BSR set to: 1
  8944  000A40  0E10               	movlw	16
  8945  000A42  0101               	movlb	1	; () banked
  8946  000A44  192C               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8947  000A46  B4D8               	btfsc	status,2,c
  8948  000A48  D030               	goto	l886
  8949  000A4A                     l7557:
  8950  000A4A  FFFF               	dw	65535	; assembler added errata NOP
  8951                           
  8952                           ; BSR set to: 1
  8953                           ;ModbusRtu.c: 937: return EXC_REGS_QUANT;
  8954  000A4C  0E03               	movlw	3
  8955                           
  8956                           ; BSR set to: 1
  8957  000A4E  D031               	goto	l873
  8958  000A50                     l7563:
  8959  000A50  FFFF               	dw	65535	; assembler added errata NOP
  8960  000A52  0101               	movlb	1	; () banked
  8961  000A54  512B               	movf	(__au8Buffer+1)& (0+255),w,b
  8962                           
  8963                           ; Switch size 1, requested type "space"
  8964                           ; Number of cases is 15, Range of values is 1 to 102
  8965                           ; switch strategies available:
  8966                           ; Name         Instructions Cycles
  8967                           ; simple_byte           46    24 (average)
  8968                           ;	Chosen strategy is simple_byte
  8969  000A56  0A01               	xorlw	1	; case 1
  8970  000A58  B4D8               	btfsc	status,2,c
  8971  000A5A  D697               	goto	l7433
  8972  000A5C  0A03               	xorlw	3	; case 2
  8973  000A5E  B4D8               	btfsc	status,2,c
  8974  000A60  D694               	goto	l7433
  8975  000A62  0A01               	xorlw	1	; case 3
  8976  000A64  B4D8               	btfsc	status,2,c
  8977  000A66  D726               	goto	l7487
  8978  000A68  0A07               	xorlw	7	; case 4
  8979  000A6A  B4D8               	btfsc	status,2,c
  8980  000A6C  D6FC               	goto	l7475
  8981  000A6E  0A01               	xorlw	1	; case 5
  8982  000A70  B4D8               	btfsc	status,2,c
  8983  000A72  D6C3               	goto	l7449
  8984  000A74  0A03               	xorlw	3	; case 6
  8985  000A76  B4D8               	btfsc	status,2,c
  8986  000A78  D6E1               	goto	l7465
  8987  000A7A  0A09               	xorlw	9	; case 15
  8988  000A7C  B4D8               	btfsc	status,2,c
  8989  000A7E  D685               	goto	l7433
  8990  000A80  0A1F               	xorlw	31	; case 16
  8991  000A82  B4D8               	btfsc	status,2,c
  8992  000A84  D717               	goto	l7487
  8993  000A86  0A01               	xorlw	1	; case 17
  8994  000A88  B4D8               	btfsc	status,2,c
  8995  000A8A  D00F               	goto	l886
  8996  000A8C  0A05               	xorlw	5	; case 20
  8997  000A8E  B4D8               	btfsc	status,2,c
  8998  000A90  D733               	goto	l7499
  8999  000A92  0A01               	xorlw	1	; case 21
  9000  000A94  B4D8               	btfsc	status,2,c
  9001  000A96  D73D               	goto	l7507
  9002  000A98  0A3E               	xorlw	62	; case 43
  9003  000A9A  B4D8               	btfsc	status,2,c
  9004  000A9C  D7A0               	goto	l7527
  9005  000A9E  0A4F               	xorlw	79	; case 100
  9006  000AA0  B4D8               	btfsc	status,2,c
  9007  000AA2  D7C4               	goto	l7551
  9008  000AA4  0A01               	xorlw	1	; case 101
  9009  000AA6  A4D8               	btfss	status,2,c
  9010  000AA8  0A03               	xorlw	3	; case 102
  9011  000AAA                     l886:
  9012  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  9013                           
  9014                           ;ModbusRtu.c: 944: _lastFunction = _au8Buffer[ FUNC ];
  9015  000AAC  C12B  F05D         	movff	__au8Buffer+1,__lastFunction
  9016                           
  9017                           ;ModbusRtu.c: 945: return 0;
  9018  000AB0  0E00               	movlw	0
  9019  000AB2                     l873:
  9020  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  9021  000AB4  0012               	return		;funcret
  9022  000AB6  FFFF               	dw	65535	; errata NOP
  9023  000AB8                     __end_of_ModbusValidateRequest:
  9024                           	opt stack 0
  9025                           tblptru	equ	0xFF8
  9026                           tblptrh	equ	0xFF7
  9027                           tblptrl	equ	0xFF6
  9028                           tablat	equ	0xFF5
  9029                           prodh	equ	0xFF4
  9030                           prodl	equ	0xFF3
  9031                           intcon	equ	0xFF2
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           postdec1	equ	0xFE5
  9035                           fsr1h	equ	0xFE2
  9036                           fsr1l	equ	0xFE1
  9037                           indf2	equ	0xFDF
  9038                           postinc2	equ	0xFDE
  9039                           postdec2	equ	0xFDD
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function _CheckFunc20 *****************
  9045 ;; Defined at:
  9046 ;;		line 786 in file "ModbusRtu.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  recLenBytes     4   46[COMRAM] unsigned long 
  9051 ;;  startAddrByt    4   40[COMRAM] unsigned long 
  9052 ;;  offset          1   51[COMRAM] unsigned char 
  9053 ;;  bytesCount      1   50[COMRAM] unsigned char 
  9054 ;;  resultLen       1   45[COMRAM] unsigned char 
  9055 ;;  reqCount        1   44[COMRAM] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      unsigned char 
  9058 ;; Registers used:
  9059 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9065 ;;      Params:         0       0       0       0       0       0       0
  9066 ;;      Locals:        12       0       0       0       0       0       0
  9067 ;;      Temps:          8       0       0       0       0       0       0
  9068 ;;      Totals:        20       0       0       0       0       0       0
  9069 ;;Total ram usage:       20 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    2
  9072 ;; This function calls:
  9073 ;;		Nothing
  9074 ;; This function is called by:
  9075 ;;		_ModbusValidateRequest
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text38
  9080  001D0A                     __ptext38:
  9081                           	opt stack 0
  9082  001D0A                     _CheckFunc20:
  9083                           	opt stack 26
  9084                           
  9085                           ;incstack = 0
  9086  001D0A  FFFF               	dw	65535
  9087                           
  9088                           ;ModbusRtu.c: 788: uint8_t bytesCount = _au8Buffer[ FILE_DATA_LEN ];
  9089  001D0C  C12C  F033         	movff	__au8Buffer+2,CheckFunc20@bytesCount
  9090                           
  9091                           ;ModbusRtu.c: 789: if(bytesCount < 0x07 || bytesCount > 0xF5)
  9092  001D10  0E06               	movlw	6
  9093  001D12  6433               	cpfsgt	CheckFunc20@bytesCount,c
  9094  001D14  D003               	goto	l7177
  9095  001D16  0EF5               	movlw	245
  9096  001D18  6433               	cpfsgt	CheckFunc20@bytesCount,c
  9097  001D1A  D003               	goto	l7181
  9098  001D1C                     l7177:
  9099  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  9100                           
  9101                           ;ModbusRtu.c: 790: return EXC_REGS_QUANT;
  9102  001D1E  0E03               	movlw	3
  9103  001D20  D0E0               	goto	l859
  9104  001D22                     l7181:
  9105  001D22  FFFF               	dw	65535	; assembler added errata NOP
  9106                           
  9107                           ;ModbusRtu.c: 792: uint8_t offset = 0;
  9108  001D24  0E00               	movlw	0
  9109  001D26  6E34               	movwf	CheckFunc20@offset,c
  9110                           
  9111                           ;ModbusRtu.c: 793: uint8_t reqCount = 0;
  9112  001D28  0E00               	movlw	0
  9113  001D2A  6E2D               	movwf	CheckFunc20@reqCount,c
  9114                           
  9115                           ;ModbusRtu.c: 794: uint8_t resultLen = 0;
  9116  001D2C  0E00               	movlw	0
  9117  001D2E  6E2E               	movwf	CheckFunc20@resultLen,c
  9118                           
  9119                           ;ModbusRtu.c: 795: while(offset < bytesCount)
  9120  001D30  D0D2               	goto	l7221
  9121  001D32                     l7183:
  9122  001D32  FFFF               	dw	65535	; assembler added errata NOP
  9123                           
  9124                           ;ModbusRtu.c: 796: {
  9125                           ;ModbusRtu.c: 797: if (_au8Buffer[offset + FILE_REF_TYPE ] != 6)
  9126  001D34  5034               	movf	CheckFunc20@offset,w,c
  9127  001D36  6E21               	movwf	??_CheckFunc20& (0+255),c
  9128  001D38  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9129  001D3A  0E03               	movlw	3
  9130  001D3C  2621               	addwf	??_CheckFunc20,f,c
  9131  001D3E  0E00               	movlw	0
  9132  001D40  2222               	addwfc	??_CheckFunc20+1,f,c
  9133  001D42  0E2A               	movlw	low __au8Buffer
  9134  001D44  2421               	addwf	??_CheckFunc20,w,c
  9135  001D46  6ED9               	movwf	fsr2l,c
  9136  001D48  0E01               	movlw	high __au8Buffer
  9137  001D4A  2022               	addwfc	??_CheckFunc20+1,w,c
  9138  001D4C  6EDA               	movwf	fsr2h,c
  9139  001D4E  0E06               	movlw	6
  9140  001D50  18DE               	xorwf	postinc2,w,c
  9141  001D52  A4D8               	btfss	status,2,c
  9142  001D54  D0BD               	goto	l7217
  9143                           
  9144                           ;ModbusRtu.c: 800: if (_au8Buffer[offset + FILE_NUM_HI ] != 0x00 || _au8Buffer[offset + 
      +                          FILE_NUM_LO ] != 0x01)
  9145                           
  9146                           ;ModbusRtu.c: 798: return EXC_ADDR_RANGE;
  9147  001D56  5034               	movf	CheckFunc20@offset,w,c
  9148  001D58  6E21               	movwf	??_CheckFunc20& (0+255),c
  9149  001D5A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9150  001D5C  0E04               	movlw	4
  9151  001D5E  2621               	addwf	??_CheckFunc20,f,c
  9152  001D60  0E00               	movlw	0
  9153  001D62  2222               	addwfc	??_CheckFunc20+1,f,c
  9154  001D64  0E2A               	movlw	low __au8Buffer
  9155  001D66  2421               	addwf	??_CheckFunc20,w,c
  9156  001D68  6ED9               	movwf	fsr2l,c
  9157  001D6A  0E01               	movlw	high __au8Buffer
  9158  001D6C  2022               	addwfc	??_CheckFunc20+1,w,c
  9159  001D6E  6EDA               	movwf	fsr2h,c
  9160  001D70  50DF               	movf	indf2,w,c
  9161  001D72  A4D8               	btfss	status,2,c
  9162  001D74  D0AD               	goto	l7217
  9163  001D76  5034               	movf	CheckFunc20@offset,w,c
  9164  001D78  6E21               	movwf	??_CheckFunc20& (0+255),c
  9165  001D7A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9166  001D7C  0E05               	movlw	5
  9167  001D7E  2621               	addwf	??_CheckFunc20,f,c
  9168  001D80  0E00               	movlw	0
  9169  001D82  2222               	addwfc	??_CheckFunc20+1,f,c
  9170  001D84  0E2A               	movlw	low __au8Buffer
  9171  001D86  2421               	addwf	??_CheckFunc20,w,c
  9172  001D88  6ED9               	movwf	fsr2l,c
  9173  001D8A  0E01               	movlw	high __au8Buffer
  9174  001D8C  2022               	addwfc	??_CheckFunc20+1,w,c
  9175  001D8E  6EDA               	movwf	fsr2h,c
  9176  001D90  04DE               	decf	postinc2,w,c
  9177  001D92  A4D8               	btfss	status,2,c
  9178  001D94  D09D               	goto	l7217
  9179                           
  9180                           ;ModbusRtu.c: 802: unsigned long startAddrBytes = ((_au8Buffer[offset + FILE_REC_HI ] <<
      +                           8) | _au8Buffer[offset + FILE_REC_LO ]) << 1;
  9181                           
  9182                           ;ModbusRtu.c: 801: return EXC_ADDR_RANGE;
  9183  001D96  5034               	movf	CheckFunc20@offset,w,c
  9184  001D98  6E21               	movwf	??_CheckFunc20& (0+255),c
  9185  001D9A  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9186  001D9C  0E06               	movlw	6
  9187  001D9E  2621               	addwf	??_CheckFunc20,f,c
  9188  001DA0  0E00               	movlw	0
  9189  001DA2  2222               	addwfc	??_CheckFunc20+1,f,c
  9190  001DA4  0E2A               	movlw	low __au8Buffer
  9191  001DA6  2421               	addwf	??_CheckFunc20,w,c
  9192  001DA8  6ED9               	movwf	fsr2l,c
  9193  001DAA  0E01               	movlw	high __au8Buffer
  9194  001DAC  2022               	addwfc	??_CheckFunc20+1,w,c
  9195  001DAE  6EDA               	movwf	fsr2h,c
  9196  001DB0  50DF               	movf	indf2,w,c
  9197  001DB2  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9198  001DB4  5023               	movf	??_CheckFunc20+2,w,c
  9199  001DB6  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9200  001DB8  6A24               	clrf	(??_CheckFunc20+3)& (0+255),c
  9201  001DBA  5034               	movf	CheckFunc20@offset,w,c
  9202  001DBC  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9203  001DBE  6A27               	clrf	(??_CheckFunc20+6)& (0+255),c
  9204  001DC0  0E07               	movlw	7
  9205  001DC2  2626               	addwf	??_CheckFunc20+5,f,c
  9206  001DC4  0E00               	movlw	0
  9207  001DC6  2227               	addwfc	??_CheckFunc20+6,f,c
  9208  001DC8  0E2A               	movlw	low __au8Buffer
  9209  001DCA  2426               	addwf	??_CheckFunc20+5,w,c
  9210  001DCC  6ED9               	movwf	fsr2l,c
  9211  001DCE  0E01               	movlw	high __au8Buffer
  9212  001DD0  2027               	addwfc	??_CheckFunc20+6,w,c
  9213  001DD2  6EDA               	movwf	fsr2h,c
  9214  001DD4  50DF               	movf	indf2,w,c
  9215  001DD6  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9216  001DD8  5028               	movf	??_CheckFunc20+7,w,c
  9217  001DDA  1224               	iorwf	??_CheckFunc20+3,f,c
  9218  001DDC  0E00               	movlw	0
  9219  001DDE  1225               	iorwf	??_CheckFunc20+4,f,c
  9220  001DE0  90D8               	bcf	status,0,c
  9221  001DE2  3624               	rlcf	??_CheckFunc20+3,f,c
  9222  001DE4  3625               	rlcf	??_CheckFunc20+4,f,c
  9223  001DE6  C024  F029         	movff	??_CheckFunc20+3,CheckFunc20@startAddrBytes
  9224  001DEA  C025  F02A         	movff	??_CheckFunc20+4,CheckFunc20@startAddrBytes+1
  9225  001DEE  0E00               	movlw	0
  9226  001DF0  BE2A               	btfsc	CheckFunc20@startAddrBytes+1,7,c
  9227  001DF2  0EFF               	movlw	-1
  9228  001DF4  6E2B               	movwf	CheckFunc20@startAddrBytes+2,c
  9229  001DF6  6E2C               	movwf	CheckFunc20@startAddrBytes+3,c
  9230                           
  9231                           ;ModbusRtu.c: 803: unsigned long recLenBytes = ((_au8Buffer[offset + FILE_REC_LEN_HI ] <
      +                          < 8) | _au8Buffer[offset + FILE_REC_LEN_LO ]) << 1;
  9232  001DF8  5034               	movf	CheckFunc20@offset,w,c
  9233  001DFA  6E21               	movwf	??_CheckFunc20& (0+255),c
  9234  001DFC  6A22               	clrf	(??_CheckFunc20+1)& (0+255),c
  9235  001DFE  0E08               	movlw	8
  9236  001E00  2621               	addwf	??_CheckFunc20,f,c
  9237  001E02  0E00               	movlw	0
  9238  001E04  2222               	addwfc	??_CheckFunc20+1,f,c
  9239  001E06  0E2A               	movlw	low __au8Buffer
  9240  001E08  2421               	addwf	??_CheckFunc20,w,c
  9241  001E0A  6ED9               	movwf	fsr2l,c
  9242  001E0C  0E01               	movlw	high __au8Buffer
  9243  001E0E  2022               	addwfc	??_CheckFunc20+1,w,c
  9244  001E10  6EDA               	movwf	fsr2h,c
  9245  001E12  50DF               	movf	indf2,w,c
  9246  001E14  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9247  001E16  5023               	movf	??_CheckFunc20+2,w,c
  9248  001E18  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9249  001E1A  6A24               	clrf	(??_CheckFunc20+3)& (0+255),c
  9250  001E1C  5034               	movf	CheckFunc20@offset,w,c
  9251  001E1E  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9252  001E20  6A27               	clrf	(??_CheckFunc20+6)& (0+255),c
  9253  001E22  0E09               	movlw	9
  9254  001E24  2626               	addwf	??_CheckFunc20+5,f,c
  9255  001E26  0E00               	movlw	0
  9256  001E28  2227               	addwfc	??_CheckFunc20+6,f,c
  9257  001E2A  0E2A               	movlw	low __au8Buffer
  9258  001E2C  2426               	addwf	??_CheckFunc20+5,w,c
  9259  001E2E  6ED9               	movwf	fsr2l,c
  9260  001E30  0E01               	movlw	high __au8Buffer
  9261  001E32  2027               	addwfc	??_CheckFunc20+6,w,c
  9262  001E34  6EDA               	movwf	fsr2h,c
  9263  001E36  50DF               	movf	indf2,w,c
  9264  001E38  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9265  001E3A  5028               	movf	??_CheckFunc20+7,w,c
  9266  001E3C  1224               	iorwf	??_CheckFunc20+3,f,c
  9267  001E3E  0E00               	movlw	0
  9268  001E40  1225               	iorwf	??_CheckFunc20+4,f,c
  9269  001E42  90D8               	bcf	status,0,c
  9270  001E44  3624               	rlcf	??_CheckFunc20+3,f,c
  9271  001E46  3625               	rlcf	??_CheckFunc20+4,f,c
  9272  001E48  C024  F02F         	movff	??_CheckFunc20+3,CheckFunc20@recLenBytes
  9273  001E4C  C025  F030         	movff	??_CheckFunc20+4,CheckFunc20@recLenBytes+1
  9274  001E50  0E00               	movlw	0
  9275  001E52  BE30               	btfsc	CheckFunc20@recLenBytes+1,7,c
  9276  001E54  0EFF               	movlw	-1
  9277  001E56  6E31               	movwf	CheckFunc20@recLenBytes+2,c
  9278  001E58  6E32               	movwf	CheckFunc20@recLenBytes+3,c
  9279                           
  9280                           ;ModbusRtu.c: 804: if (startAddrBytes + recLenBytes >= 256)
  9281  001E5A  502F               	movf	CheckFunc20@recLenBytes,w,c
  9282  001E5C  2429               	addwf	CheckFunc20@startAddrBytes,w,c
  9283  001E5E  6E21               	movwf	??_CheckFunc20& (0+255),c
  9284  001E60  5030               	movf	CheckFunc20@recLenBytes+1,w,c
  9285  001E62  202A               	addwfc	CheckFunc20@startAddrBytes+1,w,c
  9286  001E64  6E22               	movwf	(??_CheckFunc20+1)& (0+255),c
  9287  001E66  5031               	movf	CheckFunc20@recLenBytes+2,w,c
  9288  001E68  202B               	addwfc	CheckFunc20@startAddrBytes+2,w,c
  9289  001E6A  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9290  001E6C  5032               	movf	CheckFunc20@recLenBytes+3,w,c
  9291  001E6E  202C               	addwfc	CheckFunc20@startAddrBytes+3,w,c
  9292  001E70  6E24               	movwf	(??_CheckFunc20+3)& (0+255),c
  9293  001E72  5024               	movf	??_CheckFunc20+3,w,c
  9294  001E74  1023               	iorwf	??_CheckFunc20+2,w,c
  9295  001E76  E12C               	bnz	l7217
  9296  001E78  0422               	decf	??_CheckFunc20+1,w,c
  9297  001E7A  B0D8               	btfsc	status,0,c
  9298  001E7C  D029               	goto	l7217
  9299                           
  9300                           ;ModbusRtu.c: 806: if(resultLen + recLenBytes + 2 > 140 - 3)
  9301                           
  9302                           ;ModbusRtu.c: 805: return EXC_ADDR_RANGE;
  9303  001E7E  502E               	movf	CheckFunc20@resultLen,w,c
  9304  001E80  242F               	addwf	CheckFunc20@recLenBytes,w,c
  9305  001E82  6E21               	movwf	??_CheckFunc20& (0+255),c
  9306  001E84  0E00               	movlw	0
  9307  001E86  2030               	addwfc	CheckFunc20@recLenBytes+1,w,c
  9308  001E88  6E22               	movwf	(??_CheckFunc20+1)& (0+255),c
  9309  001E8A  0E00               	movlw	0
  9310  001E8C  2031               	addwfc	CheckFunc20@recLenBytes+2,w,c
  9311  001E8E  6E23               	movwf	(??_CheckFunc20+2)& (0+255),c
  9312  001E90  0E00               	movlw	0
  9313  001E92  2032               	addwfc	CheckFunc20@recLenBytes+3,w,c
  9314  001E94  6E24               	movwf	(??_CheckFunc20+3)& (0+255),c
  9315  001E96  0E02               	movlw	2
  9316  001E98  2421               	addwf	??_CheckFunc20,w,c
  9317  001E9A  6E25               	movwf	(??_CheckFunc20+4)& (0+255),c
  9318  001E9C  0E00               	movlw	0
  9319  001E9E  2022               	addwfc	??_CheckFunc20+1,w,c
  9320  001EA0  6E26               	movwf	(??_CheckFunc20+5)& (0+255),c
  9321  001EA2  0E00               	movlw	0
  9322  001EA4  2023               	addwfc	??_CheckFunc20+2,w,c
  9323  001EA6  6E27               	movwf	(??_CheckFunc20+6)& (0+255),c
  9324  001EA8  0E00               	movlw	0
  9325  001EAA  2024               	addwfc	??_CheckFunc20+3,w,c
  9326  001EAC  6E28               	movwf	(??_CheckFunc20+7)& (0+255),c
  9327  001EAE  5028               	movf	??_CheckFunc20+7,w,c
  9328  001EB0  1027               	iorwf	??_CheckFunc20+6,w,c
  9329  001EB2  1026               	iorwf	??_CheckFunc20+5,w,c
  9330  001EB4  E10D               	bnz	l7217
  9331  001EB6  0E8A               	movlw	138
  9332  001EB8  5C25               	subwf	??_CheckFunc20+4,w,c
  9333  001EBA  B0D8               	btfsc	status,0,c
  9334  001EBC  D009               	goto	l7217
  9335                           
  9336                           ;ModbusRtu.c: 808: resultLen += recLenBytes + 2;
  9337                           
  9338                           ;ModbusRtu.c: 807: return EXC_ADDR_RANGE;
  9339  001EBE  502F               	movf	CheckFunc20@recLenBytes,w,c
  9340  001EC0  0F02               	addlw	2
  9341  001EC2  262E               	addwf	CheckFunc20@resultLen,f,c
  9342                           
  9343                           ;ModbusRtu.c: 809: offset += 7;
  9344  001EC4  0E07               	movlw	7
  9345  001EC6  2634               	addwf	CheckFunc20@offset,f,c
  9346                           
  9347                           ;ModbusRtu.c: 810: reqCount++;
  9348  001EC8  2A2D               	incf	CheckFunc20@reqCount,f,c
  9349                           
  9350                           ;ModbusRtu.c: 812: if(reqCount > 5)
  9351  001ECA  0E05               	movlw	5
  9352  001ECC  642D               	cpfsgt	CheckFunc20@reqCount,c
  9353  001ECE  D003               	goto	l7221
  9354  001ED0                     l7217:
  9355  001ED0  FFFF               	dw	65535	; assembler added errata NOP
  9356                           
  9357                           ;ModbusRtu.c: 813: return EXC_ADDR_RANGE;
  9358  001ED2  0E02               	movlw	2
  9359  001ED4  D006               	goto	l859
  9360  001ED6                     l7221:
  9361  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  9362  001ED8  5033               	movf	CheckFunc20@bytesCount,w,c
  9363  001EDA  5C34               	subwf	CheckFunc20@offset,w,c
  9364  001EDC  A0D8               	btfss	status,0,c
  9365  001EDE  D729               	goto	l7183
  9366                           
  9367                           ;ModbusRtu.c: 814: }
  9368                           ;ModbusRtu.c: 815: return 0;
  9369  001EE0  0E00               	movlw	0
  9370  001EE2                     l859:
  9371  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  9372  001EE4  0012               	return		;funcret
  9373  001EE6  FFFF               	dw	65535	; errata NOP
  9374  001EE8                     __end_of_CheckFunc20:
  9375                           	opt stack 0
  9376                           tblptru	equ	0xFF8
  9377                           tblptrh	equ	0xFF7
  9378                           tblptrl	equ	0xFF6
  9379                           tablat	equ	0xFF5
  9380                           prodh	equ	0xFF4
  9381                           prodl	equ	0xFF3
  9382                           intcon	equ	0xFF2
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           postdec1	equ	0xFE5
  9386                           fsr1h	equ	0xFE2
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function _ModbusProcess_FC7 *****************
  9396 ;; Defined at:
  9397 ;;		line 1129 in file "ModbusRtu.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;		None
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  1    wreg      unsigned char 
  9404 ;; Registers used:
  9405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9411 ;;      Params:         0       0       0       0       0       0       0
  9412 ;;      Locals:         1       0       0       0       0       0       0
  9413 ;;      Temps:          0       0       0       0       0       0       0
  9414 ;;      Totals:         1       0       0       0       0       0       0
  9415 ;;Total ram usage:        1 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    4
  9418 ;; This function calls:
  9419 ;;		_ModbusSendTxBuffer
  9420 ;; This function is called by:
  9421 ;;		_ModbusPoll
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           	psect	text39
  9426  000266                     __ptext39:
  9427                           	opt stack 0
  9428  000266                     _ModbusProcess_FC7:
  9429                           	opt stack 25
  9430                           
  9431                           ;incstack = 0
  9432  000266  FFFF               	dw	65535
  9433                           
  9434                           ;ModbusRtu.c: 1131: _au8Buffer[ 2 ] = _exceptionStatus;
  9435  000268  C049  F12C         	movff	__exceptionStatus,__au8Buffer+2
  9436                           
  9437                           ;ModbusRtu.c: 1132: _u8BufferSize = 3;
  9438  00026C  0E03               	movlw	3
  9439  00026E  6E53               	movwf	__u8BufferSize,c
  9440                           
  9441                           ;ModbusRtu.c: 1133: uint8_t u8CopyBufferSize = _u8BufferSize;
  9442  000270  C053  F030         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  9443                           
  9444                           ;ModbusRtu.c: 1134: ModbusSendTxBuffer();
  9445  000274  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9446                           
  9447                           ;ModbusRtu.c: 1135: return u8CopyBufferSize;
  9448  000278  5030               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  9449  00027A  0012               	return		;funcret
  9450  00027C  FFFF               	dw	65535	; errata NOP
  9451  00027E                     __end_of_ModbusProcess_FC7:
  9452                           	opt stack 0
  9453                           tblptru	equ	0xFF8
  9454                           tblptrh	equ	0xFF7
  9455                           tblptrl	equ	0xFF6
  9456                           tablat	equ	0xFF5
  9457                           prodh	equ	0xFF4
  9458                           prodl	equ	0xFF3
  9459                           intcon	equ	0xFF2
  9460                           postinc0	equ	0xFEE
  9461                           wreg	equ	0xFE8
  9462                           postdec1	equ	0xFE5
  9463                           fsr1h	equ	0xFE2
  9464                           fsr1l	equ	0xFE1
  9465                           indf2	equ	0xFDF
  9466                           postinc2	equ	0xFDE
  9467                           postdec2	equ	0xFDD
  9468                           fsr2h	equ	0xFDA
  9469                           fsr2l	equ	0xFD9
  9470                           status	equ	0xFD8
  9471                           
  9472 ;; *************** function _ModbusProcess_FC6 *****************
  9473 ;; Defined at:
  9474 ;;		line 1109 in file "ModbusRtu.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  regs            2   47[COMRAM] PTR unsigned short 
  9477 ;;		 -> _MODBUSHoldingRegs(30), 
  9478 ;;  u8size          1   49[COMRAM] unsigned char 
  9479 ;; Auto vars:     Size  Location     Type
  9480 ;;  u16add          2    3[BANK0 ] unsigned short 
  9481 ;;  u16val          2    0[BANK0 ] unsigned short 
  9482 ;;  u8CopyBuffer    1    2[BANK0 ] unsigned char 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      unsigned char 
  9485 ;; Registers used:
  9486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9492 ;;      Params:         3       0       0       0       0       0       0
  9493 ;;      Locals:         0       5       0       0       0       0       0
  9494 ;;      Temps:          2       0       0       0       0       0       0
  9495 ;;      Totals:         5       5       0       0       0       0       0
  9496 ;;Total ram usage:       10 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    4
  9499 ;; This function calls:
  9500 ;;		_ModbusSendTxBuffer
  9501 ;; This function is called by:
  9502 ;;		_ModbusPoll
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text40
  9507  003984                     __ptext40:
  9508                           	opt stack 0
  9509  003984                     _ModbusProcess_FC6:
  9510                           	opt stack 25
  9511                           
  9512                           ;incstack = 0
  9513  003984  FFFF               	dw	65535
  9514                           
  9515                           ;ModbusRtu.c: 1111: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  9516  003986  0101               	movlb	1	; () banked
  9517  003988  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  9518  00398A  6E33               	movwf	??_ModbusProcess_FC6& (0+255),c
  9519  00398C  0101               	movlb	1	; () banked
  9520  00398E  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  9521  003990  0100               	movlb	0	; () banked
  9522  003992  6F83               	movwf	ModbusProcess_FC6@u16add& (0+255),b
  9523  003994  C033  F084         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;ModbusRtu.c: 1112: _lastAddress = u16add;
  9527  003998  C083  F0E2         	movff	ModbusProcess_FC6@u16add,__lastAddress
  9528  00399C  C084  F0E3         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  9529                           
  9530                           ;ModbusRtu.c: 1113: _lastCount = 1;
  9531  0039A0  0E00               	movlw	0
  9532  0039A2  0100               	movlb	0	; () banked
  9533  0039A4  6FE5               	movwf	(__lastCount+1)& (0+255),b
  9534  0039A6  0E01               	movlw	1
  9535  0039A8  6FE4               	movwf	__lastCount& (0+255),b
  9536                           
  9537                           ;ModbusRtu.c: 1114: uint8_t u8CopyBufferSize;
  9538                           ;ModbusRtu.c: 1115: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  9539  0039AA  0101               	movlb	1	; () banked
  9540  0039AC  512E               	movf	(__au8Buffer+4)& (0+255),w,b
  9541  0039AE  6E33               	movwf	??_ModbusProcess_FC6& (0+255),c
  9542  0039B0  0101               	movlb	1	; () banked
  9543  0039B2  512F               	movf	(__au8Buffer+5)& (0+255),w,b
  9544  0039B4  0100               	movlb	0	; () banked
  9545  0039B6  6F80               	movwf	ModbusProcess_FC6@u16val& (0+255),b
  9546  0039B8  C033  F081         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;ModbusRtu.c: 1117: regs[ u16add ] = u16val;
  9550  0039BC  90D8               	bcf	status,0,c
  9551  0039BE  0100               	movlb	0	; () banked
  9552  0039C0  3583               	rlcf	ModbusProcess_FC6@u16add& (0+255),w,b
  9553  0039C2  6ED9               	movwf	fsr2l,c
  9554  0039C4  0100               	movlb	0	; () banked
  9555  0039C6  3584               	rlcf	(ModbusProcess_FC6@u16add+1)& (0+255),w,b
  9556  0039C8  6EDA               	movwf	fsr2h,c
  9557  0039CA  5030               	movf	ModbusProcess_FC6@regs,w,c
  9558  0039CC  26D9               	addwf	fsr2l,f,c
  9559  0039CE  5031               	movf	ModbusProcess_FC6@regs+1,w,c
  9560  0039D0  22DA               	addwfc	fsr2h,f,c
  9561  0039D2  C080  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  9562  0039D6  C081  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;ModbusRtu.c: 1120: _u8BufferSize = RESPONSE_SIZE;
  9566  0039DA  0E06               	movlw	6
  9567  0039DC  6E53               	movwf	__u8BufferSize,c
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;ModbusRtu.c: 1122: u8CopyBufferSize = _u8BufferSize + 2;
  9571  0039DE  5053               	movf	__u8BufferSize,w,c
  9572  0039E0  0F02               	addlw	2
  9573  0039E2  0100               	movlb	0	; () banked
  9574  0039E4  6F82               	movwf	ModbusProcess_FC6@u8CopyBufferSize& (0+255),b
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;ModbusRtu.c: 1123: ModbusSendTxBuffer();
  9578  0039E6  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9579                           
  9580                           ;ModbusRtu.c: 1125: return u8CopyBufferSize;
  9581  0039EA  0100               	movlb	0	; () banked
  9582  0039EC  5182               	movf	ModbusProcess_FC6@u8CopyBufferSize& (0+255),w,b
  9583                           
  9584                           ; BSR set to: 0
  9585                           
  9586                           ; BSR set to: 0
  9587  0039EE  0012               	return		;funcret
  9588  0039F0  FFFF               	dw	65535	; errata NOP
  9589  0039F2                     __end_of_ModbusProcess_FC6:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           postdec1	equ	0xFE5
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8
  9609                           
  9610 ;; *************** function _ModbusProcess_FC5 *****************
  9611 ;; Defined at:
  9612 ;;		line 1074 in file "ModbusRtu.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  regs            2   47[COMRAM] PTR unsigned short 
  9615 ;;		 -> _MODBUSCoils(2), 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  u16coil         2    1[BANK0 ] unsigned short 
  9618 ;;  u8currentBit    1    3[BANK0 ] unsigned char 
  9619 ;;  u8CopyBuffer    1    0[BANK0 ] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      unsigned char 
  9622 ;; Registers used:
  9623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9629 ;;      Params:         2       0       0       0       0       0       0
  9630 ;;      Locals:         0       4       0       0       0       0       0
  9631 ;;      Temps:          5       0       0       0       0       0       0
  9632 ;;      Totals:         7       4       0       0       0       0       0
  9633 ;;Total ram usage:       11 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    4
  9636 ;; This function calls:
  9637 ;;		_ModbusSendTxBuffer
  9638 ;; This function is called by:
  9639 ;;		_ModbusPoll
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text41
  9644  00338A                     __ptext41:
  9645                           	opt stack 0
  9646  00338A                     _ModbusProcess_FC5:
  9647                           	opt stack 25
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;incstack = 0
  9651  00338A  FFFF               	dw	65535
  9652                           
  9653                           ;ModbusRtu.c: 1077: uint8_t u8currentBit;
  9654                           ;ModbusRtu.c: 1078: uint8_t u8CopyBufferSize;
  9655                           ;ModbusRtu.c: 1079: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  9656  00338C  0101               	movlb	1	; () banked
  9657  00338E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
  9658  003390  6E32               	movwf	??_ModbusProcess_FC5& (0+255),c
  9659  003392  0101               	movlb	1	; () banked
  9660  003394  512D               	movf	(__au8Buffer+3)& (0+255),w,b
  9661  003396  0100               	movlb	0	; () banked
  9662  003398  6F81               	movwf	ModbusProcess_FC5@u16coil& (0+255),b
  9663  00339A  C032  F082         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;ModbusRtu.c: 1080: _lastAddress = u16coil;
  9667  00339E  C081  F0E2         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  9668  0033A2  C082  F0E3         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  9669                           
  9670                           ;ModbusRtu.c: 1081: _lastCount = 1;
  9671  0033A6  0E00               	movlw	0
  9672  0033A8  0100               	movlb	0	; () banked
  9673  0033AA  6FE5               	movwf	(__lastCount+1)& (0+255),b
  9674  0033AC  0E01               	movlw	1
  9675  0033AE  6FE4               	movwf	__lastCount& (0+255),b
  9676                           
  9677                           ; BSR set to: 0
  9678                           ;ModbusRtu.c: 1084: u8currentBit = (uint8_t) (u16coil % 16);
  9679  0033B0  0100               	movlb	0	; () banked
  9680  0033B2  5181               	movf	ModbusProcess_FC5@u16coil& (0+255),w,b
  9681  0033B4  0B0F               	andlw	15
  9682  0033B6  0100               	movlb	0	; () banked
  9683  0033B8  6F83               	movwf	ModbusProcess_FC5@u8currentBit& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;ModbusRtu.c: 1087: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  9687  0033BA  0101               	movlb	1	; () banked
  9688  0033BC  292E               	incf	(__au8Buffer+4)& (0+255),w,b
  9689  0033BE  A4D8               	btfss	status,2,c
  9690  0033C0  D018               	goto	l7669
  9691                           
  9692                           ; BSR set to: 1
  9693  0033C2  C083  F032         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  9694  0033C6  0E01               	movlw	1
  9695  0033C8  6E33               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  9696  0033CA  0E00               	movlw	0
  9697  0033CC  6E34               	movwf	(??_ModbusProcess_FC5+2)& (0+255),c
  9698  0033CE  2A32               	incf	??_ModbusProcess_FC5,f,c
  9699  0033D0  D004               	goto	u7144
  9700  0033D2                     u7145:
  9701  0033D2  FFFF               	dw	65535	; assembler added errata NOP
  9702  0033D4  90D8               	bcf	status,0,c
  9703  0033D6  3633               	rlcf	??_ModbusProcess_FC5+1,f,c
  9704  0033D8  3634               	rlcf	??_ModbusProcess_FC5+2,f,c
  9705  0033DA                     u7144:
  9706  0033DA  FFFF               	dw	65535	; assembler added errata NOP
  9707  0033DC  2E32               	decfsz	??_ModbusProcess_FC5,f,c
  9708  0033DE  D7F9               	goto	u7145
  9709  0033E0  C030  FFD9         	movff	ModbusProcess_FC5@regs,fsr2l
  9710  0033E4  C031  FFDA         	movff	ModbusProcess_FC5@regs+1,fsr2h
  9711  0033E8  5033               	movf	??_ModbusProcess_FC5+1,w,c
  9712  0033EA  12DE               	iorwf	postinc2,f,c
  9713  0033EC  5034               	movf	??_ModbusProcess_FC5+2,w,c
  9714  0033EE  12DD               	iorwf	postdec2,f,c
  9715  0033F0  D01C               	goto	l7671
  9716  0033F2                     l7669:
  9717  0033F2  FFFF               	dw	65535	; assembler added errata NOP
  9718  0033F4  C083  F032         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  9719  0033F8  0E01               	movlw	1
  9720  0033FA  6E33               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  9721  0033FC  0E00               	movlw	0
  9722  0033FE  6E34               	movwf	(??_ModbusProcess_FC5+2)& (0+255),c
  9723  003400  2A32               	incf	??_ModbusProcess_FC5,f,c
  9724  003402  D004               	goto	u7154
  9725  003404                     u7155:
  9726  003404  FFFF               	dw	65535	; assembler added errata NOP
  9727  003406  90D8               	bcf	status,0,c
  9728  003408  3633               	rlcf	??_ModbusProcess_FC5+1,f,c
  9729  00340A  3634               	rlcf	??_ModbusProcess_FC5+2,f,c
  9730  00340C                     u7154:
  9731  00340C  FFFF               	dw	65535	; assembler added errata NOP
  9732  00340E  2E32               	decfsz	??_ModbusProcess_FC5,f,c
  9733  003410  D7F9               	goto	u7155
  9734  003412  1C33               	comf	??_ModbusProcess_FC5+1,w,c
  9735  003414  6E35               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  9736  003416  1C34               	comf	??_ModbusProcess_FC5+2,w,c
  9737  003418  6E36               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  9738  00341A  C030  FFD9         	movff	ModbusProcess_FC5@regs,fsr2l
  9739  00341E  C031  FFDA         	movff	ModbusProcess_FC5@regs+1,fsr2h
  9740  003422  5035               	movf	??_ModbusProcess_FC5+3,w,c
  9741  003424  16DE               	andwf	postinc2,f,c
  9742  003426  5036               	movf	??_ModbusProcess_FC5+4,w,c
  9743  003428  16DD               	andwf	postdec2,f,c
  9744  00342A                     l7671:
  9745  00342A  FFFF               	dw	65535	; assembler added errata NOP
  9746                           
  9747                           ;ModbusRtu.c: 1094: _u8BufferSize = 6;
  9748  00342C  0E06               	movlw	6
  9749  00342E  6E53               	movwf	__u8BufferSize,c
  9750                           
  9751                           ;ModbusRtu.c: 1095: u8CopyBufferSize = _u8BufferSize + 2;
  9752  003430  5053               	movf	__u8BufferSize,w,c
  9753  003432  0F02               	addlw	2
  9754  003434  0100               	movlb	0	; () banked
  9755  003436  6F80               	movwf	ModbusProcess_FC5@u8CopyBufferSize& (0+255),b
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;ModbusRtu.c: 1096: ModbusSendTxBuffer();
  9759  003438  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
  9760                           
  9761                           ;ModbusRtu.c: 1098: return u8CopyBufferSize;
  9762  00343C  0100               	movlb	0	; () banked
  9763  00343E  5180               	movf	ModbusProcess_FC5@u8CopyBufferSize& (0+255),w,b
  9764                           
  9765                           ; BSR set to: 0
  9766                           
  9767                           ; BSR set to: 0
  9768  003440  0012               	return		;funcret
  9769  003442  FFFF               	dw	65535	; errata NOP
  9770  003444                     __end_of_ModbusProcess_FC5:
  9771                           	opt stack 0
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           intcon	equ	0xFF2
  9779                           postinc0	equ	0xFEE
  9780                           wreg	equ	0xFE8
  9781                           postdec1	equ	0xFE5
  9782                           fsr1h	equ	0xFE2
  9783                           fsr1l	equ	0xFE1
  9784                           indf2	equ	0xFDF
  9785                           postinc2	equ	0xFDE
  9786                           postdec2	equ	0xFDD
  9787                           fsr2h	equ	0xFDA
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function _ModbusProcess_FC43 *****************
  9792 ;; Defined at:
  9793 ;;		line 1376 in file "ModbusRtu.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  objId           1   49[COMRAM] unsigned char 
  9798 ;;  u8CopyBuffer    1   48[COMRAM] unsigned char 
  9799 ;;  devIdCode       1   47[COMRAM] unsigned char 
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      unsigned char 
  9802 ;; Registers used:
  9803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9809 ;;      Params:         0       0       0       0       0       0       0
  9810 ;;      Locals:         3       0       0       0       0       0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0
  9812 ;;      Totals:         3       0       0       0       0       0       0
  9813 ;;Total ram usage:        3 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    4
  9816 ;; This function calls:
  9817 ;;		_CopyStringToBuffer
  9818 ;;		_ModbusSendTxBuffer
  9819 ;; This function is called by:
  9820 ;;		_ModbusPoll
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           	psect	text42
  9825  001EE8                     __ptext42:
  9826                           	opt stack 0
  9827  001EE8                     _ModbusProcess_FC43:
  9828                           	opt stack 25
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;incstack = 0
  9832  001EE8  FFFF               	dw	65535
  9833                           
  9834                           ;ModbusRtu.c: 1378: uint8_t devIdCode = _au8Buffer[ 3 ];
  9835  001EEA  C12D  F030         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  9836                           
  9837                           ;ModbusRtu.c: 1386: uint8_t objId = _au8Buffer[ 4 ];
  9838  001EEE  C12E  F032         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  9839                           
  9840                           ;ModbusRtu.c: 1397: _au8Buffer[ 5 ] = 0x00;
  9841  001EF2  0E00               	movlw	0
  9842  001EF4  0101               	movlb	1	; () banked
  9843  001EF6  6F2F               	movwf	(__au8Buffer+5)& (0+255),b
  9844                           
  9845                           ;ModbusRtu.c: 1398: _au8Buffer[ 6 ] = 0x00;
  9846  001EF8  0E00               	movlw	0
  9847  001EFA  0101               	movlb	1	; () banked
  9848  001EFC  6F30               	movwf	(__au8Buffer+6)& (0+255),b
  9849                           
  9850                           ;ModbusRtu.c: 1400: _u8BufferSize = 8;
  9851  001EFE  0E08               	movlw	8
  9852  001F00  6E53               	movwf	__u8BufferSize,c
  9853                           
  9854                           ;ModbusRtu.c: 1401: switch(devIdCode)
  9855  001F02  D0CE               	goto	l7967
  9856  001F04                     l7913:
  9857  001F04  FFFF               	dw	65535	; assembler added errata NOP
  9858                           
  9859                           ;ModbusRtu.c: 1404: _au8Buffer[ 4 ] = 0x81;
  9860  001F06  0E81               	movlw	129
  9861  001F08  0101               	movlb	1	; () banked
  9862  001F0A  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9863                           
  9864                           ;ModbusRtu.c: 1405: _au8Buffer[ 7 ] = 3;
  9865  001F0C  0E03               	movlw	3
  9866  001F0E  0101               	movlb	1	; () banked
  9867  001F10  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9868                           
  9869                           ; BSR set to: 1
  9870                           ;ModbusRtu.c: 1406: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  9871  001F12  0E49               	movlw	low STR_1
  9872  001F14  6E21               	movwf	CopyStringToBuffer@src,c
  9873  001F16  0E06               	movlw	high STR_1
  9874  001F18  6E22               	movwf	CopyStringToBuffer@src+1,c
  9875  001F1A  0E06               	movlw	6
  9876  001F1C  6E23               	movwf	CopyStringToBuffer@len,c
  9877  001F1E  0E00               	movlw	0
  9878  001F20  EC40  F01C         	call	_CopyStringToBuffer
  9879                           
  9880                           ;ModbusRtu.c: 1407: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  9881  001F24  0E40               	movlw	low STR_3
  9882  001F26  6E21               	movwf	CopyStringToBuffer@src,c
  9883  001F28  0E06               	movlw	high STR_3
  9884  001F2A  6E22               	movwf	CopyStringToBuffer@src+1,c
  9885  001F2C  0E09               	movlw	9
  9886  001F2E  6E23               	movwf	CopyStringToBuffer@len,c
  9887  001F30  0E01               	movlw	1
  9888  001F32  EC40  F01C         	call	_CopyStringToBuffer
  9889                           
  9890                           ;ModbusRtu.c: 1408: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  9891  001F36  0E4F               	movlw	low STR_5
  9892  001F38  6E21               	movwf	CopyStringToBuffer@src,c
  9893  001F3A  0E06               	movlw	high STR_5
  9894  001F3C  6E22               	movwf	CopyStringToBuffer@src+1,c
  9895  001F3E  0E05               	movlw	5
  9896  001F40  6E23               	movwf	CopyStringToBuffer@len,c
  9897  001F42  0E02               	movlw	2
  9898  001F44  EC40  F01C         	call	_CopyStringToBuffer
  9899                           
  9900                           ;ModbusRtu.c: 1409: break;
  9901  001F48  D0B6               	goto	l1017
  9902  001F4A                     l7921:
  9903  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  9904                           
  9905                           ;ModbusRtu.c: 1411: _au8Buffer[ 4 ] = 0x82;
  9906  001F4C  0E82               	movlw	130
  9907  001F4E  0101               	movlb	1	; () banked
  9908  001F50  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9909                           
  9910                           ;ModbusRtu.c: 1412: _au8Buffer[ 7 ] = 4;
  9911  001F52  0E04               	movlw	4
  9912  001F54  0101               	movlb	1	; () banked
  9913  001F56  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9914                           
  9915                           ; BSR set to: 1
  9916                           ;ModbusRtu.c: 1413: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  9917  001F58  0E25               	movlw	low STR_7
  9918  001F5A  6E21               	movwf	CopyStringToBuffer@src,c
  9919  001F5C  0E06               	movlw	high STR_7
  9920  001F5E  6E22               	movwf	CopyStringToBuffer@src+1,c
  9921  001F60  0E10               	movlw	16
  9922  001F62  6E23               	movwf	CopyStringToBuffer@len,c
  9923  001F64  0E03               	movlw	3
  9924  001F66  EC40  F01C         	call	_CopyStringToBuffer
  9925                           
  9926                           ;ModbusRtu.c: 1414: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  9927  001F6A  0E11               	movlw	low STR_9
  9928  001F6C  6E21               	movwf	CopyStringToBuffer@src,c
  9929  001F6E  0E06               	movlw	high STR_9
  9930  001F70  6E22               	movwf	CopyStringToBuffer@src+1,c
  9931  001F72  0E14               	movlw	20
  9932  001F74  6E23               	movwf	CopyStringToBuffer@len,c
  9933  001F76  0E04               	movlw	4
  9934  001F78  EC40  F01C         	call	_CopyStringToBuffer
  9935                           
  9936                           ;ModbusRtu.c: 1415: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  9937  001F7C  0E54               	movlw	low STR_11
  9938  001F7E  6E21               	movwf	CopyStringToBuffer@src,c
  9939  001F80  0E06               	movlw	high STR_11
  9940  001F82  6E22               	movwf	CopyStringToBuffer@src+1,c
  9941  001F84  0E04               	movlw	4
  9942  001F86  6E23               	movwf	CopyStringToBuffer@len,c
  9943  001F88  0E05               	movlw	5
  9944  001F8A  EC40  F01C         	call	_CopyStringToBuffer
  9945                           
  9946                           ;ModbusRtu.c: 1416: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  9947  001F8E  0E35               	movlw	low STR_13
  9948  001F90  6E21               	movwf	CopyStringToBuffer@src,c
  9949  001F92  0E06               	movlw	high STR_13
  9950  001F94  6E22               	movwf	CopyStringToBuffer@src+1,c
  9951  001F96  0E0B               	movlw	11
  9952  001F98  6E23               	movwf	CopyStringToBuffer@len,c
  9953  001F9A  0E06               	movlw	6
  9954  001F9C  EC40  F01C         	call	_CopyStringToBuffer
  9955                           
  9956                           ;ModbusRtu.c: 1417: break;
  9957  001FA0  D08A               	goto	l1017
  9958  001FA2                     l7931:
  9959  001FA2  FFFF               	dw	65535	; assembler added errata NOP
  9960                           
  9961                           ;ModbusRtu.c: 1419: _au8Buffer[ 7 ] = 1;
  9962  001FA4  0E01               	movlw	1
  9963  001FA6  0101               	movlb	1	; () banked
  9964  001FA8  6F31               	movwf	(__au8Buffer+7)& (0+255),b
  9965                           
  9966                           ;ModbusRtu.c: 1420: switch(objId)
  9967  001FAA  D062               	goto	l7963
  9968  001FAC                     l7933:
  9969  001FAC  FFFF               	dw	65535	; assembler added errata NOP
  9970                           
  9971                           ;ModbusRtu.c: 1423: _au8Buffer[ 4 ] = 0x81;
  9972  001FAE  0E81               	movlw	129
  9973  001FB0  0101               	movlb	1	; () banked
  9974  001FB2  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9975                           
  9976                           ; BSR set to: 1
  9977                           ;ModbusRtu.c: 1424: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  9978  001FB4  0E49               	movlw	low STR_1
  9979  001FB6  6E21               	movwf	CopyStringToBuffer@src,c
  9980  001FB8  0E06               	movlw	high STR_1
  9981  001FBA  6E22               	movwf	CopyStringToBuffer@src+1,c
  9982  001FBC  0E06               	movlw	6
  9983  001FBE  6E23               	movwf	CopyStringToBuffer@len,c
  9984  001FC0  5032               	movf	ModbusProcess_FC43@objId,w,c
  9985  001FC2  EC40  F01C         	call	_CopyStringToBuffer
  9986                           
  9987                           ;ModbusRtu.c: 1425: break;
  9988  001FC6  D077               	goto	l1017
  9989  001FC8                     l7937:
  9990  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  9991                           
  9992                           ;ModbusRtu.c: 1427: _au8Buffer[ 4 ] = 0x81;
  9993  001FCA  0E81               	movlw	129
  9994  001FCC  0101               	movlb	1	; () banked
  9995  001FCE  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
  9996                           
  9997                           ; BSR set to: 1
  9998                           ;ModbusRtu.c: 1428: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  9999  001FD0  0E40               	movlw	low STR_3
 10000  001FD2  6E21               	movwf	CopyStringToBuffer@src,c
 10001  001FD4  0E06               	movlw	high STR_3
 10002  001FD6  6E22               	movwf	CopyStringToBuffer@src+1,c
 10003  001FD8  0E09               	movlw	9
 10004  001FDA  6E23               	movwf	CopyStringToBuffer@len,c
 10005  001FDC  5032               	movf	ModbusProcess_FC43@objId,w,c
 10006  001FDE  EC40  F01C         	call	_CopyStringToBuffer
 10007                           
 10008                           ;ModbusRtu.c: 1429: break;
 10009  001FE2  D069               	goto	l1017
 10010  001FE4                     l7941:
 10011  001FE4  FFFF               	dw	65535	; assembler added errata NOP
 10012                           
 10013                           ;ModbusRtu.c: 1431: _au8Buffer[ 4 ] = 0x81;
 10014  001FE6  0E81               	movlw	129
 10015  001FE8  0101               	movlb	1	; () banked
 10016  001FEA  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10017                           
 10018                           ; BSR set to: 1
 10019                           ;ModbusRtu.c: 1432: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
 10020  001FEC  0E4F               	movlw	low STR_5
 10021  001FEE  6E21               	movwf	CopyStringToBuffer@src,c
 10022  001FF0  0E06               	movlw	high STR_5
 10023  001FF2  6E22               	movwf	CopyStringToBuffer@src+1,c
 10024  001FF4  0E05               	movlw	5
 10025  001FF6  6E23               	movwf	CopyStringToBuffer@len,c
 10026  001FF8  5032               	movf	ModbusProcess_FC43@objId,w,c
 10027  001FFA  EC40  F01C         	call	_CopyStringToBuffer
 10028                           
 10029                           ;ModbusRtu.c: 1433: break;
 10030  001FFE  D05B               	goto	l1017
 10031  002000                     l7945:
 10032  002000  FFFF               	dw	65535	; assembler added errata NOP
 10033                           
 10034                           ;ModbusRtu.c: 1435: _au8Buffer[ 4 ] = 0x82;
 10035  002002  0E82               	movlw	130
 10036  002004  0101               	movlb	1	; () banked
 10037  002006  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10038                           
 10039                           ; BSR set to: 1
 10040                           ;ModbusRtu.c: 1436: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
 10041  002008  0E25               	movlw	low STR_7
 10042  00200A  6E21               	movwf	CopyStringToBuffer@src,c
 10043  00200C  0E06               	movlw	high STR_7
 10044  00200E  6E22               	movwf	CopyStringToBuffer@src+1,c
 10045  002010  0E10               	movlw	16
 10046  002012  6E23               	movwf	CopyStringToBuffer@len,c
 10047  002014  5032               	movf	ModbusProcess_FC43@objId,w,c
 10048  002016  EC40  F01C         	call	_CopyStringToBuffer
 10049                           
 10050                           ;ModbusRtu.c: 1437: break;
 10051  00201A  D04D               	goto	l1017
 10052  00201C                     l7949:
 10053  00201C  FFFF               	dw	65535	; assembler added errata NOP
 10054                           
 10055                           ;ModbusRtu.c: 1439: _au8Buffer[ 4 ] = 0x82;
 10056  00201E  0E82               	movlw	130
 10057  002020  0101               	movlb	1	; () banked
 10058  002022  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10059                           
 10060                           ; BSR set to: 1
 10061                           ;ModbusRtu.c: 1440: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
 10062  002024  0E11               	movlw	low STR_9
 10063  002026  6E21               	movwf	CopyStringToBuffer@src,c
 10064  002028  0E06               	movlw	high STR_9
 10065  00202A  6E22               	movwf	CopyStringToBuffer@src+1,c
 10066  00202C  0E14               	movlw	20
 10067  00202E  6E23               	movwf	CopyStringToBuffer@len,c
 10068  002030  5032               	movf	ModbusProcess_FC43@objId,w,c
 10069  002032  EC40  F01C         	call	_CopyStringToBuffer
 10070                           
 10071                           ;ModbusRtu.c: 1441: break;
 10072  002036  D03F               	goto	l1017
 10073  002038                     l7953:
 10074  002038  FFFF               	dw	65535	; assembler added errata NOP
 10075                           
 10076                           ;ModbusRtu.c: 1443: _au8Buffer[ 4 ] = 0x82;
 10077  00203A  0E82               	movlw	130
 10078  00203C  0101               	movlb	1	; () banked
 10079  00203E  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10080                           
 10081                           ; BSR set to: 1
 10082                           ;ModbusRtu.c: 1444: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
 10083  002040  0E54               	movlw	low STR_11
 10084  002042  6E21               	movwf	CopyStringToBuffer@src,c
 10085  002044  0E06               	movlw	high STR_11
 10086  002046  6E22               	movwf	CopyStringToBuffer@src+1,c
 10087  002048  0E04               	movlw	4
 10088  00204A  6E23               	movwf	CopyStringToBuffer@len,c
 10089  00204C  5032               	movf	ModbusProcess_FC43@objId,w,c
 10090  00204E  EC40  F01C         	call	_CopyStringToBuffer
 10091                           
 10092                           ;ModbusRtu.c: 1445: break;
 10093  002052  D031               	goto	l1017
 10094  002054                     l7957:
 10095  002054  FFFF               	dw	65535	; assembler added errata NOP
 10096                           
 10097                           ;ModbusRtu.c: 1447: _au8Buffer[ 4 ] = 0x82;
 10098  002056  0E82               	movlw	130
 10099  002058  0101               	movlb	1	; () banked
 10100  00205A  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 10101                           
 10102                           ; BSR set to: 1
 10103                           ;ModbusRtu.c: 1448: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
 10104  00205C  0E35               	movlw	low STR_13
 10105  00205E  6E21               	movwf	CopyStringToBuffer@src,c
 10106  002060  0E06               	movlw	high STR_13
 10107  002062  6E22               	movwf	CopyStringToBuffer@src+1,c
 10108  002064  0E0B               	movlw	11
 10109  002066  6E23               	movwf	CopyStringToBuffer@len,c
 10110  002068  5032               	movf	ModbusProcess_FC43@objId,w,c
 10111  00206A  EC40  F01C         	call	_CopyStringToBuffer
 10112                           
 10113                           ;ModbusRtu.c: 1450: }
 10114                           
 10115                           ;ModbusRtu.c: 1449: break;
 10116  00206E  D023               	goto	l1017
 10117  002070                     l7963:
 10118  002070  FFFF               	dw	65535	; assembler added errata NOP
 10119  002072  5032               	movf	ModbusProcess_FC43@objId,w,c
 10120                           
 10121                           ; Switch size 1, requested type "space"
 10122                           ; Number of cases is 7, Range of values is 0 to 6
 10123                           ; switch strategies available:
 10124                           ; Name         Instructions Cycles
 10125                           ; simple_byte           22    12 (average)
 10126                           ;	Chosen strategy is simple_byte
 10127  002074  0A00               	xorlw	0	; case 0
 10128  002076  B4D8               	btfsc	status,2,c
 10129  002078  D799               	goto	l7933
 10130  00207A  0A01               	xorlw	1	; case 1
 10131  00207C  B4D8               	btfsc	status,2,c
 10132  00207E  D7A4               	goto	l7937
 10133  002080  0A03               	xorlw	3	; case 2
 10134  002082  B4D8               	btfsc	status,2,c
 10135  002084  D7AF               	goto	l7941
 10136  002086  0A01               	xorlw	1	; case 3
 10137  002088  B4D8               	btfsc	status,2,c
 10138  00208A  D7BA               	goto	l7945
 10139  00208C  0A07               	xorlw	7	; case 4
 10140  00208E  B4D8               	btfsc	status,2,c
 10141  002090  D7C5               	goto	l7949
 10142  002092  0A01               	xorlw	1	; case 5
 10143  002094  B4D8               	btfsc	status,2,c
 10144  002096  D7D0               	goto	l7953
 10145  002098  0A03               	xorlw	3	; case 6
 10146  00209A  B4D8               	btfsc	status,2,c
 10147  00209C  D7DB               	goto	l7957
 10148                           
 10149                           ;ModbusRtu.c: 1452: }
 10150                           
 10151                           ;ModbusRtu.c: 1451: break;
 10152  00209E  D00B               	goto	l1017
 10153  0020A0                     l7967:
 10154  0020A0  FFFF               	dw	65535	; assembler added errata NOP
 10155  0020A2  5030               	movf	ModbusProcess_FC43@devIdCode,w,c
 10156                           
 10157                           ; Switch size 1, requested type "space"
 10158                           ; Number of cases is 3, Range of values is 1 to 4
 10159                           ; switch strategies available:
 10160                           ; Name         Instructions Cycles
 10161                           ; simple_byte           10     6 (average)
 10162                           ;	Chosen strategy is simple_byte
 10163  0020A4  0A01               	xorlw	1	; case 1
 10164  0020A6  B4D8               	btfsc	status,2,c
 10165  0020A8  D72D               	goto	l7913
 10166  0020AA  0A03               	xorlw	3	; case 2
 10167  0020AC  B4D8               	btfsc	status,2,c
 10168  0020AE  D74D               	goto	l7921
 10169  0020B0  0A06               	xorlw	6	; case 4
 10170  0020B2  B4D8               	btfsc	status,2,c
 10171  0020B4  D776               	goto	l7931
 10172  0020B6                     l1017:
 10173  0020B6  FFFF               	dw	65535	; assembler added errata NOP
 10174                           
 10175                           ;ModbusRtu.c: 1453: uint8_t u8CopyBufferSize = _u8BufferSize;
 10176  0020B8  C053  F031         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
 10177                           
 10178                           ;ModbusRtu.c: 1454: ModbusSendTxBuffer();
 10179  0020BC  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10180                           
 10181                           ;ModbusRtu.c: 1456: return u8CopyBufferSize;
 10182  0020C0  5031               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
 10183  0020C2  0012               	return		;funcret
 10184  0020C4  FFFF               	dw	65535	; errata NOP
 10185  0020C6                     __end_of_ModbusProcess_FC43:
 10186                           	opt stack 0
 10187                           tblptru	equ	0xFF8
 10188                           tblptrh	equ	0xFF7
 10189                           tblptrl	equ	0xFF6
 10190                           tablat	equ	0xFF5
 10191                           prodh	equ	0xFF4
 10192                           prodl	equ	0xFF3
 10193                           intcon	equ	0xFF2
 10194                           postinc0	equ	0xFEE
 10195                           wreg	equ	0xFE8
 10196                           postdec1	equ	0xFE5
 10197                           fsr1h	equ	0xFE2
 10198                           fsr1l	equ	0xFE1
 10199                           indf2	equ	0xFDF
 10200                           postinc2	equ	0xFDE
 10201                           postdec2	equ	0xFDD
 10202                           fsr2h	equ	0xFDA
 10203                           fsr2l	equ	0xFD9
 10204                           status	equ	0xFD8
 10205                           
 10206 ;; *************** function _CopyStringToBuffer *****************
 10207 ;; Defined at:
 10208 ;;		line 1367 in file "ModbusRtu.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  objId           1    wreg     unsigned char 
 10211 ;;  src             2   32[COMRAM] PTR const unsigned char 
 10212 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
 10213 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
 10214 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
 10215 ;;		 -> STR_3(9), STR_1(6), 
 10216 ;;  len             1   34[COMRAM] unsigned char 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  objId           1   37[COMRAM] unsigned char 
 10219 ;;  i               1   38[COMRAM] unsigned char 
 10220 ;; Return value:  Size  Location     Type
 10221 ;;                  1    wreg      void 
 10222 ;; Registers used:
 10223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10229 ;;      Params:         3       0       0       0       0       0       0
 10230 ;;      Locals:         2       0       0       0       0       0       0
 10231 ;;      Temps:          2       0       0       0       0       0       0
 10232 ;;      Totals:         7       0       0       0       0       0       0
 10233 ;;Total ram usage:        7 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    2
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_ModbusProcess_FC43
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           	psect	text43
 10244  003880                     __ptext43:
 10245                           	opt stack 0
 10246  003880                     _CopyStringToBuffer:
 10247                           	opt stack 26
 10248                           
 10249                           ;incstack = 0
 10250  003880  FFFF               	dw	65535
 10251                           
 10252                           ;CopyStringToBuffer@objId stored from wreg
 10253  003882  6E26               	movwf	CopyStringToBuffer@objId,c
 10254                           
 10255                           ;ModbusRtu.c: 1369: len--;
 10256  003884  0623               	decf	CopyStringToBuffer@len,f,c
 10257                           
 10258                           ;ModbusRtu.c: 1370: _au8Buffer[_u8BufferSize++] = objId;
 10259  003886  5053               	movf	__u8BufferSize,w,c
 10260  003888  0D01               	mullw	1
 10261  00388A  0E2A               	movlw	low __au8Buffer
 10262  00388C  24F3               	addwf	prodl,w,c
 10263  00388E  6ED9               	movwf	fsr2l,c
 10264  003890  0E01               	movlw	high __au8Buffer
 10265  003892  20F4               	addwfc	prodh,w,c
 10266  003894  6EDA               	movwf	fsr2h,c
 10267  003896  C026  FFDF         	movff	CopyStringToBuffer@objId,indf2
 10268  00389A  2A53               	incf	__u8BufferSize,f,c
 10269                           
 10270                           ;ModbusRtu.c: 1371: _au8Buffer[_u8BufferSize++] = len;
 10271  00389C  5053               	movf	__u8BufferSize,w,c
 10272  00389E  0D01               	mullw	1
 10273  0038A0  0E2A               	movlw	low __au8Buffer
 10274  0038A2  24F3               	addwf	prodl,w,c
 10275  0038A4  6ED9               	movwf	fsr2l,c
 10276  0038A6  0E01               	movlw	high __au8Buffer
 10277  0038A8  20F4               	addwfc	prodh,w,c
 10278  0038AA  6EDA               	movwf	fsr2h,c
 10279  0038AC  C023  FFDF         	movff	CopyStringToBuffer@len,indf2
 10280  0038B0  2A53               	incf	__u8BufferSize,f,c
 10281                           
 10282                           ;ModbusRtu.c: 1372: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
 10283  0038B2  0E00               	movlw	0
 10284  0038B4  6E27               	movwf	CopyStringToBuffer@i,c
 10285  0038B6  D01D               	goto	l7243
 10286  0038B8                     l7237:
 10287  0038B8  FFFF               	dw	65535	; assembler added errata NOP
 10288                           
 10289                           ;ModbusRtu.c: 1373: _au8Buffer[_u8BufferSize] = src[i];
 10290  0038BA  5027               	movf	CopyStringToBuffer@i,w,c
 10291  0038BC  0D01               	mullw	1
 10292  0038BE  C021  F024         	movff	CopyStringToBuffer@src,??_CopyStringToBuffer
 10293  0038C2  C022  F025         	movff	CopyStringToBuffer@src+1,??_CopyStringToBuffer+1
 10294  0038C6  50F3               	movf	prodl,w,c
 10295  0038C8  2624               	addwf	??_CopyStringToBuffer,f,c
 10296  0038CA  50F4               	movf	prodh,w,c
 10297  0038CC  2225               	addwfc	??_CopyStringToBuffer+1,f,c
 10298  0038CE  C024  FFF6         	movff	??_CopyStringToBuffer,tblptrl
 10299  0038D2  C025  FFF7         	movff	??_CopyStringToBuffer+1,tblptrh
 10300  0038D6                     	if	0	;tblptru may be non-zero
 10301  0038D6                     	endif
 10302  0038D6                     	if	0	;tblptru may be non-zero
 10303  0038D6                     	endif
 10304  0038D6  5053               	movf	__u8BufferSize,w,c
 10305  0038D8  0D01               	mullw	1
 10306  0038DA  0E2A               	movlw	low __au8Buffer
 10307  0038DC  24F3               	addwf	prodl,w,c
 10308  0038DE  6ED9               	movwf	fsr2l,c
 10309  0038E0  0E01               	movlw	high __au8Buffer
 10310  0038E2  20F4               	addwfc	prodh,w,c
 10311  0038E4  6EDA               	movwf	fsr2h,c
 10312  0038E6  0008               	tblrd		*
 10313  0038E8  FFFF               	dw	65535	; errata NOP
 10314  0038EA  CFF5 FFDF          	movff	tablat,indf2
 10315  0038EE  2A27               	incf	CopyStringToBuffer@i,f,c
 10316  0038F0  2A53               	incf	__u8BufferSize,f,c
 10317  0038F2                     l7243:
 10318  0038F2  FFFF               	dw	65535	; assembler added errata NOP
 10319  0038F4  5023               	movf	CopyStringToBuffer@len,w,c
 10320  0038F6  5C27               	subwf	CopyStringToBuffer@i,w,c
 10321  0038F8  B0D8               	btfsc	status,0,c
 10322  0038FA  0012               	return		;funcret
 10323  0038FC  FFFF               	dw	65535	; assembler added errata NOP
 10324  0038FE  D7DC               	goto	l7237
 10325  003900  FFFF               	dw	65535	; errata NOP
 10326  003902                     __end_of_CopyStringToBuffer:
 10327                           	opt stack 0
 10328                           tblptru	equ	0xFF8
 10329                           tblptrh	equ	0xFF7
 10330                           tblptrl	equ	0xFF6
 10331                           tablat	equ	0xFF5
 10332                           prodh	equ	0xFF4
 10333                           prodl	equ	0xFF3
 10334                           intcon	equ	0xFF2
 10335                           postinc0	equ	0xFEE
 10336                           wreg	equ	0xFE8
 10337                           postdec1	equ	0xFE5
 10338                           fsr1h	equ	0xFE2
 10339                           fsr1l	equ	0xFE1
 10340                           indf2	equ	0xFDF
 10341                           postinc2	equ	0xFDE
 10342                           postdec2	equ	0xFDD
 10343                           fsr2h	equ	0xFDA
 10344                           fsr2l	equ	0xFD9
 10345                           status	equ	0xFD8
 10346                           
 10347 ;; *************** function _ModbusProcess_FC3 *****************
 10348 ;; Defined at:
 10349 ;;		line 1041 in file "ModbusRtu.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;  regs            2   47[COMRAM] PTR unsigned short 
 10352 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
 10353 ;;  u8size          1   49[COMRAM] unsigned char 
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;  u16regsno       2    1[BANK0 ] unsigned short 
 10356 ;;  i               1    4[BANK0 ] unsigned char 
 10357 ;;  u8StartAdd      1    3[BANK0 ] unsigned char 
 10358 ;;  u8CopyBuffer    1    0[BANK0 ] unsigned char 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  1    wreg      unsigned char 
 10361 ;; Registers used:
 10362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10368 ;;      Params:         3       0       0       0       0       0       0
 10369 ;;      Locals:         0       5       0       0       0       0       0
 10370 ;;      Temps:          4       0       0       0       0       0       0
 10371 ;;      Totals:         7       5       0       0       0       0       0
 10372 ;;Total ram usage:       12 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    4
 10375 ;; This function calls:
 10376 ;;		_ModbusSendTxBuffer
 10377 ;; This function is called by:
 10378 ;;		_ModbusPoll
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           
 10382                           	psect	text44
 10383  002D0E                     __ptext44:
 10384                           	opt stack 0
 10385  002D0E                     _ModbusProcess_FC3:
 10386                           	opt stack 25
 10387                           
 10388                           ;incstack = 0
 10389  002D0E  FFFF               	dw	65535
 10390                           
 10391                           ;ModbusRtu.c: 1043: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer
      +                          [ ADD_LO ]);
 10392  002D10  C12D  F083         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
 10393                           
 10394                           ;ModbusRtu.c: 1044: _lastAddress = u8StartAdd;
 10395  002D14  C083  F0E2         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
 10396  002D18  0100               	movlb	0	; () banked
 10397  002D1A  6BE3               	clrf	(__lastAddress+1)& (0+255),b
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;ModbusRtu.c: 1045: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
 10401  002D1C  0101               	movlb	1	; () banked
 10402  002D1E  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 10403  002D20  6E33               	movwf	??_ModbusProcess_FC3& (0+255),c
 10404  002D22  0101               	movlb	1	; () banked
 10405  002D24  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 10406  002D26  0100               	movlb	0	; () banked
 10407  002D28  6F81               	movwf	ModbusProcess_FC3@u16regsno& (0+255),b
 10408  002D2A  C033  F082         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;ModbusRtu.c: 1046: _lastCount = u16regsno;
 10412  002D2E  C081  F0E4         	movff	ModbusProcess_FC3@u16regsno,__lastCount
 10413  002D32  C082  F0E5         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;ModbusRtu.c: 1047: uint8_t u8CopyBufferSize;
 10417                           ;ModbusRtu.c: 1048: uint8_t i;
 10418                           ;ModbusRtu.c: 1050: _au8Buffer[ 2 ] = u16regsno * 2;
 10419  002D36  0100               	movlb	0	; () banked
 10420  002D38  5181               	movf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10421  002D3A  2581               	addwf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10422  002D3C  0101               	movlb	1	; () banked
 10423  002D3E  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 10424                           
 10425                           ; BSR set to: 1
 10426                           ;ModbusRtu.c: 1051: _u8BufferSize = 3;
 10427  002D40  0E03               	movlw	3
 10428  002D42  6E53               	movwf	__u8BufferSize,c
 10429                           
 10430                           ; BSR set to: 1
 10431                           ;ModbusRtu.c: 1053: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
 10432  002D44  C083  F084         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
 10433  002D48  D032               	goto	l7649
 10434  002D4A                     l7643:
 10435  002D4A  FFFF               	dw	65535	; assembler added errata NOP
 10436                           
 10437                           ;ModbusRtu.c: 1054: {
 10438                           ;ModbusRtu.c: 1055: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF))
      +                          ;
 10439  002D4C  5053               	movf	__u8BufferSize,w,c
 10440  002D4E  0D01               	mullw	1
 10441  002D50  0E2A               	movlw	low __au8Buffer
 10442  002D52  24F3               	addwf	prodl,w,c
 10443  002D54  6ED9               	movwf	fsr2l,c
 10444  002D56  0E01               	movlw	high __au8Buffer
 10445  002D58  20F4               	addwfc	prodh,w,c
 10446  002D5A  6EDA               	movwf	fsr2h,c
 10447  002D5C  0100               	movlb	0	; () banked
 10448  002D5E  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10449  002D60  0D02               	mullw	2
 10450  002D62  50F3               	movf	prodl,w,c
 10451  002D64  2430               	addwf	ModbusProcess_FC3@regs,w,c
 10452  002D66  6EE1               	movwf	fsr1l,c
 10453  002D68  50F4               	movf	prodh,w,c
 10454  002D6A  2031               	addwfc	ModbusProcess_FC3@regs+1,w,c
 10455  002D6C  6EE2               	movwf	fsr1h,c
 10456  002D6E  CFE6 F033          	movff	postinc1,??_ModbusProcess_FC3
 10457  002D72  CFE5 F034          	movff	postdec1,??_ModbusProcess_FC3+1
 10458  002D76  C034  F033         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
 10459  002D7A  6A34               	clrf	??_ModbusProcess_FC3+1,c
 10460  002D7C  5033               	movf	??_ModbusProcess_FC3,w,c
 10461  002D7E  6EDF               	movwf	indf2,c
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;ModbusRtu.c: 1056: _u8BufferSize++;
 10465  002D80  2A53               	incf	__u8BufferSize,f,c
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;ModbusRtu.c: 1057: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
 10469  002D82  0100               	movlb	0	; () banked
 10470  002D84  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10471  002D86  0D02               	mullw	2
 10472  002D88  50F3               	movf	prodl,w,c
 10473  002D8A  2430               	addwf	ModbusProcess_FC3@regs,w,c
 10474  002D8C  6ED9               	movwf	fsr2l,c
 10475  002D8E  50F4               	movf	prodh,w,c
 10476  002D90  2031               	addwfc	ModbusProcess_FC3@regs+1,w,c
 10477  002D92  6EDA               	movwf	fsr2h,c
 10478  002D94  5053               	movf	__u8BufferSize,w,c
 10479  002D96  0D01               	mullw	1
 10480  002D98  0E2A               	movlw	low __au8Buffer
 10481  002D9A  24F3               	addwf	prodl,w,c
 10482  002D9C  6EE1               	movwf	fsr1l,c
 10483  002D9E  0E01               	movlw	high __au8Buffer
 10484  002DA0  20F4               	addwfc	prodh,w,c
 10485  002DA2  6EE2               	movwf	fsr1h,c
 10486  002DA4  CFDF FFE7          	movff	indf2,indf1
 10487                           
 10488                           ;ModbusRtu.c: 1058: _u8BufferSize++;
 10489  002DA8  2A53               	incf	__u8BufferSize,f,c
 10490  002DAA  0100               	movlb	0	; () banked
 10491  002DAC  2B84               	incf	ModbusProcess_FC3@i& (0+255),f,b
 10492  002DAE                     l7649:
 10493  002DAE  FFFF               	dw	65535	; assembler added errata NOP
 10494  002DB0  0100               	movlb	0	; () banked
 10495  002DB2  5183               	movf	ModbusProcess_FC3@u8StartAdd& (0+255),w,b
 10496  002DB4  0100               	movlb	0	; () banked
 10497  002DB6  2581               	addwf	ModbusProcess_FC3@u16regsno& (0+255),w,b
 10498  002DB8  6E33               	movwf	??_ModbusProcess_FC3& (0+255),c
 10499  002DBA  0E00               	movlw	0
 10500  002DBC  0100               	movlb	0	; () banked
 10501  002DBE  2182               	addwfc	(ModbusProcess_FC3@u16regsno+1)& (0+255),w,b
 10502  002DC0  6E34               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
 10503  002DC2  0100               	movlb	0	; () banked
 10504  002DC4  5184               	movf	ModbusProcess_FC3@i& (0+255),w,b
 10505  002DC6  6E35               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
 10506  002DC8  6A36               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
 10507  002DCA  5033               	movf	??_ModbusProcess_FC3,w,c
 10508  002DCC  5C35               	subwf	??_ModbusProcess_FC3+2,w,c
 10509  002DCE  5034               	movf	??_ModbusProcess_FC3+1,w,c
 10510  002DD0  5836               	subwfb	??_ModbusProcess_FC3+3,w,c
 10511  002DD2  A0D8               	btfss	status,0,c
 10512  002DD4  D7BA               	goto	l7643
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;ModbusRtu.c: 1059: }
 10516                           ;ModbusRtu.c: 1060: u8CopyBufferSize = _u8BufferSize + 2;
 10517                           
 10518                           ; BSR set to: 0
 10519  002DD6  5053               	movf	__u8BufferSize,w,c
 10520  002DD8  0F02               	addlw	2
 10521  002DDA  0100               	movlb	0	; () banked
 10522  002DDC  6F80               	movwf	ModbusProcess_FC3@u8CopyBufferSize& (0+255),b
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;ModbusRtu.c: 1061: ModbusSendTxBuffer();
 10526  002DDE  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10527                           
 10528                           ;ModbusRtu.c: 1063: return u8CopyBufferSize;
 10529  002DE2  0100               	movlb	0	; () banked
 10530  002DE4  5180               	movf	ModbusProcess_FC3@u8CopyBufferSize& (0+255),w,b
 10531                           
 10532                           ; BSR set to: 0
 10533                           
 10534                           ; BSR set to: 0
 10535  002DE6  0012               	return		;funcret
 10536  002DE8  FFFF               	dw	65535	; errata NOP
 10537  002DEA                     __end_of_ModbusProcess_FC3:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           postinc0	equ	0xFEE
 10547                           wreg	equ	0xFE8
 10548                           indf1	equ	0xFE7
 10549                           postinc1	equ	0xFE6
 10550                           postdec1	equ	0xFE5
 10551                           fsr1h	equ	0xFE2
 10552                           fsr1l	equ	0xFE1
 10553                           indf2	equ	0xFDF
 10554                           postinc2	equ	0xFDE
 10555                           postdec2	equ	0xFDD
 10556                           fsr2h	equ	0xFDA
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _ModbusProcess_FC21 *****************
 10561 ;; Defined at:
 10562 ;;		line 1333 in file "ModbusRtu.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;  recLenBytes     2   53[COMRAM] unsigned short 
 10567 ;;  startAddrsBy    2   51[COMRAM] unsigned short 
 10568 ;;  i               1   55[COMRAM] unsigned char 
 10569 ;;  u8CopyBuffer    1   50[COMRAM] unsigned char 
 10570 ;;  requestDataL    1   49[COMRAM] unsigned char 
 10571 ;; Return value:  Size  Location     Type
 10572 ;;                  1    wreg      unsigned char 
 10573 ;; Registers used:
 10574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10575 ;; Tracked objects:
 10576 ;;		On entry : 0/0
 10577 ;;		On exit  : 0/0
 10578 ;;		Unchanged: 0/0
 10579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10580 ;;      Params:         0       0       0       0       0       0       0
 10581 ;;      Locals:         7       0       0       0       0       0       0
 10582 ;;      Temps:          2       0       0       0       0       0       0
 10583 ;;      Totals:         9       0       0       0       0       0       0
 10584 ;;Total ram usage:        9 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; Hardware stack levels required when called:    4
 10587 ;; This function calls:
 10588 ;;		_ModbusSendTxBuffer
 10589 ;; This function is called by:
 10590 ;;		_ModbusPoll
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           	psect	text45
 10595  003072                     __ptext45:
 10596                           	opt stack 0
 10597  003072                     _ModbusProcess_FC21:
 10598                           	opt stack 25
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;incstack = 0
 10602  003072  FFFF               	dw	65535
 10603                           
 10604                           ;ModbusRtu.c: 1337: uint8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
 10605  003074  C12C  F032         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
 10606                           
 10607                           ;ModbusRtu.c: 1339: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
 10608  003078  0101               	movlb	1	; () banked
 10609  00307A  5131               	movf	(__au8Buffer+7)& (0+255),w,b
 10610  00307C  C130  F030         	movff	__au8Buffer+6,??_ModbusProcess_FC21
 10611  003080  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10612  003082  C030  F031         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
 10613  003086  6A30               	clrf	??_ModbusProcess_FC21,c
 10614  003088  1230               	iorwf	??_ModbusProcess_FC21,f,c
 10615  00308A  0E00               	movlw	0
 10616  00308C  1231               	iorwf	??_ModbusProcess_FC21+1,f,c
 10617  00308E  90D8               	bcf	status,0,c
 10618  003090  3430               	rlcf	??_ModbusProcess_FC21,w,c
 10619  003092  6E34               	movwf	ModbusProcess_FC21@startAddrsBytes,c
 10620  003094  3431               	rlcf	??_ModbusProcess_FC21+1,w,c
 10621  003096  6E35               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
 10622                           
 10623                           ; BSR set to: 1
 10624                           ;ModbusRtu.c: 1340: _lastAddress = startAddrsBytes;
 10625  003098  C034  F0E2         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
 10626  00309C  C035  F0E3         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
 10627                           
 10628                           ;ModbusRtu.c: 1341: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
 10629  0030A0  0101               	movlb	1	; () banked
 10630  0030A2  5133               	movf	(__au8Buffer+9)& (0+255),w,b
 10631  0030A4  C132  F030         	movff	__au8Buffer+8,??_ModbusProcess_FC21
 10632  0030A8  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10633  0030AA  C030  F031         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
 10634  0030AE  6A30               	clrf	??_ModbusProcess_FC21,c
 10635  0030B0  1230               	iorwf	??_ModbusProcess_FC21,f,c
 10636  0030B2  0E00               	movlw	0
 10637  0030B4  1231               	iorwf	??_ModbusProcess_FC21+1,f,c
 10638  0030B6  90D8               	bcf	status,0,c
 10639  0030B8  3430               	rlcf	??_ModbusProcess_FC21,w,c
 10640  0030BA  6E36               	movwf	ModbusProcess_FC21@recLenBytes,c
 10641  0030BC  3431               	rlcf	??_ModbusProcess_FC21+1,w,c
 10642  0030BE  6E37               	movwf	ModbusProcess_FC21@recLenBytes+1,c
 10643                           
 10644                           ; BSR set to: 1
 10645                           ;ModbusRtu.c: 1342: _lastCount = recLenBytes;
 10646  0030C0  C036  F0E4         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
 10647  0030C4  C037  F0E5         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
 10648                           
 10649                           ;ModbusRtu.c: 1343: uint8_t u8CopyBufferSize;
 10650                           ;ModbusRtu.c: 1344: uint8_t i;
 10651                           ;ModbusRtu.c: 1350: _u8BufferSize = requestDataLen + 1;
 10652  0030C8  2832               	incf	ModbusProcess_FC21@requestDataLen,w,c
 10653  0030CA  6E53               	movwf	__u8BufferSize,c
 10654                           
 10655                           ; BSR set to: 1
 10656                           ;ModbusRtu.c: 1354: for (i = 0; i < recLenBytes; i++)
 10657  0030CC  0E00               	movlw	0
 10658  0030CE  6E38               	movwf	ModbusProcess_FC21@i,c
 10659  0030D0  D025               	goto	l7901
 10660  0030D2                     l996:
 10661  0030D2  FFFF               	dw	65535	; assembler added errata NOP
 10662  0030D4  B2A6               	btfsc	4006,1,c	;volatile
 10663  0030D6  D7FD               	goto	l996
 10664  0030D8  5038               	movf	ModbusProcess_FC21@i,w,c
 10665  0030DA  2434               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
 10666  0030DC  6EA9               	movwf	4009,c	;volatile
 10667  0030DE  5038               	movf	ModbusProcess_FC21@i,w,c
 10668  0030E0  6E30               	movwf	??_ModbusProcess_FC21& (0+255),c
 10669  0030E2  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10670  0030E4  0E0A               	movlw	10
 10671  0030E6  2630               	addwf	??_ModbusProcess_FC21,f,c
 10672  0030E8  0E00               	movlw	0
 10673  0030EA  2231               	addwfc	??_ModbusProcess_FC21+1,f,c
 10674  0030EC  0E2A               	movlw	low __au8Buffer
 10675  0030EE  2430               	addwf	??_ModbusProcess_FC21,w,c
 10676  0030F0  6ED9               	movwf	fsr2l,c
 10677  0030F2  0E01               	movlw	high __au8Buffer
 10678  0030F4  2031               	addwfc	??_ModbusProcess_FC21+1,w,c
 10679  0030F6  6EDA               	movwf	fsr2h,c
 10680  0030F8  50DF               	movf	indf2,w,c
 10681  0030FA  6EA8               	movwf	4008,c	;volatile
 10682  0030FC  9EA6               	bcf	4006,7,c	;volatile
 10683  0030FE  9CA6               	bcf	4006,6,c	;volatile
 10684  003100  90D8               	bcf	status,0,c	;volatile
 10685  003102  BEF2               	btfsc	intcon,7,c	;volatile
 10686  003104  80D8               	bsf	status,0,c	;volatile
 10687  003106  9EF2               	bcf	intcon,7,c	;volatile
 10688  003108  84A6               	bsf	4006,2,c	;volatile
 10689  00310A  0E55               	movlw	85
 10690  00310C  6EA7               	movwf	4007,c	;volatile
 10691  00310E  0EAA               	movlw	170
 10692  003110  6EA7               	movwf	4007,c	;volatile
 10693  003112  82A6               	bsf	4006,1,c	;volatile
 10694  003114  94A6               	bcf	4006,2,c	;volatile
 10695  003116  B0D8               	btfsc	status,0,c	;volatile
 10696  003118  8EF2               	bsf	intcon,7,c	;volatile
 10697  00311A  2A38               	incf	ModbusProcess_FC21@i,f,c
 10698  00311C                     l7901:
 10699  00311C  FFFF               	dw	65535	; assembler added errata NOP
 10700  00311E  5038               	movf	ModbusProcess_FC21@i,w,c
 10701  003120  6E30               	movwf	??_ModbusProcess_FC21& (0+255),c
 10702  003122  6A31               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
 10703  003124  5036               	movf	ModbusProcess_FC21@recLenBytes,w,c
 10704  003126  5C30               	subwf	??_ModbusProcess_FC21,w,c
 10705  003128  5037               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
 10706  00312A  5831               	subwfb	??_ModbusProcess_FC21+1,w,c
 10707  00312C  A0D8               	btfss	status,0,c
 10708  00312E  D7D1               	goto	l996
 10709  003130                     l1003:
 10710  003130  FFFF               	dw	65535	; assembler added errata NOP
 10711  003132  B2A6               	btfsc	4006,1,c	;volatile
 10712  003134  D7FD               	goto	l1003
 10713                           
 10714                           ;ModbusRtu.c: 1361: u8CopyBufferSize = _u8BufferSize;
 10715  003136  C053  F033         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
 10716                           
 10717                           ;ModbusRtu.c: 1362: ModbusSendTxBuffer();
 10718  00313A  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 10719                           
 10720                           ;ModbusRtu.c: 1364: return u8CopyBufferSize;
 10721  00313E  5033               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
 10722  003140  0012               	return		;funcret
 10723  003142  FFFF               	dw	65535	; errata NOP
 10724  003144                     __end_of_ModbusProcess_FC21:
 10725                           	opt stack 0
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           postinc0	equ	0xFEE
 10734                           wreg	equ	0xFE8
 10735                           indf1	equ	0xFE7
 10736                           postinc1	equ	0xFE6
 10737                           postdec1	equ	0xFE5
 10738                           fsr1h	equ	0xFE2
 10739                           fsr1l	equ	0xFE1
 10740                           indf2	equ	0xFDF
 10741                           postinc2	equ	0xFDE
 10742                           postdec2	equ	0xFDD
 10743                           fsr2h	equ	0xFDA
 10744                           fsr2l	equ	0xFD9
 10745                           status	equ	0xFD8
 10746                           
 10747 ;; *************** function _ModbusProcess_FC20 *****************
 10748 ;; Defined at:
 10749 ;;		line 1268 in file "ModbusRtu.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  i               1   12[BANK0 ] unsigned char 
 10754 ;;  r               1   15[BANK0 ] unsigned char 
 10755 ;;  startAddrByt    5    5[BANK0 ] unsigned char [5]
 10756 ;;  recLenBytes     5    0[BANK0 ] unsigned char [5]
 10757 ;;  offset          1   14[BANK0 ] unsigned char 
 10758 ;;  reqCount        1   13[BANK0 ] unsigned char 
 10759 ;;  u8CopyBuffer    1   11[BANK0 ] unsigned char 
 10760 ;;  requestDataL    1   10[BANK0 ] unsigned char 
 10761 ;;  i               1    0        unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  1    wreg      unsigned char 
 10764 ;; Registers used:
 10765 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10771 ;;      Params:         0       0       0       0       0       0       0
 10772 ;;      Locals:         0      16       0       0       0       0       0
 10773 ;;      Temps:          3       0       0       0       0       0       0
 10774 ;;      Totals:         3      16       0       0       0       0       0
 10775 ;;Total ram usage:       19 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    4
 10778 ;; This function calls:
 10779 ;;		_ModbusSendTxBuffer
 10780 ;; This function is called by:
 10781 ;;		_ModbusPoll
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785                           	psect	text46
 10786  001A9A                     __ptext46:
 10787                           	opt stack 0
 10788  001A9A                     _ModbusProcess_FC20:
 10789                           	opt stack 25
 10790                           
 10791                           ;incstack = 0
 10792  001A9A  FFFF               	dw	65535
 10793                           
 10794                           ;ModbusRtu.c: 1272: uint8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
 10795  001A9C  C12C  F08A         	movff	__au8Buffer+2,ModbusProcess_FC20@requestDataLen
 10796                           
 10797                           ;ModbusRtu.c: 1274: uint8_t offset = 0;
 10798  001AA0  0E00               	movlw	0
 10799  001AA2  0100               	movlb	0	; () banked
 10800  001AA4  6F8E               	movwf	ModbusProcess_FC20@offset& (0+255),b
 10801                           
 10802                           ;ModbusRtu.c: 1277: uint8_t startAddrBytes[5];
 10803                           ;ModbusRtu.c: 1278: uint8_t recLenBytes[5];
 10804                           ;ModbusRtu.c: 1279: uint8_t reqCount = 0;
 10805  001AA6  0E00               	movlw	0
 10806  001AA8  0100               	movlb	0	; () banked
 10807  001AAA  6F8D               	movwf	ModbusProcess_FC20@reqCount& (0+255),b
 10808                           
 10809                           ;ModbusRtu.c: 1280: while(offset < requestDataLen)
 10810  001AAC  D03E               	goto	l7821
 10811  001AAE                     l7815:
 10812  001AAE  FFFF               	dw	65535	; assembler added errata NOP
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;ModbusRtu.c: 1281: {
 10816                           ;ModbusRtu.c: 1282: startAddrBytes[reqCount] = (_au8Buffer[offset + FILE_REC_LO ]) << 1;
 10817  001AB0  0100               	movlb	0	; () banked
 10818  001AB2  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 10819  001AB4  0D01               	mullw	1
 10820  001AB6  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 10821  001AB8  24F3               	addwf	prodl,w,c
 10822  001ABA  6ED9               	movwf	fsr2l,c
 10823  001ABC  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 10824  001ABE  20F4               	addwfc	prodh,w,c
 10825  001AC0  6EDA               	movwf	fsr2h,c
 10826  001AC2  0100               	movlb	0	; () banked
 10827  001AC4  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10828  001AC6  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10829  001AC8  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10830  001ACA  0E07               	movlw	7
 10831  001ACC  2630               	addwf	??_ModbusProcess_FC20,f,c
 10832  001ACE  0E00               	movlw	0
 10833  001AD0  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 10834  001AD2  0E2A               	movlw	low __au8Buffer
 10835  001AD4  2430               	addwf	??_ModbusProcess_FC20,w,c
 10836  001AD6  6EE1               	movwf	fsr1l,c
 10837  001AD8  0E01               	movlw	high __au8Buffer
 10838  001ADA  2031               	addwfc	??_ModbusProcess_FC20+1,w,c
 10839  001ADC  6EE2               	movwf	fsr1h,c
 10840  001ADE  50E7               	movf	indf1,w,c
 10841  001AE0  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 10842  001AE2  90D8               	bcf	status,0,c
 10843  001AE4  3432               	rlcf	??_ModbusProcess_FC20+2,w,c
 10844  001AE6  6EDF               	movwf	indf2,c
 10845                           
 10846                           ;ModbusRtu.c: 1283: recLenBytes[reqCount] = (_au8Buffer[offset + FILE_REC_LEN_LO ]) << 1
      +                          ;
 10847  001AE8  0100               	movlb	0	; () banked
 10848  001AEA  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 10849  001AEC  0D01               	mullw	1
 10850  001AEE  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 10851  001AF0  24F3               	addwf	prodl,w,c
 10852  001AF2  6ED9               	movwf	fsr2l,c
 10853  001AF4  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 10854  001AF6  20F4               	addwfc	prodh,w,c
 10855  001AF8  6EDA               	movwf	fsr2h,c
 10856  001AFA  0100               	movlb	0	; () banked
 10857  001AFC  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10858  001AFE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10859  001B00  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10860  001B02  0E09               	movlw	9
 10861  001B04  2630               	addwf	??_ModbusProcess_FC20,f,c
 10862  001B06  0E00               	movlw	0
 10863  001B08  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 10864  001B0A  0E2A               	movlw	low __au8Buffer
 10865  001B0C  2430               	addwf	??_ModbusProcess_FC20,w,c
 10866  001B0E  6EE1               	movwf	fsr1l,c
 10867  001B10  0E01               	movlw	high __au8Buffer
 10868  001B12  2031               	addwfc	??_ModbusProcess_FC20+1,w,c
 10869  001B14  6EE2               	movwf	fsr1h,c
 10870  001B16  50E7               	movf	indf1,w,c
 10871  001B18  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 10872  001B1A  90D8               	bcf	status,0,c
 10873  001B1C  3432               	rlcf	??_ModbusProcess_FC20+2,w,c
 10874  001B1E  6EDF               	movwf	indf2,c
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;ModbusRtu.c: 1284: reqCount++;
 10878  001B20  0100               	movlb	0	; () banked
 10879  001B22  2B8D               	incf	ModbusProcess_FC20@reqCount& (0+255),f,b
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;ModbusRtu.c: 1285: offset += 7;
 10883  001B24  0E07               	movlw	7
 10884  001B26  0100               	movlb	0	; () banked
 10885  001B28  278E               	addwf	ModbusProcess_FC20@offset& (0+255),f,b
 10886  001B2A                     l7821:
 10887  001B2A  FFFF               	dw	65535	; assembler added errata NOP
 10888                           
 10889                           ; BSR set to: 0
 10890  001B2C  0100               	movlb	0	; () banked
 10891  001B2E  518A               	movf	ModbusProcess_FC20@requestDataLen& (0+255),w,b
 10892  001B30  0100               	movlb	0	; () banked
 10893  001B32  5D8E               	subwf	ModbusProcess_FC20@offset& (0+255),w,b
 10894  001B34  A0D8               	btfss	status,0,c
 10895  001B36  D7BB               	goto	l7815
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;ModbusRtu.c: 1286: }
 10899                           ;ModbusRtu.c: 1288: offset = FILE_DATA_LEN + 1;
 10900                           
 10901                           ; BSR set to: 0
 10902  001B38  0E03               	movlw	3
 10903  001B3A  0100               	movlb	0	; () banked
 10904  001B3C  6F8E               	movwf	ModbusProcess_FC20@offset& (0+255),b
 10905                           
 10906                           ;ModbusRtu.c: 1289: _au8Buffer[ FILE_DATA_LEN ] = 0;
 10907  001B3E  0E00               	movlw	0
 10908  001B40  0101               	movlb	1	; () banked
 10909  001B42  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 10910                           
 10911                           ;ModbusRtu.c: 1290: _lastAddress = 0xff;
 10912  001B44  0E00               	movlw	0
 10913  001B46  0100               	movlb	0	; () banked
 10914  001B48  6FE3               	movwf	(__lastAddress+1)& (0+255),b
 10915  001B4A  69E2               	setf	__lastAddress& (0+255),b
 10916                           
 10917                           ;ModbusRtu.c: 1291: _lastCount = 0;
 10918  001B4C  0E00               	movlw	0
 10919  001B4E  0100               	movlb	0	; () banked
 10920  001B50  6FE5               	movwf	(__lastCount+1)& (0+255),b
 10921  001B52  0E00               	movlw	0
 10922  001B54  6FE4               	movwf	__lastCount& (0+255),b
 10923                           
 10924                           ;ModbusRtu.c: 1292: for(uint8_t r = 0; r < reqCount; r++)
 10925  001B56  0E00               	movlw	0
 10926  001B58  0100               	movlb	0	; () banked
 10927  001B5A  6F8F               	movwf	ModbusProcess_FC20@r& (0+255),b
 10928  001B5C  D0BF               	goto	l7853
 10929  001B5E                     l7825:
 10930  001B5E  FFFF               	dw	65535	; assembler added errata NOP
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;ModbusRtu.c: 1293: {
 10934                           ;ModbusRtu.c: 1294: _au8Buffer[offset++] = recLenBytes[r] + 1;
 10935  001B60  0100               	movlb	0	; () banked
 10936  001B62  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10937  001B64  0D01               	mullw	1
 10938  001B66  0E2A               	movlw	low __au8Buffer
 10939  001B68  24F3               	addwf	prodl,w,c
 10940  001B6A  6ED9               	movwf	fsr2l,c
 10941  001B6C  0E01               	movlw	high __au8Buffer
 10942  001B6E  20F4               	addwfc	prodh,w,c
 10943  001B70  6EDA               	movwf	fsr2h,c
 10944  001B72  0100               	movlb	0	; () banked
 10945  001B74  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 10946  001B76  0D01               	mullw	1
 10947  001B78  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 10948  001B7A  24F3               	addwf	prodl,w,c
 10949  001B7C  6EE1               	movwf	fsr1l,c
 10950  001B7E  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 10951  001B80  20F4               	addwfc	prodh,w,c
 10952  001B82  6EE2               	movwf	fsr1h,c
 10953  001B84  50E7               	movf	indf1,w,c
 10954  001B86  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10955  001B88  2830               	incf	??_ModbusProcess_FC20,w,c
 10956  001B8A  6EDF               	movwf	indf2,c
 10957                           
 10958                           ; BSR set to: 0
 10959  001B8C  0100               	movlb	0	; () banked
 10960  001B8E  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;ModbusRtu.c: 1295: _au8Buffer[offset++] = 6;
 10964  001B90  0100               	movlb	0	; () banked
 10965  001B92  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 10966  001B94  0D01               	mullw	1
 10967  001B96  0E2A               	movlw	low __au8Buffer
 10968  001B98  24F3               	addwf	prodl,w,c
 10969  001B9A  6ED9               	movwf	fsr2l,c
 10970  001B9C  0E01               	movlw	high __au8Buffer
 10971  001B9E  20F4               	addwfc	prodh,w,c
 10972  001BA0  6EDA               	movwf	fsr2h,c
 10973  001BA2  0E06               	movlw	6
 10974  001BA4  6EDF               	movwf	indf2,c
 10975                           
 10976                           ; BSR set to: 0
 10977  001BA6  0100               	movlb	0	; () banked
 10978  001BA8  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;ModbusRtu.c: 1296: if(startAddrBytes[r] < _lastAddress)
 10982  001BAA  0100               	movlb	0	; () banked
 10983  001BAC  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 10984  001BAE  0D01               	mullw	1
 10985  001BB0  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 10986  001BB2  24F3               	addwf	prodl,w,c
 10987  001BB4  6ED9               	movwf	fsr2l,c
 10988  001BB6  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 10989  001BB8  20F4               	addwfc	prodh,w,c
 10990  001BBA  6EDA               	movwf	fsr2h,c
 10991  001BBC  50DF               	movf	indf2,w,c
 10992  001BBE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 10993  001BC0  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 10994  001BC2  0100               	movlb	0	; () banked
 10995  001BC4  51E2               	movf	__lastAddress& (0+255),w,b
 10996  001BC6  5C30               	subwf	??_ModbusProcess_FC20,w,c
 10997  001BC8  0100               	movlb	0	; () banked
 10998  001BCA  51E3               	movf	(__lastAddress+1)& (0+255),w,b
 10999  001BCC  5831               	subwfb	??_ModbusProcess_FC20+1,w,c
 11000  001BCE  B0D8               	btfsc	status,0,c
 11001  001BD0  D00F               	goto	l7837
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;ModbusRtu.c: 1297: _lastAddress = startAddrBytes[r];
 11005  001BD2  0100               	movlb	0	; () banked
 11006  001BD4  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11007  001BD6  0D01               	mullw	1
 11008  001BD8  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11009  001BDA  24F3               	addwf	prodl,w,c
 11010  001BDC  6ED9               	movwf	fsr2l,c
 11011  001BDE  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11012  001BE0  20F4               	addwfc	prodh,w,c
 11013  001BE2  6EDA               	movwf	fsr2h,c
 11014  001BE4  50DF               	movf	indf2,w,c
 11015  001BE6  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11016  001BE8  5030               	movf	??_ModbusProcess_FC20,w,c
 11017  001BEA  0100               	movlb	0	; () banked
 11018  001BEC  6FE2               	movwf	__lastAddress& (0+255),b
 11019  001BEE  6BE3               	clrf	(__lastAddress+1)& (0+255),b
 11020  001BF0                     l7837:
 11021  001BF0  FFFF               	dw	65535	; assembler added errata NOP
 11022                           
 11023                           ; BSR set to: 0
 11024                           ;ModbusRtu.c: 1299: for(uint8_t i = 0; i < recLenBytes[r]; i++)
 11025  001BF2  0E00               	movlw	0
 11026  001BF4  0100               	movlb	0	; () banked
 11027  001BF6  6F8C               	movwf	ModbusProcess_FC20@i& (0+255),b
 11028  001BF8  D01E               	goto	l985
 11029  001BFA                     l7839:
 11030  001BFA  FFFF               	dw	65535	; assembler added errata NOP
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;ModbusRtu.c: 1300: {
 11034                           ;ModbusRtu.c: 1301: _au8Buffer[offset++] = ( EEADR = startAddrBytes[r] + i, (void)0, RD 
      +                          = 1, EEDATA);
 11035  001BFC  0100               	movlb	0	; () banked
 11036  001BFE  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11037  001C00  0D01               	mullw	1
 11038  001C02  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11039  001C04  24F3               	addwf	prodl,w,c
 11040  001C06  6ED9               	movwf	fsr2l,c
 11041  001C08  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11042  001C0A  20F4               	addwfc	prodh,w,c
 11043  001C0C  6EDA               	movwf	fsr2h,c
 11044  001C0E  50DF               	movf	indf2,w,c
 11045  001C10  0100               	movlb	0	; () banked
 11046  001C12  258C               	addwf	ModbusProcess_FC20@i& (0+255),w,b
 11047  001C14  6EA9               	movwf	4009,c	;volatile
 11048                           
 11049                           ; BSR set to: 0
 11050  001C16  80A6               	bsf	4006,0,c	;volatile
 11051  001C18  0100               	movlb	0	; () banked
 11052  001C1A  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 11053  001C1C  0D01               	mullw	1
 11054  001C1E  0E2A               	movlw	low __au8Buffer
 11055  001C20  24F3               	addwf	prodl,w,c
 11056  001C22  6ED9               	movwf	fsr2l,c
 11057  001C24  0E01               	movlw	high __au8Buffer
 11058  001C26  20F4               	addwfc	prodh,w,c
 11059  001C28  6EDA               	movwf	fsr2h,c
 11060  001C2A  CFA8 FFDF          	movff	4008,indf2	;volatile
 11061                           
 11062                           ; BSR set to: 0
 11063  001C2E  0100               	movlb	0	; () banked
 11064  001C30  2B8E               	incf	ModbusProcess_FC20@offset& (0+255),f,b
 11065                           
 11066                           ; BSR set to: 0
 11067  001C32  0100               	movlb	0	; () banked
 11068  001C34  2B8C               	incf	ModbusProcess_FC20@i& (0+255),f,b
 11069  001C36                     l985:
 11070  001C36  FFFF               	dw	65535	; assembler added errata NOP
 11071                           
 11072                           ; BSR set to: 0
 11073  001C38  0100               	movlb	0	; () banked
 11074  001C3A  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11075  001C3C  0D01               	mullw	1
 11076  001C3E  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11077  001C40  24F3               	addwf	prodl,w,c
 11078  001C42  6ED9               	movwf	fsr2l,c
 11079  001C44  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11080  001C46  20F4               	addwfc	prodh,w,c
 11081  001C48  6EDA               	movwf	fsr2h,c
 11082  001C4A  50DE               	movf	postinc2,w,c
 11083  001C4C  0100               	movlb	0	; () banked
 11084  001C4E  5D8C               	subwf	ModbusProcess_FC20@i& (0+255),w,b
 11085  001C50  A0D8               	btfss	status,0,c
 11086  001C52  D7D3               	goto	l7839
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;ModbusRtu.c: 1302: }
 11090                           ;ModbusRtu.c: 1303: if(startAddrBytes[r] + recLenBytes[r] > _lastCount)
 11091                           
 11092                           ; BSR set to: 0
 11093  001C54  0100               	movlb	0	; () banked
 11094  001C56  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11095  001C58  0D01               	mullw	1
 11096  001C5A  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11097  001C5C  24F3               	addwf	prodl,w,c
 11098  001C5E  6ED9               	movwf	fsr2l,c
 11099  001C60  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11100  001C62  20F4               	addwfc	prodh,w,c
 11101  001C64  6EDA               	movwf	fsr2h,c
 11102  001C66  50DF               	movf	indf2,w,c
 11103  001C68  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11104  001C6A  6A31               	clrf	(??_ModbusProcess_FC20+1)& (0+255),c
 11105  001C6C  0100               	movlb	0	; () banked
 11106  001C6E  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11107  001C70  0D01               	mullw	1
 11108  001C72  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11109  001C74  24F3               	addwf	prodl,w,c
 11110  001C76  6ED9               	movwf	fsr2l,c
 11111  001C78  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11112  001C7A  20F4               	addwfc	prodh,w,c
 11113  001C7C  6EDA               	movwf	fsr2h,c
 11114  001C7E  50DF               	movf	indf2,w,c
 11115  001C80  6E32               	movwf	(??_ModbusProcess_FC20+2)& (0+255),c
 11116  001C82  5032               	movf	??_ModbusProcess_FC20+2,w,c
 11117  001C84  2630               	addwf	??_ModbusProcess_FC20,f,c
 11118  001C86  0E00               	movlw	0
 11119  001C88  2231               	addwfc	??_ModbusProcess_FC20+1,f,c
 11120  001C8A  5030               	movf	??_ModbusProcess_FC20,w,c
 11121  001C8C  0100               	movlb	0	; () banked
 11122  001C8E  5DE4               	subwf	__lastCount& (0+255),w,b
 11123  001C90  5031               	movf	??_ModbusProcess_FC20+1,w,c
 11124  001C92  0100               	movlb	0	; () banked
 11125  001C94  59E5               	subwfb	(__lastCount+1)& (0+255),w,b
 11126  001C96  B0D8               	btfsc	status,0,c
 11127  001C98  D01E               	goto	l7851
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;ModbusRtu.c: 1304: _lastCount = startAddrBytes[r] + recLenBytes[r];
 11131  001C9A  0100               	movlb	0	; () banked
 11132  001C9C  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11133  001C9E  0D01               	mullw	1
 11134  001CA0  0E80               	movlw	low ModbusProcess_FC20@recLenBytes
 11135  001CA2  24F3               	addwf	prodl,w,c
 11136  001CA4  6ED9               	movwf	fsr2l,c
 11137  001CA6  0E00               	movlw	high ModbusProcess_FC20@recLenBytes
 11138  001CA8  20F4               	addwfc	prodh,w,c
 11139  001CAA  6EDA               	movwf	fsr2h,c
 11140  001CAC  50DF               	movf	indf2,w,c
 11141  001CAE  6E30               	movwf	??_ModbusProcess_FC20& (0+255),c
 11142  001CB0  0100               	movlb	0	; () banked
 11143  001CB2  518F               	movf	ModbusProcess_FC20@r& (0+255),w,b
 11144  001CB4  0D01               	mullw	1
 11145  001CB6  0E85               	movlw	low ModbusProcess_FC20@startAddrBytes
 11146  001CB8  24F3               	addwf	prodl,w,c
 11147  001CBA  6ED9               	movwf	fsr2l,c
 11148  001CBC  0E00               	movlw	high ModbusProcess_FC20@startAddrBytes
 11149  001CBE  20F4               	addwfc	prodh,w,c
 11150  001CC0  6EDA               	movwf	fsr2h,c
 11151  001CC2  50DF               	movf	indf2,w,c
 11152  001CC4  6E31               	movwf	(??_ModbusProcess_FC20+1)& (0+255),c
 11153  001CC6  5031               	movf	??_ModbusProcess_FC20+1,w,c
 11154  001CC8  2430               	addwf	??_ModbusProcess_FC20,w,c
 11155  001CCA  0100               	movlb	0	; () banked
 11156  001CCC  6FE4               	movwf	__lastCount& (0+255),b
 11157  001CCE  0100               	movlb	0	; () banked
 11158  001CD0  6BE5               	clrf	(__lastCount+1)& (0+255),b
 11159  001CD2  0100               	movlb	0	; () banked
 11160  001CD4  37E5               	rlcf	(__lastCount+1)& (0+255),f,b
 11161  001CD6                     l7851:
 11162  001CD6  FFFF               	dw	65535	; assembler added errata NOP
 11163                           
 11164                           ; BSR set to: 0
 11165  001CD8  0100               	movlb	0	; () banked
 11166  001CDA  2B8F               	incf	ModbusProcess_FC20@r& (0+255),f,b
 11167  001CDC                     l7853:
 11168  001CDC  FFFF               	dw	65535	; assembler added errata NOP
 11169                           
 11170                           ; BSR set to: 0
 11171  001CDE  0100               	movlb	0	; () banked
 11172  001CE0  518D               	movf	ModbusProcess_FC20@reqCount& (0+255),w,b
 11173  001CE2  0100               	movlb	0	; () banked
 11174  001CE4  5D8F               	subwf	ModbusProcess_FC20@r& (0+255),w,b
 11175  001CE6  A0D8               	btfss	status,0,c
 11176  001CE8  D73A               	goto	l7825
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;ModbusRtu.c: 1305: }
 11180                           ;ModbusRtu.c: 1306: _au8Buffer[ FILE_DATA_LEN ] = offset - 2;
 11181                           
 11182                           ; BSR set to: 0
 11183  001CEA  0100               	movlb	0	; () banked
 11184  001CEC  518E               	movf	ModbusProcess_FC20@offset& (0+255),w,b
 11185  001CEE  0FFE               	addlw	254
 11186  001CF0  0101               	movlb	1	; () banked
 11187  001CF2  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 11188                           
 11189                           ;ModbusRtu.c: 1310: uint8_t u8CopyBufferSize;
 11190                           ;ModbusRtu.c: 1311: uint8_t i;
 11191                           ;ModbusRtu.c: 1317: _u8BufferSize = _au8Buffer[ FILE_DATA_LEN ] + 1;
 11192  001CF4  0101               	movlb	1	; () banked
 11193  001CF6  292C               	incf	(__au8Buffer+2)& (0+255),w,b
 11194  001CF8  6E53               	movwf	__u8BufferSize,c
 11195                           
 11196                           ; BSR set to: 1
 11197                           ;ModbusRtu.c: 1319: u8CopyBufferSize = _u8BufferSize;
 11198  001CFA  C053  F08B         	movff	__u8BufferSize,ModbusProcess_FC20@u8CopyBufferSize
 11199                           
 11200                           ; BSR set to: 1
 11201                           ;ModbusRtu.c: 1320: ModbusSendTxBuffer();
 11202  001CFE  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11203                           
 11204                           ;ModbusRtu.c: 1322: return u8CopyBufferSize;
 11205  001D02  0100               	movlb	0	; () banked
 11206  001D04  518B               	movf	ModbusProcess_FC20@u8CopyBufferSize& (0+255),w,b
 11207                           
 11208                           ; BSR set to: 0
 11209                           
 11210                           ; BSR set to: 0
 11211  001D06  0012               	return		;funcret
 11212  001D08  FFFF               	dw	65535	; errata NOP
 11213  001D0A                     __end_of_ModbusProcess_FC20:
 11214                           	opt stack 0
 11215                           tblptru	equ	0xFF8
 11216                           tblptrh	equ	0xFF7
 11217                           tblptrl	equ	0xFF6
 11218                           tablat	equ	0xFF5
 11219                           prodh	equ	0xFF4
 11220                           prodl	equ	0xFF3
 11221                           intcon	equ	0xFF2
 11222                           postinc0	equ	0xFEE
 11223                           wreg	equ	0xFE8
 11224                           indf1	equ	0xFE7
 11225                           postinc1	equ	0xFE6
 11226                           postdec1	equ	0xFE5
 11227                           fsr1h	equ	0xFE2
 11228                           fsr1l	equ	0xFE1
 11229                           indf2	equ	0xFDF
 11230                           postinc2	equ	0xFDE
 11231                           postdec2	equ	0xFDD
 11232                           fsr2h	equ	0xFDA
 11233                           fsr2l	equ	0xFD9
 11234                           status	equ	0xFD8
 11235                           
 11236 ;; *************** function _ModbusProcess_FC17 *****************
 11237 ;; Defined at:
 11238 ;;		line 1242 in file "ModbusRtu.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;		None
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  1    wreg      unsigned char 
 11245 ;; Registers used:
 11246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11252 ;;      Params:         0       0       0       0       0       0       0
 11253 ;;      Locals:         1       0       0       0       0       0       0
 11254 ;;      Temps:          0       0       0       0       0       0       0
 11255 ;;      Totals:         1       0       0       0       0       0       0
 11256 ;;Total ram usage:        1 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:    4
 11259 ;; This function calls:
 11260 ;;		_ModbusSendTxBuffer
 11261 ;; This function is called by:
 11262 ;;		_ModbusPoll
 11263 ;; This function uses a non-reentrant model
 11264 ;;
 11265                           
 11266                           	psect	text47
 11267  003774                     __ptext47:
 11268                           	opt stack 0
 11269  003774                     _ModbusProcess_FC17:
 11270                           	opt stack 25
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;incstack = 0
 11274  003774  FFFF               	dw	65535
 11275                           
 11276                           ;ModbusRtu.c: 1244: _au8Buffer[ 2 ] = 4;
 11277  003776  0E04               	movlw	4
 11278  003778  0101               	movlb	1	; () banked
 11279  00377A  6F2C               	movwf	(__au8Buffer+2)& (0+255),b
 11280                           
 11281                           ;ModbusRtu.c: 1246: _u8BufferSize = 3;
 11282  00377C  0E03               	movlw	3
 11283  00377E  6E53               	movwf	__u8BufferSize,c
 11284                           
 11285                           ; BSR set to: 1
 11286                           ;ModbusRtu.c: 1247: _au8Buffer[_u8BufferSize++] = 0x01;
 11287  003780  5053               	movf	__u8BufferSize,w,c
 11288  003782  0D01               	mullw	1
 11289  003784  0E2A               	movlw	low __au8Buffer
 11290  003786  24F3               	addwf	prodl,w,c
 11291  003788  6ED9               	movwf	fsr2l,c
 11292  00378A  0E01               	movlw	high __au8Buffer
 11293  00378C  20F4               	addwfc	prodh,w,c
 11294  00378E  6EDA               	movwf	fsr2h,c
 11295  003790  0E01               	movlw	1
 11296  003792  6EDF               	movwf	indf2,c
 11297                           
 11298                           ; BSR set to: 1
 11299  003794  2A53               	incf	__u8BufferSize,f,c
 11300                           
 11301                           ; BSR set to: 1
 11302                           ;ModbusRtu.c: 1248: _au8Buffer[_u8BufferSize++] = 0x01;
 11303  003796  5053               	movf	__u8BufferSize,w,c
 11304  003798  0D01               	mullw	1
 11305  00379A  0E2A               	movlw	low __au8Buffer
 11306  00379C  24F3               	addwf	prodl,w,c
 11307  00379E  6ED9               	movwf	fsr2l,c
 11308  0037A0  0E01               	movlw	high __au8Buffer
 11309  0037A2  20F4               	addwfc	prodh,w,c
 11310  0037A4  6EDA               	movwf	fsr2h,c
 11311  0037A6  0E01               	movlw	1
 11312  0037A8  6EDF               	movwf	indf2,c
 11313                           
 11314                           ; BSR set to: 1
 11315  0037AA  2A53               	incf	__u8BufferSize,f,c
 11316                           
 11317                           ; BSR set to: 1
 11318                           ;ModbusRtu.c: 1249: _au8Buffer[_u8BufferSize++] = 0x01;
 11319  0037AC  5053               	movf	__u8BufferSize,w,c
 11320  0037AE  0D01               	mullw	1
 11321  0037B0  0E2A               	movlw	low __au8Buffer
 11322  0037B2  24F3               	addwf	prodl,w,c
 11323  0037B4  6ED9               	movwf	fsr2l,c
 11324  0037B6  0E01               	movlw	high __au8Buffer
 11325  0037B8  20F4               	addwfc	prodh,w,c
 11326  0037BA  6EDA               	movwf	fsr2h,c
 11327  0037BC  0E01               	movlw	1
 11328  0037BE  6EDF               	movwf	indf2,c
 11329                           
 11330                           ; BSR set to: 1
 11331  0037C0  2A53               	incf	__u8BufferSize,f,c
 11332                           
 11333                           ; BSR set to: 1
 11334                           ;ModbusRtu.c: 1250: _au8Buffer[_u8BufferSize++] = 0x00;
 11335  0037C2  5053               	movf	__u8BufferSize,w,c
 11336  0037C4  0D01               	mullw	1
 11337  0037C6  0E2A               	movlw	low __au8Buffer
 11338  0037C8  24F3               	addwf	prodl,w,c
 11339  0037CA  6ED9               	movwf	fsr2l,c
 11340  0037CC  0E01               	movlw	high __au8Buffer
 11341  0037CE  20F4               	addwfc	prodh,w,c
 11342  0037D0  6EDA               	movwf	fsr2h,c
 11343  0037D2  0E00               	movlw	0
 11344  0037D4  6EDF               	movwf	indf2,c
 11345                           
 11346                           ; BSR set to: 1
 11347  0037D6  2A53               	incf	__u8BufferSize,f,c
 11348                           
 11349                           ; BSR set to: 1
 11350                           ;ModbusRtu.c: 1252: _au8Buffer[_u8BufferSize++] = 0xff;
 11351  0037D8  5053               	movf	__u8BufferSize,w,c
 11352  0037DA  0D01               	mullw	1
 11353  0037DC  0E2A               	movlw	low __au8Buffer
 11354  0037DE  24F3               	addwf	prodl,w,c
 11355  0037E0  6ED9               	movwf	fsr2l,c
 11356  0037E2  0E01               	movlw	high __au8Buffer
 11357  0037E4  20F4               	addwfc	prodh,w,c
 11358  0037E6  6EDA               	movwf	fsr2h,c
 11359  0037E8  0EFF               	movlw	255
 11360  0037EA  6EDF               	movwf	indf2,c
 11361                           
 11362                           ; BSR set to: 1
 11363  0037EC  2A53               	incf	__u8BufferSize,f,c
 11364                           
 11365                           ; BSR set to: 1
 11366                           ;ModbusRtu.c: 1253: uint8_t u8CopyBufferSize = _u8BufferSize;
 11367  0037EE  C053  F030         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
 11368                           
 11369                           ; BSR set to: 1
 11370                           ;ModbusRtu.c: 1254: ModbusSendTxBuffer();
 11371  0037F2  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11372                           
 11373                           ;ModbusRtu.c: 1256: return u8CopyBufferSize;
 11374  0037F6  5030               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
 11375  0037F8  0012               	return		;funcret
 11376  0037FA  FFFF               	dw	65535	; errata NOP
 11377  0037FC                     __end_of_ModbusProcess_FC17:
 11378                           	opt stack 0
 11379                           tblptru	equ	0xFF8
 11380                           tblptrh	equ	0xFF7
 11381                           tblptrl	equ	0xFF6
 11382                           tablat	equ	0xFF5
 11383                           prodh	equ	0xFF4
 11384                           prodl	equ	0xFF3
 11385                           intcon	equ	0xFF2
 11386                           postinc0	equ	0xFEE
 11387                           wreg	equ	0xFE8
 11388                           indf1	equ	0xFE7
 11389                           postinc1	equ	0xFE6
 11390                           postdec1	equ	0xFE5
 11391                           fsr1h	equ	0xFE2
 11392                           fsr1l	equ	0xFE1
 11393                           indf2	equ	0xFDF
 11394                           postinc2	equ	0xFDE
 11395                           postdec2	equ	0xFDD
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400 ;; *************** function _ModbusProcess_FC16 *****************
 11401 ;; Defined at:
 11402 ;;		line 1203 in file "ModbusRtu.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  regs            2   47[COMRAM] PTR unsigned short 
 11405 ;;		 -> _MODBUSHoldingRegs(30), 
 11406 ;;  u8size          1   49[COMRAM] unsigned char 
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  u16StartAdd     2   10[BANK0 ] unsigned short 
 11409 ;;  temp            2    7[BANK0 ] unsigned short 
 11410 ;;  i               1   13[BANK0 ] unsigned char 
 11411 ;;  u8regsno        1   12[BANK0 ] unsigned char 
 11412 ;;  u8CopyBuffer    1    9[BANK0 ] unsigned char 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      unsigned char 
 11415 ;; Registers used:
 11416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11422 ;;      Params:         3       0       0       0       0       0       0
 11423 ;;      Locals:         0       7       0       0       0       0       0
 11424 ;;      Temps:          0       7       0       0       0       0       0
 11425 ;;      Totals:         3      14       0       0       0       0       0
 11426 ;;Total ram usage:       17 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    4
 11429 ;; This function calls:
 11430 ;;		_ModbusSendTxBuffer
 11431 ;; This function is called by:
 11432 ;;		_ModbusPoll
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text48
 11437  0026DA                     __ptext48:
 11438                           	opt stack 0
 11439  0026DA                     _ModbusProcess_FC16:
 11440                           	opt stack 25
 11441                           
 11442                           ;incstack = 0
 11443  0026DA  FFFF               	dw	65535
 11444                           
 11445                           ;ModbusRtu.c: 1206: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
 11446  0026DC  0101               	movlb	1	; () banked
 11447  0026DE  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 11448  0026E0  C12C  F080         	movff	__au8Buffer+2,??_ModbusProcess_FC16
 11449  0026E4  0100               	movlb	0	; () banked
 11450  0026E6  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11451  0026E8  C080  F081         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
 11452  0026EC  0100               	movlb	0	; () banked
 11453  0026EE  6B80               	clrf	??_ModbusProcess_FC16& (0+255),b
 11454  0026F0  0100               	movlb	0	; () banked
 11455  0026F2  1180               	iorwf	??_ModbusProcess_FC16& (0+255),w,b
 11456  0026F4  0100               	movlb	0	; () banked
 11457  0026F6  6F8A               	movwf	ModbusProcess_FC16@u16StartAdd& (0+255),b
 11458  0026F8  0100               	movlb	0	; () banked
 11459  0026FA  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11460  0026FC  0100               	movlb	0	; () banked
 11461  0026FE  6F8B               	movwf	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),b
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;ModbusRtu.c: 1207: _lastAddress = u16StartAdd;
 11465  002700  C08A  F0E2         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
 11466  002704  C08B  F0E3         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;ModbusRtu.c: 1208: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
 11470  002708  C12F  F08C         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;ModbusRtu.c: 1209: _lastCount = u8regsno;
 11474  00270C  C08C  F0E4         	movff	ModbusProcess_FC16@u8regsno,__lastCount
 11475  002710  0100               	movlb	0	; () banked
 11476  002712  6BE5               	clrf	(__lastCount+1)& (0+255),b
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;ModbusRtu.c: 1210: uint8_t u8CopyBufferSize;
 11480                           ;ModbusRtu.c: 1211: uint8_t i;
 11481                           ;ModbusRtu.c: 1212: uint16_t temp;
 11482                           ;ModbusRtu.c: 1215: _au8Buffer[ NB_HI ] = 0;
 11483  002714  0E00               	movlw	0
 11484  002716  0101               	movlb	1	; () banked
 11485  002718  6F2E               	movwf	(__au8Buffer+4)& (0+255),b
 11486                           
 11487                           ; BSR set to: 1
 11488                           ;ModbusRtu.c: 1216: _au8Buffer[ NB_LO ] = u8regsno;
 11489  00271A  C08C  F12F         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
 11490                           
 11491                           ; BSR set to: 1
 11492                           ;ModbusRtu.c: 1217: _u8BufferSize = RESPONSE_SIZE;
 11493  00271E  0E06               	movlw	6
 11494  002720  6E53               	movwf	__u8BufferSize,c
 11495                           
 11496                           ; BSR set to: 1
 11497                           ;ModbusRtu.c: 1220: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
 11498  002722  0E00               	movlw	0
 11499  002724  0100               	movlb	0	; () banked
 11500  002726  6F8D               	movwf	ModbusProcess_FC16@i& (0+255),b
 11501  002728  D056               	goto	l7769
 11502  00272A                     l7765:
 11503  00272A  FFFF               	dw	65535	; assembler added errata NOP
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;ModbusRtu.c: 1221: {
 11507                           ;ModbusRtu.c: 1222: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
 11508  00272C  0100               	movlb	0	; () banked
 11509  00272E  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11510  002730  0100               	movlb	0	; () banked
 11511  002732  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11512  002734  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11513  002736  90D8               	bcf	status,0,c
 11514  002738  0100               	movlb	0	; () banked
 11515  00273A  3780               	rlcf	??_ModbusProcess_FC16& (0+255),f,b
 11516  00273C  3781               	rlcf	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11517  00273E  0E08               	movlw	8
 11518  002740  0100               	movlb	0	; () banked
 11519  002742  2780               	addwf	??_ModbusProcess_FC16& (0+255),f,b
 11520  002744  0E00               	movlw	0
 11521  002746  2381               	addwfc	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11522  002748  0E2A               	movlw	low __au8Buffer
 11523  00274A  0100               	movlb	0	; () banked
 11524  00274C  2580               	addwf	??_ModbusProcess_FC16& (0+255),w,b
 11525  00274E  6ED9               	movwf	fsr2l,c
 11526  002750  0E01               	movlw	high __au8Buffer
 11527  002752  0100               	movlb	0	; () banked
 11528  002754  2181               	addwfc	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11529  002756  6EDA               	movwf	fsr2h,c
 11530  002758  50DF               	movf	indf2,w,c
 11531  00275A  0100               	movlb	0	; () banked
 11532  00275C  6F82               	movwf	(??_ModbusProcess_FC16+2)& (0+255),b
 11533  00275E  0100               	movlb	0	; () banked
 11534  002760  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11535  002762  0100               	movlb	0	; () banked
 11536  002764  6F83               	movwf	(??_ModbusProcess_FC16+3)& (0+255),b
 11537  002766  6B84               	clrf	(??_ModbusProcess_FC16+4)& (0+255),b
 11538  002768  90D8               	bcf	status,0,c
 11539  00276A  0100               	movlb	0	; () banked
 11540  00276C  3783               	rlcf	(??_ModbusProcess_FC16+3)& (0+255),f,b
 11541  00276E  3784               	rlcf	(??_ModbusProcess_FC16+4)& (0+255),f,b
 11542  002770  0E07               	movlw	7
 11543  002772  0100               	movlb	0	; () banked
 11544  002774  2783               	addwf	(??_ModbusProcess_FC16+3)& (0+255),f,b
 11545  002776  0E00               	movlw	0
 11546  002778  2384               	addwfc	(??_ModbusProcess_FC16+4)& (0+255),f,b
 11547  00277A  0E2A               	movlw	low __au8Buffer
 11548  00277C  0100               	movlb	0	; () banked
 11549  00277E  2583               	addwf	(??_ModbusProcess_FC16+3)& (0+255),w,b
 11550  002780  6ED9               	movwf	fsr2l,c
 11551  002782  0E01               	movlw	high __au8Buffer
 11552  002784  0100               	movlb	0	; () banked
 11553  002786  2184               	addwfc	(??_ModbusProcess_FC16+4)& (0+255),w,b
 11554  002788  6EDA               	movwf	fsr2h,c
 11555  00278A  50DF               	movf	indf2,w,c
 11556  00278C  0100               	movlb	0	; () banked
 11557  00278E  6F85               	movwf	(??_ModbusProcess_FC16+5)& (0+255),b
 11558  002790  0100               	movlb	0	; () banked
 11559  002792  5182               	movf	(??_ModbusProcess_FC16+2)& (0+255),w,b
 11560  002794  0100               	movlb	0	; () banked
 11561  002796  6F87               	movwf	ModbusProcess_FC16@temp& (0+255),b
 11562  002798  C085  F088         	movff	??_ModbusProcess_FC16+5,ModbusProcess_FC16@temp+1
 11563                           
 11564                           ;ModbusRtu.c: 1226: regs[ u16StartAdd + i ] = temp;
 11565  00279C  0100               	movlb	0	; () banked
 11566  00279E  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11567  0027A0  0100               	movlb	0	; () banked
 11568  0027A2  258A               	addwf	ModbusProcess_FC16@u16StartAdd& (0+255),w,b
 11569  0027A4  0100               	movlb	0	; () banked
 11570  0027A6  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11571  0027A8  0E00               	movlw	0
 11572  0027AA  0100               	movlb	0	; () banked
 11573  0027AC  218B               	addwfc	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),w,b
 11574  0027AE  0100               	movlb	0	; () banked
 11575  0027B0  6F81               	movwf	(??_ModbusProcess_FC16+1)& (0+255),b
 11576  0027B2  90D8               	bcf	status,0,c
 11577  0027B4  0100               	movlb	0	; () banked
 11578  0027B6  3780               	rlcf	??_ModbusProcess_FC16& (0+255),f,b
 11579  0027B8  3781               	rlcf	(??_ModbusProcess_FC16+1)& (0+255),f,b
 11580  0027BA  0100               	movlb	0	; () banked
 11581  0027BC  5180               	movf	??_ModbusProcess_FC16& (0+255),w,b
 11582  0027BE  2430               	addwf	ModbusProcess_FC16@regs,w,c
 11583  0027C0  6ED9               	movwf	fsr2l,c
 11584  0027C2  0100               	movlb	0	; () banked
 11585  0027C4  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11586  0027C6  2031               	addwfc	ModbusProcess_FC16@regs+1,w,c
 11587  0027C8  6EDA               	movwf	fsr2h,c
 11588  0027CA  C087  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
 11589  0027CE  C088  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
 11590                           
 11591                           ; BSR set to: 0
 11592  0027D2  0100               	movlb	0	; () banked
 11593  0027D4  2B8D               	incf	ModbusProcess_FC16@i& (0+255),f,b
 11594  0027D6                     l7769:
 11595  0027D6  FFFF               	dw	65535	; assembler added errata NOP
 11596                           
 11597                           ; BSR set to: 0
 11598  0027D8  0100               	movlb	0	; () banked
 11599  0027DA  518C               	movf	ModbusProcess_FC16@u8regsno& (0+255),w,b
 11600  0027DC  0100               	movlb	0	; () banked
 11601  0027DE  5D8D               	subwf	ModbusProcess_FC16@i& (0+255),w,b
 11602  0027E0  B0D8               	btfsc	status,0,c
 11603  0027E2  D019               	goto	l7773
 11604                           
 11605                           ; BSR set to: 0
 11606  0027E4  5032               	movf	ModbusProcess_FC16@u8size,w,c
 11607  0027E6  0100               	movlb	0	; () banked
 11608  0027E8  6F80               	movwf	??_ModbusProcess_FC16& (0+255),b
 11609  0027EA  6B81               	clrf	(??_ModbusProcess_FC16+1)& (0+255),b
 11610  0027EC  0100               	movlb	0	; () banked
 11611  0027EE  518D               	movf	ModbusProcess_FC16@i& (0+255),w,b
 11612  0027F0  0100               	movlb	0	; () banked
 11613  0027F2  258A               	addwf	ModbusProcess_FC16@u16StartAdd& (0+255),w,b
 11614  0027F4  0100               	movlb	0	; () banked
 11615  0027F6  6F82               	movwf	(??_ModbusProcess_FC16+2)& (0+255),b
 11616  0027F8  0E00               	movlw	0
 11617  0027FA  0100               	movlb	0	; () banked
 11618  0027FC  218B               	addwfc	(ModbusProcess_FC16@u16StartAdd+1)& (0+255),w,b
 11619  0027FE  0100               	movlb	0	; () banked
 11620  002800  6F83               	movwf	(??_ModbusProcess_FC16+3)& (0+255),b
 11621  002802  0100               	movlb	0	; () banked
 11622  002804  5180               	movf	??_ModbusProcess_FC16& (0+255),w,b
 11623  002806  0100               	movlb	0	; () banked
 11624  002808  5D82               	subwf	(??_ModbusProcess_FC16+2)& (0+255),w,b
 11625  00280A  0100               	movlb	0	; () banked
 11626  00280C  5181               	movf	(??_ModbusProcess_FC16+1)& (0+255),w,b
 11627  00280E  0100               	movlb	0	; () banked
 11628  002810  5983               	subwfb	(??_ModbusProcess_FC16+3)& (0+255),w,b
 11629  002812  A0D8               	btfss	status,0,c
 11630  002814  D78A               	goto	l7765
 11631  002816                     l7773:
 11632  002816  FFFF               	dw	65535	; assembler added errata NOP
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;ModbusRtu.c: 1227: }
 11636                           ;ModbusRtu.c: 1228: u8CopyBufferSize = _u8BufferSize + 2;
 11637  002818  5053               	movf	__u8BufferSize,w,c
 11638  00281A  0F02               	addlw	2
 11639  00281C  0100               	movlb	0	; () banked
 11640  00281E  6F89               	movwf	ModbusProcess_FC16@u8CopyBufferSize& (0+255),b
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;ModbusRtu.c: 1229: ModbusSendTxBuffer();
 11644  002820  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11645                           
 11646                           ;ModbusRtu.c: 1231: return u8CopyBufferSize;
 11647  002824  0100               	movlb	0	; () banked
 11648  002826  5189               	movf	ModbusProcess_FC16@u8CopyBufferSize& (0+255),w,b
 11649                           
 11650                           ; BSR set to: 0
 11651                           
 11652                           ; BSR set to: 0
 11653  002828  0012               	return		;funcret
 11654  00282A  FFFF               	dw	65535	; errata NOP
 11655  00282C                     __end_of_ModbusProcess_FC16:
 11656                           	opt stack 0
 11657                           tblptru	equ	0xFF8
 11658                           tblptrh	equ	0xFF7
 11659                           tblptrl	equ	0xFF6
 11660                           tablat	equ	0xFF5
 11661                           prodh	equ	0xFF4
 11662                           prodl	equ	0xFF3
 11663                           intcon	equ	0xFF2
 11664                           postinc0	equ	0xFEE
 11665                           wreg	equ	0xFE8
 11666                           indf1	equ	0xFE7
 11667                           postinc1	equ	0xFE6
 11668                           postdec1	equ	0xFE5
 11669                           fsr1h	equ	0xFE2
 11670                           fsr1l	equ	0xFE1
 11671                           indf2	equ	0xFDF
 11672                           postinc2	equ	0xFDE
 11673                           postdec2	equ	0xFDD
 11674                           fsr2h	equ	0xFDA
 11675                           fsr2l	equ	0xFD9
 11676                           status	equ	0xFD8
 11677                           
 11678 ;; *************** function _ModbusProcess_FC15 *****************
 11679 ;; Defined at:
 11680 ;;		line 1145 in file "ModbusRtu.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;  regs            2   47[COMRAM] PTR unsigned short 
 11683 ;;		 -> _MODBUSCoils(2), 
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  u16currentCo    2   10[BANK0 ] unsigned short 
 11686 ;;  u16Coilno       2    7[BANK0 ] unsigned short 
 11687 ;;  u16StartCoil    2    5[BANK0 ] unsigned short 
 11688 ;;  u16coil         2    0[BANK0 ] unsigned short 
 11689 ;;  u8bitsno        1   12[BANK0 ] unsigned char 
 11690 ;;  u8currentBit    1    9[BANK0 ] unsigned char 
 11691 ;;  u8frameByte     1    4[BANK0 ] unsigned char 
 11692 ;;  bTemp           1    3[BANK0 ] unsigned char 
 11693 ;;  u8CopyBuffer    1    2[BANK0 ] unsigned char 
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      unsigned char 
 11696 ;; Registers used:
 11697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11698 ;; Tracked objects:
 11699 ;;		On entry : 0/0
 11700 ;;		On exit  : 0/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11703 ;;      Params:         2       0       0       0       0       0       0
 11704 ;;      Locals:         0      13       0       0       0       0       0
 11705 ;;      Temps:          5       0       0       0       0       0       0
 11706 ;;      Totals:         7      13       0       0       0       0       0
 11707 ;;Total ram usage:       20 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    4
 11710 ;; This function calls:
 11711 ;;		_ModbusSendTxBuffer
 11712 ;; This function is called by:
 11713 ;;		_ModbusPoll
 11714 ;; This function uses a non-reentrant model
 11715 ;;
 11716                           
 11717                           	psect	text49
 11718  00257C                     __ptext49:
 11719                           	opt stack 0
 11720  00257C                     _ModbusProcess_FC15:
 11721                           	opt stack 25
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;incstack = 0
 11725  00257C  FFFF               	dw	65535
 11726                           
 11727                           ;ModbusRtu.c: 1148: uint8_t u8currentBit, u8frameByte, u8bitsno;
 11728                           ;ModbusRtu.c: 1149: uint8_t u8CopyBufferSize;
 11729                           ;ModbusRtu.c: 1150: uint16_t u16currentCoil, u16coil;
 11730                           ;ModbusRtu.c: 1151: boolean bTemp;
 11731                           ;ModbusRtu.c: 1154: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
 11732  00257E  0101               	movlb	1	; () banked
 11733  002580  512C               	movf	(__au8Buffer+2)& (0+255),w,b
 11734  002582  6E32               	movwf	??_ModbusProcess_FC15& (0+255),c
 11735  002584  0101               	movlb	1	; () banked
 11736  002586  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 11737  002588  0100               	movlb	0	; () banked
 11738  00258A  6F85               	movwf	ModbusProcess_FC15@u16StartCoil& (0+255),b
 11739  00258C  C032  F086         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;ModbusRtu.c: 1155: _lastAddress = u16StartCoil;
 11743  002590  C085  F0E2         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
 11744  002594  C086  F0E3         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
 11745                           
 11746                           ;ModbusRtu.c: 1156: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
 11747  002598  0101               	movlb	1	; () banked
 11748  00259A  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 11749  00259C  6E32               	movwf	??_ModbusProcess_FC15& (0+255),c
 11750  00259E  0101               	movlb	1	; () banked
 11751  0025A0  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 11752  0025A2  0100               	movlb	0	; () banked
 11753  0025A4  6F87               	movwf	ModbusProcess_FC15@u16Coilno& (0+255),b
 11754  0025A6  C032  F088         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;ModbusRtu.c: 1157: _lastCount = u16Coilno;
 11758  0025AA  C087  F0E4         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
 11759  0025AE  C088  F0E5         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
 11760                           
 11761                           ;ModbusRtu.c: 1160: u8bitsno = 0;
 11762  0025B2  0E00               	movlw	0
 11763  0025B4  0100               	movlb	0	; () banked
 11764  0025B6  6F8C               	movwf	ModbusProcess_FC15@u8bitsno& (0+255),b
 11765                           
 11766                           ;ModbusRtu.c: 1161: u8frameByte = 7;
 11767  0025B8  0E07               	movlw	7
 11768  0025BA  0100               	movlb	0	; () banked
 11769  0025BC  6F84               	movwf	ModbusProcess_FC15@u8frameByte& (0+255),b
 11770                           
 11771                           ;ModbusRtu.c: 1162: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
 11772  0025BE  0E00               	movlw	0
 11773  0025C0  0100               	movlb	0	; () banked
 11774  0025C2  6F8B               	movwf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),b
 11775  0025C4  0E00               	movlw	0
 11776  0025C6  6F8A               	movwf	ModbusProcess_FC15@u16currentCoil& (0+255),b
 11777  0025C8  D071               	goto	l7737
 11778  0025CA                     l7715:
 11779  0025CA  FFFF               	dw	65535	; assembler added errata NOP
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;ModbusRtu.c: 1163: {
 11783                           ;ModbusRtu.c: 1165: u16coil = u16StartCoil + u16currentCoil;
 11784  0025CC  0100               	movlb	0	; () banked
 11785  0025CE  518A               	movf	ModbusProcess_FC15@u16currentCoil& (0+255),w,b
 11786  0025D0  0100               	movlb	0	; () banked
 11787  0025D2  2585               	addwf	ModbusProcess_FC15@u16StartCoil& (0+255),w,b
 11788  0025D4  0100               	movlb	0	; () banked
 11789  0025D6  6F80               	movwf	ModbusProcess_FC15@u16coil& (0+255),b
 11790  0025D8  0100               	movlb	0	; () banked
 11791  0025DA  518B               	movf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),w,b
 11792  0025DC  0100               	movlb	0	; () banked
 11793  0025DE  2186               	addwfc	(ModbusProcess_FC15@u16StartCoil+1)& (0+255),w,b
 11794  0025E0  0100               	movlb	0	; () banked
 11795  0025E2  6F81               	movwf	(ModbusProcess_FC15@u16coil+1)& (0+255),b
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;ModbusRtu.c: 1167: u8currentBit = (uint8_t) u16coil;
 11799  0025E4  C080  F089         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;ModbusRtu.c: 1169: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
 11803  0025E8  C08C  F032         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
 11804  0025EC  0100               	movlb	0	; () banked
 11805  0025EE  5184               	movf	ModbusProcess_FC15@u8frameByte& (0+255),w,b
 11806  0025F0  0D01               	mullw	1
 11807  0025F2  0E2A               	movlw	low __au8Buffer
 11808  0025F4  24F3               	addwf	prodl,w,c
 11809  0025F6  6ED9               	movwf	fsr2l,c
 11810  0025F8  0E01               	movlw	high __au8Buffer
 11811  0025FA  20F4               	addwfc	prodh,w,c
 11812  0025FC  6EDA               	movwf	fsr2h,c
 11813  0025FE  50DF               	movf	indf2,w,c
 11814  002600  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11815  002602  2A32               	incf	??_ModbusProcess_FC15,f,c
 11816  002604  D003               	goto	u7164
 11817  002606                     u7165:
 11818  002606  FFFF               	dw	65535	; assembler added errata NOP
 11819  002608  90D8               	bcf	status,0,c
 11820  00260A  3233               	rrcf	??_ModbusProcess_FC15+1,f,c
 11821  00260C                     u7164:
 11822  00260C  FFFF               	dw	65535	; assembler added errata NOP
 11823  00260E  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11824  002610  D7FA               	goto	u7165
 11825  002612  5033               	movf	??_ModbusProcess_FC15+1,w,c
 11826  002614  0B01               	andlw	1
 11827  002616  0100               	movlb	0	; () banked
 11828  002618  6F83               	movwf	ModbusProcess_FC15@bTemp& (0+255),b
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;ModbusRtu.c: 1173: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
 11832  00261A  0100               	movlb	0	; () banked
 11833  00261C  5183               	movf	ModbusProcess_FC15@bTemp& (0+255),w,b
 11834  00261E  0100               	movlb	0	; () banked
 11835  002620  B4D8               	btfsc	status,2,c
 11836  002622  D018               	goto	l7725
 11837                           
 11838                           ; BSR set to: 0
 11839  002624  C089  F032         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 11840  002628  0E01               	movlw	1
 11841  00262A  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11842  00262C  0E00               	movlw	0
 11843  00262E  6E34               	movwf	(??_ModbusProcess_FC15+2)& (0+255),c
 11844  002630  2A32               	incf	??_ModbusProcess_FC15,f,c
 11845  002632  D004               	goto	u7184
 11846  002634                     u7185:
 11847  002634  FFFF               	dw	65535	; assembler added errata NOP
 11848  002636  90D8               	bcf	status,0,c
 11849  002638  3633               	rlcf	??_ModbusProcess_FC15+1,f,c
 11850  00263A  3634               	rlcf	??_ModbusProcess_FC15+2,f,c
 11851  00263C                     u7184:
 11852  00263C  FFFF               	dw	65535	; assembler added errata NOP
 11853  00263E  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11854  002640  D7F9               	goto	u7185
 11855  002642  C030  FFD9         	movff	ModbusProcess_FC15@regs,fsr2l
 11856  002646  C031  FFDA         	movff	ModbusProcess_FC15@regs+1,fsr2h
 11857  00264A  5033               	movf	??_ModbusProcess_FC15+1,w,c
 11858  00264C  12DE               	iorwf	postinc2,f,c
 11859  00264E  5034               	movf	??_ModbusProcess_FC15+2,w,c
 11860  002650  12DD               	iorwf	postdec2,f,c
 11861  002652  D01C               	goto	l7727
 11862  002654                     l7725:
 11863  002654  FFFF               	dw	65535	; assembler added errata NOP
 11864  002656  C089  F032         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 11865  00265A  0E01               	movlw	1
 11866  00265C  6E33               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 11867  00265E  0E00               	movlw	0
 11868  002660  6E34               	movwf	(??_ModbusProcess_FC15+2)& (0+255),c
 11869  002662  2A32               	incf	??_ModbusProcess_FC15,f,c
 11870  002664  D004               	goto	u7194
 11871  002666                     u7195:
 11872  002666  FFFF               	dw	65535	; assembler added errata NOP
 11873  002668  90D8               	bcf	status,0,c
 11874  00266A  3633               	rlcf	??_ModbusProcess_FC15+1,f,c
 11875  00266C  3634               	rlcf	??_ModbusProcess_FC15+2,f,c
 11876  00266E                     u7194:
 11877  00266E  FFFF               	dw	65535	; assembler added errata NOP
 11878  002670  2E32               	decfsz	??_ModbusProcess_FC15,f,c
 11879  002672  D7F9               	goto	u7195
 11880  002674  1C33               	comf	??_ModbusProcess_FC15+1,w,c
 11881  002676  6E35               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
 11882  002678  1C34               	comf	??_ModbusProcess_FC15+2,w,c
 11883  00267A  6E36               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
 11884  00267C  C030  FFD9         	movff	ModbusProcess_FC15@regs,fsr2l
 11885  002680  C031  FFDA         	movff	ModbusProcess_FC15@regs+1,fsr2h
 11886  002684  5035               	movf	??_ModbusProcess_FC15+3,w,c
 11887  002686  16DE               	andwf	postinc2,f,c
 11888  002688  5036               	movf	??_ModbusProcess_FC15+4,w,c
 11889  00268A  16DD               	andwf	postdec2,f,c
 11890  00268C                     l7727:
 11891  00268C  FFFF               	dw	65535	; assembler added errata NOP
 11892                           
 11893                           ;ModbusRtu.c: 1178: u8bitsno++;
 11894  00268E  0100               	movlb	0	; () banked
 11895  002690  2B8C               	incf	ModbusProcess_FC15@u8bitsno& (0+255),f,b
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;ModbusRtu.c: 1180: if (u8bitsno > 7)
 11899  002692  0E07               	movlw	7
 11900  002694  0100               	movlb	0	; () banked
 11901  002696  658C               	cpfsgt	ModbusProcess_FC15@u8bitsno& (0+255),b
 11902  002698  D005               	goto	l7735
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;ModbusRtu.c: 1181: {
 11906                           ;ModbusRtu.c: 1182: u8bitsno = 0;
 11907  00269A  0E00               	movlw	0
 11908  00269C  0100               	movlb	0	; () banked
 11909  00269E  6F8C               	movwf	ModbusProcess_FC15@u8bitsno& (0+255),b
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;ModbusRtu.c: 1183: u8frameByte++;
 11913  0026A0  0100               	movlb	0	; () banked
 11914  0026A2  2B84               	incf	ModbusProcess_FC15@u8frameByte& (0+255),f,b
 11915  0026A4                     l7735:
 11916  0026A4  FFFF               	dw	65535	; assembler added errata NOP
 11917                           
 11918                           ; BSR set to: 0
 11919  0026A6  0100               	movlb	0	; () banked
 11920  0026A8  4B8A               	infsnz	ModbusProcess_FC15@u16currentCoil& (0+255),f,b
 11921  0026AA  2B8B               	incf	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),f,b
 11922  0026AC                     l7737:
 11923  0026AC  FFFF               	dw	65535	; assembler added errata NOP
 11924                           
 11925                           ; BSR set to: 0
 11926  0026AE  0100               	movlb	0	; () banked
 11927  0026B0  5187               	movf	ModbusProcess_FC15@u16Coilno& (0+255),w,b
 11928  0026B2  0100               	movlb	0	; () banked
 11929  0026B4  5D8A               	subwf	ModbusProcess_FC15@u16currentCoil& (0+255),w,b
 11930  0026B6  0100               	movlb	0	; () banked
 11931  0026B8  5188               	movf	(ModbusProcess_FC15@u16Coilno+1)& (0+255),w,b
 11932  0026BA  0100               	movlb	0	; () banked
 11933  0026BC  598B               	subwfb	(ModbusProcess_FC15@u16currentCoil+1)& (0+255),w,b
 11934  0026BE  A0D8               	btfss	status,0,c
 11935  0026C0  D784               	goto	l7715
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;ModbusRtu.c: 1184: }
 11939                           ;ModbusRtu.c: 1185: }
 11940                           ;ModbusRtu.c: 1189: _u8BufferSize = 6;
 11941                           
 11942                           ; BSR set to: 0
 11943  0026C2  0E06               	movlw	6
 11944  0026C4  6E53               	movwf	__u8BufferSize,c
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;ModbusRtu.c: 1190: u8CopyBufferSize = _u8BufferSize + 2;
 11948  0026C6  5053               	movf	__u8BufferSize,w,c
 11949  0026C8  0F02               	addlw	2
 11950  0026CA  0100               	movlb	0	; () banked
 11951  0026CC  6F82               	movwf	ModbusProcess_FC15@u8CopyBufferSize& (0+255),b
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;ModbusRtu.c: 1191: ModbusSendTxBuffer();
 11955  0026CE  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 11956                           
 11957                           ;ModbusRtu.c: 1192: return u8CopyBufferSize;
 11958  0026D2  0100               	movlb	0	; () banked
 11959  0026D4  5182               	movf	ModbusProcess_FC15@u8CopyBufferSize& (0+255),w,b
 11960                           
 11961                           ; BSR set to: 0
 11962                           
 11963                           ; BSR set to: 0
 11964  0026D6  0012               	return		;funcret
 11965  0026D8  FFFF               	dw	65535	; errata NOP
 11966  0026DA                     __end_of_ModbusProcess_FC15:
 11967                           	opt stack 0
 11968                           tblptru	equ	0xFF8
 11969                           tblptrh	equ	0xFF7
 11970                           tblptrl	equ	0xFF6
 11971                           tablat	equ	0xFF5
 11972                           prodh	equ	0xFF4
 11973                           prodl	equ	0xFF3
 11974                           intcon	equ	0xFF2
 11975                           postinc0	equ	0xFEE
 11976                           wreg	equ	0xFE8
 11977                           indf1	equ	0xFE7
 11978                           postinc1	equ	0xFE6
 11979                           postdec1	equ	0xFE5
 11980                           fsr1h	equ	0xFE2
 11981                           fsr1l	equ	0xFE1
 11982                           indf2	equ	0xFDF
 11983                           postinc2	equ	0xFDE
 11984                           postdec2	equ	0xFDD
 11985                           fsr2h	equ	0xFDA
 11986                           fsr2l	equ	0xFD9
 11987                           status	equ	0xFD8
 11988                           
 11989 ;; *************** function _ModbusProcess_FC102 *****************
 11990 ;; Defined at:
 11991 ;;		line 1520 in file "ModbusRtu.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  1    wreg      unsigned char 
 11998 ;; Registers used:
 11999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12005 ;;      Params:         0       0       0       0       0       0       0
 12006 ;;      Locals:         1       0       0       0       0       0       0
 12007 ;;      Temps:          0       0       0       0       0       0       0
 12008 ;;      Totals:         1       0       0       0       0       0       0
 12009 ;;Total ram usage:        1 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    4
 12012 ;; This function calls:
 12013 ;;		_ModbusSendTxBuffer
 12014 ;; This function is called by:
 12015 ;;		_ModbusPoll
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           	psect	text50
 12020  00024C                     __ptext50:
 12021                           	opt stack 0
 12022  00024C                     _ModbusProcess_FC102:
 12023                           	opt stack 25
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;incstack = 0
 12027  00024C  FFFF               	dw	65535
 12028                           
 12029                           ;ModbusRtu.c: 1522: _au8Buffer[FUNC + 1] = _deviceStatus;
 12030  00024E  C046  F12C         	movff	__deviceStatus,__au8Buffer+2
 12031                           
 12032                           ;ModbusRtu.c: 1523: _u8BufferSize = 3;
 12033  000252  0E03               	movlw	3
 12034  000254  6E53               	movwf	__u8BufferSize,c
 12035                           
 12036                           ;ModbusRtu.c: 1524: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12037  000256  5053               	movf	__u8BufferSize,w,c
 12038  000258  0F02               	addlw	2
 12039  00025A  6E30               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
 12040                           
 12041                           ;ModbusRtu.c: 1525: ModbusSendTxBuffer();
 12042  00025C  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12043                           
 12044                           ;ModbusRtu.c: 1527: return u8CopyBufferSize;
 12045  000260  5030               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
 12046  000262  0012               	return		;funcret
 12047  000264  FFFF               	dw	65535	; errata NOP
 12048  000266                     __end_of_ModbusProcess_FC102:
 12049                           	opt stack 0
 12050                           tblptru	equ	0xFF8
 12051                           tblptrh	equ	0xFF7
 12052                           tblptrl	equ	0xFF6
 12053                           tablat	equ	0xFF5
 12054                           prodh	equ	0xFF4
 12055                           prodl	equ	0xFF3
 12056                           intcon	equ	0xFF2
 12057                           postinc0	equ	0xFEE
 12058                           wreg	equ	0xFE8
 12059                           indf1	equ	0xFE7
 12060                           postinc1	equ	0xFE6
 12061                           postdec1	equ	0xFE5
 12062                           fsr1h	equ	0xFE2
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           postinc2	equ	0xFDE
 12066                           postdec2	equ	0xFDD
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071 ;; *************** function _ModbusProcess_FC101 *****************
 12072 ;; Defined at:
 12073 ;;		line 1502 in file "ModbusRtu.c"
 12074 ;; Parameters:    Size  Location     Type
 12075 ;;		None
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;  u8CopyBuffer    1   47[COMRAM] unsigned char 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      unsigned char 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12087 ;;      Params:         0       0       0       0       0       0       0
 12088 ;;      Locals:         1       0       0       0       0       0       0
 12089 ;;      Temps:          0       0       0       0       0       0       0
 12090 ;;      Totals:         1       0       0       0       0       0       0
 12091 ;;Total ram usage:        1 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:    4
 12094 ;; This function calls:
 12095 ;;		_ModbusSendTxBuffer
 12096 ;; This function is called by:
 12097 ;;		_ModbusPoll
 12098 ;; This function uses a non-reentrant model
 12099 ;;
 12100                           
 12101                           	psect	text51
 12102  003F6A                     __ptext51:
 12103                           	opt stack 0
 12104  003F6A                     _ModbusProcess_FC101:
 12105                           	opt stack 25
 12106                           
 12107                           ;incstack = 0
 12108  003F6A  FFFF               	dw	65535
 12109                           
 12110                           ;ModbusRtu.c: 1504: _u8BufferSize = 10;
 12111  003F6C  0E0A               	movlw	10
 12112  003F6E  6E53               	movwf	__u8BufferSize,c
 12113                           
 12114                           ;ModbusRtu.c: 1505: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
 12115  003F70  C12C  F05C         	movff	__au8Buffer+2,_ModbusUserCommandId
 12116                           
 12117                           ;ModbusRtu.c: 1506: ModbusUserCommandData = _au8Buffer[COM_DATA];
 12118  003F74  C12D  F05B         	movff	__au8Buffer+3,_ModbusUserCommandData
 12119                           
 12120                           ;ModbusRtu.c: 1507: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
 12121  003F78  C12E  F059         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
 12122                           
 12123                           ;ModbusRtu.c: 1508: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
 12124  003F7C  C12F  F05A         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
 12125                           
 12126                           ;ModbusRtu.c: 1509: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
 12127  003F80  C130  F0F9         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
 12128                           
 12129                           ;ModbusRtu.c: 1510: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
 12130  003F84  C131  F0FA         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
 12131                           
 12132                           ;ModbusRtu.c: 1511: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
 12133  003F88  C132  F0FB         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
 12134                           
 12135                           ;ModbusRtu.c: 1512: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
 12136  003F8C  C133  F0FC         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
 12137                           
 12138                           ;ModbusRtu.c: 1514: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12139  003F90  5053               	movf	__u8BufferSize,w,c
 12140  003F92  0F02               	addlw	2
 12141  003F94  6E30               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
 12142                           
 12143                           ;ModbusRtu.c: 1515: ModbusSendTxBuffer();
 12144  003F96  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12145                           
 12146                           ;ModbusRtu.c: 1517: return u8CopyBufferSize;
 12147  003F9A  5030               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
 12148  003F9C  0012               	return		;funcret
 12149  003F9E  FFFF               	dw	65535	; errata NOP
 12150  003FA0                     __end_of_ModbusProcess_FC101:
 12151                           	opt stack 0
 12152                           tblptru	equ	0xFF8
 12153                           tblptrh	equ	0xFF7
 12154                           tblptrl	equ	0xFF6
 12155                           tablat	equ	0xFF5
 12156                           prodh	equ	0xFF4
 12157                           prodl	equ	0xFF3
 12158                           intcon	equ	0xFF2
 12159                           postinc0	equ	0xFEE
 12160                           wreg	equ	0xFE8
 12161                           indf1	equ	0xFE7
 12162                           postinc1	equ	0xFE6
 12163                           postdec1	equ	0xFE5
 12164                           fsr1h	equ	0xFE2
 12165                           fsr1l	equ	0xFE1
 12166                           indf2	equ	0xFDF
 12167                           postinc2	equ	0xFDE
 12168                           postdec2	equ	0xFDD
 12169                           fsr2h	equ	0xFDA
 12170                           fsr2l	equ	0xFD9
 12171                           status	equ	0xFD8
 12172                           
 12173 ;; *************** function _ModbusProcess_FC100 *****************
 12174 ;; Defined at:
 12175 ;;		line 1460 in file "ModbusRtu.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;		None
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;  newTime        18   35[BANK0 ] struct tm
 12180 ;;  newRawTime      4   30[BANK0 ] long 
 12181 ;;  u8CopyBuffer    1   34[BANK0 ] unsigned char 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      unsigned char 
 12184 ;; Registers used:
 12185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12191 ;;      Params:         0       0       0       0       0       0       0
 12192 ;;      Locals:         0      23       0       0       0       0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0
 12194 ;;      Totals:         0      23       0       0       0       0       0
 12195 ;;Total ram usage:       23 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    6
 12198 ;; This function calls:
 12199 ;;		_ModbusSendTxBuffer
 12200 ;;		_ModbusSetExceptionStatusBit
 12201 ;;		_SetHourMin
 12202 ;;		_SetTime
 12203 ;;		_mktime
 12204 ;; This function is called by:
 12205 ;;		_ModbusPoll
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           	psect	text52
 12210  00282C                     __ptext52:
 12211                           	opt stack 0
 12212  00282C                     _ModbusProcess_FC100:
 12213                           	opt stack 23
 12214                           
 12215                           ;incstack = 0
 12216  00282C  FFFF               	dw	65535
 12217                           
 12218                           ;ModbusRtu.c: 1462: _u8BufferSize = 10;
 12219  00282E  0E0A               	movlw	10
 12220  002830  6E53               	movwf	__u8BufferSize,c
 12221                           
 12222                           ;ModbusRtu.c: 1463: _lastCommand = _au8Buffer[COM_COM_ID];
 12223  002832  C12C  F04C         	movff	__au8Buffer+2,__lastCommand
 12224                           
 12225                           ;ModbusRtu.c: 1464: switch(_lastCommand)
 12226  002836  D06E               	goto	l8029
 12227  002838                     l1033:
 12228  002838  FFFF               	dw	65535	; assembler added errata NOP
 12229  00283A  00FF               	reset		; ;# 
 12230                           
 12231                           ;ModbusRtu.c: 1470: break;
 12232  00283C  D076               	goto	l8031
 12233  00283E                     l1035:
 12234  00283E  FFFF               	dw	65535	; assembler added errata NOP
 12235                           
 12236                           ;ModbusRtu.c: 1472: _u8id = _au8Buffer[COM_DATA];
 12237  002840  C12D  F0F0         	movff	__au8Buffer+3,__u8id
 12238  002844                     l1037:
 12239  002844  FFFF               	dw	65535	; assembler added errata NOP
 12240  002846  B2A6               	btfsc	4006,1,c	;volatile
 12241  002848  D7FD               	goto	l1037
 12242  00284A  0E01               	movlw	1
 12243  00284C  6EA9               	movwf	4009,c	;volatile
 12244  00284E  C0F0  FFA8         	movff	__u8id,4008	;volatile
 12245  002852  9EA6               	bcf	4006,7,c	;volatile
 12246  002854  9CA6               	bcf	4006,6,c	;volatile
 12247  002856  90D8               	bcf	status,0,c	;volatile
 12248  002858  BEF2               	btfsc	intcon,7,c	;volatile
 12249  00285A  80D8               	bsf	status,0,c	;volatile
 12250  00285C  9EF2               	bcf	intcon,7,c	;volatile
 12251  00285E  84A6               	bsf	4006,2,c	;volatile
 12252  002860  0E55               	movlw	85
 12253  002862  6EA7               	movwf	4007,c	;volatile
 12254  002864  0EAA               	movlw	170
 12255  002866  6EA7               	movwf	4007,c	;volatile
 12256  002868  82A6               	bsf	4006,1,c	;volatile
 12257  00286A  94A6               	bcf	4006,2,c	;volatile
 12258  00286C  B0D8               	btfsc	status,0,c	;volatile
 12259  00286E  8EF2               	bsf	intcon,7,c	;volatile
 12260  002870                     l1043:
 12261  002870  FFFF               	dw	65535	; assembler added errata NOP
 12262  002872  B2A6               	btfsc	4006,1,c	;volatile
 12263  002874  D7FD               	goto	l1043
 12264                           
 12265                           ;ModbusRtu.c: 1476: ModbusSetExceptionStatusBit(0, 1);
 12266  002876  0E01               	movlw	1
 12267  002878  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
 12268  00287A  0E00               	movlw	0
 12269  00287C  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
 12270                           
 12271                           ;ModbusRtu.c: 1477: break;
 12272  002880  D054               	goto	l8031
 12273  002882                     l8005:
 12274  002882  FFFF               	dw	65535	; assembler added errata NOP
 12275                           
 12276                           ;ModbusRtu.c: 1479: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
 12277  002884  0E2E               	movlw	low (__au8Buffer+4)
 12278  002886  6E2D               	movwf	SetHourMin@newHour,c
 12279  002888  0E01               	movlw	high (__au8Buffer+4)
 12280  00288A  6E2E               	movwf	SetHourMin@newHour+1,c
 12281  00288C  0E2F               	movlw	low (__au8Buffer+5)
 12282  00288E  6E2F               	movwf	SetHourMin@newMin,c
 12283  002890  0E01               	movlw	high (__au8Buffer+5)
 12284  002892  6E30               	movwf	SetHourMin@newMin+1,c
 12285  002894  0E31               	movlw	low (__au8Buffer+7)
 12286  002896  6E31               	movwf	SetHourMin@sec,c
 12287  002898  0E01               	movlw	high (__au8Buffer+7)
 12288  00289A  6E32               	movwf	SetHourMin@sec+1,c
 12289  00289C  EC62  F017         	call	_SetHourMin	;wreg free
 12290                           
 12291                           ;ModbusRtu.c: 1482: struct tm newTime;
 12292                           ;ModbusRtu.c: 1483: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
 12293  0028A0  0E64               	movlw	100
 12294  0028A2  0101               	movlb	1	; () banked
 12295  0028A4  2533               	addwf	(__au8Buffer+9)& (0+255),w,b
 12296  0028A6  0100               	movlb	0	; () banked
 12297  0028A8  6FAD               	movwf	(ModbusProcess_FC100@newTime+10)& (0+255),b
 12298  0028AA  0100               	movlb	0	; () banked
 12299  0028AC  6BAE               	clrf	(ModbusProcess_FC100@newTime+11)& (0+255),b
 12300  0028AE  0E00               	movlw	0
 12301  0028B0  23AE               	addwfc	(ModbusProcess_FC100@newTime+11)& (0+255),f,b
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;ModbusRtu.c: 1484: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
 12305  0028B2  C132  F0AB         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
 12306  0028B6  0100               	movlb	0	; () banked
 12307  0028B8  6BAC               	clrf	(ModbusProcess_FC100@newTime+9)& (0+255),b
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;ModbusRtu.c: 1485: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
 12311  0028BA  C130  F0A9         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
 12312  0028BE  0100               	movlb	0	; () banked
 12313  0028C0  6BAA               	clrf	(ModbusProcess_FC100@newTime+7)& (0+255),b
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;ModbusRtu.c: 1486: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
 12317  0028C2  C12E  F0A7         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
 12318  0028C6  0100               	movlb	0	; () banked
 12319  0028C8  6BA8               	clrf	(ModbusProcess_FC100@newTime+5)& (0+255),b
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;ModbusRtu.c: 1487: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
 12323  0028CA  C12F  F0A5         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
 12324  0028CE  0100               	movlb	0	; () banked
 12325  0028D0  6BA6               	clrf	(ModbusProcess_FC100@newTime+3)& (0+255),b
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;ModbusRtu.c: 1488: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
 12329  0028D2  C131  F0A3         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
 12330  0028D6  0100               	movlb	0	; () banked
 12331  0028D8  6BA4               	clrf	(ModbusProcess_FC100@newTime+1)& (0+255),b
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;ModbusRtu.c: 1489: time_t newRawTime = mktime(&newTime);
 12335  0028DA  0EA3               	movlw	low ModbusProcess_FC100@newTime
 12336  0028DC  0100               	movlb	0	; () banked
 12337  0028DE  6F90               	movwf	mktime@timeptr& (0+255),b
 12338  0028E0  0E00               	movlw	high ModbusProcess_FC100@newTime
 12339  0028E2  0100               	movlb	0	; () banked
 12340  0028E4  6F91               	movwf	(mktime@timeptr+1)& (0+255),b
 12341  0028E6  ECC7  F00A         	call	_mktime	;wreg free
 12342  0028EA  C090  F09E         	movff	?_mktime,ModbusProcess_FC100@newRawTime
 12343  0028EE  C091  F09F         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
 12344  0028F2  C092  F0A0         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
 12345  0028F6  C093  F0A1         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
 12346                           
 12347                           ;ModbusRtu.c: 1490: SetTime(&newRawTime);
 12348  0028FA  0E9E               	movlw	low ModbusProcess_FC100@newRawTime
 12349  0028FC  6E21               	movwf	SetTime@newTime,c
 12350  0028FE  0E00               	movlw	high ModbusProcess_FC100@newRawTime
 12351  002900  6E22               	movwf	SetTime@newTime+1,c
 12352  002902  EC08  F001         	call	_SetTime	;wreg free
 12353                           
 12354                           ;ModbusRtu.c: 1492: ((_deviceStatus) |= ((unsigned short)1 << (0)));
 12355  002906  8046               	bsf	__deviceStatus,0,c
 12356                           
 12357                           ;ModbusRtu.c: 1493: ModbusSetExceptionStatusBit(0, 1);
 12358  002908  0E01               	movlw	1
 12359  00290A  6E21               	movwf	ModbusSetExceptionStatusBit@value,c
 12360  00290C  0E00               	movlw	0
 12361  00290E  ECEB  F01E         	call	_ModbusSetExceptionStatusBit
 12362                           
 12363                           ;ModbusRtu.c: 1495: }
 12364                           
 12365                           ;ModbusRtu.c: 1494: break;
 12366  002912  D00B               	goto	l8031
 12367  002914                     l8029:
 12368  002914  FFFF               	dw	65535	; assembler added errata NOP
 12369  002916  504C               	movf	__lastCommand,w,c
 12370                           
 12371                           ; Switch size 1, requested type "space"
 12372                           ; Number of cases is 3, Range of values is 1 to 127
 12373                           ; switch strategies available:
 12374                           ; Name         Instructions Cycles
 12375                           ; simple_byte           10     6 (average)
 12376                           ;	Chosen strategy is simple_byte
 12377  002918  0A01               	xorlw	1	; case 1
 12378  00291A  B4D8               	btfsc	status,2,c
 12379  00291C  D790               	goto	l1035
 12380  00291E  0A11               	xorlw	17	; case 16
 12381  002920  B4D8               	btfsc	status,2,c
 12382  002922  D7AF               	goto	l8005
 12383  002924  0A6F               	xorlw	111	; case 127
 12384  002926  B4D8               	btfsc	status,2,c
 12385  002928  D787               	goto	l1033
 12386  00292A                     l8031:
 12387  00292A  FFFF               	dw	65535	; assembler added errata NOP
 12388                           
 12389                           ;ModbusRtu.c: 1496: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
 12390  00292C  5053               	movf	__u8BufferSize,w,c
 12391  00292E  0F02               	addlw	2
 12392  002930  0100               	movlb	0	; () banked
 12393  002932  6FA2               	movwf	ModbusProcess_FC100@u8CopyBufferSize& (0+255),b
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;ModbusRtu.c: 1497: ModbusSendTxBuffer();
 12397  002934  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 12398                           
 12399                           ;ModbusRtu.c: 1499: return u8CopyBufferSize;
 12400  002938  0100               	movlb	0	; () banked
 12401  00293A  51A2               	movf	ModbusProcess_FC100@u8CopyBufferSize& (0+255),w,b
 12402                           
 12403                           ; BSR set to: 0
 12404                           
 12405                           ; BSR set to: 0
 12406  00293C  0012               	return		;funcret
 12407  00293E  FFFF               	dw	65535	; errata NOP
 12408  002940                     __end_of_ModbusProcess_FC100:
 12409                           	opt stack 0
 12410                           tblptru	equ	0xFF8
 12411                           tblptrh	equ	0xFF7
 12412                           tblptrl	equ	0xFF6
 12413                           tablat	equ	0xFF5
 12414                           prodh	equ	0xFF4
 12415                           prodl	equ	0xFF3
 12416                           intcon	equ	0xFF2
 12417                           postinc0	equ	0xFEE
 12418                           wreg	equ	0xFE8
 12419                           indf1	equ	0xFE7
 12420                           postinc1	equ	0xFE6
 12421                           postdec1	equ	0xFE5
 12422                           fsr1h	equ	0xFE2
 12423                           fsr1l	equ	0xFE1
 12424                           indf2	equ	0xFDF
 12425                           postinc2	equ	0xFDE
 12426                           postdec2	equ	0xFDD
 12427                           fsr2h	equ	0xFDA
 12428                           fsr2l	equ	0xFD9
 12429                           status	equ	0xFD8
 12430                           
 12431 ;; *************** function _mktime *****************
 12432 ;; Defined at:
 12433 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12434 ;; Parameters:    Size  Location     Type
 12435 ;;  timeptr         2   16[BANK0 ] PTR struct tm
 12436 ;;		 -> ModbusProcess_FC100@newTime(18), 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  tt              4   26[BANK0 ] long 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  4   16[BANK0 ] long 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12448 ;;      Params:         0       4       0       0       0       0       0
 12449 ;;      Locals:         0       4       0       0       0       0       0
 12450 ;;      Temps:          0       6       0       0       0       0       0
 12451 ;;      Totals:         0      14       0       0       0       0       0
 12452 ;;Total ram usage:       14 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    5
 12455 ;; This function calls:
 12456 ;;		___lmul
 12457 ;;		_ymd_to_scalar
 12458 ;; This function is called by:
 12459 ;;		_ModbusProcess_FC100
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           	psect	text53
 12464  00158E                     __ptext53:
 12465                           	opt stack 0
 12466  00158E                     _mktime:
 12467                           	opt stack 23
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;incstack = 0
 12471  00158E  FFFF               	dw	65535
 12472  001590  0100               	movlb	0	; () banked
 12473  001592  EE20 F00A          	lfsr	2,10
 12474  001596  5190               	movf	mktime@timeptr& (0+255),w,b
 12475  001598  26D9               	addwf	fsr2l,f,c
 12476  00159A  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12477  00159C  22DA               	addwfc	fsr2h,f,c
 12478  00159E  0E01               	movlw	1
 12479  0015A0  BEDB               	btfsc	plusw2,7,c
 12480  0015A2  D018               	goto	l1502
 12481  0015A4  0E01               	movlw	1
 12482  0015A6  50DB               	movf	plusw2,w,c
 12483  0015A8  E104               	bnz	u6610
 12484  0015AA  0E46               	movlw	70
 12485  0015AC  5CDE               	subwf	postinc2,w,c
 12486  0015AE  A0D8               	btfss	status,0,c
 12487  0015B0  D011               	goto	l1502
 12488  0015B2                     u6610:
 12489                           
 12490                           ; BSR set to: 0
 12491  0015B2  0100               	movlb	0	; () banked
 12492  0015B4  EE20 F00A          	lfsr	2,10
 12493  0015B8  5190               	movf	mktime@timeptr& (0+255),w,b
 12494  0015BA  26D9               	addwf	fsr2l,f,c
 12495  0015BC  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12496  0015BE  22DA               	addwfc	fsr2h,f,c
 12497  0015C0  0E01               	movlw	1
 12498  0015C2  BEDB               	btfsc	plusw2,7,c
 12499  0015C4  D00E               	goto	l7249
 12500  0015C6  0E01               	movlw	1
 12501  0015C8  50DB               	movf	plusw2,w,c
 12502  0015CA  E104               	bnz	u6620
 12503  0015CC  0E8B               	movlw	139
 12504  0015CE  5CDE               	subwf	postinc2,w,c
 12505  0015D0  A0D8               	btfss	status,0,c
 12506  0015D2  D007               	goto	l7249
 12507  0015D4                     u6620:
 12508  0015D4                     l1502:
 12509  0015D4  FFFF               	dw	65535	; assembler added errata NOP
 12510                           
 12511                           ; BSR set to: 0
 12512  0015D6  0100               	movlb	0	; () banked
 12513  0015D8  699A               	setf	mktime@tt& (0+255),b
 12514  0015DA  699B               	setf	(mktime@tt+1)& (0+255),b
 12515  0015DC  699C               	setf	(mktime@tt+2)& (0+255),b
 12516  0015DE  699D               	setf	(mktime@tt+3)& (0+255),b
 12517  0015E0  D10F               	goto	l7259
 12518  0015E2                     l7249:
 12519  0015E2  FFFF               	dw	65535	; assembler added errata NOP
 12520                           
 12521                           ; BSR set to: 0
 12522  0015E4  0100               	movlb	0	; () banked
 12523  0015E6  EE20 F00A          	lfsr	2,10
 12524  0015EA  5190               	movf	mktime@timeptr& (0+255),w,b
 12525  0015EC  26D9               	addwf	fsr2l,f,c
 12526  0015EE  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12527  0015F0  22DA               	addwfc	fsr2h,f,c
 12528  0015F2  CFDE F094          	movff	postinc2,??_mktime
 12529  0015F6  CFDD F095          	movff	postdec2,??_mktime+1
 12530  0015FA  0E6C               	movlw	108
 12531  0015FC  0100               	movlb	0	; () banked
 12532  0015FE  2594               	addwf	??_mktime& (0+255),w,b
 12533  001600  0100               	movlb	0	; () banked
 12534  001602  6F80               	movwf	ymd_to_scalar@yr& (0+255),b
 12535  001604  0E07               	movlw	7
 12536  001606  0100               	movlb	0	; () banked
 12537  001608  2195               	addwfc	(??_mktime+1)& (0+255),w,b
 12538  00160A  0100               	movlb	0	; () banked
 12539  00160C  6F81               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
 12540  00160E  0100               	movlb	0	; () banked
 12541  001610  EE20 F008          	lfsr	2,8
 12542  001614  5190               	movf	mktime@timeptr& (0+255),w,b
 12543  001616  26D9               	addwf	fsr2l,f,c
 12544  001618  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12545  00161A  22DA               	addwfc	fsr2h,f,c
 12546  00161C  CFDE F096          	movff	postinc2,??_mktime+2
 12547  001620  CFDD F097          	movff	postdec2,??_mktime+3
 12548  001624  0E01               	movlw	1
 12549  001626  0100               	movlb	0	; () banked
 12550  001628  2596               	addwf	(??_mktime+2)& (0+255),w,b
 12551  00162A  0100               	movlb	0	; () banked
 12552  00162C  6F82               	movwf	ymd_to_scalar@mo& (0+255),b
 12553  00162E  0E00               	movlw	0
 12554  001630  0100               	movlb	0	; () banked
 12555  001632  2197               	addwfc	(??_mktime+3)& (0+255),w,b
 12556  001634  0100               	movlb	0	; () banked
 12557  001636  6F83               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
 12558  001638  0100               	movlb	0	; () banked
 12559  00163A  EE20 F006          	lfsr	2,6
 12560  00163E  5190               	movf	mktime@timeptr& (0+255),w,b
 12561  001640  26D9               	addwf	fsr2l,f,c
 12562  001642  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12563  001644  22DA               	addwfc	fsr2h,f,c
 12564  001646  CFDE F084          	movff	postinc2,ymd_to_scalar@day
 12565  00164A  CFDD F085          	movff	postdec2,ymd_to_scalar@day+1
 12566  00164E  ECF5  F016         	call	_ymd_to_scalar	;wreg free
 12567  001652  C080  F09A         	movff	?_ymd_to_scalar,mktime@tt
 12568  001656  C081  F09B         	movff	?_ymd_to_scalar+1,mktime@tt+1
 12569  00165A  C082  F09C         	movff	?_ymd_to_scalar+2,mktime@tt+2
 12570  00165E  C083  F09D         	movff	?_ymd_to_scalar+3,mktime@tt+3
 12571  001662  0E07               	movlw	7
 12572  001664  0100               	movlb	0	; () banked
 12573  001666  6F81               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
 12574  001668  0EB2               	movlw	178
 12575  00166A  6F80               	movwf	ymd_to_scalar@yr& (0+255),b
 12576  00166C  0E00               	movlw	0
 12577  00166E  0100               	movlb	0	; () banked
 12578  001670  6F83               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
 12579  001672  0E01               	movlw	1
 12580  001674  6F82               	movwf	ymd_to_scalar@mo& (0+255),b
 12581  001676  0E00               	movlw	0
 12582  001678  0100               	movlb	0	; () banked
 12583  00167A  6F85               	movwf	(ymd_to_scalar@day+1)& (0+255),b
 12584  00167C  0E01               	movlw	1
 12585  00167E  6F84               	movwf	ymd_to_scalar@day& (0+255),b
 12586  001680  ECF5  F016         	call	_ymd_to_scalar	;wreg free
 12587  001684  0100               	movlb	0	; () banked
 12588  001686  5180               	movf	?_ymd_to_scalar& (0+255),w,b
 12589  001688  0100               	movlb	0	; () banked
 12590  00168A  5F9A               	subwf	mktime@tt& (0+255),f,b
 12591  00168C  0100               	movlb	0	; () banked
 12592  00168E  5181               	movf	(?_ymd_to_scalar+1)& (0+255),w,b
 12593  001690  0100               	movlb	0	; () banked
 12594  001692  5B9B               	subwfb	(mktime@tt+1)& (0+255),f,b
 12595  001694  0100               	movlb	0	; () banked
 12596  001696  5182               	movf	(?_ymd_to_scalar+2)& (0+255),w,b
 12597  001698  0100               	movlb	0	; () banked
 12598  00169A  5B9C               	subwfb	(mktime@tt+2)& (0+255),f,b
 12599  00169C  0100               	movlb	0	; () banked
 12600  00169E  5183               	movf	(?_ymd_to_scalar+3)& (0+255),w,b
 12601  0016A0  0100               	movlb	0	; () banked
 12602  0016A2  5B9D               	subwfb	(mktime@tt+3)& (0+255),f,b
 12603                           
 12604                           ; BSR set to: 0
 12605  0016A4  0100               	movlb	0	; () banked
 12606  0016A6  EE20 F004          	lfsr	2,4
 12607  0016AA  5190               	movf	mktime@timeptr& (0+255),w,b
 12608  0016AC  26D9               	addwf	fsr2l,f,c
 12609  0016AE  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12610  0016B0  22DA               	addwfc	fsr2h,f,c
 12611  0016B2  CFDE F094          	movff	postinc2,??_mktime
 12612  0016B6  CFDD F095          	movff	postdec2,??_mktime+1
 12613  0016BA  C094  F096         	movff	??_mktime,??_mktime+2
 12614  0016BE  C095  F097         	movff	??_mktime+1,??_mktime+3
 12615  0016C2  0E00               	movlw	0
 12616  0016C4  0100               	movlb	0	; () banked
 12617  0016C6  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12618  0016C8  0EFF               	movlw	255
 12619  0016CA  6F98               	movwf	(??_mktime+4)& (0+255),b
 12620  0016CC  6F99               	movwf	(??_mktime+5)& (0+255),b
 12621  0016CE  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12622  0016D2  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12623  0016D6  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12624  0016DA  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12625  0016DE  0E18               	movlw	24
 12626  0016E0  6E25               	movwf	___lmul@multiplicand,c
 12627  0016E2  0E00               	movlw	0
 12628  0016E4  6E26               	movwf	___lmul@multiplicand+1,c
 12629  0016E6  0E00               	movlw	0
 12630  0016E8  6E27               	movwf	___lmul@multiplicand+2,c
 12631  0016EA  0E00               	movlw	0
 12632  0016EC  6E28               	movwf	___lmul@multiplicand+3,c
 12633  0016EE  ECBC  F01D         	call	___lmul	;wreg free
 12634  0016F2  0100               	movlb	0	; () banked
 12635  0016F4  5196               	movf	(??_mktime+2)& (0+255),w,b
 12636  0016F6  2421               	addwf	?___lmul,w,c
 12637  0016F8  0100               	movlb	0	; () banked
 12638  0016FA  6F9A               	movwf	mktime@tt& (0+255),b
 12639  0016FC  0100               	movlb	0	; () banked
 12640  0016FE  5197               	movf	(??_mktime+3)& (0+255),w,b
 12641  001700  2022               	addwfc	?___lmul+1,w,c
 12642  001702  0100               	movlb	0	; () banked
 12643  001704  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12644  001706  0100               	movlb	0	; () banked
 12645  001708  5198               	movf	(??_mktime+4)& (0+255),w,b
 12646  00170A  2023               	addwfc	?___lmul+2,w,c
 12647  00170C  0100               	movlb	0	; () banked
 12648  00170E  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12649  001710  0100               	movlb	0	; () banked
 12650  001712  5199               	movf	(??_mktime+5)& (0+255),w,b
 12651  001714  2024               	addwfc	?___lmul+3,w,c
 12652  001716  0100               	movlb	0	; () banked
 12653  001718  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12654                           
 12655                           ; BSR set to: 0
 12656  00171A  0100               	movlb	0	; () banked
 12657  00171C  EE20 F002          	lfsr	2,2
 12658  001720  5190               	movf	mktime@timeptr& (0+255),w,b
 12659  001722  26D9               	addwf	fsr2l,f,c
 12660  001724  5191               	movf	(mktime@timeptr+1)& (0+255),w,b
 12661  001726  22DA               	addwfc	fsr2h,f,c
 12662  001728  CFDE F094          	movff	postinc2,??_mktime
 12663  00172C  CFDD F095          	movff	postdec2,??_mktime+1
 12664  001730  C094  F096         	movff	??_mktime,??_mktime+2
 12665  001734  C095  F097         	movff	??_mktime+1,??_mktime+3
 12666  001738  0E00               	movlw	0
 12667  00173A  0100               	movlb	0	; () banked
 12668  00173C  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12669  00173E  0EFF               	movlw	255
 12670  001740  6F98               	movwf	(??_mktime+4)& (0+255),b
 12671  001742  6F99               	movwf	(??_mktime+5)& (0+255),b
 12672  001744  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12673  001748  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12674  00174C  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12675  001750  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12676  001754  0E3C               	movlw	60
 12677  001756  6E25               	movwf	___lmul@multiplicand,c
 12678  001758  0E00               	movlw	0
 12679  00175A  6E26               	movwf	___lmul@multiplicand+1,c
 12680  00175C  0E00               	movlw	0
 12681  00175E  6E27               	movwf	___lmul@multiplicand+2,c
 12682  001760  0E00               	movlw	0
 12683  001762  6E28               	movwf	___lmul@multiplicand+3,c
 12684  001764  ECBC  F01D         	call	___lmul	;wreg free
 12685  001768  0100               	movlb	0	; () banked
 12686  00176A  5196               	movf	(??_mktime+2)& (0+255),w,b
 12687  00176C  2421               	addwf	?___lmul,w,c
 12688  00176E  0100               	movlb	0	; () banked
 12689  001770  6F9A               	movwf	mktime@tt& (0+255),b
 12690  001772  0100               	movlb	0	; () banked
 12691  001774  5197               	movf	(??_mktime+3)& (0+255),w,b
 12692  001776  2022               	addwfc	?___lmul+1,w,c
 12693  001778  0100               	movlb	0	; () banked
 12694  00177A  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12695  00177C  0100               	movlb	0	; () banked
 12696  00177E  5198               	movf	(??_mktime+4)& (0+255),w,b
 12697  001780  2023               	addwfc	?___lmul+2,w,c
 12698  001782  0100               	movlb	0	; () banked
 12699  001784  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12700  001786  0100               	movlb	0	; () banked
 12701  001788  5199               	movf	(??_mktime+5)& (0+255),w,b
 12702  00178A  2024               	addwfc	?___lmul+3,w,c
 12703  00178C  0100               	movlb	0	; () banked
 12704  00178E  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707  001790  C090  FFD9         	movff	mktime@timeptr,fsr2l
 12708  001794  C091  FFDA         	movff	mktime@timeptr+1,fsr2h
 12709  001798  CFDE F094          	movff	postinc2,??_mktime
 12710  00179C  CFDD F095          	movff	postdec2,??_mktime+1
 12711  0017A0  C094  F096         	movff	??_mktime,??_mktime+2
 12712  0017A4  C095  F097         	movff	??_mktime+1,??_mktime+3
 12713  0017A8  0E00               	movlw	0
 12714  0017AA  0100               	movlb	0	; () banked
 12715  0017AC  BF97               	btfsc	(??_mktime+3)& (0+255),7,b
 12716  0017AE  0EFF               	movlw	255
 12717  0017B0  6F98               	movwf	(??_mktime+4)& (0+255),b
 12718  0017B2  6F99               	movwf	(??_mktime+5)& (0+255),b
 12719  0017B4  C09A  F021         	movff	mktime@tt,___lmul@multiplier
 12720  0017B8  C09B  F022         	movff	mktime@tt+1,___lmul@multiplier+1
 12721  0017BC  C09C  F023         	movff	mktime@tt+2,___lmul@multiplier+2
 12722  0017C0  C09D  F024         	movff	mktime@tt+3,___lmul@multiplier+3
 12723  0017C4  0E3C               	movlw	60
 12724  0017C6  6E25               	movwf	___lmul@multiplicand,c
 12725  0017C8  0E00               	movlw	0
 12726  0017CA  6E26               	movwf	___lmul@multiplicand+1,c
 12727  0017CC  0E00               	movlw	0
 12728  0017CE  6E27               	movwf	___lmul@multiplicand+2,c
 12729  0017D0  0E00               	movlw	0
 12730  0017D2  6E28               	movwf	___lmul@multiplicand+3,c
 12731  0017D4  ECBC  F01D         	call	___lmul	;wreg free
 12732  0017D8  0100               	movlb	0	; () banked
 12733  0017DA  5196               	movf	(??_mktime+2)& (0+255),w,b
 12734  0017DC  2421               	addwf	?___lmul,w,c
 12735  0017DE  0100               	movlb	0	; () banked
 12736  0017E0  6F9A               	movwf	mktime@tt& (0+255),b
 12737  0017E2  0100               	movlb	0	; () banked
 12738  0017E4  5197               	movf	(??_mktime+3)& (0+255),w,b
 12739  0017E6  2022               	addwfc	?___lmul+1,w,c
 12740  0017E8  0100               	movlb	0	; () banked
 12741  0017EA  6F9B               	movwf	(mktime@tt+1)& (0+255),b
 12742  0017EC  0100               	movlb	0	; () banked
 12743  0017EE  5198               	movf	(??_mktime+4)& (0+255),w,b
 12744  0017F0  2023               	addwfc	?___lmul+2,w,c
 12745  0017F2  0100               	movlb	0	; () banked
 12746  0017F4  6F9C               	movwf	(mktime@tt+2)& (0+255),b
 12747  0017F6  0100               	movlb	0	; () banked
 12748  0017F8  5199               	movf	(??_mktime+5)& (0+255),w,b
 12749  0017FA  2024               	addwfc	?___lmul+3,w,c
 12750  0017FC  0100               	movlb	0	; () banked
 12751  0017FE  6F9D               	movwf	(mktime@tt+3)& (0+255),b
 12752  001800                     l7259:
 12753  001800  FFFF               	dw	65535	; assembler added errata NOP
 12754                           
 12755                           ; BSR set to: 0
 12756  001802  C09A  F090         	movff	mktime@tt,?_mktime
 12757  001806  C09B  F091         	movff	mktime@tt+1,?_mktime+1
 12758  00180A  C09C  F092         	movff	mktime@tt+2,?_mktime+2
 12759  00180E  C09D  F093         	movff	mktime@tt+3,?_mktime+3
 12760                           
 12761                           ; BSR set to: 0
 12762                           
 12763                           ; BSR set to: 0
 12764  001812  0012               	return		;funcret
 12765  001814  FFFF               	dw	65535	; errata NOP
 12766  001816                     __end_of_mktime:
 12767                           	opt stack 0
 12768                           tblptru	equ	0xFF8
 12769                           tblptrh	equ	0xFF7
 12770                           tblptrl	equ	0xFF6
 12771                           tablat	equ	0xFF5
 12772                           prodh	equ	0xFF4
 12773                           prodl	equ	0xFF3
 12774                           intcon	equ	0xFF2
 12775                           postinc0	equ	0xFEE
 12776                           wreg	equ	0xFE8
 12777                           indf1	equ	0xFE7
 12778                           postinc1	equ	0xFE6
 12779                           postdec1	equ	0xFE5
 12780                           fsr1h	equ	0xFE2
 12781                           fsr1l	equ	0xFE1
 12782                           indf2	equ	0xFDF
 12783                           postinc2	equ	0xFDE
 12784                           postdec2	equ	0xFDD
 12785                           plusw2	equ	0xFDB
 12786                           fsr2h	equ	0xFDA
 12787                           fsr2l	equ	0xFD9
 12788                           status	equ	0xFD8
 12789                           
 12790 ;; *************** function _ymd_to_scalar *****************
 12791 ;; Defined at:
 12792 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  yr              2    0[BANK0 ] unsigned int 
 12795 ;;  mo              2    2[BANK0 ] unsigned int 
 12796 ;;  day             2    4[BANK0 ] unsigned int 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  scalar          4   12[BANK0 ] long 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  4    0[BANK0 ] long 
 12801 ;; Registers used:
 12802 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12808 ;;      Params:         0       6       0       0       0       0       0
 12809 ;;      Locals:         0       6       0       0       0       0       0
 12810 ;;      Temps:          0       4       0       0       0       0       0
 12811 ;;      Totals:         0      16       0       0       0       0       0
 12812 ;;Total ram usage:       16 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    4
 12815 ;; This function calls:
 12816 ;;		_isleap
 12817 ;;		_months_to_days
 12818 ;;		_years_to_days
 12819 ;; This function is called by:
 12820 ;;		_mktime
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text54
 12825  002DEA                     __ptext54:
 12826                           	opt stack 0
 12827  002DEA                     _ymd_to_scalar:
 12828                           	opt stack 23
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;incstack = 0
 12832  002DEA  FFFF               	dw	65535
 12833  002DEC  C082  F02E         	movff	ymd_to_scalar@mo,months_to_days@month
 12834  002DF0  C083  F02F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
 12835  002DF4  EC98  F01F         	call	_months_to_days	;wreg free
 12836  002DF8  0100               	movlb	0	; () banked
 12837  002DFA  5184               	movf	ymd_to_scalar@day& (0+255),w,b
 12838  002DFC  262E               	addwf	?_months_to_days,f,c
 12839  002DFE  0100               	movlb	0	; () banked
 12840  002E00  5185               	movf	(ymd_to_scalar@day+1)& (0+255),w,b
 12841  002E02  222F               	addwfc	?_months_to_days+1,f,c
 12842  002E04  C02E  F08C         	movff	?_months_to_days,ymd_to_scalar@scalar
 12843  002E08  C02F  F08D         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
 12844  002E0C  0100               	movlb	0	; () banked
 12845  002E0E  6B8E               	clrf	(ymd_to_scalar@scalar+2)& (0+255),b
 12846  002E10  6B8F               	clrf	(ymd_to_scalar@scalar+3)& (0+255),b
 12847                           
 12848                           ; BSR set to: 0
 12849  002E12  0100               	movlb	0	; () banked
 12850  002E14  5183               	movf	(ymd_to_scalar@mo+1)& (0+255),w,b
 12851  002E16  E105               	bnz	u6310
 12852  002E18  0E03               	movlw	3
 12853  002E1A  0100               	movlb	0	; () banked
 12854  002E1C  5D82               	subwf	ymd_to_scalar@mo& (0+255),w,b
 12855  002E1E  A0D8               	btfss	status,0,c
 12856  002E20  D030               	goto	l6965
 12857  002E22                     u6310:
 12858                           
 12859                           ; BSR set to: 0
 12860  002E22  C080  F026         	movff	ymd_to_scalar@yr,isleap@yr
 12861  002E26  C081  F027         	movff	ymd_to_scalar@yr+1,isleap@yr+1
 12862  002E2A  ECF9  F01C         	call	_isleap	;wreg free
 12863  002E2E  5026               	movf	?_isleap,w,c
 12864  002E30  1027               	iorwf	?_isleap+1,w,c
 12865  002E32  A4D8               	btfss	status,2,c
 12866  002E34  D005               	goto	l6961
 12867  002E36  0E00               	movlw	0
 12868  002E38  0100               	movlb	0	; () banked
 12869  002E3A  6F8B               	movwf	(_ymd_to_scalar$2324+1)& (0+255),b
 12870  002E3C  0E02               	movlw	2
 12871  002E3E  D005               	goto	L16
 12872  002E40                     l6961:
 12873  002E40  FFFF               	dw	65535	; assembler added errata NOP
 12874  002E42  0E00               	movlw	0
 12875  002E44  0100               	movlb	0	; () banked
 12876  002E46  6F8B               	movwf	(_ymd_to_scalar$2324+1)& (0+255),b
 12877  002E48  0E01               	movlw	1
 12878  002E4A                     L16:
 12879  002E4A  FFFF               	dw	65535	; assembler added errata NOP
 12880  002E4C  6F8A               	movwf	_ymd_to_scalar$2324& (0+255),b
 12881                           
 12882                           ; BSR set to: 0
 12883                           
 12884                           ; BSR set to: 0
 12885  002E4E  C08A  F086         	movff	_ymd_to_scalar$2324,??_ymd_to_scalar
 12886  002E52  C08B  F087         	movff	_ymd_to_scalar$2324+1,??_ymd_to_scalar+1
 12887  002E56  0E00               	movlw	0
 12888  002E58  0100               	movlb	0	; () banked
 12889  002E5A  BF87               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,b
 12890  002E5C  0EFF               	movlw	255
 12891  002E5E  6F88               	movwf	(??_ymd_to_scalar+2)& (0+255),b
 12892  002E60  6F89               	movwf	(??_ymd_to_scalar+3)& (0+255),b
 12893  002E62  0100               	movlb	0	; () banked
 12894  002E64  5186               	movf	??_ymd_to_scalar& (0+255),w,b
 12895  002E66  0100               	movlb	0	; () banked
 12896  002E68  5F8C               	subwf	ymd_to_scalar@scalar& (0+255),f,b
 12897  002E6A  0100               	movlb	0	; () banked
 12898  002E6C  5187               	movf	(??_ymd_to_scalar+1)& (0+255),w,b
 12899  002E6E  0100               	movlb	0	; () banked
 12900  002E70  5B8D               	subwfb	(ymd_to_scalar@scalar+1)& (0+255),f,b
 12901  002E72  0100               	movlb	0	; () banked
 12902  002E74  5188               	movf	(??_ymd_to_scalar+2)& (0+255),w,b
 12903  002E76  0100               	movlb	0	; () banked
 12904  002E78  5B8E               	subwfb	(ymd_to_scalar@scalar+2)& (0+255),f,b
 12905  002E7A  0100               	movlb	0	; () banked
 12906  002E7C  5189               	movf	(??_ymd_to_scalar+3)& (0+255),w,b
 12907  002E7E  0100               	movlb	0	; () banked
 12908  002E80  5B8F               	subwfb	(ymd_to_scalar@scalar+3)& (0+255),f,b
 12909  002E82                     l6965:
 12910  002E82  FFFF               	dw	65535	; assembler added errata NOP
 12911                           
 12912                           ; BSR set to: 0
 12913  002E84  0100               	movlb	0	; () banked
 12914  002E86  0780               	decf	ymd_to_scalar@yr& (0+255),f,b
 12915  002E88  A0D8               	btfss	status,0,c
 12916  002E8A  0781               	decf	(ymd_to_scalar@yr+1)& (0+255),f,b
 12917                           
 12918                           ; BSR set to: 0
 12919  002E8C  C080  F02E         	movff	ymd_to_scalar@yr,years_to_days@yr
 12920  002E90  C081  F02F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
 12921  002E94  EC7E  F01A         	call	_years_to_days	;wreg free
 12922  002E98  502E               	movf	?_years_to_days,w,c
 12923  002E9A  0100               	movlb	0	; () banked
 12924  002E9C  278C               	addwf	ymd_to_scalar@scalar& (0+255),f,b
 12925  002E9E  502F               	movf	?_years_to_days+1,w,c
 12926  002EA0  0100               	movlb	0	; () banked
 12927  002EA2  238D               	addwfc	(ymd_to_scalar@scalar+1)& (0+255),f,b
 12928  002EA4  5030               	movf	?_years_to_days+2,w,c
 12929  002EA6  0100               	movlb	0	; () banked
 12930  002EA8  238E               	addwfc	(ymd_to_scalar@scalar+2)& (0+255),f,b
 12931  002EAA  5031               	movf	?_years_to_days+3,w,c
 12932  002EAC  0100               	movlb	0	; () banked
 12933  002EAE  238F               	addwfc	(ymd_to_scalar@scalar+3)& (0+255),f,b
 12934                           
 12935                           ; BSR set to: 0
 12936  002EB0  C08C  F080         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
 12937  002EB4  C08D  F081         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
 12938  002EB8  C08E  F082         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
 12939  002EBC  C08F  F083         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
 12940                           
 12941                           ; BSR set to: 0
 12942                           
 12943                           ; BSR set to: 0
 12944  002EC0  0012               	return		;funcret
 12945  002EC2  FFFF               	dw	65535	; errata NOP
 12946  002EC4                     __end_of_ymd_to_scalar:
 12947                           	opt stack 0
 12948                           tblptru	equ	0xFF8
 12949                           tblptrh	equ	0xFF7
 12950                           tblptrl	equ	0xFF6
 12951                           tablat	equ	0xFF5
 12952                           prodh	equ	0xFF4
 12953                           prodl	equ	0xFF3
 12954                           intcon	equ	0xFF2
 12955                           postinc0	equ	0xFEE
 12956                           wreg	equ	0xFE8
 12957                           indf1	equ	0xFE7
 12958                           postinc1	equ	0xFE6
 12959                           postdec1	equ	0xFE5
 12960                           fsr1h	equ	0xFE2
 12961                           fsr1l	equ	0xFE1
 12962                           indf2	equ	0xFDF
 12963                           postinc2	equ	0xFDE
 12964                           postdec2	equ	0xFDD
 12965                           plusw2	equ	0xFDB
 12966                           fsr2h	equ	0xFDA
 12967                           fsr2l	equ	0xFD9
 12968                           status	equ	0xFD8
 12969                           
 12970 ;; *************** function _years_to_days *****************
 12971 ;; Defined at:
 12972 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 12973 ;; Parameters:    Size  Location     Type
 12974 ;;  yr              2   45[COMRAM] unsigned int 
 12975 ;; Auto vars:     Size  Location     Type
 12976 ;;  ret             4   51[COMRAM] long 
 12977 ;; Return value:  Size  Location     Type
 12978 ;;                  4   45[COMRAM] long 
 12979 ;; Registers used:
 12980 ;;		wreg, status,2, status,0, cstack
 12981 ;; Tracked objects:
 12982 ;;		On entry : 0/0
 12983 ;;		On exit  : 0/0
 12984 ;;		Unchanged: 0/0
 12985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12986 ;;      Params:         4       0       0       0       0       0       0
 12987 ;;      Locals:         4       0       0       0       0       0       0
 12988 ;;      Temps:          2       0       0       0       0       0       0
 12989 ;;      Totals:        10       0       0       0       0       0       0
 12990 ;;Total ram usage:       10 bytes
 12991 ;; Hardware stack levels used:    1
 12992 ;; Hardware stack levels required when called:    3
 12993 ;; This function calls:
 12994 ;;		___lmul
 12995 ;;		___lwdiv
 12996 ;; This function is called by:
 12997 ;;		_ymd_to_scalar
 12998 ;; This function uses a non-reentrant model
 12999 ;;
 13000                           
 13001                           	psect	text55
 13002  0034FC                     __ptext55:
 13003                           	opt stack 0
 13004  0034FC                     _years_to_days:
 13005                           	opt stack 23
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;incstack = 0
 13009  0034FC  FFFF               	dw	65535
 13010  0034FE  C02E  F021         	movff	years_to_days@yr,___lmul@multiplier
 13011  003502  C02F  F022         	movff	years_to_days@yr+1,___lmul@multiplier+1
 13012  003506  6A23               	clrf	___lmul@multiplier+2,c
 13013  003508  6A24               	clrf	___lmul@multiplier+3,c
 13014  00350A  0E6D               	movlw	109
 13015  00350C  6E25               	movwf	___lmul@multiplicand,c
 13016  00350E  0E01               	movlw	1
 13017  003510  6E26               	movwf	___lmul@multiplicand+1,c
 13018  003512  0E00               	movlw	0
 13019  003514  6E27               	movwf	___lmul@multiplicand+2,c
 13020  003516  0E00               	movlw	0
 13021  003518  6E28               	movwf	___lmul@multiplicand+3,c
 13022  00351A  ECBC  F01D         	call	___lmul	;wreg free
 13023  00351E  C021  F034         	movff	?___lmul,years_to_days@ret
 13024  003522  C022  F035         	movff	?___lmul+1,years_to_days@ret+1
 13025  003526  C023  F036         	movff	?___lmul+2,years_to_days@ret+2
 13026  00352A  C024  F037         	movff	?___lmul+3,years_to_days@ret+3
 13027  00352E  C02E  F027         	movff	years_to_days@yr,___lwdiv@dividend
 13028  003532  C02F  F028         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 13029  003536  0E00               	movlw	0
 13030  003538  6E2A               	movwf	___lwdiv@divisor+1,c
 13031  00353A  0E64               	movlw	100
 13032  00353C  6E29               	movwf	___lwdiv@divisor,c
 13033  00353E  EC5C  F01D         	call	___lwdiv	;wreg free
 13034  003542  1E27               	comf	?___lwdiv,f,c
 13035  003544  1E28               	comf	?___lwdiv+1,f,c
 13036  003546  4A27               	infsnz	?___lwdiv,f,c
 13037  003548  2A28               	incf	?___lwdiv+1,f,c
 13038  00354A  C02E  F032         	movff	years_to_days@yr,??_years_to_days
 13039  00354E  C02F  F033         	movff	years_to_days@yr+1,??_years_to_days+1
 13040  003552  90D8               	bcf	status,0,c
 13041  003554  3233               	rrcf	??_years_to_days+1,f,c
 13042  003556  3232               	rrcf	??_years_to_days,f,c
 13043  003558  90D8               	bcf	status,0,c
 13044  00355A  3233               	rrcf	??_years_to_days+1,f,c
 13045  00355C  3232               	rrcf	??_years_to_days,f,c
 13046  00355E  5027               	movf	?___lwdiv,w,c
 13047  003560  2632               	addwf	??_years_to_days,f,c
 13048  003562  5028               	movf	?___lwdiv+1,w,c
 13049  003564  2233               	addwfc	??_years_to_days+1,f,c
 13050  003566  5032               	movf	??_years_to_days,w,c
 13051  003568  2634               	addwf	years_to_days@ret,f,c
 13052  00356A  5033               	movf	??_years_to_days+1,w,c
 13053  00356C  2235               	addwfc	years_to_days@ret+1,f,c
 13054  00356E  0E00               	movlw	0
 13055  003570  2236               	addwfc	years_to_days@ret+2,f,c
 13056  003572  0E00               	movlw	0
 13057  003574  2237               	addwfc	years_to_days@ret+3,f,c
 13058  003576  C02E  F027         	movff	years_to_days@yr,___lwdiv@dividend
 13059  00357A  C02F  F028         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 13060  00357E  0E01               	movlw	1
 13061  003580  6E2A               	movwf	___lwdiv@divisor+1,c
 13062  003582  0E90               	movlw	144
 13063  003584  6E29               	movwf	___lwdiv@divisor,c
 13064  003586  EC5C  F01D         	call	___lwdiv	;wreg free
 13065  00358A  5027               	movf	?___lwdiv,w,c
 13066  00358C  2634               	addwf	years_to_days@ret,f,c
 13067  00358E  5028               	movf	?___lwdiv+1,w,c
 13068  003590  2235               	addwfc	years_to_days@ret+1,f,c
 13069  003592  0E00               	movlw	0
 13070  003594  2236               	addwfc	years_to_days@ret+2,f,c
 13071  003596  0E00               	movlw	0
 13072  003598  2237               	addwfc	years_to_days@ret+3,f,c
 13073  00359A  C034  F02E         	movff	years_to_days@ret,?_years_to_days
 13074  00359E  C035  F02F         	movff	years_to_days@ret+1,?_years_to_days+1
 13075  0035A2  C036  F030         	movff	years_to_days@ret+2,?_years_to_days+2
 13076  0035A6  C037  F031         	movff	years_to_days@ret+3,?_years_to_days+3
 13077  0035AA  0012               	return		;funcret
 13078  0035AC  FFFF               	dw	65535	; errata NOP
 13079  0035AE                     __end_of_years_to_days:
 13080                           	opt stack 0
 13081                           tblptru	equ	0xFF8
 13082                           tblptrh	equ	0xFF7
 13083                           tblptrl	equ	0xFF6
 13084                           tablat	equ	0xFF5
 13085                           prodh	equ	0xFF4
 13086                           prodl	equ	0xFF3
 13087                           intcon	equ	0xFF2
 13088                           postinc0	equ	0xFEE
 13089                           wreg	equ	0xFE8
 13090                           indf1	equ	0xFE7
 13091                           postinc1	equ	0xFE6
 13092                           postdec1	equ	0xFE5
 13093                           fsr1h	equ	0xFE2
 13094                           fsr1l	equ	0xFE1
 13095                           indf2	equ	0xFDF
 13096                           postinc2	equ	0xFDE
 13097                           postdec2	equ	0xFDD
 13098                           plusw2	equ	0xFDB
 13099                           fsr2h	equ	0xFDA
 13100                           fsr2l	equ	0xFD9
 13101                           status	equ	0xFD8
 13102                           
 13103 ;; *************** function _months_to_days *****************
 13104 ;; Defined at:
 13105 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;  month           2   45[COMRAM] unsigned int 
 13108 ;; Auto vars:     Size  Location     Type
 13109 ;;		None
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  2   45[COMRAM] unsigned int 
 13112 ;; Registers used:
 13113 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13114 ;; Tracked objects:
 13115 ;;		On entry : 0/0
 13116 ;;		On exit  : 0/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13119 ;;      Params:         2       0       0       0       0       0       0
 13120 ;;      Locals:         0       0       0       0       0       0       0
 13121 ;;      Temps:          0       0       0       0       0       0       0
 13122 ;;      Totals:         2       0       0       0       0       0       0
 13123 ;;Total ram usage:        2 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    3
 13126 ;; This function calls:
 13127 ;;		___lwdiv
 13128 ;;		___wmul
 13129 ;; This function is called by:
 13130 ;;		_ymd_to_scalar
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           	psect	text56
 13135  003F30                     __ptext56:
 13136                           	opt stack 0
 13137  003F30                     _months_to_days:
 13138                           	opt stack 23
 13139                           
 13140                           ;incstack = 0
 13141  003F30  FFFF               	dw	65535
 13142  003F32  C02E  F021         	movff	months_to_days@month,___wmul@multiplier
 13143  003F36  C02F  F022         	movff	months_to_days@month+1,___wmul@multiplier+1
 13144  003F3A  0E0B               	movlw	11
 13145  003F3C  6E24               	movwf	___wmul@multiplicand+1,c
 13146  003F3E  0EF1               	movlw	241
 13147  003F40  6E23               	movwf	___wmul@multiplicand,c
 13148  003F42  ECBC  F000         	call	___wmul	;wreg free
 13149  003F46  0E41               	movlw	65
 13150  003F48  2421               	addwf	?___wmul,w,c
 13151  003F4A  6E27               	movwf	___lwdiv@dividend,c
 13152  003F4C  0EF4               	movlw	244
 13153  003F4E  2022               	addwfc	?___wmul+1,w,c
 13154  003F50  6E28               	movwf	___lwdiv@dividend+1,c
 13155  003F52  0E00               	movlw	0
 13156  003F54  6E2A               	movwf	___lwdiv@divisor+1,c
 13157  003F56  0E64               	movlw	100
 13158  003F58  6E29               	movwf	___lwdiv@divisor,c
 13159  003F5A  EC5C  F01D         	call	___lwdiv	;wreg free
 13160  003F5E  C027  F02E         	movff	?___lwdiv,?_months_to_days
 13161  003F62  C028  F02F         	movff	?___lwdiv+1,?_months_to_days+1
 13162  003F66  0012               	return		;funcret
 13163  003F68  FFFF               	dw	65535	; errata NOP
 13164  003F6A                     __end_of_months_to_days:
 13165                           	opt stack 0
 13166                           tblptru	equ	0xFF8
 13167                           tblptrh	equ	0xFF7
 13168                           tblptrl	equ	0xFF6
 13169                           tablat	equ	0xFF5
 13170                           prodh	equ	0xFF4
 13171                           prodl	equ	0xFF3
 13172                           intcon	equ	0xFF2
 13173                           postinc0	equ	0xFEE
 13174                           wreg	equ	0xFE8
 13175                           indf1	equ	0xFE7
 13176                           postinc1	equ	0xFE6
 13177                           postdec1	equ	0xFE5
 13178                           fsr1h	equ	0xFE2
 13179                           fsr1l	equ	0xFE1
 13180                           indf2	equ	0xFDF
 13181                           postinc2	equ	0xFDE
 13182                           postdec2	equ	0xFDD
 13183                           plusw2	equ	0xFDB
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function ___wmul *****************
 13189 ;; Defined at:
 13190 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  multiplier      2   32[COMRAM] unsigned int 
 13193 ;;  multiplicand    2   34[COMRAM] unsigned int 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;  product         2   36[COMRAM] unsigned int 
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  2   32[COMRAM] unsigned int 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0, prodl, prodh
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13205 ;;      Params:         4       0       0       0       0       0       0
 13206 ;;      Locals:         2       0       0       0       0       0       0
 13207 ;;      Temps:          0       0       0       0       0       0       0
 13208 ;;      Totals:         6       0       0       0       0       0       0
 13209 ;;Total ram usage:        6 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    2
 13212 ;; This function calls:
 13213 ;;		Nothing
 13214 ;; This function is called by:
 13215 ;;		_months_to_days
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           	psect	text57
 13220  000178                     __ptext57:
 13221                           	opt stack 0
 13222  000178                     ___wmul:
 13223                           	opt stack 23
 13224                           
 13225                           ;incstack = 0
 13226  000178  FFFF               	dw	65535
 13227  00017A  5021               	movf	___wmul@multiplier,w,c
 13228  00017C  0223               	mulwf	___wmul@multiplicand,c
 13229  00017E  CFF3 F025          	movff	prodl,___wmul@product
 13230  000182  CFF4 F026          	movff	prodh,___wmul@product+1
 13231  000186  5021               	movf	___wmul@multiplier,w,c
 13232  000188  0224               	mulwf	___wmul@multiplicand+1,c
 13233  00018A  50F3               	movf	prodl,w,c
 13234  00018C  2626               	addwf	___wmul@product+1,f,c
 13235  00018E  5022               	movf	___wmul@multiplier+1,w,c
 13236  000190  0223               	mulwf	___wmul@multiplicand,c
 13237  000192  50F3               	movf	prodl,w,c
 13238  000194  2626               	addwf	___wmul@product+1,f,c
 13239  000196  C025  F021         	movff	___wmul@product,?___wmul
 13240  00019A  C026  F022         	movff	___wmul@product+1,?___wmul+1
 13241  00019E  0012               	return		;funcret
 13242  0001A0  FFFF               	dw	65535	; errata NOP
 13243  0001A2                     __end_of___wmul:
 13244                           	opt stack 0
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           postinc0	equ	0xFEE
 13253                           wreg	equ	0xFE8
 13254                           indf1	equ	0xFE7
 13255                           postinc1	equ	0xFE6
 13256                           postdec1	equ	0xFE5
 13257                           fsr1h	equ	0xFE2
 13258                           fsr1l	equ	0xFE1
 13259                           indf2	equ	0xFDF
 13260                           postinc2	equ	0xFDE
 13261                           postdec2	equ	0xFDD
 13262                           plusw2	equ	0xFDB
 13263                           fsr2h	equ	0xFDA
 13264                           fsr2l	equ	0xFD9
 13265                           status	equ	0xFD8
 13266                           
 13267 ;; *************** function ___lwdiv *****************
 13268 ;; Defined at:
 13269 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  dividend        2   38[COMRAM] unsigned int 
 13272 ;;  divisor         2   40[COMRAM] unsigned int 
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;  quotient        2   43[COMRAM] unsigned int 
 13275 ;;  counter         1   42[COMRAM] unsigned char 
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  2   38[COMRAM] unsigned int 
 13278 ;; Registers used:
 13279 ;;		wreg, status,2, status,0
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13285 ;;      Params:         4       0       0       0       0       0       0
 13286 ;;      Locals:         3       0       0       0       0       0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0
 13288 ;;      Totals:         7       0       0       0       0       0       0
 13289 ;;Total ram usage:        7 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    2
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_months_to_days
 13296 ;;		_years_to_days
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           	psect	text58
 13301  003AB8                     __ptext58:
 13302                           	opt stack 0
 13303  003AB8                     ___lwdiv:
 13304                           	opt stack 23
 13305                           
 13306                           ;incstack = 0
 13307  003AB8  FFFF               	dw	65535
 13308  003ABA  0E00               	movlw	0
 13309  003ABC  6E2D               	movwf	___lwdiv@quotient+1,c
 13310  003ABE  0E00               	movlw	0
 13311  003AC0  6E2C               	movwf	___lwdiv@quotient,c
 13312  003AC2  5029               	movf	___lwdiv@divisor,w,c
 13313  003AC4  102A               	iorwf	___lwdiv@divisor+1,w,c
 13314  003AC6  B4D8               	btfsc	status,2,c
 13315  003AC8  D020               	goto	l1456
 13316  003ACA  0E01               	movlw	1
 13317  003ACC  6E2B               	movwf	___lwdiv@counter,c
 13318  003ACE  D005               	goto	l6463
 13319  003AD0                     l6461:
 13320  003AD0  FFFF               	dw	65535	; assembler added errata NOP
 13321  003AD2  90D8               	bcf	status,0,c
 13322  003AD4  3629               	rlcf	___lwdiv@divisor,f,c
 13323  003AD6  362A               	rlcf	___lwdiv@divisor+1,f,c
 13324  003AD8  2A2B               	incf	___lwdiv@counter,f,c
 13325  003ADA                     l6463:
 13326  003ADA  FFFF               	dw	65535	; assembler added errata NOP
 13327  003ADC  AE2A               	btfss	___lwdiv@divisor+1,7,c
 13328  003ADE  D7F8               	goto	l6461
 13329  003AE0                     l6465:
 13330  003AE0  FFFF               	dw	65535	; assembler added errata NOP
 13331  003AE2  90D8               	bcf	status,0,c
 13332  003AE4  362C               	rlcf	___lwdiv@quotient,f,c
 13333  003AE6  362D               	rlcf	___lwdiv@quotient+1,f,c
 13334  003AE8  5029               	movf	___lwdiv@divisor,w,c
 13335  003AEA  5C27               	subwf	___lwdiv@dividend,w,c
 13336  003AEC  502A               	movf	___lwdiv@divisor+1,w,c
 13337  003AEE  5828               	subwfb	___lwdiv@dividend+1,w,c
 13338  003AF0  A0D8               	btfss	status,0,c
 13339  003AF2  D005               	goto	l6473
 13340  003AF4  5029               	movf	___lwdiv@divisor,w,c
 13341  003AF6  5E27               	subwf	___lwdiv@dividend,f,c
 13342  003AF8  502A               	movf	___lwdiv@divisor+1,w,c
 13343  003AFA  5A28               	subwfb	___lwdiv@dividend+1,f,c
 13344  003AFC  802C               	bsf	___lwdiv@quotient,0,c
 13345  003AFE                     l6473:
 13346  003AFE  FFFF               	dw	65535	; assembler added errata NOP
 13347  003B00  90D8               	bcf	status,0,c
 13348  003B02  322A               	rrcf	___lwdiv@divisor+1,f,c
 13349  003B04  3229               	rrcf	___lwdiv@divisor,f,c
 13350  003B06  2E2B               	decfsz	___lwdiv@counter,f,c
 13351  003B08  D7EB               	goto	l6465
 13352  003B0A                     l1456:
 13353  003B0A  FFFF               	dw	65535	; assembler added errata NOP
 13354  003B0C  C02C  F027         	movff	___lwdiv@quotient,?___lwdiv
 13355  003B10  C02D  F028         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13356  003B14  0012               	return		;funcret
 13357  003B16  FFFF               	dw	65535	; errata NOP
 13358  003B18                     __end_of___lwdiv:
 13359                           	opt stack 0
 13360                           tblptru	equ	0xFF8
 13361                           tblptrh	equ	0xFF7
 13362                           tblptrl	equ	0xFF6
 13363                           tablat	equ	0xFF5
 13364                           prodh	equ	0xFF4
 13365                           prodl	equ	0xFF3
 13366                           intcon	equ	0xFF2
 13367                           postinc0	equ	0xFEE
 13368                           wreg	equ	0xFE8
 13369                           indf1	equ	0xFE7
 13370                           postinc1	equ	0xFE6
 13371                           postdec1	equ	0xFE5
 13372                           fsr1h	equ	0xFE2
 13373                           fsr1l	equ	0xFE1
 13374                           indf2	equ	0xFDF
 13375                           postinc2	equ	0xFDE
 13376                           postdec2	equ	0xFDD
 13377                           plusw2	equ	0xFDB
 13378                           fsr2h	equ	0xFDA
 13379                           fsr2l	equ	0xFD9
 13380                           status	equ	0xFD8
 13381                           
 13382 ;; *************** function _isleap *****************
 13383 ;; Defined at:
 13384 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 13385 ;; Parameters:    Size  Location     Type
 13386 ;;  yr              2   37[COMRAM] unsigned int 
 13387 ;; Auto vars:     Size  Location     Type
 13388 ;;		None
 13389 ;; Return value:  Size  Location     Type
 13390 ;;                  2   37[COMRAM] int 
 13391 ;; Registers used:
 13392 ;;		wreg, status,2, status,0, cstack
 13393 ;; Tracked objects:
 13394 ;;		On entry : 0/0
 13395 ;;		On exit  : 0/0
 13396 ;;		Unchanged: 0/0
 13397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13398 ;;      Params:         2       0       0       0       0       0       0
 13399 ;;      Locals:         1       0       0       0       0       0       0
 13400 ;;      Temps:          2       0       0       0       0       0       0
 13401 ;;      Totals:         5       0       0       0       0       0       0
 13402 ;;Total ram usage:        5 bytes
 13403 ;; Hardware stack levels used:    1
 13404 ;; Hardware stack levels required when called:    3
 13405 ;; This function calls:
 13406 ;;		___lwmod
 13407 ;; This function is called by:
 13408 ;;		_ymd_to_scalar
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           	psect	text59
 13413  0039F2                     __ptext59:
 13414                           	opt stack 0
 13415  0039F2                     _isleap:
 13416                           	opt stack 23
 13417                           
 13418                           ;incstack = 0
 13419  0039F2  FFFF               	dw	65535
 13420  0039F4  0E01               	movlw	1
 13421  0039F6  6E2A               	movwf	_isleap$2311,c
 13422  0039F8  C026  F021         	movff	isleap@yr,___lwmod@dividend
 13423  0039FC  C027  F022         	movff	isleap@yr+1,___lwmod@dividend+1
 13424  003A00  0E01               	movlw	1
 13425  003A02  6E24               	movwf	___lwmod@divisor+1,c
 13426  003A04  0E90               	movlw	144
 13427  003A06  6E23               	movwf	___lwmod@divisor,c
 13428  003A08  EC9B  F01E         	call	___lwmod	;wreg free
 13429  003A0C  5021               	movf	?___lwmod,w,c
 13430  003A0E  1022               	iorwf	?___lwmod+1,w,c
 13431  003A10  B4D8               	btfsc	status,2,c
 13432  003A12  D01B               	goto	l6651
 13433  003A14  0E03               	movlw	3
 13434  003A16  1426               	andwf	isleap@yr,w,c
 13435  003A18  6E28               	movwf	??_isleap& (0+255),c
 13436  003A1A  0E00               	movlw	0
 13437  003A1C  1427               	andwf	isleap@yr+1,w,c
 13438  003A1E  6E29               	movwf	(??_isleap+1)& (0+255),c
 13439  003A20  5028               	movf	??_isleap,w,c
 13440  003A22  1029               	iorwf	??_isleap+1,w,c
 13441  003A24  A4D8               	btfss	status,2,c
 13442  003A26  D00E               	goto	l6649
 13443  003A28  C026  F021         	movff	isleap@yr,___lwmod@dividend
 13444  003A2C  C027  F022         	movff	isleap@yr+1,___lwmod@dividend+1
 13445  003A30  0E00               	movlw	0
 13446  003A32  6E24               	movwf	___lwmod@divisor+1,c
 13447  003A34  0E64               	movlw	100
 13448  003A36  6E23               	movwf	___lwmod@divisor,c
 13449  003A38  EC9B  F01E         	call	___lwmod	;wreg free
 13450  003A3C  5021               	movf	?___lwmod,w,c
 13451  003A3E  1022               	iorwf	?___lwmod+1,w,c
 13452  003A40  A4D8               	btfss	status,2,c
 13453  003A42  D003               	goto	l6651
 13454  003A44                     l6649:
 13455  003A44  FFFF               	dw	65535	; assembler added errata NOP
 13456  003A46  0E00               	movlw	0
 13457  003A48  6E2A               	movwf	_isleap$2311,c
 13458  003A4A                     l6651:
 13459  003A4A  FFFF               	dw	65535	; assembler added errata NOP
 13460  003A4C  C02A  F026         	movff	_isleap$2311,?_isleap
 13461  003A50  6A27               	clrf	?_isleap+1,c
 13462  003A52  0012               	return		;funcret
 13463  003A54  FFFF               	dw	65535	; errata NOP
 13464  003A56                     __end_of_isleap:
 13465                           	opt stack 0
 13466                           tblptru	equ	0xFF8
 13467                           tblptrh	equ	0xFF7
 13468                           tblptrl	equ	0xFF6
 13469                           tablat	equ	0xFF5
 13470                           prodh	equ	0xFF4
 13471                           prodl	equ	0xFF3
 13472                           intcon	equ	0xFF2
 13473                           postinc0	equ	0xFEE
 13474                           wreg	equ	0xFE8
 13475                           indf1	equ	0xFE7
 13476                           postinc1	equ	0xFE6
 13477                           postdec1	equ	0xFE5
 13478                           fsr1h	equ	0xFE2
 13479                           fsr1l	equ	0xFE1
 13480                           indf2	equ	0xFDF
 13481                           postinc2	equ	0xFDE
 13482                           postdec2	equ	0xFDD
 13483                           plusw2	equ	0xFDB
 13484                           fsr2h	equ	0xFDA
 13485                           fsr2l	equ	0xFD9
 13486                           status	equ	0xFD8
 13487                           
 13488 ;; *************** function ___lwmod *****************
 13489 ;; Defined at:
 13490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  dividend        2   32[COMRAM] unsigned int 
 13493 ;;  divisor         2   34[COMRAM] unsigned int 
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;  counter         1   36[COMRAM] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  2   32[COMRAM] unsigned int 
 13498 ;; Registers used:
 13499 ;;		wreg, status,2, status,0
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13505 ;;      Params:         4       0       0       0       0       0       0
 13506 ;;      Locals:         1       0       0       0       0       0       0
 13507 ;;      Temps:          0       0       0       0       0       0       0
 13508 ;;      Totals:         5       0       0       0       0       0       0
 13509 ;;Total ram usage:        5 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    2
 13512 ;; This function calls:
 13513 ;;		Nothing
 13514 ;; This function is called by:
 13515 ;;		_isleap
 13516 ;; This function uses a non-reentrant model
 13517 ;;
 13518                           
 13519                           	psect	text60
 13520  003D36                     __ptext60:
 13521                           	opt stack 0
 13522  003D36                     ___lwmod:
 13523                           	opt stack 23
 13524                           
 13525                           ;incstack = 0
 13526  003D36  FFFF               	dw	65535
 13527  003D38  5023               	movf	___lwmod@divisor,w,c
 13528  003D3A  1024               	iorwf	___lwmod@divisor+1,w,c
 13529  003D3C  B4D8               	btfsc	status,2,c
 13530  003D3E  D01C               	goto	l1466
 13531  003D40  0E01               	movlw	1
 13532  003D42  6E25               	movwf	___lwmod@counter,c
 13533  003D44  D005               	goto	l6483
 13534  003D46                     l6481:
 13535  003D46  FFFF               	dw	65535	; assembler added errata NOP
 13536  003D48  90D8               	bcf	status,0,c
 13537  003D4A  3623               	rlcf	___lwmod@divisor,f,c
 13538  003D4C  3624               	rlcf	___lwmod@divisor+1,f,c
 13539  003D4E  2A25               	incf	___lwmod@counter,f,c
 13540  003D50                     l6483:
 13541  003D50  FFFF               	dw	65535	; assembler added errata NOP
 13542  003D52  AE24               	btfss	___lwmod@divisor+1,7,c
 13543  003D54  D7F8               	goto	l6481
 13544  003D56                     l6485:
 13545  003D56  FFFF               	dw	65535	; assembler added errata NOP
 13546  003D58  5023               	movf	___lwmod@divisor,w,c
 13547  003D5A  5C21               	subwf	___lwmod@dividend,w,c
 13548  003D5C  5024               	movf	___lwmod@divisor+1,w,c
 13549  003D5E  5822               	subwfb	___lwmod@dividend+1,w,c
 13550  003D60  A0D8               	btfss	status,0,c
 13551  003D62  D004               	goto	l6489
 13552  003D64  5023               	movf	___lwmod@divisor,w,c
 13553  003D66  5E21               	subwf	___lwmod@dividend,f,c
 13554  003D68  5024               	movf	___lwmod@divisor+1,w,c
 13555  003D6A  5A22               	subwfb	___lwmod@dividend+1,f,c
 13556  003D6C                     l6489:
 13557  003D6C  FFFF               	dw	65535	; assembler added errata NOP
 13558  003D6E  90D8               	bcf	status,0,c
 13559  003D70  3224               	rrcf	___lwmod@divisor+1,f,c
 13560  003D72  3223               	rrcf	___lwmod@divisor,f,c
 13561  003D74  2E25               	decfsz	___lwmod@counter,f,c
 13562  003D76  D7EF               	goto	l6485
 13563  003D78                     l1466:
 13564  003D78  FFFF               	dw	65535	; assembler added errata NOP
 13565  003D7A  C021  F021         	movff	___lwmod@dividend,?___lwmod
 13566  003D7E  C022  F022         	movff	___lwmod@dividend+1,?___lwmod+1
 13567  003D82  0012               	return		;funcret
 13568  003D84  FFFF               	dw	65535	; errata NOP
 13569  003D86                     __end_of___lwmod:
 13570                           	opt stack 0
 13571                           tblptru	equ	0xFF8
 13572                           tblptrh	equ	0xFF7
 13573                           tblptrl	equ	0xFF6
 13574                           tablat	equ	0xFF5
 13575                           prodh	equ	0xFF4
 13576                           prodl	equ	0xFF3
 13577                           intcon	equ	0xFF2
 13578                           postinc0	equ	0xFEE
 13579                           wreg	equ	0xFE8
 13580                           indf1	equ	0xFE7
 13581                           postinc1	equ	0xFE6
 13582                           postdec1	equ	0xFE5
 13583                           fsr1h	equ	0xFE2
 13584                           fsr1l	equ	0xFE1
 13585                           indf2	equ	0xFDF
 13586                           postinc2	equ	0xFDE
 13587                           postdec2	equ	0xFDD
 13588                           plusw2	equ	0xFDB
 13589                           fsr2h	equ	0xFDA
 13590                           fsr2l	equ	0xFD9
 13591                           status	equ	0xFD8
 13592                           
 13593 ;; *************** function _SetTime *****************
 13594 ;; Defined at:
 13595 ;;		line 172 in file "user.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;  newTime         2   32[COMRAM] PTR long 
 13598 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 13599 ;; Auto vars:     Size  Location     Type
 13600 ;;		None
 13601 ;; Return value:  Size  Location     Type
 13602 ;;                  1    wreg      void 
 13603 ;; Registers used:
 13604 ;;		fsr2l, fsr2h
 13605 ;; Tracked objects:
 13606 ;;		On entry : 0/0
 13607 ;;		On exit  : 0/0
 13608 ;;		Unchanged: 0/0
 13609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13610 ;;      Params:         2       0       0       0       0       0       0
 13611 ;;      Locals:         0       0       0       0       0       0       0
 13612 ;;      Temps:          0       0       0       0       0       0       0
 13613 ;;      Totals:         2       0       0       0       0       0       0
 13614 ;;Total ram usage:        2 bytes
 13615 ;; Hardware stack levels used:    1
 13616 ;; Hardware stack levels required when called:    2
 13617 ;; This function calls:
 13618 ;;		Nothing
 13619 ;; This function is called by:
 13620 ;;		_ModbusProcess_FC100
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           	psect	text61
 13625  000210                     __ptext61:
 13626                           	opt stack 0
 13627  000210                     _SetTime:
 13628                           	opt stack 26
 13629                           
 13630                           ;incstack = 0
 13631  000210  FFFF               	dw	65535
 13632                           
 13633                           ;user.c: 174: currentTime = *newTime;
 13634  000212  C021  FFD9         	movff	SetTime@newTime,fsr2l
 13635  000216  C022  FFDA         	movff	SetTime@newTime+1,fsr2h
 13636  00021A  CFDE F1F2          	movff	postinc2,_currentTime
 13637  00021E  CFDE F1F3          	movff	postinc2,_currentTime+1
 13638  000222  CFDE F1F4          	movff	postinc2,_currentTime+2
 13639  000226  CFDE F1F5          	movff	postinc2,_currentTime+3
 13640  00022A  0012               	return		;funcret
 13641  00022C  FFFF               	dw	65535	; errata NOP
 13642  00022E                     __end_of_SetTime:
 13643                           	opt stack 0
 13644                           tblptru	equ	0xFF8
 13645                           tblptrh	equ	0xFF7
 13646                           tblptrl	equ	0xFF6
 13647                           tablat	equ	0xFF5
 13648                           prodh	equ	0xFF4
 13649                           prodl	equ	0xFF3
 13650                           intcon	equ	0xFF2
 13651                           postinc0	equ	0xFEE
 13652                           wreg	equ	0xFE8
 13653                           indf1	equ	0xFE7
 13654                           postinc1	equ	0xFE6
 13655                           postdec1	equ	0xFE5
 13656                           fsr1h	equ	0xFE2
 13657                           fsr1l	equ	0xFE1
 13658                           indf2	equ	0xFDF
 13659                           postinc2	equ	0xFDE
 13660                           postdec2	equ	0xFDD
 13661                           plusw2	equ	0xFDB
 13662                           fsr2h	equ	0xFDA
 13663                           fsr2l	equ	0xFD9
 13664                           status	equ	0xFD8
 13665                           
 13666 ;; *************** function _SetHourMin *****************
 13667 ;; Defined at:
 13668 ;;		line 277 in file "interrupts.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  newHour         2   44[COMRAM] PTR unsigned char 
 13671 ;;		 -> _au8Buffer(140), 
 13672 ;;  newMin          2   46[COMRAM] PTR unsigned char 
 13673 ;;		 -> _au8Buffer(140), 
 13674 ;;  sec             2   48[COMRAM] PTR unsigned char 
 13675 ;;		 -> _au8Buffer(140), 
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;  secToNext6Se    1   55[COMRAM] unsigned char 
 13678 ;;  tmpSec          1   54[COMRAM] unsigned char 
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      void 
 13681 ;; Registers used:
 13682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/0
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13688 ;;      Params:         6       0       0       0       0       0       0
 13689 ;;      Locals:         2       0       0       0       0       0       0
 13690 ;;      Temps:          4       0       0       0       0       0       0
 13691 ;;      Totals:        12       0       0       0       0       0       0
 13692 ;;Total ram usage:       12 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:    3
 13695 ;; This function calls:
 13696 ;;		___awdiv
 13697 ;;		___awmod
 13698 ;;		___lmul
 13699 ;; This function is called by:
 13700 ;;		_ModbusProcess_FC100
 13701 ;; This function uses a non-reentrant model
 13702 ;;
 13703                           
 13704                           	psect	text62
 13705  002EC4                     __ptext62:
 13706                           	opt stack 0
 13707  002EC4                     _SetHourMin:
 13708                           	opt stack 25
 13709                           
 13710                           ;incstack = 0
 13711  002EC4  FFFF               	dw	65535
 13712                           
 13713                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 13714  002EC6  9ED5               	bcf	4053,7,c	;volatile
 13715                           
 13716                           ;interrupts.c: 281: globalHours = *newHour;
 13717  002EC8  C02D  FFD9         	movff	SetHourMin@newHour,fsr2l
 13718  002ECC  C02E  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 13719  002ED0  50DF               	movf	indf2,w,c
 13720  002ED2  6E5E               	movwf	_globalHours,c	;volatile
 13721                           
 13722                           ;interrupts.c: 282: globalMinutes = *newMin;
 13723  002ED4  C02F  FFD9         	movff	SetHourMin@newMin,fsr2l
 13724  002ED8  C030  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 13725  002EDC  50DF               	movf	indf2,w,c
 13726  002EDE  6E58               	movwf	_globalMinutes,c	;volatile
 13727                           
 13728                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 13729  002EE0  505E               	movf	_globalHours,w,c	;volatile
 13730  002EE2  0D3C               	mullw	60
 13731  002EE4  5058               	movf	_globalMinutes,w,c	;volatile
 13732  002EE6  24F3               	addwf	prodl,w,c
 13733  002EE8  0100               	movlb	0	; () banked
 13734  002EEA  6FE8               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 13735  002EEC  0E00               	movlw	0
 13736  002EEE  20F4               	addwfc	prodh,w,c
 13737  002EF0  0100               	movlb	0	; () banked
 13738  002EF2  6FE9               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 13742  002EF4  C031  FFD9         	movff	SetHourMin@sec,fsr2l
 13743  002EF8  C032  FFDA         	movff	SetHourMin@sec+1,fsr2h
 13744  002EFC  50DF               	movf	indf2,w,c
 13745  002EFE  6E37               	movwf	SetHourMin@tmpSec,c
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 13749  002F00  C037  F021         	movff	SetHourMin@tmpSec,___awdiv@dividend
 13750  002F04  6A22               	clrf	___awdiv@dividend+1,c
 13751  002F06  0E00               	movlw	0
 13752  002F08  6E24               	movwf	___awdiv@divisor+1,c
 13753  002F0A  0E06               	movlw	6
 13754  002F0C  6E23               	movwf	___awdiv@divisor,c
 13755  002F0E  EC24  F01B         	call	___awdiv	;wreg free
 13756  002F12  5021               	movf	?___awdiv,w,c
 13757  002F14  6E45               	movwf	__6sCounter,c	;volatile
 13758                           
 13759                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 13760  002F16  C037  F021         	movff	SetHourMin@tmpSec,___awmod@dividend
 13761  002F1A  6A22               	clrf	___awmod@dividend+1,c
 13762  002F1C  0E00               	movlw	0
 13763  002F1E  6E24               	movwf	___awmod@divisor+1,c
 13764  002F20  0E06               	movlw	6
 13765  002F22  6E23               	movwf	___awmod@divisor,c
 13766  002F24  ECFE  F01B         	call	___awmod	;wreg free
 13767  002F28  5021               	movf	?___awmod,w,c
 13768  002F2A  0800               	sublw	0
 13769  002F2C  0F06               	addlw	6
 13770  002F2E  6E38               	movwf	SetHourMin@secToNext6Sec,c
 13771                           
 13772                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)&0xFF)));
 13773  002F30  5038               	movf	SetHourMin@secToNext6Sec,w,c
 13774  002F32  6E21               	movwf	___lmul@multiplier,c
 13775  002F34  6A22               	clrf	___lmul@multiplier+1,c
 13776  002F36  6A23               	clrf	___lmul@multiplier+2,c
 13777  002F38  6A24               	clrf	___lmul@multiplier+3,c
 13778  002F3A  0E24               	movlw	36
 13779  002F3C  6E25               	movwf	___lmul@multiplicand,c
 13780  002F3E  0E26               	movlw	38
 13781  002F40  6E26               	movwf	___lmul@multiplicand+1,c
 13782  002F42  0E00               	movlw	0
 13783  002F44  6E27               	movwf	___lmul@multiplicand+2,c
 13784  002F46  0E00               	movlw	0
 13785  002F48  6E28               	movwf	___lmul@multiplicand+3,c
 13786  002F4A  ECBC  F01D         	call	___lmul	;wreg free
 13787  002F4E  1E21               	comf	?___lmul,f,c
 13788  002F50  1E22               	comf	?___lmul+1,f,c
 13789  002F52  1E23               	comf	?___lmul+2,f,c
 13790  002F54  1E24               	comf	?___lmul+3,f,c
 13791  002F56  2A21               	incf	?___lmul,f,c
 13792  002F58  0E00               	movlw	0
 13793  002F5A  2222               	addwfc	?___lmul+1,f,c
 13794  002F5C  2223               	addwfc	?___lmul+2,f,c
 13795  002F5E  2224               	addwfc	?___lmul+3,f,c
 13796  002F60  0E00               	movlw	0
 13797  002F62  2421               	addwf	?___lmul,w,c
 13798  002F64  6E33               	movwf	??_SetHourMin& (0+255),c
 13799  002F66  0E00               	movlw	0
 13800  002F68  2022               	addwfc	?___lmul+1,w,c
 13801  002F6A  6E34               	movwf	(??_SetHourMin+1)& (0+255),c
 13802  002F6C  0E01               	movlw	1
 13803  002F6E  2023               	addwfc	?___lmul+2,w,c
 13804  002F70  6E35               	movwf	(??_SetHourMin+2)& (0+255),c
 13805  002F72  0E00               	movlw	0
 13806  002F74  2024               	addwfc	?___lmul+3,w,c
 13807  002F76  6E36               	movwf	(??_SetHourMin+3)& (0+255),c
 13808  002F78  C034  F033         	movff	??_SetHourMin+1,??_SetHourMin
 13809  002F7C  C035  F034         	movff	??_SetHourMin+2,??_SetHourMin+1
 13810  002F80  C036  F035         	movff	??_SetHourMin+3,??_SetHourMin+2
 13811  002F84  6A36               	clrf	??_SetHourMin+3,c
 13812  002F86  BE35               	btfsc	??_SetHourMin+2,7,c
 13813  002F88  6836               	setf	??_SetHourMin+3,c
 13814  002F8A  5033               	movf	??_SetHourMin,w,c
 13815  002F8C  6ED7               	movwf	4055,c	;volatile
 13816  002F8E  5038               	movf	SetHourMin@secToNext6Sec,w,c
 13817  002F90  0D24               	mullw	36
 13818  002F92  50F3               	movf	prodl,w,c
 13819  002F94  0800               	sublw	0
 13820  002F96  6ED6               	movwf	4054,c	;volatile
 13821                           
 13822                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 13823  002F98  8ED5               	bsf	4053,7,c	;volatile
 13824  002F9A  0012               	return		;funcret
 13825  002F9C  FFFF               	dw	65535	; errata NOP
 13826  002F9E                     __end_of_SetHourMin:
 13827                           	opt stack 0
 13828                           tblptru	equ	0xFF8
 13829                           tblptrh	equ	0xFF7
 13830                           tblptrl	equ	0xFF6
 13831                           tablat	equ	0xFF5
 13832                           prodh	equ	0xFF4
 13833                           prodl	equ	0xFF3
 13834                           intcon	equ	0xFF2
 13835                           postinc0	equ	0xFEE
 13836                           wreg	equ	0xFE8
 13837                           indf1	equ	0xFE7
 13838                           postinc1	equ	0xFE6
 13839                           postdec1	equ	0xFE5
 13840                           fsr1h	equ	0xFE2
 13841                           fsr1l	equ	0xFE1
 13842                           indf2	equ	0xFDF
 13843                           postinc2	equ	0xFDE
 13844                           postdec2	equ	0xFDD
 13845                           plusw2	equ	0xFDB
 13846                           fsr2h	equ	0xFDA
 13847                           fsr2l	equ	0xFD9
 13848                           status	equ	0xFD8
 13849                           
 13850 ;; *************** function ___lmul *****************
 13851 ;; Defined at:
 13852 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;  multiplier      4   32[COMRAM] unsigned long 
 13855 ;;  multiplicand    4   36[COMRAM] unsigned long 
 13856 ;; Auto vars:     Size  Location     Type
 13857 ;;  product         4   40[COMRAM] unsigned long 
 13858 ;; Return value:  Size  Location     Type
 13859 ;;                  4   32[COMRAM] unsigned long 
 13860 ;; Registers used:
 13861 ;;		wreg, status,2, status,0
 13862 ;; Tracked objects:
 13863 ;;		On entry : 0/0
 13864 ;;		On exit  : 0/0
 13865 ;;		Unchanged: 0/0
 13866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13867 ;;      Params:         8       0       0       0       0       0       0
 13868 ;;      Locals:         4       0       0       0       0       0       0
 13869 ;;      Temps:          0       0       0       0       0       0       0
 13870 ;;      Totals:        12       0       0       0       0       0       0
 13871 ;;Total ram usage:       12 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; Hardware stack levels required when called:    2
 13874 ;; This function calls:
 13875 ;;		Nothing
 13876 ;; This function is called by:
 13877 ;;		_SetHourMin
 13878 ;;		_years_to_days
 13879 ;;		_mktime
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           	psect	text63
 13884  003B78                     __ptext63:
 13885                           	opt stack 0
 13886  003B78                     ___lmul:
 13887                           	opt stack 23
 13888                           
 13889                           ;incstack = 0
 13890  003B78  FFFF               	dw	65535
 13891  003B7A  0E00               	movlw	0
 13892  003B7C  6E29               	movwf	___lmul@product,c
 13893  003B7E  0E00               	movlw	0
 13894  003B80  6E2A               	movwf	___lmul@product+1,c
 13895  003B82  0E00               	movlw	0
 13896  003B84  6E2B               	movwf	___lmul@product+2,c
 13897  003B86  0E00               	movlw	0
 13898  003B88  6E2C               	movwf	___lmul@product+3,c
 13899  003B8A                     l6447:
 13900  003B8A  FFFF               	dw	65535	; assembler added errata NOP
 13901  003B8C  A021               	btfss	___lmul@multiplier,0,c
 13902  003B8E  D008               	goto	l6451
 13903  003B90  5025               	movf	___lmul@multiplicand,w,c
 13904  003B92  2629               	addwf	___lmul@product,f,c
 13905  003B94  5026               	movf	___lmul@multiplicand+1,w,c
 13906  003B96  222A               	addwfc	___lmul@product+1,f,c
 13907  003B98  5027               	movf	___lmul@multiplicand+2,w,c
 13908  003B9A  222B               	addwfc	___lmul@product+2,f,c
 13909  003B9C  5028               	movf	___lmul@multiplicand+3,w,c
 13910  003B9E  222C               	addwfc	___lmul@product+3,f,c
 13911  003BA0                     l6451:
 13912  003BA0  FFFF               	dw	65535	; assembler added errata NOP
 13913  003BA2  90D8               	bcf	status,0,c
 13914  003BA4  3625               	rlcf	___lmul@multiplicand,f,c
 13915  003BA6  3626               	rlcf	___lmul@multiplicand+1,f,c
 13916  003BA8  3627               	rlcf	___lmul@multiplicand+2,f,c
 13917  003BAA  3628               	rlcf	___lmul@multiplicand+3,f,c
 13918  003BAC  90D8               	bcf	status,0,c
 13919  003BAE  3224               	rrcf	___lmul@multiplier+3,f,c
 13920  003BB0  3223               	rrcf	___lmul@multiplier+2,f,c
 13921  003BB2  3222               	rrcf	___lmul@multiplier+1,f,c
 13922  003BB4  3221               	rrcf	___lmul@multiplier,f,c
 13923  003BB6  5021               	movf	___lmul@multiplier,w,c
 13924  003BB8  1022               	iorwf	___lmul@multiplier+1,w,c
 13925  003BBA  1023               	iorwf	___lmul@multiplier+2,w,c
 13926  003BBC  1024               	iorwf	___lmul@multiplier+3,w,c
 13927  003BBE  A4D8               	btfss	status,2,c
 13928  003BC0  D7E4               	goto	l6447
 13929  003BC2  C029  F021         	movff	___lmul@product,?___lmul
 13930  003BC6  C02A  F022         	movff	___lmul@product+1,?___lmul+1
 13931  003BCA  C02B  F023         	movff	___lmul@product+2,?___lmul+2
 13932  003BCE  C02C  F024         	movff	___lmul@product+3,?___lmul+3
 13933  003BD2  0012               	return		;funcret
 13934  003BD4  FFFF               	dw	65535	; errata NOP
 13935  003BD6                     __end_of___lmul:
 13936                           	opt stack 0
 13937                           tblptru	equ	0xFF8
 13938                           tblptrh	equ	0xFF7
 13939                           tblptrl	equ	0xFF6
 13940                           tablat	equ	0xFF5
 13941                           prodh	equ	0xFF4
 13942                           prodl	equ	0xFF3
 13943                           intcon	equ	0xFF2
 13944                           postinc0	equ	0xFEE
 13945                           wreg	equ	0xFE8
 13946                           indf1	equ	0xFE7
 13947                           postinc1	equ	0xFE6
 13948                           postdec1	equ	0xFE5
 13949                           fsr1h	equ	0xFE2
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           plusw2	equ	0xFDB
 13955                           fsr2h	equ	0xFDA
 13956                           fsr2l	equ	0xFD9
 13957                           status	equ	0xFD8
 13958                           
 13959 ;; *************** function ___awmod *****************
 13960 ;; Defined at:
 13961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  dividend        2   32[COMRAM] int 
 13964 ;;  divisor         2   34[COMRAM] int 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  sign            1   37[COMRAM] unsigned char 
 13967 ;;  counter         1   36[COMRAM] unsigned char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  2   32[COMRAM] int 
 13970 ;; Registers used:
 13971 ;;		wreg, status,2, status,0
 13972 ;; Tracked objects:
 13973 ;;		On entry : 0/0
 13974 ;;		On exit  : 0/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13977 ;;      Params:         4       0       0       0       0       0       0
 13978 ;;      Locals:         2       0       0       0       0       0       0
 13979 ;;      Temps:          0       0       0       0       0       0       0
 13980 ;;      Totals:         6       0       0       0       0       0       0
 13981 ;;Total ram usage:        6 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; Hardware stack levels required when called:    2
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;;		_SetHourMin
 13988 ;; This function uses a non-reentrant model
 13989 ;;
 13990                           
 13991                           	psect	text64
 13992  0037FC                     __ptext64:
 13993                           	opt stack 0
 13994  0037FC                     ___awmod:
 13995                           	opt stack 25
 13996                           
 13997                           ;incstack = 0
 13998  0037FC  FFFF               	dw	65535
 13999  0037FE  0E00               	movlw	0
 14000  003800  6E26               	movwf	___awmod@sign,c
 14001  003802  AE22               	btfss	___awmod@dividend+1,7,c
 14002  003804  D006               	goto	l6925
 14003  003806  6C21               	negf	___awmod@dividend,c
 14004  003808  1E22               	comf	___awmod@dividend+1,f,c
 14005  00380A  B0D8               	btfsc	status,0,c
 14006  00380C  2A22               	incf	___awmod@dividend+1,f,c
 14007  00380E  0E01               	movlw	1
 14008  003810  6E26               	movwf	___awmod@sign,c
 14009  003812                     l6925:
 14010  003812  FFFF               	dw	65535	; assembler added errata NOP
 14011  003814  AE24               	btfss	___awmod@divisor+1,7,c
 14012  003816  D004               	goto	l6929
 14013  003818  6C23               	negf	___awmod@divisor,c
 14014  00381A  1E24               	comf	___awmod@divisor+1,f,c
 14015  00381C  B0D8               	btfsc	status,0,c
 14016  00381E  2A24               	incf	___awmod@divisor+1,f,c
 14017  003820                     l6929:
 14018  003820  FFFF               	dw	65535	; assembler added errata NOP
 14019  003822  5023               	movf	___awmod@divisor,w,c
 14020  003824  1024               	iorwf	___awmod@divisor+1,w,c
 14021  003826  B4D8               	btfsc	status,2,c
 14022  003828  D01C               	goto	l6945
 14023  00382A  0E01               	movlw	1
 14024  00382C  6E25               	movwf	___awmod@counter,c
 14025  00382E  D005               	goto	l6935
 14026  003830                     l6933:
 14027  003830  FFFF               	dw	65535	; assembler added errata NOP
 14028  003832  90D8               	bcf	status,0,c
 14029  003834  3623               	rlcf	___awmod@divisor,f,c
 14030  003836  3624               	rlcf	___awmod@divisor+1,f,c
 14031  003838  2A25               	incf	___awmod@counter,f,c
 14032  00383A                     l6935:
 14033  00383A  FFFF               	dw	65535	; assembler added errata NOP
 14034  00383C  AE24               	btfss	___awmod@divisor+1,7,c
 14035  00383E  D7F8               	goto	l6933
 14036  003840                     l6937:
 14037  003840  FFFF               	dw	65535	; assembler added errata NOP
 14038  003842  5023               	movf	___awmod@divisor,w,c
 14039  003844  5C21               	subwf	___awmod@dividend,w,c
 14040  003846  5024               	movf	___awmod@divisor+1,w,c
 14041  003848  5822               	subwfb	___awmod@dividend+1,w,c
 14042  00384A  A0D8               	btfss	status,0,c
 14043  00384C  D004               	goto	l6941
 14044  00384E  5023               	movf	___awmod@divisor,w,c
 14045  003850  5E21               	subwf	___awmod@dividend,f,c
 14046  003852  5024               	movf	___awmod@divisor+1,w,c
 14047  003854  5A22               	subwfb	___awmod@dividend+1,f,c
 14048  003856                     l6941:
 14049  003856  FFFF               	dw	65535	; assembler added errata NOP
 14050  003858  90D8               	bcf	status,0,c
 14051  00385A  3224               	rrcf	___awmod@divisor+1,f,c
 14052  00385C  3223               	rrcf	___awmod@divisor,f,c
 14053  00385E  2E25               	decfsz	___awmod@counter,f,c
 14054  003860  D7EF               	goto	l6937
 14055  003862                     l6945:
 14056  003862  FFFF               	dw	65535	; assembler added errata NOP
 14057  003864  5026               	movf	___awmod@sign,w,c
 14058  003866  B4D8               	btfsc	status,2,c
 14059  003868  D004               	goto	l6949
 14060  00386A  6C21               	negf	___awmod@dividend,c
 14061  00386C  1E22               	comf	___awmod@dividend+1,f,c
 14062  00386E  B0D8               	btfsc	status,0,c
 14063  003870  2A22               	incf	___awmod@dividend+1,f,c
 14064  003872                     l6949:
 14065  003872  FFFF               	dw	65535	; assembler added errata NOP
 14066  003874  C021  F021         	movff	___awmod@dividend,?___awmod
 14067  003878  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
 14068  00387C  0012               	return		;funcret
 14069  00387E  FFFF               	dw	65535	; errata NOP
 14070  003880                     __end_of___awmod:
 14071                           	opt stack 0
 14072                           tblptru	equ	0xFF8
 14073                           tblptrh	equ	0xFF7
 14074                           tblptrl	equ	0xFF6
 14075                           tablat	equ	0xFF5
 14076                           prodh	equ	0xFF4
 14077                           prodl	equ	0xFF3
 14078                           intcon	equ	0xFF2
 14079                           postinc0	equ	0xFEE
 14080                           wreg	equ	0xFE8
 14081                           indf1	equ	0xFE7
 14082                           postinc1	equ	0xFE6
 14083                           postdec1	equ	0xFE5
 14084                           fsr1h	equ	0xFE2
 14085                           fsr1l	equ	0xFE1
 14086                           indf2	equ	0xFDF
 14087                           postinc2	equ	0xFDE
 14088                           postdec2	equ	0xFDD
 14089                           plusw2	equ	0xFDB
 14090                           fsr2h	equ	0xFDA
 14091                           fsr2l	equ	0xFD9
 14092                           status	equ	0xFD8
 14093                           
 14094 ;; *************** function ___awdiv *****************
 14095 ;; Defined at:
 14096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  dividend        2   32[COMRAM] int 
 14099 ;;  divisor         2   34[COMRAM] int 
 14100 ;; Auto vars:     Size  Location     Type
 14101 ;;  quotient        2   38[COMRAM] int 
 14102 ;;  sign            1   37[COMRAM] unsigned char 
 14103 ;;  counter         1   36[COMRAM] unsigned char 
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  2   32[COMRAM] int 
 14106 ;; Registers used:
 14107 ;;		wreg, status,2, status,0
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14113 ;;      Params:         4       0       0       0       0       0       0
 14114 ;;      Locals:         4       0       0       0       0       0       0
 14115 ;;      Temps:          0       0       0       0       0       0       0
 14116 ;;      Totals:         8       0       0       0       0       0       0
 14117 ;;Total ram usage:        8 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    2
 14120 ;; This function calls:
 14121 ;;		Nothing
 14122 ;; This function is called by:
 14123 ;;		_SetHourMin
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127                           	psect	text65
 14128  003648                     __ptext65:
 14129                           	opt stack 0
 14130  003648                     ___awdiv:
 14131                           	opt stack 25
 14132                           
 14133                           ;incstack = 0
 14134  003648  FFFF               	dw	65535
 14135  00364A  0E00               	movlw	0
 14136  00364C  6E26               	movwf	___awdiv@sign,c
 14137  00364E  AE24               	btfss	___awdiv@divisor+1,7,c
 14138  003650  D006               	goto	l6881
 14139  003652  6C23               	negf	___awdiv@divisor,c
 14140  003654  1E24               	comf	___awdiv@divisor+1,f,c
 14141  003656  B0D8               	btfsc	status,0,c
 14142  003658  2A24               	incf	___awdiv@divisor+1,f,c
 14143  00365A  0E01               	movlw	1
 14144  00365C  6E26               	movwf	___awdiv@sign,c
 14145  00365E                     l6881:
 14146  00365E  FFFF               	dw	65535	; assembler added errata NOP
 14147  003660  AE22               	btfss	___awdiv@dividend+1,7,c
 14148  003662  D006               	goto	l6887
 14149  003664  6C21               	negf	___awdiv@dividend,c
 14150  003666  1E22               	comf	___awdiv@dividend+1,f,c
 14151  003668  B0D8               	btfsc	status,0,c
 14152  00366A  2A22               	incf	___awdiv@dividend+1,f,c
 14153  00366C  0E01               	movlw	1
 14154  00366E  1A26               	xorwf	___awdiv@sign,f,c
 14155  003670                     l6887:
 14156  003670  FFFF               	dw	65535	; assembler added errata NOP
 14157  003672  0E00               	movlw	0
 14158  003674  6E28               	movwf	___awdiv@quotient+1,c
 14159  003676  0E00               	movlw	0
 14160  003678  6E27               	movwf	___awdiv@quotient,c
 14161  00367A  5023               	movf	___awdiv@divisor,w,c
 14162  00367C  1024               	iorwf	___awdiv@divisor+1,w,c
 14163  00367E  B4D8               	btfsc	status,2,c
 14164  003680  D020               	goto	l6909
 14165  003682  0E01               	movlw	1
 14166  003684  6E25               	movwf	___awdiv@counter,c
 14167  003686  D005               	goto	l6895
 14168  003688                     l6893:
 14169  003688  FFFF               	dw	65535	; assembler added errata NOP
 14170  00368A  90D8               	bcf	status,0,c
 14171  00368C  3623               	rlcf	___awdiv@divisor,f,c
 14172  00368E  3624               	rlcf	___awdiv@divisor+1,f,c
 14173  003690  2A25               	incf	___awdiv@counter,f,c
 14174  003692                     l6895:
 14175  003692  FFFF               	dw	65535	; assembler added errata NOP
 14176  003694  AE24               	btfss	___awdiv@divisor+1,7,c
 14177  003696  D7F8               	goto	l6893
 14178  003698                     l6897:
 14179  003698  FFFF               	dw	65535	; assembler added errata NOP
 14180  00369A  90D8               	bcf	status,0,c
 14181  00369C  3627               	rlcf	___awdiv@quotient,f,c
 14182  00369E  3628               	rlcf	___awdiv@quotient+1,f,c
 14183  0036A0  5023               	movf	___awdiv@divisor,w,c
 14184  0036A2  5C21               	subwf	___awdiv@dividend,w,c
 14185  0036A4  5024               	movf	___awdiv@divisor+1,w,c
 14186  0036A6  5822               	subwfb	___awdiv@dividend+1,w,c
 14187  0036A8  A0D8               	btfss	status,0,c
 14188  0036AA  D005               	goto	l6905
 14189  0036AC  5023               	movf	___awdiv@divisor,w,c
 14190  0036AE  5E21               	subwf	___awdiv@dividend,f,c
 14191  0036B0  5024               	movf	___awdiv@divisor+1,w,c
 14192  0036B2  5A22               	subwfb	___awdiv@dividend+1,f,c
 14193  0036B4  8027               	bsf	___awdiv@quotient,0,c
 14194  0036B6                     l6905:
 14195  0036B6  FFFF               	dw	65535	; assembler added errata NOP
 14196  0036B8  90D8               	bcf	status,0,c
 14197  0036BA  3224               	rrcf	___awdiv@divisor+1,f,c
 14198  0036BC  3223               	rrcf	___awdiv@divisor,f,c
 14199  0036BE  2E25               	decfsz	___awdiv@counter,f,c
 14200  0036C0  D7EB               	goto	l6897
 14201  0036C2                     l6909:
 14202  0036C2  FFFF               	dw	65535	; assembler added errata NOP
 14203  0036C4  5026               	movf	___awdiv@sign,w,c
 14204  0036C6  B4D8               	btfsc	status,2,c
 14205  0036C8  D004               	goto	l6913
 14206  0036CA  6C27               	negf	___awdiv@quotient,c
 14207  0036CC  1E28               	comf	___awdiv@quotient+1,f,c
 14208  0036CE  B0D8               	btfsc	status,0,c
 14209  0036D0  2A28               	incf	___awdiv@quotient+1,f,c
 14210  0036D2                     l6913:
 14211  0036D2  FFFF               	dw	65535	; assembler added errata NOP
 14212  0036D4  C027  F021         	movff	___awdiv@quotient,?___awdiv
 14213  0036D8  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
 14214  0036DC  0012               	return		;funcret
 14215  0036DE  FFFF               	dw	65535	; errata NOP
 14216  0036E0                     __end_of___awdiv:
 14217                           	opt stack 0
 14218                           tblptru	equ	0xFF8
 14219                           tblptrh	equ	0xFF7
 14220                           tblptrl	equ	0xFF6
 14221                           tablat	equ	0xFF5
 14222                           prodh	equ	0xFF4
 14223                           prodl	equ	0xFF3
 14224                           intcon	equ	0xFF2
 14225                           postinc0	equ	0xFEE
 14226                           wreg	equ	0xFE8
 14227                           indf1	equ	0xFE7
 14228                           postinc1	equ	0xFE6
 14229                           postdec1	equ	0xFE5
 14230                           fsr1h	equ	0xFE2
 14231                           fsr1l	equ	0xFE1
 14232                           indf2	equ	0xFDF
 14233                           postinc2	equ	0xFDE
 14234                           postdec2	equ	0xFDD
 14235                           plusw2	equ	0xFDB
 14236                           fsr2h	equ	0xFDA
 14237                           fsr2l	equ	0xFD9
 14238                           status	equ	0xFD8
 14239                           
 14240 ;; *************** function _ModbusSetExceptionStatusBit *****************
 14241 ;; Defined at:
 14242 ;;		line 240 in file "ModbusRtu.c"
 14243 ;; Parameters:    Size  Location     Type
 14244 ;;  bitNum          1    wreg     unsigned char 
 14245 ;;  value           1   32[COMRAM] unsigned char 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  bitNum          1   35[COMRAM] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, status,2, status,0
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14257 ;;      Params:         1       0       0       0       0       0       0
 14258 ;;      Locals:         1       0       0       0       0       0       0
 14259 ;;      Temps:          2       0       0       0       0       0       0
 14260 ;;      Totals:         4       0       0       0       0       0       0
 14261 ;;Total ram usage:        4 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    2
 14264 ;; This function calls:
 14265 ;;		Nothing
 14266 ;; This function is called by:
 14267 ;;		_CommandSetLed
 14268 ;;		_CommandSetStatusLed
 14269 ;;		_ProcessUserCommands
 14270 ;;		_io_poll
 14271 ;;		_ModbusPoll
 14272 ;;		_ModbusProcess_FC100
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           	psect	text66
 14277  003DD6                     __ptext66:
 14278                           	opt stack 0
 14279  003DD6                     _ModbusSetExceptionStatusBit:
 14280                           	opt stack 26
 14281                           
 14282                           ;incstack = 0
 14283  003DD6  FFFF               	dw	65535
 14284                           
 14285                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 14286  003DD8  6E24               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 14287                           
 14288                           ;ModbusRtu.c: 242: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 14289  003DDA  5021               	movf	ModbusSetExceptionStatusBit@value,w,c
 14290  003DDC  B4D8               	btfsc	status,2,c
 14291  003DDE  D00F               	goto	l6835
 14292  003DE0  C024  F022         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 14293  003DE4  0E01               	movlw	1
 14294  003DE6  6E23               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 14295  003DE8  2A22               	incf	??_ModbusSetExceptionStatusBit,f,c
 14296  003DEA  D003               	goto	u6134
 14297  003DEC                     u6135:
 14298  003DEC  FFFF               	dw	65535	; assembler added errata NOP
 14299  003DEE  90D8               	bcf	status,0,c
 14300  003DF0  3623               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 14301  003DF2                     u6134:
 14302  003DF2  FFFF               	dw	65535	; assembler added errata NOP
 14303  003DF4  2E22               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 14304  003DF6  D7FA               	goto	u6135
 14305  003DF8  5023               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 14306  003DFA  1249               	iorwf	__exceptionStatus,f,c
 14307  003DFC  D010               	goto	l789
 14308  003DFE                     l6835:
 14309  003DFE  FFFF               	dw	65535	; assembler added errata NOP
 14310  003E00  C024  F022         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 14311  003E04  0E01               	movlw	1
 14312  003E06  6E23               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 14313  003E08  2A22               	incf	??_ModbusSetExceptionStatusBit,f,c
 14314  003E0A  D003               	goto	u6144
 14315  003E0C                     u6145:
 14316  003E0C  FFFF               	dw	65535	; assembler added errata NOP
 14317  003E0E  90D8               	bcf	status,0,c
 14318  003E10  3623               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 14319  003E12                     u6144:
 14320  003E12  FFFF               	dw	65535	; assembler added errata NOP
 14321  003E14  2E22               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 14322  003E16  D7FA               	goto	u6145
 14323  003E18  5023               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 14324  003E1A  0AFF               	xorlw	255
 14325  003E1C  1649               	andwf	__exceptionStatus,f,c
 14326  003E1E                     l789:
 14327  003E1E  FFFF               	dw	65535	; assembler added errata NOP
 14328  003E20  0012               	return		;funcret
 14329  003E22  FFFF               	dw	65535	; errata NOP
 14330  003E24                     __end_of_ModbusSetExceptionStatusBit:
 14331                           	opt stack 0
 14332                           tblptru	equ	0xFF8
 14333                           tblptrh	equ	0xFF7
 14334                           tblptrl	equ	0xFF6
 14335                           tablat	equ	0xFF5
 14336                           prodh	equ	0xFF4
 14337                           prodl	equ	0xFF3
 14338                           intcon	equ	0xFF2
 14339                           postinc0	equ	0xFEE
 14340                           wreg	equ	0xFE8
 14341                           indf1	equ	0xFE7
 14342                           postinc1	equ	0xFE6
 14343                           postdec1	equ	0xFE5
 14344                           fsr1h	equ	0xFE2
 14345                           fsr1l	equ	0xFE1
 14346                           indf2	equ	0xFDF
 14347                           postinc2	equ	0xFDE
 14348                           postdec2	equ	0xFDD
 14349                           plusw2	equ	0xFDB
 14350                           fsr2h	equ	0xFDA
 14351                           fsr2l	equ	0xFD9
 14352                           status	equ	0xFD8
 14353                           
 14354 ;; *************** function _ModbusProcess_FC1 *****************
 14355 ;; Defined at:
 14356 ;;		line 984 in file "ModbusRtu.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;  regs            2   47[COMRAM] unsigned short 
 14359 ;; Auto vars:     Size  Location     Type
 14360 ;;  u16Coilno       2   10[BANK0 ] unsigned short 
 14361 ;;  u16currentCo    2    7[BANK0 ] unsigned short 
 14362 ;;  u16StartCoil    2    5[BANK0 ] unsigned short 
 14363 ;;  u16coil         2    0[BANK0 ] unsigned short 
 14364 ;;  u8bitsno        1    9[BANK0 ] unsigned char 
 14365 ;;  u8bytesno       1    4[BANK0 ] unsigned char 
 14366 ;;  u8CopyBuffer    1    3[BANK0 ] unsigned char 
 14367 ;;  u8currentBit    1    2[BANK0 ] unsigned char 
 14368 ;; Return value:  Size  Location     Type
 14369 ;;                  1    wreg      unsigned char 
 14370 ;; Registers used:
 14371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14372 ;; Tracked objects:
 14373 ;;		On entry : 0/0
 14374 ;;		On exit  : 0/0
 14375 ;;		Unchanged: 0/0
 14376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14377 ;;      Params:         2       0       0       0       0       0       0
 14378 ;;      Locals:         0      12       0       0       0       0       0
 14379 ;;      Temps:          3       0       0       0       0       0       0
 14380 ;;      Totals:         5      12       0       0       0       0       0
 14381 ;;Total ram usage:       17 bytes
 14382 ;; Hardware stack levels used:    1
 14383 ;; Hardware stack levels required when called:    4
 14384 ;; This function calls:
 14385 ;;		_ModbusSendTxBuffer
 14386 ;; This function is called by:
 14387 ;;		_ModbusPoll
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text67
 14392  00226A                     __ptext67:
 14393                           	opt stack 0
 14394  00226A                     _ModbusProcess_FC1:
 14395                           	opt stack 25
 14396                           
 14397                           ;incstack = 0
 14398  00226A  FFFF               	dw	65535
 14399                           
 14400                           ;ModbusRtu.c: 987: uint8_t u8currentBit, u8bytesno, u8bitsno;
 14401                           ;ModbusRtu.c: 988: uint8_t u8CopyBufferSize;
 14402                           ;ModbusRtu.c: 989: uint16_t u16currentCoil, u16coil;
 14403                           ;ModbusRtu.c: 992: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 14404  00226C  0101               	movlb	1	; () banked
 14405  00226E  512C               	movf	(__au8Buffer+2)& (0+255),w,b
 14406  002270  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14407  002272  0101               	movlb	1	; () banked
 14408  002274  512D               	movf	(__au8Buffer+3)& (0+255),w,b
 14409  002276  0100               	movlb	0	; () banked
 14410  002278  6F85               	movwf	ModbusProcess_FC1@u16StartCoil& (0+255),b
 14411  00227A  C032  F086         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;ModbusRtu.c: 993: _lastAddress = u16StartCoil;
 14415  00227E  C085  F0E2         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 14416  002282  C086  F0E3         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 14417                           
 14418                           ;ModbusRtu.c: 994: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 14419  002286  0101               	movlb	1	; () banked
 14420  002288  512E               	movf	(__au8Buffer+4)& (0+255),w,b
 14421  00228A  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14422  00228C  0101               	movlb	1	; () banked
 14423  00228E  512F               	movf	(__au8Buffer+5)& (0+255),w,b
 14424  002290  0100               	movlb	0	; () banked
 14425  002292  6F8A               	movwf	ModbusProcess_FC1@u16Coilno& (0+255),b
 14426  002294  C032  F08B         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;ModbusRtu.c: 995: _lastCount = u16Coilno;
 14430  002298  C08A  F0E4         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 14431  00229C  C08B  F0E5         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;ModbusRtu.c: 997: u8bytesno = (uint8_t) (u16Coilno / 8);
 14435  0022A0  C08A  F032         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 14436  0022A4  C08B  F033         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 14437  0022A8  90D8               	bcf	status,0,c
 14438  0022AA  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14439  0022AC  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14440  0022AE  90D8               	bcf	status,0,c
 14441  0022B0  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14442  0022B2  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14443  0022B4  90D8               	bcf	status,0,c
 14444  0022B6  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14445  0022B8  3232               	rrcf	??_ModbusProcess_FC1,f,c
 14446  0022BA  5032               	movf	??_ModbusProcess_FC1,w,c
 14447  0022BC  0100               	movlb	0	; () banked
 14448  0022BE  6F84               	movwf	ModbusProcess_FC1@u8bytesno& (0+255),b
 14449                           
 14450                           ; BSR set to: 0
 14451                           ;ModbusRtu.c: 998: if (u16Coilno % 8 != 0)
 14452  0022C0  0E07               	movlw	7
 14453  0022C2  0100               	movlb	0	; () banked
 14454  0022C4  158A               	andwf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14455  0022C6  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14456  0022C8  0E00               	movlw	0
 14457  0022CA  0100               	movlb	0	; () banked
 14458  0022CC  158B               	andwf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14459  0022CE  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14460  0022D0  5032               	movf	??_ModbusProcess_FC1,w,c
 14461  0022D2  1033               	iorwf	??_ModbusProcess_FC1+1,w,c
 14462  0022D4  B4D8               	btfsc	status,2,c
 14463  0022D6  D002               	goto	l7589
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;ModbusRtu.c: 999: u8bytesno++;
 14467  0022D8  0100               	movlb	0	; () banked
 14468  0022DA  2B84               	incf	ModbusProcess_FC1@u8bytesno& (0+255),f,b
 14469  0022DC                     l7589:
 14470  0022DC  FFFF               	dw	65535	; assembler added errata NOP
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;ModbusRtu.c: 1000: _au8Buffer[ ADD_HI ] = u8bytesno;
 14474  0022DE  C084  F12C         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;ModbusRtu.c: 1001: _u8BufferSize = ADD_LO;
 14478  0022E2  0E03               	movlw	3
 14479  0022E4  6E53               	movwf	__u8BufferSize,c
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;ModbusRtu.c: 1004: u8bitsno = 0;
 14483  0022E6  0E00               	movlw	0
 14484  0022E8  0100               	movlb	0	; () banked
 14485  0022EA  6F89               	movwf	ModbusProcess_FC1@u8bitsno& (0+255),b
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;ModbusRtu.c: 1006: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
 14489  0022EC  0E00               	movlw	0
 14490  0022EE  0100               	movlb	0	; () banked
 14491  0022F0  6F88               	movwf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),b
 14492  0022F2  0E00               	movlw	0
 14493  0022F4  6F87               	movwf	ModbusProcess_FC1@u16currentCoil& (0+255),b
 14494  0022F6  D060               	goto	l7617
 14495  0022F8                     l7597:
 14496  0022F8  FFFF               	dw	65535	; assembler added errata NOP
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;ModbusRtu.c: 1007: {
 14500                           ;ModbusRtu.c: 1008: u16coil = u16StartCoil + u16currentCoil;
 14501  0022FA  0100               	movlb	0	; () banked
 14502  0022FC  5187               	movf	ModbusProcess_FC1@u16currentCoil& (0+255),w,b
 14503  0022FE  0100               	movlb	0	; () banked
 14504  002300  2585               	addwf	ModbusProcess_FC1@u16StartCoil& (0+255),w,b
 14505  002302  0100               	movlb	0	; () banked
 14506  002304  6F80               	movwf	ModbusProcess_FC1@u16coil& (0+255),b
 14507  002306  0100               	movlb	0	; () banked
 14508  002308  5188               	movf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),w,b
 14509  00230A  0100               	movlb	0	; () banked
 14510  00230C  2186               	addwfc	(ModbusProcess_FC1@u16StartCoil+1)& (0+255),w,b
 14511  00230E  0100               	movlb	0	; () banked
 14512  002310  6F81               	movwf	(ModbusProcess_FC1@u16coil+1)& (0+255),b
 14513                           
 14514                           ; BSR set to: 0
 14515                           ;ModbusRtu.c: 1010: u8currentBit = (uint8_t) u16coil;
 14516  002312  C080  F082         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 14517                           
 14518                           ; BSR set to: 0
 14519                           ;ModbusRtu.c: 1012: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ]
      +                          ) |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned 
      +                          short)1 << (u8bitsno))));
 14520  002316  C082  F032         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 14521  00231A  C030  F033         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 14522  00231E  C031  F034         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 14523  002322  2A32               	incf	??_ModbusProcess_FC1,f,c
 14524  002324  D004               	goto	u7054
 14525  002326                     u7055:
 14526  002326  FFFF               	dw	65535	; assembler added errata NOP
 14527  002328  90D8               	bcf	status,0,c
 14528  00232A  3234               	rrcf	??_ModbusProcess_FC1+2,f,c
 14529  00232C  3233               	rrcf	??_ModbusProcess_FC1+1,f,c
 14530  00232E                     u7054:
 14531  00232E  FFFF               	dw	65535	; assembler added errata NOP
 14532  002330  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14533  002332  D7F9               	goto	u7055
 14534  002334  A033               	btfss	??_ModbusProcess_FC1+1,0,c
 14535  002336  D017               	goto	l7605
 14536  002338  C089  F032         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 14537  00233C  0E01               	movlw	1
 14538  00233E  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14539  002340  2A32               	incf	??_ModbusProcess_FC1,f,c
 14540  002342  D003               	goto	u7074
 14541  002344                     u7075:
 14542  002344  FFFF               	dw	65535	; assembler added errata NOP
 14543  002346  90D8               	bcf	status,0,c
 14544  002348  3633               	rlcf	??_ModbusProcess_FC1+1,f,c
 14545  00234A                     u7074:
 14546  00234A  FFFF               	dw	65535	; assembler added errata NOP
 14547  00234C  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14548  00234E  D7FA               	goto	u7075
 14549  002350  5053               	movf	__u8BufferSize,w,c
 14550  002352  0D01               	mullw	1
 14551  002354  0E2A               	movlw	low __au8Buffer
 14552  002356  24F3               	addwf	prodl,w,c
 14553  002358  6ED9               	movwf	fsr2l,c
 14554  00235A  0E01               	movlw	high __au8Buffer
 14555  00235C  20F4               	addwfc	prodh,w,c
 14556  00235E  6EDA               	movwf	fsr2h,c
 14557  002360  5033               	movf	??_ModbusProcess_FC1+1,w,c
 14558  002362  12DF               	iorwf	indf2,f,c
 14559  002364  D01A               	goto	l7607
 14560  002366                     l7605:
 14561  002366  FFFF               	dw	65535	; assembler added errata NOP
 14562  002368  C089  F032         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 14563  00236C  0E01               	movlw	1
 14564  00236E  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14565  002370  2A32               	incf	??_ModbusProcess_FC1,f,c
 14566  002372  D003               	goto	u7084
 14567  002374                     u7085:
 14568  002374  FFFF               	dw	65535	; assembler added errata NOP
 14569  002376  90D8               	bcf	status,0,c
 14570  002378  3633               	rlcf	??_ModbusProcess_FC1+1,f,c
 14571  00237A                     u7084:
 14572  00237A  FFFF               	dw	65535	; assembler added errata NOP
 14573  00237C  2E32               	decfsz	??_ModbusProcess_FC1,f,c
 14574  00237E  D7FA               	goto	u7085
 14575  002380  5033               	movf	??_ModbusProcess_FC1+1,w,c
 14576  002382  0AFF               	xorlw	255
 14577  002384  6E34               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 14578  002386  5053               	movf	__u8BufferSize,w,c
 14579  002388  0D01               	mullw	1
 14580  00238A  0E2A               	movlw	low __au8Buffer
 14581  00238C  24F3               	addwf	prodl,w,c
 14582  00238E  6ED9               	movwf	fsr2l,c
 14583  002390  0E01               	movlw	high __au8Buffer
 14584  002392  20F4               	addwfc	prodh,w,c
 14585  002394  6EDA               	movwf	fsr2h,c
 14586  002396  5034               	movf	??_ModbusProcess_FC1+2,w,c
 14587  002398  16DF               	andwf	indf2,f,c
 14588  00239A                     l7607:
 14589  00239A  FFFF               	dw	65535	; assembler added errata NOP
 14590                           
 14591                           ;ModbusRtu.c: 1016: u8bitsno++;
 14592  00239C  0100               	movlb	0	; () banked
 14593  00239E  2B89               	incf	ModbusProcess_FC1@u8bitsno& (0+255),f,b
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;ModbusRtu.c: 1018: if (u8bitsno > 7)
 14597  0023A0  0E07               	movlw	7
 14598  0023A2  0100               	movlb	0	; () banked
 14599  0023A4  6589               	cpfsgt	ModbusProcess_FC1@u8bitsno& (0+255),b
 14600  0023A6  D004               	goto	l7615
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;ModbusRtu.c: 1019: {
 14604                           ;ModbusRtu.c: 1020: u8bitsno = 0;
 14605  0023A8  0E00               	movlw	0
 14606  0023AA  0100               	movlb	0	; () banked
 14607  0023AC  6F89               	movwf	ModbusProcess_FC1@u8bitsno& (0+255),b
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;ModbusRtu.c: 1021: _u8BufferSize++;
 14611  0023AE  2A53               	incf	__u8BufferSize,f,c
 14612  0023B0                     l7615:
 14613  0023B0  FFFF               	dw	65535	; assembler added errata NOP
 14614                           
 14615                           ; BSR set to: 0
 14616  0023B2  0100               	movlb	0	; () banked
 14617  0023B4  4B87               	infsnz	ModbusProcess_FC1@u16currentCoil& (0+255),f,b
 14618  0023B6  2B88               	incf	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),f,b
 14619  0023B8                     l7617:
 14620  0023B8  FFFF               	dw	65535	; assembler added errata NOP
 14621                           
 14622                           ; BSR set to: 0
 14623  0023BA  0100               	movlb	0	; () banked
 14624  0023BC  518A               	movf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14625  0023BE  0100               	movlb	0	; () banked
 14626  0023C0  5D87               	subwf	ModbusProcess_FC1@u16currentCoil& (0+255),w,b
 14627  0023C2  0100               	movlb	0	; () banked
 14628  0023C4  518B               	movf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14629  0023C6  0100               	movlb	0	; () banked
 14630  0023C8  5988               	subwfb	(ModbusProcess_FC1@u16currentCoil+1)& (0+255),w,b
 14631  0023CA  A0D8               	btfss	status,0,c
 14632  0023CC  D795               	goto	l7597
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;ModbusRtu.c: 1022: }
 14636                           ;ModbusRtu.c: 1023: }
 14637                           ;ModbusRtu.c: 1026: if (u16Coilno % 8 != 0)
 14638                           
 14639                           ; BSR set to: 0
 14640  0023CE  0E07               	movlw	7
 14641  0023D0  0100               	movlb	0	; () banked
 14642  0023D2  158A               	andwf	ModbusProcess_FC1@u16Coilno& (0+255),w,b
 14643  0023D4  6E32               	movwf	??_ModbusProcess_FC1& (0+255),c
 14644  0023D6  0E00               	movlw	0
 14645  0023D8  0100               	movlb	0	; () banked
 14646  0023DA  158B               	andwf	(ModbusProcess_FC1@u16Coilno+1)& (0+255),w,b
 14647  0023DC  6E33               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 14648  0023DE  5032               	movf	??_ModbusProcess_FC1,w,c
 14649  0023E0  1033               	iorwf	??_ModbusProcess_FC1+1,w,c
 14650  0023E2  A4D8               	btfss	status,2,c
 14651                           
 14652                           ; BSR set to: 0
 14653                           ;ModbusRtu.c: 1027: _u8BufferSize++;
 14654  0023E4  2A53               	incf	__u8BufferSize,f,c
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;ModbusRtu.c: 1028: u8CopyBufferSize = _u8BufferSize + 2;
 14658                           
 14659                           ; BSR set to: 0
 14660  0023E6  5053               	movf	__u8BufferSize,w,c
 14661  0023E8  0F02               	addlw	2
 14662  0023EA  0100               	movlb	0	; () banked
 14663  0023EC  6F83               	movwf	ModbusProcess_FC1@u8CopyBufferSize& (0+255),b
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;ModbusRtu.c: 1029: ModbusSendTxBuffer();
 14667  0023EE  EC81  F01C         	call	_ModbusSendTxBuffer	;wreg free
 14668                           
 14669                           ;ModbusRtu.c: 1030: return u8CopyBufferSize;
 14670  0023F2  0100               	movlb	0	; () banked
 14671  0023F4  5183               	movf	ModbusProcess_FC1@u8CopyBufferSize& (0+255),w,b
 14672                           
 14673                           ; BSR set to: 0
 14674                           
 14675                           ; BSR set to: 0
 14676  0023F6  0012               	return		;funcret
 14677  0023F8  FFFF               	dw	65535	; errata NOP
 14678  0023FA                     __end_of_ModbusProcess_FC1:
 14679                           	opt stack 0
 14680                           tblptru	equ	0xFF8
 14681                           tblptrh	equ	0xFF7
 14682                           tblptrl	equ	0xFF6
 14683                           tablat	equ	0xFF5
 14684                           prodh	equ	0xFF4
 14685                           prodl	equ	0xFF3
 14686                           intcon	equ	0xFF2
 14687                           postinc0	equ	0xFEE
 14688                           wreg	equ	0xFE8
 14689                           indf1	equ	0xFE7
 14690                           postinc1	equ	0xFE6
 14691                           postdec1	equ	0xFE5
 14692                           fsr1h	equ	0xFE2
 14693                           fsr1l	equ	0xFE1
 14694                           indf2	equ	0xFDF
 14695                           postinc2	equ	0xFDE
 14696                           postdec2	equ	0xFDD
 14697                           plusw2	equ	0xFDB
 14698                           fsr2h	equ	0xFDA
 14699                           fsr2l	equ	0xFD9
 14700                           status	equ	0xFD8
 14701                           
 14702 ;; *************** function _ModbusSendTxBuffer *****************
 14703 ;; Defined at:
 14704 ;;		line 650 in file "ModbusRtu.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;		None
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;  u16crc          2   45[COMRAM] unsigned short 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14718 ;;      Params:         0       0       0       0       0       0       0
 14719 ;;      Locals:         2       0       0       0       0       0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0
 14721 ;;      Totals:         2       0       0       0       0       0       0
 14722 ;;Total ram usage:        2 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    3
 14725 ;; This function calls:
 14726 ;;		_ModbusCalcCRC
 14727 ;;		_PortWrite
 14728 ;;		_millis
 14729 ;; This function is called by:
 14730 ;;		_ModbusPoll
 14731 ;;		_ModbusProcess_FC1
 14732 ;;		_ModbusProcess_FC3
 14733 ;;		_ModbusProcess_FC5
 14734 ;;		_ModbusProcess_FC6
 14735 ;;		_ModbusProcess_FC7
 14736 ;;		_ModbusProcess_FC15
 14737 ;;		_ModbusProcess_FC16
 14738 ;;		_ModbusProcess_FC17
 14739 ;;		_ModbusProcess_FC20
 14740 ;;		_ModbusProcess_FC21
 14741 ;;		_ModbusProcess_FC43
 14742 ;;		_ModbusProcess_FC100
 14743 ;;		_ModbusProcess_FC101
 14744 ;;		_ModbusProcess_FC102
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           	psect	text68
 14749  003902                     __ptext68:
 14750                           	opt stack 0
 14751  003902                     _ModbusSendTxBuffer:
 14752                           	opt stack 26
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;incstack = 0
 14756  003902  FFFF               	dw	65535
 14757                           
 14758                           ;ModbusRtu.c: 655: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 14759  003904  5053               	movf	__u8BufferSize,w,c
 14760  003906  EC70  F01B         	call	_ModbusCalcCRC
 14761  00390A  C021  F02E         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 14762  00390E  C022  F02F         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 14763                           
 14764                           ;ModbusRtu.c: 656: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 14765  003912  5053               	movf	__u8BufferSize,w,c
 14766  003914  0D01               	mullw	1
 14767  003916  0E2A               	movlw	low __au8Buffer
 14768  003918  24F3               	addwf	prodl,w,c
 14769  00391A  6ED9               	movwf	fsr2l,c
 14770  00391C  0E01               	movlw	high __au8Buffer
 14771  00391E  20F4               	addwfc	prodh,w,c
 14772  003920  6EDA               	movwf	fsr2h,c
 14773  003922  502F               	movf	ModbusSendTxBuffer@u16crc+1,w,c
 14774  003924  6EDF               	movwf	indf2,c
 14775                           
 14776                           ;ModbusRtu.c: 657: _u8BufferSize++;
 14777  003926  2A53               	incf	__u8BufferSize,f,c
 14778                           
 14779                           ;ModbusRtu.c: 658: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 14780  003928  5053               	movf	__u8BufferSize,w,c
 14781  00392A  0D01               	mullw	1
 14782  00392C  0E2A               	movlw	low __au8Buffer
 14783  00392E  24F3               	addwf	prodl,w,c
 14784  003930  6ED9               	movwf	fsr2l,c
 14785  003932  0E01               	movlw	high __au8Buffer
 14786  003934  20F4               	addwfc	prodh,w,c
 14787  003936  6EDA               	movwf	fsr2h,c
 14788  003938  C02E  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 14789                           
 14790                           ;ModbusRtu.c: 659: _u8BufferSize++;
 14791  00393C  2A53               	incf	__u8BufferSize,f,c
 14792                           
 14793                           ;ModbusRtu.c: 663: PortWrite(_au8Buffer, _u8BufferSize);
 14794  00393E  0E2A               	movlw	low __au8Buffer
 14795  003940  6E21               	movwf	PortWrite@buf,c
 14796  003942  0E01               	movlw	high __au8Buffer
 14797  003944  6E22               	movwf	PortWrite@buf+1,c
 14798  003946  C053  F023         	movff	__u8BufferSize,PortWrite@buflen
 14799  00394A  EC12  F01F         	call	_PortWrite	;wreg free
 14800                           
 14801                           ;ModbusRtu.c: 669: _u8BufferSize = 0;
 14802  00394E  0E00               	movlw	0
 14803  003950  6E53               	movwf	__u8BufferSize,c
 14804                           
 14805                           ;ModbusRtu.c: 672: _u32timeOut = millis() + (unsigned long) _u16timeOut;
 14806  003952  ECD1  F000         	call	_millis	;wreg free
 14807  003956  0100               	movlb	0	; () banked
 14808  003958  51EA               	movf	__u16timeOut& (0+255),w,b
 14809  00395A  2421               	addwf	?_millis,w,c
 14810  00395C  0101               	movlb	1	; () banked
 14811  00395E  6F18               	movwf	__u32timeOut& (0+255),b
 14812  003960  0100               	movlb	0	; () banked
 14813  003962  51EB               	movf	(__u16timeOut+1)& (0+255),w,b
 14814  003964  2022               	addwfc	?_millis+1,w,c
 14815  003966  0101               	movlb	1	; () banked
 14816  003968  6F19               	movwf	(__u32timeOut+1)& (0+255),b
 14817  00396A  0E00               	movlw	0
 14818  00396C  2023               	addwfc	?_millis+2,w,c
 14819  00396E  0101               	movlb	1	; () banked
 14820  003970  6F1A               	movwf	(__u32timeOut+2)& (0+255),b
 14821  003972  0E00               	movlw	0
 14822  003974  2024               	addwfc	?_millis+3,w,c
 14823  003976  0101               	movlb	1	; () banked
 14824  003978  6F1B               	movwf	(__u32timeOut+3)& (0+255),b
 14825                           
 14826                           ; BSR set to: 1
 14827                           ;ModbusRtu.c: 675: _u16OutCnt++;
 14828  00397A  0101               	movlb	1	; () banked
 14829  00397C  4B26               	infsnz	__u16OutCnt& (0+255),f,b
 14830  00397E  2B27               	incf	(__u16OutCnt+1)& (0+255),f,b
 14831                           
 14832                           ; BSR set to: 1
 14833  003980  0012               	return		;funcret
 14834  003982  FFFF               	dw	65535	; errata NOP
 14835  003984                     __end_of_ModbusSendTxBuffer:
 14836                           	opt stack 0
 14837                           tblptru	equ	0xFF8
 14838                           tblptrh	equ	0xFF7
 14839                           tblptrl	equ	0xFF6
 14840                           tablat	equ	0xFF5
 14841                           prodh	equ	0xFF4
 14842                           prodl	equ	0xFF3
 14843                           intcon	equ	0xFF2
 14844                           postinc0	equ	0xFEE
 14845                           wreg	equ	0xFE8
 14846                           indf1	equ	0xFE7
 14847                           postinc1	equ	0xFE6
 14848                           postdec1	equ	0xFE5
 14849                           fsr1h	equ	0xFE2
 14850                           fsr1l	equ	0xFE1
 14851                           indf2	equ	0xFDF
 14852                           postinc2	equ	0xFDE
 14853                           postdec2	equ	0xFDD
 14854                           plusw2	equ	0xFDB
 14855                           fsr2h	equ	0xFDA
 14856                           fsr2l	equ	0xFD9
 14857                           status	equ	0xFD8
 14858                           
 14859 ;; *************** function _millis *****************
 14860 ;; Defined at:
 14861 ;;		line 247 in file "interrupts.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;  ret             4   36[COMRAM] unsigned long 
 14866 ;; Return value:  Size  Location     Type
 14867 ;;                  4   32[COMRAM] unsigned long 
 14868 ;; Registers used:
 14869 ;;		None
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14875 ;;      Params:         4       0       0       0       0       0       0
 14876 ;;      Locals:         4       0       0       0       0       0       0
 14877 ;;      Temps:          0       0       0       0       0       0       0
 14878 ;;      Totals:         8       0       0       0       0       0       0
 14879 ;;Total ram usage:        8 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:    2
 14882 ;; This function calls:
 14883 ;;		Nothing
 14884 ;; This function is called by:
 14885 ;;		_SoundPlayNextStep
 14886 ;;		_main
 14887 ;;		_ModbusPoll
 14888 ;;		_ModbusSendTxBuffer
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           	psect	text69
 14893  0001A2                     __ptext69:
 14894                           	opt stack 0
 14895  0001A2                     _millis:
 14896                           	opt stack 28
 14897                           
 14898                           ; BSR set to: 1
 14899                           ;incstack = 0
 14900  0001A2  FFFF               	dw	65535
 14901                           
 14902                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 14903  0001A4  9EF2               	bcf	intcon,7,c	;volatile
 14904                           
 14905                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 14906  0001A6  C0DC  F025         	movff	_millisecondsFromStart,millis@ret	;volatile
 14907  0001AA  C0DD  F026         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 14908  0001AE  C0DE  F027         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 14909  0001B2  C0DF  F028         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 14910                           
 14911                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 14912  0001B6  8EF2               	bsf	intcon,7,c	;volatile
 14913                           
 14914                           ;interrupts.c: 253: return ret;
 14915  0001B8  C025  F021         	movff	millis@ret,?_millis
 14916  0001BC  C026  F022         	movff	millis@ret+1,?_millis+1
 14917  0001C0  C027  F023         	movff	millis@ret+2,?_millis+2
 14918  0001C4  C028  F024         	movff	millis@ret+3,?_millis+3
 14919  0001C8  0012               	return		;funcret
 14920  0001CA  FFFF               	dw	65535	; errata NOP
 14921  0001CC                     __end_of_millis:
 14922                           	opt stack 0
 14923                           tblptru	equ	0xFF8
 14924                           tblptrh	equ	0xFF7
 14925                           tblptrl	equ	0xFF6
 14926                           tablat	equ	0xFF5
 14927                           prodh	equ	0xFF4
 14928                           prodl	equ	0xFF3
 14929                           intcon	equ	0xFF2
 14930                           postinc0	equ	0xFEE
 14931                           wreg	equ	0xFE8
 14932                           indf1	equ	0xFE7
 14933                           postinc1	equ	0xFE6
 14934                           postdec1	equ	0xFE5
 14935                           fsr1h	equ	0xFE2
 14936                           fsr1l	equ	0xFE1
 14937                           indf2	equ	0xFDF
 14938                           postinc2	equ	0xFDE
 14939                           postdec2	equ	0xFDD
 14940                           plusw2	equ	0xFDB
 14941                           fsr2h	equ	0xFDA
 14942                           fsr2l	equ	0xFD9
 14943                           status	equ	0xFD8
 14944                           
 14945 ;; *************** function _PortWrite *****************
 14946 ;; Defined at:
 14947 ;;		line 101 in file "interrupts.c"
 14948 ;; Parameters:    Size  Location     Type
 14949 ;;  buf             2   32[COMRAM] PTR unsigned char 
 14950 ;;		 -> _au8Buffer(140), 
 14951 ;;  buflen          1   34[COMRAM] unsigned char 
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;  i               1   35[COMRAM] unsigned char 
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1    wreg      void 
 14956 ;; Registers used:
 14957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14963 ;;      Params:         3       0       0       0       0       0       0
 14964 ;;      Locals:         1       0       0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0
 14966 ;;      Totals:         4       0       0       0       0       0       0
 14967 ;;Total ram usage:        4 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:    2
 14970 ;; This function calls:
 14971 ;;		Nothing
 14972 ;; This function is called by:
 14973 ;;		_ModbusSendTxBuffer
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text70
 14978  003E24                     __ptext70:
 14979                           	opt stack 0
 14980  003E24                     _PortWrite:
 14981                           	opt stack 26
 14982                           
 14983                           ;incstack = 0
 14984  003E24  FFFF               	dw	65535
 14985                           
 14986                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 14987  003E26  8A8B               	bsf	3979,5,c	;volatile
 14988                           
 14989                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 14990  003E28  0E06               	movlw	6
 14991  003E2A                     u8007:
 14992  003E2A  FFFF               	dw	65535	; errata NOP
 14993  003E2C  2EE8               	decfsz	wreg,f,c
 14994  003E2E  D7FD               	goto	u8007
 14995  003E30  F000               	nop	
 14996                           
 14997                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 14998  003E32  0E00               	movlw	0
 14999  003E34  6E24               	movwf	PortWrite@i,c
 15000  003E36  D00E               	goto	l6675
 15001  003E38                     l74:
 15002  003E38  FFFF               	dw	65535	; assembler added errata NOP
 15003  003E3A  A2AC               	btfss	4012,1,c	;volatile
 15004  003E3C  D7FD               	goto	l74
 15005                           
 15006                           ;interrupts.c: 108: TXREG = buf[i];
 15007  003E3E  5024               	movf	PortWrite@i,w,c
 15008  003E40  0D01               	mullw	1
 15009  003E42  50F3               	movf	prodl,w,c
 15010  003E44  2421               	addwf	PortWrite@buf,w,c
 15011  003E46  6ED9               	movwf	fsr2l,c
 15012  003E48  50F4               	movf	prodh,w,c
 15013  003E4A  2022               	addwfc	PortWrite@buf+1,w,c
 15014  003E4C  6EDA               	movwf	fsr2h,c
 15015  003E4E  50DF               	movf	indf2,w,c
 15016  003E50  6EAD               	movwf	4013,c	;volatile
 15017  003E52  2A24               	incf	PortWrite@i,f,c
 15018  003E54                     l6675:
 15019  003E54  FFFF               	dw	65535	; assembler added errata NOP
 15020  003E56  5023               	movf	PortWrite@buflen,w,c
 15021  003E58  5C24               	subwf	PortWrite@i,w,c
 15022  003E5A  A0D8               	btfss	status,0,c
 15023  003E5C  D7ED               	goto	l74
 15024  003E5E                     l78:
 15025  003E5E  FFFF               	dw	65535	; assembler added errata NOP
 15026  003E60  A2AC               	btfss	4012,1,c	;volatile
 15027  003E62  D7FD               	goto	l78
 15028                           
 15029                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 15030  003E64  9A8B               	bcf	3979,5,c	;volatile
 15031  003E66  0012               	return		;funcret
 15032  003E68  FFFF               	dw	65535	; errata NOP
 15033  003E6A                     __end_of_PortWrite:
 15034                           	opt stack 0
 15035                           tblptru	equ	0xFF8
 15036                           tblptrh	equ	0xFF7
 15037                           tblptrl	equ	0xFF6
 15038                           tablat	equ	0xFF5
 15039                           prodh	equ	0xFF4
 15040                           prodl	equ	0xFF3
 15041                           intcon	equ	0xFF2
 15042                           postinc0	equ	0xFEE
 15043                           wreg	equ	0xFE8
 15044                           indf1	equ	0xFE7
 15045                           postinc1	equ	0xFE6
 15046                           postdec1	equ	0xFE5
 15047                           fsr1h	equ	0xFE2
 15048                           fsr1l	equ	0xFE1
 15049                           indf2	equ	0xFDF
 15050                           postinc2	equ	0xFDE
 15051                           postdec2	equ	0xFDD
 15052                           plusw2	equ	0xFDB
 15053                           fsr2h	equ	0xFDA
 15054                           fsr2l	equ	0xFD9
 15055                           status	equ	0xFD8
 15056                           
 15057 ;; *************** function _ModbusCalcCRC *****************
 15058 ;; Defined at:
 15059 ;;		line 760 in file "ModbusRtu.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;  u8length        1    wreg     unsigned char 
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  u8length        1   36[COMRAM] unsigned char 
 15064 ;;  j               1   42[COMRAM] unsigned char 
 15065 ;;  i               1   41[COMRAM] unsigned char 
 15066 ;;  temp            2   43[COMRAM] unsigned int 
 15067 ;;  flag            2   39[COMRAM] unsigned int 
 15068 ;;  temp2           2   37[COMRAM] unsigned int 
 15069 ;; Return value:  Size  Location     Type
 15070 ;;                  2   32[COMRAM] unsigned short 
 15071 ;; Registers used:
 15072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15073 ;; Tracked objects:
 15074 ;;		On entry : 0/0
 15075 ;;		On exit  : 0/0
 15076 ;;		Unchanged: 0/0
 15077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15078 ;;      Params:         2       0       0       0       0       0       0
 15079 ;;      Locals:         9       0       0       0       0       0       0
 15080 ;;      Temps:          2       0       0       0       0       0       0
 15081 ;;      Totals:        13       0       0       0       0       0       0
 15082 ;;Total ram usage:       13 bytes
 15083 ;; Hardware stack levels used:    1
 15084 ;; Hardware stack levels required when called:    2
 15085 ;; This function calls:
 15086 ;;		Nothing
 15087 ;; This function is called by:
 15088 ;;		_ModbusSendTxBuffer
 15089 ;;		_ModbusValidateRequest
 15090 ;; This function uses a non-reentrant model
 15091 ;;
 15092                           
 15093                           	psect	text71
 15094  0036E0                     __ptext71:
 15095                           	opt stack 0
 15096  0036E0                     _ModbusCalcCRC:
 15097                           	opt stack 26
 15098                           
 15099                           ;incstack = 0
 15100  0036E0  FFFF               	dw	65535
 15101                           
 15102                           ;ModbusCalcCRC@u8length stored from wreg
 15103  0036E2  6E25               	movwf	ModbusCalcCRC@u8length,c
 15104                           
 15105                           ;ModbusRtu.c: 762: unsigned int temp, temp2, flag;
 15106                           ;ModbusRtu.c: 763: temp = 0xFFFF;
 15107  0036E4  682C               	setf	ModbusCalcCRC@temp,c
 15108  0036E6  682D               	setf	ModbusCalcCRC@temp+1,c
 15109                           
 15110                           ;ModbusRtu.c: 764: for (uint8_t i = 0; i < u8length; i++)
 15111  0036E8  0E00               	movlw	0
 15112  0036EA  6E2A               	movwf	ModbusCalcCRC@i,c
 15113  0036EC  D02C               	goto	l6863
 15114  0036EE                     l6841:
 15115  0036EE  FFFF               	dw	65535	; assembler added errata NOP
 15116                           
 15117                           ;ModbusRtu.c: 765: {
 15118                           ;ModbusRtu.c: 766: temp = temp ^ _au8Buffer[i];
 15119  0036F0  502A               	movf	ModbusCalcCRC@i,w,c
 15120  0036F2  0D01               	mullw	1
 15121  0036F4  0E2A               	movlw	low __au8Buffer
 15122  0036F6  24F3               	addwf	prodl,w,c
 15123  0036F8  6ED9               	movwf	fsr2l,c
 15124  0036FA  0E01               	movlw	high __au8Buffer
 15125  0036FC  20F4               	addwfc	prodh,w,c
 15126  0036FE  6EDA               	movwf	fsr2h,c
 15127  003700  50DF               	movf	indf2,w,c
 15128  003702  6E23               	movwf	??_ModbusCalcCRC& (0+255),c
 15129  003704  502C               	movf	ModbusCalcCRC@temp,w,c
 15130  003706  1823               	xorwf	??_ModbusCalcCRC,w,c
 15131  003708  6E2C               	movwf	ModbusCalcCRC@temp,c
 15132  00370A  502D               	movf	ModbusCalcCRC@temp+1,w,c
 15133  00370C  6E2D               	movwf	ModbusCalcCRC@temp+1,c
 15134                           
 15135                           ;ModbusRtu.c: 767: for (uint8_t j = 1; j <= 8; j++)
 15136  00370E  0E01               	movlw	1
 15137  003710  6E2B               	movwf	ModbusCalcCRC@j,c
 15138  003712                     l6845:
 15139  003712  FFFF               	dw	65535	; assembler added errata NOP
 15140  003714  0E08               	movlw	8
 15141  003716  642B               	cpfsgt	ModbusCalcCRC@j,c
 15142  003718  D001               	goto	l6849
 15143  00371A  D013               	goto	l6861
 15144  00371C                     l6849:
 15145  00371C  FFFF               	dw	65535	; assembler added errata NOP
 15146                           
 15147                           ;ModbusRtu.c: 768: {
 15148                           ;ModbusRtu.c: 769: flag = temp & 0x0001;
 15149  00371E  0E01               	movlw	1
 15150  003720  142C               	andwf	ModbusCalcCRC@temp,w,c
 15151  003722  6E28               	movwf	ModbusCalcCRC@flag,c
 15152  003724  6A29               	clrf	ModbusCalcCRC@flag+1,c
 15153                           
 15154                           ;ModbusRtu.c: 770: temp >>= 1;
 15155  003726  90D8               	bcf	status,0,c
 15156  003728  322D               	rrcf	ModbusCalcCRC@temp+1,f,c
 15157  00372A  322C               	rrcf	ModbusCalcCRC@temp,f,c
 15158                           
 15159                           ;ModbusRtu.c: 771: if (flag)
 15160  00372C  5028               	movf	ModbusCalcCRC@flag,w,c
 15161  00372E  1029               	iorwf	ModbusCalcCRC@flag+1,w,c
 15162  003730  B4D8               	btfsc	status,2,c
 15163  003732  D004               	goto	l6857
 15164                           
 15165                           ;ModbusRtu.c: 772: temp ^= 0xA001;
 15166  003734  0E01               	movlw	1
 15167  003736  1A2C               	xorwf	ModbusCalcCRC@temp,f,c
 15168  003738  0EA0               	movlw	160
 15169  00373A  1A2D               	xorwf	ModbusCalcCRC@temp+1,f,c
 15170  00373C                     l6857:
 15171  00373C  FFFF               	dw	65535	; assembler added errata NOP
 15172  00373E  2A2B               	incf	ModbusCalcCRC@j,f,c
 15173  003740  D7E8               	goto	l6845
 15174  003742                     l6861:
 15175  003742  FFFF               	dw	65535	; assembler added errata NOP
 15176  003744  2A2A               	incf	ModbusCalcCRC@i,f,c
 15177  003746                     l6863:
 15178  003746  FFFF               	dw	65535	; assembler added errata NOP
 15179  003748  5025               	movf	ModbusCalcCRC@u8length,w,c
 15180  00374A  5C2A               	subwf	ModbusCalcCRC@i,w,c
 15181  00374C  A0D8               	btfss	status,0,c
 15182  00374E  D7CF               	goto	l6841
 15183                           
 15184                           ;ModbusRtu.c: 773: }
 15185                           ;ModbusRtu.c: 774: }
 15186                           ;ModbusRtu.c: 776: temp2 = temp >> 8;
 15187  003750  502D               	movf	ModbusCalcCRC@temp+1,w,c
 15188  003752  6E26               	movwf	ModbusCalcCRC@temp2,c
 15189  003754  6A27               	clrf	ModbusCalcCRC@temp2+1,c
 15190                           
 15191                           ;ModbusRtu.c: 777: temp = (temp << 8) | temp2;
 15192  003756  502C               	movf	ModbusCalcCRC@temp,w,c
 15193  003758  6E24               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 15194  00375A  6A23               	clrf	??_ModbusCalcCRC& (0+255),c
 15195  00375C  5026               	movf	ModbusCalcCRC@temp2,w,c
 15196  00375E  1023               	iorwf	??_ModbusCalcCRC,w,c
 15197  003760  6E2C               	movwf	ModbusCalcCRC@temp,c
 15198  003762  5027               	movf	ModbusCalcCRC@temp2+1,w,c
 15199  003764  1024               	iorwf	??_ModbusCalcCRC+1,w,c
 15200  003766  6E2D               	movwf	ModbusCalcCRC@temp+1,c
 15201                           
 15202                           ;ModbusRtu.c: 781: return temp;
 15203  003768  C02C  F021         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 15204  00376C  C02D  F022         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 15205  003770  0012               	return		;funcret
 15206  003772  FFFF               	dw	65535	; errata NOP
 15207  003774                     __end_of_ModbusCalcCRC:
 15208                           	opt stack 0
 15209                           tblptru	equ	0xFF8
 15210                           tblptrh	equ	0xFF7
 15211                           tblptrl	equ	0xFF6
 15212                           tablat	equ	0xFF5
 15213                           prodh	equ	0xFF4
 15214                           prodl	equ	0xFF3
 15215                           intcon	equ	0xFF2
 15216                           postinc0	equ	0xFEE
 15217                           wreg	equ	0xFE8
 15218                           indf1	equ	0xFE7
 15219                           postinc1	equ	0xFE6
 15220                           postdec1	equ	0xFE5
 15221                           fsr1h	equ	0xFE2
 15222                           fsr1l	equ	0xFE1
 15223                           indf2	equ	0xFDF
 15224                           postinc2	equ	0xFDE
 15225                           postdec2	equ	0xFDD
 15226                           plusw2	equ	0xFDB
 15227                           fsr2h	equ	0xFDA
 15228                           fsr2l	equ	0xFD9
 15229                           status	equ	0xFD8
 15230                           
 15231 ;; *************** function _ModbusGetRxBufferHeader *****************
 15232 ;; Defined at:
 15233 ;;		line 593 in file "ModbusRtu.c"
 15234 ;; Parameters:    Size  Location     Type
 15235 ;;		None
 15236 ;; Auto vars:     Size  Location     Type
 15237 ;;  i               1   34[COMRAM] unsigned char 
 15238 ;; Return value:  Size  Location     Type
 15239 ;;                  1    wreg      unsigned char 
 15240 ;; Registers used:
 15241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15242 ;; Tracked objects:
 15243 ;;		On entry : 0/0
 15244 ;;		On exit  : 0/0
 15245 ;;		Unchanged: 0/0
 15246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15247 ;;      Params:         0       0       0       0       0       0       0
 15248 ;;      Locals:         1       0       0       0       0       0       0
 15249 ;;      Temps:          1       0       0       0       0       0       0
 15250 ;;      Totals:         2       0       0       0       0       0       0
 15251 ;;Total ram usage:        2 bytes
 15252 ;; Hardware stack levels used:    1
 15253 ;; Hardware stack levels required when called:    3
 15254 ;; This function calls:
 15255 ;;		_PortAvailable
 15256 ;;		_PortRead
 15257 ;; This function is called by:
 15258 ;;		_ModbusPoll
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           	psect	text72
 15263  003D86                     __ptext72:
 15264                           	opt stack 0
 15265  003D86                     _ModbusGetRxBufferHeader:
 15266                           	opt stack 26
 15267                           
 15268                           ;incstack = 0
 15269  003D86  FFFF               	dw	65535
 15270                           
 15271                           ;ModbusRtu.c: 595: _u8BufferSize = 0;
 15272  003D88  0E00               	movlw	0
 15273  003D8A  6E53               	movwf	__u8BufferSize,c
 15274                           
 15275                           ;ModbusRtu.c: 596: for(uint8_t i = 0; i < 4; i++)
 15276  003D8C  0E00               	movlw	0
 15277  003D8E  6E23               	movwf	ModbusGetRxBufferHeader@i,c
 15278  003D90                     l7351:
 15279  003D90  FFFF               	dw	65535	; assembler added errata NOP
 15280  003D92  0E03               	movlw	3
 15281  003D94  6423               	cpfsgt	ModbusGetRxBufferHeader@i,c
 15282  003D96  D001               	goto	l7355
 15283  003D98  D019               	goto	l7369
 15284  003D9A                     l7355:
 15285  003D9A  FFFF               	dw	65535	; assembler added errata NOP
 15286                           
 15287                           ;ModbusRtu.c: 597: {
 15288                           ;ModbusRtu.c: 598: if(!PortAvailable())
 15289  003D9C  ECA7  F001         	call	_PortAvailable	;wreg free
 15290  003DA0  0900               	iorlw	0
 15291  003DA2  A4D8               	btfss	status,2,c
 15292  003DA4  D002               	goto	l7361
 15293                           
 15294                           ;ModbusRtu.c: 599: return ERR_EXCEPTION;
 15295  003DA6  0EFB               	movlw	251
 15296  003DA8  D013               	goto	l833
 15297  003DAA                     l7361:
 15298  003DAA  FFFF               	dw	65535	; assembler added errata NOP
 15299                           
 15300                           ;ModbusRtu.c: 600: _au8Buffer[ _u8BufferSize ] = PortRead();
 15301  003DAC  EC57  F01F         	call	_PortRead	;wreg free
 15302  003DB0  6E22               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 15303  003DB2  5053               	movf	__u8BufferSize,w,c
 15304  003DB4  0D01               	mullw	1
 15305  003DB6  0E2A               	movlw	low __au8Buffer
 15306  003DB8  24F3               	addwf	prodl,w,c
 15307  003DBA  6ED9               	movwf	fsr2l,c
 15308  003DBC  0E01               	movlw	high __au8Buffer
 15309  003DBE  20F4               	addwfc	prodh,w,c
 15310  003DC0  6EDA               	movwf	fsr2h,c
 15311  003DC2  C022  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 15312                           
 15313                           ;ModbusRtu.c: 601: _u8BufferSize++;
 15314  003DC6  2A53               	incf	__u8BufferSize,f,c
 15315  003DC8  2A23               	incf	ModbusGetRxBufferHeader@i,f,c
 15316  003DCA  D7E2               	goto	l7351
 15317  003DCC                     l7369:
 15318  003DCC  FFFF               	dw	65535	; assembler added errata NOP
 15319                           
 15320                           ;ModbusRtu.c: 602: }
 15321                           ;ModbusRtu.c: 603: return _u8BufferSize;
 15322  003DCE  5053               	movf	__u8BufferSize,w,c
 15323  003DD0                     l833:
 15324  003DD0  FFFF               	dw	65535	; assembler added errata NOP
 15325  003DD2  0012               	return		;funcret
 15326  003DD4  FFFF               	dw	65535	; errata NOP
 15327  003DD6                     __end_of_ModbusGetRxBufferHeader:
 15328                           	opt stack 0
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           postinc0	equ	0xFEE
 15337                           wreg	equ	0xFE8
 15338                           indf1	equ	0xFE7
 15339                           postinc1	equ	0xFE6
 15340                           postdec1	equ	0xFE5
 15341                           fsr1h	equ	0xFE2
 15342                           fsr1l	equ	0xFE1
 15343                           indf2	equ	0xFDF
 15344                           postinc2	equ	0xFDE
 15345                           postdec2	equ	0xFDD
 15346                           plusw2	equ	0xFDB
 15347                           fsr2h	equ	0xFDA
 15348                           fsr2l	equ	0xFD9
 15349                           status	equ	0xFD8
 15350                           
 15351 ;; *************** function _ModbusGetRxBuffer *****************
 15352 ;; Defined at:
 15353 ;;		line 613 in file "ModbusRtu.c"
 15354 ;; Parameters:    Size  Location     Type
 15355 ;;		None
 15356 ;; Auto vars:     Size  Location     Type
 15357 ;;  bBuffOverflo    1   34[COMRAM] unsigned char 
 15358 ;; Return value:  Size  Location     Type
 15359 ;;                  1    wreg      unsigned char 
 15360 ;; Registers used:
 15361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15362 ;; Tracked objects:
 15363 ;;		On entry : 0/0
 15364 ;;		On exit  : 0/0
 15365 ;;		Unchanged: 0/0
 15366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15367 ;;      Params:         0       0       0       0       0       0       0
 15368 ;;      Locals:         1       0       0       0       0       0       0
 15369 ;;      Temps:          1       0       0       0       0       0       0
 15370 ;;      Totals:         2       0       0       0       0       0       0
 15371 ;;Total ram usage:        2 bytes
 15372 ;; Hardware stack levels used:    1
 15373 ;; Hardware stack levels required when called:    3
 15374 ;; This function calls:
 15375 ;;		_PortAvailable
 15376 ;;		_PortRead
 15377 ;; This function is called by:
 15378 ;;		_ModbusPoll
 15379 ;; This function uses a non-reentrant model
 15380 ;;
 15381                           
 15382                           	psect	text73
 15383  003B18                     __ptext73:
 15384                           	opt stack 0
 15385  003B18                     _ModbusGetRxBuffer:
 15386                           	opt stack 26
 15387                           
 15388                           ;incstack = 0
 15389  003B18  FFFF               	dw	65535
 15390                           
 15391                           ;ModbusRtu.c: 615: bool bBuffOverflow = 0;
 15392  003B1A  0E00               	movlw	0
 15393  003B1C  6E23               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 15394                           
 15395                           ;ModbusRtu.c: 620: _u8BufferSize = 4;
 15396  003B1E  0E04               	movlw	4
 15397  003B20  6E53               	movwf	__u8BufferSize,c
 15398                           
 15399                           ;ModbusRtu.c: 622: while (PortAvailable())
 15400  003B22  D014               	goto	l7383
 15401  003B24                     l7375:
 15402  003B24  FFFF               	dw	65535	; assembler added errata NOP
 15403                           
 15404                           ;ModbusRtu.c: 623: {
 15405                           ;ModbusRtu.c: 624: _au8Buffer[ _u8BufferSize ] = PortRead();
 15406  003B26  EC57  F01F         	call	_PortRead	;wreg free
 15407  003B2A  6E22               	movwf	??_ModbusGetRxBuffer& (0+255),c
 15408  003B2C  5053               	movf	__u8BufferSize,w,c
 15409  003B2E  0D01               	mullw	1
 15410  003B30  0E2A               	movlw	low __au8Buffer
 15411  003B32  24F3               	addwf	prodl,w,c
 15412  003B34  6ED9               	movwf	fsr2l,c
 15413  003B36  0E01               	movlw	high __au8Buffer
 15414  003B38  20F4               	addwfc	prodh,w,c
 15415  003B3A  6EDA               	movwf	fsr2h,c
 15416  003B3C  C022  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 15417                           
 15418                           ;ModbusRtu.c: 625: _u8BufferSize++;
 15419  003B40  2A53               	incf	__u8BufferSize,f,c
 15420                           
 15421                           ;ModbusRtu.c: 626: if (_u8BufferSize >= 140)
 15422  003B42  0E8B               	movlw	139
 15423  003B44  6453               	cpfsgt	__u8BufferSize,c
 15424  003B46  D002               	goto	l7383
 15425                           
 15426                           ;ModbusRtu.c: 627: bBuffOverflow = 1;
 15427  003B48  0E01               	movlw	1
 15428  003B4A  6E23               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 15429  003B4C                     l7383:
 15430  003B4C  FFFF               	dw	65535	; assembler added errata NOP
 15431  003B4E  ECA7  F001         	call	_PortAvailable	;wreg free
 15432  003B52  0900               	iorlw	0
 15433  003B54  A4D8               	btfss	status,2,c
 15434  003B56  D7E6               	goto	l7375
 15435                           
 15436                           ;ModbusRtu.c: 628: }
 15437                           ;ModbusRtu.c: 629: _u16InCnt++;
 15438  003B58  0101               	movlb	1	; () banked
 15439  003B5A  4B24               	infsnz	__u16InCnt& (0+255),f,b
 15440  003B5C  2B25               	incf	(__u16InCnt+1)& (0+255),f,b
 15441                           
 15442                           ; BSR set to: 1
 15443                           ;ModbusRtu.c: 630: if (bBuffOverflow)
 15444  003B5E  5023               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 15445  003B60  B4D8               	btfsc	status,2,c
 15446  003B62  D005               	goto	l7395
 15447                           
 15448                           ; BSR set to: 1
 15449                           ;ModbusRtu.c: 631: {
 15450                           ;ModbusRtu.c: 632: _u16errCnt++;
 15451  003B64  0101               	movlb	1	; () banked
 15452  003B66  4B28               	infsnz	__u16errCnt& (0+255),f,b
 15453  003B68  2B29               	incf	(__u16errCnt+1)& (0+255),f,b
 15454                           
 15455                           ; BSR set to: 1
 15456                           ;ModbusRtu.c: 633: return ERR_BUFF_OVERFLOW;
 15457  003B6A  0EFD               	movlw	253
 15458                           
 15459                           ; BSR set to: 1
 15460  003B6C  D002               	goto	l841
 15461  003B6E                     l7395:
 15462  003B6E  FFFF               	dw	65535	; assembler added errata NOP
 15463                           
 15464                           ; BSR set to: 1
 15465                           ;ModbusRtu.c: 634: }
 15466                           ;ModbusRtu.c: 635: return _u8BufferSize;
 15467  003B70  5053               	movf	__u8BufferSize,w,c
 15468  003B72                     l841:
 15469  003B72  FFFF               	dw	65535	; assembler added errata NOP
 15470                           
 15471                           ; BSR set to: 1
 15472  003B74  0012               	return		;funcret
 15473  003B76  FFFF               	dw	65535	; errata NOP
 15474  003B78                     __end_of_ModbusGetRxBuffer:
 15475                           	opt stack 0
 15476                           tblptru	equ	0xFF8
 15477                           tblptrh	equ	0xFF7
 15478                           tblptrl	equ	0xFF6
 15479                           tablat	equ	0xFF5
 15480                           prodh	equ	0xFF4
 15481                           prodl	equ	0xFF3
 15482                           intcon	equ	0xFF2
 15483                           postinc0	equ	0xFEE
 15484                           wreg	equ	0xFE8
 15485                           indf1	equ	0xFE7
 15486                           postinc1	equ	0xFE6
 15487                           postdec1	equ	0xFE5
 15488                           fsr1h	equ	0xFE2
 15489                           fsr1l	equ	0xFE1
 15490                           indf2	equ	0xFDF
 15491                           postinc2	equ	0xFDE
 15492                           postdec2	equ	0xFDD
 15493                           plusw2	equ	0xFDB
 15494                           fsr2h	equ	0xFDA
 15495                           fsr2l	equ	0xFD9
 15496                           status	equ	0xFD8
 15497                           
 15498 ;; *************** function _PortRead *****************
 15499 ;; Defined at:
 15500 ;;		line 57 in file "interrupts.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;		None
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  ret             1   32[COMRAM] unsigned char 
 15505 ;; Return value:  Size  Location     Type
 15506 ;;                  1    wreg      unsigned char 
 15507 ;; Registers used:
 15508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15514 ;;      Params:         0       0       0       0       0       0       0
 15515 ;;      Locals:         1       0       0       0       0       0       0
 15516 ;;      Temps:          0       0       0       0       0       0       0
 15517 ;;      Totals:         1       0       0       0       0       0       0
 15518 ;;Total ram usage:        1 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; Hardware stack levels required when called:    2
 15521 ;; This function calls:
 15522 ;;		Nothing
 15523 ;; This function is called by:
 15524 ;;		_ModbusGetRxBufferHeader
 15525 ;;		_ModbusGetRxBuffer
 15526 ;; This function uses a non-reentrant model
 15527 ;;
 15528                           
 15529                           	psect	text74
 15530  003EAE                     __ptext74:
 15531                           	opt stack 0
 15532  003EAE                     _PortRead:
 15533                           	opt stack 26
 15534                           
 15535                           ; BSR set to: 1
 15536                           ;incstack = 0
 15537  003EAE  FFFF               	dw	65535
 15538                           
 15539                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 15540  003EB0  9EF2               	bcf	intcon,7,c	;volatile
 15541                           
 15542                           ;interrupts.c: 60: if(UartBufferLen > 0)
 15543  003EB2  5043               	movf	_UartBufferLen,w,c	;volatile
 15544  003EB4  B4D8               	btfsc	status,2,c
 15545  003EB6  D017               	goto	l63
 15546                           
 15547                           ;interrupts.c: 61: {
 15548                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 15549  003EB8  5044               	movf	_UartBufferTail,w,c	;volatile
 15550  003EBA  0D01               	mullw	1
 15551  003EBC  0E00               	movlw	low _UartRingBuffer
 15552  003EBE  24F3               	addwf	prodl,w,c
 15553  003EC0  6ED9               	movwf	fsr2l,c
 15554  003EC2  0E02               	movlw	high _UartRingBuffer
 15555  003EC4  20F4               	addwfc	prodh,w,c
 15556  003EC6  6EDA               	movwf	fsr2h,c
 15557  003EC8  50DF               	movf	indf2,w,c
 15558  003ECA  6E21               	movwf	PortRead@ret,c
 15559                           
 15560                           ;interrupts.c: 64: UartBufferLen--;
 15561  003ECC  0643               	decf	_UartBufferLen,f,c	;volatile
 15562                           
 15563                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 15564  003ECE  2844               	incf	_UartBufferTail,w,c	;volatile
 15565  003ED0  A4D8               	btfss	status,2,c
 15566  003ED2  D003               	goto	l6991
 15567                           
 15568                           ;interrupts.c: 66: UartBufferTail = 0;
 15569  003ED4  0E00               	movlw	0
 15570  003ED6  6E44               	movwf	_UartBufferTail,c	;volatile
 15571  003ED8  D002               	goto	l6993
 15572  003EDA                     l6991:
 15573  003EDA  FFFF               	dw	65535	; assembler added errata NOP
 15574                           
 15575                           ;interrupts.c: 67: else
 15576                           ;interrupts.c: 68: UartBufferTail++;
 15577  003EDC  2A44               	incf	_UartBufferTail,f,c	;volatile
 15578  003EDE                     l6993:
 15579  003EDE  FFFF               	dw	65535	; assembler added errata NOP
 15580                           
 15581                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 15582  003EE0  8EF2               	bsf	intcon,7,c	;volatile
 15583                           
 15584                           ;interrupts.c: 70: return ret;
 15585  003EE2  5021               	movf	PortRead@ret,w,c
 15586  003EE4  D003               	goto	l66
 15587  003EE6                     l63:
 15588  003EE6  FFFF               	dw	65535	; assembler added errata NOP
 15589                           
 15590                           ;interrupts.c: 71: }
 15591                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 15592  003EE8  8EF2               	bsf	intcon,7,c	;volatile
 15593                           
 15594                           ;interrupts.c: 73: return 0;
 15595  003EEA  0E00               	movlw	0
 15596  003EEC                     l66:
 15597  003EEC  FFFF               	dw	65535	; assembler added errata NOP
 15598  003EEE  0012               	return		;funcret
 15599  003EF0  FFFF               	dw	65535	; errata NOP
 15600  003EF2                     __end_of_PortRead:
 15601                           	opt stack 0
 15602                           tblptru	equ	0xFF8
 15603                           tblptrh	equ	0xFF7
 15604                           tblptrl	equ	0xFF6
 15605                           tablat	equ	0xFF5
 15606                           prodh	equ	0xFF4
 15607                           prodl	equ	0xFF3
 15608                           intcon	equ	0xFF2
 15609                           postinc0	equ	0xFEE
 15610                           wreg	equ	0xFE8
 15611                           indf1	equ	0xFE7
 15612                           postinc1	equ	0xFE6
 15613                           postdec1	equ	0xFE5
 15614                           fsr1h	equ	0xFE2
 15615                           fsr1l	equ	0xFE1
 15616                           indf2	equ	0xFDF
 15617                           postinc2	equ	0xFDE
 15618                           postdec2	equ	0xFDD
 15619                           plusw2	equ	0xFDB
 15620                           fsr2h	equ	0xFDA
 15621                           fsr2l	equ	0xFD9
 15622                           status	equ	0xFD8
 15623                           
 15624 ;; *************** function _PortAvailable *****************
 15625 ;; Defined at:
 15626 ;;		line 52 in file "interrupts.c"
 15627 ;; Parameters:    Size  Location     Type
 15628 ;;		None
 15629 ;; Auto vars:     Size  Location     Type
 15630 ;;		None
 15631 ;; Return value:  Size  Location     Type
 15632 ;;                  1    wreg      unsigned char 
 15633 ;; Registers used:
 15634 ;;		wreg, status,2
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15640 ;;      Params:         0       0       0       0       0       0       0
 15641 ;;      Locals:         0       0       0       0       0       0       0
 15642 ;;      Temps:          0       0       0       0       0       0       0
 15643 ;;      Totals:         0       0       0       0       0       0       0
 15644 ;;Total ram usage:        0 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    2
 15647 ;; This function calls:
 15648 ;;		Nothing
 15649 ;; This function is called by:
 15650 ;;		_ModbusPoll
 15651 ;;		_ModbusGetRxBufferHeader
 15652 ;;		_ModbusGetRxBuffer
 15653 ;; This function uses a non-reentrant model
 15654 ;;
 15655                           
 15656                           	psect	text75
 15657  00034E                     __ptext75:
 15658                           	opt stack 0
 15659  00034E                     _PortAvailable:
 15660                           	opt stack 27
 15661                           
 15662                           ;incstack = 0
 15663  00034E  FFFF               	dw	65535
 15664                           
 15665                           ;interrupts.c: 54: return UartBufferLen;
 15666  000350  5043               	movf	_UartBufferLen,w,c	;volatile
 15667  000352  0012               	return		;funcret
 15668  000354  FFFF               	dw	65535	; errata NOP
 15669  000356                     __end_of_PortAvailable:
 15670                           	opt stack 0
 15671                           tblptru	equ	0xFF8
 15672                           tblptrh	equ	0xFF7
 15673                           tblptrl	equ	0xFF6
 15674                           tablat	equ	0xFF5
 15675                           prodh	equ	0xFF4
 15676                           prodl	equ	0xFF3
 15677                           intcon	equ	0xFF2
 15678                           postinc0	equ	0xFEE
 15679                           wreg	equ	0xFE8
 15680                           indf1	equ	0xFE7
 15681                           postinc1	equ	0xFE6
 15682                           postdec1	equ	0xFE5
 15683                           fsr1h	equ	0xFE2
 15684                           fsr1l	equ	0xFE1
 15685                           indf2	equ	0xFDF
 15686                           postinc2	equ	0xFDE
 15687                           postdec2	equ	0xFDD
 15688                           plusw2	equ	0xFDB
 15689                           fsr2h	equ	0xFDA
 15690                           fsr2l	equ	0xFD9
 15691                           status	equ	0xFD8
 15692                           
 15693 ;; *************** function _ModbusBuildException *****************
 15694 ;; Defined at:
 15695 ;;		line 954 in file "ModbusRtu.c"
 15696 ;; Parameters:    Size  Location     Type
 15697 ;;  u8exception     1    wreg     unsigned char 
 15698 ;; Auto vars:     Size  Location     Type
 15699 ;;  u8exception     1   32[COMRAM] unsigned char 
 15700 ;;  u8func          1   33[COMRAM] unsigned char 
 15701 ;; Return value:  Size  Location     Type
 15702 ;;                  1    wreg      void 
 15703 ;; Registers used:
 15704 ;;		wreg, status,2, status,0
 15705 ;; Tracked objects:
 15706 ;;		On entry : 0/0
 15707 ;;		On exit  : 0/0
 15708 ;;		Unchanged: 0/0
 15709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15710 ;;      Params:         0       0       0       0       0       0       0
 15711 ;;      Locals:         2       0       0       0       0       0       0
 15712 ;;      Temps:          0       0       0       0       0       0       0
 15713 ;;      Totals:         2       0       0       0       0       0       0
 15714 ;;Total ram usage:        2 bytes
 15715 ;; Hardware stack levels used:    1
 15716 ;; Hardware stack levels required when called:    2
 15717 ;; This function calls:
 15718 ;;		Nothing
 15719 ;; This function is called by:
 15720 ;;		_ModbusPoll
 15721 ;; This function uses a non-reentrant model
 15722 ;;
 15723                           
 15724                           	psect	text76
 15725  0001F0                     __ptext76:
 15726                           	opt stack 0
 15727  0001F0                     _ModbusBuildException:
 15728                           	opt stack 27
 15729                           
 15730                           ;incstack = 0
 15731  0001F0  FFFF               	dw	65535
 15732                           
 15733                           ;ModbusBuildException@u8exception stored from wreg
 15734  0001F2  6E21               	movwf	ModbusBuildException@u8exception,c
 15735                           
 15736                           ;ModbusRtu.c: 956: uint8_t u8func = _au8Buffer[ FUNC ];
 15737  0001F4  C12B  F022         	movff	__au8Buffer+1,ModbusBuildException@u8func
 15738                           
 15739                           ;ModbusRtu.c: 958: _au8Buffer[ ID ] = _u8id;
 15740  0001F8  C0F0  F12A         	movff	__u8id,__au8Buffer
 15741                           
 15742                           ;ModbusRtu.c: 959: _au8Buffer[ FUNC ] = u8func + 0x80;
 15743  0001FC  5022               	movf	ModbusBuildException@u8func,w,c
 15744  0001FE  0F80               	addlw	128
 15745  000200  0101               	movlb	1	; () banked
 15746  000202  6F2B               	movwf	(__au8Buffer+1)& (0+255),b
 15747                           
 15748                           ; BSR set to: 1
 15749                           ;ModbusRtu.c: 960: _au8Buffer[ 2 ] = u8exception;
 15750  000204  C021  F12C         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 15751                           
 15752                           ; BSR set to: 1
 15753                           ;ModbusRtu.c: 961: _u8BufferSize = EXCEPTION_SIZE;
 15754  000208  0E03               	movlw	3
 15755  00020A  6E53               	movwf	__u8BufferSize,c
 15756                           
 15757                           ; BSR set to: 1
 15758  00020C  0012               	return		;funcret
 15759  00020E  FFFF               	dw	65535	; errata NOP
 15760  000210                     __end_of_ModbusBuildException:
 15761                           	opt stack 0
 15762                           tblptru	equ	0xFF8
 15763                           tblptrh	equ	0xFF7
 15764                           tblptrl	equ	0xFF6
 15765                           tablat	equ	0xFF5
 15766                           prodh	equ	0xFF4
 15767                           prodl	equ	0xFF3
 15768                           intcon	equ	0xFF2
 15769                           postinc0	equ	0xFEE
 15770                           wreg	equ	0xFE8
 15771                           indf1	equ	0xFE7
 15772                           postinc1	equ	0xFE6
 15773                           postdec1	equ	0xFE5
 15774                           fsr1h	equ	0xFE2
 15775                           fsr1l	equ	0xFE1
 15776                           indf2	equ	0xFDF
 15777                           postinc2	equ	0xFDE
 15778                           postdec2	equ	0xFDD
 15779                           plusw2	equ	0xFDB
 15780                           fsr2h	equ	0xFDA
 15781                           fsr2l	equ	0xFD9
 15782                           status	equ	0xFD8
 15783                           
 15784 ;; *************** function _InitApp *****************
 15785 ;; Defined at:
 15786 ;;		line 66 in file "user.c"
 15787 ;; Parameters:    Size  Location     Type
 15788 ;;		None
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;  i               1   32[COMRAM] unsigned char 
 15791 ;; Return value:  Size  Location     Type
 15792 ;;                  1    wreg      void 
 15793 ;; Registers used:
 15794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15800 ;;      Params:         0       0       0       0       0       0       0
 15801 ;;      Locals:         1       0       0       0       0       0       0
 15802 ;;      Temps:          0       0       0       0       0       0       0
 15803 ;;      Totals:         1       0       0       0       0       0       0
 15804 ;;Total ram usage:        1 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    3
 15807 ;; This function calls:
 15808 ;;		_InitUartBuffer
 15809 ;;		_PortBegin
 15810 ;; This function is called by:
 15811 ;;		_main
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text77
 15816  0035AE                     __ptext77:
 15817                           	opt stack 0
 15818  0035AE                     _InitApp:
 15819                           	opt stack 27
 15820                           
 15821                           ; BSR set to: 1
 15822                           ;incstack = 0
 15823  0035AE  FFFF               	dw	65535
 15824                           
 15825                           ;user.c: 76: BOR = 1;
 15826  0035B0  80D0               	bsf	4048,0,c	;volatile
 15827                           
 15828                           ;user.c: 77: POR = 1;
 15829  0035B2  82D0               	bsf	4048,1,c	;volatile
 15830                           
 15831                           ;user.c: 80: INTCONbits.PEIE = 1;
 15832  0035B4  8CF2               	bsf	intcon,6,c	;volatile
 15833                           
 15834                           ;user.c: 81: (INTCONbits.GIE = 1);
 15835  0035B6  8EF2               	bsf	intcon,7,c	;volatile
 15836                           
 15837                           ;user.c: 82: RCONbits.IPEN = 1;
 15838  0035B8  8ED0               	bsf	4048,7,c	;volatile
 15839                           
 15840                           ;user.c: 87: T1CONbits.RD16 = 1;
 15841  0035BA  8ECD               	bsf	4045,7,c	;volatile
 15842                           
 15843                           ;user.c: 88: T1CONbits.T1SYNC = 0;
 15844  0035BC  94CD               	bcf	4045,2,c	;volatile
 15845                           
 15846                           ;user.c: 89: T1CONbits.TMR1CS = 0;
 15847  0035BE  92CD               	bcf	4045,1,c	;volatile
 15848                           
 15849                           ;user.c: 91: T1CONbits.T1CKPS = 0;
 15850  0035C0  0ECF               	movlw	-49
 15851  0035C2  16CD               	andwf	4045,f,c	;volatile
 15852                           
 15853                           ;user.c: 95: PIE1bits.TMR1IE = 1;
 15854  0035C4  809D               	bsf	3997,0,c	;volatile
 15855                           
 15856                           ;user.c: 96: IPR1bits.TMR1IP = 1;
 15857  0035C6  809F               	bsf	3999,0,c	;volatile
 15858                           
 15859                           ;user.c: 97: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 15860  0035C8  0EF6               	movlw	246
 15861  0035CA  6ECF               	movwf	4047,c	;volatile
 15862  0035CC  0E3C               	movlw	60
 15863  0035CE  6ECE               	movwf	4046,c	;volatile
 15864                           
 15865                           ;user.c: 100: PIR1bits.TMR1IF = 0;
 15866  0035D0  909E               	bcf	3998,0,c	;volatile
 15867                           
 15868                           ;user.c: 102: T1CONbits.TMR1ON = 1;
 15869  0035D2  80CD               	bsf	4045,0,c	;volatile
 15870                           
 15871                           ;user.c: 106: T0CONbits.T08BIT = 0;
 15872  0035D4  9CD5               	bcf	4053,6,c	;volatile
 15873                           
 15874                           ;user.c: 107: T0CONbits.T0CS = 0;
 15875  0035D6  9AD5               	bcf	4053,5,c	;volatile
 15876                           
 15877                           ;user.c: 109: T0CONbits.PSA = 0;
 15878  0035D8  96D5               	bcf	4053,3,c	;volatile
 15879                           
 15880                           ;user.c: 120: T0CONbits.T0PS = 7;
 15881  0035DA  80D5               	bsf	4053,0,c	;volatile
 15882  0035DC  82D5               	bsf	4053,1,c	;volatile
 15883  0035DE  84D5               	bsf	4053,2,c	;volatile
 15884                           
 15885                           ;user.c: 124: INTCONbits.TMR0IE = 1;
 15886  0035E0  8AF2               	bsf	intcon,5,c	;volatile
 15887                           
 15888                           ;user.c: 125: INTCON2bits.TMR0IP = 1;
 15889  0035E2  84F1               	bsf	intcon2,2,c	;volatile
 15890                           
 15891                           ;user.c: 126: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 15892  0035E4  0E1B               	movlw	27
 15893  0035E6  6ED7               	movwf	4055,c	;volatile
 15894  0035E8  0E28               	movlw	40
 15895  0035EA  6ED6               	movwf	4054,c	;volatile
 15896                           
 15897                           ;user.c: 129: INTCONbits.TMR0IF = 0;
 15898  0035EC  94F2               	bcf	intcon,2,c	;volatile
 15899                           
 15900                           ;user.c: 136: InitUartBuffer();
 15901  0035EE  EC5F  F001         	call	_InitUartBuffer	;wreg free
 15902                           
 15903                           ;user.c: 138: PortBegin();
 15904  0035F2  EC17  F001         	call	_PortBegin	;wreg free
 15905                           
 15906                           ;user.c: 139: PIE1bits.RCIE = 1;
 15907  0035F6  8A9D               	bsf	3997,5,c	;volatile
 15908                           
 15909                           ;user.c: 141: IPR1bits.RCIP = 0;
 15910  0035F8  9A9F               	bcf	3999,5,c	;volatile
 15911                           
 15912                           ;user.c: 145: for (unsigned char i = 0; i < 15; i++)
 15913  0035FA  0E00               	movlw	0
 15914  0035FC  6E21               	movwf	InitApp@i,c
 15915  0035FE                     l8365:
 15916  0035FE  FFFF               	dw	65535	; assembler added errata NOP
 15917  003600  0E0E               	movlw	14
 15918  003602  6421               	cpfsgt	InitApp@i,c
 15919  003604  D001               	goto	l8369
 15920  003606  D00F               	goto	l8375
 15921  003608                     l8369:
 15922  003608  FFFF               	dw	65535	; assembler added errata NOP
 15923                           
 15924                           ;user.c: 146: _MODBUSInputRegs[i] = 0;
 15925  00360A  5021               	movf	InitApp@i,w,c
 15926  00360C  0D02               	mullw	2
 15927  00360E  0ED4               	movlw	low __MODBUSInputRegs
 15928  003610  24F3               	addwf	prodl,w,c
 15929  003612  6ED9               	movwf	fsr2l,c
 15930  003614  0E01               	movlw	high __MODBUSInputRegs
 15931  003616  20F4               	addwfc	prodh,w,c
 15932  003618  6EDA               	movwf	fsr2h,c
 15933  00361A  0E00               	movlw	0
 15934  00361C  6EDE               	movwf	postinc2,c
 15935  00361E  0E00               	movlw	0
 15936  003620  6EDD               	movwf	postdec2,c
 15937  003622  2A21               	incf	InitApp@i,f,c
 15938  003624  D7EC               	goto	l8365
 15939  003626                     l8375:
 15940  003626  FFFF               	dw	65535	; assembler added errata NOP
 15941                           
 15942                           ;user.c: 152: TRISB = 0;
 15943  003628  0E00               	movlw	0
 15944  00362A  6E93               	movwf	3987,c	;volatile
 15945                           
 15946                           ;user.c: 155: LATAbits.LATA0 = 0;
 15947  00362C  9089               	bcf	3977,0,c	;volatile
 15948                           
 15949                           ;user.c: 156: LATAbits.LATA1 = 0;
 15950  00362E  9289               	bcf	3977,1,c	;volatile
 15951                           
 15952                           ;user.c: 157: LATAbits.LATA2 = 0;
 15953  003630  9489               	bcf	3977,2,c	;volatile
 15954                           
 15955                           ;user.c: 158: LATAbits.LATA3 = 0;
 15956  003632  9689               	bcf	3977,3,c	;volatile
 15957                           
 15958                           ;user.c: 159: TRISAbits.RA0 = 0;
 15959  003634  9092               	bcf	3986,0,c	;volatile
 15960                           
 15961                           ;user.c: 160: TRISAbits.RA1 = 0;
 15962  003636  9292               	bcf	3986,1,c	;volatile
 15963                           
 15964                           ;user.c: 161: TRISAbits.RA2 = 0;
 15965  003638  9492               	bcf	3986,2,c	;volatile
 15966                           
 15967                           ;user.c: 162: TRISAbits.RA3 = 0;
 15968  00363A  9692               	bcf	3986,3,c	;volatile
 15969                           
 15970                           ;user.c: 164: TRISCbits.RC3 = 1;
 15971  00363C  8694               	bsf	3988,3,c	;volatile
 15972                           
 15973                           ;user.c: 165: TRISCbits.RC1 = 1;
 15974  00363E  8294               	bsf	3988,1,c	;volatile
 15975                           
 15976                           ;user.c: 166: TRISCbits.RC0 = 0;
 15977  003640  9094               	bcf	3988,0,c	;volatile
 15978                           
 15979                           ;user.c: 168: LATCbits.LATC2 = 0;
 15980  003642  948B               	bcf	3979,2,c	;volatile
 15981  003644  0012               	return		;funcret
 15982  003646  FFFF               	dw	65535	; errata NOP
 15983  003648                     __end_of_InitApp:
 15984                           	opt stack 0
 15985                           tblptru	equ	0xFF8
 15986                           tblptrh	equ	0xFF7
 15987                           tblptrl	equ	0xFF6
 15988                           tablat	equ	0xFF5
 15989                           prodh	equ	0xFF4
 15990                           prodl	equ	0xFF3
 15991                           intcon	equ	0xFF2
 15992                           intcon2	equ	0xFF1
 15993                           postinc0	equ	0xFEE
 15994                           wreg	equ	0xFE8
 15995                           indf1	equ	0xFE7
 15996                           postinc1	equ	0xFE6
 15997                           postdec1	equ	0xFE5
 15998                           fsr1h	equ	0xFE2
 15999                           fsr1l	equ	0xFE1
 16000                           indf2	equ	0xFDF
 16001                           postinc2	equ	0xFDE
 16002                           postdec2	equ	0xFDD
 16003                           plusw2	equ	0xFDB
 16004                           fsr2h	equ	0xFDA
 16005                           fsr2l	equ	0xFD9
 16006                           status	equ	0xFD8
 16007                           
 16008 ;; *************** function _PortBegin *****************
 16009 ;; Defined at:
 16010 ;;		line 48 in file "user.c"
 16011 ;; Parameters:    Size  Location     Type
 16012 ;;		None
 16013 ;; Auto vars:     Size  Location     Type
 16014 ;;		None
 16015 ;; Return value:  Size  Location     Type
 16016 ;;                  1    wreg      void 
 16017 ;; Registers used:
 16018 ;;		wreg, status,2
 16019 ;; Tracked objects:
 16020 ;;		On entry : 0/0
 16021 ;;		On exit  : 0/0
 16022 ;;		Unchanged: 0/0
 16023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16024 ;;      Params:         0       0       0       0       0       0       0
 16025 ;;      Locals:         0       0       0       0       0       0       0
 16026 ;;      Temps:          0       0       0       0       0       0       0
 16027 ;;      Totals:         0       0       0       0       0       0       0
 16028 ;;Total ram usage:        0 bytes
 16029 ;; Hardware stack levels used:    1
 16030 ;; Hardware stack levels required when called:    2
 16031 ;; This function calls:
 16032 ;;		Nothing
 16033 ;; This function is called by:
 16034 ;;		_InitApp
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           	psect	text78
 16039  00022E                     __ptext78:
 16040                           	opt stack 0
 16041  00022E                     _PortBegin:
 16042                           	opt stack 27
 16043                           
 16044                           ;incstack = 0
 16045  00022E  FFFF               	dw	65535
 16046                           
 16047                           ;user.c: 50: TXSTA = 0;
 16048  000230  0E00               	movlw	0
 16049  000232  6EAC               	movwf	4012,c	;volatile
 16050                           
 16051                           ;user.c: 51: TXSTAbits.TXEN = 1;
 16052  000234  8AAC               	bsf	4012,5,c	;volatile
 16053                           
 16054                           ;user.c: 52: TXSTAbits.BRGH = 1;
 16055  000236  84AC               	bsf	4012,2,c	;volatile
 16056                           
 16057                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 16058  000238  0E40               	movlw	64
 16059  00023A  6EAF               	movwf	4015,c	;volatile
 16060                           
 16061                           ;user.c: 55: RCSTA = 0;
 16062  00023C  0E00               	movlw	0
 16063  00023E  6EAB               	movwf	4011,c	;volatile
 16064                           
 16065                           ;user.c: 56: RCSTAbits.SPEN = 1;
 16066  000240  8EAB               	bsf	4011,7,c	;volatile
 16067                           
 16068                           ;user.c: 57: RCSTAbits.CREN = 1;
 16069  000242  88AB               	bsf	4011,4,c	;volatile
 16070                           
 16071                           ;user.c: 59: TRISCbits.RC5 = 0;
 16072  000244  9A94               	bcf	3988,5,c	;volatile
 16073                           
 16074                           ;user.c: 60: LATCbits.LATC5 = 0;
 16075  000246  9A8B               	bcf	3979,5,c	;volatile
 16076  000248  0012               	return		;funcret
 16077  00024A  FFFF               	dw	65535	; errata NOP
 16078  00024C                     __end_of_PortBegin:
 16079                           	opt stack 0
 16080                           tblptru	equ	0xFF8
 16081                           tblptrh	equ	0xFF7
 16082                           tblptrl	equ	0xFF6
 16083                           tablat	equ	0xFF5
 16084                           prodh	equ	0xFF4
 16085                           prodl	equ	0xFF3
 16086                           intcon	equ	0xFF2
 16087                           intcon2	equ	0xFF1
 16088                           postinc0	equ	0xFEE
 16089                           wreg	equ	0xFE8
 16090                           indf1	equ	0xFE7
 16091                           postinc1	equ	0xFE6
 16092                           postdec1	equ	0xFE5
 16093                           fsr1h	equ	0xFE2
 16094                           fsr1l	equ	0xFE1
 16095                           indf2	equ	0xFDF
 16096                           postinc2	equ	0xFDE
 16097                           postdec2	equ	0xFDD
 16098                           plusw2	equ	0xFDB
 16099                           fsr2h	equ	0xFDA
 16100                           fsr2l	equ	0xFD9
 16101                           status	equ	0xFD8
 16102                           
 16103 ;; *************** function _InitUartBuffer *****************
 16104 ;; Defined at:
 16105 ;;		line 44 in file "interrupts.c"
 16106 ;; Parameters:    Size  Location     Type
 16107 ;;		None
 16108 ;; Auto vars:     Size  Location     Type
 16109 ;;		None
 16110 ;; Return value:  Size  Location     Type
 16111 ;;                  1    wreg      void 
 16112 ;; Registers used:
 16113 ;;		wreg, status,2
 16114 ;; Tracked objects:
 16115 ;;		On entry : 0/0
 16116 ;;		On exit  : 0/0
 16117 ;;		Unchanged: 0/0
 16118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16119 ;;      Params:         0       0       0       0       0       0       0
 16120 ;;      Locals:         0       0       0       0       0       0       0
 16121 ;;      Temps:          0       0       0       0       0       0       0
 16122 ;;      Totals:         0       0       0       0       0       0       0
 16123 ;;Total ram usage:        0 bytes
 16124 ;; Hardware stack levels used:    1
 16125 ;; Hardware stack levels required when called:    2
 16126 ;; This function calls:
 16127 ;;		Nothing
 16128 ;; This function is called by:
 16129 ;;		_PortClearReadBuffer
 16130 ;;		_InitApp
 16131 ;; This function uses a non-reentrant model
 16132 ;;
 16133                           
 16134                           	psect	text79
 16135  0002BE                     __ptext79:
 16136                           	opt stack 0
 16137  0002BE                     _InitUartBuffer:
 16138                           	opt stack 26
 16139                           
 16140                           ;incstack = 0
 16141  0002BE  FFFF               	dw	65535
 16142                           
 16143                           ;interrupts.c: 46: UartBufferHead = 0;
 16144  0002C0  0E00               	movlw	0
 16145  0002C2  6E42               	movwf	_UartBufferHead,c	;volatile
 16146                           
 16147                           ;interrupts.c: 47: UartBufferTail = 0;
 16148  0002C4  0E00               	movlw	0
 16149  0002C6  6E44               	movwf	_UartBufferTail,c	;volatile
 16150                           
 16151                           ;interrupts.c: 48: UartBufferLen = 0;
 16152  0002C8  0E00               	movlw	0
 16153  0002CA  6E43               	movwf	_UartBufferLen,c	;volatile
 16154  0002CC  0012               	return		;funcret
 16155  0002CE  FFFF               	dw	65535	; errata NOP
 16156  0002D0                     __end_of_InitUartBuffer:
 16157                           	opt stack 0
 16158                           tblptru	equ	0xFF8
 16159                           tblptrh	equ	0xFF7
 16160                           tblptrl	equ	0xFF6
 16161                           tablat	equ	0xFF5
 16162                           prodh	equ	0xFF4
 16163                           prodl	equ	0xFF3
 16164                           intcon	equ	0xFF2
 16165                           intcon2	equ	0xFF1
 16166                           postinc0	equ	0xFEE
 16167                           wreg	equ	0xFE8
 16168                           indf1	equ	0xFE7
 16169                           postinc1	equ	0xFE6
 16170                           postdec1	equ	0xFE5
 16171                           fsr1h	equ	0xFE2
 16172                           fsr1l	equ	0xFE1
 16173                           indf2	equ	0xFDF
 16174                           postinc2	equ	0xFDE
 16175                           postdec2	equ	0xFDD
 16176                           plusw2	equ	0xFDB
 16177                           fsr2h	equ	0xFDA
 16178                           fsr2l	equ	0xFD9
 16179                           status	equ	0xFD8
 16180                           
 16181 ;; *************** function _ConfigureOscillator *****************
 16182 ;; Defined at:
 16183 ;;		line 86 in file "system.c"
 16184 ;; Parameters:    Size  Location     Type
 16185 ;;		None
 16186 ;; Auto vars:     Size  Location     Type
 16187 ;;		None
 16188 ;; Return value:  Size  Location     Type
 16189 ;;                  1    wreg      void 
 16190 ;; Registers used:
 16191 ;;		None
 16192 ;; Tracked objects:
 16193 ;;		On entry : 0/0
 16194 ;;		On exit  : 0/0
 16195 ;;		Unchanged: 0/0
 16196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16197 ;;      Params:         0       0       0       0       0       0       0
 16198 ;;      Locals:         0       0       0       0       0       0       0
 16199 ;;      Temps:          0       0       0       0       0       0       0
 16200 ;;      Totals:         0       0       0       0       0       0       0
 16201 ;;Total ram usage:        0 bytes
 16202 ;; Hardware stack levels used:    1
 16203 ;; Hardware stack levels required when called:    2
 16204 ;; This function calls:
 16205 ;;		Nothing
 16206 ;; This function is called by:
 16207 ;;		_main
 16208 ;; This function uses a non-reentrant model
 16209 ;;
 16210                           
 16211                           	psect	text80
 16212  000356                     __ptext80:
 16213                           	opt stack 0
 16214  000356                     _ConfigureOscillator:
 16215                           	opt stack 28
 16216                           
 16217                           ;incstack = 0
 16218  000356  FFFF               	dw	65535
 16219  000358  0012               	return		;funcret
 16220  00035A  FFFF               	dw	65535	; errata NOP
 16221  00035C                     __end_of_ConfigureOscillator:
 16222                           	opt stack 0
 16223                           tblptru	equ	0xFF8
 16224                           tblptrh	equ	0xFF7
 16225                           tblptrl	equ	0xFF6
 16226                           tablat	equ	0xFF5
 16227                           prodh	equ	0xFF4
 16228                           prodl	equ	0xFF3
 16229                           intcon	equ	0xFF2
 16230                           intcon2	equ	0xFF1
 16231                           postinc0	equ	0xFEE
 16232                           wreg	equ	0xFE8
 16233                           indf1	equ	0xFE7
 16234                           postinc1	equ	0xFE6
 16235                           postdec1	equ	0xFE5
 16236                           fsr1h	equ	0xFE2
 16237                           fsr1l	equ	0xFE1
 16238                           indf2	equ	0xFDF
 16239                           postinc2	equ	0xFDE
 16240                           postdec2	equ	0xFDD
 16241                           plusw2	equ	0xFDB
 16242                           fsr2h	equ	0xFDA
 16243                           fsr2l	equ	0xFD9
 16244                           status	equ	0xFD8
 16245                           
 16246 ;; *************** function _AddSecond *****************
 16247 ;; Defined at:
 16248 ;;		line 183 in file "user.c"
 16249 ;; Parameters:    Size  Location     Type
 16250 ;;		None
 16251 ;; Auto vars:     Size  Location     Type
 16252 ;;		None
 16253 ;; Return value:  Size  Location     Type
 16254 ;;                  1    wreg      void 
 16255 ;; Registers used:
 16256 ;;		wreg, status,2, status,0
 16257 ;; Tracked objects:
 16258 ;;		On entry : 0/0
 16259 ;;		On exit  : 0/0
 16260 ;;		Unchanged: 0/0
 16261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16262 ;;      Params:         0       0       0       0       0       0       0
 16263 ;;      Locals:         0       0       0       0       0       0       0
 16264 ;;      Temps:          0       0       0       0       0       0       0
 16265 ;;      Totals:         0       0       0       0       0       0       0
 16266 ;;Total ram usage:        0 bytes
 16267 ;; Hardware stack levels used:    1
 16268 ;; Hardware stack levels required when called:    2
 16269 ;; This function calls:
 16270 ;;		Nothing
 16271 ;; This function is called by:
 16272 ;;		_main
 16273 ;; This function uses a non-reentrant model
 16274 ;;
 16275                           
 16276                           	psect	text81
 16277  0002AA                     __ptext81:
 16278                           	opt stack 0
 16279  0002AA                     _AddSecond:
 16280                           	opt stack 28
 16281                           
 16282                           ;incstack = 0
 16283  0002AA  FFFF               	dw	65535
 16284                           
 16285                           ;user.c: 185: currentTime++;
 16286  0002AC  0E01               	movlw	1
 16287  0002AE  0101               	movlb	1	; () banked
 16288  0002B0  27F2               	addwf	_currentTime& (0+255),f,b
 16289  0002B2  0E00               	movlw	0
 16290  0002B4  23F3               	addwfc	(_currentTime+1)& (0+255),f,b
 16291  0002B6  23F4               	addwfc	(_currentTime+2)& (0+255),f,b
 16292  0002B8  23F5               	addwfc	(_currentTime+3)& (0+255),f,b
 16293                           
 16294                           ; BSR set to: 1
 16295  0002BA  0012               	return		;funcret
 16296  0002BC  FFFF               	dw	65535	; errata NOP
 16297  0002BE                     __end_of_AddSecond:
 16298                           	opt stack 0
 16299                           tblptru	equ	0xFF8
 16300                           tblptrh	equ	0xFF7
 16301                           tblptrl	equ	0xFF6
 16302                           tablat	equ	0xFF5
 16303                           prodh	equ	0xFF4
 16304                           prodl	equ	0xFF3
 16305                           intcon	equ	0xFF2
 16306                           intcon2	equ	0xFF1
 16307                           postinc0	equ	0xFEE
 16308                           wreg	equ	0xFE8
 16309                           indf1	equ	0xFE7
 16310                           postinc1	equ	0xFE6
 16311                           postdec1	equ	0xFE5
 16312                           fsr1h	equ	0xFE2
 16313                           fsr1l	equ	0xFE1
 16314                           indf2	equ	0xFDF
 16315                           postinc2	equ	0xFDE
 16316                           postdec2	equ	0xFDD
 16317                           plusw2	equ	0xFDB
 16318                           fsr2h	equ	0xFDA
 16319                           fsr2l	equ	0xFD9
 16320                           status	equ	0xFD8
 16321                           
 16322 ;; *************** function _low_isr *****************
 16323 ;; Defined at:
 16324 ;;		line 183 in file "interrupts.c"
 16325 ;; Parameters:    Size  Location     Type
 16326 ;;		None
 16327 ;; Auto vars:     Size  Location     Type
 16328 ;;  c               1   31[COMRAM] unsigned char 
 16329 ;; Return value:  Size  Location     Type
 16330 ;;                  1    wreg      void 
 16331 ;; Registers used:
 16332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16333 ;; Tracked objects:
 16334 ;;		On entry : 0/0
 16335 ;;		On exit  : 0/0
 16336 ;;		Unchanged: 0/0
 16337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16338 ;;      Params:         0       0       0       0       0       0       0
 16339 ;;      Locals:         1       0       0       0       0       0       0
 16340 ;;      Temps:         17       0       0       0       0       0       0
 16341 ;;      Totals:        18       0       0       0       0       0       0
 16342 ;;Total ram usage:       18 bytes
 16343 ;; Hardware stack levels used:    1
 16344 ;; Hardware stack levels required when called:    1
 16345 ;; This function calls:
 16346 ;;		Nothing
 16347 ;; This function is called by:
 16348 ;;		Interrupt level 1
 16349 ;; This function uses a non-reentrant model
 16350 ;;
 16351                           
 16352                           	psect	intcodelo
 16353  000018                     __pintcodelo:
 16354                           	opt stack 0
 16355  000018                     _low_isr:
 16356                           	opt stack 0
 16357  000018  FFFF               	dw	65535	; assembler added errata NOP
 16358                           
 16359                           ; BSR set to: 1
 16360                           ;incstack = 0
 16361  00001A  805F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 16362  00001C  FFFF               	dw	65535	; errata NOP
 16363  00001E  CFD8 F00F          	movff	status,??_low_isr
 16364  000022  CFE8 F010          	movff	wreg,??_low_isr+1
 16365  000026  CFE0 F011          	movff	bsr,??_low_isr+2
 16366  00002A  CFFA F012          	movff	pclath,??_low_isr+3
 16367  00002E  CFFB F013          	movff	pclatu,??_low_isr+4
 16368  000032  CFE9 F014          	movff	fsr0l,??_low_isr+5
 16369  000036  CFEA F015          	movff	fsr0h,??_low_isr+6
 16370  00003A  CFE1 F016          	movff	fsr1l,??_low_isr+7
 16371  00003E  CFE2 F017          	movff	fsr1h,??_low_isr+8
 16372  000042  CFD9 F018          	movff	fsr2l,??_low_isr+9
 16373  000046  CFDA F019          	movff	fsr2h,??_low_isr+10
 16374  00004A  CFF3 F01A          	movff	prodl,??_low_isr+11
 16375  00004E  CFF4 F01B          	movff	prodh,??_low_isr+12
 16376  000052  CFF6 F01C          	movff	tblptrl,??_low_isr+13
 16377  000056  CFF7 F01D          	movff	tblptrh,??_low_isr+14
 16378  00005A  CFF8 F01E          	movff	tblptru,??_low_isr+15
 16379  00005E  CFF5 F01F          	movff	tablat,??_low_isr+16
 16380                           
 16381                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 16382  000062  AA9E               	btfss	3998,5,c	;volatile
 16383  000064  D021               	goto	i1l97
 16384  000066  BA9D               	btfsc	3997,5,c	;volatile
 16385  000068  D005               	goto	i1l98
 16386  00006A  D01E               	goto	i1l97
 16387  00006C                     i1l94:
 16388  00006C  FFFF               	dw	65535	; assembler added errata NOP
 16389  00006E  AA9E               	btfss	3998,5,c	;volatile
 16390  000070  D7FD               	goto	i1l94
 16391  000072  D018               	goto	i1l6297
 16392  000074                     i1l98:
 16393  000074  FFFF               	dw	65535	; assembler added errata NOP
 16394  000076  AA9E               	btfss	3998,5,c	;volatile
 16395  000078  D7FD               	goto	i1l98
 16396                           
 16397                           ;interrupts.c: 211: uint8_t c = RCREG;
 16398  00007A  CFAE F020          	movff	4014,low_isr@c	;volatile
 16399                           
 16400                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 16401  00007E  5042               	movf	_UartBufferHead,w,c	;volatile
 16402  000080  0D01               	mullw	1
 16403  000082  0E00               	movlw	low _UartRingBuffer
 16404  000084  24F3               	addwf	prodl,w,c
 16405  000086  6ED9               	movwf	fsr2l,c
 16406  000088  0E02               	movlw	high _UartRingBuffer
 16407  00008A  20F4               	addwfc	prodh,w,c
 16408  00008C  6EDA               	movwf	fsr2h,c
 16409  00008E  C020  FFDF         	movff	low_isr@c,indf2
 16410                           
 16411                           ;interrupts.c: 215: UartBufferLen++;
 16412  000092  2A43               	incf	_UartBufferLen,f,c	;volatile
 16413                           
 16414                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 16415  000094  2842               	incf	_UartBufferHead,w,c	;volatile
 16416  000096  A4D8               	btfss	status,2,c
 16417  000098  D003               	goto	i1l6295
 16418                           
 16419                           ;interrupts.c: 217: UartBufferHead = 0;
 16420  00009A  0E00               	movlw	0
 16421  00009C  6E42               	movwf	_UartBufferHead,c	;volatile
 16422  00009E  D002               	goto	i1l6297
 16423  0000A0                     i1l6295:
 16424  0000A0  FFFF               	dw	65535	; assembler added errata NOP
 16425                           
 16426                           ;interrupts.c: 218: else
 16427                           ;interrupts.c: 219: UartBufferHead++;
 16428  0000A2  2A42               	incf	_UartBufferHead,f,c	;volatile
 16429  0000A4                     i1l6297:
 16430  0000A4  FFFF               	dw	65535	; assembler added errata NOP
 16431                           
 16432                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 16433  0000A6  9A9E               	bcf	3998,5,c	;volatile
 16434  0000A8                     i1l97:
 16435  0000A8  FFFF               	dw	65535	; assembler added errata NOP
 16436  0000AA  C01F  FFF5         	movff	??_low_isr+16,tablat
 16437  0000AE  C01E  FFF8         	movff	??_low_isr+15,tblptru
 16438  0000B2  C01D  FFF7         	movff	??_low_isr+14,tblptrh
 16439  0000B6  C01C  FFF6         	movff	??_low_isr+13,tblptrl
 16440  0000BA  C01B  FFF4         	movff	??_low_isr+12,prodh
 16441  0000BE  C01A  FFF3         	movff	??_low_isr+11,prodl
 16442  0000C2  C019  FFDA         	movff	??_low_isr+10,fsr2h
 16443  0000C6  C018  FFD9         	movff	??_low_isr+9,fsr2l
 16444  0000CA  C017  FFE2         	movff	??_low_isr+8,fsr1h
 16445  0000CE  C016  FFE1         	movff	??_low_isr+7,fsr1l
 16446  0000D2  C015  FFEA         	movff	??_low_isr+6,fsr0h
 16447  0000D6  C014  FFE9         	movff	??_low_isr+5,fsr0l
 16448  0000DA  C013  FFFB         	movff	??_low_isr+4,pclatu
 16449  0000DE  C012  FFFA         	movff	??_low_isr+3,pclath
 16450  0000E2  C011  FFE0         	movff	??_low_isr+2,bsr
 16451  0000E6  C010  FFE8         	movff	??_low_isr+1,wreg
 16452  0000EA  C00F  FFD8         	movff	??_low_isr,status
 16453  0000EE  905F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 16454  0000F0  0010               	retfie	
 16455  0000F2  FFFF               	dw	65535	; errata NOP
 16456  0000F4                     __end_of_low_isr:
 16457                           	opt stack 0
 16458                           pclatu	equ	0xFFB
 16459                           pclath	equ	0xFFA
 16460                           tblptru	equ	0xFF8
 16461                           tblptrh	equ	0xFF7
 16462                           tblptrl	equ	0xFF6
 16463                           tablat	equ	0xFF5
 16464                           prodh	equ	0xFF4
 16465                           prodl	equ	0xFF3
 16466                           intcon	equ	0xFF2
 16467                           intcon2	equ	0xFF1
 16468                           postinc0	equ	0xFEE
 16469                           fsr0h	equ	0xFEA
 16470                           fsr0l	equ	0xFE9
 16471                           wreg	equ	0xFE8
 16472                           indf1	equ	0xFE7
 16473                           postinc1	equ	0xFE6
 16474                           postdec1	equ	0xFE5
 16475                           fsr1h	equ	0xFE2
 16476                           fsr1l	equ	0xFE1
 16477                           bsr	equ	0xFE0
 16478                           indf2	equ	0xFDF
 16479                           postinc2	equ	0xFDE
 16480                           postdec2	equ	0xFDD
 16481                           plusw2	equ	0xFDB
 16482                           fsr2h	equ	0xFDA
 16483                           fsr2l	equ	0xFD9
 16484                           status	equ	0xFD8
 16485                           
 16486 ;; *************** function _high_isr *****************
 16487 ;; Defined at:
 16488 ;;		line 122 in file "interrupts.c"
 16489 ;; Parameters:    Size  Location     Type
 16490 ;;		None
 16491 ;; Auto vars:     Size  Location     Type
 16492 ;;		None
 16493 ;; Return value:  Size  Location     Type
 16494 ;;                  1    wreg      void 
 16495 ;; Registers used:
 16496 ;;		wreg, status,2, status,0
 16497 ;; Tracked objects:
 16498 ;;		On entry : 0/0
 16499 ;;		On exit  : 0/0
 16500 ;;		Unchanged: 0/0
 16501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16502 ;;      Params:         0       0       0       0       0       0       0
 16503 ;;      Locals:         0       0       0       0       0       0       0
 16504 ;;      Temps:         14       0       0       0       0       0       0
 16505 ;;      Totals:        14       0       0       0       0       0       0
 16506 ;;Total ram usage:       14 bytes
 16507 ;; Hardware stack levels used:    1
 16508 ;; This function calls:
 16509 ;;		Nothing
 16510 ;; This function is called by:
 16511 ;;		Interrupt level 2
 16512 ;; This function uses a non-reentrant model
 16513 ;;
 16514                           
 16515                           	psect	intcode
 16516  000008                     __pintcode:
 16517                           	opt stack 0
 16518  000008                     _high_isr:
 16519                           	opt stack 0
 16520  000008  FFFF               	dw	65535	; assembler added errata NOP
 16521                           
 16522                           ;incstack = 0
 16523  00000A  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16524  00000C  FFFF               	dw	65535	; errata NOP
 16525  00000E  CFFA F001          	movff	pclath,??_high_isr
 16526  000012  CFFB F002          	movff	pclatu,??_high_isr+1
 16527  000016  EF18  F016         	goto	int_func
 16528                           pclatu	equ	0xFFB
 16529                           pclath	equ	0xFFA
 16530                           tblptru	equ	0xFF8
 16531                           tblptrh	equ	0xFF7
 16532                           tblptrl	equ	0xFF6
 16533                           tablat	equ	0xFF5
 16534                           prodh	equ	0xFF4
 16535                           prodl	equ	0xFF3
 16536                           intcon	equ	0xFF2
 16537                           intcon2	equ	0xFF1
 16538                           postinc0	equ	0xFEE
 16539                           fsr0h	equ	0xFEA
 16540                           fsr0l	equ	0xFE9
 16541                           wreg	equ	0xFE8
 16542                           indf1	equ	0xFE7
 16543                           postinc1	equ	0xFE6
 16544                           postdec1	equ	0xFE5
 16545                           fsr1h	equ	0xFE2
 16546                           fsr1l	equ	0xFE1
 16547                           bsr	equ	0xFE0
 16548                           indf2	equ	0xFDF
 16549                           postinc2	equ	0xFDE
 16550                           postdec2	equ	0xFDD
 16551                           plusw2	equ	0xFDB
 16552                           fsr2h	equ	0xFDA
 16553                           fsr2l	equ	0xFD9
 16554                           status	equ	0xFD8
 16555                           
 16556                           	psect	intcode_body
 16557  002C30                     __pintcode_body:
 16558                           	opt stack 23
 16559  002C30                     int_func:
 16560                           	opt stack 23
 16561  002C30  FFFF               	dw	65535	; errata NOP
 16562  002C32  CFE9 F003          	movff	fsr0l,??_high_isr+2
 16563  002C36  CFEA F004          	movff	fsr0h,??_high_isr+3
 16564  002C3A  CFE1 F005          	movff	fsr1l,??_high_isr+4
 16565  002C3E  CFE2 F006          	movff	fsr1h,??_high_isr+5
 16566  002C42  CFD9 F007          	movff	fsr2l,??_high_isr+6
 16567  002C46  CFDA F008          	movff	fsr2h,??_high_isr+7
 16568  002C4A  CFF3 F009          	movff	prodl,??_high_isr+8
 16569  002C4E  CFF4 F00A          	movff	prodh,??_high_isr+9
 16570  002C52  CFF6 F00B          	movff	tblptrl,??_high_isr+10
 16571  002C56  CFF7 F00C          	movff	tblptrh,??_high_isr+11
 16572  002C5A  CFF8 F00D          	movff	tblptru,??_high_isr+12
 16573  002C5E  CFF5 F00E          	movff	tablat,??_high_isr+13
 16574                           
 16575                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 16576  002C62  B09E               	btfsc	3998,0,c	;volatile
 16577  002C64  A09D               	btfss	3997,0,c	;volatile
 16578  002C66  D00D               	goto	i2l84
 16579                           
 16580                           ;interrupts.c: 144: {
 16581                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 16582  002C68  909E               	bcf	3998,0,c	;volatile
 16583                           
 16584                           ;interrupts.c: 146: millisecondsFromStart++;
 16585  002C6A  0E01               	movlw	1
 16586  002C6C  0100               	movlb	0	; () banked
 16587  002C6E  27DC               	addwf	_millisecondsFromStart& (0+255),f,b	;volatile
 16588  002C70  0E00               	movlw	0
 16589  002C72  23DD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 16590  002C74  23DE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 16591  002C76  23DF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 16595  002C78  0EF6               	movlw	246
 16596  002C7A  6ECF               	movwf	4047,c	;volatile
 16597                           
 16598                           ; BSR set to: 0
 16599  002C7C  0E3C               	movlw	60
 16600  002C7E  6ECE               	movwf	4046,c	;volatile
 16601                           
 16602                           ; BSR set to: 0
 16603                           ;interrupts.c: 148: return;
 16604  002C80  D026               	goto	i2l85
 16605  002C82                     i2l84:
 16606  002C82  FFFF               	dw	65535	; assembler added errata NOP
 16607                           
 16608                           ;interrupts.c: 149: }
 16609                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 16610  002C84  A4F2               	btfss	intcon,2,c	;volatile
 16611  002C86  D023               	goto	i2l85
 16612                           
 16613                           ;interrupts.c: 152: {
 16614                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 16615  002C88  94F2               	bcf	intcon,2,c	;volatile
 16616                           
 16617                           ;interrupts.c: 154: _6sCounter++;
 16618  002C8A  2A45               	incf	__6sCounter,f,c	;volatile
 16619                           
 16620                           ;interrupts.c: 155: if(_6sCounter == 10)
 16621  002C8C  0E0A               	movlw	10
 16622  002C8E  1845               	xorwf	__6sCounter,w,c	;volatile
 16623  002C90  A4D8               	btfss	status,2,c
 16624  002C92  D018               	goto	i2l87
 16625                           
 16626                           ;interrupts.c: 156: {
 16627                           ;interrupts.c: 157: _6sCounter = 0;
 16628  002C94  0E00               	movlw	0
 16629  002C96  6E45               	movwf	__6sCounter,c	;volatile
 16630                           
 16631                           ;interrupts.c: 158: globalMinutes++;
 16632  002C98  2A58               	incf	_globalMinutes,f,c	;volatile
 16633                           
 16634                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 16635  002C9A  0100               	movlb	0	; () banked
 16636  002C9C  4BE8               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 16637  002C9E  2BE9               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;interrupts.c: 160: if(globalMinutes == 60)
 16641  002CA0  0E3C               	movlw	60
 16642  002CA2  1858               	xorwf	_globalMinutes,w,c	;volatile
 16643  002CA4  A4D8               	btfss	status,2,c
 16644  002CA6  D00E               	goto	i2l87
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;interrupts.c: 161: {
 16648                           ;interrupts.c: 162: globalMinutes = 0;
 16649  002CA8  0E00               	movlw	0
 16650  002CAA  6E58               	movwf	_globalMinutes,c	;volatile
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;interrupts.c: 163: globalHours++;
 16654  002CAC  2A5E               	incf	_globalHours,f,c	;volatile
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;interrupts.c: 164: if(globalHours == 24)
 16658  002CAE  0E18               	movlw	24
 16659  002CB0  185E               	xorwf	_globalHours,w,c	;volatile
 16660  002CB2  A4D8               	btfss	status,2,c
 16661  002CB4  D007               	goto	i2l87
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;interrupts.c: 165: {
 16665                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 16666  002CB6  0E00               	movlw	0
 16667  002CB8  0100               	movlb	0	; () banked
 16668  002CBA  6FE9               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 16669  002CBC  0E00               	movlw	0
 16670  002CBE  6FE8               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 16671                           
 16672                           ;interrupts.c: 167: globalHours = 0;
 16673  002CC0  0E00               	movlw	0
 16674  002CC2  6E5E               	movwf	_globalHours,c	;volatile
 16675  002CC4                     i2l87:
 16676  002CC4  FFFF               	dw	65535	; assembler added errata NOP
 16677                           
 16678                           ;interrupts.c: 168: }
 16679                           ;interrupts.c: 169: }
 16680                           ;interrupts.c: 170: }
 16681                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 16682  002CC6  0E1B               	movlw	27
 16683  002CC8  6ED7               	movwf	4055,c	;volatile
 16684  002CCA  0E28               	movlw	40
 16685  002CCC  6ED6               	movwf	4054,c	;volatile
 16686  002CCE                     i2l85:
 16687  002CCE  FFFF               	dw	65535	; assembler added errata NOP
 16688  002CD0  C00E  FFF5         	movff	??_high_isr+13,tablat
 16689  002CD4  C00D  FFF8         	movff	??_high_isr+12,tblptru
 16690  002CD8  C00C  FFF7         	movff	??_high_isr+11,tblptrh
 16691  002CDC  C00B  FFF6         	movff	??_high_isr+10,tblptrl
 16692  002CE0  C00A  FFF4         	movff	??_high_isr+9,prodh
 16693  002CE4  C009  FFF3         	movff	??_high_isr+8,prodl
 16694  002CE8  C008  FFDA         	movff	??_high_isr+7,fsr2h
 16695  002CEC  C007  FFD9         	movff	??_high_isr+6,fsr2l
 16696  002CF0  C006  FFE2         	movff	??_high_isr+5,fsr1h
 16697  002CF4  C005  FFE1         	movff	??_high_isr+4,fsr1l
 16698  002CF8  C004  FFEA         	movff	??_high_isr+3,fsr0h
 16699  002CFC  C003  FFE9         	movff	??_high_isr+2,fsr0l
 16700  002D00  C002  FFFB         	movff	??_high_isr+1,pclatu
 16701  002D04  C001  FFFA         	movff	??_high_isr,pclath
 16702  002D08  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16703  002D0A  0011               	retfie		f
 16704  002D0C  FFFF               	dw	65535	; errata NOP
 16705  002D0E                     __end_of_high_isr:
 16706                           	opt stack 0
 16707                           pclatu	equ	0xFFB
 16708                           pclath	equ	0xFFA
 16709                           tblptru	equ	0xFF8
 16710                           tblptrh	equ	0xFF7
 16711                           tblptrl	equ	0xFF6
 16712                           tablat	equ	0xFF5
 16713                           prodh	equ	0xFF4
 16714                           prodl	equ	0xFF3
 16715                           intcon	equ	0xFF2
 16716                           intcon2	equ	0xFF1
 16717                           postinc0	equ	0xFEE
 16718                           fsr0h	equ	0xFEA
 16719                           fsr0l	equ	0xFE9
 16720                           wreg	equ	0xFE8
 16721                           indf1	equ	0xFE7
 16722                           postinc1	equ	0xFE6
 16723                           postdec1	equ	0xFE5
 16724                           fsr1h	equ	0xFE2
 16725                           fsr1l	equ	0xFE1
 16726                           bsr	equ	0xFE0
 16727                           indf2	equ	0xFDF
 16728                           postinc2	equ	0xFDE
 16729                           postdec2	equ	0xFDD
 16730                           plusw2	equ	0xFDB
 16731                           fsr2h	equ	0xFDA
 16732                           fsr2l	equ	0xFD9
 16733                           status	equ	0xFD8
 16734                           pclatu	equ	0xFFB
 16735                           pclath	equ	0xFFA
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           intcon2	equ	0xFF1
 16744                           postinc0	equ	0xFEE
 16745                           fsr0h	equ	0xFEA
 16746                           fsr0l	equ	0xFE9
 16747                           wreg	equ	0xFE8
 16748                           indf1	equ	0xFE7
 16749                           postinc1	equ	0xFE6
 16750                           postdec1	equ	0xFE5
 16751                           fsr1h	equ	0xFE2
 16752                           fsr1l	equ	0xFE1
 16753                           bsr	equ	0xFE0
 16754                           indf2	equ	0xFDF
 16755                           postinc2	equ	0xFDE
 16756                           postdec2	equ	0xFDD
 16757                           plusw2	equ	0xFDB
 16758                           fsr2h	equ	0xFDA
 16759                           fsr2l	equ	0xFD9
 16760                           status	equ	0xFD8
 16761                           
 16762                           	psect	rparam
 16763  0000                     pclatu	equ	0xFFB
 16764                           pclath	equ	0xFFA
 16765                           tblptru	equ	0xFF8
 16766                           tblptrh	equ	0xFF7
 16767                           tblptrl	equ	0xFF6
 16768                           tablat	equ	0xFF5
 16769                           prodh	equ	0xFF4
 16770                           prodl	equ	0xFF3
 16771                           intcon	equ	0xFF2
 16772                           intcon2	equ	0xFF1
 16773                           postinc0	equ	0xFEE
 16774                           fsr0h	equ	0xFEA
 16775                           fsr0l	equ	0xFE9
 16776                           wreg	equ	0xFE8
 16777                           indf1	equ	0xFE7
 16778                           postinc1	equ	0xFE6
 16779                           postdec1	equ	0xFE5
 16780                           fsr1h	equ	0xFE2
 16781                           fsr1l	equ	0xFE1
 16782                           bsr	equ	0xFE0
 16783                           indf2	equ	0xFDF
 16784                           postinc2	equ	0xFDE
 16785                           postdec2	equ	0xFDD
 16786                           plusw2	equ	0xFDB
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791                           	psect	temp
 16792  00005F                     btemp:
 16793                           	opt stack 0
 16794  00005F                     	ds	1
 16795  0000                     int$flags	set	btemp
 16796                           pclatu	equ	0xFFB
 16797                           pclath	equ	0xFFA
 16798                           tblptru	equ	0xFF8
 16799                           tblptrh	equ	0xFF7
 16800                           tblptrl	equ	0xFF6
 16801                           tablat	equ	0xFF5
 16802                           prodh	equ	0xFF4
 16803                           prodl	equ	0xFF3
 16804                           intcon	equ	0xFF2
 16805                           intcon2	equ	0xFF1
 16806                           postinc0	equ	0xFEE
 16807                           fsr0h	equ	0xFEA
 16808                           fsr0l	equ	0xFE9
 16809                           wreg	equ	0xFE8
 16810                           indf1	equ	0xFE7
 16811                           postinc1	equ	0xFE6
 16812                           postdec1	equ	0xFE5
 16813                           fsr1h	equ	0xFE2
 16814                           fsr1l	equ	0xFE1
 16815                           bsr	equ	0xFE0
 16816                           indf2	equ	0xFDF
 16817                           postinc2	equ	0xFDE
 16818                           postdec2	equ	0xFDD
 16819                           plusw2	equ	0xFDB
 16820                           fsr2h	equ	0xFDA
 16821                           fsr2l	equ	0xFD9
 16822                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    16
    Data        1
    BSS         598
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     56      94
    BANK0           128     66     125
    BANK1           256      0     246
    BANK2           256      0     256
    BANK3           256     35      35
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(2) Largest target is 18
		 -> ModbusProcess_FC100@newTime(BANK0[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(2) Largest target is 1
		 -> io_poll@lastCommand(BANK0[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(2) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(2) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(2) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    SetTime@newTime	PTR long  size(2) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(BANK0[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(2) Largest target is 1
		 -> _lastFunction(COMRAM[1]), 

    io_poll@lastFunction	PTR unsigned char  size(2) Largest target is 1
		 -> _lastFunction(COMRAM[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandId(COMRAM[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(COMRAM[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(COMRAM[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(2) Largest target is 1
		 -> ModbusUserCommandData(COMRAM[1]), 

    sp__GetTime	PTR long  size(2) Largest target is 4
		 -> currentTime(BANK1[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(2) Largest target is 4
		 -> main@curMs(BANK3[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(2) Largest target is 2
		 -> main@totalMinutes(BANK3[2]), ProcessDiary@totalMinutes(BANK0[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(2) Largest target is 1
		 -> main@minute(BANK3[1]), 

    getHourMin@hour	PTR unsigned char  size(2) Largest target is 1
		 -> main@hour(BANK3[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _ProcessUserCommands->_PlaySound
    _InitFromEeprom->_ShowFailure
    _ShowFailure->_LightLed
    _ShowFailure->_LightStatusLed
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _CommandSetLed->_PlaySound
    _SwitchOffAllDiaryLeds->_LightLed
    _ResetEventFromCommand->_LightLed
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusProcess_FC21
    _ModbusValidateRequest->_CheckFunc20
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC20->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_SetHourMin
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    ___lwdiv->___wmul
    _isleap->___lwmod
    _SetHourMin->___lmul
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ModbusPoll
    _io_poll->_ProcessUserCommands
    _ProcessUserCommands->_CommandSetLed
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   78862
                                              0 BANK3     35    35      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
              _ResetEventFromCommand
                  _SoundPlayNextStep
                        _StopPlaying
              _SwitchOffAllDiaryLeds
                         _getHourMin
                    _getTotalMinutes
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             12    12      0   23134
                                             11 BANK0     11    11      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  2     2      0   14670
                                             10 BANK0      1     1      0
                      _CommandSetLed
                _CommandSetStatusLed
                     _InitFromEeprom
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _InitFromEeprom                                       3     3      0    5356
                                             41 COMRAM     3     3      0
                      _LoadNextEvent
                             _Modbus
                        _ShowFailure
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (4) _SwitchOffAllLeds                                     1     1      0     130
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ShowFailure                                          1     1      0    4179
                                             40 COMRAM     1     1      0
                           _LightLed
                     _LightStatusLed
 ---------------------------------------------------------------------------------
 (4) _Modbus                                               3     2      1     522
                                             37 COMRAM     3     2      1
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (5) _ModbusInit                                           5     3      2     315
                                             32 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  4     4      0    2957
                                              0 BANK0      4     4      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (5) _LightStatusLed                                       8     6      2    1234
                                             32 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetLed                                       10    10      0    4891
                                              0 BANK0     10    10      0
                            _GetTime
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
  _ModbusGetUserCommandAdditional2Hi
  _ModbusGetUserCommandAdditional2Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Lo                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Hi                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 6     0      6     417
                                             32 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           4     0      4     216
                                             32 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SwitchOffAllDiaryLeds                                1     1      0    3013
                                             40 COMRAM     1     1      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ResetEventFromCommand                                3     3      0    2982
                                             40 COMRAM     3     3      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2982
                                             40 COMRAM     5     5      0
            _GetCurrentEventDiodeNum
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                   10     8      2     170
                                             33 COMRAM    10     8      2
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4538
                                              0 BANK0      6     6      0
            _GetCurrentEventDiodeNum
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     834
                                             48 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    8     8      0     275
                                             40 COMRAM     8     8      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     460
                                             34 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (5) _getTotalMinutes                                      2     0      2     262
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _LightLed                                             8     6      2    2914
                                             32 COMRAM     8     6      2
            _GetCurrentEventDiodeNum (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentEventDiodeNum                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          13     3     10   33226
                                             53 BANK0     13     3     10
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC20
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               31    31      0    1834
                                              0 BANK0     31    31      0
                        _CheckFunc20
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (3) _CheckFunc20                                         20    20      0     554
                                             32 COMRAM    20    20      0
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1106
                                             47 COMRAM     5     2      3
                                              0 BANK0      5     5      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   11     9      2    1091
                                             47 COMRAM     7     5      2
                                              0 BANK0      4     4      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3458
                                             47 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   7     4      3    2351
                                             32 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1483
                                             47 COMRAM     7     4      3
                                              0 BANK0      5     5      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1085
                                             47 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC20                                  20    20      0    1954
                                             47 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  17    14      3    1425
                                             47 COMRAM     3     0      3
                                              0 BANK0     14    14      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  20    18      2    1400
                                             47 COMRAM     7     5      2
                                              0 BANK0     13    13      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     822
                                             47 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0   10594
                                             30 BANK0     23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              14    10      4    6092
                                             16 BANK0     14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    4605
                                              0 BANK0     16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       10     6      4    1964
                                             45 COMRAM    10     6      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       2     0      2    1197
                                             45 COMRAM     2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     386
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                             38 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _isleap                                               5     3      2     747
                                             37 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                             32 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          12     6      6    2660
                                             44 COMRAM    12     6      6
                            ___awdiv
                            ___awmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    1020
                                             32 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     587
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     599
                                             32 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     632
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1505
                                             47 COMRAM     5     3      2
                                              0 BANK0     12    12      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     788
                                             45 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                             32 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                             32 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     405
                                             32 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                             33 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                             33 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                             32 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             18    18      0      23
                                             14 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _ShowFailure
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _LightStatusLed
     _SwitchOffAllLeds
   _LightStatusLed
   _LoadNextEvent
     _getTotalMinutes
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___awdiv
         ___awmod
         ___lmul
       _SetTime
       _mktime
         ___lmul
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
               ___wmul (ARG)
             ___wmul
           _years_to_days
             ___lmul
             ___lwdiv
               ___wmul (ARG)
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC20
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusSetExceptionStatusBit
     _ModbusValidateRequest
       _CheckFunc20
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetCurrentEventDiodeNum
     _GetTime
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _GetCurrentEventDiodeNum
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _ResetEventFromCommand
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _SwitchOffAllDiaryLeds
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
   _getHourMin
   _getTotalMinutes
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _ShowFailure
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _LightStatusLed
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetLed
         _GetTime
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandAdditional2Hi
         _ModbusGetUserCommandAdditional2Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _InitFromEeprom
         _LoadNextEvent
           _getTotalMinutes
         _Modbus
           _ModbusInit
         _ShowFailure
           _LightLed
             _GetCurrentEventDiodeNum (ARG)
           _LightStatusLed
         _SwitchOffAllLeds
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     23      23      11       13.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F6       7       96.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     38      5E       1       74.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F4      15        0.0%
DATA                 0      0     2F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jul 02 15:13:04 2016

                                             LoadNextEvent@totalMinutes 0025  
                                                         _years_to_days 34FC  
                                    ModbusProcess_FC15@u8CopyBufferSize 0082  
                                                        _ResetEvent$914 002C  
                                           __end_of_CommandSetStatusLed 34FC  
                                            ModbusProcess_FC20@reqCount 008D  
                                            ModbusProcess_FC16@u8regsno 008C  
                                                                    l63 3EE6  
                                                                    l66 3EEC  
                                                                    l74 3E38  
                                                                    l78 3E5E  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                          ___awdiv@sign 0026  
                                                   months_to_days@month 002E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                                   ___wmul@multiplicand 0023  
                                         ModbusProcess_FC5@u8currentBit 0083  
                                        ModbusProcess_FC15@u16StartCoil 0085  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                  CheckFunc20@resultLen 002E  
                                                                   l112 015A  
                                                                   l113 0172  
                                                   ModbusPoll@inputRegs 00B9  
                                                                   l109 0148  
                                                                   l321 32CA  
                                                                   l250 3CF0  
                                                                   l251 3CFC  
                                                                   l252 3D08  
                                                                   l253 3D30  
                                                                   l510 306C  
                                                                   l272 0C74  
                                                                   l264 0EC0  
                                                                   l424 2576  
                                                                   l248 3CE4  
                                                                   l408 3AB2  
                                                                   l416 3CD8  
                                                                   l258 3EA8  
                                                                   l506 3384  
                                                                   l450 0F32  
                                                                   l443 3206  
                                                                   l291 3FFA  
                                                                   l438 24F0  
                                                                   l391 2C2A  
                                                                   l295 2A48  
                                                                   l480 21CC  
                                                                   l394 2C08  
                                                                   l475 2264  
                                                                   l485 34F6  
                                                                   l493 32DA  
                                                                   l398 2B44  
                                                                   l841 3B72  
                                                                   l833 3DD0  
                                                                   l907 09F0  
                                                                   l499 3306  
                                                                   l873 0AB2  
                                                                   l793 1A94  
                                                                   l859 1EE2  
                                                                   l789 3E1E  
                                                                   l886 0AAA  
                                                                   l985 1C36  
                                                                   _GIE 007F97  
                                                                   l996 30D2  
                                                                   _BOR 007E80  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 3EAE  
                                                                   _POR 007E81  
                                      ModbusValidateRequest@recLenBytes 0090  
                                                 ModbusPoll@holdingRegs 00BC  
                                                          __CFG_BORV$42 000000  
                                                          ___awmod@sign 0026  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 3880  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 002A  
                                      ModbusValidateRequest@isSupported 0096  
                                            CommandSetStatusLed@soundId 0081  
                                                         _LoadNextEvent 23FA  
                                                         _globalMinutes 0058  
                                                     main@buttonPressed 030C  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1003 3130  
                                                                  l1033 2838  
                                                                  l1017 20B6  
                                                                  l1043 2870  
                                                                  l1035 283E  
                                                                  l1037 2844  
                                                                  l1502 15D4  
                                                                  l1456 3B0A  
                                                                  l1466 3D78  
                                                                  l7101 2174  
                                                                  l7121 2236  
                                                                  l7041 323A  
                                                                  l8005 2882  
                                                                  l7221 1ED6  
                                                                  l7109 2194  
                                                                  l7133 347E  
                                                                  l8031 292A  
                                                                  l6511 0ACA  
                                                                  l7143 34B0  
                                                                  l7063 3272  
                                                                  l7047 324A  
                                                                  l7311 3324  
                                                                  l7217 1ED0  
                                                                  l8201 1492  
                                                                  l8121 135E  
                                                                  l8113 1340  
                                                                  l7081 32A0  
                                                                  l7057 3260  
                                                                  l7313 3354  
                                                                  l6451 3BA0  
                                                                  l7243 38F2  
                                                                  l7411 0720  
                                                                  l8107 1318  
                                                                  l7331 3C78  
                                                                  l7323 3C48  
                                                                  l7075 3294  
                                                                  l6461 3AD0  
                                                                  l8029 2914  
                                                                  l7237 38B8  
                                                                  l7181 1D22  
                                                                  l6541 0DFC  
                                                                  l6533 0D4A  
                                                                  l6525 0C3C  
                                                                  l6517 0AE6  
                                                                  l8221 14DE  
                                                                  l7309 331C  
                                                                  l7317 335C  
                                                                  l7351 3D90  
                                                                  l6447 3B8A  
                                                                  l6463 3ADA  
                                                                  l7183 1D32  
                                                                  l7431 0772  
                                                                  l7423 075E  
                                                                  l7415 072C  
                                                                  l6543 0E34  
                                                                  l6535 0D66  
                                                                  l6527 0C90  
                                                                  l6519 0BA0  
                                                                  l6551 0EA4  
                                                                  l8215 14C6  
                                                                  l8207 14A6  
                                                                  l8143 13B2  
                                                                  l8135 1392  
                                                                  l8127 1372  
                                                                  l8119 1352  
                                                                  l7327 3C62  
                                                                  l6703 0110  
                                                                  l7361 3DAA  
                                                                  l6481 3D46  
                                                                  l6473 3AFE  
                                                                  l6465 3AE0  
                                                                  l7249 15E2  
                                                                  l7177 1D1C  
                                                                  l7433 078A  
                                                                  l7409 0712  
                                                                  l6713 2414  
                                                                  l6617 2C12  
                                                                  l7273 3D14  
                                                                  l8217 14D2  
                                                                  l8209 14B2  
                                                                  l8145 13BE  
                                                                  l8137 139E  
                                                                  l8129 137E  
                                                                  l6561 2974  
                                                                  l7281 32D4  
                                                                  l7355 3D9A  
                                                                  l6483 3D50  
                                                                  l6651 3A4A  
                                                                  l7259 1800  
                                                                  l7507 0912  
                                                                  l7419 0756  
                                                                  l6547 0E6C  
                                                                  l8251 1550  
                                                                  l8243 1530  
                                                                  l8235 1510  
                                                                  l8227 14F0  
                                                                  l8171 141C  
                                                                  l8163 13FC  
                                                                  l8155 13DC  
                                                                  l8091 3FE6  
                                                                  l6563 2996  
                                                                  l6635 3F0E  
                                                                  l7605 2366  
                                                                  l6485 3D56  
                                                                  l7461 083A  
                                                                  l8501 19A0  
                                                                  l6741 24BC  
                                                                  l6717 2422  
                                                                  l6805 2B34  
                                                                  l8325 31B4  
                                                                  l8317 3186  
                                                                  l8253 155C  
                                                                  l8245 153C  
                                                                  l8237 151C  
                                                                  l8229 14FC  
                                                                  l8181 1448  
                                                                  l8173 1428  
                                                                  l8165 1408  
                                                                  l8157 13E8  
                                                                  l8149 13CA  
                                                                  l8261 1584  
                                                                  l6573 2A14  
                                                                  l6557 294C  
                                                                  l6637 3F18  
                                                                  l7375 3B24  
                                                                  l7383 3B4C  
                                                                  l7615 23B0  
                                                                  l7607 239A  
                                                                  l7551 0A2C  
                                                                  l7543 0A12  
                                                                  l7527 09DE  
                                                                  l7455 0824  
                                                                  l6743 24C8  
                                                                  l6751 24FA  
                                                                  l6719 2426  
                                                                  l8191 1466  
                                                                  l8271 3A6E  
                                                                  l6567 29BE  
                                                                  l7369 3DCC  
                                                                  l6841 36EE  
                                                                  l7617 23B8  
                                                                  l6913 36D2  
                                                                  l6905 36B6  
                                                                  l6489 3D6C  
                                                                  l6649 3A44  
                                                                  l7529 09EA  
                                                                  l7465 083C  
                                                                  l7449 07FA  
                                                                  l8521 19F0  
                                                                  l8513 19CC  
                                                                  l8505 19B0  
                                                                  l6745 24D4  
                                                                  l6753 2538  
                                                                  l6737 24A4  
                                                                  l6729 2462  
                                                                  l6585 2B8E  
                                                                  l8193 1472  
                                                                  l8185 1454  
                                                                  l6569 29E0  
                                                                  l7395 3B6E  
                                                                  l6675 3E54  
                                                                  l6835 3DFE  
                                                                  l7715 25CA  
                                                                  l7643 2D4A  
                                                                  l7547 0A26  
                                                                  l7475 0866  
                                                                  l7467 0852  
                                                                  l7459 0826  
                                                                  l7563 0A50  
                                                                  l8451 18C0  
                                                                  l8427 186C  
                                                                  l6747 24E0  
                                                                  l6739 24B0  
                                                                  l8179 143C  
                                                                  l8259 1568  
                                                                  l6683 3E7A  
                                                                  l8365 35FE  
                                                                  l6861 3742  
                                                                  l6845 3712  
                                                                  l6909 36C2  
                                                                  l6941 3856  
                                                                  l6933 3830  
                                                                  l6925 3812  
                                                                  l7725 2654  
                                                                  l7821 1B2A  
                                                                  l7901 311C  
                                                                  l7557 0A4A  
                                                                  l8541 1A18  
                                                                  l8533 1A08  
                                                                  l8525 19F8  
                                                                  l8517 19DC  
                                                                  l8509 19C4  
                                                                  l6781 2A8C  
                                                                  l8293 3CA0  
                                                                  l8621 0F82  
                                                                  l8375 3626  
                                                                  l6863 3746  
                                                                  l6935 383A  
                                                                  l7735 26A4  
                                                                  l7727 268C  
                                                                  l7815 1AAE  
                                                                  l7671 342A  
                                                                  l7487 08B4  
                                                                  l8551 1A28  
                                                                  l8471 18FE  
                                                                  l8455 18C6  
                                                                  l8447 18AE  
                                                                  l6783 2ACC  
                                                                  l8199 1486  
                                                                  l6679 3E70  
                                                                  l8369 3608  
                                                                  l6857 373C  
                                                                  l6849 371C  
                                                                  l6881 365E  
                                                                  l6937 3840  
                                                                  l6945 3862  
                                                                  l6929 3820  
                                                                  l6961 2E40  
                                                                  l7737 26AC  
                                                                  l7825 1B5E  
                                                                  l7649 2DAE  
                                                                  l7921 1F4A  
                                                                  l7913 1F04  
                                                                  l8553 1A8E  
                                                                  l8545 1A20  
                                                                  l8537 1A10  
                                                                  l8529 1A00  
                                                                  l6793 2AF2  
                                                                  l6777 2A74  
                                                                  l7851 1CD6  
                                                                  l7931 1FA2  
                                                                  l7499 08F8  
                                                                  l8643 1076  
                                                                  l8627 0FB0  
                                                                  l7597 22F8  
                                                                  l7589 22DC  
                                                                  l6893 3688  
                                                                  l6949 3872  
                                                                  l6965 2E82  
                                                                  l7773 2816  
                                                                  l7765 272A  
                                                                  l7837 1BF0  
                                                                  l7853 1CDC  
                                                                  l7941 1FE4  
                                                                  l7933 1FAC  
                                                                  l7669 33F2  
                                                                  l8493 1978  
                                                                  l8485 1950  
                                                                  l8477 190A  
                                                                  l8645 107E  
                                                                  l6991 3EDA  
                                                                  l6895 3692  
                                                                  l6887 3670  
                                                                  l7839 1BFA  
                                                                  l8575 3034  
                                                                  l8663 1176  
                                                                  l8639 1066  
                                                                  l8647 1086  
                                                                  l6993 3EDE  
                                                                  l6897 3698  
                                                                  l7769 27D6  
                                                                  l7953 2038  
                                                                  l7945 2000  
                                                                  l7937 1FC8  
                                                                  l8497 198C  
                                                                  l8489 1968  
                                                                  l8585 304C  
                                                                  l8657 113C  
                                                                  l7963 2070  
                                                                  l8691 1236  
                                                                  l7957 2054  
                                                                  l7949 201C  
                                                                  l8685 1216  
                                                                  l7967 20A0  
                                                                  l8689 1224  
                                                                  _CFGS 007D36  
                                                                  STR_1 0649  
                                                                  STR_3 0640  
                                                                  STR_5 064F  
                                                                  STR_7 0625  
                                                                  STR_9 0611  
                                                     _UpdateLedRegister 3CDE  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u6134 3DF2  
                                                                  u6310 2E22  
                                                                  u6135 3DEC  
                                                                  u6055 2490  
                                                                  u6144 3E12  
                                                                  u6145 3E0C  
                                                   ?_CopyStringToBuffer 0021  
                                                                  u5604 0C54  
                                                                  u5524 0AFE  
                                                                  _RCIF 007CF5  
                                                                  u5605 0C4E  
                                                                  u5525 0AF8  
                                                                  u7054 232E  
                                                                  u5614 0C88  
                                                                  u5534 0B30  
                                                                  u8007 3E2A  
                                                                  u7055 2326  
                                                                  u5615 0C82  
                                                                  u5535 0B2A  
                                                                  u7144 33DA  
                                                                  u5624 0CA8  
                                                                  u5544 0B66  
                                                                  u7145 33D2  
                                                                  u5625 0CA2  
                                                                  u5545 0B60  
                                                                  u6425 2164  
                                                                  u7074 234A  
                                                                  u6610 15B2  
                                                                  u7154 340C  
                                                                  u5714 0DE0  
                                                                  u5634 0CDA  
                                                                  u5554 0B98  
                                                                  u7410 12FA  
                                                                  u7075 2344  
                                                                  u7155 3404  
                                                                  u5715 0DDA  
                                                                  u5635 0CD4  
                                                                  u5555 0B92  
                                                                  u7084 237A  
                                                                  u6620 15D4  
                                                                  u7164 260C  
                                                                  u5724 0E14  
                                                                  u5644 0D0A  
                                                                  u5564 0BB8  
                                                                  u7085 2374  
                                                                  u7165 2606  
                                                                  u5725 0E0E  
                                                                  u5645 0D04  
                                                                  u5565 0BB2  
                                                                  i1l94 006C  
                                                                  u5574 0BE4  
                                                                  u7430 133A  
                                                                  u5814 29B0  
                                                                  u5575 0BDE  
                                                                  u5815 29AA  
                                                                  u7184 263C  
                                                                  u5744 0E4E  
                                                                  u5664 0D42  
                                                                  u5824 29D2  
                                                                  i1l97 00A8  
                                                                  u7185 2634  
                                                                  u5745 0E48  
                                                                  u5665 0D3C  
                                                                  u5825 29CC  
                                                                  i1l98 0074  
                                                                  u7194 266E  
                                                                  u5754 0E80  
                                                                  u5674 0D5E  
                                                                  u5594 0C20  
                                                                  u7195 2666  
                                                                  u5755 0E7A  
                                                                  u5675 0D58  
                                                                  u5595 0C1A  
                                                                  i2l84 2C82  
                                                                  u5684 0D7E  
                                                                  u5844 2A00  
                                                                  i2l85 2CCE  
                                                                  u5685 0D78  
                                                                  u5845 29F8  
                                                                  u6485 348C  
                                                                  u5694 0DAA  
                                                                  u5854 2A2E  
                                                                  i2l87 2CC4  
                                                                  u5695 0DA4  
                                                                  u5855 2A26  
                                                                  u6760 0708  
                                                                  u5784 2966  
                                                                  u5785 2960  
                                                                  u5794 2988  
                                                                  u5795 2982  
                                                                  u6860 083A  
                                                                  u5885 2BA4  
                                                                  u7920 10F6  
                                                                  u7980 11B4  
                                                ??_ModbusGetLastCommand 0027  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0098  
                                  __size_of_ModbusSetExceptionStatusBit 004E  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 0EC6  
                                                                  fsr0h 000FEA  
                                                                  fsr1h 000FE2  
                                                                  fsr0l 000FE9  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 005F  
                                                                  pclat 000FFA  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 00F4  
                                                       __end_of_GetTime 0332  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0021  
                                                        ?_years_to_days 002E  
                                                       __end_of_InitApp 3648  
                                                          _soundTestEnd 0120  
                                                            __6sCounter 0045  
                                                           _CheckFunc20 1D0A  
                                                  ??_CopyStringToBuffer 0024  
                                                       __end_of_SetTime 022E  
                                      __size_of_GetCurrentEventDiodeNum 000E  
                                           getTotalMinutes@totalMinutes 0021  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00DA  
                                                       __end_of___awdiv 36E0  
                                                                 _EEADR 000FA9  
                                                                 STR_11 0654  
                                                                 STR_21 0625  
                                                                 STR_13 0635  
                                                                 STR_15 0649  
                                                                 STR_23 0611  
                                                                 STR_17 0640  
                                                                 STR_25 0654  
                                                                 STR_19 064F  
                                                                 STR_27 0635  
                                                       __end_of___awmod 3880  
                                                                 _CARRY 007EC0  
                                                                 _EEPGD 007D37  
                                                       ___awdiv@divisor 0023  
                                                         SetHourMin@sec 0031  
                                                       __end_of___lwdiv 3B18  
                                                       __end_of___lwmod 3D86  
                                            __end_of_ModbusSendTxBuffer 3984  
                                                       ___awdiv@counter 0025  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                            _IsBusserOn 00EE  
                                                   _ModbusProcess_FC100 282C  
                                                   _ModbusProcess_FC101 3F6A  
                                                   _ModbusProcess_FC102 024C  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 0356  
                                           ModbusProcess_FC3@u8StartAdd 0083  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                   ___lmul@multiplicand 0025  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 320C  
                                                        ?_LoadNextEvent 0001  
                                                                 __u8id 00F0  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                        __size_of_ResetEventFromCommand 0058  
                                             __end_of_UpdateLedRegister 3D36  
                                            ModbusBuildException@u8func 0022  
                                                        __CFG_EBTRB$OFF 000000  
                                         __end_of_ResetEventFromCommand 3CDE  
                                                       __end_of_io_poll 3072  
                                                       __end_of_low_isr 00F4  
                                                    __size_of_AddSecond 0014  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0084  
                                                        _UartBufferHead 0042  
                                                        _UartBufferTail 0044  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0089  
                                                                 status 000FD8  
                                                       years_to_days@yr 002E  
                                            __size_of_ProcessLightBlock 030A  
                                                  ?_ModbusProcess_FC100 0001  
                                                  ?_ModbusProcess_FC101 0001  
                                                  ?_ModbusProcess_FC102 0001  
                                                  ?_ConfigureOscillator 0001  
                                                       _ModbusInit$1885 0024  
                                          __end_of_ModbusBuildException 0210  
                                                       __initialization 3BD6  
                                                          __end_of_main 1284  
                                                  __eeFirstSoundAddress 0047  
                                     __size_of_ModbusGetUserCommandData 000E  
                                   ModbusProcess_FC100@u8CopyBufferSize 00A2  
                                                      __end_of_LightLed 0EC6  
                                             ?_ModbusGetUserCommandData 0021  
                                     ModbusProcess_FC5@u8CopyBufferSize 0080  
                                              ??_ModbusGetUserCommandId 0023  
                                            ModbusProcess_FC1@u16Coilno 008A  
                                                                ??_main 0300  
                                                       ResetEvent@state 002B  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 32D0  
                                                            _ModbusInit 3EF2  
                                                            _ModbusPoll 1816  
                                                      __end_of_PortRead 3EF2  
                                                 _ModbusUserCommandData 005B  
                                                            __u16OutCnt 0126  
                                                        _InitUartBuffer 02BE  
                                                   _ProcessUserCommands 32D0  
                                                __size_of_ModbusCalcCRC 0094  
                                    ModbusProcess_FC16@u8CopyBufferSize 0089  
                                              ModbusSendTxBuffer@u16crc 002E  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                      ___awdiv@dividend 0021  
                                                            _SetHourMin 2EC4  
                                                            __u16errCnt 0128  
                                                        _LightStatusLed 2940  
                                                                i1l6295 00A0  
                                                                i1l6297 00A4  
                                                     ??_getTotalMinutes 0023  
                                                         _ymd_to_scalar 2DEA  
                                                             ??_GetTime 0023  
                                                     LightStatusLed@row 0028  
                                                            _ResetEvent 3A56  
                                                         main@oldMinute 0316  
                                                 CommandSetLed@ledColor 0086  
                                      ModbusProcess_FC15@u16currentCoil 008A  
                                                 ??_ModbusProcess_FC100 0039  
                                         ModbusProcess_FC100@newRawTime 009E  
                                                 ??_ModbusProcess_FC101 0030  
                                                 ??_ModbusProcess_FC102 0030  
                                                             ??_InitApp 0021  
                                                 ??_ConfigureOscillator 0021  
                                                       _currentLedBlock 0055  
                                                       ??_years_to_days 0032  
                                                                _Modbus 00F8  
                                                             ??_SetTime 0023  
                                                      __end_of_high_isr 2D0E  
                                             __playingSoundStartPosInEe 0050  
                                                         ??_ShowFailure 0029  
                                                  ?_ProcessUserCommands 0001  
                                                                ___lmul 3B78  
                                                        _UartRingBuffer 0200  
                                                SwitchOffAllDiaryLeds@i 0029  
                                                                ___wmul 0178  
                                                             ??___awdiv 0025  
                                                             ??___awmod 0025  
                                                          __lastAddress 00E2  
                                              ModbusProcess_FC20@offset 008E  
                                            ModbusProcess_FC3@u16regsno 0081  
                                                    __size_of_PlaySound 00FC  
                                              ModbusProcess_FC16@u8size 0032  
                                                             ??___lwdiv 002B  
                                                             ??___lwmod 0025  
                                                                _isleap 39F2  
                                                                _millis 01A2  
                                                                clear_0 3BDE  
                                                                clear_1 3BF0  
                                                                clear_2 3BFC  
                                                                clear_3 3C08  
                                                     __end_of_AddSecond 02BE  
                                                      ___awdiv@quotient 0027  
                                                                _mktime 158E  
                                                       ___awmod@divisor 0023  
                                                          __lastCommand 004C  
                                            ResetEventFromCommand@state 0029  
                                                       ___awmod@counter 0025  
                                                 __end_of_PortAvailable 0356  
                                                            __au8Buffer 012A  
                                                    __size_of_PortBegin 001E  
                                                             ??_io_poll 008B  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0023  
                                                          __pdataCOMRAM 005E  
                                                __end_of_InitUartBuffer 02D0  
                                                          __MODBUSCoils 00F7  
                                                            PortWrite@i 0024  
                                                   _PortClearReadBuffer 0340  
                                                    __size_of_PortWrite 0046  
                                                          __mediumconst 0000  
                                                 _SwitchOffAllDiaryLeds 3FD2  
                                                    __playingSoundSteps 0051  
                                       ModbusBuildException@u8exception 0021  
                                                             ??_low_isr 000F  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                        _ModbusUserCommandAdditional1Hi 0059  
                                        _ModbusUserCommandAdditional2Hi 00F9  
                                        _ModbusUserCommandAdditional3Hi 00FB  
                                            __size_of_UpdateLedRegister 0058  
                                        _ModbusUserCommandAdditional1Lo 005A  
                                                      __end_of_pwm_init 0294  
                                        _ModbusUserCommandAdditional2Lo 00FA  
                                        _ModbusUserCommandAdditional3Lo 00FC  
                                                __end_of_LightStatusLed 2A4E  
                                            ModbusProcess_FC1@u8bytesno 0084  
                                                      years_to_days@ret 0034  
                                              ModbusProcess_FC1@u16coil 0080  
                                                        ?_ymd_to_scalar 0080  
                                                            __u8lastRec 00F2  
                                                            __accesstop 0080  
                                               __end_of__initialization 3C20  
                                                        _statusLedState 00F6  
                                                         __deviceStatus 0046  
                                            __end_of_ModbusProcess_FC20 1D0A  
                                            __end_of_ModbusProcess_FC21 3144  
                                            __end_of_ModbusProcess_FC15 26DA  
                                            __end_of_ModbusProcess_FC16 282C  
                                            __end_of_ModbusProcess_FC17 37FC  
                                            __end_of_ModbusProcess_FC43 20C6  
                                                       Modbus@u8txenpin 0026  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 0081  
                                        __size_of_ModbusValidateRequest 045E  
                                                 ??_ProcessUserCommands 008A  
                                     ModbusProcess_FC21@startAddrsBytes 0034  
                                         __end_of_ModbusValidateRequest 0AB8  
                                   ModbusValidateRequest@startAddrBytes 008C  
                                                            __u8txenpin 00F5  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 36E0  
                                               _GetCurrentEventDiodeNum 0332  
                                                  __end_of_fctsupported 0611  
                                         ModbusProcess_FC16@u16StartAdd 008A  
                                               SetHourMin@secToNext6Sec 0038  
                                       __size_of_ModbusGetUserCommandId 000E  
                                                   __end_of_ShowFailure 01F0  
                                          ?_ModbusSetExceptionStatusBit 0021  
                                      ModbusProcess_FC20@startAddrBytes 0085  
                                                   _ModbusUserCommandId 005C  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0021  
                                                           ?_ModbusPoll 00B5  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 003A  
                                                  _ModbusBuildException 01F0  
                                                    ??_SwitchOffAllLeds 0021  
                                                 __end_of_CommandSetLed 226A  
                                                         ??_StopPlaying 0021  
                                                            __lastCount 00E4  
                                                       ?_LightStatusLed 0021  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 002D  
                                                     __end_of_PlaySound 2B4A  
                                   ModbusProcess_FC101@u8CopyBufferSize 0030  
                                              ModbusGetRxBufferHeader@i 0023  
                                                            __pbssBANK0 00C2  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 0082  
                                                             ?_LightLed 0021  
                                                     main@debounceDelay 0315  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 024C  
                                                 ??_PortClearReadBuffer 0021  
                                                               ?_Modbus 0026  
                                                 __eeSoundAddressesList 0048  
                                                     __end_of_PortWrite 3E6A  
                                                        ?_ModbusCalcCRC 0021  
                                                       PortWrite@buflen 0023  
                                                             ?_PortRead 0001  
                                                               ?___lmul 0021  
                                    ModbusProcess_FC17@u8CopyBufferSize 0030  
                                                               ?___wmul 0021  
                                                          ?_CheckFunc20 0001  
                                                 _millisecondsFromStart 00DC  
                                                        SetTime@newTime 0021  
                                                            _getHourMin 0124  
                                                               ?_isleap 0026  
                                                        ___lmul@product 0029  
                                                               ?_millis 0021  
                                                     Modbus@tmpModbusId 0028  
                                                               ?_mktime 0090  
                                      ModbusProcess_FC21@requestDataLen 0032  
                                                ?_SwitchOffAllDiaryLeds 0001  
                                                         LightLed@blink 0022  
                                          __size_of_CommandSetStatusLed 00B8  
                                         ??_ModbusSetExceptionStatusBit 0022  
                                                 ?_ModbusBuildException 0001  
                                                           __u32timeOut 0118  
                                                           __u16timeOut 00EA  
                                                       ??_ymd_to_scalar 0086  
                                                       LoadNextEvent@v1 0027  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 011C  
                                        ModbusGetRxBuffer@bBuffOverflow 0023  
                                                            ??_LightLed 0023  
                                                _ModbusGetUserCommandId 02D0  
                                                    _ModbusSendTxBuffer 3902  
                                      __end_of_ModbusGetUserCommandData 02EC  
                                                               _GetTime 0324  
                                         __size_of_ModbusGetLastCommand 0058  
                                                       __inputRegsCount 004B  
                                                   __end_of_StopPlaying 02AA  
                                                               _InitApp 35AE  
                                                   LightLed@statusShift 0028  
                                                               __Hparam 0000  
                                                               _SetTime 0210  
                                                               __Lparam 0000  
                                             ??_GetCurrentEventDiodeNum 0021  
                                                   __size_of_ModbusInit 003E  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0284  
                                                       __size_of_Modbus 002C  
                                                            _eventCount 0057  
                                                   CopyStringToBuffer@i 0027  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0021  
                                                           _ShowFailure 01CC  
                                                               ___awdiv 3648  
                                                       __size_of___lmul 005E  
                                                               ___awmod 37FC  
                                                       __size_of___wmul 002A  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 3AB8  
                                                               ___lwmod 3D36  
                                                       SetBuzzerDuty@dc 0021  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0087  
                                           __size_of_CopyStringToBuffer 0082  
                                                   __size_of_SetHourMin 00DA  
                                                               __pcinit 3BD6  
                                                       __size_of_isleap 0064  
                                                         _SetBuzzerDuty 3FA0  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0054  
                                                       __size_of_mktime 0288  
                                                               __ptext0 0EC6  
                                                               __ptext1 027E  
                                                               __ptext2 2F9E  
                                                               __ptext3 32D0  
                                                               __ptext4 02D0  
                                                               __ptext5 320C  
                                                               __ptext6 3E6A  
                                                               __ptext7 01CC  
                                                               __ptext8 00F8  
                                                               __ptext9 3EF2  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0021  
                                                main@lastButtonPinState 0318  
                                                               _io_poll 2F9E  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 002D  
                                                   __size_of_ResetEvent 0062  
                                       __end_of_ModbusGetRxBufferHeader 3DD6  
                                                       _getTotalMinutes 014E  
                                                      ___awmod@dividend 0021  
                                                         mktime@timeptr 0090  
                                                  ??_ModbusSendTxBuffer 002E  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 00B7  
                                               CopyStringToBuffer@objId 0026  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2C30  
                                                  end_of_initialization 3C20  
                                                         __lastFunction 005D  
                                                 _ResetEventFromCommand 3C86  
                                                         __Lmediumconst 0000  
                                                               int_func 2C30  
                                                   __playingSoundCurPos 004F  
                                             UpdateLedRegister@regIndex 0021  
                                                       ??_ModbusCalcCRC 0023  
                                             __totalMinutesFromDayStart 00E8  
                                                        ??_ProcessDiary 0080  
                                                   LightLed@ststusIndex 0027  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 0082  
                                                   ModbusProcess_FC20@i 008C  
                                                   ModbusProcess_FC21@i 0038  
                                                   ModbusProcess_FC20@r 008F  
                                                   ModbusProcess_FC16@i 008D  
                                                            ??_pwm_init 0021  
                                   ModbusProcess_FC102@u8CopyBufferSize 0030  
                                                     SwitchOffAllLeds@i 0021  
                                                      ??_InitFromEeprom 002A  
                                                           ?_getHourMin 0021  
                                                        ?_SetBuzzerDuty 0021  
                                     InitFromEeprom@eeSoundCountAddress 002C  
                                     ModbusProcess_FC1@u8CopyBufferSize 0083  
                                     ModbusProcess_FC7@u8CopyBufferSize 0030  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0021  
                                                ??_ModbusBuildException 0021  
                                                     ModbusInit@u8serno 0021  
                                                             _AddSecond 02AA  
                                                        _months_to_days 3F30  
                                                       __maxDiaryEvents 004D  
                                                     _ModbusGetRxBuffer 3B18  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0087  
                                                     _SoundPlayNextStep 2B4A  
                                                    ?_ModbusGetRxBuffer 0001  
                                    ModbusProcess_FC20@u8CopyBufferSize 008B  
                                                           _StopPlaying 0294  
                                           __end_of_ModbusProcess_FC100 2940  
                                           __end_of_ModbusProcess_FC101 3FA0  
                                           __end_of_ModbusProcess_FC102 0266  
                                           __end_of_ConfigureOscillator 035C  
                                                    ?_SoundPlayNextStep 0001  
                                                          _fctsupported 0601  
                                                     __eventFromCommand 00D2  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 0084  
                                                   ??_ModbusGetRxBuffer 0022  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 030D  
                                          ModbusValidateRequest@u16regs 009D  
                                                            main@minute 031B  
                                                   ??_SoundPlayNextStep 0029  
                                             ModbusGetLastCommand@count 0023  
                                              _ModbusGetUserCommandData 02DE  
                                                 __end_of_years_to_days 35AE  
                                                 main@buttonPinCurState 031C  
                                                      CommandSetLed@led 0089  
                                                        __end_of_Modbus 0124  
                                                        __end_of___lmul 3BD6  
                                               __end_of_getTotalMinutes 0178  
                                                        __end_of___wmul 01A2  
                                                      ??_InitUartBuffer 0021  
                                                    _ModbusProcess_FC20 1A9A  
                                                    _ModbusProcess_FC21 3072  
                                                    _ModbusProcess_FC15 257C  
                                                    _ModbusProcess_FC16 26DA  
                                                    _ModbusProcess_FC17 3774  
                                                    _ModbusProcess_FC43 1EE8  
                                                         __pidataCOMRAM 035E  
                                                  __size_of_CheckFunc20 01DE  
                                              ModbusPoll@discreteInputs 00B5  
                                                        __end_of_isleap 3A56  
                                                        __end_of_millis 01CC  
                                                __end_of_months_to_days 3F6A  
                                             __end_of_ModbusGetRxBuffer 3B78  
                                                        __end_of_mktime 1816  
                                         ModbusProcess_FC20@recLenBytes 0080  
                                                      ??_LightStatusLed 0023  
                                                       ymd_to_scalar@mo 0082  
                                              CommandSetLed@commandData 0088  
                                                         _UartBufferLen 0043  
                                                       ymd_to_scalar@yr 0080  
                                     ModbusSetExceptionStatusBit@bitNum 0024  
                                                          ??_ModbusInit 0023  
                                                          ??_ModbusPoll 0039  
                                             __end_of_SoundPlayNextStep 2C30  
                                                            ?_AddSecond 0001  
                                                   start_initialization 3BD6  
                                                   ?_ModbusProcess_FC20 0001  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0030  
                                                   ?_ModbusProcess_FC16 0030  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 257C  
                                                ?_ResetEventFromCommand 0001  
                                                          ??_SetHourMin 0033  
                                                             __u16InCnt 0124  
                                                   __size_of_getHourMin 002A  
                                           __end_of_ProcessUserCommands 338A  
                                                          ??_ResetEvent 0029  
                                                             _PlaySound 2A4E  
                                             __size_of_SwitchOffAllLeds 0044  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 040E  
                                                      LightStatusLed@on 0021  
                                             CommandSetLed@blinkSeconds 0087  
                                                   _CommandSetStatusLed 3444  
                                                        getHourMin@hour 0021  
                                                  ??_ModbusProcess_FC20 0030  
                                                  ??_ModbusProcess_FC21 0030  
                                                  ??_ModbusProcess_FC15 0032  
                                                  ??_ModbusProcess_FC16 0080  
                                                  ??_ModbusProcess_FC17 0030  
                                                  ??_ModbusProcess_FC43 0030  
                                                              ??_Modbus 0027  
                                               ModbusProcess_FC15@bTemp 0083  
                                      __size_of_ModbusGetRxBufferHeader 0050  
                                                    __end_of_ModbusInit 3F30  
                                                    __end_of_ModbusPoll 1A9A  
                                                             _PortBegin 022E  
                                                              ??___lmul 0029  
                                                       ??_SetBuzzerDuty 0023  
                                                              ??___wmul 0025  
                                               ModbusProcess_FC43@objId 0032  
                                                 _ModbusValidateRequest 065A  
                                                 CopyStringToBuffer@len 0023  
                                                 CopyStringToBuffer@src 0021  
                                                             _PortWrite 3E24  
                                                     __size_of_PortRead 0044  
                                                              ??_isleap 0028  
                                                              ??_millis 0025  
                                               ??_SwitchOffAllDiaryLeds 0029  
                                                              ??_mktime 0094  
                                                  CommandSetLed@soundId 0085  
                                                    __end_of_SetHourMin 2F9E  
                                                     __holdingRegsCount 004A  
                                                       ?_months_to_days 002E  
                                                        ModbusCalcCRC@i 002A  
                                                        ModbusCalcCRC@j 002B  
                                         ModbusProcess_FC21@recLenBytes 0036  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 0039  
                                                    __end_of_ResetEvent 3AB8  
                                                         __pcstackBANK0 0080  
                                                         __pcstackBANK3 0300  
                                               ModbusProcess_FC6@u16add 0083  
                                               ModbusProcess_FC6@u16val 0080  
                                                  __end_of_ProcessDiary 320C  
                                               ModbusProcess_FC3@u8size 0032  
                                               ?_ModbusGetUserCommandId 0021  
                                           __end_of_PortClearReadBuffer 034E  
                                               ModbusProcess_FC6@u8size 0032  
                                                     __size_of_high_isr 2D06  
                                             CheckFunc20@startAddrBytes 0029  
                                                              ?_GetTime 0021  
                                                            ?_PlaySound 0031  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 0038  
                                                              ?_SetTime 0021  
                                                      ___lwdiv@dividend 0027  
                                           ModbusProcess_FC43@devIdCode 0030  
                                        ModbusProcess_FC15@u8currentBit 0089  
                                        ModbusValidateRequest@u16MsgCRC 0094  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                                          ?_ShowFailure 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0033  
                                    ModbusProcess_FC43@u8CopyBufferSize 0031  
                                                              ?___awdiv 0021  
                                                              ?___awmod 0021  
                                                __size_of_CommandSetLed 01A4  
                                                              ?___lwdiv 0027  
                                                              ?___lwmod 0021  
                                                            ?_PortWrite 0021  
                                                      ?_getTotalMinutes 0021  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 3C86  
                                                     __size_of_pwm_init 0016  
                                                        ModbusInit@u8id 0023  
                                              ModbusPoll@inputRegsCount 00BB  
                                            __size_of_ModbusGetRxBuffer 0060  
                                           ModbusGetLastCommand@address 0021  
                                                         _PortAvailable 034E  
                                                         __playingEndMs 0110  
                                                      __MODBUSInputRegs 01D4  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 0080  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0053  
                                                           ??_AddSecond 0021  
                                            __size_of_SoundPlayNextStep 00E6  
                                           ModbusGetLastCommand@command 0025  
                                                    __MODBUSHoldingRegs 01B6  
                                        __end_of_ModbusGetUserCommandId 02DE  
                                                              ?_low_isr 0001  
                                                   io_poll@lastFunction 0094  
                                                 io_poll@lastEndAddress 008F  
                                                      ___lwdiv@quotient 002C  
                                                      SetHourMin@newMin 002F  
                                             _ResetEventFromCommand$917 002A  
                                                 __end_of_ymd_to_scalar 2EC4  
                                                      SetHourMin@tmpSec 0037  
                                              ProcessDiary@totalMinutes 0084  
                                                ModbusValidateRequest@i 009A  
                                                        ___wmul@product 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 0056  
                                                        LightLed@ledNum 0026  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 00C1  
                                                           __soundCount 0052  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 00C2  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 3902  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0084  
                                                 ModbusCalcCRC@u8length 0025  
                                                          ??_getHourMin 0025  
                                                   LightStatusLed@blink 0022  
                                                  main@lastDebounceTime 0311  
                                                       __isSoundPlaying 00EF  
                                                     CheckFunc20@offset 0034  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 3E24  
                                           _ModbusSetExceptionStatusBit 3DD6  
                                                     ___wmul@multiplier 0021  
                                                __nextEventPlayDuration 00E6  
                                                              InitApp@i 0021  
                                                           _globalHours 005E  
                                                             main@curMs 031F  
                                                       main@buttonState 0319  
                                           __size_of_ModbusSendTxBuffer 0082  
                                                          ?_StopPlaying 0001  
                                                         _CommandSetLed 20C6  
                                                     _ModbusProcess_FC1 226A  
                                                     _ModbusProcess_FC3 2D0E  
                                                     _ModbusProcess_FC5 338A  
                                                     _ModbusProcess_FC6 3984  
                                                     _ModbusProcess_FC7 0266  
                                                     ___lmul@multiplier 0021  
                                                           _INTCON2bits 000FF1  
                                            ??_ModbusGetUserCommandData 0023  
                                        CommandSetStatusLed@commandData 0082  
                                                    ?_ModbusProcess_FC1 0030  
                                                    ?_ModbusProcess_FC3 0030  
                                                    ?_ModbusProcess_FC5 0030  
                                                    ?_ModbusProcess_FC6 0030  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0AB8  
                                              ?_GetCurrentEventDiodeNum 0001  
                                                    __end_of_getHourMin 014E  
                                                           ??_PlaySound 0033  
                                                 ModbusPoll@u8exception 00C0  
                                                      _SwitchOffAllLeds 3E6A  
                                                      __size_of_GetTime 000E  
                                                      __size_of_InitApp 009A  
                                                              __Hrparam 0000  
                                                              __u32time 0114  
                                               _ModbusGetRxBufferHeader 3D86  
                                                         getHourMin@min 0023  
                                                   ??_ModbusProcess_FC1 0032  
                                                   ??_ModbusProcess_FC3 0033  
                                                   ??_ModbusProcess_FC5 0032  
                                                   ??_ModbusProcess_FC6 0033  
                                                   ??_ModbusProcess_FC7 0030  
                                                 __end_of_ModbusCalcCRC 3774  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 0083  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0021  
                                                ModbusProcess_FC15@regs 0030  
                                                              _PortRead 3EAE  
                                                ModbusProcess_FC16@regs 0030  
                                                ModbusProcess_FC16@temp 0087  
                                                           ??_PortWrite 0024  
                                                      __size_of___awdiv 0098  
                                                         Modbus@u8serno 0027  
                                                      __size_of___awmod 0084  
                                                      __size_of___lwdiv 0060  
                                      ModbusProcess_FC20@requestDataLen 008A  
                                                              __u8serno 00F3  
                                                      __size_of___lwmod 0050  
                                     ModbusProcess_FC3@u8CopyBufferSize 0080  
                                                              __u8state 00F4  
                                        ModbusValidateRequest@readDevId 009B  
                                                             millis@ret 0025  
                                         ModbusProcess_FC1@u16StartCoil 0085  
                                                 __size_of_ProcessDiary 00C8  
                                                           _isleap$2311 002A  
                                                           _currentTime 01F2  
                                               ??_ResetEventFromCommand 0029  
                                                      __size_of_io_poll 00D4  
                                                              _diffTime 00D8  
                                            ModbusProcess_FC100@newTime 00A3  
                                             __end_of_ModbusProcess_FC1 23FA  
                                             __end_of_ModbusProcess_FC3 2DEA  
                                             __end_of_ModbusProcess_FC5 3444  
                                             __end_of_ModbusProcess_FC6 39F2  
                                             __end_of_ModbusProcess_FC7 027E  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0029  
                                                    io_poll@lastAddress 0091  
                                                       ___lwdiv@counter 002B  
                                                              _ledBlink 0100  
                                                        ?_CommandSetLed 0001  
                                                      __size_of_low_isr 00DC  
                                                              __ptext10 3444  
                                                              __ptext11 2940  
                                                              __ptext20 3FD2  
                                                              __ptext12 20C6  
                                                              __ptext21 3C86  
                                                              __ptext13 02DE  
                                                              __ptext30 0324  
                                                              __ptext22 3A56  
                                                              __ptext14 02EC  
                                                              __ptext31 23FA  
                                                              __ptext23 1284  
                                                              __ptext15 02FA  
                                                              __ptext40 3984  
                                                              __ptext32 014E  
                                                              __ptext24 3CDE  
                                                              __ptext16 0308  
                                                              __ptext41 338A  
                                                              __ptext33 0AB8  
                                                              __ptext25 3144  
                                                              __ptext17 0316  
                                                              __ptext50 024C  
                                                              __ptext42 1EE8  
                                                              __ptext34 0332  
                                                              __ptext26 2A4E  
                                                              __ptext18 3C2E  
                                                              __ptext51 3F6A  
                                                              __ptext43 3880  
                                                              __ptext35 1816  
                                                              __ptext27 2B4A  
                                                              __ptext19 0124  
                                                              __ptext60 3D36  
                                                              __ptext52 282C  
                                                              __ptext44 2D0E  
                                                              __ptext36 0340  
                                                              __ptext28 0294  
                                                              __ptext61 0210  
                                                              __ptext53 158E  
                                                              __ptext45 3072  
                                                              __ptext37 065A  
                                                              __ptext29 3FA0  
                                                              __ptext70 3E24  
                                                              __ptext62 2EC4  
                                                              __ptext54 2DEA  
                                                              __ptext46 1A9A  
                                                              __ptext38 1D0A  
                                                              __ptext71 36E0  
                                                              __ptext63 3B78  
                                                              __ptext55 34FC  
                                                              __ptext47 3774  
                                                              __ptext39 0266  
                                                              __ptext80 0356  
                                                              __ptext72 3D86  
                                                              __ptext64 37FC  
                                                              __ptext56 3F30  
                                                              __ptext48 26DA  
                                                              __ptext81 02AA  
                                                              __ptext73 3B18  
                                                              __ptext65 3648  
                                                              __ptext57 0178  
                                                              __ptext49 257C  
                                                              __ptext74 3EAE  
                                                              __ptext66 3DD6  
                                                              __ptext58 3AB8  
                                                              __ptext75 034E  
                                                              __ptext67 226A  
                                                              __ptext59 39F2  
                                                              __ptext76 01F0  
                                                              __ptext68 3902  
                                                              __ptext77 35AE  
                                                              __ptext69 01A2  
                                                              __ptext78 022E  
                                                              __ptext79 02BE  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 0093  
                                                         __size_of_main 03BE  
                                                  _ModbusGetLastCommand 3C2E  
                                              ShowFailure@additionalLed 0029  
                                          __size_of_ModbusProcess_FC100 0114  
                                          __size_of_ModbusProcess_FC101 0036  
                                          __size_of_ModbusProcess_FC102 001A  
                                          __size_of_ConfigureOscillator 0006  
                                                           _modbusState 00EC  
                                                          _ProcessDiary 3144  
                                                         ??_CheckFunc20 0021  
                                                              int$flags 005F  
                                                      ??_months_to_days 0030  
                                                              _pwm_init 027E  
                                                       ??_PortAvailable 0021  
                                              ModbusValidateRequest@res 0097  
                                                  __size_of_ShowFailure 0024  
                                                              main@hour 031A  
                                                      __exceptionStatus 0049  
                                                      LightLed@ledState 0021  
                                        __size_of_SwitchOffAllDiaryLeds 002E  
                                         __end_of_SwitchOffAllDiaryLeds 4000  
                                                    _ymd_to_scalar$2324 008A  
                                                            _INTCONbits 000FF2  
                             __end_of_ModbusGetUserCommandAdditional1Hi 0324  
                            __size_of_ModbusGetUserCommandAdditional1Hi 000E  
                                   ??_ModbusGetUserCommandAdditional1Hi 0023  
                                    ?_ModbusGetUserCommandAdditional1Hi 0021  
                                     _ModbusGetUserCommandAdditional1Hi 0316  
                             __end_of_ModbusGetUserCommandAdditional2Hi 0308  
                            __size_of_ModbusGetUserCommandAdditional2Hi 000E  
                                   ??_ModbusGetUserCommandAdditional2Hi 0023  
                                    ?_ModbusGetUserCommandAdditional2Hi 0021  
                                     _ModbusGetUserCommandAdditional2Hi 02FA  
                             __end_of_ModbusGetUserCommandAdditional1Lo 0316  
                            __size_of_ModbusGetUserCommandAdditional1Lo 000E  
                                   ??_ModbusGetUserCommandAdditional1Lo 0023  
                                    ?_ModbusGetUserCommandAdditional1Lo 0021  
                                     _ModbusGetUserCommandAdditional1Lo 0308  
                             __end_of_ModbusGetUserCommandAdditional2Lo 02FA  
                            __size_of_ModbusGetUserCommandAdditional2Lo 000E  
                                   ??_ModbusGetUserCommandAdditional2Lo 0023  
                                    ?_ModbusGetUserCommandAdditional2Lo 0021  
                                     _ModbusGetUserCommandAdditional2Lo 02EC  
                                               __size_of_InitFromEeprom 00C4  
                                                ProcessLightBlock@curMs 0022  
                                             SoundPlayNextStep@duration 0030  
                                       __end_of_GetCurrentEventDiodeNum 0340  
                                                __size_of_years_to_days 00B2  
                                                     __nextEventSoundId 004E  
                                                              isleap@yr 0026  
                                                 ModbusProcess_FC1@regs 0030  
                                                 ModbusProcess_FC3@regs 0030  
                                                              intlevel1 035C  
                                                              intlevel2 035C  
                                                 ModbusProcess_FC5@regs 0030  
                                                 ModbusProcess_FC6@regs 0030  
                                                      PlaySound@soundId 0037  
                                                          PortWrite@buf 0021  
                                                      ___lwmod@dividend 0021  
                                                 ?_ModbusGetLastCommand 0021  
                                                CheckFunc20@recLenBytes 002F  
                                             ??_ModbusGetRxBufferHeader 0022  
                                                              mktime@tt 009A  
                                                      main@totalMinutes 031D  
                                                              low_isr@c 0020  
                                                   ymd_to_scalar@scalar 008C  
                                             SoundPlayNextStep@stepDuty 002E  
                                           __size_of_ModbusProcess_FC20 0270  
                                           __size_of_ModbusProcess_FC21 00D2  
                                           __size_of_ModbusProcess_FC15 015E  
                                           __size_of_ModbusProcess_FC16 0152  
                                           __size_of_ModbusProcess_FC17 0088  
                                           __size_of_ModbusProcess_FC43 01DE  
                                                     _ProcessLightBlock 1284  
                                                 __MODBUSDiscreteInputs 00E0  
                                          __size_of_ProcessUserCommands 00BA  
                                                __size_of_LoadNextEvent 0182  
                                                    ?_ProcessLightBlock 0022  
                                                 __end_of_SetBuzzerDuty 3FD2  
                                                   ModbusPoll@u8current 00BF  
                                                   ??_ProcessLightBlock 0024  
                                                   __end_of_CheckFunc20 1EE8  
                                                       ___lwmod@divisor 0023  
                                                       ??_CommandSetLed 0080  
                                                       ___lwmod@counter 0025  
                                            __size_of_ModbusProcess_FC1 0190  
                                            __size_of_ModbusProcess_FC3 00DC  
                                            __size_of_ModbusProcess_FC5 00BA  
                                            __size_of_ModbusProcess_FC6 006E  
                                            __size_of_ModbusProcess_FC7 0018  
                                                     __currenDiaryEvent 0039  
                                               __size_of_InitUartBuffer 0012  
                                                    ModbusCalcCRC@temp2 0026  
                                                 CheckFunc20@bytesCount 0033  
                                           ModbusValidateRequest@u8regs 009C  
                                             ModbusProcess_FC15@u16coil 0080  
                                               __size_of_LightStatusLed 010E  
                                                 PlaySound@playDuration 0031  
                                                  __size_of_StopPlaying 0016  
                                                   ModbusInit@u8txenpin 0022  
                                                     ModbusCalcCRC@flag 0028  
                                                     ModbusCalcCRC@temp 002C  
                                             __end_of_ProcessLightBlock 158E  
                                               ??_ModbusValidateRequest 0080  
                                            ModbusPoll@holdingRegsCount 00BE  
                                          __size_of_PortClearReadBuffer 000E  
                                                          __u8lastError 00F1  
                                            ModbusProcess_FC15@u8bitsno 008C  
                                                   CheckFunc20@reqCount 002D  
