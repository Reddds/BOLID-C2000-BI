

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sun May 22 15:50:57 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    82                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    86                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           	psect	eeprom_data
    89  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    90  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    91  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    92  0000                     
    93                           	psect	idataCOMRAM
    94  002D84                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _curEventNum
    98  002D84  FF                 	db	255
    99                           
   100                           ;initializer for _currentAlarmedEventNum
   101  002D85  FF                 	db	255
   102                           
   103                           ;initializer for _globalHours
   104  002D86  FF                 	db	255
   105                           
   106                           	psect	smallconst
   107  000600                     __psmallconst:
   108                           	opt stack 0
   109  000600  00                 	db	0
   110  000601                     _fctsupported:
   111                           	opt stack 0
   112  000601  01                 	db	1
   113  000602  02                 	db	2
   114  000603  03                 	db	3
   115  000604  04                 	db	4
   116  000605  05                 	db	5
   117  000606  06                 	db	6
   118  000607  07                 	db	7
   119  000608  0F                 	db	15
   120  000609  10                 	db	16
   121  00060A  11                 	db	17
   122  00060B  15                 	db	21
   123  00060C  2B                 	db	43
   124  00060D                     __end_of_fctsupported:
   125                           	opt stack 0
   126  0000                     _CCP1CONbits	set	4029
   127  0000                     _CCPR1L	set	4030
   128  0000                     _EEADR	set	4009
   129  0000                     _EECON2	set	4007
   130  0000                     _EEDATA	set	4008
   131  0000                     _INTCON2bits	set	4081
   132  0000                     _INTCONbits	set	4082
   133  0000                     _IPR1bits	set	3999
   134  0000                     _LATA	set	3977
   135  0000                     _LATAbits	set	3977
   136  0000                     _LATB	set	3978
   137  0000                     _LATCbits	set	3979
   138  0000                     _PIE1bits	set	3997
   139  0000                     _PIR1bits	set	3998
   140  0000                     _PORTCbits	set	3970
   141  0000                     _PR2	set	4043
   142  0000                     _RCONbits	set	4048
   143  0000                     _RCREG	set	4014
   144  0000                     _RCSTA	set	4011
   145  0000                     _RCSTAbits	set	4011
   146  0000                     _SPBRG	set	4015
   147  0000                     _T0CONbits	set	4053
   148  0000                     _T1CONbits	set	4045
   149  0000                     _T2CONbits	set	4042
   150  0000                     _TMR0H	set	4055
   151  0000                     _TMR0L	set	4054
   152  0000                     _TMR1H	set	4047
   153  0000                     _TMR1L	set	4046
   154  0000                     _TRISAbits	set	3986
   155  0000                     _TRISB	set	3987
   156  0000                     _TRISCbits	set	3988
   157  0000                     _TXREG	set	4013
   158  0000                     _TXSTA	set	4012
   159  0000                     _TXSTAbits	set	4012
   160  0000                     _CARRY	set	32448
   161  0000                     _GIE	set	32663
   162  0000                     _RCIF	set	31989
   163  0000                     _RD	set	32048
   164  0000                     _TRMT	set	32097
   165  0000                     _WR	set	32049
   166  0000                     _WREN	set	32050
   167  00060D                     STR_3:
   168  00060D  54                 	db	84	;'T'
   169  00060E  61                 	db	97	;'a'
   170  00060F  62                 	db	98	;'b'
   171  000610  6C                 	db	108	;'l'
   172  000611  6F                 	db	111	;'o'
   173  000612  20                 	db	32
   174  000613  73                 	db	115	;'s'
   175  000614  20                 	db	32
   176  000615  72                 	db	114	;'r'
   177  000616  61                 	db	97	;'a'
   178  000617  73                 	db	115	;'s'
   179  000618  70                 	db	112	;'p'
   180  000619  69                 	db	105	;'i'
   181  00061A  73                 	db	115	;'s'
   182  00061B  61                 	db	97	;'a'
   183  00061C  6E                 	db	110	;'n'
   184  00061D  69                 	db	105	;'i'
   185  00061E  65                 	db	101	;'e'
   186  00061F  6D                 	db	109	;'m'
   187  000620  20                 	db	32
   188  000621  74                 	db	116	;'t'
   189  000622  75                 	db	117	;'u'
   190  000623  72                 	db	114	;'r'
   191  000624  6F                 	db	111	;'o'
   192  000625  00                 	db	0
   193  000626                     STR_12:
   194  000626  54                 	db	84	;'T'
   195  000627  61                 	db	97	;'a'
   196  000628  62                 	db	98	;'b'
   197  000629  6C                 	db	108	;'l'
   198  00062A  6F                 	db	111	;'o'
   199  00062B  20                 	db	32
   200  00062C  73                 	db	115	;'s'
   201  00062D  20                 	db	32
   202  00062E  72                 	db	114	;'r'
   203  00062F  61                 	db	97	;'a'
   204  000630  73                 	db	115	;'s'
   205  000631  70                 	db	112	;'p'
   206  000632  69                 	db	105	;'i'
   207  000633  73                 	db	115	;'s'
   208  000634  61                 	db	97	;'a'
   209  000635  6E                 	db	110	;'n'
   210  000636  69                 	db	105	;'i'
   211  000637  65                 	db	101	;'e'
   212  000638  6D                 	db	109	;'m'
   213  000639  00                 	db	0
   214  00063A                     STR_10:
   215  00063A  68                 	db	104	;'h'
   216  00063B  74                 	db	116	;'t'
   217  00063C  74                 	db	116	;'t'
   218  00063D  70                 	db	112	;'p'
   219  00063E  3A                 	db	58	;':'
   220  00063F  2F                 	db	47
   221  000640  2F                 	db	47
   222  000641  62                 	db	98	;'b'
   223  000642  6F                 	db	111	;'o'
   224  000643  6C                 	db	108	;'l'
   225  000644  69                 	db	105	;'i'
   226  000645  64                 	db	100	;'d'
   227  000646  2E                 	db	46
   228  000647  72                 	db	114	;'r'
   229  000648  75                 	db	117	;'u'
   230  000649  00                 	db	0
   231  00064A                     STR_16:
   232  00064A  52                 	db	82	;'R'
   233  00064B  61                 	db	97	;'a'
   234  00064C  73                 	db	115	;'s'
   235  00064D  70                 	db	112	;'p'
   236  00064E  69                 	db	105	;'i'
   237  00064F  73                 	db	115	;'s'
   238  000650  61                 	db	97	;'a'
   239  000651  6E                 	db	110	;'n'
   240  000652  69                 	db	105	;'i'
   241  000653  65                 	db	101	;'e'
   242  000654  00                 	db	0
   243  000655                     STR_6:
   244  000655  43                 	db	67	;'C'
   245  000656  32                 	db	50	;'2'
   246  000657  30                 	db	48	;'0'
   247  000658  30                 	db	48	;'0'
   248  000659  30                 	db	48	;'0'
   249  00065A  2D                 	db	45
   250  00065B  42                 	db	66	;'B'
   251  00065C  49                 	db	73	;'I'
   252  00065D  00                 	db	0
   253  00065E                     STR_4:
   254  00065E  42                 	db	66	;'B'
   255  00065F  4F                 	db	79	;'O'
   256  000660  4C                 	db	76	;'L'
   257  000661  49                 	db	73	;'I'
   258  000662  44                 	db	68	;'D'
   259  000663  00                 	db	0
   260  000664                     STR_8:
   261  000664  31                 	db	49	;'1'
   262  000665  2E                 	db	46
   263  000666  30                 	db	48	;'0'
   264  000667  31                 	db	49	;'1'
   265  000668  00                 	db	0
   266  000669                     STR_14:
   267  000669  4D                 	db	77	;'M'
   268  00066A  4D                 	db	77	;'M'
   269  00066B  4D                 	db	77	;'M'
   270  00066C  00                 	db	0
   271  0000                     
   272                           ; #config settings
   273  00066D  00                 	db	0	; dummy byte at the end
   274  0000                     
   275                           	psect	cinit
   276  002618                     __pcinit:
   277                           	opt stack 0
   278  002618                     start_initialization:
   279                           	opt stack 0
   280  002618                     __initialization:
   281                           	opt stack 0
   282                           
   283                           ; Clear objects allocated to BANK2 (256 bytes)
   284  002618  EE02  F000         	lfsr	0,__pbssBANK2
   285  00261C  EE11 F000          	lfsr	1,256
   286  002620                     clear_0:
   287  002620  6AEE               	clrf	postinc0,c
   288  002622  50E5               	movf	postdec1,w,c
   289  002624  50E1               	movf	fsr1l,w,c
   290  002626  E1FC               	bnz	clear_0
   291  002628  50E2               	movf	fsr1h,w,c
   292  00262A  E1FA               	bnz	clear_0
   293                           
   294                           ; Clear objects allocated to BANK1 (200 bytes)
   295  00262C  EE01  F000         	lfsr	0,__pbssBANK1
   296  002630  0EC8               	movlw	200
   297  002632                     clear_1:
   298  002632  6AEE               	clrf	postinc0,c
   299  002634  06E8               	decf	wreg,f,c
   300  002636  E1FD               	bnz	clear_1
   301                           
   302                           ; Clear objects allocated to BANK0 (98 bytes)
   303  002638  EE00  F080         	lfsr	0,__pbssBANK0
   304  00263C  0E62               	movlw	98
   305  00263E                     clear_2:
   306  00263E  6AEE               	clrf	postinc0,c
   307  002640  06E8               	decf	wreg,f,c
   308  002642  E1FD               	bnz	clear_2
   309                           
   310                           ; Clear objects allocated to COMRAM (6 bytes)
   311  002644  6A74               	clrf	(__pbssCOMRAM+5)& (0+255),c
   312  002646  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   313  002648  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   314  00264A  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   315  00264C  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   316  00264E  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   317                           
   318                           ; Initialize objects allocated to COMRAM (3 bytes)
   319                           ; load TBLPTR registers with __pidataCOMRAM
   320  002650  0E84               	movlw	low __pidataCOMRAM
   321  002652  6EF6               	movwf	tblptrl,c
   322  002654  0E2D               	movlw	high __pidataCOMRAM
   323  002656  6EF7               	movwf	tblptrh,c
   324  002658  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   325  00265A  6EF8               	movwf	tblptru,c
   326  00265C  0009               	tblrd		*+	;fetch initializer
   327  00265E  CFF5 F075          	movff	tablat,__pdataCOMRAM
   328  002662  0009               	tblrd		*+	;fetch initializer
   329  002664  CFF5 F076          	movff	tablat,__pdataCOMRAM+1
   330  002668  0009               	tblrd		*+	;fetch initializer
   331  00266A  CFF5 F077          	movff	tablat,__pdataCOMRAM+2
   332  00266E                     end_of_initialization:
   333                           	opt stack 0
   334  00266E                     __end_of__initialization:
   335                           	opt stack 0
   336  00266E  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   337  002670  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   338  002672  0E00               	movlw	low (__Lmediumconst shr (0+16))
   339  002674  6EF8               	movwf	tblptru,c
   340  002676  0100               	movlb	0
   341  002678  EF64  F009         	goto	_main	;jump to C main() function
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1h	equ	0xFE2
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	bssCOMRAM
   353  00006F                     __pbssCOMRAM:
   354                           	opt stack 0
   355  00006F                     _UartBufferHead:
   356                           	opt stack 0
   357  00006F                     	ds	1
   358  000070                     __playingSoundStartPosInEe:
   359                           	opt stack 0
   360  000070                     	ds	1
   361  000071                     __soundCount:
   362                           	opt stack 0
   363  000071                     	ds	1
   364  000072                     __u8BufferSize:
   365                           	opt stack 0
   366  000072                     	ds	1
   367  000073                     _blinkOn:
   368                           	opt stack 0
   369  000073                     	ds	1
   370  000074                     _globalMinutes:
   371                           	opt stack 0
   372  000074                     	ds	1
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1h	equ	0xFE2
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	dataCOMRAM
   384  000075                     __pdataCOMRAM:
   385                           	opt stack 0
   386  000075                     _curEventNum:
   387                           	opt stack 0
   388  000075                     	ds	1
   389  000076                     _currentAlarmedEventNum:
   390                           	opt stack 0
   391  000076                     	ds	1
   392  000077                     _globalHours:
   393                           	opt stack 0
   394  000077                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1h	equ	0xFE2
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssBANK0
   406  000080                     __pbssBANK0:
   407                           	opt stack 0
   408  000080                     _ledBlink:
   409                           	opt stack 0
   410  000080                     	ds	16
   411  000090                     _ledStatuses:
   412                           	opt stack 0
   413  000090                     	ds	16
   414  0000A0                     __playingEndMs:
   415                           	opt stack 0
   416  0000A0                     	ds	4
   417  0000A4                     __u32time:
   418                           	opt stack 0
   419  0000A4                     	ds	4
   420  0000A8                     _diffTime:
   421                           	opt stack 0
   422  0000A8                     	ds	4
   423  0000AC                     _eventResetSecond:
   424                           	opt stack 0
   425  0000AC                     	ds	4
   426  0000B0                     _millisecondsFromStart:
   427                           	opt stack 0
   428  0000B0                     	ds	4
   429  0000B4                     _oldBlinkOnTime:
   430                           	opt stack 0
   431  0000B4                     	ds	4
   432  0000B8                     _soundTestEnd:
   433                           	opt stack 0
   434  0000B8                     	ds	4
   435  0000BC                     __MODBUSDiscreteInputs:
   436                           	opt stack 0
   437  0000BC                     	ds	2
   438  0000BE                     __lastAddress:
   439                           	opt stack 0
   440  0000BE                     	ds	2
   441  0000C0                     __lastCount:
   442                           	opt stack 0
   443  0000C0                     	ds	2
   444  0000C2                     __nextEventPlayDuration:
   445                           	opt stack 0
   446  0000C2                     	ds	2
   447  0000C4                     __totalMinutesFromDayStart:
   448                           	opt stack 0
   449  0000C4                     	ds	2
   450  0000C6                     _blinkDuration:
   451                           	opt stack 0
   452  0000C6                     	ds	2
   453  0000C8                     _blinkPeriod:
   454                           	opt stack 0
   455  0000C8                     	ds	2
   456  0000CA                     _curEventTotalMinutes:
   457                           	opt stack 0
   458  0000CA                     	ds	2
   459  0000CC                     _UartBufferLen:
   460                           	opt stack 0
   461  0000CC                     	ds	1
   462  0000CD                     _UartBufferTail:
   463                           	opt stack 0
   464  0000CD                     	ds	1
   465  0000CE                     __6sCounter:
   466                           	opt stack 0
   467  0000CE                     	ds	1
   468  0000CF                     __exceptionStatus:
   469                           	opt stack 0
   470  0000CF                     	ds	1
   471  0000D0                     __holdingRegsCount:
   472                           	opt stack 0
   473  0000D0                     	ds	1
   474  0000D1                     __inputRegsCount:
   475                           	opt stack 0
   476  0000D1                     	ds	1
   477  0000D2                     __isSoundPlaying:
   478                           	opt stack 0
   479  0000D2                     	ds	1
   480  0000D3                     __nextEventSoundId:
   481                           	opt stack 0
   482  0000D3                     	ds	1
   483  0000D4                     __playingSoundCurPos:
   484                           	opt stack 0
   485  0000D4                     	ds	1
   486  0000D5                     __playingSoundSteps:
   487                           	opt stack 0
   488  0000D5                     	ds	1
   489  0000D6                     __u8id:
   490                           	opt stack 0
   491  0000D6                     	ds	1
   492  0000D7                     __u8lastRec:
   493                           	opt stack 0
   494  0000D7                     	ds	1
   495  0000D8                     _currentLedBlock:
   496                           	opt stack 0
   497  0000D8                     	ds	1
   498  0000D9                     _eventAcceptTime:
   499                           	opt stack 0
   500  0000D9                     	ds	1
   501  0000DA                     _eventCount:
   502                           	opt stack 0
   503  0000DA                     	ds	1
   504  0000DB                     _currentTime:
   505                           	opt stack 0
   506  0000DB                     	ds	4
   507  0000DF                     __MODBUSCoils:
   508                           	opt stack 0
   509  0000DF                     	ds	2
   510  0000E1                     __lastCommand:
   511                           	opt stack 0
   512  0000E1                     	ds	1
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1h	equ	0xFE2
   521                           fsr1l	equ	0xFE1
   522                           
   523                           	psect	bssBANK1
   524  000100                     __pbssBANK1:
   525                           	opt stack 0
   526  000100                     __au8Buffer:
   527                           	opt stack 0
   528  000100                     	ds	140
   529  00018C                     __MODBUSHoldingRegs:
   530                           	opt stack 0
   531  00018C                     	ds	30
   532  0001AA                     __MODBUSInputRegs:
   533                           	opt stack 0
   534  0001AA                     	ds	30
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1h	equ	0xFE2
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	bssBANK2
   546  000200                     __pbssBANK2:
   547                           	opt stack 0
   548  000200                     _UartRingBuffer:
   549                           	opt stack 0
   550  000200                     	ds	256
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1h	equ	0xFE2
   559                           fsr1l	equ	0xFE1
   560                           
   561                           	psect	cstackBANK0
   562  0000E2                     __pcstackBANK0:
   563                           	opt stack 0
   564  0000E2                     io_poll@command:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x0
   568  0000E2                     	ds	1
   569  0000E3                     io_poll@lastEndAddress:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x1
   573  0000E3                     	ds	2
   574  0000E5                     io_poll@v1:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x3
   578  0000E5                     	ds	1
   579  0000E6                     io_poll@lastAddress:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x4
   583  0000E6                     	ds	2
   584  0000E8                     io_poll@lastCommand:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x6
   588  0000E8                     	ds	1
   589  0000E9                     main@lastMs:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x7
   593  0000E9                     	ds	4
   594  0000ED                     main@oldMinute:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xB
   598  0000ED                     	ds	1
   599  0000EE                     main@hour:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xC
   603  0000EE                     	ds	1
   604  0000EF                     main@curMs:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0xD
   608  0000EF                     	ds	4
   609  0000F3                     main@minute:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x11
   613  0000F3                     	ds	1
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1h	equ	0xFE2
   622                           fsr1l	equ	0xFE1
   623                           
   624                           	psect	cstackCOMRAM
   625  000001                     __pcstackCOMRAM:
   626                           	opt stack 0
   627  000001                     ??_low_isr:
   628  000001                     
   629                           ; 1 bytes @ 0x0
   630  000001                     	ds	5
   631  000006                     low_isr@c:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x5
   635  000006                     	ds	1
   636  000007                     ??_StopPlaying:
   637  000007                     ?_ModbusCalcCRC:
   638                           	opt stack 0
   639  000007                     ?___lwdiv:
   640                           	opt stack 0
   641  000007                     ?___lwmod:
   642                           	opt stack 0
   643  000007                     ?_millis:
   644                           	opt stack 0
   645  000007                     PortRead@ret:
   646                           	opt stack 0
   647  000007                     getHourMin@min:
   648                           	opt stack 0
   649  000007                     getTotalMinutes@totalMinutes:
   650                           	opt stack 0
   651  000007                     UpdateLedRegister@regIndex:
   652                           	opt stack 0
   653  000007                     SwitchOffAllLeds@i:
   654                           	opt stack 0
   655  000007                     LightLed@ledState:
   656                           	opt stack 0
   657  000007                     LightStatusLed@on:
   658                           	opt stack 0
   659  000007                     InitApp@i:
   660                           	opt stack 0
   661  000007                     SetTime@newTime:
   662                           	opt stack 0
   663  000007                     ModbusSetExceptionStatusBit@value:
   664                           	opt stack 0
   665  000007                     ModbusInit@u8serno:
   666                           	opt stack 0
   667  000007                     ModbusBuildException@u8exception:
   668                           	opt stack 0
   669  000007                     ModbusGetLastCommand@count:
   670                           	opt stack 0
   671  000007                     CopyStringToBuffer@src:
   672                           	opt stack 0
   673  000007                     ___lbdiv@divisor:
   674                           	opt stack 0
   675  000007                     ___lbmod@divisor:
   676                           	opt stack 0
   677  000007                     PortWrite@buf:
   678                           	opt stack 0
   679  000007                     SetBuzzerDuty@dc:
   680                           	opt stack 0
   681  000007                     ___lwdiv@dividend:
   682                           	opt stack 0
   683  000007                     ___lwmod@dividend:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x6
   687  000007                     	ds	1
   688  000008                     ??_LoadNextEvent:
   689  000008                     ??_ModbusSetExceptionStatusBit:
   690  000008                     ??_ModbusGetRxBufferHeader:
   691  000008                     ??_ModbusGetRxBuffer:
   692  000008                     ??_ProcessLightBlock:
   693  000008                     getHourMin@hour:
   694                           	opt stack 0
   695  000008                     LightLed@blink:
   696                           	opt stack 0
   697  000008                     LightStatusLed@blink:
   698                           	opt stack 0
   699  000008                     ModbusInit@u8txenpin:
   700                           	opt stack 0
   701  000008                     ModbusBuildException@u8func:
   702                           	opt stack 0
   703  000008                     CopyStringToBuffer@len:
   704                           	opt stack 0
   705  000008                     ___lbdiv@dividend:
   706                           	opt stack 0
   707  000008                     ___lbmod@dividend:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x7
   711  000008                     	ds	1
   712  000009                     ??_ModbusCalcCRC:
   713  000009                     ??_LightLed:
   714  000009                     ??_LightStatusLed:
   715  000009                     ??_SetBuzzerDuty:
   716  000009                     ??_CopyStringToBuffer:
   717  000009                     PortWrite@buflen:
   718                           	opt stack 0
   719  000009                     ModbusGetRxBufferHeader@i:
   720                           	opt stack 0
   721  000009                     ModbusGetRxBuffer@bBuffOverflow:
   722                           	opt stack 0
   723  000009                     ModbusGetLastCommand@address:
   724                           	opt stack 0
   725  000009                     ___lbdiv@counter:
   726                           	opt stack 0
   727  000009                     ___lbmod@counter:
   728                           	opt stack 0
   729  000009                     ___lwdiv@divisor:
   730                           	opt stack 0
   731  000009                     ___lwmod@divisor:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x8
   735  000009                     	ds	1
   736  00000A                     PortWrite@i:
   737                           	opt stack 0
   738  00000A                     ModbusSetExceptionStatusBit@bitNum:
   739                           	opt stack 0
   740  00000A                     CopyStringToBuffer@objId:
   741                           	opt stack 0
   742  00000A                     ___lbdiv@quotient:
   743                           	opt stack 0
   744  00000A                     ___lbmod@rem:
   745                           	opt stack 0
   746  00000A                     LoadNextEvent@totalMinutes:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x9
   750  00000A                     	ds	1
   751  00000B                     SetHourMin@newMin:
   752                           	opt stack 0
   753  00000B                     ModbusInit@u8id:
   754                           	opt stack 0
   755  00000B                     CopyStringToBuffer@i:
   756                           	opt stack 0
   757  00000B                     ___lwdiv@counter:
   758                           	opt stack 0
   759  00000B                     ___lwmod@counter:
   760                           	opt stack 0
   761  00000B                     ModbusCalcCRC@temp2:
   762                           	opt stack 0
   763  00000B                     millis@ret:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0xA
   767  00000B                     	ds	1
   768  00000C                     ?_isleap:
   769                           	opt stack 0
   770  00000C                     SetHourMin@sec:
   771                           	opt stack 0
   772  00000C                     LightLed@ledNum:
   773                           	opt stack 0
   774  00000C                     ProcessLightBlock@curMs:
   775                           	opt stack 0
   776  00000C                     LoadNextEvent@v1:
   777                           	opt stack 0
   778  00000C                     Modbus@u8serno:
   779                           	opt stack 0
   780  00000C                     ___lwdiv@quotient:
   781                           	opt stack 0
   782  00000C                     isleap@yr:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0xB
   786  00000C                     	ds	1
   787  00000D                     ??_SetHourMin:
   788  00000D                     LightLed@ststusIndex:
   789                           	opt stack 0
   790  00000D                     Modbus@u8txenpin:
   791                           	opt stack 0
   792  00000D                     ModbusCalcCRC@flag:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0xC
   796  00000D                     	ds	1
   797  00000E                     ??_isleap:
   798  00000E                     ?_months_to_days:
   799                           	opt stack 0
   800  00000E                     ?_years_to_days:
   801                           	opt stack 0
   802  00000E                     LightLed@statusShift:
   803                           	opt stack 0
   804  00000E                     LightStatusLed@row:
   805                           	opt stack 0
   806  00000E                     Modbus@u8id:
   807                           	opt stack 0
   808  00000E                     months_to_days@month:
   809                           	opt stack 0
   810  00000E                     years_to_days@yr:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0xD
   814  00000E                     	ds	1
   815  00000F                     ??_InitFromEeprom:
   816  00000F                     ??_SoundPlayNextStep:
   817  00000F                     ??_ResetEvent:
   818  00000F                     ModbusCalcCRC@u8length:
   819                           	opt stack 0
   820  00000F                     _isleap$2176:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0xE
   824  00000F                     	ds	1
   825  000010                     ??_months_to_days:
   826  000010                     ModbusCalcCRC@i:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0xF
   830  000010                     	ds	1
   831  000011                     ResetEvent@state:
   832                           	opt stack 0
   833  000011                     ModbusCalcCRC@j:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x10
   837  000011                     	ds	1
   838  000012                     ??_years_to_days:
   839  000012                     _ResetEvent$881:
   840                           	opt stack 0
   841  000012                     ModbusCalcCRC@temp:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x11
   845  000012                     	ds	2
   846  000014                     ??_ModbusValidateRequest:
   847  000014                     SoundPlayNextStep@duration:
   848                           	opt stack 0
   849  000014                     ModbusSendTxBuffer@u16crc:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x13
   853  000014                     	ds	1
   854  000015                     PlaySound@playDuration:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x14
   858  000015                     	ds	1
   859  000016                     ??_ModbusProcess_FC5:
   860  000016                     ??_ModbusProcess_FC15:
   861  000016                     ??_ModbusProcess_FC17:
   862  000016                     ??_ModbusProcess_FC21:
   863  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   864                           	opt stack 0
   865  000016                     ModbusProcess_FC43@devIdCode:
   866                           	opt stack 0
   867  000016                     ModbusProcess_FC1@regs:
   868                           	opt stack 0
   869  000016                     ModbusProcess_FC3@regs:
   870                           	opt stack 0
   871  000016                     ModbusProcess_FC6@regs:
   872                           	opt stack 0
   873  000016                     ModbusProcess_FC16@regs:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x15
   877  000016                     	ds	1
   878  000017                     ??_PlaySound:
   879  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   880                           	opt stack 0
   881  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x16
   885  000017                     	ds	1
   886  000018                     ??_ModbusProcess_FC1:
   887  000018                     ModbusProcess_FC3@u8size:
   888                           	opt stack 0
   889  000018                     ModbusProcess_FC6@u8size:
   890                           	opt stack 0
   891  000018                     ModbusProcess_FC16@u8size:
   892                           	opt stack 0
   893  000018                     ModbusProcess_FC17@i:
   894                           	opt stack 0
   895  000018                     ModbusProcess_FC21@requestDataLen:
   896                           	opt stack 0
   897  000018                     ModbusProcess_FC43@objId:
   898                           	opt stack 0
   899  000018                     ModbusValidateRequest@startAddrBytes:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x17
   903  000018                     	ds	1
   904  000019                     ??_ModbusProcess_FC3:
   905  000019                     ??_ModbusProcess_FC6:
   906  000019                     ??_ModbusProcess_FC16:
   907  000019                     SetHourMin@newHour:
   908                           	opt stack 0
   909  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x18
   913  000019                     	ds	1
   914  00001A                     SetHourMin@tmpSec:
   915                           	opt stack 0
   916  00001A                     ModbusProcess_FC21@startAddrsBytes:
   917                           	opt stack 0
   918  00001A                     years_to_days@ret:
   919                           	opt stack 0
   920                           
   921                           ; 4 bytes @ 0x19
   922  00001A                     	ds	1
   923  00001B                     SetHourMin@secToNext6Sec:
   924                           	opt stack 0
   925  00001B                     PlaySound@soundId:
   926                           	opt stack 0
   927  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   928                           	opt stack 0
   929  00001B                     ModbusProcess_FC1@u16coil:
   930                           	opt stack 0
   931  00001B                     ModbusProcess_FC6@u16val:
   932                           	opt stack 0
   933  00001B                     ModbusProcess_FC15@u16coil:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x1A
   937  00001B                     	ds	1
   938  00001C                     PlaySound@soundAddr:
   939                           	opt stack 0
   940  00001C                     ModbusProcess_FC5@u16coil:
   941                           	opt stack 0
   942  00001C                     ModbusProcess_FC21@recLenBytes:
   943                           	opt stack 0
   944  00001C                     ModbusValidateRequest@recLenBytes:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x1B
   948  00001C                     	ds	1
   949  00001D                     ??_ProcessDiary:
   950  00001D                     ??_CommandSetStatusLed:
   951  00001D                     ModbusProcess_FC1@u8currentBit:
   952                           	opt stack 0
   953  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   954                           	opt stack 0
   955  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   956                           	opt stack 0
   957  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   958                           	opt stack 0
   959  00001D                     ModbusProcess_FC16@temp:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x1C
   963  00001D                     	ds	1
   964  00001E                     ?_ymd_to_scalar:
   965                           	opt stack 0
   966  00001E                     CommandSetStatusLed@commandData:
   967                           	opt stack 0
   968  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   969                           	opt stack 0
   970  00001E                     ModbusProcess_FC5@regs:
   971                           	opt stack 0
   972  00001E                     ModbusProcess_FC15@bTemp:
   973                           	opt stack 0
   974  00001E                     ModbusProcess_FC21@i:
   975                           	opt stack 0
   976  00001E                     ModbusProcess_FC3@u16regsno:
   977                           	opt stack 0
   978  00001E                     ModbusProcess_FC6@u16add:
   979                           	opt stack 0
   980  00001E                     ymd_to_scalar@yr:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1D
   984  00001E                     	ds	1
   985  00001F                     CommandSetStatusLed@led:
   986                           	opt stack 0
   987  00001F                     ModbusProcess_FC1@u8bytesno:
   988                           	opt stack 0
   989  00001F                     ModbusProcess_FC5@u8currentBit:
   990                           	opt stack 0
   991  00001F                     ModbusProcess_FC15@u8frameByte:
   992                           	opt stack 0
   993  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x1E
   997  00001F                     	ds	1
   998  000020                     ModbusProcess_FC3@u8StartAdd:
   999                           	opt stack 0
  1000  000020                     ModbusValidateRequest@u16MsgCRC:
  1001                           	opt stack 0
  1002  000020                     ModbusProcess_FC1@u16StartCoil:
  1003                           	opt stack 0
  1004  000020                     ModbusProcess_FC15@u16StartCoil:
  1005                           	opt stack 0
  1006  000020                     ModbusProcess_FC16@u16StartAdd:
  1007                           	opt stack 0
  1008  000020                     ymd_to_scalar@mo:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x1F
  1012  000020                     	ds	1
  1013  000021                     ModbusProcess_FC3@i:
  1014                           	opt stack 0
  1015  000021                     ProcessDiary@totalMinutes:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x20
  1019  000021                     	ds	1
  1020  000022                     ModbusValidateRequest@isSupported:
  1021                           	opt stack 0
  1022  000022                     ModbusProcess_FC16@u8regsno:
  1023                           	opt stack 0
  1024  000022                     ModbusProcess_FC1@u16currentCoil:
  1025                           	opt stack 0
  1026  000022                     ModbusProcess_FC15@u16Coilno:
  1027                           	opt stack 0
  1028  000022                     ymd_to_scalar@day:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x21
  1032  000022                     	ds	1
  1033  000023                     ModbusProcess_FC16@i:
  1034                           	opt stack 0
  1035  000023                     ModbusValidateRequest@u16count:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x22
  1039  000023                     	ds	1
  1040  000024                     ??_ymd_to_scalar:
  1041  000024                     ModbusProcess_FC1@u8bitsno:
  1042                           	opt stack 0
  1043  000024                     ModbusProcess_FC15@regs:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x23
  1047  000024                     	ds	1
  1048  000025                     ModbusValidateRequest@i:
  1049                           	opt stack 0
  1050  000025                     ModbusProcess_FC15@u8currentBit:
  1051                           	opt stack 0
  1052  000025                     ModbusProcess_FC1@u16Coilno:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x24
  1056  000025                     	ds	1
  1057  000026                     ModbusValidateRequest@readDevId:
  1058                           	opt stack 0
  1059  000026                     ModbusProcess_FC15@u16currentCoil:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x25
  1063  000026                     	ds	1
  1064  000027                     ModbusValidateRequest@u8regs:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x26
  1068  000027                     	ds	1
  1069  000028                     ModbusProcess_FC15@u8bitsno:
  1070                           	opt stack 0
  1071  000028                     ModbusValidateRequest@u16regs:
  1072                           	opt stack 0
  1073  000028                     _ymd_to_scalar$2189:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x27
  1077  000028                     	ds	2
  1078  00002A                     ModbusPoll@discreteInputs:
  1079                           	opt stack 0
  1080  00002A                     ymd_to_scalar@scalar:
  1081                           	opt stack 0
  1082                           
  1083                           ; 4 bytes @ 0x29
  1084  00002A                     	ds	2
  1085  00002C                     ModbusPoll@coils:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x2B
  1089  00002C                     	ds	1
  1090  00002D                     ModbusPoll@inputRegs:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x2C
  1094  00002D                     	ds	1
  1095  00002E                     ?_mktime:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x2D
  1099  00002E                     	ds	1
  1100  00002F                     ModbusPoll@inputRegsCount:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x2E
  1104  00002F                     	ds	1
  1105  000030                     ModbusPoll@holdingRegs:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x2F
  1109  000030                     	ds	2
  1110  000032                     ??_mktime:
  1111  000032                     ModbusPoll@holdingRegsCount:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x31
  1115  000032                     	ds	1
  1116  000033                     ModbusPoll@u8current:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x32
  1120  000033                     	ds	1
  1121  000034                     ModbusPoll@i8state:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x33
  1125  000034                     	ds	1
  1126  000035                     ModbusPoll@u8exception:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x34
  1130  000035                     	ds	11
  1131  000040                     mktime@tt:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x3F
  1135  000040                     	ds	4
  1136  000044                     mktime@timeptr:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x43
  1140  000044                     	ds	1
  1141  000045                     SetTimeFromRegs@daySec:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x44
  1145  000045                     	ds	1
  1146  000046                     SetTimeFromRegs@yearMonth:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x45
  1150  000046                     	ds	1
  1151  000047                     ??_SetTimeFromRegs:
  1152                           
  1153                           ; 1 bytes @ 0x46
  1154  000047                     	ds	2
  1155  000049                     SetTimeFromRegs@newRawTime:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x48
  1159  000049                     	ds	4
  1160  00004D                     SetTimeFromRegs@hourMin:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x4C
  1164  00004D                     	ds	1
  1165  00004E                     SetTimeFromRegs@newTime:
  1166                           	opt stack 0
  1167                           
  1168                           ; 18 bytes @ 0x4D
  1169  00004E                     	ds	18
  1170  000060                     SetTimeCommand@hourMin:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x5F
  1174  000060                     	ds	2
  1175  000062                     SetTimeCommand@daySec:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x61
  1179  000062                     	ds	2
  1180  000064                     SetTimeCommand@yearMonth:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x63
  1184  000064                     	ds	2
  1185  000066                     ??_io_poll:
  1186                           
  1187                           ; 1 bytes @ 0x65
  1188  000066                     	ds	4
  1189  00006A                     ??_main:
  1190                           
  1191                           ; 1 bytes @ 0x69
  1192  00006A                     	ds	5
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1h	equ	0xFE2
  1201                           fsr1l	equ	0xFE1
  1202                           
  1203 ;;
  1204 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1205 ;;
  1206 ;; *************** function _main *****************
  1207 ;; Defined at:
  1208 ;;		line 759 in file "main.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;  minute          1   17[BANK0 ] unsigned char 
  1213 ;;  hour            1   12[BANK0 ] unsigned char 
  1214 ;;  curMs           4   13[BANK0 ] unsigned long 
  1215 ;;  lastMs          4    7[BANK0 ] unsigned long 
  1216 ;;  oldBuzzerOnT    4    0        unsigned long 
  1217 ;;  oldMinute       1   11[BANK0 ] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1227 ;;      Params:         0       0       0       0       0       0       0
  1228 ;;      Locals:         0      11       0       0       0       0       0
  1229 ;;      Temps:          5       0       0       0       0       0       0
  1230 ;;      Totals:         5      11       0       0       0       0       0
  1231 ;;Total ram usage:       16 bytes
  1232 ;; Hardware stack levels required when called:    9
  1233 ;; This function calls:
  1234 ;;		_AddSecond
  1235 ;;		_ConfigureOscillator
  1236 ;;		_GetTime
  1237 ;;		_InitApp
  1238 ;;		_InitFromEeprom
  1239 ;;		_LightStatusLed
  1240 ;;		_ModbusPoll
  1241 ;;		_ProcessDiary
  1242 ;;		_ProcessLightBlock
  1243 ;;		_ResetEvent
  1244 ;;		_SoundPlayNextStep
  1245 ;;		_StopPlaying
  1246 ;;		_getHourMin
  1247 ;;		_io_poll
  1248 ;;		_millis
  1249 ;;		_pwm_init
  1250 ;; This function is called by:
  1251 ;;		Startup code after reset
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text0
  1256  0012C8                     __ptext0:
  1257                           	opt stack 0
  1258  0012C8                     _main:
  1259                           	opt stack 22
  1260                           
  1261                           ;incstack = 0
  1262  0012C8  FFFF               	dw	65535
  1263                           
  1264                           ;main.c: 762: ConfigureOscillator();
  1265  0012CA  ECBF  F016         	call	_ConfigureOscillator	;wreg free
  1266                           
  1267                           ;main.c: 765: InitApp();
  1268  0012CE  EC25  F012         	call	_InitApp	;wreg free
  1269                           
  1270                           ;main.c: 769: InitFromEeprom();
  1271  0012D2  ECD5  F011         	call	_InitFromEeprom	;wreg free
  1272                           
  1273                           ;main.c: 778: unsigned long lastMs = millis();
  1274  0012D6  EC02  F016         	call	_millis	;wreg free
  1275  0012DA  C007  F0E9         	movff	?_millis,main@lastMs
  1276  0012DE  C008  F0EA         	movff	?_millis+1,main@lastMs+1
  1277  0012E2  C009  F0EB         	movff	?_millis+2,main@lastMs+2
  1278  0012E6  C00A  F0EC         	movff	?_millis+3,main@lastMs+3
  1279                           
  1280                           ;main.c: 787: unsigned long oldBuzzerOnTime = 0;
  1281  0012EA  EC97  F016         	call	_pwm_init	;wreg free
  1282                           
  1283                           ;main.c: 788: uint8_t oldMinute = 0xff;
  1284  0012EE  0100               	movlb	0	; () banked
  1285  0012F0  69ED               	setf	main@oldMinute& (0+255),b
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 790: LightStatusLed(0x07, 1, 0);
  1289  0012F2  0E01               	movlw	1
  1290  0012F4  6E07               	movwf	LightStatusLed@on,c
  1291  0012F6  0E00               	movlw	0
  1292  0012F8  6E08               	movwf	LightStatusLed@blink,c
  1293  0012FA  0E07               	movlw	7
  1294  0012FC  EC15  F00E         	call	_LightStatusLed
  1295                           
  1296                           ;main.c: 791: LightStatusLed(0x05, 1, 1);
  1297  001300  0E01               	movlw	1
  1298  001302  6E07               	movwf	LightStatusLed@on,c
  1299  001304  6E08               	movwf	LightStatusLed@blink,c
  1300  001306  0E05               	movlw	5
  1301  001308  EC15  F00E         	call	_LightStatusLed
  1302  00130C                     l6297:
  1303  00130C  FFFF               	dw	65535	; assembler added errata NOP
  1304                           
  1305                           ;main.c: 793: {
  1306                           ;main.c: 794: unsigned long curMs = millis();
  1307  00130E  EC02  F016         	call	_millis	;wreg free
  1308  001312  C007  F0EF         	movff	?_millis,main@curMs
  1309  001316  C008  F0F0         	movff	?_millis+1,main@curMs+1
  1310  00131A  C009  F0F1         	movff	?_millis+2,main@curMs+2
  1311  00131E  C00A  F0F2         	movff	?_millis+3,main@curMs+3
  1312                           
  1313                           ;main.c: 795: ProcessLightBlock(&curMs);
  1314  001322  0EEF               	movlw	main@curMs& (0+255)
  1315  001324  EC39  F006         	call	_ProcessLightBlock
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 797: if(_isSoundPlaying && curMs >= _playingEndMs)
  1319  001328  51D2               	movf	__isSoundPlaying& (0+255),w,b
  1320  00132A  E00B               	bz	l6307
  1321                           
  1322                           ; BSR set to: 0
  1323  00132C  51A0               	movf	__playingEndMs& (0+255),w,b
  1324  00132E  5DEF               	subwf	main@curMs& (0+255),w,b
  1325  001330  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1326  001332  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1327  001334  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1328  001336  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1329  001338  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1330  00133A  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1331  00133C  E302               	bnc	l6307
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 798: {
  1335                           ;main.c: 799: SoundPlayNextStep();
  1336  00133E  EC85  F010         	call	_SoundPlayNextStep	;wreg free
  1337  001342                     l6307:
  1338                           
  1339                           ;main.c: 800: }
  1340                           ;main.c: 803: if(PORTCbits.RC1 == 0)
  1341  001342  B282               	btfsc	3970,1,c	;volatile
  1342  001344  D008               	goto	l6315
  1343                           
  1344                           ;main.c: 804: {
  1345                           ;main.c: 806: if(currentAlarmedEventNum != 0xff)
  1346  001346  2876               	incf	_currentAlarmedEventNum,w,c
  1347  001348  E004               	bz	l6313
  1348                           
  1349                           ;main.c: 807: {
  1350                           ;main.c: 808: ResetEvent(1);
  1351  00134A  0E01               	movlw	1
  1352  00134C  ECF5  F014         	call	_ResetEvent
  1353                           
  1354                           ;main.c: 809: }
  1355  001350  D002               	goto	l6315
  1356  001352                     l6313:
  1357                           
  1358                           ;main.c: 810: else
  1359                           ;main.c: 811: {
  1360                           ;main.c: 812: StopPlaying();
  1361  001352  EC5C  F016         	call	_StopPlaying	;wreg free
  1362  001356                     l6315:
  1363  001356  FFFF               	dw	65535	; assembler added errata NOP
  1364                           
  1365                           ;main.c: 813: }
  1366                           ;main.c: 815: }
  1367                           ;main.c: 818: if(curMs - lastMs >= 1000)
  1368  001358  0100               	movlb	0	; () banked
  1369  00135A  51E9               	movf	main@lastMs& (0+255),w,b
  1370  00135C  5DEF               	subwf	main@curMs& (0+255),w,b
  1371  00135E  6E6A               	movwf	??_main& (0+255),c
  1372  001360  51EA               	movf	(main@lastMs+1)& (0+255),w,b
  1373  001362  59F0               	subwfb	(main@curMs+1)& (0+255),w,b
  1374  001364  6E6B               	movwf	(??_main+1)& (0+255),c
  1375  001366  51EB               	movf	(main@lastMs+2)& (0+255),w,b
  1376  001368  59F1               	subwfb	(main@curMs+2)& (0+255),w,b
  1377  00136A  6E6C               	movwf	(??_main+2)& (0+255),c
  1378  00136C  51EC               	movf	(main@lastMs+3)& (0+255),w,b
  1379  00136E  59F2               	subwfb	(main@curMs+3)& (0+255),w,b
  1380  001370  6E6D               	movwf	(??_main+3)& (0+255),c
  1381  001372  506D               	movf	??_main+3,w,c
  1382  001374  106C               	iorwf	??_main+2,w,c
  1383  001376  E105               	bnz	u5340
  1384  001378  0EE8               	movlw	232
  1385  00137A  5C6A               	subwf	??_main,w,c
  1386  00137C  0E03               	movlw	3
  1387  00137E  586B               	subwfb	??_main+1,w,c
  1388  001380  E34A               	bnc	l6345
  1389  001382                     u5340:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 819: {
  1393                           ;main.c: 820: AddSecond();
  1394  001382  ECA0  F016         	call	_AddSecond	;wreg free
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 822: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1398  001386  2876               	incf	_currentAlarmedEventNum,w,c
  1399  001388  E015               	bz	l6325
  1400                           
  1401                           ; BSR set to: 0
  1402  00138A  ECBB  F016         	call	_GetTime	;wreg free
  1403  00138E  6ED9               	movwf	fsr2l,c
  1404  001390  6ADA               	clrf	fsr2h,c
  1405  001392  0100               	movlb	0	; () banked
  1406  001394  51AC               	movf	_eventResetSecond& (0+255),w,b
  1407  001396  5CDE               	subwf	postinc2,w,c
  1408  001398  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1409  00139A  58DE               	subwfb	postinc2,w,c
  1410  00139C  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1411  00139E  58DE               	subwfb	postinc2,w,c
  1412  0013A0  50DE               	movf	postinc2,w,c
  1413  0013A2  0A80               	xorlw	128
  1414  0013A4  6E6E               	movwf	(??_main+4)& (0+255),c
  1415  0013A6  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1416  0013A8  0A80               	xorlw	128
  1417  0013AA  586E               	subwfb	(??_main+4)& (0+255),w,c
  1418  0013AC  E303               	bnc	l6325
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 823: {
  1422                           ;main.c: 824: ResetEvent(0);
  1423  0013AE  0E00               	movlw	0
  1424  0013B0  ECF5  F014         	call	_ResetEvent
  1425  0013B4                     l6325:
  1426                           
  1427                           ;main.c: 825: }
  1428                           ;main.c: 827: _MODBUSInputRegs[5] = *GetTime();
  1429  0013B4  ECBB  F016         	call	_GetTime	;wreg free
  1430  0013B8  6ED9               	movwf	fsr2l,c
  1431  0013BA  6ADA               	clrf	fsr2h,c
  1432  0013BC  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1433  0013C0  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1434                           
  1435                           ;main.c: 828: uint8_t hour = 0, minute = 0;
  1436  0013C4  0100               	movlb	0	; () banked
  1437  0013C6  6BEE               	clrf	main@hour& (0+255),b
  1438                           
  1439                           ; BSR set to: 0
  1440  0013C8  6BF3               	clrf	main@minute& (0+255),b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 830: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1444  0013CA  0EF3               	movlw	low main@minute
  1445  0013CC  6E07               	movwf	getHourMin@min,c
  1446  0013CE  0EEE               	movlw	main@hour& (0+255)
  1447  0013D0  ECEC  F015         	call	_getHourMin
  1448  0013D4  0900               	iorlw	0
  1449  0013D6  E00F               	bz	l6341
  1450  0013D8  0100               	movlb	0	; () banked
  1451  0013DA  51F3               	movf	main@minute& (0+255),w,b
  1452  0013DC  19ED               	xorwf	main@oldMinute& (0+255),w,b
  1453  0013DE  E00B               	bz	l6341
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 831: {
  1457                           ;main.c: 832: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1458  0013E0  51EE               	movf	main@hour& (0+255),w,b
  1459  0013E2  6E6A               	movwf	??_main& (0+255),c
  1460  0013E4  51F3               	movf	main@minute& (0+255),w,b
  1461  0013E6  0101               	movlb	1	; () banked
  1462  0013E8  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1463  0013EA  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1464                           
  1465                           ; BSR set to: 1
  1466                           ;main.c: 834: oldMinute = minute;
  1467  0013EE  C0F3  F0ED         	movff	main@minute,main@oldMinute
  1468                           
  1469                           ; BSR set to: 1
  1470                           ;main.c: 835: ProcessDiary();
  1471  0013F2  ECCD  F00F         	call	_ProcessDiary	;wreg free
  1472  0013F6                     l6341:
  1473                           
  1474                           ;main.c: 836: }
  1475                           ;main.c: 838: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1476  0013F6  0100               	movlb	0	; () banked
  1477  0013F8  51EE               	movf	main@hour& (0+255),w,b
  1478  0013FA  6E6A               	movwf	??_main& (0+255),c
  1479  0013FC  51F3               	movf	main@minute& (0+255),w,b
  1480  0013FE  0101               	movlb	1	; () banked
  1481  001400  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1482  001402  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1483                           
  1484                           ; BSR set to: 1
  1485                           ;main.c: 840: lastMs = curMs;
  1486  001406  C0EF  F0E9         	movff	main@curMs,main@lastMs
  1487  00140A  C0F0  F0EA         	movff	main@curMs+1,main@lastMs+1
  1488  00140E  C0F1  F0EB         	movff	main@curMs+2,main@lastMs+2
  1489  001412  C0F2  F0EC         	movff	main@curMs+3,main@lastMs+3
  1490  001416                     l6345:
  1491                           
  1492                           ;main.c: 842: }
  1493                           ;main.c: 843: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1494  001416  C0BC  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1495  00141A  C0BD  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1496  00141E  0EDF               	movlw	low __MODBUSCoils
  1497  001420  6E2C               	movwf	ModbusPoll@coils,c
  1498  001422  0EAA               	movlw	low __MODBUSInputRegs
  1499  001424  6E2D               	movwf	ModbusPoll@inputRegs,c
  1500  001426  0E01               	movlw	high __MODBUSInputRegs
  1501  001428  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1502  00142A  0E0F               	movlw	15
  1503  00142C  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1504  00142E  0E8C               	movlw	low __MODBUSHoldingRegs
  1505  001430  6E30               	movwf	ModbusPoll@holdingRegs,c
  1506  001432  0E01               	movlw	high __MODBUSHoldingRegs
  1507  001434  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1508  001436  0E0F               	movlw	15
  1509  001438  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1510  00143A  ECA2  F008         	call	_ModbusPoll	;wreg free
  1511                           
  1512                           ;main.c: 844: io_poll();
  1513  00143E  ECD3  F00A         	call	_io_poll	;wreg free
  1514  001442  D764               	goto	l6297
  1515  001444                     __end_of_main:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1h	equ	0xFE2
  1525                           fsr1l	equ	0xFE1
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           fsr2h	equ	0xFDA
  1529                           fsr2l	equ	0xFD9
  1530                           
  1531 ;; *************** function _pwm_init *****************
  1532 ;; Defined at:
  1533 ;;		line 356 in file "main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         0       0       0       0       0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0
  1550 ;;      Totals:         0       0       0       0       0       0       0
  1551 ;;Total ram usage:        0 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    2
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text1
  1562  002D2E                     __ptext1:
  1563                           	opt stack 0
  1564  002D2E                     _pwm_init:
  1565                           	opt stack 28
  1566                           
  1567                           ;incstack = 0
  1568  002D2E  FFFF               	dw	65535
  1569                           
  1570                           ;main.c: 368: CCP1CONbits.CCP1M = 0x0f;
  1571  002D30  0E0F               	movlw	15
  1572  002D32  12BD               	iorwf	4029,f,c	;volatile
  1573                           
  1574                           ;main.c: 375: PR2 = 255;
  1575  002D34  68CB               	setf	4043,c	;volatile
  1576                           
  1577                           ;main.c: 378: T2CONbits.T2CKPS1 = 1;
  1578  002D36  82CA               	bsf	4042,1,c	;volatile
  1579                           
  1580                           ;main.c: 379: T2CONbits.T2CKPS0 = 0;
  1581  002D38  90CA               	bcf	4042,0,c	;volatile
  1582                           
  1583                           ;main.c: 382: TRISCbits.RC2 = 0;
  1584  002D3A  9494               	bcf	3988,2,c	;volatile
  1585  002D3C  0012               	return		;funcret
  1586  002D3E  FFFF               	dw	65535	; errata NOP
  1587  002D40                     __end_of_pwm_init:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1h	equ	0xFE2
  1597                           fsr1l	equ	0xFE1
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           
  1603 ;; *************** function _io_poll *****************
  1604 ;; Defined at:
  1605 ;;		line 897 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  hourMin         2    0        unsigned int 
  1610 ;;  command         1    0[BANK0 ] unsigned char 
  1611 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1612 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1613 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1614 ;;		 -> _lastCommand(1), 
  1615 ;;  v1              1    3[BANK0 ] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         0       0       0       0       0       0       0
  1626 ;;      Locals:         0       7       0       0       0       0       0
  1627 ;;      Temps:          4       0       0       0       0       0       0
  1628 ;;      Totals:         4       7       0       0       0       0       0
  1629 ;;Total ram usage:       11 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    8
  1632 ;; This function calls:
  1633 ;;		_CommandSetStatusLed
  1634 ;;		_InitFromEeprom
  1635 ;;		_LightLed
  1636 ;;		_ModbusGetLastCommand
  1637 ;;		_ModbusSetExceptionStatusBit
  1638 ;;		_PlaySound
  1639 ;;		_SetTimeCommand
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text2
  1646  0015A6                     __ptext2:
  1647                           	opt stack 0
  1648  0015A6                     _io_poll:
  1649                           	opt stack 22
  1650                           
  1651                           ;incstack = 0
  1652  0015A6  FFFF               	dw	65535
  1653                           
  1654                           ;main.c: 899: uint16_t lastAddress;
  1655                           ;main.c: 900: uint16_t lastEndAddress;
  1656                           ;main.c: 902: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1657  0015A8  0EE3               	movlw	low io_poll@lastEndAddress
  1658  0015AA  6E07               	movwf	ModbusGetLastCommand@count,c
  1659  0015AC  0EE6               	movlw	io_poll@lastAddress& (0+255)
  1660  0015AE  ECBF  F015         	call	_ModbusGetLastCommand
  1661  0015B2  0100               	movlb	0	; () banked
  1662  0015B4  6FE8               	movwf	io_poll@lastCommand& (0+255),b
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 903: if(*lastCommand == MB_FC_NONE)
  1666  0015B6  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1667  0015B8  6ED9               	movwf	fsr2l,c
  1668  0015BA  6ADA               	clrf	fsr2h,c
  1669  0015BC  50DF               	movf	indf2,w,c
  1670  0015BE  E101 D08A          	bz	l448
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 906: lastEndAddress += lastAddress - 1;
  1674  0015C2  6866               	setf	??_io_poll& (0+255),c
  1675  0015C4  6867               	setf	(??_io_poll+1)& (0+255),c
  1676  0015C6  C0E6  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1677  0015CA  C0E7  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1678  0015CE  5066               	movf	??_io_poll,w,c
  1679  0015D0  2668               	addwf	??_io_poll+2,f,c
  1680  0015D2  5067               	movf	??_io_poll+1,w,c
  1681  0015D4  2269               	addwfc	??_io_poll+3,f,c
  1682  0015D6  5068               	movf	??_io_poll+2,w,c
  1683  0015D8  27E3               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1684  0015DA  5069               	movf	??_io_poll+3,w,c
  1685  0015DC  23E4               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 908: uint8_t v1;
  1689                           ;main.c: 909: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1690  0015DE  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1691  0015E0  6ED9               	movwf	fsr2l,c
  1692  0015E2  6ADA               	clrf	fsr2h,c
  1693  0015E4  0E06               	movlw	6
  1694  0015E6  18DE               	xorwf	postinc2,w,c
  1695  0015E8  E006               	bz	l6231
  1696                           
  1697                           ; BSR set to: 0
  1698  0015EA  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1699  0015EC  6ED9               	movwf	fsr2l,c
  1700  0015EE  6ADA               	clrf	fsr2h,c
  1701  0015F0  0E10               	movlw	16
  1702  0015F2  18DE               	xorwf	postinc2,w,c
  1703  0015F4  E162               	bnz	l6275
  1704  0015F6                     l6231:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 910: {
  1708                           ;main.c: 912: if(lastAddress == 0)
  1709  0015F6  51E6               	movf	io_poll@lastAddress& (0+255),w,b
  1710  0015F8  11E7               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1711  0015FA  E15F               	bnz	l6275
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 913: {
  1715                           ;main.c: 914: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1716  0015FC  C18D  F0E2         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1717                           
  1718                           ;main.c: 915: uint16_t hourMin;
  1719                           ;main.c: 916: switch(command)
  1720  001600  D046               	goto	l6273
  1721  001602                     l454:
  1722                           
  1723                           ; BSR set to: 0
  1724  001602  00FF               	reset		; ;# 
  1725                           
  1726                           ;main.c: 922: return;
  1727  001604  D068               	goto	l448
  1728  001606                     l6235:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 926: SetTimeCommand();
  1732  001606  ECA7  F015         	call	_SetTimeCommand	;wreg free
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 927: ModbusSetExceptionStatusBit(0, 1);
  1736  00160A  0E01               	movlw	1
  1737  00160C  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1738  00160E  0E00               	movlw	0
  1739  001610  EC1C  F014         	call	_ModbusSetExceptionStatusBit
  1740                           
  1741                           ;main.c: 928: break;
  1742  001614  D04C               	goto	l456
  1743  001616                     l458:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 932: eventCount = 0;
  1747  001616  6BDA               	clrf	_eventCount& (0+255),b
  1748  001618                     l460:
  1749  001618  FFFF               	dw	65535	; assembler added errata NOP
  1750  00161A  B2A6               	btfsc	4006,1,c	;volatile
  1751  00161C  D7FD               	goto	l460
  1752  00161E  0E12               	movlw	18
  1753  001620  6EA9               	movwf	4009,c	;volatile
  1754  001622  6AA8               	clrf	4008,c	;volatile
  1755  001624  90D8               	bcf	status,0,c	;volatile
  1756  001626  BEF2               	btfsc	intcon,7,c	;volatile
  1757  001628  80D8               	bsf	status,0,c	;volatile
  1758  00162A  9EF2               	bcf	intcon,7,c	;volatile
  1759  00162C  84A6               	bsf	4006,2,c	;volatile
  1760  00162E  0E55               	movlw	85
  1761  001630  6EA7               	movwf	4007,c	;volatile
  1762  001632  0EAA               	movlw	170
  1763  001634  6EA7               	movwf	4007,c	;volatile
  1764  001636  82A6               	bsf	4006,1,c	;volatile
  1765  001638  94A6               	bcf	4006,2,c	;volatile
  1766  00163A  E301               	bnc	l6259
  1767  00163C  8EF2               	bsf	intcon,7,c	;volatile
  1768  00163E                     l6259:
  1769                           
  1770                           ;main.c: 934: ModbusSetExceptionStatusBit(0, 1);
  1771  00163E  0E01               	movlw	1
  1772  001640  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1773  001642  0E00               	movlw	0
  1774  001644  EC1C  F014         	call	_ModbusSetExceptionStatusBit
  1775                           
  1776                           ;main.c: 935: break;
  1777  001648  D032               	goto	l456
  1778  00164A                     l466:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 961: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1782  00164A  C18E  F0E5         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 963: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1786  00164E  51E5               	movf	io_poll@v1& (0+255),w,b
  1787  001650  0B03               	andlw	3
  1788  001652  6E07               	movwf	LightLed@ledState,c
  1789  001654  41E5               	rrncf	io_poll@v1& (0+255),w,b
  1790  001656  42E8               	rrncf	wreg,f,c
  1791  001658  0B3F               	andlw	63
  1792  00165A  0B01               	andlw	1
  1793  00165C  6E08               	movwf	LightLed@blink,c
  1794  00165E  0101               	movlb	1	; () banked
  1795  001660  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1796  001662  ECC0  F004         	call	_LightLed
  1797                           
  1798                           ;main.c: 964: _MODBUSHoldingRegs[1] = 0;
  1799  001666  0101               	movlb	1	; () banked
  1800  001668  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1801  00166A  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;main.c: 965: ModbusSetExceptionStatusBit(0, 1);
  1805  00166C  0E01               	movlw	1
  1806  00166E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1807  001670  0E00               	movlw	0
  1808  001672  EC1C  F014         	call	_ModbusSetExceptionStatusBit
  1809                           
  1810                           ;main.c: 966: break;
  1811  001676  D01B               	goto	l456
  1812  001678                     l6267:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;main.c: 975: PlaySound(((unsigned char)((_MODBUSHoldingRegs[0])&0xFF)), ((unsigned char
      +                          )((_MODBUSHoldingRegs[1])&0xFF)));
  1816  001678  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  1817  00167C  6A16               	clrf	PlaySound@playDuration+1,c
  1818  00167E  0101               	movlb	1	; () banked
  1819  001680  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1820  001682  EC90  F00E         	call	_PlaySound
  1821                           
  1822                           ;main.c: 976: break;
  1823  001686  D013               	goto	l456
  1824  001688                     l6269:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 979: CommandSetStatusLed();
  1828  001688  ECD8  F012         	call	_CommandSetStatusLed	;wreg free
  1829                           
  1830                           ;main.c: 980: break;
  1831  00168C  D010               	goto	l456
  1832  00168E                     l6273:
  1833  00168E  FFFF               	dw	65535	; assembler added errata NOP
  1834                           
  1835                           ; BSR set to: 0
  1836  001690  51E2               	movf	io_poll@command& (0+255),w,b
  1837                           
  1838                           ; Switch size 1, requested type "speed"
  1839                           ; Number of cases is 7, Range of values is 1 to 145
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte           22    12 (average)
  1843                           ;	Chosen strategy is simple_byte
  1844  001692  0A01               	xorlw	1	; case 1
  1845  001694  E00C               	bz	l456
  1846  001696  0A11               	xorlw	17	; case 16
  1847  001698  E0B6               	bz	l6235
  1848  00169A  0A6F               	xorlw	111	; case 127
  1849  00169C  E0B2               	bz	l454
  1850  00169E  0AFF               	xorlw	255	; case 128
  1851  0016A0  E0BA               	bz	l458
  1852  0016A2  0A02               	xorlw	2	; case 130
  1853  0016A4  E0D2               	bz	l466
  1854  0016A6  0A01               	xorlw	1	; case 131
  1855  0016A8  E0EF               	bz	l6269
  1856  0016AA  0A12               	xorlw	18	; case 145
  1857  0016AC  E0E5               	bz	l6267
  1858  0016AE                     l456:
  1859  0016AE  FFFF               	dw	65535	; assembler added errata NOP
  1860                           
  1861                           ;main.c: 982: _MODBUSHoldingRegs[0] = 0;
  1862  0016B0  0101               	movlb	1	; () banked
  1863  0016B2  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1864  0016B4  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1865                           
  1866                           ;main.c: 983: _MODBUSHoldingRegs[1] = 0;
  1867  0016B6  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  1868  0016B8  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  1869  0016BA                     l6275:
  1870                           
  1871                           ;main.c: 984: }
  1872                           ;main.c: 985: }
  1873                           ;main.c: 988: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  1874  0016BA  0100               	movlb	0	; () banked
  1875  0016BC  51E8               	movf	io_poll@lastCommand& (0+255),w,b
  1876  0016BE  6ED9               	movwf	fsr2l,c
  1877  0016C0  6ADA               	clrf	fsr2h,c
  1878  0016C2  0E15               	movlw	21
  1879  0016C4  18DE               	xorwf	postinc2,w,c
  1880  0016C6  E107               	bnz	l448
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 989: {
  1884                           ;main.c: 990: InitFromEeprom();
  1885  0016C8  ECD5  F011         	call	_InitFromEeprom	;wreg free
  1886                           
  1887                           ; BSR set to: 1
  1888                           ;main.c: 991: ModbusSetExceptionStatusBit(0, 1);
  1889  0016CC  0E01               	movlw	1
  1890  0016CE  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1891  0016D0  0E00               	movlw	0
  1892  0016D2  EC1C  F014         	call	_ModbusSetExceptionStatusBit
  1893  0016D6                     l448:
  1894  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  1895  0016D8  0012               	return		;funcret
  1896  0016DA  FFFF               	dw	65535	; errata NOP
  1897  0016DC                     __end_of_io_poll:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           intcon	equ	0xFF2
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1h	equ	0xFE2
  1908                           fsr1l	equ	0xFE1
  1909                           indf2	equ	0xFDF
  1910                           postinc2	equ	0xFDE
  1911                           postdec2	equ	0xFDD
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _SetTimeCommand *****************
  1917 ;; Defined at:
  1918 ;;		line 868 in file "main.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  yearMonth       2   99[COMRAM] unsigned int 
  1923 ;;  daySec          2   97[COMRAM] unsigned int 
  1924 ;;  hourMin         2   95[COMRAM] unsigned int 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : F/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1934 ;;      Params:         0       0       0       0       0       0       0
  1935 ;;      Locals:         6       0       0       0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0       0       0
  1937 ;;      Totals:         6       0       0       0       0       0       0
  1938 ;;Total ram usage:        6 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    7
  1941 ;; This function calls:
  1942 ;;		_SetTimeFromRegs
  1943 ;; This function is called by:
  1944 ;;		_io_poll
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text3
  1949  002B4E                     __ptext3:
  1950                           	opt stack 0
  1951  002B4E                     _SetTimeCommand:
  1952                           	opt stack 22
  1953                           
  1954                           ;incstack = 0
  1955  002B4E  FFFF               	dw	65535
  1956                           
  1957                           ;main.c: 870: uint16_t hourMin = _MODBUSHoldingRegs[1];
  1958  002B50  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  1959  002B54  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  1960                           
  1961                           ;main.c: 872: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  1962  002B58  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  1963  002B5C  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  1964                           
  1965                           ;main.c: 873: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  1966  002B60  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  1967  002B64  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  1968                           
  1969                           ;main.c: 874: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  1970  002B68  0E62               	movlw	low SetTimeCommand@daySec
  1971  002B6A  6E45               	movwf	SetTimeFromRegs@daySec,c
  1972  002B6C  0E64               	movlw	low SetTimeCommand@yearMonth
  1973  002B6E  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  1974  002B70  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  1975  002B72  EC6A  F00F         	call	_SetTimeFromRegs
  1976                           
  1977                           ;main.c: 875: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  1978  002B76  0100               	movlb	0	; () banked
  1979  002B78  81BC               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  1980                           
  1981                           ; BSR set to: 0
  1982  002B7A  0012               	return		;funcret
  1983  002B7C  FFFF               	dw	65535	; errata NOP
  1984  002B7E                     __end_of_SetTimeCommand:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           intcon	equ	0xFF2
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           indf2	equ	0xFDF
  1997                           postinc2	equ	0xFDE
  1998                           postdec2	equ	0xFDD
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _SetTimeFromRegs *****************
  2004 ;; Defined at:
  2005 ;;		line 851 in file "main.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  hourMin         1    wreg     PTR unsigned int 
  2008 ;;		 -> SetTimeCommand@hourMin(2), 
  2009 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2010 ;;		 -> SetTimeCommand@daySec(2), 
  2011 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2012 ;;		 -> SetTimeCommand@yearMonth(2), 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2015 ;;		 -> SetTimeCommand@hourMin(2), 
  2016 ;;  newTime        18   77[COMRAM] struct tm
  2017 ;;  newRawTime      4   72[COMRAM] long 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2027 ;;      Params:         2       0       0       0       0       0       0
  2028 ;;      Locals:        23       0       0       0       0       0       0
  2029 ;;      Temps:          2       0       0       0       0       0       0
  2030 ;;      Totals:        27       0       0       0       0       0       0
  2031 ;;Total ram usage:       27 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    6
  2034 ;; This function calls:
  2035 ;;		_LightStatusLed
  2036 ;;		_LoadNextEvent
  2037 ;;		_SetHourMin
  2038 ;;		_SetTime
  2039 ;;		_mktime
  2040 ;; This function is called by:
  2041 ;;		_SetTimeCommand
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text4
  2046  001ED4                     __ptext4:
  2047                           	opt stack 0
  2048  001ED4                     _SetTimeFromRegs:
  2049                           	opt stack 22
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;incstack = 0
  2053  001ED4  FFFF               	dw	65535
  2054                           
  2055                           ;SetTimeFromRegs@hourMin stored from wreg
  2056  001ED6  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2057                           
  2058                           ;main.c: 853: struct tm newTime;
  2059                           ;main.c: 854: newTime.tm_year = (*yearMonth >> 8) + 100;
  2060  001ED8  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2061  001EDA  6ED9               	movwf	fsr2l,c
  2062  001EDC  6ADA               	clrf	fsr2h,c
  2063  001EDE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2064  001EE2  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2065  001EE6  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2066  001EEA  6A48               	clrf	??_SetTimeFromRegs+1,c
  2067  001EEC  0E64               	movlw	100
  2068  001EEE  2447               	addwf	??_SetTimeFromRegs,w,c
  2069  001EF0  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2070  001EF2  0E00               	movlw	0
  2071  001EF4  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2072  001EF6  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2073                           
  2074                           ;main.c: 855: newTime.tm_mon = *yearMonth & 0xFF;
  2075  001EF8  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2076  001EFA  6ED9               	movwf	fsr2l,c
  2077  001EFC  6ADA               	clrf	fsr2h,c
  2078  001EFE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2079  001F02  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2080  001F06  5047               	movf	??_SetTimeFromRegs,w,c
  2081  001F08  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2082  001F0A  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2083                           
  2084                           ;main.c: 856: newTime.tm_mday = *daySec >> 8;
  2085  001F0C  5045               	movf	SetTimeFromRegs@daySec,w,c
  2086  001F0E  6ED9               	movwf	fsr2l,c
  2087  001F10  6ADA               	clrf	fsr2h,c
  2088  001F12  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2089  001F16  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2090  001F1A  5048               	movf	??_SetTimeFromRegs+1,w,c
  2091  001F1C  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2092  001F1E  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2093                           
  2094                           ;main.c: 857: newTime.tm_hour = *hourMin >> 8;
  2095  001F20  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2096  001F22  6ED9               	movwf	fsr2l,c
  2097  001F24  6ADA               	clrf	fsr2h,c
  2098  001F26  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2099  001F2A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2100  001F2E  5048               	movf	??_SetTimeFromRegs+1,w,c
  2101  001F30  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2102  001F32  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2103                           
  2104                           ;main.c: 858: newTime.tm_min = *hourMin & 0xFF;
  2105  001F34  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2106  001F36  6ED9               	movwf	fsr2l,c
  2107  001F38  6ADA               	clrf	fsr2h,c
  2108  001F3A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2109  001F3E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2110  001F42  5047               	movf	??_SetTimeFromRegs,w,c
  2111  001F44  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2112  001F46  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2113                           
  2114                           ;main.c: 859: newTime.tm_sec = *daySec & 0xFF;
  2115  001F48  5045               	movf	SetTimeFromRegs@daySec,w,c
  2116  001F4A  6ED9               	movwf	fsr2l,c
  2117  001F4C  6ADA               	clrf	fsr2h,c
  2118  001F4E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2119  001F52  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2120  001F56  5047               	movf	??_SetTimeFromRegs,w,c
  2121  001F58  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2122  001F5A  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2123                           
  2124                           ;main.c: 860: SetHourMin(&newTime.tm_hour, &newTime.tm_min, &newTime.tm_sec);
  2125  001F5C  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2126  001F5E  6E0B               	movwf	SetHourMin@newMin,c
  2127  001F60  0E4E               	movlw	low SetTimeFromRegs@newTime
  2128  001F62  6E0C               	movwf	SetHourMin@sec,c
  2129  001F64  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2130  001F66  0F04               	addlw	4
  2131  001F68  EC04  F00C         	call	_SetHourMin
  2132                           
  2133                           ;main.c: 861: time_t newRawTime = mktime(&newTime);
  2134  001F6C  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2135  001F6E  EC37  F003         	call	_mktime
  2136  001F72  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2137  001F76  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2138  001F7A  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2139  001F7E  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2140                           
  2141                           ;main.c: 862: SetTime(&newRawTime);
  2142  001F82  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2143  001F84  EC4D  F016         	call	_SetTime
  2144                           
  2145                           ;main.c: 863: LightStatusLed(0x05, 0, 0);
  2146  001F88  0E00               	movlw	0
  2147  001F8A  6E07               	movwf	LightStatusLed@on,c
  2148  001F8C  6E08               	movwf	LightStatusLed@blink,c
  2149  001F8E  0E05               	movlw	5
  2150  001F90  EC15  F00E         	call	_LightStatusLed
  2151                           
  2152                           ;main.c: 864: LoadNextEvent();
  2153  001F94  EF10  F00D         	goto	_LoadNextEvent	;wreg free
  2154  001F98  FFFF               	dw	65535	; errata NOP
  2155  001F9A                     __end_of_SetTimeFromRegs:
  2156                           	opt stack 0
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           intcon	equ	0xFF2
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           indf2	equ	0xFDF
  2168                           postinc2	equ	0xFDE
  2169                           postdec2	equ	0xFDD
  2170                           fsr2h	equ	0xFDA
  2171                           fsr2l	equ	0xFD9
  2172                           status	equ	0xFD8
  2173                           
  2174 ;; *************** function _mktime *****************
  2175 ;; Defined at:
  2176 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  timeptr         1    wreg     PTR struct tm
  2179 ;;		 -> SetTimeFromRegs@newTime(18), 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2182 ;;		 -> SetTimeFromRegs@newTime(18), 
  2183 ;;  tt              4   63[COMRAM] long 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  4   45[COMRAM] long 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         4       0       0       0       0       0       0
  2194 ;;      Locals:         5       0       0       0       0       0       0
  2195 ;;      Temps:         14       0       0       0       0       0       0
  2196 ;;      Totals:        23       0       0       0       0       0       0
  2197 ;;Total ram usage:       23 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    5
  2200 ;; This function calls:
  2201 ;;		_ymd_to_scalar
  2202 ;; This function is called by:
  2203 ;;		_SetTimeFromRegs
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text5
  2208  00066E                     __ptext5:
  2209                           	opt stack 0
  2210  00066E                     _mktime:
  2211                           	opt stack 22
  2212                           
  2213                           ;incstack = 0
  2214  00066E  FFFF               	dw	65535
  2215                           
  2216                           ;mktime@timeptr stored from wreg
  2217  000670  6E44               	movwf	mktime@timeptr,c
  2218  000672  5044               	movf	mktime@timeptr,w,c
  2219  000674  6ED9               	movwf	fsr2l,c
  2220  000676  6ADA               	clrf	fsr2h,c
  2221  000678  0E0A               	movlw	10
  2222  00067A  26D9               	addwf	fsr2l,f,c
  2223  00067C  0E01               	movlw	1
  2224  00067E  BEDB               	btfsc	plusw2,7,c
  2225  000680  D012               	goto	l1302
  2226  000682  50DB               	movf	plusw2,w,c
  2227  000684  E103               	bnz	u4400
  2228  000686  0E46               	movlw	70
  2229  000688  5CDE               	subwf	postinc2,w,c
  2230  00068A  E30D               	bnc	l1302
  2231  00068C                     u4400:
  2232  00068C  5044               	movf	mktime@timeptr,w,c
  2233  00068E  6ED9               	movwf	fsr2l,c
  2234  000690  6ADA               	clrf	fsr2h,c
  2235  000692  0E0A               	movlw	10
  2236  000694  26D9               	addwf	fsr2l,f,c
  2237  000696  0E01               	movlw	1
  2238  000698  BEDB               	btfsc	plusw2,7,c
  2239  00069A  D00B               	goto	l5453
  2240  00069C  50DB               	movf	plusw2,w,c
  2241  00069E  E103               	bnz	u4410
  2242  0006A0  0E8B               	movlw	139
  2243  0006A2  5CDE               	subwf	postinc2,w,c
  2244  0006A4  E306               	bnc	l5453
  2245  0006A6                     u4410:
  2246  0006A6                     l1302:
  2247  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2248  0006A8  6840               	setf	mktime@tt,c
  2249  0006AA  6841               	setf	mktime@tt+1,c
  2250  0006AC  6842               	setf	mktime@tt+2,c
  2251  0006AE  6843               	setf	mktime@tt+3,c
  2252  0006B0  D15C               	goto	l5463
  2253  0006B2                     l5453:
  2254  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2255  0006B4  5044               	movf	mktime@timeptr,w,c
  2256  0006B6  6ED9               	movwf	fsr2l,c
  2257  0006B8  6ADA               	clrf	fsr2h,c
  2258  0006BA  0E0A               	movlw	10
  2259  0006BC  26D9               	addwf	fsr2l,f,c
  2260  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2261  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2262  0006C6  0E6C               	movlw	108
  2263  0006C8  2432               	addwf	??_mktime,w,c
  2264  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2265  0006CC  0E07               	movlw	7
  2266  0006CE  2033               	addwfc	??_mktime+1,w,c
  2267  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2268  0006D2  5044               	movf	mktime@timeptr,w,c
  2269  0006D4  6ED9               	movwf	fsr2l,c
  2270  0006D6  6ADA               	clrf	fsr2h,c
  2271  0006D8  0E08               	movlw	8
  2272  0006DA  26D9               	addwf	fsr2l,f,c
  2273  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2274  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2275  0006E4  2834               	incf	??_mktime+2,w,c
  2276  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2277  0006E8  0E00               	movlw	0
  2278  0006EA  2035               	addwfc	??_mktime+3,w,c
  2279  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2280  0006EE  5044               	movf	mktime@timeptr,w,c
  2281  0006F0  6ED9               	movwf	fsr2l,c
  2282  0006F2  6ADA               	clrf	fsr2h,c
  2283  0006F4  0E06               	movlw	6
  2284  0006F6  26D9               	addwf	fsr2l,f,c
  2285  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2286  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2287  000700  EC32  F011         	call	_ymd_to_scalar	;wreg free
  2288  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2289  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2290  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2291  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2292  000714  0E07               	movlw	7
  2293  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2294  000718  0EB2               	movlw	178
  2295  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2296  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2297  00071E  0E01               	movlw	1
  2298  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2299  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2300  000724  6E22               	movwf	ymd_to_scalar@day,c
  2301  000726  EC32  F011         	call	_ymd_to_scalar	;wreg free
  2302  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2303  00072C  5E40               	subwf	mktime@tt,f,c
  2304  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2305  000730  5A41               	subwfb	mktime@tt+1,f,c
  2306  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2307  000734  5A42               	subwfb	mktime@tt+2,f,c
  2308  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2309  000738  5A43               	subwfb	mktime@tt+3,f,c
  2310  00073A  5044               	movf	mktime@timeptr,w,c
  2311  00073C  6ED9               	movwf	fsr2l,c
  2312  00073E  6ADA               	clrf	fsr2h,c
  2313  000740  0E04               	movlw	4
  2314  000742  26D9               	addwf	fsr2l,f,c
  2315  000744  CFDE F032          	movff	postinc2,??_mktime
  2316  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2317  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2318  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2319  000754  0E00               	movlw	0
  2320  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2321  000758  0EFF               	movlw	255
  2322  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2323  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2324  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2325  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2326  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2327  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2328  00076E  0E18               	movlw	24
  2329  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2330  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2331  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2332  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2333  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2334  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2335  000780  50F3               	movf	prodl,w,c
  2336  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2337  000784  50F4               	movf	prodh,w,c
  2338  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2339  000788  0E00               	movlw	0
  2340  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2341  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2342  00078E  50F3               	movf	prodl,w,c
  2343  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2344  000792  50F4               	movf	prodh,w,c
  2345  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2346  000796  0E00               	movlw	0
  2347  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2348  00079A  0E18               	movlw	24
  2349  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2350  00079E  50F3               	movf	prodl,w,c
  2351  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2352  0007A2  50F4               	movf	prodh,w,c
  2353  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2354  0007A6  0E00               	movlw	0
  2355  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2356  0007AA  50F3               	movf	prodl,w,c
  2357  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2358  0007AE  50F4               	movf	prodh,w,c
  2359  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2360  0007B2  0E00               	movlw	0
  2361  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2362  0007B6  50F3               	movf	prodl,w,c
  2363  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2364  0007BA  50F4               	movf	prodh,w,c
  2365  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2366  0007BE  0E18               	movlw	24
  2367  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2368  0007C2  50F3               	movf	prodl,w,c
  2369  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2370  0007C6  0E00               	movlw	0
  2371  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2372  0007CA  50F3               	movf	prodl,w,c
  2373  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2374  0007CE  0E00               	movlw	0
  2375  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2376  0007D2  50F3               	movf	prodl,w,c
  2377  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2378  0007D6  0E00               	movlw	0
  2379  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2380  0007DA  50F3               	movf	prodl,w,c
  2381  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2382  0007DE  5034               	movf	??_mktime+2,w,c
  2383  0007E0  243C               	addwf	??_mktime+10,w,c
  2384  0007E2  6E40               	movwf	mktime@tt,c
  2385  0007E4  5035               	movf	??_mktime+3,w,c
  2386  0007E6  203D               	addwfc	??_mktime+11,w,c
  2387  0007E8  6E41               	movwf	mktime@tt+1,c
  2388  0007EA  5036               	movf	??_mktime+4,w,c
  2389  0007EC  203E               	addwfc	??_mktime+12,w,c
  2390  0007EE  6E42               	movwf	mktime@tt+2,c
  2391  0007F0  5037               	movf	??_mktime+5,w,c
  2392  0007F2  203F               	addwfc	??_mktime+13,w,c
  2393  0007F4  6E43               	movwf	mktime@tt+3,c
  2394  0007F6  5044               	movf	mktime@timeptr,w,c
  2395  0007F8  6ED9               	movwf	fsr2l,c
  2396  0007FA  6ADA               	clrf	fsr2h,c
  2397  0007FC  0E02               	movlw	2
  2398  0007FE  26D9               	addwf	fsr2l,f,c
  2399  000800  CFDE F032          	movff	postinc2,??_mktime
  2400  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2401  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2402  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2403  000810  0E00               	movlw	0
  2404  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2405  000814  0EFF               	movlw	255
  2406  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2407  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2408  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2409  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2410  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2411  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2412  00082A  0E3C               	movlw	60
  2413  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2414  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2415  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2416  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2417  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2418  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2419  00083C  50F3               	movf	prodl,w,c
  2420  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2421  000840  50F4               	movf	prodh,w,c
  2422  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2423  000844  0E00               	movlw	0
  2424  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2425  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2426  00084A  50F3               	movf	prodl,w,c
  2427  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2428  00084E  50F4               	movf	prodh,w,c
  2429  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2430  000852  0E00               	movlw	0
  2431  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2432  000856  0E3C               	movlw	60
  2433  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2434  00085A  50F3               	movf	prodl,w,c
  2435  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2436  00085E  50F4               	movf	prodh,w,c
  2437  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2438  000862  0E00               	movlw	0
  2439  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2440  000866  50F3               	movf	prodl,w,c
  2441  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2442  00086A  50F4               	movf	prodh,w,c
  2443  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2444  00086E  0E00               	movlw	0
  2445  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2446  000872  50F3               	movf	prodl,w,c
  2447  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2448  000876  50F4               	movf	prodh,w,c
  2449  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2450  00087A  0E3C               	movlw	60
  2451  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2452  00087E  50F3               	movf	prodl,w,c
  2453  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2454  000882  0E00               	movlw	0
  2455  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2456  000886  50F3               	movf	prodl,w,c
  2457  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2458  00088A  0E00               	movlw	0
  2459  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2460  00088E  50F3               	movf	prodl,w,c
  2461  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2462  000892  0E00               	movlw	0
  2463  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2464  000896  50F3               	movf	prodl,w,c
  2465  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2466  00089A  5034               	movf	??_mktime+2,w,c
  2467  00089C  243C               	addwf	??_mktime+10,w,c
  2468  00089E  6E40               	movwf	mktime@tt,c
  2469  0008A0  5035               	movf	??_mktime+3,w,c
  2470  0008A2  203D               	addwfc	??_mktime+11,w,c
  2471  0008A4  6E41               	movwf	mktime@tt+1,c
  2472  0008A6  5036               	movf	??_mktime+4,w,c
  2473  0008A8  203E               	addwfc	??_mktime+12,w,c
  2474  0008AA  6E42               	movwf	mktime@tt+2,c
  2475  0008AC  5037               	movf	??_mktime+5,w,c
  2476  0008AE  203F               	addwfc	??_mktime+13,w,c
  2477  0008B0  6E43               	movwf	mktime@tt+3,c
  2478  0008B2  5044               	movf	mktime@timeptr,w,c
  2479  0008B4  6ED9               	movwf	fsr2l,c
  2480  0008B6  6ADA               	clrf	fsr2h,c
  2481  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2482  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2483  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2484  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2485  0008C8  0E00               	movlw	0
  2486  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2487  0008CC  0EFF               	movlw	255
  2488  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2489  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2490  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2491  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2492  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2493  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2494  0008E2  0E3C               	movlw	60
  2495  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2496  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2497  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2498  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2499  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2500  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2501  0008F4  50F3               	movf	prodl,w,c
  2502  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2503  0008F8  50F4               	movf	prodh,w,c
  2504  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2505  0008FC  0E00               	movlw	0
  2506  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2507  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2508  000902  50F3               	movf	prodl,w,c
  2509  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2510  000906  50F4               	movf	prodh,w,c
  2511  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2512  00090A  0E00               	movlw	0
  2513  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2514  00090E  0E3C               	movlw	60
  2515  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2516  000912  50F3               	movf	prodl,w,c
  2517  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2518  000916  50F4               	movf	prodh,w,c
  2519  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2520  00091A  0E00               	movlw	0
  2521  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2522  00091E  50F3               	movf	prodl,w,c
  2523  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2524  000922  50F4               	movf	prodh,w,c
  2525  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2526  000926  0E00               	movlw	0
  2527  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2528  00092A  50F3               	movf	prodl,w,c
  2529  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2530  00092E  50F4               	movf	prodh,w,c
  2531  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2532  000932  0E3C               	movlw	60
  2533  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2534  000936  50F3               	movf	prodl,w,c
  2535  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2536  00093A  0E00               	movlw	0
  2537  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2538  00093E  50F3               	movf	prodl,w,c
  2539  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2540  000942  0E00               	movlw	0
  2541  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2542  000946  50F3               	movf	prodl,w,c
  2543  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2544  00094A  0E00               	movlw	0
  2545  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2546  00094E  50F3               	movf	prodl,w,c
  2547  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2548  000952  5034               	movf	??_mktime+2,w,c
  2549  000954  243C               	addwf	??_mktime+10,w,c
  2550  000956  6E40               	movwf	mktime@tt,c
  2551  000958  5035               	movf	??_mktime+3,w,c
  2552  00095A  203D               	addwfc	??_mktime+11,w,c
  2553  00095C  6E41               	movwf	mktime@tt+1,c
  2554  00095E  5036               	movf	??_mktime+4,w,c
  2555  000960  203E               	addwfc	??_mktime+12,w,c
  2556  000962  6E42               	movwf	mktime@tt+2,c
  2557  000964  5037               	movf	??_mktime+5,w,c
  2558  000966  203F               	addwfc	??_mktime+13,w,c
  2559  000968  6E43               	movwf	mktime@tt+3,c
  2560  00096A                     l5463:
  2561  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2562  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2563  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2564  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2565  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2566  00097C  0012               	return		;funcret
  2567  00097E  FFFF               	dw	65535	; errata NOP
  2568  000980                     __end_of_mktime:
  2569                           	opt stack 0
  2570                           tblptru	equ	0xFF8
  2571                           tblptrh	equ	0xFF7
  2572                           tblptrl	equ	0xFF6
  2573                           tablat	equ	0xFF5
  2574                           prodh	equ	0xFF4
  2575                           prodl	equ	0xFF3
  2576                           intcon	equ	0xFF2
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1h	equ	0xFE2
  2581                           fsr1l	equ	0xFE1
  2582                           indf2	equ	0xFDF
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           plusw2	equ	0xFDB
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _ymd_to_scalar *****************
  2591 ;; Defined at:
  2592 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  yr              2   29[COMRAM] unsigned int 
  2595 ;;  mo              2   31[COMRAM] unsigned int 
  2596 ;;  day             2   33[COMRAM] unsigned int 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  scalar          4   41[COMRAM] long 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  4   29[COMRAM] long 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2608 ;;      Params:         6       0       0       0       0       0       0
  2609 ;;      Locals:         6       0       0       0       0       0       0
  2610 ;;      Temps:          4       0       0       0       0       0       0
  2611 ;;      Totals:        16       0       0       0       0       0       0
  2612 ;;Total ram usage:       16 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    4
  2615 ;; This function calls:
  2616 ;;		_isleap
  2617 ;;		_months_to_days
  2618 ;;		_years_to_days
  2619 ;; This function is called by:
  2620 ;;		_mktime
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           	psect	text6
  2625  002264                     __ptext6:
  2626                           	opt stack 0
  2627  002264                     _ymd_to_scalar:
  2628                           	opt stack 22
  2629                           
  2630                           ;incstack = 0
  2631  002264  FFFF               	dw	65535
  2632  002266  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2633  00226A  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2634  00226E  EC8C  F014         	call	_months_to_days	;wreg free
  2635  002272  5022               	movf	ymd_to_scalar@day,w,c
  2636  002274  260E               	addwf	?_months_to_days,f,c
  2637  002276  5023               	movf	ymd_to_scalar@day+1,w,c
  2638  002278  220F               	addwfc	?_months_to_days+1,f,c
  2639  00227A  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2640  00227E  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2641  002282  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2642  002284  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2643  002286  5021               	movf	ymd_to_scalar@mo+1,w,c
  2644  002288  E103               	bnz	u4190
  2645  00228A  0E03               	movlw	3
  2646  00228C  5C20               	subwf	ymd_to_scalar@mo,w,c
  2647  00228E  E321               	bnc	l5299
  2648  002290                     u4190:
  2649  002290  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2650  002294  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2651  002298  ECF6  F013         	call	_isleap	;wreg free
  2652  00229C  500C               	movf	?_isleap,w,c
  2653  00229E  100D               	iorwf	?_isleap+1,w,c
  2654  0022A0  E103               	bnz	l5295
  2655  0022A2  6A29               	clrf	_ymd_to_scalar$2189+1,c
  2656  0022A4  0E02               	movlw	2
  2657  0022A6  D002               	goto	L1
  2658  0022A8                     l5295:
  2659  0022A8  6A29               	clrf	_ymd_to_scalar$2189+1,c
  2660  0022AA  0E01               	movlw	1
  2661  0022AC                     L1:
  2662  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  2663  0022AE  6E28               	movwf	_ymd_to_scalar$2189,c
  2664  0022B0  C028  F024         	movff	_ymd_to_scalar$2189,??_ymd_to_scalar
  2665  0022B4  C029  F025         	movff	_ymd_to_scalar$2189+1,??_ymd_to_scalar+1
  2666  0022B8  0E00               	movlw	0
  2667  0022BA  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2668  0022BC  0EFF               	movlw	255
  2669  0022BE  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2670  0022C0  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2671  0022C2  5024               	movf	??_ymd_to_scalar,w,c
  2672  0022C4  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2673  0022C6  5025               	movf	??_ymd_to_scalar+1,w,c
  2674  0022C8  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2675  0022CA  5026               	movf	??_ymd_to_scalar+2,w,c
  2676  0022CC  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2677  0022CE  5027               	movf	??_ymd_to_scalar+3,w,c
  2678  0022D0  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2679  0022D2                     l5299:
  2680  0022D2  061E               	decf	ymd_to_scalar@yr,f,c
  2681  0022D4  A0D8               	btfss	status,0,c
  2682  0022D6  061F               	decf	ymd_to_scalar@yr+1,f,c
  2683  0022D8  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2684  0022DC  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2685  0022E0  EC94  F00D         	call	_years_to_days	;wreg free
  2686  0022E4  500E               	movf	?_years_to_days,w,c
  2687  0022E6  262A               	addwf	ymd_to_scalar@scalar,f,c
  2688  0022E8  500F               	movf	?_years_to_days+1,w,c
  2689  0022EA  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2690  0022EC  5010               	movf	?_years_to_days+2,w,c
  2691  0022EE  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2692  0022F0  5011               	movf	?_years_to_days+3,w,c
  2693  0022F2  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2694  0022F4  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2695  0022F8  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2696  0022FC  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2697  002300  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2698  002304  0012               	return		;funcret
  2699  002306  FFFF               	dw	65535	; errata NOP
  2700  002308                     __end_of_ymd_to_scalar:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon	equ	0xFF2
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postdec1	equ	0xFE5
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           plusw2	equ	0xFDB
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _years_to_days *****************
  2723 ;; Defined at:
  2724 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  yr              2   13[COMRAM] unsigned int 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  ret             4   25[COMRAM] long 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  4   13[COMRAM] long 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2738 ;;      Params:         4       0       0       0       0       0       0
  2739 ;;      Locals:         4       0       0       0       0       0       0
  2740 ;;      Temps:          8       0       0       0       0       0       0
  2741 ;;      Totals:        16       0       0       0       0       0       0
  2742 ;;Total ram usage:       16 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    3
  2745 ;; This function calls:
  2746 ;;		___lwdiv
  2747 ;; This function is called by:
  2748 ;;		_ymd_to_scalar
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text7
  2753  001B28                     __ptext7:
  2754                           	opt stack 0
  2755  001B28                     _years_to_days:
  2756                           	opt stack 22
  2757                           
  2758                           ;incstack = 0
  2759  001B28  FFFF               	dw	65535
  2760  001B2A  500E               	movf	years_to_days@yr,w,c
  2761  001B2C  6E12               	movwf	??_years_to_days& (0+255),c
  2762  001B2E  500F               	movf	years_to_days@yr+1,w,c
  2763  001B30  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  2764  001B32  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  2765  001B34  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  2766  001B36  0E6D               	movlw	109
  2767  001B38  0212               	mulwf	??_years_to_days& (0+255),c
  2768  001B3A  CFF3 F016          	movff	prodl,??_years_to_days+4
  2769  001B3E  CFF4 F017          	movff	prodh,??_years_to_days+5
  2770  001B42  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  2771  001B44  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  2772  001B46  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2773  001B48  50F3               	movf	prodl,w,c
  2774  001B4A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2775  001B4C  50F4               	movf	prodh,w,c
  2776  001B4E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2777  001B50  0E00               	movlw	0
  2778  001B52  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2779  001B54  0E01               	movlw	1
  2780  001B56  0212               	mulwf	??_years_to_days& (0+255),c
  2781  001B58  50F3               	movf	prodl,w,c
  2782  001B5A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2783  001B5C  50F4               	movf	prodh,w,c
  2784  001B5E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2785  001B60  0E00               	movlw	0
  2786  001B62  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2787  001B64  0E6D               	movlw	109
  2788  001B66  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2789  001B68  50F3               	movf	prodl,w,c
  2790  001B6A  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2791  001B6C  50F4               	movf	prodh,w,c
  2792  001B6E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2793  001B70  0E01               	movlw	1
  2794  001B72  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2795  001B74  50F3               	movf	prodl,w,c
  2796  001B76  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2797  001B78  50F4               	movf	prodh,w,c
  2798  001B7A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2799  001B7C  0E00               	movlw	0
  2800  001B7E  0212               	mulwf	??_years_to_days& (0+255),c
  2801  001B80  50F3               	movf	prodl,w,c
  2802  001B82  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2803  001B84  50F4               	movf	prodh,w,c
  2804  001B86  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2805  001B88  0E6D               	movlw	109
  2806  001B8A  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  2807  001B8C  50F3               	movf	prodl,w,c
  2808  001B8E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2809  001B90  0E01               	movlw	1
  2810  001B92  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2811  001B94  50F3               	movf	prodl,w,c
  2812  001B96  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2813  001B98  0E00               	movlw	0
  2814  001B9A  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2815  001B9C  50F3               	movf	prodl,w,c
  2816  001B9E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2817  001BA0  0E00               	movlw	0
  2818  001BA2  0212               	mulwf	??_years_to_days& (0+255),c
  2819  001BA4  50F3               	movf	prodl,w,c
  2820  001BA6  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2821  001BA8  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  2822  001BAC  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  2823  001BB0  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  2824  001BB4  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  2825  001BB8  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2826  001BBC  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2827  001BC0  6A0A               	clrf	___lwdiv@divisor+1,c
  2828  001BC2  0E64               	movlw	100
  2829  001BC4  6E09               	movwf	___lwdiv@divisor,c
  2830  001BC6  ECCC  F013         	call	___lwdiv	;wreg free
  2831  001BCA  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  2832  001BCE  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  2833  001BD2  90D8               	bcf	status,0,c
  2834  001BD4  3213               	rrcf	??_years_to_days+1,f,c
  2835  001BD6  3212               	rrcf	??_years_to_days,f,c
  2836  001BD8  90D8               	bcf	status,0,c
  2837  001BDA  3213               	rrcf	??_years_to_days+1,f,c
  2838  001BDC  3212               	rrcf	??_years_to_days,f,c
  2839  001BDE  5007               	movf	?___lwdiv,w,c
  2840  001BE0  5E12               	subwf	??_years_to_days,f,c
  2841  001BE2  5008               	movf	?___lwdiv+1,w,c
  2842  001BE4  5A13               	subwfb	??_years_to_days+1,f,c
  2843  001BE6  5012               	movf	??_years_to_days,w,c
  2844  001BE8  261A               	addwf	years_to_days@ret,f,c
  2845  001BEA  5013               	movf	??_years_to_days+1,w,c
  2846  001BEC  221B               	addwfc	years_to_days@ret+1,f,c
  2847  001BEE  0E00               	movlw	0
  2848  001BF0  221C               	addwfc	years_to_days@ret+2,f,c
  2849  001BF2  221D               	addwfc	years_to_days@ret+3,f,c
  2850  001BF4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  2851  001BF8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  2852  001BFC  0E01               	movlw	1
  2853  001BFE  6E0A               	movwf	___lwdiv@divisor+1,c
  2854  001C00  0E90               	movlw	144
  2855  001C02  6E09               	movwf	___lwdiv@divisor,c
  2856  001C04  ECCC  F013         	call	___lwdiv	;wreg free
  2857  001C08  5007               	movf	?___lwdiv,w,c
  2858  001C0A  261A               	addwf	years_to_days@ret,f,c
  2859  001C0C  5008               	movf	?___lwdiv+1,w,c
  2860  001C0E  221B               	addwfc	years_to_days@ret+1,f,c
  2861  001C10  0E00               	movlw	0
  2862  001C12  221C               	addwfc	years_to_days@ret+2,f,c
  2863  001C14  221D               	addwfc	years_to_days@ret+3,f,c
  2864  001C16  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  2865  001C1A  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  2866  001C1E  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  2867  001C22  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  2868  001C26  0C00               	retlw	0	;funcret
  2869  001C28  FFFF               	dw	65535	; errata NOP
  2870  001C2A                     __end_of_years_to_days:
  2871                           	opt stack 0
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           prodh	equ	0xFF4
  2877                           prodl	equ	0xFF3
  2878                           intcon	equ	0xFF2
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1h	equ	0xFE2
  2883                           fsr1l	equ	0xFE1
  2884                           indf2	equ	0xFDF
  2885                           postinc2	equ	0xFDE
  2886                           postdec2	equ	0xFDD
  2887                           plusw2	equ	0xFDB
  2888                           fsr2h	equ	0xFDA
  2889                           fsr2l	equ	0xFD9
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _months_to_days *****************
  2893 ;; Defined at:
  2894 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  month           2   13[COMRAM] unsigned int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  2   13[COMRAM] unsigned int 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2908 ;;      Params:         2       0       0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0
  2910 ;;      Temps:          4       0       0       0       0       0       0
  2911 ;;      Totals:         6       0       0       0       0       0       0
  2912 ;;Total ram usage:        6 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    3
  2915 ;; This function calls:
  2916 ;;		___lwdiv
  2917 ;; This function is called by:
  2918 ;;		_ymd_to_scalar
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text8
  2923  002918                     __ptext8:
  2924                           	opt stack 0
  2925  002918                     _months_to_days:
  2926                           	opt stack 22
  2927                           
  2928                           ;incstack = 0
  2929  002918  FFFF               	dw	65535
  2930  00291A  0EF1               	movlw	241
  2931  00291C  6E10               	movwf	??_months_to_days& (0+255),c
  2932  00291E  0E0B               	movlw	11
  2933  002920  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  2934  002922  5010               	movf	??_months_to_days& (0+255),w,c
  2935  002924  020E               	mulwf	months_to_days@month,c
  2936  002926  CFF3 F012          	movff	prodl,??_months_to_days+2
  2937  00292A  CFF4 F013          	movff	prodh,??_months_to_days+3
  2938  00292E  020F               	mulwf	months_to_days@month+1,c
  2939  002930  50F3               	movf	prodl,w,c
  2940  002932  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2941  002934  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  2942  002936  020E               	mulwf	months_to_days@month,c
  2943  002938  50F3               	movf	prodl,w,c
  2944  00293A  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  2945  00293C  0E41               	movlw	65
  2946  00293E  2412               	addwf	??_months_to_days+2,w,c
  2947  002940  6E07               	movwf	___lwdiv@dividend,c
  2948  002942  0EF4               	movlw	244
  2949  002944  2013               	addwfc	??_months_to_days+3,w,c
  2950  002946  6E08               	movwf	___lwdiv@dividend+1,c
  2951  002948  6A0A               	clrf	___lwdiv@divisor+1,c
  2952  00294A  0E64               	movlw	100
  2953  00294C  6E09               	movwf	___lwdiv@divisor,c
  2954  00294E  ECCC  F013         	call	___lwdiv	;wreg free
  2955  002952  C007  F00E         	movff	?___lwdiv,?_months_to_days
  2956  002956  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  2957  00295A  0012               	return		;funcret
  2958  00295C  FFFF               	dw	65535	; errata NOP
  2959  00295E                     __end_of_months_to_days:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           intcon	equ	0xFF2
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           postdec1	equ	0xFE5
  2971                           fsr1h	equ	0xFE2
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           postdec2	equ	0xFDD
  2976                           plusw2	equ	0xFDB
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function ___lwdiv *****************
  2982 ;; Defined at:
  2983 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  dividend        2    6[COMRAM] unsigned int 
  2986 ;;  divisor         2    8[COMRAM] unsigned int 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  quotient        2   11[COMRAM] unsigned int 
  2989 ;;  counter         1   10[COMRAM] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  2    6[COMRAM] unsigned int 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2999 ;;      Params:         4       0       0       0       0       0       0
  3000 ;;      Locals:         3       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0
  3002 ;;      Totals:         7       0       0       0       0       0       0
  3003 ;;Total ram usage:        7 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    2
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_months_to_days
  3010 ;;		_years_to_days
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text9
  3015  002798                     __ptext9:
  3016                           	opt stack 0
  3017  002798                     ___lwdiv:
  3018                           	opt stack 22
  3019                           
  3020                           ;incstack = 0
  3021  002798  FFFF               	dw	65535
  3022  00279A  6A0C               	clrf	___lwdiv@quotient,c
  3023  00279C  6A0D               	clrf	___lwdiv@quotient+1,c
  3024  00279E  5009               	movf	___lwdiv@divisor,w,c
  3025  0027A0  100A               	iorwf	___lwdiv@divisor+1,w,c
  3026  0027A2  E01E               	bz	l1256
  3027  0027A4  0E01               	movlw	1
  3028  0027A6  6E0B               	movwf	___lwdiv@counter,c
  3029  0027A8  D005               	goto	l5165
  3030  0027AA                     l5163:
  3031  0027AA  FFFF               	dw	65535	; assembler added errata NOP
  3032  0027AC  90D8               	bcf	status,0,c
  3033  0027AE  3609               	rlcf	___lwdiv@divisor,f,c
  3034  0027B0  360A               	rlcf	___lwdiv@divisor+1,f,c
  3035  0027B2  2A0B               	incf	___lwdiv@counter,f,c
  3036  0027B4                     l5165:
  3037  0027B4  FFFF               	dw	65535	; assembler added errata NOP
  3038  0027B6  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3039  0027B8  D7F8               	goto	l5163
  3040  0027BA                     l5167:
  3041  0027BA  FFFF               	dw	65535	; assembler added errata NOP
  3042  0027BC  90D8               	bcf	status,0,c
  3043  0027BE  360C               	rlcf	___lwdiv@quotient,f,c
  3044  0027C0  360D               	rlcf	___lwdiv@quotient+1,f,c
  3045  0027C2  5009               	movf	___lwdiv@divisor,w,c
  3046  0027C4  5C07               	subwf	___lwdiv@dividend,w,c
  3047  0027C6  500A               	movf	___lwdiv@divisor+1,w,c
  3048  0027C8  5808               	subwfb	___lwdiv@dividend+1,w,c
  3049  0027CA  E305               	bnc	l5175
  3050  0027CC  5009               	movf	___lwdiv@divisor,w,c
  3051  0027CE  5E07               	subwf	___lwdiv@dividend,f,c
  3052  0027D0  500A               	movf	___lwdiv@divisor+1,w,c
  3053  0027D2  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3054  0027D4  800C               	bsf	___lwdiv@quotient,0,c
  3055  0027D6                     l5175:
  3056  0027D6  90D8               	bcf	status,0,c
  3057  0027D8  320A               	rrcf	___lwdiv@divisor+1,f,c
  3058  0027DA  3209               	rrcf	___lwdiv@divisor,f,c
  3059  0027DC  2E0B               	decfsz	___lwdiv@counter,f,c
  3060  0027DE  D7ED               	goto	l5167
  3061  0027E0                     l1256:
  3062  0027E0  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3063  0027E4  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3064  0027E8  0012               	return		;funcret
  3065  0027EA  FFFF               	dw	65535	; errata NOP
  3066  0027EC                     __end_of___lwdiv:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           intcon	equ	0xFF2
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           plusw2	equ	0xFDB
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _isleap *****************
  3089 ;; Defined at:
  3090 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  yr              2   11[COMRAM] unsigned int 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  2   11[COMRAM] int 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2, status,0, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3104 ;;      Params:         2       0       0       0       0       0       0
  3105 ;;      Locals:         1       0       0       0       0       0       0
  3106 ;;      Temps:          1       0       0       0       0       0       0
  3107 ;;      Totals:         4       0       0       0       0       0       0
  3108 ;;Total ram usage:        4 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    3
  3111 ;; This function calls:
  3112 ;;		___lwmod
  3113 ;; This function is called by:
  3114 ;;		_ymd_to_scalar
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text10
  3119  0027EC                     __ptext10:
  3120                           	opt stack 0
  3121  0027EC                     _isleap:
  3122                           	opt stack 22
  3123                           
  3124                           ;incstack = 0
  3125  0027EC  FFFF               	dw	65535
  3126  0027EE  0E01               	movlw	1
  3127  0027F0  6E0F               	movwf	_isleap$2176,c
  3128  0027F2  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3129  0027F6  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3130  0027FA  6E0A               	movwf	___lwmod@divisor+1,c
  3131  0027FC  0E90               	movlw	144
  3132  0027FE  6E09               	movwf	___lwmod@divisor,c
  3133  002800  EC68  F014         	call	___lwmod	;wreg free
  3134  002804  5007               	movf	?___lwmod,w,c
  3135  002806  1008               	iorwf	?___lwmod+1,w,c
  3136  002808  E012               	bz	l1282
  3137  00280A  C00C  F00E         	movff	isleap@yr,??_isleap
  3138  00280E  0E03               	movlw	3
  3139  002810  160E               	andwf	??_isleap,f,c
  3140  002812  E10C               	bnz	l5155
  3141  002814  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3142  002818  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3143  00281C  6A0A               	clrf	___lwmod@divisor+1,c
  3144  00281E  0E64               	movlw	100
  3145  002820  6E09               	movwf	___lwmod@divisor,c
  3146  002822  EC68  F014         	call	___lwmod	;wreg free
  3147  002826  5007               	movf	?___lwmod,w,c
  3148  002828  1008               	iorwf	?___lwmod+1,w,c
  3149  00282A  E101               	bnz	l1282
  3150  00282C                     l5155:
  3151  00282C  6A0F               	clrf	_isleap$2176,c
  3152  00282E                     l1282:
  3153  00282E  C00F  F00C         	movff	_isleap$2176,?_isleap
  3154  002832  6A0D               	clrf	?_isleap+1,c
  3155  002834  0012               	return		;funcret
  3156  002836  FFFF               	dw	65535	; errata NOP
  3157  002838                     __end_of_isleap:
  3158                           	opt stack 0
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           intcon	equ	0xFF2
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           indf2	equ	0xFDF
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           plusw2	equ	0xFDB
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function ___lwmod *****************
  3180 ;; Defined at:
  3181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  dividend        2    6[COMRAM] unsigned int 
  3184 ;;  divisor         2    8[COMRAM] unsigned int 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  counter         1   10[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  2    6[COMRAM] unsigned int 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         4       0       0       0       0       0       0
  3197 ;;      Locals:         1       0       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0
  3199 ;;      Totals:         5       0       0       0       0       0       0
  3200 ;;Total ram usage:        5 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    2
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_isleap
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text11
  3211  0028D0                     __ptext11:
  3212                           	opt stack 0
  3213  0028D0                     ___lwmod:
  3214                           	opt stack 22
  3215                           
  3216                           ;incstack = 0
  3217  0028D0  FFFF               	dw	65535
  3218  0028D2  5009               	movf	___lwmod@divisor,w,c
  3219  0028D4  100A               	iorwf	___lwmod@divisor+1,w,c
  3220  0028D6  E01A               	bz	l1266
  3221  0028D8  0E01               	movlw	1
  3222  0028DA  6E0B               	movwf	___lwmod@counter,c
  3223  0028DC  D005               	goto	l5185
  3224  0028DE                     l5183:
  3225  0028DE  FFFF               	dw	65535	; assembler added errata NOP
  3226  0028E0  90D8               	bcf	status,0,c
  3227  0028E2  3609               	rlcf	___lwmod@divisor,f,c
  3228  0028E4  360A               	rlcf	___lwmod@divisor+1,f,c
  3229  0028E6  2A0B               	incf	___lwmod@counter,f,c
  3230  0028E8                     l5185:
  3231  0028E8  FFFF               	dw	65535	; assembler added errata NOP
  3232  0028EA  AE0A               	btfss	___lwmod@divisor+1,7,c
  3233  0028EC  D7F8               	goto	l5183
  3234  0028EE                     l5187:
  3235  0028EE  FFFF               	dw	65535	; assembler added errata NOP
  3236  0028F0  5009               	movf	___lwmod@divisor,w,c
  3237  0028F2  5C07               	subwf	___lwmod@dividend,w,c
  3238  0028F4  500A               	movf	___lwmod@divisor+1,w,c
  3239  0028F6  5808               	subwfb	___lwmod@dividend+1,w,c
  3240  0028F8  E304               	bnc	l5191
  3241  0028FA  5009               	movf	___lwmod@divisor,w,c
  3242  0028FC  5E07               	subwf	___lwmod@dividend,f,c
  3243  0028FE  500A               	movf	___lwmod@divisor+1,w,c
  3244  002900  5A08               	subwfb	___lwmod@dividend+1,f,c
  3245  002902                     l5191:
  3246  002902  90D8               	bcf	status,0,c
  3247  002904  320A               	rrcf	___lwmod@divisor+1,f,c
  3248  002906  3209               	rrcf	___lwmod@divisor,f,c
  3249  002908  2E0B               	decfsz	___lwmod@counter,f,c
  3250  00290A  D7F1               	goto	l5187
  3251  00290C                     l1266:
  3252  00290C  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3253  002910  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3254  002914  0012               	return		;funcret
  3255  002916  FFFF               	dw	65535	; errata NOP
  3256  002918                     __end_of___lwmod:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           intcon	equ	0xFF2
  3265                           postinc0	equ	0xFEE
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1h	equ	0xFE2
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           plusw2	equ	0xFDB
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _SetTime *****************
  3279 ;; Defined at:
  3280 ;;		line 169 in file "user.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  newTime         1    wreg     PTR long 
  3283 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  newTime         1    6[COMRAM] PTR long 
  3286 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr2l, fsr2h, status,2
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3296 ;;      Params:         0       0       0       0       0       0       0
  3297 ;;      Locals:         1       0       0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0
  3299 ;;      Totals:         1       0       0       0       0       0       0
  3300 ;;Total ram usage:        1 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    2
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_SetTimeFromRegs
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text12
  3311  002C9A                     __ptext12:
  3312                           	opt stack 0
  3313  002C9A                     _SetTime:
  3314                           	opt stack 25
  3315                           
  3316                           ;incstack = 0
  3317  002C9A  FFFF               	dw	65535
  3318                           
  3319                           ;SetTime@newTime stored from wreg
  3320  002C9C  6E07               	movwf	SetTime@newTime,c
  3321                           
  3322                           ;user.c: 171: currentTime = *newTime;
  3323  002C9E  5007               	movf	SetTime@newTime,w,c
  3324  002CA0  6ED9               	movwf	fsr2l,c
  3325  002CA2  6ADA               	clrf	fsr2h,c
  3326  002CA4  CFDE F0DB          	movff	postinc2,_currentTime
  3327  002CA8  CFDE F0DC          	movff	postinc2,_currentTime+1
  3328  002CAC  CFDE F0DD          	movff	postinc2,_currentTime+2
  3329  002CB0  CFDE F0DE          	movff	postinc2,_currentTime+3
  3330  002CB4  0012               	return		;funcret
  3331  002CB6  FFFF               	dw	65535	; errata NOP
  3332  002CB8                     __end_of_SetTime:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           prodh	equ	0xFF4
  3339                           prodl	equ	0xFF3
  3340                           intcon	equ	0xFF2
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           fsr1h	equ	0xFE2
  3345                           fsr1l	equ	0xFE1
  3346                           indf2	equ	0xFDF
  3347                           postinc2	equ	0xFDE
  3348                           postdec2	equ	0xFDD
  3349                           plusw2	equ	0xFDB
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _SetHourMin *****************
  3355 ;; Defined at:
  3356 ;;		line 277 in file "interrupts.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  newHour         1    wreg     PTR int 
  3359 ;;		 -> SetTimeFromRegs@newTime(18), 
  3360 ;;  newMin          1   10[COMRAM] PTR int 
  3361 ;;		 -> SetTimeFromRegs@newTime(18), 
  3362 ;;  sec             1   11[COMRAM] PTR int 
  3363 ;;		 -> SetTimeFromRegs@newTime(18), 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  newHour         1   24[COMRAM] PTR int 
  3366 ;;		 -> SetTimeFromRegs@newTime(18), 
  3367 ;;  secToNext6Se    1   26[COMRAM] unsigned char 
  3368 ;;  tmpSec          1   25[COMRAM] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3378 ;;      Params:         2       0       0       0       0       0       0
  3379 ;;      Locals:         3       0       0       0       0       0       0
  3380 ;;      Temps:         12       0       0       0       0       0       0
  3381 ;;      Totals:        17       0       0       0       0       0       0
  3382 ;;Total ram usage:       17 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    3
  3385 ;; This function calls:
  3386 ;;		___lbdiv
  3387 ;;		___lbmod
  3388 ;; This function is called by:
  3389 ;;		_SetTimeFromRegs
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text13
  3394  001808                     __ptext13:
  3395                           	opt stack 0
  3396  001808                     _SetHourMin:
  3397                           	opt stack 24
  3398                           
  3399                           ;incstack = 0
  3400  001808  FFFF               	dw	65535
  3401                           
  3402                           ;SetHourMin@newHour stored from wreg
  3403  00180A  6E19               	movwf	SetHourMin@newHour,c
  3404                           
  3405                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
  3406  00180C  9ED5               	bcf	4053,7,c	;volatile
  3407                           
  3408                           ;interrupts.c: 281: globalHours = *newHour;
  3409  00180E  5019               	movf	SetHourMin@newHour,w,c
  3410  001810  6ED9               	movwf	fsr2l,c
  3411  001812  6ADA               	clrf	fsr2h,c
  3412  001814  50DF               	movf	indf2,w,c
  3413  001816  6E77               	movwf	_globalHours,c	;volatile
  3414                           
  3415                           ;interrupts.c: 282: globalMinutes = *newMin;
  3416  001818  500B               	movf	SetHourMin@newMin,w,c
  3417  00181A  6ED9               	movwf	fsr2l,c
  3418  00181C  6ADA               	clrf	fsr2h,c
  3419  00181E  50DF               	movf	indf2,w,c
  3420  001820  6E74               	movwf	_globalMinutes,c	;volatile
  3421                           
  3422                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
  3423  001822  5077               	movf	_globalHours,w,c	;volatile
  3424  001824  0D3C               	mullw	60
  3425  001826  5074               	movf	_globalMinutes,w,c	;volatile
  3426  001828  24F3               	addwf	prodl,w,c
  3427  00182A  0100               	movlb	0	; () banked
  3428  00182C  6FC4               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
  3429  00182E  0E00               	movlw	0
  3430  001830  20F4               	addwfc	prodh,w,c
  3431  001832  6FC5               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
  3435  001834  500C               	movf	SetHourMin@sec,w,c
  3436  001836  6ED9               	movwf	fsr2l,c
  3437  001838  6ADA               	clrf	fsr2h,c
  3438  00183A  50DF               	movf	indf2,w,c
  3439  00183C  6E1A               	movwf	SetHourMin@tmpSec,c
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
  3443  00183E  0E06               	movlw	6
  3444  001840  6E07               	movwf	___lbdiv@divisor,c
  3445  001842  501A               	movf	SetHourMin@tmpSec,w,c
  3446  001844  EC16  F015         	call	___lbdiv
  3447  001848  0100               	movlb	0	; () banked
  3448  00184A  6FCE               	movwf	__6sCounter& (0+255),b	;volatile
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
  3452  00184C  0E06               	movlw	6
  3453  00184E  6E07               	movwf	___lbmod@divisor,c
  3454  001850  501A               	movf	SetHourMin@tmpSec,w,c
  3455  001852  ECD6  F015         	call	___lbmod
  3456  001856  6E0D               	movwf	??_SetHourMin& (0+255),c
  3457  001858  500D               	movf	??_SetHourMin,w,c
  3458  00185A  0806               	sublw	6
  3459  00185C  6E1B               	movwf	SetHourMin@secToNext6Sec,c
  3460                           
  3461                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + 30) * secToNext6Sec)&0xFF)));
  3462  00185E  C01B  F00D         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
  3463  001862  6A0E               	clrf	(??_SetHourMin+1)& (0+255),c
  3464  001864  6A0F               	clrf	(??_SetHourMin+2)& (0+255),c
  3465  001866  6A10               	clrf	(??_SetHourMin+3)& (0+255),c
  3466  001868  0EBD               	movlw	189
  3467  00186A  020D               	mulwf	??_SetHourMin& (0+255),c
  3468  00186C  CFF3 F011          	movff	prodl,??_SetHourMin+4
  3469  001870  CFF4 F012          	movff	prodh,??_SetHourMin+5
  3470  001874  6A13               	clrf	(??_SetHourMin+6)& (0+255),c
  3471  001876  6A14               	clrf	(??_SetHourMin+7)& (0+255),c
  3472  001878  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3473  00187A  50F3               	movf	prodl,w,c
  3474  00187C  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3475  00187E  50F4               	movf	prodh,w,c
  3476  001880  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3477  001882  0E00               	movlw	0
  3478  001884  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3479  001886  0ED9               	movlw	217
  3480  001888  020D               	mulwf	??_SetHourMin& (0+255),c
  3481  00188A  50F3               	movf	prodl,w,c
  3482  00188C  2612               	addwf	(??_SetHourMin+5)& (0+255),f,c
  3483  00188E  50F4               	movf	prodh,w,c
  3484  001890  2213               	addwfc	(??_SetHourMin+6)& (0+255),f,c
  3485  001892  0E00               	movlw	0
  3486  001894  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3487  001896  0EBD               	movlw	189
  3488  001898  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3489  00189A  50F3               	movf	prodl,w,c
  3490  00189C  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3491  00189E  50F4               	movf	prodh,w,c
  3492  0018A0  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3493  0018A2  0ED9               	movlw	217
  3494  0018A4  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3495  0018A6  50F3               	movf	prodl,w,c
  3496  0018A8  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3497  0018AA  50F4               	movf	prodh,w,c
  3498  0018AC  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3499  0018AE  0EFF               	movlw	255
  3500  0018B0  020D               	mulwf	??_SetHourMin& (0+255),c
  3501  0018B2  50F3               	movf	prodl,w,c
  3502  0018B4  2613               	addwf	(??_SetHourMin+6)& (0+255),f,c
  3503  0018B6  50F4               	movf	prodh,w,c
  3504  0018B8  2214               	addwfc	(??_SetHourMin+7)& (0+255),f,c
  3505  0018BA  0EBD               	movlw	189
  3506  0018BC  0210               	mulwf	(??_SetHourMin+3)& (0+255),c
  3507  0018BE  50F3               	movf	prodl,w,c
  3508  0018C0  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3509  0018C2  0ED9               	movlw	217
  3510  0018C4  020F               	mulwf	(??_SetHourMin+2)& (0+255),c
  3511  0018C6  50F3               	movf	prodl,w,c
  3512  0018C8  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3513  0018CA  0EFF               	movlw	255
  3514  0018CC  020E               	mulwf	(??_SetHourMin+1)& (0+255),c
  3515  0018CE  50F3               	movf	prodl,w,c
  3516  0018D0  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3517  0018D2  0EFF               	movlw	255
  3518  0018D4  020D               	mulwf	??_SetHourMin& (0+255),c
  3519  0018D6  50F3               	movf	prodl,w,c
  3520  0018D8  2614               	addwf	(??_SetHourMin+7)& (0+255),f,c
  3521  0018DA  0E00               	movlw	0
  3522  0018DC  2411               	addwf	??_SetHourMin+4,w,c
  3523  0018DE  6E15               	movwf	(??_SetHourMin+8)& (0+255),c
  3524  0018E0  0E00               	movlw	0
  3525  0018E2  2012               	addwfc	??_SetHourMin+5,w,c
  3526  0018E4  6E16               	movwf	(??_SetHourMin+9)& (0+255),c
  3527  0018E6  0E01               	movlw	1
  3528  0018E8  2013               	addwfc	??_SetHourMin+6,w,c
  3529  0018EA  6E17               	movwf	(??_SetHourMin+10)& (0+255),c
  3530  0018EC  0E00               	movlw	0
  3531  0018EE  2014               	addwfc	??_SetHourMin+7,w,c
  3532  0018F0  6E18               	movwf	(??_SetHourMin+11)& (0+255),c
  3533  0018F2  C016  F015         	movff	??_SetHourMin+9,??_SetHourMin+8
  3534  0018F6  C017  F016         	movff	??_SetHourMin+10,??_SetHourMin+9
  3535  0018FA  C018  F017         	movff	??_SetHourMin+11,??_SetHourMin+10
  3536  0018FE  6A18               	clrf	??_SetHourMin+11,c
  3537  001900  BE17               	btfsc	??_SetHourMin+10,7,c
  3538  001902  6818               	setf	??_SetHourMin+11,c
  3539  001904  5015               	movf	??_SetHourMin+8,w,c
  3540  001906  6ED7               	movwf	4055,c	;volatile
  3541  001908  501B               	movf	SetHourMin@secToNext6Sec,w,c
  3542  00190A  0DBD               	mullw	189
  3543  00190C  CFF3 FFD6          	movff	prodl,4054	;volatile
  3544                           
  3545                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
  3546  001910  8ED5               	bsf	4053,7,c	;volatile
  3547  001912  0012               	return		;funcret
  3548  001914  FFFF               	dw	65535	; errata NOP
  3549  001916                     __end_of_SetHourMin:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           postdec1	equ	0xFE5
  3561                           fsr1h	equ	0xFE2
  3562                           fsr1l	equ	0xFE1
  3563                           indf2	equ	0xFDF
  3564                           postinc2	equ	0xFDE
  3565                           postdec2	equ	0xFDD
  3566                           plusw2	equ	0xFDB
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function ___lbmod *****************
  3572 ;; Defined at:
  3573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  dividend        1    wreg     unsigned char 
  3576 ;;  divisor         1    6[COMRAM] unsigned char 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  dividend        1    7[COMRAM] unsigned char 
  3579 ;;  rem             1    9[COMRAM] unsigned char 
  3580 ;;  counter         1    8[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      unsigned char 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : F/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3590 ;;      Params:         1       0       0       0       0       0       0
  3591 ;;      Locals:         3       0       0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0
  3593 ;;      Totals:         4       0       0       0       0       0       0
  3594 ;;Total ram usage:        4 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_SetHourMin
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text14
  3605  002BAC                     __ptext14:
  3606                           	opt stack 0
  3607  002BAC                     ___lbmod:
  3608                           	opt stack 24
  3609                           
  3610                           ;incstack = 0
  3611  002BAC  FFFF               	dw	65535
  3612                           
  3613                           ;___lbmod@dividend stored from wreg
  3614  002BAE  6E08               	movwf	___lbmod@dividend,c
  3615  002BB0  0E08               	movlw	8
  3616  002BB2  6E09               	movwf	___lbmod@counter,c
  3617  002BB4  6A0A               	clrf	___lbmod@rem,c
  3618  002BB6                     l5273:
  3619  002BB6  FFFF               	dw	65535	; assembler added errata NOP
  3620  002BB8  90D8               	bcf	status,0,c
  3621  002BBA  3408               	rlcf	___lbmod@dividend,w,c
  3622  002BBC  340A               	rlcf	___lbmod@rem,w,c
  3623  002BBE  6E0A               	movwf	___lbmod@rem,c
  3624  002BC0  90D8               	bcf	status,0,c
  3625  002BC2  3608               	rlcf	___lbmod@dividend,f,c
  3626  002BC4  5007               	movf	___lbmod@divisor,w,c
  3627  002BC6  5C0A               	subwf	___lbmod@rem,w,c
  3628  002BC8  E302               	bnc	l5281
  3629  002BCA  5007               	movf	___lbmod@divisor,w,c
  3630  002BCC  5E0A               	subwf	___lbmod@rem,f,c
  3631  002BCE                     l5281:
  3632  002BCE  2E09               	decfsz	___lbmod@counter,f,c
  3633  002BD0  D7F2               	goto	l5273
  3634  002BD2  500A               	movf	___lbmod@rem,w,c
  3635  002BD4  0012               	return		;funcret
  3636  002BD6  FFFF               	dw	65535	; errata NOP
  3637  002BD8                     __end_of___lbmod:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           plusw2	equ	0xFDB
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function ___lbdiv *****************
  3660 ;; Defined at:
  3661 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  dividend        1    wreg     unsigned char 
  3664 ;;  divisor         1    6[COMRAM] unsigned char 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  dividend        1    7[COMRAM] unsigned char 
  3667 ;;  quotient        1    9[COMRAM] unsigned char 
  3668 ;;  counter         1    8[COMRAM] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      unsigned char 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0
  3673 ;; Tracked objects:
  3674 ;;		On entry : F/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3678 ;;      Params:         1       0       0       0       0       0       0
  3679 ;;      Locals:         3       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0
  3681 ;;      Totals:         4       0       0       0       0       0       0
  3682 ;;Total ram usage:        4 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    2
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_SetHourMin
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text15
  3693  002A2C                     __ptext15:
  3694                           	opt stack 0
  3695  002A2C                     ___lbdiv:
  3696                           	opt stack 24
  3697                           
  3698                           ;incstack = 0
  3699  002A2C  FFFF               	dw	65535
  3700                           
  3701                           ;___lbdiv@dividend stored from wreg
  3702  002A2E  6E08               	movwf	___lbdiv@dividend,c
  3703  002A30  6A0A               	clrf	___lbdiv@quotient,c
  3704  002A32  5007               	movf	___lbdiv@divisor,w,c
  3705  002A34  E017               	bz	l5265
  3706  002A36  0E01               	movlw	1
  3707  002A38  6E09               	movwf	___lbdiv@counter,c
  3708  002A3A  D004               	goto	l5253
  3709  002A3C                     l5249:
  3710  002A3C  FFFF               	dw	65535	; assembler added errata NOP
  3711  002A3E  90D8               	bcf	status,0,c
  3712  002A40  3607               	rlcf	___lbdiv@divisor,f,c
  3713  002A42  2A09               	incf	___lbdiv@counter,f,c
  3714  002A44                     l5253:
  3715  002A44  FFFF               	dw	65535	; assembler added errata NOP
  3716  002A46  AE07               	btfss	___lbdiv@divisor,7,c
  3717  002A48  D7F9               	goto	l5249
  3718  002A4A                     l5255:
  3719  002A4A  FFFF               	dw	65535	; assembler added errata NOP
  3720  002A4C  90D8               	bcf	status,0,c
  3721  002A4E  360A               	rlcf	___lbdiv@quotient,f,c
  3722  002A50  5007               	movf	___lbdiv@divisor,w,c
  3723  002A52  5C08               	subwf	___lbdiv@dividend,w,c
  3724  002A54  E303               	bnc	l5261
  3725  002A56  5007               	movf	___lbdiv@divisor,w,c
  3726  002A58  5E08               	subwf	___lbdiv@dividend,f,c
  3727  002A5A  800A               	bsf	___lbdiv@quotient,0,c
  3728  002A5C                     l5261:
  3729  002A5C  90D8               	bcf	status,0,c
  3730  002A5E  3207               	rrcf	___lbdiv@divisor,f,c
  3731  002A60  2E09               	decfsz	___lbdiv@counter,f,c
  3732  002A62  D7F3               	goto	l5255
  3733  002A64                     l5265:
  3734  002A64  500A               	movf	___lbdiv@quotient,w,c
  3735  002A66  0012               	return		;funcret
  3736  002A68  FFFF               	dw	65535	; errata NOP
  3737  002A6A                     __end_of___lbdiv:
  3738                           	opt stack 0
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           intcon	equ	0xFF2
  3746                           postinc0	equ	0xFEE
  3747                           wreg	equ	0xFE8
  3748                           postdec1	equ	0xFE5
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           postdec2	equ	0xFDD
  3754                           plusw2	equ	0xFDB
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _ModbusGetLastCommand *****************
  3760 ;; Defined at:
  3761 ;;		line 832 in file "ModbusRtu.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  address         1    wreg     PTR unsigned short 
  3764 ;;		 -> io_poll@lastAddress(2), 
  3765 ;;  count           1    6[COMRAM] PTR unsigned short 
  3766 ;;		 -> io_poll@lastEndAddress(2), 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  address         1    8[COMRAM] PTR unsigned short 
  3769 ;;		 -> io_poll@lastAddress(2), 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      PTR unsigned char 
  3772 ;; Registers used:
  3773 ;;		wreg, fsr2l, fsr2h, status,2
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3779 ;;      Params:         2       0       0       0       0       0       0
  3780 ;;      Locals:         1       0       0       0       0       0       0
  3781 ;;      Temps:          0       0       0       0       0       0       0
  3782 ;;      Totals:         3       0       0       0       0       0       0
  3783 ;;Total ram usage:        3 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    2
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_io_poll
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text16
  3794  002B7E                     __ptext16:
  3795                           	opt stack 0
  3796  002B7E                     _ModbusGetLastCommand:
  3797                           	opt stack 27
  3798                           
  3799                           ;incstack = 0
  3800  002B7E  FFFF               	dw	65535
  3801                           
  3802                           ;ModbusGetLastCommand@address stored from wreg
  3803  002B80  6E09               	movwf	ModbusGetLastCommand@address,c
  3804                           
  3805                           ;ModbusRtu.c: 834: if (address != (0))
  3806  002B82  5009               	movf	ModbusGetLastCommand@address,w,c
  3807  002B84  E007               	bz	l5697
  3808                           
  3809                           ;ModbusRtu.c: 835: *address = _lastAddress;
  3810  002B86  5009               	movf	ModbusGetLastCommand@address,w,c
  3811  002B88  6ED9               	movwf	fsr2l,c
  3812  002B8A  6ADA               	clrf	fsr2h,c
  3813  002B8C  C0BE  FFDE         	movff	__lastAddress,postinc2
  3814  002B90  C0BF  FFDD         	movff	__lastAddress+1,postdec2
  3815  002B94                     l5697:
  3816                           
  3817                           ;ModbusRtu.c: 836: if (count != (0))
  3818  002B94  5007               	movf	ModbusGetLastCommand@count,w,c
  3819  002B96  E007               	bz	l5701
  3820                           
  3821                           ;ModbusRtu.c: 837: *count = _lastCount;
  3822  002B98  5007               	movf	ModbusGetLastCommand@count,w,c
  3823  002B9A  6ED9               	movwf	fsr2l,c
  3824  002B9C  6ADA               	clrf	fsr2h,c
  3825  002B9E  C0C0  FFDE         	movff	__lastCount,postinc2
  3826  002BA2  C0C1  FFDD         	movff	__lastCount+1,postdec2
  3827  002BA6                     l5701:
  3828                           
  3829                           ;ModbusRtu.c: 838: return &_lastCommand;
  3830  002BA6  0EE1               	movlw	__lastCommand& (0+255)
  3831  002BA8  0012               	return		;funcret
  3832  002BAA  FFFF               	dw	65535	; errata NOP
  3833  002BAC                     __end_of_ModbusGetLastCommand:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon	equ	0xFF2
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           indf2	equ	0xFDF
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           plusw2	equ	0xFDB
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _InitFromEeprom *****************
  3856 ;; Defined at:
  3857 ;;		line 407 in file "main.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : F/1
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3871 ;;      Params:         0       0       0       0       0       0       0
  3872 ;;      Locals:         0       0       0       0       0       0       0
  3873 ;;      Temps:          2       0       0       0       0       0       0
  3874 ;;      Totals:         2       0       0       0       0       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    4
  3878 ;; This function calls:
  3879 ;;		_LoadNextEvent
  3880 ;;		_Modbus
  3881 ;;		_SwitchOffAllLeds
  3882 ;; This function is called by:
  3883 ;;		_main
  3884 ;;		_io_poll
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text17
  3889  0023AA                     __ptext17:
  3890                           	opt stack 0
  3891  0023AA                     _InitFromEeprom:
  3892                           	opt stack 25
  3893                           
  3894                           ;incstack = 0
  3895  0023AA  FFFF               	dw	65535
  3896                           
  3897                           ;main.c: 409: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  3898  0023AC  0E0A               	movlw	10
  3899  0023AE  6EA9               	movwf	4009,c	;volatile
  3900  0023B0  80A6               	bsf	4006,0,c	;volatile
  3901  0023B2  CFA8 F0D9          	movff	4008,_eventAcceptTime	;volatile
  3902                           
  3903                           ;main.c: 410: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  3904  0023B6  0E0F               	movlw	15
  3905  0023B8  6EA9               	movwf	4009,c	;volatile
  3906  0023BA  80A6               	bsf	4006,0,c	;volatile
  3907  0023BC  50A8               	movf	4008,w,c	;volatile
  3908  0023BE  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3909  0023C0  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3910  0023C2  0E06               	movlw	6
  3911  0023C4                     u4755:
  3912  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  3913  0023C6  90D8               	bcf	status,0,c
  3914  0023C8  360F               	rlcf	??_InitFromEeprom,f,c
  3915  0023CA  3610               	rlcf	??_InitFromEeprom+1,f,c
  3916  0023CC  2EE8               	decfsz	wreg,f,c
  3917  0023CE  D7FA               	goto	u4755
  3918  0023D0  C00F  F0C6         	movff	??_InitFromEeprom,_blinkDuration
  3919  0023D4  C010  F0C7         	movff	??_InitFromEeprom+1,_blinkDuration+1
  3920                           
  3921                           ;main.c: 411: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  3922  0023D8  0E10               	movlw	16
  3923  0023DA  6EA9               	movwf	4009,c	;volatile
  3924  0023DC  80A6               	bsf	4006,0,c	;volatile
  3925  0023DE  50A8               	movf	4008,w,c	;volatile
  3926  0023E0  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3927  0023E2  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  3928  0023E4  0E06               	movlw	6
  3929  0023E6                     u4765:
  3930  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  3931  0023E8  90D8               	bcf	status,0,c
  3932  0023EA  360F               	rlcf	??_InitFromEeprom,f,c
  3933  0023EC  3610               	rlcf	??_InitFromEeprom+1,f,c
  3934  0023EE  2EE8               	decfsz	wreg,f,c
  3935  0023F0  D7FA               	goto	u4765
  3936  0023F2  C00F  F0C8         	movff	??_InitFromEeprom,_blinkPeriod
  3937  0023F6  C010  F0C9         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  3938                           
  3939                           ;main.c: 413: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  3940  0023FA  0E12               	movlw	18
  3941  0023FC  6EA9               	movwf	4009,c	;volatile
  3942  0023FE  80A6               	bsf	4006,0,c	;volatile
  3943  002400  CFA8 F0DA          	movff	4008,_eventCount	;volatile
  3944                           
  3945                           ;main.c: 419: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  3946  002404  0E8C               	movlw	140
  3947  002406  6EA9               	movwf	4009,c	;volatile
  3948  002408  80A6               	bsf	4006,0,c	;volatile
  3949  00240A  CFA8 F071          	movff	4008,__soundCount	;volatile
  3950                           
  3951                           ;main.c: 420: if(_soundCount == 0xFF)
  3952  00240E  2871               	incf	__soundCount,w,c
  3953  002410  E101               	bnz	l5649
  3954                           
  3955                           ;main.c: 421: _soundCount = 0;
  3956  002412  6A71               	clrf	__soundCount,c
  3957  002414                     l5649:
  3958                           
  3959                           ;main.c: 423: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  3960  002414  0E01               	movlw	1
  3961  002416  6EA9               	movwf	4009,c	;volatile
  3962  002418  80A6               	bsf	4006,0,c	;volatile
  3963  00241A  6A0C               	clrf	Modbus@u8serno,c
  3964  00241C  6A0D               	clrf	Modbus@u8txenpin,c
  3965  00241E  50A8               	movf	4008,w,c	;volatile
  3966  002420  EC83  F016         	call	_Modbus
  3967                           
  3968                           ;main.c: 424: SwitchOffAllLeds();
  3969  002424  EC17  F016         	call	_SwitchOffAllLeds	;wreg free
  3970                           
  3971                           ;main.c: 427: curEventNum = 0xff;
  3972  002428  6875               	setf	_curEventNum,c
  3973                           
  3974                           ;main.c: 428: curEventTotalMinutes = 0;
  3975  00242A  0100               	movlb	0	; () banked
  3976  00242C  6BCA               	clrf	_curEventTotalMinutes& (0+255),b
  3977  00242E  6BCB               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;main.c: 429: currentAlarmedEventNum = 0xff;
  3981  002430  6876               	setf	_currentAlarmedEventNum,c
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;main.c: 430: LoadNextEvent();
  3985  002432  EC10  F00D         	call	_LoadNextEvent	;wreg free
  3986                           
  3987                           ;main.c: 432: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  3988  002436  5071               	movf	__soundCount,w,c
  3989  002438  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  3990  00243A  0100               	movlb	0	; () banked
  3991  00243C  51D2               	movf	__isSoundPlaying& (0+255),w,b
  3992  00243E  0101               	movlb	1	; () banked
  3993  002440  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3994  002442  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3995                           
  3996                           ; BSR set to: 1
  3997  002446  0012               	return		;funcret
  3998  002448  FFFF               	dw	65535	; errata NOP
  3999  00244A                     __end_of_InitFromEeprom:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           postinc0	equ	0xFEE
  4009                           wreg	equ	0xFE8
  4010                           postdec1	equ	0xFE5
  4011                           fsr1h	equ	0xFE2
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           plusw2	equ	0xFDB
  4017                           fsr2h	equ	0xFDA
  4018                           fsr2l	equ	0xFD9
  4019                           status	equ	0xFD8
  4020                           
  4021 ;; *************** function _Modbus *****************
  4022 ;; Defined at:
  4023 ;;		line 171 in file "ModbusRtu.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  u8id            1    wreg     unsigned char 
  4026 ;;  u8serno         1   11[COMRAM] unsigned char 
  4027 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  u8id            1   13[COMRAM] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4039 ;;      Params:         2       0       0       0       0       0       0
  4040 ;;      Locals:         1       0       0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0
  4042 ;;      Totals:         3       0       0       0       0       0       0
  4043 ;;Total ram usage:        3 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    3
  4046 ;; This function calls:
  4047 ;;		_ModbusInit
  4048 ;; This function is called by:
  4049 ;;		_InitFromEeprom
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text18
  4054  002D06                     __ptext18:
  4055                           	opt stack 0
  4056  002D06                     _Modbus:
  4057                           	opt stack 25
  4058                           
  4059                           ; BSR set to: 1
  4060                           ;incstack = 0
  4061  002D06  FFFF               	dw	65535
  4062                           
  4063                           ;Modbus@u8id stored from wreg
  4064  002D08  6E0E               	movwf	Modbus@u8id,c
  4065                           
  4066                           ;ModbusRtu.c: 173: ModbusInit(u8id, u8serno, u8txenpin);
  4067  002D0A  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4068  002D0E  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4069  002D12  500E               	movf	Modbus@u8id,w,c
  4070  002D14  EF8D  F016         	goto	_ModbusInit
  4071  002D18  FFFF               	dw	65535	; errata NOP
  4072  002D1A                     __end_of_Modbus:
  4073                           	opt stack 0
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           prodh	equ	0xFF4
  4079                           prodl	equ	0xFF3
  4080                           intcon	equ	0xFF2
  4081                           postinc0	equ	0xFEE
  4082                           wreg	equ	0xFE8
  4083                           postdec1	equ	0xFE5
  4084                           fsr1h	equ	0xFE2
  4085                           fsr1l	equ	0xFE1
  4086                           indf2	equ	0xFDF
  4087                           postinc2	equ	0xFDE
  4088                           postdec2	equ	0xFDD
  4089                           plusw2	equ	0xFDB
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function _ModbusInit *****************
  4095 ;; Defined at:
  4096 ;;		line 504 in file "ModbusRtu.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  u8id            1    wreg     unsigned char 
  4099 ;;  u8serno         1    6[COMRAM] unsigned char 
  4100 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  u8id            1   10[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4112 ;;      Params:         2       0       0       0       0       0       0
  4113 ;;      Locals:         3       0       0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0
  4115 ;;      Totals:         5       0       0       0       0       0       0
  4116 ;;Total ram usage:        5 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    2
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_Modbus
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text19
  4127  002D1A                     __ptext19:
  4128                           	opt stack 0
  4129  002D1A                     _ModbusInit:
  4130                           	opt stack 25
  4131                           
  4132                           ;incstack = 0
  4133  002D1A  FFFF               	dw	65535
  4134                           
  4135                           ;ModbusInit@u8id stored from wreg
  4136  002D1C  6E0B               	movwf	ModbusInit@u8id,c
  4137                           
  4138                           ;ModbusRtu.c: 506: _u8id = u8id;
  4139  002D1E  C00B  F0D6         	movff	ModbusInit@u8id,__u8id
  4140                           
  4141                           ;ModbusRtu.c: 507: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4142  002D22  0E04               	movlw	4
  4143  002D24  6007               	cpfslt	ModbusInit@u8serno,c
  4144  002D26  D000               	goto	l695
  4145  002D28                     l695:
  4146  002D28  FFFF               	dw	65535	; assembler added errata NOP
  4147  002D2A  0012               	return		;funcret
  4148  002D2C  FFFF               	dw	65535	; errata NOP
  4149  002D2E                     __end_of_ModbusInit:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon	equ	0xFF2
  4158                           postinc0	equ	0xFEE
  4159                           wreg	equ	0xFE8
  4160                           postdec1	equ	0xFE5
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           plusw2	equ	0xFDB
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _CommandSetStatusLed *****************
  4172 ;; Defined at:
  4173 ;;		line 878 in file "main.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;  led             1   30[COMRAM] unsigned char 
  4178 ;;  commandData     1   29[COMRAM] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4188 ;;      Params:         0       0       0       0       0       0       0
  4189 ;;      Locals:         2       0       0       0       0       0       0
  4190 ;;      Temps:          1       0       0       0       0       0       0
  4191 ;;      Totals:         3       0       0       0       0       0       0
  4192 ;;Total ram usage:        3 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    5
  4195 ;; This function calls:
  4196 ;;		_LightStatusLed
  4197 ;;		_ModbusSetExceptionStatusBit
  4198 ;;		_PlaySound
  4199 ;;		_StopPlaying
  4200 ;; This function is called by:
  4201 ;;		_io_poll
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           	psect	text20
  4206  0025B0                     __ptext20:
  4207                           	opt stack 0
  4208  0025B0                     _CommandSetStatusLed:
  4209                           	opt stack 24
  4210                           
  4211                           ;incstack = 0
  4212  0025B0  FFFF               	dw	65535
  4213                           
  4214                           ;main.c: 882: uint8_t commandData = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  4215  0025B2  C18C  F01E         	movff	__MODBUSHoldingRegs,CommandSetStatusLed@commandData
  4216                           
  4217                           ;main.c: 883: uint8_t led = commandData & 0x07;
  4218  0025B6  501E               	movf	CommandSetStatusLed@commandData,w,c
  4219  0025B8  0B07               	andlw	7
  4220  0025BA  6E1F               	movwf	CommandSetStatusLed@led,c
  4221                           
  4222                           ;main.c: 884: if(led >= 0x05)
  4223  0025BC  0E04               	movlw	4
  4224  0025BE  641F               	cpfsgt	CommandSetStatusLed@led,c
  4225  0025C0  D001               	goto	l5679
  4226  0025C2  D027               	goto	l443
  4227  0025C4                     l5679:
  4228  0025C4  FFFF               	dw	65535	; assembler added errata NOP
  4229                           
  4230                           ;main.c: 886: if((((commandData) >> (7)) & 0x01) == 0)
  4231  0025C6  6A1D               	clrf	??_CommandSetStatusLed& (0+255),c
  4232  0025C8  AE1E               	btfss	CommandSetStatusLed@commandData,7,c
  4233  0025CA  D001               	bra	u4795
  4234  0025CC  2A1D               	incf	??_CommandSetStatusLed& (0+255),f,c
  4235  0025CE                     u4795:
  4236  0025CE  B01D               	btfsc	??_CommandSetStatusLed,0,c
  4237  0025D0  D009               	goto	l5687
  4238                           
  4239                           ;main.c: 887: {
  4240                           ;main.c: 888: LightStatusLed(led, 0, 0);
  4241  0025D2  0E00               	movlw	0
  4242  0025D4  6E07               	movwf	LightStatusLed@on,c
  4243  0025D6  6E08               	movwf	LightStatusLed@blink,c
  4244  0025D8  501F               	movf	CommandSetStatusLed@led,w,c
  4245  0025DA  EC15  F00E         	call	_LightStatusLed
  4246                           
  4247                           ;main.c: 889: StopPlaying();
  4248  0025DE  EC5C  F016         	call	_StopPlaying	;wreg free
  4249  0025E2  D017               	goto	l443
  4250  0025E4                     l5687:
  4251  0025E4  FFFF               	dw	65535	; assembler added errata NOP
  4252                           
  4253                           ;main.c: 891: }
  4254                           ;main.c: 892: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  4255  0025E6  0E01               	movlw	1
  4256  0025E8  6E07               	movwf	LightStatusLed@on,c
  4257  0025EA  441E               	rlncf	CommandSetStatusLed@commandData,w,c
  4258  0025EC  46E8               	rlncf	wreg,f,c
  4259  0025EE  0B03               	andlw	3
  4260  0025F0  0B01               	andlw	1
  4261  0025F2  6E08               	movwf	LightStatusLed@blink,c
  4262  0025F4  501F               	movf	CommandSetStatusLed@led,w,c
  4263  0025F6  EC15  F00E         	call	_LightStatusLed
  4264                           
  4265                           ;main.c: 893: PlaySound(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), ((unsigned
      +                           char)((_MODBUSHoldingRegs[1])&0xFF)));
  4266  0025FA  C18E  F015         	movff	__MODBUSHoldingRegs+2,PlaySound@playDuration
  4267  0025FE  6A16               	clrf	PlaySound@playDuration+1,c
  4268  002600  0101               	movlb	1	; () banked
  4269  002602  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  4270  002604  EC90  F00E         	call	_PlaySound
  4271                           
  4272                           ;main.c: 894: ModbusSetExceptionStatusBit(0, 1);
  4273  002608  0E01               	movlw	1
  4274  00260A  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  4275  00260C  0E00               	movlw	0
  4276  00260E  EC1C  F014         	call	_ModbusSetExceptionStatusBit
  4277  002612                     l443:
  4278  002612  FFFF               	dw	65535	; assembler added errata NOP
  4279  002614  0012               	return		;funcret
  4280  002616  FFFF               	dw	65535	; errata NOP
  4281  002618                     __end_of_CommandSetStatusLed:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postdec1	equ	0xFE5
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           plusw2	equ	0xFDB
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function _ModbusSetExceptionStatusBit *****************
  4304 ;; Defined at:
  4305 ;;		line 176 in file "ModbusRtu.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  bitNum          1    wreg     unsigned char 
  4308 ;;  value           1    6[COMRAM] unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  bitNum          1    9[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : F/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         1       0       0       0       0       0       0
  4321 ;;      Locals:         1       0       0       0       0       0       0
  4322 ;;      Temps:          2       0       0       0       0       0       0
  4323 ;;      Totals:         4       0       0       0       0       0       0
  4324 ;;Total ram usage:        4 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    2
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_CommandSetStatusLed
  4331 ;;		_io_poll
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text21
  4336  002838                     __ptext21:
  4337                           	opt stack 0
  4338  002838                     _ModbusSetExceptionStatusBit:
  4339                           	opt stack 27
  4340                           
  4341                           ;incstack = 0
  4342  002838  FFFF               	dw	65535
  4343                           
  4344                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  4345  00283A  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  4346                           
  4347                           ;ModbusRtu.c: 178: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  4348  00283C  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  4349  00283E  E010               	bz	l5559
  4350  002840  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4351  002844  0E01               	movlw	1
  4352  002846  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4353  002848  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4354  00284A  D003               	goto	u4504
  4355  00284C                     u4505:
  4356  00284C  FFFF               	dw	65535	; assembler added errata NOP
  4357  00284E  90D8               	bcf	status,0,c
  4358  002850  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4359  002852                     u4504:
  4360  002852  FFFF               	dw	65535	; assembler added errata NOP
  4361  002854  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4362  002856  D7FA               	goto	u4505
  4363  002858  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  4364  00285A  0100               	movlb	0	; () banked
  4365  00285C  13CF               	iorwf	__exceptionStatus& (0+255),f,b
  4366  00285E  D00F               	goto	l663
  4367  002860                     l5559:
  4368  002860  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  4369  002864  0E01               	movlw	1
  4370  002866  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  4371  002868  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  4372  00286A  D003               	goto	u4514
  4373  00286C                     u4515:
  4374  00286C  FFFF               	dw	65535	; assembler added errata NOP
  4375  00286E  90D8               	bcf	status,0,c
  4376  002870  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  4377  002872                     u4514:
  4378  002872  FFFF               	dw	65535	; assembler added errata NOP
  4379  002874  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  4380  002876  D7FA               	goto	u4515
  4381  002878  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  4382  00287A  0100               	movlb	0	; () banked
  4383  00287C  17CF               	andwf	__exceptionStatus& (0+255),f,b
  4384  00287E                     l663:
  4385  00287E  FFFF               	dw	65535	; assembler added errata NOP
  4386                           
  4387                           ; BSR set to: 0
  4388  002880  0012               	return		;funcret
  4389  002882  FFFF               	dw	65535	; errata NOP
  4390  002884                     __end_of_ModbusSetExceptionStatusBit:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           intcon	equ	0xFF2
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           postdec1	equ	0xFE5
  4402                           fsr1h	equ	0xFE2
  4403                           fsr1l	equ	0xFE1
  4404                           indf2	equ	0xFDF
  4405                           postinc2	equ	0xFDE
  4406                           postdec2	equ	0xFDD
  4407                           plusw2	equ	0xFDB
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _LightStatusLed *****************
  4413 ;; Defined at:
  4414 ;;		line 345 in file "main.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  row             1    wreg     unsigned char 
  4417 ;;  on              1    6[COMRAM] unsigned char 
  4418 ;;  blink           1    7[COMRAM] unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  row             1   13[COMRAM] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4430 ;;      Params:         2       0       0       0       0       0       0
  4431 ;;      Locals:         1       0       0       0       0       0       0
  4432 ;;      Temps:          5       0       0       0       0       0       0
  4433 ;;      Totals:         8       0       0       0       0       0       0
  4434 ;;Total ram usage:        8 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;;		_SetTimeFromRegs
  4442 ;;		_CommandSetStatusLed
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text22
  4447  001C2A                     __ptext22:
  4448                           	opt stack 0
  4449  001C2A                     _LightStatusLed:
  4450                           	opt stack 25
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;incstack = 0
  4454  001C2A  FFFF               	dw	65535
  4455                           
  4456                           ;LightStatusLed@row stored from wreg
  4457  001C2C  6E0E               	movwf	LightStatusLed@row,c
  4458                           
  4459                           ;main.c: 347: if(row > 7)
  4460  001C2E  0E07               	movlw	7
  4461  001C30  640E               	cpfsgt	LightStatusLed@row,c
  4462  001C32  D001               	goto	l5331
  4463  001C34  D072               	goto	l288
  4464  001C36                     l5331:
  4465  001C36  FFFF               	dw	65535	; assembler added errata NOP
  4466                           
  4467                           ;main.c: 349: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4468  001C38  5007               	movf	LightStatusLed@on,w,c
  4469  001C3A  E010               	bz	l5335
  4470  001C3C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4471  001C40  0E01               	movlw	1
  4472  001C42  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4473  001C44  2A09               	incf	??_LightStatusLed,f,c
  4474  001C46  D003               	goto	u4234
  4475  001C48                     u4235:
  4476  001C48  FFFF               	dw	65535	; assembler added errata NOP
  4477  001C4A  90D8               	bcf	status,0,c
  4478  001C4C  360A               	rlcf	??_LightStatusLed+1,f,c
  4479  001C4E                     u4234:
  4480  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  4481  001C50  2E09               	decfsz	??_LightStatusLed,f,c
  4482  001C52  D7FA               	goto	u4235
  4483  001C54  500A               	movf	??_LightStatusLed+1,w,c
  4484  001C56  0100               	movlb	0	; () banked
  4485  001C58  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4486  001C5A  D00F               	goto	l5337
  4487  001C5C                     l5335:
  4488  001C5C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4489  001C60  0E01               	movlw	1
  4490  001C62  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4491  001C64  2A09               	incf	??_LightStatusLed,f,c
  4492  001C66  D003               	goto	u4244
  4493  001C68                     u4245:
  4494  001C68  FFFF               	dw	65535	; assembler added errata NOP
  4495  001C6A  90D8               	bcf	status,0,c
  4496  001C6C  360A               	rlcf	??_LightStatusLed+1,f,c
  4497  001C6E                     u4244:
  4498  001C6E  FFFF               	dw	65535	; assembler added errata NOP
  4499  001C70  2E09               	decfsz	??_LightStatusLed,f,c
  4500  001C72  D7FA               	goto	u4245
  4501  001C74  1C0A               	comf	??_LightStatusLed+1,w,c
  4502  001C76  0100               	movlb	0	; () banked
  4503  001C78  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4504  001C7A                     l5337:
  4505  001C7A  FFFF               	dw	65535	; assembler added errata NOP
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;main.c: 350: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4509  001C7C  5008               	movf	LightStatusLed@blink,w,c
  4510  001C7E  E010               	bz	l5341
  4511                           
  4512                           ; BSR set to: 0
  4513  001C80  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4514  001C84  0E01               	movlw	1
  4515  001C86  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4516  001C88  2A09               	incf	??_LightStatusLed,f,c
  4517  001C8A  D003               	goto	u4264
  4518  001C8C                     u4265:
  4519  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  4520  001C8E  90D8               	bcf	status,0,c
  4521  001C90  360A               	rlcf	??_LightStatusLed+1,f,c
  4522  001C92                     u4264:
  4523  001C92  FFFF               	dw	65535	; assembler added errata NOP
  4524  001C94  2E09               	decfsz	??_LightStatusLed,f,c
  4525  001C96  D7FA               	goto	u4265
  4526  001C98  500A               	movf	??_LightStatusLed+1,w,c
  4527  001C9A  0100               	movlb	0	; () banked
  4528  001C9C  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4529  001C9E  D00F               	goto	l5343
  4530  001CA0                     l5341:
  4531                           
  4532                           ; BSR set to: 0
  4533  001CA0  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4534  001CA4  0E01               	movlw	1
  4535  001CA6  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4536  001CA8  2A09               	incf	??_LightStatusLed,f,c
  4537  001CAA  D003               	goto	u4274
  4538  001CAC                     u4275:
  4539  001CAC  FFFF               	dw	65535	; assembler added errata NOP
  4540  001CAE  90D8               	bcf	status,0,c
  4541  001CB0  360A               	rlcf	??_LightStatusLed+1,f,c
  4542  001CB2                     u4274:
  4543  001CB2  FFFF               	dw	65535	; assembler added errata NOP
  4544  001CB4  2E09               	decfsz	??_LightStatusLed,f,c
  4545  001CB6  D7FA               	goto	u4275
  4546  001CB8  1C0A               	comf	??_LightStatusLed+1,w,c
  4547  001CBA  0100               	movlb	0	; () banked
  4548  001CBC  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4549  001CBE                     l5343:
  4550  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 351: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4554  001CC0  5007               	movf	LightStatusLed@on,w,c
  4555  001CC2  E014               	bz	l5347
  4556                           
  4557                           ; BSR set to: 0
  4558  001CC4  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4559  001CC8  0E01               	movlw	1
  4560  001CCA  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4561  001CCC  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4562  001CCE  2A09               	incf	??_LightStatusLed,f,c
  4563  001CD0  D004               	goto	u4294
  4564  001CD2                     u4295:
  4565  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  4566  001CD4  90D8               	bcf	status,0,c
  4567  001CD6  360A               	rlcf	??_LightStatusLed+1,f,c
  4568  001CD8  360B               	rlcf	??_LightStatusLed+2,f,c
  4569  001CDA                     u4294:
  4570  001CDA  FFFF               	dw	65535	; assembler added errata NOP
  4571  001CDC  2E09               	decfsz	??_LightStatusLed,f,c
  4572  001CDE  D7F9               	goto	u4295
  4573  001CE0  500A               	movf	??_LightStatusLed+1,w,c
  4574  001CE2  0100               	movlb	0	; () banked
  4575  001CE4  13DF               	iorwf	__MODBUSCoils& (0+255),f,b
  4576  001CE6  500B               	movf	??_LightStatusLed+2,w,c
  4577  001CE8  13E0               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4578  001CEA  D017               	goto	l288
  4579  001CEC                     l5347:
  4580                           
  4581                           ; BSR set to: 0
  4582  001CEC  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4583  001CF0  0E01               	movlw	1
  4584  001CF2  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4585  001CF4  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4586  001CF6  2A09               	incf	??_LightStatusLed,f,c
  4587  001CF8  D004               	goto	u4304
  4588  001CFA                     u4305:
  4589  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  4590  001CFC  90D8               	bcf	status,0,c
  4591  001CFE  360A               	rlcf	??_LightStatusLed+1,f,c
  4592  001D00  360B               	rlcf	??_LightStatusLed+2,f,c
  4593  001D02                     u4304:
  4594  001D02  FFFF               	dw	65535	; assembler added errata NOP
  4595  001D04  2E09               	decfsz	??_LightStatusLed,f,c
  4596  001D06  D7F9               	goto	u4305
  4597  001D08  1C0A               	comf	??_LightStatusLed+1,w,c
  4598  001D0A  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  4599  001D0C  1C0B               	comf	??_LightStatusLed+2,w,c
  4600  001D0E  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  4601  001D10  500C               	movf	??_LightStatusLed+3,w,c
  4602  001D12  0100               	movlb	0	; () banked
  4603  001D14  17DF               	andwf	__MODBUSCoils& (0+255),f,b
  4604  001D16  500D               	movf	??_LightStatusLed+4,w,c
  4605  001D18  17E0               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4606  001D1A                     l288:
  4607  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  4608  001D1C  0012               	return		;funcret
  4609  001D1E  FFFF               	dw	65535	; errata NOP
  4610  001D20                     __end_of_LightStatusLed:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           tblptrh	equ	0xFF7
  4614                           tblptrl	equ	0xFF6
  4615                           tablat	equ	0xFF5
  4616                           prodh	equ	0xFF4
  4617                           prodl	equ	0xFF3
  4618                           intcon	equ	0xFF2
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           plusw2	equ	0xFDB
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _getHourMin *****************
  4633 ;; Defined at:
  4634 ;;		line 256 in file "interrupts.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  hour            1    wreg     PTR unsigned char 
  4637 ;;		 -> main@hour(1), 
  4638 ;;  min             1    6[COMRAM] PTR unsigned char 
  4639 ;;		 -> main@minute(1), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  hour            1    7[COMRAM] PTR unsigned char 
  4642 ;;		 -> main@hour(1), 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      unsigned char 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : F/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4652 ;;      Params:         1       0       0       0       0       0       0
  4653 ;;      Locals:         1       0       0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0
  4655 ;;      Totals:         2       0       0       0       0       0       0
  4656 ;;Total ram usage:        2 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    2
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text23
  4667  002BD8                     __ptext23:
  4668                           	opt stack 0
  4669  002BD8                     _getHourMin:
  4670                           	opt stack 28
  4671                           
  4672                           ;incstack = 0
  4673  002BD8  FFFF               	dw	65535
  4674                           
  4675                           ;getHourMin@hour stored from wreg
  4676  002BDA  6E08               	movwf	getHourMin@hour,c
  4677                           
  4678                           ;interrupts.c: 258: if(globalHours == 0xFF)
  4679  002BDC  2877               	incf	_globalHours,w,c	;volatile
  4680  002BDE  E102               	bnz	l108
  4681                           
  4682                           ;interrupts.c: 259: return 0;
  4683  002BE0  0E00               	movlw	0
  4684  002BE2  D00D               	goto	l109
  4685  002BE4                     l108:
  4686                           
  4687                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  4688  002BE4  9EF2               	bcf	intcon,7,c	;volatile
  4689                           
  4690                           ;interrupts.c: 261: *hour = globalHours;
  4691  002BE6  5008               	movf	getHourMin@hour,w,c
  4692  002BE8  6ED9               	movwf	fsr2l,c
  4693  002BEA  6ADA               	clrf	fsr2h,c
  4694  002BEC  C077  FFDF         	movff	_globalHours,indf2	;volatile
  4695                           
  4696                           ;interrupts.c: 262: *min = globalMinutes;
  4697  002BF0  5007               	movf	getHourMin@min,w,c
  4698  002BF2  6ED9               	movwf	fsr2l,c
  4699  002BF4  6ADA               	clrf	fsr2h,c
  4700  002BF6  C074  FFDF         	movff	_globalMinutes,indf2	;volatile
  4701                           
  4702                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  4703  002BFA  8EF2               	bsf	intcon,7,c	;volatile
  4704                           
  4705                           ;interrupts.c: 264: return 1;
  4706  002BFC  0E01               	movlw	1
  4707  002BFE                     l109:
  4708  002BFE  FFFF               	dw	65535	; assembler added errata NOP
  4709  002C00  0012               	return		;funcret
  4710  002C02  FFFF               	dw	65535	; errata NOP
  4711  002C04                     __end_of_getHourMin:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1h	equ	0xFE2
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           plusw2	equ	0xFDB
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _ResetEvent *****************
  4734 ;; Defined at:
  4735 ;;		line 601 in file "main.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  state           1    wreg     unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  state           1   16[COMRAM] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : E/0
  4746 ;;		On exit  : F/1
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         0       0       0       0       0       0       0
  4750 ;;      Locals:         3       0       0       0       0       0       0
  4751 ;;      Temps:          2       0       0       0       0       0       0
  4752 ;;      Totals:         5       0       0       0       0       0       0
  4753 ;;Total ram usage:        5 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    3
  4756 ;; This function calls:
  4757 ;;		_LightLed
  4758 ;;		_StopPlaying
  4759 ;; This function is called by:
  4760 ;;		_main
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text24
  4765  0029EA                     __ptext24:
  4766                           	opt stack 0
  4767  0029EA                     _ResetEvent:
  4768                           	opt stack 27
  4769                           
  4770                           ;incstack = 0
  4771  0029EA  FFFF               	dw	65535
  4772                           
  4773                           ;ResetEvent@state stored from wreg
  4774  0029EC  6E11               	movwf	ResetEvent@state,c
  4775                           
  4776                           ;main.c: 603: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4777  0029EE  5011               	movf	ResetEvent@state,w,c
  4778  0029F0  E103               	bnz	l6051
  4779  0029F2  6A13               	clrf	_ResetEvent$881+1,c
  4780  0029F4  0E02               	movlw	2
  4781  0029F6  D002               	goto	L2
  4782  0029F8                     l6051:
  4783  0029F8  6A13               	clrf	_ResetEvent$881+1,c
  4784  0029FA  0E01               	movlw	1
  4785  0029FC                     L2:
  4786  0029FC  FFFF               	dw	65535	; assembler added errata NOP
  4787  0029FE  6E12               	movwf	_ResetEvent$881,c
  4788  002A00  C012  F007         	movff	_ResetEvent$881,LightLed@ledState
  4789  002A04  6A08               	clrf	LightLed@blink,c
  4790  002A06  2876               	incf	_currentAlarmedEventNum,w,c
  4791  002A08  ECC0  F004         	call	_LightLed
  4792                           
  4793                           ;main.c: 604: currentAlarmedEventNum = 0xff;
  4794  002A0C  6876               	setf	_currentAlarmedEventNum,c
  4795                           
  4796                           ;main.c: 605: eventResetSecond = 0;
  4797  002A0E  0100               	movlb	0	; () banked
  4798  002A10  6BAC               	clrf	_eventResetSecond& (0+255),b
  4799  002A12  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  4800  002A14  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  4801  002A16  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;main.c: 606: StopPlaying();
  4805  002A18  EC5C  F016         	call	_StopPlaying	;wreg free
  4806                           
  4807                           ; BSR set to: 1
  4808                           ;main.c: 607: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4809  002A1C  5076               	movf	_currentAlarmedEventNum,w,c
  4810  002A1E  6E0F               	movwf	??_ResetEvent& (0+255),c
  4811  002A20  5075               	movf	_curEventNum,w,c
  4812  002A22  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4813  002A24  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4814                           
  4815                           ; BSR set to: 1
  4816  002A28  0012               	return		;funcret
  4817  002A2A  FFFF               	dw	65535	; errata NOP
  4818  002A2C                     __end_of_ResetEvent:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           postdec1	equ	0xFE5
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           plusw2	equ	0xFDB
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _ProcessLightBlock *****************
  4841 ;; Defined at:
  4842 ;;		line 448 in file "main.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  curMs           1    wreg     PTR unsigned long 
  4845 ;;		 -> main@curMs(4), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  4848 ;;		 -> main@curMs(4), 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : F/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4858 ;;      Params:         0       0       0       0       0       0       0
  4859 ;;      Locals:         1       0       0       0       0       0       0
  4860 ;;      Temps:          4       0       0       0       0       0       0
  4861 ;;      Totals:         5       0       0       0       0       0       0
  4862 ;;Total ram usage:        5 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    3
  4865 ;; This function calls:
  4866 ;;		_UpdateLedRegister
  4867 ;; This function is called by:
  4868 ;;		_main
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text25
  4873  000C72                     __ptext25:
  4874                           	opt stack 0
  4875  000C72                     _ProcessLightBlock:
  4876                           	opt stack 27
  4877                           
  4878                           ; BSR set to: 1
  4879                           ;incstack = 0
  4880  000C72  FFFF               	dw	65535
  4881                           
  4882                           ;ProcessLightBlock@curMs stored from wreg
  4883  000C74  6E0C               	movwf	ProcessLightBlock@curMs,c
  4884                           
  4885                           ;main.c: 450: diffTime = *curMs - oldBlinkOnTime;
  4886  000C76  500C               	movf	ProcessLightBlock@curMs,w,c
  4887  000C78  6ED9               	movwf	fsr2l,c
  4888  000C7A  6ADA               	clrf	fsr2h,c
  4889  000C7C  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  4890  000C80  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  4891  000C84  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  4892  000C88  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  4893  000C8C  0100               	movlb	0	; () banked
  4894  000C8E  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  4895  000C90  5C08               	subwf	??_ProcessLightBlock,w,c
  4896  000C92  6FA8               	movwf	_diffTime& (0+255),b
  4897  000C94  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4898  000C96  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4899  000C98  6FA9               	movwf	(_diffTime+1)& (0+255),b
  4900  000C9A  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4901  000C9C  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4902  000C9E  6FAA               	movwf	(_diffTime+2)& (0+255),b
  4903  000CA0  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4904  000CA2  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4905  000CA4  6FAB               	movwf	(_diffTime+3)& (0+255),b
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;main.c: 451: if(diffTime > blinkPeriod)
  4909  000CA6  51C8               	movf	_blinkPeriod& (0+255),w,b
  4910  000CA8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4911  000CAA  51C9               	movf	(_blinkPeriod+1)& (0+255),w,b
  4912  000CAC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4913  000CAE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4914  000CB0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4915  000CB2  51A8               	movf	_diffTime& (0+255),w,b
  4916  000CB4  5C08               	subwf	??_ProcessLightBlock,w,c
  4917  000CB6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4918  000CB8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4919  000CBA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4920  000CBC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4921  000CBE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4922  000CC0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4923  000CC2  E20E               	bc	l4573
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;main.c: 452: {
  4927                           ;main.c: 453: blinkOn = 1;
  4928  000CC4  0E01               	movlw	1
  4929  000CC6  6E73               	movwf	_blinkOn,c
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;main.c: 454: oldBlinkOnTime = *curMs;
  4933  000CC8  500C               	movf	ProcessLightBlock@curMs,w,c
  4934  000CCA  6ED9               	movwf	fsr2l,c
  4935  000CCC  6ADA               	clrf	fsr2h,c
  4936  000CCE  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  4937  000CD2  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  4938  000CD6  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  4939  000CDA  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  4940                           
  4941                           ;main.c: 455: }
  4942  000CDE  D0F1               	goto	l4725
  4943  000CE0                     l4573:
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;main.c: 456: else if(blinkOn && diffTime > blinkDuration)
  4947  000CE0  5073               	movf	_blinkOn,w,c
  4948  000CE2  E101 D0EE          	bz	l4725
  4949                           
  4950                           ; BSR set to: 0
  4951  000CE6  51C6               	movf	_blinkDuration& (0+255),w,b
  4952  000CE8  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4953  000CEA  51C7               	movf	(_blinkDuration+1)& (0+255),w,b
  4954  000CEC  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4955  000CEE  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4956  000CF0  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4957  000CF2  51A8               	movf	_diffTime& (0+255),w,b
  4958  000CF4  5C08               	subwf	??_ProcessLightBlock,w,c
  4959  000CF6  51A9               	movf	(_diffTime+1)& (0+255),w,b
  4960  000CF8  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4961  000CFA  51AA               	movf	(_diffTime+2)& (0+255),w,b
  4962  000CFC  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4963  000CFE  51AB               	movf	(_diffTime+3)& (0+255),w,b
  4964  000D00  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4965  000D02  E301 D0DE          	bc	l4725
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;main.c: 457: {
  4969                           ;main.c: 458: blinkOn = 0;
  4970  000D06  6A73               	clrf	_blinkOn,c
  4971  000D08  D0DC               	goto	l4725
  4972  000D0A                     l4579:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;main.c: 466: LATA &= 0xF0;
  4976  000D0A  0EF0               	movlw	240
  4977  000D0C  1689               	andwf	3977,f,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;main.c: 467: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4981  000D0E  5073               	movf	_blinkOn,w,c
  4982  000D10  E003               	bz	l4585
  4983                           
  4984                           ; BSR set to: 0
  4985  000D12  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4986  000D16  D003               	goto	l4587
  4987  000D18                     l4585:
  4988                           
  4989                           ; BSR set to: 0
  4990  000D18  5190               	movf	_ledStatuses& (0+255),w,b
  4991  000D1A  1980               	xorwf	_ledBlink& (0+255),w,b
  4992  000D1C  6E8A               	movwf	3978,c	;volatile
  4993  000D1E                     l4587:
  4994  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  4995                           
  4996                           ; BSR set to: 0
  4997  000D20  0E00               	movlw	0
  4998  000D22  ECAF  F014         	call	_UpdateLedRegister
  4999                           
  5000                           ;main.c: 468: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  5001  000D26  5073               	movf	_blinkOn,w,c
  5002  000D28  E003               	bz	l4593
  5003  000D2A  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  5004  000D2E  D004               	goto	l4595
  5005  000D30                     l4593:
  5006  000D30  0100               	movlb	0	; () banked
  5007  000D32  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  5008  000D34  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  5009  000D36  6E8A               	movwf	3978,c	;volatile
  5010  000D38                     l4595:
  5011  000D38  FFFF               	dw	65535	; assembler added errata NOP
  5012  000D3A  0E01               	movlw	1
  5013  000D3C  ECAF  F014         	call	_UpdateLedRegister
  5014                           
  5015                           ;main.c: 469: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5016  000D40  5073               	movf	_blinkOn,w,c
  5017  000D42  E003               	bz	l4601
  5018  000D44  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5019  000D48  D004               	goto	l4603
  5020  000D4A                     l4601:
  5021  000D4A  0100               	movlb	0	; () banked
  5022  000D4C  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  5023  000D4E  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  5024  000D50  6E8A               	movwf	3978,c	;volatile
  5025  000D52                     l4603:
  5026  000D52  FFFF               	dw	65535	; assembler added errata NOP
  5027  000D54  0E02               	movlw	2
  5028  000D56  ECAF  F014         	call	_UpdateLedRegister
  5029                           
  5030                           ;main.c: 470: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5031  000D5A  5073               	movf	_blinkOn,w,c
  5032  000D5C  E003               	bz	l4609
  5033  000D5E  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5034  000D62  D004               	goto	l4611
  5035  000D64                     l4609:
  5036  000D64  0100               	movlb	0	; () banked
  5037  000D66  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  5038  000D68  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5039  000D6A  6E8A               	movwf	3978,c	;volatile
  5040  000D6C                     l4611:
  5041  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  5042  000D6E  0E03               	movlw	3
  5043  000D70  ECAF  F014         	call	_UpdateLedRegister
  5044                           
  5045                           ;main.c: 471: LATAbits.LATA0 = 1;
  5046  000D74  8089               	bsf	3977,0,c	;volatile
  5047                           
  5048                           ;main.c: 472: break;
  5049  000D76  D0B0               	goto	l4727
  5050  000D78                     l4615:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;main.c: 474: LATA &= 0xF0;
  5054  000D78  0EF0               	movlw	240
  5055  000D7A  1689               	andwf	3977,f,c	;volatile
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;main.c: 475: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5059  000D7C  5073               	movf	_blinkOn,w,c
  5060  000D7E  E003               	bz	l4621
  5061                           
  5062                           ; BSR set to: 0
  5063  000D80  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5064  000D84  D003               	goto	l4623
  5065  000D86                     l4621:
  5066                           
  5067                           ; BSR set to: 0
  5068  000D86  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  5069  000D88  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  5070  000D8A  6E8A               	movwf	3978,c	;volatile
  5071  000D8C                     l4623:
  5072  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  5073                           
  5074                           ; BSR set to: 0
  5075  000D8E  0E00               	movlw	0
  5076  000D90  ECAF  F014         	call	_UpdateLedRegister
  5077                           
  5078                           ;main.c: 476: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5079  000D94  5073               	movf	_blinkOn,w,c
  5080  000D96  E003               	bz	l4629
  5081  000D98  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5082  000D9C  D004               	goto	l4631
  5083  000D9E                     l4629:
  5084  000D9E  0100               	movlb	0	; () banked
  5085  000DA0  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  5086  000DA2  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  5087  000DA4  6E8A               	movwf	3978,c	;volatile
  5088  000DA6                     l4631:
  5089  000DA6  FFFF               	dw	65535	; assembler added errata NOP
  5090  000DA8  0E01               	movlw	1
  5091  000DAA  ECAF  F014         	call	_UpdateLedRegister
  5092                           
  5093                           ;main.c: 477: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5094  000DAE  5073               	movf	_blinkOn,w,c
  5095  000DB0  E003               	bz	l4637
  5096  000DB2  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5097  000DB6  D004               	goto	l4639
  5098  000DB8                     l4637:
  5099  000DB8  0100               	movlb	0	; () banked
  5100  000DBA  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  5101  000DBC  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  5102  000DBE  6E8A               	movwf	3978,c	;volatile
  5103  000DC0                     l4639:
  5104  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  5105  000DC2  0E02               	movlw	2
  5106  000DC4  ECAF  F014         	call	_UpdateLedRegister
  5107                           
  5108                           ;main.c: 478: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5109  000DC8  5073               	movf	_blinkOn,w,c
  5110  000DCA  E003               	bz	l4645
  5111  000DCC  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5112  000DD0  D004               	goto	l4647
  5113  000DD2                     l4645:
  5114  000DD2  0100               	movlb	0	; () banked
  5115  000DD4  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  5116  000DD6  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5117  000DD8  6E8A               	movwf	3978,c	;volatile
  5118  000DDA                     l4647:
  5119  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  5120  000DDC  0E03               	movlw	3
  5121  000DDE  ECAF  F014         	call	_UpdateLedRegister
  5122                           
  5123                           ;main.c: 479: LATAbits.LATA1 = 1;
  5124  000DE2  8289               	bsf	3977,1,c	;volatile
  5125                           
  5126                           ;main.c: 480: break;
  5127  000DE4  D079               	goto	l4727
  5128  000DE6                     l4651:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;main.c: 482: LATA &= 0xF0;
  5132  000DE6  0EF0               	movlw	240
  5133  000DE8  1689               	andwf	3977,f,c	;volatile
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;main.c: 483: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5137  000DEA  5073               	movf	_blinkOn,w,c
  5138  000DEC  E003               	bz	l4657
  5139                           
  5140                           ; BSR set to: 0
  5141  000DEE  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5142  000DF2  D003               	goto	l4659
  5143  000DF4                     l4657:
  5144                           
  5145                           ; BSR set to: 0
  5146  000DF4  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5147  000DF6  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5148  000DF8  6E8A               	movwf	3978,c	;volatile
  5149  000DFA                     l4659:
  5150  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  5151                           
  5152                           ; BSR set to: 0
  5153  000DFC  0E00               	movlw	0
  5154  000DFE  ECAF  F014         	call	_UpdateLedRegister
  5155                           
  5156                           ;main.c: 484: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5157  000E02  5073               	movf	_blinkOn,w,c
  5158  000E04  E003               	bz	l4665
  5159  000E06  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5160  000E0A  D004               	goto	l4667
  5161  000E0C                     l4665:
  5162  000E0C  0100               	movlb	0	; () banked
  5163  000E0E  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5164  000E10  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5165  000E12  6E8A               	movwf	3978,c	;volatile
  5166  000E14                     l4667:
  5167  000E14  FFFF               	dw	65535	; assembler added errata NOP
  5168  000E16  0E01               	movlw	1
  5169  000E18  ECAF  F014         	call	_UpdateLedRegister
  5170                           
  5171                           ;main.c: 485: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5172  000E1C  5073               	movf	_blinkOn,w,c
  5173  000E1E  E003               	bz	l4673
  5174  000E20  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5175  000E24  D004               	goto	l4675
  5176  000E26                     l4673:
  5177  000E26  0100               	movlb	0	; () banked
  5178  000E28  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5179  000E2A  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5180  000E2C  6E8A               	movwf	3978,c	;volatile
  5181  000E2E                     l4675:
  5182  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  5183  000E30  0E02               	movlw	2
  5184  000E32  ECAF  F014         	call	_UpdateLedRegister
  5185                           
  5186                           ;main.c: 486: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5187  000E36  5073               	movf	_blinkOn,w,c
  5188  000E38  E003               	bz	l4681
  5189  000E3A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5190  000E3E  D004               	goto	l4683
  5191  000E40                     l4681:
  5192  000E40  0100               	movlb	0	; () banked
  5193  000E42  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5194  000E44  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5195  000E46  6E8A               	movwf	3978,c	;volatile
  5196  000E48                     l4683:
  5197  000E48  FFFF               	dw	65535	; assembler added errata NOP
  5198  000E4A  0E03               	movlw	3
  5199  000E4C  ECAF  F014         	call	_UpdateLedRegister
  5200                           
  5201                           ;main.c: 487: LATAbits.LATA2 = 1;
  5202  000E50  8489               	bsf	3977,2,c	;volatile
  5203                           
  5204                           ;main.c: 488: break;
  5205  000E52  D042               	goto	l4727
  5206  000E54                     l4687:
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;main.c: 490: LATA &= 0xF0;
  5210  000E54  0EF0               	movlw	240
  5211  000E56  1689               	andwf	3977,f,c	;volatile
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5215  000E58  5073               	movf	_blinkOn,w,c
  5216  000E5A  E003               	bz	l4693
  5217                           
  5218                           ; BSR set to: 0
  5219  000E5C  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5220  000E60  D003               	goto	l4695
  5221  000E62                     l4693:
  5222                           
  5223                           ; BSR set to: 0
  5224  000E62  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5225  000E64  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5226  000E66  6E8A               	movwf	3978,c	;volatile
  5227  000E68                     l4695:
  5228  000E68  FFFF               	dw	65535	; assembler added errata NOP
  5229                           
  5230                           ; BSR set to: 0
  5231  000E6A  0E00               	movlw	0
  5232  000E6C  ECAF  F014         	call	_UpdateLedRegister
  5233                           
  5234                           ;main.c: 492: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5235  000E70  5073               	movf	_blinkOn,w,c
  5236  000E72  E003               	bz	l4701
  5237  000E74  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5238  000E78  D004               	goto	l4703
  5239  000E7A                     l4701:
  5240  000E7A  0100               	movlb	0	; () banked
  5241  000E7C  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5242  000E7E  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5243  000E80  6E8A               	movwf	3978,c	;volatile
  5244  000E82                     l4703:
  5245  000E82  FFFF               	dw	65535	; assembler added errata NOP
  5246  000E84  0E01               	movlw	1
  5247  000E86  ECAF  F014         	call	_UpdateLedRegister
  5248                           
  5249                           ;main.c: 493: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5250  000E8A  5073               	movf	_blinkOn,w,c
  5251  000E8C  E003               	bz	l4709
  5252  000E8E  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5253  000E92  D004               	goto	l4711
  5254  000E94                     l4709:
  5255  000E94  0100               	movlb	0	; () banked
  5256  000E96  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5257  000E98  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5258  000E9A  6E8A               	movwf	3978,c	;volatile
  5259  000E9C                     l4711:
  5260  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  5261  000E9E  0E02               	movlw	2
  5262  000EA0  ECAF  F014         	call	_UpdateLedRegister
  5263                           
  5264                           ;main.c: 494: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5265  000EA4  5073               	movf	_blinkOn,w,c
  5266  000EA6  E003               	bz	l4717
  5267  000EA8  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5268  000EAC  D004               	goto	l4719
  5269  000EAE                     l4717:
  5270  000EAE  0100               	movlb	0	; () banked
  5271  000EB0  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5272  000EB2  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5273  000EB4  6E8A               	movwf	3978,c	;volatile
  5274  000EB6                     l4719:
  5275  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  5276  000EB8  0E03               	movlw	3
  5277  000EBA  ECAF  F014         	call	_UpdateLedRegister
  5278                           
  5279                           ;main.c: 495: LATAbits.LATA3 = 1;
  5280  000EBE  8689               	bsf	3977,3,c	;volatile
  5281                           
  5282                           ;main.c: 496: break;
  5283  000EC0  D00B               	goto	l4727
  5284  000EC2                     l4725:
  5285  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  5286                           
  5287                           ; BSR set to: 0
  5288  000EC4  51D8               	movf	_currentLedBlock& (0+255),w,b
  5289                           
  5290                           ; Switch size 1, requested type "speed"
  5291                           ; Number of cases is 4, Range of values is 0 to 3
  5292                           ; switch strategies available:
  5293                           ; Name         Instructions Cycles
  5294                           ; simple_byte           13     7 (average)
  5295                           ;	Chosen strategy is simple_byte
  5296  000EC6  E101 D720          	bz	l4579
  5297  000ECA  0A01               	xorlw	1	; case 1
  5298  000ECC  E101 D754          	bz	l4615
  5299  000ED0  0A03               	xorlw	3	; case 2
  5300  000ED2  E089               	bz	l4651
  5301  000ED4  0A01               	xorlw	1	; case 3
  5302  000ED6  E0BE               	bz	l4687
  5303  000ED8                     l4727:
  5304  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  5305                           
  5306                           ;main.c: 499: currentLedBlock++;
  5307  000EDA  0100               	movlb	0	; () banked
  5308  000EDC  2BD8               	incf	_currentLedBlock& (0+255),f,b
  5309                           
  5310                           ;main.c: 502: currentLedBlock &= 0xFB;
  5311  000EDE  95D8               	bcf	_currentLedBlock& (0+255),2,b
  5312                           
  5313                           ; BSR set to: 0
  5314  000EE0  0012               	return		;funcret
  5315  000EE2  FFFF               	dw	65535	; errata NOP
  5316  000EE4                     __end_of_ProcessLightBlock:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           postdec1	equ	0xFE5
  5328                           fsr1h	equ	0xFE2
  5329                           fsr1l	equ	0xFE1
  5330                           indf2	equ	0xFDF
  5331                           postinc2	equ	0xFDE
  5332                           postdec2	equ	0xFDD
  5333                           plusw2	equ	0xFDB
  5334                           fsr2h	equ	0xFDA
  5335                           fsr2l	equ	0xFD9
  5336                           status	equ	0xFD8
  5337                           
  5338 ;; *************** function _UpdateLedRegister *****************
  5339 ;; Defined at:
  5340 ;;		line 261 in file "main.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  regIndex        1    wreg     unsigned char 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  regIndex        1    6[COMRAM] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      void 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5354 ;;      Params:         0       0       0       0       0       0       0
  5355 ;;      Locals:         1       0       0       0       0       0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0
  5357 ;;      Totals:         1       0       0       0       0       0       0
  5358 ;;Total ram usage:        1 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    2
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_ProcessLightBlock
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text26
  5369  00295E                     __ptext26:
  5370                           	opt stack 0
  5371  00295E                     _UpdateLedRegister:
  5372                           	opt stack 27
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;incstack = 0
  5376  00295E  FFFF               	dw	65535
  5377                           
  5378                           ;UpdateLedRegister@regIndex stored from wreg
  5379  002960  6E07               	movwf	UpdateLedRegister@regIndex,c
  5380                           
  5381                           ;main.c: 263: switch(regIndex)
  5382  002962  D014               	goto	l3853
  5383  002964                     l246:
  5384                           
  5385                           ;main.c: 266: LATAbits.LATA4 = 0;
  5386  002964  9889               	bcf	3977,4,c	;volatile
  5387                           
  5388                           ;main.c: 267: TRISAbits.RA4 = 0;
  5389  002966  9892               	bcf	3986,4,c	;volatile
  5390                           
  5391                           ;main.c: 268: LATAbits.LATA4 = 1;
  5392  002968  8889               	bsf	3977,4,c	;volatile
  5393                           
  5394                           ;main.c: 269: TRISAbits.RA4 = 1;
  5395  00296A  8892               	bsf	3986,4,c	;volatile
  5396                           
  5397                           ;main.c: 270: break;
  5398  00296C  D018               	goto	l251
  5399  00296E                     l248:
  5400                           
  5401                           ;main.c: 272: LATCbits.LATC3 = 0;
  5402  00296E  968B               	bcf	3979,3,c	;volatile
  5403                           
  5404                           ;main.c: 273: TRISCbits.RC3 = 0;
  5405  002970  9694               	bcf	3988,3,c	;volatile
  5406                           
  5407                           ;main.c: 274: LATCbits.LATC3 = 1;
  5408  002972  868B               	bsf	3979,3,c	;volatile
  5409                           
  5410                           ;main.c: 275: TRISCbits.RC3 = 1;
  5411  002974  8694               	bsf	3988,3,c	;volatile
  5412                           
  5413                           ;main.c: 276: break;
  5414  002976  D013               	goto	l251
  5415  002978                     l249:
  5416                           
  5417                           ;main.c: 278: LATCbits.LATC0 = 0;
  5418  002978  908B               	bcf	3979,0,c	;volatile
  5419                           
  5420                           ;main.c: 279: TRISCbits.RC0 = 0;
  5421  00297A  9094               	bcf	3988,0,c	;volatile
  5422                           
  5423                           ;main.c: 280: LATCbits.LATC0 = 1;
  5424  00297C  808B               	bsf	3979,0,c	;volatile
  5425                           
  5426                           ;main.c: 281: TRISCbits.RC0 = 1;
  5427  00297E  8094               	bsf	3988,0,c	;volatile
  5428                           
  5429                           ;main.c: 282: break;
  5430  002980  D00E               	goto	l251
  5431  002982                     l250:
  5432                           
  5433                           ;main.c: 284: LATCbits.LATC1 = 0;
  5434  002982  928B               	bcf	3979,1,c	;volatile
  5435                           
  5436                           ;main.c: 285: TRISCbits.RC1 = 0;
  5437  002984  9294               	bcf	3988,1,c	;volatile
  5438                           
  5439                           ;main.c: 286: LATCbits.LATC1 = 1;
  5440  002986  828B               	bsf	3979,1,c	;volatile
  5441                           
  5442                           ;main.c: 287: TRISCbits.RC1 = 1;
  5443  002988  8294               	bsf	3988,1,c	;volatile
  5444                           
  5445                           ;main.c: 288: break;
  5446  00298A  D009               	goto	l251
  5447  00298C                     l3853:
  5448  00298C  FFFF               	dw	65535	; assembler added errata NOP
  5449  00298E  5007               	movf	UpdateLedRegister@regIndex,w,c
  5450                           
  5451                           ; Switch size 1, requested type "speed"
  5452                           ; Number of cases is 4, Range of values is 0 to 3
  5453                           ; switch strategies available:
  5454                           ; Name         Instructions Cycles
  5455                           ; simple_byte           13     7 (average)
  5456                           ;	Chosen strategy is simple_byte
  5457  002990  E0E9               	bz	l246
  5458  002992  0A01               	xorlw	1	; case 1
  5459  002994  E0EC               	bz	l248
  5460  002996  0A03               	xorlw	3	; case 2
  5461  002998  E0EF               	bz	l249
  5462  00299A  0A01               	xorlw	1	; case 3
  5463  00299C  E0F2               	bz	l250
  5464  00299E                     l251:
  5465  00299E  FFFF               	dw	65535	; assembler added errata NOP
  5466  0029A0  0012               	return		;funcret
  5467  0029A2  FFFF               	dw	65535	; errata NOP
  5468  0029A4                     __end_of_UpdateLedRegister:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           postdec1	equ	0xFE5
  5480                           fsr1h	equ	0xFE2
  5481                           fsr1l	equ	0xFE1
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           plusw2	equ	0xFDB
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _ProcessDiary *****************
  5491 ;; Defined at:
  5492 ;;		line 691 in file "main.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  totalMinutes    2   32[COMRAM] unsigned int 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      void 
  5499 ;; Registers used:
  5500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : F/1
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5506 ;;      Params:         0       0       0       0       0       0       0
  5507 ;;      Locals:         2       0       0       0       0       0       0
  5508 ;;      Temps:          4       0       0       0       0       0       0
  5509 ;;      Totals:         6       0       0       0       0       0       0
  5510 ;;Total ram usage:        6 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    5
  5513 ;; This function calls:
  5514 ;;		_GetTime
  5515 ;;		_LightLed
  5516 ;;		_LoadNextEvent
  5517 ;;		_PlaySound
  5518 ;;		_SwitchOffAllLeds
  5519 ;;		_getTotalMinutes
  5520 ;; This function is called by:
  5521 ;;		_main
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text27
  5526  001F9A                     __ptext27:
  5527                           	opt stack 0
  5528  001F9A                     _ProcessDiary:
  5529                           	opt stack 25
  5530                           
  5531                           ;incstack = 0
  5532  001F9A  FFFF               	dw	65535
  5533                           
  5534                           ; BSR set to: 1
  5535                           ;main.c: 694: if(curEventNum == 0xff)
  5536  001F9C  2875               	incf	_curEventNum,w,c
  5537  001F9E  E058               	bz	l415
  5538                           
  5539                           ; BSR set to: 1
  5540                           ;main.c: 696: uint16_t totalMinutes;
  5541                           ;main.c: 700: if(!getTotalMinutes(&totalMinutes))
  5542  001FA0  0E21               	movlw	ProcessDiary@totalMinutes& (0+255)
  5543  001FA2  EC2A  F016         	call	_getTotalMinutes
  5544  001FA6  0900               	iorlw	0
  5545  001FA8  E053               	bz	l415
  5546                           
  5547                           ;main.c: 703: if(totalMinutes == 0)
  5548  001FAA  5021               	movf	ProcessDiary@totalMinutes,w,c
  5549  001FAC  1022               	iorwf	ProcessDiary@totalMinutes+1,w,c
  5550  001FAE  E10C               	bnz	l6081
  5551                           
  5552                           ;main.c: 704: {
  5553                           ;main.c: 705: SwitchOffAllLeds();
  5554  001FB0  EC17  F016         	call	_SwitchOffAllLeds	;wreg free
  5555                           
  5556                           ;main.c: 706: curEventNum = 0xff;
  5557  001FB4  6875               	setf	_curEventNum,c
  5558                           
  5559                           ;main.c: 707: LoadNextEvent();
  5560  001FB6  EC10  F00D         	call	_LoadNextEvent	;wreg free
  5561                           
  5562                           ;main.c: 708: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5563  001FBA  5076               	movf	_currentAlarmedEventNum,w,c
  5564  001FBC  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5565  001FBE  5075               	movf	_curEventNum,w,c
  5566  001FC0  0101               	movlb	1	; () banked
  5567  001FC2  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5568  001FC4  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5569  001FC8                     l6081:
  5570                           
  5571                           ;main.c: 709: }
  5572                           ;main.c: 712: if(curEventTotalMinutes == totalMinutes)
  5573  001FC8  5021               	movf	ProcessDiary@totalMinutes,w,c
  5574  001FCA  0100               	movlb	0	; () banked
  5575  001FCC  19CA               	xorwf	_curEventTotalMinutes& (0+255),w,b
  5576  001FCE  E140               	bnz	l415
  5577  001FD0  5022               	movf	ProcessDiary@totalMinutes+1,w,c
  5578  001FD2  19CB               	xorwf	(_curEventTotalMinutes+1)& (0+255),w,b
  5579  001FD4  E13D               	bnz	l415
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 713: {
  5583                           ;main.c: 715: if(currentAlarmedEventNum != 0xff)
  5584  001FD6  2876               	incf	_currentAlarmedEventNum,w,c
  5585  001FD8  E006               	bz	l6087
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;main.c: 716: {
  5589                           ;main.c: 717: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5590  001FDA  0E02               	movlw	2
  5591  001FDC  6E07               	movwf	LightLed@ledState,c
  5592  001FDE  6A08               	clrf	LightLed@blink,c
  5593  001FE0  2876               	incf	_currentAlarmedEventNum,w,c
  5594  001FE2  ECC0  F004         	call	_LightLed
  5595  001FE6                     l6087:
  5596                           
  5597                           ;main.c: 718: }
  5598                           ;main.c: 720: {
  5599                           ;main.c: 721: currentAlarmedEventNum = curEventNum;
  5600  001FE6  C075  F076         	movff	_curEventNum,_currentAlarmedEventNum
  5601                           
  5602                           ;main.c: 723: LightLed(currentAlarmedEventNum + 1, LED_ORANGE, 1);
  5603  001FEA  0E03               	movlw	3
  5604  001FEC  6E07               	movwf	LightLed@ledState,c
  5605  001FEE  0E01               	movlw	1
  5606  001FF0  6E08               	movwf	LightLed@blink,c
  5607  001FF2  2876               	incf	_currentAlarmedEventNum,w,c
  5608  001FF4  ECC0  F004         	call	_LightLed
  5609                           
  5610                           ;main.c: 724: if(_nextEventSoundId != 0)
  5611  001FF8  0100               	movlb	0	; () banked
  5612  001FFA  51D3               	movf	__nextEventSoundId& (0+255),w,b
  5613  001FFC  E007               	bz	l6093
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;main.c: 725: {
  5617                           ;main.c: 726: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  5618  001FFE  C0C2  F015         	movff	__nextEventPlayDuration,PlaySound@playDuration
  5619  002002  C0C3  F016         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  5620  002006  05D3               	decf	__nextEventSoundId& (0+255),w,b
  5621  002008  EC90  F00E         	call	_PlaySound
  5622  00200C                     l6093:
  5623                           
  5624                           ;main.c: 727: }
  5625                           ;main.c: 736: eventResetSecond = *GetTime() + eventAcceptTime;
  5626  00200C  ECBB  F016         	call	_GetTime	;wreg free
  5627  002010  6ED9               	movwf	fsr2l,c
  5628  002012  6ADA               	clrf	fsr2h,c
  5629  002014  CFDE F01D          	movff	postinc2,??_ProcessDiary
  5630  002018  CFDE F01E          	movff	postinc2,??_ProcessDiary+1
  5631  00201C  CFDE F01F          	movff	postinc2,??_ProcessDiary+2
  5632  002020  CFDE F020          	movff	postinc2,??_ProcessDiary+3
  5633  002024  0100               	movlb	0	; () banked
  5634  002026  51D9               	movf	_eventAcceptTime& (0+255),w,b
  5635  002028  241D               	addwf	??_ProcessDiary,w,c
  5636  00202A  6FAC               	movwf	_eventResetSecond& (0+255),b
  5637  00202C  0E00               	movlw	0
  5638  00202E  201E               	addwfc	??_ProcessDiary+1,w,c
  5639  002030  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  5640  002032  0E00               	movlw	0
  5641  002034  201F               	addwfc	??_ProcessDiary+2,w,c
  5642  002036  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  5643  002038  0E00               	movlw	0
  5644  00203A  2020               	addwfc	??_ProcessDiary+3,w,c
  5645  00203C  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;main.c: 738: LoadNextEvent();
  5649  00203E  EC10  F00D         	call	_LoadNextEvent	;wreg free
  5650                           
  5651                           ;main.c: 739: }
  5652                           ;main.c: 740: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5653  002042  5076               	movf	_currentAlarmedEventNum,w,c
  5654  002044  6E1D               	movwf	??_ProcessDiary& (0+255),c
  5655  002046  5075               	movf	_curEventNum,w,c
  5656  002048  0101               	movlb	1	; () banked
  5657  00204A  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5658  00204C  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5659  002050                     l415:
  5660  002050  0012               	return		;funcret
  5661  002052  FFFF               	dw	65535	; errata NOP
  5662  002054                     __end_of_ProcessDiary:
  5663                           	opt stack 0
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           postinc0	equ	0xFEE
  5672                           wreg	equ	0xFE8
  5673                           postdec1	equ	0xFE5
  5674                           fsr1h	equ	0xFE2
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           plusw2	equ	0xFDB
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _SwitchOffAllLeds *****************
  5685 ;; Defined at:
  5686 ;;		line 293 in file "main.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  i               1    6[COMRAM] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5700 ;;      Params:         0       0       0       0       0       0       0
  5701 ;;      Locals:         1       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0
  5703 ;;      Totals:         1       0       0       0       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    2
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_InitFromEeprom
  5711 ;;		_ProcessDiary
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text28
  5716  002C2E                     __ptext28:
  5717                           	opt stack 0
  5718  002C2E                     _SwitchOffAllLeds:
  5719                           	opt stack 26
  5720                           
  5721                           ;incstack = 0
  5722  002C2E  FFFF               	dw	65535
  5723                           
  5724                           ;main.c: 295: for(uint8_t i = 0; i < 16 - 1; i++)
  5725  002C30  6A07               	clrf	SwitchOffAllLeds@i,c
  5726  002C32                     l5481:
  5727  002C32  FFFF               	dw	65535	; assembler added errata NOP
  5728                           
  5729                           ;main.c: 296: {
  5730                           ;main.c: 297: ledStatuses[i] = 0;
  5731  002C34  5007               	movf	SwitchOffAllLeds@i,w,c
  5732  002C36  0F90               	addlw	low _ledStatuses
  5733  002C38  6ED9               	movwf	fsr2l,c
  5734  002C3A  6ADA               	clrf	fsr2h,c
  5735  002C3C  6ADF               	clrf	indf2,c
  5736                           
  5737                           ;main.c: 298: ledBlink[i] = 0;
  5738  002C3E  5007               	movf	SwitchOffAllLeds@i,w,c
  5739  002C40  0F80               	addlw	low _ledBlink
  5740  002C42  6ED9               	movwf	fsr2l,c
  5741  002C44  6ADA               	clrf	fsr2h,c
  5742  002C46  6ADF               	clrf	indf2,c
  5743  002C48  2A07               	incf	SwitchOffAllLeds@i,f,c
  5744  002C4A  0E0E               	movlw	14
  5745  002C4C  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5746  002C4E  D7F1               	goto	l5481
  5747  002C50  0C0E               	retlw	14	;funcret
  5748  002C52  FFFF               	dw	65535	; errata NOP
  5749  002C54                     __end_of_SwitchOffAllLeds:
  5750                           	opt stack 0
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           postinc0	equ	0xFEE
  5759                           wreg	equ	0xFE8
  5760                           postdec1	equ	0xFE5
  5761                           fsr1h	equ	0xFE2
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           plusw2	equ	0xFDB
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _PlaySound *****************
  5772 ;; Defined at:
  5773 ;;		line 566 in file "main.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  soundId         1    wreg     unsigned char 
  5776 ;;  playDuration    2   20[COMRAM] unsigned int 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  soundId         1   26[COMRAM] unsigned char 
  5779 ;;  soundAddr       1   27[COMRAM] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      unsigned char 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : E/1
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5789 ;;      Params:         2       0       0       0       0       0       0
  5790 ;;      Locals:         2       0       0       0       0       0       0
  5791 ;;      Temps:          4       0       0       0       0       0       0
  5792 ;;      Totals:         8       0       0       0       0       0       0
  5793 ;;Total ram usage:        8 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    4
  5796 ;; This function calls:
  5797 ;;		_GetTime
  5798 ;;		_SoundPlayNextStep
  5799 ;; This function is called by:
  5800 ;;		_ProcessDiary
  5801 ;;		_CommandSetStatusLed
  5802 ;;		_io_poll
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text29
  5807  001D20                     __ptext29:
  5808                           	opt stack 0
  5809  001D20                     _PlaySound:
  5810                           	opt stack 25
  5811                           
  5812                           ;incstack = 0
  5813  001D20  FFFF               	dw	65535
  5814                           
  5815                           ;PlaySound@soundId stored from wreg
  5816  001D22  6E1B               	movwf	PlaySound@soundId,c
  5817                           
  5818                           ;main.c: 568: if(soundId >= _soundCount)
  5819  001D24  5071               	movf	__soundCount,w,c
  5820  001D26  5C1B               	subwf	PlaySound@soundId,w,c
  5821  001D28  E26E               	bc	l379
  5822                           
  5823                           ;main.c: 571: if(playDuration == 0)
  5824  001D2A  5015               	movf	PlaySound@playDuration,w,c
  5825  001D2C  1016               	iorwf	PlaySound@playDuration+1,w,c
  5826  001D2E  E106               	bnz	l5497
  5827                           
  5828                           ;main.c: 572: soundTestEnd = 0;
  5829  001D30  0100               	movlb	0	; () banked
  5830  001D32  6BB8               	clrf	_soundTestEnd& (0+255),b
  5831  001D34  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  5832  001D36  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  5833  001D38  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  5834  001D3A  D023               	goto	l5503
  5835  001D3C                     l5497:
  5836                           
  5837                           ;main.c: 573: else if(playDuration == 65535)
  5838  001D3C  2815               	incf	PlaySound@playDuration,w,c
  5839  001D3E  E108               	bnz	l5501
  5840  001D40  2816               	incf	PlaySound@playDuration+1,w,c
  5841  001D42  E106               	bnz	l5501
  5842                           
  5843                           ;main.c: 574: soundTestEnd = 4294967295;
  5844  001D44  0100               	movlb	0	; () banked
  5845  001D46  69B8               	setf	_soundTestEnd& (0+255),b
  5846  001D48  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  5847  001D4A  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  5848  001D4C  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  5849  001D4E  D019               	goto	l5503
  5850  001D50                     l5501:
  5851                           
  5852                           ;main.c: 575: else
  5853                           ;main.c: 576: soundTestEnd = *GetTime() + playDuration;
  5854  001D50  ECBB  F016         	call	_GetTime	;wreg free
  5855  001D54  6ED9               	movwf	fsr2l,c
  5856  001D56  6ADA               	clrf	fsr2h,c
  5857  001D58  CFDE F017          	movff	postinc2,??_PlaySound
  5858  001D5C  CFDE F018          	movff	postinc2,??_PlaySound+1
  5859  001D60  CFDE F019          	movff	postinc2,??_PlaySound+2
  5860  001D64  CFDE F01A          	movff	postinc2,??_PlaySound+3
  5861  001D68  5015               	movf	PlaySound@playDuration,w,c
  5862  001D6A  2417               	addwf	??_PlaySound,w,c
  5863  001D6C  0100               	movlb	0	; () banked
  5864  001D6E  6FB8               	movwf	_soundTestEnd& (0+255),b
  5865  001D70  5016               	movf	PlaySound@playDuration+1,w,c
  5866  001D72  2018               	addwfc	??_PlaySound+1,w,c
  5867  001D74  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  5868  001D76  0E00               	movlw	0
  5869  001D78  2019               	addwfc	??_PlaySound+2,w,c
  5870  001D7A  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  5871  001D7C  0E00               	movlw	0
  5872  001D7E  201A               	addwfc	??_PlaySound+3,w,c
  5873  001D80  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  5874  001D82                     l5503:
  5875  001D82  FFFF               	dw	65535	; assembler added errata NOP
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;main.c: 578: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  5879  001D84  501B               	movf	PlaySound@soundId,w,c
  5880  001D86  0F8D               	addlw	141
  5881  001D88  6EA9               	movwf	4009,c	;volatile
  5882                           
  5883                           ; BSR set to: 0
  5884  001D8A  80A6               	bsf	4006,0,c	;volatile
  5885                           
  5886                           ; BSR set to: 0
  5887  001D8C  CFA8 F01C          	movff	4008,PlaySound@soundAddr	;volatile
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;main.c: 579: if(140 + _soundCount + soundAddr >= 256)
  5891  001D90  501C               	movf	PlaySound@soundAddr,w,c
  5892  001D92  C071  F017         	movff	__soundCount,??_PlaySound
  5893  001D96  6A18               	clrf	(??_PlaySound+1)& (0+255),c
  5894  001D98  2617               	addwf	??_PlaySound,f,c
  5895  001D9A  0E00               	movlw	0
  5896  001D9C  2218               	addwfc	??_PlaySound+1,f,c
  5897  001D9E  0E8C               	movlw	140
  5898  001DA0  2617               	addwf	??_PlaySound,f,c
  5899  001DA2  0E00               	movlw	0
  5900  001DA4  2218               	addwfc	??_PlaySound+1,f,c
  5901  001DA6  BE18               	btfsc	??_PlaySound+1,7,c
  5902  001DA8  D002               	goto	l5513
  5903  001DAA  0418               	decf	??_PlaySound+1,w,c
  5904  001DAC  E22C               	bc	l379
  5905  001DAE                     l5513:
  5906  001DAE  FFFF               	dw	65535	; assembler added errata NOP
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;main.c: 582: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  5910  001DB0  5071               	movf	__soundCount,w,c
  5911  001DB2  241C               	addwf	PlaySound@soundAddr,w,c
  5912  001DB4  0F8D               	addlw	141
  5913  001DB6  6EA9               	movwf	4009,c	;volatile
  5914                           
  5915                           ; BSR set to: 0
  5916  001DB8  80A6               	bsf	4006,0,c	;volatile
  5917                           
  5918                           ; BSR set to: 0
  5919  001DBA  CFA8 F0D5          	movff	4008,__playingSoundSteps	;volatile
  5920                           
  5921                           ;main.c: 584: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  5922  001DBE  5071               	movf	__soundCount,w,c
  5923  001DC0  241C               	addwf	PlaySound@soundAddr,w,c
  5924  001DC2  0F8E               	addlw	142
  5925  001DC4  6E70               	movwf	__playingSoundStartPosInEe,c
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;main.c: 585: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5929  001DC6  51D5               	movf	__playingSoundSteps& (0+255),w,b
  5930  001DC8  6E17               	movwf	??_PlaySound& (0+255),c
  5931  001DCA  5070               	movf	__playingSoundStartPosInEe,w,c
  5932  001DCC  0101               	movlb	1	; () banked
  5933  001DCE  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5934  001DD0  C017  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5935                           
  5936                           ; BSR set to: 1
  5937                           ;main.c: 586: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5938  001DD4  0100               	movlb	0	; () banked
  5939  001DD6  51D5               	movf	__playingSoundSteps& (0+255),w,b
  5940  001DD8  0D03               	mullw	3
  5941  001DDA  5070               	movf	__playingSoundStartPosInEe,w,c
  5942  001DDC  26F3               	addwf	prodl,f,c
  5943  001DDE  0E00               	movlw	0
  5944  001DE0  22F4               	addwfc	prodh,f,c
  5945  001DE2  BEF4               	btfsc	prodh,7,c
  5946  001DE4  D002               	goto	l385
  5947  001DE6  04F4               	decf	prodh,w,c
  5948  001DE8  E20E               	bc	l379
  5949  001DEA                     l385:
  5950  001DEA  FFFF               	dw	65535	; assembler added errata NOP
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;main.c: 589: _playingSoundCurPos = 0;
  5954  001DEC  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 590: _isSoundPlaying = 1;
  5958  001DEE  0E01               	movlw	1
  5959  001DF0  6FD2               	movwf	__isSoundPlaying& (0+255),b
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;main.c: 591: SoundPlayNextStep();
  5963  001DF2  EC85  F010         	call	_SoundPlayNextStep	;wreg free
  5964                           
  5965                           ;main.c: 593: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  5966  001DF6  5071               	movf	__soundCount,w,c
  5967  001DF8  6E17               	movwf	??_PlaySound& (0+255),c
  5968  001DFA  0100               	movlb	0	; () banked
  5969  001DFC  51D2               	movf	__isSoundPlaying& (0+255),w,b
  5970  001DFE  0101               	movlb	1	; () banked
  5971  001E00  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  5972  001E02  C017  F1B7         	movff	??_PlaySound,__MODBUSInputRegs+13
  5973  001E06                     l379:
  5974  001E06  0012               	return		;funcret
  5975  001E08  FFFF               	dw	65535	; errata NOP
  5976  001E0A                     __end_of_PlaySound:
  5977                           	opt stack 0
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           postinc0	equ	0xFEE
  5986                           wreg	equ	0xFE8
  5987                           postdec1	equ	0xFE5
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           plusw2	equ	0xFDB
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function _SoundPlayNextStep *****************
  5999 ;; Defined at:
  6000 ;;		line 523 in file "main.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  duration        1   19[COMRAM] unsigned char 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      void 
  6007 ;; Registers used:
  6008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6009 ;; Tracked objects:
  6010 ;;		On entry : F/0
  6011 ;;		On exit  : E/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6014 ;;      Params:         0       0       0       0       0       0       0
  6015 ;;      Locals:         1       0       0       0       0       0       0
  6016 ;;      Temps:          5       0       0       0       0       0       0
  6017 ;;      Totals:         6       0       0       0       0       0       0
  6018 ;;Total ram usage:        6 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    3
  6021 ;; This function calls:
  6022 ;;		_GetTime
  6023 ;;		_SetBuzzerDuty
  6024 ;;		_StopPlaying
  6025 ;;		_millis
  6026 ;; This function is called by:
  6027 ;;		_PlaySound
  6028 ;;		_main
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text30
  6033  00210A                     __ptext30:
  6034                           	opt stack 0
  6035  00210A                     _SoundPlayNextStep:
  6036                           	opt stack 25
  6037                           
  6038                           ;incstack = 0
  6039  00210A  FFFF               	dw	65535
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;main.c: 525: if(_playingSoundCurPos >= _playingSoundSteps)
  6043  00210C  51D5               	movf	__playingSoundSteps& (0+255),w,b
  6044  00210E  5DD4               	subwf	__playingSoundCurPos& (0+255),w,b
  6045  002110  E316               	bnc	l5419
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;main.c: 526: {
  6049                           ;main.c: 527: _playingSoundCurPos = 0;
  6050  002112  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;main.c: 528: if(*GetTime() >= soundTestEnd)
  6054  002114  ECBB  F016         	call	_GetTime	;wreg free
  6055  002118  6ED9               	movwf	fsr2l,c
  6056  00211A  6ADA               	clrf	fsr2h,c
  6057  00211C  0100               	movlb	0	; () banked
  6058  00211E  51B8               	movf	_soundTestEnd& (0+255),w,b
  6059  002120  5CDE               	subwf	postinc2,w,c
  6060  002122  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  6061  002124  58DE               	subwfb	postinc2,w,c
  6062  002126  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  6063  002128  58DE               	subwfb	postinc2,w,c
  6064  00212A  50DE               	movf	postinc2,w,c
  6065  00212C  0A80               	xorlw	128
  6066  00212E  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  6067  002130  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  6068  002132  0A80               	xorlw	128
  6069  002134  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  6070  002136  E303               	bnc	l5419
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;main.c: 529: {
  6074                           ;main.c: 530: StopPlaying();
  6075  002138  EC5C  F016         	call	_StopPlaying	;wreg free
  6076  00213C  D03A               	goto	l372
  6077  00213E                     l5419:
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;main.c: 532: }
  6081                           ;main.c: 533: }
  6082                           ;main.c: 534: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  6083  00213E  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6084  002140  0D03               	mullw	3
  6085  002142  50F3               	movf	prodl,w,c
  6086  002144  2470               	addwf	__playingSoundStartPosInEe,w,c
  6087  002146  6EA9               	movwf	4009,c	;volatile
  6088                           
  6089                           ; BSR set to: 0
  6090  002148  80A6               	bsf	4006,0,c	;volatile
  6091                           
  6092                           ; BSR set to: 0
  6093  00214A  50A8               	movf	4008,w,c	;volatile
  6094  00214C  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  6095  00214E  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  6096  002150  EC02  F016         	call	_millis	;wreg free
  6097  002154  500F               	movf	??_SoundPlayNextStep,w,c
  6098  002156  2407               	addwf	?_millis,w,c
  6099  002158  0100               	movlb	0	; () banked
  6100  00215A  6FA0               	movwf	__playingEndMs& (0+255),b
  6101  00215C  5010               	movf	??_SoundPlayNextStep+1,w,c
  6102  00215E  2008               	addwfc	?_millis+1,w,c
  6103  002160  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  6104  002162  0E00               	movlw	0
  6105  002164  2009               	addwfc	?_millis+2,w,c
  6106  002166  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  6107  002168  0E00               	movlw	0
  6108  00216A  200A               	addwfc	?_millis+3,w,c
  6109  00216C  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;main.c: 535: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  6113  00216E  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6114  002170  0D03               	mullw	3
  6115  002172  50F3               	movf	prodl,w,c
  6116  002174  2470               	addwf	__playingSoundStartPosInEe,w,c
  6117  002176  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  6118  002178  280F               	incf	??_SoundPlayNextStep,w,c
  6119  00217A  6EA9               	movwf	4009,c	;volatile
  6120                           
  6121                           ; BSR set to: 0
  6122  00217C  80A6               	bsf	4006,0,c	;volatile
  6123                           
  6124                           ; BSR set to: 0
  6125  00217E  CFA8 FFCB          	movff	4008,4043	;volatile
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;main.c: 536: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  6129  002182  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  6130  002184  0D03               	mullw	3
  6131  002186  50F3               	movf	prodl,w,c
  6132  002188  2470               	addwf	__playingSoundStartPosInEe,w,c
  6133  00218A  0F02               	addlw	2
  6134  00218C  6EA9               	movwf	4009,c	;volatile
  6135                           
  6136                           ; BSR set to: 0
  6137  00218E  80A6               	bsf	4006,0,c	;volatile
  6138                           
  6139                           ; BSR set to: 0
  6140  002190  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;main.c: 537: _playingSoundCurPos++;
  6144  002194  2BD4               	incf	__playingSoundCurPos& (0+255),f,b
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;main.c: 538: if(duration == 0 || PR2 == 0)
  6148  002196  5014               	movf	SoundPlayNextStep@duration,w,c
  6149  002198  E002               	bz	l375
  6150                           
  6151                           ; BSR set to: 0
  6152  00219A  50CB               	movf	4043,w,c	;volatile
  6153  00219C  E103               	bnz	l5443
  6154  00219E                     l375:
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 539: {
  6158                           ;main.c: 540: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6159  00219E  94CA               	bcf	4042,2,c	;volatile
  6160  0021A0  8494               	bsf	3988,2,c	;volatile
  6161                           
  6162                           ;main.c: 541: return;
  6163  0021A2  D007               	goto	l372
  6164  0021A4                     l5443:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 542: }
  6168                           ;main.c: 543: SetBuzzerDuty(duration);
  6169  0021A4  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  6170  0021A8  6A08               	clrf	SetBuzzerDuty@dc+1,c
  6171  0021AA  EC8E  F015         	call	_SetBuzzerDuty	;wreg free
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;main.c: 544: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  6175  0021AE  9494               	bcf	3988,2,c	;volatile
  6176                           
  6177                           ; BSR set to: 0
  6178  0021B0  84CA               	bsf	4042,2,c	;volatile
  6179  0021B2                     l372:
  6180  0021B2  FFFF               	dw	65535	; assembler added errata NOP
  6181  0021B4  0012               	return		;funcret
  6182  0021B6  FFFF               	dw	65535	; errata NOP
  6183  0021B8                     __end_of_SoundPlayNextStep:
  6184                           	opt stack 0
  6185                           tblptru	equ	0xFF8
  6186                           tblptrh	equ	0xFF7
  6187                           tblptrl	equ	0xFF6
  6188                           tablat	equ	0xFF5
  6189                           prodh	equ	0xFF4
  6190                           prodl	equ	0xFF3
  6191                           intcon	equ	0xFF2
  6192                           postinc0	equ	0xFEE
  6193                           wreg	equ	0xFE8
  6194                           postdec1	equ	0xFE5
  6195                           fsr1h	equ	0xFE2
  6196                           fsr1l	equ	0xFE1
  6197                           indf2	equ	0xFDF
  6198                           postinc2	equ	0xFDE
  6199                           postdec2	equ	0xFDD
  6200                           plusw2	equ	0xFDB
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function _StopPlaying *****************
  6206 ;; Defined at:
  6207 ;;		line 515 in file "main.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : F/1
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6221 ;;      Params:         0       0       0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0
  6223 ;;      Temps:          2       0       0       0       0       0       0
  6224 ;;      Totals:         2       0       0       0       0       0       0
  6225 ;;Total ram usage:        2 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    2
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_SoundPlayNextStep
  6232 ;;		_ResetEvent
  6233 ;;		_main
  6234 ;;		_CommandSetStatusLed
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text31
  6239  002CB8                     __ptext31:
  6240                           	opt stack 0
  6241  002CB8                     _StopPlaying:
  6242                           	opt stack 25
  6243                           
  6244                           ;incstack = 0
  6245  002CB8  FFFF               	dw	65535
  6246                           
  6247                           ;main.c: 517: _isSoundPlaying = 0;
  6248  002CBA  0100               	movlb	0	; () banked
  6249  002CBC  6BD2               	clrf	__isSoundPlaying& (0+255),b
  6250                           
  6251                           ;main.c: 518: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  6252  002CBE  94CA               	bcf	4042,2,c	;volatile
  6253  002CC0  8494               	bsf	3988,2,c	;volatile
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;main.c: 520: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|_isSoundPlaying);
  6257  002CC2  5071               	movf	__soundCount,w,c
  6258  002CC4  6E07               	movwf	??_StopPlaying& (0+255),c
  6259  002CC6  51D2               	movf	__isSoundPlaying& (0+255),w,b
  6260  002CC8  0101               	movlb	1	; () banked
  6261  002CCA  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  6262  002CCC  C007  F1B7         	movff	??_StopPlaying,__MODBUSInputRegs+13
  6263                           
  6264                           ; BSR set to: 1
  6265  002CD0  0012               	return		;funcret
  6266  002CD2  FFFF               	dw	65535	; errata NOP
  6267  002CD4                     __end_of_StopPlaying:
  6268                           	opt stack 0
  6269                           tblptru	equ	0xFF8
  6270                           tblptrh	equ	0xFF7
  6271                           tblptrl	equ	0xFF6
  6272                           tablat	equ	0xFF5
  6273                           prodh	equ	0xFF4
  6274                           prodl	equ	0xFF3
  6275                           intcon	equ	0xFF2
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           plusw2	equ	0xFDB
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _SetBuzzerDuty *****************
  6290 ;; Defined at:
  6291 ;;		line 393 in file "main.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  dc              2    6[COMRAM] unsigned int 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;		None
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      void 
  6298 ;; Registers used:
  6299 ;;		wreg, status,2, status,0
  6300 ;; Tracked objects:
  6301 ;;		On entry : F/0
  6302 ;;		On exit  : F/0
  6303 ;;		Unchanged: F/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6305 ;;      Params:         2       0       0       0       0       0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0
  6307 ;;      Temps:          2       0       0       0       0       0       0
  6308 ;;      Totals:         4       0       0       0       0       0       0
  6309 ;;Total ram usage:        4 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    2
  6312 ;; This function calls:
  6313 ;;		Nothing
  6314 ;; This function is called by:
  6315 ;;		_SoundPlayNextStep
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text32
  6320  002B1C                     __ptext32:
  6321                           	opt stack 0
  6322  002B1C                     _SetBuzzerDuty:
  6323                           	opt stack 25
  6324                           
  6325                           ; BSR set to: 1
  6326                           ;incstack = 0
  6327  002B1C  FFFF               	dw	65535
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;main.c: 398: CCP1CONbits.DC1B = dc & 0x03;
  6331  002B1E  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6332  002B22  0E03               	movlw	3
  6333  002B24  1609               	andwf	??_SetBuzzerDuty,f,c
  6334  002B26  3A09               	swapf	??_SetBuzzerDuty,f,c
  6335  002B28  50BD               	movf	4029,w,c	;volatile
  6336  002B2A  1809               	xorwf	??_SetBuzzerDuty,w,c
  6337  002B2C  0BCF               	andlw	-49
  6338  002B2E  1809               	xorwf	??_SetBuzzerDuty,w,c
  6339  002B30  6EBD               	movwf	4029,c	;volatile
  6340                           
  6341                           ;main.c: 402: CCPR1L = (uint8_t)(dc >> 2);
  6342  002B32  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  6343  002B36  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  6344  002B3A  90D8               	bcf	status,0,c
  6345  002B3C  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6346  002B3E  3209               	rrcf	??_SetBuzzerDuty,f,c
  6347  002B40  90D8               	bcf	status,0,c
  6348  002B42  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  6349  002B44  3209               	rrcf	??_SetBuzzerDuty,f,c
  6350  002B46  5009               	movf	??_SetBuzzerDuty,w,c
  6351  002B48  6EBE               	movwf	4030,c	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354  002B4A  0012               	return		;funcret
  6355  002B4C  FFFF               	dw	65535	; errata NOP
  6356  002B4E                     __end_of_SetBuzzerDuty:
  6357                           	opt stack 0
  6358                           tblptru	equ	0xFF8
  6359                           tblptrh	equ	0xFF7
  6360                           tblptrl	equ	0xFF6
  6361                           tablat	equ	0xFF5
  6362                           prodh	equ	0xFF4
  6363                           prodl	equ	0xFF3
  6364                           intcon	equ	0xFF2
  6365                           postinc0	equ	0xFEE
  6366                           wreg	equ	0xFE8
  6367                           postdec1	equ	0xFE5
  6368                           fsr1h	equ	0xFE2
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           plusw2	equ	0xFDB
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _GetTime *****************
  6379 ;; Defined at:
  6380 ;;		line 207 in file "user.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      PTR long 
  6387 ;; Registers used:
  6388 ;;		wreg
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6394 ;;      Params:         2       0       0       0       0       0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0
  6397 ;;      Totals:         2       0       0       0       0       0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    2
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_SoundPlayNextStep
  6405 ;;		_PlaySound
  6406 ;;		_ProcessDiary
  6407 ;;		_main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text33
  6412  002D76                     __ptext33:
  6413                           	opt stack 0
  6414  002D76                     _GetTime:
  6415                           	opt stack 25
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;incstack = 0
  6419  002D76  FFFF               	dw	65535
  6420                           
  6421                           ;user.c: 209: return &currentTime;
  6422  002D78  0EDB               	movlw	_currentTime& (0+255)
  6423  002D7A  0012               	return		;funcret
  6424  002D7C  FFFF               	dw	65535	; errata NOP
  6425  002D7E                     __end_of_GetTime:
  6426                           	opt stack 0
  6427                           tblptru	equ	0xFF8
  6428                           tblptrh	equ	0xFF7
  6429                           tblptrl	equ	0xFF6
  6430                           tablat	equ	0xFF5
  6431                           prodh	equ	0xFF4
  6432                           prodl	equ	0xFF3
  6433                           intcon	equ	0xFF2
  6434                           postinc0	equ	0xFEE
  6435                           wreg	equ	0xFE8
  6436                           postdec1	equ	0xFE5
  6437                           fsr1h	equ	0xFE2
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           plusw2	equ	0xFDB
  6443                           fsr2h	equ	0xFDA
  6444                           fsr2l	equ	0xFD9
  6445                           status	equ	0xFD8
  6446                           
  6447 ;; *************** function _LoadNextEvent *****************
  6448 ;; Defined at:
  6449 ;;		line 612 in file "main.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;		None
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  v1              1   11[COMRAM] unsigned char 
  6454 ;;  totalMinutes    2    9[COMRAM] unsigned int 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6464 ;;      Params:         0       0       0       0       0       0       0
  6465 ;;      Locals:         3       0       0       0       0       0       0
  6466 ;;      Temps:          2       0       0       0       0       0       0
  6467 ;;      Totals:         5       0       0       0       0       0       0
  6468 ;;Total ram usage:        5 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    3
  6471 ;; This function calls:
  6472 ;;		_getTotalMinutes
  6473 ;; This function is called by:
  6474 ;;		_InitFromEeprom
  6475 ;;		_ProcessDiary
  6476 ;;		_SetTimeFromRegs
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           	psect	text34
  6481  001A20                     __ptext34:
  6482                           	opt stack 0
  6483  001A20                     _LoadNextEvent:
  6484                           	opt stack 24
  6485                           
  6486                           ;incstack = 0
  6487  001A20  FFFF               	dw	65535
  6488                           
  6489                           ;main.c: 614: if(eventCount == 0)
  6490  001A22  0100               	movlb	0	; () banked
  6491  001A24  51DA               	movf	_eventCount& (0+255),w,b
  6492  001A26  E07D               	bz	l396
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 617: uint16_t totalMinutes;
  6496                           ;main.c: 620: if(!getTotalMinutes(&totalMinutes))
  6497  001A28  0E0A               	movlw	LoadNextEvent@totalMinutes& (0+255)
  6498  001A2A  EC2A  F016         	call	_getTotalMinutes
  6499  001A2E  0900               	iorlw	0
  6500  001A30  E078               	bz	l396
  6501  001A32                     l5357:
  6502                           
  6503                           ;main.c: 631: {
  6504                           ;main.c: 632: if(curEventNum == 0xff)
  6505  001A32  2875               	incf	_curEventNum,w,c
  6506  001A34  E102               	bnz	l5361
  6507                           
  6508                           ;main.c: 633: curEventNum = 0;
  6509  001A36  6A75               	clrf	_curEventNum,c
  6510  001A38  D001               	goto	l5363
  6511  001A3A                     l5361:
  6512                           
  6513                           ;main.c: 634: else
  6514                           ;main.c: 635: curEventNum++;
  6515  001A3A  2A75               	incf	_curEventNum,f,c
  6516  001A3C                     l5363:
  6517  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  6518                           
  6519                           ;main.c: 636: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6520  001A3E  5076               	movf	_currentAlarmedEventNum,w,c
  6521  001A40  6E08               	movwf	??_LoadNextEvent& (0+255),c
  6522  001A42  5075               	movf	_curEventNum,w,c
  6523  001A44  0101               	movlb	1	; () banked
  6524  001A46  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6525  001A48  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;main.c: 637: if(curEventNum >= eventCount)
  6529  001A4C  0100               	movlb	0	; () banked
  6530  001A4E  51DA               	movf	_eventCount& (0+255),w,b
  6531  001A50  5C75               	subwf	_curEventNum,w,c
  6532  001A52  E307               	bnc	l5369
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;main.c: 638: {
  6536                           ;main.c: 639: curEventNum = 0xff;
  6537  001A54  6875               	setf	_curEventNum,c
  6538                           
  6539                           ;main.c: 640: curEventTotalMinutes = 0;
  6540  001A56  6BCA               	clrf	_curEventTotalMinutes& (0+255),b
  6541  001A58  6BCB               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  6542                           
  6543                           ;main.c: 641: _MODBUSInputRegs[3] = (((uint16_t)0<<8)|0);
  6544  001A5A  0101               	movlb	1	; () banked
  6545  001A5C  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  6546  001A5E  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  6547                           
  6548                           ;main.c: 642: return;
  6549  001A60  D060               	goto	l396
  6550  001A62                     l5369:
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 643: }
  6554                           ;main.c: 654: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6555  001A62  5075               	movf	_curEventNum,w,c
  6556  001A64  0D02               	mullw	2
  6557  001A66  50F3               	movf	prodl,w,c
  6558  001A68  0F13               	addlw	19
  6559  001A6A  6EA9               	movwf	4009,c	;volatile
  6560                           
  6561                           ; BSR set to: 0
  6562  001A6C  80A6               	bsf	4006,0,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565  001A6E  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  6566                           
  6567                           ;main.c: 655: curEventTotalMinutes = (v1 & 0x1F) * 60;
  6568  001A72  500C               	movf	LoadNextEvent@v1,w,c
  6569  001A74  0B1F               	andlw	31
  6570  001A76  0D3C               	mullw	60
  6571  001A78  CFF3 F0CA          	movff	prodl,_curEventTotalMinutes
  6572  001A7C  CFF4 F0CB          	movff	prodh,_curEventTotalMinutes+1
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;main.c: 657: _nextEventPlayDuration = (v1 >> 5);
  6576  001A80  380C               	swapf	LoadNextEvent@v1,w,c
  6577  001A82  42E8               	rrncf	wreg,f,c
  6578  001A84  0B07               	andlw	7
  6579  001A86  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6580  001A88  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6581                           
  6582                           ;main.c: 658: switch(_nextEventPlayDuration)
  6583  001A8A  D01A               	goto	l5391
  6584  001A8C                     l5377:
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;main.c: 661: _nextEventPlayDuration = 10;
  6588  001A8C  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6589  001A8E  0E0A               	movlw	10
  6590  001A90  D011               	goto	L7
  6591  001A92                     l5379:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;main.c: 664: _nextEventPlayDuration = 30;
  6595  001A92  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6596  001A94  0E1E               	movlw	30
  6597  001A96  D00E               	goto	L7
  6598  001A98                     l5381:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;main.c: 667: _nextEventPlayDuration = 60;
  6602  001A98  6BC3               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  6603  001A9A  0E3C               	movlw	60
  6604  001A9C  D00B               	goto	L7
  6605  001A9E                     l5383:
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;main.c: 670: _nextEventPlayDuration = 60*5;
  6609  001A9E  0E01               	movlw	1
  6610  001AA0  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6611  001AA2  0E2C               	movlw	44
  6612  001AA4  D007               	goto	L7
  6613  001AA6                     l5385:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 673: _nextEventPlayDuration = 60*12;
  6617  001AA6  0E02               	movlw	2
  6618  001AA8  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6619  001AAA  0ED0               	movlw	208
  6620  001AAC  D003               	goto	L7
  6621  001AAE                     l5387:
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;main.c: 676: _nextEventPlayDuration = 60*30;
  6625  001AAE  0E07               	movlw	7
  6626  001AB0  6FC3               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  6627  001AB2  0E08               	movlw	8
  6628  001AB4                     L7:
  6629  001AB4  FFFF               	dw	65535	; assembler added errata NOP
  6630  001AB6  6FC2               	movwf	__nextEventPlayDuration& (0+255),b
  6631                           
  6632                           ;main.c: 677: break;
  6633  001AB8  D019               	goto	l5393
  6634  001ABA                     l410:
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 679: _nextEventPlayDuration = 65535;
  6638  001ABA  69C2               	setf	__nextEventPlayDuration& (0+255),b
  6639  001ABC  69C3               	setf	(__nextEventPlayDuration+1)& (0+255),b
  6640                           
  6641                           ;main.c: 680: break;
  6642  001ABE  D016               	goto	l5393
  6643  001AC0                     l5391:
  6644  001AC0  FFFF               	dw	65535	; assembler added errata NOP
  6645                           
  6646                           ; BSR set to: 0
  6647  001AC2  C0C2  F008         	movff	__nextEventPlayDuration,??_LoadNextEvent
  6648  001AC6  C0C3  F009         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  6649                           
  6650                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6651                           ; Switch size 1, requested type "speed"
  6652                           ; Number of cases is 1, Range of values is 0 to 0
  6653                           ; switch strategies available:
  6654                           ; Name         Instructions Cycles
  6655                           ; simple_byte            4     3 (average)
  6656                           ;	Chosen strategy is simple_byte
  6657  001ACA  5009               	movf	??_LoadNextEvent+1,w,c
  6658  001ACC  E10F               	bnz	l5393
  6659                           
  6660                           ; BSR set to: 0
  6661                           ; Switch size 1, requested type "speed"
  6662                           ; Number of cases is 7, Range of values is 1 to 7
  6663                           ; switch strategies available:
  6664                           ; Name         Instructions Cycles
  6665                           ; simple_byte           22    12 (average)
  6666                           ;	Chosen strategy is simple_byte
  6667  001ACE  5008               	movf	??_LoadNextEvent,w,c
  6668  001AD0  0A01               	xorlw	1	; case 1
  6669  001AD2  E0DC               	bz	l5377
  6670  001AD4  0A03               	xorlw	3	; case 2
  6671  001AD6  E0DD               	bz	l5379
  6672  001AD8  0A01               	xorlw	1	; case 3
  6673  001ADA  E0DE               	bz	l5381
  6674  001ADC  0A07               	xorlw	7	; case 4
  6675  001ADE  E0DF               	bz	l5383
  6676  001AE0  0A01               	xorlw	1	; case 5
  6677  001AE2  E0E1               	bz	l5385
  6678  001AE4  0A03               	xorlw	3	; case 6
  6679  001AE6  E0E3               	bz	l5387
  6680  001AE8  0A01               	xorlw	1	; case 7
  6681  001AEA  E0E7               	bz	l410
  6682  001AEC                     l5393:
  6683  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 682: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  6687  001AEE  5075               	movf	_curEventNum,w,c
  6688  001AF0  0D02               	mullw	2
  6689  001AF2  50F3               	movf	prodl,w,c
  6690  001AF4  0F14               	addlw	20
  6691  001AF6  6EA9               	movwf	4009,c	;volatile
  6692                           
  6693                           ; BSR set to: 0
  6694  001AF8  80A6               	bsf	4006,0,c	;volatile
  6695                           
  6696                           ; BSR set to: 0
  6697  001AFA  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 683: curEventTotalMinutes += v1 & 0x3F;
  6701  001AFE  500C               	movf	LoadNextEvent@v1,w,c
  6702  001B00  0B3F               	andlw	63
  6703  001B02  27CA               	addwf	_curEventTotalMinutes& (0+255),f,b
  6704  001B04  0E00               	movlw	0
  6705  001B06  23CB               	addwfc	(_curEventTotalMinutes+1)& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;main.c: 684: _nextEventSoundId = v1 >> 6;
  6709  001B08  440C               	rlncf	LoadNextEvent@v1,w,c
  6710  001B0A  46E8               	rlncf	wreg,f,c
  6711  001B0C  0B03               	andlw	3
  6712  001B0E  6FD3               	movwf	__nextEventSoundId& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 686: }while(curEventTotalMinutes <= totalMinutes);
  6716  001B10  51CA               	movf	_curEventTotalMinutes& (0+255),w,b
  6717  001B12  5C0A               	subwf	LoadNextEvent@totalMinutes,w,c
  6718  001B14  51CB               	movf	(_curEventTotalMinutes+1)& (0+255),w,b
  6719  001B16  580B               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  6720  001B18  E28C               	bc	l5357
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;main.c: 687: _MODBUSInputRegs[3] = curEventTotalMinutes;
  6724  001B1A  C0CA  F1B0         	movff	_curEventTotalMinutes,__MODBUSInputRegs+6
  6725  001B1E  C0CB  F1B1         	movff	_curEventTotalMinutes+1,__MODBUSInputRegs+7
  6726  001B22                     l396:
  6727  001B22  FFFF               	dw	65535	; assembler added errata NOP
  6728  001B24  0012               	return		;funcret
  6729  001B26  FFFF               	dw	65535	; errata NOP
  6730  001B28                     __end_of_LoadNextEvent:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           postdec1	equ	0xFE5
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           plusw2	equ	0xFDB
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _getTotalMinutes *****************
  6753 ;; Defined at:
  6754 ;;		line 267 in file "interrupts.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  totalMinutes    1    wreg     PTR unsigned int 
  6757 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  totalMinutes    1    6[COMRAM] PTR unsigned int 
  6760 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6765 ;; Tracked objects:
  6766 ;;		On entry : E/1
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6770 ;;      Params:         0       0       0       0       0       0       0
  6771 ;;      Locals:         1       0       0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0
  6773 ;;      Totals:         1       0       0       0       0       0       0
  6774 ;;Total ram usage:        1 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    2
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_LoadNextEvent
  6781 ;;		_ProcessDiary
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text35
  6786  002C54                     __ptext35:
  6787                           	opt stack 0
  6788  002C54                     _getTotalMinutes:
  6789                           	opt stack 24
  6790                           
  6791                           ;incstack = 0
  6792  002C54  FFFF               	dw	65535
  6793                           
  6794                           ;getTotalMinutes@totalMinutes stored from wreg
  6795  002C56  6E07               	movwf	getTotalMinutes@totalMinutes,c
  6796                           
  6797                           ;interrupts.c: 269: if(globalHours == 0xFF)
  6798  002C58  2877               	incf	_globalHours,w,c	;volatile
  6799  002C5A  E102               	bnz	l112
  6800                           
  6801                           ;interrupts.c: 270: return 0;
  6802  002C5C  0E00               	movlw	0
  6803  002C5E  D00A               	goto	l113
  6804  002C60                     l112:
  6805                           
  6806                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  6807  002C60  9EF2               	bcf	intcon,7,c	;volatile
  6808                           
  6809                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  6810  002C62  5007               	movf	getTotalMinutes@totalMinutes,w,c
  6811  002C64  6ED9               	movwf	fsr2l,c
  6812  002C66  6ADA               	clrf	fsr2h,c
  6813  002C68  C0C4  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  6814  002C6C  C0C5  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  6815                           
  6816                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  6817  002C70  8EF2               	bsf	intcon,7,c	;volatile
  6818                           
  6819                           ;interrupts.c: 274: return 1;
  6820  002C72  0E01               	movlw	1
  6821  002C74                     l113:
  6822  002C74  FFFF               	dw	65535	; assembler added errata NOP
  6823  002C76  0012               	return		;funcret
  6824  002C78  FFFF               	dw	65535	; errata NOP
  6825  002C7A                     __end_of_getTotalMinutes:
  6826                           	opt stack 0
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           postinc0	equ	0xFEE
  6835                           wreg	equ	0xFE8
  6836                           postdec1	equ	0xFE5
  6837                           fsr1h	equ	0xFE2
  6838                           fsr1l	equ	0xFE1
  6839                           indf2	equ	0xFDF
  6840                           postinc2	equ	0xFDE
  6841                           postdec2	equ	0xFDD
  6842                           plusw2	equ	0xFDB
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _LightLed *****************
  6848 ;; Defined at:
  6849 ;;		line 304 in file "main.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  ledNum          1    wreg     unsigned char 
  6852 ;;  ledState        1    6[COMRAM] enum E2431
  6853 ;;  blink           1    7[COMRAM] unsigned char 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  ledNum          1   11[COMRAM] unsigned char 
  6856 ;;  statusShift     1   13[COMRAM] unsigned char 
  6857 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/1
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6867 ;;      Params:         2       0       0       0       0       0       0
  6868 ;;      Locals:         3       0       0       0       0       0       0
  6869 ;;      Temps:          3       0       0       0       0       0       0
  6870 ;;      Totals:         8       0       0       0       0       0       0
  6871 ;;Total ram usage:        8 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    2
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_ResetEvent
  6878 ;;		_ProcessDiary
  6879 ;;		_io_poll
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text36
  6884  000980                     __ptext36:
  6885                           	opt stack 0
  6886  000980                     _LightLed:
  6887                           	opt stack 27
  6888                           
  6889                           ;incstack = 0
  6890  000980  FFFF               	dw	65535
  6891                           
  6892                           ;LightLed@ledNum stored from wreg
  6893  000982  6E0C               	movwf	LightLed@ledNum,c
  6894                           
  6895                           ;main.c: 306: if(ledNum < 1 || ledNum > 60)
  6896  000984  500C               	movf	LightLed@ledNum,w,c
  6897  000986  E101 D171          	bz	l262
  6898  00098A  0E3C               	movlw	60
  6899  00098C  640C               	cpfsgt	LightLed@ledNum,c
  6900  00098E  D001               	goto	l5579
  6901  000990  D16D               	goto	l262
  6902  000992                     l5579:
  6903  000992  FFFF               	dw	65535	; assembler added errata NOP
  6904                           
  6905                           ;main.c: 308: ledNum--;
  6906  000994  060C               	decf	LightLed@ledNum,f,c
  6907                           
  6908                           ;main.c: 310: uint8_t ststusIndex = ledNum >> 2;
  6909  000996  400C               	rrncf	LightLed@ledNum,w,c
  6910  000998  42E8               	rrncf	wreg,f,c
  6911  00099A  0B3F               	andlw	63
  6912  00099C  6E0D               	movwf	LightLed@ststusIndex,c
  6913                           
  6914                           ;main.c: 311: uint8_t statusShift = (ledNum & 0x03) << 1;
  6915  00099E  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6916  0009A2  0E03               	movlw	3
  6917  0009A4  1609               	andwf	??_LightLed,f,c
  6918  0009A6  90D8               	bcf	status,0,c
  6919  0009A8  3409               	rlcf	??_LightLed,w,c
  6920  0009AA  6E0E               	movwf	LightLed@statusShift,c
  6921                           
  6922                           ;main.c: 313: switch(ledState)
  6923  0009AC  D153               	goto	l5619
  6924  0009AE                     l5585:
  6925                           
  6926                           ;main.c: 316: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6927  0009AE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6928  0009B2  2A09               	incf	??_LightLed,f,c
  6929  0009B4  0E01               	movlw	1
  6930  0009B6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6931  0009B8  2A09               	incf	??_LightLed,f,c
  6932  0009BA  D003               	goto	u4544
  6933  0009BC                     u4545:
  6934  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  6935  0009BE  90D8               	bcf	status,0,c
  6936  0009C0  360A               	rlcf	??_LightLed+1,f,c
  6937  0009C2                     u4544:
  6938  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  6939  0009C4  2E09               	decfsz	??_LightLed,f,c
  6940  0009C6  D7FA               	goto	u4545
  6941  0009C8  1C0A               	comf	??_LightLed+1,w,c
  6942  0009CA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6943  0009CC  500D               	movf	LightLed@ststusIndex,w,c
  6944  0009CE  0F90               	addlw	low _ledStatuses
  6945  0009D0  6ED9               	movwf	fsr2l,c
  6946  0009D2  6ADA               	clrf	fsr2h,c
  6947  0009D4  500B               	movf	??_LightLed+2,w,c
  6948  0009D6  16DF               	andwf	indf2,f,c
  6949                           
  6950                           ;main.c: 317: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6951  0009D8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6952  0009DC  0E01               	movlw	1
  6953  0009DE  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6954  0009E0  2A09               	incf	??_LightLed,f,c
  6955  0009E2  D003               	goto	u4554
  6956  0009E4                     u4555:
  6957  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  6958  0009E6  90D8               	bcf	status,0,c
  6959  0009E8  360A               	rlcf	??_LightLed+1,f,c
  6960  0009EA                     u4554:
  6961  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  6962  0009EC  2E09               	decfsz	??_LightLed,f,c
  6963  0009EE  D7FA               	goto	u4555
  6964  0009F0  1C0A               	comf	??_LightLed+1,w,c
  6965  0009F2  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6966  0009F4  500D               	movf	LightLed@ststusIndex,w,c
  6967  0009F6  0F90               	addlw	low _ledStatuses
  6968  0009F8  6ED9               	movwf	fsr2l,c
  6969  0009FA  6ADA               	clrf	fsr2h,c
  6970  0009FC  500B               	movf	??_LightLed+2,w,c
  6971  0009FE  16DF               	andwf	indf2,f,c
  6972                           
  6973                           ;main.c: 318: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6974  000A00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6975  000A04  2A09               	incf	??_LightLed,f,c
  6976  000A06  0E01               	movlw	1
  6977  000A08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6978  000A0A  2A09               	incf	??_LightLed,f,c
  6979  000A0C  D003               	goto	u4564
  6980  000A0E                     u4565:
  6981  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  6982  000A10  90D8               	bcf	status,0,c
  6983  000A12  360A               	rlcf	??_LightLed+1,f,c
  6984  000A14                     u4564:
  6985  000A14  FFFF               	dw	65535	; assembler added errata NOP
  6986  000A16  2E09               	decfsz	??_LightLed,f,c
  6987  000A18  D7FA               	goto	u4565
  6988  000A1A  1C0A               	comf	??_LightLed+1,w,c
  6989  000A1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6990  000A1E  500D               	movf	LightLed@ststusIndex,w,c
  6991  000A20  0F80               	addlw	low _ledBlink
  6992  000A22  6ED9               	movwf	fsr2l,c
  6993  000A24  6ADA               	clrf	fsr2h,c
  6994  000A26  500B               	movf	??_LightLed+2,w,c
  6995  000A28  16DF               	andwf	indf2,f,c
  6996                           
  6997                           ;main.c: 319: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6998  000A2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6999  000A2E  0E01               	movlw	1
  7000  000A30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7001  000A32  2A09               	incf	??_LightLed,f,c
  7002  000A34  D003               	goto	u4574
  7003  000A36                     u4575:
  7004  000A36  FFFF               	dw	65535	; assembler added errata NOP
  7005  000A38  90D8               	bcf	status,0,c
  7006  000A3A  360A               	rlcf	??_LightLed+1,f,c
  7007  000A3C                     u4574:
  7008  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  7009  000A3E  2E09               	decfsz	??_LightLed,f,c
  7010  000A40  D7FA               	goto	u4575
  7011  000A42  D05F               	goto	L8
  7012  000A44                     l5587:
  7013                           
  7014                           ;main.c: 322: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7015  000A44  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7016  000A48  2A09               	incf	??_LightLed,f,c
  7017  000A4A  0E01               	movlw	1
  7018  000A4C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7019  000A4E  2A09               	incf	??_LightLed,f,c
  7020  000A50  D003               	goto	u4584
  7021  000A52                     u4585:
  7022  000A52  FFFF               	dw	65535	; assembler added errata NOP
  7023  000A54  90D8               	bcf	status,0,c
  7024  000A56  360A               	rlcf	??_LightLed+1,f,c
  7025  000A58                     u4584:
  7026  000A58  FFFF               	dw	65535	; assembler added errata NOP
  7027  000A5A  2E09               	decfsz	??_LightLed,f,c
  7028  000A5C  D7FA               	goto	u4585
  7029  000A5E  500D               	movf	LightLed@ststusIndex,w,c
  7030  000A60  0F90               	addlw	low _ledStatuses
  7031  000A62  6ED9               	movwf	fsr2l,c
  7032  000A64  6ADA               	clrf	fsr2h,c
  7033  000A66  500A               	movf	??_LightLed+1,w,c
  7034  000A68  12DF               	iorwf	indf2,f,c
  7035                           
  7036                           ;main.c: 323: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7037  000A6A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7038  000A6E  0E01               	movlw	1
  7039  000A70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7040  000A72  2A09               	incf	??_LightLed,f,c
  7041  000A74  D003               	goto	u4594
  7042  000A76                     u4595:
  7043  000A76  FFFF               	dw	65535	; assembler added errata NOP
  7044  000A78  90D8               	bcf	status,0,c
  7045  000A7A  360A               	rlcf	??_LightLed+1,f,c
  7046  000A7C                     u4594:
  7047  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  7048  000A7E  2E09               	decfsz	??_LightLed,f,c
  7049  000A80  D7FA               	goto	u4595
  7050  000A82  1C0A               	comf	??_LightLed+1,w,c
  7051  000A84  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7052  000A86  500D               	movf	LightLed@ststusIndex,w,c
  7053  000A88  0F90               	addlw	low _ledStatuses
  7054  000A8A  6ED9               	movwf	fsr2l,c
  7055  000A8C  6ADA               	clrf	fsr2h,c
  7056  000A8E  500B               	movf	??_LightLed+2,w,c
  7057  000A90  16DF               	andwf	indf2,f,c
  7058                           
  7059                           ;main.c: 324: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7060  000A92  5008               	movf	LightLed@blink,w,c
  7061  000A94  E014               	bz	l5593
  7062  000A96  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7063  000A9A  2A09               	incf	??_LightLed,f,c
  7064  000A9C  0E01               	movlw	1
  7065  000A9E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7066  000AA0  2A09               	incf	??_LightLed,f,c
  7067  000AA2  D003               	goto	u4614
  7068  000AA4                     u4615:
  7069  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  7070  000AA6  90D8               	bcf	status,0,c
  7071  000AA8  360A               	rlcf	??_LightLed+1,f,c
  7072  000AAA                     u4614:
  7073  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  7074  000AAC  2E09               	decfsz	??_LightLed,f,c
  7075  000AAE  D7FA               	goto	u4615
  7076  000AB0  500D               	movf	LightLed@ststusIndex,w,c
  7077  000AB2  0F80               	addlw	low _ledBlink
  7078  000AB4  6ED9               	movwf	fsr2l,c
  7079  000AB6  6ADA               	clrf	fsr2h,c
  7080  000AB8  500A               	movf	??_LightLed+1,w,c
  7081  000ABA  12DF               	iorwf	indf2,f,c
  7082  000ABC  D015               	goto	l270
  7083  000ABE                     l5593:
  7084  000ABE  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7085  000AC2  2A09               	incf	??_LightLed,f,c
  7086  000AC4  0E01               	movlw	1
  7087  000AC6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7088  000AC8  2A09               	incf	??_LightLed,f,c
  7089  000ACA  D003               	goto	u4624
  7090  000ACC                     u4625:
  7091  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  7092  000ACE  90D8               	bcf	status,0,c
  7093  000AD0  360A               	rlcf	??_LightLed+1,f,c
  7094  000AD2                     u4624:
  7095  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  7096  000AD4  2E09               	decfsz	??_LightLed,f,c
  7097  000AD6  D7FA               	goto	u4625
  7098  000AD8  1C0A               	comf	??_LightLed+1,w,c
  7099  000ADA  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7100  000ADC  500D               	movf	LightLed@ststusIndex,w,c
  7101  000ADE  0F80               	addlw	low _ledBlink
  7102  000AE0  6ED9               	movwf	fsr2l,c
  7103  000AE2  6ADA               	clrf	fsr2h,c
  7104  000AE4  500B               	movf	??_LightLed+2,w,c
  7105  000AE6  16DF               	andwf	indf2,f,c
  7106  000AE8                     l270:
  7107  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  7108                           
  7109                           ;main.c: 325: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  7110  000AEA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7111  000AEE  0E01               	movlw	1
  7112  000AF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7113  000AF2  2A09               	incf	??_LightLed,f,c
  7114  000AF4  D003               	goto	u4634
  7115  000AF6                     u4635:
  7116  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  7117  000AF8  90D8               	bcf	status,0,c
  7118  000AFA  360A               	rlcf	??_LightLed+1,f,c
  7119  000AFC                     u4634:
  7120  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  7121  000AFE  2E09               	decfsz	??_LightLed,f,c
  7122  000B00  D7FA               	goto	u4635
  7123  000B02                     L8:
  7124  000B02  FFFF               	dw	65535	; assembler added errata NOP
  7125  000B04  1C0A               	comf	??_LightLed+1,w,c
  7126  000B06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7127  000B08  500D               	movf	LightLed@ststusIndex,w,c
  7128  000B0A  0F80               	addlw	low _ledBlink
  7129  000B0C  6ED9               	movwf	fsr2l,c
  7130  000B0E  6ADA               	clrf	fsr2h,c
  7131  000B10  500B               	movf	??_LightLed+2,w,c
  7132  000B12  16DF               	andwf	indf2,f,c
  7133                           
  7134                           ;main.c: 326: break;
  7135  000B14  D0AB               	goto	l262
  7136  000B16                     l5595:
  7137                           
  7138                           ;main.c: 328: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7139  000B16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7140  000B1A  2A09               	incf	??_LightLed,f,c
  7141  000B1C  0E01               	movlw	1
  7142  000B1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7143  000B20  2A09               	incf	??_LightLed,f,c
  7144  000B22  D003               	goto	u4644
  7145  000B24                     u4645:
  7146  000B24  FFFF               	dw	65535	; assembler added errata NOP
  7147  000B26  90D8               	bcf	status,0,c
  7148  000B28  360A               	rlcf	??_LightLed+1,f,c
  7149  000B2A                     u4644:
  7150  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  7151  000B2C  2E09               	decfsz	??_LightLed,f,c
  7152  000B2E  D7FA               	goto	u4645
  7153  000B30  1C0A               	comf	??_LightLed+1,w,c
  7154  000B32  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7155  000B34  500D               	movf	LightLed@ststusIndex,w,c
  7156  000B36  0F90               	addlw	low _ledStatuses
  7157  000B38  6ED9               	movwf	fsr2l,c
  7158  000B3A  6ADA               	clrf	fsr2h,c
  7159  000B3C  500B               	movf	??_LightLed+2,w,c
  7160  000B3E  16DF               	andwf	indf2,f,c
  7161                           
  7162                           ;main.c: 329: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7163  000B40  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7164  000B44  0E01               	movlw	1
  7165  000B46  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7166  000B48  2A09               	incf	??_LightLed,f,c
  7167  000B4A  D003               	goto	u4654
  7168  000B4C                     u4655:
  7169  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  7170  000B4E  90D8               	bcf	status,0,c
  7171  000B50  360A               	rlcf	??_LightLed+1,f,c
  7172  000B52                     u4654:
  7173  000B52  FFFF               	dw	65535	; assembler added errata NOP
  7174  000B54  2E09               	decfsz	??_LightLed,f,c
  7175  000B56  D7FA               	goto	u4655
  7176  000B58  500D               	movf	LightLed@ststusIndex,w,c
  7177  000B5A  0F90               	addlw	low _ledStatuses
  7178  000B5C  6ED9               	movwf	fsr2l,c
  7179  000B5E  6ADA               	clrf	fsr2h,c
  7180  000B60  500A               	movf	??_LightLed+1,w,c
  7181  000B62  12DF               	iorwf	indf2,f,c
  7182                           
  7183                           ;main.c: 330: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  7184  000B64  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7185  000B68  2A09               	incf	??_LightLed,f,c
  7186  000B6A  0E01               	movlw	1
  7187  000B6C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7188  000B6E  2A09               	incf	??_LightLed,f,c
  7189  000B70  D003               	goto	u4664
  7190  000B72                     u4665:
  7191  000B72  FFFF               	dw	65535	; assembler added errata NOP
  7192  000B74  90D8               	bcf	status,0,c
  7193  000B76  360A               	rlcf	??_LightLed+1,f,c
  7194  000B78                     u4664:
  7195  000B78  FFFF               	dw	65535	; assembler added errata NOP
  7196  000B7A  2E09               	decfsz	??_LightLed,f,c
  7197  000B7C  D7FA               	goto	u4665
  7198  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  7199  000B80  1C0A               	comf	??_LightLed+1,w,c
  7200  000B82  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  7201  000B84  500D               	movf	LightLed@ststusIndex,w,c
  7202  000B86  0F80               	addlw	low _ledBlink
  7203  000B88  6ED9               	movwf	fsr2l,c
  7204  000B8A  6ADA               	clrf	fsr2h,c
  7205  000B8C  500B               	movf	??_LightLed+2,w,c
  7206  000B8E  16DF               	andwf	indf2,f,c
  7207                           
  7208                           ;main.c: 331: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7209  000B90  5008               	movf	LightLed@blink,w,c
  7210  000B92  E0AA               	bz	l270
  7211  000B94                     l5599:
  7212  000B94  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7213  000B98  0E01               	movlw	1
  7214  000B9A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7215  000B9C  2A09               	incf	??_LightLed,f,c
  7216  000B9E  D003               	goto	u4684
  7217  000BA0                     u4685:
  7218  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  7219  000BA2  90D8               	bcf	status,0,c
  7220  000BA4  360A               	rlcf	??_LightLed+1,f,c
  7221  000BA6                     u4684:
  7222  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  7223  000BA8  2E09               	decfsz	??_LightLed,f,c
  7224  000BAA  D7FA               	goto	u4685
  7225  000BAC  500D               	movf	LightLed@ststusIndex,w,c
  7226  000BAE  0F80               	addlw	low _ledBlink
  7227  000BB0  6ED9               	movwf	fsr2l,c
  7228  000BB2  6ADA               	clrf	fsr2h,c
  7229  000BB4  500A               	movf	??_LightLed+1,w,c
  7230  000BB6  12DF               	iorwf	indf2,f,c
  7231  000BB8  D059               	goto	l262
  7232  000BBA                     l5603:
  7233                           
  7234                           ;main.c: 334: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  7235  000BBA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7236  000BBE  2A09               	incf	??_LightLed,f,c
  7237  000BC0  0E01               	movlw	1
  7238  000BC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7239  000BC4  2A09               	incf	??_LightLed,f,c
  7240  000BC6  D003               	goto	u4694
  7241  000BC8                     u4695:
  7242  000BC8  FFFF               	dw	65535	; assembler added errata NOP
  7243  000BCA  90D8               	bcf	status,0,c
  7244  000BCC  360A               	rlcf	??_LightLed+1,f,c
  7245  000BCE                     u4694:
  7246  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  7247  000BD0  2E09               	decfsz	??_LightLed,f,c
  7248  000BD2  D7FA               	goto	u4695
  7249  000BD4  500D               	movf	LightLed@ststusIndex,w,c
  7250  000BD6  0F90               	addlw	low _ledStatuses
  7251  000BD8  6ED9               	movwf	fsr2l,c
  7252  000BDA  6ADA               	clrf	fsr2h,c
  7253  000BDC  500A               	movf	??_LightLed+1,w,c
  7254  000BDE  12DF               	iorwf	indf2,f,c
  7255                           
  7256                           ;main.c: 335: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  7257  000BE0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7258  000BE4  0E01               	movlw	1
  7259  000BE6  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7260  000BE8  2A09               	incf	??_LightLed,f,c
  7261  000BEA  D003               	goto	u4704
  7262  000BEC                     u4705:
  7263  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  7264  000BEE  90D8               	bcf	status,0,c
  7265  000BF0  360A               	rlcf	??_LightLed+1,f,c
  7266  000BF2                     u4704:
  7267  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  7268  000BF4  2E09               	decfsz	??_LightLed,f,c
  7269  000BF6  D7FA               	goto	u4705
  7270  000BF8  500D               	movf	LightLed@ststusIndex,w,c
  7271  000BFA  0F90               	addlw	low _ledStatuses
  7272  000BFC  6ED9               	movwf	fsr2l,c
  7273  000BFE  6ADA               	clrf	fsr2h,c
  7274  000C00  500A               	movf	??_LightLed+1,w,c
  7275  000C02  12DF               	iorwf	indf2,f,c
  7276                           
  7277                           ;main.c: 336: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  7278  000C04  5008               	movf	LightLed@blink,w,c
  7279  000C06  E014               	bz	l5609
  7280  000C08  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7281  000C0C  2A09               	incf	??_LightLed,f,c
  7282  000C0E  0E01               	movlw	1
  7283  000C10  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7284  000C12  2A09               	incf	??_LightLed,f,c
  7285  000C14  D003               	goto	u4724
  7286  000C16                     u4725:
  7287  000C16  FFFF               	dw	65535	; assembler added errata NOP
  7288  000C18  90D8               	bcf	status,0,c
  7289  000C1A  360A               	rlcf	??_LightLed+1,f,c
  7290  000C1C                     u4724:
  7291  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  7292  000C1E  2E09               	decfsz	??_LightLed,f,c
  7293  000C20  D7FA               	goto	u4725
  7294  000C22  500D               	movf	LightLed@ststusIndex,w,c
  7295  000C24  0F80               	addlw	low _ledBlink
  7296  000C26  6ED9               	movwf	fsr2l,c
  7297  000C28  6ADA               	clrf	fsr2h,c
  7298  000C2A  500A               	movf	??_LightLed+1,w,c
  7299  000C2C  12DF               	iorwf	indf2,f,c
  7300  000C2E  D00E               	goto	l5611
  7301  000C30                     l5609:
  7302  000C30  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  7303  000C34  2A09               	incf	??_LightLed,f,c
  7304  000C36  0E01               	movlw	1
  7305  000C38  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  7306  000C3A  2A09               	incf	??_LightLed,f,c
  7307  000C3C  D003               	goto	u4734
  7308  000C3E                     u4735:
  7309  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  7310  000C40  90D8               	bcf	status,0,c
  7311  000C42  360A               	rlcf	??_LightLed+1,f,c
  7312  000C44                     u4734:
  7313  000C44  FFFF               	dw	65535	; assembler added errata NOP
  7314  000C46  2E09               	decfsz	??_LightLed,f,c
  7315  000C48  D7FA               	goto	u4735
  7316  000C4A  D799               	goto	L9
  7317  000C4C                     l5611:
  7318  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  7319                           
  7320                           ;main.c: 337: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  7321  000C4E  5008               	movf	LightLed@blink,w,c
  7322  000C50  E1A1               	bnz	l5599
  7323  000C52  D74A               	goto	l270
  7324  000C54                     l5619:
  7325  000C54  FFFF               	dw	65535	; assembler added errata NOP
  7326  000C56  5007               	movf	LightLed@ledState,w,c
  7327                           
  7328                           ; Switch size 1, requested type "speed"
  7329                           ; Number of cases is 4, Range of values is 0 to 3
  7330                           ; switch strategies available:
  7331                           ; Name         Instructions Cycles
  7332                           ; simple_byte           13     7 (average)
  7333                           ;	Chosen strategy is simple_byte
  7334  000C58  E101 D6A9          	bz	l5585
  7335  000C5C  0A01               	xorlw	1	; case 1
  7336  000C5E  E101 D6F1          	bz	l5587
  7337  000C62  0A03               	xorlw	3	; case 2
  7338  000C64  E101 D757          	bz	l5595
  7339  000C68  0A01               	xorlw	1	; case 3
  7340  000C6A  E0A7               	bz	l5603
  7341  000C6C                     l262:
  7342  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  7343  000C6E  0012               	return		;funcret
  7344  000C70  FFFF               	dw	65535	; errata NOP
  7345  000C72                     __end_of_LightLed:
  7346                           	opt stack 0
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           postinc0	equ	0xFEE
  7355                           wreg	equ	0xFE8
  7356                           postdec1	equ	0xFE5
  7357                           fsr1h	equ	0xFE2
  7358                           fsr1l	equ	0xFE1
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           plusw2	equ	0xFDB
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function _ModbusPoll *****************
  7368 ;; Defined at:
  7369 ;;		line 405 in file "ModbusRtu.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  7372 ;;  coils           1   43[COMRAM] PTR unsigned short 
  7373 ;;		 -> _MODBUSCoils(2), 
  7374 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  7375 ;;		 -> _MODBUSInputRegs(30), 
  7376 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  7377 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  7378 ;;		 -> _MODBUSHoldingRegs(30), 
  7379 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  u8exception     1   52[COMRAM] unsigned char 
  7382 ;;  i8state         1   51[COMRAM] unsigned char 
  7383 ;;  u8current       1   50[COMRAM] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      char 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : E/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7393 ;;      Params:         9       0       0       0       0       0       0
  7394 ;;      Locals:         3       0       0       0       0       0       0
  7395 ;;      Temps:          0       0       0       0       0       0       0
  7396 ;;      Totals:        12       0       0       0       0       0       0
  7397 ;;Total ram usage:       12 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    5
  7400 ;; This function calls:
  7401 ;;		_ModbusBuildException
  7402 ;;		_ModbusGetRxBuffer
  7403 ;;		_ModbusGetRxBufferHeader
  7404 ;;		_ModbusProcess_FC1
  7405 ;;		_ModbusProcess_FC15
  7406 ;;		_ModbusProcess_FC16
  7407 ;;		_ModbusProcess_FC17
  7408 ;;		_ModbusProcess_FC21
  7409 ;;		_ModbusProcess_FC3
  7410 ;;		_ModbusProcess_FC43
  7411 ;;		_ModbusProcess_FC5
  7412 ;;		_ModbusProcess_FC6
  7413 ;;		_ModbusProcess_FC7
  7414 ;;		_ModbusSendTxBuffer
  7415 ;;		_ModbusValidateRequest
  7416 ;;		_PortAvailable
  7417 ;;		_PortClearReadBuffer
  7418 ;;		_millis
  7419 ;; This function is called by:
  7420 ;;		_main
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text37
  7425  001144                     __ptext37:
  7426                           	opt stack 0
  7427  001144                     _ModbusPoll:
  7428                           	opt stack 25
  7429                           
  7430                           ;incstack = 0
  7431  001144  FFFF               	dw	65535
  7432                           
  7433                           ;ModbusRtu.c: 408: _lastCommand = MB_FC_NONE;
  7434  001146  0100               	movlb	0	; () banked
  7435  001148  6BE1               	clrf	__lastCommand& (0+255),b
  7436                           
  7437                           ;ModbusRtu.c: 412: _inputRegsCount = inputRegsCount;
  7438  00114A  C02F  F0D1         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7439                           
  7440                           ;ModbusRtu.c: 413: _holdingRegsCount = holdingRegsCount;
  7441  00114E  C032  F0D0         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;ModbusRtu.c: 418: uint8_t u8current = PortAvailable();
  7445  001152  ECB6  F016         	call	_PortAvailable	;wreg free
  7446  001156  6E33               	movwf	ModbusPoll@u8current,c
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;ModbusRtu.c: 420: if (u8current == 0) return 0;
  7450  001158  5033               	movf	ModbusPoll@u8current,w,c
  7451  00115A  E103               	bnz	l6109
  7452  00115C                     l6105:
  7453  00115C  FFFF               	dw	65535	; assembler added errata NOP
  7454                           
  7455                           ; BSR set to: 0
  7456  00115E  0E00               	movlw	0
  7457  001160  D0B0               	goto	l667
  7458  001162                     l6109:
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;ModbusRtu.c: 423: if (u8current != _u8lastRec)
  7462  001162  51D7               	movf	__u8lastRec& (0+255),w,b
  7463  001164  1833               	xorwf	ModbusPoll@u8current,w,c
  7464  001166  E012               	bz	l6119
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;ModbusRtu.c: 424: {
  7468                           ;ModbusRtu.c: 425: _u8lastRec = u8current;
  7469  001168  C033  F0D7         	movff	ModbusPoll@u8current,__u8lastRec
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;ModbusRtu.c: 426: _u32time = millis() + 5;
  7473  00116C  0E05               	movlw	5
  7474  00116E  EC02  F016         	call	_millis	;wreg free
  7475  001172  2407               	addwf	?_millis,w,c
  7476  001174  0100               	movlb	0	; () banked
  7477  001176  6FA4               	movwf	__u32time& (0+255),b
  7478  001178  0E00               	movlw	0
  7479  00117A  2008               	addwfc	?_millis+1,w,c
  7480  00117C  6FA5               	movwf	(__u32time+1)& (0+255),b
  7481  00117E  0E00               	movlw	0
  7482  001180  2009               	addwfc	?_millis+2,w,c
  7483  001182  6FA6               	movwf	(__u32time+2)& (0+255),b
  7484  001184  0E00               	movlw	0
  7485  001186  200A               	addwfc	?_millis+3,w,c
  7486  001188  6FA7               	movwf	(__u32time+3)& (0+255),b
  7487  00118A  D7E8               	goto	l6105
  7488  00118C                     l6119:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;ModbusRtu.c: 428: }
  7492                           ;ModbusRtu.c: 429: if (millis() < _u32time)
  7493  00118C  EC02  F016         	call	_millis	;wreg free
  7494  001190  0100               	movlb	0	; () banked
  7495  001192  51A4               	movf	__u32time& (0+255),w,b
  7496  001194  5C07               	subwf	?_millis,w,c
  7497  001196  51A5               	movf	(__u32time+1)& (0+255),w,b
  7498  001198  5808               	subwfb	?_millis+1,w,c
  7499  00119A  51A6               	movf	(__u32time+2)& (0+255),w,b
  7500  00119C  5809               	subwfb	?_millis+2,w,c
  7501  00119E  51A7               	movf	(__u32time+3)& (0+255),w,b
  7502  0011A0  580A               	subwfb	?_millis+3,w,c
  7503  0011A2  E3DC               	bnc	l6105
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;ModbusRtu.c: 432: _u8lastRec = 0;
  7507  0011A4  6BD7               	clrf	__u8lastRec& (0+255),b
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;ModbusRtu.c: 434: _u8lastError = i8state;
  7511  0011A6  EC54  F015         	call	_ModbusGetRxBufferHeader	;wreg free
  7512  0011AA  6E34               	movwf	ModbusPoll@i8state,c
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;ModbusRtu.c: 435: if (i8state < 4)
  7516  0011AC  0E04               	movlw	4
  7517  0011AE  6034               	cpfslt	ModbusPoll@i8state,c
  7518  0011B0  D005               	goto	l6135
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;ModbusRtu.c: 436: {
  7522                           ;ModbusRtu.c: 437: PortClearReadBuffer();
  7523  0011B2  ECA8  F016         	call	_PortClearReadBuffer	;wreg free
  7524  0011B6                     l6131:
  7525  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  7526                           
  7527                           ;ModbusRtu.c: 438: return i8state;
  7528  0011B8  5034               	movf	ModbusPoll@i8state,w,c
  7529  0011BA  D083               	goto	l667
  7530  0011BC                     l6135:
  7531  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;ModbusRtu.c: 439: }
  7535                           ;ModbusRtu.c: 441: if (_au8Buffer[ ID ] != _u8id)
  7536  0011BE  51D6               	movf	__u8id& (0+255),w,b
  7537  0011C0  0101               	movlb	1	; () banked
  7538  0011C2  1900               	xorwf	__au8Buffer& (0+255),w,b
  7539  0011C4  E003               	bz	l6143
  7540                           
  7541                           ; BSR set to: 1
  7542                           ;ModbusRtu.c: 442: {
  7543                           ;ModbusRtu.c: 443: PortClearReadBuffer();
  7544  0011C6  ECA8  F016         	call	_PortClearReadBuffer	;wreg free
  7545  0011CA  D7C8               	goto	l6105
  7546  0011CC                     l6143:
  7547                           
  7548                           ; BSR set to: 1
  7549                           ;ModbusRtu.c: 445: }
  7550                           ;ModbusRtu.c: 447: i8state = ModbusGetRxBuffer();
  7551  0011CC  ECD2  F014         	call	_ModbusGetRxBuffer	;wreg free
  7552  0011D0  6E34               	movwf	ModbusPoll@i8state,c
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;ModbusRtu.c: 449: _u8lastError = i8state;
  7556  0011D2  ECA8  F016         	call	_PortClearReadBuffer	;wreg free
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;ModbusRtu.c: 454: uint8_t u8exception = ModbusValidateRequest();
  7560  0011D6  EC72  F007         	call	_ModbusValidateRequest	;wreg free
  7561  0011DA  6E35               	movwf	ModbusPoll@u8exception,c
  7562                           
  7563                           ;ModbusRtu.c: 455: if (u8exception > 0)
  7564  0011DC  5035               	movf	ModbusPoll@u8exception,w,c
  7565  0011DE  E009               	bz	l6161
  7566                           
  7567                           ;ModbusRtu.c: 456: {
  7568                           ;ModbusRtu.c: 457: if (u8exception != NO_REPLY)
  7569  0011E0  2835               	incf	ModbusPoll@u8exception,w,c
  7570  0011E2  E005               	bz	l6157
  7571                           
  7572                           ;ModbusRtu.c: 458: {
  7573                           ;ModbusRtu.c: 459: ModbusBuildException(u8exception);
  7574  0011E4  5035               	movf	ModbusPoll@u8exception,w,c
  7575  0011E6  EC3D  F016         	call	_ModbusBuildException
  7576                           
  7577                           ; BSR set to: 1
  7578                           ;ModbusRtu.c: 460: ModbusSendTxBuffer();
  7579  0011EA  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  7580  0011EE                     l6157:
  7581                           
  7582                           ;ModbusRtu.c: 463: return u8exception;
  7583  0011EE  5035               	movf	ModbusPoll@u8exception,w,c
  7584  0011F0  D068               	goto	l667
  7585  0011F2                     l6161:
  7586                           
  7587                           ;ModbusRtu.c: 467: _u8lastError = 0;
  7588  0011F2  EC02  F016         	call	_millis	;wreg free
  7589                           
  7590                           ;ModbusRtu.c: 470: switch (_au8Buffer[ FUNC ])
  7591  0011F6  D049               	goto	l6213
  7592  0011F8                     l6163:
  7593                           
  7594                           ; BSR set to: 1
  7595                           ;ModbusRtu.c: 473: return ModbusProcess_FC1(*coils);
  7596  0011F8  502C               	movf	ModbusPoll@coils,w,c
  7597  0011FA  6ED9               	movwf	fsr2l,c
  7598  0011FC  6ADA               	clrf	fsr2h,c
  7599  0011FE  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  7600  001202  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  7601  001206  EC6E  F00B         	call	_ModbusProcess_FC1	;wreg free
  7602  00120A  D05B               	goto	l667
  7603  00120C                     l6167:
  7604                           
  7605                           ; BSR set to: 1
  7606                           ;ModbusRtu.c: 475: return ModbusProcess_FC1(discreteInputs);
  7607  00120C  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7608  001210  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7609  001214  EC6E  F00B         	call	_ModbusProcess_FC1	;wreg free
  7610  001218  D054               	goto	l667
  7611  00121A                     l6171:
  7612                           
  7613                           ; BSR set to: 1
  7614                           ;ModbusRtu.c: 477: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  7615  00121A  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7616  00121E  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7617  001222  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7618  001226  EC2A  F010         	call	_ModbusProcess_FC3	;wreg free
  7619  00122A  D04B               	goto	l667
  7620  00122C                     l6175:
  7621                           
  7622                           ; BSR set to: 1
  7623                           ;ModbusRtu.c: 479: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  7624  00122C  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7625  001230  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7626  001234  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7627  001238  EC2A  F010         	call	_ModbusProcess_FC3	;wreg free
  7628  00123C  D042               	goto	l667
  7629  00123E                     l6179:
  7630                           
  7631                           ; BSR set to: 1
  7632                           ;ModbusRtu.c: 481: return ModbusProcess_FC5(coils);
  7633  00123E  502C               	movf	ModbusPoll@coils,w,c
  7634  001240  EC84  F011         	call	_ModbusProcess_FC5
  7635  001244  D03E               	goto	l667
  7636  001246                     l6183:
  7637                           
  7638                           ; BSR set to: 1
  7639                           ;ModbusRtu.c: 483: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7640  001246  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7641  00124A  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7642  00124E  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7643  001252  EC9E  F013         	call	_ModbusProcess_FC6	;wreg free
  7644  001256  D035               	goto	l667
  7645  001258                     l6187:
  7646                           
  7647                           ; BSR set to: 1
  7648                           ;ModbusRtu.c: 485: return ModbusProcess_FC7();
  7649  001258  EC77  F016         	call	_ModbusProcess_FC7	;wreg free
  7650  00125C  D032               	goto	l667
  7651  00125E                     l6191:
  7652                           
  7653                           ; BSR set to: 1
  7654                           ;ModbusRtu.c: 487: return ModbusProcess_FC15(coils);
  7655  00125E  502C               	movf	ModbusPoll@coils,w,c
  7656  001260  EC8B  F00C         	call	_ModbusProcess_FC15
  7657  001264  D02E               	goto	l667
  7658  001266                     l6195:
  7659                           
  7660                           ; BSR set to: 1
  7661                           ;ModbusRtu.c: 489: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7662  001266  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7663  00126A  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7664  00126E  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7665  001272  EC05  F00F         	call	_ModbusProcess_FC16	;wreg free
  7666  001276  D025               	goto	l667
  7667  001278                     l6199:
  7668                           
  7669                           ; BSR set to: 1
  7670                           ;ModbusRtu.c: 491: return ModbusProcess_FC17();
  7671  001278  ECA1  F012         	call	_ModbusProcess_FC17	;wreg free
  7672  00127C  D022               	goto	l667
  7673  00127E                     l6203:
  7674                           
  7675                           ; BSR set to: 1
  7676                           ;ModbusRtu.c: 493: return ModbusProcess_FC21();
  7677  00127E  ECDC  F010         	call	_ModbusProcess_FC21	;wreg free
  7678  001282  D01F               	goto	l667
  7679  001284                     l6207:
  7680                           
  7681                           ; BSR set to: 1
  7682                           ;ModbusRtu.c: 495: return ModbusProcess_FC43();
  7683  001284  EC22  F00A         	call	_ModbusProcess_FC43	;wreg free
  7684  001288  D01C               	goto	l667
  7685  00128A                     l6213:
  7686  00128A  FFFF               	dw	65535	; assembler added errata NOP
  7687  00128C  0101               	movlb	1	; () banked
  7688  00128E  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7689                           
  7690                           ; Switch size 1, requested type "speed"
  7691                           ; Number of cases is 12, Range of values is 1 to 43
  7692                           ; switch strategies available:
  7693                           ; Name         Instructions Cycles
  7694                           ; simple_byte           37    19 (average)
  7695                           ;	Chosen strategy is simple_byte
  7696  001290  0A01               	xorlw	1	; case 1
  7697  001292  E0B2               	bz	l6163
  7698  001294  0A03               	xorlw	3	; case 2
  7699  001296  E0BA               	bz	l6167
  7700  001298  0A01               	xorlw	1	; case 3
  7701  00129A  E0BF               	bz	l6171
  7702  00129C  0A07               	xorlw	7	; case 4
  7703  00129E  E0C6               	bz	l6175
  7704  0012A0  0A01               	xorlw	1	; case 5
  7705  0012A2  E0CD               	bz	l6179
  7706  0012A4  0A03               	xorlw	3	; case 6
  7707  0012A6  E0CF               	bz	l6183
  7708  0012A8  0A01               	xorlw	1	; case 7
  7709  0012AA  E0D6               	bz	l6187
  7710  0012AC  0A08               	xorlw	8	; case 15
  7711  0012AE  E0D7               	bz	l6191
  7712  0012B0  0A1F               	xorlw	31	; case 16
  7713  0012B2  E0D9               	bz	l6195
  7714  0012B4  0A01               	xorlw	1	; case 17
  7715  0012B6  E0E0               	bz	l6199
  7716  0012B8  0A04               	xorlw	4	; case 21
  7717  0012BA  E0E1               	bz	l6203
  7718  0012BC  0A3E               	xorlw	62	; case 43
  7719  0012BE  E0E2               	bz	l6207
  7720  0012C0  D77A               	goto	l6131
  7721  0012C2                     l667:
  7722  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  7723  0012C4  0012               	return		;funcret
  7724  0012C6  FFFF               	dw	65535	; errata NOP
  7725  0012C8                     __end_of_ModbusPoll:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           postdec1	equ	0xFE5
  7737                           fsr1h	equ	0xFE2
  7738                           fsr1l	equ	0xFE1
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           plusw2	equ	0xFDB
  7743                           fsr2h	equ	0xFDA
  7744                           fsr2l	equ	0xFD9
  7745                           status	equ	0xFD8
  7746                           
  7747 ;; *************** function _PortClearReadBuffer *****************
  7748 ;; Defined at:
  7749 ;;		line 77 in file "interrupts.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;		None
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;		None
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  1    wreg      void 
  7756 ;; Registers used:
  7757 ;;		cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : E/0
  7760 ;;		On exit  : F/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7763 ;;      Params:         0       0       0       0       0       0       0
  7764 ;;      Locals:         0       0       0       0       0       0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0
  7766 ;;      Totals:         0       0       0       0       0       0       0
  7767 ;;Total ram usage:        0 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    3
  7770 ;; This function calls:
  7771 ;;		_InitUartBuffer
  7772 ;; This function is called by:
  7773 ;;		_ModbusPoll
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text38
  7778  002D50                     __ptext38:
  7779                           	opt stack 0
  7780  002D50                     _PortClearReadBuffer:
  7781                           	opt stack 26
  7782                           
  7783                           ;incstack = 0
  7784  002D50  FFFF               	dw	65535
  7785                           
  7786                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  7787  002D52  9EF2               	bcf	intcon,7,c	;volatile
  7788                           
  7789                           ;interrupts.c: 80: InitUartBuffer();
  7790  002D54  ECAF  F016         	call	_InitUartBuffer	;wreg free
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  7794  002D58  8EF2               	bsf	intcon,7,c	;volatile
  7795                           
  7796                           ; BSR set to: 0
  7797  002D5A  0012               	return		;funcret
  7798  002D5C  FFFF               	dw	65535	; errata NOP
  7799  002D5E                     __end_of_PortClearReadBuffer:
  7800                           	opt stack 0
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           postinc0	equ	0xFEE
  7809                           wreg	equ	0xFE8
  7810                           postdec1	equ	0xFE5
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           plusw2	equ	0xFDB
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _ModbusValidateRequest *****************
  7822 ;; Defined at:
  7823 ;;		line 712 in file "ModbusRtu.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;		None
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7828 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7829 ;;  readDevId       1   37[COMRAM] unsigned char 
  7830 ;;  i               1   36[COMRAM] unsigned char 
  7831 ;;  u16regs         2   39[COMRAM] unsigned short 
  7832 ;;  u16count        2   34[COMRAM] unsigned short 
  7833 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7834 ;;  u8regs          1   38[COMRAM] unsigned char 
  7835 ;;  isSupported     1   33[COMRAM] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      unsigned char 
  7838 ;; Registers used:
  7839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : F/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7845 ;;      Params:         0       0       0       0       0       0       0
  7846 ;;      Locals:        18       0       0       0       0       0       0
  7847 ;;      Temps:          4       0       0       0       0       0       0
  7848 ;;      Totals:        22       0       0       0       0       0       0
  7849 ;;Total ram usage:       22 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    3
  7852 ;; This function calls:
  7853 ;;		_ModbusCalcCRC
  7854 ;; This function is called by:
  7855 ;;		_ModbusPoll
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text39
  7860  000EE4                     __ptext39:
  7861                           	opt stack 0
  7862  000EE4                     _ModbusValidateRequest:
  7863                           	opt stack 26
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;incstack = 0
  7867  000EE4  FFFF               	dw	65535
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;ModbusRtu.c: 715: uint16_t u16MsgCRC =
  7871                           ;ModbusRtu.c: 716: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7872                           ;ModbusRtu.c: 717: | _au8Buffer[_u8BufferSize - 1]);
  7873  000EE6  0EFE               	movlw	low (__au8Buffer+65534)
  7874  000EE8  2472               	addwf	__u8BufferSize,w,c
  7875  000EEA  6ED9               	movwf	fsr2l,c
  7876  000EEC  6ADA               	clrf	fsr2h,c
  7877  000EEE  0E00               	movlw	high (__au8Buffer+65534)
  7878  000EF0  22DA               	addwfc	fsr2h,f,c
  7879  000EF2  50DF               	movf	indf2,w,c
  7880  000EF4  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7881  000EF6  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7882  000EF8  0EFF               	movlw	low (__au8Buffer+65535)
  7883  000EFA  2472               	addwf	__u8BufferSize,w,c
  7884  000EFC  6ED9               	movwf	fsr2l,c
  7885  000EFE  6ADA               	clrf	fsr2h,c
  7886  000F00  0E00               	movlw	high (__au8Buffer+65535)
  7887  000F02  22DA               	addwfc	fsr2h,f,c
  7888  000F04  50DF               	movf	indf2,w,c
  7889  000F06  1014               	iorwf	??_ModbusValidateRequest,w,c
  7890  000F08  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7891  000F0A  5015               	movf	??_ModbusValidateRequest+1,w,c
  7892  000F0C  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;ModbusRtu.c: 719: {
  7896                           ;ModbusRtu.c: 720: _u16errCnt++;
  7897  000F0E  5072               	movf	__u8BufferSize,w,c
  7898  000F10  0FFE               	addlw	254
  7899  000F12  EC67  F012         	call	_ModbusCalcCRC
  7900  000F16  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7901  000F18  1807               	xorwf	?_ModbusCalcCRC,w,c
  7902  000F1A  E103               	bnz	u2950
  7903  000F1C  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7904  000F1E  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7905  000F20  E002               	bz	l724
  7906  000F22                     u2950:
  7907                           
  7908                           ;ModbusRtu.c: 721: return NO_REPLY;
  7909  000F22  0EFF               	movlw	255
  7910  000F24  D10C               	goto	l725
  7911  000F26                     l724:
  7912                           
  7913                           ;ModbusRtu.c: 722: }
  7914                           ;ModbusRtu.c: 725: bool isSupported = 0;
  7915  000F26  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7916                           
  7917                           ;ModbusRtu.c: 726: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7918  000F28  6A25               	clrf	ModbusValidateRequest@i,c
  7919  000F2A                     l4059:
  7920  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  7921                           
  7922                           ;ModbusRtu.c: 727: {
  7923                           ;ModbusRtu.c: 728: if (fctsupported[i] == _au8Buffer[FUNC])
  7924  000F2C  5025               	movf	ModbusValidateRequest@i,w,c
  7925  000F2E  0F01               	addlw	low _fctsupported
  7926  000F30  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7927  000F32  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7928  000F36                     	if	1	;There is more than 1 active tblptr byte
  7929  000F36  0E06               	movlw	high __smallconst
  7930  000F38  6EF7               	movwf	tblptrh,c
  7931  000F3A                     	endif
  7932  000F3A                     	if	0	;tblptru may be non-zero
  7933  000F3A                     	endif
  7934  000F3A                     	if	0	;tblptru may be non-zero
  7935  000F3A                     	endif
  7936  000F3A  0008               	tblrd		*
  7937  000F3C  FFFF               	dw	65535	; errata NOP
  7938  000F3E  50F5               	movf	tablat,w,c
  7939  000F40  0101               	movlb	1	; () banked
  7940  000F42  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7941  000F44  E103               	bnz	l4063
  7942                           
  7943                           ; BSR set to: 1
  7944                           ;ModbusRtu.c: 729: {
  7945                           ;ModbusRtu.c: 730: isSupported = 1;
  7946  000F46  0E01               	movlw	1
  7947  000F48  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7948                           
  7949                           ;ModbusRtu.c: 731: break;
  7950  000F4A  D004               	goto	l4067
  7951  000F4C                     l4063:
  7952                           
  7953                           ; BSR set to: 1
  7954  000F4C  2A25               	incf	ModbusValidateRequest@i,f,c
  7955                           
  7956                           ; BSR set to: 1
  7957  000F4E  0E0B               	movlw	11
  7958  000F50  6425               	cpfsgt	ModbusValidateRequest@i,c
  7959  000F52  D7EB               	goto	l4059
  7960  000F54                     l4067:
  7961  000F54  FFFF               	dw	65535	; assembler added errata NOP
  7962                           
  7963                           ; BSR set to: 1
  7964                           ;ModbusRtu.c: 735: {
  7965                           ;ModbusRtu.c: 736: _u16errCnt++;
  7966  000F56  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7967  000F58  E102               	bnz	l729
  7968  000F5A                     l4069:
  7969                           
  7970                           ; BSR set to: 1
  7971                           ;ModbusRtu.c: 737: return EXC_FUNC_CODE;
  7972  000F5A  0E01               	movlw	1
  7973  000F5C  D0F0               	goto	l725
  7974  000F5E                     l729:
  7975                           
  7976                           ; BSR set to: 1
  7977                           ;ModbusRtu.c: 742: uint16_t u16count = 0;
  7978  000F5E  6A23               	clrf	ModbusValidateRequest@u16count,c
  7979  000F60  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7980                           
  7981                           ;ModbusRtu.c: 743: uint8_t u8regs;
  7982                           ;ModbusRtu.c: 744: switch (_au8Buffer[ FUNC ])
  7983  000F62  D0CA               	goto	l4185
  7984  000F64                     l4073:
  7985                           
  7986                           ; BSR set to: 1
  7987                           ;ModbusRtu.c: 747: case MB_FC_READ_DISCRETE_INPUT:
  7988                           ;ModbusRtu.c: 748: case MB_FC_WRITE_MULTIPLE_COILS:
  7989                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7990  000F64  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7991  000F66  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7992  000F68  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7993  000F6A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7994  000F6C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7995                           
  7996                           ;ModbusRtu.c: 751: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7997  000F70  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7998  000F72  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7999  000F74  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8000  000F76  6E23               	movwf	ModbusValidateRequest@u16count,c
  8001  000F78  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  8002                           
  8003                           ; BSR set to: 1
  8004                           ;ModbusRtu.c: 752: if (u16count > 16)
  8005  000F7C  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  8006  000F7E  E103               	bnz	u2990
  8007  000F80  0E11               	movlw	17
  8008  000F82  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  8009  000F84  E302               	bnc	l4081
  8010  000F86                     u2990:
  8011  000F86                     l4077:
  8012                           
  8013                           ; BSR set to: 1
  8014                           ;ModbusRtu.c: 753: return EXC_REGS_QUANT;
  8015  000F86  0E03               	movlw	3
  8016  000F88  D0DA               	goto	l725
  8017  000F8A                     l4081:
  8018                           
  8019                           ; BSR set to: 1
  8020                           ;ModbusRtu.c: 754: if (u16regs > 15 || u16regs + u16count > 16)
  8021  000F8A  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  8022  000F8C  E110               	bnz	l4085
  8023  000F8E  0E10               	movlw	16
  8024  000F90  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  8025  000F92  E20D               	bc	l4085
  8026                           
  8027                           ; BSR set to: 1
  8028  000F94  5023               	movf	ModbusValidateRequest@u16count,w,c
  8029  000F96  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  8030  000F98  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8031  000F9A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  8032  000F9C  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  8033  000F9E  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  8034  000FA0  5015               	movf	??_ModbusValidateRequest+1,w,c
  8035  000FA2  E105               	bnz	u3010
  8036  000FA4  0E11               	movlw	17
  8037  000FA6  5C14               	subwf	??_ModbusValidateRequest,w,c
  8038  000FA8                     L10:
  8039  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  8040  000FAA  E201 D0C4          	bnc	l738
  8041  000FAE                     u3010:
  8042  000FAE                     l4085:
  8043  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  8044                           
  8045                           ;ModbusRtu.c: 755: return EXC_ADDR_RANGE;
  8046  000FB0  0E02               	movlw	2
  8047  000FB2  D0C5               	goto	l725
  8048  000FB4                     l4089:
  8049                           
  8050                           ; BSR set to: 1
  8051                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8052  000FB4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8053  000FB6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8054  000FB8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8055  000FBA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8056  000FBC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8057                           
  8058                           ; BSR set to: 1
  8059                           ;ModbusRtu.c: 759: u8regs = _au8Buffer[ NB_HI ];
  8060  000FC0  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  8061                           
  8062                           ;ModbusRtu.c: 760: if (u8regs != 0x00 && u8regs != 0xFF)
  8063  000FC4  5027               	movf	ModbusValidateRequest@u8regs,w,c
  8064  000FC6  E002               	bz	l4099
  8065                           
  8066                           ; BSR set to: 1
  8067  000FC8  2827               	incf	ModbusValidateRequest@u8regs,w,c
  8068  000FCA  E1DD               	bnz	l4077
  8069  000FCC                     l4099:
  8070                           
  8071                           ; BSR set to: 1
  8072                           ;ModbusRtu.c: 762: if (u16regs > 15)
  8073  000FCC  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  8074  000FCE  E1EF               	bnz	l4085
  8075  000FD0  0E10               	movlw	16
  8076  000FD2  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  8077  000FD4  D7E9               	goto	L10
  8078  000FD6                     l4105:
  8079                           
  8080                           ; BSR set to: 1
  8081                           ;ModbusRtu.c: 766: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8082  000FD6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8083  000FD8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8084  000FDA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8085  000FDC  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8086  000FDE  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8087  000FE2                     l4107:
  8088  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  8089                           
  8090                           ; BSR set to: 1
  8091                           ;ModbusRtu.c: 767: u8regs = (uint8_t) u16regs;
  8092  000FE4  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8093                           
  8094                           ; BSR set to: 1
  8095                           ;ModbusRtu.c: 768: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  8096  000FE8  5027               	movf	ModbusValidateRequest@u8regs,w,c
  8097  000FEA  0100               	movlb	0	; () banked
  8098  000FEC  5DD0               	subwf	__holdingRegsCount& (0+255),w,b
  8099  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  8100  000FF0  E3DE               	bnc	l4085
  8101  000FF2  D0A1               	goto	l738
  8102  000FF4                     l4115:
  8103                           
  8104                           ; BSR set to: 1
  8105                           ;ModbusRtu.c: 771: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8106  000FF4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8107  000FF6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8108  000FF8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8109  000FFA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8110  000FFC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8111                           
  8112                           ; BSR set to: 1
  8113                           ;ModbusRtu.c: 772: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8114  001000  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8115  001002  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8116  001006  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8117  001008  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8118  00100C  6A14               	clrf	??_ModbusValidateRequest,c
  8119  00100E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8120  001010  5014               	movf	??_ModbusValidateRequest,w,c
  8121  001012  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  8122  001014  5015               	movf	??_ModbusValidateRequest+1,w,c
  8123  001016  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  8124                           
  8125                           ; BSR set to: 1
  8126                           ;ModbusRtu.c: 773: u8regs = (uint8_t) u16regs;
  8127  001018  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  8128                           
  8129                           ; BSR set to: 1
  8130                           ;ModbusRtu.c: 774: if (u8regs > _inputRegsCount)
  8131  00101C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  8132  00101E  0100               	movlb	0	; () banked
  8133  001020  5DD1               	subwf	__inputRegsCount& (0+255),w,b
  8134  001022  D7E5               	goto	L11
  8135  001024                     l4127:
  8136                           
  8137                           ; BSR set to: 1
  8138                           ;ModbusRtu.c: 778: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  8139                           ;ModbusRtu.c: 779: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  8140  001024  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8141  001026  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8142  001028  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8143  00102A  6E28               	movwf	ModbusValidateRequest@u16regs,c
  8144  00102C  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  8145                           
  8146                           ; BSR set to: 1
  8147                           ;ModbusRtu.c: 780: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  8148  001030  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8149  001032  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  8150  001036  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8151  001038  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8152  00103C  6A14               	clrf	??_ModbusValidateRequest,c
  8153  00103E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8154  001040  5014               	movf	??_ModbusValidateRequest,w,c
  8155  001042  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  8156  001044  5015               	movf	??_ModbusValidateRequest+1,w,c
  8157  001046  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  8158  001048  D7CC               	goto	l4107
  8159  00104A                     l4139:
  8160                           
  8161                           ; BSR set to: 1
  8162                           ;ModbusRtu.c: 789: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  8163  00104A  0E06               	movlw	6
  8164  00104C  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  8165  00104E  E1AF               	bnz	l4085
  8166                           
  8167                           ; BSR set to: 1
  8168                           ;ModbusRtu.c: 792: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  8169  001050  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8170  001052  E1AD               	bnz	l4085
  8171                           
  8172                           ; BSR set to: 1
  8173  001054  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  8174  001056  E1AB               	bnz	l4085
  8175                           
  8176                           ; BSR set to: 1
  8177                           ;ModbusRtu.c: 795: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  8178  001058  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8179  00105A  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  8180  00105E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8181  001060  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8182  001064  6A14               	clrf	??_ModbusValidateRequest,c
  8183  001066  1214               	iorwf	??_ModbusValidateRequest,f,c
  8184  001068  0E00               	movlw	0
  8185  00106A  90D8               	bcf	status,0,c
  8186  00106C  3614               	rlcf	??_ModbusValidateRequest,f,c
  8187  00106E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  8188  001070  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  8189  001074  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  8190  001078  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  8191  00107A  0EFF               	movlw	-1
  8192  00107C  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  8193  00107E  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  8194                           
  8195                           ;ModbusRtu.c: 796: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  8196  001080  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8197  001082  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  8198  001086  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  8199  001088  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  8200  00108C  6A14               	clrf	??_ModbusValidateRequest,c
  8201  00108E  1214               	iorwf	??_ModbusValidateRequest,f,c
  8202  001090  0E00               	movlw	0
  8203  001092  90D8               	bcf	status,0,c
  8204  001094  3614               	rlcf	??_ModbusValidateRequest,f,c
  8205  001096  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  8206  001098  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  8207  00109C  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  8208  0010A0  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  8209  0010A2  0EFF               	movlw	-1
  8210  0010A4  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  8211  0010A6  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  8212                           
  8213                           ;ModbusRtu.c: 798: if (startAddrBytes + recLenBytes >= 256)
  8214  0010A8  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  8215  0010AA  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  8216  0010AC  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  8217  0010AE  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  8218  0010B0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  8219  0010B2  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  8220  0010B4  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  8221  0010B6  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  8222  0010B8  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  8223  0010BA  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  8224  0010BC  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  8225  0010BE  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  8226  0010C0  5017               	movf	??_ModbusValidateRequest+3,w,c
  8227  0010C2  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  8228  0010C4  E102               	bnz	u3110
  8229  0010C6  0415               	decf	??_ModbusValidateRequest+1,w,c
  8230  0010C8  D76F               	goto	L10
  8231  0010CA                     u3110:
  8232  0010CA  D771               	goto	l4085
  8233  0010CC                     l4159:
  8234                           
  8235                           ; BSR set to: 1
  8236                           ;ModbusRtu.c: 802: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  8237  0010CC  0E0E               	movlw	14
  8238  0010CE  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  8239  0010D0  E001 D743          	bnz	l4069
  8240                           
  8241                           ; BSR set to: 1
  8242                           ;ModbusRtu.c: 804: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  8243  0010D4  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  8244                           
  8245                           ; BSR set to: 1
  8246                           ;ModbusRtu.c: 805: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  8247  0010D8  0426               	decf	ModbusValidateRequest@readDevId,w,c
  8248  0010DA  E007               	bz	l4175
  8249                           
  8250                           ; BSR set to: 1
  8251  0010DC  0E02               	movlw	2
  8252  0010DE  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8253  0010E0  E004               	bz	l4175
  8254                           
  8255                           ; BSR set to: 1
  8256  0010E2  0E04               	movlw	4
  8257  0010E4  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8258  0010E6  E001 D74E          	bnz	l4077
  8259  0010EA                     l4175:
  8260                           
  8261                           ; BSR set to: 1
  8262                           ;ModbusRtu.c: 807: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  8263  0010EA  0E04               	movlw	4
  8264  0010EC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  8265  0010EE  E123               	bnz	l738
  8266                           
  8267                           ; BSR set to: 1
  8268  0010F0  0E06               	movlw	6
  8269  0010F2  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  8270  0010F4  D020               	goto	l738
  8271  0010F6  D75B               	goto	l4085
  8272  0010F8                     l4185:
  8273  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  8274                           
  8275                           ; BSR set to: 1
  8276  0010FA  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  8277                           
  8278                           ; Switch size 1, requested type "speed"
  8279                           ; Number of cases is 11, Range of values is 1 to 43
  8280                           ; switch strategies available:
  8281                           ; Name         Instructions Cycles
  8282                           ; simple_byte           34    18 (average)
  8283                           ;	Chosen strategy is simple_byte
  8284  0010FC  0A01               	xorlw	1	; case 1
  8285  0010FE  E101 D731          	bz	l4073
  8286  001102  0A03               	xorlw	3	; case 2
  8287  001104  E101 D72E          	bz	l4073
  8288  001108  0A01               	xorlw	1	; case 3
  8289  00110A  E08C               	bz	l4127
  8290  00110C  0A07               	xorlw	7	; case 4
  8291  00110E  E101 D771          	bz	l4115
  8292  001112  0A01               	xorlw	1	; case 5
  8293  001114  E101 D74E          	bz	l4089
  8294  001118  0A03               	xorlw	3	; case 6
  8295  00111A  E101 D75C          	bz	l4105
  8296  00111E  0A09               	xorlw	9	; case 15
  8297  001120  E101 D720          	bz	l4073
  8298  001124  0A1F               	xorlw	31	; case 16
  8299  001126  E101 D77D          	bz	l4127
  8300  00112A  0A01               	xorlw	1	; case 17
  8301  00112C  E004               	bz	l738
  8302  00112E  0A04               	xorlw	4	; case 21
  8303  001130  E08C               	bz	l4139
  8304  001132  0A3E               	xorlw	62	; case 43
  8305  001134  E0CB               	bz	l4159
  8306  001136                     l738:
  8307  001136  FFFF               	dw	65535	; assembler added errata NOP
  8308                           
  8309                           ;ModbusRtu.c: 811: _lastCommand = _au8Buffer[ FUNC ];
  8310  001138  C101  F0E1         	movff	__au8Buffer+1,__lastCommand
  8311                           
  8312                           ;ModbusRtu.c: 812: return 0;
  8313  00113C  0E00               	movlw	0
  8314  00113E                     l725:
  8315  00113E  FFFF               	dw	65535	; assembler added errata NOP
  8316  001140  0012               	return		;funcret
  8317  001142  FFFF               	dw	65535	; errata NOP
  8318  001144                     __end_of_ModbusValidateRequest:
  8319                           	opt stack 0
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           postdec1	equ	0xFE5
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           plusw2	equ	0xFDB
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _ModbusProcess_FC7 *****************
  8341 ;; Defined at:
  8342 ;;		line 994 in file "ModbusRtu.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;		None
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  1    wreg      unsigned char 
  8349 ;; Registers used:
  8350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8351 ;; Tracked objects:
  8352 ;;		On entry : E/1
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8356 ;;      Params:         0       0       0       0       0       0       0
  8357 ;;      Locals:         1       0       0       0       0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0
  8359 ;;      Totals:         1       0       0       0       0       0       0
  8360 ;;Total ram usage:        1 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    4
  8363 ;; This function calls:
  8364 ;;		_ModbusSendTxBuffer
  8365 ;; This function is called by:
  8366 ;;		_ModbusPoll
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           	psect	text40
  8371  002CEE                     __ptext40:
  8372                           	opt stack 0
  8373  002CEE                     _ModbusProcess_FC7:
  8374                           	opt stack 25
  8375                           
  8376                           ;incstack = 0
  8377  002CEE  FFFF               	dw	65535
  8378                           
  8379                           ;ModbusRtu.c: 996: _au8Buffer[ 2 ] = _exceptionStatus;
  8380  002CF0  C0CF  F102         	movff	__exceptionStatus,__au8Buffer+2
  8381                           
  8382                           ;ModbusRtu.c: 997: _u8BufferSize = 3;
  8383  002CF4  0E03               	movlw	3
  8384  002CF6  6E72               	movwf	__u8BufferSize,c
  8385                           
  8386                           ;ModbusRtu.c: 998: uint8_t u8CopyBufferSize = _u8BufferSize;
  8387  002CF8  C072  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  8388                           
  8389                           ;ModbusRtu.c: 999: ModbusSendTxBuffer();
  8390  002CFC  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  8391                           
  8392                           ;ModbusRtu.c: 1000: return u8CopyBufferSize;
  8393  002D00  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  8394  002D02  0012               	return		;funcret
  8395  002D04  FFFF               	dw	65535	; errata NOP
  8396  002D06                     __end_of_ModbusProcess_FC7:
  8397                           	opt stack 0
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           prodh	equ	0xFF4
  8403                           prodl	equ	0xFF3
  8404                           intcon	equ	0xFF2
  8405                           postinc0	equ	0xFEE
  8406                           wreg	equ	0xFE8
  8407                           postdec1	equ	0xFE5
  8408                           fsr1h	equ	0xFE2
  8409                           fsr1l	equ	0xFE1
  8410                           indf2	equ	0xFDF
  8411                           postinc2	equ	0xFDE
  8412                           postdec2	equ	0xFDD
  8413                           plusw2	equ	0xFDB
  8414                           fsr2h	equ	0xFDA
  8415                           fsr2l	equ	0xFD9
  8416                           status	equ	0xFD8
  8417                           
  8418 ;; *************** function _ModbusProcess_FC6 *****************
  8419 ;; Defined at:
  8420 ;;		line 974 in file "ModbusRtu.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8423 ;;		 -> _MODBUSHoldingRegs(30), 
  8424 ;;  u8size          1   23[COMRAM] unsigned char 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  u16add          2   29[COMRAM] unsigned short 
  8427 ;;  u16val          2   26[COMRAM] unsigned short 
  8428 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      unsigned char 
  8431 ;; Registers used:
  8432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : E/1
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8438 ;;      Params:         3       0       0       0       0       0       0
  8439 ;;      Locals:         5       0       0       0       0       0       0
  8440 ;;      Temps:          2       0       0       0       0       0       0
  8441 ;;      Totals:        10       0       0       0       0       0       0
  8442 ;;Total ram usage:       10 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    4
  8445 ;; This function calls:
  8446 ;;		_ModbusSendTxBuffer
  8447 ;; This function is called by:
  8448 ;;		_ModbusPoll
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text41
  8453  00273C                     __ptext41:
  8454                           	opt stack 0
  8455  00273C                     _ModbusProcess_FC6:
  8456                           	opt stack 25
  8457                           
  8458                           ;incstack = 0
  8459  00273C  FFFF               	dw	65535
  8460                           
  8461                           ;ModbusRtu.c: 976: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ AD
      +                          D_LO ]);
  8462  00273E  0101               	movlb	1	; () banked
  8463  002740  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8464  002742  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8465  002744  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8466  002746  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  8467  002748  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  8468                           
  8469                           ; BSR set to: 1
  8470                           ;ModbusRtu.c: 977: _lastAddress = u16add;
  8471  00274C  C01E  F0BE         	movff	ModbusProcess_FC6@u16add,__lastAddress
  8472  002750  C01F  F0BF         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  8473                           
  8474                           ;ModbusRtu.c: 978: _lastCount = 1;
  8475  002754  0100               	movlb	0	; () banked
  8476  002756  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8477  002758  0E01               	movlw	1
  8478  00275A  6FC0               	movwf	__lastCount& (0+255),b
  8479                           
  8480                           ;ModbusRtu.c: 979: uint8_t u8CopyBufferSize;
  8481                           ;ModbusRtu.c: 980: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_
      +                          LO ]);
  8482  00275C  0101               	movlb	1	; () banked
  8483  00275E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8484  002760  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  8485  002762  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8486  002764  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  8487  002766  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  8488                           
  8489                           ; BSR set to: 1
  8490                           ;ModbusRtu.c: 982: regs[ u16add ] = u16val;
  8491  00276A  90D8               	bcf	status,0,c
  8492  00276C  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  8493  00276E  6ED9               	movwf	fsr2l,c
  8494  002770  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  8495  002772  6EDA               	movwf	fsr2h,c
  8496  002774  5016               	movf	ModbusProcess_FC6@regs,w,c
  8497  002776  26D9               	addwf	fsr2l,f,c
  8498  002778  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  8499  00277A  22DA               	addwfc	fsr2h,f,c
  8500  00277C  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  8501  002780  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  8502                           
  8503                           ; BSR set to: 1
  8504                           ;ModbusRtu.c: 985: _u8BufferSize = RESPONSE_SIZE;
  8505  002784  0E06               	movlw	6
  8506  002786  6E72               	movwf	__u8BufferSize,c
  8507                           
  8508                           ; BSR set to: 1
  8509                           ;ModbusRtu.c: 987: u8CopyBufferSize = _u8BufferSize + 2;
  8510  002788  5072               	movf	__u8BufferSize,w,c
  8511  00278A  0F02               	addlw	2
  8512  00278C  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  8513                           
  8514                           ; BSR set to: 1
  8515                           ;ModbusRtu.c: 988: ModbusSendTxBuffer();
  8516  00278E  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  8517                           
  8518                           ;ModbusRtu.c: 990: return u8CopyBufferSize;
  8519  002792  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  8520  002794  0012               	return		;funcret
  8521  002796  FFFF               	dw	65535	; errata NOP
  8522  002798                     __end_of_ModbusProcess_FC6:
  8523                           	opt stack 0
  8524                           tblptru	equ	0xFF8
  8525                           tblptrh	equ	0xFF7
  8526                           tblptrl	equ	0xFF6
  8527                           tablat	equ	0xFF5
  8528                           prodh	equ	0xFF4
  8529                           prodl	equ	0xFF3
  8530                           intcon	equ	0xFF2
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           postdec1	equ	0xFE5
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           plusw2	equ	0xFDB
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function _ModbusProcess_FC5 *****************
  8545 ;; Defined at:
  8546 ;;		line 939 in file "ModbusRtu.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;  regs            1    wreg     PTR unsigned short 
  8549 ;;		 -> _MODBUSCoils(2), 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  regs            1   29[COMRAM] PTR unsigned short 
  8552 ;;		 -> _MODBUSCoils(2), 
  8553 ;;  u16coil         2   27[COMRAM] unsigned short 
  8554 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  8555 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      unsigned char 
  8558 ;; Registers used:
  8559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : E/1
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8565 ;;      Params:         0       0       0       0       0       0       0
  8566 ;;      Locals:         5       0       0       0       0       0       0
  8567 ;;      Temps:          5       0       0       0       0       0       0
  8568 ;;      Totals:        10       0       0       0       0       0       0
  8569 ;;Total ram usage:       10 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    4
  8572 ;; This function calls:
  8573 ;;		_ModbusSendTxBuffer
  8574 ;; This function is called by:
  8575 ;;		_ModbusPoll
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text42
  8580  002308                     __ptext42:
  8581                           	opt stack 0
  8582  002308                     _ModbusProcess_FC5:
  8583                           	opt stack 25
  8584                           
  8585                           ;incstack = 0
  8586  002308  FFFF               	dw	65535
  8587                           
  8588                           ;ModbusProcess_FC5@regs stored from wreg
  8589  00230A  6E1E               	movwf	ModbusProcess_FC5@regs,c
  8590                           
  8591                           ;ModbusRtu.c: 942: uint8_t u8currentBit;
  8592                           ;ModbusRtu.c: 943: uint8_t u8CopyBufferSize;
  8593                           ;ModbusRtu.c: 944: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  8594  00230C  0101               	movlb	1	; () banked
  8595  00230E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8596  002310  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  8597  002312  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8598  002314  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  8599  002316  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  8600                           
  8601                           ; BSR set to: 1
  8602                           ;ModbusRtu.c: 945: _lastAddress = u16coil;
  8603  00231A  C01C  F0BE         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  8604  00231E  C01D  F0BF         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  8605                           
  8606                           ;ModbusRtu.c: 946: _lastCount = 1;
  8607  002322  0100               	movlb	0	; () banked
  8608  002324  6BC1               	clrf	(__lastCount+1)& (0+255),b
  8609  002326  0E01               	movlw	1
  8610  002328  6FC0               	movwf	__lastCount& (0+255),b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;ModbusRtu.c: 949: u8currentBit = (uint8_t) (u16coil % 16);
  8614  00232A  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  8615  00232C  0B0F               	andlw	15
  8616  00232E  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;ModbusRtu.c: 952: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  8620  002330  0101               	movlb	1	; () banked
  8621  002332  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  8622  002334  E116               	bnz	l5795
  8623                           
  8624                           ; BSR set to: 1
  8625  002336  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8626  00233A  0E01               	movlw	1
  8627  00233C  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8628  00233E  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8629  002340  2A16               	incf	??_ModbusProcess_FC5,f,c
  8630  002342  D004               	goto	u4934
  8631  002344                     u4935:
  8632  002344  FFFF               	dw	65535	; assembler added errata NOP
  8633  002346  90D8               	bcf	status,0,c
  8634  002348  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8635  00234A  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8636  00234C                     u4934:
  8637  00234C  FFFF               	dw	65535	; assembler added errata NOP
  8638  00234E  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8639  002350  D7F9               	goto	u4935
  8640  002352  501E               	movf	ModbusProcess_FC5@regs,w,c
  8641  002354  6ED9               	movwf	fsr2l,c
  8642  002356  6ADA               	clrf	fsr2h,c
  8643  002358  5017               	movf	??_ModbusProcess_FC5+1,w,c
  8644  00235A  12DE               	iorwf	postinc2,f,c
  8645  00235C  5018               	movf	??_ModbusProcess_FC5+2,w,c
  8646  00235E  12DD               	iorwf	postdec2,f,c
  8647  002360  D019               	goto	l5797
  8648  002362                     l5795:
  8649                           
  8650                           ; BSR set to: 1
  8651  002362  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  8652  002366  0E01               	movlw	1
  8653  002368  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  8654  00236A  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  8655  00236C  2A16               	incf	??_ModbusProcess_FC5,f,c
  8656  00236E  D004               	goto	u4944
  8657  002370                     u4945:
  8658  002370  FFFF               	dw	65535	; assembler added errata NOP
  8659  002372  90D8               	bcf	status,0,c
  8660  002374  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  8661  002376  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  8662  002378                     u4944:
  8663  002378  FFFF               	dw	65535	; assembler added errata NOP
  8664  00237A  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  8665  00237C  D7F9               	goto	u4945
  8666  00237E  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  8667  002380  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  8668  002382  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  8669  002384  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  8670  002386  501E               	movf	ModbusProcess_FC5@regs,w,c
  8671  002388  6ED9               	movwf	fsr2l,c
  8672  00238A  6ADA               	clrf	fsr2h,c
  8673  00238C  5019               	movf	??_ModbusProcess_FC5+3,w,c
  8674  00238E  16DE               	andwf	postinc2,f,c
  8675  002390  501A               	movf	??_ModbusProcess_FC5+4,w,c
  8676  002392  16DD               	andwf	postdec2,f,c
  8677  002394                     l5797:
  8678  002394  FFFF               	dw	65535	; assembler added errata NOP
  8679                           
  8680                           ;ModbusRtu.c: 959: _u8BufferSize = 6;
  8681  002396  0E06               	movlw	6
  8682  002398  6E72               	movwf	__u8BufferSize,c
  8683                           
  8684                           ;ModbusRtu.c: 960: u8CopyBufferSize = _u8BufferSize + 2;
  8685  00239A  5072               	movf	__u8BufferSize,w,c
  8686  00239C  0F02               	addlw	2
  8687  00239E  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8688                           
  8689                           ;ModbusRtu.c: 961: ModbusSendTxBuffer();
  8690  0023A0  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  8691                           
  8692                           ;ModbusRtu.c: 963: return u8CopyBufferSize;
  8693  0023A4  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8694  0023A6  0012               	return		;funcret
  8695  0023A8  FFFF               	dw	65535	; errata NOP
  8696  0023AA                     __end_of_ModbusProcess_FC5:
  8697                           	opt stack 0
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           postinc0	equ	0xFEE
  8706                           wreg	equ	0xFE8
  8707                           postdec1	equ	0xFE5
  8708                           fsr1h	equ	0xFE2
  8709                           fsr1l	equ	0xFE1
  8710                           indf2	equ	0xFDF
  8711                           postinc2	equ	0xFDE
  8712                           postdec2	equ	0xFDD
  8713                           plusw2	equ	0xFDB
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _ModbusProcess_FC43 *****************
  8719 ;; Defined at:
  8720 ;;		line 1173 in file "ModbusRtu.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  objId           1   23[COMRAM] unsigned char 
  8725 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8726 ;;  devIdCode       1   21[COMRAM] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  1    wreg      unsigned char 
  8729 ;; Registers used:
  8730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : E/1
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8736 ;;      Params:         0       0       0       0       0       0       0
  8737 ;;      Locals:         3       0       0       0       0       0       0
  8738 ;;      Temps:          0       0       0       0       0       0       0
  8739 ;;      Totals:         3       0       0       0       0       0       0
  8740 ;;Total ram usage:        3 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    4
  8743 ;; This function calls:
  8744 ;;		_CopyStringToBuffer
  8745 ;;		_ModbusSendTxBuffer
  8746 ;; This function is called by:
  8747 ;;		_ModbusPoll
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           	psect	text43
  8752  001444                     __ptext43:
  8753                           	opt stack 0
  8754  001444                     _ModbusProcess_FC43:
  8755                           	opt stack 25
  8756                           
  8757                           ;incstack = 0
  8758  001444  FFFF               	dw	65535
  8759                           
  8760                           ;ModbusRtu.c: 1175: uint8_t devIdCode = _au8Buffer[ 3 ];
  8761  001446  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  8762                           
  8763                           ;ModbusRtu.c: 1183: uint8_t objId = _au8Buffer[ 4 ];
  8764  00144A  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  8765                           
  8766                           ;ModbusRtu.c: 1194: _au8Buffer[ 5 ] = 0x00;
  8767  00144E  0101               	movlb	1	; () banked
  8768  001450  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  8769                           
  8770                           ;ModbusRtu.c: 1195: _au8Buffer[ 6 ] = 0x00;
  8771  001452  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  8772                           
  8773                           ; BSR set to: 1
  8774                           ;ModbusRtu.c: 1197: _u8BufferSize = 8;
  8775  001454  0E08               	movlw	8
  8776  001456  6E72               	movwf	__u8BufferSize,c
  8777                           
  8778                           ;ModbusRtu.c: 1198: switch(devIdCode)
  8779  001458  D094               	goto	l6039
  8780  00145A                     l5985:
  8781                           
  8782                           ; BSR set to: 1
  8783                           ;ModbusRtu.c: 1201: _au8Buffer[ 4 ] = 0x81;
  8784  00145A  0E81               	movlw	129
  8785  00145C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8786                           
  8787                           ;ModbusRtu.c: 1202: _au8Buffer[ 7 ] = 3;
  8788  00145E  0E03               	movlw	3
  8789  001460  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;ModbusRtu.c: 1203: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8793  001462  0E5E               	movlw	low STR_4
  8794  001464  6E07               	movwf	CopyStringToBuffer@src,c
  8795  001466  0E06               	movlw	6
  8796  001468  6E08               	movwf	CopyStringToBuffer@len,c
  8797  00146A  0E00               	movlw	0
  8798  00146C  EC3E  F013         	call	_CopyStringToBuffer
  8799                           
  8800                           ;ModbusRtu.c: 1204: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8801  001470  0E55               	movlw	low STR_6
  8802  001472  6E07               	movwf	CopyStringToBuffer@src,c
  8803  001474  0E09               	movlw	9
  8804  001476  6E08               	movwf	CopyStringToBuffer@len,c
  8805  001478  0E01               	movlw	1
  8806  00147A  EC3E  F013         	call	_CopyStringToBuffer
  8807                           
  8808                           ;ModbusRtu.c: 1205: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8809  00147E  0E64               	movlw	low STR_8
  8810  001480  6E07               	movwf	CopyStringToBuffer@src,c
  8811  001482  0E05               	movlw	5
  8812  001484  6E08               	movwf	CopyStringToBuffer@len,c
  8813  001486  0E02               	movlw	2
  8814  001488  EC3E  F013         	call	_CopyStringToBuffer
  8815                           
  8816                           ;ModbusRtu.c: 1206: break;
  8817  00148C  D084               	goto	l847
  8818  00148E                     l5993:
  8819                           
  8820                           ; BSR set to: 1
  8821                           ;ModbusRtu.c: 1208: _au8Buffer[ 4 ] = 0x82;
  8822  00148E  0E82               	movlw	130
  8823  001490  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8824                           
  8825                           ;ModbusRtu.c: 1209: _au8Buffer[ 7 ] = 4;
  8826  001492  0E04               	movlw	4
  8827  001494  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8828                           
  8829                           ; BSR set to: 1
  8830                           ;ModbusRtu.c: 1210: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8831  001496  0E3A               	movlw	low STR_10
  8832  001498  6E07               	movwf	CopyStringToBuffer@src,c
  8833  00149A  0E10               	movlw	16
  8834  00149C  6E08               	movwf	CopyStringToBuffer@len,c
  8835  00149E  0E03               	movlw	3
  8836  0014A0  EC3E  F013         	call	_CopyStringToBuffer
  8837                           
  8838                           ;ModbusRtu.c: 1211: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8839  0014A4  0E26               	movlw	low STR_12
  8840  0014A6  6E07               	movwf	CopyStringToBuffer@src,c
  8841  0014A8  0E14               	movlw	20
  8842  0014AA  6E08               	movwf	CopyStringToBuffer@len,c
  8843  0014AC  0E04               	movlw	4
  8844  0014AE  EC3E  F013         	call	_CopyStringToBuffer
  8845                           
  8846                           ;ModbusRtu.c: 1212: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8847  0014B2  0E69               	movlw	low STR_14
  8848  0014B4  6E07               	movwf	CopyStringToBuffer@src,c
  8849  0014B6  0E04               	movlw	4
  8850  0014B8  6E08               	movwf	CopyStringToBuffer@len,c
  8851  0014BA  0E05               	movlw	5
  8852  0014BC  EC3E  F013         	call	_CopyStringToBuffer
  8853                           
  8854                           ;ModbusRtu.c: 1213: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8855  0014C0  0E4A               	movlw	low STR_16
  8856  0014C2  6E07               	movwf	CopyStringToBuffer@src,c
  8857  0014C4  0E0B               	movlw	11
  8858  0014C6  6E08               	movwf	CopyStringToBuffer@len,c
  8859  0014C8  0E06               	movlw	6
  8860  0014CA  EC3E  F013         	call	_CopyStringToBuffer
  8861                           
  8862                           ;ModbusRtu.c: 1214: break;
  8863  0014CE  D063               	goto	l847
  8864  0014D0                     l6003:
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;ModbusRtu.c: 1216: _au8Buffer[ 7 ] = 1;
  8868  0014D0  0E01               	movlw	1
  8869  0014D2  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8870                           
  8871                           ;ModbusRtu.c: 1217: switch(objId)
  8872  0014D4  D046               	goto	l6035
  8873  0014D6                     l6005:
  8874                           
  8875                           ; BSR set to: 1
  8876                           ;ModbusRtu.c: 1220: _au8Buffer[ 4 ] = 0x81;
  8877  0014D6  0E81               	movlw	129
  8878  0014D8  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8879                           
  8880                           ; BSR set to: 1
  8881                           ;ModbusRtu.c: 1221: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8882  0014DA  0E5E               	movlw	low STR_4
  8883  0014DC  6E07               	movwf	CopyStringToBuffer@src,c
  8884  0014DE  0E06               	movlw	6
  8885  0014E0  6E08               	movwf	CopyStringToBuffer@len,c
  8886  0014E2  5018               	movf	ModbusProcess_FC43@objId,w,c
  8887  0014E4  EC3E  F013         	call	_CopyStringToBuffer
  8888                           
  8889                           ;ModbusRtu.c: 1222: break;
  8890  0014E8  D056               	goto	l847
  8891  0014EA                     l6009:
  8892                           
  8893                           ; BSR set to: 1
  8894                           ;ModbusRtu.c: 1224: _au8Buffer[ 4 ] = 0x81;
  8895  0014EA  0E81               	movlw	129
  8896  0014EC  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8897                           
  8898                           ; BSR set to: 1
  8899                           ;ModbusRtu.c: 1225: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8900  0014EE  0E55               	movlw	low STR_6
  8901  0014F0  6E07               	movwf	CopyStringToBuffer@src,c
  8902  0014F2  0E09               	movlw	9
  8903  0014F4  6E08               	movwf	CopyStringToBuffer@len,c
  8904  0014F6  5018               	movf	ModbusProcess_FC43@objId,w,c
  8905  0014F8  EC3E  F013         	call	_CopyStringToBuffer
  8906                           
  8907                           ;ModbusRtu.c: 1226: break;
  8908  0014FC  D04C               	goto	l847
  8909  0014FE                     l6013:
  8910                           
  8911                           ; BSR set to: 1
  8912                           ;ModbusRtu.c: 1228: _au8Buffer[ 4 ] = 0x81;
  8913  0014FE  0E81               	movlw	129
  8914  001500  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8915                           
  8916                           ; BSR set to: 1
  8917                           ;ModbusRtu.c: 1229: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8918  001502  0E64               	movlw	low STR_8
  8919  001504  6E07               	movwf	CopyStringToBuffer@src,c
  8920  001506  0E05               	movlw	5
  8921  001508  6E08               	movwf	CopyStringToBuffer@len,c
  8922  00150A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8923  00150C  EC3E  F013         	call	_CopyStringToBuffer
  8924                           
  8925                           ;ModbusRtu.c: 1230: break;
  8926  001510  D042               	goto	l847
  8927  001512                     l6017:
  8928                           
  8929                           ; BSR set to: 1
  8930                           ;ModbusRtu.c: 1232: _au8Buffer[ 4 ] = 0x82;
  8931  001512  0E82               	movlw	130
  8932  001514  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8933                           
  8934                           ; BSR set to: 1
  8935                           ;ModbusRtu.c: 1233: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8936  001516  0E3A               	movlw	low STR_10
  8937  001518  6E07               	movwf	CopyStringToBuffer@src,c
  8938  00151A  0E10               	movlw	16
  8939  00151C  6E08               	movwf	CopyStringToBuffer@len,c
  8940  00151E  5018               	movf	ModbusProcess_FC43@objId,w,c
  8941  001520  EC3E  F013         	call	_CopyStringToBuffer
  8942                           
  8943                           ;ModbusRtu.c: 1234: break;
  8944  001524  D038               	goto	l847
  8945  001526                     l6021:
  8946                           
  8947                           ; BSR set to: 1
  8948                           ;ModbusRtu.c: 1236: _au8Buffer[ 4 ] = 0x82;
  8949  001526  0E82               	movlw	130
  8950  001528  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8951                           
  8952                           ; BSR set to: 1
  8953                           ;ModbusRtu.c: 1237: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8954  00152A  0E26               	movlw	low STR_12
  8955  00152C  6E07               	movwf	CopyStringToBuffer@src,c
  8956  00152E  0E14               	movlw	20
  8957  001530  6E08               	movwf	CopyStringToBuffer@len,c
  8958  001532  5018               	movf	ModbusProcess_FC43@objId,w,c
  8959  001534  EC3E  F013         	call	_CopyStringToBuffer
  8960                           
  8961                           ;ModbusRtu.c: 1238: break;
  8962  001538  D02E               	goto	l847
  8963  00153A                     l6025:
  8964                           
  8965                           ; BSR set to: 1
  8966                           ;ModbusRtu.c: 1240: _au8Buffer[ 4 ] = 0x82;
  8967  00153A  0E82               	movlw	130
  8968  00153C  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8969                           
  8970                           ; BSR set to: 1
  8971                           ;ModbusRtu.c: 1241: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8972  00153E  0E69               	movlw	low STR_14
  8973  001540  6E07               	movwf	CopyStringToBuffer@src,c
  8974  001542  0E04               	movlw	4
  8975  001544  6E08               	movwf	CopyStringToBuffer@len,c
  8976  001546  5018               	movf	ModbusProcess_FC43@objId,w,c
  8977  001548  EC3E  F013         	call	_CopyStringToBuffer
  8978                           
  8979                           ;ModbusRtu.c: 1242: break;
  8980  00154C  D024               	goto	l847
  8981  00154E                     l6029:
  8982                           
  8983                           ; BSR set to: 1
  8984                           ;ModbusRtu.c: 1244: _au8Buffer[ 4 ] = 0x82;
  8985  00154E  0E82               	movlw	130
  8986  001550  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8987                           
  8988                           ; BSR set to: 1
  8989                           ;ModbusRtu.c: 1245: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8990  001552  0E4A               	movlw	low STR_16
  8991  001554  6E07               	movwf	CopyStringToBuffer@src,c
  8992  001556  0E0B               	movlw	11
  8993  001558  6E08               	movwf	CopyStringToBuffer@len,c
  8994  00155A  5018               	movf	ModbusProcess_FC43@objId,w,c
  8995  00155C  EC3E  F013         	call	_CopyStringToBuffer
  8996                           
  8997                           ;ModbusRtu.c: 1246: break;
  8998  001560  D01A               	goto	l847
  8999  001562                     l6035:
  9000  001562  FFFF               	dw	65535	; assembler added errata NOP
  9001                           
  9002                           ; BSR set to: 1
  9003  001564  5018               	movf	ModbusProcess_FC43@objId,w,c
  9004                           
  9005                           ; Switch size 1, requested type "speed"
  9006                           ; Number of cases is 7, Range of values is 0 to 6
  9007                           ; switch strategies available:
  9008                           ; Name         Instructions Cycles
  9009                           ; simple_byte           22    12 (average)
  9010                           ;	Chosen strategy is simple_byte
  9011  001566  E0B7               	bz	l6005
  9012  001568  0A01               	xorlw	1	; case 1
  9013  00156A  E0BF               	bz	l6009
  9014  00156C  0A03               	xorlw	3	; case 2
  9015  00156E  E0C7               	bz	l6013
  9016  001570  0A01               	xorlw	1	; case 3
  9017  001572  E0CF               	bz	l6017
  9018  001574  0A07               	xorlw	7	; case 4
  9019  001576  E0D7               	bz	l6021
  9020  001578  0A01               	xorlw	1	; case 5
  9021  00157A  E0DF               	bz	l6025
  9022  00157C  0A03               	xorlw	3	; case 6
  9023  00157E  E0E7               	bz	l6029
  9024  001580  D00A               	goto	l847
  9025  001582                     l6039:
  9026  001582  FFFF               	dw	65535	; assembler added errata NOP
  9027                           
  9028                           ; BSR set to: 1
  9029  001584  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  9030                           
  9031                           ; Switch size 1, requested type "speed"
  9032                           ; Number of cases is 3, Range of values is 1 to 4
  9033                           ; switch strategies available:
  9034                           ; Name         Instructions Cycles
  9035                           ; simple_byte           10     6 (average)
  9036                           ;	Chosen strategy is simple_byte
  9037  001586  0A01               	xorlw	1	; case 1
  9038  001588  E101 D767          	bz	l5985
  9039  00158C  0A03               	xorlw	3	; case 2
  9040  00158E  E101 D77E          	bz	l5993
  9041  001592  0A06               	xorlw	6	; case 4
  9042  001594  E09D               	bz	l6003
  9043  001596                     l847:
  9044  001596  FFFF               	dw	65535	; assembler added errata NOP
  9045                           
  9046                           ;ModbusRtu.c: 1250: uint8_t u8CopyBufferSize = _u8BufferSize;
  9047  001598  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  9048                           
  9049                           ;ModbusRtu.c: 1251: ModbusSendTxBuffer();
  9050  00159C  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  9051                           
  9052                           ;ModbusRtu.c: 1253: return u8CopyBufferSize;
  9053  0015A0  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  9054  0015A2  0012               	return		;funcret
  9055  0015A4  FFFF               	dw	65535	; errata NOP
  9056  0015A6                     __end_of_ModbusProcess_FC43:
  9057                           	opt stack 0
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           postinc0	equ	0xFEE
  9066                           wreg	equ	0xFE8
  9067                           postdec1	equ	0xFE5
  9068                           fsr1h	equ	0xFE2
  9069                           fsr1l	equ	0xFE1
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           postdec2	equ	0xFDD
  9073                           plusw2	equ	0xFDB
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function _CopyStringToBuffer *****************
  9079 ;; Defined at:
  9080 ;;		line 1164 in file "ModbusRtu.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  objId           1    wreg     unsigned char 
  9083 ;;  src             1    6[COMRAM] PTR const unsigned char 
  9084 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  9085 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  9086 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  9087 ;;		 -> STR_6(9), STR_4(6), 
  9088 ;;  len             1    7[COMRAM] unsigned char 
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;  objId           1    9[COMRAM] unsigned char 
  9091 ;;  i               1   10[COMRAM] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      void 
  9094 ;; Registers used:
  9095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/1
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9101 ;;      Params:         2       0       0       0       0       0       0
  9102 ;;      Locals:         2       0       0       0       0       0       0
  9103 ;;      Temps:          1       0       0       0       0       0       0
  9104 ;;      Totals:         5       0       0       0       0       0       0
  9105 ;;Total ram usage:        5 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    2
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_ModbusProcess_FC43
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           	psect	text44
  9116  00267C                     __ptext44:
  9117                           	opt stack 0
  9118  00267C                     _CopyStringToBuffer:
  9119                           	opt stack 26
  9120                           
  9121                           ;incstack = 0
  9122  00267C  FFFF               	dw	65535
  9123                           
  9124                           ;CopyStringToBuffer@objId stored from wreg
  9125  00267E  6E0A               	movwf	CopyStringToBuffer@objId,c
  9126                           
  9127                           ;ModbusRtu.c: 1166: len--;
  9128  002680  0608               	decf	CopyStringToBuffer@len,f,c
  9129                           
  9130                           ;ModbusRtu.c: 1167: _au8Buffer[_u8BufferSize++] = objId;
  9131  002682  0E00               	movlw	low __au8Buffer
  9132  002684  2472               	addwf	__u8BufferSize,w,c
  9133  002686  6ED9               	movwf	fsr2l,c
  9134  002688  6ADA               	clrf	fsr2h,c
  9135  00268A  0E01               	movlw	high __au8Buffer
  9136  00268C  22DA               	addwfc	fsr2h,f,c
  9137  00268E  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  9138  002692  2A72               	incf	__u8BufferSize,f,c
  9139                           
  9140                           ;ModbusRtu.c: 1168: _au8Buffer[_u8BufferSize++] = len;
  9141  002694  0E00               	movlw	low __au8Buffer
  9142  002696  2472               	addwf	__u8BufferSize,w,c
  9143  002698  6ED9               	movwf	fsr2l,c
  9144  00269A  6ADA               	clrf	fsr2h,c
  9145  00269C  0E01               	movlw	high __au8Buffer
  9146  00269E  22DA               	addwfc	fsr2h,f,c
  9147  0026A0  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  9148  0026A4  2A72               	incf	__u8BufferSize,f,c
  9149                           
  9150                           ;ModbusRtu.c: 1169: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  9151  0026A6  6A0B               	clrf	CopyStringToBuffer@i,c
  9152  0026A8  D013               	goto	l3841
  9153  0026AA                     l3835:
  9154                           
  9155                           ;ModbusRtu.c: 1170: _au8Buffer[_u8BufferSize] = src[i];
  9156  0026AA  5007               	movf	CopyStringToBuffer@src,w,c
  9157  0026AC  240B               	addwf	CopyStringToBuffer@i,w,c
  9158  0026AE  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  9159  0026B0  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  9160  0026B4                     	if	1	;There is more than 1 active tblptr byte
  9161  0026B4  0E06               	movlw	high __smallconst
  9162  0026B6  6EF7               	movwf	tblptrh,c
  9163  0026B8                     	endif
  9164  0026B8                     	if	0	;tblptru may be non-zero
  9165  0026B8                     	endif
  9166  0026B8                     	if	0	;tblptru may be non-zero
  9167  0026B8                     	endif
  9168  0026B8  0E00               	movlw	low __au8Buffer
  9169  0026BA  2472               	addwf	__u8BufferSize,w,c
  9170  0026BC  6ED9               	movwf	fsr2l,c
  9171  0026BE  6ADA               	clrf	fsr2h,c
  9172  0026C0  0E01               	movlw	high __au8Buffer
  9173  0026C2  22DA               	addwfc	fsr2h,f,c
  9174  0026C4  0008               	tblrd		*
  9175  0026C6  FFFF               	dw	65535	; errata NOP
  9176  0026C8  CFF5 FFDF          	movff	tablat,indf2
  9177  0026CC  2A0B               	incf	CopyStringToBuffer@i,f,c
  9178  0026CE  2A72               	incf	__u8BufferSize,f,c
  9179  0026D0                     l3841:
  9180  0026D0  FFFF               	dw	65535	; assembler added errata NOP
  9181  0026D2  5008               	movf	CopyStringToBuffer@len,w,c
  9182  0026D4  5C0B               	subwf	CopyStringToBuffer@i,w,c
  9183  0026D6  E3E9               	bnc	l3835
  9184  0026D8  0012               	return		;funcret
  9185  0026DA  FFFF               	dw	65535	; errata NOP
  9186  0026DC                     __end_of_CopyStringToBuffer:
  9187                           	opt stack 0
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           postinc0	equ	0xFEE
  9196                           wreg	equ	0xFE8
  9197                           postdec1	equ	0xFE5
  9198                           fsr1h	equ	0xFE2
  9199                           fsr1l	equ	0xFE1
  9200                           indf2	equ	0xFDF
  9201                           postinc2	equ	0xFDE
  9202                           postdec2	equ	0xFDD
  9203                           plusw2	equ	0xFDB
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function _ModbusProcess_FC3 *****************
  9209 ;; Defined at:
  9210 ;;		line 906 in file "ModbusRtu.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9213 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  9214 ;;  u8size          1   23[COMRAM] unsigned char 
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;  u16regsno       2   29[COMRAM] unsigned short 
  9217 ;;  i               1   32[COMRAM] unsigned char 
  9218 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  9219 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      unsigned char 
  9222 ;; Registers used:
  9223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : E/1
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9229 ;;      Params:         3       0       0       0       0       0       0
  9230 ;;      Locals:         5       0       0       0       0       0       0
  9231 ;;      Temps:          4       0       0       0       0       0       0
  9232 ;;      Totals:        12       0       0       0       0       0       0
  9233 ;;Total ram usage:       12 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    4
  9236 ;; This function calls:
  9237 ;;		_ModbusSendTxBuffer
  9238 ;; This function is called by:
  9239 ;;		_ModbusPoll
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           	psect	text45
  9244  002054                     __ptext45:
  9245                           	opt stack 0
  9246  002054                     _ModbusProcess_FC3:
  9247                           	opt stack 25
  9248                           
  9249                           ;incstack = 0
  9250  002054  FFFF               	dw	65535
  9251                           
  9252                           ;ModbusRtu.c: 908: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  9253  002056  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  9254                           
  9255                           ;ModbusRtu.c: 909: _lastAddress = u8StartAdd;
  9256  00205A  C020  F0BE         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  9257  00205E  0100               	movlb	0	; () banked
  9258  002060  6BBF               	clrf	(__lastAddress+1)& (0+255),b
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;ModbusRtu.c: 910: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9262  002062  0101               	movlb	1	; () banked
  9263  002064  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9264  002066  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9265  002068  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9266  00206A  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  9267  00206C  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  9268                           
  9269                           ; BSR set to: 1
  9270                           ;ModbusRtu.c: 911: _lastCount = u16regsno;
  9271  002070  C01E  F0C0         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  9272  002074  C01F  F0C1         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  9273                           
  9274                           ; BSR set to: 1
  9275                           ;ModbusRtu.c: 912: uint8_t u8CopyBufferSize;
  9276                           ;ModbusRtu.c: 913: uint8_t i;
  9277                           ;ModbusRtu.c: 915: _au8Buffer[ 2 ] = u16regsno * 2;
  9278  002078  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  9279  00207A  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9280  00207C  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9281                           
  9282                           ; BSR set to: 1
  9283                           ;ModbusRtu.c: 916: _u8BufferSize = 3;
  9284  00207E  0E03               	movlw	3
  9285  002080  6E72               	movwf	__u8BufferSize,c
  9286                           
  9287                           ; BSR set to: 1
  9288                           ;ModbusRtu.c: 918: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  9289  002082  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  9290  002086  D02A               	goto	l5775
  9291  002088                     l5769:
  9292                           
  9293                           ; BSR set to: 1
  9294                           ;ModbusRtu.c: 919: {
  9295                           ;ModbusRtu.c: 920: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  9296  002088  0E00               	movlw	low __au8Buffer
  9297  00208A  2472               	addwf	__u8BufferSize,w,c
  9298  00208C  6ED9               	movwf	fsr2l,c
  9299  00208E  6ADA               	clrf	fsr2h,c
  9300  002090  0E01               	movlw	high __au8Buffer
  9301  002092  22DA               	addwfc	fsr2h,f,c
  9302  002094  5021               	movf	ModbusProcess_FC3@i,w,c
  9303  002096  0D02               	mullw	2
  9304  002098  50F3               	movf	prodl,w,c
  9305  00209A  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9306  00209C  6EE1               	movwf	fsr1l,c
  9307  00209E  50F4               	movf	prodh,w,c
  9308  0020A0  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9309  0020A2  6EE2               	movwf	fsr1h,c
  9310  0020A4  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  9311  0020A8  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  9312  0020AC  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  9313  0020B0  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  9314  0020B2  5019               	movf	??_ModbusProcess_FC3,w,c
  9315  0020B4  6EDF               	movwf	indf2,c
  9316                           
  9317                           ; BSR set to: 1
  9318                           ;ModbusRtu.c: 921: _u8BufferSize++;
  9319  0020B6  2A72               	incf	__u8BufferSize,f,c
  9320                           
  9321                           ; BSR set to: 1
  9322                           ;ModbusRtu.c: 922: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  9323  0020B8  5021               	movf	ModbusProcess_FC3@i,w,c
  9324  0020BA  0D02               	mullw	2
  9325  0020BC  50F3               	movf	prodl,w,c
  9326  0020BE  2416               	addwf	ModbusProcess_FC3@regs,w,c
  9327  0020C0  6ED9               	movwf	fsr2l,c
  9328  0020C2  50F4               	movf	prodh,w,c
  9329  0020C4  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  9330  0020C6  6EDA               	movwf	fsr2h,c
  9331  0020C8  0E00               	movlw	low __au8Buffer
  9332  0020CA  2472               	addwf	__u8BufferSize,w,c
  9333  0020CC  6EE1               	movwf	fsr1l,c
  9334  0020CE  6AE2               	clrf	fsr1h,c
  9335  0020D0  0E01               	movlw	high __au8Buffer
  9336  0020D2  22E2               	addwfc	fsr1h,f,c
  9337  0020D4  CFDF FFE7          	movff	indf2,indf1
  9338                           
  9339                           ;ModbusRtu.c: 923: _u8BufferSize++;
  9340  0020D8  2A72               	incf	__u8BufferSize,f,c
  9341  0020DA  2A21               	incf	ModbusProcess_FC3@i,f,c
  9342  0020DC                     l5775:
  9343  0020DC  FFFF               	dw	65535	; assembler added errata NOP
  9344                           
  9345                           ; BSR set to: 1
  9346  0020DE  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  9347  0020E0  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  9348  0020E2  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  9349  0020E4  0E00               	movlw	0
  9350  0020E6  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  9351  0020E8  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  9352  0020EA  5021               	movf	ModbusProcess_FC3@i,w,c
  9353  0020EC  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  9354  0020EE  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  9355  0020F0  5019               	movf	??_ModbusProcess_FC3,w,c
  9356  0020F2  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  9357  0020F4  501A               	movf	??_ModbusProcess_FC3+1,w,c
  9358  0020F6  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  9359  0020F8  E3C7               	bnc	l5769
  9360                           
  9361                           ; BSR set to: 1
  9362                           ;ModbusRtu.c: 924: }
  9363                           ;ModbusRtu.c: 925: u8CopyBufferSize = _u8BufferSize + 2;
  9364  0020FA  5072               	movf	__u8BufferSize,w,c
  9365  0020FC  0F02               	addlw	2
  9366  0020FE  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  9367                           
  9368                           ; BSR set to: 1
  9369                           ;ModbusRtu.c: 926: ModbusSendTxBuffer();
  9370  002100  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  9371                           
  9372                           ;ModbusRtu.c: 928: return u8CopyBufferSize;
  9373  002104  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  9374  002106  0012               	return		;funcret
  9375  002108  FFFF               	dw	65535	; errata NOP
  9376  00210A                     __end_of_ModbusProcess_FC3:
  9377                           	opt stack 0
  9378                           tblptru	equ	0xFF8
  9379                           tblptrh	equ	0xFF7
  9380                           tblptrl	equ	0xFF6
  9381                           tablat	equ	0xFF5
  9382                           prodh	equ	0xFF4
  9383                           prodl	equ	0xFF3
  9384                           intcon	equ	0xFF2
  9385                           postinc0	equ	0xFEE
  9386                           wreg	equ	0xFE8
  9387                           indf1	equ	0xFE7
  9388                           postinc1	equ	0xFE6
  9389                           postdec1	equ	0xFE5
  9390                           fsr1h	equ	0xFE2
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           plusw2	equ	0xFDB
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _ModbusProcess_FC21 *****************
  9401 ;; Defined at:
  9402 ;;		line 1132 in file "ModbusRtu.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  9407 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  9408 ;;  i               1   29[COMRAM] unsigned char 
  9409 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  9410 ;;  requestDataL    1   23[COMRAM] unsigned char 
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      unsigned char 
  9413 ;; Registers used:
  9414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9415 ;; Tracked objects:
  9416 ;;		On entry : E/1
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9420 ;;      Params:         0       0       0       0       0       0       0
  9421 ;;      Locals:         7       0       0       0       0       0       0
  9422 ;;      Temps:          2       0       0       0       0       0       0
  9423 ;;      Totals:         9       0       0       0       0       0       0
  9424 ;;Total ram usage:        9 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    4
  9427 ;; This function calls:
  9428 ;;		_ModbusSendTxBuffer
  9429 ;; This function is called by:
  9430 ;;		_ModbusPoll
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text46
  9435  0021B8                     __ptext46:
  9436                           	opt stack 0
  9437  0021B8                     _ModbusProcess_FC21:
  9438                           	opt stack 25
  9439                           
  9440                           ;incstack = 0
  9441  0021B8  FFFF               	dw	65535
  9442                           
  9443                           ;ModbusRtu.c: 1136: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  9444  0021BA  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  9445                           
  9446                           ;ModbusRtu.c: 1138: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  9447  0021BE  0101               	movlb	1	; () banked
  9448  0021C0  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  9449  0021C2  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  9450  0021C6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9451  0021C8  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9452  0021CC  6A16               	clrf	??_ModbusProcess_FC21,c
  9453  0021CE  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9454  0021D0  90D8               	bcf	status,0,c
  9455  0021D2  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9456  0021D4  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  9457  0021D6  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9458  0021D8  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  9459                           
  9460                           ; BSR set to: 1
  9461                           ;ModbusRtu.c: 1139: _lastAddress = startAddrsBytes;
  9462  0021DA  C01A  F0BE         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  9463  0021DE  C01B  F0BF         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  9464                           
  9465                           ;ModbusRtu.c: 1140: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  9466  0021E2  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  9467  0021E4  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  9468  0021E8  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9469  0021EA  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  9470  0021EE  6A16               	clrf	??_ModbusProcess_FC21,c
  9471  0021F0  1216               	iorwf	??_ModbusProcess_FC21,f,c
  9472  0021F2  90D8               	bcf	status,0,c
  9473  0021F4  3416               	rlcf	??_ModbusProcess_FC21,w,c
  9474  0021F6  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  9475  0021F8  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  9476  0021FA  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  9477                           
  9478                           ; BSR set to: 1
  9479                           ;ModbusRtu.c: 1141: _lastCount = recLenBytes;
  9480  0021FC  C01C  F0C0         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  9481  002200  C01D  F0C1         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  9482                           
  9483                           ;ModbusRtu.c: 1142: uint8_t u8CopyBufferSize;
  9484                           ;ModbusRtu.c: 1143: uint8_t i;
  9485                           ;ModbusRtu.c: 1149: _u8BufferSize = requestDataLen + 1;
  9486  002204  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  9487  002206  6E72               	movwf	__u8BufferSize,c
  9488                           
  9489                           ; BSR set to: 1
  9490                           ;ModbusRtu.c: 1153: for (i = 0; i < recLenBytes; i++)
  9491  002208  6A1E               	clrf	ModbusProcess_FC21@i,c
  9492  00220A  D01C               	goto	l5973
  9493  00220C                     l829:
  9494  00220C  FFFF               	dw	65535	; assembler added errata NOP
  9495                           
  9496                           ; BSR set to: 1
  9497  00220E  B2A6               	btfsc	4006,1,c	;volatile
  9498  002210  D7FD               	goto	l829
  9499                           
  9500                           ; BSR set to: 1
  9501  002212  501E               	movf	ModbusProcess_FC21@i,w,c
  9502  002214  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  9503  002216  6EA9               	movwf	4009,c	;volatile
  9504                           
  9505                           ; BSR set to: 1
  9506  002218  0E0A               	movlw	low (__au8Buffer+10)
  9507  00221A  241E               	addwf	ModbusProcess_FC21@i,w,c
  9508  00221C  6ED9               	movwf	fsr2l,c
  9509  00221E  6ADA               	clrf	fsr2h,c
  9510  002220  0E01               	movlw	high (__au8Buffer+10)
  9511  002222  22DA               	addwfc	fsr2h,f,c
  9512  002224  50DF               	movf	indf2,w,c
  9513  002226  6EA8               	movwf	4008,c	;volatile
  9514                           
  9515                           ; BSR set to: 1
  9516  002228  90D8               	bcf	status,0,c	;volatile
  9517                           
  9518                           ; BSR set to: 1
  9519  00222A  BEF2               	btfsc	intcon,7,c	;volatile
  9520                           
  9521                           ; BSR set to: 1
  9522  00222C  80D8               	bsf	status,0,c	;volatile
  9523                           
  9524                           ; BSR set to: 1
  9525  00222E  9EF2               	bcf	intcon,7,c	;volatile
  9526  002230  84A6               	bsf	4006,2,c	;volatile
  9527                           
  9528                           ; BSR set to: 1
  9529  002232  0E55               	movlw	85
  9530  002234  6EA7               	movwf	4007,c	;volatile
  9531  002236  0EAA               	movlw	170
  9532  002238  6EA7               	movwf	4007,c	;volatile
  9533                           
  9534                           ; BSR set to: 1
  9535  00223A  82A6               	bsf	4006,1,c	;volatile
  9536                           
  9537                           ; BSR set to: 1
  9538  00223C  94A6               	bcf	4006,2,c	;volatile
  9539                           
  9540                           ; BSR set to: 1
  9541  00223E  E301               	bnc	l5971
  9542                           
  9543                           ; BSR set to: 1
  9544  002240  8EF2               	bsf	intcon,7,c	;volatile
  9545  002242                     l5971:
  9546                           
  9547                           ; BSR set to: 1
  9548  002242  2A1E               	incf	ModbusProcess_FC21@i,f,c
  9549  002244                     l5973:
  9550  002244  FFFF               	dw	65535	; assembler added errata NOP
  9551                           
  9552                           ; BSR set to: 1
  9553  002246  501E               	movf	ModbusProcess_FC21@i,w,c
  9554  002248  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  9555  00224A  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  9556  00224C  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  9557  00224E  5C16               	subwf	??_ModbusProcess_FC21,w,c
  9558  002250  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  9559  002252  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  9560  002254  E3DB               	bnc	l829
  9561                           
  9562                           ; BSR set to: 1
  9563                           ;ModbusRtu.c: 1156: }
  9564                           ;ModbusRtu.c: 1158: u8CopyBufferSize = _u8BufferSize;
  9565  002256  C072  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  9566                           
  9567                           ; BSR set to: 1
  9568                           ;ModbusRtu.c: 1159: ModbusSendTxBuffer();
  9569  00225A  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  9570                           
  9571                           ;ModbusRtu.c: 1161: return u8CopyBufferSize;
  9572  00225E  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  9573  002260  0012               	return		;funcret
  9574  002262  FFFF               	dw	65535	; errata NOP
  9575  002264                     __end_of_ModbusProcess_FC21:
  9576                           	opt stack 0
  9577                           tblptru	equ	0xFF8
  9578                           tblptrh	equ	0xFF7
  9579                           tblptrl	equ	0xFF6
  9580                           tablat	equ	0xFF5
  9581                           prodh	equ	0xFF4
  9582                           prodl	equ	0xFF3
  9583                           intcon	equ	0xFF2
  9584                           postinc0	equ	0xFEE
  9585                           wreg	equ	0xFE8
  9586                           indf1	equ	0xFE7
  9587                           postinc1	equ	0xFE6
  9588                           postdec1	equ	0xFE5
  9589                           fsr1h	equ	0xFE2
  9590                           fsr1l	equ	0xFE1
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           postdec2	equ	0xFDD
  9594                           plusw2	equ	0xFDB
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _ModbusProcess_FC17 *****************
  9600 ;; Defined at:
  9601 ;;		line 1107 in file "ModbusRtu.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  i               1   23[COMRAM] unsigned char 
  9606 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  1    wreg      unsigned char 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9611 ;; Tracked objects:
  9612 ;;		On entry : E/1
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9616 ;;      Params:         0       0       0       0       0       0       0
  9617 ;;      Locals:         2       0       0       0       0       0       0
  9618 ;;      Temps:          1       0       0       0       0       0       0
  9619 ;;      Totals:         3       0       0       0       0       0       0
  9620 ;;Total ram usage:        3 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; Hardware stack levels required when called:    4
  9623 ;; This function calls:
  9624 ;;		_ModbusSendTxBuffer
  9625 ;; This function is called by:
  9626 ;;		_ModbusPoll
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text47
  9631  002542                     __ptext47:
  9632                           	opt stack 0
  9633  002542                     _ModbusProcess_FC17:
  9634                           	opt stack 25
  9635                           
  9636                           ;incstack = 0
  9637  002542  FFFF               	dw	65535
  9638                           
  9639                           ;ModbusRtu.c: 1109: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  9640  002544  0E1B               	movlw	27
  9641  002546  0101               	movlb	1	; () banked
  9642  002548  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  9643                           
  9644                           ;ModbusRtu.c: 1111: _u8BufferSize = 3;
  9645  00254A  0E03               	movlw	3
  9646  00254C  6E72               	movwf	__u8BufferSize,c
  9647                           
  9648                           ; BSR set to: 1
  9649                           ;ModbusRtu.c: 1113: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  9650  00254E  6A18               	clrf	ModbusProcess_FC17@i,c
  9651  002550                     l5919:
  9652  002550  FFFF               	dw	65535	; assembler added errata NOP
  9653                           
  9654                           ; BSR set to: 1
  9655                           ;ModbusRtu.c: 1114: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  9656  002552  5018               	movf	ModbusProcess_FC17@i,w,c
  9657  002554  0F0D               	addlw	low STR_3
  9658  002556  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  9659  002558  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  9660  00255C                     	if	1	;There is more than 1 active tblptr byte
  9661  00255C  0E06               	movlw	high __smallconst
  9662  00255E  6EF7               	movwf	tblptrh,c
  9663  002560                     	endif
  9664  002560                     	if	0	;tblptru may be non-zero
  9665  002560                     	endif
  9666  002560                     	if	0	;tblptru may be non-zero
  9667  002560                     	endif
  9668  002560  0E00               	movlw	low __au8Buffer
  9669  002562  2472               	addwf	__u8BufferSize,w,c
  9670  002564  6ED9               	movwf	fsr2l,c
  9671  002566  6ADA               	clrf	fsr2h,c
  9672  002568  0E01               	movlw	high __au8Buffer
  9673  00256A  22DA               	addwfc	fsr2h,f,c
  9674  00256C  0008               	tblrd		*
  9675  00256E  FFFF               	dw	65535	; errata NOP
  9676  002570  CFF5 FFDF          	movff	tablat,indf2
  9677                           
  9678                           ; BSR set to: 1
  9679  002574  2A18               	incf	ModbusProcess_FC17@i,f,c
  9680                           
  9681                           ; BSR set to: 1
  9682  002576  2A72               	incf	__u8BufferSize,f,c
  9683                           
  9684                           ; BSR set to: 1
  9685  002578  0E18               	movlw	24
  9686  00257A  6418               	cpfsgt	ModbusProcess_FC17@i,c
  9687  00257C  D7E9               	goto	l5919
  9688                           
  9689                           ; BSR set to: 1
  9690                           ;ModbusRtu.c: 1116: _au8Buffer[_u8BufferSize++] = '!';
  9691  00257E  0E00               	movlw	low __au8Buffer
  9692  002580  2472               	addwf	__u8BufferSize,w,c
  9693  002582  6ED9               	movwf	fsr2l,c
  9694  002584  6ADA               	clrf	fsr2h,c
  9695  002586  0E01               	movlw	high __au8Buffer
  9696  002588  22DA               	addwfc	fsr2h,f,c
  9697  00258A  0E21               	movlw	33
  9698  00258C  6EDF               	movwf	indf2,c
  9699                           
  9700                           ; BSR set to: 1
  9701  00258E  2A72               	incf	__u8BufferSize,f,c
  9702                           
  9703                           ; BSR set to: 1
  9704                           ;ModbusRtu.c: 1117: _au8Buffer[_u8BufferSize++] = '>';
  9705  002590  0E00               	movlw	low __au8Buffer
  9706  002592  2472               	addwf	__u8BufferSize,w,c
  9707  002594  6ED9               	movwf	fsr2l,c
  9708  002596  6ADA               	clrf	fsr2h,c
  9709  002598  0E01               	movlw	high __au8Buffer
  9710  00259A  22DA               	addwfc	fsr2h,f,c
  9711  00259C  0E3E               	movlw	62
  9712  00259E  6EDF               	movwf	indf2,c
  9713  0025A0  2A72               	incf	__u8BufferSize,f,c
  9714                           
  9715                           ; BSR set to: 1
  9716                           ;ModbusRtu.c: 1118: uint8_t u8CopyBufferSize = _u8BufferSize;
  9717  0025A2  C072  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  9718                           
  9719                           ; BSR set to: 1
  9720                           ;ModbusRtu.c: 1119: ModbusSendTxBuffer();
  9721  0025A6  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  9722                           
  9723                           ;ModbusRtu.c: 1121: return u8CopyBufferSize;
  9724  0025AA  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  9725  0025AC  0012               	return		;funcret
  9726  0025AE  FFFF               	dw	65535	; errata NOP
  9727  0025B0                     __end_of_ModbusProcess_FC17:
  9728                           	opt stack 0
  9729                           tblptru	equ	0xFF8
  9730                           tblptrh	equ	0xFF7
  9731                           tblptrl	equ	0xFF6
  9732                           tablat	equ	0xFF5
  9733                           prodh	equ	0xFF4
  9734                           prodl	equ	0xFF3
  9735                           intcon	equ	0xFF2
  9736                           postinc0	equ	0xFEE
  9737                           wreg	equ	0xFE8
  9738                           indf1	equ	0xFE7
  9739                           postinc1	equ	0xFE6
  9740                           postdec1	equ	0xFE5
  9741                           fsr1h	equ	0xFE2
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           postdec2	equ	0xFDD
  9746                           plusw2	equ	0xFDB
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           
  9751 ;; *************** function _ModbusProcess_FC16 *****************
  9752 ;; Defined at:
  9753 ;;		line 1068 in file "ModbusRtu.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  regs            2   21[COMRAM] PTR unsigned short 
  9756 ;;		 -> _MODBUSHoldingRegs(30), 
  9757 ;;  u8size          1   23[COMRAM] unsigned char 
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  9760 ;;  temp            2   28[COMRAM] unsigned short 
  9761 ;;  i               1   34[COMRAM] unsigned char 
  9762 ;;  u8regsno        1   33[COMRAM] unsigned char 
  9763 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  1    wreg      unsigned char 
  9766 ;; Registers used:
  9767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9768 ;; Tracked objects:
  9769 ;;		On entry : E/1
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9773 ;;      Params:         3       0       0       0       0       0       0
  9774 ;;      Locals:         7       0       0       0       0       0       0
  9775 ;;      Temps:          4       0       0       0       0       0       0
  9776 ;;      Totals:        14       0       0       0       0       0       0
  9777 ;;Total ram usage:       14 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    4
  9780 ;; This function calls:
  9781 ;;		_ModbusSendTxBuffer
  9782 ;; This function is called by:
  9783 ;;		_ModbusPoll
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           	psect	text48
  9788  001E0A                     __ptext48:
  9789                           	opt stack 0
  9790  001E0A                     _ModbusProcess_FC16:
  9791                           	opt stack 25
  9792                           
  9793                           ;incstack = 0
  9794  001E0A  FFFF               	dw	65535
  9795                           
  9796                           ;ModbusRtu.c: 1071: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9797  001E0C  0101               	movlb	1	; () banked
  9798  001E0E  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9799  001E10  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9800  001E14  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9801  001E16  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9802  001E1A  6A19               	clrf	??_ModbusProcess_FC16,c
  9803  001E1C  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9804  001E1E  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9805  001E20  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9806  001E22  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9807                           
  9808                           ; BSR set to: 1
  9809                           ;ModbusRtu.c: 1072: _lastAddress = u16StartAdd;
  9810  001E24  C020  F0BE         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9811  001E28  C021  F0BF         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9812                           
  9813                           ; BSR set to: 1
  9814                           ;ModbusRtu.c: 1073: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9815  001E2C  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9816                           
  9817                           ; BSR set to: 1
  9818                           ;ModbusRtu.c: 1074: _lastCount = u8regsno;
  9819  001E30  C022  F0C0         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9820  001E34  0100               	movlb	0	; () banked
  9821  001E36  6BC1               	clrf	(__lastCount+1)& (0+255),b
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;ModbusRtu.c: 1075: uint8_t u8CopyBufferSize;
  9825                           ;ModbusRtu.c: 1076: uint8_t i;
  9826                           ;ModbusRtu.c: 1077: uint16_t temp;
  9827                           ;ModbusRtu.c: 1080: _au8Buffer[ NB_HI ] = 0;
  9828  001E38  0101               	movlb	1	; () banked
  9829  001E3A  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9830                           
  9831                           ; BSR set to: 1
  9832                           ;ModbusRtu.c: 1081: _au8Buffer[ NB_LO ] = u8regsno;
  9833  001E3C  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9834                           
  9835                           ; BSR set to: 1
  9836                           ;ModbusRtu.c: 1082: _u8BufferSize = RESPONSE_SIZE;
  9837  001E40  0E06               	movlw	6
  9838  001E42  6E72               	movwf	__u8BufferSize,c
  9839                           
  9840                           ; BSR set to: 1
  9841                           ;ModbusRtu.c: 1085: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9842  001E44  6A23               	clrf	ModbusProcess_FC16@i,c
  9843  001E46  D02C               	goto	l5899
  9844  001E48                     l5893:
  9845                           
  9846                           ; BSR set to: 1
  9847                           ;ModbusRtu.c: 1086: {
  9848                           ;ModbusRtu.c: 1087: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9849  001E48  5023               	movf	ModbusProcess_FC16@i,w,c
  9850  001E4A  0D02               	mullw	2
  9851  001E4C  0E08               	movlw	low (__au8Buffer+8)
  9852  001E4E  24F3               	addwf	prodl,w,c
  9853  001E50  6ED9               	movwf	fsr2l,c
  9854  001E52  0E01               	movlw	high (__au8Buffer+8)
  9855  001E54  20F4               	addwfc	prodh,w,c
  9856  001E56  6EDA               	movwf	fsr2h,c
  9857  001E58  50DF               	movf	indf2,w,c
  9858  001E5A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9859  001E5C  5023               	movf	ModbusProcess_FC16@i,w,c
  9860  001E5E  0D02               	mullw	2
  9861  001E60  0E07               	movlw	low (__au8Buffer+7)
  9862  001E62  24F3               	addwf	prodl,w,c
  9863  001E64  6ED9               	movwf	fsr2l,c
  9864  001E66  0E01               	movlw	high (__au8Buffer+7)
  9865  001E68  20F4               	addwfc	prodh,w,c
  9866  001E6A  6EDA               	movwf	fsr2h,c
  9867  001E6C  50DF               	movf	indf2,w,c
  9868  001E6E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9869  001E70  5019               	movf	??_ModbusProcess_FC16,w,c
  9870  001E72  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9871  001E74  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9872                           
  9873                           ; BSR set to: 1
  9874                           ;ModbusRtu.c: 1091: regs[ u16StartAdd + i ] = temp;
  9875  001E78  5023               	movf	ModbusProcess_FC16@i,w,c
  9876  001E7A  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9877  001E7C  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9878  001E7E  0E00               	movlw	0
  9879  001E80  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9880  001E82  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9881  001E84  90D8               	bcf	status,0,c
  9882  001E86  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9883  001E88  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9884  001E8A  5019               	movf	??_ModbusProcess_FC16,w,c
  9885  001E8C  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9886  001E8E  6ED9               	movwf	fsr2l,c
  9887  001E90  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9888  001E92  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9889  001E94  6EDA               	movwf	fsr2h,c
  9890  001E96  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9891  001E9A  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9892                           
  9893                           ; BSR set to: 1
  9894  001E9E  2A23               	incf	ModbusProcess_FC16@i,f,c
  9895  001EA0                     l5899:
  9896  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  9897                           
  9898                           ; BSR set to: 1
  9899  001EA2  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9900  001EA4  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9901  001EA6  E20E               	bc	l5903
  9902                           
  9903                           ; BSR set to: 1
  9904  001EA8  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9905  001EAA  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9906  001EAC  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9907  001EAE  5023               	movf	ModbusProcess_FC16@i,w,c
  9908  001EB0  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9909  001EB2  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9910  001EB4  0E00               	movlw	0
  9911  001EB6  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9912  001EB8  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9913  001EBA  5019               	movf	??_ModbusProcess_FC16,w,c
  9914  001EBC  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9915  001EBE  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9916  001EC0  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9917  001EC2  E3C2               	bnc	l5893
  9918  001EC4                     l5903:
  9919                           
  9920                           ; BSR set to: 1
  9921                           ;ModbusRtu.c: 1092: }
  9922                           ;ModbusRtu.c: 1093: u8CopyBufferSize = _u8BufferSize + 2;
  9923  001EC4  5072               	movf	__u8BufferSize,w,c
  9924  001EC6  0F02               	addlw	2
  9925  001EC8  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9926                           
  9927                           ; BSR set to: 1
  9928                           ;ModbusRtu.c: 1094: ModbusSendTxBuffer();
  9929  001ECA  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
  9930                           
  9931                           ;ModbusRtu.c: 1096: return u8CopyBufferSize;
  9932  001ECE  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9933  001ED0  0012               	return		;funcret
  9934  001ED2  FFFF               	dw	65535	; errata NOP
  9935  001ED4                     __end_of_ModbusProcess_FC16:
  9936                           	opt stack 0
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodh	equ	0xFF4
  9942                           prodl	equ	0xFF3
  9943                           intcon	equ	0xFF2
  9944                           postinc0	equ	0xFEE
  9945                           wreg	equ	0xFE8
  9946                           indf1	equ	0xFE7
  9947                           postinc1	equ	0xFE6
  9948                           postdec1	equ	0xFE5
  9949                           fsr1h	equ	0xFE2
  9950                           fsr1l	equ	0xFE1
  9951                           indf2	equ	0xFDF
  9952                           postinc2	equ	0xFDE
  9953                           postdec2	equ	0xFDD
  9954                           plusw2	equ	0xFDB
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _ModbusProcess_FC15 *****************
  9960 ;; Defined at:
  9961 ;;		line 1010 in file "ModbusRtu.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  regs            1    wreg     PTR unsigned short 
  9964 ;;		 -> _MODBUSCoils(2), 
  9965 ;; Auto vars:     Size  Location     Type
  9966 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9967 ;;		 -> _MODBUSCoils(2), 
  9968 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9969 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9970 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9971 ;;  u16coil         2   26[COMRAM] unsigned short 
  9972 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9973 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9974 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9975 ;;  bTemp           1   29[COMRAM] unsigned char 
  9976 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      unsigned char 
  9979 ;; Registers used:
  9980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : E/1
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9986 ;;      Params:         0       0       0       0       0       0       0
  9987 ;;      Locals:        14       0       0       0       0       0       0
  9988 ;;      Temps:          5       0       0       0       0       0       0
  9989 ;;      Totals:        19       0       0       0       0       0       0
  9990 ;;Total ram usage:       19 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    4
  9993 ;; This function calls:
  9994 ;;		_ModbusSendTxBuffer
  9995 ;; This function is called by:
  9996 ;;		_ModbusPoll
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text49
 10001  001916                     __ptext49:
 10002                           	opt stack 0
 10003  001916                     _ModbusProcess_FC15:
 10004                           	opt stack 25
 10005                           
 10006                           ;incstack = 0
 10007  001916  FFFF               	dw	65535
 10008                           
 10009                           ;ModbusProcess_FC15@regs stored from wreg
 10010  001918  6E24               	movwf	ModbusProcess_FC15@regs,c
 10011                           
 10012                           ;ModbusRtu.c: 1013: uint8_t u8currentBit, u8frameByte, u8bitsno;
 10013                           ;ModbusRtu.c: 1014: uint8_t u8CopyBufferSize;
 10014                           ;ModbusRtu.c: 1015: uint16_t u16currentCoil, u16coil;
 10015                           ;ModbusRtu.c: 1016: boolean bTemp;
 10016                           ;ModbusRtu.c: 1019: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
 10017  00191A  0101               	movlb	1	; () banked
 10018  00191C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10019  00191E  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
 10020  001920  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10021  001922  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
 10022  001924  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
 10023                           
 10024                           ; BSR set to: 1
 10025                           ;ModbusRtu.c: 1020: _lastAddress = u16StartCoil;
 10026  001928  C020  F0BE         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
 10027  00192C  C021  F0BF         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
 10028                           
 10029                           ;ModbusRtu.c: 1021: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
 10030  001930  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10031  001932  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
 10032  001934  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10033  001936  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
 10034  001938  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
 10035                           
 10036                           ; BSR set to: 1
 10037                           ;ModbusRtu.c: 1022: _lastCount = u16Coilno;
 10038  00193C  C022  F0C0         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
 10039  001940  C023  F0C1         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
 10040                           
 10041                           ; BSR set to: 1
 10042                           ;ModbusRtu.c: 1025: u8bitsno = 0;
 10043  001944  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
 10044                           
 10045                           ;ModbusRtu.c: 1026: u8frameByte = 7;
 10046  001946  0E07               	movlw	7
 10047  001948  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
 10048                           
 10049                           ; BSR set to: 1
 10050                           ;ModbusRtu.c: 1027: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
 10051  00194A  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
 10052  00194C  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
 10053  00194E  D058               	goto	l5865
 10054  001950                     l5845:
 10055                           
 10056                           ;ModbusRtu.c: 1028: {
 10057                           ;ModbusRtu.c: 1030: u16coil = u16StartCoil + u16currentCoil;
 10058  001950  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
 10059  001952  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
 10060  001954  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
 10061  001956  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
 10062  001958  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
 10063  00195A  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
 10064                           
 10065                           ;ModbusRtu.c: 1032: u8currentBit = (uint8_t) u16coil;
 10066  00195C  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
 10067                           
 10068                           ;ModbusRtu.c: 1034: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
 10069  001960  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
 10070  001964  0E00               	movlw	low __au8Buffer
 10071  001966  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
 10072  001968  6ED9               	movwf	fsr2l,c
 10073  00196A  6ADA               	clrf	fsr2h,c
 10074  00196C  0E01               	movlw	high __au8Buffer
 10075  00196E  22DA               	addwfc	fsr2h,f,c
 10076  001970  50DF               	movf	indf2,w,c
 10077  001972  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 10078  001974  2A16               	incf	??_ModbusProcess_FC15,f,c
 10079  001976  D003               	goto	u4954
 10080  001978                     u4955:
 10081  001978  FFFF               	dw	65535	; assembler added errata NOP
 10082  00197A  90D8               	bcf	status,0,c
 10083  00197C  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
 10084  00197E                     u4954:
 10085  00197E  FFFF               	dw	65535	; assembler added errata NOP
 10086  001980  2E16               	decfsz	??_ModbusProcess_FC15,f,c
 10087  001982  D7FA               	goto	u4955
 10088  001984  5017               	movf	??_ModbusProcess_FC15+1,w,c
 10089  001986  0B01               	andlw	1
 10090  001988  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
 10091                           
 10092                           ;ModbusRtu.c: 1038: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
 10093  00198A  501E               	movf	ModbusProcess_FC15@bTemp,w,c
 10094  00198C  E016               	bz	l5855
 10095  00198E  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 10096  001992  0E01               	movlw	1
 10097  001994  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 10098  001996  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
 10099  001998  2A16               	incf	??_ModbusProcess_FC15,f,c
 10100  00199A  D004               	goto	u4974
 10101  00199C                     u4975:
 10102  00199C  FFFF               	dw	65535	; assembler added errata NOP
 10103  00199E  90D8               	bcf	status,0,c
 10104  0019A0  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
 10105  0019A2  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
 10106  0019A4                     u4974:
 10107  0019A4  FFFF               	dw	65535	; assembler added errata NOP
 10108  0019A6  2E16               	decfsz	??_ModbusProcess_FC15,f,c
 10109  0019A8  D7F9               	goto	u4975
 10110  0019AA  5024               	movf	ModbusProcess_FC15@regs,w,c
 10111  0019AC  6ED9               	movwf	fsr2l,c
 10112  0019AE  6ADA               	clrf	fsr2h,c
 10113  0019B0  5017               	movf	??_ModbusProcess_FC15+1,w,c
 10114  0019B2  12DE               	iorwf	postinc2,f,c
 10115  0019B4  5018               	movf	??_ModbusProcess_FC15+2,w,c
 10116  0019B6  12DD               	iorwf	postdec2,f,c
 10117  0019B8  D019               	goto	l5857
 10118  0019BA                     l5855:
 10119  0019BA  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
 10120  0019BE  0E01               	movlw	1
 10121  0019C0  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
 10122  0019C2  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
 10123  0019C4  2A16               	incf	??_ModbusProcess_FC15,f,c
 10124  0019C6  D004               	goto	u4984
 10125  0019C8                     u4985:
 10126  0019C8  FFFF               	dw	65535	; assembler added errata NOP
 10127  0019CA  90D8               	bcf	status,0,c
 10128  0019CC  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
 10129  0019CE  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
 10130  0019D0                     u4984:
 10131  0019D0  FFFF               	dw	65535	; assembler added errata NOP
 10132  0019D2  2E16               	decfsz	??_ModbusProcess_FC15,f,c
 10133  0019D4  D7F9               	goto	u4985
 10134  0019D6  1C17               	comf	??_ModbusProcess_FC15+1,w,c
 10135  0019D8  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
 10136  0019DA  1C18               	comf	??_ModbusProcess_FC15+2,w,c
 10137  0019DC  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
 10138  0019DE  5024               	movf	ModbusProcess_FC15@regs,w,c
 10139  0019E0  6ED9               	movwf	fsr2l,c
 10140  0019E2  6ADA               	clrf	fsr2h,c
 10141  0019E4  5019               	movf	??_ModbusProcess_FC15+3,w,c
 10142  0019E6  16DE               	andwf	postinc2,f,c
 10143  0019E8  501A               	movf	??_ModbusProcess_FC15+4,w,c
 10144  0019EA  16DD               	andwf	postdec2,f,c
 10145  0019EC                     l5857:
 10146  0019EC  FFFF               	dw	65535	; assembler added errata NOP
 10147                           
 10148                           ;ModbusRtu.c: 1043: u8bitsno++;
 10149  0019EE  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
 10150                           
 10151                           ;ModbusRtu.c: 1045: if (u8bitsno > 7)
 10152  0019F0  0E07               	movlw	7
 10153  0019F2  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
 10154  0019F4  D002               	goto	l808
 10155                           
 10156                           ;ModbusRtu.c: 1046: {
 10157                           ;ModbusRtu.c: 1047: u8bitsno = 0;
 10158  0019F6  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
 10159                           
 10160                           ;ModbusRtu.c: 1048: u8frameByte++;
 10161  0019F8  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
 10162  0019FA                     l808:
 10163  0019FA  FFFF               	dw	65535	; assembler added errata NOP
 10164  0019FC  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
 10165  0019FE  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
 10166  001A00                     l5865:
 10167  001A00  FFFF               	dw	65535	; assembler added errata NOP
 10168  001A02  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
 10169  001A04  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
 10170  001A06  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
 10171  001A08  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
 10172  001A0A  E3A2               	bnc	l5845
 10173                           
 10174                           ;ModbusRtu.c: 1049: }
 10175                           ;ModbusRtu.c: 1050: }
 10176                           ;ModbusRtu.c: 1054: _u8BufferSize = 6;
 10177  001A0C  0E06               	movlw	6
 10178  001A0E  6E72               	movwf	__u8BufferSize,c
 10179                           
 10180                           ;ModbusRtu.c: 1055: u8CopyBufferSize = _u8BufferSize + 2;
 10181  001A10  5072               	movf	__u8BufferSize,w,c
 10182  001A12  0F02               	addlw	2
 10183  001A14  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
 10184                           
 10185                           ;ModbusRtu.c: 1056: ModbusSendTxBuffer();
 10186  001A16  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
 10187                           
 10188                           ;ModbusRtu.c: 1057: return u8CopyBufferSize;
 10189  001A1A  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
 10190  001A1C  0012               	return		;funcret
 10191  001A1E  FFFF               	dw	65535	; errata NOP
 10192  001A20                     __end_of_ModbusProcess_FC15:
 10193                           	opt stack 0
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           postinc0	equ	0xFEE
 10202                           wreg	equ	0xFE8
 10203                           indf1	equ	0xFE7
 10204                           postinc1	equ	0xFE6
 10205                           postdec1	equ	0xFE5
 10206                           fsr1h	equ	0xFE2
 10207                           fsr1l	equ	0xFE1
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           postdec2	equ	0xFDD
 10211                           plusw2	equ	0xFDB
 10212                           fsr2h	equ	0xFDA
 10213                           fsr2l	equ	0xFD9
 10214                           status	equ	0xFD8
 10215                           
 10216 ;; *************** function _ModbusProcess_FC1 *****************
 10217 ;; Defined at:
 10218 ;;		line 849 in file "ModbusRtu.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  regs            2   21[COMRAM] unsigned short 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 10223 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 10224 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 10225 ;;  u16coil         2   26[COMRAM] unsigned short 
 10226 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 10227 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 10228 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 10229 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      unsigned char 
 10232 ;; Registers used:
 10233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : E/1
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10239 ;;      Params:         2       0       0       0       0       0       0
 10240 ;;      Locals:        12       0       0       0       0       0       0
 10241 ;;      Temps:          3       0       0       0       0       0       0
 10242 ;;      Totals:        17       0       0       0       0       0       0
 10243 ;;Total ram usage:       17 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    4
 10246 ;; This function calls:
 10247 ;;		_ModbusSendTxBuffer
 10248 ;; This function is called by:
 10249 ;;		_ModbusPoll
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           	psect	text50
 10254  0016DC                     __ptext50:
 10255                           	opt stack 0
 10256  0016DC                     _ModbusProcess_FC1:
 10257                           	opt stack 25
 10258                           
 10259                           ;incstack = 0
 10260  0016DC  FFFF               	dw	65535
 10261                           
 10262                           ;ModbusRtu.c: 852: uint8_t u8currentBit, u8bytesno, u8bitsno;
 10263                           ;ModbusRtu.c: 853: uint8_t u8CopyBufferSize;
 10264                           ;ModbusRtu.c: 854: uint16_t u16currentCoil, u16coil;
 10265                           ;ModbusRtu.c: 857: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 10266  0016DE  0101               	movlb	1	; () banked
 10267  0016E0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10268  0016E2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10269  0016E4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10270  0016E6  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 10271  0016E8  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 10272                           
 10273                           ; BSR set to: 1
 10274                           ;ModbusRtu.c: 858: _lastAddress = u16StartCoil;
 10275  0016EC  C020  F0BE         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 10276  0016F0  C021  F0BF         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 10277                           
 10278                           ;ModbusRtu.c: 859: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 10279  0016F4  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10280  0016F6  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10281  0016F8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10282  0016FA  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 10283  0016FC  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 10284                           
 10285                           ; BSR set to: 1
 10286                           ;ModbusRtu.c: 860: _lastCount = u16Coilno;
 10287  001700  C025  F0C0         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 10288  001704  C026  F0C1         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 10289                           
 10290                           ; BSR set to: 1
 10291                           ;ModbusRtu.c: 862: u8bytesno = (uint8_t) (u16Coilno / 8);
 10292  001708  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10293  00170C  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 10294  001710  90D8               	bcf	status,0,c
 10295  001712  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10296  001714  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10297  001716  90D8               	bcf	status,0,c
 10298  001718  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10299  00171A  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10300  00171C  90D8               	bcf	status,0,c
 10301  00171E  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10302  001720  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10303  001722  5018               	movf	??_ModbusProcess_FC1,w,c
 10304  001724  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 10305                           
 10306                           ; BSR set to: 1
 10307                           ;ModbusRtu.c: 863: if (u16Coilno % 8 != 0)
 10308  001726  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10309  00172A  0E07               	movlw	7
 10310  00172C  1618               	andwf	??_ModbusProcess_FC1,f,c
 10311  00172E  E001               	bz	l5717
 10312                           
 10313                           ; BSR set to: 1
 10314                           ;ModbusRtu.c: 864: u8bytesno++;
 10315  001730  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 10316  001732                     l5717:
 10317                           
 10318                           ; BSR set to: 1
 10319                           ;ModbusRtu.c: 865: _au8Buffer[ ADD_HI ] = u8bytesno;
 10320  001732  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 10321                           
 10322                           ; BSR set to: 1
 10323                           ;ModbusRtu.c: 866: _u8BufferSize = ADD_LO;
 10324  001736  0E03               	movlw	3
 10325  001738  6E72               	movwf	__u8BufferSize,c
 10326                           
 10327                           ; BSR set to: 1
 10328                           ;ModbusRtu.c: 869: u8bitsno = 0;
 10329  00173A  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10330                           
 10331                           ; BSR set to: 1
 10332                           ;ModbusRtu.c: 871: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 10333  00173C  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 10334  00173E  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 10335  001740  D04F               	goto	l5743
 10336  001742                     l5725:
 10337                           
 10338                           ;ModbusRtu.c: 872: {
 10339                           ;ModbusRtu.c: 873: u16coil = u16StartCoil + u16currentCoil;
 10340  001742  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 10341  001744  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 10342  001746  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 10343  001748  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 10344  00174A  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 10345  00174C  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 10346                           
 10347                           ;ModbusRtu.c: 875: u8currentBit = (uint8_t) u16coil;
 10348  00174E  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 10349                           
 10350                           ;ModbusRtu.c: 877: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 10351  001752  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 10352  001756  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 10353  00175A  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 10354  00175E  2A18               	incf	??_ModbusProcess_FC1,f,c
 10355  001760  D004               	goto	u4844
 10356  001762                     u4845:
 10357  001762  FFFF               	dw	65535	; assembler added errata NOP
 10358  001764  90D8               	bcf	status,0,c
 10359  001766  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 10360  001768  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10361  00176A                     u4844:
 10362  00176A  FFFF               	dw	65535	; assembler added errata NOP
 10363  00176C  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10364  00176E  D7F9               	goto	u4845
 10365  001770  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 10366  001772  D015               	goto	l5733
 10367  001774  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10368  001778  0E01               	movlw	1
 10369  00177A  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10370  00177C  2A18               	incf	??_ModbusProcess_FC1,f,c
 10371  00177E  D003               	goto	u4864
 10372  001780                     u4865:
 10373  001780  FFFF               	dw	65535	; assembler added errata NOP
 10374  001782  90D8               	bcf	status,0,c
 10375  001784  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10376  001786                     u4864:
 10377  001786  FFFF               	dw	65535	; assembler added errata NOP
 10378  001788  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10379  00178A  D7FA               	goto	u4865
 10380  00178C  0E00               	movlw	low __au8Buffer
 10381  00178E  2472               	addwf	__u8BufferSize,w,c
 10382  001790  6ED9               	movwf	fsr2l,c
 10383  001792  6ADA               	clrf	fsr2h,c
 10384  001794  0E01               	movlw	high __au8Buffer
 10385  001796  22DA               	addwfc	fsr2h,f,c
 10386  001798  5019               	movf	??_ModbusProcess_FC1+1,w,c
 10387  00179A  12DF               	iorwf	indf2,f,c
 10388  00179C  D017               	goto	l5735
 10389  00179E                     l5733:
 10390  00179E  FFFF               	dw	65535	; assembler added errata NOP
 10391  0017A0  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10392  0017A4  0E01               	movlw	1
 10393  0017A6  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10394  0017A8  2A18               	incf	??_ModbusProcess_FC1,f,c
 10395  0017AA  D003               	goto	u4874
 10396  0017AC                     u4875:
 10397  0017AC  FFFF               	dw	65535	; assembler added errata NOP
 10398  0017AE  90D8               	bcf	status,0,c
 10399  0017B0  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10400  0017B2                     u4874:
 10401  0017B2  FFFF               	dw	65535	; assembler added errata NOP
 10402  0017B4  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10403  0017B6  D7FA               	goto	u4875
 10404  0017B8  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 10405  0017BA  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 10406  0017BC  0E00               	movlw	low __au8Buffer
 10407  0017BE  2472               	addwf	__u8BufferSize,w,c
 10408  0017C0  6ED9               	movwf	fsr2l,c
 10409  0017C2  6ADA               	clrf	fsr2h,c
 10410  0017C4  0E01               	movlw	high __au8Buffer
 10411  0017C6  22DA               	addwfc	fsr2h,f,c
 10412  0017C8  501A               	movf	??_ModbusProcess_FC1+2,w,c
 10413  0017CA  16DF               	andwf	indf2,f,c
 10414  0017CC                     l5735:
 10415  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 10416                           
 10417                           ;ModbusRtu.c: 881: u8bitsno++;
 10418  0017CE  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 10419                           
 10420                           ;ModbusRtu.c: 883: if (u8bitsno > 7)
 10421  0017D0  0E07               	movlw	7
 10422  0017D2  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 10423  0017D4  D002               	goto	l777
 10424                           
 10425                           ;ModbusRtu.c: 884: {
 10426                           ;ModbusRtu.c: 885: u8bitsno = 0;
 10427  0017D6  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10428                           
 10429                           ;ModbusRtu.c: 886: _u8BufferSize++;
 10430  0017D8  2A72               	incf	__u8BufferSize,f,c
 10431  0017DA                     l777:
 10432  0017DA  FFFF               	dw	65535	; assembler added errata NOP
 10433  0017DC  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 10434  0017DE  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 10435  0017E0                     l5743:
 10436  0017E0  FFFF               	dw	65535	; assembler added errata NOP
 10437  0017E2  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 10438  0017E4  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 10439  0017E6  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 10440  0017E8  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 10441  0017EA  E3AB               	bnc	l5725
 10442                           
 10443                           ;ModbusRtu.c: 887: }
 10444                           ;ModbusRtu.c: 888: }
 10445                           ;ModbusRtu.c: 891: if (u16Coilno % 8 != 0)
 10446  0017EC  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10447  0017F0  0E07               	movlw	7
 10448  0017F2  1618               	andwf	??_ModbusProcess_FC1,f,c
 10449  0017F4  E001               	bz	l5749
 10450                           
 10451                           ;ModbusRtu.c: 892: _u8BufferSize++;
 10452  0017F6  2A72               	incf	__u8BufferSize,f,c
 10453  0017F8                     l5749:
 10454                           
 10455                           ;ModbusRtu.c: 893: u8CopyBufferSize = _u8BufferSize + 2;
 10456  0017F8  5072               	movf	__u8BufferSize,w,c
 10457  0017FA  0F02               	addlw	2
 10458  0017FC  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 10459                           
 10460                           ;ModbusRtu.c: 894: ModbusSendTxBuffer();
 10461  0017FE  EC42  F014         	call	_ModbusSendTxBuffer	;wreg free
 10462                           
 10463                           ;ModbusRtu.c: 895: return u8CopyBufferSize;
 10464  001802  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 10465  001804  0012               	return		;funcret
 10466  001806  FFFF               	dw	65535	; errata NOP
 10467  001808                     __end_of_ModbusProcess_FC1:
 10468                           	opt stack 0
 10469                           tblptru	equ	0xFF8
 10470                           tblptrh	equ	0xFF7
 10471                           tblptrl	equ	0xFF6
 10472                           tablat	equ	0xFF5
 10473                           prodh	equ	0xFF4
 10474                           prodl	equ	0xFF3
 10475                           intcon	equ	0xFF2
 10476                           postinc0	equ	0xFEE
 10477                           wreg	equ	0xFE8
 10478                           indf1	equ	0xFE7
 10479                           postinc1	equ	0xFE6
 10480                           postdec1	equ	0xFE5
 10481                           fsr1h	equ	0xFE2
 10482                           fsr1l	equ	0xFE1
 10483                           indf2	equ	0xFDF
 10484                           postinc2	equ	0xFDE
 10485                           postdec2	equ	0xFDD
 10486                           plusw2	equ	0xFDB
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function _ModbusSendTxBuffer *****************
 10492 ;; Defined at:
 10493 ;;		line 570 in file "ModbusRtu.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;  u16crc          2   19[COMRAM] unsigned short 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  1    wreg      void 
 10500 ;; Registers used:
 10501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/1
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10507 ;;      Params:         0       0       0       0       0       0       0
 10508 ;;      Locals:         2       0       0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0
 10510 ;;      Totals:         2       0       0       0       0       0       0
 10511 ;;Total ram usage:        2 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    3
 10514 ;; This function calls:
 10515 ;;		_ModbusCalcCRC
 10516 ;;		_PortWrite
 10517 ;;		_millis
 10518 ;; This function is called by:
 10519 ;;		_ModbusPoll
 10520 ;;		_ModbusProcess_FC1
 10521 ;;		_ModbusProcess_FC3
 10522 ;;		_ModbusProcess_FC5
 10523 ;;		_ModbusProcess_FC6
 10524 ;;		_ModbusProcess_FC7
 10525 ;;		_ModbusProcess_FC15
 10526 ;;		_ModbusProcess_FC16
 10527 ;;		_ModbusProcess_FC17
 10528 ;;		_ModbusProcess_FC21
 10529 ;;		_ModbusProcess_FC43
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text51
 10534  002884                     __ptext51:
 10535                           	opt stack 0
 10536  002884                     _ModbusSendTxBuffer:
 10537                           	opt stack 26
 10538                           
 10539                           ;incstack = 0
 10540  002884  FFFF               	dw	65535
 10541                           
 10542                           ;ModbusRtu.c: 575: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10543  002886  5072               	movf	__u8BufferSize,w,c
 10544  002888  EC67  F012         	call	_ModbusCalcCRC
 10545  00288C  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10546  002890  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10547                           
 10548                           ;ModbusRtu.c: 576: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10549  002894  0E00               	movlw	low __au8Buffer
 10550  002896  2472               	addwf	__u8BufferSize,w,c
 10551  002898  6ED9               	movwf	fsr2l,c
 10552  00289A  6ADA               	clrf	fsr2h,c
 10553  00289C  0E01               	movlw	high __au8Buffer
 10554  00289E  22DA               	addwfc	fsr2h,f,c
 10555  0028A0  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10556                           
 10557                           ;ModbusRtu.c: 577: _u8BufferSize++;
 10558  0028A4  2A72               	incf	__u8BufferSize,f,c
 10559                           
 10560                           ;ModbusRtu.c: 578: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10561  0028A6  0E00               	movlw	low __au8Buffer
 10562  0028A8  2472               	addwf	__u8BufferSize,w,c
 10563  0028AA  6ED9               	movwf	fsr2l,c
 10564  0028AC  6ADA               	clrf	fsr2h,c
 10565  0028AE  0E01               	movlw	high __au8Buffer
 10566  0028B0  22DA               	addwfc	fsr2h,f,c
 10567  0028B2  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10568                           
 10569                           ;ModbusRtu.c: 579: _u8BufferSize++;
 10570  0028B6  2A72               	incf	__u8BufferSize,f,c
 10571                           
 10572                           ;ModbusRtu.c: 583: PortWrite(_au8Buffer, _u8BufferSize);
 10573  0028B8  0E00               	movlw	low __au8Buffer
 10574  0028BA  6E07               	movwf	PortWrite@buf,c
 10575  0028BC  0E01               	movlw	high __au8Buffer
 10576  0028BE  6E08               	movwf	PortWrite@buf+1,c
 10577  0028C0  C072  F009         	movff	__u8BufferSize,PortWrite@buflen
 10578  0028C4  EC35  F015         	call	_PortWrite	;wreg free
 10579                           
 10580                           ;ModbusRtu.c: 589: _u8BufferSize = 0;
 10581  0028C8  6A72               	clrf	__u8BufferSize,c
 10582                           
 10583                           ;ModbusRtu.c: 595: _u16OutCnt++;
 10584  0028CA  EF02  F016         	goto	_millis	;wreg free
 10585  0028CE  FFFF               	dw	65535	; errata NOP
 10586  0028D0                     __end_of_ModbusSendTxBuffer:
 10587                           	opt stack 0
 10588                           tblptru	equ	0xFF8
 10589                           tblptrh	equ	0xFF7
 10590                           tblptrl	equ	0xFF6
 10591                           tablat	equ	0xFF5
 10592                           prodh	equ	0xFF4
 10593                           prodl	equ	0xFF3
 10594                           intcon	equ	0xFF2
 10595                           postinc0	equ	0xFEE
 10596                           wreg	equ	0xFE8
 10597                           indf1	equ	0xFE7
 10598                           postinc1	equ	0xFE6
 10599                           postdec1	equ	0xFE5
 10600                           fsr1h	equ	0xFE2
 10601                           fsr1l	equ	0xFE1
 10602                           indf2	equ	0xFDF
 10603                           postinc2	equ	0xFDE
 10604                           postdec2	equ	0xFDD
 10605                           plusw2	equ	0xFDB
 10606                           fsr2h	equ	0xFDA
 10607                           fsr2l	equ	0xFD9
 10608                           status	equ	0xFD8
 10609                           
 10610 ;; *************** function _millis *****************
 10611 ;; Defined at:
 10612 ;;		line 247 in file "interrupts.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;  ret             4   10[COMRAM] unsigned long 
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  4    6[COMRAM] unsigned long 
 10619 ;; Registers used:
 10620 ;;		None
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/1
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10626 ;;      Params:         4       0       0       0       0       0       0
 10627 ;;      Locals:         4       0       0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0
 10629 ;;      Totals:         8       0       0       0       0       0       0
 10630 ;;Total ram usage:        8 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    2
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		_SoundPlayNextStep
 10637 ;;		_main
 10638 ;;		_ModbusPoll
 10639 ;;		_ModbusSendTxBuffer
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           	psect	text52
 10644  002C04                     __ptext52:
 10645                           	opt stack 0
 10646  002C04                     _millis:
 10647                           	opt stack 28
 10648                           
 10649                           ;incstack = 0
 10650  002C04  FFFF               	dw	65535
 10651                           
 10652                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 10653  002C06  9EF2               	bcf	intcon,7,c	;volatile
 10654                           
 10655                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 10656  002C08  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 10657  002C0C  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 10658  002C10  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 10659  002C14  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 10660                           
 10661                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 10662  002C18  8EF2               	bsf	intcon,7,c	;volatile
 10663                           
 10664                           ;interrupts.c: 253: return ret;
 10665  002C1A  C00B  F007         	movff	millis@ret,?_millis
 10666  002C1E  C00C  F008         	movff	millis@ret+1,?_millis+1
 10667  002C22  C00D  F009         	movff	millis@ret+2,?_millis+2
 10668  002C26  C00E  F00A         	movff	millis@ret+3,?_millis+3
 10669  002C2A  0012               	return		;funcret
 10670  002C2C  FFFF               	dw	65535	; errata NOP
 10671  002C2E                     __end_of_millis:
 10672                           	opt stack 0
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           intcon	equ	0xFF2
 10680                           postinc0	equ	0xFEE
 10681                           wreg	equ	0xFE8
 10682                           indf1	equ	0xFE7
 10683                           postinc1	equ	0xFE6
 10684                           postdec1	equ	0xFE5
 10685                           fsr1h	equ	0xFE2
 10686                           fsr1l	equ	0xFE1
 10687                           indf2	equ	0xFDF
 10688                           postinc2	equ	0xFDE
 10689                           postdec2	equ	0xFDD
 10690                           plusw2	equ	0xFDB
 10691                           fsr2h	equ	0xFDA
 10692                           fsr2l	equ	0xFD9
 10693                           status	equ	0xFD8
 10694                           
 10695 ;; *************** function _PortWrite *****************
 10696 ;; Defined at:
 10697 ;;		line 101 in file "interrupts.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  buf             2    6[COMRAM] PTR unsigned char 
 10700 ;;		 -> _au8Buffer(140), 
 10701 ;;  buflen          1    8[COMRAM] unsigned char 
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;  i               1    9[COMRAM] unsigned char 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  1    wreg      void 
 10706 ;; Registers used:
 10707 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/1
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10713 ;;      Params:         3       0       0       0       0       0       0
 10714 ;;      Locals:         1       0       0       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0
 10716 ;;      Totals:         4       0       0       0       0       0       0
 10717 ;;Total ram usage:        4 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    2
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_ModbusSendTxBuffer
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           	psect	text53
 10728  002A6A                     __ptext53:
 10729                           	opt stack 0
 10730  002A6A                     _PortWrite:
 10731                           	opt stack 26
 10732                           
 10733                           ;incstack = 0
 10734  002A6A  FFFF               	dw	65535
 10735                           
 10736                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 10737  002A6C  8A8B               	bsf	3979,5,c	;volatile
 10738                           
 10739                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 10740  002A6E  0E06               	movlw	6
 10741  002A70                     u5397:
 10742  002A70  FFFF               	dw	65535	; errata NOP
 10743  002A72  2EE8               	decfsz	wreg,f,c
 10744  002A74  D7FD               	goto	u5397
 10745  002A76  F000               	nop	
 10746                           
 10747                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 10748  002A78  6A0A               	clrf	PortWrite@i,c
 10749  002A7A  D00C               	goto	l3493
 10750  002A7C                     l74:
 10751  002A7C  FFFF               	dw	65535	; assembler added errata NOP
 10752  002A7E  A2AC               	btfss	4012,1,c	;volatile
 10753  002A80  D7FD               	goto	l74
 10754                           
 10755                           ;interrupts.c: 108: TXREG = buf[i];
 10756  002A82  500A               	movf	PortWrite@i,w,c
 10757  002A84  2407               	addwf	PortWrite@buf,w,c
 10758  002A86  6ED9               	movwf	fsr2l,c
 10759  002A88  0E00               	movlw	0
 10760  002A8A  2008               	addwfc	PortWrite@buf+1,w,c
 10761  002A8C  6EDA               	movwf	fsr2h,c
 10762  002A8E  50DF               	movf	indf2,w,c
 10763  002A90  6EAD               	movwf	4013,c	;volatile
 10764  002A92  2A0A               	incf	PortWrite@i,f,c
 10765  002A94                     l3493:
 10766  002A94  FFFF               	dw	65535	; assembler added errata NOP
 10767  002A96  5009               	movf	PortWrite@buflen,w,c
 10768  002A98  5C0A               	subwf	PortWrite@i,w,c
 10769  002A9A  E3F0               	bnc	l74
 10770  002A9C                     l78:
 10771  002A9C  FFFF               	dw	65535	; assembler added errata NOP
 10772  002A9E  A2AC               	btfss	4012,1,c	;volatile
 10773  002AA0  D7FD               	goto	l78
 10774                           
 10775                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 10776  002AA2  9A8B               	bcf	3979,5,c	;volatile
 10777  002AA4  0012               	return		;funcret
 10778  002AA6  FFFF               	dw	65535	; errata NOP
 10779  002AA8                     __end_of_PortWrite:
 10780                           	opt stack 0
 10781                           tblptru	equ	0xFF8
 10782                           tblptrh	equ	0xFF7
 10783                           tblptrl	equ	0xFF6
 10784                           tablat	equ	0xFF5
 10785                           prodh	equ	0xFF4
 10786                           prodl	equ	0xFF3
 10787                           intcon	equ	0xFF2
 10788                           postinc0	equ	0xFEE
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           postinc1	equ	0xFE6
 10792                           postdec1	equ	0xFE5
 10793                           fsr1h	equ	0xFE2
 10794                           fsr1l	equ	0xFE1
 10795                           indf2	equ	0xFDF
 10796                           postinc2	equ	0xFDE
 10797                           postdec2	equ	0xFDD
 10798                           plusw2	equ	0xFDB
 10799                           fsr2h	equ	0xFDA
 10800                           fsr2l	equ	0xFD9
 10801                           status	equ	0xFD8
 10802                           
 10803 ;; *************** function _ModbusCalcCRC *****************
 10804 ;; Defined at:
 10805 ;;		line 680 in file "ModbusRtu.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;  u8length        1    wreg     unsigned char 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;  u8length        1   14[COMRAM] unsigned char 
 10810 ;;  j               1   16[COMRAM] unsigned char 
 10811 ;;  i               1   15[COMRAM] unsigned char 
 10812 ;;  temp            2   17[COMRAM] unsigned int 
 10813 ;;  flag            2   12[COMRAM] unsigned int 
 10814 ;;  temp2           2   10[COMRAM] unsigned int 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  2    6[COMRAM] unsigned short 
 10817 ;; Registers used:
 10818 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10824 ;;      Params:         2       0       0       0       0       0       0
 10825 ;;      Locals:         9       0       0       0       0       0       0
 10826 ;;      Temps:          2       0       0       0       0       0       0
 10827 ;;      Totals:        13       0       0       0       0       0       0
 10828 ;;Total ram usage:       13 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:    2
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_ModbusSendTxBuffer
 10835 ;;		_ModbusValidateRequest
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839                           	psect	text54
 10840  0024CE                     __ptext54:
 10841                           	opt stack 0
 10842  0024CE                     _ModbusCalcCRC:
 10843                           	opt stack 26
 10844                           
 10845                           ;incstack = 0
 10846  0024CE  FFFF               	dw	65535
 10847                           
 10848                           ;ModbusCalcCRC@u8length stored from wreg
 10849  0024D0  6E0F               	movwf	ModbusCalcCRC@u8length,c
 10850                           
 10851                           ;ModbusRtu.c: 682: unsigned int temp, temp2, flag;
 10852                           ;ModbusRtu.c: 683: temp = 0xFFFF;
 10853  0024D2  6812               	setf	ModbusCalcCRC@temp,c
 10854  0024D4  6813               	setf	ModbusCalcCRC@temp+1,c
 10855                           
 10856                           ;ModbusRtu.c: 684: for (uint8_t i = 0; i < u8length; i++)
 10857  0024D6  6A10               	clrf	ModbusCalcCRC@i,c
 10858  0024D8  D01E               	goto	l3687
 10859  0024DA                     l3665:
 10860                           
 10861                           ;ModbusRtu.c: 685: {
 10862                           ;ModbusRtu.c: 686: temp = temp ^ _au8Buffer[i];
 10863  0024DA  0E00               	movlw	low __au8Buffer
 10864  0024DC  2410               	addwf	ModbusCalcCRC@i,w,c
 10865  0024DE  6ED9               	movwf	fsr2l,c
 10866  0024E0  6ADA               	clrf	fsr2h,c
 10867  0024E2  0E01               	movlw	high __au8Buffer
 10868  0024E4  22DA               	addwfc	fsr2h,f,c
 10869  0024E6  50DF               	movf	indf2,w,c
 10870  0024E8  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10871                           
 10872                           ;ModbusRtu.c: 687: for (uint8_t j = 1; j <= 8; j++)
 10873  0024EA  0E01               	movlw	1
 10874  0024EC  6E11               	movwf	ModbusCalcCRC@j,c
 10875  0024EE                     l3673:
 10876  0024EE  FFFF               	dw	65535	; assembler added errata NOP
 10877                           
 10878                           ;ModbusRtu.c: 688: {
 10879                           ;ModbusRtu.c: 689: flag = temp & 0x0001;
 10880  0024F0  0E01               	movlw	1
 10881  0024F2  1412               	andwf	ModbusCalcCRC@temp,w,c
 10882  0024F4  6E0D               	movwf	ModbusCalcCRC@flag,c
 10883  0024F6  6A0E               	clrf	ModbusCalcCRC@flag+1,c
 10884                           
 10885                           ;ModbusRtu.c: 690: temp >>= 1;
 10886  0024F8  90D8               	bcf	status,0,c
 10887  0024FA  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 10888  0024FC  3212               	rrcf	ModbusCalcCRC@temp,f,c
 10889                           
 10890                           ;ModbusRtu.c: 691: if (flag)
 10891  0024FE  500D               	movf	ModbusCalcCRC@flag,w,c
 10892  002500  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
 10893  002502  E004               	bz	l3681
 10894                           
 10895                           ;ModbusRtu.c: 692: temp ^= 0xA001;
 10896  002504  0E01               	movlw	1
 10897  002506  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 10898  002508  0EA0               	movlw	160
 10899  00250A  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 10900  00250C                     l3681:
 10901  00250C  2A11               	incf	ModbusCalcCRC@j,f,c
 10902  00250E  0E08               	movlw	8
 10903  002510  6411               	cpfsgt	ModbusCalcCRC@j,c
 10904  002512  D7ED               	goto	l3673
 10905  002514  2A10               	incf	ModbusCalcCRC@i,f,c
 10906  002516                     l3687:
 10907  002516  FFFF               	dw	65535	; assembler added errata NOP
 10908  002518  500F               	movf	ModbusCalcCRC@u8length,w,c
 10909  00251A  5C10               	subwf	ModbusCalcCRC@i,w,c
 10910  00251C  E3DE               	bnc	l3665
 10911                           
 10912                           ;ModbusRtu.c: 693: }
 10913                           ;ModbusRtu.c: 694: }
 10914                           ;ModbusRtu.c: 696: temp2 = temp >> 8;
 10915  00251E  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 10916  002522  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
 10917                           
 10918                           ;ModbusRtu.c: 697: temp = (temp << 8) | temp2;
 10919  002524  5012               	movf	ModbusCalcCRC@temp,w,c
 10920  002526  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 10921  002528  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 10922  00252A  500B               	movf	ModbusCalcCRC@temp2,w,c
 10923  00252C  1009               	iorwf	??_ModbusCalcCRC,w,c
 10924  00252E  6E12               	movwf	ModbusCalcCRC@temp,c
 10925  002530  500C               	movf	ModbusCalcCRC@temp2+1,w,c
 10926  002532  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 10927  002534  6E13               	movwf	ModbusCalcCRC@temp+1,c
 10928                           
 10929                           ;ModbusRtu.c: 701: return temp;
 10930  002536  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 10931  00253A  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 10932  00253E  0012               	return		;funcret
 10933  002540  FFFF               	dw	65535	; errata NOP
 10934  002542                     __end_of_ModbusCalcCRC:
 10935                           	opt stack 0
 10936                           tblptru	equ	0xFF8
 10937                           tblptrh	equ	0xFF7
 10938                           tblptrl	equ	0xFF6
 10939                           tablat	equ	0xFF5
 10940                           prodh	equ	0xFF4
 10941                           prodl	equ	0xFF3
 10942                           intcon	equ	0xFF2
 10943                           postinc0	equ	0xFEE
 10944                           wreg	equ	0xFE8
 10945                           indf1	equ	0xFE7
 10946                           postinc1	equ	0xFE6
 10947                           postdec1	equ	0xFE5
 10948                           fsr1h	equ	0xFE2
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           plusw2	equ	0xFDB
 10954                           fsr2h	equ	0xFDA
 10955                           fsr2l	equ	0xFD9
 10956                           status	equ	0xFD8
 10957                           
 10958 ;; *************** function _ModbusGetRxBufferHeader *****************
 10959 ;; Defined at:
 10960 ;;		line 513 in file "ModbusRtu.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;		None
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;  i               1    8[COMRAM] unsigned char 
 10965 ;; Return value:  Size  Location     Type
 10966 ;;                  1    wreg      unsigned char 
 10967 ;; Registers used:
 10968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : F/0
 10971 ;;		On exit  : F/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10974 ;;      Params:         0       0       0       0       0       0       0
 10975 ;;      Locals:         1       0       0       0       0       0       0
 10976 ;;      Temps:          1       0       0       0       0       0       0
 10977 ;;      Totals:         2       0       0       0       0       0       0
 10978 ;;Total ram usage:        2 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    3
 10981 ;; This function calls:
 10982 ;;		_PortAvailable
 10983 ;;		_PortRead
 10984 ;; This function is called by:
 10985 ;;		_ModbusPoll
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text55
 10990  002AA8                     __ptext55:
 10991                           	opt stack 0
 10992  002AA8                     _ModbusGetRxBufferHeader:
 10993                           	opt stack 26
 10994                           
 10995                           ;incstack = 0
 10996  002AA8  FFFF               	dw	65535
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;ModbusRtu.c: 515: _u8BufferSize = 0;
 11000  002AAA  6A72               	clrf	__u8BufferSize,c
 11001                           
 11002                           ;ModbusRtu.c: 516: for(uint8_t i = 0; i < 4; i++)
 11003  002AAC  6A09               	clrf	ModbusGetRxBufferHeader@i,c
 11004  002AAE                     l4005:
 11005  002AAE  FFFF               	dw	65535	; assembler added errata NOP
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;ModbusRtu.c: 517: {
 11009                           ;ModbusRtu.c: 518: if(!PortAvailable())
 11010  002AB0  ECB6  F016         	call	_PortAvailable	;wreg free
 11011  002AB4  0900               	iorlw	0
 11012  002AB6  E102               	bnz	l4011
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;ModbusRtu.c: 519: return ERR_EXCEPTION;
 11016  002AB8  0EFB               	movlw	251
 11017  002ABA  D011               	goto	l701
 11018  002ABC                     l4011:
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
 11022  002ABC  EC72  F015         	call	_PortRead	;wreg free
 11023  002AC0  6E08               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 11024  002AC2  0E00               	movlw	low __au8Buffer
 11025  002AC4  2472               	addwf	__u8BufferSize,w,c
 11026  002AC6  6ED9               	movwf	fsr2l,c
 11027  002AC8  6ADA               	clrf	fsr2h,c
 11028  002ACA  0E01               	movlw	high __au8Buffer
 11029  002ACC  22DA               	addwfc	fsr2h,f,c
 11030  002ACE  C008  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;ModbusRtu.c: 521: _u8BufferSize++;
 11034  002AD2  2A72               	incf	__u8BufferSize,f,c
 11035                           
 11036                           ; BSR set to: 0
 11037  002AD4  2A09               	incf	ModbusGetRxBufferHeader@i,f,c
 11038                           
 11039                           ; BSR set to: 0
 11040  002AD6  0E03               	movlw	3
 11041  002AD8  6409               	cpfsgt	ModbusGetRxBufferHeader@i,c
 11042  002ADA  D7E9               	goto	l4005
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;ModbusRtu.c: 522: }
 11046                           ;ModbusRtu.c: 523: return _u8BufferSize;
 11047  002ADC  5072               	movf	__u8BufferSize,w,c
 11048  002ADE                     l701:
 11049  002ADE  FFFF               	dw	65535	; assembler added errata NOP
 11050                           
 11051                           ; BSR set to: 0
 11052  002AE0  0012               	return		;funcret
 11053  002AE2  FFFF               	dw	65535	; errata NOP
 11054  002AE4                     __end_of_ModbusGetRxBufferHeader:
 11055                           	opt stack 0
 11056                           tblptru	equ	0xFF8
 11057                           tblptrh	equ	0xFF7
 11058                           tblptrl	equ	0xFF6
 11059                           tablat	equ	0xFF5
 11060                           prodh	equ	0xFF4
 11061                           prodl	equ	0xFF3
 11062                           intcon	equ	0xFF2
 11063                           postinc0	equ	0xFEE
 11064                           wreg	equ	0xFE8
 11065                           indf1	equ	0xFE7
 11066                           postinc1	equ	0xFE6
 11067                           postdec1	equ	0xFE5
 11068                           fsr1h	equ	0xFE2
 11069                           fsr1l	equ	0xFE1
 11070                           indf2	equ	0xFDF
 11071                           postinc2	equ	0xFDE
 11072                           postdec2	equ	0xFDD
 11073                           plusw2	equ	0xFDB
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function _ModbusGetRxBuffer *****************
 11079 ;; Defined at:
 11080 ;;		line 533 in file "ModbusRtu.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      unsigned char 
 11087 ;; Registers used:
 11088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : F/1
 11091 ;;		On exit  : F/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11094 ;;      Params:         0       0       0       0       0       0       0
 11095 ;;      Locals:         1       0       0       0       0       0       0
 11096 ;;      Temps:          1       0       0       0       0       0       0
 11097 ;;      Totals:         2       0       0       0       0       0       0
 11098 ;;Total ram usage:        2 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    3
 11101 ;; This function calls:
 11102 ;;		_PortAvailable
 11103 ;;		_PortRead
 11104 ;; This function is called by:
 11105 ;;		_ModbusPoll
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           	psect	text56
 11110  0029A4                     __ptext56:
 11111                           	opt stack 0
 11112  0029A4                     _ModbusGetRxBuffer:
 11113                           	opt stack 26
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;incstack = 0
 11117  0029A4  FFFF               	dw	65535
 11118                           
 11119                           ; BSR set to: 1
 11120                           ;ModbusRtu.c: 535: bool bBuffOverflow = 0;
 11121  0029A6  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 11122                           
 11123                           ; BSR set to: 1
 11124                           ;ModbusRtu.c: 540: _u8BufferSize = 4;
 11125  0029A8  0E04               	movlw	4
 11126  0029AA  6E72               	movwf	__u8BufferSize,c
 11127                           
 11128                           ;ModbusRtu.c: 542: while (PortAvailable())
 11129  0029AC  D011               	goto	l4035
 11130  0029AE                     l4027:
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;ModbusRtu.c: 543: {
 11134                           ;ModbusRtu.c: 544: _au8Buffer[ _u8BufferSize ] = PortRead();
 11135  0029AE  EC72  F015         	call	_PortRead	;wreg free
 11136  0029B2  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 11137  0029B4  0E00               	movlw	low __au8Buffer
 11138  0029B6  2472               	addwf	__u8BufferSize,w,c
 11139  0029B8  6ED9               	movwf	fsr2l,c
 11140  0029BA  6ADA               	clrf	fsr2h,c
 11141  0029BC  0E01               	movlw	high __au8Buffer
 11142  0029BE  22DA               	addwfc	fsr2h,f,c
 11143  0029C0  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;ModbusRtu.c: 545: _u8BufferSize++;
 11147  0029C4  2A72               	incf	__u8BufferSize,f,c
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;ModbusRtu.c: 546: if (_u8BufferSize >= 140)
 11151  0029C6  0E8B               	movlw	139
 11152  0029C8  6472               	cpfsgt	__u8BufferSize,c
 11153  0029CA  D002               	goto	l4035
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;ModbusRtu.c: 547: bBuffOverflow = 1;
 11157  0029CC  0E01               	movlw	1
 11158  0029CE  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 11159  0029D0                     l4035:
 11160  0029D0  FFFF               	dw	65535	; assembler added errata NOP
 11161  0029D2  ECB6  F016         	call	_PortAvailable	;wreg free
 11162  0029D6  0900               	iorlw	0
 11163  0029D8  E1EA               	bnz	l4027
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;ModbusRtu.c: 551: {
 11167                           ;ModbusRtu.c: 552: _u16errCnt++;
 11168  0029DA  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 11169  0029DC  E002               	bz	l4043
 11170                           
 11171                           ; BSR set to: 0
 11172                           ;ModbusRtu.c: 553: return ERR_BUFF_OVERFLOW;
 11173  0029DE  0EFD               	movlw	253
 11174  0029E0  D001               	goto	l709
 11175  0029E2                     l4043:
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;ModbusRtu.c: 554: }
 11179                           ;ModbusRtu.c: 555: return _u8BufferSize;
 11180  0029E2  5072               	movf	__u8BufferSize,w,c
 11181  0029E4                     l709:
 11182  0029E4  FFFF               	dw	65535	; assembler added errata NOP
 11183                           
 11184                           ; BSR set to: 0
 11185  0029E6  0012               	return		;funcret
 11186  0029E8  FFFF               	dw	65535	; errata NOP
 11187  0029EA                     __end_of_ModbusGetRxBuffer:
 11188                           	opt stack 0
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           postinc0	equ	0xFEE
 11197                           wreg	equ	0xFE8
 11198                           indf1	equ	0xFE7
 11199                           postinc1	equ	0xFE6
 11200                           postdec1	equ	0xFE5
 11201                           fsr1h	equ	0xFE2
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           postdec2	equ	0xFDD
 11206                           plusw2	equ	0xFDB
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function _PortRead *****************
 11212 ;; Defined at:
 11213 ;;		line 57 in file "interrupts.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  ret             1    6[COMRAM] unsigned char 
 11218 ;; Return value:  Size  Location     Type
 11219 ;;                  1    wreg      unsigned char 
 11220 ;; Registers used:
 11221 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11222 ;; Tracked objects:
 11223 ;;		On entry : E/0
 11224 ;;		On exit  : F/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11227 ;;      Params:         0       0       0       0       0       0       0
 11228 ;;      Locals:         1       0       0       0       0       0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0
 11230 ;;      Totals:         1       0       0       0       0       0       0
 11231 ;;Total ram usage:        1 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    2
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_ModbusGetRxBufferHeader
 11238 ;;		_ModbusGetRxBuffer
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text57
 11243  002AE4                     __ptext57:
 11244                           	opt stack 0
 11245  002AE4                     _PortRead:
 11246                           	opt stack 26
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;incstack = 0
 11250  002AE4  FFFF               	dw	65535
 11251                           
 11252                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 11253  002AE6  9EF2               	bcf	intcon,7,c	;volatile
 11254                           
 11255                           ;interrupts.c: 60: if(UartBufferLen > 0)
 11256  002AE8  0100               	movlb	0	; () banked
 11257  002AEA  51CC               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11258  002AEC  E012               	bz	l63
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;interrupts.c: 61: {
 11262                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 11263  002AEE  0E00               	movlw	low _UartRingBuffer
 11264  002AF0  25CD               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 11265  002AF2  6ED9               	movwf	fsr2l,c
 11266  002AF4  6ADA               	clrf	fsr2h,c
 11267  002AF6  0E02               	movlw	high _UartRingBuffer
 11268  002AF8  22DA               	addwfc	fsr2h,f,c
 11269  002AFA  50DF               	movf	indf2,w,c
 11270  002AFC  6E07               	movwf	PortRead@ret,c
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;interrupts.c: 64: UartBufferLen--;
 11274  002AFE  07CC               	decf	_UartBufferLen& (0+255),f,b	;volatile
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 11278  002B00  29CD               	incf	_UartBufferTail& (0+255),w,b
 11279  002B02  E102               	bnz	l3713
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;interrupts.c: 66: UartBufferTail = 0;
 11283  002B04  6BCD               	clrf	_UartBufferTail& (0+255),b	;volatile
 11284  002B06  D001               	goto	l3715
 11285  002B08                     l3713:
 11286                           
 11287                           ; BSR set to: 0
 11288                           ;interrupts.c: 67: else
 11289                           ;interrupts.c: 68: UartBufferTail++;
 11290  002B08  2BCD               	incf	_UartBufferTail& (0+255),f,b	;volatile
 11291  002B0A                     l3715:
 11292  002B0A  FFFF               	dw	65535	; assembler added errata NOP
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 11296  002B0C  8EF2               	bsf	intcon,7,c	;volatile
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;interrupts.c: 70: return ret;
 11300  002B0E  5007               	movf	PortRead@ret,w,c
 11301  002B10  D002               	goto	l66
 11302  002B12                     l63:
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;interrupts.c: 71: }
 11306                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 11307  002B12  8EF2               	bsf	intcon,7,c	;volatile
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;interrupts.c: 73: return 0;
 11311  002B14  0E00               	movlw	0
 11312  002B16                     l66:
 11313  002B16  FFFF               	dw	65535	; assembler added errata NOP
 11314                           
 11315                           ; BSR set to: 0
 11316  002B18  0012               	return		;funcret
 11317  002B1A  FFFF               	dw	65535	; errata NOP
 11318  002B1C                     __end_of_PortRead:
 11319                           	opt stack 0
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           postinc0	equ	0xFEE
 11328                           wreg	equ	0xFE8
 11329                           indf1	equ	0xFE7
 11330                           postinc1	equ	0xFE6
 11331                           postdec1	equ	0xFE5
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           plusw2	equ	0xFDB
 11338                           fsr2h	equ	0xFDA
 11339                           fsr2l	equ	0xFD9
 11340                           status	equ	0xFD8
 11341                           
 11342 ;; *************** function _PortAvailable *****************
 11343 ;; Defined at:
 11344 ;;		line 52 in file "interrupts.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      unsigned char 
 11351 ;; Registers used:
 11352 ;;		wreg, status,2
 11353 ;; Tracked objects:
 11354 ;;		On entry : E/0
 11355 ;;		On exit  : F/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11358 ;;      Params:         0       0       0       0       0       0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; Hardware stack levels required when called:    2
 11365 ;; This function calls:
 11366 ;;		Nothing
 11367 ;; This function is called by:
 11368 ;;		_ModbusPoll
 11369 ;;		_ModbusGetRxBufferHeader
 11370 ;;		_ModbusGetRxBuffer
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           	psect	text58
 11375  002D6C                     __ptext58:
 11376                           	opt stack 0
 11377  002D6C                     _PortAvailable:
 11378                           	opt stack 27
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;incstack = 0
 11382  002D6C  FFFF               	dw	65535
 11383                           
 11384                           ;interrupts.c: 54: return UartBufferLen;
 11385  002D6E  0100               	movlb	0	; () banked
 11386  002D70  51CC               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11387                           
 11388                           ; BSR set to: 0
 11389  002D72  0012               	return		;funcret
 11390  002D74  FFFF               	dw	65535	; errata NOP
 11391  002D76                     __end_of_PortAvailable:
 11392                           	opt stack 0
 11393                           tblptru	equ	0xFF8
 11394                           tblptrh	equ	0xFF7
 11395                           tblptrl	equ	0xFF6
 11396                           tablat	equ	0xFF5
 11397                           prodh	equ	0xFF4
 11398                           prodl	equ	0xFF3
 11399                           intcon	equ	0xFF2
 11400                           postinc0	equ	0xFEE
 11401                           wreg	equ	0xFE8
 11402                           indf1	equ	0xFE7
 11403                           postinc1	equ	0xFE6
 11404                           postdec1	equ	0xFE5
 11405                           fsr1h	equ	0xFE2
 11406                           fsr1l	equ	0xFE1
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           plusw2	equ	0xFDB
 11411                           fsr2h	equ	0xFDA
 11412                           fsr2l	equ	0xFD9
 11413                           status	equ	0xFD8
 11414                           
 11415 ;; *************** function _ModbusBuildException *****************
 11416 ;; Defined at:
 11417 ;;		line 821 in file "ModbusRtu.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;  u8exception     1    wreg     unsigned char 
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;  u8exception     1    6[COMRAM] unsigned char 
 11422 ;;  u8func          1    7[COMRAM] unsigned char 
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  1    wreg      void 
 11425 ;; Registers used:
 11426 ;;		wreg, status,2, status,0
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : F/1
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11432 ;;      Params:         0       0       0       0       0       0       0
 11433 ;;      Locals:         2       0       0       0       0       0       0
 11434 ;;      Temps:          0       0       0       0       0       0       0
 11435 ;;      Totals:         2       0       0       0       0       0       0
 11436 ;;Total ram usage:        2 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    2
 11439 ;; This function calls:
 11440 ;;		Nothing
 11441 ;; This function is called by:
 11442 ;;		_ModbusPoll
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           	psect	text59
 11447  002C7A                     __ptext59:
 11448                           	opt stack 0
 11449  002C7A                     _ModbusBuildException:
 11450                           	opt stack 27
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;incstack = 0
 11454  002C7A  FFFF               	dw	65535
 11455                           
 11456                           ;ModbusBuildException@u8exception stored from wreg
 11457  002C7C  6E07               	movwf	ModbusBuildException@u8exception,c
 11458                           
 11459                           ;ModbusRtu.c: 823: uint8_t u8func = _au8Buffer[ FUNC ];
 11460  002C7E  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 11461                           
 11462                           ;ModbusRtu.c: 825: _au8Buffer[ ID ] = _u8id;
 11463  002C82  C0D6  F100         	movff	__u8id,__au8Buffer
 11464                           
 11465                           ;ModbusRtu.c: 826: _au8Buffer[ FUNC ] = u8func + 0x80;
 11466  002C86  5008               	movf	ModbusBuildException@u8func,w,c
 11467  002C88  0F80               	addlw	128
 11468  002C8A  0101               	movlb	1	; () banked
 11469  002C8C  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 11470                           
 11471                           ; BSR set to: 1
 11472                           ;ModbusRtu.c: 827: _au8Buffer[ 2 ] = u8exception;
 11473  002C8E  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 11474                           
 11475                           ; BSR set to: 1
 11476                           ;ModbusRtu.c: 828: _u8BufferSize = EXCEPTION_SIZE;
 11477  002C92  0E03               	movlw	3
 11478  002C94  6E72               	movwf	__u8BufferSize,c
 11479                           
 11480                           ; BSR set to: 1
 11481  002C96  0C03               	retlw	3	;funcret
 11482  002C98  FFFF               	dw	65535	; errata NOP
 11483  002C9A                     __end_of_ModbusBuildException:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           postinc0	equ	0xFEE
 11493                           wreg	equ	0xFE8
 11494                           indf1	equ	0xFE7
 11495                           postinc1	equ	0xFE6
 11496                           postdec1	equ	0xFE5
 11497                           fsr1h	equ	0xFE2
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           plusw2	equ	0xFDB
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function _InitApp *****************
 11508 ;; Defined at:
 11509 ;;		line 66 in file "user.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;  i               1    6[COMRAM] unsigned char 
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11523 ;;      Params:         0       0       0       0       0       0       0
 11524 ;;      Locals:         1       0       0       0       0       0       0
 11525 ;;      Temps:          0       0       0       0       0       0       0
 11526 ;;      Totals:         1       0       0       0       0       0       0
 11527 ;;Total ram usage:        1 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    3
 11530 ;; This function calls:
 11531 ;;		_InitUartBuffer
 11532 ;;		_PortBegin
 11533 ;; This function is called by:
 11534 ;;		_main
 11535 ;; This function uses a non-reentrant model
 11536 ;;
 11537                           
 11538                           	psect	text60
 11539  00244A                     __ptext60:
 11540                           	opt stack 0
 11541  00244A                     _InitApp:
 11542                           	opt stack 27
 11543                           
 11544                           ; BSR set to: 1
 11545                           ;incstack = 0
 11546  00244A  FFFF               	dw	65535
 11547                           
 11548                           ;user.c: 77: INTCONbits.PEIE = 1;
 11549  00244C  8CF2               	bsf	intcon,6,c	;volatile
 11550                           
 11551                           ;user.c: 78: (INTCONbits.GIE = 1);
 11552  00244E  8EF2               	bsf	intcon,7,c	;volatile
 11553                           
 11554                           ;user.c: 79: RCONbits.IPEN = 1;
 11555  002450  8ED0               	bsf	4048,7,c	;volatile
 11556                           
 11557                           ;user.c: 84: T1CONbits.RD16 = 1;
 11558  002452  8ECD               	bsf	4045,7,c	;volatile
 11559                           
 11560                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 11561  002454  94CD               	bcf	4045,2,c	;volatile
 11562                           
 11563                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 11564  002456  92CD               	bcf	4045,1,c	;volatile
 11565                           
 11566                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 11567  002458  0ECF               	movlw	-49
 11568  00245A  16CD               	andwf	4045,f,c	;volatile
 11569                           
 11570                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 11571  00245C  809D               	bsf	3997,0,c	;volatile
 11572                           
 11573                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 11574  00245E  809F               	bsf	3999,0,c	;volatile
 11575                           
 11576                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 11577  002460  0EF6               	movlw	246
 11578  002462  6ECF               	movwf	4047,c	;volatile
 11579  002464  0E3C               	movlw	60
 11580  002466  6ECE               	movwf	4046,c	;volatile
 11581                           
 11582                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 11583  002468  909E               	bcf	3998,0,c	;volatile
 11584                           
 11585                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 11586  00246A  80CD               	bsf	4045,0,c	;volatile
 11587                           
 11588                           ;user.c: 103: T0CONbits.T08BIT = 0;
 11589  00246C  9CD5               	bcf	4053,6,c	;volatile
 11590                           
 11591                           ;user.c: 104: T0CONbits.T0CS = 0;
 11592  00246E  9AD5               	bcf	4053,5,c	;volatile
 11593                           
 11594                           ;user.c: 106: T0CONbits.PSA = 0;
 11595  002470  96D5               	bcf	4053,3,c	;volatile
 11596                           
 11597                           ;user.c: 117: T0CONbits.T0PS = 7;
 11598  002472  0E07               	movlw	7
 11599  002474  12D5               	iorwf	4053,f,c	;volatile
 11600                           
 11601                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 11602  002476  8AF2               	bsf	intcon,5,c	;volatile
 11603                           
 11604                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 11605  002478  84F1               	bsf	intcon2,2,c	;volatile
 11606                           
 11607                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + 30) * 6)&0xFF)));
 11608  00247A  0E1A               	movlw	26
 11609  00247C  6ED7               	movwf	4055,c	;volatile
 11610  00247E  0E6E               	movlw	110
 11611  002480  6ED6               	movwf	4054,c	;volatile
 11612                           
 11613                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 11614  002482  94F2               	bcf	intcon,2,c	;volatile
 11615                           
 11616                           ;user.c: 133: InitUartBuffer();
 11617  002484  ECAF  F016         	call	_InitUartBuffer	;wreg free
 11618                           
 11619                           ;user.c: 135: PortBegin();
 11620  002488  EC6A  F016         	call	_PortBegin	;wreg free
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;user.c: 136: PIE1bits.RCIE = 1;
 11624  00248C  8A9D               	bsf	3997,5,c	;volatile
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;user.c: 138: IPR1bits.RCIP = 0;
 11628  00248E  9A9F               	bcf	3999,5,c	;volatile
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 11632  002490  6A07               	clrf	InitApp@i,c
 11633  002492                     l4817:
 11634  002492  FFFF               	dw	65535	; assembler added errata NOP
 11635                           
 11636                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 11637  002494  5007               	movf	InitApp@i,w,c
 11638  002496  0D02               	mullw	2
 11639  002498  0EAA               	movlw	low __MODBUSInputRegs
 11640  00249A  24F3               	addwf	prodl,w,c
 11641  00249C  6ED9               	movwf	fsr2l,c
 11642  00249E  0E01               	movlw	high __MODBUSInputRegs
 11643  0024A0  20F4               	addwfc	prodh,w,c
 11644  0024A2  6EDA               	movwf	fsr2h,c
 11645  0024A4  6ADE               	clrf	postinc2,c
 11646  0024A6  6ADD               	clrf	postdec2,c
 11647  0024A8  2A07               	incf	InitApp@i,f,c
 11648  0024AA  0E0E               	movlw	14
 11649  0024AC  6407               	cpfsgt	InitApp@i,c
 11650  0024AE  D7F1               	goto	l4817
 11651                           
 11652                           ;user.c: 149: TRISB = 0;
 11653  0024B0  6A93               	clrf	3987,c	;volatile
 11654                           
 11655                           ;user.c: 152: LATAbits.LATA0 = 0;
 11656  0024B2  9089               	bcf	3977,0,c	;volatile
 11657                           
 11658                           ;user.c: 153: LATAbits.LATA1 = 0;
 11659  0024B4  9289               	bcf	3977,1,c	;volatile
 11660                           
 11661                           ;user.c: 154: LATAbits.LATA2 = 0;
 11662  0024B6  9489               	bcf	3977,2,c	;volatile
 11663                           
 11664                           ;user.c: 155: LATAbits.LATA3 = 0;
 11665  0024B8  9689               	bcf	3977,3,c	;volatile
 11666                           
 11667                           ;user.c: 156: TRISAbits.RA0 = 0;
 11668  0024BA  9092               	bcf	3986,0,c	;volatile
 11669                           
 11670                           ;user.c: 157: TRISAbits.RA1 = 0;
 11671  0024BC  9292               	bcf	3986,1,c	;volatile
 11672                           
 11673                           ;user.c: 158: TRISAbits.RA2 = 0;
 11674  0024BE  9492               	bcf	3986,2,c	;volatile
 11675                           
 11676                           ;user.c: 159: TRISAbits.RA3 = 0;
 11677  0024C0  9692               	bcf	3986,3,c	;volatile
 11678                           
 11679                           ;user.c: 161: TRISCbits.RC3 = 1;
 11680  0024C2  8694               	bsf	3988,3,c	;volatile
 11681                           
 11682                           ;user.c: 162: TRISCbits.RC1 = 1;
 11683  0024C4  8294               	bsf	3988,1,c	;volatile
 11684                           
 11685                           ;user.c: 163: TRISCbits.RC0 = 0;
 11686  0024C6  9094               	bcf	3988,0,c	;volatile
 11687                           
 11688                           ;user.c: 165: LATCbits.LATC2 = 0;
 11689  0024C8  948B               	bcf	3979,2,c	;volatile
 11690  0024CA  0012               	return		;funcret
 11691  0024CC  FFFF               	dw	65535	; errata NOP
 11692  0024CE                     __end_of_InitApp:
 11693                           	opt stack 0
 11694                           tblptru	equ	0xFF8
 11695                           tblptrh	equ	0xFF7
 11696                           tblptrl	equ	0xFF6
 11697                           tablat	equ	0xFF5
 11698                           prodh	equ	0xFF4
 11699                           prodl	equ	0xFF3
 11700                           intcon	equ	0xFF2
 11701                           intcon2	equ	0xFF1
 11702                           postinc0	equ	0xFEE
 11703                           wreg	equ	0xFE8
 11704                           indf1	equ	0xFE7
 11705                           postinc1	equ	0xFE6
 11706                           postdec1	equ	0xFE5
 11707                           fsr1h	equ	0xFE2
 11708                           fsr1l	equ	0xFE1
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           plusw2	equ	0xFDB
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _PortBegin *****************
 11718 ;; Defined at:
 11719 ;;		line 48 in file "user.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;		None
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;		None
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  1    wreg      void 
 11726 ;; Registers used:
 11727 ;;		wreg, status,2
 11728 ;; Tracked objects:
 11729 ;;		On entry : F/0
 11730 ;;		On exit  : F/0
 11731 ;;		Unchanged: F/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11733 ;;      Params:         0       0       0       0       0       0       0
 11734 ;;      Locals:         0       0       0       0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0
 11736 ;;      Totals:         0       0       0       0       0       0       0
 11737 ;;Total ram usage:        0 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    2
 11740 ;; This function calls:
 11741 ;;		Nothing
 11742 ;; This function is called by:
 11743 ;;		_InitApp
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           	psect	text61
 11748  002CD4                     __ptext61:
 11749                           	opt stack 0
 11750  002CD4                     _PortBegin:
 11751                           	opt stack 27
 11752                           
 11753                           ;incstack = 0
 11754  002CD4  FFFF               	dw	65535
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;user.c: 50: TXSTA = 0;
 11758  002CD6  6AAC               	clrf	4012,c	;volatile
 11759                           
 11760                           ;user.c: 51: TXSTAbits.TXEN = 1;
 11761  002CD8  8AAC               	bsf	4012,5,c	;volatile
 11762                           
 11763                           ;user.c: 52: TXSTAbits.BRGH = 1;
 11764  002CDA  84AC               	bsf	4012,2,c	;volatile
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 11768  002CDC  0E40               	movlw	64
 11769  002CDE  6EAF               	movwf	4015,c	;volatile
 11770                           
 11771                           ; BSR set to: 0
 11772                           ;user.c: 55: RCSTA = 0;
 11773  002CE0  6AAB               	clrf	4011,c	;volatile
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;user.c: 56: RCSTAbits.SPEN = 1;
 11777  002CE2  8EAB               	bsf	4011,7,c	;volatile
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;user.c: 57: RCSTAbits.CREN = 1;
 11781  002CE4  88AB               	bsf	4011,4,c	;volatile
 11782                           
 11783                           ; BSR set to: 0
 11784                           ;user.c: 59: TRISCbits.RC5 = 0;
 11785  002CE6  9A94               	bcf	3988,5,c	;volatile
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;user.c: 60: LATCbits.LATC5 = 0;
 11789  002CE8  9A8B               	bcf	3979,5,c	;volatile
 11790                           
 11791                           ; BSR set to: 0
 11792  002CEA  0012               	return		;funcret
 11793  002CEC  FFFF               	dw	65535	; errata NOP
 11794  002CEE                     __end_of_PortBegin:
 11795                           	opt stack 0
 11796                           tblptru	equ	0xFF8
 11797                           tblptrh	equ	0xFF7
 11798                           tblptrl	equ	0xFF6
 11799                           tablat	equ	0xFF5
 11800                           prodh	equ	0xFF4
 11801                           prodl	equ	0xFF3
 11802                           intcon	equ	0xFF2
 11803                           intcon2	equ	0xFF1
 11804                           postinc0	equ	0xFEE
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postinc1	equ	0xFE6
 11808                           postdec1	equ	0xFE5
 11809                           fsr1h	equ	0xFE2
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           postdec2	equ	0xFDD
 11814                           plusw2	equ	0xFDB
 11815                           fsr2h	equ	0xFDA
 11816                           fsr2l	equ	0xFD9
 11817                           status	equ	0xFD8
 11818                           
 11819 ;; *************** function _InitUartBuffer *****************
 11820 ;; Defined at:
 11821 ;;		line 44 in file "interrupts.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;		None
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;		None
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      void 
 11828 ;; Registers used:
 11829 ;;		None
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : F/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11835 ;;      Params:         0       0       0       0       0       0       0
 11836 ;;      Locals:         0       0       0       0       0       0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0
 11838 ;;      Totals:         0       0       0       0       0       0       0
 11839 ;;Total ram usage:        0 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    2
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_PortClearReadBuffer
 11846 ;;		_InitApp
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           	psect	text62
 11851  002D5E                     __ptext62:
 11852                           	opt stack 0
 11853  002D5E                     _InitUartBuffer:
 11854                           	opt stack 26
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;incstack = 0
 11858  002D5E  FFFF               	dw	65535
 11859                           
 11860                           ;interrupts.c: 46: UartBufferHead = 0;
 11861  002D60  6A6F               	clrf	_UartBufferHead,c	;volatile
 11862                           
 11863                           ;interrupts.c: 47: UartBufferTail = 0;
 11864  002D62  0100               	movlb	0	; () banked
 11865  002D64  6BCD               	clrf	_UartBufferTail& (0+255),b	;volatile
 11866                           
 11867                           ;interrupts.c: 48: UartBufferLen = 0;
 11868  002D66  6BCC               	clrf	_UartBufferLen& (0+255),b	;volatile
 11869                           
 11870                           ; BSR set to: 0
 11871  002D68  0012               	return		;funcret
 11872  002D6A  FFFF               	dw	65535	; errata NOP
 11873  002D6C                     __end_of_InitUartBuffer:
 11874                           	opt stack 0
 11875                           tblptru	equ	0xFF8
 11876                           tblptrh	equ	0xFF7
 11877                           tblptrl	equ	0xFF6
 11878                           tablat	equ	0xFF5
 11879                           prodh	equ	0xFF4
 11880                           prodl	equ	0xFF3
 11881                           intcon	equ	0xFF2
 11882                           intcon2	equ	0xFF1
 11883                           postinc0	equ	0xFEE
 11884                           wreg	equ	0xFE8
 11885                           indf1	equ	0xFE7
 11886                           postinc1	equ	0xFE6
 11887                           postdec1	equ	0xFE5
 11888                           fsr1h	equ	0xFE2
 11889                           fsr1l	equ	0xFE1
 11890                           indf2	equ	0xFDF
 11891                           postinc2	equ	0xFDE
 11892                           postdec2	equ	0xFDD
 11893                           plusw2	equ	0xFDB
 11894                           fsr2h	equ	0xFDA
 11895                           fsr2l	equ	0xFD9
 11896                           status	equ	0xFD8
 11897                           
 11898 ;; *************** function _ConfigureOscillator *****************
 11899 ;; Defined at:
 11900 ;;		line 86 in file "system.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;		None
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;		None
 11905 ;; Return value:  Size  Location     Type
 11906 ;;                  1    wreg      void 
 11907 ;; Registers used:
 11908 ;;		None
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11914 ;;      Params:         0       0       0       0       0       0       0
 11915 ;;      Locals:         0       0       0       0       0       0       0
 11916 ;;      Temps:          0       0       0       0       0       0       0
 11917 ;;      Totals:         0       0       0       0       0       0       0
 11918 ;;Total ram usage:        0 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    2
 11921 ;; This function calls:
 11922 ;;		Nothing
 11923 ;; This function is called by:
 11924 ;;		_main
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           	psect	text63
 11929  002D7E                     __ptext63:
 11930                           	opt stack 0
 11931  002D7E                     _ConfigureOscillator:
 11932                           	opt stack 28
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;incstack = 0
 11936  002D7E  FFFF               	dw	65535
 11937  002D80  0012               	return		;funcret
 11938  002D82  FFFF               	dw	65535	; errata NOP
 11939  002D84                     __end_of_ConfigureOscillator:
 11940                           	opt stack 0
 11941                           tblptru	equ	0xFF8
 11942                           tblptrh	equ	0xFF7
 11943                           tblptrl	equ	0xFF6
 11944                           tablat	equ	0xFF5
 11945                           prodh	equ	0xFF4
 11946                           prodl	equ	0xFF3
 11947                           intcon	equ	0xFF2
 11948                           intcon2	equ	0xFF1
 11949                           postinc0	equ	0xFEE
 11950                           wreg	equ	0xFE8
 11951                           indf1	equ	0xFE7
 11952                           postinc1	equ	0xFE6
 11953                           postdec1	equ	0xFE5
 11954                           fsr1h	equ	0xFE2
 11955                           fsr1l	equ	0xFE1
 11956                           indf2	equ	0xFDF
 11957                           postinc2	equ	0xFDE
 11958                           postdec2	equ	0xFDD
 11959                           plusw2	equ	0xFDB
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function _AddSecond *****************
 11965 ;; Defined at:
 11966 ;;		line 180 in file "user.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;		None
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;		None
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  1    wreg      void 
 11973 ;; Registers used:
 11974 ;;		wreg, status,2, status,0
 11975 ;; Tracked objects:
 11976 ;;		On entry : F/0
 11977 ;;		On exit  : F/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11980 ;;      Params:         0       0       0       0       0       0       0
 11981 ;;      Locals:         0       0       0       0       0       0       0
 11982 ;;      Temps:          0       0       0       0       0       0       0
 11983 ;;      Totals:         0       0       0       0       0       0       0
 11984 ;;Total ram usage:        0 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    2
 11987 ;; This function calls:
 11988 ;;		Nothing
 11989 ;; This function is called by:
 11990 ;;		_main
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           	psect	text64
 11995  002D40                     __ptext64:
 11996                           	opt stack 0
 11997  002D40                     _AddSecond:
 11998                           	opt stack 28
 11999                           
 12000                           ;incstack = 0
 12001  002D40  FFFF               	dw	65535
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;user.c: 182: currentTime++;
 12005  002D42  2BDB               	incf	_currentTime& (0+255),f,b
 12006  002D44  0E00               	movlw	0
 12007  002D46  23DC               	addwfc	(_currentTime+1)& (0+255),f,b
 12008  002D48  23DD               	addwfc	(_currentTime+2)& (0+255),f,b
 12009  002D4A  23DE               	addwfc	(_currentTime+3)& (0+255),f,b
 12010                           
 12011                           ; BSR set to: 0
 12012  002D4C  0C00               	retlw	0	;funcret
 12013  002D4E  FFFF               	dw	65535	; errata NOP
 12014  002D50                     __end_of_AddSecond:
 12015                           	opt stack 0
 12016                           tblptru	equ	0xFF8
 12017                           tblptrh	equ	0xFF7
 12018                           tblptrl	equ	0xFF6
 12019                           tablat	equ	0xFF5
 12020                           prodh	equ	0xFF4
 12021                           prodl	equ	0xFF3
 12022                           intcon	equ	0xFF2
 12023                           intcon2	equ	0xFF1
 12024                           postinc0	equ	0xFEE
 12025                           wreg	equ	0xFE8
 12026                           indf1	equ	0xFE7
 12027                           postinc1	equ	0xFE6
 12028                           postdec1	equ	0xFE5
 12029                           fsr1h	equ	0xFE2
 12030                           fsr1l	equ	0xFE1
 12031                           indf2	equ	0xFDF
 12032                           postinc2	equ	0xFDE
 12033                           postdec2	equ	0xFDD
 12034                           plusw2	equ	0xFDB
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _low_isr *****************
 12040 ;; Defined at:
 12041 ;;		line 183 in file "interrupts.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;  c               1    5[COMRAM] unsigned char 
 12046 ;; Return value:  Size  Location     Type
 12047 ;;                  1    wreg      void 
 12048 ;; Registers used:
 12049 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12055 ;;      Params:         0       0       0       0       0       0       0
 12056 ;;      Locals:         1       0       0       0       0       0       0
 12057 ;;      Temps:          5       0       0       0       0       0       0
 12058 ;;      Totals:         6       0       0       0       0       0       0
 12059 ;;Total ram usage:        6 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    1
 12062 ;; This function calls:
 12063 ;;		Nothing
 12064 ;; This function is called by:
 12065 ;;		Interrupt level 1
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	intcodelo
 12070  000018                     __pintcodelo:
 12071                           	opt stack 0
 12072  000018                     _low_isr:
 12073                           	opt stack 0
 12074  000018  FFFF               	dw	65535	; assembler added errata NOP
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;incstack = 0
 12078  00001A  8078               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12079  00001C  FFFF               	dw	65535	; errata NOP
 12080  00001E  CFD8 F001          	movff	status,??_low_isr
 12081  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 12082  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 12083  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 12084  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 12085                           
 12086                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 12087  000032  BA9E               	btfsc	3998,5,c	;volatile
 12088  000034  AA9D               	btfss	3997,5,c	;volatile
 12089  000036  D016               	goto	i1l97
 12090  000038                     i1l98:
 12091  000038  FFFF               	dw	65535	; assembler added errata NOP
 12092  00003A  AA9E               	btfss	3998,5,c	;volatile
 12093  00003C  D7FD               	goto	i1l98
 12094                           
 12095                           ;interrupts.c: 211: uint8_t c = RCREG;
 12096  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 12097                           
 12098                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 12099  000042  0E00               	movlw	low _UartRingBuffer
 12100  000044  246F               	addwf	_UartBufferHead,w,c	;volatile
 12101  000046  6ED9               	movwf	fsr2l,c
 12102  000048  6ADA               	clrf	fsr2h,c
 12103  00004A  0E02               	movlw	high _UartRingBuffer
 12104  00004C  22DA               	addwfc	fsr2h,f,c
 12105  00004E  C006  FFDF         	movff	low_isr@c,indf2
 12106                           
 12107                           ;interrupts.c: 215: UartBufferLen++;
 12108  000052  0100               	movlb	0	; () banked
 12109  000054  2BCC               	incf	_UartBufferLen& (0+255),f,b	;volatile
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 12113  000056  286F               	incf	_UartBufferHead,w,c
 12114  000058  E102               	bnz	i1l5063
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;interrupts.c: 217: UartBufferHead = 0;
 12118  00005A  6A6F               	clrf	_UartBufferHead,c	;volatile
 12119  00005C  D001               	goto	i1l5065
 12120  00005E                     i1l5063:
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;interrupts.c: 218: else
 12124                           ;interrupts.c: 219: UartBufferHead++;
 12125  00005E  2A6F               	incf	_UartBufferHead,f,c	;volatile
 12126  000060                     i1l5065:
 12127  000060  FFFF               	dw	65535	; assembler added errata NOP
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 12131  000062  9A9E               	bcf	3998,5,c	;volatile
 12132  000064                     i1l97:
 12133  000064  FFFF               	dw	65535	; assembler added errata NOP
 12134  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 12135  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 12136  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 12137  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 12138  000076  C001  FFD8         	movff	??_low_isr,status
 12139  00007A  9078               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12140  00007C  0010               	retfie	
 12141  00007E  FFFF               	dw	65535	; errata NOP
 12142  000080                     __end_of_low_isr:
 12143                           	opt stack 0
 12144                           tblptru	equ	0xFF8
 12145                           tblptrh	equ	0xFF7
 12146                           tblptrl	equ	0xFF6
 12147                           tablat	equ	0xFF5
 12148                           prodh	equ	0xFF4
 12149                           prodl	equ	0xFF3
 12150                           intcon	equ	0xFF2
 12151                           intcon2	equ	0xFF1
 12152                           postinc0	equ	0xFEE
 12153                           wreg	equ	0xFE8
 12154                           indf1	equ	0xFE7
 12155                           postinc1	equ	0xFE6
 12156                           postdec1	equ	0xFE5
 12157                           fsr1h	equ	0xFE2
 12158                           fsr1l	equ	0xFE1
 12159                           bsr	equ	0xFE0
 12160                           indf2	equ	0xFDF
 12161                           postinc2	equ	0xFDE
 12162                           postdec2	equ	0xFDD
 12163                           plusw2	equ	0xFDB
 12164                           fsr2h	equ	0xFDA
 12165                           fsr2l	equ	0xFD9
 12166                           status	equ	0xFD8
 12167                           
 12168 ;; *************** function _high_isr *****************
 12169 ;; Defined at:
 12170 ;;		line 122 in file "interrupts.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;		None
 12173 ;; Auto vars:     Size  Location     Type
 12174 ;;		None
 12175 ;; Return value:  Size  Location     Type
 12176 ;;                  1    wreg      void 
 12177 ;; Registers used:
 12178 ;;		wreg, status,2, status,0
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12184 ;;      Params:         0       0       0       0       0       0       0
 12185 ;;      Locals:         0       0       0       0       0       0       0
 12186 ;;      Temps:          0       0       0       0       0       0       0
 12187 ;;      Totals:         0       0       0       0       0       0       0
 12188 ;;Total ram usage:        0 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; This function calls:
 12191 ;;		Nothing
 12192 ;; This function is called by:
 12193 ;;		Interrupt level 2
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197                           	psect	intcode
 12198  000008                     __pintcode:
 12199                           	opt stack 0
 12200  000008                     _high_isr:
 12201                           	opt stack 0
 12202  000008  FFFF               	dw	65535	; assembler added errata NOP
 12203                           
 12204                           ;incstack = 0
 12205  00000A  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12206  00000C  FFFF               	dw	65535	; errata NOP
 12207  00000E  EF6E  F013         	goto	int_func
 12208                           tblptru	equ	0xFF8
 12209                           tblptrh	equ	0xFF7
 12210                           tblptrl	equ	0xFF6
 12211                           tablat	equ	0xFF5
 12212                           prodh	equ	0xFF4
 12213                           prodl	equ	0xFF3
 12214                           intcon	equ	0xFF2
 12215                           intcon2	equ	0xFF1
 12216                           postinc0	equ	0xFEE
 12217                           wreg	equ	0xFE8
 12218                           indf1	equ	0xFE7
 12219                           postinc1	equ	0xFE6
 12220                           postdec1	equ	0xFE5
 12221                           fsr1h	equ	0xFE2
 12222                           fsr1l	equ	0xFE1
 12223                           bsr	equ	0xFE0
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           plusw2	equ	0xFDB
 12228                           fsr2h	equ	0xFDA
 12229                           fsr2l	equ	0xFD9
 12230                           status	equ	0xFD8
 12231                           
 12232                           	psect	intcode_body
 12233  0026DC                     __pintcode_body:
 12234                           	opt stack 22
 12235  0026DC                     int_func:
 12236                           	opt stack 22
 12237  0026DC  FFFF               	dw	65535	; errata NOP
 12238                           
 12239                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 12240  0026DE  B09E               	btfsc	3998,0,c	;volatile
 12241  0026E0  A09D               	btfss	3997,0,c	;volatile
 12242  0026E2  D00C               	goto	i2l84
 12243                           
 12244                           ;interrupts.c: 144: {
 12245                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 12246  0026E4  909E               	bcf	3998,0,c	;volatile
 12247                           
 12248                           ;interrupts.c: 146: millisecondsFromStart++;
 12249  0026E6  0100               	movlb	0	; () banked
 12250  0026E8  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 12251  0026EA  0E00               	movlw	0
 12252  0026EC  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 12253  0026EE  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 12254  0026F0  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 12258  0026F2  0EF6               	movlw	246
 12259  0026F4  6ECF               	movwf	4047,c	;volatile
 12260                           
 12261                           ; BSR set to: 0
 12262  0026F6  0E3C               	movlw	60
 12263  0026F8  6ECE               	movwf	4046,c	;volatile
 12264  0026FA  D01C               	goto	i2l85
 12265  0026FC                     i2l84:
 12266  0026FC  FFFF               	dw	65535	; assembler added errata NOP
 12267                           
 12268                           ;interrupts.c: 149: }
 12269                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 12270  0026FE  A4F2               	btfss	intcon,2,c	;volatile
 12271  002700  D019               	goto	i2l85
 12272                           
 12273                           ;interrupts.c: 152: {
 12274                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 12275  002702  94F2               	bcf	intcon,2,c	;volatile
 12276                           
 12277                           ;interrupts.c: 154: _6sCounter++;
 12278  002704  0100               	movlb	0	; () banked
 12279  002706  2BCE               	incf	__6sCounter& (0+255),f,b	;volatile
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;interrupts.c: 155: if(_6sCounter == 10)
 12283  002708  0E0A               	movlw	10
 12284  00270A  19CE               	xorwf	__6sCounter& (0+255),w,b	;volatile
 12285  00270C  E10F               	bnz	i2l5043
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;interrupts.c: 156: {
 12289                           ;interrupts.c: 157: _6sCounter = 0;
 12290  00270E  6BCE               	clrf	__6sCounter& (0+255),b	;volatile
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;interrupts.c: 158: globalMinutes++;
 12294  002710  2A74               	incf	_globalMinutes,f,c	;volatile
 12295                           
 12296                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 12297  002712  4BC4               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 12298  002714  2BC5               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;interrupts.c: 160: if(globalMinutes == 60)
 12302  002716  0E3C               	movlw	60
 12303  002718  1874               	xorwf	_globalMinutes,w,c	;volatile
 12304  00271A  E108               	bnz	i2l5043
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;interrupts.c: 161: {
 12308                           ;interrupts.c: 162: globalMinutes = 0;
 12309  00271C  6A74               	clrf	_globalMinutes,c	;volatile
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;interrupts.c: 163: globalHours++;
 12313  00271E  2A77               	incf	_globalHours,f,c	;volatile
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;interrupts.c: 164: if(globalHours == 24)
 12317  002720  0E18               	movlw	24
 12318  002722  1877               	xorwf	_globalHours,w,c	;volatile
 12319  002724  E103               	bnz	i2l5043
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;interrupts.c: 165: {
 12323                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 12324  002726  6BC4               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 12325  002728  6BC5               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 12326                           
 12327                           ;interrupts.c: 167: globalHours = 0;
 12328  00272A  6A77               	clrf	_globalHours,c	;volatile
 12329  00272C                     i2l5043:
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;interrupts.c: 168: }
 12333                           ;interrupts.c: 169: }
 12334                           ;interrupts.c: 170: }
 12335                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + 30) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + 30) * 6)&0xFF)));
 12336  00272C  0E1A               	movlw	26
 12337  00272E  6ED7               	movwf	4055,c	;volatile
 12338  002730  0E6E               	movlw	110
 12339  002732  6ED6               	movwf	4054,c	;volatile
 12340  002734                     i2l85:
 12341  002734  FFFF               	dw	65535	; assembler added errata NOP
 12342  002736  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12343  002738  0011               	retfie		f
 12344  00273A  FFFF               	dw	65535	; errata NOP
 12345  00273C                     __end_of_high_isr:
 12346                           	opt stack 0
 12347                           tblptru	equ	0xFF8
 12348                           tblptrh	equ	0xFF7
 12349                           tblptrl	equ	0xFF6
 12350                           tablat	equ	0xFF5
 12351                           prodh	equ	0xFF4
 12352                           prodl	equ	0xFF3
 12353                           intcon	equ	0xFF2
 12354                           intcon2	equ	0xFF1
 12355                           postinc0	equ	0xFEE
 12356                           wreg	equ	0xFE8
 12357                           indf1	equ	0xFE7
 12358                           postinc1	equ	0xFE6
 12359                           postdec1	equ	0xFE5
 12360                           fsr1h	equ	0xFE2
 12361                           fsr1l	equ	0xFE1
 12362                           bsr	equ	0xFE0
 12363                           indf2	equ	0xFDF
 12364                           postinc2	equ	0xFDE
 12365                           postdec2	equ	0xFDD
 12366                           plusw2	equ	0xFDB
 12367                           fsr2h	equ	0xFDA
 12368                           fsr2l	equ	0xFD9
 12369                           status	equ	0xFD8
 12370                           tblptru	equ	0xFF8
 12371                           tblptrh	equ	0xFF7
 12372                           tblptrl	equ	0xFF6
 12373                           tablat	equ	0xFF5
 12374                           prodh	equ	0xFF4
 12375                           prodl	equ	0xFF3
 12376                           intcon	equ	0xFF2
 12377                           intcon2	equ	0xFF1
 12378                           postinc0	equ	0xFEE
 12379                           wreg	equ	0xFE8
 12380                           indf1	equ	0xFE7
 12381                           postinc1	equ	0xFE6
 12382                           postdec1	equ	0xFE5
 12383                           fsr1h	equ	0xFE2
 12384                           fsr1l	equ	0xFE1
 12385                           bsr	equ	0xFE0
 12386                           indf2	equ	0xFDF
 12387                           postinc2	equ	0xFDE
 12388                           postdec2	equ	0xFDD
 12389                           plusw2	equ	0xFDB
 12390                           fsr2h	equ	0xFDA
 12391                           fsr2l	equ	0xFD9
 12392                           status	equ	0xFD8
 12393                           
 12394                           	psect	rparam
 12395  0000                     tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           intcon2	equ	0xFF1
 12403                           postinc0	equ	0xFEE
 12404                           wreg	equ	0xFE8
 12405                           indf1	equ	0xFE7
 12406                           postinc1	equ	0xFE6
 12407                           postdec1	equ	0xFE5
 12408                           fsr1h	equ	0xFE2
 12409                           fsr1l	equ	0xFE1
 12410                           bsr	equ	0xFE0
 12411                           indf2	equ	0xFDF
 12412                           postinc2	equ	0xFDE
 12413                           postdec2	equ	0xFDD
 12414                           plusw2	equ	0xFDB
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419                           	psect	temp
 12420  000078                     btemp:
 12421                           	opt stack 0
 12422  000078                     	ds	1
 12423  0000                     int$flags	set	btemp
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           intcon2	equ	0xFF1
 12432                           postinc0	equ	0xFEE
 12433                           wreg	equ	0xFE8
 12434                           indf1	equ	0xFE7
 12435                           postinc1	equ	0xFE6
 12436                           postdec1	equ	0xFE5
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           bsr	equ	0xFE0
 12440                           indf2	equ	0xFDF
 12441                           postinc2	equ	0xFDE
 12442                           postdec2	equ	0xFDD
 12443                           plusw2	equ	0xFDB
 12444                           fsr2h	equ	0xFDA
 12445                           fsr2l	equ	0xFD9
 12446                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        3
    BSS         560
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     119
    BANK0           128     18     116
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@sec	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(1) Largest target is 2
		 -> ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _CommandSetStatusLed->_PlaySound
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   37424
                                            105 COMRAM     5     5      0
                                              7 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             13    13      0   14335
                                            101 COMRAM     4     4      0
                                              0 BANK0      7     7      0
                _CommandSetStatusLed
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                          _PlaySound
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    6973
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    6853
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                          17    15      2    1037
                                             10 COMRAM    17    15      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0     951
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CommandSetStatusLed                                  3     3      0    2470
                                             28 COMRAM     3     3      0
                     _LightStatusLed
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     478
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           2     1      1     138
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2212
                                             14 COMRAM     5     5      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3485
                                             28 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PlaySound                                            8     6      2     720
                                             20 COMRAM     8     6      2
                            _GetTime
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (3) _SoundPlayNextStep                                    6     6      0     238
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (4) _StopPlaying                                          2     2      0       0
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     295
                                              7 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (5) _getTotalMinutes                                      1     1      0      97
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2144
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   14314
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     608
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     852
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     833
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2820
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1189
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     871
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     707
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1171
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1142
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1291
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     574
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0      69
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _CommandSetStatusLed
       _LightStatusLed
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _SoundPlayNextStep
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
       _StopPlaying
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _PlaySound
       _GetTime
       _SoundPlayNextStep
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getTotalMinutes
         _SetHourMin
           ___lbdiv
           ___lbmod
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      74       5       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      77       1       94.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B3      15        0.0%
DATA                 0      0     2B3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun May 22 15:50:57 2016

                                             LoadNextEvent@totalMinutes 000A  
                                                         _years_to_days 1B28  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$881 0012  
                                           __end_of_CommandSetStatusLed 2618  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l63 2B12  
                                                                    l66 2B16  
                                                                    l74 2A7C  
                                                                    l78 2A9C  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l112 2C60  
                                                                   l113 2C74  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l108 2BE4  
                                                                   l109 2BFE  
                                                                   l410 1ABA  
                                                                   l250 2982  
                                                                   l251 299E  
                                                                   l270 0AE8  
                                                                   l262 0C6C  
                                                                   l246 2964  
                                                                   l415 2050  
                                                                   l248 296E  
                                                                   l249 2978  
                                                                   l443 2612  
                                                                   l372 21B2  
                                                                   l460 1618  
                                                                   l701 2ADE  
                                                                   l454 1602  
                                                                   l375 219E  
                                                                   l288 1D1A  
                                                                   l456 16AE  
                                                                   l448 16D6  
                                                                   l385 1DEA  
                                                                   l466 164A  
                                                                   l458 1616  
                                                                   l379 1E06  
                                                                   l724 0F26  
                                                                   l396 1B22  
                                                                   l709 29E4  
                                                                   l725 113E  
                                                                   l663 287E  
                                                                   l808 19FA  
                                                                   l729 0F5E  
                                                                   l738 1136  
                                                                   l667 12C2  
                                                                   l829 220C  
                                                                   l847 1596  
                                                                   l695 2D28  
                                                                   l777 17DA  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2C54  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 267C  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 0026  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 1A20  
                                                         _globalMinutes 0074  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1302 06A6  
                                                                  l1256 27E0  
                                                                  l1266 290C  
                                                                  l1282 282E  
                                                                  l4011 2ABC  
                                                                  l4005 2AAE  
                                                                  l4105 0FD6  
                                                                  l4043 29E2  
                                                                  l4027 29AE  
                                                                  l4035 29D0  
                                                                  l4115 0FF4  
                                                                  l4107 0FE2  
                                                                  l4127 1024  
                                                                  l4063 0F4C  
                                                                  l4081 0F8A  
                                                                  l4073 0F64  
                                                                  l6003 14D0  
                                                                  l4139 104A  
                                                                  l4067 0F54  
                                                                  l4059 0F2A  
                                                                  l6021 1526  
                                                                  l6013 14FE  
                                                                  l6005 14D6  
                                                                  l4085 0FAE  
                                                                  l4077 0F86  
                                                                  l4069 0F5A  
                                                                  l4175 10EA  
                                                                  l4159 10CC  
                                                                  l3713 2B08  
                                                                  l6025 153A  
                                                                  l6017 1512  
                                                                  l6009 14EA  
                                                                  l4089 0FB4  
                                                                  l4185 10F8  
                                                                  l6105 115C  
                                                                  l4601 0D4A  
                                                                  l3715 2B0A  
                                                                  l6035 1562  
                                                                  l4099 0FCC  
                                                                  l6203 127E  
                                                                  l6131 11B6  
                                                                  l4611 0D6C  
                                                                  l4603 0D52  
                                                                  l6051 29F8  
                                                                  l5331 1C36  
                                                                  l5155 282C  
                                                                  l5163 27AA  
                                                                  l3493 2A94  
                                                                  l6029 154E  
                                                                  l6213 128A  
                                                                  l6109 1162  
                                                                  l5501 1D50  
                                                                  l4701 0E7A  
                                                                  l4621 0D86  
                                                                  l5341 1CA0  
                                                                  l5261 2A5C  
                                                                  l5253 2A44  
                                                                  l5165 27B4  
                                                                  l6039 1582  
                                                                  l6207 1284  
                                                                  l6143 11CC  
                                                                  l6135 11BC  
                                                                  l6119 118C  
                                                                  l5503 1D82  
                                                                  l4711 0E9C  
                                                                  l4703 0E82  
                                                                  l4631 0DA6  
                                                                  l4623 0D8C  
                                                                  l4615 0D78  
                                                                  l5343 1CBE  
                                                                  l5335 1C5C  
                                                                  l5255 2A4A  
                                                                  l5191 2902  
                                                                  l5183 28DE  
                                                                  l5175 27D6  
                                                                  l5167 27BA  
                                                                  l6231 15F6  
                                                                  l3681 250C  
                                                                  l3673 24EE  
                                                                  l3665 24DA  
                                                                  l3841 26D0  
                                                                  l6161 11F2  
                                                                  l5361 1A3A  
                                                                  l5513 1DAE  
                                                                  l6081 1FC8  
                                                                  l4609 0D64  
                                                                  l5337 1C7A  
                                                                  l5249 2A3C  
                                                                  l5265 2A64  
                                                                  l5281 2BCE  
                                                                  l5273 2BB6  
                                                                  l5185 28E8  
                                                                  l6313 1352  
                                                                  l3835 26AA  
                                                                  l6171 121A  
                                                                  l6163 11F8  
                                                                  l5611 0C4C  
                                                                  l5603 0BBA  
                                                                  l5363 1A3C  
                                                                  l5443 21A4  
                                                                  l5419 213E  
                                                                  l4651 0DE6  
                                                                  l5347 1CEC  
                                                                  l5187 28EE  
                                                                  l6235 1606  
                                                                  l6315 1356  
                                                                  l6307 1342  
                                                                  l6157 11EE  
                                                                  l5381 1A98  
                                                                  l5357 1A32  
                                                                  l6093 200C  
                                                                  l3853 298C  
                                                                  l4717 0EAE  
                                                                  l4709 0E94  
                                                                  l4645 0DD2  
                                                                  l4637 0DB8  
                                                                  l4629 0D9E  
                                                                  l4725 0EC2  
                                                                  l4573 0CE0  
                                                                  l5701 2BA6  
                                                                  l5453 06B2  
                                                                  l6341 13F6  
                                                                  l6325 13B4  
                                                                  l3687 2516  
                                                                  l6191 125E  
                                                                  l6183 1246  
                                                                  l6175 122C  
                                                                  l6167 120C  
                                                                  l5383 1A9E  
                                                                  l5391 1AC0  
                                                                  l6087 1FE6  
                                                                  l4719 0EB6  
                                                                  l4647 0DDA  
                                                                  l4639 0DC0  
                                                                  l4727 0ED8  
                                                                  l5295 22A8  
                                                                  l5463 096A  
                                                                  l4817 2492  
                                                                  l5609 0C30  
                                                                  l5385 1AA6  
                                                                  l5393 1AEC  
                                                                  l5377 1A8C  
                                                                  l5369 1A62  
                                                                  l5481 2C32  
                                                                  l4681 0E40  
                                                                  l4673 0E26  
                                                                  l4665 0E0C  
                                                                  l4657 0DF4  
                                                                  l4593 0D30  
                                                                  l4585 0D18  
                                                                  l6273 168E  
                                                                  l6345 1416  
                                                                  l6195 1266  
                                                                  l6187 1258  
                                                                  l6179 123E  
                                                                  l5619 0C54  
                                                                  l5387 1AAE  
                                                                  l5379 1A92  
                                                                  l4683 0E48  
                                                                  l4675 0E2E  
                                                                  l4667 0E14  
                                                                  l4659 0DFA  
                                                                  l4595 0D38  
                                                                  l4587 0D1E  
                                                                  l4579 0D0A  
                                                                  l5299 22D2  
                                                                  l6267 1678  
                                                                  l6259 163E  
                                                                  l6275 16BA  
                                                                  l5733 179E  
                                                                  l5725 1742  
                                                                  l5717 1732  
                                                                  l4693 0E62  
                                                                  l6269 1688  
                                                                  l5735 17CC  
                                                                  l5743 17E0  
                                                                  l5903 1EC4  
                                                                  l6199 1278  
                                                                  l4695 0E68  
                                                                  l4687 0E54  
                                                                  l5559 2860  
                                                                  l5593 0ABE  
                                                                  l5585 09AE  
                                                                  l5497 1D3C  
                                                                  l5649 2414  
                                                                  l6297 130C  
                                                                  l5595 0B16  
                                                                  l5587 0A44  
                                                                  l5579 0992  
                                                                  l5749 17F8  
                                                                  l5845 1950  
                                                                  l5855 19BA  
                                                                  l5919 2550  
                                                                  l5775 20DC  
                                                                  l5599 0B94  
                                                                  l5687 25E4  
                                                                  l5679 25C4  
                                                                  l5857 19EC  
                                                                  l5865 1A00  
                                                                  l5769 2088  
                                                                  l5697 2B94  
                                                                  l5971 2242  
                                                                  l5795 2362  
                                                                  l5893 1E48  
                                                                  l5973 2244  
                                                                  l5797 2394  
                                                                  l5993 148E  
                                                                  l5985 145A  
                                                                  l5899 1EA0  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 295E  
                                                                  u3010 0FAE  
                                                                  _LATA 000F89  
                                                                  u3110 10CA  
                                                                  _LATB 000F8A  
                                                                  u4304 1D02  
                                                                  u4400 068C  
                                                                  u4305 1CFA  
                                                                  u4234 1C4E  
                                                                  u4410 06A6  
                                                                  u4235 1C48  
                                                                  u4244 1C6E  
                                                                  u4245 1C68  
                                                                  u4190 2290  
                                                                  u4264 1C92  
                                                                  u4504 2852  
                                                                  u4265 1C8C  
                                                                  u4505 284C  
                                                                  u4274 1CB2  
                                                                  u4514 2872  
                                                                  u4275 1CAC  
                                                                  u4515 286C  
                                                                  u5340 1382  
                                                                  u2950 0F22  
                                                                  u4614 0AAA  
                                                                  u4294 1CDA  
                                                                  u4615 0AA4  
                                                                  u4295 1CD2  
                                                                  u4704 0BF2  
                                                                  u4624 0AD2  
                                                                  u4544 09C2  
                                                                  u4705 0BEC  
                                                                  u4625 0ACC  
                                                                  u4545 09BC  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u4634 0AFC  
                                                                  u4554 09EA  
                                                                  u4635 0AF6  
                                                                  u4555 09E4  
                                                                  u4724 0C1C  
                                                                  u4644 0B2A  
                                                                  u4564 0A14  
                                                                  _RCIF 007CF5  
                                                                  u4725 0C16  
                                                                  u4645 0B24  
                                                                  u4565 0A0E  
                                                                  u2990 0F86  
                                                                  u4734 0C44  
                                                                  u4654 0B52  
                                                                  u4574 0A3C  
                                                                  u4735 0C3E  
                                                                  u4655 0B4C  
                                                                  u4575 0A36  
                                                                  u4664 0B78  
                                                                  u4584 0A58  
                                                                  u4665 0B72  
                                                                  u4585 0A52  
                                                                  u4594 0A7C  
                                                                  u4595 0A76  
                                                                  u4755 23C4  
                                                                  u4844 176A  
                                                                  u4684 0BA6  
                                                                  u5397 2A70  
                                                                  u4845 1762  
                                                                  u4685 0BA0  
                                                                  u4765 23E6  
                                                                  u4934 234C  
                                                                  u4694 0BCE  
                                                                  u4935 2344  
                                                                  u4695 0BC8  
                                                                  u4864 1786  
                                                                  u4944 2378  
                                                                  i1l97 0064  
                                                                  u4865 1780  
                                                                  u4945 2370  
                                                                  i1l98 0038  
                                                                  u4874 17B2  
                                                                  u4954 197E  
                                                                  u4875 17AC  
                                                                  u4955 1978  
                                                                  u4795 25CE  
                                                                  i2l84 26FC  
                                                                  i2l85 2734  
                                                                  u4974 19A4  
                                                                  u4975 199C  
                                                                  u4984 19D0  
                                                                  u4985 19C8  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 12C8  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0078  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2D7E  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0076  
                                                       __end_of_InitApp 24CE  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CE  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2CB8  
                                                  _curEventTotalMinutes 00CA  
                                           getTotalMinutes@totalMinutes 0007  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2A6A  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                       __end_of___lbmod 2BD8  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000C  
                                                       __end_of___lwdiv 27EC  
                                                       __end_of___lwmod 2918  
                                            __end_of_ModbusSendTxBuffer 28D0  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2D7E  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 23AA  
                                                        ?_LoadNextEvent 0001  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D6  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 29A4  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 16DC  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 006F  
                                                        _UartBufferTail 00CD  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                       ___lbdiv@counter 0009  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2C9A  
                                                       __initialization 2618  
                                                          __end_of_main 1444  
                                                      __end_of_LightLed 0C72  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 244A  
                                                            _ModbusInit 2D1A  
                                                            _ModbusPoll 1144  
                                                      __end_of_PortRead 2B1C  
                                                        _InitUartBuffer 2D5E  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 1808  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1C2A  
                                                                i1l5063 005E  
                                                                i1l5065 0060  
                                                                i2l5043 272C  
                                                     ??_getTotalMinutes 0007  
                                                         _ymd_to_scalar 2264  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 29EA  
                                                         main@oldMinute 00ED  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D8  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2D06  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 273C  
                                             __playingSoundStartPosInEe 0070  
                                                        _UartRingBuffer 0200  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BE  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00EA  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 27EC  
                                                                _millis 2C04  
                                                                clear_0 2620  
                                                                clear_1 2632  
                                                                clear_2 263E  
                                                     __end_of_AddSecond 2D50  
                                                                _mktime 066E  
                                                          __lastCommand 00E1  
                                                 __end_of_PortAvailable 2D76  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0008  
                                                          __pdataCOMRAM 0075  
                                                __end_of_InitUartBuffer 2D6C  
                                                          __MODBUSCoils 00DF  
                                                            PortWrite@i 000A  
                                                   _PortClearReadBuffer 2D50  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D5  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2D40  
                                                __end_of_LightStatusLed 1D20  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D7  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 266E  
                                                       ___lbmod@counter 0009  
                                            __end_of_ModbusProcess_FC21 2264  
                                            __end_of_ModbusProcess_FC15 1A20  
                                            __end_of_ModbusProcess_FC16 1ED4  
                                            __end_of_ModbusProcess_FC17 25B0  
                                            __end_of_ModbusProcess_FC43 15A6  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1144  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 24CE  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001B  
                                                      ___lbdiv@quotient 000A  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00E2  
                                                  _ModbusBuildException 2C7A  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00C0  
                                                       ?_LightStatusLed 0007  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1E0A  
                                              ModbusGetRxBufferHeader@i 0009  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2CEE  
                                                 ??_PortClearReadBuffer 0007  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2AA8  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2BD8  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                          __size_of_CommandSetStatusLed 0068  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000C  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 2884  
                                                               _GetTime 2D76  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00D1  
                                                   __end_of_StopPlaying 2CD4  
                                                               _InitApp 244A  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2C9A  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0184  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 00DA  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                               ___lbdiv 2A2C  
                                                               ___lbmod 2BAC  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 2798  
                                                               ___lwmod 28D0  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 010E  
                                                               __pcinit 2618  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2B1C  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0073  
                                                       __size_of_mktime 0312  
                                                               __ptext0 12C8  
                                                               __ptext1 2D2E  
                                                               __ptext2 15A6  
                                                               __ptext3 2B4E  
                                                               __ptext4 1ED4  
                                                               __ptext5 066E  
                                                               __ptext6 2264  
                                                               __ptext7 1B28  
                                                               __ptext8 2918  
                                                               __ptext9 2798  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 15A6  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0019  
                                                   __size_of_ResetEvent 0042  
                                       __end_of_ModbusGetRxBufferHeader 2AE4  
                                                       _getTotalMinutes 2C54  
                                              __size_of_SetTimeFromRegs 00C6  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 26DC  
                                                  end_of_initialization 266E  
                                                         __Lmediumconst 0000  
                                                               int_func 26DC  
                                                   __playingSoundCurPos 00D4  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                             __totalMinutesFromDayStart 00C4  
                                                        ??_ProcessDiary 001D  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2D40  
                                                        _months_to_days 2918  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 29A4  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     _SoundPlayNextStep 210A  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2CB8  
                                           __end_of_ConfigureOscillator 2D84  
                                                    ?_SoundPlayNextStep 0001  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E9  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F3  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1C2A  
                                                        __end_of_Modbus 2D1A  
                                               __end_of_getTotalMinutes 2C7A  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 21B8  
                                                    _ModbusProcess_FC15 1916  
                                                    _ModbusProcess_FC16 1E0A  
                                                    _ModbusProcess_FC17 2542  
                                                    _ModbusProcess_FC43 1444  
                                                         __pidataCOMRAM 2D84  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 2838  
                                                        __end_of_millis 2C2E  
                                                __end_of_months_to_days 295E  
                                             __end_of_ModbusGetRxBuffer 29EA  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00CC  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                             __end_of_SoundPlayNextStep 21B8  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2618  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 1B28  
                                                          ??_SetHourMin 000D  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                                             _PlaySound 1D20  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 000A  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 25B0  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                      __size_of_ModbusGetRxBufferHeader 003C  
                                                    __end_of_ModbusInit 2D2E  
                                                    __end_of_ModbusPoll 12C8  
                                                             _PortBegin 2CD4  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0EE4  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2A6A  
                                                     __size_of_PortRead 0038  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 1916  
                                                     __holdingRegsCount 00D0  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 2A2C  
                                                         __pcstackBANK0 00E2  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 2054  
                                               ModbusProcess_FC3@u8size 0018  
                                           __end_of_PortClearReadBuffer 2D5E  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2734  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001C  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C8  
                                                            ?_PortWrite 0007  
                                                      ?_getTotalMinutes 0001  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2BAC  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0046  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2D6C  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001D  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0072  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00AE  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C6  
                                                 io_poll@lastEndAddress 00E3  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 000B  
                                                 __end_of_ymd_to_scalar 2308  
                                                      SetHourMin@tmpSec 001A  
                                              ProcessDiary@totalMinutes 0021  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D9  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                           __soundCount 0071  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 26DC  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0075  
                                                       __isSoundPlaying 00D2  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2884  
                                           _ModbusSetExceptionStatusBit 2838  
                                                __nextEventPlayDuration 00C2  
                                                              InitApp@i 0007  
                                                           _globalHours 0077  
                                                             main@curMs 00EF  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 16DC  
                                                     _ModbusProcess_FC3 2054  
                                                     _ModbusProcess_FC5 2308  
                                                     _ModbusProcess_FC6 273C  
                                                     _ModbusProcess_FC7 2CEE  
                                                           _INTCON2bits 000FF1  
                                        CommandSetStatusLed@commandData 001E  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0980  
                                                    __end_of_getHourMin 2C04  
                                                           ??_PlaySound 0017  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 2C2E  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E5  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                               _ModbusGetRxBufferHeader 2AA8  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 2542  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001F  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2AE4  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BA  
                                                           _isleap$2176 000F  
                                                       _SetTimeFromRegs 1ED4  
                                                           _currentTime 00DB  
                                                      __size_of_io_poll 0136  
                                                              _diffTime 00A8  
                                             __end_of_ModbusProcess_FC1 1808  
                                             __end_of_ModbusProcess_FC3 210A  
                                             __end_of_ModbusProcess_FC5 23AA  
                                             __end_of_ModbusProcess_FC6 2798  
                                             __end_of_ModbusProcess_FC7 2D06  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E6  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 27EC  
                                                              __ptext11 28D0  
                                                              __ptext20 25B0  
                                                              __ptext12 2C9A  
                                                              __ptext21 2838  
                                                              __ptext13 1808  
                                                              __ptext30 210A  
                                                              __ptext22 1C2A  
                                                              __ptext14 2BAC  
                                                              __ptext31 2CB8  
                                                              __ptext23 2BD8  
                                                              __ptext15 2A2C  
                                                              __ptext40 2CEE  
                                                              __ptext32 2B1C  
                                                              __ptext24 29EA  
                                                              __ptext16 2B7E  
                                                              __ptext41 273C  
                                                              __ptext33 2D76  
                                                              __ptext25 0C72  
                                                              __ptext17 23AA  
                                                              __ptext50 16DC  
                                                              __ptext42 2308  
                                                              __ptext34 1A20  
                                                              __ptext26 295E  
                                                              __ptext18 2D06  
                                                              __ptext51 2884  
                                                              __ptext43 1444  
                                                              __ptext35 2C54  
                                                              __ptext27 1F9A  
                                                              __ptext19 2D1A  
                                                              __ptext60 244A  
                                                              __ptext52 2C04  
                                                              __ptext44 267C  
                                                              __ptext36 0980  
                                                              __ptext28 2C2E  
                                                              __ptext61 2CD4  
                                                              __ptext53 2A6A  
                                                              __ptext45 2054  
                                                              __ptext37 1144  
                                                              __ptext29 1D20  
                                                              __ptext62 2D5E  
                                                              __ptext54 24CE  
                                                              __ptext46 21B8  
                                                              __ptext38 2D50  
                                                              __ptext63 2D7E  
                                                              __ptext55 2AA8  
                                                              __ptext47 2542  
                                                              __ptext39 0EE4  
                                                              __ptext64 2D40  
                                                              __ptext56 29A4  
                                                              __ptext48 1E0A  
                                                              __ptext57 2AE4  
                                                              __ptext49 1916  
                                                              __ptext58 2D6C  
                                                              __ptext59 2C7A  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E8  
                                                         __size_of_main 017C  
                                                  _ModbusGetLastCommand 2B7E  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1F9A  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0078  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2D2E  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00EE  
                                                      __exceptionStatus 00CF  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2189 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 00A0  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00D3  
                                                        _SetTimeCommand 2B4E  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2D88  
                                                              intlevel2 2D88  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001B  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                             ??_ModbusGetRxBufferHeader 0008  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0C72  
                                                 __MODBUSDiscreteInputs 00BC  
                                                __size_of_LoadNextEvent 0108  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1F9A  
                                                 __end_of_SetBuzzerDuty 2B4E  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 2B7E  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 001C  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0EE4  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                          __size_of_PortClearReadBuffer 000E  
                                            ModbusProcess_FC15@u8bitsno 0028  
