

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Thu May 12 11:07:09 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	eeprom_data
    82  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    83  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    84  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    85  0000                     
    86                           	psect	idataCOMRAM
    87  002A14                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _curEventNum
    91  002A14  FF                 	db	255
    92                           
    93                           ;initializer for _currentAlarmedEventNum
    94  002A15  FF                 	db	255
    95                           
    96                           ;initializer for _globalHours
    97  002A16  FF                 	db	255
    98                           
    99                           	psect	idataBANK0
   100  002A10                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _buzzerOnOffDuration
   104  002A10  0100               	dw	256
   105                           
   106                           ;initializer for _buzzerOnOffPeriod
   107  002A12  0400               	dw	1024
   108                           
   109                           	psect	smallconst
   110  000600                     __psmallconst:
   111                           	opt stack 0
   112  000600  00                 	db	0
   113  000601                     _fctsupported:
   114                           	opt stack 0
   115  000601  01                 	db	1
   116  000602  02                 	db	2
   117  000603  03                 	db	3
   118  000604  04                 	db	4
   119  000605  05                 	db	5
   120  000606  06                 	db	6
   121  000607  07                 	db	7
   122  000608  0F                 	db	15
   123  000609  10                 	db	16
   124  00060A  11                 	db	17
   125  00060B  15                 	db	21
   126  00060C  2B                 	db	43
   127  00060D                     __end_of_fctsupported:
   128                           	opt stack 0
   129  0000                     _CCP1CONbits	set	4029
   130  0000                     _CCPR1L	set	4030
   131  0000                     _EEADR	set	4009
   132  0000                     _EECON2	set	4007
   133  0000                     _EEDATA	set	4008
   134  0000                     _INTCON2bits	set	4081
   135  0000                     _INTCONbits	set	4082
   136  0000                     _IPR1bits	set	3999
   137  0000                     _LATA	set	3977
   138  0000                     _LATAbits	set	3977
   139  0000                     _LATB	set	3978
   140  0000                     _LATCbits	set	3979
   141  0000                     _PIE1bits	set	3997
   142  0000                     _PIR1bits	set	3998
   143  0000                     _PORTCbits	set	3970
   144  0000                     _PR2	set	4043
   145  0000                     _RCONbits	set	4048
   146  0000                     _RCREG	set	4014
   147  0000                     _RCSTA	set	4011
   148  0000                     _RCSTAbits	set	4011
   149  0000                     _SPBRG	set	4015
   150  0000                     _T0CONbits	set	4053
   151  0000                     _T1CONbits	set	4045
   152  0000                     _T2CONbits	set	4042
   153  0000                     _TMR0H	set	4055
   154  0000                     _TMR0L	set	4054
   155  0000                     _TMR1H	set	4047
   156  0000                     _TMR1L	set	4046
   157  0000                     _TRISAbits	set	3986
   158  0000                     _TRISB	set	3987
   159  0000                     _TRISCbits	set	3988
   160  0000                     _TXREG	set	4013
   161  0000                     _TXSTA	set	4012
   162  0000                     _TXSTAbits	set	4012
   163  0000                     _CARRY	set	32448
   164  0000                     _GIE	set	32663
   165  0000                     _RCIF	set	31989
   166  0000                     _RD	set	32048
   167  0000                     _TRMT	set	32097
   168  0000                     _WR	set	32049
   169  0000                     _WREN	set	32050
   170  00060D                     STR_3:
   171  00060D  54                 	db	84	;'T'
   172  00060E  61                 	db	97	;'a'
   173  00060F  62                 	db	98	;'b'
   174  000610  6C                 	db	108	;'l'
   175  000611  6F                 	db	111	;'o'
   176  000612  20                 	db	32
   177  000613  73                 	db	115	;'s'
   178  000614  20                 	db	32
   179  000615  72                 	db	114	;'r'
   180  000616  61                 	db	97	;'a'
   181  000617  73                 	db	115	;'s'
   182  000618  70                 	db	112	;'p'
   183  000619  69                 	db	105	;'i'
   184  00061A  73                 	db	115	;'s'
   185  00061B  61                 	db	97	;'a'
   186  00061C  6E                 	db	110	;'n'
   187  00061D  69                 	db	105	;'i'
   188  00061E  65                 	db	101	;'e'
   189  00061F  6D                 	db	109	;'m'
   190  000620  20                 	db	32
   191  000621  74                 	db	116	;'t'
   192  000622  75                 	db	117	;'u'
   193  000623  72                 	db	114	;'r'
   194  000624  6F                 	db	111	;'o'
   195  000625  00                 	db	0
   196  000626                     STR_12:
   197  000626  54                 	db	84	;'T'
   198  000627  61                 	db	97	;'a'
   199  000628  62                 	db	98	;'b'
   200  000629  6C                 	db	108	;'l'
   201  00062A  6F                 	db	111	;'o'
   202  00062B  20                 	db	32
   203  00062C  73                 	db	115	;'s'
   204  00062D  20                 	db	32
   205  00062E  72                 	db	114	;'r'
   206  00062F  61                 	db	97	;'a'
   207  000630  73                 	db	115	;'s'
   208  000631  70                 	db	112	;'p'
   209  000632  69                 	db	105	;'i'
   210  000633  73                 	db	115	;'s'
   211  000634  61                 	db	97	;'a'
   212  000635  6E                 	db	110	;'n'
   213  000636  69                 	db	105	;'i'
   214  000637  65                 	db	101	;'e'
   215  000638  6D                 	db	109	;'m'
   216  000639  00                 	db	0
   217  00063A                     STR_10:
   218  00063A  68                 	db	104	;'h'
   219  00063B  74                 	db	116	;'t'
   220  00063C  74                 	db	116	;'t'
   221  00063D  70                 	db	112	;'p'
   222  00063E  3A                 	db	58	;':'
   223  00063F  2F                 	db	47
   224  000640  2F                 	db	47
   225  000641  62                 	db	98	;'b'
   226  000642  6F                 	db	111	;'o'
   227  000643  6C                 	db	108	;'l'
   228  000644  69                 	db	105	;'i'
   229  000645  64                 	db	100	;'d'
   230  000646  2E                 	db	46
   231  000647  72                 	db	114	;'r'
   232  000648  75                 	db	117	;'u'
   233  000649  00                 	db	0
   234  00064A                     STR_16:
   235  00064A  52                 	db	82	;'R'
   236  00064B  61                 	db	97	;'a'
   237  00064C  73                 	db	115	;'s'
   238  00064D  70                 	db	112	;'p'
   239  00064E  69                 	db	105	;'i'
   240  00064F  73                 	db	115	;'s'
   241  000650  61                 	db	97	;'a'
   242  000651  6E                 	db	110	;'n'
   243  000652  69                 	db	105	;'i'
   244  000653  65                 	db	101	;'e'
   245  000654  00                 	db	0
   246  000655                     STR_6:
   247  000655  43                 	db	67	;'C'
   248  000656  32                 	db	50	;'2'
   249  000657  30                 	db	48	;'0'
   250  000658  30                 	db	48	;'0'
   251  000659  30                 	db	48	;'0'
   252  00065A  2D                 	db	45
   253  00065B  42                 	db	66	;'B'
   254  00065C  49                 	db	73	;'I'
   255  00065D  00                 	db	0
   256  00065E                     STR_4:
   257  00065E  42                 	db	66	;'B'
   258  00065F  4F                 	db	79	;'O'
   259  000660  4C                 	db	76	;'L'
   260  000661  49                 	db	73	;'I'
   261  000662  44                 	db	68	;'D'
   262  000663  00                 	db	0
   263  000664                     STR_8:
   264  000664  31                 	db	49	;'1'
   265  000665  2E                 	db	46
   266  000666  30                 	db	48	;'0'
   267  000667  31                 	db	49	;'1'
   268  000668  00                 	db	0
   269  000669                     STR_14:
   270  000669  4D                 	db	77	;'M'
   271  00066A  4D                 	db	77	;'M'
   272  00066B  4D                 	db	77	;'M'
   273  00066C  00                 	db	0
   274  0000                     
   275                           ; #config settings
   276  00066D  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  002268                     __pcinit:
   280                           	opt stack 0
   281  002268                     start_initialization:
   282                           	opt stack 0
   283  002268                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Clear objects allocated to BANK2 (256 bytes)
   287  002268  EE02  F000         	lfsr	0,__pbssBANK2
   288  00226C  EE11 F000          	lfsr	1,256
   289  002270                     clear_0:
   290  002270  6AEE               	clrf	postinc0,c
   291  002272  50E5               	movf	postdec1,w,c
   292  002274  50E1               	movf	fsr1l,w,c
   293  002276  E1FC               	bnz	clear_0
   294  002278  50E2               	movf	fsr1h,w,c
   295  00227A  E1FA               	bnz	clear_0
   296                           
   297                           ; Clear objects allocated to BANK1 (200 bytes)
   298  00227C  EE01  F000         	lfsr	0,__pbssBANK1
   299  002280  0EC8               	movlw	200
   300  002282                     clear_1:
   301  002282  6AEE               	clrf	postinc0,c
   302  002284  06E8               	decf	wreg,f,c
   303  002286  E1FD               	bnz	clear_1
   304                           
   305                           ; Clear objects allocated to BANK0 (85 bytes)
   306  002288  EE00  F080         	lfsr	0,__pbssBANK0
   307  00228C  0E55               	movlw	85
   308  00228E                     clear_2:
   309  00228E  6AEE               	clrf	postinc0,c
   310  002290  06E8               	decf	wreg,f,c
   311  002292  E1FD               	bnz	clear_2
   312                           
   313                           ; Clear objects allocated to COMRAM (5 bytes)
   314  002294  6A73               	clrf	(__pbssCOMRAM+4)& (0+255),c
   315  002296  6A72               	clrf	(__pbssCOMRAM+3)& (0+255),c
   316  002298  6A71               	clrf	(__pbssCOMRAM+2)& (0+255),c
   317  00229A  6A70               	clrf	(__pbssCOMRAM+1)& (0+255),c
   318  00229C  6A6F               	clrf	__pbssCOMRAM& (0+255),c
   319                           
   320                           ; Initialize objects allocated to BANK0 (4 bytes)
   321                           ; load TBLPTR registers with __pidataBANK0
   322  00229E  0E10               	movlw	low __pidataBANK0
   323  0022A0  6EF6               	movwf	tblptrl,c
   324  0022A2  0E2A               	movlw	high __pidataBANK0
   325  0022A4  6EF7               	movwf	tblptrh,c
   326  0022A6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   327  0022A8  6EF8               	movwf	tblptru,c
   328  0022AA  EE00  F0EC         	lfsr	0,__pdataBANK0
   329  0022AE  EE10 F004          	lfsr	1,4
   330  0022B2                     copy_data0:
   331  0022B2  0009               	tblrd		*+
   332  0022B4  CFF5 FFEE          	movff	tablat,postinc0
   333  0022B8  50E5               	movf	postdec1,w,c
   334  0022BA  50E1               	movf	fsr1l,w,c
   335  0022BC  E1FA               	bnz	copy_data0
   336                           
   337                           ; Initialize objects allocated to COMRAM (3 bytes)
   338                           ; load TBLPTR registers with __pidataCOMRAM
   339  0022BE  0E14               	movlw	low __pidataCOMRAM
   340  0022C0  6EF6               	movwf	tblptrl,c
   341  0022C2  0E2A               	movlw	high __pidataCOMRAM
   342  0022C4  6EF7               	movwf	tblptrh,c
   343  0022C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   344  0022C8  6EF8               	movwf	tblptru,c
   345  0022CA  0009               	tblrd		*+	;fetch initializer
   346  0022CC  CFF5 F074          	movff	tablat,__pdataCOMRAM
   347  0022D0  0009               	tblrd		*+	;fetch initializer
   348  0022D2  CFF5 F075          	movff	tablat,__pdataCOMRAM+1
   349  0022D6  0009               	tblrd		*+	;fetch initializer
   350  0022D8  CFF5 F076          	movff	tablat,__pdataCOMRAM+2
   351  0022DC                     end_of_initialization:
   352                           	opt stack 0
   353  0022DC                     __end_of__initialization:
   354                           	opt stack 0
   355  0022DC  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   356  0022DE  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   357  0022E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   358  0022E2  6EF8               	movwf	tblptru,c
   359  0022E4  0100               	movlb	0
   360  0022E6  EF51  F008         	goto	_main	;jump to C main() function
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1h	equ	0xFE2
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	bssCOMRAM
   372  00006F                     __pbssCOMRAM:
   373                           	opt stack 0
   374  00006F                     _UartBufferTail:
   375                           	opt stack 0
   376  00006F                     	ds	1
   377  000070                     __u8BufferSize:
   378                           	opt stack 0
   379  000070                     	ds	1
   380  000071                     _blinkOn:
   381                           	opt stack 0
   382  000071                     	ds	1
   383  000072                     _eventCount:
   384                           	opt stack 0
   385  000072                     	ds	1
   386  000073                     _globalMinutes:
   387                           	opt stack 0
   388  000073                     	ds	1
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1h	equ	0xFE2
   397                           fsr1l	equ	0xFE1
   398                           
   399                           	psect	dataCOMRAM
   400  000074                     __pdataCOMRAM:
   401                           	opt stack 0
   402  000074                     _curEventNum:
   403                           	opt stack 0
   404  000074                     	ds	1
   405  000075                     _currentAlarmedEventNum:
   406                           	opt stack 0
   407  000075                     	ds	1
   408  000076                     _globalHours:
   409                           	opt stack 0
   410  000076                     	ds	1
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1h	equ	0xFE2
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	bssBANK0
   422  000080                     __pbssBANK0:
   423                           	opt stack 0
   424  000080                     _ledBlink:
   425                           	opt stack 0
   426  000080                     	ds	16
   427  000090                     _ledStatuses:
   428                           	opt stack 0
   429  000090                     	ds	16
   430  0000A0                     __u32time:
   431                           	opt stack 0
   432  0000A0                     	ds	4
   433  0000A4                     _diffTime:
   434                           	opt stack 0
   435  0000A4                     	ds	4
   436  0000A8                     _eventResetSecond:
   437                           	opt stack 0
   438  0000A8                     	ds	4
   439  0000AC                     _millisecondsFromStart:
   440                           	opt stack 0
   441  0000AC                     	ds	4
   442  0000B0                     _oldBlinkOnTime:
   443                           	opt stack 0
   444  0000B0                     	ds	4
   445  0000B4                     __MODBUSDiscreteInputs:
   446                           	opt stack 0
   447  0000B4                     	ds	2
   448  0000B6                     __lastAddress:
   449                           	opt stack 0
   450  0000B6                     	ds	2
   451  0000B8                     __lastCount:
   452                           	opt stack 0
   453  0000B8                     	ds	2
   454  0000BA                     _blinkDuration:
   455                           	opt stack 0
   456  0000BA                     	ds	2
   457  0000BC                     _blinkPeriod:
   458                           	opt stack 0
   459  0000BC                     	ds	2
   460  0000BE                     _IsBusserOn:
   461                           	opt stack 0
   462  0000BE                     	ds	1
   463  0000BF                     _UartBufferHead:
   464                           	opt stack 0
   465  0000BF                     	ds	1
   466  0000C0                     _UartBufferLen:
   467                           	opt stack 0
   468  0000C0                     	ds	1
   469  0000C1                     __6sCounter:
   470                           	opt stack 0
   471  0000C1                     	ds	1
   472  0000C2                     __exceptionStatus:
   473                           	opt stack 0
   474  0000C2                     	ds	1
   475  0000C3                     __holdingRegsCount:
   476                           	opt stack 0
   477  0000C3                     	ds	1
   478  0000C4                     __inputRegsCount:
   479                           	opt stack 0
   480  0000C4                     	ds	1
   481  0000C5                     __u8id:
   482                           	opt stack 0
   483  0000C5                     	ds	1
   484  0000C6                     __u8lastRec:
   485                           	opt stack 0
   486  0000C6                     	ds	1
   487  0000C7                     _buzzeLoudDuration:
   488                           	opt stack 0
   489  0000C7                     	ds	1
   490  0000C8                     _buzzerAlarmPeriod:
   491                           	opt stack 0
   492  0000C8                     	ds	1
   493  0000C9                     _curEventHour:
   494                           	opt stack 0
   495  0000C9                     	ds	1
   496  0000CA                     _curEventMinute:
   497                           	opt stack 0
   498  0000CA                     	ds	1
   499  0000CB                     _curEventType:
   500                           	opt stack 0
   501  0000CB                     	ds	1
   502  0000CC                     _currentLedBlock:
   503                           	opt stack 0
   504  0000CC                     	ds	1
   505  0000CD                     _eventAcceptTime:
   506                           	opt stack 0
   507  0000CD                     	ds	1
   508  0000CE                     _currentTime:
   509                           	opt stack 0
   510  0000CE                     	ds	4
   511  0000D2                     __MODBUSCoils:
   512                           	opt stack 0
   513  0000D2                     	ds	2
   514  0000D4                     __lastCommand:
   515                           	opt stack 0
   516  0000D4                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1h	equ	0xFE2
   525                           fsr1l	equ	0xFE1
   526                           
   527                           	psect	dataBANK0
   528  0000EC                     __pdataBANK0:
   529                           	opt stack 0
   530  0000EC                     _buzzerOnOffDuration:
   531                           	opt stack 0
   532  0000EC                     	ds	2
   533  0000EE                     _buzzerOnOffPeriod:
   534                           	opt stack 0
   535  0000EE                     	ds	2
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1h	equ	0xFE2
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	bssBANK1
   547  000100                     __pbssBANK1:
   548                           	opt stack 0
   549  000100                     __au8Buffer:
   550                           	opt stack 0
   551  000100                     	ds	140
   552  00018C                     __MODBUSHoldingRegs:
   553                           	opt stack 0
   554  00018C                     	ds	30
   555  0001AA                     __MODBUSInputRegs:
   556                           	opt stack 0
   557  0001AA                     	ds	30
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	bssBANK2
   569  000200                     __pbssBANK2:
   570                           	opt stack 0
   571  000200                     _UartRingBuffer:
   572                           	opt stack 0
   573  000200                     	ds	256
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           postdec1	equ	0xFE5
   581                           fsr1h	equ	0xFE2
   582                           fsr1l	equ	0xFE1
   583                           
   584                           	psect	cstackBANK0
   585  0000D5                     __pcstackBANK0:
   586                           	opt stack 0
   587  0000D5                     io_poll@command:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x0
   591  0000D5                     	ds	1
   592  0000D6                     io_poll@lastEndAddress:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x1
   596  0000D6                     	ds	2
   597  0000D8                     io_poll@eventEeAddr:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x3
   601  0000D8                     	ds	1
   602  0000D9                     io_poll@lastAddress:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x4
   606  0000D9                     	ds	2
   607  0000DB                     io_poll@lastCommand:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x6
   611  0000DB                     	ds	1
   612  0000DC                     io_poll@v1:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x7
   616  0000DC                     	ds	1
   617  0000DD                     main@lastMs:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x8
   621  0000DD                     	ds	4
   622  0000E1                     main@oldBuzzerOnTime:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0xC
   626  0000E1                     	ds	4
   627  0000E5                     main@oldMinute:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x10
   631  0000E5                     	ds	1
   632  0000E6                     main@hour:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x11
   636  0000E6                     	ds	1
   637  0000E7                     main@curMs:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x12
   641  0000E7                     	ds	4
   642  0000EB                     main@minute:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x16
   646  0000EB                     	ds	1
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1h	equ	0xFE2
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	cstackCOMRAM
   658  000001                     __pcstackCOMRAM:
   659                           	opt stack 0
   660  000001                     ??_low_isr:
   661  000001                     
   662                           ; 1 bytes @ 0x0
   663  000001                     	ds	5
   664  000006                     low_isr@c:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x5
   668  000006                     	ds	1
   669  000007                     ?_ModbusCalcCRC:
   670                           	opt stack 0
   671  000007                     ?___lwdiv:
   672                           	opt stack 0
   673  000007                     ?___lwmod:
   674                           	opt stack 0
   675  000007                     ?_millis:
   676                           	opt stack 0
   677  000007                     PortRead@ret:
   678                           	opt stack 0
   679  000007                     getHourMin@min:
   680                           	opt stack 0
   681  000007                     SetHourMin@newMin:
   682                           	opt stack 0
   683  000007                     UpdateLedRegister@regIndex:
   684                           	opt stack 0
   685  000007                     SwitchOffAllLeds@i:
   686                           	opt stack 0
   687  000007                     LightLed@ledState:
   688                           	opt stack 0
   689  000007                     LightStatusLed@on:
   690                           	opt stack 0
   691  000007                     InitApp@i:
   692                           	opt stack 0
   693  000007                     SetTime@newTime:
   694                           	opt stack 0
   695  000007                     ModbusSetExceptionStatusBit@value:
   696                           	opt stack 0
   697  000007                     ModbusInit@u8serno:
   698                           	opt stack 0
   699  000007                     ModbusBuildException@u8exception:
   700                           	opt stack 0
   701  000007                     ModbusGetLastCommand@count:
   702                           	opt stack 0
   703  000007                     CopyStringToBuffer@src:
   704                           	opt stack 0
   705  000007                     PortWrite@buf:
   706                           	opt stack 0
   707  000007                     SetBuzzerDuty@dc:
   708                           	opt stack 0
   709  000007                     ___lwdiv@dividend:
   710                           	opt stack 0
   711  000007                     ___lwmod@dividend:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x6
   715  000007                     	ds	1
   716  000008                     ??_ModbusSetExceptionStatusBit:
   717  000008                     ??_ModbusGetRxBuffer:
   718  000008                     ??_ProcessLightBlock:
   719  000008                     getHourMin@hour:
   720                           	opt stack 0
   721  000008                     SetHourMin@newHour:
   722                           	opt stack 0
   723  000008                     LightLed@blink:
   724                           	opt stack 0
   725  000008                     LightStatusLed@blink:
   726                           	opt stack 0
   727  000008                     ModbusInit@u8txenpin:
   728                           	opt stack 0
   729  000008                     ModbusBuildException@u8func:
   730                           	opt stack 0
   731  000008                     CopyStringToBuffer@len:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x7
   735  000008                     	ds	1
   736  000009                     ??_LoadNextEvent:
   737  000009                     ??_ModbusCalcCRC:
   738  000009                     ??_LightLed:
   739  000009                     ??_LightStatusLed:
   740  000009                     ??_SetBuzzerDuty:
   741  000009                     ??_CopyStringToBuffer:
   742  000009                     PortWrite@buflen:
   743                           	opt stack 0
   744  000009                     ModbusGetRxBuffer@bBuffOverflow:
   745                           	opt stack 0
   746  000009                     ModbusGetLastCommand@address:
   747                           	opt stack 0
   748  000009                     ___lwdiv@divisor:
   749                           	opt stack 0
   750  000009                     ___lwmod@divisor:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x8
   754  000009                     	ds	1
   755  00000A                     PortWrite@i:
   756                           	opt stack 0
   757  00000A                     ModbusSetExceptionStatusBit@bitNum:
   758                           	opt stack 0
   759  00000A                     CopyStringToBuffer@objId:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x9
   763  00000A                     	ds	1
   764  00000B                     LoadNextEvent@v1:
   765                           	opt stack 0
   766  00000B                     ModbusInit@u8id:
   767                           	opt stack 0
   768  00000B                     CopyStringToBuffer@i:
   769                           	opt stack 0
   770  00000B                     ___lwdiv@counter:
   771                           	opt stack 0
   772  00000B                     ___lwmod@counter:
   773                           	opt stack 0
   774  00000B                     ModbusCalcCRC@temp2:
   775                           	opt stack 0
   776  00000B                     millis@ret:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xA
   780  00000B                     	ds	1
   781  00000C                     ?_isleap:
   782                           	opt stack 0
   783  00000C                     LightLed@ledNum:
   784                           	opt stack 0
   785  00000C                     ProcessLightBlock@curMs:
   786                           	opt stack 0
   787  00000C                     LoadNextEvent@hour:
   788                           	opt stack 0
   789  00000C                     Modbus@u8serno:
   790                           	opt stack 0
   791  00000C                     ___lwdiv@quotient:
   792                           	opt stack 0
   793  00000C                     isleap@yr:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0xB
   797  00000C                     	ds	1
   798  00000D                     LightLed@ststusIndex:
   799                           	opt stack 0
   800  00000D                     LoadNextEvent@minute:
   801                           	opt stack 0
   802  00000D                     Modbus@u8txenpin:
   803                           	opt stack 0
   804  00000D                     ModbusCalcCRC@flag:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0xC
   808  00000D                     	ds	1
   809  00000E                     ??_isleap:
   810  00000E                     ?_months_to_days:
   811                           	opt stack 0
   812  00000E                     ?_years_to_days:
   813                           	opt stack 0
   814  00000E                     LightLed@statusShift:
   815                           	opt stack 0
   816  00000E                     LightStatusLed@row:
   817                           	opt stack 0
   818  00000E                     Modbus@u8id:
   819                           	opt stack 0
   820  00000E                     months_to_days@month:
   821                           	opt stack 0
   822  00000E                     years_to_days@yr:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xD
   826  00000E                     	ds	1
   827  00000F                     ??_InitFromEeprom:
   828  00000F                     ??_ResetEvent:
   829  00000F                     ??_ProcessDiary:
   830  00000F                     ModbusCalcCRC@u8length:
   831                           	opt stack 0
   832  00000F                     _isleap$2143:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0xE
   836  00000F                     	ds	1
   837  000010                     ??_months_to_days:
   838  000010                     ModbusCalcCRC@i:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0xF
   842  000010                     	ds	1
   843  000011                     ResetEvent@state:
   844                           	opt stack 0
   845  000011                     ModbusCalcCRC@j:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x10
   849  000011                     	ds	1
   850  000012                     ??_years_to_days:
   851  000012                     _ResetEvent$829:
   852                           	opt stack 0
   853  000012                     ModbusCalcCRC@temp:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x11
   857  000012                     	ds	1
   858  000013                     ProcessDiary@hour:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x12
   862  000013                     	ds	1
   863  000014                     ??_ModbusValidateRequest:
   864  000014                     ProcessDiary@minute:
   865                           	opt stack 0
   866  000014                     ModbusSendTxBuffer@u16crc:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x13
   870  000014                     	ds	2
   871  000016                     ??_ModbusProcess_FC5:
   872  000016                     ??_ModbusProcess_FC15:
   873  000016                     ??_ModbusProcess_FC17:
   874  000016                     ??_ModbusProcess_FC21:
   875  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   876                           	opt stack 0
   877  000016                     ModbusProcess_FC43@devIdCode:
   878                           	opt stack 0
   879  000016                     ModbusProcess_FC1@regs:
   880                           	opt stack 0
   881  000016                     ModbusProcess_FC3@regs:
   882                           	opt stack 0
   883  000016                     ModbusProcess_FC6@regs:
   884                           	opt stack 0
   885  000016                     ModbusProcess_FC16@regs:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x15
   889  000016                     	ds	1
   890  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   891                           	opt stack 0
   892  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x16
   896  000017                     	ds	1
   897  000018                     ??_ModbusProcess_FC1:
   898  000018                     ModbusProcess_FC3@u8size:
   899                           	opt stack 0
   900  000018                     ModbusProcess_FC6@u8size:
   901                           	opt stack 0
   902  000018                     ModbusProcess_FC16@u8size:
   903                           	opt stack 0
   904  000018                     ModbusProcess_FC17@i:
   905                           	opt stack 0
   906  000018                     ModbusProcess_FC21@requestDataLen:
   907                           	opt stack 0
   908  000018                     ModbusProcess_FC43@objId:
   909                           	opt stack 0
   910  000018                     ModbusValidateRequest@startAddrBytes:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x17
   914  000018                     	ds	1
   915  000019                     ??_ModbusProcess_FC3:
   916  000019                     ??_ModbusProcess_FC6:
   917  000019                     ??_ModbusProcess_FC16:
   918  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x18
   922  000019                     	ds	1
   923  00001A                     ModbusProcess_FC21@startAddrsBytes:
   924                           	opt stack 0
   925  00001A                     years_to_days@ret:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x19
   929  00001A                     	ds	1
   930  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   931                           	opt stack 0
   932  00001B                     ModbusProcess_FC1@u16coil:
   933                           	opt stack 0
   934  00001B                     ModbusProcess_FC6@u16val:
   935                           	opt stack 0
   936  00001B                     ModbusProcess_FC15@u16coil:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x1A
   940  00001B                     	ds	1
   941  00001C                     ModbusProcess_FC5@u16coil:
   942                           	opt stack 0
   943  00001C                     ModbusProcess_FC21@recLenBytes:
   944                           	opt stack 0
   945  00001C                     ModbusValidateRequest@recLenBytes:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x1B
   949  00001C                     	ds	1
   950  00001D                     ModbusProcess_FC1@u8currentBit:
   951                           	opt stack 0
   952  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   953                           	opt stack 0
   954  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   955                           	opt stack 0
   956  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   957                           	opt stack 0
   958  00001D                     ModbusProcess_FC16@temp:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x1C
   962  00001D                     	ds	1
   963  00001E                     ?_ymd_to_scalar:
   964                           	opt stack 0
   965  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   966                           	opt stack 0
   967  00001E                     ModbusProcess_FC5@u8currentBit:
   968                           	opt stack 0
   969  00001E                     ModbusProcess_FC15@bTemp:
   970                           	opt stack 0
   971  00001E                     ModbusProcess_FC21@i:
   972                           	opt stack 0
   973  00001E                     ModbusProcess_FC3@u16regsno:
   974                           	opt stack 0
   975  00001E                     ModbusProcess_FC6@u16add:
   976                           	opt stack 0
   977  00001E                     ymd_to_scalar@yr:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x1D
   981  00001E                     	ds	1
   982  00001F                     ModbusProcess_FC1@u8bytesno:
   983                           	opt stack 0
   984  00001F                     ModbusProcess_FC5@regs:
   985                           	opt stack 0
   986  00001F                     ModbusProcess_FC15@u8frameByte:
   987                           	opt stack 0
   988  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x1E
   992  00001F                     	ds	1
   993  000020                     ModbusProcess_FC3@u8StartAdd:
   994                           	opt stack 0
   995  000020                     ModbusValidateRequest@u16MsgCRC:
   996                           	opt stack 0
   997  000020                     ModbusProcess_FC1@u16StartCoil:
   998                           	opt stack 0
   999  000020                     ModbusProcess_FC15@u16StartCoil:
  1000                           	opt stack 0
  1001  000020                     ModbusProcess_FC16@u16StartAdd:
  1002                           	opt stack 0
  1003  000020                     ymd_to_scalar@mo:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x1F
  1007  000020                     	ds	1
  1008  000021                     ModbusProcess_FC3@i:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x20
  1012  000021                     	ds	1
  1013  000022                     ModbusValidateRequest@isSupported:
  1014                           	opt stack 0
  1015  000022                     ModbusProcess_FC16@u8regsno:
  1016                           	opt stack 0
  1017  000022                     ModbusProcess_FC1@u16currentCoil:
  1018                           	opt stack 0
  1019  000022                     ModbusProcess_FC15@u16Coilno:
  1020                           	opt stack 0
  1021  000022                     ymd_to_scalar@day:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x21
  1025  000022                     	ds	1
  1026  000023                     ModbusProcess_FC16@i:
  1027                           	opt stack 0
  1028  000023                     ModbusValidateRequest@u16count:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x22
  1032  000023                     	ds	1
  1033  000024                     ??_ymd_to_scalar:
  1034  000024                     ModbusProcess_FC1@u8bitsno:
  1035                           	opt stack 0
  1036  000024                     ModbusProcess_FC15@u16currentCoil:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x23
  1040  000024                     	ds	1
  1041  000025                     ModbusValidateRequest@i:
  1042                           	opt stack 0
  1043  000025                     ModbusProcess_FC1@u16Coilno:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x24
  1047  000025                     	ds	1
  1048  000026                     ModbusValidateRequest@readDevId:
  1049                           	opt stack 0
  1050  000026                     ModbusProcess_FC15@u8currentBit:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x25
  1054  000026                     	ds	1
  1055  000027                     ModbusValidateRequest@u8regs:
  1056                           	opt stack 0
  1057  000027                     ModbusProcess_FC15@regs:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x26
  1061  000027                     	ds	1
  1062  000028                     ModbusProcess_FC15@u8bitsno:
  1063                           	opt stack 0
  1064  000028                     ModbusValidateRequest@u16regs:
  1065                           	opt stack 0
  1066  000028                     _ymd_to_scalar$2156:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x27
  1070  000028                     	ds	2
  1071  00002A                     ModbusPoll@discreteInputs:
  1072                           	opt stack 0
  1073  00002A                     ymd_to_scalar@scalar:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x29
  1077  00002A                     	ds	2
  1078  00002C                     ModbusPoll@coils:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x2B
  1082  00002C                     	ds	1
  1083  00002D                     ModbusPoll@inputRegs:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x2C
  1087  00002D                     	ds	1
  1088  00002E                     ?_mktime:
  1089                           	opt stack 0
  1090                           
  1091                           ; 4 bytes @ 0x2D
  1092  00002E                     	ds	1
  1093  00002F                     ModbusPoll@inputRegsCount:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x2E
  1097  00002F                     	ds	1
  1098  000030                     ModbusPoll@holdingRegs:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x2F
  1102  000030                     	ds	2
  1103  000032                     ??_mktime:
  1104  000032                     ModbusPoll@holdingRegsCount:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x31
  1108  000032                     	ds	1
  1109  000033                     ModbusPoll@u8current:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x32
  1113  000033                     	ds	1
  1114  000034                     ModbusPoll@i8state:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x33
  1118  000034                     	ds	1
  1119  000035                     ModbusPoll@u8exception:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x34
  1123  000035                     	ds	11
  1124  000040                     mktime@tt:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x3F
  1128  000040                     	ds	4
  1129  000044                     mktime@timeptr:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x43
  1133  000044                     	ds	1
  1134  000045                     SetTimeFromRegs@daySec:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x44
  1138  000045                     	ds	1
  1139  000046                     SetTimeFromRegs@yearMonth:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x45
  1143  000046                     	ds	1
  1144  000047                     ??_SetTimeFromRegs:
  1145                           
  1146                           ; 1 bytes @ 0x46
  1147  000047                     	ds	2
  1148  000049                     SetTimeFromRegs@newRawTime:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x48
  1152  000049                     	ds	4
  1153  00004D                     SetTimeFromRegs@hourMin:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x4C
  1157  00004D                     	ds	1
  1158  00004E                     SetTimeFromRegs@newTime:
  1159                           	opt stack 0
  1160                           
  1161                           ; 18 bytes @ 0x4D
  1162  00004E                     	ds	18
  1163  000060                     SetTimeCommand@hourMin:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x5F
  1167  000060                     	ds	2
  1168  000062                     SetTimeCommand@daySec:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x61
  1172  000062                     	ds	2
  1173  000064                     SetTimeCommand@yearMonth:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x63
  1177  000064                     	ds	2
  1178  000066                     ??_io_poll:
  1179                           
  1180                           ; 1 bytes @ 0x65
  1181  000066                     	ds	4
  1182  00006A                     ??_main:
  1183                           
  1184                           ; 1 bytes @ 0x69
  1185  00006A                     	ds	5
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postdec1	equ	0xFE5
  1193                           fsr1h	equ	0xFE2
  1194                           fsr1l	equ	0xFE1
  1195                           
  1196 ;;
  1197 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1198 ;;
  1199 ;; *************** function _main *****************
  1200 ;; Defined at:
  1201 ;;		line 666 in file "main.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  minute          1   22[BANK0 ] unsigned char 
  1206 ;;  hour            1   17[BANK0 ] unsigned char 
  1207 ;;  curMs           4   18[BANK0 ] unsigned long 
  1208 ;;  oldBuzzerOnT    4   12[BANK0 ] unsigned long 
  1209 ;;  lastMs          4    8[BANK0 ] unsigned long 
  1210 ;;  oldMinute       1   16[BANK0 ] unsigned char 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1220 ;;      Params:         0       0       0       0       0       0       0
  1221 ;;      Locals:         0      15       0       0       0       0       0
  1222 ;;      Temps:          5       0       0       0       0       0       0
  1223 ;;      Totals:         5      15       0       0       0       0       0
  1224 ;;Total ram usage:       20 bytes
  1225 ;; Hardware stack levels required when called:    9
  1226 ;; This function calls:
  1227 ;;		_AddSecond
  1228 ;;		_ConfigureOscillator
  1229 ;;		_GetTime
  1230 ;;		_InitApp
  1231 ;;		_InitFromEeprom
  1232 ;;		_LightStatusLed
  1233 ;;		_ModbusPoll
  1234 ;;		_ProcessDiary
  1235 ;;		_ProcessLightBlock
  1236 ;;		_ResetEvent
  1237 ;;		_SetBuzzerDuty
  1238 ;;		_getHourMin
  1239 ;;		_io_poll
  1240 ;;		_millis
  1241 ;;		_pwm_init
  1242 ;; This function is called by:
  1243 ;;		Startup code after reset
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text0
  1248  0010A2                     __ptext0:
  1249                           	opt stack 0
  1250  0010A2                     _main:
  1251                           	opt stack 22
  1252                           
  1253                           ;incstack = 0
  1254  0010A2  FFFF               	dw	65535
  1255                           
  1256                           ;main.c: 669: ConfigureOscillator();
  1257  0010A4  EC05  F015         	call	_ConfigureOscillator	;wreg free
  1258                           
  1259                           ;main.c: 672: InitApp();
  1260  0010A8  ECF1  F010         	call	_InitApp	;wreg free
  1261                           
  1262                           ;main.c: 676: InitFromEeprom();
  1263  0010AC  ECBD  F00D         	call	_InitFromEeprom	;wreg free
  1264                           
  1265                           ;main.c: 685: unsigned long lastMs = millis();
  1266  0010B0  EC63  F014         	call	_millis	;wreg free
  1267  0010B4  C007  F0DD         	movff	?_millis,main@lastMs
  1268  0010B8  C008  F0DE         	movff	?_millis+1,main@lastMs+1
  1269  0010BC  C009  F0DF         	movff	?_millis+2,main@lastMs+2
  1270  0010C0  C00A  F0E0         	movff	?_millis+3,main@lastMs+3
  1271                           
  1272                           ;main.c: 688: pwm_init();
  1273  0010C4  ECE5  F014         	call	_pwm_init	;wreg free
  1274                           
  1275                           ;main.c: 694: unsigned long oldBuzzerOnTime = 0;
  1276  0010C8  0100               	movlb	0	; () banked
  1277  0010CA  6BE1               	clrf	main@oldBuzzerOnTime& (0+255),b
  1278  0010CC  6BE2               	clrf	(main@oldBuzzerOnTime+1)& (0+255),b
  1279  0010CE  6BE3               	clrf	(main@oldBuzzerOnTime+2)& (0+255),b
  1280  0010D0  6BE4               	clrf	(main@oldBuzzerOnTime+3)& (0+255),b
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 695: uint8_t oldMinute = 0xff;
  1284  0010D2  69E5               	setf	main@oldMinute& (0+255),b
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 697: LightStatusLed(0x07, 1, 0);
  1288  0010D4  0E01               	movlw	1
  1289  0010D6  6E07               	movwf	LightStatusLed@on,c
  1290  0010D8  0E00               	movlw	0
  1291  0010DA  6E08               	movwf	LightStatusLed@blink,c
  1292  0010DC  0E07               	movlw	7
  1293  0010DE  EC42  F00D         	call	_LightStatusLed
  1294                           
  1295                           ;main.c: 698: LightStatusLed(0x05, 1, 1);
  1296  0010E2  0E01               	movlw	1
  1297  0010E4  6E07               	movwf	LightStatusLed@on,c
  1298  0010E6  6E08               	movwf	LightStatusLed@blink,c
  1299  0010E8  0E05               	movlw	5
  1300  0010EA  EC42  F00D         	call	_LightStatusLed
  1301  0010EE                     l5398:
  1302  0010EE  FFFF               	dw	65535	; assembler added errata NOP
  1303                           
  1304                           ;main.c: 700: {
  1305                           ;main.c: 701: unsigned long curMs = millis();
  1306  0010F0  EC63  F014         	call	_millis	;wreg free
  1307  0010F4  C007  F0E7         	movff	?_millis,main@curMs
  1308  0010F8  C008  F0E8         	movff	?_millis+1,main@curMs+1
  1309  0010FC  C009  F0E9         	movff	?_millis+2,main@curMs+2
  1310  001100  C00A  F0EA         	movff	?_millis+3,main@curMs+3
  1311                           
  1312                           ;main.c: 702: ProcessLightBlock(&curMs);
  1313  001104  0EE7               	movlw	main@curMs& (0+255)
  1314  001106  ECC0  F004         	call	_ProcessLightBlock
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 706: if(currentAlarmedEventNum != 0xff)
  1318  00110A  2875               	incf	_currentAlarmedEventNum,w,c
  1319  00110C  E044               	bz	l382
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 707: {
  1323                           ;main.c: 708: diffTime = curMs - oldBuzzerOnTime;
  1324  00110E  51E1               	movf	main@oldBuzzerOnTime& (0+255),w,b
  1325  001110  5DE7               	subwf	main@curMs& (0+255),w,b
  1326  001112  6FA4               	movwf	_diffTime& (0+255),b
  1327  001114  51E2               	movf	(main@oldBuzzerOnTime+1)& (0+255),w,b
  1328  001116  59E8               	subwfb	(main@curMs+1)& (0+255),w,b
  1329  001118  6FA5               	movwf	(_diffTime+1)& (0+255),b
  1330  00111A  51E3               	movf	(main@oldBuzzerOnTime+2)& (0+255),w,b
  1331  00111C  59E9               	subwfb	(main@curMs+2)& (0+255),w,b
  1332  00111E  6FA6               	movwf	(_diffTime+2)& (0+255),b
  1333  001120  51E4               	movf	(main@oldBuzzerOnTime+3)& (0+255),w,b
  1334  001122  59EA               	subwfb	(main@curMs+3)& (0+255),w,b
  1335  001124  6FA7               	movwf	(_diffTime+3)& (0+255),b
  1336                           
  1337                           ;main.c: 709: if(diffTime > buzzerOnOffPeriod)
  1338  001126  51EE               	movf	_buzzerOnOffPeriod& (0+255),w,b
  1339  001128  6E6A               	movwf	??_main& (0+255),c
  1340  00112A  51EF               	movf	(_buzzerOnOffPeriod+1)& (0+255),w,b
  1341  00112C  6E6B               	movwf	(??_main+1)& (0+255),c
  1342  00112E  6A6C               	clrf	(??_main+2)& (0+255),c
  1343  001130  6A6D               	clrf	(??_main+3)& (0+255),c
  1344  001132  51A4               	movf	_diffTime& (0+255),w,b
  1345  001134  5C6A               	subwf	??_main,w,c
  1346  001136  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1347  001138  586B               	subwfb	??_main+1,w,c
  1348  00113A  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1349  00113C  586C               	subwfb	??_main+2,w,c
  1350  00113E  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1351  001140  586D               	subwfb	??_main+3,w,c
  1352  001142  E215               	bc	l5418
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 710: {
  1356                           ;main.c: 711: SetBuzzerDuty(buzzeLoudDuration);
  1357  001144  C0C7  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  1358  001148  6A08               	clrf	SetBuzzerDuty@dc+1,c
  1359  00114A  EC44  F012         	call	_SetBuzzerDuty	;wreg free
  1360                           
  1361                           ;main.c: 712: PR2 = buzzerAlarmPeriod;
  1362  00114E  C0C8  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  1363                           
  1364                           ;main.c: 713: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  1365  001152  9494               	bcf	3988,2,c	;volatile
  1366  001154  84CA               	bsf	4042,2,c	;volatile
  1367  001156  0E01               	movlw	1
  1368  001158  0100               	movlb	0	; () banked
  1369  00115A  6FBE               	movwf	_IsBusserOn& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 714: oldBuzzerOnTime = curMs;
  1373  00115C  C0E7  F0E1         	movff	main@curMs,main@oldBuzzerOnTime
  1374  001160  C0E8  F0E2         	movff	main@curMs+1,main@oldBuzzerOnTime+1
  1375  001164  C0E9  F0E3         	movff	main@curMs+2,main@oldBuzzerOnTime+2
  1376  001168  C0EA  F0E4         	movff	main@curMs+3,main@oldBuzzerOnTime+3
  1377                           
  1378                           ;main.c: 715: }
  1379  00116C  D014               	goto	l382
  1380  00116E                     l5418:
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;main.c: 716: else if(IsBusserOn && diffTime > buzzerOnOffDuration)
  1384  00116E  51BE               	movf	_IsBusserOn& (0+255),w,b
  1385  001170  E012               	bz	l382
  1386                           
  1387                           ; BSR set to: 0
  1388  001172  51EC               	movf	_buzzerOnOffDuration& (0+255),w,b
  1389  001174  6E6A               	movwf	??_main& (0+255),c
  1390  001176  51ED               	movf	(_buzzerOnOffDuration+1)& (0+255),w,b
  1391  001178  6E6B               	movwf	(??_main+1)& (0+255),c
  1392  00117A  6A6C               	clrf	(??_main+2)& (0+255),c
  1393  00117C  6A6D               	clrf	(??_main+3)& (0+255),c
  1394  00117E  51A4               	movf	_diffTime& (0+255),w,b
  1395  001180  5C6A               	subwf	??_main,w,c
  1396  001182  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1397  001184  586B               	subwfb	??_main+1,w,c
  1398  001186  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1399  001188  586C               	subwfb	??_main+2,w,c
  1400  00118A  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1401  00118C  586D               	subwfb	??_main+3,w,c
  1402  00118E  E203               	bc	l382
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 717: {
  1406                           ;main.c: 718: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  1407  001190  94CA               	bcf	4042,2,c	;volatile
  1408  001192  8494               	bsf	3988,2,c	;volatile
  1409  001194  6BBE               	clrf	_IsBusserOn& (0+255),b
  1410  001196                     l382:
  1411  001196  FFFF               	dw	65535	; assembler added errata NOP
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;main.c: 719: }
  1415                           ;main.c: 720: }
  1416                           ;main.c: 723: if(PORTCbits.RC1 == 0)
  1417  001198  B282               	btfsc	3970,1,c	;volatile
  1418  00119A  D005               	goto	l5428
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 724: {
  1422                           ;main.c: 726: if(currentAlarmedEventNum != 0xff)
  1423  00119C  2875               	incf	_currentAlarmedEventNum,w,c
  1424  00119E  E003               	bz	l5428
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 727: {
  1428                           ;main.c: 728: ResetEvent(1);
  1429  0011A0  0E01               	movlw	1
  1430  0011A2  ECC4  F013         	call	_ResetEvent
  1431  0011A6                     l5428:
  1432  0011A6  FFFF               	dw	65535	; assembler added errata NOP
  1433                           
  1434                           ;main.c: 729: }
  1435                           ;main.c: 746: }
  1436                           ;main.c: 753: if(curMs - lastMs >= 1000)
  1437  0011A8  0100               	movlb	0	; () banked
  1438  0011AA  51DD               	movf	main@lastMs& (0+255),w,b
  1439  0011AC  5DE7               	subwf	main@curMs& (0+255),w,b
  1440  0011AE  6E6A               	movwf	??_main& (0+255),c
  1441  0011B0  51DE               	movf	(main@lastMs+1)& (0+255),w,b
  1442  0011B2  59E8               	subwfb	(main@curMs+1)& (0+255),w,b
  1443  0011B4  6E6B               	movwf	(??_main+1)& (0+255),c
  1444  0011B6  51DF               	movf	(main@lastMs+2)& (0+255),w,b
  1445  0011B8  59E9               	subwfb	(main@curMs+2)& (0+255),w,b
  1446  0011BA  6E6C               	movwf	(??_main+2)& (0+255),c
  1447  0011BC  51E0               	movf	(main@lastMs+3)& (0+255),w,b
  1448  0011BE  59EA               	subwfb	(main@curMs+3)& (0+255),w,b
  1449  0011C0  6E6D               	movwf	(??_main+3)& (0+255),c
  1450  0011C2  506D               	movf	??_main+3,w,c
  1451  0011C4  106C               	iorwf	??_main+2,w,c
  1452  0011C6  E105               	bnz	u4840
  1453  0011C8  0EE8               	movlw	232
  1454  0011CA  5C6A               	subwf	??_main,w,c
  1455  0011CC  0E03               	movlw	3
  1456  0011CE  586B               	subwfb	??_main+1,w,c
  1457  0011D0  E34A               	bnc	l5458
  1458  0011D2                     u4840:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;main.c: 754: {
  1462                           ;main.c: 755: AddSecond();
  1463  0011D2  ECEE  F014         	call	_AddSecond	;wreg free
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 757: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1467  0011D6  2875               	incf	_currentAlarmedEventNum,w,c
  1468  0011D8  E015               	bz	l5438
  1469                           
  1470                           ; BSR set to: 0
  1471  0011DA  ECFD  F014         	call	_GetTime	;wreg free
  1472  0011DE  6ED9               	movwf	fsr2l,c
  1473  0011E0  6ADA               	clrf	fsr2h,c
  1474  0011E2  0100               	movlb	0	; () banked
  1475  0011E4  51A8               	movf	_eventResetSecond& (0+255),w,b
  1476  0011E6  5CDE               	subwf	postinc2,w,c
  1477  0011E8  51A9               	movf	(_eventResetSecond+1)& (0+255),w,b
  1478  0011EA  58DE               	subwfb	postinc2,w,c
  1479  0011EC  51AA               	movf	(_eventResetSecond+2)& (0+255),w,b
  1480  0011EE  58DE               	subwfb	postinc2,w,c
  1481  0011F0  50DE               	movf	postinc2,w,c
  1482  0011F2  0A80               	xorlw	128
  1483  0011F4  6E6E               	movwf	(??_main+4)& (0+255),c
  1484  0011F6  51AB               	movf	(_eventResetSecond+3)& (0+255),w,b
  1485  0011F8  0A80               	xorlw	128
  1486  0011FA  586E               	subwfb	(??_main+4)& (0+255),w,c
  1487  0011FC  E303               	bnc	l5438
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 758: {
  1491                           ;main.c: 759: ResetEvent(0);
  1492  0011FE  0E00               	movlw	0
  1493  001200  ECC4  F013         	call	_ResetEvent
  1494  001204                     l5438:
  1495                           
  1496                           ;main.c: 760: }
  1497                           ;main.c: 762: _MODBUSInputRegs[5] = *GetTime();
  1498  001204  ECFD  F014         	call	_GetTime	;wreg free
  1499  001208  6ED9               	movwf	fsr2l,c
  1500  00120A  6ADA               	clrf	fsr2h,c
  1501  00120C  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1502  001210  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1503                           
  1504                           ;main.c: 763: uint8_t hour = 0, minute = 0;
  1505  001214  0100               	movlb	0	; () banked
  1506  001216  6BE6               	clrf	main@hour& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509  001218  6BEB               	clrf	main@minute& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;main.c: 765: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1513  00121A  0EEB               	movlw	low main@minute
  1514  00121C  6E07               	movwf	getHourMin@min,c
  1515  00121E  0EE6               	movlw	main@hour& (0+255)
  1516  001220  EC4D  F014         	call	_getHourMin
  1517  001224  0900               	iorlw	0
  1518  001226  E00F               	bz	l5454
  1519  001228  0100               	movlb	0	; () banked
  1520  00122A  51EB               	movf	main@minute& (0+255),w,b
  1521  00122C  19E5               	xorwf	main@oldMinute& (0+255),w,b
  1522  00122E  E00B               	bz	l5454
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;main.c: 766: {
  1526                           ;main.c: 767: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1527  001230  51E6               	movf	main@hour& (0+255),w,b
  1528  001232  6E6A               	movwf	??_main& (0+255),c
  1529  001234  51EB               	movf	main@minute& (0+255),w,b
  1530  001236  0101               	movlb	1	; () banked
  1531  001238  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1532  00123A  C06A  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1533                           
  1534                           ; BSR set to: 1
  1535                           ;main.c: 769: oldMinute = minute;
  1536  00123E  C0EB  F0E5         	movff	main@minute,main@oldMinute
  1537                           
  1538                           ; BSR set to: 1
  1539                           ;main.c: 770: ProcessDiary();
  1540  001242  ECFB  F00E         	call	_ProcessDiary	;wreg free
  1541  001246                     l5454:
  1542                           
  1543                           ;main.c: 771: }
  1544                           ;main.c: 773: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1545  001246  0100               	movlb	0	; () banked
  1546  001248  51E6               	movf	main@hour& (0+255),w,b
  1547  00124A  6E6A               	movwf	??_main& (0+255),c
  1548  00124C  51EB               	movf	main@minute& (0+255),w,b
  1549  00124E  0101               	movlb	1	; () banked
  1550  001250  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1551  001252  C06A  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1552                           
  1553                           ; BSR set to: 1
  1554                           ;main.c: 775: lastMs = curMs;
  1555  001256  C0E7  F0DD         	movff	main@curMs,main@lastMs
  1556  00125A  C0E8  F0DE         	movff	main@curMs+1,main@lastMs+1
  1557  00125E  C0E9  F0DF         	movff	main@curMs+2,main@lastMs+2
  1558  001262  C0EA  F0E0         	movff	main@curMs+3,main@lastMs+3
  1559  001266                     l5458:
  1560                           
  1561                           ;main.c: 777: }
  1562                           ;main.c: 778: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1563  001266  C0B4  F02A         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1564  00126A  C0B5  F02B         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1565  00126E  0ED2               	movlw	low __MODBUSCoils
  1566  001270  6E2C               	movwf	ModbusPoll@coils,c
  1567  001272  0EAA               	movlw	low __MODBUSInputRegs
  1568  001274  6E2D               	movwf	ModbusPoll@inputRegs,c
  1569  001276  0E01               	movlw	high __MODBUSInputRegs
  1570  001278  6E2E               	movwf	ModbusPoll@inputRegs+1,c
  1571  00127A  0E0F               	movlw	15
  1572  00127C  6E2F               	movwf	ModbusPoll@inputRegsCount,c
  1573  00127E  0E8C               	movlw	low __MODBUSHoldingRegs
  1574  001280  6E30               	movwf	ModbusPoll@holdingRegs,c
  1575  001282  0E01               	movlw	high __MODBUSHoldingRegs
  1576  001284  6E31               	movwf	ModbusPoll@holdingRegs+1,c
  1577  001286  0E0F               	movlw	15
  1578  001288  6E32               	movwf	ModbusPoll@holdingRegsCount,c
  1579  00128A  EC3D  F00A         	call	_ModbusPoll	;wreg free
  1580                           
  1581                           ;main.c: 779: io_poll();
  1582  00128E  EC4A  F009         	call	_io_poll	;wreg free
  1583  001292  D72D               	goto	l5398
  1584  001294                     __end_of_main:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1h	equ	0xFE2
  1594                           fsr1l	equ	0xFE1
  1595                           postinc2	equ	0xFDE
  1596                           postdec2	equ	0xFDD
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           
  1600 ;; *************** function _pwm_init *****************
  1601 ;; Defined at:
  1602 ;;		line 398 in file "main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    2
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text1
  1631  0029CA                     __ptext1:
  1632                           	opt stack 0
  1633  0029CA                     _pwm_init:
  1634                           	opt stack 28
  1635                           
  1636                           ;incstack = 0
  1637  0029CA  FFFF               	dw	65535
  1638                           
  1639                           ;main.c: 410: CCP1CONbits.CCP1M = 0x0f;
  1640  0029CC  0E0F               	movlw	15
  1641  0029CE  12BD               	iorwf	4029,f,c	;volatile
  1642                           
  1643                           ;main.c: 415: PR2 = 255;
  1644  0029D0  68CB               	setf	4043,c	;volatile
  1645                           
  1646                           ;main.c: 418: T2CONbits.T2CKPS1 = 1;
  1647  0029D2  82CA               	bsf	4042,1,c	;volatile
  1648                           
  1649                           ;main.c: 419: T2CONbits.T2CKPS0 = 0;
  1650  0029D4  90CA               	bcf	4042,0,c	;volatile
  1651                           
  1652                           ;main.c: 422: TRISCbits.RC2 = 0;
  1653  0029D6  9494               	bcf	3988,2,c	;volatile
  1654  0029D8  0012               	return		;funcret
  1655  0029DA  FFFF               	dw	65535	; errata NOP
  1656  0029DC                     __end_of_pwm_init:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1h	equ	0xFE2
  1666                           fsr1l	equ	0xFE1
  1667                           postinc2	equ	0xFDE
  1668                           postdec2	equ	0xFDD
  1669                           fsr2h	equ	0xFDA
  1670                           fsr2l	equ	0xFD9
  1671                           
  1672 ;; *************** function _io_poll *****************
  1673 ;; Defined at:
  1674 ;;		line 813 in file "main.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  eventEeAddr     1    3[BANK0 ] unsigned char 
  1679 ;;  hourMin         2    0        unsigned int 
  1680 ;;  command         1    0[BANK0 ] unsigned char 
  1681 ;;  lastAddress     2    4[BANK0 ] unsigned int 
  1682 ;;  lastEndAddre    2    1[BANK0 ] unsigned int 
  1683 ;;  v1              1    7[BANK0 ] unsigned char 
  1684 ;;  lastCommand     1    6[BANK0 ] PTR unsigned char 
  1685 ;;		 -> _lastCommand(1), 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1695 ;;      Params:         0       0       0       0       0       0       0
  1696 ;;      Locals:         0       8       0       0       0       0       0
  1697 ;;      Temps:          4       0       0       0       0       0       0
  1698 ;;      Totals:         4       8       0       0       0       0       0
  1699 ;;Total ram usage:       12 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    8
  1702 ;; This function calls:
  1703 ;;		_InitFromEeprom
  1704 ;;		_LightLed
  1705 ;;		_ModbusGetLastCommand
  1706 ;;		_ModbusSetExceptionStatusBit
  1707 ;;		_SetTimeCommand
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text2
  1714  001294                     __ptext2:
  1715                           	opt stack 0
  1716  001294                     _io_poll:
  1717                           	opt stack 22
  1718                           
  1719                           ;incstack = 0
  1720  001294  FFFF               	dw	65535
  1721                           
  1722                           ;main.c: 815: uint16_t lastAddress;
  1723                           ;main.c: 816: uint16_t lastEndAddress;
  1724                           ;main.c: 818: uint8_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastEndAddress)
      +                          ;
  1725  001296  0ED6               	movlw	low io_poll@lastEndAddress
  1726  001298  6E07               	movwf	ModbusGetLastCommand@count,c
  1727  00129A  0ED9               	movlw	io_poll@lastAddress& (0+255)
  1728  00129C  EC36  F014         	call	_ModbusGetLastCommand
  1729  0012A0  0100               	movlb	0	; () banked
  1730  0012A2  6FDB               	movwf	io_poll@lastCommand& (0+255),b
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 819: if(*lastCommand == MB_FC_NONE)
  1734  0012A4  51DB               	movf	io_poll@lastCommand& (0+255),w,b
  1735  0012A6  6ED9               	movwf	fsr2l,c
  1736  0012A8  6ADA               	clrf	fsr2h,c
  1737  0012AA  50DF               	movf	indf2,w,c
  1738  0012AC  E101 D0E2          	bz	l403
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 822: lastEndAddress += lastAddress - 1;
  1742  0012B0  6866               	setf	??_io_poll& (0+255),c
  1743  0012B2  6867               	setf	(??_io_poll+1)& (0+255),c
  1744  0012B4  C0D9  F068         	movff	io_poll@lastAddress,??_io_poll+2
  1745  0012B8  C0DA  F069         	movff	io_poll@lastAddress+1,??_io_poll+3
  1746  0012BC  5066               	movf	??_io_poll,w,c
  1747  0012BE  2668               	addwf	??_io_poll+2,f,c
  1748  0012C0  5067               	movf	??_io_poll+1,w,c
  1749  0012C2  2269               	addwfc	??_io_poll+3,f,c
  1750  0012C4  5068               	movf	??_io_poll+2,w,c
  1751  0012C6  27D6               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1752  0012C8  5069               	movf	??_io_poll+3,w,c
  1753  0012CA  23D7               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 824: uint8_t v1;
  1757                           ;main.c: 825: if(*lastCommand == MB_FC_WRITE_REGISTER || *lastCommand == MB_FC_WRITE_MUL
      +                          TIPLE_REGISTERS)
  1758  0012CC  51DB               	movf	io_poll@lastCommand& (0+255),w,b
  1759  0012CE  6ED9               	movwf	fsr2l,c
  1760  0012D0  6ADA               	clrf	fsr2h,c
  1761  0012D2  0E06               	movlw	6
  1762  0012D4  18DE               	xorwf	postinc2,w,c
  1763  0012D6  E007               	bz	l5268
  1764                           
  1765                           ; BSR set to: 0
  1766  0012D8  51DB               	movf	io_poll@lastCommand& (0+255),w,b
  1767  0012DA  6ED9               	movwf	fsr2l,c
  1768  0012DC  6ADA               	clrf	fsr2h,c
  1769  0012DE  0E10               	movlw	16
  1770  0012E0  18DE               	xorwf	postinc2,w,c
  1771  0012E2  E001 D0B9          	bnz	l5374
  1772  0012E6                     l5268:
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 826: {
  1776                           ;main.c: 828: if(lastAddress == 0)
  1777  0012E6  51D9               	movf	io_poll@lastAddress& (0+255),w,b
  1778  0012E8  11DA               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1779  0012EA  E001 D0B5          	bnz	l5374
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 829: {
  1783                           ;main.c: 830: uint8_t command = ((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF));
  1784  0012EE  C18D  F0D5         	movff	__MODBUSHoldingRegs+1,io_poll@command
  1785                           
  1786                           ;main.c: 831: uint16_t hourMin;
  1787                           ;main.c: 832: switch(command)
  1788  0012F2  D09A               	goto	l5372
  1789  0012F4                     l409:
  1790                           
  1791                           ; BSR set to: 0
  1792  0012F4  00FF               	reset		; ;# 
  1793                           
  1794                           ;main.c: 838: return;
  1795  0012F6  D0BE               	goto	l403
  1796  0012F8                     l5272:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 842: SetTimeCommand();
  1800  0012F8  EC1E  F014         	call	_SetTimeCommand	;wreg free
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;main.c: 843: ModbusSetExceptionStatusBit(0, 1);
  1804  0012FC  0E01               	movlw	1
  1805  0012FE  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1806  001300  0E00               	movlw	0
  1807  001302  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  1808                           
  1809                           ;main.c: 844: break;
  1810  001306  D0A2               	goto	l411
  1811  001308                     l413:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 848: eventCount = 0;
  1815  001308  6A72               	clrf	_eventCount,c
  1816  00130A                     l415:
  1817  00130A  FFFF               	dw	65535	; assembler added errata NOP
  1818  00130C  B2A6               	btfsc	4006,1,c	;volatile
  1819  00130E  D7FD               	goto	l415
  1820  001310  0E12               	movlw	18
  1821  001312  6EA9               	movwf	4009,c	;volatile
  1822  001314  6AA8               	clrf	4008,c	;volatile
  1823  001316  90D8               	bcf	status,0,c	;volatile
  1824  001318  BEF2               	btfsc	intcon,7,c	;volatile
  1825  00131A  80D8               	bsf	status,0,c	;volatile
  1826  00131C  9EF2               	bcf	intcon,7,c	;volatile
  1827  00131E  84A6               	bsf	4006,2,c	;volatile
  1828  001320  0E55               	movlw	85
  1829  001322  6EA7               	movwf	4007,c	;volatile
  1830  001324  0EAA               	movlw	170
  1831  001326  6EA7               	movwf	4007,c	;volatile
  1832  001328  82A6               	bsf	4006,1,c	;volatile
  1833  00132A  94A6               	bcf	4006,2,c	;volatile
  1834  00132C  E301               	bnc	l5296
  1835  00132E  8EF2               	bsf	intcon,7,c	;volatile
  1836  001330                     l5296:
  1837                           
  1838                           ;main.c: 850: ModbusSetExceptionStatusBit(0, 1);
  1839  001330  0E01               	movlw	1
  1840  001332  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1841  001334  0E00               	movlw	0
  1842  001336  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  1843                           
  1844                           ;main.c: 851: break;
  1845  00133A  D088               	goto	l411
  1846  00133C                     l5298:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;main.c: 854: if(eventCount < 60)
  1850  00133C  0E3C               	movlw	60
  1851  00133E  6072               	cpfslt	_eventCount,c
  1852  001340  D056               	goto	l5362
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 855: {
  1856                           ;main.c: 856: uint8_t eventEeAddr = 18 + 1 + (eventCount << 1);
  1857  001342  5072               	movf	_eventCount,w,c
  1858  001344  0D02               	mullw	2
  1859  001346  50F3               	movf	prodl,w,c
  1860  001348  0F13               	addlw	19
  1861  00134A  6FD8               	movwf	io_poll@eventEeAddr& (0+255),b
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 857: v1 = ((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF));
  1865  00134C  0101               	movlb	1	; () banked
  1866  00134E  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  1867  001350  0100               	movlb	0	; () banked
  1868  001352  6FDC               	movwf	io_poll@v1& (0+255),b
  1869  001354                     l424:
  1870  001354  FFFF               	dw	65535	; assembler added errata NOP
  1871  001356  B2A6               	btfsc	4006,1,c	;volatile
  1872  001358  D7FD               	goto	l424
  1873  00135A  C0D8  FFA9         	movff	io_poll@eventEeAddr,4009	;volatile
  1874  00135E  C0DC  FFA8         	movff	io_poll@v1,4008	;volatile
  1875  001362  90D8               	bcf	status,0,c	;volatile
  1876  001364  BEF2               	btfsc	intcon,7,c	;volatile
  1877  001366  80D8               	bsf	status,0,c	;volatile
  1878  001368  9EF2               	bcf	intcon,7,c	;volatile
  1879  00136A  84A6               	bsf	4006,2,c	;volatile
  1880  00136C  0E55               	movlw	85
  1881  00136E  6EA7               	movwf	4007,c	;volatile
  1882  001370  0EAA               	movlw	170
  1883  001372  6EA7               	movwf	4007,c	;volatile
  1884  001374  82A6               	bsf	4006,1,c	;volatile
  1885  001376  94A6               	bcf	4006,2,c	;volatile
  1886  001378  E301               	bnc	l429
  1887  00137A  8EF2               	bsf	intcon,7,c	;volatile
  1888  00137C                     l429:
  1889                           
  1890                           ;main.c: 859: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1891  00137C  C18E  F0DC         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1892  001380                     l431:
  1893  001380  FFFF               	dw	65535	; assembler added errata NOP
  1894  001382  B2A6               	btfsc	4006,1,c	;volatile
  1895  001384  D7FD               	goto	l431
  1896  001386  0100               	movlb	0	; () banked
  1897  001388  29D8               	incf	io_poll@eventEeAddr& (0+255),w,b
  1898  00138A  6EA9               	movwf	4009,c	;volatile
  1899                           
  1900                           ; BSR set to: 0
  1901  00138C  C0DC  FFA8         	movff	io_poll@v1,4008	;volatile
  1902                           
  1903                           ; BSR set to: 0
  1904  001390  90D8               	bcf	status,0,c	;volatile
  1905                           
  1906                           ; BSR set to: 0
  1907  001392  BEF2               	btfsc	intcon,7,c	;volatile
  1908                           
  1909                           ; BSR set to: 0
  1910  001394  80D8               	bsf	status,0,c	;volatile
  1911                           
  1912                           ; BSR set to: 0
  1913  001396  9EF2               	bcf	intcon,7,c	;volatile
  1914  001398  84A6               	bsf	4006,2,c	;volatile
  1915                           
  1916                           ; BSR set to: 0
  1917  00139A  0E55               	movlw	85
  1918  00139C  6EA7               	movwf	4007,c	;volatile
  1919  00139E  0EAA               	movlw	170
  1920  0013A0  6EA7               	movwf	4007,c	;volatile
  1921                           
  1922                           ; BSR set to: 0
  1923  0013A2  82A6               	bsf	4006,1,c	;volatile
  1924                           
  1925                           ; BSR set to: 0
  1926  0013A4  94A6               	bcf	4006,2,c	;volatile
  1927                           
  1928                           ; BSR set to: 0
  1929  0013A6  E301               	bnc	l5336
  1930                           
  1931                           ; BSR set to: 0
  1932  0013A8  8EF2               	bsf	intcon,7,c	;volatile
  1933  0013AA                     l5336:
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;main.c: 863: LightLed(eventCount, LED_GREEN, 0);
  1937  0013AA  0E01               	movlw	1
  1938  0013AC  6E07               	movwf	LightLed@ledState,c
  1939  0013AE  0E00               	movlw	0
  1940  0013B0  6E08               	movwf	LightLed@blink,c
  1941  0013B2  5072               	movf	_eventCount,w,c
  1942  0013B4  EC29  F007         	call	_LightLed
  1943                           
  1944                           ;main.c: 865: eventCount++;
  1945  0013B8  2A72               	incf	_eventCount,f,c
  1946  0013BA                     l438:
  1947  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  1948  0013BC  B2A6               	btfsc	4006,1,c	;volatile
  1949  0013BE  D7FD               	goto	l438
  1950  0013C0  0E12               	movlw	18
  1951  0013C2  6EA9               	movwf	4009,c	;volatile
  1952  0013C4  C072  FFA8         	movff	_eventCount,4008	;volatile
  1953  0013C8  90D8               	bcf	status,0,c	;volatile
  1954  0013CA  BEF2               	btfsc	intcon,7,c	;volatile
  1955  0013CC  80D8               	bsf	status,0,c	;volatile
  1956  0013CE  9EF2               	bcf	intcon,7,c	;volatile
  1957  0013D0  84A6               	bsf	4006,2,c	;volatile
  1958  0013D2  0E55               	movlw	85
  1959  0013D4  6EA7               	movwf	4007,c	;volatile
  1960  0013D6  0EAA               	movlw	170
  1961  0013D8  6EA7               	movwf	4007,c	;volatile
  1962  0013DA  82A6               	bsf	4006,1,c	;volatile
  1963  0013DC  94A6               	bcf	4006,2,c	;volatile
  1964  0013DE  E301               	bnc	l5360
  1965  0013E0  8EF2               	bsf	intcon,7,c	;volatile
  1966  0013E2                     l5360:
  1967                           
  1968                           ;main.c: 868: ModbusSetExceptionStatusBit(0, 1);
  1969  0013E2  0E01               	movlw	1
  1970  0013E4  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1971  0013E6  0E00               	movlw	0
  1972  0013E8  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  1973                           
  1974                           ;main.c: 869: }
  1975  0013EC  D02F               	goto	l411
  1976  0013EE                     l5362:
  1977  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;main.c: 870: else
  1981                           ;main.c: 871: ModbusSetExceptionStatusBit(0, 0);
  1982  0013F0  0E00               	movlw	0
  1983  0013F2  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1984  0013F4  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  1985  0013F8  D029               	goto	l411
  1986  0013FA                     l445:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;main.c: 877: v1 = ((unsigned char)((_MODBUSHoldingRegs[1])&0xFF));
  1990  0013FA  C18E  F0DC         	movff	__MODBUSHoldingRegs+2,io_poll@v1
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 879: LightLed(((unsigned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1994  0013FE  51DC               	movf	io_poll@v1& (0+255),w,b
  1995  001400  0B03               	andlw	3
  1996  001402  6E07               	movwf	LightLed@ledState,c
  1997  001404  41DC               	rrncf	io_poll@v1& (0+255),w,b
  1998  001406  42E8               	rrncf	wreg,f,c
  1999  001408  0B3F               	andlw	63
  2000  00140A  0B01               	andlw	1
  2001  00140C  6E08               	movwf	LightLed@blink,c
  2002  00140E  0101               	movlb	1	; () banked
  2003  001410  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  2004  001412  EC29  F007         	call	_LightLed
  2005                           
  2006                           ;main.c: 880: _MODBUSHoldingRegs[1] = 0;
  2007  001416  0101               	movlb	1	; () banked
  2008  001418  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  2009  00141A  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  2010                           
  2011                           ; BSR set to: 1
  2012                           ;main.c: 881: ModbusSetExceptionStatusBit(0, 1);
  2013  00141C  0E01               	movlw	1
  2014  00141E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2015  001420  0E00               	movlw	0
  2016  001422  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  2017                           
  2018                           ;main.c: 882: break;
  2019  001426  D012               	goto	l411
  2020  001428                     l5372:
  2021  001428  FFFF               	dw	65535	; assembler added errata NOP
  2022                           
  2023                           ; BSR set to: 0
  2024  00142A  51D5               	movf	io_poll@command& (0+255),w,b
  2025                           
  2026                           ; Switch size 1, requested type "speed"
  2027                           ; Number of cases is 6, Range of values is 1 to 130
  2028                           ; switch strategies available:
  2029                           ; Name         Instructions Cycles
  2030                           ; simple_byte           19    10 (average)
  2031                           ;	Chosen strategy is simple_byte
  2032  00142C  0A01               	xorlw	1	; case 1
  2033  00142E  E00E               	bz	l411
  2034  001430  0A11               	xorlw	17	; case 16
  2035  001432  E101 D761          	bz	l5272
  2036  001436  0A6F               	xorlw	111	; case 127
  2037  001438  E101 D75C          	bz	l409
  2038  00143C  0AFF               	xorlw	255	; case 128
  2039  00143E  E101 D763          	bz	l413
  2040  001442  0A01               	xorlw	1	; case 129
  2041  001444  E101 D77A          	bz	l5298
  2042  001448  0A03               	xorlw	3	; case 130
  2043  00144A  E0D7               	bz	l445
  2044  00144C                     l411:
  2045  00144C  FFFF               	dw	65535	; assembler added errata NOP
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 885: _MODBUSHoldingRegs[0] = 0;
  2049  00144E  0101               	movlb	1	; () banked
  2050  001450  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  2051  001452  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  2052                           
  2053                           ;main.c: 886: _MODBUSHoldingRegs[1] = 0;
  2054  001454  6B8E               	clrf	(__MODBUSHoldingRegs+2)& (0+255),b
  2055  001456  6B8F               	clrf	(__MODBUSHoldingRegs+3)& (0+255),b
  2056  001458                     l5374:
  2057                           
  2058                           ;main.c: 887: }
  2059                           ;main.c: 902: }
  2060                           ;main.c: 939: if(*lastCommand == MB_FC_WRITE_FILE_RECORD)
  2061  001458  0100               	movlb	0	; () banked
  2062  00145A  51DB               	movf	io_poll@lastCommand& (0+255),w,b
  2063  00145C  6ED9               	movwf	fsr2l,c
  2064  00145E  6ADA               	clrf	fsr2h,c
  2065  001460  0E15               	movlw	21
  2066  001462  18DE               	xorwf	postinc2,w,c
  2067  001464  E107               	bnz	l403
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 940: {
  2071                           ;main.c: 941: InitFromEeprom();
  2072  001466  ECBD  F00D         	call	_InitFromEeprom	;wreg free
  2073                           
  2074                           ;main.c: 942: ModbusSetExceptionStatusBit(0, 1);
  2075  00146A  0E01               	movlw	1
  2076  00146C  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2077  00146E  0E00               	movlw	0
  2078  001470  ECEC  F012         	call	_ModbusSetExceptionStatusBit
  2079  001474                     l403:
  2080  001474  FFFF               	dw	65535	; assembler added errata NOP
  2081  001476  0012               	return		;funcret
  2082  001478  FFFF               	dw	65535	; errata NOP
  2083  00147A                     __end_of_io_poll:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1h	equ	0xFE2
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           postinc2	equ	0xFDE
  2098                           postdec2	equ	0xFDD
  2099                           fsr2h	equ	0xFDA
  2100                           fsr2l	equ	0xFD9
  2101                           status	equ	0xFD8
  2102                           
  2103 ;; *************** function _SetTimeCommand *****************
  2104 ;; Defined at:
  2105 ;;		line 802 in file "main.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  yearMonth       2   99[COMRAM] unsigned int 
  2110 ;;  daySec          2   97[COMRAM] unsigned int 
  2111 ;;  hourMin         2   95[COMRAM] unsigned int 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : F/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2121 ;;      Params:         0       0       0       0       0       0       0
  2122 ;;      Locals:         6       0       0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0
  2124 ;;      Totals:         6       0       0       0       0       0       0
  2125 ;;Total ram usage:        6 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    7
  2128 ;; This function calls:
  2129 ;;		_SetTimeFromRegs
  2130 ;; This function is called by:
  2131 ;;		_io_poll
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text3
  2136  00283C                     __ptext3:
  2137                           	opt stack 0
  2138  00283C                     _SetTimeCommand:
  2139                           	opt stack 22
  2140                           
  2141                           ;incstack = 0
  2142  00283C  FFFF               	dw	65535
  2143                           
  2144                           ;main.c: 804: uint16_t hourMin = _MODBUSHoldingRegs[1];
  2145  00283E  C18E  F060         	movff	__MODBUSHoldingRegs+2,SetTimeCommand@hourMin
  2146  002842  C18F  F061         	movff	__MODBUSHoldingRegs+3,SetTimeCommand@hourMin+1
  2147                           
  2148                           ;main.c: 806: uint16_t daySec = _MODBUSHoldingRegs[1 + 1];
  2149  002846  C190  F062         	movff	__MODBUSHoldingRegs+4,SetTimeCommand@daySec
  2150  00284A  C191  F063         	movff	__MODBUSHoldingRegs+5,SetTimeCommand@daySec+1
  2151                           
  2152                           ;main.c: 807: uint16_t yearMonth = _MODBUSHoldingRegs[1 + 2];
  2153  00284E  C192  F064         	movff	__MODBUSHoldingRegs+6,SetTimeCommand@yearMonth
  2154  002852  C193  F065         	movff	__MODBUSHoldingRegs+7,SetTimeCommand@yearMonth+1
  2155                           
  2156                           ;main.c: 808: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  2157  002856  0E62               	movlw	low SetTimeCommand@daySec
  2158  002858  6E45               	movwf	SetTimeFromRegs@daySec,c
  2159  00285A  0E64               	movlw	low SetTimeCommand@yearMonth
  2160  00285C  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  2161  00285E  0E60               	movlw	SetTimeCommand@hourMin& (0+255)
  2162  002860  EC9A  F00E         	call	_SetTimeFromRegs
  2163                           
  2164                           ;main.c: 809: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  2165  002864  0100               	movlb	0	; () banked
  2166  002866  81B4               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  2167                           
  2168                           ; BSR set to: 0
  2169  002868  0012               	return		;funcret
  2170  00286A  FFFF               	dw	65535	; errata NOP
  2171  00286C                     __end_of_SetTimeCommand:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1h	equ	0xFE2
  2183                           fsr1l	equ	0xFE1
  2184                           indf2	equ	0xFDF
  2185                           postinc2	equ	0xFDE
  2186                           postdec2	equ	0xFDD
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _SetTimeFromRegs *****************
  2192 ;; Defined at:
  2193 ;;		line 785 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  hourMin         1    wreg     PTR unsigned int 
  2196 ;;		 -> SetTimeCommand@hourMin(2), 
  2197 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2198 ;;		 -> SetTimeCommand@daySec(2), 
  2199 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2200 ;;		 -> SetTimeCommand@yearMonth(2), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2203 ;;		 -> SetTimeCommand@hourMin(2), 
  2204 ;;  newTime        18   77[COMRAM] struct tm
  2205 ;;  newRawTime      4   72[COMRAM] long 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2215 ;;      Params:         2       0       0       0       0       0       0
  2216 ;;      Locals:        23       0       0       0       0       0       0
  2217 ;;      Temps:          2       0       0       0       0       0       0
  2218 ;;      Totals:        27       0       0       0       0       0       0
  2219 ;;Total ram usage:       27 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    6
  2222 ;; This function calls:
  2223 ;;		_LightStatusLed
  2224 ;;		_LoadNextEvent
  2225 ;;		_SetHourMin
  2226 ;;		_SetTime
  2227 ;;		_mktime
  2228 ;; This function is called by:
  2229 ;;		_SetTimeCommand
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text4
  2234  001D34                     __ptext4:
  2235                           	opt stack 0
  2236  001D34                     _SetTimeFromRegs:
  2237                           	opt stack 22
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;incstack = 0
  2241  001D34  FFFF               	dw	65535
  2242                           
  2243                           ;SetTimeFromRegs@hourMin stored from wreg
  2244  001D36  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2245                           
  2246                           ;main.c: 787: struct tm newTime;
  2247                           ;main.c: 788: newTime.tm_year = (*yearMonth >> 8) + 100;
  2248  001D38  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2249  001D3A  6ED9               	movwf	fsr2l,c
  2250  001D3C  6ADA               	clrf	fsr2h,c
  2251  001D3E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2252  001D42  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2253  001D46  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2254  001D4A  6A48               	clrf	??_SetTimeFromRegs+1,c
  2255  001D4C  0E64               	movlw	100
  2256  001D4E  2447               	addwf	??_SetTimeFromRegs,w,c
  2257  001D50  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2258  001D52  0E00               	movlw	0
  2259  001D54  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2260  001D56  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2261                           
  2262                           ;main.c: 789: newTime.tm_mon = *yearMonth & 0xFF;
  2263  001D58  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2264  001D5A  6ED9               	movwf	fsr2l,c
  2265  001D5C  6ADA               	clrf	fsr2h,c
  2266  001D5E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2267  001D62  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2268  001D66  5047               	movf	??_SetTimeFromRegs,w,c
  2269  001D68  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2270  001D6A  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2271                           
  2272                           ;main.c: 790: newTime.tm_mday = *daySec >> 8;
  2273  001D6C  5045               	movf	SetTimeFromRegs@daySec,w,c
  2274  001D6E  6ED9               	movwf	fsr2l,c
  2275  001D70  6ADA               	clrf	fsr2h,c
  2276  001D72  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2277  001D76  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2278  001D7A  5048               	movf	??_SetTimeFromRegs+1,w,c
  2279  001D7C  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2280  001D7E  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2281                           
  2282                           ;main.c: 791: newTime.tm_hour = *hourMin >> 8;
  2283  001D80  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2284  001D82  6ED9               	movwf	fsr2l,c
  2285  001D84  6ADA               	clrf	fsr2h,c
  2286  001D86  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2287  001D8A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2288  001D8E  5048               	movf	??_SetTimeFromRegs+1,w,c
  2289  001D90  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2290  001D92  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2291                           
  2292                           ;main.c: 792: newTime.tm_min = *hourMin & 0xFF;
  2293  001D94  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2294  001D96  6ED9               	movwf	fsr2l,c
  2295  001D98  6ADA               	clrf	fsr2h,c
  2296  001D9A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2297  001D9E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2298  001DA2  5047               	movf	??_SetTimeFromRegs,w,c
  2299  001DA4  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2300  001DA6  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2301                           
  2302                           ;main.c: 793: newTime.tm_sec = *daySec & 0xFF;
  2303  001DA8  5045               	movf	SetTimeFromRegs@daySec,w,c
  2304  001DAA  6ED9               	movwf	fsr2l,c
  2305  001DAC  6ADA               	clrf	fsr2h,c
  2306  001DAE  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2307  001DB2  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2308  001DB6  5047               	movf	??_SetTimeFromRegs,w,c
  2309  001DB8  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2310  001DBA  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2311                           
  2312                           ;main.c: 794: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  2313  001DBC  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2314  001DBE  6E07               	movwf	SetHourMin@newMin,c
  2315  001DC0  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2316  001DC2  0F04               	addlw	4
  2317  001DC4  ECAA  F014         	call	_SetHourMin
  2318                           
  2319                           ;main.c: 795: time_t newRawTime = mktime(&newTime);
  2320  001DC8  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2321  001DCA  EC37  F003         	call	_mktime
  2322  001DCE  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2323  001DD2  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2324  001DD6  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2325  001DDA  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2326                           
  2327                           ;main.c: 796: SetTime(&newRawTime);
  2328  001DDE  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2329  001DE0  EC9B  F014         	call	_SetTime
  2330                           
  2331                           ;main.c: 797: LightStatusLed(0x05, 0, 0);
  2332  001DE4  0E00               	movlw	0
  2333  001DE6  6E07               	movwf	LightStatusLed@on,c
  2334  001DE8  6E08               	movwf	LightStatusLed@blink,c
  2335  001DEA  0E05               	movlw	5
  2336  001DEC  EC42  F00D         	call	_LightStatusLed
  2337                           
  2338                           ;main.c: 798: LoadNextEvent();
  2339  001DF0  EFAE  F010         	goto	_LoadNextEvent	;wreg free
  2340  001DF4  FFFF               	dw	65535	; errata NOP
  2341  001DF6                     __end_of_SetTimeFromRegs:
  2342                           	opt stack 0
  2343                           tblptru	equ	0xFF8
  2344                           tblptrh	equ	0xFF7
  2345                           tblptrl	equ	0xFF6
  2346                           tablat	equ	0xFF5
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1h	equ	0xFE2
  2353                           fsr1l	equ	0xFE1
  2354                           indf2	equ	0xFDF
  2355                           postinc2	equ	0xFDE
  2356                           postdec2	equ	0xFDD
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function _mktime *****************
  2362 ;; Defined at:
  2363 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  timeptr         1    wreg     PTR struct tm
  2366 ;;		 -> SetTimeFromRegs@newTime(18), 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2369 ;;		 -> SetTimeFromRegs@newTime(18), 
  2370 ;;  tt              4   63[COMRAM] long 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  4   45[COMRAM] long 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2380 ;;      Params:         4       0       0       0       0       0       0
  2381 ;;      Locals:         5       0       0       0       0       0       0
  2382 ;;      Temps:         14       0       0       0       0       0       0
  2383 ;;      Totals:        23       0       0       0       0       0       0
  2384 ;;Total ram usage:       23 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    5
  2387 ;; This function calls:
  2388 ;;		_ymd_to_scalar
  2389 ;; This function is called by:
  2390 ;;		_SetTimeFromRegs
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text5
  2395  00066E                     __ptext5:
  2396                           	opt stack 0
  2397  00066E                     _mktime:
  2398                           	opt stack 22
  2399                           
  2400                           ;incstack = 0
  2401  00066E  FFFF               	dw	65535
  2402                           
  2403                           ;mktime@timeptr stored from wreg
  2404  000670  6E44               	movwf	mktime@timeptr,c
  2405  000672  5044               	movf	mktime@timeptr,w,c
  2406  000674  6ED9               	movwf	fsr2l,c
  2407  000676  6ADA               	clrf	fsr2h,c
  2408  000678  0E0A               	movlw	10
  2409  00067A  26D9               	addwf	fsr2l,f,c
  2410  00067C  0E01               	movlw	1
  2411  00067E  BEDB               	btfsc	plusw2,7,c
  2412  000680  D012               	goto	l1269
  2413  000682  50DB               	movf	plusw2,w,c
  2414  000684  E103               	bnz	u4190
  2415  000686  0E46               	movlw	70
  2416  000688  5CDE               	subwf	postinc2,w,c
  2417  00068A  E30D               	bnc	l1269
  2418  00068C                     u4190:
  2419  00068C  5044               	movf	mktime@timeptr,w,c
  2420  00068E  6ED9               	movwf	fsr2l,c
  2421  000690  6ADA               	clrf	fsr2h,c
  2422  000692  0E0A               	movlw	10
  2423  000694  26D9               	addwf	fsr2l,f,c
  2424  000696  0E01               	movlw	1
  2425  000698  BEDB               	btfsc	plusw2,7,c
  2426  00069A  D00B               	goto	l4992
  2427  00069C  50DB               	movf	plusw2,w,c
  2428  00069E  E103               	bnz	u4200
  2429  0006A0  0E8B               	movlw	139
  2430  0006A2  5CDE               	subwf	postinc2,w,c
  2431  0006A4  E306               	bnc	l4992
  2432  0006A6                     u4200:
  2433  0006A6                     l1269:
  2434  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  2435  0006A8  6840               	setf	mktime@tt,c
  2436  0006AA  6841               	setf	mktime@tt+1,c
  2437  0006AC  6842               	setf	mktime@tt+2,c
  2438  0006AE  6843               	setf	mktime@tt+3,c
  2439  0006B0  D15C               	goto	l5002
  2440  0006B2                     l4992:
  2441  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  2442  0006B4  5044               	movf	mktime@timeptr,w,c
  2443  0006B6  6ED9               	movwf	fsr2l,c
  2444  0006B8  6ADA               	clrf	fsr2h,c
  2445  0006BA  0E0A               	movlw	10
  2446  0006BC  26D9               	addwf	fsr2l,f,c
  2447  0006BE  CFDE F032          	movff	postinc2,??_mktime
  2448  0006C2  CFDD F033          	movff	postdec2,??_mktime+1
  2449  0006C6  0E6C               	movlw	108
  2450  0006C8  2432               	addwf	??_mktime,w,c
  2451  0006CA  6E1E               	movwf	ymd_to_scalar@yr,c
  2452  0006CC  0E07               	movlw	7
  2453  0006CE  2033               	addwfc	??_mktime+1,w,c
  2454  0006D0  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2455  0006D2  5044               	movf	mktime@timeptr,w,c
  2456  0006D4  6ED9               	movwf	fsr2l,c
  2457  0006D6  6ADA               	clrf	fsr2h,c
  2458  0006D8  0E08               	movlw	8
  2459  0006DA  26D9               	addwf	fsr2l,f,c
  2460  0006DC  CFDE F034          	movff	postinc2,??_mktime+2
  2461  0006E0  CFDD F035          	movff	postdec2,??_mktime+3
  2462  0006E4  2834               	incf	??_mktime+2,w,c
  2463  0006E6  6E20               	movwf	ymd_to_scalar@mo,c
  2464  0006E8  0E00               	movlw	0
  2465  0006EA  2035               	addwfc	??_mktime+3,w,c
  2466  0006EC  6E21               	movwf	ymd_to_scalar@mo+1,c
  2467  0006EE  5044               	movf	mktime@timeptr,w,c
  2468  0006F0  6ED9               	movwf	fsr2l,c
  2469  0006F2  6ADA               	clrf	fsr2h,c
  2470  0006F4  0E06               	movlw	6
  2471  0006F6  26D9               	addwf	fsr2l,f,c
  2472  0006F8  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2473  0006FC  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2474  000700  EC0B  F010         	call	_ymd_to_scalar	;wreg free
  2475  000704  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2476  000708  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2477  00070C  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2478  000710  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2479  000714  0E07               	movlw	7
  2480  000716  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2481  000718  0EB2               	movlw	178
  2482  00071A  6E1E               	movwf	ymd_to_scalar@yr,c
  2483  00071C  6A21               	clrf	ymd_to_scalar@mo+1,c
  2484  00071E  0E01               	movlw	1
  2485  000720  6E20               	movwf	ymd_to_scalar@mo,c
  2486  000722  6A23               	clrf	ymd_to_scalar@day+1,c
  2487  000724  6E22               	movwf	ymd_to_scalar@day,c
  2488  000726  EC0B  F010         	call	_ymd_to_scalar	;wreg free
  2489  00072A  501E               	movf	?_ymd_to_scalar,w,c
  2490  00072C  5E40               	subwf	mktime@tt,f,c
  2491  00072E  501F               	movf	?_ymd_to_scalar+1,w,c
  2492  000730  5A41               	subwfb	mktime@tt+1,f,c
  2493  000732  5020               	movf	?_ymd_to_scalar+2,w,c
  2494  000734  5A42               	subwfb	mktime@tt+2,f,c
  2495  000736  5021               	movf	?_ymd_to_scalar+3,w,c
  2496  000738  5A43               	subwfb	mktime@tt+3,f,c
  2497  00073A  5044               	movf	mktime@timeptr,w,c
  2498  00073C  6ED9               	movwf	fsr2l,c
  2499  00073E  6ADA               	clrf	fsr2h,c
  2500  000740  0E04               	movlw	4
  2501  000742  26D9               	addwf	fsr2l,f,c
  2502  000744  CFDE F032          	movff	postinc2,??_mktime
  2503  000748  CFDD F033          	movff	postdec2,??_mktime+1
  2504  00074C  C032  F034         	movff	??_mktime,??_mktime+2
  2505  000750  C033  F035         	movff	??_mktime+1,??_mktime+3
  2506  000754  0E00               	movlw	0
  2507  000756  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2508  000758  0EFF               	movlw	255
  2509  00075A  6E36               	movwf	(??_mktime+4)& (0+255),c
  2510  00075C  6E37               	movwf	(??_mktime+5)& (0+255),c
  2511  00075E  C040  F038         	movff	mktime@tt,??_mktime+6
  2512  000762  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2513  000766  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2514  00076A  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2515  00076E  0E18               	movlw	24
  2516  000770  0238               	mulwf	(??_mktime+6)& (0+255),c
  2517  000772  CFF3 F03C          	movff	prodl,??_mktime+10
  2518  000776  CFF4 F03D          	movff	prodh,??_mktime+11
  2519  00077A  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2520  00077C  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2521  00077E  0239               	mulwf	(??_mktime+7)& (0+255),c
  2522  000780  50F3               	movf	prodl,w,c
  2523  000782  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2524  000784  50F4               	movf	prodh,w,c
  2525  000786  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2526  000788  0E00               	movlw	0
  2527  00078A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2528  00078C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2529  00078E  50F3               	movf	prodl,w,c
  2530  000790  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2531  000792  50F4               	movf	prodh,w,c
  2532  000794  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2533  000796  0E00               	movlw	0
  2534  000798  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2535  00079A  0E18               	movlw	24
  2536  00079C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2537  00079E  50F3               	movf	prodl,w,c
  2538  0007A0  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2539  0007A2  50F4               	movf	prodh,w,c
  2540  0007A4  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2541  0007A6  0E00               	movlw	0
  2542  0007A8  0239               	mulwf	(??_mktime+7)& (0+255),c
  2543  0007AA  50F3               	movf	prodl,w,c
  2544  0007AC  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2545  0007AE  50F4               	movf	prodh,w,c
  2546  0007B0  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2547  0007B2  0E00               	movlw	0
  2548  0007B4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2549  0007B6  50F3               	movf	prodl,w,c
  2550  0007B8  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2551  0007BA  50F4               	movf	prodh,w,c
  2552  0007BC  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2553  0007BE  0E18               	movlw	24
  2554  0007C0  023B               	mulwf	(??_mktime+9)& (0+255),c
  2555  0007C2  50F3               	movf	prodl,w,c
  2556  0007C4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2557  0007C6  0E00               	movlw	0
  2558  0007C8  023A               	mulwf	(??_mktime+8)& (0+255),c
  2559  0007CA  50F3               	movf	prodl,w,c
  2560  0007CC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2561  0007CE  0E00               	movlw	0
  2562  0007D0  0239               	mulwf	(??_mktime+7)& (0+255),c
  2563  0007D2  50F3               	movf	prodl,w,c
  2564  0007D4  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2565  0007D6  0E00               	movlw	0
  2566  0007D8  0238               	mulwf	(??_mktime+6)& (0+255),c
  2567  0007DA  50F3               	movf	prodl,w,c
  2568  0007DC  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2569  0007DE  5034               	movf	??_mktime+2,w,c
  2570  0007E0  243C               	addwf	??_mktime+10,w,c
  2571  0007E2  6E40               	movwf	mktime@tt,c
  2572  0007E4  5035               	movf	??_mktime+3,w,c
  2573  0007E6  203D               	addwfc	??_mktime+11,w,c
  2574  0007E8  6E41               	movwf	mktime@tt+1,c
  2575  0007EA  5036               	movf	??_mktime+4,w,c
  2576  0007EC  203E               	addwfc	??_mktime+12,w,c
  2577  0007EE  6E42               	movwf	mktime@tt+2,c
  2578  0007F0  5037               	movf	??_mktime+5,w,c
  2579  0007F2  203F               	addwfc	??_mktime+13,w,c
  2580  0007F4  6E43               	movwf	mktime@tt+3,c
  2581  0007F6  5044               	movf	mktime@timeptr,w,c
  2582  0007F8  6ED9               	movwf	fsr2l,c
  2583  0007FA  6ADA               	clrf	fsr2h,c
  2584  0007FC  0E02               	movlw	2
  2585  0007FE  26D9               	addwf	fsr2l,f,c
  2586  000800  CFDE F032          	movff	postinc2,??_mktime
  2587  000804  CFDD F033          	movff	postdec2,??_mktime+1
  2588  000808  C032  F034         	movff	??_mktime,??_mktime+2
  2589  00080C  C033  F035         	movff	??_mktime+1,??_mktime+3
  2590  000810  0E00               	movlw	0
  2591  000812  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2592  000814  0EFF               	movlw	255
  2593  000816  6E36               	movwf	(??_mktime+4)& (0+255),c
  2594  000818  6E37               	movwf	(??_mktime+5)& (0+255),c
  2595  00081A  C040  F038         	movff	mktime@tt,??_mktime+6
  2596  00081E  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2597  000822  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2598  000826  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2599  00082A  0E3C               	movlw	60
  2600  00082C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2601  00082E  CFF3 F03C          	movff	prodl,??_mktime+10
  2602  000832  CFF4 F03D          	movff	prodh,??_mktime+11
  2603  000836  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2604  000838  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2605  00083A  0239               	mulwf	(??_mktime+7)& (0+255),c
  2606  00083C  50F3               	movf	prodl,w,c
  2607  00083E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2608  000840  50F4               	movf	prodh,w,c
  2609  000842  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2610  000844  0E00               	movlw	0
  2611  000846  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2612  000848  0238               	mulwf	(??_mktime+6)& (0+255),c
  2613  00084A  50F3               	movf	prodl,w,c
  2614  00084C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2615  00084E  50F4               	movf	prodh,w,c
  2616  000850  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2617  000852  0E00               	movlw	0
  2618  000854  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2619  000856  0E3C               	movlw	60
  2620  000858  023A               	mulwf	(??_mktime+8)& (0+255),c
  2621  00085A  50F3               	movf	prodl,w,c
  2622  00085C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2623  00085E  50F4               	movf	prodh,w,c
  2624  000860  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2625  000862  0E00               	movlw	0
  2626  000864  0239               	mulwf	(??_mktime+7)& (0+255),c
  2627  000866  50F3               	movf	prodl,w,c
  2628  000868  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2629  00086A  50F4               	movf	prodh,w,c
  2630  00086C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2631  00086E  0E00               	movlw	0
  2632  000870  0238               	mulwf	(??_mktime+6)& (0+255),c
  2633  000872  50F3               	movf	prodl,w,c
  2634  000874  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2635  000876  50F4               	movf	prodh,w,c
  2636  000878  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2637  00087A  0E3C               	movlw	60
  2638  00087C  023B               	mulwf	(??_mktime+9)& (0+255),c
  2639  00087E  50F3               	movf	prodl,w,c
  2640  000880  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2641  000882  0E00               	movlw	0
  2642  000884  023A               	mulwf	(??_mktime+8)& (0+255),c
  2643  000886  50F3               	movf	prodl,w,c
  2644  000888  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2645  00088A  0E00               	movlw	0
  2646  00088C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2647  00088E  50F3               	movf	prodl,w,c
  2648  000890  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2649  000892  0E00               	movlw	0
  2650  000894  0238               	mulwf	(??_mktime+6)& (0+255),c
  2651  000896  50F3               	movf	prodl,w,c
  2652  000898  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2653  00089A  5034               	movf	??_mktime+2,w,c
  2654  00089C  243C               	addwf	??_mktime+10,w,c
  2655  00089E  6E40               	movwf	mktime@tt,c
  2656  0008A0  5035               	movf	??_mktime+3,w,c
  2657  0008A2  203D               	addwfc	??_mktime+11,w,c
  2658  0008A4  6E41               	movwf	mktime@tt+1,c
  2659  0008A6  5036               	movf	??_mktime+4,w,c
  2660  0008A8  203E               	addwfc	??_mktime+12,w,c
  2661  0008AA  6E42               	movwf	mktime@tt+2,c
  2662  0008AC  5037               	movf	??_mktime+5,w,c
  2663  0008AE  203F               	addwfc	??_mktime+13,w,c
  2664  0008B0  6E43               	movwf	mktime@tt+3,c
  2665  0008B2  5044               	movf	mktime@timeptr,w,c
  2666  0008B4  6ED9               	movwf	fsr2l,c
  2667  0008B6  6ADA               	clrf	fsr2h,c
  2668  0008B8  CFDE F032          	movff	postinc2,??_mktime
  2669  0008BC  CFDD F033          	movff	postdec2,??_mktime+1
  2670  0008C0  C032  F034         	movff	??_mktime,??_mktime+2
  2671  0008C4  C033  F035         	movff	??_mktime+1,??_mktime+3
  2672  0008C8  0E00               	movlw	0
  2673  0008CA  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  2674  0008CC  0EFF               	movlw	255
  2675  0008CE  6E36               	movwf	(??_mktime+4)& (0+255),c
  2676  0008D0  6E37               	movwf	(??_mktime+5)& (0+255),c
  2677  0008D2  C040  F038         	movff	mktime@tt,??_mktime+6
  2678  0008D6  C041  F039         	movff	mktime@tt+1,??_mktime+7
  2679  0008DA  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  2680  0008DE  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  2681  0008E2  0E3C               	movlw	60
  2682  0008E4  0238               	mulwf	(??_mktime+6)& (0+255),c
  2683  0008E6  CFF3 F03C          	movff	prodl,??_mktime+10
  2684  0008EA  CFF4 F03D          	movff	prodh,??_mktime+11
  2685  0008EE  6A3E               	clrf	(??_mktime+12)& (0+255),c
  2686  0008F0  6A3F               	clrf	(??_mktime+13)& (0+255),c
  2687  0008F2  0239               	mulwf	(??_mktime+7)& (0+255),c
  2688  0008F4  50F3               	movf	prodl,w,c
  2689  0008F6  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2690  0008F8  50F4               	movf	prodh,w,c
  2691  0008FA  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2692  0008FC  0E00               	movlw	0
  2693  0008FE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2694  000900  0238               	mulwf	(??_mktime+6)& (0+255),c
  2695  000902  50F3               	movf	prodl,w,c
  2696  000904  263D               	addwf	(??_mktime+11)& (0+255),f,c
  2697  000906  50F4               	movf	prodh,w,c
  2698  000908  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  2699  00090A  0E00               	movlw	0
  2700  00090C  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2701  00090E  0E3C               	movlw	60
  2702  000910  023A               	mulwf	(??_mktime+8)& (0+255),c
  2703  000912  50F3               	movf	prodl,w,c
  2704  000914  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2705  000916  50F4               	movf	prodh,w,c
  2706  000918  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2707  00091A  0E00               	movlw	0
  2708  00091C  0239               	mulwf	(??_mktime+7)& (0+255),c
  2709  00091E  50F3               	movf	prodl,w,c
  2710  000920  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2711  000922  50F4               	movf	prodh,w,c
  2712  000924  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2713  000926  0E00               	movlw	0
  2714  000928  0238               	mulwf	(??_mktime+6)& (0+255),c
  2715  00092A  50F3               	movf	prodl,w,c
  2716  00092C  263E               	addwf	(??_mktime+12)& (0+255),f,c
  2717  00092E  50F4               	movf	prodh,w,c
  2718  000930  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  2719  000932  0E3C               	movlw	60
  2720  000934  023B               	mulwf	(??_mktime+9)& (0+255),c
  2721  000936  50F3               	movf	prodl,w,c
  2722  000938  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2723  00093A  0E00               	movlw	0
  2724  00093C  023A               	mulwf	(??_mktime+8)& (0+255),c
  2725  00093E  50F3               	movf	prodl,w,c
  2726  000940  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2727  000942  0E00               	movlw	0
  2728  000944  0239               	mulwf	(??_mktime+7)& (0+255),c
  2729  000946  50F3               	movf	prodl,w,c
  2730  000948  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2731  00094A  0E00               	movlw	0
  2732  00094C  0238               	mulwf	(??_mktime+6)& (0+255),c
  2733  00094E  50F3               	movf	prodl,w,c
  2734  000950  263F               	addwf	(??_mktime+13)& (0+255),f,c
  2735  000952  5034               	movf	??_mktime+2,w,c
  2736  000954  243C               	addwf	??_mktime+10,w,c
  2737  000956  6E40               	movwf	mktime@tt,c
  2738  000958  5035               	movf	??_mktime+3,w,c
  2739  00095A  203D               	addwfc	??_mktime+11,w,c
  2740  00095C  6E41               	movwf	mktime@tt+1,c
  2741  00095E  5036               	movf	??_mktime+4,w,c
  2742  000960  203E               	addwfc	??_mktime+12,w,c
  2743  000962  6E42               	movwf	mktime@tt+2,c
  2744  000964  5037               	movf	??_mktime+5,w,c
  2745  000966  203F               	addwfc	??_mktime+13,w,c
  2746  000968  6E43               	movwf	mktime@tt+3,c
  2747  00096A                     l5002:
  2748  00096A  FFFF               	dw	65535	; assembler added errata NOP
  2749  00096C  C040  F02E         	movff	mktime@tt,?_mktime
  2750  000970  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  2751  000974  C042  F030         	movff	mktime@tt+2,?_mktime+2
  2752  000978  C043  F031         	movff	mktime@tt+3,?_mktime+3
  2753  00097C  0012               	return		;funcret
  2754  00097E  FFFF               	dw	65535	; errata NOP
  2755  000980                     __end_of_mktime:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1h	equ	0xFE2
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           plusw2	equ	0xFDB
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _ymd_to_scalar *****************
  2778 ;; Defined at:
  2779 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  yr              2   29[COMRAM] unsigned int 
  2782 ;;  mo              2   31[COMRAM] unsigned int 
  2783 ;;  day             2   33[COMRAM] unsigned int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  scalar          4   41[COMRAM] long 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  4   29[COMRAM] long 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2795 ;;      Params:         6       0       0       0       0       0       0
  2796 ;;      Locals:         6       0       0       0       0       0       0
  2797 ;;      Temps:          4       0       0       0       0       0       0
  2798 ;;      Totals:        16       0       0       0       0       0       0
  2799 ;;Total ram usage:       16 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    4
  2802 ;; This function calls:
  2803 ;;		_isleap
  2804 ;;		_months_to_days
  2805 ;;		_years_to_days
  2806 ;; This function is called by:
  2807 ;;		_mktime
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text6
  2812  002016                     __ptext6:
  2813                           	opt stack 0
  2814  002016                     _ymd_to_scalar:
  2815                           	opt stack 22
  2816                           
  2817                           ;incstack = 0
  2818  002016  FFFF               	dw	65535
  2819  002018  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  2820  00201C  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  2821  002020  EC5C  F013         	call	_months_to_days	;wreg free
  2822  002024  5022               	movf	ymd_to_scalar@day,w,c
  2823  002026  260E               	addwf	?_months_to_days,f,c
  2824  002028  5023               	movf	ymd_to_scalar@day+1,w,c
  2825  00202A  220F               	addwfc	?_months_to_days+1,f,c
  2826  00202C  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  2827  002030  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  2828  002034  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  2829  002036  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  2830  002038  5021               	movf	ymd_to_scalar@mo+1,w,c
  2831  00203A  E103               	bnz	u4010
  2832  00203C  0E03               	movlw	3
  2833  00203E  5C20               	subwf	ymd_to_scalar@mo,w,c
  2834  002040  E321               	bnc	l4914
  2835  002042                     u4010:
  2836  002042  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  2837  002046  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  2838  00204A  ECC6  F012         	call	_isleap	;wreg free
  2839  00204E  500C               	movf	?_isleap,w,c
  2840  002050  100D               	iorwf	?_isleap+1,w,c
  2841  002052  E103               	bnz	l4910
  2842  002054  6A29               	clrf	_ymd_to_scalar$2156+1,c
  2843  002056  0E02               	movlw	2
  2844  002058  D002               	goto	L1
  2845  00205A                     l4910:
  2846  00205A  6A29               	clrf	_ymd_to_scalar$2156+1,c
  2847  00205C  0E01               	movlw	1
  2848  00205E                     L1:
  2849  00205E  FFFF               	dw	65535	; assembler added errata NOP
  2850  002060  6E28               	movwf	_ymd_to_scalar$2156,c
  2851  002062  C028  F024         	movff	_ymd_to_scalar$2156,??_ymd_to_scalar
  2852  002066  C029  F025         	movff	_ymd_to_scalar$2156+1,??_ymd_to_scalar+1
  2853  00206A  0E00               	movlw	0
  2854  00206C  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  2855  00206E  0EFF               	movlw	255
  2856  002070  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  2857  002072  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  2858  002074  5024               	movf	??_ymd_to_scalar,w,c
  2859  002076  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  2860  002078  5025               	movf	??_ymd_to_scalar+1,w,c
  2861  00207A  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  2862  00207C  5026               	movf	??_ymd_to_scalar+2,w,c
  2863  00207E  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  2864  002080  5027               	movf	??_ymd_to_scalar+3,w,c
  2865  002082  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  2866  002084                     l4914:
  2867  002084  061E               	decf	ymd_to_scalar@yr,f,c
  2868  002086  A0D8               	btfss	status,0,c
  2869  002088  061F               	decf	ymd_to_scalar@yr+1,f,c
  2870  00208A  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  2871  00208E  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  2872  002092  ECC1  F00C         	call	_years_to_days	;wreg free
  2873  002096  500E               	movf	?_years_to_days,w,c
  2874  002098  262A               	addwf	ymd_to_scalar@scalar,f,c
  2875  00209A  500F               	movf	?_years_to_days+1,w,c
  2876  00209C  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  2877  00209E  5010               	movf	?_years_to_days+2,w,c
  2878  0020A0  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  2879  0020A2  5011               	movf	?_years_to_days+3,w,c
  2880  0020A4  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  2881  0020A6  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  2882  0020AA  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  2883  0020AE  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  2884  0020B2  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  2885  0020B6  0012               	return		;funcret
  2886  0020B8  FFFF               	dw	65535	; errata NOP
  2887  0020BA                     __end_of_ymd_to_scalar:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           postinc0	equ	0xFEE
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1h	equ	0xFE2
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           plusw2	equ	0xFDB
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _years_to_days *****************
  2910 ;; Defined at:
  2911 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  yr              2   13[COMRAM] unsigned int 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  ret             4   25[COMRAM] long 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  4   13[COMRAM] long 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2925 ;;      Params:         4       0       0       0       0       0       0
  2926 ;;      Locals:         4       0       0       0       0       0       0
  2927 ;;      Temps:          8       0       0       0       0       0       0
  2928 ;;      Totals:        16       0       0       0       0       0       0
  2929 ;;Total ram usage:       16 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		___lwdiv
  2934 ;; This function is called by:
  2935 ;;		_ymd_to_scalar
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text7
  2940  001982                     __ptext7:
  2941                           	opt stack 0
  2942  001982                     _years_to_days:
  2943                           	opt stack 22
  2944                           
  2945                           ;incstack = 0
  2946  001982  FFFF               	dw	65535
  2947  001984  500E               	movf	years_to_days@yr,w,c
  2948  001986  6E12               	movwf	??_years_to_days& (0+255),c
  2949  001988  500F               	movf	years_to_days@yr+1,w,c
  2950  00198A  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  2951  00198C  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  2952  00198E  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  2953  001990  0E6D               	movlw	109
  2954  001992  0212               	mulwf	??_years_to_days& (0+255),c
  2955  001994  CFF3 F016          	movff	prodl,??_years_to_days+4
  2956  001998  CFF4 F017          	movff	prodh,??_years_to_days+5
  2957  00199C  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  2958  00199E  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  2959  0019A0  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2960  0019A2  50F3               	movf	prodl,w,c
  2961  0019A4  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2962  0019A6  50F4               	movf	prodh,w,c
  2963  0019A8  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2964  0019AA  0E00               	movlw	0
  2965  0019AC  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2966  0019AE  0E01               	movlw	1
  2967  0019B0  0212               	mulwf	??_years_to_days& (0+255),c
  2968  0019B2  50F3               	movf	prodl,w,c
  2969  0019B4  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  2970  0019B6  50F4               	movf	prodh,w,c
  2971  0019B8  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  2972  0019BA  0E00               	movlw	0
  2973  0019BC  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2974  0019BE  0E6D               	movlw	109
  2975  0019C0  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2976  0019C2  50F3               	movf	prodl,w,c
  2977  0019C4  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2978  0019C6  50F4               	movf	prodh,w,c
  2979  0019C8  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2980  0019CA  0E01               	movlw	1
  2981  0019CC  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  2982  0019CE  50F3               	movf	prodl,w,c
  2983  0019D0  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2984  0019D2  50F4               	movf	prodh,w,c
  2985  0019D4  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2986  0019D6  0E00               	movlw	0
  2987  0019D8  0212               	mulwf	??_years_to_days& (0+255),c
  2988  0019DA  50F3               	movf	prodl,w,c
  2989  0019DC  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  2990  0019DE  50F4               	movf	prodh,w,c
  2991  0019E0  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  2992  0019E2  0E6D               	movlw	109
  2993  0019E4  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  2994  0019E6  50F3               	movf	prodl,w,c
  2995  0019E8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  2996  0019EA  0E01               	movlw	1
  2997  0019EC  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  2998  0019EE  50F3               	movf	prodl,w,c
  2999  0019F0  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3000  0019F2  0E00               	movlw	0
  3001  0019F4  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3002  0019F6  50F3               	movf	prodl,w,c
  3003  0019F8  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3004  0019FA  0E00               	movlw	0
  3005  0019FC  0212               	mulwf	??_years_to_days& (0+255),c
  3006  0019FE  50F3               	movf	prodl,w,c
  3007  001A00  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3008  001A02  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  3009  001A06  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  3010  001A0A  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  3011  001A0E  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  3012  001A12  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3013  001A16  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3014  001A1A  6A0A               	clrf	___lwdiv@divisor+1,c
  3015  001A1C  0E64               	movlw	100
  3016  001A1E  6E09               	movwf	___lwdiv@divisor,c
  3017  001A20  EC9C  F012         	call	___lwdiv	;wreg free
  3018  001A24  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  3019  001A28  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  3020  001A2C  90D8               	bcf	status,0,c
  3021  001A2E  3213               	rrcf	??_years_to_days+1,f,c
  3022  001A30  3212               	rrcf	??_years_to_days,f,c
  3023  001A32  90D8               	bcf	status,0,c
  3024  001A34  3213               	rrcf	??_years_to_days+1,f,c
  3025  001A36  3212               	rrcf	??_years_to_days,f,c
  3026  001A38  5007               	movf	?___lwdiv,w,c
  3027  001A3A  5E12               	subwf	??_years_to_days,f,c
  3028  001A3C  5008               	movf	?___lwdiv+1,w,c
  3029  001A3E  5A13               	subwfb	??_years_to_days+1,f,c
  3030  001A40  5012               	movf	??_years_to_days,w,c
  3031  001A42  261A               	addwf	years_to_days@ret,f,c
  3032  001A44  5013               	movf	??_years_to_days+1,w,c
  3033  001A46  221B               	addwfc	years_to_days@ret+1,f,c
  3034  001A48  0E00               	movlw	0
  3035  001A4A  221C               	addwfc	years_to_days@ret+2,f,c
  3036  001A4C  221D               	addwfc	years_to_days@ret+3,f,c
  3037  001A4E  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3038  001A52  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3039  001A56  0E01               	movlw	1
  3040  001A58  6E0A               	movwf	___lwdiv@divisor+1,c
  3041  001A5A  0E90               	movlw	144
  3042  001A5C  6E09               	movwf	___lwdiv@divisor,c
  3043  001A5E  EC9C  F012         	call	___lwdiv	;wreg free
  3044  001A62  5007               	movf	?___lwdiv,w,c
  3045  001A64  261A               	addwf	years_to_days@ret,f,c
  3046  001A66  5008               	movf	?___lwdiv+1,w,c
  3047  001A68  221B               	addwfc	years_to_days@ret+1,f,c
  3048  001A6A  0E00               	movlw	0
  3049  001A6C  221C               	addwfc	years_to_days@ret+2,f,c
  3050  001A6E  221D               	addwfc	years_to_days@ret+3,f,c
  3051  001A70  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  3052  001A74  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  3053  001A78  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  3054  001A7C  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  3055  001A80  0C00               	retlw	0	;funcret
  3056  001A82  FFFF               	dw	65535	; errata NOP
  3057  001A84                     __end_of_years_to_days:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           plusw2	equ	0xFDB
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _months_to_days *****************
  3080 ;; Defined at:
  3081 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  month           2   13[COMRAM] unsigned int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  2   13[COMRAM] unsigned int 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         2       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0
  3097 ;;      Temps:          4       0       0       0       0       0       0
  3098 ;;      Totals:         6       0       0       0       0       0       0
  3099 ;;Total ram usage:        6 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		___lwdiv
  3104 ;; This function is called by:
  3105 ;;		_ymd_to_scalar
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text8
  3110  0026B8                     __ptext8:
  3111                           	opt stack 0
  3112  0026B8                     _months_to_days:
  3113                           	opt stack 22
  3114                           
  3115                           ;incstack = 0
  3116  0026B8  FFFF               	dw	65535
  3117  0026BA  0EF1               	movlw	241
  3118  0026BC  6E10               	movwf	??_months_to_days& (0+255),c
  3119  0026BE  0E0B               	movlw	11
  3120  0026C0  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  3121  0026C2  5010               	movf	??_months_to_days& (0+255),w,c
  3122  0026C4  020E               	mulwf	months_to_days@month,c
  3123  0026C6  CFF3 F012          	movff	prodl,??_months_to_days+2
  3124  0026CA  CFF4 F013          	movff	prodh,??_months_to_days+3
  3125  0026CE  020F               	mulwf	months_to_days@month+1,c
  3126  0026D0  50F3               	movf	prodl,w,c
  3127  0026D2  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3128  0026D4  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  3129  0026D6  020E               	mulwf	months_to_days@month,c
  3130  0026D8  50F3               	movf	prodl,w,c
  3131  0026DA  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3132  0026DC  0E41               	movlw	65
  3133  0026DE  2412               	addwf	??_months_to_days+2,w,c
  3134  0026E0  6E07               	movwf	___lwdiv@dividend,c
  3135  0026E2  0EF4               	movlw	244
  3136  0026E4  2013               	addwfc	??_months_to_days+3,w,c
  3137  0026E6  6E08               	movwf	___lwdiv@dividend+1,c
  3138  0026E8  6A0A               	clrf	___lwdiv@divisor+1,c
  3139  0026EA  0E64               	movlw	100
  3140  0026EC  6E09               	movwf	___lwdiv@divisor,c
  3141  0026EE  EC9C  F012         	call	___lwdiv	;wreg free
  3142  0026F2  C007  F00E         	movff	?___lwdiv,?_months_to_days
  3143  0026F6  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  3144  0026FA  0012               	return		;funcret
  3145  0026FC  FFFF               	dw	65535	; errata NOP
  3146  0026FE                     __end_of_months_to_days:
  3147                           	opt stack 0
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           postinc0	equ	0xFEE
  3156                           wreg	equ	0xFE8
  3157                           postdec1	equ	0xFE5
  3158                           fsr1h	equ	0xFE2
  3159                           fsr1l	equ	0xFE1
  3160                           indf2	equ	0xFDF
  3161                           postinc2	equ	0xFDE
  3162                           postdec2	equ	0xFDD
  3163                           plusw2	equ	0xFDB
  3164                           fsr2h	equ	0xFDA
  3165                           fsr2l	equ	0xFD9
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function ___lwdiv *****************
  3169 ;; Defined at:
  3170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  dividend        2    6[COMRAM] unsigned int 
  3173 ;;  divisor         2    8[COMRAM] unsigned int 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  quotient        2   11[COMRAM] unsigned int 
  3176 ;;  counter         1   10[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  2    6[COMRAM] unsigned int 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         4       0       0       0       0       0       0
  3187 ;;      Locals:         3       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         7       0       0       0       0       0       0
  3190 ;;Total ram usage:        7 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    2
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_months_to_days
  3197 ;;		_years_to_days
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text9
  3202  002538                     __ptext9:
  3203                           	opt stack 0
  3204  002538                     ___lwdiv:
  3205                           	opt stack 22
  3206                           
  3207                           ;incstack = 0
  3208  002538  FFFF               	dw	65535
  3209  00253A  6A0C               	clrf	___lwdiv@quotient,c
  3210  00253C  6A0D               	clrf	___lwdiv@quotient+1,c
  3211  00253E  5009               	movf	___lwdiv@divisor,w,c
  3212  002540  100A               	iorwf	___lwdiv@divisor+1,w,c
  3213  002542  E01E               	bz	l1223
  3214  002544  0E01               	movlw	1
  3215  002546  6E0B               	movwf	___lwdiv@counter,c
  3216  002548  D005               	goto	l4836
  3217  00254A                     l4834:
  3218  00254A  FFFF               	dw	65535	; assembler added errata NOP
  3219  00254C  90D8               	bcf	status,0,c
  3220  00254E  3609               	rlcf	___lwdiv@divisor,f,c
  3221  002550  360A               	rlcf	___lwdiv@divisor+1,f,c
  3222  002552  2A0B               	incf	___lwdiv@counter,f,c
  3223  002554                     l4836:
  3224  002554  FFFF               	dw	65535	; assembler added errata NOP
  3225  002556  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3226  002558  D7F8               	goto	l4834
  3227  00255A                     l4838:
  3228  00255A  FFFF               	dw	65535	; assembler added errata NOP
  3229  00255C  90D8               	bcf	status,0,c
  3230  00255E  360C               	rlcf	___lwdiv@quotient,f,c
  3231  002560  360D               	rlcf	___lwdiv@quotient+1,f,c
  3232  002562  5009               	movf	___lwdiv@divisor,w,c
  3233  002564  5C07               	subwf	___lwdiv@dividend,w,c
  3234  002566  500A               	movf	___lwdiv@divisor+1,w,c
  3235  002568  5808               	subwfb	___lwdiv@dividend+1,w,c
  3236  00256A  E305               	bnc	l4846
  3237  00256C  5009               	movf	___lwdiv@divisor,w,c
  3238  00256E  5E07               	subwf	___lwdiv@dividend,f,c
  3239  002570  500A               	movf	___lwdiv@divisor+1,w,c
  3240  002572  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3241  002574  800C               	bsf	___lwdiv@quotient,0,c
  3242  002576                     l4846:
  3243  002576  90D8               	bcf	status,0,c
  3244  002578  320A               	rrcf	___lwdiv@divisor+1,f,c
  3245  00257A  3209               	rrcf	___lwdiv@divisor,f,c
  3246  00257C  2E0B               	decfsz	___lwdiv@counter,f,c
  3247  00257E  D7ED               	goto	l4838
  3248  002580                     l1223:
  3249  002580  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3250  002584  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3251  002588  0012               	return		;funcret
  3252  00258A  FFFF               	dw	65535	; errata NOP
  3253  00258C                     __end_of___lwdiv:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1h	equ	0xFE2
  3266                           fsr1l	equ	0xFE1
  3267                           indf2	equ	0xFDF
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           plusw2	equ	0xFDB
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _isleap *****************
  3276 ;; Defined at:
  3277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  yr              2   11[COMRAM] unsigned int 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  2   11[COMRAM] int 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         2       0       0       0       0       0       0
  3292 ;;      Locals:         1       0       0       0       0       0       0
  3293 ;;      Temps:          1       0       0       0       0       0       0
  3294 ;;      Totals:         4       0       0       0       0       0       0
  3295 ;;Total ram usage:        4 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    3
  3298 ;; This function calls:
  3299 ;;		___lwmod
  3300 ;; This function is called by:
  3301 ;;		_ymd_to_scalar
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text10
  3306  00258C                     __ptext10:
  3307                           	opt stack 0
  3308  00258C                     _isleap:
  3309                           	opt stack 22
  3310                           
  3311                           ;incstack = 0
  3312  00258C  FFFF               	dw	65535
  3313  00258E  0E01               	movlw	1
  3314  002590  6E0F               	movwf	_isleap$2143,c
  3315  002592  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3316  002596  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3317  00259A  6E0A               	movwf	___lwmod@divisor+1,c
  3318  00259C  0E90               	movlw	144
  3319  00259E  6E09               	movwf	___lwmod@divisor,c
  3320  0025A0  EC38  F013         	call	___lwmod	;wreg free
  3321  0025A4  5007               	movf	?___lwmod,w,c
  3322  0025A6  1008               	iorwf	?___lwmod+1,w,c
  3323  0025A8  E012               	bz	l1249
  3324  0025AA  C00C  F00E         	movff	isleap@yr,??_isleap
  3325  0025AE  0E03               	movlw	3
  3326  0025B0  160E               	andwf	??_isleap,f,c
  3327  0025B2  E10C               	bnz	l4826
  3328  0025B4  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3329  0025B8  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3330  0025BC  6A0A               	clrf	___lwmod@divisor+1,c
  3331  0025BE  0E64               	movlw	100
  3332  0025C0  6E09               	movwf	___lwmod@divisor,c
  3333  0025C2  EC38  F013         	call	___lwmod	;wreg free
  3334  0025C6  5007               	movf	?___lwmod,w,c
  3335  0025C8  1008               	iorwf	?___lwmod+1,w,c
  3336  0025CA  E101               	bnz	l1249
  3337  0025CC                     l4826:
  3338  0025CC  6A0F               	clrf	_isleap$2143,c
  3339  0025CE                     l1249:
  3340  0025CE  C00F  F00C         	movff	_isleap$2143,?_isleap
  3341  0025D2  6A0D               	clrf	?_isleap+1,c
  3342  0025D4  0012               	return		;funcret
  3343  0025D6  FFFF               	dw	65535	; errata NOP
  3344  0025D8                     __end_of_isleap:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodh	equ	0xFF4
  3351                           prodl	equ	0xFF3
  3352                           intcon	equ	0xFF2
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postdec1	equ	0xFE5
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           plusw2	equ	0xFDB
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366 ;; *************** function ___lwmod *****************
  3367 ;; Defined at:
  3368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  dividend        2    6[COMRAM] unsigned int 
  3371 ;;  divisor         2    8[COMRAM] unsigned int 
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;  counter         1   10[COMRAM] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  2    6[COMRAM] unsigned int 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3383 ;;      Params:         4       0       0       0       0       0       0
  3384 ;;      Locals:         1       0       0       0       0       0       0
  3385 ;;      Temps:          0       0       0       0       0       0       0
  3386 ;;      Totals:         5       0       0       0       0       0       0
  3387 ;;Total ram usage:        5 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    2
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_isleap
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text11
  3398  002670                     __ptext11:
  3399                           	opt stack 0
  3400  002670                     ___lwmod:
  3401                           	opt stack 22
  3402                           
  3403                           ;incstack = 0
  3404  002670  FFFF               	dw	65535
  3405  002672  5009               	movf	___lwmod@divisor,w,c
  3406  002674  100A               	iorwf	___lwmod@divisor+1,w,c
  3407  002676  E01A               	bz	l1233
  3408  002678  0E01               	movlw	1
  3409  00267A  6E0B               	movwf	___lwmod@counter,c
  3410  00267C  D005               	goto	l4856
  3411  00267E                     l4854:
  3412  00267E  FFFF               	dw	65535	; assembler added errata NOP
  3413  002680  90D8               	bcf	status,0,c
  3414  002682  3609               	rlcf	___lwmod@divisor,f,c
  3415  002684  360A               	rlcf	___lwmod@divisor+1,f,c
  3416  002686  2A0B               	incf	___lwmod@counter,f,c
  3417  002688                     l4856:
  3418  002688  FFFF               	dw	65535	; assembler added errata NOP
  3419  00268A  AE0A               	btfss	___lwmod@divisor+1,7,c
  3420  00268C  D7F8               	goto	l4854
  3421  00268E                     l4858:
  3422  00268E  FFFF               	dw	65535	; assembler added errata NOP
  3423  002690  5009               	movf	___lwmod@divisor,w,c
  3424  002692  5C07               	subwf	___lwmod@dividend,w,c
  3425  002694  500A               	movf	___lwmod@divisor+1,w,c
  3426  002696  5808               	subwfb	___lwmod@dividend+1,w,c
  3427  002698  E304               	bnc	l4862
  3428  00269A  5009               	movf	___lwmod@divisor,w,c
  3429  00269C  5E07               	subwf	___lwmod@dividend,f,c
  3430  00269E  500A               	movf	___lwmod@divisor+1,w,c
  3431  0026A0  5A08               	subwfb	___lwmod@dividend+1,f,c
  3432  0026A2                     l4862:
  3433  0026A2  90D8               	bcf	status,0,c
  3434  0026A4  320A               	rrcf	___lwmod@divisor+1,f,c
  3435  0026A6  3209               	rrcf	___lwmod@divisor,f,c
  3436  0026A8  2E0B               	decfsz	___lwmod@counter,f,c
  3437  0026AA  D7F1               	goto	l4858
  3438  0026AC                     l1233:
  3439  0026AC  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3440  0026B0  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3441  0026B4  0012               	return		;funcret
  3442  0026B6  FFFF               	dw	65535	; errata NOP
  3443  0026B8                     __end_of___lwmod:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           intcon	equ	0xFF2
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           plusw2	equ	0xFDB
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function _SetTime *****************
  3466 ;; Defined at:
  3467 ;;		line 168 in file "user.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  newTime         1    wreg     PTR long 
  3470 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  newTime         1    6[COMRAM] PTR long 
  3473 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr2l, fsr2h, status,2
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         0       0       0       0       0       0       0
  3484 ;;      Locals:         1       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0
  3486 ;;      Totals:         1       0       0       0       0       0       0
  3487 ;;Total ram usage:        1 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    2
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_SetTimeFromRegs
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text12
  3498  002936                     __ptext12:
  3499                           	opt stack 0
  3500  002936                     _SetTime:
  3501                           	opt stack 25
  3502                           
  3503                           ;incstack = 0
  3504  002936  FFFF               	dw	65535
  3505                           
  3506                           ;SetTime@newTime stored from wreg
  3507  002938  6E07               	movwf	SetTime@newTime,c
  3508                           
  3509                           ;user.c: 170: currentTime = *newTime;
  3510  00293A  5007               	movf	SetTime@newTime,w,c
  3511  00293C  6ED9               	movwf	fsr2l,c
  3512  00293E  6ADA               	clrf	fsr2h,c
  3513  002940  CFDE F0CE          	movff	postinc2,_currentTime
  3514  002944  CFDE F0CF          	movff	postinc2,_currentTime+1
  3515  002948  CFDE F0D0          	movff	postinc2,_currentTime+2
  3516  00294C  CFDE F0D1          	movff	postinc2,_currentTime+3
  3517  002950  0012               	return		;funcret
  3518  002952  FFFF               	dw	65535	; errata NOP
  3519  002954                     __end_of_SetTime:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           postdec1	equ	0xFE5
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           postdec2	equ	0xFDD
  3536                           plusw2	equ	0xFDB
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _SetHourMin *****************
  3542 ;; Defined at:
  3543 ;;		line 256 in file "interrupts.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  newHour         1    wreg     PTR int 
  3546 ;;		 -> SetTimeFromRegs@newTime(18), 
  3547 ;;  newMin          1    6[COMRAM] PTR int 
  3548 ;;		 -> SetTimeFromRegs@newTime(18), 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  newHour         1    7[COMRAM] PTR int 
  3551 ;;		 -> SetTimeFromRegs@newTime(18), 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr2l, fsr2h, status,2
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         1       0       0       0       0       0       0
  3562 ;;      Locals:         1       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         2       0       0       0       0       0       0
  3565 ;;Total ram usage:        2 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    2
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_SetTimeFromRegs
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text13
  3576  002954                     __ptext13:
  3577                           	opt stack 0
  3578  002954                     _SetHourMin:
  3579                           	opt stack 25
  3580                           
  3581                           ;incstack = 0
  3582  002954  FFFF               	dw	65535
  3583                           
  3584                           ;SetHourMin@newHour stored from wreg
  3585  002956  6E08               	movwf	SetHourMin@newHour,c
  3586                           
  3587                           ;interrupts.c: 258: globalHours = *newHour;
  3588  002958  5008               	movf	SetHourMin@newHour,w,c
  3589  00295A  6ED9               	movwf	fsr2l,c
  3590  00295C  6ADA               	clrf	fsr2h,c
  3591  00295E  50DF               	movf	indf2,w,c
  3592  002960  6E76               	movwf	_globalHours,c	;volatile
  3593                           
  3594                           ;interrupts.c: 259: globalMinutes = *newMin;
  3595  002962  5007               	movf	SetHourMin@newMin,w,c
  3596  002964  6ED9               	movwf	fsr2l,c
  3597  002966  6ADA               	clrf	fsr2h,c
  3598  002968  50DF               	movf	indf2,w,c
  3599  00296A  6E73               	movwf	_globalMinutes,c	;volatile
  3600  00296C  0012               	return		;funcret
  3601  00296E  FFFF               	dw	65535	; errata NOP
  3602  002970                     __end_of_SetHourMin:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           postdec1	equ	0xFE5
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           plusw2	equ	0xFDB
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           
  3624 ;; *************** function _LightStatusLed *****************
  3625 ;; Defined at:
  3626 ;;		line 387 in file "main.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  row             1    wreg     unsigned char 
  3629 ;;  on              1    6[COMRAM] unsigned char 
  3630 ;;  blink           1    7[COMRAM] unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  row             1   13[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3642 ;;      Params:         2       0       0       0       0       0       0
  3643 ;;      Locals:         1       0       0       0       0       0       0
  3644 ;;      Temps:          5       0       0       0       0       0       0
  3645 ;;      Totals:         8       0       0       0       0       0       0
  3646 ;;Total ram usage:        8 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    2
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;;		_SetTimeFromRegs
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text14
  3658  001A84                     __ptext14:
  3659                           	opt stack 0
  3660  001A84                     _LightStatusLed:
  3661                           	opt stack 25
  3662                           
  3663                           ;incstack = 0
  3664  001A84  FFFF               	dw	65535
  3665                           
  3666                           ;LightStatusLed@row stored from wreg
  3667  001A86  6E0E               	movwf	LightStatusLed@row,c
  3668                           
  3669                           ;main.c: 389: if(row > 7)
  3670  001A88  0E07               	movlw	7
  3671  001A8A  640E               	cpfsgt	LightStatusLed@row,c
  3672  001A8C  D001               	goto	l4930
  3673  001A8E  D072               	goto	l278
  3674  001A90                     l4930:
  3675  001A90  FFFF               	dw	65535	; assembler added errata NOP
  3676                           
  3677                           ;main.c: 391: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  3678  001A92  5007               	movf	LightStatusLed@on,w,c
  3679  001A94  E010               	bz	l4934
  3680  001A96  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3681  001A9A  0E01               	movlw	1
  3682  001A9C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3683  001A9E  2A09               	incf	??_LightStatusLed,f,c
  3684  001AA0  D003               	goto	u4054
  3685  001AA2                     u4055:
  3686  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  3687  001AA4  90D8               	bcf	status,0,c
  3688  001AA6  360A               	rlcf	??_LightStatusLed+1,f,c
  3689  001AA8                     u4054:
  3690  001AA8  FFFF               	dw	65535	; assembler added errata NOP
  3691  001AAA  2E09               	decfsz	??_LightStatusLed,f,c
  3692  001AAC  D7FA               	goto	u4055
  3693  001AAE  500A               	movf	??_LightStatusLed+1,w,c
  3694  001AB0  0100               	movlb	0	; () banked
  3695  001AB2  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  3696  001AB4  D00F               	goto	l4936
  3697  001AB6                     l4934:
  3698  001AB6  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3699  001ABA  0E01               	movlw	1
  3700  001ABC  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3701  001ABE  2A09               	incf	??_LightStatusLed,f,c
  3702  001AC0  D003               	goto	u4064
  3703  001AC2                     u4065:
  3704  001AC2  FFFF               	dw	65535	; assembler added errata NOP
  3705  001AC4  90D8               	bcf	status,0,c
  3706  001AC6  360A               	rlcf	??_LightStatusLed+1,f,c
  3707  001AC8                     u4064:
  3708  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  3709  001ACA  2E09               	decfsz	??_LightStatusLed,f,c
  3710  001ACC  D7FA               	goto	u4065
  3711  001ACE  1C0A               	comf	??_LightStatusLed+1,w,c
  3712  001AD0  0100               	movlb	0	; () banked
  3713  001AD2  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  3714  001AD4                     l4936:
  3715  001AD4  FFFF               	dw	65535	; assembler added errata NOP
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;main.c: 392: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  3719  001AD6  5008               	movf	LightStatusLed@blink,w,c
  3720  001AD8  E010               	bz	l4940
  3721                           
  3722                           ; BSR set to: 0
  3723  001ADA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3724  001ADE  0E01               	movlw	1
  3725  001AE0  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3726  001AE2  2A09               	incf	??_LightStatusLed,f,c
  3727  001AE4  D003               	goto	u4084
  3728  001AE6                     u4085:
  3729  001AE6  FFFF               	dw	65535	; assembler added errata NOP
  3730  001AE8  90D8               	bcf	status,0,c
  3731  001AEA  360A               	rlcf	??_LightStatusLed+1,f,c
  3732  001AEC                     u4084:
  3733  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  3734  001AEE  2E09               	decfsz	??_LightStatusLed,f,c
  3735  001AF0  D7FA               	goto	u4085
  3736  001AF2  500A               	movf	??_LightStatusLed+1,w,c
  3737  001AF4  0100               	movlb	0	; () banked
  3738  001AF6  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  3739  001AF8  D00F               	goto	l4942
  3740  001AFA                     l4940:
  3741                           
  3742                           ; BSR set to: 0
  3743  001AFA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3744  001AFE  0E01               	movlw	1
  3745  001B00  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3746  001B02  2A09               	incf	??_LightStatusLed,f,c
  3747  001B04  D003               	goto	u4094
  3748  001B06                     u4095:
  3749  001B06  FFFF               	dw	65535	; assembler added errata NOP
  3750  001B08  90D8               	bcf	status,0,c
  3751  001B0A  360A               	rlcf	??_LightStatusLed+1,f,c
  3752  001B0C                     u4094:
  3753  001B0C  FFFF               	dw	65535	; assembler added errata NOP
  3754  001B0E  2E09               	decfsz	??_LightStatusLed,f,c
  3755  001B10  D7FA               	goto	u4095
  3756  001B12  1C0A               	comf	??_LightStatusLed+1,w,c
  3757  001B14  0100               	movlb	0	; () banked
  3758  001B16  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  3759  001B18                     l4942:
  3760  001B18  FFFF               	dw	65535	; assembler added errata NOP
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;main.c: 393: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  3764  001B1A  5007               	movf	LightStatusLed@on,w,c
  3765  001B1C  E014               	bz	l4946
  3766                           
  3767                           ; BSR set to: 0
  3768  001B1E  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3769  001B22  0E01               	movlw	1
  3770  001B24  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3771  001B26  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3772  001B28  2A09               	incf	??_LightStatusLed,f,c
  3773  001B2A  D004               	goto	u4114
  3774  001B2C                     u4115:
  3775  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  3776  001B2E  90D8               	bcf	status,0,c
  3777  001B30  360A               	rlcf	??_LightStatusLed+1,f,c
  3778  001B32  360B               	rlcf	??_LightStatusLed+2,f,c
  3779  001B34                     u4114:
  3780  001B34  FFFF               	dw	65535	; assembler added errata NOP
  3781  001B36  2E09               	decfsz	??_LightStatusLed,f,c
  3782  001B38  D7F9               	goto	u4115
  3783  001B3A  500A               	movf	??_LightStatusLed+1,w,c
  3784  001B3C  0100               	movlb	0	; () banked
  3785  001B3E  13D2               	iorwf	__MODBUSCoils& (0+255),f,b
  3786  001B40  500B               	movf	??_LightStatusLed+2,w,c
  3787  001B42  13D3               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  3788  001B44  D017               	goto	l278
  3789  001B46                     l4946:
  3790                           
  3791                           ; BSR set to: 0
  3792  001B46  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3793  001B4A  0E01               	movlw	1
  3794  001B4C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3795  001B4E  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3796  001B50  2A09               	incf	??_LightStatusLed,f,c
  3797  001B52  D004               	goto	u4124
  3798  001B54                     u4125:
  3799  001B54  FFFF               	dw	65535	; assembler added errata NOP
  3800  001B56  90D8               	bcf	status,0,c
  3801  001B58  360A               	rlcf	??_LightStatusLed+1,f,c
  3802  001B5A  360B               	rlcf	??_LightStatusLed+2,f,c
  3803  001B5C                     u4124:
  3804  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  3805  001B5E  2E09               	decfsz	??_LightStatusLed,f,c
  3806  001B60  D7F9               	goto	u4125
  3807  001B62  1C0A               	comf	??_LightStatusLed+1,w,c
  3808  001B64  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  3809  001B66  1C0B               	comf	??_LightStatusLed+2,w,c
  3810  001B68  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  3811  001B6A  500C               	movf	??_LightStatusLed+3,w,c
  3812  001B6C  0100               	movlb	0	; () banked
  3813  001B6E  17D2               	andwf	__MODBUSCoils& (0+255),f,b
  3814  001B70  500D               	movf	??_LightStatusLed+4,w,c
  3815  001B72  17D3               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  3816  001B74                     l278:
  3817  001B74  FFFF               	dw	65535	; assembler added errata NOP
  3818  001B76  0012               	return		;funcret
  3819  001B78  FFFF               	dw	65535	; errata NOP
  3820  001B7A                     __end_of_LightStatusLed:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon	equ	0xFF2
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postdec1	equ	0xFE5
  3832                           fsr1h	equ	0xFE2
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           postinc2	equ	0xFDE
  3836                           postdec2	equ	0xFDD
  3837                           plusw2	equ	0xFDB
  3838                           fsr2h	equ	0xFDA
  3839                           fsr2l	equ	0xFD9
  3840                           status	equ	0xFD8
  3841                           
  3842 ;; *************** function _ModbusSetExceptionStatusBit *****************
  3843 ;; Defined at:
  3844 ;;		line 175 in file "ModbusRtu.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  bitNum          1    wreg     unsigned char 
  3847 ;;  value           1    6[COMRAM] unsigned char 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;  bitNum          1    9[COMRAM] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : F/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3859 ;;      Params:         1       0       0       0       0       0       0
  3860 ;;      Locals:         1       0       0       0       0       0       0
  3861 ;;      Temps:          2       0       0       0       0       0       0
  3862 ;;      Totals:         4       0       0       0       0       0       0
  3863 ;;Total ram usage:        4 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    2
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_io_poll
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text15
  3874  0025D8                     __ptext15:
  3875                           	opt stack 0
  3876  0025D8                     _ModbusSetExceptionStatusBit:
  3877                           	opt stack 27
  3878                           
  3879                           ;incstack = 0
  3880  0025D8  FFFF               	dw	65535
  3881                           
  3882                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
  3883  0025DA  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
  3884                           
  3885                           ;ModbusRtu.c: 177: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
  3886  0025DC  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
  3887  0025DE  E010               	bz	l5202
  3888  0025E0  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  3889  0025E4  0E01               	movlw	1
  3890  0025E6  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  3891  0025E8  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  3892  0025EA  D003               	goto	u4494
  3893  0025EC                     u4495:
  3894  0025EC  FFFF               	dw	65535	; assembler added errata NOP
  3895  0025EE  90D8               	bcf	status,0,c
  3896  0025F0  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  3897  0025F2                     u4494:
  3898  0025F2  FFFF               	dw	65535	; assembler added errata NOP
  3899  0025F4  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  3900  0025F6  D7FA               	goto	u4495
  3901  0025F8  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
  3902  0025FA  0100               	movlb	0	; () banked
  3903  0025FC  13C2               	iorwf	__exceptionStatus& (0+255),f,b
  3904  0025FE  D00F               	goto	l636
  3905  002600                     l5202:
  3906  002600  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
  3907  002604  0E01               	movlw	1
  3908  002606  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
  3909  002608  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
  3910  00260A  D003               	goto	u4504
  3911  00260C                     u4505:
  3912  00260C  FFFF               	dw	65535	; assembler added errata NOP
  3913  00260E  90D8               	bcf	status,0,c
  3914  002610  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
  3915  002612                     u4504:
  3916  002612  FFFF               	dw	65535	; assembler added errata NOP
  3917  002614  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
  3918  002616  D7FA               	goto	u4505
  3919  002618  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
  3920  00261A  0100               	movlb	0	; () banked
  3921  00261C  17C2               	andwf	__exceptionStatus& (0+255),f,b
  3922  00261E                     l636:
  3923  00261E  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ; BSR set to: 0
  3926  002620  0012               	return		;funcret
  3927  002622  FFFF               	dw	65535	; errata NOP
  3928  002624                     __end_of_ModbusSetExceptionStatusBit:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           intcon	equ	0xFF2
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1h	equ	0xFE2
  3941                           fsr1l	equ	0xFE1
  3942                           indf2	equ	0xFDF
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           plusw2	equ	0xFDB
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _ModbusGetLastCommand *****************
  3951 ;; Defined at:
  3952 ;;		line 886 in file "ModbusRtu.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  address         1    wreg     PTR unsigned short 
  3955 ;;		 -> io_poll@lastAddress(2), 
  3956 ;;  count           1    6[COMRAM] PTR unsigned short 
  3957 ;;		 -> io_poll@lastEndAddress(2), 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  address         1    8[COMRAM] PTR unsigned short 
  3960 ;;		 -> io_poll@lastAddress(2), 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      PTR unsigned char 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr2l, fsr2h, status,2
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3970 ;;      Params:         2       0       0       0       0       0       0
  3971 ;;      Locals:         1       0       0       0       0       0       0
  3972 ;;      Temps:          0       0       0       0       0       0       0
  3973 ;;      Totals:         3       0       0       0       0       0       0
  3974 ;;Total ram usage:        3 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    2
  3977 ;; This function calls:
  3978 ;;		Nothing
  3979 ;; This function is called by:
  3980 ;;		_io_poll
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text16
  3985  00286C                     __ptext16:
  3986                           	opt stack 0
  3987  00286C                     _ModbusGetLastCommand:
  3988                           	opt stack 27
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;incstack = 0
  3992  00286C  FFFF               	dw	65535
  3993                           
  3994                           ;ModbusGetLastCommand@address stored from wreg
  3995  00286E  6E09               	movwf	ModbusGetLastCommand@address,c
  3996                           
  3997                           ;ModbusRtu.c: 888: if (address != (0))
  3998  002870  5009               	movf	ModbusGetLastCommand@address,w,c
  3999  002872  E007               	bz	l5190
  4000                           
  4001                           ;ModbusRtu.c: 889: *address = _lastAddress;
  4002  002874  5009               	movf	ModbusGetLastCommand@address,w,c
  4003  002876  6ED9               	movwf	fsr2l,c
  4004  002878  6ADA               	clrf	fsr2h,c
  4005  00287A  C0B6  FFDE         	movff	__lastAddress,postinc2
  4006  00287E  C0B7  FFDD         	movff	__lastAddress+1,postdec2
  4007  002882                     l5190:
  4008                           
  4009                           ;ModbusRtu.c: 890: if (count != (0))
  4010  002882  5007               	movf	ModbusGetLastCommand@count,w,c
  4011  002884  E007               	bz	l5194
  4012                           
  4013                           ;ModbusRtu.c: 891: *count = _lastCount;
  4014  002886  5007               	movf	ModbusGetLastCommand@count,w,c
  4015  002888  6ED9               	movwf	fsr2l,c
  4016  00288A  6ADA               	clrf	fsr2h,c
  4017  00288C  C0B8  FFDE         	movff	__lastCount,postinc2
  4018  002890  C0B9  FFDD         	movff	__lastCount+1,postdec2
  4019  002894                     l5194:
  4020                           
  4021                           ;ModbusRtu.c: 892: return &_lastCommand;
  4022  002894  0ED4               	movlw	__lastCommand& (0+255)
  4023  002896  0012               	return		;funcret
  4024  002898  FFFF               	dw	65535	; errata NOP
  4025  00289A                     __end_of_ModbusGetLastCommand:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           postdec1	equ	0xFE5
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           plusw2	equ	0xFDB
  4043                           fsr2h	equ	0xFDA
  4044                           fsr2l	equ	0xFD9
  4045                           status	equ	0xFD8
  4046                           
  4047 ;; *************** function _InitFromEeprom *****************
  4048 ;; Defined at:
  4049 ;;		line 456 in file "main.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;		None
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;		None
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4063 ;;      Params:         0       0       0       0       0       0       0
  4064 ;;      Locals:         0       0       0       0       0       0       0
  4065 ;;      Temps:          2       0       0       0       0       0       0
  4066 ;;      Totals:         2       0       0       0       0       0       0
  4067 ;;Total ram usage:        2 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    4
  4070 ;; This function calls:
  4071 ;;		_LoadNextEvent
  4072 ;;		_Modbus
  4073 ;;		_SetBuzzerDuty
  4074 ;;		_SwitchOffAllLeds
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;;		_io_poll
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text17
  4082  001B7A                     __ptext17:
  4083                           	opt stack 0
  4084  001B7A                     _InitFromEeprom:
  4085                           	opt stack 25
  4086                           
  4087                           ;incstack = 0
  4088  001B7A  FFFF               	dw	65535
  4089                           
  4090                           ;main.c: 458: buzzeLoudDuration = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  4091  001B7C  0E02               	movlw	2
  4092  001B7E  6EA9               	movwf	4009,c	;volatile
  4093  001B80  80A6               	bsf	4006,0,c	;volatile
  4094  001B82  CFA8 F0C7          	movff	4008,_buzzeLoudDuration	;volatile
  4095                           
  4096                           ;main.c: 459: buzzeQuietDuration = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  4097  001B86  0E03               	movlw	3
  4098  001B88  6EA9               	movwf	4009,c	;volatile
  4099  001B8A  80A6               	bsf	4006,0,c	;volatile
  4100  001B8C  50A8               	movf	4008,w,c	;volatile
  4101                           
  4102                           ;main.c: 460: buzzerInfoPeriod = ( EEADR = 4, (void)0, RD = 1, EEDATA);
  4103  001B8E  0E04               	movlw	4
  4104  001B90  6EA9               	movwf	4009,c	;volatile
  4105  001B92  80A6               	bsf	4006,0,c	;volatile
  4106  001B94  50A8               	movf	4008,w,c	;volatile
  4107                           
  4108                           ;main.c: 461: buzzerAlarmPeriod = ( EEADR = 5, (void)0, RD = 1, EEDATA);
  4109  001B96  0E05               	movlw	5
  4110  001B98  6EA9               	movwf	4009,c	;volatile
  4111  001B9A  80A6               	bsf	4006,0,c	;volatile
  4112  001B9C  CFA8 F0C8          	movff	4008,_buzzerAlarmPeriod	;volatile
  4113                           
  4114                           ;main.c: 462: buzzerOnOffDuration = (((uint16_t)( EEADR = 6, (void)0, RD = 1, EEDATA)<<8
      +                          )|0);
  4115  001BA0  0E06               	movlw	6
  4116  001BA2  6EA9               	movwf	4009,c	;volatile
  4117  001BA4  80A6               	bsf	4006,0,c	;volatile
  4118  001BA6  50A8               	movf	4008,w,c	;volatile
  4119  001BA8  0100               	movlb	0	; () banked
  4120  001BAA  6FED               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  4121  001BAC  6BEC               	clrf	_buzzerOnOffDuration& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 463: buzzerOnOffPeriod = (((uint16_t)( EEADR = 7, (void)0, RD = 1, EEDATA)<<8)|
      +                          0);
  4125  001BAE  0E07               	movlw	7
  4126  001BB0  6EA9               	movwf	4009,c	;volatile
  4127                           
  4128                           ; BSR set to: 0
  4129  001BB2  80A6               	bsf	4006,0,c	;volatile
  4130                           
  4131                           ; BSR set to: 0
  4132  001BB4  50A8               	movf	4008,w,c	;volatile
  4133  001BB6  6FEF               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  4134  001BB8  6BEE               	clrf	_buzzerOnOffPeriod& (0+255),b
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;main.c: 464: buzzeEscaladeTime = ( EEADR = 8, (void)0, RD = 1, EEDATA);
  4138  001BBA  0E08               	movlw	8
  4139  001BBC  6EA9               	movwf	4009,c	;volatile
  4140                           
  4141                           ; BSR set to: 0
  4142  001BBE  80A6               	bsf	4006,0,c	;volatile
  4143  001BC0  50A8               	movf	4008,w,c	;volatile
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;main.c: 465: buzzerStartDurationDiv = ( EEADR = 9, (void)0, RD = 1, EEDATA);
  4147  001BC2  0E09               	movlw	9
  4148  001BC4  6EA9               	movwf	4009,c	;volatile
  4149                           
  4150                           ; BSR set to: 0
  4151  001BC6  80A6               	bsf	4006,0,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154  001BC8  50A8               	movf	4008,w,c	;volatile
  4155                           
  4156                           ;main.c: 466: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  4157  001BCA  0E0A               	movlw	10
  4158  001BCC  6EA9               	movwf	4009,c	;volatile
  4159                           
  4160                           ; BSR set to: 0
  4161  001BCE  80A6               	bsf	4006,0,c	;volatile
  4162                           
  4163                           ; BSR set to: 0
  4164  001BD0  CFA8 F0CD          	movff	4008,_eventAcceptTime	;volatile
  4165                           
  4166                           ;main.c: 467: eveningTimeHour = ( EEADR = 11, (void)0, RD = 1, EEDATA);
  4167  001BD4  0E0B               	movlw	11
  4168  001BD6  6EA9               	movwf	4009,c	;volatile
  4169                           
  4170                           ; BSR set to: 0
  4171  001BD8  80A6               	bsf	4006,0,c	;volatile
  4172                           
  4173                           ; BSR set to: 0
  4174  001BDA  50A8               	movf	4008,w,c	;volatile
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;main.c: 468: nightStartHour = ( EEADR = 12, (void)0, RD = 1, EEDATA);
  4178  001BDC  0E0C               	movlw	12
  4179  001BDE  6EA9               	movwf	4009,c	;volatile
  4180                           
  4181                           ; BSR set to: 0
  4182  001BE0  80A6               	bsf	4006,0,c	;volatile
  4183  001BE2  50A8               	movf	4008,w,c	;volatile
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;main.c: 469: nightEndHour = ( EEADR = 13, (void)0, RD = 1, EEDATA);
  4187  001BE4  0E0D               	movlw	13
  4188  001BE6  6EA9               	movwf	4009,c	;volatile
  4189                           
  4190                           ; BSR set to: 0
  4191  001BE8  80A6               	bsf	4006,0,c	;volatile
  4192                           
  4193                           ; BSR set to: 0
  4194  001BEA  50A8               	movf	4008,w,c	;volatile
  4195                           
  4196                           ;main.c: 470: morningTimeHour = ( EEADR = 14, (void)0, RD = 1, EEDATA);
  4197  001BEC  0E0E               	movlw	14
  4198  001BEE  6EA9               	movwf	4009,c	;volatile
  4199                           
  4200                           ; BSR set to: 0
  4201  001BF0  80A6               	bsf	4006,0,c	;volatile
  4202                           
  4203                           ; BSR set to: 0
  4204  001BF2  50A8               	movf	4008,w,c	;volatile
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;main.c: 471: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  4208  001BF4  0E0F               	movlw	15
  4209  001BF6  6EA9               	movwf	4009,c	;volatile
  4210                           
  4211                           ; BSR set to: 0
  4212  001BF8  80A6               	bsf	4006,0,c	;volatile
  4213                           
  4214                           ; BSR set to: 0
  4215  001BFA  50A8               	movf	4008,w,c	;volatile
  4216  001BFC  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4217  001BFE  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4218  001C00  0E06               	movlw	6
  4219  001C02                     u4445:
  4220  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4221  001C04  90D8               	bcf	status,0,c
  4222  001C06  360F               	rlcf	??_InitFromEeprom,f,c
  4223  001C08  3610               	rlcf	??_InitFromEeprom+1,f,c
  4224  001C0A  2EE8               	decfsz	wreg,f,c
  4225  001C0C  D7FA               	goto	u4445
  4226  001C0E  C00F  F0BA         	movff	??_InitFromEeprom,_blinkDuration
  4227  001C12  C010  F0BB         	movff	??_InitFromEeprom+1,_blinkDuration+1
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;main.c: 472: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  4231  001C16  0E10               	movlw	16
  4232  001C18  6EA9               	movwf	4009,c	;volatile
  4233                           
  4234                           ; BSR set to: 0
  4235  001C1A  80A6               	bsf	4006,0,c	;volatile
  4236                           
  4237                           ; BSR set to: 0
  4238  001C1C  50A8               	movf	4008,w,c	;volatile
  4239  001C1E  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4240  001C20  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4241  001C22  0E06               	movlw	6
  4242  001C24                     u4455:
  4243  001C24  FFFF               	dw	65535	; assembler added errata NOP
  4244  001C26  90D8               	bcf	status,0,c
  4245  001C28  360F               	rlcf	??_InitFromEeprom,f,c
  4246  001C2A  3610               	rlcf	??_InitFromEeprom+1,f,c
  4247  001C2C  2EE8               	decfsz	wreg,f,c
  4248  001C2E  D7FA               	goto	u4455
  4249  001C30  C00F  F0BC         	movff	??_InitFromEeprom,_blinkPeriod
  4250  001C34  C010  F0BD         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 474: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  4254  001C38  0E12               	movlw	18
  4255  001C3A  6EA9               	movwf	4009,c	;volatile
  4256                           
  4257                           ; BSR set to: 0
  4258  001C3C  80A6               	bsf	4006,0,c	;volatile
  4259                           
  4260                           ; BSR set to: 0
  4261  001C3E  CFA8 F072          	movff	4008,_eventCount	;volatile
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;main.c: 476: SetBuzzerDuty(buzzeLoudDuration);
  4265  001C42  C0C7  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  4266  001C46  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4267  001C48  EC44  F012         	call	_SetBuzzerDuty	;wreg free
  4268                           
  4269                           ;main.c: 477: PR2 = buzzerAlarmPeriod;
  4270  001C4C  C0C8  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  4271                           
  4272                           ;main.c: 480: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  4273  001C50  0E01               	movlw	1
  4274  001C52  6EA9               	movwf	4009,c	;volatile
  4275  001C54  80A6               	bsf	4006,0,c	;volatile
  4276  001C56  6A0C               	clrf	Modbus@u8serno,c
  4277  001C58  6A0D               	clrf	Modbus@u8txenpin,c
  4278  001C5A  50A8               	movf	4008,w,c	;volatile
  4279  001C5C  ECD1  F014         	call	_Modbus
  4280                           
  4281                           ;main.c: 481: SwitchOffAllLeds();
  4282  001C60  EC78  F014         	call	_SwitchOffAllLeds	;wreg free
  4283                           
  4284                           ;main.c: 483: LoadNextEvent();
  4285  001C64  EFAE  F010         	goto	_LoadNextEvent	;wreg free
  4286  001C68  FFFF               	dw	65535	; errata NOP
  4287  001C6A                     __end_of_InitFromEeprom:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           intcon	equ	0xFF2
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1h	equ	0xFE2
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           plusw2	equ	0xFDB
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _SetBuzzerDuty *****************
  4310 ;; Defined at:
  4311 ;;		line 433 in file "main.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  dc              2    6[COMRAM] unsigned int 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0
  4320 ;; Tracked objects:
  4321 ;;		On entry : F/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4325 ;;      Params:         2       0       0       0       0       0       0
  4326 ;;      Locals:         0       0       0       0       0       0       0
  4327 ;;      Temps:          2       0       0       0       0       0       0
  4328 ;;      Totals:         4       0       0       0       0       0       0
  4329 ;;Total ram usage:        4 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    2
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_InitFromEeprom
  4336 ;;		_main
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text18
  4341  002488                     __ptext18:
  4342                           	opt stack 0
  4343  002488                     _SetBuzzerDuty:
  4344                           	opt stack 26
  4345                           
  4346                           ;incstack = 0
  4347  002488  FFFF               	dw	65535
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;main.c: 438: CCP1CONbits.DC1B0 = (dc & 0x01) != 0 ? 1 : 0;
  4351  00248A  A007               	btfss	SetBuzzerDuty@dc,0,c
  4352  00248C  D003               	goto	u4230
  4353  00248E  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4354  002490  2A09               	incf	??_SetBuzzerDuty& (0+255),f,c
  4355  002492  D002               	goto	u4248
  4356  002494                     u4230:
  4357  002494  FFFF               	dw	65535	; assembler added errata NOP
  4358  002496  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4359  002498                     u4248:
  4360  002498  FFFF               	dw	65535	; assembler added errata NOP
  4361  00249A  3A09               	swapf	??_SetBuzzerDuty,f,c
  4362  00249C  50BD               	movf	4029,w,c	;volatile
  4363  00249E  1809               	xorwf	??_SetBuzzerDuty,w,c
  4364  0024A0  0BEF               	andlw	-17
  4365  0024A2  1809               	xorwf	??_SetBuzzerDuty,w,c
  4366  0024A4  6EBD               	movwf	4029,c	;volatile
  4367                           
  4368                           ;main.c: 439: CCP1CONbits.DC1B1 = (dc & 0x02) != 0 ? 1 : 0;
  4369  0024A6  A207               	btfss	SetBuzzerDuty@dc,1,c
  4370  0024A8  D003               	goto	u4250
  4371  0024AA  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4372  0024AC  2A09               	incf	??_SetBuzzerDuty& (0+255),f,c
  4373  0024AE  D002               	goto	u4268
  4374  0024B0                     u4250:
  4375  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  4376  0024B2  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4377  0024B4                     u4268:
  4378  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  4379  0024B6  3A09               	swapf	??_SetBuzzerDuty,f,c
  4380  0024B8  4609               	rlncf	??_SetBuzzerDuty,f,c
  4381  0024BA  50BD               	movf	4029,w,c	;volatile
  4382  0024BC  1809               	xorwf	??_SetBuzzerDuty,w,c
  4383  0024BE  0BDF               	andlw	-33
  4384  0024C0  1809               	xorwf	??_SetBuzzerDuty,w,c
  4385  0024C2  6EBD               	movwf	4029,c	;volatile
  4386                           
  4387                           ;main.c: 441: CCPR1L = (uint8_t)(dc >> 2);
  4388  0024C4  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4389  0024C8  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  4390  0024CC  90D8               	bcf	status,0,c
  4391  0024CE  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4392  0024D0  3209               	rrcf	??_SetBuzzerDuty,f,c
  4393  0024D2  90D8               	bcf	status,0,c
  4394  0024D4  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4395  0024D6  3209               	rrcf	??_SetBuzzerDuty,f,c
  4396  0024D8  5009               	movf	??_SetBuzzerDuty,w,c
  4397  0024DA  6EBE               	movwf	4030,c	;volatile
  4398  0024DC  0012               	return		;funcret
  4399  0024DE  FFFF               	dw	65535	; errata NOP
  4400  0024E0                     __end_of_SetBuzzerDuty:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           intcon	equ	0xFF2
  4409                           postinc0	equ	0xFEE
  4410                           wreg	equ	0xFE8
  4411                           postdec1	equ	0xFE5
  4412                           fsr1h	equ	0xFE2
  4413                           fsr1l	equ	0xFE1
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _Modbus *****************
  4423 ;; Defined at:
  4424 ;;		line 170 in file "ModbusRtu.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  u8id            1    wreg     unsigned char 
  4427 ;;  u8serno         1   11[COMRAM] unsigned char 
  4428 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  u8id            1   13[COMRAM] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         2       0       0       0       0       0       0
  4441 ;;      Locals:         1       0       0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0
  4443 ;;      Totals:         3       0       0       0       0       0       0
  4444 ;;Total ram usage:        3 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    3
  4447 ;; This function calls:
  4448 ;;		_ModbusInit
  4449 ;; This function is called by:
  4450 ;;		_InitFromEeprom
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text19
  4455  0029A2                     __ptext19:
  4456                           	opt stack 0
  4457  0029A2                     _Modbus:
  4458                           	opt stack 25
  4459                           
  4460                           ;incstack = 0
  4461  0029A2  FFFF               	dw	65535
  4462                           
  4463                           ;Modbus@u8id stored from wreg
  4464  0029A4  6E0E               	movwf	Modbus@u8id,c
  4465                           
  4466                           ;ModbusRtu.c: 172: ModbusInit(u8id, u8serno, u8txenpin);
  4467  0029A6  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4468  0029AA  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4469  0029AE  500E               	movf	Modbus@u8id,w,c
  4470  0029B0  EFDB  F014         	goto	_ModbusInit
  4471  0029B4  FFFF               	dw	65535	; errata NOP
  4472  0029B6                     __end_of_Modbus:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           intcon	equ	0xFF2
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1h	equ	0xFE2
  4485                           fsr1l	equ	0xFE1
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           plusw2	equ	0xFDB
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _ModbusInit *****************
  4495 ;; Defined at:
  4496 ;;		line 494 in file "ModbusRtu.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  u8id            1    wreg     unsigned char 
  4499 ;;  u8serno         1    6[COMRAM] unsigned char 
  4500 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  u8id            1   10[COMRAM] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4512 ;;      Params:         2       0       0       0       0       0       0
  4513 ;;      Locals:         3       0       0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0
  4515 ;;      Totals:         5       0       0       0       0       0       0
  4516 ;;Total ram usage:        5 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    2
  4519 ;; This function calls:
  4520 ;;		Nothing
  4521 ;; This function is called by:
  4522 ;;		_Modbus
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text20
  4527  0029B6                     __ptext20:
  4528                           	opt stack 0
  4529  0029B6                     _ModbusInit:
  4530                           	opt stack 25
  4531                           
  4532                           ;incstack = 0
  4533  0029B6  FFFF               	dw	65535
  4534                           
  4535                           ;ModbusInit@u8id stored from wreg
  4536  0029B8  6E0B               	movwf	ModbusInit@u8id,c
  4537                           
  4538                           ;ModbusRtu.c: 496: _u8id = u8id;
  4539  0029BA  C00B  F0C5         	movff	ModbusInit@u8id,__u8id
  4540                           
  4541                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4542  0029BE  0E04               	movlw	4
  4543  0029C0  6007               	cpfslt	ModbusInit@u8serno,c
  4544  0029C2  D000               	goto	l668
  4545  0029C4                     l668:
  4546  0029C4  FFFF               	dw	65535	; assembler added errata NOP
  4547  0029C6  0012               	return		;funcret
  4548  0029C8  FFFF               	dw	65535	; errata NOP
  4549  0029CA                     __end_of_ModbusInit:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           plusw2	equ	0xFDB
  4567                           fsr2h	equ	0xFDA
  4568                           fsr2l	equ	0xFD9
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function _ResetEvent *****************
  4572 ;; Defined at:
  4573 ;;		line 564 in file "main.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  state           1    wreg     unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  state           1   16[COMRAM] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : F/0
  4584 ;;		On exit  : F/1
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4587 ;;      Params:         0       0       0       0       0       0       0
  4588 ;;      Locals:         3       0       0       0       0       0       0
  4589 ;;      Temps:          2       0       0       0       0       0       0
  4590 ;;      Totals:         5       0       0       0       0       0       0
  4591 ;;Total ram usage:        5 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    3
  4594 ;; This function calls:
  4595 ;;		_LightLed
  4596 ;; This function is called by:
  4597 ;;		_main
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text21
  4602  002788                     __ptext21:
  4603                           	opt stack 0
  4604  002788                     _ResetEvent:
  4605                           	opt stack 27
  4606                           
  4607                           ;incstack = 0
  4608  002788  FFFF               	dw	65535
  4609                           
  4610                           ;ResetEvent@state stored from wreg
  4611  00278A  6E11               	movwf	ResetEvent@state,c
  4612                           
  4613                           ;main.c: 566: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4614  00278C  5011               	movf	ResetEvent@state,w,c
  4615  00278E  E103               	bnz	l5208
  4616  002790  6A13               	clrf	_ResetEvent$829+1,c
  4617  002792  0E02               	movlw	2
  4618  002794  D002               	goto	L2
  4619  002796                     l5208:
  4620  002796  6A13               	clrf	_ResetEvent$829+1,c
  4621  002798  0E01               	movlw	1
  4622  00279A                     L2:
  4623  00279A  FFFF               	dw	65535	; assembler added errata NOP
  4624  00279C  6E12               	movwf	_ResetEvent$829,c
  4625  00279E  C012  F007         	movff	_ResetEvent$829,LightLed@ledState
  4626  0027A2  6A08               	clrf	LightLed@blink,c
  4627  0027A4  2875               	incf	_currentAlarmedEventNum,w,c
  4628  0027A6  EC29  F007         	call	_LightLed
  4629                           
  4630                           ;main.c: 567: currentAlarmedEventNum = 0xff;
  4631  0027AA  6875               	setf	_currentAlarmedEventNum,c
  4632                           
  4633                           ;main.c: 568: eventResetSecond = 0;
  4634  0027AC  0100               	movlb	0	; () banked
  4635  0027AE  6BA8               	clrf	_eventResetSecond& (0+255),b
  4636  0027B0  6BA9               	clrf	(_eventResetSecond+1)& (0+255),b
  4637  0027B2  6BAA               	clrf	(_eventResetSecond+2)& (0+255),b
  4638  0027B4  6BAB               	clrf	(_eventResetSecond+3)& (0+255),b
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;main.c: 569: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4642  0027B6  5075               	movf	_currentAlarmedEventNum,w,c
  4643  0027B8  6E0F               	movwf	??_ResetEvent& (0+255),c
  4644  0027BA  5074               	movf	_curEventNum,w,c
  4645  0027BC  0101               	movlb	1	; () banked
  4646  0027BE  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4647  0027C0  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4648                           
  4649                           ; BSR set to: 1
  4650  0027C4  0012               	return		;funcret
  4651  0027C6  FFFF               	dw	65535	; errata NOP
  4652  0027C8                     __end_of_ResetEvent:
  4653                           	opt stack 0
  4654                           tblptru	equ	0xFF8
  4655                           tblptrh	equ	0xFF7
  4656                           tblptrl	equ	0xFF6
  4657                           tablat	equ	0xFF5
  4658                           prodh	equ	0xFF4
  4659                           prodl	equ	0xFF3
  4660                           intcon	equ	0xFF2
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _ProcessLightBlock *****************
  4675 ;; Defined at:
  4676 ;;		line 499 in file "main.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  curMs           1    wreg     PTR unsigned long 
  4679 ;;		 -> main@curMs(4), 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  4682 ;;		 -> main@curMs(4), 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : F/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4692 ;;      Params:         0       0       0       0       0       0       0
  4693 ;;      Locals:         1       0       0       0       0       0       0
  4694 ;;      Temps:          4       0       0       0       0       0       0
  4695 ;;      Totals:         5       0       0       0       0       0       0
  4696 ;;Total ram usage:        5 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    3
  4699 ;; This function calls:
  4700 ;;		_UpdateLedRegister
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text22
  4707  000980                     __ptext22:
  4708                           	opt stack 0
  4709  000980                     _ProcessLightBlock:
  4710                           	opt stack 27
  4711                           
  4712                           ; BSR set to: 1
  4713                           ;incstack = 0
  4714  000980  FFFF               	dw	65535
  4715                           
  4716                           ;ProcessLightBlock@curMs stored from wreg
  4717  000982  6E0C               	movwf	ProcessLightBlock@curMs,c
  4718                           
  4719                           ;main.c: 501: diffTime = *curMs - oldBlinkOnTime;
  4720  000984  500C               	movf	ProcessLightBlock@curMs,w,c
  4721  000986  6ED9               	movwf	fsr2l,c
  4722  000988  6ADA               	clrf	fsr2h,c
  4723  00098A  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  4724  00098E  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  4725  000992  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  4726  000996  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  4727  00099A  0100               	movlb	0	; () banked
  4728  00099C  51B0               	movf	_oldBlinkOnTime& (0+255),w,b
  4729  00099E  5C08               	subwf	??_ProcessLightBlock,w,c
  4730  0009A0  6FA4               	movwf	_diffTime& (0+255),b
  4731  0009A2  51B1               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4732  0009A4  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4733  0009A6  6FA5               	movwf	(_diffTime+1)& (0+255),b
  4734  0009A8  51B2               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4735  0009AA  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4736  0009AC  6FA6               	movwf	(_diffTime+2)& (0+255),b
  4737  0009AE  51B3               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4738  0009B0  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4739  0009B2  6FA7               	movwf	(_diffTime+3)& (0+255),b
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;main.c: 502: if(diffTime > blinkPeriod)
  4743  0009B4  51BC               	movf	_blinkPeriod& (0+255),w,b
  4744  0009B6  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4745  0009B8  51BD               	movf	(_blinkPeriod+1)& (0+255),w,b
  4746  0009BA  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4747  0009BC  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4748  0009BE  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4749  0009C0  51A4               	movf	_diffTime& (0+255),w,b
  4750  0009C2  5C08               	subwf	??_ProcessLightBlock,w,c
  4751  0009C4  51A5               	movf	(_diffTime+1)& (0+255),w,b
  4752  0009C6  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4753  0009C8  51A6               	movf	(_diffTime+2)& (0+255),w,b
  4754  0009CA  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4755  0009CC  51A7               	movf	(_diffTime+3)& (0+255),w,b
  4756  0009CE  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4757  0009D0  E20E               	bc	l4194
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;main.c: 503: {
  4761                           ;main.c: 504: blinkOn = 1;
  4762  0009D2  0E01               	movlw	1
  4763  0009D4  6E71               	movwf	_blinkOn,c
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;main.c: 505: oldBlinkOnTime = *curMs;
  4767  0009D6  500C               	movf	ProcessLightBlock@curMs,w,c
  4768  0009D8  6ED9               	movwf	fsr2l,c
  4769  0009DA  6ADA               	clrf	fsr2h,c
  4770  0009DC  CFDE F0B0          	movff	postinc2,_oldBlinkOnTime
  4771  0009E0  CFDE F0B1          	movff	postinc2,_oldBlinkOnTime+1
  4772  0009E4  CFDE F0B2          	movff	postinc2,_oldBlinkOnTime+2
  4773  0009E8  CFDE F0B3          	movff	postinc2,_oldBlinkOnTime+3
  4774                           
  4775                           ;main.c: 506: }
  4776  0009EC  D0F1               	goto	l4346
  4777  0009EE                     l4194:
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;main.c: 507: else if(blinkOn && diffTime > blinkDuration)
  4781  0009EE  5071               	movf	_blinkOn,w,c
  4782  0009F0  E101 D0EE          	bz	l4346
  4783                           
  4784                           ; BSR set to: 0
  4785  0009F4  51BA               	movf	_blinkDuration& (0+255),w,b
  4786  0009F6  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  4787  0009F8  51BB               	movf	(_blinkDuration+1)& (0+255),w,b
  4788  0009FA  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  4789  0009FC  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  4790  0009FE  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  4791  000A00  51A4               	movf	_diffTime& (0+255),w,b
  4792  000A02  5C08               	subwf	??_ProcessLightBlock,w,c
  4793  000A04  51A5               	movf	(_diffTime+1)& (0+255),w,b
  4794  000A06  5809               	subwfb	??_ProcessLightBlock+1,w,c
  4795  000A08  51A6               	movf	(_diffTime+2)& (0+255),w,b
  4796  000A0A  580A               	subwfb	??_ProcessLightBlock+2,w,c
  4797  000A0C  51A7               	movf	(_diffTime+3)& (0+255),w,b
  4798  000A0E  580B               	subwfb	??_ProcessLightBlock+3,w,c
  4799  000A10  E301 D0DE          	bc	l4346
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;main.c: 508: {
  4803                           ;main.c: 509: blinkOn = 0;
  4804  000A14  6A71               	clrf	_blinkOn,c
  4805  000A16  D0DC               	goto	l4346
  4806  000A18                     l4200:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;main.c: 517: LATA &= 0xF0;
  4810  000A18  0EF0               	movlw	240
  4811  000A1A  1689               	andwf	3977,f,c	;volatile
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;main.c: 518: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4815  000A1C  5071               	movf	_blinkOn,w,c
  4816  000A1E  E003               	bz	l4206
  4817                           
  4818                           ; BSR set to: 0
  4819  000A20  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4820  000A24  D003               	goto	l4208
  4821  000A26                     l4206:
  4822                           
  4823                           ; BSR set to: 0
  4824  000A26  5190               	movf	_ledStatuses& (0+255),w,b
  4825  000A28  1980               	xorwf	_ledBlink& (0+255),w,b
  4826  000A2A  6E8A               	movwf	3978,c	;volatile
  4827  000A2C                     l4208:
  4828  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  4829                           
  4830                           ; BSR set to: 0
  4831  000A2E  0E00               	movlw	0
  4832  000A30  EC7F  F013         	call	_UpdateLedRegister
  4833                           
  4834                           ;main.c: 519: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4835  000A34  5071               	movf	_blinkOn,w,c
  4836  000A36  E003               	bz	l4214
  4837  000A38  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4838  000A3C  D004               	goto	l4216
  4839  000A3E                     l4214:
  4840  000A3E  0100               	movlb	0	; () banked
  4841  000A40  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  4842  000A42  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  4843  000A44  6E8A               	movwf	3978,c	;volatile
  4844  000A46                     l4216:
  4845  000A46  FFFF               	dw	65535	; assembler added errata NOP
  4846  000A48  0E01               	movlw	1
  4847  000A4A  EC7F  F013         	call	_UpdateLedRegister
  4848                           
  4849                           ;main.c: 520: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  4850  000A4E  5071               	movf	_blinkOn,w,c
  4851  000A50  E003               	bz	l4222
  4852  000A52  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  4853  000A56  D004               	goto	l4224
  4854  000A58                     l4222:
  4855  000A58  0100               	movlb	0	; () banked
  4856  000A5A  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  4857  000A5C  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  4858  000A5E  6E8A               	movwf	3978,c	;volatile
  4859  000A60                     l4224:
  4860  000A60  FFFF               	dw	65535	; assembler added errata NOP
  4861  000A62  0E02               	movlw	2
  4862  000A64  EC7F  F013         	call	_UpdateLedRegister
  4863                           
  4864                           ;main.c: 521: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  4865  000A68  5071               	movf	_blinkOn,w,c
  4866  000A6A  E003               	bz	l4230
  4867  000A6C  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  4868  000A70  D004               	goto	l4232
  4869  000A72                     l4230:
  4870  000A72  0100               	movlb	0	; () banked
  4871  000A74  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  4872  000A76  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  4873  000A78  6E8A               	movwf	3978,c	;volatile
  4874  000A7A                     l4232:
  4875  000A7A  FFFF               	dw	65535	; assembler added errata NOP
  4876  000A7C  0E03               	movlw	3
  4877  000A7E  EC7F  F013         	call	_UpdateLedRegister
  4878                           
  4879                           ;main.c: 522: LATAbits.LATA0 = 1;
  4880  000A82  8089               	bsf	3977,0,c	;volatile
  4881                           
  4882                           ;main.c: 523: break;
  4883  000A84  D0B0               	goto	l4348
  4884  000A86                     l4236:
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;main.c: 525: LATA &= 0xF0;
  4888  000A86  0EF0               	movlw	240
  4889  000A88  1689               	andwf	3977,f,c	;volatile
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;main.c: 526: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  4893  000A8A  5071               	movf	_blinkOn,w,c
  4894  000A8C  E003               	bz	l4242
  4895                           
  4896                           ; BSR set to: 0
  4897  000A8E  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  4898  000A92  D003               	goto	l4244
  4899  000A94                     l4242:
  4900                           
  4901                           ; BSR set to: 0
  4902  000A94  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  4903  000A96  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  4904  000A98  6E8A               	movwf	3978,c	;volatile
  4905  000A9A                     l4244:
  4906  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  4907                           
  4908                           ; BSR set to: 0
  4909  000A9C  0E00               	movlw	0
  4910  000A9E  EC7F  F013         	call	_UpdateLedRegister
  4911                           
  4912                           ;main.c: 527: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  4913  000AA2  5071               	movf	_blinkOn,w,c
  4914  000AA4  E003               	bz	l4250
  4915  000AA6  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  4916  000AAA  D004               	goto	l4252
  4917  000AAC                     l4250:
  4918  000AAC  0100               	movlb	0	; () banked
  4919  000AAE  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  4920  000AB0  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  4921  000AB2  6E8A               	movwf	3978,c	;volatile
  4922  000AB4                     l4252:
  4923  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  4924  000AB6  0E01               	movlw	1
  4925  000AB8  EC7F  F013         	call	_UpdateLedRegister
  4926                           
  4927                           ;main.c: 528: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  4928  000ABC  5071               	movf	_blinkOn,w,c
  4929  000ABE  E003               	bz	l4258
  4930  000AC0  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  4931  000AC4  D004               	goto	l4260
  4932  000AC6                     l4258:
  4933  000AC6  0100               	movlb	0	; () banked
  4934  000AC8  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  4935  000ACA  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  4936  000ACC  6E8A               	movwf	3978,c	;volatile
  4937  000ACE                     l4260:
  4938  000ACE  FFFF               	dw	65535	; assembler added errata NOP
  4939  000AD0  0E02               	movlw	2
  4940  000AD2  EC7F  F013         	call	_UpdateLedRegister
  4941                           
  4942                           ;main.c: 529: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  4943  000AD6  5071               	movf	_blinkOn,w,c
  4944  000AD8  E003               	bz	l4266
  4945  000ADA  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  4946  000ADE  D004               	goto	l4268
  4947  000AE0                     l4266:
  4948  000AE0  0100               	movlb	0	; () banked
  4949  000AE2  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  4950  000AE4  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  4951  000AE6  6E8A               	movwf	3978,c	;volatile
  4952  000AE8                     l4268:
  4953  000AE8  FFFF               	dw	65535	; assembler added errata NOP
  4954  000AEA  0E03               	movlw	3
  4955  000AEC  EC7F  F013         	call	_UpdateLedRegister
  4956                           
  4957                           ;main.c: 530: LATAbits.LATA1 = 1;
  4958  000AF0  8289               	bsf	3977,1,c	;volatile
  4959                           
  4960                           ;main.c: 531: break;
  4961  000AF2  D079               	goto	l4348
  4962  000AF4                     l4272:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 533: LATA &= 0xF0;
  4966  000AF4  0EF0               	movlw	240
  4967  000AF6  1689               	andwf	3977,f,c	;volatile
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;main.c: 534: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  4971  000AF8  5071               	movf	_blinkOn,w,c
  4972  000AFA  E003               	bz	l4278
  4973                           
  4974                           ; BSR set to: 0
  4975  000AFC  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  4976  000B00  D003               	goto	l4280
  4977  000B02                     l4278:
  4978                           
  4979                           ; BSR set to: 0
  4980  000B02  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  4981  000B04  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  4982  000B06  6E8A               	movwf	3978,c	;volatile
  4983  000B08                     l4280:
  4984  000B08  FFFF               	dw	65535	; assembler added errata NOP
  4985                           
  4986                           ; BSR set to: 0
  4987  000B0A  0E00               	movlw	0
  4988  000B0C  EC7F  F013         	call	_UpdateLedRegister
  4989                           
  4990                           ;main.c: 535: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  4991  000B10  5071               	movf	_blinkOn,w,c
  4992  000B12  E003               	bz	l4286
  4993  000B14  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  4994  000B18  D004               	goto	l4288
  4995  000B1A                     l4286:
  4996  000B1A  0100               	movlb	0	; () banked
  4997  000B1C  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  4998  000B1E  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  4999  000B20  6E8A               	movwf	3978,c	;volatile
  5000  000B22                     l4288:
  5001  000B22  FFFF               	dw	65535	; assembler added errata NOP
  5002  000B24  0E01               	movlw	1
  5003  000B26  EC7F  F013         	call	_UpdateLedRegister
  5004                           
  5005                           ;main.c: 536: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5006  000B2A  5071               	movf	_blinkOn,w,c
  5007  000B2C  E003               	bz	l4294
  5008  000B2E  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5009  000B32  D004               	goto	l4296
  5010  000B34                     l4294:
  5011  000B34  0100               	movlb	0	; () banked
  5012  000B36  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5013  000B38  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5014  000B3A  6E8A               	movwf	3978,c	;volatile
  5015  000B3C                     l4296:
  5016  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  5017  000B3E  0E02               	movlw	2
  5018  000B40  EC7F  F013         	call	_UpdateLedRegister
  5019                           
  5020                           ;main.c: 537: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5021  000B44  5071               	movf	_blinkOn,w,c
  5022  000B46  E003               	bz	l4302
  5023  000B48  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5024  000B4C  D004               	goto	l4304
  5025  000B4E                     l4302:
  5026  000B4E  0100               	movlb	0	; () banked
  5027  000B50  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5028  000B52  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5029  000B54  6E8A               	movwf	3978,c	;volatile
  5030  000B56                     l4304:
  5031  000B56  FFFF               	dw	65535	; assembler added errata NOP
  5032  000B58  0E03               	movlw	3
  5033  000B5A  EC7F  F013         	call	_UpdateLedRegister
  5034                           
  5035                           ;main.c: 538: LATAbits.LATA2 = 1;
  5036  000B5E  8489               	bsf	3977,2,c	;volatile
  5037                           
  5038                           ;main.c: 539: break;
  5039  000B60  D042               	goto	l4348
  5040  000B62                     l4308:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;main.c: 541: LATA &= 0xF0;
  5044  000B62  0EF0               	movlw	240
  5045  000B64  1689               	andwf	3977,f,c	;volatile
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 542: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5049  000B66  5071               	movf	_blinkOn,w,c
  5050  000B68  E003               	bz	l4314
  5051                           
  5052                           ; BSR set to: 0
  5053  000B6A  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5054  000B6E  D003               	goto	l4316
  5055  000B70                     l4314:
  5056                           
  5057                           ; BSR set to: 0
  5058  000B70  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5059  000B72  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5060  000B74  6E8A               	movwf	3978,c	;volatile
  5061  000B76                     l4316:
  5062  000B76  FFFF               	dw	65535	; assembler added errata NOP
  5063                           
  5064                           ; BSR set to: 0
  5065  000B78  0E00               	movlw	0
  5066  000B7A  EC7F  F013         	call	_UpdateLedRegister
  5067                           
  5068                           ;main.c: 543: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5069  000B7E  5071               	movf	_blinkOn,w,c
  5070  000B80  E003               	bz	l4322
  5071  000B82  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5072  000B86  D004               	goto	l4324
  5073  000B88                     l4322:
  5074  000B88  0100               	movlb	0	; () banked
  5075  000B8A  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5076  000B8C  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5077  000B8E  6E8A               	movwf	3978,c	;volatile
  5078  000B90                     l4324:
  5079  000B90  FFFF               	dw	65535	; assembler added errata NOP
  5080  000B92  0E01               	movlw	1
  5081  000B94  EC7F  F013         	call	_UpdateLedRegister
  5082                           
  5083                           ;main.c: 544: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5084  000B98  5071               	movf	_blinkOn,w,c
  5085  000B9A  E003               	bz	l4330
  5086  000B9C  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5087  000BA0  D004               	goto	l4332
  5088  000BA2                     l4330:
  5089  000BA2  0100               	movlb	0	; () banked
  5090  000BA4  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5091  000BA6  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5092  000BA8  6E8A               	movwf	3978,c	;volatile
  5093  000BAA                     l4332:
  5094  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  5095  000BAC  0E02               	movlw	2
  5096  000BAE  EC7F  F013         	call	_UpdateLedRegister
  5097                           
  5098                           ;main.c: 545: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5099  000BB2  5071               	movf	_blinkOn,w,c
  5100  000BB4  E003               	bz	l4338
  5101  000BB6  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5102  000BBA  D004               	goto	l4340
  5103  000BBC                     l4338:
  5104  000BBC  0100               	movlb	0	; () banked
  5105  000BBE  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5106  000BC0  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5107  000BC2  6E8A               	movwf	3978,c	;volatile
  5108  000BC4                     l4340:
  5109  000BC4  FFFF               	dw	65535	; assembler added errata NOP
  5110  000BC6  0E03               	movlw	3
  5111  000BC8  EC7F  F013         	call	_UpdateLedRegister
  5112                           
  5113                           ;main.c: 546: LATAbits.LATA3 = 1;
  5114  000BCC  8689               	bsf	3977,3,c	;volatile
  5115                           
  5116                           ;main.c: 547: break;
  5117  000BCE  D00B               	goto	l4348
  5118  000BD0                     l4346:
  5119  000BD0  FFFF               	dw	65535	; assembler added errata NOP
  5120                           
  5121                           ; BSR set to: 0
  5122  000BD2  51CC               	movf	_currentLedBlock& (0+255),w,b
  5123                           
  5124                           ; Switch size 1, requested type "speed"
  5125                           ; Number of cases is 4, Range of values is 0 to 3
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte           13     7 (average)
  5129                           ;	Chosen strategy is simple_byte
  5130  000BD4  E101 D720          	bz	l4200
  5131  000BD8  0A01               	xorlw	1	; case 1
  5132  000BDA  E101 D754          	bz	l4236
  5133  000BDE  0A03               	xorlw	3	; case 2
  5134  000BE0  E089               	bz	l4272
  5135  000BE2  0A01               	xorlw	1	; case 3
  5136  000BE4  E0BE               	bz	l4308
  5137  000BE6                     l4348:
  5138  000BE6  FFFF               	dw	65535	; assembler added errata NOP
  5139                           
  5140                           ;main.c: 550: currentLedBlock++;
  5141  000BE8  0100               	movlb	0	; () banked
  5142  000BEA  2BCC               	incf	_currentLedBlock& (0+255),f,b
  5143                           
  5144                           ;main.c: 553: currentLedBlock &= 0xFB;
  5145  000BEC  95CC               	bcf	_currentLedBlock& (0+255),2,b
  5146                           
  5147                           ; BSR set to: 0
  5148  000BEE  0012               	return		;funcret
  5149  000BF0  FFFF               	dw	65535	; errata NOP
  5150  000BF2                     __end_of_ProcessLightBlock:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           postdec1	equ	0xFE5
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           plusw2	equ	0xFDB
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _UpdateLedRegister *****************
  5173 ;; Defined at:
  5174 ;;		line 268 in file "main.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  regIndex        1    wreg     unsigned char 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  regIndex        1    6[COMRAM] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5188 ;;      Params:         0       0       0       0       0       0       0
  5189 ;;      Locals:         1       0       0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0
  5191 ;;      Totals:         1       0       0       0       0       0       0
  5192 ;;Total ram usage:        1 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    2
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_ProcessLightBlock
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text23
  5203  0026FE                     __ptext23:
  5204                           	opt stack 0
  5205  0026FE                     _UpdateLedRegister:
  5206                           	opt stack 27
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;incstack = 0
  5210  0026FE  FFFF               	dw	65535
  5211                           
  5212                           ;UpdateLedRegister@regIndex stored from wreg
  5213  002700  6E07               	movwf	UpdateLedRegister@regIndex,c
  5214                           
  5215                           ;main.c: 270: switch(regIndex)
  5216  002702  D014               	goto	l3488
  5217  002704                     l245:
  5218                           
  5219                           ;main.c: 273: LATAbits.LATA4 = 0;
  5220  002704  9889               	bcf	3977,4,c	;volatile
  5221                           
  5222                           ;main.c: 274: TRISAbits.RA4 = 0;
  5223  002706  9892               	bcf	3986,4,c	;volatile
  5224                           
  5225                           ;main.c: 275: LATAbits.LATA4 = 1;
  5226  002708  8889               	bsf	3977,4,c	;volatile
  5227                           
  5228                           ;main.c: 276: TRISAbits.RA4 = 1;
  5229  00270A  8892               	bsf	3986,4,c	;volatile
  5230                           
  5231                           ;main.c: 277: break;
  5232  00270C  D018               	goto	l250
  5233  00270E                     l247:
  5234                           
  5235                           ;main.c: 279: LATCbits.LATC3 = 0;
  5236  00270E  968B               	bcf	3979,3,c	;volatile
  5237                           
  5238                           ;main.c: 280: TRISCbits.RC3 = 0;
  5239  002710  9694               	bcf	3988,3,c	;volatile
  5240                           
  5241                           ;main.c: 281: LATCbits.LATC3 = 1;
  5242  002712  868B               	bsf	3979,3,c	;volatile
  5243                           
  5244                           ;main.c: 282: TRISCbits.RC3 = 1;
  5245  002714  8694               	bsf	3988,3,c	;volatile
  5246                           
  5247                           ;main.c: 283: break;
  5248  002716  D013               	goto	l250
  5249  002718                     l248:
  5250                           
  5251                           ;main.c: 285: LATCbits.LATC0 = 0;
  5252  002718  908B               	bcf	3979,0,c	;volatile
  5253                           
  5254                           ;main.c: 286: TRISCbits.RC0 = 0;
  5255  00271A  9094               	bcf	3988,0,c	;volatile
  5256                           
  5257                           ;main.c: 287: LATCbits.LATC0 = 1;
  5258  00271C  808B               	bsf	3979,0,c	;volatile
  5259                           
  5260                           ;main.c: 288: TRISCbits.RC0 = 1;
  5261  00271E  8094               	bsf	3988,0,c	;volatile
  5262                           
  5263                           ;main.c: 289: break;
  5264  002720  D00E               	goto	l250
  5265  002722                     l249:
  5266                           
  5267                           ;main.c: 291: LATCbits.LATC1 = 0;
  5268  002722  928B               	bcf	3979,1,c	;volatile
  5269                           
  5270                           ;main.c: 292: TRISCbits.RC1 = 0;
  5271  002724  9294               	bcf	3988,1,c	;volatile
  5272                           
  5273                           ;main.c: 293: LATCbits.LATC1 = 1;
  5274  002726  828B               	bsf	3979,1,c	;volatile
  5275                           
  5276                           ;main.c: 294: TRISCbits.RC1 = 1;
  5277  002728  8294               	bsf	3988,1,c	;volatile
  5278                           
  5279                           ;main.c: 295: break;
  5280  00272A  D009               	goto	l250
  5281  00272C                     l3488:
  5282  00272C  FFFF               	dw	65535	; assembler added errata NOP
  5283  00272E  5007               	movf	UpdateLedRegister@regIndex,w,c
  5284                           
  5285                           ; Switch size 1, requested type "speed"
  5286                           ; Number of cases is 4, Range of values is 0 to 3
  5287                           ; switch strategies available:
  5288                           ; Name         Instructions Cycles
  5289                           ; simple_byte           13     7 (average)
  5290                           ;	Chosen strategy is simple_byte
  5291  002730  E0E9               	bz	l245
  5292  002732  0A01               	xorlw	1	; case 1
  5293  002734  E0EC               	bz	l247
  5294  002736  0A03               	xorlw	3	; case 2
  5295  002738  E0EF               	bz	l248
  5296  00273A  0A01               	xorlw	1	; case 3
  5297  00273C  E0F2               	bz	l249
  5298  00273E                     l250:
  5299  00273E  FFFF               	dw	65535	; assembler added errata NOP
  5300  002740  0012               	return		;funcret
  5301  002742  FFFF               	dw	65535	; errata NOP
  5302  002744                     __end_of_UpdateLedRegister:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           intcon	equ	0xFF2
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           fsr1h	equ	0xFE2
  5315                           fsr1l	equ	0xFE1
  5316                           indf2	equ	0xFDF
  5317                           postinc2	equ	0xFDE
  5318                           postdec2	equ	0xFDD
  5319                           plusw2	equ	0xFDB
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _ProcessDiary *****************
  5325 ;; Defined at:
  5326 ;;		line 607 in file "main.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  minute          1   19[COMRAM] unsigned char 
  5331 ;;  hour            1   18[COMRAM] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : F/1
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5341 ;;      Params:         0       0       0       0       0       0       0
  5342 ;;      Locals:         2       0       0       0       0       0       0
  5343 ;;      Temps:          4       0       0       0       0       0       0
  5344 ;;      Totals:         6       0       0       0       0       0       0
  5345 ;;Total ram usage:        6 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    4
  5348 ;; This function calls:
  5349 ;;		_GetTime
  5350 ;;		_LightLed
  5351 ;;		_LoadNextEvent
  5352 ;;		_SwitchOffAllLeds
  5353 ;;		_getHourMin
  5354 ;; This function is called by:
  5355 ;;		_main
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text24
  5360  001DF6                     __ptext24:
  5361                           	opt stack 0
  5362  001DF6                     _ProcessDiary:
  5363                           	opt stack 26
  5364                           
  5365                           ;incstack = 0
  5366  001DF6  FFFF               	dw	65535
  5367                           
  5368                           ; BSR set to: 1
  5369                           ;main.c: 610: if(curEventNum == 0xff)
  5370  001DF8  2874               	incf	_curEventNum,w,c
  5371  001DFA  E05A               	bz	l372
  5372                           
  5373                           ; BSR set to: 1
  5374                           ;main.c: 612: uint8_t hour, minute;
  5375                           ;main.c: 613: if(!getHourMin(&hour, &minute))
  5376  001DFC  0E14               	movlw	low ProcessDiary@minute
  5377  001DFE  6E07               	movwf	getHourMin@min,c
  5378  001E00  0E13               	movlw	ProcessDiary@hour& (0+255)
  5379  001E02  EC4D  F014         	call	_getHourMin
  5380  001E06  0900               	iorlw	0
  5381  001E08  E053               	bz	l372
  5382                           
  5383                           ;main.c: 616: if(hour == 0 && minute == 0)
  5384  001E0A  5013               	movf	ProcessDiary@hour,w,c
  5385  001E0C  E10C               	bnz	l5236
  5386  001E0E  5014               	movf	ProcessDiary@minute,w,c
  5387  001E10  E10A               	bnz	l5236
  5388                           
  5389                           ;main.c: 617: {
  5390                           ;main.c: 618: SwitchOffAllLeds();
  5391  001E12  EC78  F014         	call	_SwitchOffAllLeds	;wreg free
  5392                           
  5393                           ;main.c: 619: curEventNum = 0xff;
  5394  001E16  6874               	setf	_curEventNum,c
  5395                           
  5396                           ;main.c: 620: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5397  001E18  5075               	movf	_currentAlarmedEventNum,w,c
  5398  001E1A  6E0F               	movwf	??_ProcessDiary& (0+255),c
  5399  001E1C  5074               	movf	_curEventNum,w,c
  5400  001E1E  0101               	movlb	1	; () banked
  5401  001E20  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5402  001E22  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5403  001E26                     l5236:
  5404                           
  5405                           ;main.c: 622: }
  5406                           ;main.c: 625: if(curEventHour == hour && curEventMinute == minute)
  5407  001E26  5013               	movf	ProcessDiary@hour,w,c
  5408  001E28  0100               	movlb	0	; () banked
  5409  001E2A  19C9               	xorwf	_curEventHour& (0+255),w,b
  5410  001E2C  E141               	bnz	l372
  5411                           
  5412                           ; BSR set to: 0
  5413  001E2E  5014               	movf	ProcessDiary@minute,w,c
  5414  001E30  19CA               	xorwf	_curEventMinute& (0+255),w,b
  5415  001E32  E13E               	bnz	l372
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;main.c: 626: {
  5419                           ;main.c: 628: if(currentAlarmedEventNum != 0xff)
  5420  001E34  2875               	incf	_currentAlarmedEventNum,w,c
  5421  001E36  E006               	bz	l5244
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;main.c: 629: {
  5425                           ;main.c: 630: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5426  001E38  0E02               	movlw	2
  5427  001E3A  6E07               	movwf	LightLed@ledState,c
  5428  001E3C  6A08               	clrf	LightLed@blink,c
  5429  001E3E  2875               	incf	_currentAlarmedEventNum,w,c
  5430  001E40  EC29  F007         	call	_LightLed
  5431  001E44                     l5244:
  5432                           
  5433                           ;main.c: 631: }
  5434                           ;main.c: 633: {
  5435                           ;main.c: 634: currentAlarmedEventNum = curEventNum;
  5436  001E44  C074  F075         	movff	_curEventNum,_currentAlarmedEventNum
  5437                           
  5438                           ;main.c: 636: if(curEventType == 0)
  5439  001E48  0100               	movlb	0	; () banked
  5440  001E4A  51CB               	movf	_curEventType& (0+255),w,b
  5441  001E4C  E107               	bnz	l5250
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;main.c: 637: {
  5445                           ;main.c: 638: LightLed(currentAlarmedEventNum + 1, LED_GREEN, 1);
  5446  001E4E  0E01               	movlw	1
  5447  001E50  6E07               	movwf	LightLed@ledState,c
  5448  001E52  6E08               	movwf	LightLed@blink,c
  5449  001E54  2875               	incf	_currentAlarmedEventNum,w,c
  5450  001E56  EC29  F007         	call	_LightLed
  5451                           
  5452                           ;main.c: 639: }
  5453  001E5A  D007               	goto	l378
  5454  001E5C                     l5250:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;main.c: 640: else
  5458                           ;main.c: 641: {
  5459                           ;main.c: 642: LightLed(currentAlarmedEventNum + 1, LED_RED, 1);
  5460  001E5C  0E02               	movlw	2
  5461  001E5E  6E07               	movwf	LightLed@ledState,c
  5462  001E60  0E01               	movlw	1
  5463  001E62  6E08               	movwf	LightLed@blink,c
  5464  001E64  2875               	incf	_currentAlarmedEventNum,w,c
  5465  001E66  EC29  F007         	call	_LightLed
  5466  001E6A                     l378:
  5467  001E6A  FFFF               	dw	65535	; assembler added errata NOP
  5468                           
  5469                           ;main.c: 643: }
  5470                           ;main.c: 644: eventResetSecond = *GetTime() + eventAcceptTime;
  5471  001E6C  ECFD  F014         	call	_GetTime	;wreg free
  5472  001E70  6ED9               	movwf	fsr2l,c
  5473  001E72  6ADA               	clrf	fsr2h,c
  5474  001E74  CFDE F00F          	movff	postinc2,??_ProcessDiary
  5475  001E78  CFDE F010          	movff	postinc2,??_ProcessDiary+1
  5476  001E7C  CFDE F011          	movff	postinc2,??_ProcessDiary+2
  5477  001E80  CFDE F012          	movff	postinc2,??_ProcessDiary+3
  5478  001E84  0100               	movlb	0	; () banked
  5479  001E86  51CD               	movf	_eventAcceptTime& (0+255),w,b
  5480  001E88  240F               	addwf	??_ProcessDiary,w,c
  5481  001E8A  6FA8               	movwf	_eventResetSecond& (0+255),b
  5482  001E8C  0E00               	movlw	0
  5483  001E8E  2010               	addwfc	??_ProcessDiary+1,w,c
  5484  001E90  6FA9               	movwf	(_eventResetSecond+1)& (0+255),b
  5485  001E92  0E00               	movlw	0
  5486  001E94  2011               	addwfc	??_ProcessDiary+2,w,c
  5487  001E96  6FAA               	movwf	(_eventResetSecond+2)& (0+255),b
  5488  001E98  0E00               	movlw	0
  5489  001E9A  2012               	addwfc	??_ProcessDiary+3,w,c
  5490  001E9C  6FAB               	movwf	(_eventResetSecond+3)& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;main.c: 645: LoadNextEvent();
  5494  001E9E  ECAE  F010         	call	_LoadNextEvent	;wreg free
  5495                           
  5496                           ;main.c: 646: }
  5497                           ;main.c: 647: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5498  001EA2  5075               	movf	_currentAlarmedEventNum,w,c
  5499  001EA4  6E0F               	movwf	??_ProcessDiary& (0+255),c
  5500  001EA6  5074               	movf	_curEventNum,w,c
  5501  001EA8  0101               	movlb	1	; () banked
  5502  001EAA  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5503  001EAC  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5504  001EB0                     l372:
  5505  001EB0  0012               	return		;funcret
  5506  001EB2  FFFF               	dw	65535	; errata NOP
  5507  001EB4                     __end_of_ProcessDiary:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1h	equ	0xFE2
  5520                           fsr1l	equ	0xFE1
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           plusw2	equ	0xFDB
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _SwitchOffAllLeds *****************
  5530 ;; Defined at:
  5531 ;;		line 341 in file "main.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  i               1    6[COMRAM] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5545 ;;      Params:         0       0       0       0       0       0       0
  5546 ;;      Locals:         1       0       0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0
  5548 ;;      Totals:         1       0       0       0       0       0       0
  5549 ;;Total ram usage:        1 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    2
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_InitFromEeprom
  5556 ;;		_ProcessDiary
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text25
  5561  0028F0                     __ptext25:
  5562                           	opt stack 0
  5563  0028F0                     _SwitchOffAllLeds:
  5564                           	opt stack 26
  5565                           
  5566                           ;incstack = 0
  5567  0028F0  FFFF               	dw	65535
  5568                           
  5569                           ;main.c: 343: for(uint8_t i = 0; i < 16 - 1; i++)
  5570  0028F2  6A07               	clrf	SwitchOffAllLeds@i,c
  5571  0028F4                     l5020:
  5572  0028F4  FFFF               	dw	65535	; assembler added errata NOP
  5573                           
  5574                           ;main.c: 344: {
  5575                           ;main.c: 345: ledStatuses[i] = 0;
  5576  0028F6  5007               	movf	SwitchOffAllLeds@i,w,c
  5577  0028F8  0F90               	addlw	low _ledStatuses
  5578  0028FA  6ED9               	movwf	fsr2l,c
  5579  0028FC  6ADA               	clrf	fsr2h,c
  5580  0028FE  6ADF               	clrf	indf2,c
  5581                           
  5582                           ;main.c: 346: ledBlink[i] = 0;
  5583  002900  5007               	movf	SwitchOffAllLeds@i,w,c
  5584  002902  0F80               	addlw	low _ledBlink
  5585  002904  6ED9               	movwf	fsr2l,c
  5586  002906  6ADA               	clrf	fsr2h,c
  5587  002908  6ADF               	clrf	indf2,c
  5588  00290A  2A07               	incf	SwitchOffAllLeds@i,f,c
  5589  00290C  0E0E               	movlw	14
  5590  00290E  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5591  002910  D7F1               	goto	l5020
  5592  002912  0C0E               	retlw	14	;funcret
  5593  002914  FFFF               	dw	65535	; errata NOP
  5594  002916                     __end_of_SwitchOffAllLeds:
  5595                           	opt stack 0
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1h	equ	0xFE2
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           plusw2	equ	0xFDB
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _LoadNextEvent *****************
  5617 ;; Defined at:
  5618 ;;		line 574 in file "main.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  v1              1   10[COMRAM] unsigned char 
  5623 ;;  minute          1   12[COMRAM] unsigned char 
  5624 ;;  hour            1   11[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5634 ;;      Params:         0       0       0       0       0       0       0
  5635 ;;      Locals:         3       0       0       0       0       0       0
  5636 ;;      Temps:          2       0       0       0       0       0       0
  5637 ;;      Totals:         5       0       0       0       0       0       0
  5638 ;;Total ram usage:        5 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    3
  5641 ;; This function calls:
  5642 ;;		_getHourMin
  5643 ;; This function is called by:
  5644 ;;		_InitFromEeprom
  5645 ;;		_ProcessDiary
  5646 ;;		_SetTimeFromRegs
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text26
  5651  00215C                     __ptext26:
  5652                           	opt stack 0
  5653  00215C                     _LoadNextEvent:
  5654                           	opt stack 24
  5655                           
  5656                           ;incstack = 0
  5657  00215C  FFFF               	dw	65535
  5658                           
  5659                           ;main.c: 576: if(eventCount == 0)
  5660  00215E  5072               	movf	_eventCount,w,c
  5661  002160  E03E               	bz	l362
  5662                           
  5663                           ;main.c: 578: uint8_t hour, minute;
  5664                           ;main.c: 579: if(!getHourMin(&hour, &minute))
  5665  002162  0E0D               	movlw	low LoadNextEvent@minute
  5666  002164  6E07               	movwf	getHourMin@min,c
  5667  002166  0E0C               	movlw	LoadNextEvent@hour& (0+255)
  5668  002168  EC4D  F014         	call	_getHourMin
  5669  00216C  0900               	iorlw	0
  5670  00216E  E037               	bz	l362
  5671  002170                     l4956:
  5672                           
  5673                           ;main.c: 589: {
  5674                           ;main.c: 590: if(curEventNum == 0xff)
  5675  002170  2874               	incf	_curEventNum,w,c
  5676  002172  E102               	bnz	l4960
  5677                           
  5678                           ;main.c: 591: curEventNum = 0;
  5679  002174  6A74               	clrf	_curEventNum,c
  5680  002176  D001               	goto	l4962
  5681  002178                     l4960:
  5682                           
  5683                           ;main.c: 592: else
  5684                           ;main.c: 593: curEventNum++;
  5685  002178  2A74               	incf	_curEventNum,f,c
  5686  00217A                     l4962:
  5687  00217A  FFFF               	dw	65535	; assembler added errata NOP
  5688                           
  5689                           ;main.c: 594: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5690  00217C  5075               	movf	_currentAlarmedEventNum,w,c
  5691  00217E  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5692  002180  5074               	movf	_curEventNum,w,c
  5693  002182  0101               	movlb	1	; () banked
  5694  002184  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5695  002186  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5696                           
  5697                           ; BSR set to: 1
  5698                           ;main.c: 595: if(curEventNum >= eventCount)
  5699  00218A  5072               	movf	_eventCount,w,c
  5700  00218C  5C74               	subwf	_curEventNum,w,c
  5701  00218E  E227               	bc	l362
  5702                           
  5703                           ; BSR set to: 1
  5704                           ;main.c: 598: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  5705  002190  5074               	movf	_curEventNum,w,c
  5706  002192  0D02               	mullw	2
  5707  002194  50F3               	movf	prodl,w,c
  5708  002196  0F13               	addlw	19
  5709  002198  6EA9               	movwf	4009,c	;volatile
  5710                           
  5711                           ; BSR set to: 1
  5712  00219A  80A6               	bsf	4006,0,c	;volatile
  5713                           
  5714                           ; BSR set to: 1
  5715  00219C  CFA8 F00B          	movff	4008,LoadNextEvent@v1	;volatile
  5716                           
  5717                           ; BSR set to: 1
  5718                           ;main.c: 599: curEventHour = v1 & 0x1F;
  5719  0021A0  500B               	movf	LoadNextEvent@v1,w,c
  5720  0021A2  0B1F               	andlw	31
  5721  0021A4  0100               	movlb	0	; () banked
  5722  0021A6  6FC9               	movwf	_curEventHour& (0+255),b
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;main.c: 600: curEventType = (((v1) >> (5)) & 0x01);
  5726  0021A8  380B               	swapf	LoadNextEvent@v1,w,c
  5727  0021AA  42E8               	rrncf	wreg,f,c
  5728  0021AC  0B07               	andlw	7
  5729  0021AE  0B01               	andlw	1
  5730  0021B0  6FCB               	movwf	_curEventType& (0+255),b
  5731                           
  5732                           ;main.c: 601: curEventMinute = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, 
      +                          EEDATA);
  5733  0021B2  5074               	movf	_curEventNum,w,c
  5734  0021B4  0D02               	mullw	2
  5735  0021B6  50F3               	movf	prodl,w,c
  5736  0021B8  0F14               	addlw	20
  5737  0021BA  6EA9               	movwf	4009,c	;volatile
  5738                           
  5739                           ; BSR set to: 0
  5740  0021BC  80A6               	bsf	4006,0,c	;volatile
  5741                           
  5742                           ; BSR set to: 0
  5743  0021BE  CFA8 F0CA          	movff	4008,_curEventMinute	;volatile
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;main.c: 602: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  5747  0021C2  51C9               	movf	_curEventHour& (0+255),w,b
  5748  0021C4  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5749  0021C6  51CA               	movf	_curEventMinute& (0+255),w,b
  5750  0021C8  0101               	movlb	1	; () banked
  5751  0021CA  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  5752  0021CC  C009  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  5753                           
  5754                           ; BSR set to: 1
  5755                           ;main.c: 603: }while(curEventHour < hour || curEventMinute <= minute);
  5756  0021D0  500C               	movf	LoadNextEvent@hour,w,c
  5757  0021D2  0100               	movlb	0	; () banked
  5758  0021D4  5DC9               	subwf	_curEventHour& (0+255),w,b
  5759  0021D6  E3CC               	bnc	l4956
  5760                           
  5761                           ; BSR set to: 0
  5762  0021D8  51CA               	movf	_curEventMinute& (0+255),w,b
  5763  0021DA  5C0D               	subwf	LoadNextEvent@minute,w,c
  5764  0021DC  E2C9               	bc	l4956
  5765  0021DE                     l362:
  5766  0021DE  0012               	return		;funcret
  5767  0021E0  FFFF               	dw	65535	; errata NOP
  5768  0021E2                     __end_of_LoadNextEvent:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           postdec1	equ	0xFE5
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _getHourMin *****************
  5791 ;; Defined at:
  5792 ;;		line 245 in file "interrupts.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  hour            1    wreg     PTR unsigned char 
  5795 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  5796 ;;  min             1    6[COMRAM] PTR unsigned char 
  5797 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  hour            1    7[COMRAM] PTR unsigned char 
  5800 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      unsigned char 
  5803 ;; Registers used:
  5804 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5810 ;;      Params:         1       0       0       0       0       0       0
  5811 ;;      Locals:         1       0       0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0
  5813 ;;      Totals:         2       0       0       0       0       0       0
  5814 ;;Total ram usage:        2 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    2
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_LoadNextEvent
  5821 ;;		_ProcessDiary
  5822 ;;		_main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text27
  5827  00289A                     __ptext27:
  5828                           	opt stack 0
  5829  00289A                     _getHourMin:
  5830                           	opt stack 24
  5831                           
  5832                           ;incstack = 0
  5833  00289A  FFFF               	dw	65535
  5834                           
  5835                           ;getHourMin@hour stored from wreg
  5836  00289C  6E08               	movwf	getHourMin@hour,c
  5837                           
  5838                           ;interrupts.c: 247: if(globalHours == 0xFF)
  5839  00289E  2876               	incf	_globalHours,w,c	;volatile
  5840  0028A0  E102               	bnz	l101
  5841                           
  5842                           ;interrupts.c: 248: return 0;
  5843  0028A2  0E00               	movlw	0
  5844  0028A4  D00D               	goto	l102
  5845  0028A6                     l101:
  5846                           
  5847                           ;interrupts.c: 249: (INTCONbits.GIE = 0);
  5848  0028A6  9EF2               	bcf	intcon,7,c	;volatile
  5849                           
  5850                           ;interrupts.c: 250: *hour = globalHours;
  5851  0028A8  5008               	movf	getHourMin@hour,w,c
  5852  0028AA  6ED9               	movwf	fsr2l,c
  5853  0028AC  6ADA               	clrf	fsr2h,c
  5854  0028AE  C076  FFDF         	movff	_globalHours,indf2	;volatile
  5855                           
  5856                           ;interrupts.c: 251: *min = globalMinutes;
  5857  0028B2  5007               	movf	getHourMin@min,w,c
  5858  0028B4  6ED9               	movwf	fsr2l,c
  5859  0028B6  6ADA               	clrf	fsr2h,c
  5860  0028B8  C073  FFDF         	movff	_globalMinutes,indf2	;volatile
  5861                           
  5862                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
  5863  0028BC  8EF2               	bsf	intcon,7,c	;volatile
  5864                           
  5865                           ;interrupts.c: 253: return 1;
  5866  0028BE  0E01               	movlw	1
  5867  0028C0                     l102:
  5868  0028C0  FFFF               	dw	65535	; assembler added errata NOP
  5869  0028C2  0012               	return		;funcret
  5870  0028C4  FFFF               	dw	65535	; errata NOP
  5871  0028C6                     __end_of_getHourMin:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           postdec1	equ	0xFE5
  5883                           fsr1h	equ	0xFE2
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           plusw2	equ	0xFDB
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _LightLed *****************
  5894 ;; Defined at:
  5895 ;;		line 352 in file "main.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  ledNum          1    wreg     unsigned char 
  5898 ;;  ledState        1    6[COMRAM] enum E2433
  5899 ;;  blink           1    7[COMRAM] unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  ledNum          1   11[COMRAM] unsigned char 
  5902 ;;  statusShift     1   13[COMRAM] unsigned char 
  5903 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      void 
  5906 ;; Registers used:
  5907 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5913 ;;      Params:         2       0       0       0       0       0       0
  5914 ;;      Locals:         3       0       0       0       0       0       0
  5915 ;;      Temps:          3       0       0       0       0       0       0
  5916 ;;      Totals:         8       0       0       0       0       0       0
  5917 ;;Total ram usage:        8 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    2
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_ResetEvent
  5924 ;;		_ProcessDiary
  5925 ;;		_io_poll
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text28
  5930  000E52                     __ptext28:
  5931                           	opt stack 0
  5932  000E52                     _LightLed:
  5933                           	opt stack 27
  5934                           
  5935                           ;incstack = 0
  5936  000E52  FFFF               	dw	65535
  5937                           
  5938                           ;LightLed@ledNum stored from wreg
  5939  000E54  6E0C               	movwf	LightLed@ledNum,c
  5940                           
  5941                           ;main.c: 354: if(ledNum < 1 || ledNum > 60)
  5942  000E56  500C               	movf	LightLed@ledNum,w,c
  5943  000E58  E101 D120          	bz	l261
  5944  000E5C  0E3C               	movlw	60
  5945  000E5E  640C               	cpfsgt	LightLed@ledNum,c
  5946  000E60  D001               	goto	l5056
  5947  000E62  D11C               	goto	l261
  5948  000E64                     l5056:
  5949  000E64  FFFF               	dw	65535	; assembler added errata NOP
  5950                           
  5951                           ;main.c: 356: ledNum--;
  5952  000E66  060C               	decf	LightLed@ledNum,f,c
  5953                           
  5954                           ;main.c: 358: uint8_t ststusIndex = ledNum >> 2;
  5955  000E68  400C               	rrncf	LightLed@ledNum,w,c
  5956  000E6A  42E8               	rrncf	wreg,f,c
  5957  000E6C  0B3F               	andlw	63
  5958  000E6E  6E0D               	movwf	LightLed@ststusIndex,c
  5959                           
  5960                           ;main.c: 359: uint8_t statusShift = (ledNum & 0x03) << 1;
  5961  000E70  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  5962  000E74  0E03               	movlw	3
  5963  000E76  1609               	andwf	??_LightLed,f,c
  5964  000E78  90D8               	bcf	status,0,c
  5965  000E7A  3409               	rlcf	??_LightLed,w,c
  5966  000E7C  6E0E               	movwf	LightLed@statusShift,c
  5967                           
  5968                           ;main.c: 361: switch(ledState)
  5969  000E7E  D105               	goto	l5082
  5970  000E80                     l5062:
  5971                           
  5972                           ;main.c: 364: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5973  000E80  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5974  000E84  2A09               	incf	??_LightLed,f,c
  5975  000E86  0E01               	movlw	1
  5976  000E88  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  5977  000E8A  2A09               	incf	??_LightLed,f,c
  5978  000E8C  D003               	goto	u4294
  5979  000E8E                     u4295:
  5980  000E8E  FFFF               	dw	65535	; assembler added errata NOP
  5981  000E90  90D8               	bcf	status,0,c
  5982  000E92  360A               	rlcf	??_LightLed+1,f,c
  5983  000E94                     u4294:
  5984  000E94  FFFF               	dw	65535	; assembler added errata NOP
  5985  000E96  2E09               	decfsz	??_LightLed,f,c
  5986  000E98  D7FA               	goto	u4295
  5987  000E9A  1C0A               	comf	??_LightLed+1,w,c
  5988  000E9C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  5989  000E9E  500D               	movf	LightLed@ststusIndex,w,c
  5990  000EA0  0F90               	addlw	low _ledStatuses
  5991  000EA2  6ED9               	movwf	fsr2l,c
  5992  000EA4  6ADA               	clrf	fsr2h,c
  5993  000EA6  500B               	movf	??_LightLed+2,w,c
  5994  000EA8  16DF               	andwf	indf2,f,c
  5995                           
  5996                           ;main.c: 365: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5997  000EAA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  5998  000EAE  0E01               	movlw	1
  5999  000EB0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6000  000EB2  2A09               	incf	??_LightLed,f,c
  6001  000EB4  D003               	goto	u4304
  6002  000EB6                     u4305:
  6003  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  6004  000EB8  90D8               	bcf	status,0,c
  6005  000EBA  360A               	rlcf	??_LightLed+1,f,c
  6006  000EBC                     u4304:
  6007  000EBC  FFFF               	dw	65535	; assembler added errata NOP
  6008  000EBE  2E09               	decfsz	??_LightLed,f,c
  6009  000EC0  D7FA               	goto	u4305
  6010  000EC2  1C0A               	comf	??_LightLed+1,w,c
  6011  000EC4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6012  000EC6  500D               	movf	LightLed@ststusIndex,w,c
  6013  000EC8  0F90               	addlw	low _ledStatuses
  6014  000ECA  6ED9               	movwf	fsr2l,c
  6015  000ECC  6ADA               	clrf	fsr2h,c
  6016  000ECE  500B               	movf	??_LightLed+2,w,c
  6017  000ED0  16DF               	andwf	indf2,f,c
  6018                           
  6019                           ;main.c: 366: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6020  000ED2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6021  000ED6  2A09               	incf	??_LightLed,f,c
  6022  000ED8  0E01               	movlw	1
  6023  000EDA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6024  000EDC  2A09               	incf	??_LightLed,f,c
  6025  000EDE  D003               	goto	u4314
  6026  000EE0                     u4315:
  6027  000EE0  FFFF               	dw	65535	; assembler added errata NOP
  6028  000EE2  90D8               	bcf	status,0,c
  6029  000EE4  360A               	rlcf	??_LightLed+1,f,c
  6030  000EE6                     u4314:
  6031  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  6032  000EE8  2E09               	decfsz	??_LightLed,f,c
  6033  000EEA  D7FA               	goto	u4315
  6034  000EEC  1C0A               	comf	??_LightLed+1,w,c
  6035  000EEE  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6036  000EF0  500D               	movf	LightLed@ststusIndex,w,c
  6037  000EF2  0F80               	addlw	low _ledBlink
  6038  000EF4  6ED9               	movwf	fsr2l,c
  6039  000EF6  6ADA               	clrf	fsr2h,c
  6040  000EF8  500B               	movf	??_LightLed+2,w,c
  6041  000EFA  16DF               	andwf	indf2,f,c
  6042                           
  6043                           ;main.c: 367: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6044  000EFC  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6045  000F00  0E01               	movlw	1
  6046  000F02  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6047  000F04  2A09               	incf	??_LightLed,f,c
  6048  000F06  D003               	goto	u4324
  6049  000F08                     u4325:
  6050  000F08  FFFF               	dw	65535	; assembler added errata NOP
  6051  000F0A  90D8               	bcf	status,0,c
  6052  000F0C  360A               	rlcf	??_LightLed+1,f,c
  6053  000F0E                     u4324:
  6054  000F0E  FFFF               	dw	65535	; assembler added errata NOP
  6055  000F10  2E09               	decfsz	??_LightLed,f,c
  6056  000F12  D7FA               	goto	u4325
  6057  000F14  D05F               	goto	L3
  6058  000F16                     l5064:
  6059                           
  6060                           ;main.c: 370: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6061  000F16  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6062  000F1A  2A09               	incf	??_LightLed,f,c
  6063  000F1C  0E01               	movlw	1
  6064  000F1E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6065  000F20  2A09               	incf	??_LightLed,f,c
  6066  000F22  D003               	goto	u4334
  6067  000F24                     u4335:
  6068  000F24  FFFF               	dw	65535	; assembler added errata NOP
  6069  000F26  90D8               	bcf	status,0,c
  6070  000F28  360A               	rlcf	??_LightLed+1,f,c
  6071  000F2A                     u4334:
  6072  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  6073  000F2C  2E09               	decfsz	??_LightLed,f,c
  6074  000F2E  D7FA               	goto	u4335
  6075  000F30  500D               	movf	LightLed@ststusIndex,w,c
  6076  000F32  0F90               	addlw	low _ledStatuses
  6077  000F34  6ED9               	movwf	fsr2l,c
  6078  000F36  6ADA               	clrf	fsr2h,c
  6079  000F38  500A               	movf	??_LightLed+1,w,c
  6080  000F3A  12DF               	iorwf	indf2,f,c
  6081                           
  6082                           ;main.c: 371: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6083  000F3C  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6084  000F40  0E01               	movlw	1
  6085  000F42  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6086  000F44  2A09               	incf	??_LightLed,f,c
  6087  000F46  D003               	goto	u4344
  6088  000F48                     u4345:
  6089  000F48  FFFF               	dw	65535	; assembler added errata NOP
  6090  000F4A  90D8               	bcf	status,0,c
  6091  000F4C  360A               	rlcf	??_LightLed+1,f,c
  6092  000F4E                     u4344:
  6093  000F4E  FFFF               	dw	65535	; assembler added errata NOP
  6094  000F50  2E09               	decfsz	??_LightLed,f,c
  6095  000F52  D7FA               	goto	u4345
  6096  000F54  1C0A               	comf	??_LightLed+1,w,c
  6097  000F56  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6098  000F58  500D               	movf	LightLed@ststusIndex,w,c
  6099  000F5A  0F90               	addlw	low _ledStatuses
  6100  000F5C  6ED9               	movwf	fsr2l,c
  6101  000F5E  6ADA               	clrf	fsr2h,c
  6102  000F60  500B               	movf	??_LightLed+2,w,c
  6103  000F62  16DF               	andwf	indf2,f,c
  6104                           
  6105                           ;main.c: 372: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6106  000F64  5008               	movf	LightLed@blink,w,c
  6107  000F66  E014               	bz	l5070
  6108  000F68  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6109  000F6C  2A09               	incf	??_LightLed,f,c
  6110  000F6E  0E01               	movlw	1
  6111  000F70  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6112  000F72  2A09               	incf	??_LightLed,f,c
  6113  000F74  D003               	goto	u4364
  6114  000F76                     u4365:
  6115  000F76  FFFF               	dw	65535	; assembler added errata NOP
  6116  000F78  90D8               	bcf	status,0,c
  6117  000F7A  360A               	rlcf	??_LightLed+1,f,c
  6118  000F7C                     u4364:
  6119  000F7C  FFFF               	dw	65535	; assembler added errata NOP
  6120  000F7E  2E09               	decfsz	??_LightLed,f,c
  6121  000F80  D7FA               	goto	u4365
  6122  000F82  500D               	movf	LightLed@ststusIndex,w,c
  6123  000F84  0F80               	addlw	low _ledBlink
  6124  000F86  6ED9               	movwf	fsr2l,c
  6125  000F88  6ADA               	clrf	fsr2h,c
  6126  000F8A  500A               	movf	??_LightLed+1,w,c
  6127  000F8C  12DF               	iorwf	indf2,f,c
  6128  000F8E  D015               	goto	l269
  6129  000F90                     l5070:
  6130  000F90  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6131  000F94  2A09               	incf	??_LightLed,f,c
  6132  000F96  0E01               	movlw	1
  6133  000F98  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6134  000F9A  2A09               	incf	??_LightLed,f,c
  6135  000F9C  D003               	goto	u4374
  6136  000F9E                     u4375:
  6137  000F9E  FFFF               	dw	65535	; assembler added errata NOP
  6138  000FA0  90D8               	bcf	status,0,c
  6139  000FA2  360A               	rlcf	??_LightLed+1,f,c
  6140  000FA4                     u4374:
  6141  000FA4  FFFF               	dw	65535	; assembler added errata NOP
  6142  000FA6  2E09               	decfsz	??_LightLed,f,c
  6143  000FA8  D7FA               	goto	u4375
  6144  000FAA  1C0A               	comf	??_LightLed+1,w,c
  6145  000FAC  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6146  000FAE  500D               	movf	LightLed@ststusIndex,w,c
  6147  000FB0  0F80               	addlw	low _ledBlink
  6148  000FB2  6ED9               	movwf	fsr2l,c
  6149  000FB4  6ADA               	clrf	fsr2h,c
  6150  000FB6  500B               	movf	??_LightLed+2,w,c
  6151  000FB8  16DF               	andwf	indf2,f,c
  6152  000FBA                     l269:
  6153  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  6154                           
  6155                           ;main.c: 373: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6156  000FBC  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6157  000FC0  0E01               	movlw	1
  6158  000FC2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6159  000FC4  2A09               	incf	??_LightLed,f,c
  6160  000FC6  D003               	goto	u4384
  6161  000FC8                     u4385:
  6162  000FC8  FFFF               	dw	65535	; assembler added errata NOP
  6163  000FCA  90D8               	bcf	status,0,c
  6164  000FCC  360A               	rlcf	??_LightLed+1,f,c
  6165  000FCE                     u4384:
  6166  000FCE  FFFF               	dw	65535	; assembler added errata NOP
  6167  000FD0  2E09               	decfsz	??_LightLed,f,c
  6168  000FD2  D7FA               	goto	u4385
  6169  000FD4                     L3:
  6170  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  6171  000FD6  1C0A               	comf	??_LightLed+1,w,c
  6172  000FD8  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6173  000FDA  500D               	movf	LightLed@ststusIndex,w,c
  6174  000FDC  0F80               	addlw	low _ledBlink
  6175  000FDE  6ED9               	movwf	fsr2l,c
  6176  000FE0  6ADA               	clrf	fsr2h,c
  6177  000FE2  500B               	movf	??_LightLed+2,w,c
  6178  000FE4  16DF               	andwf	indf2,f,c
  6179                           
  6180                           ;main.c: 374: break;
  6181  000FE6  D05A               	goto	l261
  6182  000FE8                     l5072:
  6183                           
  6184                           ;main.c: 376: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6185  000FE8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6186  000FEC  2A09               	incf	??_LightLed,f,c
  6187  000FEE  0E01               	movlw	1
  6188  000FF0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6189  000FF2  2A09               	incf	??_LightLed,f,c
  6190  000FF4  D003               	goto	u4394
  6191  000FF6                     u4395:
  6192  000FF6  FFFF               	dw	65535	; assembler added errata NOP
  6193  000FF8  90D8               	bcf	status,0,c
  6194  000FFA  360A               	rlcf	??_LightLed+1,f,c
  6195  000FFC                     u4394:
  6196  000FFC  FFFF               	dw	65535	; assembler added errata NOP
  6197  000FFE  2E09               	decfsz	??_LightLed,f,c
  6198  001000  D7FA               	goto	u4395
  6199  001002  1C0A               	comf	??_LightLed+1,w,c
  6200  001004  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6201  001006  500D               	movf	LightLed@ststusIndex,w,c
  6202  001008  0F90               	addlw	low _ledStatuses
  6203  00100A  6ED9               	movwf	fsr2l,c
  6204  00100C  6ADA               	clrf	fsr2h,c
  6205  00100E  500B               	movf	??_LightLed+2,w,c
  6206  001010  16DF               	andwf	indf2,f,c
  6207                           
  6208                           ;main.c: 377: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6209  001012  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6210  001016  0E01               	movlw	1
  6211  001018  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6212  00101A  2A09               	incf	??_LightLed,f,c
  6213  00101C  D003               	goto	u4404
  6214  00101E                     u4405:
  6215  00101E  FFFF               	dw	65535	; assembler added errata NOP
  6216  001020  90D8               	bcf	status,0,c
  6217  001022  360A               	rlcf	??_LightLed+1,f,c
  6218  001024                     u4404:
  6219  001024  FFFF               	dw	65535	; assembler added errata NOP
  6220  001026  2E09               	decfsz	??_LightLed,f,c
  6221  001028  D7FA               	goto	u4405
  6222  00102A  500D               	movf	LightLed@ststusIndex,w,c
  6223  00102C  0F90               	addlw	low _ledStatuses
  6224  00102E  6ED9               	movwf	fsr2l,c
  6225  001030  6ADA               	clrf	fsr2h,c
  6226  001032  500A               	movf	??_LightLed+1,w,c
  6227  001034  12DF               	iorwf	indf2,f,c
  6228                           
  6229                           ;main.c: 378: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6230  001036  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6231  00103A  2A09               	incf	??_LightLed,f,c
  6232  00103C  0E01               	movlw	1
  6233  00103E  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6234  001040  2A09               	incf	??_LightLed,f,c
  6235  001042  D003               	goto	u4414
  6236  001044                     u4415:
  6237  001044  FFFF               	dw	65535	; assembler added errata NOP
  6238  001046  90D8               	bcf	status,0,c
  6239  001048  360A               	rlcf	??_LightLed+1,f,c
  6240  00104A                     u4414:
  6241  00104A  FFFF               	dw	65535	; assembler added errata NOP
  6242  00104C  2E09               	decfsz	??_LightLed,f,c
  6243  00104E  D7FA               	goto	u4415
  6244  001050  1C0A               	comf	??_LightLed+1,w,c
  6245  001052  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6246  001054  500D               	movf	LightLed@ststusIndex,w,c
  6247  001056  0F80               	addlw	low _ledBlink
  6248  001058  6ED9               	movwf	fsr2l,c
  6249  00105A  6ADA               	clrf	fsr2h,c
  6250  00105C  500B               	movf	??_LightLed+2,w,c
  6251  00105E  16DF               	andwf	indf2,f,c
  6252                           
  6253                           ;main.c: 379: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6254  001060  5008               	movf	LightLed@blink,w,c
  6255  001062  E0AB               	bz	l269
  6256  001064  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6257  001068  0E01               	movlw	1
  6258  00106A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6259  00106C  2A09               	incf	??_LightLed,f,c
  6260  00106E  D003               	goto	u4434
  6261  001070                     u4435:
  6262  001070  FFFF               	dw	65535	; assembler added errata NOP
  6263  001072  90D8               	bcf	status,0,c
  6264  001074  360A               	rlcf	??_LightLed+1,f,c
  6265  001076                     u4434:
  6266  001076  FFFF               	dw	65535	; assembler added errata NOP
  6267  001078  2E09               	decfsz	??_LightLed,f,c
  6268  00107A  D7FA               	goto	u4435
  6269  00107C  500D               	movf	LightLed@ststusIndex,w,c
  6270  00107E  0F80               	addlw	low _ledBlink
  6271  001080  6ED9               	movwf	fsr2l,c
  6272  001082  6ADA               	clrf	fsr2h,c
  6273  001084  500A               	movf	??_LightLed+1,w,c
  6274  001086  12DF               	iorwf	indf2,f,c
  6275  001088  D009               	goto	l261
  6276  00108A                     l5082:
  6277  00108A  FFFF               	dw	65535	; assembler added errata NOP
  6278  00108C  5007               	movf	LightLed@ledState,w,c
  6279                           
  6280                           ; Switch size 1, requested type "speed"
  6281                           ; Number of cases is 3, Range of values is 0 to 2
  6282                           ; switch strategies available:
  6283                           ; Name         Instructions Cycles
  6284                           ; simple_byte           10     6 (average)
  6285                           ;	Chosen strategy is simple_byte
  6286  00108E  E101 D6F7          	bz	l5062
  6287  001092  0A01               	xorlw	1	; case 1
  6288  001094  E101 D73F          	bz	l5064
  6289  001098  0A03               	xorlw	3	; case 2
  6290  00109A  E0A6               	bz	l5072
  6291  00109C                     l261:
  6292  00109C  FFFF               	dw	65535	; assembler added errata NOP
  6293  00109E  0012               	return		;funcret
  6294  0010A0  FFFF               	dw	65535	; errata NOP
  6295  0010A2                     __end_of_LightLed:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           tblptrh	equ	0xFF7
  6299                           tblptrl	equ	0xFF6
  6300                           tablat	equ	0xFF5
  6301                           prodh	equ	0xFF4
  6302                           prodl	equ	0xFF3
  6303                           intcon	equ	0xFF2
  6304                           postinc0	equ	0xFEE
  6305                           wreg	equ	0xFE8
  6306                           postdec1	equ	0xFE5
  6307                           fsr1h	equ	0xFE2
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           plusw2	equ	0xFDB
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function _GetTime *****************
  6318 ;; Defined at:
  6319 ;;		line 206 in file "user.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      PTR long 
  6326 ;; Registers used:
  6327 ;;		wreg
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6333 ;;      Params:         2       0       0       0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0
  6336 ;;      Totals:         2       0       0       0       0       0       0
  6337 ;;Total ram usage:        2 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    2
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_ProcessDiary
  6344 ;;		_main
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text29
  6349  0029FA                     __ptext29:
  6350                           	opt stack 0
  6351  0029FA                     _GetTime:
  6352                           	opt stack 27
  6353                           
  6354                           ;incstack = 0
  6355  0029FA  FFFF               	dw	65535
  6356                           
  6357                           ;user.c: 208: return &currentTime;
  6358  0029FC  0ECE               	movlw	_currentTime& (0+255)
  6359  0029FE  0012               	return		;funcret
  6360  002A00  FFFF               	dw	65535	; errata NOP
  6361  002A02                     __end_of_GetTime:
  6362                           	opt stack 0
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           intcon	equ	0xFF2
  6370                           postinc0	equ	0xFEE
  6371                           wreg	equ	0xFE8
  6372                           postdec1	equ	0xFE5
  6373                           fsr1h	equ	0xFE2
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           postdec2	equ	0xFDD
  6378                           plusw2	equ	0xFDB
  6379                           fsr2h	equ	0xFDA
  6380                           fsr2l	equ	0xFD9
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _ModbusPoll *****************
  6384 ;; Defined at:
  6385 ;;		line 404 in file "ModbusRtu.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  discreteInpu    2   41[COMRAM] unsigned short 
  6388 ;;  coils           1   43[COMRAM] PTR unsigned short 
  6389 ;;		 -> _MODBUSCoils(2), 
  6390 ;;  inputRegs       2   44[COMRAM] PTR unsigned short 
  6391 ;;		 -> _MODBUSInputRegs(30), 
  6392 ;;  inputRegsCou    1   46[COMRAM] const unsigned char 
  6393 ;;  holdingRegs     2   47[COMRAM] PTR unsigned short 
  6394 ;;		 -> _MODBUSHoldingRegs(30), 
  6395 ;;  holdingRegsC    1   49[COMRAM] const unsigned char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  u8exception     1   52[COMRAM] unsigned char 
  6398 ;;  i8state         1   51[COMRAM] unsigned char 
  6399 ;;  u8current       1   50[COMRAM] unsigned char 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      char 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : E/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6409 ;;      Params:         9       0       0       0       0       0       0
  6410 ;;      Locals:         3       0       0       0       0       0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0
  6412 ;;      Totals:        12       0       0       0       0       0       0
  6413 ;;Total ram usage:       12 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    5
  6416 ;; This function calls:
  6417 ;;		_ModbusBuildException
  6418 ;;		_ModbusGetRxBuffer
  6419 ;;		_ModbusProcess_FC1
  6420 ;;		_ModbusProcess_FC15
  6421 ;;		_ModbusProcess_FC16
  6422 ;;		_ModbusProcess_FC17
  6423 ;;		_ModbusProcess_FC21
  6424 ;;		_ModbusProcess_FC3
  6425 ;;		_ModbusProcess_FC43
  6426 ;;		_ModbusProcess_FC5
  6427 ;;		_ModbusProcess_FC6
  6428 ;;		_ModbusProcess_FC7
  6429 ;;		_ModbusSendTxBuffer
  6430 ;;		_ModbusValidateRequest
  6431 ;;		_PortAvailable
  6432 ;;		_millis
  6433 ;; This function is called by:
  6434 ;;		_main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text30
  6439  00147A                     __ptext30:
  6440                           	opt stack 0
  6441  00147A                     _ModbusPoll:
  6442                           	opt stack 25
  6443                           
  6444                           ;incstack = 0
  6445  00147A  FFFF               	dw	65535
  6446                           
  6447                           ;ModbusRtu.c: 407: _lastCommand = MB_FC_NONE;
  6448  00147C  0100               	movlb	0	; () banked
  6449  00147E  6BD4               	clrf	__lastCommand& (0+255),b
  6450                           
  6451                           ;ModbusRtu.c: 411: _inputRegsCount = inputRegsCount;
  6452  001480  C02F  F0C4         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6453                           
  6454                           ;ModbusRtu.c: 412: _holdingRegsCount = holdingRegsCount;
  6455  001484  C032  F0C3         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;ModbusRtu.c: 417: uint8_t u8current = PortAvailable();
  6459  001488  EC01  F015         	call	_PortAvailable	;wreg free
  6460  00148C  6E33               	movwf	ModbusPoll@u8current,c
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;ModbusRtu.c: 421: if (u8current == 0) return 0;
  6464  00148E  5033               	movf	ModbusPoll@u8current,w,c
  6465  001490  E103               	bnz	l4458
  6466  001492                     l4454:
  6467  001492  FFFF               	dw	65535	; assembler added errata NOP
  6468  001494  0E00               	movlw	0
  6469  001496  D0A6               	goto	l640
  6470  001498                     l4458:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;ModbusRtu.c: 424: if (u8current != _u8lastRec)
  6474  001498  51C6               	movf	__u8lastRec& (0+255),w,b
  6475  00149A  1833               	xorwf	ModbusPoll@u8current,w,c
  6476  00149C  E012               	bz	l4468
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;ModbusRtu.c: 425: {
  6480                           ;ModbusRtu.c: 426: _u8lastRec = u8current;
  6481  00149E  C033  F0C6         	movff	ModbusPoll@u8current,__u8lastRec
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;ModbusRtu.c: 427: _u32time = millis() + 5;
  6485  0014A2  0E05               	movlw	5
  6486  0014A4  EC63  F014         	call	_millis	;wreg free
  6487  0014A8  2407               	addwf	?_millis,w,c
  6488  0014AA  0100               	movlb	0	; () banked
  6489  0014AC  6FA0               	movwf	__u32time& (0+255),b
  6490  0014AE  0E00               	movlw	0
  6491  0014B0  2008               	addwfc	?_millis+1,w,c
  6492  0014B2  6FA1               	movwf	(__u32time+1)& (0+255),b
  6493  0014B4  0E00               	movlw	0
  6494  0014B6  2009               	addwfc	?_millis+2,w,c
  6495  0014B8  6FA2               	movwf	(__u32time+2)& (0+255),b
  6496  0014BA  0E00               	movlw	0
  6497  0014BC  200A               	addwfc	?_millis+3,w,c
  6498  0014BE  6FA3               	movwf	(__u32time+3)& (0+255),b
  6499  0014C0  D7E8               	goto	l4454
  6500  0014C2                     l4468:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;ModbusRtu.c: 429: }
  6504                           ;ModbusRtu.c: 430: if (millis() < _u32time)
  6505  0014C2  EC63  F014         	call	_millis	;wreg free
  6506  0014C6  0100               	movlb	0	; () banked
  6507  0014C8  51A0               	movf	__u32time& (0+255),w,b
  6508  0014CA  5C07               	subwf	?_millis,w,c
  6509  0014CC  51A1               	movf	(__u32time+1)& (0+255),w,b
  6510  0014CE  5808               	subwfb	?_millis+1,w,c
  6511  0014D0  51A2               	movf	(__u32time+2)& (0+255),w,b
  6512  0014D2  5809               	subwfb	?_millis+2,w,c
  6513  0014D4  51A3               	movf	(__u32time+3)& (0+255),w,b
  6514  0014D6  580A               	subwfb	?_millis+3,w,c
  6515  0014D8  E3DC               	bnc	l4454
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;ModbusRtu.c: 433: _u8lastRec = 0;
  6519  0014DA  6BC6               	clrf	__u8lastRec& (0+255),b
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;ModbusRtu.c: 435: _u8lastError = i8state;
  6523  0014DC  ECA2  F013         	call	_ModbusGetRxBuffer	;wreg free
  6524  0014E0  6E34               	movwf	ModbusPoll@i8state,c
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;ModbusRtu.c: 436: if (i8state < 4)
  6528  0014E2  0E04               	movlw	4
  6529  0014E4  6034               	cpfslt	ModbusPoll@i8state,c
  6530  0014E6  D003               	goto	l4482
  6531  0014E8                     l4478:
  6532  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  6533                           
  6534                           ;ModbusRtu.c: 437: return i8state;
  6535  0014EA  5034               	movf	ModbusPoll@i8state,w,c
  6536  0014EC  D07B               	goto	l640
  6537  0014EE                     l4482:
  6538  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;ModbusRtu.c: 440: if (_au8Buffer[ ID ] != _u8id)
  6542  0014F0  51C5               	movf	__u8id& (0+255),w,b
  6543  0014F2  0101               	movlb	1	; () banked
  6544  0014F4  1900               	xorwf	__au8Buffer& (0+255),w,b
  6545  0014F6  E1CD               	bnz	l4454
  6546                           
  6547                           ; BSR set to: 1
  6548                           ;ModbusRtu.c: 444: uint8_t u8exception = ModbusValidateRequest();
  6549  0014F8  ECF9  F005         	call	_ModbusValidateRequest	;wreg free
  6550  0014FC  6E35               	movwf	ModbusPoll@u8exception,c
  6551                           
  6552                           ;ModbusRtu.c: 445: if (u8exception > 0)
  6553  0014FE  5035               	movf	ModbusPoll@u8exception,w,c
  6554  001500  E009               	bz	l4502
  6555                           
  6556                           ;ModbusRtu.c: 446: {
  6557                           ;ModbusRtu.c: 447: if (u8exception != NO_REPLY)
  6558  001502  2835               	incf	ModbusPoll@u8exception,w,c
  6559  001504  E005               	bz	l4498
  6560                           
  6561                           ;ModbusRtu.c: 448: {
  6562                           ;ModbusRtu.c: 449: ModbusBuildException(u8exception);
  6563  001506  5035               	movf	ModbusPoll@u8exception,w,c
  6564  001508  EC8B  F014         	call	_ModbusBuildException
  6565                           
  6566                           ; BSR set to: 1
  6567                           ;ModbusRtu.c: 450: ModbusSendTxBuffer();
  6568  00150C  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  6569  001510                     l4498:
  6570                           
  6571                           ;ModbusRtu.c: 453: return u8exception;
  6572  001510  5035               	movf	ModbusPoll@u8exception,w,c
  6573  001512  D068               	goto	l640
  6574  001514                     l4502:
  6575                           
  6576                           ;ModbusRtu.c: 457: _u8lastError = 0;
  6577  001514  EC63  F014         	call	_millis	;wreg free
  6578                           
  6579                           ;ModbusRtu.c: 460: switch (_au8Buffer[ FUNC ])
  6580  001518  D049               	goto	l4554
  6581  00151A                     l4504:
  6582                           
  6583                           ; BSR set to: 1
  6584                           ;ModbusRtu.c: 463: return ModbusProcess_FC1(*coils);
  6585  00151A  502C               	movf	ModbusPoll@coils,w,c
  6586  00151C  6ED9               	movwf	fsr2l,c
  6587  00151E  6ADA               	clrf	fsr2h,c
  6588  001520  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  6589  001524  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  6590  001528  ECA6  F00B         	call	_ModbusProcess_FC1	;wreg free
  6591  00152C  D05B               	goto	l640
  6592  00152E                     l4508:
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;ModbusRtu.c: 465: return ModbusProcess_FC1(discreteInputs);
  6596  00152E  C02A  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6597  001532  C02B  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6598  001536  ECA6  F00B         	call	_ModbusProcess_FC1	;wreg free
  6599  00153A  D054               	goto	l640
  6600  00153C                     l4512:
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;ModbusRtu.c: 467: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  6604  00153C  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6605  001540  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6606  001544  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6607  001548  EC5A  F00F         	call	_ModbusProcess_FC3	;wreg free
  6608  00154C  D04B               	goto	l640
  6609  00154E                     l4516:
  6610                           
  6611                           ; BSR set to: 1
  6612                           ;ModbusRtu.c: 469: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  6613  00154E  C02D  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6614  001552  C02E  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6615  001556  C02F  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6616  00155A  EC5A  F00F         	call	_ModbusProcess_FC3	;wreg free
  6617  00155E  D042               	goto	l640
  6618  001560                     l4520:
  6619                           
  6620                           ; BSR set to: 1
  6621                           ;ModbusRtu.c: 471: return ModbusProcess_FC5(coils);
  6622  001560  502C               	movf	ModbusPoll@coils,w,c
  6623  001562  EC5D  F010         	call	_ModbusProcess_FC5
  6624  001566  D03E               	goto	l640
  6625  001568                     l4524:
  6626                           
  6627                           ; BSR set to: 1
  6628                           ;ModbusRtu.c: 473: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  6629  001568  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  6630  00156C  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  6631  001570  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  6632  001574  EC16  F012         	call	_ModbusProcess_FC6	;wreg free
  6633  001578  D035               	goto	l640
  6634  00157A                     l4528:
  6635                           
  6636                           ; BSR set to: 1
  6637                           ;ModbusRtu.c: 475: return ModbusProcess_FC7();
  6638  00157A  ECC5  F014         	call	_ModbusProcess_FC7	;wreg free
  6639  00157E  D032               	goto	l640
  6640  001580                     l4532:
  6641                           
  6642                           ; BSR set to: 1
  6643                           ;ModbusRtu.c: 477: return ModbusProcess_FC15(coils);
  6644  001580  502C               	movf	ModbusPoll@coils,w,c
  6645  001582  EC3C  F00C         	call	_ModbusProcess_FC15
  6646  001586  D02E               	goto	l640
  6647  001588                     l4536:
  6648                           
  6649                           ; BSR set to: 1
  6650                           ;ModbusRtu.c: 479: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  6651  001588  C030  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  6652  00158C  C031  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  6653  001590  C032  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  6654  001594  EC35  F00E         	call	_ModbusProcess_FC16	;wreg free
  6655  001598  D025               	goto	l640
  6656  00159A                     l4540:
  6657                           
  6658                           ; BSR set to: 1
  6659                           ;ModbusRtu.c: 481: return ModbusProcess_FC17();
  6660  00159A  ECAF  F011         	call	_ModbusProcess_FC17	;wreg free
  6661  00159E  D022               	goto	l640
  6662  0015A0                     l4544:
  6663                           
  6664                           ; BSR set to: 1
  6665                           ;ModbusRtu.c: 483: return ModbusProcess_FC21();
  6666  0015A0  ECB5  F00F         	call	_ModbusProcess_FC21	;wreg free
  6667  0015A4  D01F               	goto	l640
  6668  0015A6                     l4548:
  6669                           
  6670                           ; BSR set to: 1
  6671                           ;ModbusRtu.c: 485: return ModbusProcess_FC43();
  6672  0015A6  ECF5  F00A         	call	_ModbusProcess_FC43	;wreg free
  6673  0015AA  D01C               	goto	l640
  6674  0015AC                     l4554:
  6675  0015AC  FFFF               	dw	65535	; assembler added errata NOP
  6676  0015AE  0101               	movlb	1	; () banked
  6677  0015B0  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6678                           
  6679                           ; Switch size 1, requested type "speed"
  6680                           ; Number of cases is 12, Range of values is 1 to 43
  6681                           ; switch strategies available:
  6682                           ; Name         Instructions Cycles
  6683                           ; simple_byte           37    19 (average)
  6684                           ;	Chosen strategy is simple_byte
  6685  0015B2  0A01               	xorlw	1	; case 1
  6686  0015B4  E0B2               	bz	l4504
  6687  0015B6  0A03               	xorlw	3	; case 2
  6688  0015B8  E0BA               	bz	l4508
  6689  0015BA  0A01               	xorlw	1	; case 3
  6690  0015BC  E0BF               	bz	l4512
  6691  0015BE  0A07               	xorlw	7	; case 4
  6692  0015C0  E0C6               	bz	l4516
  6693  0015C2  0A01               	xorlw	1	; case 5
  6694  0015C4  E0CD               	bz	l4520
  6695  0015C6  0A03               	xorlw	3	; case 6
  6696  0015C8  E0CF               	bz	l4524
  6697  0015CA  0A01               	xorlw	1	; case 7
  6698  0015CC  E0D6               	bz	l4528
  6699  0015CE  0A08               	xorlw	8	; case 15
  6700  0015D0  E0D7               	bz	l4532
  6701  0015D2  0A1F               	xorlw	31	; case 16
  6702  0015D4  E0D9               	bz	l4536
  6703  0015D6  0A01               	xorlw	1	; case 17
  6704  0015D8  E0E0               	bz	l4540
  6705  0015DA  0A04               	xorlw	4	; case 21
  6706  0015DC  E0E1               	bz	l4544
  6707  0015DE  0A3E               	xorlw	62	; case 43
  6708  0015E0  E0E2               	bz	l4548
  6709  0015E2  D782               	goto	l4478
  6710  0015E4                     l640:
  6711  0015E4  FFFF               	dw	65535	; assembler added errata NOP
  6712  0015E6  0012               	return		;funcret
  6713  0015E8  FFFF               	dw	65535	; errata NOP
  6714  0015EA                     __end_of_ModbusPoll:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           postdec1	equ	0xFE5
  6726                           fsr1h	equ	0xFE2
  6727                           fsr1l	equ	0xFE1
  6728                           indf2	equ	0xFDF
  6729                           postinc2	equ	0xFDE
  6730                           postdec2	equ	0xFDD
  6731                           plusw2	equ	0xFDB
  6732                           fsr2h	equ	0xFDA
  6733                           fsr2l	equ	0xFD9
  6734                           status	equ	0xFD8
  6735                           
  6736 ;; *************** function _ModbusValidateRequest *****************
  6737 ;; Defined at:
  6738 ;;		line 691 in file "ModbusRtu.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  6743 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  6744 ;;  readDevId       1   37[COMRAM] unsigned char 
  6745 ;;  i               1   36[COMRAM] unsigned char 
  6746 ;;  u16regs         2   39[COMRAM] unsigned short 
  6747 ;;  u16count        2   34[COMRAM] unsigned short 
  6748 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  6749 ;;  u8regs          1   38[COMRAM] unsigned char 
  6750 ;;  isSupported     1   33[COMRAM] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      unsigned char 
  6753 ;; Registers used:
  6754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : F/1
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         0       0       0       0       0       0       0
  6761 ;;      Locals:        18       0       0       0       0       0       0
  6762 ;;      Temps:          4       0       0       0       0       0       0
  6763 ;;      Totals:        22       0       0       0       0       0       0
  6764 ;;Total ram usage:       22 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    3
  6767 ;; This function calls:
  6768 ;;		_ModbusCalcCRC
  6769 ;; This function is called by:
  6770 ;;		_ModbusPoll
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text31
  6775  000BF2                     __ptext31:
  6776                           	opt stack 0
  6777  000BF2                     _ModbusValidateRequest:
  6778                           	opt stack 26
  6779                           
  6780                           ;incstack = 0
  6781  000BF2  FFFF               	dw	65535
  6782                           
  6783                           ; BSR set to: 1
  6784                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  6785                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  6786                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  6787  000BF4  0EFE               	movlw	low (__au8Buffer+65534)
  6788  000BF6  2470               	addwf	__u8BufferSize,w,c
  6789  000BF8  6ED9               	movwf	fsr2l,c
  6790  000BFA  6ADA               	clrf	fsr2h,c
  6791  000BFC  0E00               	movlw	high (__au8Buffer+65534)
  6792  000BFE  22DA               	addwfc	fsr2h,f,c
  6793  000C00  50DF               	movf	indf2,w,c
  6794  000C02  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6795  000C04  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  6796  000C06  0EFF               	movlw	low (__au8Buffer+65535)
  6797  000C08  2470               	addwf	__u8BufferSize,w,c
  6798  000C0A  6ED9               	movwf	fsr2l,c
  6799  000C0C  6ADA               	clrf	fsr2h,c
  6800  000C0E  0E00               	movlw	high (__au8Buffer+65535)
  6801  000C10  22DA               	addwfc	fsr2h,f,c
  6802  000C12  50DF               	movf	indf2,w,c
  6803  000C14  1014               	iorwf	??_ModbusValidateRequest,w,c
  6804  000C16  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  6805  000C18  5015               	movf	??_ModbusValidateRequest+1,w,c
  6806  000C1A  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  6807                           
  6808                           ; BSR set to: 1
  6809                           ;ModbusRtu.c: 698: {
  6810                           ;ModbusRtu.c: 699: _u16errCnt++;
  6811  000C1C  5070               	movf	__u8BufferSize,w,c
  6812  000C1E  0FFE               	addlw	254
  6813  000C20  EC75  F011         	call	_ModbusCalcCRC
  6814  000C24  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  6815  000C26  1807               	xorwf	?_ModbusCalcCRC,w,c
  6816  000C28  E103               	bnz	u2680
  6817  000C2A  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  6818  000C2C  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  6819  000C2E  E002               	bz	l691
  6820  000C30                     u2680:
  6821                           
  6822                           ;ModbusRtu.c: 700: return NO_REPLY;
  6823  000C30  0EFF               	movlw	255
  6824  000C32  D10C               	goto	l692
  6825  000C34                     l691:
  6826                           
  6827                           ;ModbusRtu.c: 701: }
  6828                           ;ModbusRtu.c: 704: bool isSupported = 0;
  6829  000C34  6A22               	clrf	ModbusValidateRequest@isSupported,c
  6830                           
  6831                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  6832  000C36  6A25               	clrf	ModbusValidateRequest@i,c
  6833  000C38                     l3694:
  6834  000C38  FFFF               	dw	65535	; assembler added errata NOP
  6835                           
  6836                           ;ModbusRtu.c: 706: {
  6837                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  6838  000C3A  5025               	movf	ModbusValidateRequest@i,w,c
  6839  000C3C  0F01               	addlw	low _fctsupported
  6840  000C3E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6841  000C40  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  6842  000C44                     	if	1	;There is more than 1 active tblptr byte
  6843  000C44  0E06               	movlw	high __smallconst
  6844  000C46  6EF7               	movwf	tblptrh,c
  6845  000C48                     	endif
  6846  000C48                     	if	0	;tblptru may be non-zero
  6847  000C48                     	endif
  6848  000C48                     	if	0	;tblptru may be non-zero
  6849  000C48                     	endif
  6850  000C48  0008               	tblrd		*
  6851  000C4A  FFFF               	dw	65535	; errata NOP
  6852  000C4C  50F5               	movf	tablat,w,c
  6853  000C4E  0101               	movlb	1	; () banked
  6854  000C50  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  6855  000C52  E103               	bnz	l3698
  6856                           
  6857                           ; BSR set to: 1
  6858                           ;ModbusRtu.c: 708: {
  6859                           ;ModbusRtu.c: 709: isSupported = 1;
  6860  000C54  0E01               	movlw	1
  6861  000C56  6E22               	movwf	ModbusValidateRequest@isSupported,c
  6862                           
  6863                           ;ModbusRtu.c: 710: break;
  6864  000C58  D004               	goto	l3702
  6865  000C5A                     l3698:
  6866                           
  6867                           ; BSR set to: 1
  6868  000C5A  2A25               	incf	ModbusValidateRequest@i,f,c
  6869                           
  6870                           ; BSR set to: 1
  6871  000C5C  0E0B               	movlw	11
  6872  000C5E  6425               	cpfsgt	ModbusValidateRequest@i,c
  6873  000C60  D7EB               	goto	l3694
  6874  000C62                     l3702:
  6875  000C62  FFFF               	dw	65535	; assembler added errata NOP
  6876                           
  6877                           ; BSR set to: 1
  6878                           ;ModbusRtu.c: 714: {
  6879                           ;ModbusRtu.c: 715: _u16errCnt++;
  6880  000C64  5022               	movf	ModbusValidateRequest@isSupported,w,c
  6881  000C66  E102               	bnz	l696
  6882  000C68                     l3704:
  6883                           
  6884                           ; BSR set to: 1
  6885                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  6886  000C68  0E01               	movlw	1
  6887  000C6A  D0F0               	goto	l692
  6888  000C6C                     l696:
  6889                           
  6890                           ; BSR set to: 1
  6891                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  6892  000C6C  6A23               	clrf	ModbusValidateRequest@u16count,c
  6893  000C6E  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  6894                           
  6895                           ;ModbusRtu.c: 722: uint8_t u8regs;
  6896                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  6897  000C70  D0CA               	goto	l3820
  6898  000C72                     l3708:
  6899                           
  6900                           ; BSR set to: 1
  6901                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  6902                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  6903                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6904  000C72  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6905  000C74  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6906  000C76  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6907  000C78  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6908  000C7A  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6909                           
  6910                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6911  000C7E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6912  000C80  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6913  000C82  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6914  000C84  6E23               	movwf	ModbusValidateRequest@u16count,c
  6915  000C86  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  6916                           
  6917                           ; BSR set to: 1
  6918                           ;ModbusRtu.c: 731: if (u16count > 16)
  6919  000C8A  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6920  000C8C  E103               	bnz	u2720
  6921  000C8E  0E11               	movlw	17
  6922  000C90  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  6923  000C92  E302               	bnc	l3716
  6924  000C94                     u2720:
  6925  000C94                     l3712:
  6926                           
  6927                           ; BSR set to: 1
  6928                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  6929  000C94  0E03               	movlw	3
  6930  000C96  D0DA               	goto	l692
  6931  000C98                     l3716:
  6932                           
  6933                           ; BSR set to: 1
  6934                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  6935  000C98  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6936  000C9A  E110               	bnz	l3720
  6937  000C9C  0E10               	movlw	16
  6938  000C9E  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6939  000CA0  E20D               	bc	l3720
  6940                           
  6941                           ; BSR set to: 1
  6942  000CA2  5023               	movf	ModbusValidateRequest@u16count,w,c
  6943  000CA4  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  6944  000CA6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6945  000CA8  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6946  000CAA  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  6947  000CAC  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6948  000CAE  5015               	movf	??_ModbusValidateRequest+1,w,c
  6949  000CB0  E105               	bnz	u2740
  6950  000CB2  0E11               	movlw	17
  6951  000CB4  5C14               	subwf	??_ModbusValidateRequest,w,c
  6952  000CB6                     L4:
  6953  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6954  000CB8  E201 D0C4          	bnc	l705
  6955  000CBC                     u2740:
  6956  000CBC                     l3720:
  6957  000CBC  FFFF               	dw	65535	; assembler added errata NOP
  6958                           
  6959                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  6960  000CBE  0E02               	movlw	2
  6961  000CC0  D0C5               	goto	l692
  6962  000CC2                     l3724:
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6966  000CC2  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6967  000CC4  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6968  000CC6  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6969  000CC8  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6970  000CCA  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6971                           
  6972                           ; BSR set to: 1
  6973                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  6974  000CCE  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  6975                           
  6976                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  6977  000CD2  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6978  000CD4  E002               	bz	l3734
  6979                           
  6980                           ; BSR set to: 1
  6981  000CD6  2827               	incf	ModbusValidateRequest@u8regs,w,c
  6982  000CD8  E1DD               	bnz	l3712
  6983  000CDA                     l3734:
  6984                           
  6985                           ; BSR set to: 1
  6986                           ;ModbusRtu.c: 741: if (u16regs > 15)
  6987  000CDA  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6988  000CDC  E1EF               	bnz	l3720
  6989  000CDE  0E10               	movlw	16
  6990  000CE0  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6991  000CE2  D7E9               	goto	L4
  6992  000CE4                     l3740:
  6993                           
  6994                           ; BSR set to: 1
  6995                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6996  000CE4  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6997  000CE6  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6998  000CE8  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6999  000CEA  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7000  000CEC  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7001  000CF0                     l3742:
  7002  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  7003                           
  7004                           ; BSR set to: 1
  7005                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7006  000CF2  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7007                           
  7008                           ; BSR set to: 1
  7009                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7010  000CF6  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7011  000CF8  0100               	movlb	0	; () banked
  7012  000CFA  5DC3               	subwf	__holdingRegsCount& (0+255),w,b
  7013  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  7014  000CFE  E3DE               	bnc	l3720
  7015  000D00  D0A1               	goto	l705
  7016  000D02                     l3750:
  7017                           
  7018                           ; BSR set to: 1
  7019                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7020  000D02  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7021  000D04  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7022  000D06  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7023  000D08  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7024  000D0A  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7025                           
  7026                           ; BSR set to: 1
  7027                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7028  000D0E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7029  000D10  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7030  000D14  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7031  000D16  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7032  000D1A  6A14               	clrf	??_ModbusValidateRequest,c
  7033  000D1C  1214               	iorwf	??_ModbusValidateRequest,f,c
  7034  000D1E  5014               	movf	??_ModbusValidateRequest,w,c
  7035  000D20  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7036  000D22  5015               	movf	??_ModbusValidateRequest+1,w,c
  7037  000D24  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7038                           
  7039                           ; BSR set to: 1
  7040                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  7041  000D26  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7042                           
  7043                           ; BSR set to: 1
  7044                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  7045  000D2A  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7046  000D2C  0100               	movlb	0	; () banked
  7047  000D2E  5DC4               	subwf	__inputRegsCount& (0+255),w,b
  7048  000D30  D7E5               	goto	L5
  7049  000D32                     l3762:
  7050                           
  7051                           ; BSR set to: 1
  7052                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7053                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7054  000D32  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7055  000D34  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7056  000D36  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7057  000D38  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7058  000D3A  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7062  000D3E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7063  000D40  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7064  000D44  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7065  000D46  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7066  000D4A  6A14               	clrf	??_ModbusValidateRequest,c
  7067  000D4C  1214               	iorwf	??_ModbusValidateRequest,f,c
  7068  000D4E  5014               	movf	??_ModbusValidateRequest,w,c
  7069  000D50  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7070  000D52  5015               	movf	??_ModbusValidateRequest+1,w,c
  7071  000D54  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7072  000D56  D7CC               	goto	l3742
  7073  000D58                     l3774:
  7074                           
  7075                           ; BSR set to: 1
  7076                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7077  000D58  0E06               	movlw	6
  7078  000D5A  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7079  000D5C  E1AF               	bnz	l3720
  7080                           
  7081                           ; BSR set to: 1
  7082                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7083  000D5E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7084  000D60  E1AD               	bnz	l3720
  7085                           
  7086                           ; BSR set to: 1
  7087  000D62  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7088  000D64  E1AB               	bnz	l3720
  7089                           
  7090                           ; BSR set to: 1
  7091                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7092  000D66  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7093  000D68  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7094  000D6C  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7095  000D6E  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7096  000D72  6A14               	clrf	??_ModbusValidateRequest,c
  7097  000D74  1214               	iorwf	??_ModbusValidateRequest,f,c
  7098  000D76  0E00               	movlw	0
  7099  000D78  90D8               	bcf	status,0,c
  7100  000D7A  3614               	rlcf	??_ModbusValidateRequest,f,c
  7101  000D7C  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7102  000D7E  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7103  000D82  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7104  000D86  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7105  000D88  0EFF               	movlw	-1
  7106  000D8A  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7107  000D8C  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7108                           
  7109                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7110  000D8E  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7111  000D90  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7112  000D94  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7113  000D96  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7114  000D9A  6A14               	clrf	??_ModbusValidateRequest,c
  7115  000D9C  1214               	iorwf	??_ModbusValidateRequest,f,c
  7116  000D9E  0E00               	movlw	0
  7117  000DA0  90D8               	bcf	status,0,c
  7118  000DA2  3614               	rlcf	??_ModbusValidateRequest,f,c
  7119  000DA4  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7120  000DA6  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7121  000DAA  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7122  000DAE  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7123  000DB0  0EFF               	movlw	-1
  7124  000DB2  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7125  000DB4  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7126                           
  7127                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  7128  000DB6  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7129  000DB8  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7130  000DBA  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7131  000DBC  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7132  000DBE  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7133  000DC0  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7134  000DC2  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7135  000DC4  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7136  000DC6  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7137  000DC8  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7138  000DCA  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7139  000DCC  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7140  000DCE  5017               	movf	??_ModbusValidateRequest+3,w,c
  7141  000DD0  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7142  000DD2  E102               	bnz	u2840
  7143  000DD4  0415               	decf	??_ModbusValidateRequest+1,w,c
  7144  000DD6  D76F               	goto	L4
  7145  000DD8                     u2840:
  7146  000DD8  D771               	goto	l3720
  7147  000DDA                     l3794:
  7148                           
  7149                           ; BSR set to: 1
  7150                           ;ModbusRtu.c: 781: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  7151  000DDA  0E0E               	movlw	14
  7152  000DDC  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7153  000DDE  E001 D743          	bnz	l3704
  7154                           
  7155                           ; BSR set to: 1
  7156                           ;ModbusRtu.c: 783: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  7157  000DE2  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  7158                           
  7159                           ; BSR set to: 1
  7160                           ;ModbusRtu.c: 784: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  7161  000DE6  0426               	decf	ModbusValidateRequest@readDevId,w,c
  7162  000DE8  E007               	bz	l3810
  7163                           
  7164                           ; BSR set to: 1
  7165  000DEA  0E02               	movlw	2
  7166  000DEC  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7167  000DEE  E004               	bz	l3810
  7168                           
  7169                           ; BSR set to: 1
  7170  000DF0  0E04               	movlw	4
  7171  000DF2  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7172  000DF4  E001 D74E          	bnz	l3712
  7173  000DF8                     l3810:
  7174                           
  7175                           ; BSR set to: 1
  7176                           ;ModbusRtu.c: 786: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  7177  000DF8  0E04               	movlw	4
  7178  000DFA  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7179  000DFC  E123               	bnz	l705
  7180                           
  7181                           ; BSR set to: 1
  7182  000DFE  0E06               	movlw	6
  7183  000E00  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  7184  000E02  D020               	goto	l705
  7185  000E04  D75B               	goto	l3720
  7186  000E06                     l3820:
  7187  000E06  FFFF               	dw	65535	; assembler added errata NOP
  7188                           
  7189                           ; BSR set to: 1
  7190  000E08  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7191                           
  7192                           ; Switch size 1, requested type "speed"
  7193                           ; Number of cases is 11, Range of values is 1 to 43
  7194                           ; switch strategies available:
  7195                           ; Name         Instructions Cycles
  7196                           ; simple_byte           34    18 (average)
  7197                           ;	Chosen strategy is simple_byte
  7198  000E0A  0A01               	xorlw	1	; case 1
  7199  000E0C  E101 D731          	bz	l3708
  7200  000E10  0A03               	xorlw	3	; case 2
  7201  000E12  E101 D72E          	bz	l3708
  7202  000E16  0A01               	xorlw	1	; case 3
  7203  000E18  E08C               	bz	l3762
  7204  000E1A  0A07               	xorlw	7	; case 4
  7205  000E1C  E101 D771          	bz	l3750
  7206  000E20  0A01               	xorlw	1	; case 5
  7207  000E22  E101 D74E          	bz	l3724
  7208  000E26  0A03               	xorlw	3	; case 6
  7209  000E28  E101 D75C          	bz	l3740
  7210  000E2C  0A09               	xorlw	9	; case 15
  7211  000E2E  E101 D720          	bz	l3708
  7212  000E32  0A1F               	xorlw	31	; case 16
  7213  000E34  E101 D77D          	bz	l3762
  7214  000E38  0A01               	xorlw	1	; case 17
  7215  000E3A  E004               	bz	l705
  7216  000E3C  0A04               	xorlw	4	; case 21
  7217  000E3E  E08C               	bz	l3774
  7218  000E40  0A3E               	xorlw	62	; case 43
  7219  000E42  E0CB               	bz	l3794
  7220  000E44                     l705:
  7221  000E44  FFFF               	dw	65535	; assembler added errata NOP
  7222                           
  7223                           ;ModbusRtu.c: 790: _lastCommand = _au8Buffer[ FUNC ];
  7224  000E46  C101  F0D4         	movff	__au8Buffer+1,__lastCommand
  7225                           
  7226                           ;ModbusRtu.c: 791: return 0;
  7227  000E4A  0E00               	movlw	0
  7228  000E4C                     l692:
  7229  000E4C  FFFF               	dw	65535	; assembler added errata NOP
  7230  000E4E  0012               	return		;funcret
  7231  000E50  FFFF               	dw	65535	; errata NOP
  7232  000E52                     __end_of_ModbusValidateRequest:
  7233                           	opt stack 0
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           postinc0	equ	0xFEE
  7242                           wreg	equ	0xFE8
  7243                           postdec1	equ	0xFE5
  7244                           fsr1h	equ	0xFE2
  7245                           fsr1l	equ	0xFE1
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           plusw2	equ	0xFDB
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254 ;; *************** function _ModbusProcess_FC7 *****************
  7255 ;; Defined at:
  7256 ;;		line 1048 in file "ModbusRtu.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;		None
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      unsigned char 
  7263 ;; Registers used:
  7264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : E/1
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7270 ;;      Params:         0       0       0       0       0       0       0
  7271 ;;      Locals:         1       0       0       0       0       0       0
  7272 ;;      Temps:          0       0       0       0       0       0       0
  7273 ;;      Totals:         1       0       0       0       0       0       0
  7274 ;;Total ram usage:        1 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    4
  7277 ;; This function calls:
  7278 ;;		_ModbusSendTxBuffer
  7279 ;; This function is called by:
  7280 ;;		_ModbusPoll
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text32
  7285  00298A                     __ptext32:
  7286                           	opt stack 0
  7287  00298A                     _ModbusProcess_FC7:
  7288                           	opt stack 25
  7289                           
  7290                           ;incstack = 0
  7291  00298A  FFFF               	dw	65535
  7292                           
  7293                           ;ModbusRtu.c: 1050: _au8Buffer[ 2 ] = _exceptionStatus;
  7294  00298C  C0C2  F102         	movff	__exceptionStatus,__au8Buffer+2
  7295                           
  7296                           ;ModbusRtu.c: 1051: _u8BufferSize = 3;
  7297  002990  0E03               	movlw	3
  7298  002992  6E70               	movwf	__u8BufferSize,c
  7299                           
  7300                           ;ModbusRtu.c: 1052: uint8_t u8CopyBufferSize = _u8BufferSize;
  7301  002994  C070  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  7302                           
  7303                           ;ModbusRtu.c: 1053: ModbusSendTxBuffer();
  7304  002998  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  7305                           
  7306                           ;ModbusRtu.c: 1054: return u8CopyBufferSize;
  7307  00299C  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  7308  00299E  0012               	return		;funcret
  7309  0029A0  FFFF               	dw	65535	; errata NOP
  7310  0029A2                     __end_of_ModbusProcess_FC7:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _ModbusProcess_FC6 *****************
  7333 ;; Defined at:
  7334 ;;		line 1028 in file "ModbusRtu.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7337 ;;		 -> _MODBUSHoldingRegs(30), 
  7338 ;;  u8size          1   23[COMRAM] unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  u16add          2   29[COMRAM] unsigned short 
  7341 ;;  u16val          2   26[COMRAM] unsigned short 
  7342 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      unsigned char 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : E/1
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7352 ;;      Params:         3       0       0       0       0       0       0
  7353 ;;      Locals:         5       0       0       0       0       0       0
  7354 ;;      Temps:          2       0       0       0       0       0       0
  7355 ;;      Totals:        10       0       0       0       0       0       0
  7356 ;;Total ram usage:       10 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    4
  7359 ;; This function calls:
  7360 ;;		_ModbusSendTxBuffer
  7361 ;; This function is called by:
  7362 ;;		_ModbusPoll
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text33
  7367  00242C                     __ptext33:
  7368                           	opt stack 0
  7369  00242C                     _ModbusProcess_FC6:
  7370                           	opt stack 25
  7371                           
  7372                           ;incstack = 0
  7373  00242C  FFFF               	dw	65535
  7374                           
  7375                           ;ModbusRtu.c: 1030: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7376  00242E  0101               	movlb	1	; () banked
  7377  002430  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7378  002432  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7379  002434  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7380  002436  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7381  002438  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7382                           
  7383                           ; BSR set to: 1
  7384                           ;ModbusRtu.c: 1031: _lastAddress = u16add;
  7385  00243C  C01E  F0B6         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7386  002440  C01F  F0B7         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7387                           
  7388                           ;ModbusRtu.c: 1032: _lastCount = 1;
  7389  002444  0100               	movlb	0	; () banked
  7390  002446  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7391  002448  0E01               	movlw	1
  7392  00244A  6FB8               	movwf	__lastCount& (0+255),b
  7393                           
  7394                           ;ModbusRtu.c: 1033: uint8_t u8CopyBufferSize;
  7395                           ;ModbusRtu.c: 1034: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7396  00244C  0101               	movlb	1	; () banked
  7397  00244E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7398  002450  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7399  002452  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7400  002454  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7401  002456  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7402                           
  7403                           ; BSR set to: 1
  7404                           ;ModbusRtu.c: 1036: regs[ u16add ] = u16val;
  7405  00245A  90D8               	bcf	status,0,c
  7406  00245C  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7407  00245E  6ED9               	movwf	fsr2l,c
  7408  002460  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7409  002462  6EDA               	movwf	fsr2h,c
  7410  002464  5016               	movf	ModbusProcess_FC6@regs,w,c
  7411  002466  26D9               	addwf	fsr2l,f,c
  7412  002468  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7413  00246A  22DA               	addwfc	fsr2h,f,c
  7414  00246C  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7415  002470  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7416                           
  7417                           ; BSR set to: 1
  7418                           ;ModbusRtu.c: 1039: _u8BufferSize = RESPONSE_SIZE;
  7419  002474  0E06               	movlw	6
  7420  002476  6E70               	movwf	__u8BufferSize,c
  7421                           
  7422                           ; BSR set to: 1
  7423                           ;ModbusRtu.c: 1041: u8CopyBufferSize = _u8BufferSize + 2;
  7424  002478  5070               	movf	__u8BufferSize,w,c
  7425  00247A  0F02               	addlw	2
  7426  00247C  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7427                           
  7428                           ; BSR set to: 1
  7429                           ;ModbusRtu.c: 1042: ModbusSendTxBuffer();
  7430  00247E  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  7431                           
  7432                           ;ModbusRtu.c: 1044: return u8CopyBufferSize;
  7433  002482  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7434  002484  0012               	return		;funcret
  7435  002486  FFFF               	dw	65535	; errata NOP
  7436  002488                     __end_of_ModbusProcess_FC6:
  7437                           	opt stack 0
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           prodh	equ	0xFF4
  7443                           prodl	equ	0xFF3
  7444                           intcon	equ	0xFF2
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           postdec1	equ	0xFE5
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           plusw2	equ	0xFDB
  7454                           fsr2h	equ	0xFDA
  7455                           fsr2l	equ	0xFD9
  7456                           status	equ	0xFD8
  7457                           
  7458 ;; *************** function _ModbusProcess_FC5 *****************
  7459 ;; Defined at:
  7460 ;;		line 993 in file "ModbusRtu.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;  regs            1    wreg     PTR unsigned short 
  7463 ;;		 -> _MODBUSCoils(2), 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  regs            1   30[COMRAM] PTR unsigned short 
  7466 ;;		 -> _MODBUSCoils(2), 
  7467 ;;  u16coil         2   27[COMRAM] unsigned short 
  7468 ;;  u8currentBit    1   29[COMRAM] unsigned char 
  7469 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      unsigned char 
  7472 ;; Registers used:
  7473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : E/1
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7479 ;;      Params:         0       0       0       0       0       0       0
  7480 ;;      Locals:         5       0       0       0       0       0       0
  7481 ;;      Temps:          5       0       0       0       0       0       0
  7482 ;;      Totals:        10       0       0       0       0       0       0
  7483 ;;Total ram usage:       10 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    4
  7486 ;; This function calls:
  7487 ;;		_ModbusSendTxBuffer
  7488 ;; This function is called by:
  7489 ;;		_ModbusPoll
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text34
  7494  0020BA                     __ptext34:
  7495                           	opt stack 0
  7496  0020BA                     _ModbusProcess_FC5:
  7497                           	opt stack 25
  7498                           
  7499                           ;incstack = 0
  7500  0020BA  FFFF               	dw	65535
  7501                           
  7502                           ;ModbusProcess_FC5@regs stored from wreg
  7503  0020BC  6E1F               	movwf	ModbusProcess_FC5@regs,c
  7504                           
  7505                           ;ModbusRtu.c: 996: uint8_t u8currentBit;
  7506                           ;ModbusRtu.c: 997: uint8_t u8CopyBufferSize;
  7507                           ;ModbusRtu.c: 998: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7508  0020BE  0101               	movlb	1	; () banked
  7509  0020C0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7510  0020C2  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  7511  0020C4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7512  0020C6  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  7513  0020C8  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7514                           
  7515                           ; BSR set to: 1
  7516                           ;ModbusRtu.c: 999: _lastAddress = u16coil;
  7517  0020CC  C01C  F0B6         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7518  0020D0  C01D  F0B7         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7519                           
  7520                           ;ModbusRtu.c: 1000: _lastCount = 1;
  7521  0020D4  0100               	movlb	0	; () banked
  7522  0020D6  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7523  0020D8  0E01               	movlw	1
  7524  0020DA  6FB8               	movwf	__lastCount& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;ModbusRtu.c: 1003: u8currentBit = (uint8_t) (u16coil % 16);
  7528  0020DC  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  7529  0020DE  0B0F               	andlw	15
  7530  0020E0  6E1E               	movwf	ModbusProcess_FC5@u8currentBit,c
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;ModbusRtu.c: 1006: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7534  0020E2  0101               	movlb	1	; () banked
  7535  0020E4  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7536  0020E6  E116               	bnz	l3924
  7537                           
  7538                           ; BSR set to: 1
  7539  0020E8  C01E  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7540  0020EC  0E01               	movlw	1
  7541  0020EE  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7542  0020F0  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7543  0020F2  2A16               	incf	??_ModbusProcess_FC5,f,c
  7544  0020F4  D004               	goto	u3014
  7545  0020F6                     u3015:
  7546  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  7547  0020F8  90D8               	bcf	status,0,c
  7548  0020FA  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7549  0020FC  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7550  0020FE                     u3014:
  7551  0020FE  FFFF               	dw	65535	; assembler added errata NOP
  7552  002100  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7553  002102  D7F9               	goto	u3015
  7554  002104  501F               	movf	ModbusProcess_FC5@regs,w,c
  7555  002106  6ED9               	movwf	fsr2l,c
  7556  002108  6ADA               	clrf	fsr2h,c
  7557  00210A  5017               	movf	??_ModbusProcess_FC5+1,w,c
  7558  00210C  12DE               	iorwf	postinc2,f,c
  7559  00210E  5018               	movf	??_ModbusProcess_FC5+2,w,c
  7560  002110  12DD               	iorwf	postdec2,f,c
  7561  002112  D019               	goto	l3926
  7562  002114                     l3924:
  7563                           
  7564                           ; BSR set to: 1
  7565  002114  C01E  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7566  002118  0E01               	movlw	1
  7567  00211A  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7568  00211C  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7569  00211E  2A16               	incf	??_ModbusProcess_FC5,f,c
  7570  002120  D004               	goto	u3024
  7571  002122                     u3025:
  7572  002122  FFFF               	dw	65535	; assembler added errata NOP
  7573  002124  90D8               	bcf	status,0,c
  7574  002126  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7575  002128  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7576  00212A                     u3024:
  7577  00212A  FFFF               	dw	65535	; assembler added errata NOP
  7578  00212C  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7579  00212E  D7F9               	goto	u3025
  7580  002130  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  7581  002132  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7582  002134  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  7583  002136  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7584  002138  501F               	movf	ModbusProcess_FC5@regs,w,c
  7585  00213A  6ED9               	movwf	fsr2l,c
  7586  00213C  6ADA               	clrf	fsr2h,c
  7587  00213E  5019               	movf	??_ModbusProcess_FC5+3,w,c
  7588  002140  16DE               	andwf	postinc2,f,c
  7589  002142  501A               	movf	??_ModbusProcess_FC5+4,w,c
  7590  002144  16DD               	andwf	postdec2,f,c
  7591  002146                     l3926:
  7592  002146  FFFF               	dw	65535	; assembler added errata NOP
  7593                           
  7594                           ;ModbusRtu.c: 1013: _u8BufferSize = 6;
  7595  002148  0E06               	movlw	6
  7596  00214A  6E70               	movwf	__u8BufferSize,c
  7597                           
  7598                           ;ModbusRtu.c: 1014: u8CopyBufferSize = _u8BufferSize + 2;
  7599  00214C  5070               	movf	__u8BufferSize,w,c
  7600  00214E  0F02               	addlw	2
  7601  002150  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7602                           
  7603                           ;ModbusRtu.c: 1015: ModbusSendTxBuffer();
  7604  002152  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  7605                           
  7606                           ;ModbusRtu.c: 1017: return u8CopyBufferSize;
  7607  002156  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7608  002158  0012               	return		;funcret
  7609  00215A  FFFF               	dw	65535	; errata NOP
  7610  00215C                     __end_of_ModbusProcess_FC5:
  7611                           	opt stack 0
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           fsr1h	equ	0xFE2
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _ModbusProcess_FC43 *****************
  7633 ;; Defined at:
  7634 ;;		line 1227 in file "ModbusRtu.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  objId           1   23[COMRAM] unsigned char 
  7639 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  7640 ;;  devIdCode       1   21[COMRAM] unsigned char 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      unsigned char 
  7643 ;; Registers used:
  7644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : E/1
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7650 ;;      Params:         0       0       0       0       0       0       0
  7651 ;;      Locals:         3       0       0       0       0       0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0
  7653 ;;      Totals:         3       0       0       0       0       0       0
  7654 ;;Total ram usage:        3 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    4
  7657 ;; This function calls:
  7658 ;;		_CopyStringToBuffer
  7659 ;;		_ModbusSendTxBuffer
  7660 ;; This function is called by:
  7661 ;;		_ModbusPoll
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text35
  7666  0015EA                     __ptext35:
  7667                           	opt stack 0
  7668  0015EA                     _ModbusProcess_FC43:
  7669                           	opt stack 25
  7670                           
  7671                           ;incstack = 0
  7672  0015EA  FFFF               	dw	65535
  7673                           
  7674                           ;ModbusRtu.c: 1229: uint8_t devIdCode = _au8Buffer[ 3 ];
  7675  0015EC  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  7676                           
  7677                           ;ModbusRtu.c: 1237: uint8_t objId = _au8Buffer[ 4 ];
  7678  0015F0  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  7679                           
  7680                           ;ModbusRtu.c: 1248: _au8Buffer[ 5 ] = 0x00;
  7681  0015F4  0101               	movlb	1	; () banked
  7682  0015F6  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  7683                           
  7684                           ;ModbusRtu.c: 1249: _au8Buffer[ 6 ] = 0x00;
  7685  0015F8  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  7686                           
  7687                           ; BSR set to: 1
  7688                           ;ModbusRtu.c: 1251: _u8BufferSize = 8;
  7689  0015FA  0E08               	movlw	8
  7690  0015FC  6E70               	movwf	__u8BufferSize,c
  7691                           
  7692                           ;ModbusRtu.c: 1252: switch(devIdCode)
  7693  0015FE  D094               	goto	l4168
  7694  001600                     l4114:
  7695                           
  7696                           ; BSR set to: 1
  7697                           ;ModbusRtu.c: 1255: _au8Buffer[ 4 ] = 0x81;
  7698  001600  0E81               	movlw	129
  7699  001602  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7700                           
  7701                           ;ModbusRtu.c: 1256: _au8Buffer[ 7 ] = 3;
  7702  001604  0E03               	movlw	3
  7703  001606  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7704                           
  7705                           ; BSR set to: 1
  7706                           ;ModbusRtu.c: 1257: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  7707  001608  0E5E               	movlw	low STR_4
  7708  00160A  6E07               	movwf	CopyStringToBuffer@src,c
  7709  00160C  0E06               	movlw	6
  7710  00160E  6E08               	movwf	CopyStringToBuffer@len,c
  7711  001610  0E00               	movlw	0
  7712  001612  ECE6  F011         	call	_CopyStringToBuffer
  7713                           
  7714                           ;ModbusRtu.c: 1258: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  7715  001616  0E55               	movlw	low STR_6
  7716  001618  6E07               	movwf	CopyStringToBuffer@src,c
  7717  00161A  0E09               	movlw	9
  7718  00161C  6E08               	movwf	CopyStringToBuffer@len,c
  7719  00161E  0E01               	movlw	1
  7720  001620  ECE6  F011         	call	_CopyStringToBuffer
  7721                           
  7722                           ;ModbusRtu.c: 1259: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  7723  001624  0E64               	movlw	low STR_8
  7724  001626  6E07               	movwf	CopyStringToBuffer@src,c
  7725  001628  0E05               	movlw	5
  7726  00162A  6E08               	movwf	CopyStringToBuffer@len,c
  7727  00162C  0E02               	movlw	2
  7728  00162E  ECE6  F011         	call	_CopyStringToBuffer
  7729                           
  7730                           ;ModbusRtu.c: 1260: break;
  7731  001632  D084               	goto	l814
  7732  001634                     l4122:
  7733                           
  7734                           ; BSR set to: 1
  7735                           ;ModbusRtu.c: 1262: _au8Buffer[ 4 ] = 0x82;
  7736  001634  0E82               	movlw	130
  7737  001636  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7738                           
  7739                           ;ModbusRtu.c: 1263: _au8Buffer[ 7 ] = 4;
  7740  001638  0E04               	movlw	4
  7741  00163A  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7742                           
  7743                           ; BSR set to: 1
  7744                           ;ModbusRtu.c: 1264: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  7745  00163C  0E3A               	movlw	low STR_10
  7746  00163E  6E07               	movwf	CopyStringToBuffer@src,c
  7747  001640  0E10               	movlw	16
  7748  001642  6E08               	movwf	CopyStringToBuffer@len,c
  7749  001644  0E03               	movlw	3
  7750  001646  ECE6  F011         	call	_CopyStringToBuffer
  7751                           
  7752                           ;ModbusRtu.c: 1265: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  7753  00164A  0E26               	movlw	low STR_12
  7754  00164C  6E07               	movwf	CopyStringToBuffer@src,c
  7755  00164E  0E14               	movlw	20
  7756  001650  6E08               	movwf	CopyStringToBuffer@len,c
  7757  001652  0E04               	movlw	4
  7758  001654  ECE6  F011         	call	_CopyStringToBuffer
  7759                           
  7760                           ;ModbusRtu.c: 1266: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  7761  001658  0E69               	movlw	low STR_14
  7762  00165A  6E07               	movwf	CopyStringToBuffer@src,c
  7763  00165C  0E04               	movlw	4
  7764  00165E  6E08               	movwf	CopyStringToBuffer@len,c
  7765  001660  0E05               	movlw	5
  7766  001662  ECE6  F011         	call	_CopyStringToBuffer
  7767                           
  7768                           ;ModbusRtu.c: 1267: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  7769  001666  0E4A               	movlw	low STR_16
  7770  001668  6E07               	movwf	CopyStringToBuffer@src,c
  7771  00166A  0E0B               	movlw	11
  7772  00166C  6E08               	movwf	CopyStringToBuffer@len,c
  7773  00166E  0E06               	movlw	6
  7774  001670  ECE6  F011         	call	_CopyStringToBuffer
  7775                           
  7776                           ;ModbusRtu.c: 1268: break;
  7777  001674  D063               	goto	l814
  7778  001676                     l4132:
  7779                           
  7780                           ; BSR set to: 1
  7781                           ;ModbusRtu.c: 1270: _au8Buffer[ 7 ] = 1;
  7782  001676  0E01               	movlw	1
  7783  001678  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7784                           
  7785                           ;ModbusRtu.c: 1271: switch(objId)
  7786  00167A  D046               	goto	l4164
  7787  00167C                     l4134:
  7788                           
  7789                           ; BSR set to: 1
  7790                           ;ModbusRtu.c: 1274: _au8Buffer[ 4 ] = 0x81;
  7791  00167C  0E81               	movlw	129
  7792  00167E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7793                           
  7794                           ; BSR set to: 1
  7795                           ;ModbusRtu.c: 1275: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  7796  001680  0E5E               	movlw	low STR_4
  7797  001682  6E07               	movwf	CopyStringToBuffer@src,c
  7798  001684  0E06               	movlw	6
  7799  001686  6E08               	movwf	CopyStringToBuffer@len,c
  7800  001688  5018               	movf	ModbusProcess_FC43@objId,w,c
  7801  00168A  ECE6  F011         	call	_CopyStringToBuffer
  7802                           
  7803                           ;ModbusRtu.c: 1276: break;
  7804  00168E  D056               	goto	l814
  7805  001690                     l4138:
  7806                           
  7807                           ; BSR set to: 1
  7808                           ;ModbusRtu.c: 1278: _au8Buffer[ 4 ] = 0x81;
  7809  001690  0E81               	movlw	129
  7810  001692  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7811                           
  7812                           ; BSR set to: 1
  7813                           ;ModbusRtu.c: 1279: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  7814  001694  0E55               	movlw	low STR_6
  7815  001696  6E07               	movwf	CopyStringToBuffer@src,c
  7816  001698  0E09               	movlw	9
  7817  00169A  6E08               	movwf	CopyStringToBuffer@len,c
  7818  00169C  5018               	movf	ModbusProcess_FC43@objId,w,c
  7819  00169E  ECE6  F011         	call	_CopyStringToBuffer
  7820                           
  7821                           ;ModbusRtu.c: 1280: break;
  7822  0016A2  D04C               	goto	l814
  7823  0016A4                     l4142:
  7824                           
  7825                           ; BSR set to: 1
  7826                           ;ModbusRtu.c: 1282: _au8Buffer[ 4 ] = 0x81;
  7827  0016A4  0E81               	movlw	129
  7828  0016A6  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7829                           
  7830                           ; BSR set to: 1
  7831                           ;ModbusRtu.c: 1283: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  7832  0016A8  0E64               	movlw	low STR_8
  7833  0016AA  6E07               	movwf	CopyStringToBuffer@src,c
  7834  0016AC  0E05               	movlw	5
  7835  0016AE  6E08               	movwf	CopyStringToBuffer@len,c
  7836  0016B0  5018               	movf	ModbusProcess_FC43@objId,w,c
  7837  0016B2  ECE6  F011         	call	_CopyStringToBuffer
  7838                           
  7839                           ;ModbusRtu.c: 1284: break;
  7840  0016B6  D042               	goto	l814
  7841  0016B8                     l4146:
  7842                           
  7843                           ; BSR set to: 1
  7844                           ;ModbusRtu.c: 1286: _au8Buffer[ 4 ] = 0x82;
  7845  0016B8  0E82               	movlw	130
  7846  0016BA  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7847                           
  7848                           ; BSR set to: 1
  7849                           ;ModbusRtu.c: 1287: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  7850  0016BC  0E3A               	movlw	low STR_10
  7851  0016BE  6E07               	movwf	CopyStringToBuffer@src,c
  7852  0016C0  0E10               	movlw	16
  7853  0016C2  6E08               	movwf	CopyStringToBuffer@len,c
  7854  0016C4  5018               	movf	ModbusProcess_FC43@objId,w,c
  7855  0016C6  ECE6  F011         	call	_CopyStringToBuffer
  7856                           
  7857                           ;ModbusRtu.c: 1288: break;
  7858  0016CA  D038               	goto	l814
  7859  0016CC                     l4150:
  7860                           
  7861                           ; BSR set to: 1
  7862                           ;ModbusRtu.c: 1290: _au8Buffer[ 4 ] = 0x82;
  7863  0016CC  0E82               	movlw	130
  7864  0016CE  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7865                           
  7866                           ; BSR set to: 1
  7867                           ;ModbusRtu.c: 1291: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  7868  0016D0  0E26               	movlw	low STR_12
  7869  0016D2  6E07               	movwf	CopyStringToBuffer@src,c
  7870  0016D4  0E14               	movlw	20
  7871  0016D6  6E08               	movwf	CopyStringToBuffer@len,c
  7872  0016D8  5018               	movf	ModbusProcess_FC43@objId,w,c
  7873  0016DA  ECE6  F011         	call	_CopyStringToBuffer
  7874                           
  7875                           ;ModbusRtu.c: 1292: break;
  7876  0016DE  D02E               	goto	l814
  7877  0016E0                     l4154:
  7878                           
  7879                           ; BSR set to: 1
  7880                           ;ModbusRtu.c: 1294: _au8Buffer[ 4 ] = 0x82;
  7881  0016E0  0E82               	movlw	130
  7882  0016E2  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7883                           
  7884                           ; BSR set to: 1
  7885                           ;ModbusRtu.c: 1295: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  7886  0016E4  0E69               	movlw	low STR_14
  7887  0016E6  6E07               	movwf	CopyStringToBuffer@src,c
  7888  0016E8  0E04               	movlw	4
  7889  0016EA  6E08               	movwf	CopyStringToBuffer@len,c
  7890  0016EC  5018               	movf	ModbusProcess_FC43@objId,w,c
  7891  0016EE  ECE6  F011         	call	_CopyStringToBuffer
  7892                           
  7893                           ;ModbusRtu.c: 1296: break;
  7894  0016F2  D024               	goto	l814
  7895  0016F4                     l4158:
  7896                           
  7897                           ; BSR set to: 1
  7898                           ;ModbusRtu.c: 1298: _au8Buffer[ 4 ] = 0x82;
  7899  0016F4  0E82               	movlw	130
  7900  0016F6  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7901                           
  7902                           ; BSR set to: 1
  7903                           ;ModbusRtu.c: 1299: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  7904  0016F8  0E4A               	movlw	low STR_16
  7905  0016FA  6E07               	movwf	CopyStringToBuffer@src,c
  7906  0016FC  0E0B               	movlw	11
  7907  0016FE  6E08               	movwf	CopyStringToBuffer@len,c
  7908  001700  5018               	movf	ModbusProcess_FC43@objId,w,c
  7909  001702  ECE6  F011         	call	_CopyStringToBuffer
  7910                           
  7911                           ;ModbusRtu.c: 1300: break;
  7912  001706  D01A               	goto	l814
  7913  001708                     l4164:
  7914  001708  FFFF               	dw	65535	; assembler added errata NOP
  7915                           
  7916                           ; BSR set to: 1
  7917  00170A  5018               	movf	ModbusProcess_FC43@objId,w,c
  7918                           
  7919                           ; Switch size 1, requested type "speed"
  7920                           ; Number of cases is 7, Range of values is 0 to 6
  7921                           ; switch strategies available:
  7922                           ; Name         Instructions Cycles
  7923                           ; simple_byte           22    12 (average)
  7924                           ;	Chosen strategy is simple_byte
  7925  00170C  E0B7               	bz	l4134
  7926  00170E  0A01               	xorlw	1	; case 1
  7927  001710  E0BF               	bz	l4138
  7928  001712  0A03               	xorlw	3	; case 2
  7929  001714  E0C7               	bz	l4142
  7930  001716  0A01               	xorlw	1	; case 3
  7931  001718  E0CF               	bz	l4146
  7932  00171A  0A07               	xorlw	7	; case 4
  7933  00171C  E0D7               	bz	l4150
  7934  00171E  0A01               	xorlw	1	; case 5
  7935  001720  E0DF               	bz	l4154
  7936  001722  0A03               	xorlw	3	; case 6
  7937  001724  E0E7               	bz	l4158
  7938  001726  D00A               	goto	l814
  7939  001728                     l4168:
  7940  001728  FFFF               	dw	65535	; assembler added errata NOP
  7941                           
  7942                           ; BSR set to: 1
  7943  00172A  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  7944                           
  7945                           ; Switch size 1, requested type "speed"
  7946                           ; Number of cases is 3, Range of values is 1 to 4
  7947                           ; switch strategies available:
  7948                           ; Name         Instructions Cycles
  7949                           ; simple_byte           10     6 (average)
  7950                           ;	Chosen strategy is simple_byte
  7951  00172C  0A01               	xorlw	1	; case 1
  7952  00172E  E101 D767          	bz	l4114
  7953  001732  0A03               	xorlw	3	; case 2
  7954  001734  E101 D77E          	bz	l4122
  7955  001738  0A06               	xorlw	6	; case 4
  7956  00173A  E09D               	bz	l4132
  7957  00173C                     l814:
  7958  00173C  FFFF               	dw	65535	; assembler added errata NOP
  7959                           
  7960                           ;ModbusRtu.c: 1304: uint8_t u8CopyBufferSize = _u8BufferSize;
  7961  00173E  C070  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  7962                           
  7963                           ;ModbusRtu.c: 1305: ModbusSendTxBuffer();
  7964  001742  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  7965                           
  7966                           ;ModbusRtu.c: 1307: return u8CopyBufferSize;
  7967  001746  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  7968  001748  0012               	return		;funcret
  7969  00174A  FFFF               	dw	65535	; errata NOP
  7970  00174C                     __end_of_ModbusProcess_FC43:
  7971                           	opt stack 0
  7972                           tblptru	equ	0xFF8
  7973                           tblptrh	equ	0xFF7
  7974                           tblptrl	equ	0xFF6
  7975                           tablat	equ	0xFF5
  7976                           prodh	equ	0xFF4
  7977                           prodl	equ	0xFF3
  7978                           intcon	equ	0xFF2
  7979                           postinc0	equ	0xFEE
  7980                           wreg	equ	0xFE8
  7981                           postdec1	equ	0xFE5
  7982                           fsr1h	equ	0xFE2
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           plusw2	equ	0xFDB
  7988                           fsr2h	equ	0xFDA
  7989                           fsr2l	equ	0xFD9
  7990                           status	equ	0xFD8
  7991                           
  7992 ;; *************** function _CopyStringToBuffer *****************
  7993 ;; Defined at:
  7994 ;;		line 1218 in file "ModbusRtu.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;  objId           1    wreg     unsigned char 
  7997 ;;  src             1    6[COMRAM] PTR const unsigned char 
  7998 ;;		 -> STR_30(11), STR_28(4), STR_26(20), STR_24(16), 
  7999 ;;		 -> STR_22(5), STR_20(9), STR_18(6), STR_16(11), 
  8000 ;;		 -> STR_14(4), STR_12(20), STR_10(16), STR_8(5), 
  8001 ;;		 -> STR_6(9), STR_4(6), 
  8002 ;;  len             1    7[COMRAM] unsigned char 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  objId           1    9[COMRAM] unsigned char 
  8005 ;;  i               1   10[COMRAM] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/1
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8015 ;;      Params:         2       0       0       0       0       0       0
  8016 ;;      Locals:         2       0       0       0       0       0       0
  8017 ;;      Temps:          1       0       0       0       0       0       0
  8018 ;;      Totals:         5       0       0       0       0       0       0
  8019 ;;Total ram usage:        5 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    2
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_ModbusProcess_FC43
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text36
  8030  0023CC                     __ptext36:
  8031                           	opt stack 0
  8032  0023CC                     _CopyStringToBuffer:
  8033                           	opt stack 26
  8034                           
  8035                           ;incstack = 0
  8036  0023CC  FFFF               	dw	65535
  8037                           
  8038                           ;CopyStringToBuffer@objId stored from wreg
  8039  0023CE  6E0A               	movwf	CopyStringToBuffer@objId,c
  8040                           
  8041                           ;ModbusRtu.c: 1220: len--;
  8042  0023D0  0608               	decf	CopyStringToBuffer@len,f,c
  8043                           
  8044                           ;ModbusRtu.c: 1221: _au8Buffer[_u8BufferSize++] = objId;
  8045  0023D2  0E00               	movlw	low __au8Buffer
  8046  0023D4  2470               	addwf	__u8BufferSize,w,c
  8047  0023D6  6ED9               	movwf	fsr2l,c
  8048  0023D8  6ADA               	clrf	fsr2h,c
  8049  0023DA  0E01               	movlw	high __au8Buffer
  8050  0023DC  22DA               	addwfc	fsr2h,f,c
  8051  0023DE  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8052  0023E2  2A70               	incf	__u8BufferSize,f,c
  8053                           
  8054                           ;ModbusRtu.c: 1222: _au8Buffer[_u8BufferSize++] = len;
  8055  0023E4  0E00               	movlw	low __au8Buffer
  8056  0023E6  2470               	addwf	__u8BufferSize,w,c
  8057  0023E8  6ED9               	movwf	fsr2l,c
  8058  0023EA  6ADA               	clrf	fsr2h,c
  8059  0023EC  0E01               	movlw	high __au8Buffer
  8060  0023EE  22DA               	addwfc	fsr2h,f,c
  8061  0023F0  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8062  0023F4  2A70               	incf	__u8BufferSize,f,c
  8063                           
  8064                           ;ModbusRtu.c: 1223: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8065  0023F6  6A0B               	clrf	CopyStringToBuffer@i,c
  8066  0023F8  D013               	goto	l3480
  8067  0023FA                     l3474:
  8068                           
  8069                           ;ModbusRtu.c: 1224: _au8Buffer[_u8BufferSize] = src[i];
  8070  0023FA  5007               	movf	CopyStringToBuffer@src,w,c
  8071  0023FC  240B               	addwf	CopyStringToBuffer@i,w,c
  8072  0023FE  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8073  002400  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8074  002404                     	if	1	;There is more than 1 active tblptr byte
  8075  002404  0E06               	movlw	high __smallconst
  8076  002406  6EF7               	movwf	tblptrh,c
  8077  002408                     	endif
  8078  002408                     	if	0	;tblptru may be non-zero
  8079  002408                     	endif
  8080  002408                     	if	0	;tblptru may be non-zero
  8081  002408                     	endif
  8082  002408  0E00               	movlw	low __au8Buffer
  8083  00240A  2470               	addwf	__u8BufferSize,w,c
  8084  00240C  6ED9               	movwf	fsr2l,c
  8085  00240E  6ADA               	clrf	fsr2h,c
  8086  002410  0E01               	movlw	high __au8Buffer
  8087  002412  22DA               	addwfc	fsr2h,f,c
  8088  002414  0008               	tblrd		*
  8089  002416  FFFF               	dw	65535	; errata NOP
  8090  002418  CFF5 FFDF          	movff	tablat,indf2
  8091  00241C  2A0B               	incf	CopyStringToBuffer@i,f,c
  8092  00241E  2A70               	incf	__u8BufferSize,f,c
  8093  002420                     l3480:
  8094  002420  FFFF               	dw	65535	; assembler added errata NOP
  8095  002422  5008               	movf	CopyStringToBuffer@len,w,c
  8096  002424  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8097  002426  E3E9               	bnc	l3474
  8098  002428  0012               	return		;funcret
  8099  00242A  FFFF               	dw	65535	; errata NOP
  8100  00242C                     __end_of_CopyStringToBuffer:
  8101                           	opt stack 0
  8102                           tblptru	equ	0xFF8
  8103                           tblptrh	equ	0xFF7
  8104                           tblptrl	equ	0xFF6
  8105                           tablat	equ	0xFF5
  8106                           prodh	equ	0xFF4
  8107                           prodl	equ	0xFF3
  8108                           intcon	equ	0xFF2
  8109                           postinc0	equ	0xFEE
  8110                           wreg	equ	0xFE8
  8111                           postdec1	equ	0xFE5
  8112                           fsr1h	equ	0xFE2
  8113                           fsr1l	equ	0xFE1
  8114                           indf2	equ	0xFDF
  8115                           postinc2	equ	0xFDE
  8116                           postdec2	equ	0xFDD
  8117                           plusw2	equ	0xFDB
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function _ModbusProcess_FC3 *****************
  8123 ;; Defined at:
  8124 ;;		line 960 in file "ModbusRtu.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8127 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8128 ;;  u8size          1   23[COMRAM] unsigned char 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  u16regsno       2   29[COMRAM] unsigned short 
  8131 ;;  i               1   32[COMRAM] unsigned char 
  8132 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  8133 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      unsigned char 
  8136 ;; Registers used:
  8137 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : E/1
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8143 ;;      Params:         3       0       0       0       0       0       0
  8144 ;;      Locals:         5       0       0       0       0       0       0
  8145 ;;      Temps:          4       0       0       0       0       0       0
  8146 ;;      Totals:        12       0       0       0       0       0       0
  8147 ;;Total ram usage:       12 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    4
  8150 ;; This function calls:
  8151 ;;		_ModbusSendTxBuffer
  8152 ;; This function is called by:
  8153 ;;		_ModbusPoll
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text37
  8158  001EB4                     __ptext37:
  8159                           	opt stack 0
  8160  001EB4                     _ModbusProcess_FC3:
  8161                           	opt stack 25
  8162                           
  8163                           ;incstack = 0
  8164  001EB4  FFFF               	dw	65535
  8165                           
  8166                           ;ModbusRtu.c: 962: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  8167  001EB6  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  8168                           
  8169                           ;ModbusRtu.c: 963: _lastAddress = u8StartAdd;
  8170  001EBA  C020  F0B6         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  8171  001EBE  0100               	movlb	0	; () banked
  8172  001EC0  6BB7               	clrf	(__lastAddress+1)& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;ModbusRtu.c: 964: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8176  001EC2  0101               	movlb	1	; () banked
  8177  001EC4  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8178  001EC6  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8179  001EC8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8180  001ECA  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  8181  001ECC  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  8182                           
  8183                           ; BSR set to: 1
  8184                           ;ModbusRtu.c: 965: _lastCount = u16regsno;
  8185  001ED0  C01E  F0B8         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  8186  001ED4  C01F  F0B9         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  8187                           
  8188                           ; BSR set to: 1
  8189                           ;ModbusRtu.c: 966: uint8_t u8CopyBufferSize;
  8190                           ;ModbusRtu.c: 967: uint8_t i;
  8191                           ;ModbusRtu.c: 969: _au8Buffer[ 2 ] = u16regsno * 2;
  8192  001ED8  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  8193  001EDA  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8194  001EDC  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8195                           
  8196                           ; BSR set to: 1
  8197                           ;ModbusRtu.c: 970: _u8BufferSize = 3;
  8198  001EDE  0E03               	movlw	3
  8199  001EE0  6E70               	movwf	__u8BufferSize,c
  8200                           
  8201                           ; BSR set to: 1
  8202                           ;ModbusRtu.c: 972: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  8203  001EE2  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  8204  001EE6  D02A               	goto	l3904
  8205  001EE8                     l3898:
  8206                           
  8207                           ; BSR set to: 1
  8208                           ;ModbusRtu.c: 973: {
  8209                           ;ModbusRtu.c: 974: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  8210  001EE8  0E00               	movlw	low __au8Buffer
  8211  001EEA  2470               	addwf	__u8BufferSize,w,c
  8212  001EEC  6ED9               	movwf	fsr2l,c
  8213  001EEE  6ADA               	clrf	fsr2h,c
  8214  001EF0  0E01               	movlw	high __au8Buffer
  8215  001EF2  22DA               	addwfc	fsr2h,f,c
  8216  001EF4  5021               	movf	ModbusProcess_FC3@i,w,c
  8217  001EF6  0D02               	mullw	2
  8218  001EF8  50F3               	movf	prodl,w,c
  8219  001EFA  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8220  001EFC  6EE1               	movwf	fsr1l,c
  8221  001EFE  50F4               	movf	prodh,w,c
  8222  001F00  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8223  001F02  6EE2               	movwf	fsr1h,c
  8224  001F04  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  8225  001F08  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  8226  001F0C  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  8227  001F10  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  8228  001F12  5019               	movf	??_ModbusProcess_FC3,w,c
  8229  001F14  6EDF               	movwf	indf2,c
  8230                           
  8231                           ; BSR set to: 1
  8232                           ;ModbusRtu.c: 975: _u8BufferSize++;
  8233  001F16  2A70               	incf	__u8BufferSize,f,c
  8234                           
  8235                           ; BSR set to: 1
  8236                           ;ModbusRtu.c: 976: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  8237  001F18  5021               	movf	ModbusProcess_FC3@i,w,c
  8238  001F1A  0D02               	mullw	2
  8239  001F1C  50F3               	movf	prodl,w,c
  8240  001F1E  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8241  001F20  6ED9               	movwf	fsr2l,c
  8242  001F22  50F4               	movf	prodh,w,c
  8243  001F24  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8244  001F26  6EDA               	movwf	fsr2h,c
  8245  001F28  0E00               	movlw	low __au8Buffer
  8246  001F2A  2470               	addwf	__u8BufferSize,w,c
  8247  001F2C  6EE1               	movwf	fsr1l,c
  8248  001F2E  6AE2               	clrf	fsr1h,c
  8249  001F30  0E01               	movlw	high __au8Buffer
  8250  001F32  22E2               	addwfc	fsr1h,f,c
  8251  001F34  CFDF FFE7          	movff	indf2,indf1
  8252                           
  8253                           ;ModbusRtu.c: 977: _u8BufferSize++;
  8254  001F38  2A70               	incf	__u8BufferSize,f,c
  8255  001F3A  2A21               	incf	ModbusProcess_FC3@i,f,c
  8256  001F3C                     l3904:
  8257  001F3C  FFFF               	dw	65535	; assembler added errata NOP
  8258                           
  8259                           ; BSR set to: 1
  8260  001F3E  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8261  001F40  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8262  001F42  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8263  001F44  0E00               	movlw	0
  8264  001F46  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8265  001F48  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8266  001F4A  5021               	movf	ModbusProcess_FC3@i,w,c
  8267  001F4C  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8268  001F4E  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8269  001F50  5019               	movf	??_ModbusProcess_FC3,w,c
  8270  001F52  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  8271  001F54  501A               	movf	??_ModbusProcess_FC3+1,w,c
  8272  001F56  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  8273  001F58  E3C7               	bnc	l3898
  8274                           
  8275                           ; BSR set to: 1
  8276                           ;ModbusRtu.c: 978: }
  8277                           ;ModbusRtu.c: 979: u8CopyBufferSize = _u8BufferSize + 2;
  8278  001F5A  5070               	movf	__u8BufferSize,w,c
  8279  001F5C  0F02               	addlw	2
  8280  001F5E  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8281                           
  8282                           ; BSR set to: 1
  8283                           ;ModbusRtu.c: 980: ModbusSendTxBuffer();
  8284  001F60  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  8285                           
  8286                           ;ModbusRtu.c: 982: return u8CopyBufferSize;
  8287  001F64  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8288  001F66  0012               	return		;funcret
  8289  001F68  FFFF               	dw	65535	; errata NOP
  8290  001F6A                     __end_of_ModbusProcess_FC3:
  8291                           	opt stack 0
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodh	equ	0xFF4
  8297                           prodl	equ	0xFF3
  8298                           intcon	equ	0xFF2
  8299                           postinc0	equ	0xFEE
  8300                           wreg	equ	0xFE8
  8301                           indf1	equ	0xFE7
  8302                           postinc1	equ	0xFE6
  8303                           postdec1	equ	0xFE5
  8304                           fsr1h	equ	0xFE2
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           plusw2	equ	0xFDB
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function _ModbusProcess_FC21 *****************
  8315 ;; Defined at:
  8316 ;;		line 1186 in file "ModbusRtu.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8321 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8322 ;;  i               1   29[COMRAM] unsigned char 
  8323 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8324 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      unsigned char 
  8327 ;; Registers used:
  8328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : E/1
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8334 ;;      Params:         0       0       0       0       0       0       0
  8335 ;;      Locals:         7       0       0       0       0       0       0
  8336 ;;      Temps:          2       0       0       0       0       0       0
  8337 ;;      Totals:         9       0       0       0       0       0       0
  8338 ;;Total ram usage:        9 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    4
  8341 ;; This function calls:
  8342 ;;		_ModbusSendTxBuffer
  8343 ;; This function is called by:
  8344 ;;		_ModbusPoll
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text38
  8349  001F6A                     __ptext38:
  8350                           	opt stack 0
  8351  001F6A                     _ModbusProcess_FC21:
  8352                           	opt stack 25
  8353                           
  8354                           ;incstack = 0
  8355  001F6A  FFFF               	dw	65535
  8356                           
  8357                           ;ModbusRtu.c: 1190: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8358  001F6C  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8359                           
  8360                           ;ModbusRtu.c: 1192: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8361  001F70  0101               	movlb	1	; () banked
  8362  001F72  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8363  001F74  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8364  001F78  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8365  001F7A  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8366  001F7E  6A16               	clrf	??_ModbusProcess_FC21,c
  8367  001F80  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8368  001F82  90D8               	bcf	status,0,c
  8369  001F84  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8370  001F86  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8371  001F88  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8372  001F8A  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8373                           
  8374                           ; BSR set to: 1
  8375                           ;ModbusRtu.c: 1193: _lastAddress = startAddrsBytes;
  8376  001F8C  C01A  F0B6         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8377  001F90  C01B  F0B7         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8378                           
  8379                           ;ModbusRtu.c: 1194: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8380  001F94  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8381  001F96  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8382  001F9A  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8383  001F9C  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8384  001FA0  6A16               	clrf	??_ModbusProcess_FC21,c
  8385  001FA2  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8386  001FA4  90D8               	bcf	status,0,c
  8387  001FA6  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8388  001FA8  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8389  001FAA  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8390  001FAC  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8391                           
  8392                           ; BSR set to: 1
  8393                           ;ModbusRtu.c: 1195: _lastCount = recLenBytes;
  8394  001FAE  C01C  F0B8         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8395  001FB2  C01D  F0B9         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8396                           
  8397                           ;ModbusRtu.c: 1196: uint8_t u8CopyBufferSize;
  8398                           ;ModbusRtu.c: 1197: uint8_t i;
  8399                           ;ModbusRtu.c: 1203: _u8BufferSize = requestDataLen + 1;
  8400  001FB6  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8401  001FB8  6E70               	movwf	__u8BufferSize,c
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;ModbusRtu.c: 1207: for (i = 0; i < recLenBytes; i++)
  8405  001FBA  6A1E               	clrf	ModbusProcess_FC21@i,c
  8406  001FBC  D01C               	goto	l4102
  8407  001FBE                     l796:
  8408  001FBE  FFFF               	dw	65535	; assembler added errata NOP
  8409                           
  8410                           ; BSR set to: 1
  8411  001FC0  B2A6               	btfsc	4006,1,c	;volatile
  8412  001FC2  D7FD               	goto	l796
  8413                           
  8414                           ; BSR set to: 1
  8415  001FC4  501E               	movf	ModbusProcess_FC21@i,w,c
  8416  001FC6  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8417  001FC8  6EA9               	movwf	4009,c	;volatile
  8418                           
  8419                           ; BSR set to: 1
  8420  001FCA  0E0A               	movlw	low (__au8Buffer+10)
  8421  001FCC  241E               	addwf	ModbusProcess_FC21@i,w,c
  8422  001FCE  6ED9               	movwf	fsr2l,c
  8423  001FD0  6ADA               	clrf	fsr2h,c
  8424  001FD2  0E01               	movlw	high (__au8Buffer+10)
  8425  001FD4  22DA               	addwfc	fsr2h,f,c
  8426  001FD6  50DF               	movf	indf2,w,c
  8427  001FD8  6EA8               	movwf	4008,c	;volatile
  8428                           
  8429                           ; BSR set to: 1
  8430  001FDA  90D8               	bcf	status,0,c	;volatile
  8431                           
  8432                           ; BSR set to: 1
  8433  001FDC  BEF2               	btfsc	intcon,7,c	;volatile
  8434                           
  8435                           ; BSR set to: 1
  8436  001FDE  80D8               	bsf	status,0,c	;volatile
  8437                           
  8438                           ; BSR set to: 1
  8439  001FE0  9EF2               	bcf	intcon,7,c	;volatile
  8440  001FE2  84A6               	bsf	4006,2,c	;volatile
  8441                           
  8442                           ; BSR set to: 1
  8443  001FE4  0E55               	movlw	85
  8444  001FE6  6EA7               	movwf	4007,c	;volatile
  8445  001FE8  0EAA               	movlw	170
  8446  001FEA  6EA7               	movwf	4007,c	;volatile
  8447                           
  8448                           ; BSR set to: 1
  8449  001FEC  82A6               	bsf	4006,1,c	;volatile
  8450                           
  8451                           ; BSR set to: 1
  8452  001FEE  94A6               	bcf	4006,2,c	;volatile
  8453                           
  8454                           ; BSR set to: 1
  8455  001FF0  E301               	bnc	l4100
  8456                           
  8457                           ; BSR set to: 1
  8458  001FF2  8EF2               	bsf	intcon,7,c	;volatile
  8459  001FF4                     l4100:
  8460                           
  8461                           ; BSR set to: 1
  8462  001FF4  2A1E               	incf	ModbusProcess_FC21@i,f,c
  8463  001FF6                     l4102:
  8464  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  8465                           
  8466                           ; BSR set to: 1
  8467  001FF8  501E               	movf	ModbusProcess_FC21@i,w,c
  8468  001FFA  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  8469  001FFC  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8470  001FFE  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8471  002000  5C16               	subwf	??_ModbusProcess_FC21,w,c
  8472  002002  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8473  002004  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  8474  002006  E3DB               	bnc	l796
  8475                           
  8476                           ; BSR set to: 1
  8477                           ;ModbusRtu.c: 1210: }
  8478                           ;ModbusRtu.c: 1212: u8CopyBufferSize = _u8BufferSize;
  8479  002008  C070  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8480                           
  8481                           ; BSR set to: 1
  8482                           ;ModbusRtu.c: 1213: ModbusSendTxBuffer();
  8483  00200C  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  8484                           
  8485                           ;ModbusRtu.c: 1215: return u8CopyBufferSize;
  8486  002010  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8487  002012  0012               	return		;funcret
  8488  002014  FFFF               	dw	65535	; errata NOP
  8489  002016                     __end_of_ModbusProcess_FC21:
  8490                           	opt stack 0
  8491                           tblptru	equ	0xFF8
  8492                           tblptrh	equ	0xFF7
  8493                           tblptrl	equ	0xFF6
  8494                           tablat	equ	0xFF5
  8495                           prodh	equ	0xFF4
  8496                           prodl	equ	0xFF3
  8497                           intcon	equ	0xFF2
  8498                           postinc0	equ	0xFEE
  8499                           wreg	equ	0xFE8
  8500                           indf1	equ	0xFE7
  8501                           postinc1	equ	0xFE6
  8502                           postdec1	equ	0xFE5
  8503                           fsr1h	equ	0xFE2
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           postdec2	equ	0xFDD
  8508                           plusw2	equ	0xFDB
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _ModbusProcess_FC17 *****************
  8514 ;; Defined at:
  8515 ;;		line 1161 in file "ModbusRtu.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  i               1   23[COMRAM] unsigned char 
  8520 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      unsigned char 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : E/1
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8530 ;;      Params:         0       0       0       0       0       0       0
  8531 ;;      Locals:         2       0       0       0       0       0       0
  8532 ;;      Temps:          1       0       0       0       0       0       0
  8533 ;;      Totals:         3       0       0       0       0       0       0
  8534 ;;Total ram usage:        3 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		_ModbusSendTxBuffer
  8539 ;; This function is called by:
  8540 ;;		_ModbusPoll
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text39
  8545  00235E                     __ptext39:
  8546                           	opt stack 0
  8547  00235E                     _ModbusProcess_FC17:
  8548                           	opt stack 25
  8549                           
  8550                           ;incstack = 0
  8551  00235E  FFFF               	dw	65535
  8552                           
  8553                           ;ModbusRtu.c: 1163: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  8554  002360  0E1B               	movlw	27
  8555  002362  0101               	movlb	1	; () banked
  8556  002364  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8557                           
  8558                           ;ModbusRtu.c: 1165: _u8BufferSize = 3;
  8559  002366  0E03               	movlw	3
  8560  002368  6E70               	movwf	__u8BufferSize,c
  8561                           
  8562                           ; BSR set to: 1
  8563                           ;ModbusRtu.c: 1167: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  8564  00236A  6A18               	clrf	ModbusProcess_FC17@i,c
  8565  00236C                     l4048:
  8566  00236C  FFFF               	dw	65535	; assembler added errata NOP
  8567                           
  8568                           ; BSR set to: 1
  8569                           ;ModbusRtu.c: 1168: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  8570  00236E  5018               	movf	ModbusProcess_FC17@i,w,c
  8571  002370  0F0D               	addlw	low STR_3
  8572  002372  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  8573  002374  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  8574  002378                     	if	1	;There is more than 1 active tblptr byte
  8575  002378  0E06               	movlw	high __smallconst
  8576  00237A  6EF7               	movwf	tblptrh,c
  8577  00237C                     	endif
  8578  00237C                     	if	0	;tblptru may be non-zero
  8579  00237C                     	endif
  8580  00237C                     	if	0	;tblptru may be non-zero
  8581  00237C                     	endif
  8582  00237C  0E00               	movlw	low __au8Buffer
  8583  00237E  2470               	addwf	__u8BufferSize,w,c
  8584  002380  6ED9               	movwf	fsr2l,c
  8585  002382  6ADA               	clrf	fsr2h,c
  8586  002384  0E01               	movlw	high __au8Buffer
  8587  002386  22DA               	addwfc	fsr2h,f,c
  8588  002388  0008               	tblrd		*
  8589  00238A  FFFF               	dw	65535	; errata NOP
  8590  00238C  CFF5 FFDF          	movff	tablat,indf2
  8591                           
  8592                           ; BSR set to: 1
  8593  002390  2A18               	incf	ModbusProcess_FC17@i,f,c
  8594                           
  8595                           ; BSR set to: 1
  8596  002392  2A70               	incf	__u8BufferSize,f,c
  8597                           
  8598                           ; BSR set to: 1
  8599  002394  0E18               	movlw	24
  8600  002396  6418               	cpfsgt	ModbusProcess_FC17@i,c
  8601  002398  D7E9               	goto	l4048
  8602                           
  8603                           ; BSR set to: 1
  8604                           ;ModbusRtu.c: 1170: _au8Buffer[_u8BufferSize++] = '!';
  8605  00239A  0E00               	movlw	low __au8Buffer
  8606  00239C  2470               	addwf	__u8BufferSize,w,c
  8607  00239E  6ED9               	movwf	fsr2l,c
  8608  0023A0  6ADA               	clrf	fsr2h,c
  8609  0023A2  0E01               	movlw	high __au8Buffer
  8610  0023A4  22DA               	addwfc	fsr2h,f,c
  8611  0023A6  0E21               	movlw	33
  8612  0023A8  6EDF               	movwf	indf2,c
  8613                           
  8614                           ; BSR set to: 1
  8615  0023AA  2A70               	incf	__u8BufferSize,f,c
  8616                           
  8617                           ; BSR set to: 1
  8618                           ;ModbusRtu.c: 1171: _au8Buffer[_u8BufferSize++] = '>';
  8619  0023AC  0E00               	movlw	low __au8Buffer
  8620  0023AE  2470               	addwf	__u8BufferSize,w,c
  8621  0023B0  6ED9               	movwf	fsr2l,c
  8622  0023B2  6ADA               	clrf	fsr2h,c
  8623  0023B4  0E01               	movlw	high __au8Buffer
  8624  0023B6  22DA               	addwfc	fsr2h,f,c
  8625  0023B8  0E3E               	movlw	62
  8626  0023BA  6EDF               	movwf	indf2,c
  8627  0023BC  2A70               	incf	__u8BufferSize,f,c
  8628                           
  8629                           ; BSR set to: 1
  8630                           ;ModbusRtu.c: 1172: uint8_t u8CopyBufferSize = _u8BufferSize;
  8631  0023BE  C070  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  8632                           
  8633                           ; BSR set to: 1
  8634                           ;ModbusRtu.c: 1173: ModbusSendTxBuffer();
  8635  0023C2  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  8636                           
  8637                           ;ModbusRtu.c: 1175: return u8CopyBufferSize;
  8638  0023C6  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8639  0023C8  0012               	return		;funcret
  8640  0023CA  FFFF               	dw	65535	; errata NOP
  8641  0023CC                     __end_of_ModbusProcess_FC17:
  8642                           	opt stack 0
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           postinc0	equ	0xFEE
  8651                           wreg	equ	0xFE8
  8652                           indf1	equ	0xFE7
  8653                           postinc1	equ	0xFE6
  8654                           postdec1	equ	0xFE5
  8655                           fsr1h	equ	0xFE2
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           plusw2	equ	0xFDB
  8661                           fsr2h	equ	0xFDA
  8662                           fsr2l	equ	0xFD9
  8663                           status	equ	0xFD8
  8664                           
  8665 ;; *************** function _ModbusProcess_FC16 *****************
  8666 ;; Defined at:
  8667 ;;		line 1122 in file "ModbusRtu.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8670 ;;		 -> _MODBUSHoldingRegs(30), 
  8671 ;;  u8size          1   23[COMRAM] unsigned char 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  8674 ;;  temp            2   28[COMRAM] unsigned short 
  8675 ;;  i               1   34[COMRAM] unsigned char 
  8676 ;;  u8regsno        1   33[COMRAM] unsigned char 
  8677 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      unsigned char 
  8680 ;; Registers used:
  8681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : E/1
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8687 ;;      Params:         3       0       0       0       0       0       0
  8688 ;;      Locals:         7       0       0       0       0       0       0
  8689 ;;      Temps:          4       0       0       0       0       0       0
  8690 ;;      Totals:        14       0       0       0       0       0       0
  8691 ;;Total ram usage:       14 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    4
  8694 ;; This function calls:
  8695 ;;		_ModbusSendTxBuffer
  8696 ;; This function is called by:
  8697 ;;		_ModbusPoll
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           	psect	text40
  8702  001C6A                     __ptext40:
  8703                           	opt stack 0
  8704  001C6A                     _ModbusProcess_FC16:
  8705                           	opt stack 25
  8706                           
  8707                           ;incstack = 0
  8708  001C6A  FFFF               	dw	65535
  8709                           
  8710                           ;ModbusRtu.c: 1125: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8711  001C6C  0101               	movlb	1	; () banked
  8712  001C6E  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8713  001C70  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8714  001C74  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8715  001C76  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8716  001C7A  6A19               	clrf	??_ModbusProcess_FC16,c
  8717  001C7C  1019               	iorwf	??_ModbusProcess_FC16,w,c
  8718  001C7E  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8719  001C80  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8720  001C82  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;ModbusRtu.c: 1126: _lastAddress = u16StartAdd;
  8724  001C84  C020  F0B6         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8725  001C88  C021  F0B7         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8726                           
  8727                           ; BSR set to: 1
  8728                           ;ModbusRtu.c: 1127: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8729  001C8C  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8730                           
  8731                           ; BSR set to: 1
  8732                           ;ModbusRtu.c: 1128: _lastCount = u8regsno;
  8733  001C90  C022  F0B8         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8734  001C94  0100               	movlb	0	; () banked
  8735  001C96  6BB9               	clrf	(__lastCount+1)& (0+255),b
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;ModbusRtu.c: 1129: uint8_t u8CopyBufferSize;
  8739                           ;ModbusRtu.c: 1130: uint8_t i;
  8740                           ;ModbusRtu.c: 1131: uint16_t temp;
  8741                           ;ModbusRtu.c: 1134: _au8Buffer[ NB_HI ] = 0;
  8742  001C98  0101               	movlb	1	; () banked
  8743  001C9A  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8744                           
  8745                           ; BSR set to: 1
  8746                           ;ModbusRtu.c: 1135: _au8Buffer[ NB_LO ] = u8regsno;
  8747  001C9C  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8748                           
  8749                           ; BSR set to: 1
  8750                           ;ModbusRtu.c: 1136: _u8BufferSize = RESPONSE_SIZE;
  8751  001CA0  0E06               	movlw	6
  8752  001CA2  6E70               	movwf	__u8BufferSize,c
  8753                           
  8754                           ; BSR set to: 1
  8755                           ;ModbusRtu.c: 1139: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8756  001CA4  6A23               	clrf	ModbusProcess_FC16@i,c
  8757  001CA6  D02C               	goto	l4028
  8758  001CA8                     l4022:
  8759                           
  8760                           ; BSR set to: 1
  8761                           ;ModbusRtu.c: 1140: {
  8762                           ;ModbusRtu.c: 1141: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8763  001CA8  5023               	movf	ModbusProcess_FC16@i,w,c
  8764  001CAA  0D02               	mullw	2
  8765  001CAC  0E08               	movlw	low (__au8Buffer+8)
  8766  001CAE  24F3               	addwf	prodl,w,c
  8767  001CB0  6ED9               	movwf	fsr2l,c
  8768  001CB2  0E01               	movlw	high (__au8Buffer+8)
  8769  001CB4  20F4               	addwfc	prodh,w,c
  8770  001CB6  6EDA               	movwf	fsr2h,c
  8771  001CB8  50DF               	movf	indf2,w,c
  8772  001CBA  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8773  001CBC  5023               	movf	ModbusProcess_FC16@i,w,c
  8774  001CBE  0D02               	mullw	2
  8775  001CC0  0E07               	movlw	low (__au8Buffer+7)
  8776  001CC2  24F3               	addwf	prodl,w,c
  8777  001CC4  6ED9               	movwf	fsr2l,c
  8778  001CC6  0E01               	movlw	high (__au8Buffer+7)
  8779  001CC8  20F4               	addwfc	prodh,w,c
  8780  001CCA  6EDA               	movwf	fsr2h,c
  8781  001CCC  50DF               	movf	indf2,w,c
  8782  001CCE  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8783  001CD0  5019               	movf	??_ModbusProcess_FC16,w,c
  8784  001CD2  6E1D               	movwf	ModbusProcess_FC16@temp,c
  8785  001CD4  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8786                           
  8787                           ; BSR set to: 1
  8788                           ;ModbusRtu.c: 1145: regs[ u16StartAdd + i ] = temp;
  8789  001CD8  5023               	movf	ModbusProcess_FC16@i,w,c
  8790  001CDA  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8791  001CDC  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8792  001CDE  0E00               	movlw	0
  8793  001CE0  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8794  001CE2  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8795  001CE4  90D8               	bcf	status,0,c
  8796  001CE6  3619               	rlcf	??_ModbusProcess_FC16,f,c
  8797  001CE8  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  8798  001CEA  5019               	movf	??_ModbusProcess_FC16,w,c
  8799  001CEC  2416               	addwf	ModbusProcess_FC16@regs,w,c
  8800  001CEE  6ED9               	movwf	fsr2l,c
  8801  001CF0  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8802  001CF2  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8803  001CF4  6EDA               	movwf	fsr2h,c
  8804  001CF6  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8805  001CFA  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8806                           
  8807                           ; BSR set to: 1
  8808  001CFE  2A23               	incf	ModbusProcess_FC16@i,f,c
  8809  001D00                     l4028:
  8810  001D00  FFFF               	dw	65535	; assembler added errata NOP
  8811                           
  8812                           ; BSR set to: 1
  8813  001D02  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  8814  001D04  5C23               	subwf	ModbusProcess_FC16@i,w,c
  8815  001D06  E20E               	bc	l4032
  8816                           
  8817                           ; BSR set to: 1
  8818  001D08  5018               	movf	ModbusProcess_FC16@u8size,w,c
  8819  001D0A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8820  001D0C  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8821  001D0E  5023               	movf	ModbusProcess_FC16@i,w,c
  8822  001D10  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8823  001D12  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8824  001D14  0E00               	movlw	0
  8825  001D16  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8826  001D18  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8827  001D1A  5019               	movf	??_ModbusProcess_FC16,w,c
  8828  001D1C  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  8829  001D1E  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8830  001D20  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  8831  001D22  E3C2               	bnc	l4022
  8832  001D24                     l4032:
  8833                           
  8834                           ; BSR set to: 1
  8835                           ;ModbusRtu.c: 1146: }
  8836                           ;ModbusRtu.c: 1147: u8CopyBufferSize = _u8BufferSize + 2;
  8837  001D24  5070               	movf	__u8BufferSize,w,c
  8838  001D26  0F02               	addlw	2
  8839  001D28  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8840                           
  8841                           ; BSR set to: 1
  8842                           ;ModbusRtu.c: 1148: ModbusSendTxBuffer();
  8843  001D2A  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  8844                           
  8845                           ;ModbusRtu.c: 1150: return u8CopyBufferSize;
  8846  001D2E  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8847  001D30  0012               	return		;funcret
  8848  001D32  FFFF               	dw	65535	; errata NOP
  8849  001D34                     __end_of_ModbusProcess_FC16:
  8850                           	opt stack 0
  8851                           tblptru	equ	0xFF8
  8852                           tblptrh	equ	0xFF7
  8853                           tblptrl	equ	0xFF6
  8854                           tablat	equ	0xFF5
  8855                           prodh	equ	0xFF4
  8856                           prodl	equ	0xFF3
  8857                           intcon	equ	0xFF2
  8858                           postinc0	equ	0xFEE
  8859                           wreg	equ	0xFE8
  8860                           indf1	equ	0xFE7
  8861                           postinc1	equ	0xFE6
  8862                           postdec1	equ	0xFE5
  8863                           fsr1h	equ	0xFE2
  8864                           fsr1l	equ	0xFE1
  8865                           indf2	equ	0xFDF
  8866                           postinc2	equ	0xFDE
  8867                           postdec2	equ	0xFDD
  8868                           plusw2	equ	0xFDB
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _ModbusProcess_FC15 *****************
  8874 ;; Defined at:
  8875 ;;		line 1064 in file "ModbusRtu.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  regs            1    wreg     PTR unsigned short 
  8878 ;;		 -> _MODBUSCoils(2), 
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  regs            1   38[COMRAM] PTR unsigned short 
  8881 ;;		 -> _MODBUSCoils(2), 
  8882 ;;  u16currentCo    2   35[COMRAM] unsigned short 
  8883 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  8884 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  8885 ;;  u16coil         2   26[COMRAM] unsigned short 
  8886 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  8887 ;;  u8currentBit    1   37[COMRAM] unsigned char 
  8888 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  8889 ;;  bTemp           1   29[COMRAM] unsigned char 
  8890 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      unsigned char 
  8893 ;; Registers used:
  8894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : E/1
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8900 ;;      Params:         0       0       0       0       0       0       0
  8901 ;;      Locals:        14       0       0       0       0       0       0
  8902 ;;      Temps:          5       0       0       0       0       0       0
  8903 ;;      Totals:        19       0       0       0       0       0       0
  8904 ;;Total ram usage:       19 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    4
  8907 ;; This function calls:
  8908 ;;		_ModbusSendTxBuffer
  8909 ;; This function is called by:
  8910 ;;		_ModbusPoll
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text41
  8915  001878                     __ptext41:
  8916                           	opt stack 0
  8917  001878                     _ModbusProcess_FC15:
  8918                           	opt stack 25
  8919                           
  8920                           ;incstack = 0
  8921  001878  FFFF               	dw	65535
  8922                           
  8923                           ;ModbusProcess_FC15@regs stored from wreg
  8924  00187A  6E27               	movwf	ModbusProcess_FC15@regs,c
  8925                           
  8926                           ;ModbusRtu.c: 1067: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8927                           ;ModbusRtu.c: 1068: uint8_t u8CopyBufferSize;
  8928                           ;ModbusRtu.c: 1069: uint16_t u16currentCoil, u16coil;
  8929                           ;ModbusRtu.c: 1070: boolean bTemp;
  8930                           ;ModbusRtu.c: 1073: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8931  00187C  0101               	movlb	1	; () banked
  8932  00187E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8933  001880  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8934  001882  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8935  001884  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8936  001886  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8937                           
  8938                           ; BSR set to: 1
  8939                           ;ModbusRtu.c: 1074: _lastAddress = u16StartCoil;
  8940  00188A  C020  F0B6         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8941  00188E  C021  F0B7         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8942                           
  8943                           ;ModbusRtu.c: 1075: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8944  001892  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8945  001894  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8946  001896  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8947  001898  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  8948  00189A  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8949                           
  8950                           ; BSR set to: 1
  8951                           ;ModbusRtu.c: 1076: _lastCount = u16Coilno;
  8952  00189E  C022  F0B8         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8953  0018A2  C023  F0B9         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8954                           
  8955                           ; BSR set to: 1
  8956                           ;ModbusRtu.c: 1079: u8bitsno = 0;
  8957  0018A6  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8958                           
  8959                           ;ModbusRtu.c: 1080: u8frameByte = 7;
  8960  0018A8  0E07               	movlw	7
  8961  0018AA  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  8962                           
  8963                           ; BSR set to: 1
  8964                           ;ModbusRtu.c: 1081: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  8965  0018AC  6A24               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8966  0018AE  6A25               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8967  0018B0  D058               	goto	l3994
  8968  0018B2                     l3974:
  8969                           
  8970                           ;ModbusRtu.c: 1082: {
  8971                           ;ModbusRtu.c: 1084: u16coil = u16StartCoil + u16currentCoil;
  8972  0018B2  5024               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8973  0018B4  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8974  0018B6  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  8975  0018B8  5025               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8976  0018BA  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8977  0018BC  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  8978                           
  8979                           ;ModbusRtu.c: 1086: u8currentBit = (uint8_t) u16coil;
  8980  0018BE  C01B  F026         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8981                           
  8982                           ;ModbusRtu.c: 1088: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8983  0018C2  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8984  0018C6  0E00               	movlw	low __au8Buffer
  8985  0018C8  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8986  0018CA  6ED9               	movwf	fsr2l,c
  8987  0018CC  6ADA               	clrf	fsr2h,c
  8988  0018CE  0E01               	movlw	high __au8Buffer
  8989  0018D0  22DA               	addwfc	fsr2h,f,c
  8990  0018D2  50DF               	movf	indf2,w,c
  8991  0018D4  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8992  0018D6  2A16               	incf	??_ModbusProcess_FC15,f,c
  8993  0018D8  D003               	goto	u3034
  8994  0018DA                     u3035:
  8995  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  8996  0018DC  90D8               	bcf	status,0,c
  8997  0018DE  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  8998  0018E0                     u3034:
  8999  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  9000  0018E2  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9001  0018E4  D7FA               	goto	u3035
  9002  0018E6  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9003  0018E8  0B01               	andlw	1
  9004  0018EA  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9005                           
  9006                           ;ModbusRtu.c: 1092: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9007  0018EC  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9008  0018EE  E016               	bz	l3984
  9009  0018F0  C026  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9010  0018F4  0E01               	movlw	1
  9011  0018F6  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9012  0018F8  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9013  0018FA  2A16               	incf	??_ModbusProcess_FC15,f,c
  9014  0018FC  D004               	goto	u3054
  9015  0018FE                     u3055:
  9016  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  9017  001900  90D8               	bcf	status,0,c
  9018  001902  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9019  001904  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9020  001906                     u3054:
  9021  001906  FFFF               	dw	65535	; assembler added errata NOP
  9022  001908  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9023  00190A  D7F9               	goto	u3055
  9024  00190C  5027               	movf	ModbusProcess_FC15@regs,w,c
  9025  00190E  6ED9               	movwf	fsr2l,c
  9026  001910  6ADA               	clrf	fsr2h,c
  9027  001912  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9028  001914  12DE               	iorwf	postinc2,f,c
  9029  001916  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9030  001918  12DD               	iorwf	postdec2,f,c
  9031  00191A  D019               	goto	l3986
  9032  00191C                     l3984:
  9033  00191C  C026  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9034  001920  0E01               	movlw	1
  9035  001922  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9036  001924  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9037  001926  2A16               	incf	??_ModbusProcess_FC15,f,c
  9038  001928  D004               	goto	u3064
  9039  00192A                     u3065:
  9040  00192A  FFFF               	dw	65535	; assembler added errata NOP
  9041  00192C  90D8               	bcf	status,0,c
  9042  00192E  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9043  001930  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9044  001932                     u3064:
  9045  001932  FFFF               	dw	65535	; assembler added errata NOP
  9046  001934  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9047  001936  D7F9               	goto	u3065
  9048  001938  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9049  00193A  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9050  00193C  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9051  00193E  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9052  001940  5027               	movf	ModbusProcess_FC15@regs,w,c
  9053  001942  6ED9               	movwf	fsr2l,c
  9054  001944  6ADA               	clrf	fsr2h,c
  9055  001946  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9056  001948  16DE               	andwf	postinc2,f,c
  9057  00194A  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9058  00194C  16DD               	andwf	postdec2,f,c
  9059  00194E                     l3986:
  9060  00194E  FFFF               	dw	65535	; assembler added errata NOP
  9061                           
  9062                           ;ModbusRtu.c: 1097: u8bitsno++;
  9063  001950  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9064                           
  9065                           ;ModbusRtu.c: 1099: if (u8bitsno > 7)
  9066  001952  0E07               	movlw	7
  9067  001954  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9068  001956  D002               	goto	l775
  9069                           
  9070                           ;ModbusRtu.c: 1100: {
  9071                           ;ModbusRtu.c: 1101: u8bitsno = 0;
  9072  001958  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9073                           
  9074                           ;ModbusRtu.c: 1102: u8frameByte++;
  9075  00195A  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9076  00195C                     l775:
  9077  00195C  FFFF               	dw	65535	; assembler added errata NOP
  9078  00195E  4A24               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9079  001960  2A25               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9080  001962                     l3994:
  9081  001962  FFFF               	dw	65535	; assembler added errata NOP
  9082  001964  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9083  001966  5C24               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9084  001968  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9085  00196A  5825               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9086  00196C  E3A2               	bnc	l3974
  9087                           
  9088                           ;ModbusRtu.c: 1103: }
  9089                           ;ModbusRtu.c: 1104: }
  9090                           ;ModbusRtu.c: 1108: _u8BufferSize = 6;
  9091  00196E  0E06               	movlw	6
  9092  001970  6E70               	movwf	__u8BufferSize,c
  9093                           
  9094                           ;ModbusRtu.c: 1109: u8CopyBufferSize = _u8BufferSize + 2;
  9095  001972  5070               	movf	__u8BufferSize,w,c
  9096  001974  0F02               	addlw	2
  9097  001976  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9098                           
  9099                           ;ModbusRtu.c: 1110: ModbusSendTxBuffer();
  9100  001978  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  9101                           
  9102                           ;ModbusRtu.c: 1111: return u8CopyBufferSize;
  9103  00197C  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9104  00197E  0012               	return		;funcret
  9105  001980  FFFF               	dw	65535	; errata NOP
  9106  001982                     __end_of_ModbusProcess_FC15:
  9107                           	opt stack 0
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           postinc0	equ	0xFEE
  9116                           wreg	equ	0xFE8
  9117                           indf1	equ	0xFE7
  9118                           postinc1	equ	0xFE6
  9119                           postdec1	equ	0xFE5
  9120                           fsr1h	equ	0xFE2
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           plusw2	equ	0xFDB
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _ModbusProcess_FC1 *****************
  9131 ;; Defined at:
  9132 ;;		line 903 in file "ModbusRtu.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  regs            2   21[COMRAM] unsigned short 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  u16Coilno       2   36[COMRAM] unsigned short 
  9137 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  9138 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9139 ;;  u16coil         2   26[COMRAM] unsigned short 
  9140 ;;  u8bitsno        1   35[COMRAM] unsigned char 
  9141 ;;  u8bytesno       1   30[COMRAM] unsigned char 
  9142 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
  9143 ;;  u8currentBit    1   28[COMRAM] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      unsigned char 
  9146 ;; Registers used:
  9147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : E/1
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9153 ;;      Params:         2       0       0       0       0       0       0
  9154 ;;      Locals:        12       0       0       0       0       0       0
  9155 ;;      Temps:          3       0       0       0       0       0       0
  9156 ;;      Totals:        17       0       0       0       0       0       0
  9157 ;;Total ram usage:       17 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    4
  9160 ;; This function calls:
  9161 ;;		_ModbusSendTxBuffer
  9162 ;; This function is called by:
  9163 ;;		_ModbusPoll
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text42
  9168  00174C                     __ptext42:
  9169                           	opt stack 0
  9170  00174C                     _ModbusProcess_FC1:
  9171                           	opt stack 25
  9172                           
  9173                           ;incstack = 0
  9174  00174C  FFFF               	dw	65535
  9175                           
  9176                           ;ModbusRtu.c: 906: uint8_t u8currentBit, u8bytesno, u8bitsno;
  9177                           ;ModbusRtu.c: 907: uint8_t u8CopyBufferSize;
  9178                           ;ModbusRtu.c: 908: uint16_t u16currentCoil, u16coil;
  9179                           ;ModbusRtu.c: 911: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9180  00174E  0101               	movlb	1	; () banked
  9181  001750  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9182  001752  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  9183  001754  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9184  001756  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
  9185  001758  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
  9186                           
  9187                           ; BSR set to: 1
  9188                           ;ModbusRtu.c: 912: _lastAddress = u16StartCoil;
  9189  00175C  C020  F0B6         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
  9190  001760  C021  F0B7         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
  9191                           
  9192                           ;ModbusRtu.c: 913: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9193  001764  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9194  001766  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  9195  001768  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9196  00176A  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
  9197  00176C  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
  9198                           
  9199                           ; BSR set to: 1
  9200                           ;ModbusRtu.c: 914: _lastCount = u16Coilno;
  9201  001770  C025  F0B8         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
  9202  001774  C026  F0B9         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
  9203                           
  9204                           ; BSR set to: 1
  9205                           ;ModbusRtu.c: 916: u8bytesno = (uint8_t) (u16Coilno / 8);
  9206  001778  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9207  00177C  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
  9208  001780  90D8               	bcf	status,0,c
  9209  001782  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9210  001784  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9211  001786  90D8               	bcf	status,0,c
  9212  001788  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9213  00178A  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9214  00178C  90D8               	bcf	status,0,c
  9215  00178E  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9216  001790  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9217  001792  5018               	movf	??_ModbusProcess_FC1,w,c
  9218  001794  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
  9219                           
  9220                           ; BSR set to: 1
  9221                           ;ModbusRtu.c: 917: if (u16Coilno % 8 != 0)
  9222  001796  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9223  00179A  0E07               	movlw	7
  9224  00179C  1618               	andwf	??_ModbusProcess_FC1,f,c
  9225  00179E  E001               	bz	l3846
  9226                           
  9227                           ; BSR set to: 1
  9228                           ;ModbusRtu.c: 918: u8bytesno++;
  9229  0017A0  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
  9230  0017A2                     l3846:
  9231                           
  9232                           ; BSR set to: 1
  9233                           ;ModbusRtu.c: 919: _au8Buffer[ ADD_HI ] = u8bytesno;
  9234  0017A2  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
  9235                           
  9236                           ; BSR set to: 1
  9237                           ;ModbusRtu.c: 920: _u8BufferSize = ADD_LO;
  9238  0017A6  0E03               	movlw	3
  9239  0017A8  6E70               	movwf	__u8BufferSize,c
  9240                           
  9241                           ; BSR set to: 1
  9242                           ;ModbusRtu.c: 923: u8bitsno = 0;
  9243  0017AA  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9244                           
  9245                           ; BSR set to: 1
  9246                           ;ModbusRtu.c: 925: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
  9247  0017AC  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
  9248  0017AE  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
  9249  0017B0  D04F               	goto	l3872
  9250  0017B2                     l3854:
  9251                           
  9252                           ;ModbusRtu.c: 926: {
  9253                           ;ModbusRtu.c: 927: u16coil = u16StartCoil + u16currentCoil;
  9254  0017B2  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
  9255  0017B4  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
  9256  0017B6  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
  9257  0017B8  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
  9258  0017BA  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
  9259  0017BC  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
  9260                           
  9261                           ;ModbusRtu.c: 929: u8currentBit = (uint8_t) u16coil;
  9262  0017BE  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
  9263                           
  9264                           ;ModbusRtu.c: 931: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
  9265  0017C2  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
  9266  0017C6  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
  9267  0017CA  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
  9268  0017CE  2A18               	incf	??_ModbusProcess_FC1,f,c
  9269  0017D0  D004               	goto	u2924
  9270  0017D2                     u2925:
  9271  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  9272  0017D4  90D8               	bcf	status,0,c
  9273  0017D6  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
  9274  0017D8  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9275  0017DA                     u2924:
  9276  0017DA  FFFF               	dw	65535	; assembler added errata NOP
  9277  0017DC  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9278  0017DE  D7F9               	goto	u2925
  9279  0017E0  A019               	btfss	??_ModbusProcess_FC1+1,0,c
  9280  0017E2  D015               	goto	l3862
  9281  0017E4  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9282  0017E8  0E01               	movlw	1
  9283  0017EA  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9284  0017EC  2A18               	incf	??_ModbusProcess_FC1,f,c
  9285  0017EE  D003               	goto	u2944
  9286  0017F0                     u2945:
  9287  0017F0  FFFF               	dw	65535	; assembler added errata NOP
  9288  0017F2  90D8               	bcf	status,0,c
  9289  0017F4  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9290  0017F6                     u2944:
  9291  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  9292  0017F8  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9293  0017FA  D7FA               	goto	u2945
  9294  0017FC  0E00               	movlw	low __au8Buffer
  9295  0017FE  2470               	addwf	__u8BufferSize,w,c
  9296  001800  6ED9               	movwf	fsr2l,c
  9297  001802  6ADA               	clrf	fsr2h,c
  9298  001804  0E01               	movlw	high __au8Buffer
  9299  001806  22DA               	addwfc	fsr2h,f,c
  9300  001808  5019               	movf	??_ModbusProcess_FC1+1,w,c
  9301  00180A  12DF               	iorwf	indf2,f,c
  9302  00180C  D017               	goto	l3864
  9303  00180E                     l3862:
  9304  00180E  FFFF               	dw	65535	; assembler added errata NOP
  9305  001810  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9306  001814  0E01               	movlw	1
  9307  001816  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9308  001818  2A18               	incf	??_ModbusProcess_FC1,f,c
  9309  00181A  D003               	goto	u2954
  9310  00181C                     u2955:
  9311  00181C  FFFF               	dw	65535	; assembler added errata NOP
  9312  00181E  90D8               	bcf	status,0,c
  9313  001820  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9314  001822                     u2954:
  9315  001822  FFFF               	dw	65535	; assembler added errata NOP
  9316  001824  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9317  001826  D7FA               	goto	u2955
  9318  001828  1C19               	comf	??_ModbusProcess_FC1+1,w,c
  9319  00182A  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
  9320  00182C  0E00               	movlw	low __au8Buffer
  9321  00182E  2470               	addwf	__u8BufferSize,w,c
  9322  001830  6ED9               	movwf	fsr2l,c
  9323  001832  6ADA               	clrf	fsr2h,c
  9324  001834  0E01               	movlw	high __au8Buffer
  9325  001836  22DA               	addwfc	fsr2h,f,c
  9326  001838  501A               	movf	??_ModbusProcess_FC1+2,w,c
  9327  00183A  16DF               	andwf	indf2,f,c
  9328  00183C                     l3864:
  9329  00183C  FFFF               	dw	65535	; assembler added errata NOP
  9330                           
  9331                           ;ModbusRtu.c: 935: u8bitsno++;
  9332  00183E  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
  9333                           
  9334                           ;ModbusRtu.c: 937: if (u8bitsno > 7)
  9335  001840  0E07               	movlw	7
  9336  001842  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
  9337  001844  D002               	goto	l744
  9338                           
  9339                           ;ModbusRtu.c: 938: {
  9340                           ;ModbusRtu.c: 939: u8bitsno = 0;
  9341  001846  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9342                           
  9343                           ;ModbusRtu.c: 940: _u8BufferSize++;
  9344  001848  2A70               	incf	__u8BufferSize,f,c
  9345  00184A                     l744:
  9346  00184A  FFFF               	dw	65535	; assembler added errata NOP
  9347  00184C  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
  9348  00184E  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
  9349  001850                     l3872:
  9350  001850  FFFF               	dw	65535	; assembler added errata NOP
  9351  001852  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
  9352  001854  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
  9353  001856  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
  9354  001858  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
  9355  00185A  E3AB               	bnc	l3854
  9356                           
  9357                           ;ModbusRtu.c: 941: }
  9358                           ;ModbusRtu.c: 942: }
  9359                           ;ModbusRtu.c: 945: if (u16Coilno % 8 != 0)
  9360  00185C  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9361  001860  0E07               	movlw	7
  9362  001862  1618               	andwf	??_ModbusProcess_FC1,f,c
  9363  001864  E001               	bz	l3878
  9364                           
  9365                           ;ModbusRtu.c: 946: _u8BufferSize++;
  9366  001866  2A70               	incf	__u8BufferSize,f,c
  9367  001868                     l3878:
  9368                           
  9369                           ;ModbusRtu.c: 947: u8CopyBufferSize = _u8BufferSize + 2;
  9370  001868  5070               	movf	__u8BufferSize,w,c
  9371  00186A  0F02               	addlw	2
  9372  00186C  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
  9373                           
  9374                           ;ModbusRtu.c: 948: ModbusSendTxBuffer();
  9375  00186E  EC12  F013         	call	_ModbusSendTxBuffer	;wreg free
  9376                           
  9377                           ;ModbusRtu.c: 949: return u8CopyBufferSize;
  9378  001872  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
  9379  001874  0012               	return		;funcret
  9380  001876  FFFF               	dw	65535	; errata NOP
  9381  001878                     __end_of_ModbusProcess_FC1:
  9382                           	opt stack 0
  9383                           tblptru	equ	0xFF8
  9384                           tblptrh	equ	0xFF7
  9385                           tblptrl	equ	0xFF6
  9386                           tablat	equ	0xFF5
  9387                           prodh	equ	0xFF4
  9388                           prodl	equ	0xFF3
  9389                           intcon	equ	0xFF2
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           indf1	equ	0xFE7
  9393                           postinc1	equ	0xFE6
  9394                           postdec1	equ	0xFE5
  9395                           fsr1h	equ	0xFE2
  9396                           fsr1l	equ	0xFE1
  9397                           indf2	equ	0xFDF
  9398                           postinc2	equ	0xFDE
  9399                           postdec2	equ	0xFDD
  9400                           plusw2	equ	0xFDB
  9401                           fsr2h	equ	0xFDA
  9402                           fsr2l	equ	0xFD9
  9403                           status	equ	0xFD8
  9404                           
  9405 ;; *************** function _ModbusSendTxBuffer *****************
  9406 ;; Defined at:
  9407 ;;		line 549 in file "ModbusRtu.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;  u16crc          2   19[COMRAM] unsigned short 
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  1    wreg      void 
  9414 ;; Registers used:
  9415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/1
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9421 ;;      Params:         0       0       0       0       0       0       0
  9422 ;;      Locals:         2       0       0       0       0       0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0
  9424 ;;      Totals:         2       0       0       0       0       0       0
  9425 ;;Total ram usage:        2 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    3
  9428 ;; This function calls:
  9429 ;;		_ModbusCalcCRC
  9430 ;;		_PortWrite
  9431 ;;		_millis
  9432 ;; This function is called by:
  9433 ;;		_ModbusPoll
  9434 ;;		_ModbusProcess_FC1
  9435 ;;		_ModbusProcess_FC3
  9436 ;;		_ModbusProcess_FC5
  9437 ;;		_ModbusProcess_FC6
  9438 ;;		_ModbusProcess_FC7
  9439 ;;		_ModbusProcess_FC15
  9440 ;;		_ModbusProcess_FC16
  9441 ;;		_ModbusProcess_FC17
  9442 ;;		_ModbusProcess_FC21
  9443 ;;		_ModbusProcess_FC43
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text43
  9448  002624                     __ptext43:
  9449                           	opt stack 0
  9450  002624                     _ModbusSendTxBuffer:
  9451                           	opt stack 26
  9452                           
  9453                           ;incstack = 0
  9454  002624  FFFF               	dw	65535
  9455                           
  9456                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
  9457  002626  5070               	movf	__u8BufferSize,w,c
  9458  002628  EC75  F011         	call	_ModbusCalcCRC
  9459  00262C  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
  9460  002630  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
  9461                           
  9462                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
  9463  002634  0E00               	movlw	low __au8Buffer
  9464  002636  2470               	addwf	__u8BufferSize,w,c
  9465  002638  6ED9               	movwf	fsr2l,c
  9466  00263A  6ADA               	clrf	fsr2h,c
  9467  00263C  0E01               	movlw	high __au8Buffer
  9468  00263E  22DA               	addwfc	fsr2h,f,c
  9469  002640  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
  9470                           
  9471                           ;ModbusRtu.c: 556: _u8BufferSize++;
  9472  002644  2A70               	incf	__u8BufferSize,f,c
  9473                           
  9474                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
  9475  002646  0E00               	movlw	low __au8Buffer
  9476  002648  2470               	addwf	__u8BufferSize,w,c
  9477  00264A  6ED9               	movwf	fsr2l,c
  9478  00264C  6ADA               	clrf	fsr2h,c
  9479  00264E  0E01               	movlw	high __au8Buffer
  9480  002650  22DA               	addwfc	fsr2h,f,c
  9481  002652  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
  9482                           
  9483                           ;ModbusRtu.c: 558: _u8BufferSize++;
  9484  002656  2A70               	incf	__u8BufferSize,f,c
  9485                           
  9486                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
  9487  002658  0E00               	movlw	low __au8Buffer
  9488  00265A  6E07               	movwf	PortWrite@buf,c
  9489  00265C  0E01               	movlw	high __au8Buffer
  9490  00265E  6E08               	movwf	PortWrite@buf+1,c
  9491  002660  C070  F009         	movff	__u8BufferSize,PortWrite@buflen
  9492  002664  ECE4  F013         	call	_PortWrite	;wreg free
  9493                           
  9494                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
  9495  002668  6A70               	clrf	__u8BufferSize,c
  9496                           
  9497                           ;ModbusRtu.c: 574: _u16OutCnt++;
  9498  00266A  EF63  F014         	goto	_millis	;wreg free
  9499  00266E  FFFF               	dw	65535	; errata NOP
  9500  002670                     __end_of_ModbusSendTxBuffer:
  9501                           	opt stack 0
  9502                           tblptru	equ	0xFF8
  9503                           tblptrh	equ	0xFF7
  9504                           tblptrl	equ	0xFF6
  9505                           tablat	equ	0xFF5
  9506                           prodh	equ	0xFF4
  9507                           prodl	equ	0xFF3
  9508                           intcon	equ	0xFF2
  9509                           postinc0	equ	0xFEE
  9510                           wreg	equ	0xFE8
  9511                           indf1	equ	0xFE7
  9512                           postinc1	equ	0xFE6
  9513                           postdec1	equ	0xFE5
  9514                           fsr1h	equ	0xFE2
  9515                           fsr1l	equ	0xFE1
  9516                           indf2	equ	0xFDF
  9517                           postinc2	equ	0xFDE
  9518                           postdec2	equ	0xFDD
  9519                           plusw2	equ	0xFDB
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524 ;; *************** function _millis *****************
  9525 ;; Defined at:
  9526 ;;		line 236 in file "interrupts.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;  ret             4   10[COMRAM] unsigned long 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  4    6[COMRAM] unsigned long 
  9533 ;; Registers used:
  9534 ;;		None
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9540 ;;      Params:         4       0       0       0       0       0       0
  9541 ;;      Locals:         4       0       0       0       0       0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0
  9543 ;;      Totals:         8       0       0       0       0       0       0
  9544 ;;Total ram usage:        8 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    2
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_main
  9551 ;;		_ModbusPoll
  9552 ;;		_ModbusSendTxBuffer
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text44
  9557  0028C6                     __ptext44:
  9558                           	opt stack 0
  9559  0028C6                     _millis:
  9560                           	opt stack 28
  9561                           
  9562                           ;incstack = 0
  9563  0028C6  FFFF               	dw	65535
  9564                           
  9565                           ;interrupts.c: 239: (INTCONbits.GIE = 0);
  9566  0028C8  9EF2               	bcf	intcon,7,c	;volatile
  9567                           
  9568                           ;interrupts.c: 240: unsigned long ret = millisecondsFromStart;
  9569  0028CA  C0AC  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
  9570  0028CE  C0AD  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
  9571  0028D2  C0AE  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
  9572  0028D6  C0AF  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
  9573                           
  9574                           ;interrupts.c: 241: (INTCONbits.GIE = 1);
  9575  0028DA  8EF2               	bsf	intcon,7,c	;volatile
  9576                           
  9577                           ;interrupts.c: 242: return ret;
  9578  0028DC  C00B  F007         	movff	millis@ret,?_millis
  9579  0028E0  C00C  F008         	movff	millis@ret+1,?_millis+1
  9580  0028E4  C00D  F009         	movff	millis@ret+2,?_millis+2
  9581  0028E8  C00E  F00A         	movff	millis@ret+3,?_millis+3
  9582  0028EC  0012               	return		;funcret
  9583  0028EE  FFFF               	dw	65535	; errata NOP
  9584  0028F0                     __end_of_millis:
  9585                           	opt stack 0
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           intcon	equ	0xFF2
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           indf1	equ	0xFE7
  9596                           postinc1	equ	0xFE6
  9597                           postdec1	equ	0xFE5
  9598                           fsr1h	equ	0xFE2
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           postdec2	equ	0xFDD
  9603                           plusw2	equ	0xFDB
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _PortWrite *****************
  9609 ;; Defined at:
  9610 ;;		line 93 in file "interrupts.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  buf             2    6[COMRAM] PTR unsigned char 
  9613 ;;		 -> _au8Buffer(140), 
  9614 ;;  buflen          1    8[COMRAM] unsigned char 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  i               1    9[COMRAM] unsigned char 
  9617 ;; Return value:  Size  Location     Type
  9618 ;;                  1    wreg      void 
  9619 ;; Registers used:
  9620 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/1
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9626 ;;      Params:         3       0       0       0       0       0       0
  9627 ;;      Locals:         1       0       0       0       0       0       0
  9628 ;;      Temps:          0       0       0       0       0       0       0
  9629 ;;      Totals:         4       0       0       0       0       0       0
  9630 ;;Total ram usage:        4 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    2
  9633 ;; This function calls:
  9634 ;;		Nothing
  9635 ;; This function is called by:
  9636 ;;		_ModbusSendTxBuffer
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           	psect	text45
  9641  0027C8                     __ptext45:
  9642                           	opt stack 0
  9643  0027C8                     _PortWrite:
  9644                           	opt stack 26
  9645                           
  9646                           ;incstack = 0
  9647  0027C8  FFFF               	dw	65535
  9648                           
  9649                           ;interrupts.c: 95: LATCbits.LATC5 = 1;
  9650  0027CA  8A8B               	bsf	3979,5,c	;volatile
  9651                           
  9652                           ;interrupts.c: 96: _delay((unsigned long)((10)*(10000000L/4000000.0)));
  9653  0027CC  0E06               	movlw	6
  9654  0027CE                     u4897:
  9655  0027CE  FFFF               	dw	65535	; errata NOP
  9656  0027D0  2EE8               	decfsz	wreg,f,c
  9657  0027D2  D7FD               	goto	u4897
  9658  0027D4  F000               	nop	
  9659                           
  9660                           ;interrupts.c: 97: for(uint8_t i = 0; i < buflen; i++)
  9661  0027D6  6A0A               	clrf	PortWrite@i,c
  9662  0027D8  D00C               	goto	l3256
  9663  0027DA                     l67:
  9664  0027DA  FFFF               	dw	65535	; assembler added errata NOP
  9665  0027DC  A2AC               	btfss	4012,1,c	;volatile
  9666  0027DE  D7FD               	goto	l67
  9667                           
  9668                           ;interrupts.c: 100: TXREG = buf[i];
  9669  0027E0  500A               	movf	PortWrite@i,w,c
  9670  0027E2  2407               	addwf	PortWrite@buf,w,c
  9671  0027E4  6ED9               	movwf	fsr2l,c
  9672  0027E6  0E00               	movlw	0
  9673  0027E8  2008               	addwfc	PortWrite@buf+1,w,c
  9674  0027EA  6EDA               	movwf	fsr2h,c
  9675  0027EC  50DF               	movf	indf2,w,c
  9676  0027EE  6EAD               	movwf	4013,c	;volatile
  9677  0027F0  2A0A               	incf	PortWrite@i,f,c
  9678  0027F2                     l3256:
  9679  0027F2  FFFF               	dw	65535	; assembler added errata NOP
  9680  0027F4  5009               	movf	PortWrite@buflen,w,c
  9681  0027F6  5C0A               	subwf	PortWrite@i,w,c
  9682  0027F8  E3F0               	bnc	l67
  9683  0027FA                     l71:
  9684  0027FA  FFFF               	dw	65535	; assembler added errata NOP
  9685  0027FC  A2AC               	btfss	4012,1,c	;volatile
  9686  0027FE  D7FD               	goto	l71
  9687                           
  9688                           ;interrupts.c: 103: LATCbits.LATC5 = 0;
  9689  002800  9A8B               	bcf	3979,5,c	;volatile
  9690  002802  0012               	return		;funcret
  9691  002804  FFFF               	dw	65535	; errata NOP
  9692  002806                     __end_of_PortWrite:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           postinc0	equ	0xFEE
  9702                           wreg	equ	0xFE8
  9703                           indf1	equ	0xFE7
  9704                           postinc1	equ	0xFE6
  9705                           postdec1	equ	0xFE5
  9706                           fsr1h	equ	0xFE2
  9707                           fsr1l	equ	0xFE1
  9708                           indf2	equ	0xFDF
  9709                           postinc2	equ	0xFDE
  9710                           postdec2	equ	0xFDD
  9711                           plusw2	equ	0xFDB
  9712                           fsr2h	equ	0xFDA
  9713                           fsr2l	equ	0xFD9
  9714                           status	equ	0xFD8
  9715                           
  9716 ;; *************** function _ModbusCalcCRC *****************
  9717 ;; Defined at:
  9718 ;;		line 659 in file "ModbusRtu.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;  u8length        1    wreg     unsigned char 
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;  u8length        1   14[COMRAM] unsigned char 
  9723 ;;  j               1   16[COMRAM] unsigned char 
  9724 ;;  i               1   15[COMRAM] unsigned char 
  9725 ;;  temp            2   17[COMRAM] unsigned int 
  9726 ;;  flag            2   12[COMRAM] unsigned int 
  9727 ;;  temp2           2   10[COMRAM] unsigned int 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  2    6[COMRAM] unsigned short 
  9730 ;; Registers used:
  9731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/1
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9737 ;;      Params:         2       0       0       0       0       0       0
  9738 ;;      Locals:         9       0       0       0       0       0       0
  9739 ;;      Temps:          2       0       0       0       0       0       0
  9740 ;;      Totals:        13       0       0       0       0       0       0
  9741 ;;Total ram usage:       13 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    2
  9744 ;; This function calls:
  9745 ;;		Nothing
  9746 ;; This function is called by:
  9747 ;;		_ModbusSendTxBuffer
  9748 ;;		_ModbusValidateRequest
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text46
  9753  0022EA                     __ptext46:
  9754                           	opt stack 0
  9755  0022EA                     _ModbusCalcCRC:
  9756                           	opt stack 26
  9757                           
  9758                           ;incstack = 0
  9759  0022EA  FFFF               	dw	65535
  9760                           
  9761                           ;ModbusCalcCRC@u8length stored from wreg
  9762  0022EC  6E0F               	movwf	ModbusCalcCRC@u8length,c
  9763                           
  9764                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
  9765                           ;ModbusRtu.c: 662: temp = 0xFFFF;
  9766  0022EE  6812               	setf	ModbusCalcCRC@temp,c
  9767  0022F0  6813               	setf	ModbusCalcCRC@temp+1,c
  9768                           
  9769                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
  9770  0022F2  6A10               	clrf	ModbusCalcCRC@i,c
  9771  0022F4  D01E               	goto	l3376
  9772  0022F6                     l3354:
  9773                           
  9774                           ;ModbusRtu.c: 664: {
  9775                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
  9776  0022F6  0E00               	movlw	low __au8Buffer
  9777  0022F8  2410               	addwf	ModbusCalcCRC@i,w,c
  9778  0022FA  6ED9               	movwf	fsr2l,c
  9779  0022FC  6ADA               	clrf	fsr2h,c
  9780  0022FE  0E01               	movlw	high __au8Buffer
  9781  002300  22DA               	addwfc	fsr2h,f,c
  9782  002302  50DF               	movf	indf2,w,c
  9783  002304  1A12               	xorwf	ModbusCalcCRC@temp,f,c
  9784                           
  9785                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
  9786  002306  0E01               	movlw	1
  9787  002308  6E11               	movwf	ModbusCalcCRC@j,c
  9788  00230A                     l3362:
  9789  00230A  FFFF               	dw	65535	; assembler added errata NOP
  9790                           
  9791                           ;ModbusRtu.c: 667: {
  9792                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
  9793  00230C  0E01               	movlw	1
  9794  00230E  1412               	andwf	ModbusCalcCRC@temp,w,c
  9795  002310  6E0D               	movwf	ModbusCalcCRC@flag,c
  9796  002312  6A0E               	clrf	ModbusCalcCRC@flag+1,c
  9797                           
  9798                           ;ModbusRtu.c: 669: temp >>= 1;
  9799  002314  90D8               	bcf	status,0,c
  9800  002316  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
  9801  002318  3212               	rrcf	ModbusCalcCRC@temp,f,c
  9802                           
  9803                           ;ModbusRtu.c: 670: if (flag)
  9804  00231A  500D               	movf	ModbusCalcCRC@flag,w,c
  9805  00231C  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
  9806  00231E  E004               	bz	l3370
  9807                           
  9808                           ;ModbusRtu.c: 671: temp ^= 0xA001;
  9809  002320  0E01               	movlw	1
  9810  002322  1A12               	xorwf	ModbusCalcCRC@temp,f,c
  9811  002324  0EA0               	movlw	160
  9812  002326  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
  9813  002328                     l3370:
  9814  002328  2A11               	incf	ModbusCalcCRC@j,f,c
  9815  00232A  0E08               	movlw	8
  9816  00232C  6411               	cpfsgt	ModbusCalcCRC@j,c
  9817  00232E  D7ED               	goto	l3362
  9818  002330  2A10               	incf	ModbusCalcCRC@i,f,c
  9819  002332                     l3376:
  9820  002332  FFFF               	dw	65535	; assembler added errata NOP
  9821  002334  500F               	movf	ModbusCalcCRC@u8length,w,c
  9822  002336  5C10               	subwf	ModbusCalcCRC@i,w,c
  9823  002338  E3DE               	bnc	l3354
  9824                           
  9825                           ;ModbusRtu.c: 672: }
  9826                           ;ModbusRtu.c: 673: }
  9827                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
  9828  00233A  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
  9829  00233E  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
  9830                           
  9831                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
  9832  002340  5012               	movf	ModbusCalcCRC@temp,w,c
  9833  002342  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
  9834  002344  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
  9835  002346  500B               	movf	ModbusCalcCRC@temp2,w,c
  9836  002348  1009               	iorwf	??_ModbusCalcCRC,w,c
  9837  00234A  6E12               	movwf	ModbusCalcCRC@temp,c
  9838  00234C  500C               	movf	ModbusCalcCRC@temp2+1,w,c
  9839  00234E  100A               	iorwf	??_ModbusCalcCRC+1,w,c
  9840  002350  6E13               	movwf	ModbusCalcCRC@temp+1,c
  9841                           
  9842                           ;ModbusRtu.c: 680: return temp;
  9843  002352  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
  9844  002356  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
  9845  00235A  0012               	return		;funcret
  9846  00235C  FFFF               	dw	65535	; errata NOP
  9847  00235E                     __end_of_ModbusCalcCRC:
  9848                           	opt stack 0
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           intcon	equ	0xFF2
  9856                           postinc0	equ	0xFEE
  9857                           wreg	equ	0xFE8
  9858                           indf1	equ	0xFE7
  9859                           postinc1	equ	0xFE6
  9860                           postdec1	equ	0xFE5
  9861                           fsr1h	equ	0xFE2
  9862                           fsr1l	equ	0xFE1
  9863                           indf2	equ	0xFDF
  9864                           postinc2	equ	0xFDE
  9865                           postdec2	equ	0xFDD
  9866                           plusw2	equ	0xFDB
  9867                           fsr2h	equ	0xFDA
  9868                           fsr2l	equ	0xFD9
  9869                           status	equ	0xFD8
  9870                           
  9871 ;; *************** function _ModbusGetRxBuffer *****************
  9872 ;; Defined at:
  9873 ;;		line 509 in file "ModbusRtu.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;		None
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  1    wreg      unsigned char 
  9880 ;; Registers used:
  9881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : F/0
  9884 ;;		On exit  : F/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9887 ;;      Params:         0       0       0       0       0       0       0
  9888 ;;      Locals:         1       0       0       0       0       0       0
  9889 ;;      Temps:          1       0       0       0       0       0       0
  9890 ;;      Totals:         2       0       0       0       0       0       0
  9891 ;;Total ram usage:        2 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    3
  9894 ;; This function calls:
  9895 ;;		_PortAvailable
  9896 ;;		_PortRead
  9897 ;; This function is called by:
  9898 ;;		_ModbusPoll
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           	psect	text47
  9903  002744                     __ptext47:
  9904                           	opt stack 0
  9905  002744                     _ModbusGetRxBuffer:
  9906                           	opt stack 26
  9907                           
  9908                           ;incstack = 0
  9909  002744  FFFF               	dw	65535
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
  9913  002746  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
  9914                           
  9915                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
  9916  002748  6A70               	clrf	__u8BufferSize,c
  9917                           
  9918                           ;ModbusRtu.c: 518: while (PortAvailable())
  9919  00274A  D011               	goto	l3670
  9920  00274C                     l3662:
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;ModbusRtu.c: 519: {
  9924                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
  9925  00274C  EC03  F014         	call	_PortRead	;wreg free
  9926  002750  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
  9927  002752  0E00               	movlw	low __au8Buffer
  9928  002754  2470               	addwf	__u8BufferSize,w,c
  9929  002756  6ED9               	movwf	fsr2l,c
  9930  002758  6ADA               	clrf	fsr2h,c
  9931  00275A  0E01               	movlw	high __au8Buffer
  9932  00275C  22DA               	addwfc	fsr2h,f,c
  9933  00275E  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;ModbusRtu.c: 522: _u8BufferSize++;
  9937  002762  2A70               	incf	__u8BufferSize,f,c
  9938                           
  9939                           ; BSR set to: 0
  9940                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
  9941  002764  0E8B               	movlw	139
  9942  002766  6470               	cpfsgt	__u8BufferSize,c
  9943  002768  D002               	goto	l3670
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
  9947  00276A  0E01               	movlw	1
  9948  00276C  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
  9949  00276E                     l3670:
  9950  00276E  FFFF               	dw	65535	; assembler added errata NOP
  9951                           
  9952                           ; BSR set to: 0
  9953  002770  EC01  F015         	call	_PortAvailable	;wreg free
  9954  002774  0900               	iorlw	0
  9955  002776  E1EA               	bnz	l3662
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;ModbusRtu.c: 530: {
  9959                           ;ModbusRtu.c: 531: _u16errCnt++;
  9960  002778  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
  9961  00277A  E002               	bz	l3678
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
  9965  00277C  0EFD               	movlw	253
  9966  00277E  D001               	goto	l676
  9967  002780                     l3678:
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;ModbusRtu.c: 533: }
  9971                           ;ModbusRtu.c: 534: return _u8BufferSize;
  9972  002780  5070               	movf	__u8BufferSize,w,c
  9973  002782                     l676:
  9974  002782  FFFF               	dw	65535	; assembler added errata NOP
  9975                           
  9976                           ; BSR set to: 0
  9977  002784  0012               	return		;funcret
  9978  002786  FFFF               	dw	65535	; errata NOP
  9979  002788                     __end_of_ModbusGetRxBuffer:
  9980                           	opt stack 0
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           postinc0	equ	0xFEE
  9989                           wreg	equ	0xFE8
  9990                           indf1	equ	0xFE7
  9991                           postinc1	equ	0xFE6
  9992                           postdec1	equ	0xFE5
  9993                           fsr1h	equ	0xFE2
  9994                           fsr1l	equ	0xFE1
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           plusw2	equ	0xFDB
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           
 10003 ;; *************** function _PortRead *****************
 10004 ;; Defined at:
 10005 ;;		line 57 in file "interrupts.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;		None
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  ret             1    6[COMRAM] unsigned char 
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      unsigned char 
 10012 ;; Registers used:
 10013 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10014 ;; Tracked objects:
 10015 ;;		On entry : F/0
 10016 ;;		On exit  : F/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10019 ;;      Params:         0       0       0       0       0       0       0
 10020 ;;      Locals:         1       0       0       0       0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0
 10022 ;;      Totals:         1       0       0       0       0       0       0
 10023 ;;Total ram usage:        1 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; Hardware stack levels required when called:    2
 10026 ;; This function calls:
 10027 ;;		Nothing
 10028 ;; This function is called by:
 10029 ;;		_ModbusGetRxBuffer
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           	psect	text48
 10034  002806                     __ptext48:
 10035                           	opt stack 0
 10036  002806                     _PortRead:
 10037                           	opt stack 26
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;incstack = 0
 10041  002806  FFFF               	dw	65535
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 10045  002808  9EF2               	bcf	intcon,7,c	;volatile
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;interrupts.c: 60: if(UartBufferLen > 0)
 10049  00280A  51C0               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10050  00280C  E012               	bz	l59
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;interrupts.c: 61: {
 10054                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 10055  00280E  0E00               	movlw	low _UartRingBuffer
 10056  002810  246F               	addwf	_UartBufferTail,w,c	;volatile
 10057  002812  6ED9               	movwf	fsr2l,c
 10058  002814  6ADA               	clrf	fsr2h,c
 10059  002816  0E02               	movlw	high _UartRingBuffer
 10060  002818  22DA               	addwfc	fsr2h,f,c
 10061  00281A  50DF               	movf	indf2,w,c
 10062  00281C  6E07               	movwf	PortRead@ret,c
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;interrupts.c: 64: UartBufferLen--;
 10066  00281E  07C0               	decf	_UartBufferLen& (0+255),f,b	;volatile
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 10070  002820  286F               	incf	_UartBufferTail,w,c
 10071  002822  E102               	bnz	l3400
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;interrupts.c: 66: UartBufferTail = 0;
 10075  002824  6A6F               	clrf	_UartBufferTail,c	;volatile
 10076  002826  D001               	goto	l3402
 10077  002828                     l3400:
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;interrupts.c: 67: else
 10081                           ;interrupts.c: 68: UartBufferTail++;
 10082  002828  2A6F               	incf	_UartBufferTail,f,c	;volatile
 10083  00282A                     l3402:
 10084  00282A  FFFF               	dw	65535	; assembler added errata NOP
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 10088  00282C  8EF2               	bsf	intcon,7,c	;volatile
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;interrupts.c: 70: return ret;
 10092  00282E  5007               	movf	PortRead@ret,w,c
 10093  002830  D002               	goto	l62
 10094  002832                     l59:
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;interrupts.c: 71: }
 10098                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 10099  002832  8EF2               	bsf	intcon,7,c	;volatile
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;interrupts.c: 73: return 0;
 10103  002834  0E00               	movlw	0
 10104  002836                     l62:
 10105  002836  FFFF               	dw	65535	; assembler added errata NOP
 10106                           
 10107                           ; BSR set to: 0
 10108  002838  0012               	return		;funcret
 10109  00283A  FFFF               	dw	65535	; errata NOP
 10110  00283C                     __end_of_PortRead:
 10111                           	opt stack 0
 10112                           tblptru	equ	0xFF8
 10113                           tblptrh	equ	0xFF7
 10114                           tblptrl	equ	0xFF6
 10115                           tablat	equ	0xFF5
 10116                           prodh	equ	0xFF4
 10117                           prodl	equ	0xFF3
 10118                           intcon	equ	0xFF2
 10119                           postinc0	equ	0xFEE
 10120                           wreg	equ	0xFE8
 10121                           indf1	equ	0xFE7
 10122                           postinc1	equ	0xFE6
 10123                           postdec1	equ	0xFE5
 10124                           fsr1h	equ	0xFE2
 10125                           fsr1l	equ	0xFE1
 10126                           indf2	equ	0xFDF
 10127                           postinc2	equ	0xFDE
 10128                           postdec2	equ	0xFDD
 10129                           plusw2	equ	0xFDB
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function _PortAvailable *****************
 10135 ;; Defined at:
 10136 ;;		line 52 in file "interrupts.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;		None
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;		None
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  1    wreg      unsigned char 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2
 10145 ;; Tracked objects:
 10146 ;;		On entry : F/0
 10147 ;;		On exit  : F/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10150 ;;      Params:         0       0       0       0       0       0       0
 10151 ;;      Locals:         0       0       0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0
 10153 ;;      Totals:         0       0       0       0       0       0       0
 10154 ;;Total ram usage:        0 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    2
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_ModbusPoll
 10161 ;;		_ModbusGetRxBuffer
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           	psect	text49
 10166  002A02                     __ptext49:
 10167                           	opt stack 0
 10168  002A02                     _PortAvailable:
 10169                           	opt stack 27
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;incstack = 0
 10173  002A02  FFFF               	dw	65535
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;interrupts.c: 54: return UartBufferLen;
 10177  002A04  51C0               	movf	_UartBufferLen& (0+255),w,b	;volatile
 10178                           
 10179                           ; BSR set to: 0
 10180  002A06  0012               	return		;funcret
 10181  002A08  FFFF               	dw	65535	; errata NOP
 10182  002A0A                     __end_of_PortAvailable:
 10183                           	opt stack 0
 10184                           tblptru	equ	0xFF8
 10185                           tblptrh	equ	0xFF7
 10186                           tblptrl	equ	0xFF6
 10187                           tablat	equ	0xFF5
 10188                           prodh	equ	0xFF4
 10189                           prodl	equ	0xFF3
 10190                           intcon	equ	0xFF2
 10191                           postinc0	equ	0xFEE
 10192                           wreg	equ	0xFE8
 10193                           indf1	equ	0xFE7
 10194                           postinc1	equ	0xFE6
 10195                           postdec1	equ	0xFE5
 10196                           fsr1h	equ	0xFE2
 10197                           fsr1l	equ	0xFE1
 10198                           indf2	equ	0xFDF
 10199                           postinc2	equ	0xFDE
 10200                           postdec2	equ	0xFDD
 10201                           plusw2	equ	0xFDB
 10202                           fsr2h	equ	0xFDA
 10203                           fsr2l	equ	0xFD9
 10204                           status	equ	0xFD8
 10205                           
 10206 ;; *************** function _ModbusBuildException *****************
 10207 ;; Defined at:
 10208 ;;		line 839 in file "ModbusRtu.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  u8exception     1    wreg     unsigned char 
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  u8exception     1    6[COMRAM] unsigned char 
 10213 ;;  u8func          1    7[COMRAM] unsigned char 
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      void 
 10216 ;; Registers used:
 10217 ;;		wreg, status,2, status,0
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/1
 10220 ;;		On exit  : F/1
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10223 ;;      Params:         0       0       0       0       0       0       0
 10224 ;;      Locals:         2       0       0       0       0       0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0
 10226 ;;      Totals:         2       0       0       0       0       0       0
 10227 ;;Total ram usage:        2 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    2
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_ModbusPoll
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           	psect	text50
 10238  002916                     __ptext50:
 10239                           	opt stack 0
 10240  002916                     _ModbusBuildException:
 10241                           	opt stack 27
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;incstack = 0
 10245  002916  FFFF               	dw	65535
 10246                           
 10247                           ;ModbusBuildException@u8exception stored from wreg
 10248  002918  6E07               	movwf	ModbusBuildException@u8exception,c
 10249                           
 10250                           ;ModbusRtu.c: 841: uint8_t u8func = _au8Buffer[ FUNC ];
 10251  00291A  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 10252                           
 10253                           ;ModbusRtu.c: 843: _au8Buffer[ ID ] = _u8id;
 10254  00291E  C0C5  F100         	movff	__u8id,__au8Buffer
 10255                           
 10256                           ;ModbusRtu.c: 844: _au8Buffer[ FUNC ] = u8func + 0x80;
 10257  002922  5008               	movf	ModbusBuildException@u8func,w,c
 10258  002924  0F80               	addlw	128
 10259  002926  0101               	movlb	1	; () banked
 10260  002928  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 10261                           
 10262                           ; BSR set to: 1
 10263                           ;ModbusRtu.c: 845: _au8Buffer[ 2 ] = u8exception;
 10264  00292A  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 10265                           
 10266                           ; BSR set to: 1
 10267                           ;ModbusRtu.c: 846: _u8BufferSize = EXCEPTION_SIZE;
 10268  00292E  0E03               	movlw	3
 10269  002930  6E70               	movwf	__u8BufferSize,c
 10270                           
 10271                           ; BSR set to: 1
 10272  002932  0C03               	retlw	3	;funcret
 10273  002934  FFFF               	dw	65535	; errata NOP
 10274  002936                     __end_of_ModbusBuildException:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           postinc0	equ	0xFEE
 10284                           wreg	equ	0xFE8
 10285                           indf1	equ	0xFE7
 10286                           postinc1	equ	0xFE6
 10287                           postdec1	equ	0xFE5
 10288                           fsr1h	equ	0xFE2
 10289                           fsr1l	equ	0xFE1
 10290                           indf2	equ	0xFDF
 10291                           postinc2	equ	0xFDE
 10292                           postdec2	equ	0xFDD
 10293                           plusw2	equ	0xFDB
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8
 10297                           
 10298 ;; *************** function _InitApp *****************
 10299 ;; Defined at:
 10300 ;;		line 66 in file "user.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  i               1    6[COMRAM] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      void 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10314 ;;      Params:         0       0       0       0       0       0       0
 10315 ;;      Locals:         1       0       0       0       0       0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0
 10317 ;;      Totals:         1       0       0       0       0       0       0
 10318 ;;Total ram usage:        1 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    3
 10321 ;; This function calls:
 10322 ;;		_InitUartBuffer
 10323 ;;		_PortBegin
 10324 ;; This function is called by:
 10325 ;;		_main
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           	psect	text51
 10330  0021E2                     __ptext51:
 10331                           	opt stack 0
 10332  0021E2                     _InitApp:
 10333                           	opt stack 27
 10334                           
 10335                           ; BSR set to: 1
 10336                           ;incstack = 0
 10337  0021E2  FFFF               	dw	65535
 10338                           
 10339                           ;user.c: 77: INTCONbits.PEIE = 1;
 10340  0021E4  8CF2               	bsf	intcon,6,c	;volatile
 10341                           
 10342                           ;user.c: 78: (INTCONbits.GIE = 1);
 10343  0021E6  8EF2               	bsf	intcon,7,c	;volatile
 10344                           
 10345                           ;user.c: 79: RCONbits.IPEN = 1;
 10346  0021E8  8ED0               	bsf	4048,7,c	;volatile
 10347                           
 10348                           ;user.c: 84: T1CONbits.RD16 = 1;
 10349  0021EA  8ECD               	bsf	4045,7,c	;volatile
 10350                           
 10351                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 10352  0021EC  94CD               	bcf	4045,2,c	;volatile
 10353                           
 10354                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 10355  0021EE  92CD               	bcf	4045,1,c	;volatile
 10356                           
 10357                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 10358  0021F0  0ECF               	movlw	-49
 10359  0021F2  16CD               	andwf	4045,f,c	;volatile
 10360                           
 10361                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 10362  0021F4  809D               	bsf	3997,0,c	;volatile
 10363                           
 10364                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 10365  0021F6  809F               	bsf	3999,0,c	;volatile
 10366                           
 10367                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 10368  0021F8  0EF6               	movlw	246
 10369  0021FA  6ECF               	movwf	4047,c	;volatile
 10370  0021FC  0E3C               	movlw	60
 10371  0021FE  6ECE               	movwf	4046,c	;volatile
 10372                           
 10373                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 10374  002200  909E               	bcf	3998,0,c	;volatile
 10375                           
 10376                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 10377  002202  80CD               	bsf	4045,0,c	;volatile
 10378                           
 10379                           ;user.c: 102: T0CONbits.T08BIT = 0;
 10380  002204  9CD5               	bcf	4053,6,c	;volatile
 10381                           
 10382                           ;user.c: 103: T0CONbits.T0CS = 0;
 10383  002206  9AD5               	bcf	4053,5,c	;volatile
 10384                           
 10385                           ;user.c: 105: T0CONbits.PSA = 0;
 10386  002208  96D5               	bcf	4053,3,c	;volatile
 10387                           
 10388                           ;user.c: 116: T0CONbits.T0PS = 7;
 10389  00220A  0E07               	movlw	7
 10390  00220C  12D5               	iorwf	4053,f,c	;volatile
 10391                           
 10392                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 10393  00220E  8AF2               	bsf	intcon,5,c	;volatile
 10394                           
 10395                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 10396  002210  84F1               	bsf	intcon2,2,c	;volatile
 10397                           
 10398                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10399  002212  0E1B               	movlw	27
 10400  002214  6ED7               	movwf	4055,c	;volatile
 10401  002216  0E1F               	movlw	31
 10402  002218  6ED6               	movwf	4054,c	;volatile
 10403                           
 10404                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 10405  00221A  94F2               	bcf	intcon,2,c	;volatile
 10406                           
 10407                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 10408  00221C  8ED5               	bsf	4053,7,c	;volatile
 10409                           
 10410                           ;user.c: 132: InitUartBuffer();
 10411  00221E  ECF6  F014         	call	_InitUartBuffer	;wreg free
 10412                           
 10413                           ;user.c: 134: PortBegin();
 10414  002222  ECB8  F014         	call	_PortBegin	;wreg free
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;user.c: 135: PIE1bits.RCIE = 1;
 10418  002226  8A9D               	bsf	3997,5,c	;volatile
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;user.c: 137: IPR1bits.RCIP = 0;
 10422  002228  9A9F               	bcf	3999,5,c	;volatile
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 10426  00222A  6A07               	clrf	InitApp@i,c
 10427  00222C                     l4440:
 10428  00222C  FFFF               	dw	65535	; assembler added errata NOP
 10429                           
 10430                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 10431  00222E  5007               	movf	InitApp@i,w,c
 10432  002230  0D02               	mullw	2
 10433  002232  0EAA               	movlw	low __MODBUSInputRegs
 10434  002234  24F3               	addwf	prodl,w,c
 10435  002236  6ED9               	movwf	fsr2l,c
 10436  002238  0E01               	movlw	high __MODBUSInputRegs
 10437  00223A  20F4               	addwfc	prodh,w,c
 10438  00223C  6EDA               	movwf	fsr2h,c
 10439  00223E  6ADE               	clrf	postinc2,c
 10440  002240  6ADD               	clrf	postdec2,c
 10441  002242  2A07               	incf	InitApp@i,f,c
 10442  002244  0E0E               	movlw	14
 10443  002246  6407               	cpfsgt	InitApp@i,c
 10444  002248  D7F1               	goto	l4440
 10445                           
 10446                           ;user.c: 148: TRISB = 0;
 10447  00224A  6A93               	clrf	3987,c	;volatile
 10448                           
 10449                           ;user.c: 151: LATAbits.LATA0 = 0;
 10450  00224C  9089               	bcf	3977,0,c	;volatile
 10451                           
 10452                           ;user.c: 152: LATAbits.LATA1 = 0;
 10453  00224E  9289               	bcf	3977,1,c	;volatile
 10454                           
 10455                           ;user.c: 153: LATAbits.LATA2 = 0;
 10456  002250  9489               	bcf	3977,2,c	;volatile
 10457                           
 10458                           ;user.c: 154: LATAbits.LATA3 = 0;
 10459  002252  9689               	bcf	3977,3,c	;volatile
 10460                           
 10461                           ;user.c: 155: TRISAbits.RA0 = 0;
 10462  002254  9092               	bcf	3986,0,c	;volatile
 10463                           
 10464                           ;user.c: 156: TRISAbits.RA1 = 0;
 10465  002256  9292               	bcf	3986,1,c	;volatile
 10466                           
 10467                           ;user.c: 157: TRISAbits.RA2 = 0;
 10468  002258  9492               	bcf	3986,2,c	;volatile
 10469                           
 10470                           ;user.c: 158: TRISAbits.RA3 = 0;
 10471  00225A  9692               	bcf	3986,3,c	;volatile
 10472                           
 10473                           ;user.c: 160: TRISCbits.RC3 = 1;
 10474  00225C  8694               	bsf	3988,3,c	;volatile
 10475                           
 10476                           ;user.c: 161: TRISCbits.RC1 = 1;
 10477  00225E  8294               	bsf	3988,1,c	;volatile
 10478                           
 10479                           ;user.c: 162: TRISCbits.RC0 = 0;
 10480  002260  9094               	bcf	3988,0,c	;volatile
 10481                           
 10482                           ;user.c: 164: LATCbits.LATC2 = 0;
 10483  002262  948B               	bcf	3979,2,c	;volatile
 10484  002264  0012               	return		;funcret
 10485  002266  FFFF               	dw	65535	; errata NOP
 10486  002268                     __end_of_InitApp:
 10487                           	opt stack 0
 10488                           tblptru	equ	0xFF8
 10489                           tblptrh	equ	0xFF7
 10490                           tblptrl	equ	0xFF6
 10491                           tablat	equ	0xFF5
 10492                           prodh	equ	0xFF4
 10493                           prodl	equ	0xFF3
 10494                           intcon	equ	0xFF2
 10495                           intcon2	equ	0xFF1
 10496                           postinc0	equ	0xFEE
 10497                           wreg	equ	0xFE8
 10498                           indf1	equ	0xFE7
 10499                           postinc1	equ	0xFE6
 10500                           postdec1	equ	0xFE5
 10501                           fsr1h	equ	0xFE2
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           plusw2	equ	0xFDB
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _PortBegin *****************
 10512 ;; Defined at:
 10513 ;;		line 48 in file "user.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2
 10522 ;; Tracked objects:
 10523 ;;		On entry : F/0
 10524 ;;		On exit  : F/0
 10525 ;;		Unchanged: F/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10527 ;;      Params:         0       0       0       0       0       0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0
 10530 ;;      Totals:         0       0       0       0       0       0       0
 10531 ;;Total ram usage:        0 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    2
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_InitApp
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           	psect	text52
 10542  002970                     __ptext52:
 10543                           	opt stack 0
 10544  002970                     _PortBegin:
 10545                           	opt stack 27
 10546                           
 10547                           ;incstack = 0
 10548  002970  FFFF               	dw	65535
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;user.c: 50: TXSTA = 0;
 10552  002972  6AAC               	clrf	4012,c	;volatile
 10553                           
 10554                           ;user.c: 51: TXSTAbits.TXEN = 1;
 10555  002974  8AAC               	bsf	4012,5,c	;volatile
 10556                           
 10557                           ;user.c: 52: TXSTAbits.BRGH = 1;
 10558  002976  84AC               	bsf	4012,2,c	;volatile
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 10562  002978  0E40               	movlw	64
 10563  00297A  6EAF               	movwf	4015,c	;volatile
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;user.c: 55: RCSTA = 0;
 10567  00297C  6AAB               	clrf	4011,c	;volatile
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;user.c: 56: RCSTAbits.SPEN = 1;
 10571  00297E  8EAB               	bsf	4011,7,c	;volatile
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;user.c: 57: RCSTAbits.CREN = 1;
 10575  002980  88AB               	bsf	4011,4,c	;volatile
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;user.c: 59: TRISCbits.RC5 = 0;
 10579  002982  9A94               	bcf	3988,5,c	;volatile
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;user.c: 60: LATCbits.LATC5 = 0;
 10583  002984  9A8B               	bcf	3979,5,c	;volatile
 10584                           
 10585                           ; BSR set to: 0
 10586  002986  0012               	return		;funcret
 10587  002988  FFFF               	dw	65535	; errata NOP
 10588  00298A                     __end_of_PortBegin:
 10589                           	opt stack 0
 10590                           tblptru	equ	0xFF8
 10591                           tblptrh	equ	0xFF7
 10592                           tblptrl	equ	0xFF6
 10593                           tablat	equ	0xFF5
 10594                           prodh	equ	0xFF4
 10595                           prodl	equ	0xFF3
 10596                           intcon	equ	0xFF2
 10597                           intcon2	equ	0xFF1
 10598                           postinc0	equ	0xFEE
 10599                           wreg	equ	0xFE8
 10600                           indf1	equ	0xFE7
 10601                           postinc1	equ	0xFE6
 10602                           postdec1	equ	0xFE5
 10603                           fsr1h	equ	0xFE2
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           postdec2	equ	0xFDD
 10608                           plusw2	equ	0xFDB
 10609                           fsr2h	equ	0xFDA
 10610                           fsr2l	equ	0xFD9
 10611                           status	equ	0xFD8
 10612                           
 10613 ;; *************** function _InitUartBuffer *****************
 10614 ;; Defined at:
 10615 ;;		line 43 in file "interrupts.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      void 
 10622 ;; Registers used:
 10623 ;;		None
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : F/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10629 ;;      Params:         0       0       0       0       0       0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    2
 10636 ;; This function calls:
 10637 ;;		Nothing
 10638 ;; This function is called by:
 10639 ;;		_InitApp
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           	psect	text53
 10644  0029EC                     __ptext53:
 10645                           	opt stack 0
 10646  0029EC                     _InitUartBuffer:
 10647                           	opt stack 27
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;incstack = 0
 10651  0029EC  FFFF               	dw	65535
 10652                           
 10653                           ;interrupts.c: 45: UartBufferHead = 0;
 10654  0029EE  0100               	movlb	0	; () banked
 10655  0029F0  6BBF               	clrf	_UartBufferHead& (0+255),b
 10656                           
 10657                           ;interrupts.c: 46: UartBufferTail = 0;
 10658  0029F2  6A6F               	clrf	_UartBufferTail,c	;volatile
 10659                           
 10660                           ;interrupts.c: 47: UartBufferLen = 0;
 10661  0029F4  6BC0               	clrf	_UartBufferLen& (0+255),b	;volatile
 10662                           
 10663                           ; BSR set to: 0
 10664  0029F6  0012               	return		;funcret
 10665  0029F8  FFFF               	dw	65535	; errata NOP
 10666  0029FA                     __end_of_InitUartBuffer:
 10667                           	opt stack 0
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           intcon2	equ	0xFF1
 10676                           postinc0	equ	0xFEE
 10677                           wreg	equ	0xFE8
 10678                           indf1	equ	0xFE7
 10679                           postinc1	equ	0xFE6
 10680                           postdec1	equ	0xFE5
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           plusw2	equ	0xFDB
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           
 10691 ;; *************** function _ConfigureOscillator *****************
 10692 ;; Defined at:
 10693 ;;		line 50 in file "system.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;		None
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  1    wreg      void 
 10700 ;; Registers used:
 10701 ;;		None
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10707 ;;      Params:         0       0       0       0       0       0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0
 10710 ;;      Totals:         0       0       0       0       0       0       0
 10711 ;;Total ram usage:        0 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; Hardware stack levels required when called:    2
 10714 ;; This function calls:
 10715 ;;		Nothing
 10716 ;; This function is called by:
 10717 ;;		_main
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text54
 10722  002A0A                     __ptext54:
 10723                           	opt stack 0
 10724  002A0A                     _ConfigureOscillator:
 10725                           	opt stack 28
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;incstack = 0
 10729  002A0A  FFFF               	dw	65535
 10730  002A0C  0012               	return		;funcret
 10731  002A0E  FFFF               	dw	65535	; errata NOP
 10732  002A10                     __end_of_ConfigureOscillator:
 10733                           	opt stack 0
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           intcon2	equ	0xFF1
 10742                           postinc0	equ	0xFEE
 10743                           wreg	equ	0xFE8
 10744                           indf1	equ	0xFE7
 10745                           postinc1	equ	0xFE6
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           plusw2	equ	0xFDB
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _AddSecond *****************
 10758 ;; Defined at:
 10759 ;;		line 179 in file "user.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;		None
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;		None
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : F/0
 10770 ;;		On exit  : F/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10773 ;;      Params:         0       0       0       0       0       0       0
 10774 ;;      Locals:         0       0       0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0
 10776 ;;      Totals:         0       0       0       0       0       0       0
 10777 ;;Total ram usage:        0 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    2
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_main
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text55
 10788  0029DC                     __ptext55:
 10789                           	opt stack 0
 10790  0029DC                     _AddSecond:
 10791                           	opt stack 28
 10792                           
 10793                           ;incstack = 0
 10794  0029DC  FFFF               	dw	65535
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;user.c: 181: currentTime++;
 10798  0029DE  2BCE               	incf	_currentTime& (0+255),f,b
 10799  0029E0  0E00               	movlw	0
 10800  0029E2  23CF               	addwfc	(_currentTime+1)& (0+255),f,b
 10801  0029E4  23D0               	addwfc	(_currentTime+2)& (0+255),f,b
 10802  0029E6  23D1               	addwfc	(_currentTime+3)& (0+255),f,b
 10803                           
 10804                           ; BSR set to: 0
 10805  0029E8  0C00               	retlw	0	;funcret
 10806  0029EA  FFFF               	dw	65535	; errata NOP
 10807  0029EC                     __end_of_AddSecond:
 10808                           	opt stack 0
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           postinc0	equ	0xFEE
 10818                           wreg	equ	0xFE8
 10819                           indf1	equ	0xFE7
 10820                           postinc1	equ	0xFE6
 10821                           postdec1	equ	0xFE5
 10822                           fsr1h	equ	0xFE2
 10823                           fsr1l	equ	0xFE1
 10824                           indf2	equ	0xFDF
 10825                           postinc2	equ	0xFDE
 10826                           postdec2	equ	0xFDD
 10827                           plusw2	equ	0xFDB
 10828                           fsr2h	equ	0xFDA
 10829                           fsr2l	equ	0xFD9
 10830                           status	equ	0xFD8
 10831                           
 10832 ;; *************** function _low_isr *****************
 10833 ;; Defined at:
 10834 ;;		line 172 in file "interrupts.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;  c               1    5[COMRAM] unsigned char 
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      void 
 10841 ;; Registers used:
 10842 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10848 ;;      Params:         0       0       0       0       0       0       0
 10849 ;;      Locals:         1       0       0       0       0       0       0
 10850 ;;      Temps:          5       0       0       0       0       0       0
 10851 ;;      Totals:         6       0       0       0       0       0       0
 10852 ;;Total ram usage:        6 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    1
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		Interrupt level 1
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	intcodelo
 10863  000018                     __pintcodelo:
 10864                           	opt stack 0
 10865  000018                     _low_isr:
 10866                           	opt stack 0
 10867  000018  FFFF               	dw	65535	; assembler added errata NOP
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;incstack = 0
 10871  00001A  8077               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10872  00001C  FFFF               	dw	65535	; errata NOP
 10873  00001E  CFD8 F001          	movff	status,??_low_isr
 10874  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 10875  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 10876  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 10877  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 10878                           
 10879                           ;interrupts.c: 186: if (PIR1bits.RCIF && PIE1bits.RCIE)
 10880  000032  BA9E               	btfsc	3998,5,c	;volatile
 10881  000034  AA9D               	btfss	3997,5,c	;volatile
 10882  000036  D016               	goto	i1l90
 10883  000038                     i1l91:
 10884  000038  FFFF               	dw	65535	; assembler added errata NOP
 10885  00003A  AA9E               	btfss	3998,5,c	;volatile
 10886  00003C  D7FD               	goto	i1l91
 10887                           
 10888                           ;interrupts.c: 200: uint8_t c = RCREG;
 10889  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 10890                           
 10891                           ;interrupts.c: 203: UartRingBuffer[UartBufferHead] = c;
 10892  000042  0E00               	movlw	low _UartRingBuffer
 10893  000044  0100               	movlb	0	; () banked
 10894  000046  25BF               	addwf	_UartBufferHead& (0+255),w,b
 10895  000048  6ED9               	movwf	fsr2l,c
 10896  00004A  6ADA               	clrf	fsr2h,c
 10897  00004C  0E02               	movlw	high _UartRingBuffer
 10898  00004E  22DA               	addwfc	fsr2h,f,c
 10899  000050  C006  FFDF         	movff	low_isr@c,indf2
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;interrupts.c: 204: UartBufferLen++;
 10903  000054  2BC0               	incf	_UartBufferLen& (0+255),f,b	;volatile
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;interrupts.c: 205: if(UartBufferHead == 256u - 1)
 10907  000056  29BF               	incf	_UartBufferHead& (0+255),w,b
 10908  000058  E102               	bnz	i1l4740
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;interrupts.c: 206: UartBufferHead = 0;
 10912  00005A  6BBF               	clrf	_UartBufferHead& (0+255),b
 10913  00005C  D001               	goto	i1l4742
 10914  00005E                     i1l4740:
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;interrupts.c: 207: else
 10918                           ;interrupts.c: 208: UartBufferHead++;
 10919  00005E  2BBF               	incf	_UartBufferHead& (0+255),f,b
 10920  000060                     i1l4742:
 10921  000060  FFFF               	dw	65535	; assembler added errata NOP
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;interrupts.c: 211: PIR1bits.RCIF = 0;
 10925  000062  9A9E               	bcf	3998,5,c	;volatile
 10926  000064                     i1l90:
 10927  000064  FFFF               	dw	65535	; assembler added errata NOP
 10928  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 10929  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 10930  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 10931  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 10932  000076  C001  FFD8         	movff	??_low_isr,status
 10933  00007A  9077               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10934  00007C  0010               	retfie	
 10935  00007E  FFFF               	dw	65535	; errata NOP
 10936  000080                     __end_of_low_isr:
 10937                           	opt stack 0
 10938                           tblptru	equ	0xFF8
 10939                           tblptrh	equ	0xFF7
 10940                           tblptrl	equ	0xFF6
 10941                           tablat	equ	0xFF5
 10942                           prodh	equ	0xFF4
 10943                           prodl	equ	0xFF3
 10944                           intcon	equ	0xFF2
 10945                           intcon2	equ	0xFF1
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           indf1	equ	0xFE7
 10949                           postinc1	equ	0xFE6
 10950                           postdec1	equ	0xFE5
 10951                           fsr1h	equ	0xFE2
 10952                           fsr1l	equ	0xFE1
 10953                           bsr	equ	0xFE0
 10954                           indf2	equ	0xFDF
 10955                           postinc2	equ	0xFDE
 10956                           postdec2	equ	0xFDD
 10957                           plusw2	equ	0xFDB
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962 ;; *************** function _high_isr *****************
 10963 ;; Defined at:
 10964 ;;		line 113 in file "interrupts.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  1    wreg      void 
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10978 ;;      Params:         0       0       0       0       0       0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0
 10980 ;;      Temps:          0       0       0       0       0       0       0
 10981 ;;      Totals:         0       0       0       0       0       0       0
 10982 ;;Total ram usage:        0 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; This function calls:
 10985 ;;		Nothing
 10986 ;; This function is called by:
 10987 ;;		Interrupt level 2
 10988 ;; This function uses a non-reentrant model
 10989 ;;
 10990                           
 10991                           	psect	intcode
 10992  000008                     __pintcode:
 10993                           	opt stack 0
 10994  000008                     _high_isr:
 10995                           	opt stack 0
 10996  000008  FFFF               	dw	65535	; assembler added errata NOP
 10997                           
 10998                           ;incstack = 0
 10999  00000A  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11000  00000C  FFFF               	dw	65535	; errata NOP
 11001  00000E  EF70  F012         	goto	int_func
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           postinc0	equ	0xFEE
 11011                           wreg	equ	0xFE8
 11012                           indf1	equ	0xFE7
 11013                           postinc1	equ	0xFE6
 11014                           postdec1	equ	0xFE5
 11015                           fsr1h	equ	0xFE2
 11016                           fsr1l	equ	0xFE1
 11017                           bsr	equ	0xFE0
 11018                           indf2	equ	0xFDF
 11019                           postinc2	equ	0xFDE
 11020                           postdec2	equ	0xFDD
 11021                           plusw2	equ	0xFDB
 11022                           fsr2h	equ	0xFDA
 11023                           fsr2l	equ	0xFD9
 11024                           status	equ	0xFD8
 11025                           
 11026                           	psect	intcode_body
 11027  0024E0                     __pintcode_body:
 11028                           	opt stack 22
 11029  0024E0                     int_func:
 11030                           	opt stack 22
 11031  0024E0  FFFF               	dw	65535	; errata NOP
 11032                           
 11033                           ;interrupts.c: 134: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 11034  0024E2  B09E               	btfsc	3998,0,c	;volatile
 11035  0024E4  A09D               	btfss	3997,0,c	;volatile
 11036  0024E6  D00C               	goto	i2l77
 11037                           
 11038                           ;interrupts.c: 135: {
 11039                           ;interrupts.c: 136: PIR1bits.TMR1IF = 0;
 11040  0024E8  909E               	bcf	3998,0,c	;volatile
 11041                           
 11042                           ;interrupts.c: 137: millisecondsFromStart++;
 11043  0024EA  0100               	movlb	0	; () banked
 11044  0024EC  2BAC               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 11045  0024EE  0E00               	movlw	0
 11046  0024F0  23AD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 11047  0024F2  23AE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 11048  0024F4  23AF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;interrupts.c: 138: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 11052  0024F6  0EF6               	movlw	246
 11053  0024F8  6ECF               	movwf	4047,c	;volatile
 11054                           
 11055                           ; BSR set to: 0
 11056  0024FA  0E3C               	movlw	60
 11057  0024FC  6ECE               	movwf	4046,c	;volatile
 11058  0024FE  D018               	goto	i2l78
 11059  002500                     i2l77:
 11060  002500  FFFF               	dw	65535	; assembler added errata NOP
 11061                           
 11062                           ;interrupts.c: 140: }
 11063                           ;interrupts.c: 142: if(INTCONbits.TMR0IF)
 11064  002502  A4F2               	btfss	intcon,2,c	;volatile
 11065  002504  D015               	goto	i2l78
 11066                           
 11067                           ;interrupts.c: 143: {
 11068                           ;interrupts.c: 144: INTCONbits.TMR0IF = 0;
 11069  002506  94F2               	bcf	intcon,2,c	;volatile
 11070                           
 11071                           ;interrupts.c: 145: _6sCounter++;
 11072  002508  0100               	movlb	0	; () banked
 11073  00250A  2BC1               	incf	__6sCounter& (0+255),f,b	;volatile
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;interrupts.c: 146: if(_6sCounter == 10)
 11077  00250C  0E0A               	movlw	10
 11078  00250E  19C1               	xorwf	__6sCounter& (0+255),w,b	;volatile
 11079  002510  E10B               	bnz	i2l4720
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;interrupts.c: 147: {
 11083                           ;interrupts.c: 148: _6sCounter = 0;
 11084  002512  6BC1               	clrf	__6sCounter& (0+255),b	;volatile
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;interrupts.c: 149: globalMinutes++;
 11088  002514  2A73               	incf	_globalMinutes,f,c	;volatile
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;interrupts.c: 150: if(globalMinutes == 60)
 11092  002516  0E3C               	movlw	60
 11093  002518  1873               	xorwf	_globalMinutes,w,c	;volatile
 11094  00251A  E106               	bnz	i2l4720
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;interrupts.c: 151: {
 11098                           ;interrupts.c: 152: globalMinutes = 0;
 11099  00251C  6A73               	clrf	_globalMinutes,c	;volatile
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;interrupts.c: 153: globalHours++;
 11103  00251E  2A76               	incf	_globalHours,f,c	;volatile
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;interrupts.c: 154: if(globalHours == 24)
 11107  002520  0E18               	movlw	24
 11108  002522  1876               	xorwf	_globalHours,w,c	;volatile
 11109  002524  E101               	bnz	i2l4720
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;interrupts.c: 155: {
 11113                           ;interrupts.c: 156: globalHours = 0;
 11114  002526  6A76               	clrf	_globalHours,c	;volatile
 11115  002528                     i2l4720:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;interrupts.c: 157: }
 11119                           ;interrupts.c: 158: }
 11120                           ;interrupts.c: 159: }
 11121                           ;interrupts.c: 160: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 11122  002528  0E1B               	movlw	27
 11123  00252A  6ED7               	movwf	4055,c	;volatile
 11124  00252C  0E1F               	movlw	31
 11125  00252E  6ED6               	movwf	4054,c	;volatile
 11126  002530                     i2l78:
 11127  002530  FFFF               	dw	65535	; assembler added errata NOP
 11128  002532  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11129  002534  0011               	retfie		f
 11130  002536  FFFF               	dw	65535	; errata NOP
 11131  002538                     __end_of_high_isr:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           postinc0	equ	0xFEE
 11142                           wreg	equ	0xFE8
 11143                           indf1	equ	0xFE7
 11144                           postinc1	equ	0xFE6
 11145                           postdec1	equ	0xFE5
 11146                           fsr1h	equ	0xFE2
 11147                           fsr1l	equ	0xFE1
 11148                           bsr	equ	0xFE0
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           postdec2	equ	0xFDD
 11152                           plusw2	equ	0xFDB
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           tblptru	equ	0xFF8
 11157                           tblptrh	equ	0xFF7
 11158                           tblptrl	equ	0xFF6
 11159                           tablat	equ	0xFF5
 11160                           prodh	equ	0xFF4
 11161                           prodl	equ	0xFF3
 11162                           intcon	equ	0xFF2
 11163                           intcon2	equ	0xFF1
 11164                           postinc0	equ	0xFEE
 11165                           wreg	equ	0xFE8
 11166                           indf1	equ	0xFE7
 11167                           postinc1	equ	0xFE6
 11168                           postdec1	equ	0xFE5
 11169                           fsr1h	equ	0xFE2
 11170                           fsr1l	equ	0xFE1
 11171                           bsr	equ	0xFE0
 11172                           indf2	equ	0xFDF
 11173                           postinc2	equ	0xFDE
 11174                           postdec2	equ	0xFDD
 11175                           plusw2	equ	0xFDB
 11176                           fsr2h	equ	0xFDA
 11177                           fsr2l	equ	0xFD9
 11178                           status	equ	0xFD8
 11179                           
 11180                           	psect	rparam
 11181  0000                     tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           intcon2	equ	0xFF1
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           indf1	equ	0xFE7
 11192                           postinc1	equ	0xFE6
 11193                           postdec1	equ	0xFE5
 11194                           fsr1h	equ	0xFE2
 11195                           fsr1l	equ	0xFE1
 11196                           bsr	equ	0xFE0
 11197                           indf2	equ	0xFDF
 11198                           postinc2	equ	0xFDE
 11199                           postdec2	equ	0xFDD
 11200                           plusw2	equ	0xFDB
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205                           	psect	temp
 11206  000077                     btemp:
 11207                           	opt stack 0
 11208  000077                     	ds	1
 11209  0000                     int$flags	set	btemp
 11210                           tblptru	equ	0xFF8
 11211                           tblptrh	equ	0xFF7
 11212                           tblptrl	equ	0xFF6
 11213                           tablat	equ	0xFF5
 11214                           prodh	equ	0xFF4
 11215                           prodl	equ	0xFF3
 11216                           intcon	equ	0xFF2
 11217                           intcon2	equ	0xFF1
 11218                           postinc0	equ	0xFEE
 11219                           wreg	equ	0xFE8
 11220                           indf1	equ	0xFE7
 11221                           postinc1	equ	0xFE6
 11222                           postdec1	equ	0xFE5
 11223                           fsr1h	equ	0xFE2
 11224                           fsr1l	equ	0xFE1
 11225                           bsr	equ	0xFE0
 11226                           indf2	equ	0xFDF
 11227                           postinc2	equ	0xFDE
 11228                           postdec2	equ	0xFDD
 11229                           plusw2	equ	0xFDB
 11230                           fsr2h	equ	0xFDA
 11231                           fsr2l	equ	0xFD9
 11232                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    12
    Data        7
    BSS         546
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     118
    BANK0           128     23     112
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_30(CODE[11]), STR_28(CODE[4]), STR_26(CODE[20]), STR_24(CODE[16]), 
		 -> STR_22(CODE[5]), STR_20(CODE[9]), STR_18(CODE[6]), STR_16(CODE[11]), 
		 -> STR_14(CODE[4]), STR_12(CODE[20]), STR_10(CODE[16]), STR_8(CODE[5]), 
		 -> STR_6(CODE[9]), STR_4(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> SetTimeCommand@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeCommand
    _SetTimeCommand->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_LightLed
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   32386
                                            105 COMRAM     5     5      0
                                              8 BANK0     15    15      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                      _SetBuzzerDuty
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             14    14      0   10865
                                            101 COMRAM     4     4      0
                                              0 BANK0      8     8      0
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                     _SetTimeCommand
 ---------------------------------------------------------------------------------
 (2) _SetTimeCommand                                       6     6      0    6064
                                             95 COMRAM     6     6      0
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (3) _SetTimeFromRegs                                     27    25      2    5944
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2     772
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _ModbusSetExceptionStatusBit                          4     3      1     555
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1496
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                      _SetBuzzerDuty
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _SetBuzzerDuty                                        4     2      2     247
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2086
                                             14 COMRAM     5     5      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3331
                                             14 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LoadNextEvent                                        5     5      0     593
                                              8 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (5) _getHourMin                                           2     1      1     392
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2018
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   12469
                                             41 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0     804
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     564
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     749
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     728
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    2691
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    1927
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1000
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     745
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     632
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3     972
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0     936
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1055
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     541
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      23
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SetBuzzerDuty
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
   _SetBuzzerDuty
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SetBuzzerDuty
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _SetTimeCommand
       _SetTimeFromRegs
         _LightStatusLed
         _LoadNextEvent
           _getHourMin
         _SetHourMin
         _SetTime
         _mktime
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
             _years_to_days
               ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      76       1       93.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2AE      15        0.0%
DATA                 0      0     2AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu May 12 11:07:09 2016

                                                   LoadNextEvent@minute 000D  
                                                         _years_to_days 1982  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$829 0012  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l62 2836  
                                                                    l71 27FA  
                                                                    l59 2832  
                                                                    l67 27DA  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001E  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l101 28A6  
                                                                   l102 28C0  
                                                   ModbusPoll@inputRegs 002D  
                                                                   l250 273E  
                                                                   l411 144C  
                                                                   l403 1474  
                                                                   l261 109C  
                                                                   l245 2704  
                                                                   l413 1308  
                                                                   l247 270E  
                                                                   l431 1380  
                                                                   l415 130A  
                                                                   l248 2718  
                                                                   l424 1354  
                                                                   l249 2722  
                                                                   l409 12F4  
                                                                   l362 21DE  
                                                                   l372 1EB0  
                                                                   l269 0FBA  
                                                                   l445 13FA  
                                                                   l429 137C  
                                                                   l278 1B74  
                                                                   l438 13BA  
                                                                   l382 1196  
                                                                   l640 15E4  
                                                                   l705 0E44  
                                                                   l378 1E6A  
                                                                   l636 261E  
                                                                   l814 173C  
                                                                   l744 184A  
                                                                   l691 0C34  
                                                                   l676 2782  
                                                                   l692 0E4C  
                                                                   l668 29C4  
                                                                   l775 195C  
                                                                   l696 0C6C  
                                                                   l796 1FBE  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2916  
                                                      ProcessDiary@hour 0013  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0030  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 23CC  
                                                                   wreg 000FE8  
                                                       ?_SetTimeCommand 0001  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 215C  
                                                     _buzzeLoudDuration 00C7  
                                                   main@oldBuzzerOnTime 00E1  
                                                         _globalMinutes 0073  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1223 2580  
                                                                  l1233 26AC  
                                                                  l1249 25CE  
                                                                  l4100 1FF4  
                                                                  l1269 06A6  
                                                                  l4022 1CA8  
                                                                  l4102 1FF6  
                                                                  l3400 2828  
                                                                  l4032 1D24  
                                                                  l4200 0A18  
                                                                  l3402 282A  
                                                                  l4122 1634  
                                                                  l4114 1600  
                                                                  l5002 096A  
                                                                  l4028 1D00  
                                                                  l4132 1676  
                                                                  l5020 28F4  
                                                                  l4150 16CC  
                                                                  l4142 16A4  
                                                                  l4134 167C  
                                                                  l4302 0B4E  
                                                                  l4230 0A72  
                                                                  l4222 0A58  
                                                                  l4214 0A3E  
                                                                  l4206 0A26  
                                                                  l3256 27F2  
                                                                  l4048 236C  
                                                                  l4304 0B56  
                                                                  l4232 0A7A  
                                                                  l4224 0A60  
                                                                  l4216 0A46  
                                                                  l4208 0A2C  
                                                                  l3370 2328  
                                                                  l3362 230A  
                                                                  l3354 22F6  
                                                                  l4154 16E0  
                                                                  l4146 16B8  
                                                                  l4138 1690  
                                                                  l4330 0BA2  
                                                                  l4322 0B88  
                                                                  l4314 0B70  
                                                                  l4250 0AAC  
                                                                  l4242 0A94  
                                                                  l5202 2600  
                                                                  l4164 1708  
                                                                  l4340 0BC4  
                                                                  l4332 0BAA  
                                                                  l4324 0B90  
                                                                  l4316 0B76  
                                                                  l4308 0B62  
                                                                  l4260 0ACE  
                                                                  l4252 0AB4  
                                                                  l4244 0A9A  
                                                                  l4236 0A86  
                                                                  l4158 16F4  
                                                                  l3702 0C62  
                                                                  l4502 1514  
                                                                  l5070 0F90  
                                                                  l5062 0E80  
                                                                  l4440 222C  
                                                                  l3376 2332  
                                                                  l3480 2420  
                                                                  l4168 1728  
                                                                  l3720 0CBC  
                                                                  l3712 0C94  
                                                                  l3704 0C68  
                                                                  l4520 1560  
                                                                  l4512 153C  
                                                                  l4504 151A  
                                                                  l5072 0FE8  
                                                                  l5064 0F16  
                                                                  l5056 0E64  
                                                                  l4280 0B08  
                                                                  l4272 0AF4  
                                                                  l5208 2796  
                                                                  l3474 23FA  
                                                                  l3810 0DF8  
                                                                  l5082 108A  
                                                                  l5250 1E5C  
                                                                  l4338 0BBC  
                                                                  l4266 0AE0  
                                                                  l4258 0AC6  
                                                                  l4346 0BD0  
                                                                  l4194 09EE  
                                                                  l3740 0CE4  
                                                                  l3724 0CC2  
                                                                  l3716 0C98  
                                                                  l3708 0C72  
                                                                  l3820 0E06  
                                                                  l4540 159A  
                                                                  l4532 1580  
                                                                  l4524 1568  
                                                                  l4516 154E  
                                                                  l4508 152E  
                                                                  l5244 1E44  
                                                                  l5236 1E26  
                                                                  l4268 0AE8  
                                                                  l4348 0BE6  
                                                                  l3662 274C  
                                                                  l3670 276E  
                                                                  l3750 0D02  
                                                                  l3742 0CF0  
                                                                  l3734 0CDA  
                                                                  l4454 1492  
                                                                  l4294 0B34  
                                                                  l4286 0B1A  
                                                                  l4278 0B02  
                                                                  l5190 2882  
                                                                  l3904 1F3C  
                                                                  l4544 15A0  
                                                                  l4536 1588  
                                                                  l4528 157A  
                                                                  l3488 272C  
                                                                  l4296 0B3C  
                                                                  l4288 0B22  
                                                                  l5360 13E2  
                                                                  l5336 13AA  
                                                                  l5272 12F8  
                                                                  l3762 0D32  
                                                                  l4554 15AC  
                                                                  l4482 14EE  
                                                                  l4458 1498  
                                                                  l5194 2894  
                                                                  l5362 13EE  
                                                                  l5418 116E  
                                                                  l3924 2114  
                                                                  l4548 15A6  
                                                                  l4468 14C2  
                                                                  l5372 1428  
                                                                  l5268 12E6  
                                                                  l5428 11A6  
                                                                  l3678 2780  
                                                                  l3862 180E  
                                                                  l3854 17B2  
                                                                  l3846 17A2  
                                                                  l3926 2146  
                                                                  l3774 0D58  
                                                                  l3694 0C38  
                                                                  l4478 14E8  
                                                                  l4910 205A  
                                                                  l5374 1458  
                                                                  l5454 1246  
                                                                  l5438 1204  
                                                                  l3864 183C  
                                                                  l3872 1850  
                                                                  l5296 1330  
                                                                  l3794 0DDA  
                                                                  l3698 0C5A  
                                                                  l4498 1510  
                                                                  l4930 1A90  
                                                                  l4826 25CC  
                                                                  l4834 254A  
                                                                  l4914 2084  
                                                                  l5298 133C  
                                                                  l5458 1266  
                                                                  l4940 1AFA  
                                                                  l4836 2554  
                                                                  l3878 1868  
                                                                  l3974 18B2  
                                                                  l4942 1B18  
                                                                  l4934 1AB6  
                                                                  l4862 26A2  
                                                                  l4854 267E  
                                                                  l4846 2576  
                                                                  l4838 255A  
                                                                  l5398 10EE  
                                                                  l3984 191C  
                                                                  l4960 2178  
                                                                  l4936 1AD4  
                                                                  l4856 2688  
                                                                  l3986 194E  
                                                                  l3994 1962  
                                                                  l3898 1EE8  
                                                                  l4962 217A  
                                                                  l4946 1B46  
                                                                  l4858 268E  
                                                                  l4956 2170  
                                                                  l4992 06B2  
                                                                  STR_3 060D  
                                                                  STR_4 065E  
                                                                  STR_6 0655  
                                                                  STR_8 0664  
                                                     _UpdateLedRegister 26FE  
                                                                  _LATA 000F89  
                                                                  u3014 20FE  
                                                                  _LATB 000F8A  
                                                                  u3015 20F6  
                                                                  u3024 212A  
                                                                  u3025 2122  
                                                                  u3034 18E0  
                                                                  u4010 2042  
                                                                  u3035 18DA  
                                                                  u3054 1906  
                                                                  u3055 18FE  
                                                                  u3064 1932  
                                                                  u4200 06A6  
                                                                  u3065 192A  
                                                                  u4114 1B34  
                                                                  u4115 1B2C  
                                                                  u4124 1B5C  
                                                                  u4125 1B54  
                                                                  u4230 2494  
                                                                  u4054 1AA8  
                                                                  u4055 1AA2  
                                                                  u2720 0C94  
                                                                  u4304 0EBC  
                                                                  u4064 1AC8  
                                                                  u4305 0EB6  
                                                                  u4065 1AC2  
                                                                  u4314 0EE6  
                                                                  u4250 24B0  
                                                                  u4315 0EE0  
                                                                  u2740 0CBC  
                                                                  u4404 1024  
                                                                  u4324 0F0E  
                                                                  u4084 1AEC  
                                                                  u4405 101E  
                                                                  u4325 0F08  
                                                                  u4085 1AE6  
                                                                  u4414 104A  
                                                                  u4334 0F2A  
                                                                  u4094 1B0C  
                                                                  u4190 068C  
                                                                  u4415 1044  
                                                                  u4335 0F24  
                                                                  u4095 1B06  
                                                                  u2840 0DD8  
                                                                  u2680 0C30  
                                                                  u4344 0F4E  
                                                                  u4248 2498  
                                                                  u4504 2612  
                                                                  u4345 0F48  
                                                                  u4505 260C  
                                                                  u4434 1076  
                                                                  u4435 1070  
                                                                  u2924 17DA  
                                                                  u4364 0F7C  
                                                                  u4268 24B4  
                                                                  u2925 17D2  
                                                                  u4365 0F76  
                                                                  u4445 1C02  
                                                                  u4374 0FA4  
                                                                  u4294 0E94  
                                                                  u4375 0F9E  
                                                                  u4295 0E8E  
                                                                  u4455 1C24  
                                                                  u2944 17F6  
                                                                  u4384 0FCE  
                                                                  u2945 17F0  
                                                                  u4385 0FC8  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u2954 1822  
                                                                  u4394 0FFC  
                                                                  u2955 181C  
                                                                  u4395 0FF6  
                                                                  _RCIF 007CF5  
                                                                  u4494 25F2  
                                                                  u4495 25EC  
                                                                  u4840 11D2  
                                                                  i1l90 0064  
                                                                  i1l91 0038  
                                                                  i2l77 2500  
                                                                  i2l78 2530  
                                                                  u4897 27CE  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 10A2  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0077  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2A02  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0075  
                                                       __end_of_InitApp 2268  
                                                            __6sCounter 00C1  
                                                      ?_SetTimeFromRegs 0045  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2954  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                                 _EEADR 000FA9  
                                                                 STR_10 063A  
                                                                 STR_20 0655  
                                                                 STR_12 0626  
                                                                 STR_22 0664  
                                                                 STR_30 064A  
                                                                 STR_14 0669  
                                                                 STR_24 063A  
                                                                 STR_16 064A  
                                                                 STR_18 065E  
                                                                 STR_26 0626  
                                                                 STR_28 0669  
                                                                 _CARRY 007EC0  
                                                       __end_of___lwdiv 258C  
                                                       __end_of___lwmod 26B8  
                                            __end_of_ModbusSendTxBuffer 2670  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                            _IsBusserOn 00BE  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2A0A  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 1B7A  
                                                        ?_LoadNextEvent 0001  
                                                    ProcessDiary@minute 0014  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00C5  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 2744  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 147A  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00BF  
                                                        _UartBufferTail 006F  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2936  
                                                       __initialization 2268  
                                                          __end_of_main 1294  
                                                      __end_of_LightLed 10A2  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 006A  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 1C6A  
                                                            _ModbusInit 29B6  
                                                            _ModbusPoll 147A  
                                                      __end_of_PortRead 283C  
                                                        _InitUartBuffer 29EC  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 2954  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1A84  
                                                                i1l4740 005E  
                                                                i1l4742 0060  
                                                                i2l4720 2528  
                                                         _ymd_to_scalar 2016  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 2788  
                                                         main@oldMinute 00E5  
                                      ModbusProcess_FC15@u16currentCoil 0024  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00CC  
                                                       ??_years_to_days 0012  
                                                                _Modbus 29A2  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 2538  
                                                        _UartRingBuffer 0200  
                                                          __lastAddress 00B6  
                                            ModbusProcess_FC3@u16regsno 001E  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 258C  
                                                                _millis 28C6  
                                                                clear_0 2270  
                                                                clear_1 2282  
                                                                clear_2 228E  
                                                     __end_of_AddSecond 29EC  
                                                                _mktime 066E  
                                                          __lastCommand 00D4  
                                                 __end_of_PortAvailable 2A0A  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0066  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 0074  
                                                __end_of_InitUartBuffer 29FA  
                                                          __MODBUSCoils 00D2  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 29DC  
                                                __end_of_LightStatusLed 1B7A  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00C6  
                                                            __accesstop 0080  
                                               __end_of__initialization 22DC  
                                            __end_of_ModbusProcess_FC21 2016  
                                            __end_of_ModbusProcess_FC15 1982  
                                            __end_of_ModbusProcess_FC16 1D34  
                                            __end_of_ModbusProcess_FC17 23CC  
                                            __end_of_ModbusProcess_FC43 174C  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0260  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 0E52  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 22EA  
                                                          __pidataBANK0 2A10  
                                                  __end_of_fctsupported 060D  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                                      ??_SetTimeCommand 0060  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 002A  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                        io_poll@command 00D5  
                                                  _ModbusBuildException 2916  
                                                    ??_SwitchOffAllLeds 0007  
                                                            __lastCount 00B8  
                                                       ?_LightStatusLed 0007  
                                                           ?_SetHourMin 0007  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0058  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 298A  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2806  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00AC  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 289A  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000B  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B0  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 2624  
                                                               _GetTime 29FA  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00C4  
                                                               _InitApp 21E2  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2936  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0170  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 0072  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 2538  
                                                               ___lwmod 2670  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 001C  
                                                               __pcinit 2268  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2488  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0071  
                                                       __size_of_mktime 0312  
                                                               __ptext0 10A2  
                                                               __ptext1 29CA  
                                                               __ptext2 1294  
                                                               __ptext3 283C  
                                                               __ptext4 1D34  
                                                               __ptext5 066E  
                                                               __ptext6 2016  
                                                               __ptext7 1982  
                                                               __ptext8 26B8  
                                                               __ptext9 2538  
                                                 SetTimeCommand@hourMin 0060  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 1294  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0008  
                                                   __size_of_ResetEvent 0040  
                                              __size_of_SetTimeFromRegs 00C2  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002C  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 24E0  
                                                  end_of_initialization 22DC  
                                                         __Lmediumconst 0000  
                                                               int_func 24E0  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                                        ??_ProcessDiary 000F  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                          _curEventHour 00C9  
                                                ??_ModbusBuildException 0007  
                                                          _curEventType 00CB  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 29DC  
                                                        _months_to_days 26B8  
                                                     _ModbusGetRxBuffer 2744  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     LoadNextEvent@hour 000C  
                                                    ?_ModbusGetRxBuffer 0001  
                                           __end_of_ConfigureOscillator 2A10  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00DD  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00EB  
                                                     _buzzerAlarmPeriod 00C8  
                                             ModbusGetLastCommand@count 0007  
                                                 __end_of_years_to_days 1A84  
                                                        __end_of_Modbus 29B6  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 1F6A  
                                                    _ModbusProcess_FC15 1878  
                                                    _ModbusProcess_FC16 1C6A  
                                                    _ModbusProcess_FC17 235E  
                                                    _ModbusProcess_FC43 15EA  
                                                         __pidataCOMRAM 2A14  
                                              ModbusPoll@discreteInputs 002A  
                                                        __end_of_isleap 25D8  
                                                        __end_of_millis 28F0  
                                                __end_of_months_to_days 26FE  
                                             __end_of_ModbusGetRxBuffer 2788  
                                                        __end_of_mktime 0980  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00C0  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0033  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2268  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 21E2  
                                                          ??_SetHourMin 0008  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 0250  
                                                      LightStatusLed@on 0007  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 29CA  
                                                    __end_of_ModbusPoll 15EA  
                                                             _PortBegin 2970  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0BF2  
                                                 CopyStringToBuffer@len 0008  
                                                           __pdataBANK0 00EC  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 27C8  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 2970  
                                                     __holdingRegsCount 00C3  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                           __pbssCOMRAM 006F  
                                                    __end_of_ResetEvent 27C8  
                                                         __pcstackBANK0 00D5  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 1EB4  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2530  
                                                              ?_GetTime 0007  
                                                              ?_InitApp 0001  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0026  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                                     _buzzerOnOffPeriod 00EE  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00BC  
                                                            ?_PortWrite 0007  
                                                           __pintcodelo 0018  
                                                   _buzzerOnOffDuration 00EC  
                                          __end_of_ModbusGetLastCommand 289A  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002F  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2A02  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0070  
                                                           ??_AddSecond 0007  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00BA  
                                                 io_poll@lastEndAddress 00D6  
                                                  SetTimeCommand@daySec 0062  
                                                      ___lwdiv@quotient 000C  
                                               SetTimeCommand@yearMonth 0064  
                                               __size_of_SetTimeCommand 0030  
                                                      SetHourMin@newMin 0007  
                                                 __end_of_ymd_to_scalar 20BA  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00CD  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0034  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 242C  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0074  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 2624  
                                           _ModbusSetExceptionStatusBit 25D8  
                                                              InitApp@i 0007  
                                                           _globalHours 0076  
                                                             main@curMs 00E7  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                     _ModbusProcess_FC1 174C  
                                                     _ModbusProcess_FC3 1EB4  
                                                     _ModbusProcess_FC5 20BA  
                                                     _ModbusProcess_FC6 242C  
                                                     _ModbusProcess_FC7 298A  
                                                           _INTCON2bits 000FF1  
                                                             copy_data0 22B2  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 0E52  
                                                    __end_of_getHourMin 28C6  
                                                 ModbusPoll@u8exception 0035  
                                                      _SwitchOffAllLeds 28F0  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00DC  
                                                      __size_of_InitApp 0086  
                                                              __Hrparam 0000  
                                                              __u32time 00A0  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 235E  
                                                              __Lrparam 0000  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0027  
                                                              _PortRead 2806  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00A8  
                                                           ??_PortWrite 000A  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BE  
                                                           _isleap$2143 000F  
                                                       _SetTimeFromRegs 1D34  
                                                           _currentTime 00CE  
                                                      __size_of_io_poll 01E6  
                                                              _diffTime 00A4  
                                             __end_of_ModbusProcess_FC1 1878  
                                             __end_of_ModbusProcess_FC3 1F6A  
                                             __end_of_ModbusProcess_FC5 215C  
                                             __end_of_ModbusProcess_FC6 2488  
                                             __end_of_ModbusProcess_FC7 29A2  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00D9  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 258C  
                                                              __ptext11 2670  
                                                              __ptext20 29B6  
                                                              __ptext12 2936  
                                                              __ptext21 2788  
                                                              __ptext13 2954  
                                                              __ptext30 147A  
                                                              __ptext22 0980  
                                                              __ptext14 1A84  
                                                              __ptext31 0BF2  
                                                              __ptext23 26FE  
                                                              __ptext15 25D8  
                                                              __ptext40 1C6A  
                                                              __ptext32 298A  
                                                              __ptext24 1DF6  
                                                              __ptext16 286C  
                                                              __ptext41 1878  
                                                              __ptext33 242C  
                                                              __ptext25 28F0  
                                                              __ptext17 1B7A  
                                                              __ptext50 2916  
                                                              __ptext42 174C  
                                                              __ptext34 20BA  
                                                              __ptext26 215C  
                                                              __ptext18 2488  
                                                              __ptext51 21E2  
                                                              __ptext43 2624  
                                                              __ptext35 15EA  
                                                              __ptext27 289A  
                                                              __ptext19 29A2  
                                                              __ptext52 2970  
                                                              __ptext44 28C6  
                                                              __ptext36 23CC  
                                                              __ptext28 0E52  
                                                              __ptext53 29EC  
                                                              __ptext45 27C8  
                                                              __ptext37 1EB4  
                                                              __ptext29 29FA  
                                                              __ptext54 2A0A  
                                                              __ptext46 22EA  
                                                              __ptext38 1F6A  
                                                              __ptext55 29DC  
                                                              __ptext47 2744  
                                                              __ptext39 235E  
                                                              __ptext48 2806  
                                                              __ptext49 2A02  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00DB  
                                                    io_poll@eventEeAddr 00D8  
                                                         __size_of_main 01F2  
                                                  _ModbusGetLastCommand 286C  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1DF6  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0077  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 29CA  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00E6  
                                                      __exceptionStatus 00C2  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2156 0028  
                                                            _INTCONbits 000FF2  
                                               __size_of_InitFromEeprom 00F0  
                                                ProcessLightBlock@curMs 000C  
                                                __size_of_years_to_days 0102  
                                                        _SetTimeCommand 283C  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2A18  
                                                              intlevel2 2A18  
                                                 ModbusProcess_FC5@regs 001F  
                                                 ModbusProcess_FC6@regs 0016  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 006E  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0980  
                                                 __MODBUSDiscreteInputs 00B4  
                                                __size_of_LoadNextEvent 0086  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 1DF6  
                                                 __end_of_SetBuzzerDuty 24E0  
                                                   ModbusPoll@u8current 0033  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                                        _curEventMinute 00CA  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                                __end_of_SetTimeCommand 286C  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 0BF2  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0032  
                                            ModbusProcess_FC15@u8bitsno 0028  
