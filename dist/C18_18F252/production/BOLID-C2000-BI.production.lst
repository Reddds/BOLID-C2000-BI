

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sun May 22 22:10:52 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           	psect	eeprom_data
    95  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    96  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    97  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    98  0000                     
    99                           	psect	idataCOMRAM
   100  002DF6                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _curEventNum
   104  002DF6  FF                 	db	255
   105                           
   106                           ;initializer for _currentAlarmedEventNum
   107  002DF7  FF                 	db	255
   108                           
   109                           ;initializer for _globalHours
   110  002DF8  FF                 	db	255
   111                           
   112                           	psect	smallconst
   113  000600                     __psmallconst:
   114                           	opt stack 0
   115  000600  00                 	db	0
   116  000601                     _fctsupported:
   117                           	opt stack 0
   118  000601  01                 	db	1
   119  000602  02                 	db	2
   120  000603  03                 	db	3
   121  000604  04                 	db	4
   122  000605  05                 	db	5
   123  000606  06                 	db	6
   124  000607  07                 	db	7
   125  000608  0F                 	db	15
   126  000609  10                 	db	16
   127  00060A  11                 	db	17
   128  00060B  15                 	db	21
   129  00060C  2B                 	db	43
   130  00060D  64                 	db	100
   131  00060E  65                 	db	101
   132  00060F  66                 	db	102
   133  000610                     __end_of_fctsupported:
   134                           	opt stack 0
   135  0000                     _CCP1CONbits	set	4029
   136  0000                     _CCPR1L	set	4030
   137  0000                     _EEADR	set	4009
   138  0000                     _EECON2	set	4007
   139  0000                     _EEDATA	set	4008
   140  0000                     _INTCON2bits	set	4081
   141  0000                     _INTCONbits	set	4082
   142  0000                     _IPR1bits	set	3999
   143  0000                     _LATA	set	3977
   144  0000                     _LATAbits	set	3977
   145  0000                     _LATB	set	3978
   146  0000                     _LATCbits	set	3979
   147  0000                     _PIE1bits	set	3997
   148  0000                     _PIR1bits	set	3998
   149  0000                     _PORTCbits	set	3970
   150  0000                     _PR2	set	4043
   151  0000                     _RCONbits	set	4048
   152  0000                     _RCREG	set	4014
   153  0000                     _RCSTA	set	4011
   154  0000                     _RCSTAbits	set	4011
   155  0000                     _SPBRG	set	4015
   156  0000                     _T0CONbits	set	4053
   157  0000                     _T1CONbits	set	4045
   158  0000                     _T2CONbits	set	4042
   159  0000                     _TMR0H	set	4055
   160  0000                     _TMR0L	set	4054
   161  0000                     _TMR1H	set	4047
   162  0000                     _TMR1L	set	4046
   163  0000                     _TRISAbits	set	3986
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISCbits	set	3988
   166  0000                     _TXREG	set	4013
   167  0000                     _TXSTA	set	4012
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _CARRY	set	32448
   170  0000                     _GIE	set	32663
   171  0000                     _RCIF	set	31989
   172  0000                     _RD	set	32048
   173  0000                     _TRMT	set	32097
   174  0000                     _WR	set	32049
   175  0000                     _WREN	set	32050
   176  000610                     STR_9:
   177  000610  54                 	db	84	;'T'
   178  000611  61                 	db	97	;'a'
   179  000612  62                 	db	98	;'b'
   180  000613  6C                 	db	108	;'l'
   181  000614  6F                 	db	111	;'o'
   182  000615  20                 	db	32
   183  000616  73                 	db	115	;'s'
   184  000617  20                 	db	32
   185  000618  72                 	db	114	;'r'
   186  000619  61                 	db	97	;'a'
   187  00061A  73                 	db	115	;'s'
   188  00061B  70                 	db	112	;'p'
   189  00061C  69                 	db	105	;'i'
   190  00061D  73                 	db	115	;'s'
   191  00061E  61                 	db	97	;'a'
   192  00061F  6E                 	db	110	;'n'
   193  000620  69                 	db	105	;'i'
   194  000621  65                 	db	101	;'e'
   195  000622  6D                 	db	109	;'m'
   196  000623  00                 	db	0
   197  000624                     STR_7:
   198  000624  68                 	db	104	;'h'
   199  000625  74                 	db	116	;'t'
   200  000626  74                 	db	116	;'t'
   201  000627  70                 	db	112	;'p'
   202  000628  3A                 	db	58	;':'
   203  000629  2F                 	db	47
   204  00062A  2F                 	db	47
   205  00062B  62                 	db	98	;'b'
   206  00062C  6F                 	db	111	;'o'
   207  00062D  6C                 	db	108	;'l'
   208  00062E  69                 	db	105	;'i'
   209  00062F  64                 	db	100	;'d'
   210  000630  2E                 	db	46
   211  000631  72                 	db	114	;'r'
   212  000632  75                 	db	117	;'u'
   213  000633  00                 	db	0
   214  000634                     STR_13:
   215  000634  52                 	db	82	;'R'
   216  000635  61                 	db	97	;'a'
   217  000636  73                 	db	115	;'s'
   218  000637  70                 	db	112	;'p'
   219  000638  69                 	db	105	;'i'
   220  000639  73                 	db	115	;'s'
   221  00063A  61                 	db	97	;'a'
   222  00063B  6E                 	db	110	;'n'
   223  00063C  69                 	db	105	;'i'
   224  00063D  65                 	db	101	;'e'
   225  00063E  00                 	db	0
   226  00063F                     STR_3:
   227  00063F  43                 	db	67	;'C'
   228  000640  32                 	db	50	;'2'
   229  000641  30                 	db	48	;'0'
   230  000642  30                 	db	48	;'0'
   231  000643  30                 	db	48	;'0'
   232  000644  2D                 	db	45
   233  000645  42                 	db	66	;'B'
   234  000646  49                 	db	73	;'I'
   235  000647  00                 	db	0
   236  000648                     STR_1:
   237  000648  42                 	db	66	;'B'
   238  000649  4F                 	db	79	;'O'
   239  00064A  4C                 	db	76	;'L'
   240  00064B  49                 	db	73	;'I'
   241  00064C  44                 	db	68	;'D'
   242  00064D  00                 	db	0
   243  00064E                     STR_5:
   244  00064E  31                 	db	49	;'1'
   245  00064F  2E                 	db	46
   246  000650  30                 	db	48	;'0'
   247  000651  31                 	db	49	;'1'
   248  000652  00                 	db	0
   249  000653                     STR_11:
   250  000653  4D                 	db	77	;'M'
   251  000654  4D                 	db	77	;'M'
   252  000655  4D                 	db	77	;'M'
   253  000656  00                 	db	0
   254  0000                     
   255                           ; #config settings
   256  000657  00                 	db	0	; dummy byte at the end
   257  0000                     
   258                           	psect	cinit
   259  002644                     __pcinit:
   260                           	opt stack 0
   261  002644                     start_initialization:
   262                           	opt stack 0
   263  002644                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Clear objects allocated to BANK2 (256 bytes)
   267  002644  EE02  F000         	lfsr	0,__pbssBANK2
   268  002648  EE11 F000          	lfsr	1,256
   269  00264C                     clear_0:
   270  00264C  6AEE               	clrf	postinc0,c
   271  00264E  50E5               	movf	postdec1,w,c
   272  002650  50E1               	movf	fsr1l,w,c
   273  002652  E1FC               	bnz	clear_0
   274  002654  50E2               	movf	fsr1h,w,c
   275  002656  E1FA               	bnz	clear_0
   276                           
   277                           ; Clear objects allocated to BANK1 (200 bytes)
   278  002658  EE01  F000         	lfsr	0,__pbssBANK1
   279  00265C  0EC8               	movlw	200
   280  00265E                     clear_1:
   281  00265E  6AEE               	clrf	postinc0,c
   282  002660  06E8               	decf	wreg,f,c
   283  002662  E1FD               	bnz	clear_1
   284                           
   285                           ; Clear objects allocated to BANK0 (106 bytes)
   286  002664  EE00  F080         	lfsr	0,__pbssBANK0
   287  002668  0E6A               	movlw	106
   288  00266A                     clear_2:
   289  00266A  6AEE               	clrf	postinc0,c
   290  00266C  06E8               	decf	wreg,f,c
   291  00266E  E1FD               	bnz	clear_2
   292                           
   293                           ; Clear objects allocated to COMRAM (6 bytes)
   294  002670  6A72               	clrf	(__pbssCOMRAM+5)& (0+255),c
   295  002672  6A71               	clrf	(__pbssCOMRAM+4)& (0+255),c
   296  002674  6A70               	clrf	(__pbssCOMRAM+3)& (0+255),c
   297  002676  6A6F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   298  002678  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   299  00267A  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   300                           
   301                           ; Initialize objects allocated to COMRAM (3 bytes)
   302                           ; load TBLPTR registers with __pidataCOMRAM
   303  00267C  0EF6               	movlw	low __pidataCOMRAM
   304  00267E  6EF6               	movwf	tblptrl,c
   305  002680  0E2D               	movlw	high __pidataCOMRAM
   306  002682  6EF7               	movwf	tblptrh,c
   307  002684  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   308  002686  6EF8               	movwf	tblptru,c
   309  002688  0009               	tblrd		*+	;fetch initializer
   310  00268A  CFF5 F073          	movff	tablat,__pdataCOMRAM
   311  00268E  0009               	tblrd		*+	;fetch initializer
   312  002690  CFF5 F074          	movff	tablat,__pdataCOMRAM+1
   313  002694  0009               	tblrd		*+	;fetch initializer
   314  002696  CFF5 F075          	movff	tablat,__pdataCOMRAM+2
   315  00269A                     end_of_initialization:
   316                           	opt stack 0
   317  00269A                     __end_of__initialization:
   318                           	opt stack 0
   319  00269A  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   320  00269C  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   321  00269E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   322  0026A0  6EF8               	movwf	tblptru,c
   323  0026A2  0100               	movlb	0
   324  0026A4  EF77  F009         	goto	_main	;jump to C main() function
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1h	equ	0xFE2
   333                           fsr1l	equ	0xFE1
   334                           
   335                           	psect	bssCOMRAM
   336  00006D                     __pbssCOMRAM:
   337                           	opt stack 0
   338  00006D                     _UartBufferHead:
   339                           	opt stack 0
   340  00006D                     	ds	1
   341  00006E                     __playingSoundStartPosInEe:
   342                           	opt stack 0
   343  00006E                     	ds	1
   344  00006F                     __soundCount:
   345                           	opt stack 0
   346  00006F                     	ds	1
   347  000070                     __u8BufferSize:
   348                           	opt stack 0
   349  000070                     	ds	1
   350  000071                     _blinkOn:
   351                           	opt stack 0
   352  000071                     	ds	1
   353  000072                     _globalMinutes:
   354                           	opt stack 0
   355  000072                     	ds	1
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           postdec1	equ	0xFE5
   363                           fsr1h	equ	0xFE2
   364                           fsr1l	equ	0xFE1
   365                           
   366                           	psect	dataCOMRAM
   367  000073                     __pdataCOMRAM:
   368                           	opt stack 0
   369  000073                     _curEventNum:
   370                           	opt stack 0
   371  000073                     	ds	1
   372  000074                     _currentAlarmedEventNum:
   373                           	opt stack 0
   374  000074                     	ds	1
   375  000075                     _globalHours:
   376                           	opt stack 0
   377  000075                     	ds	1
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           postdec1	equ	0xFE5
   385                           fsr1h	equ	0xFE2
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	bssBANK0
   389  000080                     __pbssBANK0:
   390                           	opt stack 0
   391  000080                     _ledBlink:
   392                           	opt stack 0
   393  000080                     	ds	16
   394  000090                     _ledStatuses:
   395                           	opt stack 0
   396  000090                     	ds	16
   397  0000A0                     __playingEndMs:
   398                           	opt stack 0
   399  0000A0                     	ds	4
   400  0000A4                     __u32time:
   401                           	opt stack 0
   402  0000A4                     	ds	4
   403  0000A8                     _diffTime:
   404                           	opt stack 0
   405  0000A8                     	ds	4
   406  0000AC                     _eventResetSecond:
   407                           	opt stack 0
   408  0000AC                     	ds	4
   409  0000B0                     _millisecondsFromStart:
   410                           	opt stack 0
   411  0000B0                     	ds	4
   412  0000B4                     _oldBlinkOnTime:
   413                           	opt stack 0
   414  0000B4                     	ds	4
   415  0000B8                     _soundTestEnd:
   416                           	opt stack 0
   417  0000B8                     	ds	4
   418  0000BC                     __lastAddress:
   419                           	opt stack 0
   420  0000BC                     	ds	2
   421  0000BE                     __lastCount:
   422                           	opt stack 0
   423  0000BE                     	ds	2
   424  0000C0                     __nextEventPlayDuration:
   425                           	opt stack 0
   426  0000C0                     	ds	2
   427  0000C2                     __totalMinutesFromDayStart:
   428                           	opt stack 0
   429  0000C2                     	ds	2
   430  0000C4                     _blinkDuration:
   431                           	opt stack 0
   432  0000C4                     	ds	2
   433  0000C6                     _blinkPeriod:
   434                           	opt stack 0
   435  0000C6                     	ds	2
   436  0000C8                     _curEventTotalMinutes:
   437                           	opt stack 0
   438  0000C8                     	ds	2
   439  0000CA                     _UartBufferLen:
   440                           	opt stack 0
   441  0000CA                     	ds	1
   442  0000CB                     _UartBufferTail:
   443                           	opt stack 0
   444  0000CB                     	ds	1
   445  0000CC                     __6sCounter:
   446                           	opt stack 0
   447  0000CC                     	ds	1
   448  0000CD                     __deviceStatus:
   449                           	opt stack 0
   450  0000CD                     	ds	1
   451  0000CE                     __exceptionStatus:
   452                           	opt stack 0
   453  0000CE                     	ds	1
   454  0000CF                     __holdingRegsCount:
   455                           	opt stack 0
   456  0000CF                     	ds	1
   457  0000D0                     __inputRegsCount:
   458                           	opt stack 0
   459  0000D0                     	ds	1
   460  0000D1                     __isSoundPlaying:
   461                           	opt stack 0
   462  0000D1                     	ds	1
   463  0000D2                     __lastCommand:
   464                           	opt stack 0
   465  0000D2                     	ds	1
   466  0000D3                     __nextEventSoundId:
   467                           	opt stack 0
   468  0000D3                     	ds	1
   469  0000D4                     __playingSoundCurPos:
   470                           	opt stack 0
   471  0000D4                     	ds	1
   472  0000D5                     __playingSoundSteps:
   473                           	opt stack 0
   474  0000D5                     	ds	1
   475  0000D6                     __u8id:
   476                           	opt stack 0
   477  0000D6                     	ds	1
   478  0000D7                     __u8lastRec:
   479                           	opt stack 0
   480  0000D7                     	ds	1
   481  0000D8                     _currentLedBlock:
   482                           	opt stack 0
   483  0000D8                     	ds	1
   484  0000D9                     _eventAcceptTime:
   485                           	opt stack 0
   486  0000D9                     	ds	1
   487  0000DA                     _eventCount:
   488                           	opt stack 0
   489  0000DA                     	ds	1
   490  0000DB                     _currentTime:
   491                           	opt stack 0
   492  0000DB                     	ds	4
   493  0000DF                     __MODBUSCoils:
   494                           	opt stack 0
   495  0000DF                     	ds	2
   496  0000E1                     _ModbusUserCommandAdditional1Hi:
   497                           	opt stack 0
   498  0000E1                     	ds	1
   499  0000E2                     _ModbusUserCommandAdditional1Lo:
   500                           	opt stack 0
   501  0000E2                     	ds	1
   502  0000E3                     _ModbusUserCommandAdditional2Hi:
   503                           	opt stack 0
   504  0000E3                     	ds	1
   505  0000E4                     _ModbusUserCommandAdditional2Lo:
   506                           	opt stack 0
   507  0000E4                     	ds	1
   508  0000E5                     _ModbusUserCommandAdditional3Hi:
   509                           	opt stack 0
   510  0000E5                     	ds	1
   511  0000E6                     _ModbusUserCommandAdditional3Lo:
   512                           	opt stack 0
   513  0000E6                     	ds	1
   514  0000E7                     _ModbusUserCommandData:
   515                           	opt stack 0
   516  0000E7                     	ds	1
   517  0000E8                     _ModbusUserCommandId:
   518                           	opt stack 0
   519  0000E8                     	ds	1
   520  0000E9                     __lastFunction:
   521                           	opt stack 0
   522  0000E9                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1h	equ	0xFE2
   531                           fsr1l	equ	0xFE1
   532                           
   533                           	psect	bssBANK1
   534  000100                     __pbssBANK1:
   535                           	opt stack 0
   536  000100                     __au8Buffer:
   537                           	opt stack 0
   538  000100                     	ds	140
   539  00018C                     __MODBUSHoldingRegs:
   540                           	opt stack 0
   541  00018C                     	ds	30
   542  0001AA                     __MODBUSInputRegs:
   543                           	opt stack 0
   544  0001AA                     	ds	30
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1h	equ	0xFE2
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	bssBANK2
   556  000200                     __pbssBANK2:
   557                           	opt stack 0
   558  000200                     _UartRingBuffer:
   559                           	opt stack 0
   560  000200                     	ds	256
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1h	equ	0xFE2
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	cstackBANK0
   572  0000EA                     __pcstackBANK0:
   573                           	opt stack 0
   574  0000EA                     main@lastMs:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x0
   578  0000EA                     	ds	4
   579  0000EE                     main@oldMinute:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x4
   583  0000EE                     	ds	1
   584  0000EF                     main@hour:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x5
   588  0000EF                     	ds	1
   589  0000F0                     main@curMs:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x6
   593  0000F0                     	ds	4
   594  0000F4                     main@minute:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xA
   598  0000F4                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1h	equ	0xFE2
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	cstackCOMRAM
   610  000001                     __pcstackCOMRAM:
   611                           	opt stack 0
   612  000001                     ??_low_isr:
   613  000001                     
   614                           ; 1 bytes @ 0x0
   615  000001                     	ds	5
   616  000006                     low_isr@c:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x5
   620  000006                     	ds	1
   621  000007                     ?_ModbusCalcCRC:
   622                           	opt stack 0
   623  000007                     ?___lwdiv:
   624                           	opt stack 0
   625  000007                     ?___lwmod:
   626                           	opt stack 0
   627  000007                     ?_millis:
   628                           	opt stack 0
   629  000007                     PortRead@ret:
   630                           	opt stack 0
   631  000007                     getHourMin@min:
   632                           	opt stack 0
   633  000007                     getTotalMinutes@totalMinutes:
   634                           	opt stack 0
   635  000007                     UpdateLedRegister@regIndex:
   636                           	opt stack 0
   637  000007                     SwitchOffAllLeds@i:
   638                           	opt stack 0
   639  000007                     LightStatusLed@on:
   640                           	opt stack 0
   641  000007                     InitApp@i:
   642                           	opt stack 0
   643  000007                     SetTime@newTime:
   644                           	opt stack 0
   645  000007                     ModbusSetExceptionStatusBit@value:
   646                           	opt stack 0
   647  000007                     ModbusInit@u8serno:
   648                           	opt stack 0
   649  000007                     ModbusBuildException@u8exception:
   650                           	opt stack 0
   651  000007                     ModbusGetLastCommand@count:
   652                           	opt stack 0
   653  000007                     CopyStringToBuffer@src:
   654                           	opt stack 0
   655  000007                     ___lbdiv@divisor:
   656                           	opt stack 0
   657  000007                     ___lbmod@divisor:
   658                           	opt stack 0
   659  000007                     PortWrite@buf:
   660                           	opt stack 0
   661  000007                     SetBuzzerDuty@dc:
   662                           	opt stack 0
   663  000007                     ___lwdiv@dividend:
   664                           	opt stack 0
   665  000007                     ___lwmod@dividend:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x6
   669  000007                     	ds	1
   670  000008                     ??_LoadNextEvent:
   671  000008                     ??_ModbusSetExceptionStatusBit:
   672  000008                     ??_ModbusGetRxBufferHeader:
   673  000008                     ??_ModbusGetRxBuffer:
   674  000008                     ??_ProcessLightBlock:
   675  000008                     getHourMin@hour:
   676                           	opt stack 0
   677  000008                     LightStatusLed@blink:
   678                           	opt stack 0
   679  000008                     ModbusInit@u8txenpin:
   680                           	opt stack 0
   681  000008                     ModbusBuildException@u8func:
   682                           	opt stack 0
   683  000008                     ModbusGetLastCommand@command:
   684                           	opt stack 0
   685  000008                     CopyStringToBuffer@len:
   686                           	opt stack 0
   687  000008                     ___lbdiv@dividend:
   688                           	opt stack 0
   689  000008                     ___lbmod@dividend:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x7
   693  000008                     	ds	1
   694  000009                     ??_ModbusCalcCRC:
   695  000009                     ??_LightStatusLed:
   696  000009                     ??_SetBuzzerDuty:
   697  000009                     ??_CopyStringToBuffer:
   698  000009                     PortWrite@buflen:
   699                           	opt stack 0
   700  000009                     LightLed@ledState:
   701                           	opt stack 0
   702  000009                     ModbusGetRxBufferHeader@i:
   703                           	opt stack 0
   704  000009                     ModbusGetRxBuffer@bBuffOverflow:
   705                           	opt stack 0
   706  000009                     ModbusGetLastCommand@address:
   707                           	opt stack 0
   708  000009                     ___lbdiv@counter:
   709                           	opt stack 0
   710  000009                     ___lbmod@counter:
   711                           	opt stack 0
   712  000009                     ___lwdiv@divisor:
   713                           	opt stack 0
   714  000009                     ___lwmod@divisor:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x8
   718  000009                     	ds	1
   719  00000A                     PortWrite@i:
   720                           	opt stack 0
   721  00000A                     LightLed@blink:
   722                           	opt stack 0
   723  00000A                     ModbusSetExceptionStatusBit@bitNum:
   724                           	opt stack 0
   725  00000A                     CopyStringToBuffer@objId:
   726                           	opt stack 0
   727  00000A                     ___lbdiv@quotient:
   728                           	opt stack 0
   729  00000A                     ___lbmod@rem:
   730                           	opt stack 0
   731  00000A                     LoadNextEvent@totalMinutes:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x9
   735  00000A                     	ds	1
   736  00000B                     ??_LightLed:
   737  00000B                     ModbusInit@u8id:
   738                           	opt stack 0
   739  00000B                     ModbusCalcCRC@u8length:
   740                           	opt stack 0
   741  00000B                     CopyStringToBuffer@i:
   742                           	opt stack 0
   743  00000B                     ___lwdiv@counter:
   744                           	opt stack 0
   745  00000B                     ___lwmod@counter:
   746                           	opt stack 0
   747  00000B                     SetHourMin@newHour:
   748                           	opt stack 0
   749  00000B                     millis@ret:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0xA
   753  00000B                     	ds	1
   754  00000C                     ?_isleap:
   755                           	opt stack 0
   756  00000C                     ProcessLightBlock@curMs:
   757                           	opt stack 0
   758  00000C                     LoadNextEvent@v1:
   759                           	opt stack 0
   760  00000C                     Modbus@u8serno:
   761                           	opt stack 0
   762  00000C                     ModbusCalcCRC@temp2:
   763                           	opt stack 0
   764  00000C                     ___lwdiv@quotient:
   765                           	opt stack 0
   766  00000C                     isleap@yr:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0xB
   770  00000C                     	ds	1
   771  00000D                     Modbus@u8txenpin:
   772                           	opt stack 0
   773  00000D                     SetHourMin@newMin:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0xC
   777  00000D                     	ds	1
   778  00000E                     ??_isleap:
   779  00000E                     ?_months_to_days:
   780                           	opt stack 0
   781  00000E                     ?_years_to_days:
   782                           	opt stack 0
   783  00000E                     LightLed@ledNum:
   784                           	opt stack 0
   785  00000E                     LightStatusLed@row:
   786                           	opt stack 0
   787  00000E                     Modbus@u8id:
   788                           	opt stack 0
   789  00000E                     ModbusCalcCRC@flag:
   790                           	opt stack 0
   791  00000E                     months_to_days@month:
   792                           	opt stack 0
   793  00000E                     years_to_days@yr:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0xD
   797  00000E                     	ds	1
   798  00000F                     ??_InitFromEeprom:
   799  00000F                     ??_SoundPlayNextStep:
   800  00000F                     LightLed@ststusIndex:
   801                           	opt stack 0
   802  00000F                     _isleap$2241:
   803                           	opt stack 0
   804  00000F                     SetHourMin@sec:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0xE
   808  00000F                     	ds	1
   809  000010                     ??_months_to_days:
   810  000010                     LightLed@statusShift:
   811                           	opt stack 0
   812  000010                     ModbusCalcCRC@i:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0xF
   816  000010                     	ds	1
   817  000011                     ??_SetHourMin:
   818  000011                     ??_ResetEvent:
   819  000011                     ModbusCalcCRC@j:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x10
   823  000011                     	ds	1
   824  000012                     ??_years_to_days:
   825  000012                     ModbusCalcCRC@temp:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x11
   829  000012                     	ds	1
   830  000013                     ResetEvent@state:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x12
   834  000013                     	ds	1
   835  000014                     ??_ModbusValidateRequest:
   836  000014                     SoundPlayNextStep@duration:
   837                           	opt stack 0
   838  000014                     _ResetEvent$880:
   839                           	opt stack 0
   840  000014                     ModbusSendTxBuffer@u16crc:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x13
   844  000014                     	ds	1
   845  000015                     PlaySound@playDuration:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x14
   849  000015                     	ds	1
   850  000016                     ??_ModbusProcess_FC5:
   851  000016                     ??_ModbusProcess_FC15:
   852  000016                     ??_ModbusProcess_FC21:
   853  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   854                           	opt stack 0
   855  000016                     ModbusProcess_FC17@u8CopyBufferSize:
   856                           	opt stack 0
   857  000016                     ModbusProcess_FC43@devIdCode:
   858                           	opt stack 0
   859  000016                     ModbusProcess_FC101@u8CopyBufferSize:
   860                           	opt stack 0
   861  000016                     ModbusProcess_FC102@u8CopyBufferSize:
   862                           	opt stack 0
   863  000016                     ModbusProcess_FC1@regs:
   864                           	opt stack 0
   865  000016                     ModbusProcess_FC3@regs:
   866                           	opt stack 0
   867  000016                     ModbusProcess_FC6@regs:
   868                           	opt stack 0
   869  000016                     ModbusProcess_FC16@regs:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x15
   873  000016                     	ds	1
   874  000017                     ??_PlaySound:
   875  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x16
   879  000017                     	ds	1
   880  000018                     ??_ModbusProcess_FC1:
   881  000018                     ModbusProcess_FC3@u8size:
   882                           	opt stack 0
   883  000018                     ModbusProcess_FC6@u8size:
   884                           	opt stack 0
   885  000018                     ModbusProcess_FC16@u8size:
   886                           	opt stack 0
   887  000018                     ModbusProcess_FC21@requestDataLen:
   888                           	opt stack 0
   889  000018                     ModbusProcess_FC43@objId:
   890                           	opt stack 0
   891  000018                     ModbusValidateRequest@startAddrBytes:
   892                           	opt stack 0
   893                           
   894                           ; 4 bytes @ 0x17
   895  000018                     	ds	1
   896  000019                     ??_ModbusProcess_FC3:
   897  000019                     ??_ModbusProcess_FC6:
   898  000019                     ??_ModbusProcess_FC16:
   899  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x18
   903  000019                     	ds	1
   904  00001A                     ModbusProcess_FC21@startAddrsBytes:
   905                           	opt stack 0
   906  00001A                     years_to_days@ret:
   907                           	opt stack 0
   908                           
   909                           ; 4 bytes @ 0x19
   910  00001A                     	ds	1
   911  00001B                     PlaySound@soundId:
   912                           	opt stack 0
   913  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   914                           	opt stack 0
   915  00001B                     ModbusProcess_FC1@u16coil:
   916                           	opt stack 0
   917  00001B                     ModbusProcess_FC6@u16val:
   918                           	opt stack 0
   919  00001B                     ModbusProcess_FC15@u16coil:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x1A
   923  00001B                     	ds	1
   924  00001C                     PlaySound@soundAddr:
   925                           	opt stack 0
   926  00001C                     ModbusProcess_FC5@u16coil:
   927                           	opt stack 0
   928  00001C                     ModbusProcess_FC21@recLenBytes:
   929                           	opt stack 0
   930  00001C                     ModbusValidateRequest@recLenBytes:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x1B
   934  00001C                     	ds	1
   935  00001D                     ??_ProcessDiary:
   936  00001D                     ??_CommandSetStatusLed:
   937  00001D                     SetHourMin@tmpSec:
   938                           	opt stack 0
   939  00001D                     ModbusProcess_FC1@u8currentBit:
   940                           	opt stack 0
   941  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   942                           	opt stack 0
   943  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   944                           	opt stack 0
   945  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   946                           	opt stack 0
   947  00001D                     ModbusProcess_FC16@temp:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x1C
   951  00001D                     	ds	1
   952  00001E                     ?_ymd_to_scalar:
   953                           	opt stack 0
   954  00001E                     SetHourMin@secToNext6Sec:
   955                           	opt stack 0
   956  00001E                     CommandSetStatusLed@commandData:
   957                           	opt stack 0
   958  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   959                           	opt stack 0
   960  00001E                     ModbusProcess_FC5@regs:
   961                           	opt stack 0
   962  00001E                     ModbusProcess_FC15@bTemp:
   963                           	opt stack 0
   964  00001E                     ModbusProcess_FC21@i:
   965                           	opt stack 0
   966  00001E                     ModbusProcess_FC3@u16regsno:
   967                           	opt stack 0
   968  00001E                     ModbusProcess_FC6@u16add:
   969                           	opt stack 0
   970  00001E                     ymd_to_scalar@yr:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x1D
   974  00001E                     	ds	1
   975  00001F                     CommandSetStatusLed@led:
   976                           	opt stack 0
   977  00001F                     ModbusProcess_FC1@u8bytesno:
   978                           	opt stack 0
   979  00001F                     ModbusProcess_FC5@u8currentBit:
   980                           	opt stack 0
   981  00001F                     ModbusProcess_FC15@u8frameByte:
   982                           	opt stack 0
   983  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x1E
   987  00001F                     	ds	1
   988  000020                     ProcessUserCommands@v1:
   989                           	opt stack 0
   990  000020                     ModbusProcess_FC3@u8StartAdd:
   991                           	opt stack 0
   992  000020                     ModbusValidateRequest@u16MsgCRC:
   993                           	opt stack 0
   994  000020                     ModbusProcess_FC1@u16StartCoil:
   995                           	opt stack 0
   996  000020                     ModbusProcess_FC15@u16StartCoil:
   997                           	opt stack 0
   998  000020                     ModbusProcess_FC16@u16StartAdd:
   999                           	opt stack 0
  1000  000020                     ymd_to_scalar@mo:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x1F
  1004  000020                     	ds	1
  1005  000021                     ??_io_poll:
  1006  000021                     ModbusProcess_FC3@i:
  1007                           	opt stack 0
  1008  000021                     ProcessDiary@totalMinutes:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x20
  1012  000021                     	ds	1
  1013  000022                     ModbusValidateRequest@isSupported:
  1014                           	opt stack 0
  1015  000022                     ModbusProcess_FC16@u8regsno:
  1016                           	opt stack 0
  1017  000022                     ModbusProcess_FC1@u16currentCoil:
  1018                           	opt stack 0
  1019  000022                     ModbusProcess_FC15@u16Coilno:
  1020                           	opt stack 0
  1021  000022                     ymd_to_scalar@day:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x21
  1025  000022                     	ds	1
  1026  000023                     ModbusProcess_FC16@i:
  1027                           	opt stack 0
  1028  000023                     ModbusValidateRequest@u16count:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x22
  1032  000023                     	ds	1
  1033  000024                     ??_ymd_to_scalar:
  1034  000024                     ModbusProcess_FC1@u8bitsno:
  1035                           	opt stack 0
  1036  000024                     ModbusProcess_FC15@regs:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x23
  1040  000024                     	ds	1
  1041  000025                     ModbusValidateRequest@i:
  1042                           	opt stack 0
  1043  000025                     ModbusProcess_FC15@u8currentBit:
  1044                           	opt stack 0
  1045  000025                     io_poll@lastEndAddress:
  1046                           	opt stack 0
  1047  000025                     ModbusProcess_FC1@u16Coilno:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x24
  1051  000025                     	ds	1
  1052  000026                     ModbusValidateRequest@readDevId:
  1053                           	opt stack 0
  1054  000026                     ModbusProcess_FC15@u16currentCoil:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x25
  1058  000026                     	ds	1
  1059  000027                     ModbusValidateRequest@u8regs:
  1060                           	opt stack 0
  1061  000027                     io_poll@lastAddress:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x26
  1065  000027                     	ds	1
  1066  000028                     ModbusProcess_FC15@u8bitsno:
  1067                           	opt stack 0
  1068  000028                     ModbusValidateRequest@u16regs:
  1069                           	opt stack 0
  1070  000028                     _ymd_to_scalar$2254:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x27
  1074  000028                     	ds	1
  1075  000029                     io_poll@lastCommand:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x28
  1079  000029                     	ds	1
  1080  00002A                     io_poll@lastFunction:
  1081                           	opt stack 0
  1082  00002A                     ymd_to_scalar@scalar:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x29
  1086  00002A                     	ds	4
  1087  00002E                     ?_mktime:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x2D
  1091  00002E                     	ds	4
  1092  000032                     ??_mktime:
  1093                           
  1094                           ; 1 bytes @ 0x31
  1095  000032                     	ds	14
  1096  000040                     mktime@tt:
  1097                           	opt stack 0
  1098                           
  1099                           ; 4 bytes @ 0x3F
  1100  000040                     	ds	4
  1101  000044                     mktime@timeptr:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x43
  1105  000044                     	ds	1
  1106  000045                     ModbusProcess_FC100@newRawTime:
  1107                           	opt stack 0
  1108                           
  1109                           ; 4 bytes @ 0x44
  1110  000045                     	ds	4
  1111  000049                     ModbusProcess_FC100@u8CopyBufferSize:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x48
  1115  000049                     	ds	1
  1116  00004A                     ModbusProcess_FC100@newTime:
  1117                           	opt stack 0
  1118                           
  1119                           ; 18 bytes @ 0x49
  1120  00004A                     	ds	18
  1121  00005C                     ModbusPoll@discreteInputs:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x5B
  1125  00005C                     	ds	2
  1126  00005E                     ModbusPoll@coils:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x5D
  1130  00005E                     	ds	1
  1131  00005F                     ModbusPoll@inputRegs:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x5E
  1135  00005F                     	ds	2
  1136  000061                     ModbusPoll@inputRegsCount:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x60
  1140  000061                     	ds	1
  1141  000062                     ModbusPoll@holdingRegs:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x61
  1145  000062                     	ds	2
  1146  000064                     ModbusPoll@holdingRegsCount:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x63
  1150  000064                     	ds	1
  1151  000065                     ModbusPoll@u8current:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x64
  1155  000065                     	ds	1
  1156  000066                     ModbusPoll@i8state:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x65
  1160  000066                     	ds	1
  1161  000067                     ModbusPoll@u8exception:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x66
  1165  000067                     	ds	1
  1166  000068                     ??_main:
  1167                           
  1168                           ; 1 bytes @ 0x67
  1169  000068                     	ds	5
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           postdec1	equ	0xFE5
  1177                           fsr1h	equ	0xFE2
  1178                           fsr1l	equ	0xFE1
  1179                           
  1180 ;;
  1181 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1182 ;;
  1183 ;; *************** function _main *****************
  1184 ;; Defined at:
  1185 ;;		line 760 in file "main.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  minute          1   10[BANK0 ] unsigned char 
  1190 ;;  hour            1    5[BANK0 ] unsigned char 
  1191 ;;  curMs           4    6[BANK0 ] unsigned long 
  1192 ;;  lastMs          4    0[BANK0 ] unsigned long 
  1193 ;;  oldBuzzerOnT    4    0        unsigned long 
  1194 ;;  oldMinute       1    4[BANK0 ] unsigned char 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1204 ;;      Params:         0       0       0       0       0       0       0
  1205 ;;      Locals:         0      11       0       0       0       0       0
  1206 ;;      Temps:          5       0       0       0       0       0       0
  1207 ;;      Totals:         5      11       0       0       0       0       0
  1208 ;;Total ram usage:       16 bytes
  1209 ;; Hardware stack levels required when called:    8
  1210 ;; This function calls:
  1211 ;;		_AddSecond
  1212 ;;		_ConfigureOscillator
  1213 ;;		_GetTime
  1214 ;;		_InitApp
  1215 ;;		_InitFromEeprom
  1216 ;;		_LightStatusLed
  1217 ;;		_ModbusPoll
  1218 ;;		_ProcessDiary
  1219 ;;		_ProcessLightBlock
  1220 ;;		_ResetEvent
  1221 ;;		_SoundPlayNextStep
  1222 ;;		_StopPlaying
  1223 ;;		_getHourMin
  1224 ;;		_io_poll
  1225 ;;		_millis
  1226 ;;		_pwm_init
  1227 ;; This function is called by:
  1228 ;;		Startup code after reset
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text0
  1233  0012EE                     __ptext0:
  1234                           	opt stack 0
  1235  0012EE                     _main:
  1236                           	opt stack 23
  1237                           
  1238                           ;incstack = 0
  1239  0012EE  FFFF               	dw	65535
  1240                           
  1241                           ;main.c: 763: ConfigureOscillator();
  1242  0012F0  ECF8  F016         	call	_ConfigureOscillator	;wreg free
  1243                           
  1244                           ;main.c: 766: InitApp();
  1245  0012F4  EC2E  F012         	call	_InitApp	;wreg free
  1246                           
  1247                           ;main.c: 770: InitFromEeprom();
  1248  0012F8  EC98  F011         	call	_InitFromEeprom	;wreg free
  1249                           
  1250                           ;main.c: 779: unsigned long lastMs = millis();
  1251  0012FC  EC23  F016         	call	_millis	;wreg free
  1252  001300  C007  F0EA         	movff	?_millis,main@lastMs
  1253  001304  C008  F0EB         	movff	?_millis+1,main@lastMs+1
  1254  001308  C009  F0EC         	movff	?_millis+2,main@lastMs+2
  1255  00130C  C00A  F0ED         	movff	?_millis+3,main@lastMs+3
  1256                           
  1257                           ;main.c: 788: unsigned long oldBuzzerOnTime = 0;
  1258  001310  ECB9  F016         	call	_pwm_init	;wreg free
  1259                           
  1260                           ;main.c: 789: uint8_t oldMinute = 0xff;
  1261  001314  0100               	movlb	0	; () banked
  1262  001316  69EE               	setf	main@oldMinute& (0+255),b
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 791: LightStatusLed(0x07, 1, 0);
  1266  001318  0E01               	movlw	1
  1267  00131A  6E07               	movwf	LightStatusLed@on,c
  1268  00131C  0E00               	movlw	0
  1269  00131E  6E08               	movwf	LightStatusLed@blink,c
  1270  001320  0E07               	movlw	7
  1271  001322  EC94  F00D         	call	_LightStatusLed
  1272                           
  1273                           ;main.c: 792: LightStatusLed(0x05, 1, 1);
  1274  001326  0E01               	movlw	1
  1275  001328  6E07               	movwf	LightStatusLed@on,c
  1276  00132A  6E08               	movwf	LightStatusLed@blink,c
  1277  00132C  0E05               	movlw	5
  1278  00132E  EC94  F00D         	call	_LightStatusLed
  1279  001332                     l7218:
  1280  001332  FFFF               	dw	65535	; assembler added errata NOP
  1281                           
  1282                           ;main.c: 794: {
  1283                           ;main.c: 795: unsigned long curMs = millis();
  1284  001334  EC23  F016         	call	_millis	;wreg free
  1285  001338  C007  F0F0         	movff	?_millis,main@curMs
  1286  00133C  C008  F0F1         	movff	?_millis+1,main@curMs+1
  1287  001340  C009  F0F2         	movff	?_millis+2,main@curMs+2
  1288  001344  C00A  F0F3         	movff	?_millis+3,main@curMs+3
  1289                           
  1290                           ;main.c: 796: ProcessLightBlock(&curMs);
  1291  001348  0EF0               	movlw	main@curMs& (0+255)
  1292  00134A  EC6D  F007         	call	_ProcessLightBlock
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 798: if(_isSoundPlaying && curMs >= _playingEndMs)
  1296  00134E  51D1               	movf	__isSoundPlaying& (0+255),w,b
  1297  001350  E00B               	bz	l7228
  1298                           
  1299                           ; BSR set to: 0
  1300  001352  51A0               	movf	__playingEndMs& (0+255),w,b
  1301  001354  5DF0               	subwf	main@curMs& (0+255),w,b
  1302  001356  51A1               	movf	(__playingEndMs+1)& (0+255),w,b
  1303  001358  59F1               	subwfb	(main@curMs+1)& (0+255),w,b
  1304  00135A  51A2               	movf	(__playingEndMs+2)& (0+255),w,b
  1305  00135C  59F2               	subwfb	(main@curMs+2)& (0+255),w,b
  1306  00135E  51A3               	movf	(__playingEndMs+3)& (0+255),w,b
  1307  001360  59F3               	subwfb	(main@curMs+3)& (0+255),w,b
  1308  001362  E302               	bnc	l7228
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;main.c: 799: {
  1312                           ;main.c: 800: SoundPlayNextStep();
  1313  001364  ECF4  F00F         	call	_SoundPlayNextStep	;wreg free
  1314  001368                     l7228:
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 801: }
  1318                           ;main.c: 804: if(PORTCbits.RC1 == 0)
  1319  001368  B282               	btfsc	3970,1,c	;volatile
  1320  00136A  D008               	goto	l7236
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;main.c: 805: {
  1324                           ;main.c: 807: if(currentAlarmedEventNum != 0xff)
  1325  00136C  2874               	incf	_currentAlarmedEventNum,w,c
  1326  00136E  E004               	bz	l7234
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 808: {
  1330                           ;main.c: 809: ResetEvent(1);
  1331  001370  0E01               	movlw	1
  1332  001372  EC0B  F015         	call	_ResetEvent
  1333                           
  1334                           ;main.c: 810: }
  1335  001376  D002               	goto	l7236
  1336  001378                     l7234:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 811: else
  1340                           ;main.c: 812: {
  1341                           ;main.c: 813: StopPlaying();
  1342  001378  ECCA  F016         	call	_StopPlaying	;wreg free
  1343  00137C                     l7236:
  1344  00137C  FFFF               	dw	65535	; assembler added errata NOP
  1345                           
  1346                           ;main.c: 814: }
  1347                           ;main.c: 816: }
  1348                           ;main.c: 819: if(curMs - lastMs >= 1000)
  1349  00137E  0100               	movlb	0	; () banked
  1350  001380  51EA               	movf	main@lastMs& (0+255),w,b
  1351  001382  5DF0               	subwf	main@curMs& (0+255),w,b
  1352  001384  6E68               	movwf	??_main& (0+255),c
  1353  001386  51EB               	movf	(main@lastMs+1)& (0+255),w,b
  1354  001388  59F1               	subwfb	(main@curMs+1)& (0+255),w,b
  1355  00138A  6E69               	movwf	(??_main+1)& (0+255),c
  1356  00138C  51EC               	movf	(main@lastMs+2)& (0+255),w,b
  1357  00138E  59F2               	subwfb	(main@curMs+2)& (0+255),w,b
  1358  001390  6E6A               	movwf	(??_main+2)& (0+255),c
  1359  001392  51ED               	movf	(main@lastMs+3)& (0+255),w,b
  1360  001394  59F3               	subwfb	(main@curMs+3)& (0+255),w,b
  1361  001396  6E6B               	movwf	(??_main+3)& (0+255),c
  1362  001398  506B               	movf	??_main+3,w,c
  1363  00139A  106A               	iorwf	??_main+2,w,c
  1364  00139C  E105               	bnz	u6010
  1365  00139E  0EE8               	movlw	232
  1366  0013A0  5C68               	subwf	??_main,w,c
  1367  0013A2  0E03               	movlw	3
  1368  0013A4  5869               	subwfb	??_main+1,w,c
  1369  0013A6  E34A               	bnc	l7266
  1370  0013A8                     u6010:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 820: {
  1374                           ;main.c: 821: AddSecond();
  1375  0013A8  ECC2  F016         	call	_AddSecond	;wreg free
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 823: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1379  0013AC  2874               	incf	_currentAlarmedEventNum,w,c
  1380  0013AE  E015               	bz	l7246
  1381                           
  1382                           ; BSR set to: 0
  1383  0013B0  ECF4  F016         	call	_GetTime	;wreg free
  1384  0013B4  6ED9               	movwf	fsr2l,c
  1385  0013B6  6ADA               	clrf	fsr2h,c
  1386  0013B8  0100               	movlb	0	; () banked
  1387  0013BA  51AC               	movf	_eventResetSecond& (0+255),w,b
  1388  0013BC  5CDE               	subwf	postinc2,w,c
  1389  0013BE  51AD               	movf	(_eventResetSecond+1)& (0+255),w,b
  1390  0013C0  58DE               	subwfb	postinc2,w,c
  1391  0013C2  51AE               	movf	(_eventResetSecond+2)& (0+255),w,b
  1392  0013C4  58DE               	subwfb	postinc2,w,c
  1393  0013C6  50DE               	movf	postinc2,w,c
  1394  0013C8  0A80               	xorlw	128
  1395  0013CA  6E6C               	movwf	(??_main+4)& (0+255),c
  1396  0013CC  51AF               	movf	(_eventResetSecond+3)& (0+255),w,b
  1397  0013CE  0A80               	xorlw	128
  1398  0013D0  586C               	subwfb	(??_main+4)& (0+255),w,c
  1399  0013D2  E303               	bnc	l7246
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 824: {
  1403                           ;main.c: 825: ResetEvent(0);
  1404  0013D4  0E00               	movlw	0
  1405  0013D6  EC0B  F015         	call	_ResetEvent
  1406  0013DA                     l7246:
  1407                           
  1408                           ;main.c: 826: }
  1409                           ;main.c: 828: _MODBUSInputRegs[5] = *GetTime();
  1410  0013DA  ECF4  F016         	call	_GetTime	;wreg free
  1411  0013DE  6ED9               	movwf	fsr2l,c
  1412  0013E0  6ADA               	clrf	fsr2h,c
  1413  0013E2  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1414  0013E6  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1415                           
  1416                           ;main.c: 829: uint8_t hour = 0, minute = 0;
  1417  0013EA  0100               	movlb	0	; () banked
  1418  0013EC  6BEF               	clrf	main@hour& (0+255),b
  1419                           
  1420                           ; BSR set to: 0
  1421  0013EE  6BF4               	clrf	main@minute& (0+255),b
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 831: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1425  0013F0  0EF4               	movlw	low main@minute
  1426  0013F2  6E07               	movwf	getHourMin@min,c
  1427  0013F4  0EEF               	movlw	main@hour& (0+255)
  1428  0013F6  ECF7  F015         	call	_getHourMin
  1429  0013FA  0900               	iorlw	0
  1430  0013FC  E00F               	bz	l7262
  1431  0013FE  0100               	movlb	0	; () banked
  1432  001400  51F4               	movf	main@minute& (0+255),w,b
  1433  001402  19EE               	xorwf	main@oldMinute& (0+255),w,b
  1434  001404  E00B               	bz	l7262
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 832: {
  1438                           ;main.c: 833: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1439  001406  51EF               	movf	main@hour& (0+255),w,b
  1440  001408  6E68               	movwf	??_main& (0+255),c
  1441  00140A  51F4               	movf	main@minute& (0+255),w,b
  1442  00140C  0101               	movlb	1	; () banked
  1443  00140E  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1444  001410  C068  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 835: oldMinute = minute;
  1448  001414  C0F4  F0EE         	movff	main@minute,main@oldMinute
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 836: ProcessDiary();
  1452  001418  ECE1  F00E         	call	_ProcessDiary	;wreg free
  1453  00141C                     l7262:
  1454                           
  1455                           ;main.c: 837: }
  1456                           ;main.c: 839: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1457  00141C  0100               	movlb	0	; () banked
  1458  00141E  51EF               	movf	main@hour& (0+255),w,b
  1459  001420  6E68               	movwf	??_main& (0+255),c
  1460  001422  51F4               	movf	main@minute& (0+255),w,b
  1461  001424  0101               	movlb	1	; () banked
  1462  001426  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1463  001428  C068  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1464                           
  1465                           ; BSR set to: 1
  1466                           ;main.c: 841: lastMs = curMs;
  1467  00142C  C0F0  F0EA         	movff	main@curMs,main@lastMs
  1468  001430  C0F1  F0EB         	movff	main@curMs+1,main@lastMs+1
  1469  001434  C0F2  F0EC         	movff	main@curMs+2,main@lastMs+2
  1470  001438  C0F3  F0ED         	movff	main@curMs+3,main@lastMs+3
  1471  00143C                     l7266:
  1472                           
  1473                           ;main.c: 843: }
  1474                           ;main.c: 844: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1475  00143C  6A5D               	clrf	ModbusPoll@discreteInputs+1,c
  1476  00143E  6A5C               	clrf	ModbusPoll@discreteInputs,c
  1477  001440  0EDF               	movlw	low __MODBUSCoils
  1478  001442  6E5E               	movwf	ModbusPoll@coils,c
  1479  001444  0EAA               	movlw	low __MODBUSInputRegs
  1480  001446  6E5F               	movwf	ModbusPoll@inputRegs,c
  1481  001448  0E01               	movlw	high __MODBUSInputRegs
  1482  00144A  6E60               	movwf	ModbusPoll@inputRegs+1,c
  1483  00144C  0E0F               	movlw	15
  1484  00144E  6E61               	movwf	ModbusPoll@inputRegsCount,c
  1485  001450  0E8C               	movlw	low __MODBUSHoldingRegs
  1486  001452  6E62               	movwf	ModbusPoll@holdingRegs,c
  1487  001454  0E01               	movlw	high __MODBUSHoldingRegs
  1488  001456  6E63               	movwf	ModbusPoll@holdingRegs+1,c
  1489  001458  0E0F               	movlw	15
  1490  00145A  6E64               	movwf	ModbusPoll@holdingRegsCount,c
  1491  00145C  ECA6  F008         	call	_ModbusPoll	;wreg free
  1492                           
  1493                           ;main.c: 845: io_poll();
  1494  001460  ECE7  F011         	call	_io_poll	;wreg free
  1495  001464  D766               	goto	l7218
  1496  001466                     __end_of_main:
  1497                           	opt stack 0
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1h	equ	0xFE2
  1506                           fsr1l	equ	0xFE1
  1507                           postinc2	equ	0xFDE
  1508                           postdec2	equ	0xFDD
  1509                           fsr2h	equ	0xFDA
  1510                           fsr2l	equ	0xFD9
  1511                           
  1512 ;; *************** function _pwm_init *****************
  1513 ;; Defined at:
  1514 ;;		line 355 in file "main.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1528 ;;      Params:         0       0       0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0
  1531 ;;      Totals:         0       0       0       0       0       0       0
  1532 ;;Total ram usage:        0 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    2
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text1
  1543  002D72                     __ptext1:
  1544                           	opt stack 0
  1545  002D72                     _pwm_init:
  1546                           	opt stack 28
  1547                           
  1548                           ;incstack = 0
  1549  002D72  FFFF               	dw	65535
  1550                           
  1551                           ;main.c: 367: CCP1CONbits.CCP1M = 0x0f;
  1552  002D74  0E0F               	movlw	15
  1553  002D76  12BD               	iorwf	4029,f,c	;volatile
  1554                           
  1555                           ;main.c: 374: PR2 = 255;
  1556  002D78  68CB               	setf	4043,c	;volatile
  1557                           
  1558                           ;main.c: 377: T2CONbits.T2CKPS1 = 1;
  1559  002D7A  82CA               	bsf	4042,1,c	;volatile
  1560                           
  1561                           ;main.c: 378: T2CONbits.T2CKPS0 = 0;
  1562  002D7C  90CA               	bcf	4042,0,c	;volatile
  1563                           
  1564                           ;main.c: 381: TRISCbits.RC2 = 0;
  1565  002D7E  9494               	bcf	3988,2,c	;volatile
  1566  002D80  0012               	return		;funcret
  1567  002D82  FFFF               	dw	65535	; errata NOP
  1568  002D84                     __end_of_pwm_init:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1h	equ	0xFE2
  1578                           fsr1l	equ	0xFE1
  1579                           postinc2	equ	0xFDE
  1580                           postdec2	equ	0xFDD
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           
  1584 ;; *************** function _io_poll *****************
  1585 ;; Defined at:
  1586 ;;		line 933 in file "main.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  lastAddress     2   38[COMRAM] unsigned int 
  1591 ;;  lastEndAddre    2   36[COMRAM] unsigned int 
  1592 ;;  lastFunction    1   41[COMRAM] PTR unsigned char 
  1593 ;;		 -> _lastFunction(1), 
  1594 ;;  lastCommand     1   40[COMRAM] unsigned char 
  1595 ;;  v1              1    0        unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  1    wreg      void 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1605 ;;      Params:         0       0       0       0       0       0       0
  1606 ;;      Locals:         6       0       0       0       0       0       0
  1607 ;;      Temps:          4       0       0       0       0       0       0
  1608 ;;      Totals:        10       0       0       0       0       0       0
  1609 ;;Total ram usage:       10 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    7
  1612 ;; This function calls:
  1613 ;;		_InitFromEeprom
  1614 ;;		_LightStatusLed
  1615 ;;		_LoadNextEvent
  1616 ;;		_ModbusGetLastCommand
  1617 ;;		_ModbusSetExceptionStatusBit
  1618 ;;		_ProcessUserCommands
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text2
  1625  0023CE                     __ptext2:
  1626                           	opt stack 0
  1627  0023CE                     _io_poll:
  1628                           	opt stack 23
  1629                           
  1630                           ;incstack = 0
  1631  0023CE  FFFF               	dw	65535
  1632                           
  1633                           ;main.c: 935: uint16_t lastAddress;
  1634                           ;main.c: 936: uint16_t lastEndAddress;
  1635                           ;main.c: 937: uint8_t lastCommand;
  1636                           ;main.c: 939: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddress
      +                          , &lastCommand);
  1637  0023D0  0E25               	movlw	low io_poll@lastEndAddress
  1638  0023D2  6E07               	movwf	ModbusGetLastCommand@count,c
  1639  0023D4  0E29               	movlw	low io_poll@lastCommand
  1640  0023D6  6E08               	movwf	ModbusGetLastCommand@command,c
  1641  0023D8  0E27               	movlw	io_poll@lastAddress& (0+255)
  1642  0023DA  EC6B  F015         	call	_ModbusGetLastCommand
  1643  0023DE  6E2A               	movwf	io_poll@lastFunction,c
  1644                           
  1645                           ;main.c: 940: if(*lastFunction == MB_FC_NONE)
  1646  0023E0  502A               	movf	io_poll@lastFunction,w,c
  1647  0023E2  6ED9               	movwf	fsr2l,c
  1648  0023E4  6ADA               	clrf	fsr2h,c
  1649  0023E6  50DF               	movf	indf2,w,c
  1650  0023E8  E036               	bz	l460
  1651                           
  1652                           ;main.c: 943: lastEndAddress += lastAddress - 1;
  1653  0023EA  6821               	setf	??_io_poll& (0+255),c
  1654  0023EC  6822               	setf	(??_io_poll+1)& (0+255),c
  1655  0023EE  C027  F023         	movff	io_poll@lastAddress,??_io_poll+2
  1656  0023F2  C028  F024         	movff	io_poll@lastAddress+1,??_io_poll+3
  1657  0023F6  5021               	movf	??_io_poll,w,c
  1658  0023F8  2623               	addwf	??_io_poll+2,f,c
  1659  0023FA  5022               	movf	??_io_poll+1,w,c
  1660  0023FC  2224               	addwfc	??_io_poll+3,f,c
  1661  0023FE  5023               	movf	??_io_poll+2,w,c
  1662  002400  2625               	addwf	io_poll@lastEndAddress,f,c
  1663  002402  5024               	movf	??_io_poll+3,w,c
  1664  002404  2226               	addwfc	io_poll@lastEndAddress+1,f,c
  1665                           
  1666                           ;main.c: 945: uint8_t v1;
  1667                           ;main.c: 946: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  1668  002406  502A               	movf	io_poll@lastFunction,w,c
  1669  002408  6ED9               	movwf	fsr2l,c
  1670  00240A  6ADA               	clrf	fsr2h,c
  1671  00240C  0E64               	movlw	100
  1672  00240E  18DE               	xorwf	postinc2,w,c
  1673  002410  E10C               	bnz	l7186
  1674                           
  1675                           ;main.c: 947: {
  1676                           ;main.c: 948: if(lastCommand == 0x10)
  1677  002412  0E10               	movlw	16
  1678  002414  1829               	xorwf	io_poll@lastCommand,w,c
  1679  002416  E11F               	bnz	l460
  1680                           
  1681                           ;main.c: 949: {
  1682                           ;main.c: 950: LightStatusLed(0x05, 0, 0);
  1683  002418  0E00               	movlw	0
  1684  00241A  6E07               	movwf	LightStatusLed@on,c
  1685  00241C  6E08               	movwf	LightStatusLed@blink,c
  1686  00241E  0E05               	movlw	5
  1687  002420  EC94  F00D         	call	_LightStatusLed
  1688                           
  1689                           ;main.c: 951: LoadNextEvent();
  1690  002424  EC7A  F00B         	call	_LoadNextEvent	;wreg free
  1691  002428  D016               	goto	l460
  1692  00242A                     l7186:
  1693                           
  1694                           ;main.c: 954: }
  1695                           ;main.c: 955: if(*lastFunction == MB_FC_USER_COMMAND)
  1696  00242A  502A               	movf	io_poll@lastFunction,w,c
  1697  00242C  6ED9               	movwf	fsr2l,c
  1698  00242E  6ADA               	clrf	fsr2h,c
  1699  002430  0E65               	movlw	101
  1700  002432  18DE               	xorwf	postinc2,w,c
  1701  002434  E103               	bnz	l7196
  1702                           
  1703                           ;main.c: 956: {
  1704                           ;main.c: 957: ProcessUserCommands();
  1705  002436  EC3E  F00F         	call	_ProcessUserCommands	;wreg free
  1706  00243A  D00D               	goto	l460
  1707  00243C                     l7196:
  1708                           
  1709                           ;main.c: 1037: }
  1710                           ;main.c: 1040: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  1711  00243C  502A               	movf	io_poll@lastFunction,w,c
  1712  00243E  6ED9               	movwf	fsr2l,c
  1713  002440  6ADA               	clrf	fsr2h,c
  1714  002442  0E15               	movlw	21
  1715  002444  18DE               	xorwf	postinc2,w,c
  1716  002446  E107               	bnz	l460
  1717                           
  1718                           ;main.c: 1041: {
  1719                           ;main.c: 1042: InitFromEeprom();
  1720  002448  EC98  F011         	call	_InitFromEeprom	;wreg free
  1721                           
  1722                           ;main.c: 1043: ModbusSetExceptionStatusBit(0, 1);
  1723  00244C  0E01               	movlw	1
  1724  00244E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1725  002450  0E00               	movlw	0
  1726  002452  EC32  F014         	call	_ModbusSetExceptionStatusBit
  1727  002456                     l460:
  1728  002456  FFFF               	dw	65535	; assembler added errata NOP
  1729  002458  0012               	return		;funcret
  1730  00245A  FFFF               	dw	65535	; errata NOP
  1731  00245C                     __end_of_io_poll:
  1732                           	opt stack 0
  1733                           tblptru	equ	0xFF8
  1734                           tblptrh	equ	0xFF7
  1735                           tblptrl	equ	0xFF6
  1736                           tablat	equ	0xFF5
  1737                           postinc0	equ	0xFEE
  1738                           wreg	equ	0xFE8
  1739                           postdec1	equ	0xFE5
  1740                           fsr1h	equ	0xFE2
  1741                           fsr1l	equ	0xFE1
  1742                           indf2	equ	0xFDF
  1743                           postinc2	equ	0xFDE
  1744                           postdec2	equ	0xFDD
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           
  1748 ;; *************** function _ProcessUserCommands *****************
  1749 ;; Defined at:
  1750 ;;		line 898 in file "main.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  v1              1   31[COMRAM] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1764 ;;      Params:         0       0       0       0       0       0       0
  1765 ;;      Locals:         1       0       0       0       0       0       0
  1766 ;;      Temps:          0       0       0       0       0       0       0
  1767 ;;      Totals:         1       0       0       0       0       0       0
  1768 ;;Total ram usage:        1 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    6
  1771 ;; This function calls:
  1772 ;;		_CommandSetStatusLed
  1773 ;;		_LightLed
  1774 ;;		_ModbusGetUserCommandAdditional1Hi
  1775 ;;		_ModbusGetUserCommandAdditional1Lo
  1776 ;;		_ModbusGetUserCommandData
  1777 ;;		_ModbusGetUserCommandId
  1778 ;;		_ModbusSetExceptionStatusBit
  1779 ;;		_PlaySound
  1780 ;; This function is called by:
  1781 ;;		_io_poll
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text3
  1786  001E7C                     __ptext3:
  1787                           	opt stack 0
  1788  001E7C                     _ProcessUserCommands:
  1789                           	opt stack 23
  1790                           
  1791                           ;incstack = 0
  1792  001E7C  FFFF               	dw	65535
  1793                           
  1794                           ;main.c: 900: uint8_t v1;
  1795                           ;main.c: 901: switch(*ModbusGetUserCommandId())
  1796  001E7E  D048               	goto	l6092
  1797  001E80                     l444:
  1798                           
  1799                           ;main.c: 904: eventCount = 0;
  1800  001E80  0100               	movlb	0	; () banked
  1801  001E82  6BDA               	clrf	_eventCount& (0+255),b
  1802  001E84                     l446:
  1803  001E84  FFFF               	dw	65535	; assembler added errata NOP
  1804  001E86  B2A6               	btfsc	4006,1,c	;volatile
  1805  001E88  D7FD               	goto	l446
  1806  001E8A  0E12               	movlw	18
  1807  001E8C  6EA9               	movwf	4009,c	;volatile
  1808  001E8E  6AA8               	clrf	4008,c	;volatile
  1809  001E90  90D8               	bcf	status,0,c	;volatile
  1810  001E92  BEF2               	btfsc	intcon,7,c	;volatile
  1811  001E94  80D8               	bsf	status,0,c	;volatile
  1812  001E96  9EF2               	bcf	intcon,7,c	;volatile
  1813  001E98  84A6               	bsf	4006,2,c	;volatile
  1814  001E9A  0E55               	movlw	85
  1815  001E9C  6EA7               	movwf	4007,c	;volatile
  1816  001E9E  0EAA               	movlw	170
  1817  001EA0  6EA7               	movwf	4007,c	;volatile
  1818  001EA2  82A6               	bsf	4006,1,c	;volatile
  1819  001EA4  94A6               	bcf	4006,2,c	;volatile
  1820  001EA6  E301               	bnc	l6078
  1821  001EA8  8EF2               	bsf	intcon,7,c	;volatile
  1822  001EAA                     l6078:
  1823                           
  1824                           ;main.c: 906: ModbusSetExceptionStatusBit(0, 1);
  1825  001EAA  0E01               	movlw	1
  1826  001EAC  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1827  001EAE  0E00               	movlw	0
  1828  001EB0  EC32  F014         	call	_ModbusSetExceptionStatusBit
  1829                           
  1830                           ;main.c: 907: break;
  1831  001EB4  D03B               	goto	l456
  1832  001EB6                     l6080:
  1833                           
  1834                           ;main.c: 911: v1 = *ModbusGetUserCommandAdditional1Lo();
  1835  001EB6  ECEC  F016         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  1836  001EBA  6ED9               	movwf	fsr2l,c
  1837  001EBC  6ADA               	clrf	fsr2h,c
  1838  001EBE  50DF               	movf	indf2,w,c
  1839  001EC0  6E20               	movwf	ProcessUserCommands@v1,c
  1840                           
  1841                           ;main.c: 913: LightLed(*ModbusGetUserCommandAdditional1Hi(), v1 & 0x03, (((v1) >> (2)) &
      +                           0x01));
  1842  001EC2  5020               	movf	ProcessUserCommands@v1,w,c
  1843  001EC4  0B03               	andlw	3
  1844  001EC6  6E09               	movwf	LightLed@ledState,c
  1845  001EC8  4020               	rrncf	ProcessUserCommands@v1,w,c
  1846  001ECA  42E8               	rrncf	wreg,f,c
  1847  001ECC  0B3F               	andlw	63
  1848  001ECE  0B01               	andlw	1
  1849  001ED0  6E0A               	movwf	LightLed@blink,c
  1850  001ED2  ECF0  F016         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  1851  001ED6  6ED9               	movwf	fsr2l,c
  1852  001ED8  6ADA               	clrf	fsr2h,c
  1853  001EDA  50DF               	movf	indf2,w,c
  1854  001EDC  ECB5  F004         	call	_LightLed
  1855                           
  1856                           ;main.c: 914: ModbusSetExceptionStatusBit(0, 1);
  1857  001EE0  0E01               	movlw	1
  1858  001EE2  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1859  001EE4  0E00               	movlw	0
  1860  001EE6  EC32  F014         	call	_ModbusSetExceptionStatusBit
  1861                           
  1862                           ;main.c: 915: break;
  1863  001EEA  D020               	goto	l456
  1864  001EEC                     l6086:
  1865                           
  1866                           ;main.c: 924: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo(
      +                          ));
  1867  001EEC  ECEC  F016         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  1868  001EF0  6ED9               	movwf	fsr2l,c
  1869  001EF2  6ADA               	clrf	fsr2h,c
  1870  001EF4  50DF               	movf	indf2,w,c
  1871  001EF6  6E15               	movwf	PlaySound@playDuration,c
  1872  001EF8  6A16               	clrf	PlaySound@playDuration+1,c
  1873  001EFA  ECE8  F016         	call	_ModbusGetUserCommandData	;wreg free
  1874  001EFE  6ED9               	movwf	fsr2l,c
  1875  001F00  6ADA               	clrf	fsr2h,c
  1876  001F02  50DF               	movf	indf2,w,c
  1877  001F04  EC0F  F00E         	call	_PlaySound
  1878                           
  1879                           ;main.c: 925: break;
  1880  001F08  D011               	goto	l456
  1881  001F0A                     l6088:
  1882                           
  1883                           ;main.c: 928: CommandSetStatusLed();
  1884  001F0A  EC70  F012         	call	_CommandSetStatusLed	;wreg free
  1885                           
  1886                           ;main.c: 929: break;
  1887  001F0E  D00E               	goto	l456
  1888  001F10                     l6092:
  1889  001F10  FFFF               	dw	65535	; assembler added errata NOP
  1890  001F12  ECE4  F016         	call	_ModbusGetUserCommandId	;wreg free
  1891  001F16  6ED9               	movwf	fsr2l,c
  1892  001F18  6ADA               	clrf	fsr2h,c
  1893  001F1A  50DF               	movf	indf2,w,c
  1894                           
  1895                           ; Switch size 1, requested type "speed"
  1896                           ; Number of cases is 4, Range of values is 128 to 145
  1897                           ; switch strategies available:
  1898                           ; Name         Instructions Cycles
  1899                           ; simple_byte           13     7 (average)
  1900                           ;	Chosen strategy is simple_byte
  1901  001F1C  0A80               	xorlw	128	; case 128
  1902  001F1E  E0B0               	bz	l444
  1903  001F20  0A02               	xorlw	2	; case 130
  1904  001F22  E0C9               	bz	l6080
  1905  001F24  0A01               	xorlw	1	; case 131
  1906  001F26  E0F1               	bz	l6088
  1907  001F28  0A12               	xorlw	18	; case 145
  1908  001F2A  E0E0               	bz	l6086
  1909  001F2C                     l456:
  1910  001F2C  FFFF               	dw	65535	; assembler added errata NOP
  1911  001F2E  0012               	return		;funcret
  1912  001F30  FFFF               	dw	65535	; errata NOP
  1913  001F32                     __end_of_ProcessUserCommands:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1h	equ	0xFE2
  1924                           fsr1l	equ	0xFE1
  1925                           indf2	equ	0xFDF
  1926                           postinc2	equ	0xFDE
  1927                           postdec2	equ	0xFDD
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _ModbusGetUserCommandId *****************
  1933 ;; Defined at:
  1934 ;;		line 192 in file "ModbusRtu.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      PTR unsigned char 
  1941 ;; Registers used:
  1942 ;;		wreg
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1948 ;;      Params:         2       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0
  1951 ;;      Totals:         2       0       0       0       0       0       0
  1952 ;;Total ram usage:        2 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_ProcessUserCommands
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text4
  1963  002DC8                     __ptext4:
  1964                           	opt stack 0
  1965  002DC8                     _ModbusGetUserCommandId:
  1966                           	opt stack 26
  1967                           
  1968                           ;incstack = 0
  1969  002DC8  FFFF               	dw	65535
  1970  002DCA  0EE8               	movlw	_ModbusUserCommandId& (0+255)
  1971  002DCC  0012               	return		;funcret
  1972  002DCE  FFFF               	dw	65535	; errata NOP
  1973  002DD0                     __end_of_ModbusGetUserCommandId:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           intcon	equ	0xFF2
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1h	equ	0xFE2
  1984                           fsr1l	equ	0xFE1
  1985                           indf2	equ	0xFDF
  1986                           postinc2	equ	0xFDE
  1987                           postdec2	equ	0xFDD
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _CommandSetStatusLed *****************
  1993 ;; Defined at:
  1994 ;;		line 879 in file "main.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  led             1   30[COMRAM] unsigned char 
  1999 ;;  commandData     1   29[COMRAM] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2009 ;;      Params:         0       0       0       0       0       0       0
  2010 ;;      Locals:         2       0       0       0       0       0       0
  2011 ;;      Temps:          1       0       0       0       0       0       0
  2012 ;;      Totals:         3       0       0       0       0       0       0
  2013 ;;Total ram usage:        3 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    5
  2016 ;; This function calls:
  2017 ;;		_LightStatusLed
  2018 ;;		_ModbusGetUserCommandAdditional1Hi
  2019 ;;		_ModbusGetUserCommandAdditional1Lo
  2020 ;;		_ModbusGetUserCommandData
  2021 ;;		_ModbusSetExceptionStatusBit
  2022 ;;		_PlaySound
  2023 ;;		_StopPlaying
  2024 ;; This function is called by:
  2025 ;;		_ProcessUserCommands
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text5
  2030  0024E0                     __ptext5:
  2031                           	opt stack 0
  2032  0024E0                     _CommandSetStatusLed:
  2033                           	opt stack 23
  2034                           
  2035                           ;incstack = 0
  2036  0024E0  FFFF               	dw	65535
  2037                           
  2038                           ;main.c: 883: uint8_t commandData = *ModbusGetUserCommandData();
  2039  0024E2  ECE8  F016         	call	_ModbusGetUserCommandData	;wreg free
  2040  0024E6  6ED9               	movwf	fsr2l,c
  2041  0024E8  6ADA               	clrf	fsr2h,c
  2042  0024EA  50DF               	movf	indf2,w,c
  2043  0024EC  6E1E               	movwf	CommandSetStatusLed@commandData,c
  2044                           
  2045                           ;main.c: 884: uint8_t led = commandData & 0x07;
  2046  0024EE  501E               	movf	CommandSetStatusLed@commandData,w,c
  2047  0024F0  0B07               	andlw	7
  2048  0024F2  6E1F               	movwf	CommandSetStatusLed@led,c
  2049                           
  2050                           ;main.c: 885: if(led >= 0x05)
  2051  0024F4  0E04               	movlw	4
  2052  0024F6  641F               	cpfsgt	CommandSetStatusLed@led,c
  2053  0024F8  D001               	goto	l5930
  2054  0024FA  D02E               	goto	l439
  2055  0024FC                     l5930:
  2056  0024FC  FFFF               	dw	65535	; assembler added errata NOP
  2057                           
  2058                           ;main.c: 887: if((((commandData) >> (7)) & 0x01) == 0)
  2059  0024FE  6A1D               	clrf	??_CommandSetStatusLed& (0+255),c
  2060  002500  AE1E               	btfss	CommandSetStatusLed@commandData,7,c
  2061  002502  D001               	bra	u4885
  2062  002504  2A1D               	incf	??_CommandSetStatusLed& (0+255),f,c
  2063  002506                     u4885:
  2064  002506  B01D               	btfsc	??_CommandSetStatusLed,0,c
  2065  002508  D009               	goto	l5938
  2066                           
  2067                           ;main.c: 888: {
  2068                           ;main.c: 889: LightStatusLed(led, 0, 0);
  2069  00250A  0E00               	movlw	0
  2070  00250C  6E07               	movwf	LightStatusLed@on,c
  2071  00250E  6E08               	movwf	LightStatusLed@blink,c
  2072  002510  501F               	movf	CommandSetStatusLed@led,w,c
  2073  002512  EC94  F00D         	call	_LightStatusLed
  2074                           
  2075                           ;main.c: 890: StopPlaying();
  2076  002516  ECCA  F016         	call	_StopPlaying	;wreg free
  2077  00251A  D01E               	goto	l439
  2078  00251C                     l5938:
  2079  00251C  FFFF               	dw	65535	; assembler added errata NOP
  2080                           
  2081                           ;main.c: 892: }
  2082                           ;main.c: 893: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  2083  00251E  0E01               	movlw	1
  2084  002520  6E07               	movwf	LightStatusLed@on,c
  2085  002522  441E               	rlncf	CommandSetStatusLed@commandData,w,c
  2086  002524  46E8               	rlncf	wreg,f,c
  2087  002526  0B03               	andlw	3
  2088  002528  0B01               	andlw	1
  2089  00252A  6E08               	movwf	LightStatusLed@blink,c
  2090  00252C  501F               	movf	CommandSetStatusLed@led,w,c
  2091  00252E  EC94  F00D         	call	_LightStatusLed
  2092                           
  2093                           ;main.c: 894: PlaySound(*ModbusGetUserCommandAdditional1Hi(), *ModbusGetUserCommandAddit
      +                          ional1Lo());
  2094  002532  ECEC  F016         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2095  002536  6ED9               	movwf	fsr2l,c
  2096  002538  6ADA               	clrf	fsr2h,c
  2097  00253A  50DF               	movf	indf2,w,c
  2098  00253C  6E15               	movwf	PlaySound@playDuration,c
  2099  00253E  6A16               	clrf	PlaySound@playDuration+1,c
  2100  002540  ECF0  F016         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2101  002544  6ED9               	movwf	fsr2l,c
  2102  002546  6ADA               	clrf	fsr2h,c
  2103  002548  50DF               	movf	indf2,w,c
  2104  00254A  EC0F  F00E         	call	_PlaySound
  2105                           
  2106                           ;main.c: 895: ModbusSetExceptionStatusBit(0, 1);
  2107  00254E  0E01               	movlw	1
  2108  002550  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2109  002552  0E00               	movlw	0
  2110  002554  EC32  F014         	call	_ModbusSetExceptionStatusBit
  2111  002558                     l439:
  2112  002558  FFFF               	dw	65535	; assembler added errata NOP
  2113  00255A  0012               	return		;funcret
  2114  00255C  FFFF               	dw	65535	; errata NOP
  2115  00255E                     __end_of_CommandSetStatusLed:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1h	equ	0xFE2
  2126                           fsr1l	equ	0xFE1
  2127                           indf2	equ	0xFDF
  2128                           postinc2	equ	0xFDE
  2129                           postdec2	equ	0xFDD
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _ModbusGetUserCommandData *****************
  2135 ;; Defined at:
  2136 ;;		line 193 in file "ModbusRtu.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      PTR unsigned char 
  2143 ;; Registers used:
  2144 ;;		wreg
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2150 ;;      Params:         2       0       0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0
  2153 ;;      Totals:         2       0       0       0       0       0       0
  2154 ;;Total ram usage:        2 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_CommandSetStatusLed
  2161 ;;		_ProcessUserCommands
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text6
  2166  002DD0                     __ptext6:
  2167                           	opt stack 0
  2168  002DD0                     _ModbusGetUserCommandData:
  2169                           	opt stack 26
  2170                           
  2171                           ;incstack = 0
  2172  002DD0  FFFF               	dw	65535
  2173  002DD2  0EE7               	movlw	_ModbusUserCommandData& (0+255)
  2174  002DD4  0012               	return		;funcret
  2175  002DD6  FFFF               	dw	65535	; errata NOP
  2176  002DD8                     __end_of_ModbusGetUserCommandData:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           fsr1h	equ	0xFE2
  2187                           fsr1l	equ	0xFE1
  2188                           indf2	equ	0xFDF
  2189                           postinc2	equ	0xFDE
  2190                           postdec2	equ	0xFDD
  2191                           fsr2h	equ	0xFDA
  2192                           fsr2l	equ	0xFD9
  2193                           status	equ	0xFD8
  2194                           
  2195 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  2196 ;; Defined at:
  2197 ;;		line 199 in file "ModbusRtu.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      PTR unsigned char 
  2204 ;; Registers used:
  2205 ;;		wreg
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2211 ;;      Params:         2       0       0       0       0       0       0
  2212 ;;      Locals:         0       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0
  2214 ;;      Totals:         2       0       0       0       0       0       0
  2215 ;;Total ram usage:        2 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    2
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_CommandSetStatusLed
  2222 ;;		_ProcessUserCommands
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text7
  2227  002DD8                     __ptext7:
  2228                           	opt stack 0
  2229  002DD8                     _ModbusGetUserCommandAdditional1Lo:
  2230                           	opt stack 26
  2231                           
  2232                           ;incstack = 0
  2233  002DD8  FFFF               	dw	65535
  2234  002DDA  0EE2               	movlw	_ModbusUserCommandAdditional1Lo& (0+255)
  2235  002DDC  0012               	return		;funcret
  2236  002DDE  FFFF               	dw	65535	; errata NOP
  2237  002DE0                     __end_of_ModbusGetUserCommandAdditional1Lo:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           postdec1	equ	0xFE5
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  2257 ;; Defined at:
  2258 ;;		line 198 in file "ModbusRtu.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      PTR unsigned char 
  2265 ;; Registers used:
  2266 ;;		wreg
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2272 ;;      Params:         2       0       0       0       0       0       0
  2273 ;;      Locals:         0       0       0       0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0
  2275 ;;      Totals:         2       0       0       0       0       0       0
  2276 ;;Total ram usage:        2 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    2
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_CommandSetStatusLed
  2283 ;;		_ProcessUserCommands
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text8
  2288  002DE0                     __ptext8:
  2289                           	opt stack 0
  2290  002DE0                     _ModbusGetUserCommandAdditional1Hi:
  2291                           	opt stack 26
  2292                           
  2293                           ;incstack = 0
  2294  002DE0  FFFF               	dw	65535
  2295  002DE2  0EE1               	movlw	_ModbusUserCommandAdditional1Hi& (0+255)
  2296  002DE4  0012               	return		;funcret
  2297  002DE6  FFFF               	dw	65535	; errata NOP
  2298  002DE8                     __end_of_ModbusGetUserCommandAdditional1Hi:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           intcon	equ	0xFF2
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           indf2	equ	0xFDF
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _LightStatusLed *****************
  2318 ;; Defined at:
  2319 ;;		line 344 in file "main.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  row             1    wreg     unsigned char 
  2322 ;;  on              1    6[COMRAM] unsigned char 
  2323 ;;  blink           1    7[COMRAM] unsigned char 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  row             1   13[COMRAM] unsigned char 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, status,2, status,0
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2335 ;;      Params:         2       0       0       0       0       0       0
  2336 ;;      Locals:         1       0       0       0       0       0       0
  2337 ;;      Temps:          5       0       0       0       0       0       0
  2338 ;;      Totals:         8       0       0       0       0       0       0
  2339 ;;Total ram usage:        8 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    2
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;;		_CommandSetStatusLed
  2347 ;;		_io_poll
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text9
  2352  001B28                     __ptext9:
  2353                           	opt stack 0
  2354  001B28                     _LightStatusLed:
  2355                           	opt stack 25
  2356                           
  2357                           ;incstack = 0
  2358  001B28  FFFF               	dw	65535
  2359                           
  2360                           ;LightStatusLed@row stored from wreg
  2361  001B2A  6E0E               	movwf	LightStatusLed@row,c
  2362                           
  2363                           ;main.c: 346: if(row > 7)
  2364  001B2C  0E07               	movlw	7
  2365  001B2E  640E               	cpfsgt	LightStatusLed@row,c
  2366  001B30  D001               	goto	l5572
  2367  001B32  D072               	goto	l290
  2368  001B34                     l5572:
  2369  001B34  FFFF               	dw	65535	; assembler added errata NOP
  2370                           
  2371                           ;main.c: 348: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  2372  001B36  5007               	movf	LightStatusLed@on,w,c
  2373  001B38  E010               	bz	l5576
  2374  001B3A  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2375  001B3E  0E01               	movlw	1
  2376  001B40  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2377  001B42  2A09               	incf	??_LightStatusLed,f,c
  2378  001B44  D003               	goto	u4304
  2379  001B46                     u4305:
  2380  001B46  FFFF               	dw	65535	; assembler added errata NOP
  2381  001B48  90D8               	bcf	status,0,c
  2382  001B4A  360A               	rlcf	??_LightStatusLed+1,f,c
  2383  001B4C                     u4304:
  2384  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  2385  001B4E  2E09               	decfsz	??_LightStatusLed,f,c
  2386  001B50  D7FA               	goto	u4305
  2387  001B52  500A               	movf	??_LightStatusLed+1,w,c
  2388  001B54  0100               	movlb	0	; () banked
  2389  001B56  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  2390  001B58  D00F               	goto	l5578
  2391  001B5A                     l5576:
  2392  001B5A  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2393  001B5E  0E01               	movlw	1
  2394  001B60  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2395  001B62  2A09               	incf	??_LightStatusLed,f,c
  2396  001B64  D003               	goto	u4314
  2397  001B66                     u4315:
  2398  001B66  FFFF               	dw	65535	; assembler added errata NOP
  2399  001B68  90D8               	bcf	status,0,c
  2400  001B6A  360A               	rlcf	??_LightStatusLed+1,f,c
  2401  001B6C                     u4314:
  2402  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  2403  001B6E  2E09               	decfsz	??_LightStatusLed,f,c
  2404  001B70  D7FA               	goto	u4315
  2405  001B72  1C0A               	comf	??_LightStatusLed+1,w,c
  2406  001B74  0100               	movlb	0	; () banked
  2407  001B76  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  2408  001B78                     l5578:
  2409  001B78  FFFF               	dw	65535	; assembler added errata NOP
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;main.c: 349: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  2413  001B7A  5008               	movf	LightStatusLed@blink,w,c
  2414  001B7C  E010               	bz	l5582
  2415                           
  2416                           ; BSR set to: 0
  2417  001B7E  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2418  001B82  0E01               	movlw	1
  2419  001B84  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2420  001B86  2A09               	incf	??_LightStatusLed,f,c
  2421  001B88  D003               	goto	u4334
  2422  001B8A                     u4335:
  2423  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  2424  001B8C  90D8               	bcf	status,0,c
  2425  001B8E  360A               	rlcf	??_LightStatusLed+1,f,c
  2426  001B90                     u4334:
  2427  001B90  FFFF               	dw	65535	; assembler added errata NOP
  2428  001B92  2E09               	decfsz	??_LightStatusLed,f,c
  2429  001B94  D7FA               	goto	u4335
  2430  001B96  500A               	movf	??_LightStatusLed+1,w,c
  2431  001B98  0100               	movlb	0	; () banked
  2432  001B9A  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  2433  001B9C  D00F               	goto	l5584
  2434  001B9E                     l5582:
  2435                           
  2436                           ; BSR set to: 0
  2437  001B9E  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2438  001BA2  0E01               	movlw	1
  2439  001BA4  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2440  001BA6  2A09               	incf	??_LightStatusLed,f,c
  2441  001BA8  D003               	goto	u4344
  2442  001BAA                     u4345:
  2443  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  2444  001BAC  90D8               	bcf	status,0,c
  2445  001BAE  360A               	rlcf	??_LightStatusLed+1,f,c
  2446  001BB0                     u4344:
  2447  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  2448  001BB2  2E09               	decfsz	??_LightStatusLed,f,c
  2449  001BB4  D7FA               	goto	u4345
  2450  001BB6  1C0A               	comf	??_LightStatusLed+1,w,c
  2451  001BB8  0100               	movlb	0	; () banked
  2452  001BBA  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  2453  001BBC                     l5584:
  2454  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 350: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  2458  001BBE  5007               	movf	LightStatusLed@on,w,c
  2459  001BC0  E014               	bz	l5588
  2460                           
  2461                           ; BSR set to: 0
  2462  001BC2  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2463  001BC6  0E01               	movlw	1
  2464  001BC8  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2465  001BCA  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  2466  001BCC  2A09               	incf	??_LightStatusLed,f,c
  2467  001BCE  D004               	goto	u4364
  2468  001BD0                     u4365:
  2469  001BD0  FFFF               	dw	65535	; assembler added errata NOP
  2470  001BD2  90D8               	bcf	status,0,c
  2471  001BD4  360A               	rlcf	??_LightStatusLed+1,f,c
  2472  001BD6  360B               	rlcf	??_LightStatusLed+2,f,c
  2473  001BD8                     u4364:
  2474  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  2475  001BDA  2E09               	decfsz	??_LightStatusLed,f,c
  2476  001BDC  D7F9               	goto	u4365
  2477  001BDE  500A               	movf	??_LightStatusLed+1,w,c
  2478  001BE0  0100               	movlb	0	; () banked
  2479  001BE2  13DF               	iorwf	__MODBUSCoils& (0+255),f,b
  2480  001BE4  500B               	movf	??_LightStatusLed+2,w,c
  2481  001BE6  13E0               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  2482  001BE8  D017               	goto	l290
  2483  001BEA                     l5588:
  2484                           
  2485                           ; BSR set to: 0
  2486  001BEA  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  2487  001BEE  0E01               	movlw	1
  2488  001BF0  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  2489  001BF2  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  2490  001BF4  2A09               	incf	??_LightStatusLed,f,c
  2491  001BF6  D004               	goto	u4374
  2492  001BF8                     u4375:
  2493  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  2494  001BFA  90D8               	bcf	status,0,c
  2495  001BFC  360A               	rlcf	??_LightStatusLed+1,f,c
  2496  001BFE  360B               	rlcf	??_LightStatusLed+2,f,c
  2497  001C00                     u4374:
  2498  001C00  FFFF               	dw	65535	; assembler added errata NOP
  2499  001C02  2E09               	decfsz	??_LightStatusLed,f,c
  2500  001C04  D7F9               	goto	u4375
  2501  001C06  1C0A               	comf	??_LightStatusLed+1,w,c
  2502  001C08  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  2503  001C0A  1C0B               	comf	??_LightStatusLed+2,w,c
  2504  001C0C  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  2505  001C0E  500C               	movf	??_LightStatusLed+3,w,c
  2506  001C10  0100               	movlb	0	; () banked
  2507  001C12  17DF               	andwf	__MODBUSCoils& (0+255),f,b
  2508  001C14  500D               	movf	??_LightStatusLed+4,w,c
  2509  001C16  17E0               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  2510  001C18                     l290:
  2511  001C18  FFFF               	dw	65535	; assembler added errata NOP
  2512  001C1A  0012               	return		;funcret
  2513  001C1C  FFFF               	dw	65535	; errata NOP
  2514  001C1E                     __end_of_LightStatusLed:
  2515                           	opt stack 0
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           postdec1	equ	0xFE5
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533 ;; *************** function _ModbusGetLastCommand *****************
  2534 ;; Defined at:
  2535 ;;		line 907 in file "ModbusRtu.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  address         1    wreg     PTR unsigned short 
  2538 ;;		 -> io_poll@lastAddress(2), 
  2539 ;;  count           1    6[COMRAM] PTR unsigned short 
  2540 ;;		 -> io_poll@lastEndAddress(2), 
  2541 ;;  command         1    7[COMRAM] PTR unsigned char 
  2542 ;;		 -> io_poll@lastCommand(1), 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  address         1    8[COMRAM] PTR unsigned short 
  2545 ;;		 -> io_poll@lastAddress(2), 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      PTR unsigned char 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr2l, fsr2h, status,2
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         2       0       0       0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0
  2558 ;;      Totals:         3       0       0       0       0       0       0
  2559 ;;Total ram usage:        3 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    2
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_io_poll
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text10
  2570  002AD6                     __ptext10:
  2571                           	opt stack 0
  2572  002AD6                     _ModbusGetLastCommand:
  2573                           	opt stack 27
  2574                           
  2575                           ;incstack = 0
  2576  002AD6  FFFF               	dw	65535
  2577                           
  2578                           ;ModbusGetLastCommand@address stored from wreg
  2579  002AD8  6E09               	movwf	ModbusGetLastCommand@address,c
  2580                           
  2581                           ;ModbusRtu.c: 909: if (address != (0))
  2582  002ADA  5009               	movf	ModbusGetLastCommand@address,w,c
  2583  002ADC  E007               	bz	l6098
  2584                           
  2585                           ;ModbusRtu.c: 910: *address = _lastAddress;
  2586  002ADE  5009               	movf	ModbusGetLastCommand@address,w,c
  2587  002AE0  6ED9               	movwf	fsr2l,c
  2588  002AE2  6ADA               	clrf	fsr2h,c
  2589  002AE4  C0BC  FFDE         	movff	__lastAddress,postinc2
  2590  002AE8  C0BD  FFDD         	movff	__lastAddress+1,postdec2
  2591  002AEC                     l6098:
  2592                           
  2593                           ;ModbusRtu.c: 911: if (count != (0))
  2594  002AEC  5007               	movf	ModbusGetLastCommand@count,w,c
  2595  002AEE  E007               	bz	l6102
  2596                           
  2597                           ;ModbusRtu.c: 912: *count = _lastCount;
  2598  002AF0  5007               	movf	ModbusGetLastCommand@count,w,c
  2599  002AF2  6ED9               	movwf	fsr2l,c
  2600  002AF4  6ADA               	clrf	fsr2h,c
  2601  002AF6  C0BE  FFDE         	movff	__lastCount,postinc2
  2602  002AFA  C0BF  FFDD         	movff	__lastCount+1,postdec2
  2603  002AFE                     l6102:
  2604                           
  2605                           ;ModbusRtu.c: 913: if(command != (0))
  2606  002AFE  5008               	movf	ModbusGetLastCommand@command,w,c
  2607  002B00  E005               	bz	l6106
  2608                           
  2609                           ;ModbusRtu.c: 914: *command = _lastCommand;
  2610  002B02  5008               	movf	ModbusGetLastCommand@command,w,c
  2611  002B04  6ED9               	movwf	fsr2l,c
  2612  002B06  6ADA               	clrf	fsr2h,c
  2613  002B08  C0D2  FFDF         	movff	__lastCommand,indf2
  2614  002B0C                     l6106:
  2615                           
  2616                           ;ModbusRtu.c: 915: return &_lastFunction;
  2617  002B0C  0EE9               	movlw	__lastFunction& (0+255)
  2618  002B0E  0012               	return		;funcret
  2619  002B10  FFFF               	dw	65535	; errata NOP
  2620  002B12                     __end_of_ModbusGetLastCommand:
  2621                           	opt stack 0
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           intcon	equ	0xFF2
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           fsr1h	equ	0xFE2
  2631                           fsr1l	equ	0xFE1
  2632                           indf2	equ	0xFDF
  2633                           postinc2	equ	0xFDE
  2634                           postdec2	equ	0xFDD
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function _InitFromEeprom *****************
  2640 ;; Defined at:
  2641 ;;		line 406 in file "main.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;		None
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      void 
  2648 ;; Registers used:
  2649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2655 ;;      Params:         0       0       0       0       0       0       0
  2656 ;;      Locals:         0       0       0       0       0       0       0
  2657 ;;      Temps:          2       0       0       0       0       0       0
  2658 ;;      Totals:         2       0       0       0       0       0       0
  2659 ;;Total ram usage:        2 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    4
  2662 ;; This function calls:
  2663 ;;		_LoadNextEvent
  2664 ;;		_Modbus
  2665 ;;		_SwitchOffAllLeds
  2666 ;; This function is called by:
  2667 ;;		_main
  2668 ;;		_io_poll
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text11
  2673  002330                     __ptext11:
  2674                           	opt stack 0
  2675  002330                     _InitFromEeprom:
  2676                           	opt stack 25
  2677                           
  2678                           ;incstack = 0
  2679  002330  FFFF               	dw	65535
  2680                           
  2681                           ;main.c: 408: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  2682  002332  0E0A               	movlw	10
  2683  002334  6EA9               	movwf	4009,c	;volatile
  2684  002336  80A6               	bsf	4006,0,c	;volatile
  2685  002338  CFA8 F0D9          	movff	4008,_eventAcceptTime	;volatile
  2686                           
  2687                           ;main.c: 409: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  2688  00233C  0E0F               	movlw	15
  2689  00233E  6EA9               	movwf	4009,c	;volatile
  2690  002340  80A6               	bsf	4006,0,c	;volatile
  2691  002342  50A8               	movf	4008,w,c	;volatile
  2692  002344  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  2693  002346  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  2694  002348  0E06               	movlw	6
  2695  00234A                     u4935:
  2696  00234A  FFFF               	dw	65535	; assembler added errata NOP
  2697  00234C  90D8               	bcf	status,0,c
  2698  00234E  360F               	rlcf	??_InitFromEeprom,f,c
  2699  002350  3610               	rlcf	??_InitFromEeprom+1,f,c
  2700  002352  2EE8               	decfsz	wreg,f,c
  2701  002354  D7FA               	goto	u4935
  2702  002356  C00F  F0C4         	movff	??_InitFromEeprom,_blinkDuration
  2703  00235A  C010  F0C5         	movff	??_InitFromEeprom+1,_blinkDuration+1
  2704                           
  2705                           ;main.c: 410: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  2706  00235E  0E10               	movlw	16
  2707  002360  6EA9               	movwf	4009,c	;volatile
  2708  002362  80A6               	bsf	4006,0,c	;volatile
  2709  002364  50A8               	movf	4008,w,c	;volatile
  2710  002366  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  2711  002368  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  2712  00236A  0E06               	movlw	6
  2713  00236C                     u4945:
  2714  00236C  FFFF               	dw	65535	; assembler added errata NOP
  2715  00236E  90D8               	bcf	status,0,c
  2716  002370  360F               	rlcf	??_InitFromEeprom,f,c
  2717  002372  3610               	rlcf	??_InitFromEeprom+1,f,c
  2718  002374  2EE8               	decfsz	wreg,f,c
  2719  002376  D7FA               	goto	u4945
  2720  002378  C00F  F0C6         	movff	??_InitFromEeprom,_blinkPeriod
  2721  00237C  C010  F0C7         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  2722                           
  2723                           ;main.c: 412: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  2724  002380  0E12               	movlw	18
  2725  002382  6EA9               	movwf	4009,c	;volatile
  2726  002384  80A6               	bsf	4006,0,c	;volatile
  2727  002386  CFA8 F0DA          	movff	4008,_eventCount	;volatile
  2728                           
  2729                           ;main.c: 418: _soundCount = ( EEADR = 140, (void)0, RD = 1, EEDATA);
  2730  00238A  0E8C               	movlw	140
  2731  00238C  6EA9               	movwf	4009,c	;volatile
  2732  00238E  80A6               	bsf	4006,0,c	;volatile
  2733  002390  CFA8 F06F          	movff	4008,__soundCount	;volatile
  2734                           
  2735                           ;main.c: 419: if(_soundCount == 0xFF)
  2736  002394  286F               	incf	__soundCount,w,c
  2737  002396  E101               	bnz	l6040
  2738                           
  2739                           ;main.c: 420: _soundCount = 0;
  2740  002398  6A6F               	clrf	__soundCount,c
  2741  00239A                     l6040:
  2742                           
  2743                           ;main.c: 421: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  2744  00239A  506F               	movf	__soundCount,w,c
  2745  00239C  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  2746  00239E  0100               	movlb	0	; () banked
  2747  0023A0  51DA               	movf	_eventCount& (0+255),w,b
  2748  0023A2  0101               	movlb	1	; () banked
  2749  0023A4  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  2750  0023A6  C00F  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  2751                           
  2752                           ;main.c: 423: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  2753  0023AA  0E01               	movlw	1
  2754  0023AC  6EA9               	movwf	4009,c	;volatile
  2755                           
  2756                           ; BSR set to: 1
  2757  0023AE  80A6               	bsf	4006,0,c	;volatile
  2758                           
  2759                           ; BSR set to: 1
  2760  0023B0  6A0C               	clrf	Modbus@u8serno,c
  2761  0023B2  6A0D               	clrf	Modbus@u8txenpin,c
  2762  0023B4  50A8               	movf	4008,w,c	;volatile
  2763  0023B6  ECAF  F016         	call	_Modbus
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;main.c: 424: SwitchOffAllLeds();
  2767  0023BA  EC38  F016         	call	_SwitchOffAllLeds	;wreg free
  2768                           
  2769                           ;main.c: 427: curEventNum = 0xff;
  2770  0023BE  6873               	setf	_curEventNum,c
  2771                           
  2772                           ;main.c: 428: curEventTotalMinutes = 0;
  2773  0023C0  0100               	movlb	0	; () banked
  2774  0023C2  6BC8               	clrf	_curEventTotalMinutes& (0+255),b
  2775  0023C4  6BC9               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;main.c: 429: currentAlarmedEventNum = 0xff;
  2779  0023C6  6874               	setf	_currentAlarmedEventNum,c
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 430: LoadNextEvent();
  2783  0023C8  EF7A  F00B         	goto	_LoadNextEvent	;wreg free
  2784  0023CC  FFFF               	dw	65535	; errata NOP
  2785  0023CE                     __end_of_InitFromEeprom:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           intcon	equ	0xFF2
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1h	equ	0xFE2
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _Modbus *****************
  2805 ;; Defined at:
  2806 ;;		line 227 in file "ModbusRtu.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  u8id            1    wreg     unsigned char 
  2809 ;;  u8serno         1   11[COMRAM] unsigned char 
  2810 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  u8id            1   13[COMRAM] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : F/1
  2819 ;;		On exit  : F/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2822 ;;      Params:         2       0       0       0       0       0       0
  2823 ;;      Locals:         1       0       0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0
  2825 ;;      Totals:         3       0       0       0       0       0       0
  2826 ;;Total ram usage:        3 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    3
  2829 ;; This function calls:
  2830 ;;		_ModbusInit
  2831 ;; This function is called by:
  2832 ;;		_InitFromEeprom
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text12
  2837  002D5E                     __ptext12:
  2838                           	opt stack 0
  2839  002D5E                     _Modbus:
  2840                           	opt stack 25
  2841                           
  2842                           ;incstack = 0
  2843  002D5E  FFFF               	dw	65535
  2844                           
  2845                           ;Modbus@u8id stored from wreg
  2846  002D60  6E0E               	movwf	Modbus@u8id,c
  2847                           
  2848                           ;ModbusRtu.c: 229: ModbusInit(u8id, u8serno, u8txenpin);
  2849  002D62  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  2850  002D66  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  2851  002D6A  500E               	movf	Modbus@u8id,w,c
  2852  002D6C  EF97  F016         	goto	_ModbusInit
  2853                           
  2854                           ; BSR set to: 0
  2855  002D70  FFFF               	dw	65535	; errata NOP
  2856  002D72                     __end_of_Modbus:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           intcon	equ	0xFF2
  2863                           postinc0	equ	0xFEE
  2864                           wreg	equ	0xFE8
  2865                           postdec1	equ	0xFE5
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _ModbusInit *****************
  2876 ;; Defined at:
  2877 ;;		line 567 in file "ModbusRtu.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  u8id            1    wreg     unsigned char 
  2880 ;;  u8serno         1    6[COMRAM] unsigned char 
  2881 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  u8id            1   10[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/1
  2890 ;;		On exit  : F/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         2       0       0       0       0       0       0
  2894 ;;      Locals:         3       0       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0
  2896 ;;      Totals:         5       0       0       0       0       0       0
  2897 ;;Total ram usage:        5 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    2
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_Modbus
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text13
  2908  002D2E                     __ptext13:
  2909                           	opt stack 0
  2910  002D2E                     _ModbusInit:
  2911                           	opt stack 25
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;incstack = 0
  2915  002D2E  FFFF               	dw	65535
  2916                           
  2917                           ;ModbusInit@u8id stored from wreg
  2918  002D30  6E0B               	movwf	ModbusInit@u8id,c
  2919                           
  2920                           ;ModbusRtu.c: 569: _deviceStatus = 0;
  2921  002D32  0100               	movlb	0	; () banked
  2922  002D34  6BCD               	clrf	__deviceStatus& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;ModbusRtu.c: 570: _u8id = u8id;
  2926  002D36  C00B  F0D6         	movff	ModbusInit@u8id,__u8id
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;ModbusRtu.c: 571: _u8serno = (u8serno > 3) ? 0 : u8serno;
  2930  002D3A  0E04               	movlw	4
  2931  002D3C  6007               	cpfslt	ModbusInit@u8serno,c
  2932  002D3E  D000               	goto	l761
  2933  002D40                     l761:
  2934  002D40  FFFF               	dw	65535	; assembler added errata NOP
  2935                           
  2936                           ; BSR set to: 0
  2937  002D42  0012               	return		;funcret
  2938  002D44  FFFF               	dw	65535	; errata NOP
  2939  002D46                     __end_of_ModbusInit:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           intcon	equ	0xFF2
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1h	equ	0xFE2
  2950                           fsr1l	equ	0xFE1
  2951                           indf2	equ	0xFDF
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _getHourMin *****************
  2959 ;; Defined at:
  2960 ;;		line 256 in file "interrupts.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  hour            1    wreg     PTR unsigned char 
  2963 ;;		 -> main@hour(1), 
  2964 ;;  min             1    6[COMRAM] PTR unsigned char 
  2965 ;;		 -> main@minute(1), 
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;  hour            1    7[COMRAM] PTR unsigned char 
  2968 ;;		 -> main@hour(1), 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      unsigned char 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2973 ;; Tracked objects:
  2974 ;;		On entry : F/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2978 ;;      Params:         1       0       0       0       0       0       0
  2979 ;;      Locals:         1       0       0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0
  2981 ;;      Totals:         2       0       0       0       0       0       0
  2982 ;;Total ram usage:        2 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    2
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text14
  2993  002BEE                     __ptext14:
  2994                           	opt stack 0
  2995  002BEE                     _getHourMin:
  2996                           	opt stack 28
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;incstack = 0
  3000  002BEE  FFFF               	dw	65535
  3001                           
  3002                           ;getHourMin@hour stored from wreg
  3003  002BF0  6E08               	movwf	getHourMin@hour,c
  3004                           
  3005                           ;interrupts.c: 258: if(globalHours == 0xFF)
  3006  002BF2  2875               	incf	_globalHours,w,c	;volatile
  3007  002BF4  E102               	bnz	l108
  3008                           
  3009                           ;interrupts.c: 259: return 0;
  3010  002BF6  0E00               	movlw	0
  3011  002BF8  D00D               	goto	l109
  3012  002BFA                     l108:
  3013                           
  3014                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  3015  002BFA  9EF2               	bcf	intcon,7,c	;volatile
  3016                           
  3017                           ;interrupts.c: 261: *hour = globalHours;
  3018  002BFC  5008               	movf	getHourMin@hour,w,c
  3019  002BFE  6ED9               	movwf	fsr2l,c
  3020  002C00  6ADA               	clrf	fsr2h,c
  3021  002C02  C075  FFDF         	movff	_globalHours,indf2	;volatile
  3022                           
  3023                           ;interrupts.c: 262: *min = globalMinutes;
  3024  002C06  5007               	movf	getHourMin@min,w,c
  3025  002C08  6ED9               	movwf	fsr2l,c
  3026  002C0A  6ADA               	clrf	fsr2h,c
  3027  002C0C  C072  FFDF         	movff	_globalMinutes,indf2	;volatile
  3028                           
  3029                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  3030  002C10  8EF2               	bsf	intcon,7,c	;volatile
  3031                           
  3032                           ;interrupts.c: 264: return 1;
  3033  002C12  0E01               	movlw	1
  3034  002C14                     l109:
  3035  002C14  FFFF               	dw	65535	; assembler added errata NOP
  3036  002C16  0012               	return		;funcret
  3037  002C18  FFFF               	dw	65535	; errata NOP
  3038  002C1A                     __end_of_getHourMin:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           intcon	equ	0xFF2
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1h	equ	0xFE2
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _ResetEvent *****************
  3058 ;; Defined at:
  3059 ;;		line 601 in file "main.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  state           1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  state           1   18[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : F/0
  3070 ;;		On exit  : F/1
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         0       0       0       0       0       0       0
  3074 ;;      Locals:         3       0       0       0       0       0       0
  3075 ;;      Temps:          2       0       0       0       0       0       0
  3076 ;;      Totals:         5       0       0       0       0       0       0
  3077 ;;Total ram usage:        5 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		_LightLed
  3082 ;;		_StopPlaying
  3083 ;; This function is called by:
  3084 ;;		_main
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text15
  3089  002A16                     __ptext15:
  3090                           	opt stack 0
  3091  002A16                     _ResetEvent:
  3092                           	opt stack 27
  3093                           
  3094                           ;incstack = 0
  3095  002A16  FFFF               	dw	65535
  3096                           
  3097                           ;ResetEvent@state stored from wreg
  3098  002A18  6E13               	movwf	ResetEvent@state,c
  3099                           
  3100                           ;main.c: 603: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  3101  002A1A  5013               	movf	ResetEvent@state,w,c
  3102  002A1C  E103               	bnz	l6944
  3103  002A1E  6A15               	clrf	_ResetEvent$880+1,c
  3104  002A20  0E02               	movlw	2
  3105  002A22  D002               	goto	L1
  3106  002A24                     l6944:
  3107  002A24  6A15               	clrf	_ResetEvent$880+1,c
  3108  002A26  0E01               	movlw	1
  3109  002A28                     L1:
  3110  002A28  FFFF               	dw	65535	; assembler added errata NOP
  3111  002A2A  6E14               	movwf	_ResetEvent$880,c
  3112  002A2C  C014  F009         	movff	_ResetEvent$880,LightLed@ledState
  3113  002A30  6A0A               	clrf	LightLed@blink,c
  3114  002A32  2874               	incf	_currentAlarmedEventNum,w,c
  3115  002A34  ECB5  F004         	call	_LightLed
  3116                           
  3117                           ;main.c: 604: currentAlarmedEventNum = 0xff;
  3118  002A38  6874               	setf	_currentAlarmedEventNum,c
  3119                           
  3120                           ;main.c: 605: eventResetSecond = 0;
  3121  002A3A  0100               	movlb	0	; () banked
  3122  002A3C  6BAC               	clrf	_eventResetSecond& (0+255),b
  3123  002A3E  6BAD               	clrf	(_eventResetSecond+1)& (0+255),b
  3124  002A40  6BAE               	clrf	(_eventResetSecond+2)& (0+255),b
  3125  002A42  6BAF               	clrf	(_eventResetSecond+3)& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;main.c: 606: StopPlaying();
  3129  002A44  ECCA  F016         	call	_StopPlaying	;wreg free
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 607: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  3133  002A48  5074               	movf	_currentAlarmedEventNum,w,c
  3134  002A4A  6E11               	movwf	??_ResetEvent& (0+255),c
  3135  002A4C  5073               	movf	_curEventNum,w,c
  3136  002A4E  0101               	movlb	1	; () banked
  3137  002A50  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  3138  002A52  C011  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  3139                           
  3140                           ; BSR set to: 1
  3141  002A56  0012               	return		;funcret
  3142  002A58  FFFF               	dw	65535	; errata NOP
  3143  002A5A                     __end_of_ResetEvent:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           intcon	equ	0xFF2
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           indf2	equ	0xFDF
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _ProcessLightBlock *****************
  3163 ;; Defined at:
  3164 ;;		line 448 in file "main.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  curMs           1    wreg     PTR unsigned long 
  3167 ;;		 -> main@curMs(4), 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  3170 ;;		 -> main@curMs(4), 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : F/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3180 ;;      Params:         0       0       0       0       0       0       0
  3181 ;;      Locals:         1       0       0       0       0       0       0
  3182 ;;      Temps:          4       0       0       0       0       0       0
  3183 ;;      Totals:         5       0       0       0       0       0       0
  3184 ;;Total ram usage:        5 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    3
  3187 ;; This function calls:
  3188 ;;		_UpdateLedRegister
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text16
  3195  000EDA                     __ptext16:
  3196                           	opt stack 0
  3197  000EDA                     _ProcessLightBlock:
  3198                           	opt stack 27
  3199                           
  3200                           ; BSR set to: 1
  3201                           ;incstack = 0
  3202  000EDA  FFFF               	dw	65535
  3203                           
  3204                           ;ProcessLightBlock@curMs stored from wreg
  3205  000EDC  6E0C               	movwf	ProcessLightBlock@curMs,c
  3206                           
  3207                           ;main.c: 450: diffTime = *curMs - oldBlinkOnTime;
  3208  000EDE  500C               	movf	ProcessLightBlock@curMs,w,c
  3209  000EE0  6ED9               	movwf	fsr2l,c
  3210  000EE2  6ADA               	clrf	fsr2h,c
  3211  000EE4  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  3212  000EE8  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  3213  000EEC  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  3214  000EF0  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  3215  000EF4  0100               	movlb	0	; () banked
  3216  000EF6  51B4               	movf	_oldBlinkOnTime& (0+255),w,b
  3217  000EF8  5C08               	subwf	??_ProcessLightBlock,w,c
  3218  000EFA  6FA8               	movwf	_diffTime& (0+255),b
  3219  000EFC  51B5               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  3220  000EFE  5809               	subwfb	??_ProcessLightBlock+1,w,c
  3221  000F00  6FA9               	movwf	(_diffTime+1)& (0+255),b
  3222  000F02  51B6               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  3223  000F04  580A               	subwfb	??_ProcessLightBlock+2,w,c
  3224  000F06  6FAA               	movwf	(_diffTime+2)& (0+255),b
  3225  000F08  51B7               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  3226  000F0A  580B               	subwfb	??_ProcessLightBlock+3,w,c
  3227  000F0C  6FAB               	movwf	(_diffTime+3)& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 451: if(diffTime > blinkPeriod)
  3231  000F0E  51C6               	movf	_blinkPeriod& (0+255),w,b
  3232  000F10  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  3233  000F12  51C7               	movf	(_blinkPeriod+1)& (0+255),w,b
  3234  000F14  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  3235  000F16  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  3236  000F18  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  3237  000F1A  51A8               	movf	_diffTime& (0+255),w,b
  3238  000F1C  5C08               	subwf	??_ProcessLightBlock,w,c
  3239  000F1E  51A9               	movf	(_diffTime+1)& (0+255),w,b
  3240  000F20  5809               	subwfb	??_ProcessLightBlock+1,w,c
  3241  000F22  51AA               	movf	(_diffTime+2)& (0+255),w,b
  3242  000F24  580A               	subwfb	??_ProcessLightBlock+2,w,c
  3243  000F26  51AB               	movf	(_diffTime+3)& (0+255),w,b
  3244  000F28  580B               	subwfb	??_ProcessLightBlock+3,w,c
  3245  000F2A  E20E               	bc	l6784
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 452: {
  3249                           ;main.c: 453: blinkOn = 1;
  3250  000F2C  0E01               	movlw	1
  3251  000F2E  6E71               	movwf	_blinkOn,c
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 454: oldBlinkOnTime = *curMs;
  3255  000F30  500C               	movf	ProcessLightBlock@curMs,w,c
  3256  000F32  6ED9               	movwf	fsr2l,c
  3257  000F34  6ADA               	clrf	fsr2h,c
  3258  000F36  CFDE F0B4          	movff	postinc2,_oldBlinkOnTime
  3259  000F3A  CFDE F0B5          	movff	postinc2,_oldBlinkOnTime+1
  3260  000F3E  CFDE F0B6          	movff	postinc2,_oldBlinkOnTime+2
  3261  000F42  CFDE F0B7          	movff	postinc2,_oldBlinkOnTime+3
  3262                           
  3263                           ;main.c: 455: }
  3264  000F46  D0F1               	goto	l6936
  3265  000F48                     l6784:
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 456: else if(blinkOn && diffTime > blinkDuration)
  3269  000F48  5071               	movf	_blinkOn,w,c
  3270  000F4A  E101 D0EE          	bz	l6936
  3271                           
  3272                           ; BSR set to: 0
  3273  000F4E  51C4               	movf	_blinkDuration& (0+255),w,b
  3274  000F50  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  3275  000F52  51C5               	movf	(_blinkDuration+1)& (0+255),w,b
  3276  000F54  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  3277  000F56  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  3278  000F58  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  3279  000F5A  51A8               	movf	_diffTime& (0+255),w,b
  3280  000F5C  5C08               	subwf	??_ProcessLightBlock,w,c
  3281  000F5E  51A9               	movf	(_diffTime+1)& (0+255),w,b
  3282  000F60  5809               	subwfb	??_ProcessLightBlock+1,w,c
  3283  000F62  51AA               	movf	(_diffTime+2)& (0+255),w,b
  3284  000F64  580A               	subwfb	??_ProcessLightBlock+2,w,c
  3285  000F66  51AB               	movf	(_diffTime+3)& (0+255),w,b
  3286  000F68  580B               	subwfb	??_ProcessLightBlock+3,w,c
  3287  000F6A  E301 D0DE          	bc	l6936
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 457: {
  3291                           ;main.c: 458: blinkOn = 0;
  3292  000F6E  6A71               	clrf	_blinkOn,c
  3293  000F70  D0DC               	goto	l6936
  3294  000F72                     l6790:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 466: LATA &= 0xF0;
  3298  000F72  0EF0               	movlw	240
  3299  000F74  1689               	andwf	3977,f,c	;volatile
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 467: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  3303  000F76  5071               	movf	_blinkOn,w,c
  3304  000F78  E003               	bz	l6796
  3305                           
  3306                           ; BSR set to: 0
  3307  000F7A  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  3308  000F7E  D003               	goto	l6798
  3309  000F80                     l6796:
  3310                           
  3311                           ; BSR set to: 0
  3312  000F80  5190               	movf	_ledStatuses& (0+255),w,b
  3313  000F82  1980               	xorwf	_ledBlink& (0+255),w,b
  3314  000F84  6E8A               	movwf	3978,c	;volatile
  3315  000F86                     l6798:
  3316  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3317                           
  3318                           ; BSR set to: 0
  3319  000F88  0E00               	movlw	0
  3320  000F8A  ECA2  F014         	call	_UpdateLedRegister
  3321                           
  3322                           ;main.c: 468: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  3323  000F8E  5071               	movf	_blinkOn,w,c
  3324  000F90  E003               	bz	l6804
  3325  000F92  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  3326  000F96  D004               	goto	l6806
  3327  000F98                     l6804:
  3328  000F98  0100               	movlb	0	; () banked
  3329  000F9A  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  3330  000F9C  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  3331  000F9E  6E8A               	movwf	3978,c	;volatile
  3332  000FA0                     l6806:
  3333  000FA0  FFFF               	dw	65535	; assembler added errata NOP
  3334  000FA2  0E01               	movlw	1
  3335  000FA4  ECA2  F014         	call	_UpdateLedRegister
  3336                           
  3337                           ;main.c: 469: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  3338  000FA8  5071               	movf	_blinkOn,w,c
  3339  000FAA  E003               	bz	l6812
  3340  000FAC  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  3341  000FB0  D004               	goto	l6814
  3342  000FB2                     l6812:
  3343  000FB2  0100               	movlb	0	; () banked
  3344  000FB4  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  3345  000FB6  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  3346  000FB8  6E8A               	movwf	3978,c	;volatile
  3347  000FBA                     l6814:
  3348  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  3349  000FBC  0E02               	movlw	2
  3350  000FBE  ECA2  F014         	call	_UpdateLedRegister
  3351                           
  3352                           ;main.c: 470: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  3353  000FC2  5071               	movf	_blinkOn,w,c
  3354  000FC4  E003               	bz	l6820
  3355  000FC6  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  3356  000FCA  D004               	goto	l6822
  3357  000FCC                     l6820:
  3358  000FCC  0100               	movlb	0	; () banked
  3359  000FCE  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  3360  000FD0  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  3361  000FD2  6E8A               	movwf	3978,c	;volatile
  3362  000FD4                     l6822:
  3363  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  3364  000FD6  0E03               	movlw	3
  3365  000FD8  ECA2  F014         	call	_UpdateLedRegister
  3366                           
  3367                           ;main.c: 471: LATAbits.LATA0 = 1;
  3368  000FDC  8089               	bsf	3977,0,c	;volatile
  3369                           
  3370                           ;main.c: 472: break;
  3371  000FDE  D0B0               	goto	l6938
  3372  000FE0                     l6826:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 474: LATA &= 0xF0;
  3376  000FE0  0EF0               	movlw	240
  3377  000FE2  1689               	andwf	3977,f,c	;volatile
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 475: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  3381  000FE4  5071               	movf	_blinkOn,w,c
  3382  000FE6  E003               	bz	l6832
  3383                           
  3384                           ; BSR set to: 0
  3385  000FE8  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  3386  000FEC  D003               	goto	l6834
  3387  000FEE                     l6832:
  3388                           
  3389                           ; BSR set to: 0
  3390  000FEE  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  3391  000FF0  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  3392  000FF2  6E8A               	movwf	3978,c	;volatile
  3393  000FF4                     l6834:
  3394  000FF4  FFFF               	dw	65535	; assembler added errata NOP
  3395                           
  3396                           ; BSR set to: 0
  3397  000FF6  0E00               	movlw	0
  3398  000FF8  ECA2  F014         	call	_UpdateLedRegister
  3399                           
  3400                           ;main.c: 476: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  3401  000FFC  5071               	movf	_blinkOn,w,c
  3402  000FFE  E003               	bz	l6840
  3403  001000  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  3404  001004  D004               	goto	l6842
  3405  001006                     l6840:
  3406  001006  0100               	movlb	0	; () banked
  3407  001008  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  3408  00100A  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  3409  00100C  6E8A               	movwf	3978,c	;volatile
  3410  00100E                     l6842:
  3411  00100E  FFFF               	dw	65535	; assembler added errata NOP
  3412  001010  0E01               	movlw	1
  3413  001012  ECA2  F014         	call	_UpdateLedRegister
  3414                           
  3415                           ;main.c: 477: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  3416  001016  5071               	movf	_blinkOn,w,c
  3417  001018  E003               	bz	l6848
  3418  00101A  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  3419  00101E  D004               	goto	l6850
  3420  001020                     l6848:
  3421  001020  0100               	movlb	0	; () banked
  3422  001022  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  3423  001024  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  3424  001026  6E8A               	movwf	3978,c	;volatile
  3425  001028                     l6850:
  3426  001028  FFFF               	dw	65535	; assembler added errata NOP
  3427  00102A  0E02               	movlw	2
  3428  00102C  ECA2  F014         	call	_UpdateLedRegister
  3429                           
  3430                           ;main.c: 478: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  3431  001030  5071               	movf	_blinkOn,w,c
  3432  001032  E003               	bz	l6856
  3433  001034  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  3434  001038  D004               	goto	l6858
  3435  00103A                     l6856:
  3436  00103A  0100               	movlb	0	; () banked
  3437  00103C  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  3438  00103E  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  3439  001040  6E8A               	movwf	3978,c	;volatile
  3440  001042                     l6858:
  3441  001042  FFFF               	dw	65535	; assembler added errata NOP
  3442  001044  0E03               	movlw	3
  3443  001046  ECA2  F014         	call	_UpdateLedRegister
  3444                           
  3445                           ;main.c: 479: LATAbits.LATA1 = 1;
  3446  00104A  8289               	bsf	3977,1,c	;volatile
  3447                           
  3448                           ;main.c: 480: break;
  3449  00104C  D079               	goto	l6938
  3450  00104E                     l6862:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 482: LATA &= 0xF0;
  3454  00104E  0EF0               	movlw	240
  3455  001050  1689               	andwf	3977,f,c	;volatile
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 483: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  3459  001052  5071               	movf	_blinkOn,w,c
  3460  001054  E003               	bz	l6868
  3461                           
  3462                           ; BSR set to: 0
  3463  001056  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  3464  00105A  D003               	goto	l6870
  3465  00105C                     l6868:
  3466                           
  3467                           ; BSR set to: 0
  3468  00105C  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  3469  00105E  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  3470  001060  6E8A               	movwf	3978,c	;volatile
  3471  001062                     l6870:
  3472  001062  FFFF               	dw	65535	; assembler added errata NOP
  3473                           
  3474                           ; BSR set to: 0
  3475  001064  0E00               	movlw	0
  3476  001066  ECA2  F014         	call	_UpdateLedRegister
  3477                           
  3478                           ;main.c: 484: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  3479  00106A  5071               	movf	_blinkOn,w,c
  3480  00106C  E003               	bz	l6876
  3481  00106E  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  3482  001072  D004               	goto	l6878
  3483  001074                     l6876:
  3484  001074  0100               	movlb	0	; () banked
  3485  001076  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  3486  001078  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  3487  00107A  6E8A               	movwf	3978,c	;volatile
  3488  00107C                     l6878:
  3489  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3490  00107E  0E01               	movlw	1
  3491  001080  ECA2  F014         	call	_UpdateLedRegister
  3492                           
  3493                           ;main.c: 485: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  3494  001084  5071               	movf	_blinkOn,w,c
  3495  001086  E003               	bz	l6884
  3496  001088  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  3497  00108C  D004               	goto	l6886
  3498  00108E                     l6884:
  3499  00108E  0100               	movlb	0	; () banked
  3500  001090  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  3501  001092  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  3502  001094  6E8A               	movwf	3978,c	;volatile
  3503  001096                     l6886:
  3504  001096  FFFF               	dw	65535	; assembler added errata NOP
  3505  001098  0E02               	movlw	2
  3506  00109A  ECA2  F014         	call	_UpdateLedRegister
  3507                           
  3508                           ;main.c: 486: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  3509  00109E  5071               	movf	_blinkOn,w,c
  3510  0010A0  E003               	bz	l6892
  3511  0010A2  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  3512  0010A6  D004               	goto	l6894
  3513  0010A8                     l6892:
  3514  0010A8  0100               	movlb	0	; () banked
  3515  0010AA  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  3516  0010AC  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  3517  0010AE  6E8A               	movwf	3978,c	;volatile
  3518  0010B0                     l6894:
  3519  0010B0  FFFF               	dw	65535	; assembler added errata NOP
  3520  0010B2  0E03               	movlw	3
  3521  0010B4  ECA2  F014         	call	_UpdateLedRegister
  3522                           
  3523                           ;main.c: 487: LATAbits.LATA2 = 1;
  3524  0010B8  8489               	bsf	3977,2,c	;volatile
  3525                           
  3526                           ;main.c: 488: break;
  3527  0010BA  D042               	goto	l6938
  3528  0010BC                     l6898:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;main.c: 490: LATA &= 0xF0;
  3532  0010BC  0EF0               	movlw	240
  3533  0010BE  1689               	andwf	3977,f,c	;volatile
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;main.c: 491: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  3537  0010C0  5071               	movf	_blinkOn,w,c
  3538  0010C2  E003               	bz	l6904
  3539                           
  3540                           ; BSR set to: 0
  3541  0010C4  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  3542  0010C8  D003               	goto	l6906
  3543  0010CA                     l6904:
  3544                           
  3545                           ; BSR set to: 0
  3546  0010CA  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  3547  0010CC  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  3548  0010CE  6E8A               	movwf	3978,c	;volatile
  3549  0010D0                     l6906:
  3550  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  3551                           
  3552                           ; BSR set to: 0
  3553  0010D2  0E00               	movlw	0
  3554  0010D4  ECA2  F014         	call	_UpdateLedRegister
  3555                           
  3556                           ;main.c: 492: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  3557  0010D8  5071               	movf	_blinkOn,w,c
  3558  0010DA  E003               	bz	l6912
  3559  0010DC  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  3560  0010E0  D004               	goto	l6914
  3561  0010E2                     l6912:
  3562  0010E2  0100               	movlb	0	; () banked
  3563  0010E4  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  3564  0010E6  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  3565  0010E8  6E8A               	movwf	3978,c	;volatile
  3566  0010EA                     l6914:
  3567  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  3568  0010EC  0E01               	movlw	1
  3569  0010EE  ECA2  F014         	call	_UpdateLedRegister
  3570                           
  3571                           ;main.c: 493: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  3572  0010F2  5071               	movf	_blinkOn,w,c
  3573  0010F4  E003               	bz	l6920
  3574  0010F6  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  3575  0010FA  D004               	goto	l6922
  3576  0010FC                     l6920:
  3577  0010FC  0100               	movlb	0	; () banked
  3578  0010FE  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  3579  001100  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  3580  001102  6E8A               	movwf	3978,c	;volatile
  3581  001104                     l6922:
  3582  001104  FFFF               	dw	65535	; assembler added errata NOP
  3583  001106  0E02               	movlw	2
  3584  001108  ECA2  F014         	call	_UpdateLedRegister
  3585                           
  3586                           ;main.c: 494: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  3587  00110C  5071               	movf	_blinkOn,w,c
  3588  00110E  E003               	bz	l6928
  3589  001110  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  3590  001114  D004               	goto	l6930
  3591  001116                     l6928:
  3592  001116  0100               	movlb	0	; () banked
  3593  001118  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  3594  00111A  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  3595  00111C  6E8A               	movwf	3978,c	;volatile
  3596  00111E                     l6930:
  3597  00111E  FFFF               	dw	65535	; assembler added errata NOP
  3598  001120  0E03               	movlw	3
  3599  001122  ECA2  F014         	call	_UpdateLedRegister
  3600                           
  3601                           ;main.c: 495: LATAbits.LATA3 = 1;
  3602  001126  8689               	bsf	3977,3,c	;volatile
  3603                           
  3604                           ;main.c: 496: break;
  3605  001128  D00B               	goto	l6938
  3606  00112A                     l6936:
  3607  00112A  FFFF               	dw	65535	; assembler added errata NOP
  3608                           
  3609                           ; BSR set to: 0
  3610  00112C  51D8               	movf	_currentLedBlock& (0+255),w,b
  3611                           
  3612                           ; Switch size 1, requested type "speed"
  3613                           ; Number of cases is 4, Range of values is 0 to 3
  3614                           ; switch strategies available:
  3615                           ; Name         Instructions Cycles
  3616                           ; simple_byte           13     7 (average)
  3617                           ;	Chosen strategy is simple_byte
  3618  00112E  E101 D720          	bz	l6790
  3619  001132  0A01               	xorlw	1	; case 1
  3620  001134  E101 D754          	bz	l6826
  3621  001138  0A03               	xorlw	3	; case 2
  3622  00113A  E089               	bz	l6862
  3623  00113C  0A01               	xorlw	1	; case 3
  3624  00113E  E0BE               	bz	l6898
  3625  001140                     l6938:
  3626  001140  FFFF               	dw	65535	; assembler added errata NOP
  3627                           
  3628                           ;main.c: 499: currentLedBlock++;
  3629  001142  0100               	movlb	0	; () banked
  3630  001144  2BD8               	incf	_currentLedBlock& (0+255),f,b
  3631                           
  3632                           ;main.c: 502: currentLedBlock &= 0xFB;
  3633  001146  95D8               	bcf	_currentLedBlock& (0+255),2,b
  3634                           
  3635                           ; BSR set to: 0
  3636  001148  0012               	return		;funcret
  3637  00114A  FFFF               	dw	65535	; errata NOP
  3638  00114C                     __end_of_ProcessLightBlock:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           intcon	equ	0xFF2
  3645                           postinc0	equ	0xFEE
  3646                           wreg	equ	0xFE8
  3647                           postdec1	equ	0xFE5
  3648                           fsr1h	equ	0xFE2
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           fsr2h	equ	0xFDA
  3654                           fsr2l	equ	0xFD9
  3655                           status	equ	0xFD8
  3656                           
  3657 ;; *************** function _UpdateLedRegister *****************
  3658 ;; Defined at:
  3659 ;;		line 260 in file "main.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  regIndex        1    wreg     unsigned char 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  regIndex        1    6[COMRAM] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3673 ;;      Params:         0       0       0       0       0       0       0
  3674 ;;      Locals:         1       0       0       0       0       0       0
  3675 ;;      Temps:          0       0       0       0       0       0       0
  3676 ;;      Totals:         1       0       0       0       0       0       0
  3677 ;;Total ram usage:        1 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    2
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_ProcessLightBlock
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text17
  3688  002944                     __ptext17:
  3689                           	opt stack 0
  3690  002944                     _UpdateLedRegister:
  3691                           	opt stack 27
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;incstack = 0
  3695  002944  FFFF               	dw	65535
  3696                           
  3697                           ;UpdateLedRegister@regIndex stored from wreg
  3698  002946  6E07               	movwf	UpdateLedRegister@regIndex,c
  3699                           
  3700                           ;main.c: 262: switch(regIndex)
  3701  002948  D014               	goto	l6010
  3702  00294A                     l248:
  3703                           
  3704                           ;main.c: 265: LATAbits.LATA4 = 0;
  3705  00294A  9889               	bcf	3977,4,c	;volatile
  3706                           
  3707                           ;main.c: 266: TRISAbits.RA4 = 0;
  3708  00294C  9892               	bcf	3986,4,c	;volatile
  3709                           
  3710                           ;main.c: 267: LATAbits.LATA4 = 1;
  3711  00294E  8889               	bsf	3977,4,c	;volatile
  3712                           
  3713                           ;main.c: 268: TRISAbits.RA4 = 1;
  3714  002950  8892               	bsf	3986,4,c	;volatile
  3715                           
  3716                           ;main.c: 269: break;
  3717  002952  D018               	goto	l253
  3718  002954                     l250:
  3719                           
  3720                           ;main.c: 271: LATCbits.LATC3 = 0;
  3721  002954  968B               	bcf	3979,3,c	;volatile
  3722                           
  3723                           ;main.c: 272: TRISCbits.RC3 = 0;
  3724  002956  9694               	bcf	3988,3,c	;volatile
  3725                           
  3726                           ;main.c: 273: LATCbits.LATC3 = 1;
  3727  002958  868B               	bsf	3979,3,c	;volatile
  3728                           
  3729                           ;main.c: 274: TRISCbits.RC3 = 1;
  3730  00295A  8694               	bsf	3988,3,c	;volatile
  3731                           
  3732                           ;main.c: 275: break;
  3733  00295C  D013               	goto	l253
  3734  00295E                     l251:
  3735                           
  3736                           ;main.c: 277: LATCbits.LATC0 = 0;
  3737  00295E  908B               	bcf	3979,0,c	;volatile
  3738                           
  3739                           ;main.c: 278: TRISCbits.RC0 = 0;
  3740  002960  9094               	bcf	3988,0,c	;volatile
  3741                           
  3742                           ;main.c: 279: LATCbits.LATC0 = 1;
  3743  002962  808B               	bsf	3979,0,c	;volatile
  3744                           
  3745                           ;main.c: 280: TRISCbits.RC0 = 1;
  3746  002964  8094               	bsf	3988,0,c	;volatile
  3747                           
  3748                           ;main.c: 281: break;
  3749  002966  D00E               	goto	l253
  3750  002968                     l252:
  3751                           
  3752                           ;main.c: 283: LATCbits.LATC1 = 0;
  3753  002968  928B               	bcf	3979,1,c	;volatile
  3754                           
  3755                           ;main.c: 284: TRISCbits.RC1 = 0;
  3756  00296A  9294               	bcf	3988,1,c	;volatile
  3757                           
  3758                           ;main.c: 285: LATCbits.LATC1 = 1;
  3759  00296C  828B               	bsf	3979,1,c	;volatile
  3760                           
  3761                           ;main.c: 286: TRISCbits.RC1 = 1;
  3762  00296E  8294               	bsf	3988,1,c	;volatile
  3763                           
  3764                           ;main.c: 287: break;
  3765  002970  D009               	goto	l253
  3766  002972                     l6010:
  3767  002972  FFFF               	dw	65535	; assembler added errata NOP
  3768  002974  5007               	movf	UpdateLedRegister@regIndex,w,c
  3769                           
  3770                           ; Switch size 1, requested type "speed"
  3771                           ; Number of cases is 4, Range of values is 0 to 3
  3772                           ; switch strategies available:
  3773                           ; Name         Instructions Cycles
  3774                           ; simple_byte           13     7 (average)
  3775                           ;	Chosen strategy is simple_byte
  3776  002976  E0E9               	bz	l248
  3777  002978  0A01               	xorlw	1	; case 1
  3778  00297A  E0EC               	bz	l250
  3779  00297C  0A03               	xorlw	3	; case 2
  3780  00297E  E0EF               	bz	l251
  3781  002980  0A01               	xorlw	1	; case 3
  3782  002982  E0F2               	bz	l252
  3783  002984                     l253:
  3784  002984  FFFF               	dw	65535	; assembler added errata NOP
  3785  002986  0012               	return		;funcret
  3786  002988  FFFF               	dw	65535	; errata NOP
  3787  00298A                     __end_of_UpdateLedRegister:
  3788                           	opt stack 0
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           intcon	equ	0xFF2
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           postdec1	equ	0xFE5
  3797                           fsr1h	equ	0xFE2
  3798                           fsr1l	equ	0xFE1
  3799                           indf2	equ	0xFDF
  3800                           postinc2	equ	0xFDE
  3801                           postdec2	equ	0xFDD
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _ProcessDiary *****************
  3807 ;; Defined at:
  3808 ;;		line 692 in file "main.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  totalMinutes    2   32[COMRAM] unsigned int 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : F/1
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3822 ;;      Params:         0       0       0       0       0       0       0
  3823 ;;      Locals:         2       0       0       0       0       0       0
  3824 ;;      Temps:          4       0       0       0       0       0       0
  3825 ;;      Totals:         6       0       0       0       0       0       0
  3826 ;;Total ram usage:        6 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    5
  3829 ;; This function calls:
  3830 ;;		_GetTime
  3831 ;;		_LightLed
  3832 ;;		_LoadNextEvent
  3833 ;;		_PlaySound
  3834 ;;		_SwitchOffAllLeds
  3835 ;;		_getTotalMinutes
  3836 ;; This function is called by:
  3837 ;;		_main
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text18
  3842  001DC2                     __ptext18:
  3843                           	opt stack 0
  3844  001DC2                     _ProcessDiary:
  3845                           	opt stack 25
  3846                           
  3847                           ;incstack = 0
  3848  001DC2  FFFF               	dw	65535
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;main.c: 695: if(curEventNum == 0xff)
  3852  001DC4  2873               	incf	_curEventNum,w,c
  3853  001DC6  E058               	bz	l417
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;main.c: 697: uint16_t totalMinutes;
  3857                           ;main.c: 701: if(!getTotalMinutes(&totalMinutes))
  3858  001DC8  0E21               	movlw	ProcessDiary@totalMinutes& (0+255)
  3859  001DCA  EC4B  F016         	call	_getTotalMinutes
  3860  001DCE  0900               	iorlw	0
  3861  001DD0  E053               	bz	l417
  3862                           
  3863                           ;main.c: 704: if(totalMinutes == 0)
  3864  001DD2  5021               	movf	ProcessDiary@totalMinutes,w,c
  3865  001DD4  1022               	iorwf	ProcessDiary@totalMinutes+1,w,c
  3866  001DD6  E10C               	bnz	l6974
  3867                           
  3868                           ;main.c: 705: {
  3869                           ;main.c: 706: SwitchOffAllLeds();
  3870  001DD8  EC38  F016         	call	_SwitchOffAllLeds	;wreg free
  3871                           
  3872                           ;main.c: 707: curEventNum = 0xff;
  3873  001DDC  6873               	setf	_curEventNum,c
  3874                           
  3875                           ;main.c: 708: LoadNextEvent();
  3876  001DDE  EC7A  F00B         	call	_LoadNextEvent	;wreg free
  3877                           
  3878                           ;main.c: 709: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  3879  001DE2  5074               	movf	_currentAlarmedEventNum,w,c
  3880  001DE4  6E1D               	movwf	??_ProcessDiary& (0+255),c
  3881  001DE6  5073               	movf	_curEventNum,w,c
  3882  001DE8  0101               	movlb	1	; () banked
  3883  001DEA  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  3884  001DEC  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  3885  001DF0                     l6974:
  3886                           
  3887                           ;main.c: 710: }
  3888                           ;main.c: 713: if(curEventTotalMinutes == totalMinutes)
  3889  001DF0  5021               	movf	ProcessDiary@totalMinutes,w,c
  3890  001DF2  0100               	movlb	0	; () banked
  3891  001DF4  19C8               	xorwf	_curEventTotalMinutes& (0+255),w,b
  3892  001DF6  E140               	bnz	l417
  3893  001DF8  5022               	movf	ProcessDiary@totalMinutes+1,w,c
  3894  001DFA  19C9               	xorwf	(_curEventTotalMinutes+1)& (0+255),w,b
  3895  001DFC  E13D               	bnz	l417
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 714: {
  3899                           ;main.c: 716: if(currentAlarmedEventNum != 0xff)
  3900  001DFE  2874               	incf	_currentAlarmedEventNum,w,c
  3901  001E00  E006               	bz	l6980
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 717: {
  3905                           ;main.c: 718: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  3906  001E02  0E02               	movlw	2
  3907  001E04  6E09               	movwf	LightLed@ledState,c
  3908  001E06  6A0A               	clrf	LightLed@blink,c
  3909  001E08  2874               	incf	_currentAlarmedEventNum,w,c
  3910  001E0A  ECB5  F004         	call	_LightLed
  3911  001E0E                     l6980:
  3912                           
  3913                           ;main.c: 719: }
  3914                           ;main.c: 721: {
  3915                           ;main.c: 722: currentAlarmedEventNum = curEventNum;
  3916  001E0E  C073  F074         	movff	_curEventNum,_currentAlarmedEventNum
  3917                           
  3918                           ;main.c: 724: LightLed(currentAlarmedEventNum + 1, LED_ORANGE, 1);
  3919  001E12  0E03               	movlw	3
  3920  001E14  6E09               	movwf	LightLed@ledState,c
  3921  001E16  0E01               	movlw	1
  3922  001E18  6E0A               	movwf	LightLed@blink,c
  3923  001E1A  2874               	incf	_currentAlarmedEventNum,w,c
  3924  001E1C  ECB5  F004         	call	_LightLed
  3925                           
  3926                           ;main.c: 725: if(_nextEventSoundId != 0)
  3927  001E20  0100               	movlb	0	; () banked
  3928  001E22  51D3               	movf	__nextEventSoundId& (0+255),w,b
  3929  001E24  E007               	bz	l6986
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main.c: 726: {
  3933                           ;main.c: 727: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  3934  001E26  C0C0  F015         	movff	__nextEventPlayDuration,PlaySound@playDuration
  3935  001E2A  C0C1  F016         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  3936  001E2E  05D3               	decf	__nextEventSoundId& (0+255),w,b
  3937  001E30  EC0F  F00E         	call	_PlaySound
  3938  001E34                     l6986:
  3939                           
  3940                           ;main.c: 728: }
  3941                           ;main.c: 737: eventResetSecond = *GetTime() + eventAcceptTime;
  3942  001E34  ECF4  F016         	call	_GetTime	;wreg free
  3943  001E38  6ED9               	movwf	fsr2l,c
  3944  001E3A  6ADA               	clrf	fsr2h,c
  3945  001E3C  CFDE F01D          	movff	postinc2,??_ProcessDiary
  3946  001E40  CFDE F01E          	movff	postinc2,??_ProcessDiary+1
  3947  001E44  CFDE F01F          	movff	postinc2,??_ProcessDiary+2
  3948  001E48  CFDE F020          	movff	postinc2,??_ProcessDiary+3
  3949  001E4C  0100               	movlb	0	; () banked
  3950  001E4E  51D9               	movf	_eventAcceptTime& (0+255),w,b
  3951  001E50  241D               	addwf	??_ProcessDiary,w,c
  3952  001E52  6FAC               	movwf	_eventResetSecond& (0+255),b
  3953  001E54  0E00               	movlw	0
  3954  001E56  201E               	addwfc	??_ProcessDiary+1,w,c
  3955  001E58  6FAD               	movwf	(_eventResetSecond+1)& (0+255),b
  3956  001E5A  0E00               	movlw	0
  3957  001E5C  201F               	addwfc	??_ProcessDiary+2,w,c
  3958  001E5E  6FAE               	movwf	(_eventResetSecond+2)& (0+255),b
  3959  001E60  0E00               	movlw	0
  3960  001E62  2020               	addwfc	??_ProcessDiary+3,w,c
  3961  001E64  6FAF               	movwf	(_eventResetSecond+3)& (0+255),b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;main.c: 739: LoadNextEvent();
  3965  001E66  EC7A  F00B         	call	_LoadNextEvent	;wreg free
  3966                           
  3967                           ;main.c: 740: }
  3968                           ;main.c: 741: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  3969  001E6A  5074               	movf	_currentAlarmedEventNum,w,c
  3970  001E6C  6E1D               	movwf	??_ProcessDiary& (0+255),c
  3971  001E6E  5073               	movf	_curEventNum,w,c
  3972  001E70  0101               	movlb	1	; () banked
  3973  001E72  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  3974  001E74  C01D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  3975  001E78                     l417:
  3976  001E78  0012               	return		;funcret
  3977  001E7A  FFFF               	dw	65535	; errata NOP
  3978  001E7C                     __end_of_ProcessDiary:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _SwitchOffAllLeds *****************
  3998 ;; Defined at:
  3999 ;;		line 292 in file "main.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  i               1    6[COMRAM] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      void 
  4006 ;; Registers used:
  4007 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4013 ;;      Params:         0       0       0       0       0       0       0
  4014 ;;      Locals:         1       0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0
  4016 ;;      Totals:         1       0       0       0       0       0       0
  4017 ;;Total ram usage:        1 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    2
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_InitFromEeprom
  4024 ;;		_ProcessDiary
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text19
  4029  002C70                     __ptext19:
  4030                           	opt stack 0
  4031  002C70                     _SwitchOffAllLeds:
  4032                           	opt stack 26
  4033                           
  4034                           ;incstack = 0
  4035  002C70  FFFF               	dw	65535
  4036                           
  4037                           ;main.c: 294: for(uint8_t i = 0; i < 16 - 1; i++)
  4038  002C72  6A07               	clrf	SwitchOffAllLeds@i,c
  4039  002C74                     l5804:
  4040  002C74  FFFF               	dw	65535	; assembler added errata NOP
  4041                           
  4042                           ;main.c: 295: {
  4043                           ;main.c: 296: ledStatuses[i] = 0;
  4044  002C76  5007               	movf	SwitchOffAllLeds@i,w,c
  4045  002C78  0F90               	addlw	low _ledStatuses
  4046  002C7A  6ED9               	movwf	fsr2l,c
  4047  002C7C  6ADA               	clrf	fsr2h,c
  4048  002C7E  6ADF               	clrf	indf2,c
  4049                           
  4050                           ;main.c: 297: ledBlink[i] = 0;
  4051  002C80  5007               	movf	SwitchOffAllLeds@i,w,c
  4052  002C82  0F80               	addlw	low _ledBlink
  4053  002C84  6ED9               	movwf	fsr2l,c
  4054  002C86  6ADA               	clrf	fsr2h,c
  4055  002C88  6ADF               	clrf	indf2,c
  4056  002C8A  2A07               	incf	SwitchOffAllLeds@i,f,c
  4057  002C8C  0E0E               	movlw	14
  4058  002C8E  6407               	cpfsgt	SwitchOffAllLeds@i,c
  4059  002C90  D7F1               	goto	l5804
  4060  002C92  0C0E               	retlw	14	;funcret
  4061  002C94  FFFF               	dw	65535	; errata NOP
  4062  002C96                     __end_of_SwitchOffAllLeds:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1h	equ	0xFE2
  4073                           fsr1l	equ	0xFE1
  4074                           indf2	equ	0xFDF
  4075                           postinc2	equ	0xFDE
  4076                           postdec2	equ	0xFDD
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _PlaySound *****************
  4082 ;; Defined at:
  4083 ;;		line 566 in file "main.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  soundId         1    wreg     unsigned char 
  4086 ;;  playDuration    2   20[COMRAM] unsigned int 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  soundId         1   26[COMRAM] unsigned char 
  4089 ;;  soundAddr       1   27[COMRAM] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      unsigned char 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4099 ;;      Params:         2       0       0       0       0       0       0
  4100 ;;      Locals:         2       0       0       0       0       0       0
  4101 ;;      Temps:          4       0       0       0       0       0       0
  4102 ;;      Totals:         8       0       0       0       0       0       0
  4103 ;;Total ram usage:        8 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    4
  4106 ;; This function calls:
  4107 ;;		_GetTime
  4108 ;;		_SoundPlayNextStep
  4109 ;; This function is called by:
  4110 ;;		_ProcessDiary
  4111 ;;		_CommandSetStatusLed
  4112 ;;		_ProcessUserCommands
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text20
  4117  001C1E                     __ptext20:
  4118                           	opt stack 0
  4119  001C1E                     _PlaySound:
  4120                           	opt stack 24
  4121                           
  4122                           ;incstack = 0
  4123  001C1E  FFFF               	dw	65535
  4124                           
  4125                           ;PlaySound@soundId stored from wreg
  4126  001C20  6E1B               	movwf	PlaySound@soundId,c
  4127                           
  4128                           ;main.c: 568: if(soundId >= _soundCount)
  4129  001C22  506F               	movf	__soundCount,w,c
  4130  001C24  5C1B               	subwf	PlaySound@soundId,w,c
  4131  001C26  E266               	bc	l381
  4132                           
  4133                           ;main.c: 571: if(playDuration == 0)
  4134  001C28  5015               	movf	PlaySound@playDuration,w,c
  4135  001C2A  1016               	iorwf	PlaySound@playDuration+1,w,c
  4136  001C2C  E106               	bnz	l5598
  4137                           
  4138                           ;main.c: 572: soundTestEnd = 0;
  4139  001C2E  0100               	movlb	0	; () banked
  4140  001C30  6BB8               	clrf	_soundTestEnd& (0+255),b
  4141  001C32  6BB9               	clrf	(_soundTestEnd+1)& (0+255),b
  4142  001C34  6BBA               	clrf	(_soundTestEnd+2)& (0+255),b
  4143  001C36  6BBB               	clrf	(_soundTestEnd+3)& (0+255),b
  4144  001C38  D023               	goto	l5604
  4145  001C3A                     l5598:
  4146                           
  4147                           ;main.c: 573: else if(playDuration == 65535)
  4148  001C3A  2815               	incf	PlaySound@playDuration,w,c
  4149  001C3C  E108               	bnz	l5602
  4150  001C3E  2816               	incf	PlaySound@playDuration+1,w,c
  4151  001C40  E106               	bnz	l5602
  4152                           
  4153                           ;main.c: 574: soundTestEnd = 4294967295;
  4154  001C42  0100               	movlb	0	; () banked
  4155  001C44  69B8               	setf	_soundTestEnd& (0+255),b
  4156  001C46  69B9               	setf	(_soundTestEnd+1)& (0+255),b
  4157  001C48  69BA               	setf	(_soundTestEnd+2)& (0+255),b
  4158  001C4A  69BB               	setf	(_soundTestEnd+3)& (0+255),b
  4159  001C4C  D019               	goto	l5604
  4160  001C4E                     l5602:
  4161                           
  4162                           ;main.c: 575: else
  4163                           ;main.c: 576: soundTestEnd = *GetTime() + playDuration;
  4164  001C4E  ECF4  F016         	call	_GetTime	;wreg free
  4165  001C52  6ED9               	movwf	fsr2l,c
  4166  001C54  6ADA               	clrf	fsr2h,c
  4167  001C56  CFDE F017          	movff	postinc2,??_PlaySound
  4168  001C5A  CFDE F018          	movff	postinc2,??_PlaySound+1
  4169  001C5E  CFDE F019          	movff	postinc2,??_PlaySound+2
  4170  001C62  CFDE F01A          	movff	postinc2,??_PlaySound+3
  4171  001C66  5015               	movf	PlaySound@playDuration,w,c
  4172  001C68  2417               	addwf	??_PlaySound,w,c
  4173  001C6A  0100               	movlb	0	; () banked
  4174  001C6C  6FB8               	movwf	_soundTestEnd& (0+255),b
  4175  001C6E  5016               	movf	PlaySound@playDuration+1,w,c
  4176  001C70  2018               	addwfc	??_PlaySound+1,w,c
  4177  001C72  6FB9               	movwf	(_soundTestEnd+1)& (0+255),b
  4178  001C74  0E00               	movlw	0
  4179  001C76  2019               	addwfc	??_PlaySound+2,w,c
  4180  001C78  6FBA               	movwf	(_soundTestEnd+2)& (0+255),b
  4181  001C7A  0E00               	movlw	0
  4182  001C7C  201A               	addwfc	??_PlaySound+3,w,c
  4183  001C7E  6FBB               	movwf	(_soundTestEnd+3)& (0+255),b
  4184  001C80                     l5604:
  4185  001C80  FFFF               	dw	65535	; assembler added errata NOP
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;main.c: 578: uint8_t soundAddr = ( EEADR = 140 + 1 + soundId, (void)0, RD = 1, EEDATA);
  4189  001C82  501B               	movf	PlaySound@soundId,w,c
  4190  001C84  0F8D               	addlw	141
  4191  001C86  6EA9               	movwf	4009,c	;volatile
  4192                           
  4193                           ; BSR set to: 0
  4194  001C88  80A6               	bsf	4006,0,c	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197  001C8A  CFA8 F01C          	movff	4008,PlaySound@soundAddr	;volatile
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;main.c: 579: if(140 + _soundCount + soundAddr >= 256)
  4201  001C8E  501C               	movf	PlaySound@soundAddr,w,c
  4202  001C90  C06F  F017         	movff	__soundCount,??_PlaySound
  4203  001C94  6A18               	clrf	(??_PlaySound+1)& (0+255),c
  4204  001C96  2617               	addwf	??_PlaySound,f,c
  4205  001C98  0E00               	movlw	0
  4206  001C9A  2218               	addwfc	??_PlaySound+1,f,c
  4207  001C9C  0E8C               	movlw	140
  4208  001C9E  2617               	addwf	??_PlaySound,f,c
  4209  001CA0  0E00               	movlw	0
  4210  001CA2  2218               	addwfc	??_PlaySound+1,f,c
  4211  001CA4  BE18               	btfsc	??_PlaySound+1,7,c
  4212  001CA6  D002               	goto	l5614
  4213  001CA8  0418               	decf	??_PlaySound+1,w,c
  4214  001CAA  E224               	bc	l381
  4215  001CAC                     l5614:
  4216  001CAC  FFFF               	dw	65535	; assembler added errata NOP
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;main.c: 582: _playingSoundSteps = ( EEADR = 140 + 1 + _soundCount + soundAddr, (void)0,
      +                           RD = 1, EEDATA);
  4220  001CAE  506F               	movf	__soundCount,w,c
  4221  001CB0  241C               	addwf	PlaySound@soundAddr,w,c
  4222  001CB2  0F8D               	addlw	141
  4223  001CB4  6EA9               	movwf	4009,c	;volatile
  4224                           
  4225                           ; BSR set to: 0
  4226  001CB6  80A6               	bsf	4006,0,c	;volatile
  4227                           
  4228                           ; BSR set to: 0
  4229  001CB8  CFA8 F0D5          	movff	4008,__playingSoundSteps	;volatile
  4230                           
  4231                           ;main.c: 584: _playingSoundStartPosInEe = 140 + 1 + _soundCount + soundAddr + 1;
  4232  001CBC  506F               	movf	__soundCount,w,c
  4233  001CBE  241C               	addwf	PlaySound@soundAddr,w,c
  4234  001CC0  0F8E               	addlw	142
  4235  001CC2  6E6E               	movwf	__playingSoundStartPosInEe,c
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;main.c: 585: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  4239  001CC4  51D5               	movf	__playingSoundSteps& (0+255),w,b
  4240  001CC6  6E17               	movwf	??_PlaySound& (0+255),c
  4241  001CC8  506E               	movf	__playingSoundStartPosInEe,w,c
  4242  001CCA  0101               	movlb	1	; () banked
  4243  001CCC  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  4244  001CCE  C017  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;main.c: 586: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  4248  001CD2  0100               	movlb	0	; () banked
  4249  001CD4  51D5               	movf	__playingSoundSteps& (0+255),w,b
  4250  001CD6  0D03               	mullw	3
  4251  001CD8  506E               	movf	__playingSoundStartPosInEe,w,c
  4252  001CDA  26F3               	addwf	prodl,f,c
  4253  001CDC  0E00               	movlw	0
  4254  001CDE  22F4               	addwfc	prodh,f,c
  4255  001CE0  BEF4               	btfsc	prodh,7,c
  4256  001CE2  D002               	goto	l387
  4257  001CE4  04F4               	decf	prodh,w,c
  4258  001CE6  E206               	bc	l381
  4259  001CE8                     l387:
  4260  001CE8  FFFF               	dw	65535	; assembler added errata NOP
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;main.c: 589: _playingSoundCurPos = 0;
  4264  001CEA  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;main.c: 590: _isSoundPlaying = 1;
  4268  001CEC  0E01               	movlw	1
  4269  001CEE  6FD1               	movwf	__isSoundPlaying& (0+255),b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;main.c: 591: SoundPlayNextStep();
  4273  001CF0  ECF4  F00F         	call	_SoundPlayNextStep	;wreg free
  4274  001CF4                     l381:
  4275  001CF4  0012               	return		;funcret
  4276  001CF6  FFFF               	dw	65535	; errata NOP
  4277  001CF8                     __end_of_PlaySound:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           intcon	equ	0xFF2
  4286                           postinc0	equ	0xFEE
  4287                           wreg	equ	0xFE8
  4288                           postdec1	equ	0xFE5
  4289                           fsr1h	equ	0xFE2
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _SoundPlayNextStep *****************
  4299 ;; Defined at:
  4300 ;;		line 523 in file "main.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  duration        1   19[COMRAM] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      void 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : F/0
  4311 ;;		On exit  : F/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4314 ;;      Params:         0       0       0       0       0       0       0
  4315 ;;      Locals:         1       0       0       0       0       0       0
  4316 ;;      Temps:          5       0       0       0       0       0       0
  4317 ;;      Totals:         6       0       0       0       0       0       0
  4318 ;;Total ram usage:        6 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    3
  4321 ;; This function calls:
  4322 ;;		_GetTime
  4323 ;;		_SetBuzzerDuty
  4324 ;;		_StopPlaying
  4325 ;;		_millis
  4326 ;; This function is called by:
  4327 ;;		_PlaySound
  4328 ;;		_main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text21
  4333  001FE8                     __ptext21:
  4334                           	opt stack 0
  4335  001FE8                     _SoundPlayNextStep:
  4336                           	opt stack 24
  4337                           
  4338                           ;incstack = 0
  4339  001FE8  FFFF               	dw	65535
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;main.c: 525: if(_playingSoundCurPos >= _playingSoundSteps)
  4343  001FEA  51D5               	movf	__playingSoundSteps& (0+255),w,b
  4344  001FEC  5DD4               	subwf	__playingSoundCurPos& (0+255),w,b
  4345  001FEE  E316               	bnc	l5490
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;main.c: 526: {
  4349                           ;main.c: 527: _playingSoundCurPos = 0;
  4350  001FF0  6BD4               	clrf	__playingSoundCurPos& (0+255),b
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;main.c: 528: if(*GetTime() >= soundTestEnd)
  4354  001FF2  ECF4  F016         	call	_GetTime	;wreg free
  4355  001FF6  6ED9               	movwf	fsr2l,c
  4356  001FF8  6ADA               	clrf	fsr2h,c
  4357  001FFA  0100               	movlb	0	; () banked
  4358  001FFC  51B8               	movf	_soundTestEnd& (0+255),w,b
  4359  001FFE  5CDE               	subwf	postinc2,w,c
  4360  002000  51B9               	movf	(_soundTestEnd+1)& (0+255),w,b
  4361  002002  58DE               	subwfb	postinc2,w,c
  4362  002004  51BA               	movf	(_soundTestEnd+2)& (0+255),w,b
  4363  002006  58DE               	subwfb	postinc2,w,c
  4364  002008  50DE               	movf	postinc2,w,c
  4365  00200A  0A80               	xorlw	128
  4366  00200C  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  4367  00200E  51BB               	movf	(_soundTestEnd+3)& (0+255),w,b
  4368  002010  0A80               	xorlw	128
  4369  002012  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  4370  002014  E303               	bnc	l5490
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;main.c: 529: {
  4374                           ;main.c: 530: StopPlaying();
  4375  002016  ECCA  F016         	call	_StopPlaying	;wreg free
  4376  00201A  D03A               	goto	l374
  4377  00201C                     l5490:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 532: }
  4381                           ;main.c: 533: }
  4382                           ;main.c: 534: _playingEndMs = millis() + (((uint16_t)( EEADR = _playingSoundStartPosInEe
      +                           + _playingSoundCurPos * 3, (void)0, RD = 1, EEDATA)<<8)|0);
  4383  00201C  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  4384  00201E  0D03               	mullw	3
  4385  002020  50F3               	movf	prodl,w,c
  4386  002022  246E               	addwf	__playingSoundStartPosInEe,w,c
  4387  002024  6EA9               	movwf	4009,c	;volatile
  4388                           
  4389                           ; BSR set to: 0
  4390  002026  80A6               	bsf	4006,0,c	;volatile
  4391                           
  4392                           ; BSR set to: 0
  4393  002028  50A8               	movf	4008,w,c	;volatile
  4394  00202A  6E10               	movwf	(??_SoundPlayNextStep+1)& (0+255),c
  4395  00202C  6A0F               	clrf	??_SoundPlayNextStep& (0+255),c
  4396  00202E  EC23  F016         	call	_millis	;wreg free
  4397  002032  500F               	movf	??_SoundPlayNextStep,w,c
  4398  002034  2407               	addwf	?_millis,w,c
  4399  002036  0100               	movlb	0	; () banked
  4400  002038  6FA0               	movwf	__playingEndMs& (0+255),b
  4401  00203A  5010               	movf	??_SoundPlayNextStep+1,w,c
  4402  00203C  2008               	addwfc	?_millis+1,w,c
  4403  00203E  6FA1               	movwf	(__playingEndMs+1)& (0+255),b
  4404  002040  0E00               	movlw	0
  4405  002042  2009               	addwfc	?_millis+2,w,c
  4406  002044  6FA2               	movwf	(__playingEndMs+2)& (0+255),b
  4407  002046  0E00               	movlw	0
  4408  002048  200A               	addwfc	?_millis+3,w,c
  4409  00204A  6FA3               	movwf	(__playingEndMs+3)& (0+255),b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;main.c: 535: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  4413  00204C  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  4414  00204E  0D03               	mullw	3
  4415  002050  50F3               	movf	prodl,w,c
  4416  002052  246E               	addwf	__playingSoundStartPosInEe,w,c
  4417  002054  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  4418  002056  280F               	incf	??_SoundPlayNextStep,w,c
  4419  002058  6EA9               	movwf	4009,c	;volatile
  4420                           
  4421                           ; BSR set to: 0
  4422  00205A  80A6               	bsf	4006,0,c	;volatile
  4423                           
  4424                           ; BSR set to: 0
  4425  00205C  CFA8 FFCB          	movff	4008,4043	;volatile
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;main.c: 536: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  4429  002060  51D4               	movf	__playingSoundCurPos& (0+255),w,b
  4430  002062  0D03               	mullw	3
  4431  002064  50F3               	movf	prodl,w,c
  4432  002066  246E               	addwf	__playingSoundStartPosInEe,w,c
  4433  002068  0F02               	addlw	2
  4434  00206A  6EA9               	movwf	4009,c	;volatile
  4435                           
  4436                           ; BSR set to: 0
  4437  00206C  80A6               	bsf	4006,0,c	;volatile
  4438                           
  4439                           ; BSR set to: 0
  4440  00206E  CFA8 F014          	movff	4008,SoundPlayNextStep@duration	;volatile
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;main.c: 537: _playingSoundCurPos++;
  4444  002072  2BD4               	incf	__playingSoundCurPos& (0+255),f,b
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;main.c: 538: if(duration == 0 || PR2 == 0)
  4448  002074  5014               	movf	SoundPlayNextStep@duration,w,c
  4449  002076  E002               	bz	l377
  4450                           
  4451                           ; BSR set to: 0
  4452  002078  50CB               	movf	4043,w,c	;volatile
  4453  00207A  E103               	bnz	l5514
  4454  00207C                     l377:
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;main.c: 539: {
  4458                           ;main.c: 540: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4459  00207C  94CA               	bcf	4042,2,c	;volatile
  4460  00207E  8494               	bsf	3988,2,c	;volatile
  4461                           
  4462                           ;main.c: 541: return;
  4463  002080  D007               	goto	l374
  4464  002082                     l5514:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 542: }
  4468                           ;main.c: 543: SetBuzzerDuty(duration);
  4469  002082  C014  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  4470  002086  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4471  002088  ECDE  F015         	call	_SetBuzzerDuty	;wreg free
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 544: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  4475  00208C  9494               	bcf	3988,2,c	;volatile
  4476                           
  4477                           ; BSR set to: 0
  4478  00208E  84CA               	bsf	4042,2,c	;volatile
  4479  002090                     l374:
  4480  002090  FFFF               	dw	65535	; assembler added errata NOP
  4481                           
  4482                           ; BSR set to: 0
  4483  002092  0012               	return		;funcret
  4484  002094  FFFF               	dw	65535	; errata NOP
  4485  002096                     __end_of_SoundPlayNextStep:
  4486                           	opt stack 0
  4487                           tblptru	equ	0xFF8
  4488                           tblptrh	equ	0xFF7
  4489                           tblptrl	equ	0xFF6
  4490                           tablat	equ	0xFF5
  4491                           prodh	equ	0xFF4
  4492                           prodl	equ	0xFF3
  4493                           intcon	equ	0xFF2
  4494                           postinc0	equ	0xFEE
  4495                           wreg	equ	0xFE8
  4496                           postdec1	equ	0xFE5
  4497                           fsr1h	equ	0xFE2
  4498                           fsr1l	equ	0xFE1
  4499                           indf2	equ	0xFDF
  4500                           postinc2	equ	0xFDE
  4501                           postdec2	equ	0xFDD
  4502                           fsr2h	equ	0xFDA
  4503                           fsr2l	equ	0xFD9
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _StopPlaying *****************
  4507 ;; Defined at:
  4508 ;;		line 515 in file "main.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		None
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : F/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4522 ;;      Params:         0       0       0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    2
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_SoundPlayNextStep
  4533 ;;		_ResetEvent
  4534 ;;		_main
  4535 ;;		_CommandSetStatusLed
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text22
  4540  002D94                     __ptext22:
  4541                           	opt stack 0
  4542  002D94                     _StopPlaying:
  4543                           	opt stack 24
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;incstack = 0
  4547  002D94  FFFF               	dw	65535
  4548                           
  4549                           ;main.c: 517: _isSoundPlaying = 0;
  4550  002D96  0100               	movlb	0	; () banked
  4551  002D98  6BD1               	clrf	__isSoundPlaying& (0+255),b
  4552                           
  4553                           ;main.c: 518: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  4554  002D9A  94CA               	bcf	4042,2,c	;volatile
  4555  002D9C  8494               	bsf	3988,2,c	;volatile
  4556                           
  4557                           ; BSR set to: 0
  4558  002D9E  0012               	return		;funcret
  4559  002DA0  FFFF               	dw	65535	; errata NOP
  4560  002DA2                     __end_of_StopPlaying:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           intcon	equ	0xFF2
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1h	equ	0xFE2
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _SetBuzzerDuty *****************
  4582 ;; Defined at:
  4583 ;;		line 392 in file "main.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  dc              2    6[COMRAM] unsigned int 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : F/0
  4594 ;;		On exit  : F/0
  4595 ;;		Unchanged: F/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4597 ;;      Params:         2       0       0       0       0       0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0
  4599 ;;      Temps:          2       0       0       0       0       0       0
  4600 ;;      Totals:         4       0       0       0       0       0       0
  4601 ;;Total ram usage:        4 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    2
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_SoundPlayNextStep
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text23
  4612  002BBC                     __ptext23:
  4613                           	opt stack 0
  4614  002BBC                     _SetBuzzerDuty:
  4615                           	opt stack 24
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;incstack = 0
  4619  002BBC  FFFF               	dw	65535
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;main.c: 397: CCP1CONbits.DC1B = dc & 0x03;
  4623  002BBE  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4624  002BC2  0E03               	movlw	3
  4625  002BC4  1609               	andwf	??_SetBuzzerDuty,f,c
  4626  002BC6  3A09               	swapf	??_SetBuzzerDuty,f,c
  4627  002BC8  50BD               	movf	4029,w,c	;volatile
  4628  002BCA  1809               	xorwf	??_SetBuzzerDuty,w,c
  4629  002BCC  0BCF               	andlw	-49
  4630  002BCE  1809               	xorwf	??_SetBuzzerDuty,w,c
  4631  002BD0  6EBD               	movwf	4029,c	;volatile
  4632                           
  4633                           ;main.c: 401: CCPR1L = (uint8_t)(dc >> 2);
  4634  002BD2  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4635  002BD6  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  4636  002BDA  90D8               	bcf	status,0,c
  4637  002BDC  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4638  002BDE  3209               	rrcf	??_SetBuzzerDuty,f,c
  4639  002BE0  90D8               	bcf	status,0,c
  4640  002BE2  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4641  002BE4  3209               	rrcf	??_SetBuzzerDuty,f,c
  4642  002BE6  5009               	movf	??_SetBuzzerDuty,w,c
  4643  002BE8  6EBE               	movwf	4030,c	;volatile
  4644                           
  4645                           ; BSR set to: 0
  4646  002BEA  0012               	return		;funcret
  4647  002BEC  FFFF               	dw	65535	; errata NOP
  4648  002BEE                     __end_of_SetBuzzerDuty:
  4649                           	opt stack 0
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           prodh	equ	0xFF4
  4655                           prodl	equ	0xFF3
  4656                           intcon	equ	0xFF2
  4657                           postinc0	equ	0xFEE
  4658                           wreg	equ	0xFE8
  4659                           postdec1	equ	0xFE5
  4660                           fsr1h	equ	0xFE2
  4661                           fsr1l	equ	0xFE1
  4662                           indf2	equ	0xFDF
  4663                           postinc2	equ	0xFDE
  4664                           postdec2	equ	0xFDD
  4665                           fsr2h	equ	0xFDA
  4666                           fsr2l	equ	0xFD9
  4667                           status	equ	0xFD8
  4668                           
  4669 ;; *************** function _GetTime *****************
  4670 ;; Defined at:
  4671 ;;		line 207 in file "user.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;		None
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      PTR long 
  4678 ;; Registers used:
  4679 ;;		wreg
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4685 ;;      Params:         2       0       0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0
  4688 ;;      Totals:         2       0       0       0       0       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    2
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_SoundPlayNextStep
  4696 ;;		_PlaySound
  4697 ;;		_ProcessDiary
  4698 ;;		_main
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text24
  4703  002DE8                     __ptext24:
  4704                           	opt stack 0
  4705  002DE8                     _GetTime:
  4706                           	opt stack 24
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;incstack = 0
  4710  002DE8  FFFF               	dw	65535
  4711                           
  4712                           ;user.c: 209: return &currentTime;
  4713  002DEA  0EDB               	movlw	_currentTime& (0+255)
  4714  002DEC  0012               	return		;funcret
  4715  002DEE  FFFF               	dw	65535	; errata NOP
  4716  002DF0                     __end_of_GetTime:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postdec1	equ	0xFE5
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _LoadNextEvent *****************
  4738 ;; Defined at:
  4739 ;;		line 612 in file "main.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  v1              1   11[COMRAM] unsigned char 
  4744 ;;  totalMinutes    2    9[COMRAM] unsigned int 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4754 ;;      Params:         0       0       0       0       0       0       0
  4755 ;;      Locals:         3       0       0       0       0       0       0
  4756 ;;      Temps:          2       0       0       0       0       0       0
  4757 ;;      Totals:         5       0       0       0       0       0       0
  4758 ;;Total ram usage:        5 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    3
  4761 ;; This function calls:
  4762 ;;		_getTotalMinutes
  4763 ;; This function is called by:
  4764 ;;		_InitFromEeprom
  4765 ;;		_ProcessDiary
  4766 ;;		_io_poll
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text25
  4771  0016F4                     __ptext25:
  4772                           	opt stack 0
  4773  0016F4                     _LoadNextEvent:
  4774                           	opt stack 26
  4775                           
  4776                           ;incstack = 0
  4777  0016F4  FFFF               	dw	65535
  4778                           
  4779                           ;main.c: 614: if(eventCount == 0)
  4780  0016F6  0100               	movlb	0	; () banked
  4781  0016F8  51DA               	movf	_eventCount& (0+255),w,b
  4782  0016FA  E101 D083          	bz	l398
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;main.c: 617: uint16_t totalMinutes;
  4786                           ;main.c: 620: if(!getTotalMinutes(&totalMinutes))
  4787  0016FE  0E0A               	movlw	LoadNextEvent@totalMinutes& (0+255)
  4788  001700  EC4B  F016         	call	_getTotalMinutes
  4789  001704  0900               	iorlw	0
  4790  001706  E07E               	bz	l398
  4791  001708                     l5866:
  4792                           
  4793                           ;main.c: 631: {
  4794                           ;main.c: 632: if(curEventNum == 0xff)
  4795  001708  2873               	incf	_curEventNum,w,c
  4796  00170A  E102               	bnz	l5870
  4797                           
  4798                           ;main.c: 633: curEventNum = 0;
  4799  00170C  6A73               	clrf	_curEventNum,c
  4800  00170E  D001               	goto	l5872
  4801  001710                     l5870:
  4802                           
  4803                           ;main.c: 634: else
  4804                           ;main.c: 635: curEventNum++;
  4805  001710  2A73               	incf	_curEventNum,f,c
  4806  001712                     l5872:
  4807  001712  FFFF               	dw	65535	; assembler added errata NOP
  4808                           
  4809                           ;main.c: 636: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4810  001714  5074               	movf	_currentAlarmedEventNum,w,c
  4811  001716  6E08               	movwf	??_LoadNextEvent& (0+255),c
  4812  001718  5073               	movf	_curEventNum,w,c
  4813  00171A  0101               	movlb	1	; () banked
  4814  00171C  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4815  00171E  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  4816                           
  4817                           ; BSR set to: 1
  4818                           ;main.c: 637: if(curEventNum >= eventCount)
  4819  001722  0100               	movlb	0	; () banked
  4820  001724  51DA               	movf	_eventCount& (0+255),w,b
  4821  001726  5C73               	subwf	_curEventNum,w,c
  4822  001728  E30D               	bnc	l5882
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;main.c: 638: {
  4826                           ;main.c: 639: curEventNum = 0xff;
  4827  00172A  6873               	setf	_curEventNum,c
  4828                           
  4829                           ;main.c: 640: curEventTotalMinutes = 0;
  4830  00172C  6BC8               	clrf	_curEventTotalMinutes& (0+255),b
  4831  00172E  6BC9               	clrf	(_curEventTotalMinutes+1)& (0+255),b
  4832                           
  4833                           ;main.c: 641: _MODBUSInputRegs[3] = 0;
  4834  001730  0101               	movlb	1	; () banked
  4835  001732  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  4836  001734  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  4837                           
  4838                           ; BSR set to: 1
  4839                           ;main.c: 642: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  4840  001736  5074               	movf	_currentAlarmedEventNum,w,c
  4841  001738  6E08               	movwf	??_LoadNextEvent& (0+255),c
  4842  00173A  5073               	movf	_curEventNum,w,c
  4843  00173C  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4844  00173E  C008  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  4845  001742  D060               	goto	l398
  4846  001744                     l5882:
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;main.c: 644: }
  4850                           ;main.c: 655: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  4851  001744  5073               	movf	_curEventNum,w,c
  4852  001746  0D02               	mullw	2
  4853  001748  50F3               	movf	prodl,w,c
  4854  00174A  0F13               	addlw	19
  4855  00174C  6EA9               	movwf	4009,c	;volatile
  4856                           
  4857                           ; BSR set to: 0
  4858  00174E  80A6               	bsf	4006,0,c	;volatile
  4859                           
  4860                           ; BSR set to: 0
  4861  001750  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  4862                           
  4863                           ;main.c: 656: curEventTotalMinutes = (v1 & 0x1F) * 60;
  4864  001754  500C               	movf	LoadNextEvent@v1,w,c
  4865  001756  0B1F               	andlw	31
  4866  001758  0D3C               	mullw	60
  4867  00175A  CFF3 F0C8          	movff	prodl,_curEventTotalMinutes
  4868  00175E  CFF4 F0C9          	movff	prodh,_curEventTotalMinutes+1
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;main.c: 658: _nextEventPlayDuration = (v1 >> 5);
  4872  001762  380C               	swapf	LoadNextEvent@v1,w,c
  4873  001764  42E8               	rrncf	wreg,f,c
  4874  001766  0B07               	andlw	7
  4875  001768  6FC0               	movwf	__nextEventPlayDuration& (0+255),b
  4876  00176A  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  4877                           
  4878                           ;main.c: 659: switch(_nextEventPlayDuration)
  4879  00176C  D01A               	goto	l5904
  4880  00176E                     l5890:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;main.c: 662: _nextEventPlayDuration = 10;
  4884  00176E  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  4885  001770  0E0A               	movlw	10
  4886  001772  D011               	goto	L6
  4887  001774                     l5892:
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;main.c: 665: _nextEventPlayDuration = 30;
  4891  001774  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  4892  001776  0E1E               	movlw	30
  4893  001778  D00E               	goto	L6
  4894  00177A                     l5894:
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;main.c: 668: _nextEventPlayDuration = 60;
  4898  00177A  6BC1               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  4899  00177C  0E3C               	movlw	60
  4900  00177E  D00B               	goto	L6
  4901  001780                     l5896:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;main.c: 671: _nextEventPlayDuration = 60*5;
  4905  001780  0E01               	movlw	1
  4906  001782  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  4907  001784  0E2C               	movlw	44
  4908  001786  D007               	goto	L6
  4909  001788                     l5898:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;main.c: 674: _nextEventPlayDuration = 60*12;
  4913  001788  0E02               	movlw	2
  4914  00178A  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  4915  00178C  0ED0               	movlw	208
  4916  00178E  D003               	goto	L6
  4917  001790                     l5900:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 677: _nextEventPlayDuration = 60*30;
  4921  001790  0E07               	movlw	7
  4922  001792  6FC1               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  4923  001794  0E08               	movlw	8
  4924  001796                     L6:
  4925  001796  FFFF               	dw	65535	; assembler added errata NOP
  4926  001798  6FC0               	movwf	__nextEventPlayDuration& (0+255),b
  4927                           
  4928                           ;main.c: 678: break;
  4929  00179A  D019               	goto	l5906
  4930  00179C                     l412:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;main.c: 680: _nextEventPlayDuration = 65535;
  4934  00179C  69C0               	setf	__nextEventPlayDuration& (0+255),b
  4935  00179E  69C1               	setf	(__nextEventPlayDuration+1)& (0+255),b
  4936                           
  4937                           ;main.c: 681: break;
  4938  0017A0  D016               	goto	l5906
  4939  0017A2                     l5904:
  4940  0017A2  FFFF               	dw	65535	; assembler added errata NOP
  4941                           
  4942                           ; BSR set to: 0
  4943  0017A4  C0C0  F008         	movff	__nextEventPlayDuration,??_LoadNextEvent
  4944  0017A8  C0C1  F009         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  4945                           
  4946                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4947                           ; Switch size 1, requested type "speed"
  4948                           ; Number of cases is 1, Range of values is 0 to 0
  4949                           ; switch strategies available:
  4950                           ; Name         Instructions Cycles
  4951                           ; simple_byte            4     3 (average)
  4952                           ;	Chosen strategy is simple_byte
  4953  0017AC  5009               	movf	??_LoadNextEvent+1,w,c
  4954  0017AE  E10F               	bnz	l5906
  4955                           
  4956                           ; BSR set to: 0
  4957                           ; Switch size 1, requested type "speed"
  4958                           ; Number of cases is 7, Range of values is 1 to 7
  4959                           ; switch strategies available:
  4960                           ; Name         Instructions Cycles
  4961                           ; simple_byte           22    12 (average)
  4962                           ;	Chosen strategy is simple_byte
  4963  0017B0  5008               	movf	??_LoadNextEvent,w,c
  4964  0017B2  0A01               	xorlw	1	; case 1
  4965  0017B4  E0DC               	bz	l5890
  4966  0017B6  0A03               	xorlw	3	; case 2
  4967  0017B8  E0DD               	bz	l5892
  4968  0017BA  0A01               	xorlw	1	; case 3
  4969  0017BC  E0DE               	bz	l5894
  4970  0017BE  0A07               	xorlw	7	; case 4
  4971  0017C0  E0DF               	bz	l5896
  4972  0017C2  0A01               	xorlw	1	; case 5
  4973  0017C4  E0E1               	bz	l5898
  4974  0017C6  0A03               	xorlw	3	; case 6
  4975  0017C8  E0E3               	bz	l5900
  4976  0017CA  0A01               	xorlw	1	; case 7
  4977  0017CC  E0E7               	bz	l412
  4978  0017CE                     l5906:
  4979  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;main.c: 683: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, EEDA
      +                          TA);
  4983  0017D0  5073               	movf	_curEventNum,w,c
  4984  0017D2  0D02               	mullw	2
  4985  0017D4  50F3               	movf	prodl,w,c
  4986  0017D6  0F14               	addlw	20
  4987  0017D8  6EA9               	movwf	4009,c	;volatile
  4988                           
  4989                           ; BSR set to: 0
  4990  0017DA  80A6               	bsf	4006,0,c	;volatile
  4991                           
  4992                           ; BSR set to: 0
  4993  0017DC  CFA8 F00C          	movff	4008,LoadNextEvent@v1	;volatile
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;main.c: 684: curEventTotalMinutes += v1 & 0x3F;
  4997  0017E0  500C               	movf	LoadNextEvent@v1,w,c
  4998  0017E2  0B3F               	andlw	63
  4999  0017E4  27C8               	addwf	_curEventTotalMinutes& (0+255),f,b
  5000  0017E6  0E00               	movlw	0
  5001  0017E8  23C9               	addwfc	(_curEventTotalMinutes+1)& (0+255),f,b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 685: _nextEventSoundId = v1 >> 6;
  5005  0017EA  440C               	rlncf	LoadNextEvent@v1,w,c
  5006  0017EC  46E8               	rlncf	wreg,f,c
  5007  0017EE  0B03               	andlw	3
  5008  0017F0  6FD3               	movwf	__nextEventSoundId& (0+255),b
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;main.c: 687: }while(curEventTotalMinutes <= totalMinutes);
  5012  0017F2  51C8               	movf	_curEventTotalMinutes& (0+255),w,b
  5013  0017F4  5C0A               	subwf	LoadNextEvent@totalMinutes,w,c
  5014  0017F6  51C9               	movf	(_curEventTotalMinutes+1)& (0+255),w,b
  5015  0017F8  580B               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  5016  0017FA  E286               	bc	l5866
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;main.c: 688: _MODBUSInputRegs[3] = curEventTotalMinutes;
  5020  0017FC  C0C8  F1B0         	movff	_curEventTotalMinutes,__MODBUSInputRegs+6
  5021  001800  C0C9  F1B1         	movff	_curEventTotalMinutes+1,__MODBUSInputRegs+7
  5022  001804                     l398:
  5023  001804  FFFF               	dw	65535	; assembler added errata NOP
  5024  001806  0012               	return		;funcret
  5025  001808  FFFF               	dw	65535	; errata NOP
  5026  00180A                     __end_of_LoadNextEvent:
  5027                           	opt stack 0
  5028                           tblptru	equ	0xFF8
  5029                           tblptrh	equ	0xFF7
  5030                           tblptrl	equ	0xFF6
  5031                           tablat	equ	0xFF5
  5032                           prodh	equ	0xFF4
  5033                           prodl	equ	0xFF3
  5034                           intcon	equ	0xFF2
  5035                           postinc0	equ	0xFEE
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _getTotalMinutes *****************
  5048 ;; Defined at:
  5049 ;;		line 267 in file "interrupts.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  totalMinutes    1    wreg     PTR unsigned int 
  5052 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  totalMinutes    1    6[COMRAM] PTR unsigned int 
  5055 ;;		 -> ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      unsigned char 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : E/1
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5065 ;;      Params:         0       0       0       0       0       0       0
  5066 ;;      Locals:         1       0       0       0       0       0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0
  5068 ;;      Totals:         1       0       0       0       0       0       0
  5069 ;;Total ram usage:        1 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    2
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_LoadNextEvent
  5076 ;;		_ProcessDiary
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text26
  5081  002C96                     __ptext26:
  5082                           	opt stack 0
  5083  002C96                     _getTotalMinutes:
  5084                           	opt stack 26
  5085                           
  5086                           ;incstack = 0
  5087  002C96  FFFF               	dw	65535
  5088                           
  5089                           ;getTotalMinutes@totalMinutes stored from wreg
  5090  002C98  6E07               	movwf	getTotalMinutes@totalMinutes,c
  5091                           
  5092                           ;interrupts.c: 269: if(globalHours == 0xFF)
  5093  002C9A  2875               	incf	_globalHours,w,c	;volatile
  5094  002C9C  E102               	bnz	l112
  5095                           
  5096                           ;interrupts.c: 270: return 0;
  5097  002C9E  0E00               	movlw	0
  5098  002CA0  D00A               	goto	l113
  5099  002CA2                     l112:
  5100                           
  5101                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  5102  002CA2  9EF2               	bcf	intcon,7,c	;volatile
  5103                           
  5104                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  5105  002CA4  5007               	movf	getTotalMinutes@totalMinutes,w,c
  5106  002CA6  6ED9               	movwf	fsr2l,c
  5107  002CA8  6ADA               	clrf	fsr2h,c
  5108  002CAA  C0C2  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  5109  002CAE  C0C3  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  5110                           
  5111                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  5112  002CB2  8EF2               	bsf	intcon,7,c	;volatile
  5113                           
  5114                           ;interrupts.c: 274: return 1;
  5115  002CB4  0E01               	movlw	1
  5116  002CB6                     l113:
  5117  002CB6  FFFF               	dw	65535	; assembler added errata NOP
  5118  002CB8  0012               	return		;funcret
  5119  002CBA  FFFF               	dw	65535	; errata NOP
  5120  002CBC                     __end_of_getTotalMinutes:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           postinc0	equ	0xFEE
  5130                           wreg	equ	0xFE8
  5131                           postdec1	equ	0xFE5
  5132                           fsr1h	equ	0xFE2
  5133                           fsr1l	equ	0xFE1
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           postdec2	equ	0xFDD
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _LightLed *****************
  5142 ;; Defined at:
  5143 ;;		line 303 in file "main.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  ledNum          1    wreg     unsigned char 
  5146 ;;  ledState        1    8[COMRAM] enum E2446
  5147 ;;  blink           1    9[COMRAM] unsigned char 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  ledNum          1   13[COMRAM] unsigned char 
  5150 ;;  statusShift     1   15[COMRAM] unsigned char 
  5151 ;;  ststusIndex     1   14[COMRAM] unsigned char 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5161 ;;      Params:         2       0       0       0       0       0       0
  5162 ;;      Locals:         3       0       0       0       0       0       0
  5163 ;;      Temps:          3       0       0       0       0       0       0
  5164 ;;      Totals:         8       0       0       0       0       0       0
  5165 ;;Total ram usage:        8 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    2
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_ResetEvent
  5172 ;;		_ProcessDiary
  5173 ;;		_ProcessUserCommands
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text27
  5178  00096A                     __ptext27:
  5179                           	opt stack 0
  5180  00096A                     _LightLed:
  5181                           	opt stack 26
  5182                           
  5183                           ;incstack = 0
  5184  00096A  FFFF               	dw	65535
  5185                           
  5186                           ;LightLed@ledNum stored from wreg
  5187  00096C  6E0E               	movwf	LightLed@ledNum,c
  5188                           
  5189                           ;main.c: 305: if(ledNum < 1 || ledNum > 60)
  5190  00096E  500E               	movf	LightLed@ledNum,w,c
  5191  000970  E101 D171          	bz	l264
  5192  000974  0E3C               	movlw	60
  5193  000976  640E               	cpfsgt	LightLed@ledNum,c
  5194  000978  D001               	goto	l5814
  5195  00097A  D16D               	goto	l264
  5196  00097C                     l5814:
  5197  00097C  FFFF               	dw	65535	; assembler added errata NOP
  5198                           
  5199                           ;main.c: 307: ledNum--;
  5200  00097E  060E               	decf	LightLed@ledNum,f,c
  5201                           
  5202                           ;main.c: 309: uint8_t ststusIndex = ledNum >> 2;
  5203  000980  400E               	rrncf	LightLed@ledNum,w,c
  5204  000982  42E8               	rrncf	wreg,f,c
  5205  000984  0B3F               	andlw	63
  5206  000986  6E0F               	movwf	LightLed@ststusIndex,c
  5207                           
  5208                           ;main.c: 310: uint8_t statusShift = (ledNum & 0x03) << 1;
  5209  000988  C00E  F00B         	movff	LightLed@ledNum,??_LightLed
  5210  00098C  0E03               	movlw	3
  5211  00098E  160B               	andwf	??_LightLed,f,c
  5212  000990  90D8               	bcf	status,0,c
  5213  000992  340B               	rlcf	??_LightLed,w,c
  5214  000994  6E10               	movwf	LightLed@statusShift,c
  5215                           
  5216                           ;main.c: 312: switch(ledState)
  5217  000996  D153               	goto	l5854
  5218  000998                     l5820:
  5219                           
  5220                           ;main.c: 315: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5221  000998  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5222  00099C  2A0B               	incf	??_LightLed,f,c
  5223  00099E  0E01               	movlw	1
  5224  0009A0  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5225  0009A2  2A0B               	incf	??_LightLed,f,c
  5226  0009A4  D003               	goto	u4614
  5227  0009A6                     u4615:
  5228  0009A6  FFFF               	dw	65535	; assembler added errata NOP
  5229  0009A8  90D8               	bcf	status,0,c
  5230  0009AA  360C               	rlcf	??_LightLed+1,f,c
  5231  0009AC                     u4614:
  5232  0009AC  FFFF               	dw	65535	; assembler added errata NOP
  5233  0009AE  2E0B               	decfsz	??_LightLed,f,c
  5234  0009B0  D7FA               	goto	u4615
  5235  0009B2  1C0C               	comf	??_LightLed+1,w,c
  5236  0009B4  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5237  0009B6  500F               	movf	LightLed@ststusIndex,w,c
  5238  0009B8  0F90               	addlw	low _ledStatuses
  5239  0009BA  6ED9               	movwf	fsr2l,c
  5240  0009BC  6ADA               	clrf	fsr2h,c
  5241  0009BE  500D               	movf	??_LightLed+2,w,c
  5242  0009C0  16DF               	andwf	indf2,f,c
  5243                           
  5244                           ;main.c: 316: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5245  0009C2  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5246  0009C6  0E01               	movlw	1
  5247  0009C8  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5248  0009CA  2A0B               	incf	??_LightLed,f,c
  5249  0009CC  D003               	goto	u4624
  5250  0009CE                     u4625:
  5251  0009CE  FFFF               	dw	65535	; assembler added errata NOP
  5252  0009D0  90D8               	bcf	status,0,c
  5253  0009D2  360C               	rlcf	??_LightLed+1,f,c
  5254  0009D4                     u4624:
  5255  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5256  0009D6  2E0B               	decfsz	??_LightLed,f,c
  5257  0009D8  D7FA               	goto	u4625
  5258  0009DA  1C0C               	comf	??_LightLed+1,w,c
  5259  0009DC  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5260  0009DE  500F               	movf	LightLed@ststusIndex,w,c
  5261  0009E0  0F90               	addlw	low _ledStatuses
  5262  0009E2  6ED9               	movwf	fsr2l,c
  5263  0009E4  6ADA               	clrf	fsr2h,c
  5264  0009E6  500D               	movf	??_LightLed+2,w,c
  5265  0009E8  16DF               	andwf	indf2,f,c
  5266                           
  5267                           ;main.c: 317: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5268  0009EA  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5269  0009EE  2A0B               	incf	??_LightLed,f,c
  5270  0009F0  0E01               	movlw	1
  5271  0009F2  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5272  0009F4  2A0B               	incf	??_LightLed,f,c
  5273  0009F6  D003               	goto	u4634
  5274  0009F8                     u4635:
  5275  0009F8  FFFF               	dw	65535	; assembler added errata NOP
  5276  0009FA  90D8               	bcf	status,0,c
  5277  0009FC  360C               	rlcf	??_LightLed+1,f,c
  5278  0009FE                     u4634:
  5279  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  5280  000A00  2E0B               	decfsz	??_LightLed,f,c
  5281  000A02  D7FA               	goto	u4635
  5282  000A04  1C0C               	comf	??_LightLed+1,w,c
  5283  000A06  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5284  000A08  500F               	movf	LightLed@ststusIndex,w,c
  5285  000A0A  0F80               	addlw	low _ledBlink
  5286  000A0C  6ED9               	movwf	fsr2l,c
  5287  000A0E  6ADA               	clrf	fsr2h,c
  5288  000A10  500D               	movf	??_LightLed+2,w,c
  5289  000A12  16DF               	andwf	indf2,f,c
  5290                           
  5291                           ;main.c: 318: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5292  000A14  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5293  000A18  0E01               	movlw	1
  5294  000A1A  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5295  000A1C  2A0B               	incf	??_LightLed,f,c
  5296  000A1E  D003               	goto	u4644
  5297  000A20                     u4645:
  5298  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5299  000A22  90D8               	bcf	status,0,c
  5300  000A24  360C               	rlcf	??_LightLed+1,f,c
  5301  000A26                     u4644:
  5302  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5303  000A28  2E0B               	decfsz	??_LightLed,f,c
  5304  000A2A  D7FA               	goto	u4645
  5305  000A2C  D05F               	goto	L7
  5306  000A2E                     l5822:
  5307                           
  5308                           ;main.c: 321: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  5309  000A2E  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5310  000A32  2A0B               	incf	??_LightLed,f,c
  5311  000A34  0E01               	movlw	1
  5312  000A36  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5313  000A38  2A0B               	incf	??_LightLed,f,c
  5314  000A3A  D003               	goto	u4654
  5315  000A3C                     u4655:
  5316  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5317  000A3E  90D8               	bcf	status,0,c
  5318  000A40  360C               	rlcf	??_LightLed+1,f,c
  5319  000A42                     u4654:
  5320  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5321  000A44  2E0B               	decfsz	??_LightLed,f,c
  5322  000A46  D7FA               	goto	u4655
  5323  000A48  500F               	movf	LightLed@ststusIndex,w,c
  5324  000A4A  0F90               	addlw	low _ledStatuses
  5325  000A4C  6ED9               	movwf	fsr2l,c
  5326  000A4E  6ADA               	clrf	fsr2h,c
  5327  000A50  500C               	movf	??_LightLed+1,w,c
  5328  000A52  12DF               	iorwf	indf2,f,c
  5329                           
  5330                           ;main.c: 322: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5331  000A54  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5332  000A58  0E01               	movlw	1
  5333  000A5A  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5334  000A5C  2A0B               	incf	??_LightLed,f,c
  5335  000A5E  D003               	goto	u4664
  5336  000A60                     u4665:
  5337  000A60  FFFF               	dw	65535	; assembler added errata NOP
  5338  000A62  90D8               	bcf	status,0,c
  5339  000A64  360C               	rlcf	??_LightLed+1,f,c
  5340  000A66                     u4664:
  5341  000A66  FFFF               	dw	65535	; assembler added errata NOP
  5342  000A68  2E0B               	decfsz	??_LightLed,f,c
  5343  000A6A  D7FA               	goto	u4665
  5344  000A6C  1C0C               	comf	??_LightLed+1,w,c
  5345  000A6E  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5346  000A70  500F               	movf	LightLed@ststusIndex,w,c
  5347  000A72  0F90               	addlw	low _ledStatuses
  5348  000A74  6ED9               	movwf	fsr2l,c
  5349  000A76  6ADA               	clrf	fsr2h,c
  5350  000A78  500D               	movf	??_LightLed+2,w,c
  5351  000A7A  16DF               	andwf	indf2,f,c
  5352                           
  5353                           ;main.c: 323: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  5354  000A7C  500A               	movf	LightLed@blink,w,c
  5355  000A7E  E014               	bz	l5828
  5356  000A80  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5357  000A84  2A0B               	incf	??_LightLed,f,c
  5358  000A86  0E01               	movlw	1
  5359  000A88  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5360  000A8A  2A0B               	incf	??_LightLed,f,c
  5361  000A8C  D003               	goto	u4684
  5362  000A8E                     u4685:
  5363  000A8E  FFFF               	dw	65535	; assembler added errata NOP
  5364  000A90  90D8               	bcf	status,0,c
  5365  000A92  360C               	rlcf	??_LightLed+1,f,c
  5366  000A94                     u4684:
  5367  000A94  FFFF               	dw	65535	; assembler added errata NOP
  5368  000A96  2E0B               	decfsz	??_LightLed,f,c
  5369  000A98  D7FA               	goto	u4685
  5370  000A9A  500F               	movf	LightLed@ststusIndex,w,c
  5371  000A9C  0F80               	addlw	low _ledBlink
  5372  000A9E  6ED9               	movwf	fsr2l,c
  5373  000AA0  6ADA               	clrf	fsr2h,c
  5374  000AA2  500C               	movf	??_LightLed+1,w,c
  5375  000AA4  12DF               	iorwf	indf2,f,c
  5376  000AA6  D015               	goto	l272
  5377  000AA8                     l5828:
  5378  000AA8  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5379  000AAC  2A0B               	incf	??_LightLed,f,c
  5380  000AAE  0E01               	movlw	1
  5381  000AB0  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5382  000AB2  2A0B               	incf	??_LightLed,f,c
  5383  000AB4  D003               	goto	u4694
  5384  000AB6                     u4695:
  5385  000AB6  FFFF               	dw	65535	; assembler added errata NOP
  5386  000AB8  90D8               	bcf	status,0,c
  5387  000ABA  360C               	rlcf	??_LightLed+1,f,c
  5388  000ABC                     u4694:
  5389  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5390  000ABE  2E0B               	decfsz	??_LightLed,f,c
  5391  000AC0  D7FA               	goto	u4695
  5392  000AC2  1C0C               	comf	??_LightLed+1,w,c
  5393  000AC4  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5394  000AC6  500F               	movf	LightLed@ststusIndex,w,c
  5395  000AC8  0F80               	addlw	low _ledBlink
  5396  000ACA  6ED9               	movwf	fsr2l,c
  5397  000ACC  6ADA               	clrf	fsr2h,c
  5398  000ACE  500D               	movf	??_LightLed+2,w,c
  5399  000AD0  16DF               	andwf	indf2,f,c
  5400  000AD2                     l272:
  5401  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  5402                           
  5403                           ;main.c: 324: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  5404  000AD4  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5405  000AD8  0E01               	movlw	1
  5406  000ADA  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5407  000ADC  2A0B               	incf	??_LightLed,f,c
  5408  000ADE  D003               	goto	u4704
  5409  000AE0                     u4705:
  5410  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  5411  000AE2  90D8               	bcf	status,0,c
  5412  000AE4  360C               	rlcf	??_LightLed+1,f,c
  5413  000AE6                     u4704:
  5414  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5415  000AE8  2E0B               	decfsz	??_LightLed,f,c
  5416  000AEA  D7FA               	goto	u4705
  5417  000AEC                     L7:
  5418  000AEC  FFFF               	dw	65535	; assembler added errata NOP
  5419  000AEE  1C0C               	comf	??_LightLed+1,w,c
  5420  000AF0  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5421  000AF2  500F               	movf	LightLed@ststusIndex,w,c
  5422  000AF4  0F80               	addlw	low _ledBlink
  5423  000AF6  6ED9               	movwf	fsr2l,c
  5424  000AF8  6ADA               	clrf	fsr2h,c
  5425  000AFA  500D               	movf	??_LightLed+2,w,c
  5426  000AFC  16DF               	andwf	indf2,f,c
  5427                           
  5428                           ;main.c: 325: break;
  5429  000AFE  D0AB               	goto	l264
  5430  000B00                     l5830:
  5431                           
  5432                           ;main.c: 327: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5433  000B00  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5434  000B04  2A0B               	incf	??_LightLed,f,c
  5435  000B06  0E01               	movlw	1
  5436  000B08  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5437  000B0A  2A0B               	incf	??_LightLed,f,c
  5438  000B0C  D003               	goto	u4714
  5439  000B0E                     u4715:
  5440  000B0E  FFFF               	dw	65535	; assembler added errata NOP
  5441  000B10  90D8               	bcf	status,0,c
  5442  000B12  360C               	rlcf	??_LightLed+1,f,c
  5443  000B14                     u4714:
  5444  000B14  FFFF               	dw	65535	; assembler added errata NOP
  5445  000B16  2E0B               	decfsz	??_LightLed,f,c
  5446  000B18  D7FA               	goto	u4715
  5447  000B1A  1C0C               	comf	??_LightLed+1,w,c
  5448  000B1C  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5449  000B1E  500F               	movf	LightLed@ststusIndex,w,c
  5450  000B20  0F90               	addlw	low _ledStatuses
  5451  000B22  6ED9               	movwf	fsr2l,c
  5452  000B24  6ADA               	clrf	fsr2h,c
  5453  000B26  500D               	movf	??_LightLed+2,w,c
  5454  000B28  16DF               	andwf	indf2,f,c
  5455                           
  5456                           ;main.c: 328: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  5457  000B2A  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5458  000B2E  0E01               	movlw	1
  5459  000B30  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5460  000B32  2A0B               	incf	??_LightLed,f,c
  5461  000B34  D003               	goto	u4724
  5462  000B36                     u4725:
  5463  000B36  FFFF               	dw	65535	; assembler added errata NOP
  5464  000B38  90D8               	bcf	status,0,c
  5465  000B3A  360C               	rlcf	??_LightLed+1,f,c
  5466  000B3C                     u4724:
  5467  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  5468  000B3E  2E0B               	decfsz	??_LightLed,f,c
  5469  000B40  D7FA               	goto	u4725
  5470  000B42  500F               	movf	LightLed@ststusIndex,w,c
  5471  000B44  0F90               	addlw	low _ledStatuses
  5472  000B46  6ED9               	movwf	fsr2l,c
  5473  000B48  6ADA               	clrf	fsr2h,c
  5474  000B4A  500C               	movf	??_LightLed+1,w,c
  5475  000B4C  12DF               	iorwf	indf2,f,c
  5476                           
  5477                           ;main.c: 329: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  5478  000B4E  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5479  000B52  2A0B               	incf	??_LightLed,f,c
  5480  000B54  0E01               	movlw	1
  5481  000B56  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5482  000B58  2A0B               	incf	??_LightLed,f,c
  5483  000B5A  D003               	goto	u4734
  5484  000B5C                     u4735:
  5485  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5486  000B5E  90D8               	bcf	status,0,c
  5487  000B60  360C               	rlcf	??_LightLed+1,f,c
  5488  000B62                     u4734:
  5489  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5490  000B64  2E0B               	decfsz	??_LightLed,f,c
  5491  000B66  D7FA               	goto	u4735
  5492  000B68  FFFF               	dw	65535	; assembler added errata NOP
  5493  000B6A  1C0C               	comf	??_LightLed+1,w,c
  5494  000B6C  6E0D               	movwf	(??_LightLed+2)& (0+255),c
  5495  000B6E  500F               	movf	LightLed@ststusIndex,w,c
  5496  000B70  0F80               	addlw	low _ledBlink
  5497  000B72  6ED9               	movwf	fsr2l,c
  5498  000B74  6ADA               	clrf	fsr2h,c
  5499  000B76  500D               	movf	??_LightLed+2,w,c
  5500  000B78  16DF               	andwf	indf2,f,c
  5501                           
  5502                           ;main.c: 330: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  5503  000B7A  500A               	movf	LightLed@blink,w,c
  5504  000B7C  E0AA               	bz	l272
  5505  000B7E                     l5834:
  5506  000B7E  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5507  000B82  0E01               	movlw	1
  5508  000B84  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5509  000B86  2A0B               	incf	??_LightLed,f,c
  5510  000B88  D003               	goto	u4754
  5511  000B8A                     u4755:
  5512  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5513  000B8C  90D8               	bcf	status,0,c
  5514  000B8E  360C               	rlcf	??_LightLed+1,f,c
  5515  000B90                     u4754:
  5516  000B90  FFFF               	dw	65535	; assembler added errata NOP
  5517  000B92  2E0B               	decfsz	??_LightLed,f,c
  5518  000B94  D7FA               	goto	u4755
  5519  000B96  500F               	movf	LightLed@ststusIndex,w,c
  5520  000B98  0F80               	addlw	low _ledBlink
  5521  000B9A  6ED9               	movwf	fsr2l,c
  5522  000B9C  6ADA               	clrf	fsr2h,c
  5523  000B9E  500C               	movf	??_LightLed+1,w,c
  5524  000BA0  12DF               	iorwf	indf2,f,c
  5525  000BA2  D059               	goto	l264
  5526  000BA4                     l5838:
  5527                           
  5528                           ;main.c: 333: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  5529  000BA4  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5530  000BA8  2A0B               	incf	??_LightLed,f,c
  5531  000BAA  0E01               	movlw	1
  5532  000BAC  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5533  000BAE  2A0B               	incf	??_LightLed,f,c
  5534  000BB0  D003               	goto	u4764
  5535  000BB2                     u4765:
  5536  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  5537  000BB4  90D8               	bcf	status,0,c
  5538  000BB6  360C               	rlcf	??_LightLed+1,f,c
  5539  000BB8                     u4764:
  5540  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  5541  000BBA  2E0B               	decfsz	??_LightLed,f,c
  5542  000BBC  D7FA               	goto	u4765
  5543  000BBE  500F               	movf	LightLed@ststusIndex,w,c
  5544  000BC0  0F90               	addlw	low _ledStatuses
  5545  000BC2  6ED9               	movwf	fsr2l,c
  5546  000BC4  6ADA               	clrf	fsr2h,c
  5547  000BC6  500C               	movf	??_LightLed+1,w,c
  5548  000BC8  12DF               	iorwf	indf2,f,c
  5549                           
  5550                           ;main.c: 334: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  5551  000BCA  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5552  000BCE  0E01               	movlw	1
  5553  000BD0  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5554  000BD2  2A0B               	incf	??_LightLed,f,c
  5555  000BD4  D003               	goto	u4774
  5556  000BD6                     u4775:
  5557  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  5558  000BD8  90D8               	bcf	status,0,c
  5559  000BDA  360C               	rlcf	??_LightLed+1,f,c
  5560  000BDC                     u4774:
  5561  000BDC  FFFF               	dw	65535	; assembler added errata NOP
  5562  000BDE  2E0B               	decfsz	??_LightLed,f,c
  5563  000BE0  D7FA               	goto	u4775
  5564  000BE2  500F               	movf	LightLed@ststusIndex,w,c
  5565  000BE4  0F90               	addlw	low _ledStatuses
  5566  000BE6  6ED9               	movwf	fsr2l,c
  5567  000BE8  6ADA               	clrf	fsr2h,c
  5568  000BEA  500C               	movf	??_LightLed+1,w,c
  5569  000BEC  12DF               	iorwf	indf2,f,c
  5570                           
  5571                           ;main.c: 335: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  5572  000BEE  500A               	movf	LightLed@blink,w,c
  5573  000BF0  E014               	bz	l5844
  5574  000BF2  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5575  000BF6  2A0B               	incf	??_LightLed,f,c
  5576  000BF8  0E01               	movlw	1
  5577  000BFA  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5578  000BFC  2A0B               	incf	??_LightLed,f,c
  5579  000BFE  D003               	goto	u4794
  5580  000C00                     u4795:
  5581  000C00  FFFF               	dw	65535	; assembler added errata NOP
  5582  000C02  90D8               	bcf	status,0,c
  5583  000C04  360C               	rlcf	??_LightLed+1,f,c
  5584  000C06                     u4794:
  5585  000C06  FFFF               	dw	65535	; assembler added errata NOP
  5586  000C08  2E0B               	decfsz	??_LightLed,f,c
  5587  000C0A  D7FA               	goto	u4795
  5588  000C0C  500F               	movf	LightLed@ststusIndex,w,c
  5589  000C0E  0F80               	addlw	low _ledBlink
  5590  000C10  6ED9               	movwf	fsr2l,c
  5591  000C12  6ADA               	clrf	fsr2h,c
  5592  000C14  500C               	movf	??_LightLed+1,w,c
  5593  000C16  12DF               	iorwf	indf2,f,c
  5594  000C18  D00E               	goto	l5846
  5595  000C1A                     l5844:
  5596  000C1A  C010  F00B         	movff	LightLed@statusShift,??_LightLed
  5597  000C1E  2A0B               	incf	??_LightLed,f,c
  5598  000C20  0E01               	movlw	1
  5599  000C22  6E0C               	movwf	(??_LightLed+1)& (0+255),c
  5600  000C24  2A0B               	incf	??_LightLed,f,c
  5601  000C26  D003               	goto	u4804
  5602  000C28                     u4805:
  5603  000C28  FFFF               	dw	65535	; assembler added errata NOP
  5604  000C2A  90D8               	bcf	status,0,c
  5605  000C2C  360C               	rlcf	??_LightLed+1,f,c
  5606  000C2E                     u4804:
  5607  000C2E  FFFF               	dw	65535	; assembler added errata NOP
  5608  000C30  2E0B               	decfsz	??_LightLed,f,c
  5609  000C32  D7FA               	goto	u4805
  5610  000C34  D799               	goto	L8
  5611  000C36                     l5846:
  5612  000C36  FFFF               	dw	65535	; assembler added errata NOP
  5613                           
  5614                           ;main.c: 336: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  5615  000C38  500A               	movf	LightLed@blink,w,c
  5616  000C3A  E1A1               	bnz	l5834
  5617  000C3C  D74A               	goto	l272
  5618  000C3E                     l5854:
  5619  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  5620  000C40  5009               	movf	LightLed@ledState,w,c
  5621                           
  5622                           ; Switch size 1, requested type "speed"
  5623                           ; Number of cases is 4, Range of values is 0 to 3
  5624                           ; switch strategies available:
  5625                           ; Name         Instructions Cycles
  5626                           ; simple_byte           13     7 (average)
  5627                           ;	Chosen strategy is simple_byte
  5628  000C42  E101 D6A9          	bz	l5820
  5629  000C46  0A01               	xorlw	1	; case 1
  5630  000C48  E101 D6F1          	bz	l5822
  5631  000C4C  0A03               	xorlw	3	; case 2
  5632  000C4E  E101 D757          	bz	l5830
  5633  000C52  0A01               	xorlw	1	; case 3
  5634  000C54  E0A7               	bz	l5838
  5635  000C56                     l264:
  5636  000C56  FFFF               	dw	65535	; assembler added errata NOP
  5637  000C58  0012               	return		;funcret
  5638  000C5A  FFFF               	dw	65535	; errata NOP
  5639  000C5C                     __end_of_LightLed:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           postdec1	equ	0xFE5
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _ModbusPoll *****************
  5661 ;; Defined at:
  5662 ;;		line 461 in file "ModbusRtu.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  discreteInpu    2   91[COMRAM] unsigned short 
  5665 ;;  coils           1   93[COMRAM] PTR unsigned short 
  5666 ;;		 -> _MODBUSCoils(2), 
  5667 ;;  inputRegs       2   94[COMRAM] PTR unsigned short 
  5668 ;;		 -> _MODBUSInputRegs(30), 
  5669 ;;  inputRegsCou    1   96[COMRAM] const unsigned char 
  5670 ;;  holdingRegs     2   97[COMRAM] PTR unsigned short 
  5671 ;;		 -> _MODBUSHoldingRegs(30), 
  5672 ;;  holdingRegsC    1   99[COMRAM] const unsigned char 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  u8exception     1  102[COMRAM] unsigned char 
  5675 ;;  i8state         1  101[COMRAM] unsigned char 
  5676 ;;  u8current       1  100[COMRAM] unsigned char 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      char 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : E/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5686 ;;      Params:         9       0       0       0       0       0       0
  5687 ;;      Locals:         3       0       0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0       0       0
  5689 ;;      Totals:        12       0       0       0       0       0       0
  5690 ;;Total ram usage:       12 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    7
  5693 ;; This function calls:
  5694 ;;		_ModbusBuildException
  5695 ;;		_ModbusGetRxBuffer
  5696 ;;		_ModbusGetRxBufferHeader
  5697 ;;		_ModbusProcess_FC1
  5698 ;;		_ModbusProcess_FC100
  5699 ;;		_ModbusProcess_FC101
  5700 ;;		_ModbusProcess_FC102
  5701 ;;		_ModbusProcess_FC15
  5702 ;;		_ModbusProcess_FC16
  5703 ;;		_ModbusProcess_FC17
  5704 ;;		_ModbusProcess_FC21
  5705 ;;		_ModbusProcess_FC3
  5706 ;;		_ModbusProcess_FC43
  5707 ;;		_ModbusProcess_FC5
  5708 ;;		_ModbusProcess_FC6
  5709 ;;		_ModbusProcess_FC7
  5710 ;;		_ModbusSendTxBuffer
  5711 ;;		_ModbusValidateRequest
  5712 ;;		_PortAvailable
  5713 ;;		_PortClearReadBuffer
  5714 ;;		_millis
  5715 ;; This function is called by:
  5716 ;;		_main
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text28
  5721  00114C                     __ptext28:
  5722                           	opt stack 0
  5723  00114C                     _ModbusPoll:
  5724                           	opt stack 23
  5725                           
  5726                           ;incstack = 0
  5727  00114C  FFFF               	dw	65535
  5728                           
  5729                           ;ModbusRtu.c: 464: _lastFunction = MB_FC_NONE;
  5730  00114E  0100               	movlb	0	; () banked
  5731  001150  6BE9               	clrf	__lastFunction& (0+255),b
  5732                           
  5733                           ;ModbusRtu.c: 468: _inputRegsCount = inputRegsCount;
  5734  001152  C061  F0D0         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  5735                           
  5736                           ;ModbusRtu.c: 469: _holdingRegsCount = holdingRegsCount;
  5737  001156  C064  F0CF         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;ModbusRtu.c: 474: uint8_t u8current = PortAvailable();
  5741  00115A  ECDF  F016         	call	_PortAvailable	;wreg free
  5742  00115E  6E65               	movwf	ModbusPoll@u8current,c
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;ModbusRtu.c: 476: if (u8current == 0) return 0;
  5746  001160  5065               	movf	ModbusPoll@u8current,w,c
  5747  001162  E103               	bnz	l7046
  5748  001164                     l7042:
  5749  001164  FFFF               	dw	65535	; assembler added errata NOP
  5750                           
  5751                           ; BSR set to: 0
  5752  001166  0E00               	movlw	0
  5753  001168  D0BF               	goto	l730
  5754  00116A                     l7046:
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;ModbusRtu.c: 479: if (u8current != _u8lastRec)
  5758  00116A  51D7               	movf	__u8lastRec& (0+255),w,b
  5759  00116C  1865               	xorwf	ModbusPoll@u8current,w,c
  5760  00116E  E012               	bz	l7056
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;ModbusRtu.c: 480: {
  5764                           ;ModbusRtu.c: 481: _u8lastRec = u8current;
  5765  001170  C065  F0D7         	movff	ModbusPoll@u8current,__u8lastRec
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;ModbusRtu.c: 482: _u32time = millis() + 5;
  5769  001174  0E05               	movlw	5
  5770  001176  EC23  F016         	call	_millis	;wreg free
  5771  00117A  2407               	addwf	?_millis,w,c
  5772  00117C  0100               	movlb	0	; () banked
  5773  00117E  6FA4               	movwf	__u32time& (0+255),b
  5774  001180  0E00               	movlw	0
  5775  001182  2008               	addwfc	?_millis+1,w,c
  5776  001184  6FA5               	movwf	(__u32time+1)& (0+255),b
  5777  001186  0E00               	movlw	0
  5778  001188  2009               	addwfc	?_millis+2,w,c
  5779  00118A  6FA6               	movwf	(__u32time+2)& (0+255),b
  5780  00118C  0E00               	movlw	0
  5781  00118E  200A               	addwfc	?_millis+3,w,c
  5782  001190  6FA7               	movwf	(__u32time+3)& (0+255),b
  5783  001192  D7E8               	goto	l7042
  5784  001194                     l7056:
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;ModbusRtu.c: 484: }
  5788                           ;ModbusRtu.c: 485: if (millis() < _u32time)
  5789  001194  EC23  F016         	call	_millis	;wreg free
  5790  001198  0100               	movlb	0	; () banked
  5791  00119A  51A4               	movf	__u32time& (0+255),w,b
  5792  00119C  5C07               	subwf	?_millis,w,c
  5793  00119E  51A5               	movf	(__u32time+1)& (0+255),w,b
  5794  0011A0  5808               	subwfb	?_millis+1,w,c
  5795  0011A2  51A6               	movf	(__u32time+2)& (0+255),w,b
  5796  0011A4  5809               	subwfb	?_millis+2,w,c
  5797  0011A6  51A7               	movf	(__u32time+3)& (0+255),w,b
  5798  0011A8  580A               	subwfb	?_millis+3,w,c
  5799  0011AA  E3DC               	bnc	l7042
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;ModbusRtu.c: 488: _u8lastRec = 0;
  5803  0011AC  6BD7               	clrf	__u8lastRec& (0+255),b
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;ModbusRtu.c: 490: _u8lastError = i8state;
  5807  0011AE  EC89  F015         	call	_ModbusGetRxBufferHeader	;wreg free
  5808  0011B2  6E66               	movwf	ModbusPoll@i8state,c
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;ModbusRtu.c: 491: if (i8state < 4)
  5812  0011B4  0E04               	movlw	4
  5813  0011B6  6066               	cpfslt	ModbusPoll@i8state,c
  5814  0011B8  D005               	goto	l7072
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;ModbusRtu.c: 492: {
  5818                           ;ModbusRtu.c: 493: PortClearReadBuffer();
  5819  0011BA  ECD1  F016         	call	_PortClearReadBuffer	;wreg free
  5820  0011BE                     l7068:
  5821  0011BE  FFFF               	dw	65535	; assembler added errata NOP
  5822                           
  5823                           ;ModbusRtu.c: 494: return i8state;
  5824  0011C0  5066               	movf	ModbusPoll@i8state,w,c
  5825  0011C2  D092               	goto	l730
  5826  0011C4                     l7072:
  5827  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;ModbusRtu.c: 495: }
  5831                           ;ModbusRtu.c: 497: if (_au8Buffer[ ID ] != _u8id)
  5832  0011C6  51D6               	movf	__u8id& (0+255),w,b
  5833  0011C8  0101               	movlb	1	; () banked
  5834  0011CA  1900               	xorwf	__au8Buffer& (0+255),w,b
  5835  0011CC  E003               	bz	l7080
  5836                           
  5837                           ; BSR set to: 1
  5838                           ;ModbusRtu.c: 498: {
  5839                           ;ModbusRtu.c: 499: PortClearReadBuffer();
  5840  0011CE  ECD1  F016         	call	_PortClearReadBuffer	;wreg free
  5841  0011D2  D7C8               	goto	l7042
  5842  0011D4                     l7080:
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;ModbusRtu.c: 501: }
  5846                           ;ModbusRtu.c: 503: i8state = ModbusGetRxBuffer();
  5847  0011D4  ECE8  F014         	call	_ModbusGetRxBuffer	;wreg free
  5848  0011D8  6E66               	movwf	ModbusPoll@i8state,c
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;ModbusRtu.c: 505: _u8lastError = i8state;
  5852  0011DA  ECD1  F016         	call	_PortClearReadBuffer	;wreg free
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;ModbusRtu.c: 510: uint8_t u8exception = ModbusValidateRequest();
  5856  0011DE  EC2E  F006         	call	_ModbusValidateRequest	;wreg free
  5857  0011E2  6E67               	movwf	ModbusPoll@u8exception,c
  5858                           
  5859                           ;ModbusRtu.c: 511: if (u8exception > 0)
  5860  0011E4  5067               	movf	ModbusPoll@u8exception,w,c
  5861  0011E6  E009               	bz	l7098
  5862                           
  5863                           ;ModbusRtu.c: 512: {
  5864                           ;ModbusRtu.c: 513: if (u8exception != NO_REPLY)
  5865  0011E8  2867               	incf	ModbusPoll@u8exception,w,c
  5866  0011EA  E005               	bz	l7094
  5867                           
  5868                           ;ModbusRtu.c: 514: {
  5869                           ;ModbusRtu.c: 515: ModbusBuildException(u8exception);
  5870  0011EC  5067               	movf	ModbusPoll@u8exception,w,c
  5871  0011EE  EC5E  F016         	call	_ModbusBuildException
  5872                           
  5873                           ; BSR set to: 1
  5874                           ;ModbusRtu.c: 516: ModbusSendTxBuffer();
  5875  0011F2  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  5876  0011F6                     l7094:
  5877                           
  5878                           ;ModbusRtu.c: 519: return u8exception;
  5879  0011F6  5067               	movf	ModbusPoll@u8exception,w,c
  5880  0011F8  D077               	goto	l730
  5881  0011FA                     l7098:
  5882                           
  5883                           ;ModbusRtu.c: 523: _u8lastError = 0;
  5884  0011FA  EC23  F016         	call	_millis	;wreg free
  5885                           
  5886                           ;ModbusRtu.c: 526: switch (_au8Buffer[ FUNC ])
  5887  0011FE  D052               	goto	l7162
  5888  001200                     l7100:
  5889                           
  5890                           ; BSR set to: 1
  5891                           ;ModbusRtu.c: 529: return ModbusProcess_FC1(*coils);
  5892  001200  505E               	movf	ModbusPoll@coils,w,c
  5893  001202  6ED9               	movwf	fsr2l,c
  5894  001204  6ADA               	clrf	fsr2h,c
  5895  001206  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  5896  00120A  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  5897  00120E  ECE4  F00A         	call	_ModbusProcess_FC1	;wreg free
  5898  001212  D06A               	goto	l730
  5899  001214                     l7104:
  5900                           
  5901                           ; BSR set to: 1
  5902                           ;ModbusRtu.c: 531: return ModbusProcess_FC1(discreteInputs);
  5903  001214  C05C  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  5904  001218  C05D  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  5905  00121C  ECE4  F00A         	call	_ModbusProcess_FC1	;wreg free
  5906  001220  D063               	goto	l730
  5907  001222                     l7108:
  5908                           
  5909                           ; BSR set to: 1
  5910                           ;ModbusRtu.c: 533: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  5911  001222  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  5912  001226  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  5913  00122A  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  5914  00122E  EC99  F00F         	call	_ModbusProcess_FC3	;wreg free
  5915  001232  D05A               	goto	l730
  5916  001234                     l7112:
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;ModbusRtu.c: 535: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  5920  001234  C05F  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  5921  001238  C060  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  5922  00123C  C061  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  5923  001240  EC99  F00F         	call	_ModbusProcess_FC3	;wreg free
  5924  001244  D051               	goto	l730
  5925  001246                     l7116:
  5926                           
  5927                           ; BSR set to: 1
  5928                           ;ModbusRtu.c: 537: return ModbusProcess_FC5(coils);
  5929  001246  505E               	movf	ModbusPoll@coils,w,c
  5930  001248  EC47  F011         	call	_ModbusProcess_FC5
  5931  00124C  D04D               	goto	l730
  5932  00124E                     l7120:
  5933                           
  5934                           ; BSR set to: 1
  5935                           ;ModbusRtu.c: 539: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  5936  00124E  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  5937  001252  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  5938  001256  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  5939  00125A  ECB4  F013         	call	_ModbusProcess_FC6	;wreg free
  5940  00125E  D044               	goto	l730
  5941  001260                     l7124:
  5942                           
  5943                           ; BSR set to: 1
  5944                           ;ModbusRtu.c: 541: return ModbusProcess_FC7();
  5945  001260  ECA3  F016         	call	_ModbusProcess_FC7	;wreg free
  5946  001264  D041               	goto	l730
  5947  001266                     l7128:
  5948                           
  5949                           ; BSR set to: 1
  5950                           ;ModbusRtu.c: 543: return ModbusProcess_FC15(coils);
  5951  001266  505E               	movf	ModbusPoll@coils,w,c
  5952  001268  EC8E  F00C         	call	_ModbusProcess_FC15
  5953  00126C  D03D               	goto	l730
  5954  00126E                     l7132:
  5955                           
  5956                           ; BSR set to: 1
  5957                           ;ModbusRtu.c: 545: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  5958  00126E  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  5959  001272  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  5960  001276  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  5961  00127A  EC7C  F00E         	call	_ModbusProcess_FC16	;wreg free
  5962  00127E  D034               	goto	l730
  5963  001280                     l7136:
  5964                           
  5965                           ; BSR set to: 1
  5966                           ;ModbusRtu.c: 547: return ModbusProcess_FC17();
  5967  001280  ECE9  F012         	call	_ModbusProcess_FC17	;wreg free
  5968  001284  D031               	goto	l730
  5969  001286                     l7140:
  5970                           
  5971                           ; BSR set to: 1
  5972                           ;ModbusRtu.c: 549: return ModbusProcess_FC21();
  5973  001286  EC4B  F010         	call	_ModbusProcess_FC21	;wreg free
  5974  00128A  D02E               	goto	l730
  5975  00128C                     l7144:
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;ModbusRtu.c: 551: return ModbusProcess_FC43();
  5979  00128C  EC33  F00A         	call	_ModbusProcess_FC43	;wreg free
  5980  001290  D02B               	goto	l730
  5981  001292                     l7148:
  5982                           
  5983                           ; BSR set to: 1
  5984                           ;ModbusRtu.c: 553: return ModbusProcess_FC100();
  5985  001292  ECA1  F010         	call	_ModbusProcess_FC100	;wreg free
  5986  001296  D028               	goto	l730
  5987  001298                     l7152:
  5988                           
  5989                           ; BSR set to: 1
  5990                           ;ModbusRtu.c: 555: return ModbusProcess_FC101();
  5991  001298  ECC3  F015         	call	_ModbusProcess_FC101	;wreg free
  5992  00129C  D025               	goto	l730
  5993  00129E                     l7156:
  5994                           
  5995                           ; BSR set to: 1
  5996                           ;ModbusRtu.c: 557: return ModbusProcess_FC102();
  5997  00129E  EC7D  F016         	call	_ModbusProcess_FC102	;wreg free
  5998  0012A2  D022               	goto	l730
  5999  0012A4                     l7162:
  6000  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  6001  0012A6  0101               	movlb	1	; () banked
  6002  0012A8  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6003                           
  6004                           ; Switch size 1, requested type "speed"
  6005                           ; Number of cases is 15, Range of values is 1 to 102
  6006                           ; switch strategies available:
  6007                           ; Name         Instructions Cycles
  6008                           ; simple_byte           46    24 (average)
  6009                           ;	Chosen strategy is simple_byte
  6010  0012AA  0A01               	xorlw	1	; case 1
  6011  0012AC  E0A9               	bz	l7100
  6012  0012AE  0A03               	xorlw	3	; case 2
  6013  0012B0  E0B1               	bz	l7104
  6014  0012B2  0A01               	xorlw	1	; case 3
  6015  0012B4  E0B6               	bz	l7108
  6016  0012B6  0A07               	xorlw	7	; case 4
  6017  0012B8  E0BD               	bz	l7112
  6018  0012BA  0A01               	xorlw	1	; case 5
  6019  0012BC  E0C4               	bz	l7116
  6020  0012BE  0A03               	xorlw	3	; case 6
  6021  0012C0  E0C6               	bz	l7120
  6022  0012C2  0A01               	xorlw	1	; case 7
  6023  0012C4  E0CD               	bz	l7124
  6024  0012C6  0A08               	xorlw	8	; case 15
  6025  0012C8  E0CE               	bz	l7128
  6026  0012CA  0A1F               	xorlw	31	; case 16
  6027  0012CC  E0D0               	bz	l7132
  6028  0012CE  0A01               	xorlw	1	; case 17
  6029  0012D0  E0D7               	bz	l7136
  6030  0012D2  0A04               	xorlw	4	; case 21
  6031  0012D4  E0D8               	bz	l7140
  6032  0012D6  0A3E               	xorlw	62	; case 43
  6033  0012D8  E0D9               	bz	l7144
  6034  0012DA  0A4F               	xorlw	79	; case 100
  6035  0012DC  E0DA               	bz	l7148
  6036  0012DE  0A01               	xorlw	1	; case 101
  6037  0012E0  E0DB               	bz	l7152
  6038  0012E2  0A03               	xorlw	3	; case 102
  6039  0012E4  E0DC               	bz	l7156
  6040  0012E6  D76B               	goto	l7068
  6041  0012E8                     l730:
  6042  0012E8  FFFF               	dw	65535	; assembler added errata NOP
  6043  0012EA  0012               	return		;funcret
  6044  0012EC  FFFF               	dw	65535	; errata NOP
  6045  0012EE                     __end_of_ModbusPoll:
  6046                           	opt stack 0
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           intcon	equ	0xFF2
  6054                           postinc0	equ	0xFEE
  6055                           wreg	equ	0xFE8
  6056                           postdec1	equ	0xFE5
  6057                           fsr1h	equ	0xFE2
  6058                           fsr1l	equ	0xFE1
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _PortClearReadBuffer *****************
  6067 ;; Defined at:
  6068 ;;		line 77 in file "interrupts.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : E/0
  6079 ;;		On exit  : F/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6082 ;;      Params:         0       0       0       0       0       0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    3
  6089 ;; This function calls:
  6090 ;;		_InitUartBuffer
  6091 ;; This function is called by:
  6092 ;;		_ModbusPoll
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text29
  6097  002DA2                     __ptext29:
  6098                           	opt stack 0
  6099  002DA2                     _PortClearReadBuffer:
  6100                           	opt stack 26
  6101                           
  6102                           ;incstack = 0
  6103  002DA2  FFFF               	dw	65535
  6104                           
  6105                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  6106  002DA4  9EF2               	bcf	intcon,7,c	;volatile
  6107                           
  6108                           ;interrupts.c: 80: InitUartBuffer();
  6109  002DA6  ECD8  F016         	call	_InitUartBuffer	;wreg free
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  6113  002DAA  8EF2               	bsf	intcon,7,c	;volatile
  6114                           
  6115                           ; BSR set to: 0
  6116  002DAC  0012               	return		;funcret
  6117  002DAE  FFFF               	dw	65535	; errata NOP
  6118  002DB0                     __end_of_PortClearReadBuffer:
  6119                           	opt stack 0
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           intcon	equ	0xFF2
  6127                           postinc0	equ	0xFEE
  6128                           wreg	equ	0xFE8
  6129                           postdec1	equ	0xFE5
  6130                           fsr1h	equ	0xFE2
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           postinc2	equ	0xFDE
  6134                           postdec2	equ	0xFDD
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;; *************** function _ModbusValidateRequest *****************
  6140 ;; Defined at:
  6141 ;;		line 776 in file "ModbusRtu.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  6146 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  6147 ;;  readDevId       1   37[COMRAM] unsigned char 
  6148 ;;  i               1   36[COMRAM] unsigned char 
  6149 ;;  u16regs         2   39[COMRAM] unsigned short 
  6150 ;;  u16count        2   34[COMRAM] unsigned short 
  6151 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  6152 ;;  u8regs          1   38[COMRAM] unsigned char 
  6153 ;;  isSupported     1   33[COMRAM] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      unsigned char 
  6156 ;; Registers used:
  6157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : F/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6163 ;;      Params:         0       0       0       0       0       0       0
  6164 ;;      Locals:        18       0       0       0       0       0       0
  6165 ;;      Temps:          4       0       0       0       0       0       0
  6166 ;;      Totals:        22       0       0       0       0       0       0
  6167 ;;Total ram usage:       22 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    3
  6170 ;; This function calls:
  6171 ;;		_ModbusCalcCRC
  6172 ;; This function is called by:
  6173 ;;		_ModbusPoll
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text30
  6178  000C5C                     __ptext30:
  6179                           	opt stack 0
  6180  000C5C                     _ModbusValidateRequest:
  6181                           	opt stack 26
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;incstack = 0
  6185  000C5C  FFFF               	dw	65535
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;ModbusRtu.c: 779: uint16_t u16MsgCRC =
  6189                           ;ModbusRtu.c: 780: ((_au8Buffer[_u8BufferSize - 2] << 8)
  6190                           ;ModbusRtu.c: 781: | _au8Buffer[_u8BufferSize - 1]);
  6191  000C5E  0EFE               	movlw	low (__au8Buffer+65534)
  6192  000C60  2470               	addwf	__u8BufferSize,w,c
  6193  000C62  6ED9               	movwf	fsr2l,c
  6194  000C64  6ADA               	clrf	fsr2h,c
  6195  000C66  0E00               	movlw	high (__au8Buffer+65534)
  6196  000C68  22DA               	addwfc	fsr2h,f,c
  6197  000C6A  50DF               	movf	indf2,w,c
  6198  000C6C  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6199  000C6E  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  6200  000C70  0EFF               	movlw	low (__au8Buffer+65535)
  6201  000C72  2470               	addwf	__u8BufferSize,w,c
  6202  000C74  6ED9               	movwf	fsr2l,c
  6203  000C76  6ADA               	clrf	fsr2h,c
  6204  000C78  0E00               	movlw	high (__au8Buffer+65535)
  6205  000C7A  22DA               	addwfc	fsr2h,f,c
  6206  000C7C  50DF               	movf	indf2,w,c
  6207  000C7E  1014               	iorwf	??_ModbusValidateRequest,w,c
  6208  000C80  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  6209  000C82  5015               	movf	??_ModbusValidateRequest+1,w,c
  6210  000C84  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;ModbusRtu.c: 783: {
  6214                           ;ModbusRtu.c: 784: _u16errCnt++;
  6215  000C86  5070               	movf	__u8BufferSize,w,c
  6216  000C88  0FFE               	addlw	254
  6217  000C8A  ECAF  F012         	call	_ModbusCalcCRC
  6218  000C8E  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  6219  000C90  1807               	xorwf	?_ModbusCalcCRC,w,c
  6220  000C92  E103               	bnz	u5070
  6221  000C94  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  6222  000C96  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  6223  000C98  E002               	bz	l790
  6224  000C9A                     u5070:
  6225                           
  6226                           ;ModbusRtu.c: 785: return NO_REPLY;
  6227  000C9A  0EFF               	movlw	255
  6228  000C9C  D11B               	goto	l791
  6229  000C9E                     l790:
  6230                           
  6231                           ;ModbusRtu.c: 786: }
  6232                           ;ModbusRtu.c: 789: bool isSupported = 0;
  6233  000C9E  6A22               	clrf	ModbusValidateRequest@isSupported,c
  6234                           
  6235                           ;ModbusRtu.c: 790: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  6236  000CA0  6A25               	clrf	ModbusValidateRequest@i,c
  6237  000CA2                     l6184:
  6238  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  6239                           
  6240                           ;ModbusRtu.c: 791: {
  6241                           ;ModbusRtu.c: 792: if (fctsupported[i] == _au8Buffer[FUNC])
  6242  000CA4  5025               	movf	ModbusValidateRequest@i,w,c
  6243  000CA6  0F01               	addlw	low _fctsupported
  6244  000CA8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6245  000CAA  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  6246  000CAE                     	if	1	;There is more than 1 active tblptr byte
  6247  000CAE  0E06               	movlw	high __smallconst
  6248  000CB0  6EF7               	movwf	tblptrh,c
  6249  000CB2                     	endif
  6250  000CB2                     	if	0	;tblptru may be non-zero
  6251  000CB2                     	endif
  6252  000CB2                     	if	0	;tblptru may be non-zero
  6253  000CB2                     	endif
  6254  000CB2  0008               	tblrd		*
  6255  000CB4  FFFF               	dw	65535	; errata NOP
  6256  000CB6  50F5               	movf	tablat,w,c
  6257  000CB8  0101               	movlb	1	; () banked
  6258  000CBA  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  6259  000CBC  E103               	bnz	l6188
  6260                           
  6261                           ; BSR set to: 1
  6262                           ;ModbusRtu.c: 793: {
  6263                           ;ModbusRtu.c: 794: isSupported = 1;
  6264  000CBE  0E01               	movlw	1
  6265  000CC0  6E22               	movwf	ModbusValidateRequest@isSupported,c
  6266                           
  6267                           ;ModbusRtu.c: 795: break;
  6268  000CC2  D004               	goto	l6192
  6269  000CC4                     l6188:
  6270                           
  6271                           ; BSR set to: 1
  6272  000CC4  2A25               	incf	ModbusValidateRequest@i,f,c
  6273                           
  6274                           ; BSR set to: 1
  6275  000CC6  0E0E               	movlw	14
  6276  000CC8  6425               	cpfsgt	ModbusValidateRequest@i,c
  6277  000CCA  D7EB               	goto	l6184
  6278  000CCC                     l6192:
  6279  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6280                           
  6281                           ; BSR set to: 1
  6282                           ;ModbusRtu.c: 799: {
  6283                           ;ModbusRtu.c: 800: _u16errCnt++;
  6284  000CCE  5022               	movf	ModbusValidateRequest@isSupported,w,c
  6285  000CD0  E102               	bnz	l795
  6286  000CD2                     l6194:
  6287                           
  6288                           ; BSR set to: 1
  6289                           ;ModbusRtu.c: 801: return EXC_FUNC_CODE;
  6290  000CD2  0E01               	movlw	1
  6291  000CD4  D0FF               	goto	l791
  6292  000CD6                     l795:
  6293                           
  6294                           ; BSR set to: 1
  6295                           ;ModbusRtu.c: 806: uint16_t u16count = 0;
  6296  000CD6  6A23               	clrf	ModbusValidateRequest@u16count,c
  6297  000CD8  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  6298                           
  6299                           ;ModbusRtu.c: 807: uint8_t u8regs;
  6300                           ;ModbusRtu.c: 808: switch (_au8Buffer[ FUNC ])
  6301  000CDA  D0D4               	goto	l6320
  6302  000CDC                     l6198:
  6303                           
  6304                           ; BSR set to: 1
  6305                           ;ModbusRtu.c: 811: case MB_FC_READ_DISCRETE_INPUT:
  6306                           ;ModbusRtu.c: 812: case MB_FC_WRITE_MULTIPLE_COILS:
  6307                           ;ModbusRtu.c: 814: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6308  000CDC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6309  000CDE  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6310  000CE0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6311  000CE2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6312  000CE4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6313                           
  6314                           ;ModbusRtu.c: 815: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6315  000CE8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6316  000CEA  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6317  000CEC  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6318  000CEE  6E23               	movwf	ModbusValidateRequest@u16count,c
  6319  000CF0  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  6320                           
  6321                           ; BSR set to: 1
  6322                           ;ModbusRtu.c: 816: if (u16count > 16)
  6323  000CF4  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6324  000CF6  E103               	bnz	u5110
  6325  000CF8  0E11               	movlw	17
  6326  000CFA  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  6327  000CFC  E302               	bnc	l6206
  6328  000CFE                     u5110:
  6329  000CFE                     l6202:
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;ModbusRtu.c: 817: return EXC_REGS_QUANT;
  6333  000CFE  0E03               	movlw	3
  6334  000D00  D0E9               	goto	l791
  6335  000D02                     l6206:
  6336                           
  6337                           ; BSR set to: 1
  6338                           ;ModbusRtu.c: 818: if (u16regs > 15 || u16regs + u16count > 16)
  6339  000D02  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6340  000D04  E110               	bnz	l6210
  6341  000D06  0E10               	movlw	16
  6342  000D08  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6343  000D0A  E20D               	bc	l6210
  6344                           
  6345                           ; BSR set to: 1
  6346  000D0C  5023               	movf	ModbusValidateRequest@u16count,w,c
  6347  000D0E  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  6348  000D10  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6349  000D12  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  6350  000D14  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  6351  000D16  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6352  000D18  5015               	movf	??_ModbusValidateRequest+1,w,c
  6353  000D1A  E105               	bnz	u5130
  6354  000D1C  0E11               	movlw	17
  6355  000D1E  5C14               	subwf	??_ModbusValidateRequest,w,c
  6356  000D20                     L9:
  6357  000D20  FFFF               	dw	65535	; assembler added errata NOP
  6358  000D22  E201 D0D3          	bnc	l804
  6359  000D26                     u5130:
  6360  000D26                     l6210:
  6361  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6362                           
  6363                           ;ModbusRtu.c: 819: return EXC_ADDR_RANGE;
  6364  000D28  0E02               	movlw	2
  6365  000D2A  D0D4               	goto	l791
  6366  000D2C                     l6214:
  6367                           
  6368                           ; BSR set to: 1
  6369                           ;ModbusRtu.c: 822: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6370  000D2C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6371  000D2E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6372  000D30  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6373  000D32  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6374  000D34  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6375                           
  6376                           ; BSR set to: 1
  6377                           ;ModbusRtu.c: 823: u8regs = _au8Buffer[ NB_HI ];
  6378  000D38  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  6379                           
  6380                           ;ModbusRtu.c: 824: if (u8regs != 0x00 && u8regs != 0xFF)
  6381  000D3C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6382  000D3E  E002               	bz	l6224
  6383                           
  6384                           ; BSR set to: 1
  6385  000D40  2827               	incf	ModbusValidateRequest@u8regs,w,c
  6386  000D42  E1DD               	bnz	l6202
  6387  000D44                     l6224:
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;ModbusRtu.c: 826: if (u16regs > 15)
  6391  000D44  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  6392  000D46  E1EF               	bnz	l6210
  6393  000D48  0E10               	movlw	16
  6394  000D4A  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  6395  000D4C  D7E9               	goto	L9
  6396  000D4E                     l6230:
  6397                           
  6398                           ; BSR set to: 1
  6399                           ;ModbusRtu.c: 830: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6400  000D4E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6401  000D50  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6402  000D52  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6403  000D54  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6404  000D56  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6405  000D5A                     l6232:
  6406  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  6407                           
  6408                           ; BSR set to: 1
  6409                           ;ModbusRtu.c: 831: u8regs = (uint8_t) u16regs;
  6410  000D5C  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  6411                           
  6412                           ; BSR set to: 1
  6413                           ;ModbusRtu.c: 832: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  6414  000D60  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6415  000D62  0100               	movlb	0	; () banked
  6416  000D64  5DCF               	subwf	__holdingRegsCount& (0+255),w,b
  6417  000D66  FFFF               	dw	65535	; assembler added errata NOP
  6418  000D68  E3DE               	bnc	l6210
  6419  000D6A  D0B0               	goto	l804
  6420  000D6C                     l6240:
  6421                           
  6422                           ; BSR set to: 1
  6423                           ;ModbusRtu.c: 835: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6424  000D6C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6425  000D6E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6426  000D70  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6427  000D72  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6428  000D74  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6429                           
  6430                           ; BSR set to: 1
  6431                           ;ModbusRtu.c: 836: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6432  000D78  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6433  000D7A  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  6434  000D7E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6435  000D80  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6436  000D84  6A14               	clrf	??_ModbusValidateRequest,c
  6437  000D86  1214               	iorwf	??_ModbusValidateRequest,f,c
  6438  000D88  5014               	movf	??_ModbusValidateRequest,w,c
  6439  000D8A  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  6440  000D8C  5015               	movf	??_ModbusValidateRequest+1,w,c
  6441  000D8E  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  6442                           
  6443                           ; BSR set to: 1
  6444                           ;ModbusRtu.c: 837: u8regs = (uint8_t) u16regs;
  6445  000D90  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  6446                           
  6447                           ; BSR set to: 1
  6448                           ;ModbusRtu.c: 838: if (u8regs > _inputRegsCount)
  6449  000D94  5027               	movf	ModbusValidateRequest@u8regs,w,c
  6450  000D96  0100               	movlb	0	; () banked
  6451  000D98  5DD0               	subwf	__inputRegsCount& (0+255),w,b
  6452  000D9A  D7E5               	goto	L10
  6453  000D9C                     l6252:
  6454                           
  6455                           ; BSR set to: 1
  6456                           ;ModbusRtu.c: 842: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  6457                           ;ModbusRtu.c: 843: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  6458  000D9C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6459  000D9E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6460  000DA0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6461  000DA2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  6462  000DA4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;ModbusRtu.c: 844: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  6466  000DA8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6467  000DAA  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  6468  000DAE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6469  000DB0  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6470  000DB4  6A14               	clrf	??_ModbusValidateRequest,c
  6471  000DB6  1214               	iorwf	??_ModbusValidateRequest,f,c
  6472  000DB8  5014               	movf	??_ModbusValidateRequest,w,c
  6473  000DBA  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  6474  000DBC  5015               	movf	??_ModbusValidateRequest+1,w,c
  6475  000DBE  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  6476  000DC0  D7CC               	goto	l6232
  6477  000DC2                     l6264:
  6478                           
  6479                           ; BSR set to: 1
  6480                           ;ModbusRtu.c: 853: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  6481  000DC2  0E06               	movlw	6
  6482  000DC4  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  6483  000DC6  E1AF               	bnz	l6210
  6484                           
  6485                           ; BSR set to: 1
  6486                           ;ModbusRtu.c: 856: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  6487  000DC8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6488  000DCA  E1AD               	bnz	l6210
  6489                           
  6490                           ; BSR set to: 1
  6491  000DCC  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  6492  000DCE  E1AB               	bnz	l6210
  6493                           
  6494                           ; BSR set to: 1
  6495                           ;ModbusRtu.c: 859: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  6496  000DD0  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  6497  000DD2  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  6498  000DD6  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6499  000DD8  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6500  000DDC  6A14               	clrf	??_ModbusValidateRequest,c
  6501  000DDE  1214               	iorwf	??_ModbusValidateRequest,f,c
  6502  000DE0  0E00               	movlw	0
  6503  000DE2  90D8               	bcf	status,0,c
  6504  000DE4  3614               	rlcf	??_ModbusValidateRequest,f,c
  6505  000DE6  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  6506  000DE8  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  6507  000DEC  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  6508  000DF0  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  6509  000DF2  0EFF               	movlw	-1
  6510  000DF4  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  6511  000DF6  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  6512                           
  6513                           ;ModbusRtu.c: 860: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  6514  000DF8  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  6515  000DFA  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  6516  000DFE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  6517  000E00  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  6518  000E04  6A14               	clrf	??_ModbusValidateRequest,c
  6519  000E06  1214               	iorwf	??_ModbusValidateRequest,f,c
  6520  000E08  0E00               	movlw	0
  6521  000E0A  90D8               	bcf	status,0,c
  6522  000E0C  3614               	rlcf	??_ModbusValidateRequest,f,c
  6523  000E0E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  6524  000E10  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  6525  000E14  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  6526  000E18  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  6527  000E1A  0EFF               	movlw	-1
  6528  000E1C  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  6529  000E1E  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  6530                           
  6531                           ;ModbusRtu.c: 862: if (startAddrBytes + recLenBytes >= 256)
  6532  000E20  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  6533  000E22  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  6534  000E24  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  6535  000E26  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  6536  000E28  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  6537  000E2A  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  6538  000E2C  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  6539  000E2E  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  6540  000E30  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  6541  000E32  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  6542  000E34  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  6543  000E36  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  6544  000E38  5017               	movf	??_ModbusValidateRequest+3,w,c
  6545  000E3A  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  6546  000E3C  E102               	bnz	u5230
  6547  000E3E  0415               	decf	??_ModbusValidateRequest+1,w,c
  6548  000E40  D76F               	goto	L9
  6549  000E42                     u5230:
  6550  000E42  D771               	goto	l6210
  6551  000E44                     l6284:
  6552                           
  6553                           ; BSR set to: 1
  6554                           ;ModbusRtu.c: 866: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  6555  000E44  0E0E               	movlw	14
  6556  000E46  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6557  000E48  E001 D743          	bnz	l6194
  6558                           
  6559                           ; BSR set to: 1
  6560                           ;ModbusRtu.c: 868: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  6561  000E4C  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  6562                           
  6563                           ; BSR set to: 1
  6564                           ;ModbusRtu.c: 869: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  6565  000E50  0426               	decf	ModbusValidateRequest@readDevId,w,c
  6566  000E52  E007               	bz	l6300
  6567                           
  6568                           ; BSR set to: 1
  6569  000E54  0E02               	movlw	2
  6570  000E56  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6571  000E58  E004               	bz	l6300
  6572                           
  6573                           ; BSR set to: 1
  6574  000E5A  0E04               	movlw	4
  6575  000E5C  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6576  000E5E  E001 D74E          	bnz	l6202
  6577  000E62                     l6300:
  6578                           
  6579                           ; BSR set to: 1
  6580                           ;ModbusRtu.c: 871: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  6581  000E62  0E04               	movlw	4
  6582  000E64  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  6583  000E66  E132               	bnz	l804
  6584                           
  6585                           ; BSR set to: 1
  6586  000E68  0E06               	movlw	6
  6587  000E6A  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  6588  000E6C  D02F               	goto	l804
  6589  000E6E  D75B               	goto	l6210
  6590  000E70                     l6308:
  6591                           
  6592                           ; BSR set to: 1
  6593                           ;ModbusRtu.c: 876: if(_au8Buffer[COM_COM_ID] != 0x7F
  6594                           ;ModbusRtu.c: 877: && _au8Buffer[COM_COM_ID] != 0x01
  6595                           ;ModbusRtu.c: 878: && _au8Buffer[COM_COM_ID] != 0x10)
  6596  000E70  0E7F               	movlw	127
  6597  000E72  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6598  000E74  E02B               	bz	l804
  6599                           
  6600                           ; BSR set to: 1
  6601  000E76  0502               	decf	(__au8Buffer+2)& (0+255),w,b
  6602  000E78  E029               	bz	l804
  6603                           
  6604                           ; BSR set to: 1
  6605  000E7A  0E10               	movlw	16
  6606  000E7C  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  6607  000E7E  E001 D73E          	bnz	l6202
  6608  000E82  D024               	goto	l804
  6609  000E84                     l6320:
  6610  000E84  FFFF               	dw	65535	; assembler added errata NOP
  6611                           
  6612                           ; BSR set to: 1
  6613  000E86  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6614                           
  6615                           ; Switch size 1, requested type "speed"
  6616                           ; Number of cases is 14, Range of values is 1 to 102
  6617                           ; switch strategies available:
  6618                           ; Name         Instructions Cycles
  6619                           ; simple_byte           43    22 (average)
  6620                           ;	Chosen strategy is simple_byte
  6621  000E88  0A01               	xorlw	1	; case 1
  6622  000E8A  E101 D727          	bz	l6198
  6623  000E8E  0A03               	xorlw	3	; case 2
  6624  000E90  E101 D724          	bz	l6198
  6625  000E94  0A01               	xorlw	1	; case 3
  6626  000E96  E082               	bz	l6252
  6627  000E98  0A07               	xorlw	7	; case 4
  6628  000E9A  E101 D767          	bz	l6240
  6629  000E9E  0A01               	xorlw	1	; case 5
  6630  000EA0  E101 D744          	bz	l6214
  6631  000EA4  0A03               	xorlw	3	; case 6
  6632  000EA6  E101 D752          	bz	l6230
  6633  000EAA  0A09               	xorlw	9	; case 15
  6634  000EAC  E101 D716          	bz	l6198
  6635  000EB0  0A1F               	xorlw	31	; case 16
  6636  000EB2  E101 D773          	bz	l6252
  6637  000EB6  0A01               	xorlw	1	; case 17
  6638  000EB8  E009               	bz	l804
  6639  000EBA  0A04               	xorlw	4	; case 21
  6640  000EBC  E082               	bz	l6264
  6641  000EBE  0A3E               	xorlw	62	; case 43
  6642  000EC0  E0C1               	bz	l6284
  6643  000EC2  0A4F               	xorlw	79	; case 100
  6644  000EC4  E0D5               	bz	l6308
  6645  000EC6  0A01               	xorlw	1	; case 101
  6646  000EC8  A4D8               	btfss	status,2,c
  6647  000ECA  0A03               	xorlw	3	; case 102
  6648  000ECC                     l804:
  6649  000ECC  FFFF               	dw	65535	; assembler added errata NOP
  6650                           
  6651                           ;ModbusRtu.c: 886: _lastFunction = _au8Buffer[ FUNC ];
  6652  000ECE  C101  F0E9         	movff	__au8Buffer+1,__lastFunction
  6653                           
  6654                           ;ModbusRtu.c: 887: return 0;
  6655  000ED2  0E00               	movlw	0
  6656  000ED4                     l791:
  6657  000ED4  FFFF               	dw	65535	; assembler added errata NOP
  6658  000ED6  0012               	return		;funcret
  6659  000ED8  FFFF               	dw	65535	; errata NOP
  6660  000EDA                     __end_of_ModbusValidateRequest:
  6661                           	opt stack 0
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           postdec1	equ	0xFE5
  6672                           fsr1h	equ	0xFE2
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           postdec2	equ	0xFDD
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681 ;; *************** function _ModbusProcess_FC7 *****************
  6682 ;; Defined at:
  6683 ;;		line 1071 in file "ModbusRtu.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      unsigned char 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : E/1
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6697 ;;      Params:         0       0       0       0       0       0       0
  6698 ;;      Locals:         1       0       0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0
  6700 ;;      Totals:         1       0       0       0       0       0       0
  6701 ;;Total ram usage:        1 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    4
  6704 ;; This function calls:
  6705 ;;		_ModbusSendTxBuffer
  6706 ;; This function is called by:
  6707 ;;		_ModbusPoll
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text31
  6712  002D46                     __ptext31:
  6713                           	opt stack 0
  6714  002D46                     _ModbusProcess_FC7:
  6715                           	opt stack 25
  6716                           
  6717                           ;incstack = 0
  6718  002D46  FFFF               	dw	65535
  6719                           
  6720                           ;ModbusRtu.c: 1073: _au8Buffer[ 2 ] = _exceptionStatus;
  6721  002D48  C0CE  F102         	movff	__exceptionStatus,__au8Buffer+2
  6722                           
  6723                           ;ModbusRtu.c: 1074: _u8BufferSize = 3;
  6724  002D4C  0E03               	movlw	3
  6725  002D4E  6E70               	movwf	__u8BufferSize,c
  6726                           
  6727                           ;ModbusRtu.c: 1075: uint8_t u8CopyBufferSize = _u8BufferSize;
  6728  002D50  C070  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  6729                           
  6730                           ;ModbusRtu.c: 1076: ModbusSendTxBuffer();
  6731  002D54  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  6732                           
  6733                           ;ModbusRtu.c: 1077: return u8CopyBufferSize;
  6734  002D58  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  6735  002D5A  0012               	return		;funcret
  6736  002D5C  FFFF               	dw	65535	; errata NOP
  6737  002D5E                     __end_of_ModbusProcess_FC7:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           postdec1	equ	0xFE5
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _ModbusProcess_FC6 *****************
  6759 ;; Defined at:
  6760 ;;		line 1051 in file "ModbusRtu.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  regs            2   21[COMRAM] PTR unsigned short 
  6763 ;;		 -> _MODBUSHoldingRegs(30), 
  6764 ;;  u8size          1   23[COMRAM] unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  u16add          2   29[COMRAM] unsigned short 
  6767 ;;  u16val          2   26[COMRAM] unsigned short 
  6768 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      unsigned char 
  6771 ;; Registers used:
  6772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : E/1
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6778 ;;      Params:         3       0       0       0       0       0       0
  6779 ;;      Locals:         5       0       0       0       0       0       0
  6780 ;;      Temps:          2       0       0       0       0       0       0
  6781 ;;      Totals:        10       0       0       0       0       0       0
  6782 ;;Total ram usage:       10 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    4
  6785 ;; This function calls:
  6786 ;;		_ModbusSendTxBuffer
  6787 ;; This function is called by:
  6788 ;;		_ModbusPoll
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text32
  6793  002768                     __ptext32:
  6794                           	opt stack 0
  6795  002768                     _ModbusProcess_FC6:
  6796                           	opt stack 25
  6797                           
  6798                           ;incstack = 0
  6799  002768  FFFF               	dw	65535
  6800                           
  6801                           ;ModbusRtu.c: 1053: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  6802  00276A  0101               	movlb	1	; () banked
  6803  00276C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6804  00276E  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  6805  002770  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6806  002772  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  6807  002774  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  6808                           
  6809                           ; BSR set to: 1
  6810                           ;ModbusRtu.c: 1054: _lastAddress = u16add;
  6811  002778  C01E  F0BC         	movff	ModbusProcess_FC6@u16add,__lastAddress
  6812  00277C  C01F  F0BD         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  6813                           
  6814                           ;ModbusRtu.c: 1055: _lastCount = 1;
  6815  002780  0100               	movlb	0	; () banked
  6816  002782  6BBF               	clrf	(__lastCount+1)& (0+255),b
  6817  002784  0E01               	movlw	1
  6818  002786  6FBE               	movwf	__lastCount& (0+255),b
  6819                           
  6820                           ;ModbusRtu.c: 1056: uint8_t u8CopyBufferSize;
  6821                           ;ModbusRtu.c: 1057: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  6822  002788  0101               	movlb	1	; () banked
  6823  00278A  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  6824  00278C  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  6825  00278E  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  6826  002790  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  6827  002792  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  6828                           
  6829                           ; BSR set to: 1
  6830                           ;ModbusRtu.c: 1059: regs[ u16add ] = u16val;
  6831  002796  90D8               	bcf	status,0,c
  6832  002798  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  6833  00279A  6ED9               	movwf	fsr2l,c
  6834  00279C  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  6835  00279E  6EDA               	movwf	fsr2h,c
  6836  0027A0  5016               	movf	ModbusProcess_FC6@regs,w,c
  6837  0027A2  26D9               	addwf	fsr2l,f,c
  6838  0027A4  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  6839  0027A6  22DA               	addwfc	fsr2h,f,c
  6840  0027A8  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  6841  0027AC  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;ModbusRtu.c: 1062: _u8BufferSize = RESPONSE_SIZE;
  6845  0027B0  0E06               	movlw	6
  6846  0027B2  6E70               	movwf	__u8BufferSize,c
  6847                           
  6848                           ; BSR set to: 1
  6849                           ;ModbusRtu.c: 1064: u8CopyBufferSize = _u8BufferSize + 2;
  6850  0027B4  5070               	movf	__u8BufferSize,w,c
  6851  0027B6  0F02               	addlw	2
  6852  0027B8  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  6853                           
  6854                           ; BSR set to: 1
  6855                           ;ModbusRtu.c: 1065: ModbusSendTxBuffer();
  6856  0027BA  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  6857                           
  6858                           ;ModbusRtu.c: 1067: return u8CopyBufferSize;
  6859  0027BE  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  6860  0027C0  0012               	return		;funcret
  6861  0027C2  FFFF               	dw	65535	; errata NOP
  6862  0027C4                     __end_of_ModbusProcess_FC6:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           intcon	equ	0xFF2
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           postdec1	equ	0xFE5
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _ModbusProcess_FC5 *****************
  6884 ;; Defined at:
  6885 ;;		line 1016 in file "ModbusRtu.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  regs            1    wreg     PTR unsigned short 
  6888 ;;		 -> _MODBUSCoils(2), 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  regs            1   29[COMRAM] PTR unsigned short 
  6891 ;;		 -> _MODBUSCoils(2), 
  6892 ;;  u16coil         2   27[COMRAM] unsigned short 
  6893 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  6894 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      unsigned char 
  6897 ;; Registers used:
  6898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : E/1
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6904 ;;      Params:         0       0       0       0       0       0       0
  6905 ;;      Locals:         5       0       0       0       0       0       0
  6906 ;;      Temps:          5       0       0       0       0       0       0
  6907 ;;      Totals:        10       0       0       0       0       0       0
  6908 ;;Total ram usage:       10 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    4
  6911 ;; This function calls:
  6912 ;;		_ModbusSendTxBuffer
  6913 ;; This function is called by:
  6914 ;;		_ModbusPoll
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text33
  6919  00228E                     __ptext33:
  6920                           	opt stack 0
  6921  00228E                     _ModbusProcess_FC5:
  6922                           	opt stack 25
  6923                           
  6924                           ;incstack = 0
  6925  00228E  FFFF               	dw	65535
  6926                           
  6927                           ;ModbusProcess_FC5@regs stored from wreg
  6928  002290  6E1E               	movwf	ModbusProcess_FC5@regs,c
  6929                           
  6930                           ;ModbusRtu.c: 1019: uint8_t u8currentBit;
  6931                           ;ModbusRtu.c: 1020: uint8_t u8CopyBufferSize;
  6932                           ;ModbusRtu.c: 1021: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  6933  002292  0101               	movlb	1	; () banked
  6934  002294  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  6935  002296  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  6936  002298  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  6937  00229A  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  6938  00229C  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  6939                           
  6940                           ; BSR set to: 1
  6941                           ;ModbusRtu.c: 1022: _lastAddress = u16coil;
  6942  0022A0  C01C  F0BC         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  6943  0022A4  C01D  F0BD         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  6944                           
  6945                           ;ModbusRtu.c: 1023: _lastCount = 1;
  6946  0022A8  0100               	movlb	0	; () banked
  6947  0022AA  6BBF               	clrf	(__lastCount+1)& (0+255),b
  6948  0022AC  0E01               	movlw	1
  6949  0022AE  6FBE               	movwf	__lastCount& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;ModbusRtu.c: 1026: u8currentBit = (uint8_t) (u16coil % 16);
  6953  0022B0  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  6954  0022B2  0B0F               	andlw	15
  6955  0022B4  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;ModbusRtu.c: 1029: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  6959  0022B6  0101               	movlb	1	; () banked
  6960  0022B8  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  6961  0022BA  E116               	bnz	l6424
  6962                           
  6963                           ; BSR set to: 1
  6964  0022BC  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  6965  0022C0  0E01               	movlw	1
  6966  0022C2  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  6967  0022C4  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  6968  0022C6  2A16               	incf	??_ModbusProcess_FC5,f,c
  6969  0022C8  D004               	goto	u5434
  6970  0022CA                     u5435:
  6971  0022CA  FFFF               	dw	65535	; assembler added errata NOP
  6972  0022CC  90D8               	bcf	status,0,c
  6973  0022CE  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  6974  0022D0  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  6975  0022D2                     u5434:
  6976  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  6977  0022D4  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  6978  0022D6  D7F9               	goto	u5435
  6979  0022D8  501E               	movf	ModbusProcess_FC5@regs,w,c
  6980  0022DA  6ED9               	movwf	fsr2l,c
  6981  0022DC  6ADA               	clrf	fsr2h,c
  6982  0022DE  5017               	movf	??_ModbusProcess_FC5+1,w,c
  6983  0022E0  12DE               	iorwf	postinc2,f,c
  6984  0022E2  5018               	movf	??_ModbusProcess_FC5+2,w,c
  6985  0022E4  12DD               	iorwf	postdec2,f,c
  6986  0022E6  D019               	goto	l6426
  6987  0022E8                     l6424:
  6988                           
  6989                           ; BSR set to: 1
  6990  0022E8  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  6991  0022EC  0E01               	movlw	1
  6992  0022EE  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  6993  0022F0  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  6994  0022F2  2A16               	incf	??_ModbusProcess_FC5,f,c
  6995  0022F4  D004               	goto	u5444
  6996  0022F6                     u5445:
  6997  0022F6  FFFF               	dw	65535	; assembler added errata NOP
  6998  0022F8  90D8               	bcf	status,0,c
  6999  0022FA  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7000  0022FC  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7001  0022FE                     u5444:
  7002  0022FE  FFFF               	dw	65535	; assembler added errata NOP
  7003  002300  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7004  002302  D7F9               	goto	u5445
  7005  002304  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  7006  002306  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7007  002308  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  7008  00230A  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7009  00230C  501E               	movf	ModbusProcess_FC5@regs,w,c
  7010  00230E  6ED9               	movwf	fsr2l,c
  7011  002310  6ADA               	clrf	fsr2h,c
  7012  002312  5019               	movf	??_ModbusProcess_FC5+3,w,c
  7013  002314  16DE               	andwf	postinc2,f,c
  7014  002316  501A               	movf	??_ModbusProcess_FC5+4,w,c
  7015  002318  16DD               	andwf	postdec2,f,c
  7016  00231A                     l6426:
  7017  00231A  FFFF               	dw	65535	; assembler added errata NOP
  7018                           
  7019                           ;ModbusRtu.c: 1036: _u8BufferSize = 6;
  7020  00231C  0E06               	movlw	6
  7021  00231E  6E70               	movwf	__u8BufferSize,c
  7022                           
  7023                           ;ModbusRtu.c: 1037: u8CopyBufferSize = _u8BufferSize + 2;
  7024  002320  5070               	movf	__u8BufferSize,w,c
  7025  002322  0F02               	addlw	2
  7026  002324  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7027                           
  7028                           ;ModbusRtu.c: 1038: ModbusSendTxBuffer();
  7029  002326  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  7030                           
  7031                           ;ModbusRtu.c: 1040: return u8CopyBufferSize;
  7032  00232A  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7033  00232C  0012               	return		;funcret
  7034  00232E  FFFF               	dw	65535	; errata NOP
  7035  002330                     __end_of_ModbusProcess_FC5:
  7036                           	opt stack 0
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           prodh	equ	0xFF4
  7042                           prodl	equ	0xFF3
  7043                           intcon	equ	0xFF2
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           postdec1	equ	0xFE5
  7047                           fsr1h	equ	0xFE2
  7048                           fsr1l	equ	0xFE1
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _ModbusProcess_FC43 *****************
  7057 ;; Defined at:
  7058 ;;		line 1250 in file "ModbusRtu.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  objId           1   23[COMRAM] unsigned char 
  7063 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  7064 ;;  devIdCode       1   21[COMRAM] unsigned char 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      unsigned char 
  7067 ;; Registers used:
  7068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : E/1
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7074 ;;      Params:         0       0       0       0       0       0       0
  7075 ;;      Locals:         3       0       0       0       0       0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0
  7077 ;;      Totals:         3       0       0       0       0       0       0
  7078 ;;Total ram usage:        3 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    4
  7081 ;; This function calls:
  7082 ;;		_CopyStringToBuffer
  7083 ;;		_ModbusSendTxBuffer
  7084 ;; This function is called by:
  7085 ;;		_ModbusPoll
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	text34
  7090  001466                     __ptext34:
  7091                           	opt stack 0
  7092  001466                     _ModbusProcess_FC43:
  7093                           	opt stack 25
  7094                           
  7095                           ;incstack = 0
  7096  001466  FFFF               	dw	65535
  7097                           
  7098                           ;ModbusRtu.c: 1252: uint8_t devIdCode = _au8Buffer[ 3 ];
  7099  001468  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  7100                           
  7101                           ;ModbusRtu.c: 1260: uint8_t objId = _au8Buffer[ 4 ];
  7102  00146C  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  7103                           
  7104                           ;ModbusRtu.c: 1271: _au8Buffer[ 5 ] = 0x00;
  7105  001470  0101               	movlb	1	; () banked
  7106  001472  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  7107                           
  7108                           ;ModbusRtu.c: 1272: _au8Buffer[ 6 ] = 0x00;
  7109  001474  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  7110                           
  7111                           ; BSR set to: 1
  7112                           ;ModbusRtu.c: 1274: _u8BufferSize = 8;
  7113  001476  0E08               	movlw	8
  7114  001478  6E70               	movwf	__u8BufferSize,c
  7115                           
  7116                           ;ModbusRtu.c: 1275: switch(devIdCode)
  7117  00147A  D094               	goto	l6668
  7118  00147C                     l6614:
  7119                           
  7120                           ; BSR set to: 1
  7121                           ;ModbusRtu.c: 1278: _au8Buffer[ 4 ] = 0x81;
  7122  00147C  0E81               	movlw	129
  7123  00147E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7124                           
  7125                           ;ModbusRtu.c: 1279: _au8Buffer[ 7 ] = 3;
  7126  001480  0E03               	movlw	3
  7127  001482  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7128                           
  7129                           ; BSR set to: 1
  7130                           ;ModbusRtu.c: 1280: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  7131  001484  0E48               	movlw	low STR_1
  7132  001486  6E07               	movwf	CopyStringToBuffer@src,c
  7133  001488  0E06               	movlw	6
  7134  00148A  6E08               	movwf	CopyStringToBuffer@len,c
  7135  00148C  0E00               	movlw	0
  7136  00148E  EC54  F013         	call	_CopyStringToBuffer
  7137                           
  7138                           ;ModbusRtu.c: 1281: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  7139  001492  0E3F               	movlw	low STR_3
  7140  001494  6E07               	movwf	CopyStringToBuffer@src,c
  7141  001496  0E09               	movlw	9
  7142  001498  6E08               	movwf	CopyStringToBuffer@len,c
  7143  00149A  0E01               	movlw	1
  7144  00149C  EC54  F013         	call	_CopyStringToBuffer
  7145                           
  7146                           ;ModbusRtu.c: 1282: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  7147  0014A0  0E4E               	movlw	low STR_5
  7148  0014A2  6E07               	movwf	CopyStringToBuffer@src,c
  7149  0014A4  0E05               	movlw	5
  7150  0014A6  6E08               	movwf	CopyStringToBuffer@len,c
  7151  0014A8  0E02               	movlw	2
  7152  0014AA  EC54  F013         	call	_CopyStringToBuffer
  7153                           
  7154                           ;ModbusRtu.c: 1283: break;
  7155  0014AE  D084               	goto	l916
  7156  0014B0                     l6622:
  7157                           
  7158                           ; BSR set to: 1
  7159                           ;ModbusRtu.c: 1285: _au8Buffer[ 4 ] = 0x82;
  7160  0014B0  0E82               	movlw	130
  7161  0014B2  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7162                           
  7163                           ;ModbusRtu.c: 1286: _au8Buffer[ 7 ] = 4;
  7164  0014B4  0E04               	movlw	4
  7165  0014B6  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7166                           
  7167                           ; BSR set to: 1
  7168                           ;ModbusRtu.c: 1287: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  7169  0014B8  0E24               	movlw	low STR_7
  7170  0014BA  6E07               	movwf	CopyStringToBuffer@src,c
  7171  0014BC  0E10               	movlw	16
  7172  0014BE  6E08               	movwf	CopyStringToBuffer@len,c
  7173  0014C0  0E03               	movlw	3
  7174  0014C2  EC54  F013         	call	_CopyStringToBuffer
  7175                           
  7176                           ;ModbusRtu.c: 1288: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  7177  0014C6  0E10               	movlw	low STR_9
  7178  0014C8  6E07               	movwf	CopyStringToBuffer@src,c
  7179  0014CA  0E14               	movlw	20
  7180  0014CC  6E08               	movwf	CopyStringToBuffer@len,c
  7181  0014CE  0E04               	movlw	4
  7182  0014D0  EC54  F013         	call	_CopyStringToBuffer
  7183                           
  7184                           ;ModbusRtu.c: 1289: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  7185  0014D4  0E53               	movlw	low STR_11
  7186  0014D6  6E07               	movwf	CopyStringToBuffer@src,c
  7187  0014D8  0E04               	movlw	4
  7188  0014DA  6E08               	movwf	CopyStringToBuffer@len,c
  7189  0014DC  0E05               	movlw	5
  7190  0014DE  EC54  F013         	call	_CopyStringToBuffer
  7191                           
  7192                           ;ModbusRtu.c: 1290: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  7193  0014E2  0E34               	movlw	low STR_13
  7194  0014E4  6E07               	movwf	CopyStringToBuffer@src,c
  7195  0014E6  0E0B               	movlw	11
  7196  0014E8  6E08               	movwf	CopyStringToBuffer@len,c
  7197  0014EA  0E06               	movlw	6
  7198  0014EC  EC54  F013         	call	_CopyStringToBuffer
  7199                           
  7200                           ;ModbusRtu.c: 1291: break;
  7201  0014F0  D063               	goto	l916
  7202  0014F2                     l6632:
  7203                           
  7204                           ; BSR set to: 1
  7205                           ;ModbusRtu.c: 1293: _au8Buffer[ 7 ] = 1;
  7206  0014F2  0E01               	movlw	1
  7207  0014F4  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  7208                           
  7209                           ;ModbusRtu.c: 1294: switch(objId)
  7210  0014F6  D046               	goto	l6664
  7211  0014F8                     l6634:
  7212                           
  7213                           ; BSR set to: 1
  7214                           ;ModbusRtu.c: 1297: _au8Buffer[ 4 ] = 0x81;
  7215  0014F8  0E81               	movlw	129
  7216  0014FA  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7217                           
  7218                           ; BSR set to: 1
  7219                           ;ModbusRtu.c: 1298: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  7220  0014FC  0E48               	movlw	low STR_1
  7221  0014FE  6E07               	movwf	CopyStringToBuffer@src,c
  7222  001500  0E06               	movlw	6
  7223  001502  6E08               	movwf	CopyStringToBuffer@len,c
  7224  001504  5018               	movf	ModbusProcess_FC43@objId,w,c
  7225  001506  EC54  F013         	call	_CopyStringToBuffer
  7226                           
  7227                           ;ModbusRtu.c: 1299: break;
  7228  00150A  D056               	goto	l916
  7229  00150C                     l6638:
  7230                           
  7231                           ; BSR set to: 1
  7232                           ;ModbusRtu.c: 1301: _au8Buffer[ 4 ] = 0x81;
  7233  00150C  0E81               	movlw	129
  7234  00150E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7235                           
  7236                           ; BSR set to: 1
  7237                           ;ModbusRtu.c: 1302: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  7238  001510  0E3F               	movlw	low STR_3
  7239  001512  6E07               	movwf	CopyStringToBuffer@src,c
  7240  001514  0E09               	movlw	9
  7241  001516  6E08               	movwf	CopyStringToBuffer@len,c
  7242  001518  5018               	movf	ModbusProcess_FC43@objId,w,c
  7243  00151A  EC54  F013         	call	_CopyStringToBuffer
  7244                           
  7245                           ;ModbusRtu.c: 1303: break;
  7246  00151E  D04C               	goto	l916
  7247  001520                     l6642:
  7248                           
  7249                           ; BSR set to: 1
  7250                           ;ModbusRtu.c: 1305: _au8Buffer[ 4 ] = 0x81;
  7251  001520  0E81               	movlw	129
  7252  001522  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;ModbusRtu.c: 1306: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  7256  001524  0E4E               	movlw	low STR_5
  7257  001526  6E07               	movwf	CopyStringToBuffer@src,c
  7258  001528  0E05               	movlw	5
  7259  00152A  6E08               	movwf	CopyStringToBuffer@len,c
  7260  00152C  5018               	movf	ModbusProcess_FC43@objId,w,c
  7261  00152E  EC54  F013         	call	_CopyStringToBuffer
  7262                           
  7263                           ;ModbusRtu.c: 1307: break;
  7264  001532  D042               	goto	l916
  7265  001534                     l6646:
  7266                           
  7267                           ; BSR set to: 1
  7268                           ;ModbusRtu.c: 1309: _au8Buffer[ 4 ] = 0x82;
  7269  001534  0E82               	movlw	130
  7270  001536  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7271                           
  7272                           ; BSR set to: 1
  7273                           ;ModbusRtu.c: 1310: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  7274  001538  0E24               	movlw	low STR_7
  7275  00153A  6E07               	movwf	CopyStringToBuffer@src,c
  7276  00153C  0E10               	movlw	16
  7277  00153E  6E08               	movwf	CopyStringToBuffer@len,c
  7278  001540  5018               	movf	ModbusProcess_FC43@objId,w,c
  7279  001542  EC54  F013         	call	_CopyStringToBuffer
  7280                           
  7281                           ;ModbusRtu.c: 1311: break;
  7282  001546  D038               	goto	l916
  7283  001548                     l6650:
  7284                           
  7285                           ; BSR set to: 1
  7286                           ;ModbusRtu.c: 1313: _au8Buffer[ 4 ] = 0x82;
  7287  001548  0E82               	movlw	130
  7288  00154A  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7289                           
  7290                           ; BSR set to: 1
  7291                           ;ModbusRtu.c: 1314: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  7292  00154C  0E10               	movlw	low STR_9
  7293  00154E  6E07               	movwf	CopyStringToBuffer@src,c
  7294  001550  0E14               	movlw	20
  7295  001552  6E08               	movwf	CopyStringToBuffer@len,c
  7296  001554  5018               	movf	ModbusProcess_FC43@objId,w,c
  7297  001556  EC54  F013         	call	_CopyStringToBuffer
  7298                           
  7299                           ;ModbusRtu.c: 1315: break;
  7300  00155A  D02E               	goto	l916
  7301  00155C                     l6654:
  7302                           
  7303                           ; BSR set to: 1
  7304                           ;ModbusRtu.c: 1317: _au8Buffer[ 4 ] = 0x82;
  7305  00155C  0E82               	movlw	130
  7306  00155E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7307                           
  7308                           ; BSR set to: 1
  7309                           ;ModbusRtu.c: 1318: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  7310  001560  0E53               	movlw	low STR_11
  7311  001562  6E07               	movwf	CopyStringToBuffer@src,c
  7312  001564  0E04               	movlw	4
  7313  001566  6E08               	movwf	CopyStringToBuffer@len,c
  7314  001568  5018               	movf	ModbusProcess_FC43@objId,w,c
  7315  00156A  EC54  F013         	call	_CopyStringToBuffer
  7316                           
  7317                           ;ModbusRtu.c: 1319: break;
  7318  00156E  D024               	goto	l916
  7319  001570                     l6658:
  7320                           
  7321                           ; BSR set to: 1
  7322                           ;ModbusRtu.c: 1321: _au8Buffer[ 4 ] = 0x82;
  7323  001570  0E82               	movlw	130
  7324  001572  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  7325                           
  7326                           ; BSR set to: 1
  7327                           ;ModbusRtu.c: 1322: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  7328  001574  0E34               	movlw	low STR_13
  7329  001576  6E07               	movwf	CopyStringToBuffer@src,c
  7330  001578  0E0B               	movlw	11
  7331  00157A  6E08               	movwf	CopyStringToBuffer@len,c
  7332  00157C  5018               	movf	ModbusProcess_FC43@objId,w,c
  7333  00157E  EC54  F013         	call	_CopyStringToBuffer
  7334                           
  7335                           ;ModbusRtu.c: 1323: break;
  7336  001582  D01A               	goto	l916
  7337  001584                     l6664:
  7338  001584  FFFF               	dw	65535	; assembler added errata NOP
  7339                           
  7340                           ; BSR set to: 1
  7341  001586  5018               	movf	ModbusProcess_FC43@objId,w,c
  7342                           
  7343                           ; Switch size 1, requested type "speed"
  7344                           ; Number of cases is 7, Range of values is 0 to 6
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           22    12 (average)
  7348                           ;	Chosen strategy is simple_byte
  7349  001588  E0B7               	bz	l6634
  7350  00158A  0A01               	xorlw	1	; case 1
  7351  00158C  E0BF               	bz	l6638
  7352  00158E  0A03               	xorlw	3	; case 2
  7353  001590  E0C7               	bz	l6642
  7354  001592  0A01               	xorlw	1	; case 3
  7355  001594  E0CF               	bz	l6646
  7356  001596  0A07               	xorlw	7	; case 4
  7357  001598  E0D7               	bz	l6650
  7358  00159A  0A01               	xorlw	1	; case 5
  7359  00159C  E0DF               	bz	l6654
  7360  00159E  0A03               	xorlw	3	; case 6
  7361  0015A0  E0E7               	bz	l6658
  7362  0015A2  D00A               	goto	l916
  7363  0015A4                     l6668:
  7364  0015A4  FFFF               	dw	65535	; assembler added errata NOP
  7365                           
  7366                           ; BSR set to: 1
  7367  0015A6  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  7368                           
  7369                           ; Switch size 1, requested type "speed"
  7370                           ; Number of cases is 3, Range of values is 1 to 4
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte           10     6 (average)
  7374                           ;	Chosen strategy is simple_byte
  7375  0015A8  0A01               	xorlw	1	; case 1
  7376  0015AA  E101 D767          	bz	l6614
  7377  0015AE  0A03               	xorlw	3	; case 2
  7378  0015B0  E101 D77E          	bz	l6622
  7379  0015B4  0A06               	xorlw	6	; case 4
  7380  0015B6  E09D               	bz	l6632
  7381  0015B8                     l916:
  7382  0015B8  FFFF               	dw	65535	; assembler added errata NOP
  7383                           
  7384                           ;ModbusRtu.c: 1327: uint8_t u8CopyBufferSize = _u8BufferSize;
  7385  0015BA  C070  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  7386                           
  7387                           ;ModbusRtu.c: 1328: ModbusSendTxBuffer();
  7388  0015BE  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  7389                           
  7390                           ;ModbusRtu.c: 1330: return u8CopyBufferSize;
  7391  0015C2  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  7392  0015C4  0012               	return		;funcret
  7393  0015C6  FFFF               	dw	65535	; errata NOP
  7394  0015C8                     __end_of_ModbusProcess_FC43:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           postinc0	equ	0xFEE
  7404                           wreg	equ	0xFE8
  7405                           postdec1	equ	0xFE5
  7406                           fsr1h	equ	0xFE2
  7407                           fsr1l	equ	0xFE1
  7408                           indf2	equ	0xFDF
  7409                           postinc2	equ	0xFDE
  7410                           postdec2	equ	0xFDD
  7411                           fsr2h	equ	0xFDA
  7412                           fsr2l	equ	0xFD9
  7413                           status	equ	0xFD8
  7414                           
  7415 ;; *************** function _CopyStringToBuffer *****************
  7416 ;; Defined at:
  7417 ;;		line 1241 in file "ModbusRtu.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  objId           1    wreg     unsigned char 
  7420 ;;  src             1    6[COMRAM] PTR const unsigned char 
  7421 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
  7422 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
  7423 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
  7424 ;;		 -> STR_3(9), STR_1(6), 
  7425 ;;  len             1    7[COMRAM] unsigned char 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  objId           1    9[COMRAM] unsigned char 
  7428 ;;  i               1   10[COMRAM] unsigned char 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  1    wreg      void 
  7431 ;; Registers used:
  7432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/1
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7438 ;;      Params:         2       0       0       0       0       0       0
  7439 ;;      Locals:         2       0       0       0       0       0       0
  7440 ;;      Temps:          1       0       0       0       0       0       0
  7441 ;;      Totals:         5       0       0       0       0       0       0
  7442 ;;Total ram usage:        5 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    2
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_ModbusProcess_FC43
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text35
  7453  0026A8                     __ptext35:
  7454                           	opt stack 0
  7455  0026A8                     _CopyStringToBuffer:
  7456                           	opt stack 26
  7457                           
  7458                           ;incstack = 0
  7459  0026A8  FFFF               	dw	65535
  7460                           
  7461                           ;CopyStringToBuffer@objId stored from wreg
  7462  0026AA  6E0A               	movwf	CopyStringToBuffer@objId,c
  7463                           
  7464                           ;ModbusRtu.c: 1243: len--;
  7465  0026AC  0608               	decf	CopyStringToBuffer@len,f,c
  7466                           
  7467                           ;ModbusRtu.c: 1244: _au8Buffer[_u8BufferSize++] = objId;
  7468  0026AE  0E00               	movlw	low __au8Buffer
  7469  0026B0  2470               	addwf	__u8BufferSize,w,c
  7470  0026B2  6ED9               	movwf	fsr2l,c
  7471  0026B4  6ADA               	clrf	fsr2h,c
  7472  0026B6  0E01               	movlw	high __au8Buffer
  7473  0026B8  22DA               	addwfc	fsr2h,f,c
  7474  0026BA  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  7475  0026BE  2A70               	incf	__u8BufferSize,f,c
  7476                           
  7477                           ;ModbusRtu.c: 1245: _au8Buffer[_u8BufferSize++] = len;
  7478  0026C0  0E00               	movlw	low __au8Buffer
  7479  0026C2  2470               	addwf	__u8BufferSize,w,c
  7480  0026C4  6ED9               	movwf	fsr2l,c
  7481  0026C6  6ADA               	clrf	fsr2h,c
  7482  0026C8  0E01               	movlw	high __au8Buffer
  7483  0026CA  22DA               	addwfc	fsr2h,f,c
  7484  0026CC  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  7485  0026D0  2A70               	incf	__u8BufferSize,f,c
  7486                           
  7487                           ;ModbusRtu.c: 1246: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  7488  0026D2  6A0B               	clrf	CopyStringToBuffer@i,c
  7489  0026D4  D013               	goto	l5980
  7490  0026D6                     l5974:
  7491                           
  7492                           ;ModbusRtu.c: 1247: _au8Buffer[_u8BufferSize] = src[i];
  7493  0026D6  5007               	movf	CopyStringToBuffer@src,w,c
  7494  0026D8  240B               	addwf	CopyStringToBuffer@i,w,c
  7495  0026DA  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  7496  0026DC  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  7497  0026E0                     	if	1	;There is more than 1 active tblptr byte
  7498  0026E0  0E06               	movlw	high __smallconst
  7499  0026E2  6EF7               	movwf	tblptrh,c
  7500  0026E4                     	endif
  7501  0026E4                     	if	0	;tblptru may be non-zero
  7502  0026E4                     	endif
  7503  0026E4                     	if	0	;tblptru may be non-zero
  7504  0026E4                     	endif
  7505  0026E4  0E00               	movlw	low __au8Buffer
  7506  0026E6  2470               	addwf	__u8BufferSize,w,c
  7507  0026E8  6ED9               	movwf	fsr2l,c
  7508  0026EA  6ADA               	clrf	fsr2h,c
  7509  0026EC  0E01               	movlw	high __au8Buffer
  7510  0026EE  22DA               	addwfc	fsr2h,f,c
  7511  0026F0  0008               	tblrd		*
  7512  0026F2  FFFF               	dw	65535	; errata NOP
  7513  0026F4  CFF5 FFDF          	movff	tablat,indf2
  7514  0026F8  2A0B               	incf	CopyStringToBuffer@i,f,c
  7515  0026FA  2A70               	incf	__u8BufferSize,f,c
  7516  0026FC                     l5980:
  7517  0026FC  FFFF               	dw	65535	; assembler added errata NOP
  7518  0026FE  5008               	movf	CopyStringToBuffer@len,w,c
  7519  002700  5C0B               	subwf	CopyStringToBuffer@i,w,c
  7520  002702  E3E9               	bnc	l5974
  7521  002704  0012               	return		;funcret
  7522  002706  FFFF               	dw	65535	; errata NOP
  7523  002708                     __end_of_CopyStringToBuffer:
  7524                           	opt stack 0
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           intcon	equ	0xFF2
  7532                           postinc0	equ	0xFEE
  7533                           wreg	equ	0xFE8
  7534                           postdec1	equ	0xFE5
  7535                           fsr1h	equ	0xFE2
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _ModbusProcess_FC3 *****************
  7545 ;; Defined at:
  7546 ;;		line 983 in file "ModbusRtu.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7549 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  7550 ;;  u8size          1   23[COMRAM] unsigned char 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  u16regsno       2   29[COMRAM] unsigned short 
  7553 ;;  i               1   32[COMRAM] unsigned char 
  7554 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  7555 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      unsigned char 
  7558 ;; Registers used:
  7559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : E/1
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7565 ;;      Params:         3       0       0       0       0       0       0
  7566 ;;      Locals:         5       0       0       0       0       0       0
  7567 ;;      Temps:          4       0       0       0       0       0       0
  7568 ;;      Totals:        12       0       0       0       0       0       0
  7569 ;;Total ram usage:       12 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    4
  7572 ;; This function calls:
  7573 ;;		_ModbusSendTxBuffer
  7574 ;; This function is called by:
  7575 ;;		_ModbusPoll
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text36
  7580  001F32                     __ptext36:
  7581                           	opt stack 0
  7582  001F32                     _ModbusProcess_FC3:
  7583                           	opt stack 25
  7584                           
  7585                           ;incstack = 0
  7586  001F32  FFFF               	dw	65535
  7587                           
  7588                           ;ModbusRtu.c: 985: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  7589  001F34  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  7590                           
  7591                           ;ModbusRtu.c: 986: _lastAddress = u8StartAdd;
  7592  001F38  C020  F0BC         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  7593  001F3C  0100               	movlb	0	; () banked
  7594  001F3E  6BBD               	clrf	(__lastAddress+1)& (0+255),b
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;ModbusRtu.c: 987: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  7598  001F40  0101               	movlb	1	; () banked
  7599  001F42  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7600  001F44  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  7601  001F46  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7602  001F48  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  7603  001F4A  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  7604                           
  7605                           ; BSR set to: 1
  7606                           ;ModbusRtu.c: 988: _lastCount = u16regsno;
  7607  001F4E  C01E  F0BE         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  7608  001F52  C01F  F0BF         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  7609                           
  7610                           ; BSR set to: 1
  7611                           ;ModbusRtu.c: 989: uint8_t u8CopyBufferSize;
  7612                           ;ModbusRtu.c: 990: uint8_t i;
  7613                           ;ModbusRtu.c: 992: _au8Buffer[ 2 ] = u16regsno * 2;
  7614  001F56  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  7615  001F58  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7616  001F5A  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;ModbusRtu.c: 993: _u8BufferSize = 3;
  7620  001F5C  0E03               	movlw	3
  7621  001F5E  6E70               	movwf	__u8BufferSize,c
  7622                           
  7623                           ; BSR set to: 1
  7624                           ;ModbusRtu.c: 995: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  7625  001F60  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  7626  001F64  D02A               	goto	l6404
  7627  001F66                     l6398:
  7628                           
  7629                           ; BSR set to: 1
  7630                           ;ModbusRtu.c: 996: {
  7631                           ;ModbusRtu.c: 997: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  7632  001F66  0E00               	movlw	low __au8Buffer
  7633  001F68  2470               	addwf	__u8BufferSize,w,c
  7634  001F6A  6ED9               	movwf	fsr2l,c
  7635  001F6C  6ADA               	clrf	fsr2h,c
  7636  001F6E  0E01               	movlw	high __au8Buffer
  7637  001F70  22DA               	addwfc	fsr2h,f,c
  7638  001F72  5021               	movf	ModbusProcess_FC3@i,w,c
  7639  001F74  0D02               	mullw	2
  7640  001F76  50F3               	movf	prodl,w,c
  7641  001F78  2416               	addwf	ModbusProcess_FC3@regs,w,c
  7642  001F7A  6EE1               	movwf	fsr1l,c
  7643  001F7C  50F4               	movf	prodh,w,c
  7644  001F7E  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7645  001F80  6EE2               	movwf	fsr1h,c
  7646  001F82  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  7647  001F86  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  7648  001F8A  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  7649  001F8E  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  7650  001F90  5019               	movf	??_ModbusProcess_FC3,w,c
  7651  001F92  6EDF               	movwf	indf2,c
  7652                           
  7653                           ; BSR set to: 1
  7654                           ;ModbusRtu.c: 998: _u8BufferSize++;
  7655  001F94  2A70               	incf	__u8BufferSize,f,c
  7656                           
  7657                           ; BSR set to: 1
  7658                           ;ModbusRtu.c: 999: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  7659  001F96  5021               	movf	ModbusProcess_FC3@i,w,c
  7660  001F98  0D02               	mullw	2
  7661  001F9A  50F3               	movf	prodl,w,c
  7662  001F9C  2416               	addwf	ModbusProcess_FC3@regs,w,c
  7663  001F9E  6ED9               	movwf	fsr2l,c
  7664  001FA0  50F4               	movf	prodh,w,c
  7665  001FA2  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7666  001FA4  6EDA               	movwf	fsr2h,c
  7667  001FA6  0E00               	movlw	low __au8Buffer
  7668  001FA8  2470               	addwf	__u8BufferSize,w,c
  7669  001FAA  6EE1               	movwf	fsr1l,c
  7670  001FAC  6AE2               	clrf	fsr1h,c
  7671  001FAE  0E01               	movlw	high __au8Buffer
  7672  001FB0  22E2               	addwfc	fsr1h,f,c
  7673  001FB2  CFDF FFE7          	movff	indf2,indf1
  7674                           
  7675                           ;ModbusRtu.c: 1000: _u8BufferSize++;
  7676  001FB6  2A70               	incf	__u8BufferSize,f,c
  7677  001FB8  2A21               	incf	ModbusProcess_FC3@i,f,c
  7678  001FBA                     l6404:
  7679  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  7680                           
  7681                           ; BSR set to: 1
  7682  001FBC  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  7683  001FBE  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7684  001FC0  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  7685  001FC2  0E00               	movlw	0
  7686  001FC4  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  7687  001FC6  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  7688  001FC8  5021               	movf	ModbusProcess_FC3@i,w,c
  7689  001FCA  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  7690  001FCC  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  7691  001FCE  5019               	movf	??_ModbusProcess_FC3,w,c
  7692  001FD0  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  7693  001FD2  501A               	movf	??_ModbusProcess_FC3+1,w,c
  7694  001FD4  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  7695  001FD6  E3C7               	bnc	l6398
  7696                           
  7697                           ; BSR set to: 1
  7698                           ;ModbusRtu.c: 1001: }
  7699                           ;ModbusRtu.c: 1002: u8CopyBufferSize = _u8BufferSize + 2;
  7700  001FD8  5070               	movf	__u8BufferSize,w,c
  7701  001FDA  0F02               	addlw	2
  7702  001FDC  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  7703                           
  7704                           ; BSR set to: 1
  7705                           ;ModbusRtu.c: 1003: ModbusSendTxBuffer();
  7706  001FDE  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  7707                           
  7708                           ;ModbusRtu.c: 1005: return u8CopyBufferSize;
  7709  001FE2  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  7710  001FE4  0012               	return		;funcret
  7711  001FE6  FFFF               	dw	65535	; errata NOP
  7712  001FE8                     __end_of_ModbusProcess_FC3:
  7713                           	opt stack 0
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           indf1	equ	0xFE7
  7724                           postinc1	equ	0xFE6
  7725                           postdec1	equ	0xFE5
  7726                           fsr1h	equ	0xFE2
  7727                           fsr1l	equ	0xFE1
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function _ModbusProcess_FC21 *****************
  7736 ;; Defined at:
  7737 ;;		line 1209 in file "ModbusRtu.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;		None
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  7742 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  7743 ;;  i               1   29[COMRAM] unsigned char 
  7744 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  7745 ;;  requestDataL    1   23[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : E/1
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7755 ;;      Params:         0       0       0       0       0       0       0
  7756 ;;      Locals:         7       0       0       0       0       0       0
  7757 ;;      Temps:          2       0       0       0       0       0       0
  7758 ;;      Totals:         9       0       0       0       0       0       0
  7759 ;;Total ram usage:        9 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    4
  7762 ;; This function calls:
  7763 ;;		_ModbusSendTxBuffer
  7764 ;; This function is called by:
  7765 ;;		_ModbusPoll
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text37
  7770  002096                     __ptext37:
  7771                           	opt stack 0
  7772  002096                     _ModbusProcess_FC21:
  7773                           	opt stack 25
  7774                           
  7775                           ;incstack = 0
  7776  002096  FFFF               	dw	65535
  7777                           
  7778                           ;ModbusRtu.c: 1213: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  7779  002098  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  7780                           
  7781                           ;ModbusRtu.c: 1215: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  7782  00209C  0101               	movlb	1	; () banked
  7783  00209E  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7784  0020A0  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  7785  0020A4  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  7786  0020A6  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  7787  0020AA  6A16               	clrf	??_ModbusProcess_FC21,c
  7788  0020AC  1216               	iorwf	??_ModbusProcess_FC21,f,c
  7789  0020AE  90D8               	bcf	status,0,c
  7790  0020B0  3416               	rlcf	??_ModbusProcess_FC21,w,c
  7791  0020B2  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  7792  0020B4  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  7793  0020B6  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  7794                           
  7795                           ; BSR set to: 1
  7796                           ;ModbusRtu.c: 1216: _lastAddress = startAddrsBytes;
  7797  0020B8  C01A  F0BC         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  7798  0020BC  C01B  F0BD         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  7799                           
  7800                           ;ModbusRtu.c: 1217: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  7801  0020C0  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7802  0020C2  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  7803  0020C6  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  7804  0020C8  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  7805  0020CC  6A16               	clrf	??_ModbusProcess_FC21,c
  7806  0020CE  1216               	iorwf	??_ModbusProcess_FC21,f,c
  7807  0020D0  90D8               	bcf	status,0,c
  7808  0020D2  3416               	rlcf	??_ModbusProcess_FC21,w,c
  7809  0020D4  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  7810  0020D6  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  7811  0020D8  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  7812                           
  7813                           ; BSR set to: 1
  7814                           ;ModbusRtu.c: 1218: _lastCount = recLenBytes;
  7815  0020DA  C01C  F0BE         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  7816  0020DE  C01D  F0BF         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  7817                           
  7818                           ;ModbusRtu.c: 1219: uint8_t u8CopyBufferSize;
  7819                           ;ModbusRtu.c: 1220: uint8_t i;
  7820                           ;ModbusRtu.c: 1226: _u8BufferSize = requestDataLen + 1;
  7821  0020E2  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  7822  0020E4  6E70               	movwf	__u8BufferSize,c
  7823                           
  7824                           ; BSR set to: 1
  7825                           ;ModbusRtu.c: 1230: for (i = 0; i < recLenBytes; i++)
  7826  0020E6  6A1E               	clrf	ModbusProcess_FC21@i,c
  7827  0020E8  D01C               	goto	l6602
  7828  0020EA                     l898:
  7829  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  7830                           
  7831                           ; BSR set to: 1
  7832  0020EC  B2A6               	btfsc	4006,1,c	;volatile
  7833  0020EE  D7FD               	goto	l898
  7834                           
  7835                           ; BSR set to: 1
  7836  0020F0  501E               	movf	ModbusProcess_FC21@i,w,c
  7837  0020F2  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  7838  0020F4  6EA9               	movwf	4009,c	;volatile
  7839                           
  7840                           ; BSR set to: 1
  7841  0020F6  0E0A               	movlw	low (__au8Buffer+10)
  7842  0020F8  241E               	addwf	ModbusProcess_FC21@i,w,c
  7843  0020FA  6ED9               	movwf	fsr2l,c
  7844  0020FC  6ADA               	clrf	fsr2h,c
  7845  0020FE  0E01               	movlw	high (__au8Buffer+10)
  7846  002100  22DA               	addwfc	fsr2h,f,c
  7847  002102  50DF               	movf	indf2,w,c
  7848  002104  6EA8               	movwf	4008,c	;volatile
  7849                           
  7850                           ; BSR set to: 1
  7851  002106  90D8               	bcf	status,0,c	;volatile
  7852                           
  7853                           ; BSR set to: 1
  7854  002108  BEF2               	btfsc	intcon,7,c	;volatile
  7855                           
  7856                           ; BSR set to: 1
  7857  00210A  80D8               	bsf	status,0,c	;volatile
  7858                           
  7859                           ; BSR set to: 1
  7860  00210C  9EF2               	bcf	intcon,7,c	;volatile
  7861  00210E  84A6               	bsf	4006,2,c	;volatile
  7862                           
  7863                           ; BSR set to: 1
  7864  002110  0E55               	movlw	85
  7865  002112  6EA7               	movwf	4007,c	;volatile
  7866  002114  0EAA               	movlw	170
  7867  002116  6EA7               	movwf	4007,c	;volatile
  7868                           
  7869                           ; BSR set to: 1
  7870  002118  82A6               	bsf	4006,1,c	;volatile
  7871                           
  7872                           ; BSR set to: 1
  7873  00211A  94A6               	bcf	4006,2,c	;volatile
  7874                           
  7875                           ; BSR set to: 1
  7876  00211C  E301               	bnc	l6600
  7877                           
  7878                           ; BSR set to: 1
  7879  00211E  8EF2               	bsf	intcon,7,c	;volatile
  7880  002120                     l6600:
  7881                           
  7882                           ; BSR set to: 1
  7883  002120  2A1E               	incf	ModbusProcess_FC21@i,f,c
  7884  002122                     l6602:
  7885  002122  FFFF               	dw	65535	; assembler added errata NOP
  7886                           
  7887                           ; BSR set to: 1
  7888  002124  501E               	movf	ModbusProcess_FC21@i,w,c
  7889  002126  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  7890  002128  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  7891  00212A  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  7892  00212C  5C16               	subwf	??_ModbusProcess_FC21,w,c
  7893  00212E  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  7894  002130  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  7895  002132  E3DB               	bnc	l898
  7896                           
  7897                           ; BSR set to: 1
  7898                           ;ModbusRtu.c: 1233: }
  7899                           ;ModbusRtu.c: 1235: u8CopyBufferSize = _u8BufferSize;
  7900  002134  C070  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  7901                           
  7902                           ; BSR set to: 1
  7903                           ;ModbusRtu.c: 1236: ModbusSendTxBuffer();
  7904  002138  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  7905                           
  7906                           ;ModbusRtu.c: 1238: return u8CopyBufferSize;
  7907  00213C  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  7908  00213E  0012               	return		;funcret
  7909  002140  FFFF               	dw	65535	; errata NOP
  7910  002142                     __end_of_ModbusProcess_FC21:
  7911                           	opt stack 0
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           postinc0	equ	0xFEE
  7920                           wreg	equ	0xFE8
  7921                           indf1	equ	0xFE7
  7922                           postinc1	equ	0xFE6
  7923                           postdec1	equ	0xFE5
  7924                           fsr1h	equ	0xFE2
  7925                           fsr1l	equ	0xFE1
  7926                           indf2	equ	0xFDF
  7927                           postinc2	equ	0xFDE
  7928                           postdec2	equ	0xFDD
  7929                           fsr2h	equ	0xFDA
  7930                           fsr2l	equ	0xFD9
  7931                           status	equ	0xFD8
  7932                           
  7933 ;; *************** function _ModbusProcess_FC17 *****************
  7934 ;; Defined at:
  7935 ;;		line 1184 in file "ModbusRtu.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;		None
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      unsigned char 
  7942 ;; Registers used:
  7943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : E/1
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7949 ;;      Params:         0       0       0       0       0       0       0
  7950 ;;      Locals:         1       0       0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0
  7952 ;;      Totals:         1       0       0       0       0       0       0
  7953 ;;Total ram usage:        1 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    4
  7956 ;; This function calls:
  7957 ;;		_ModbusSendTxBuffer
  7958 ;; This function is called by:
  7959 ;;		_ModbusPoll
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text38
  7964  0025D2                     __ptext38:
  7965                           	opt stack 0
  7966  0025D2                     _ModbusProcess_FC17:
  7967                           	opt stack 25
  7968                           
  7969                           ;incstack = 0
  7970  0025D2  FFFF               	dw	65535
  7971                           
  7972                           ;ModbusRtu.c: 1186: _au8Buffer[ 2 ] = 4;
  7973  0025D4  0E04               	movlw	4
  7974  0025D6  0101               	movlb	1	; () banked
  7975  0025D8  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  7976                           
  7977                           ;ModbusRtu.c: 1188: _u8BufferSize = 3;
  7978  0025DA  0E03               	movlw	3
  7979  0025DC  6E70               	movwf	__u8BufferSize,c
  7980                           
  7981                           ; BSR set to: 1
  7982                           ;ModbusRtu.c: 1189: _au8Buffer[_u8BufferSize++] = 0x01;
  7983  0025DE  0E00               	movlw	low __au8Buffer
  7984  0025E0  2470               	addwf	__u8BufferSize,w,c
  7985  0025E2  6ED9               	movwf	fsr2l,c
  7986  0025E4  6ADA               	clrf	fsr2h,c
  7987  0025E6  0E01               	movlw	high __au8Buffer
  7988  0025E8  22DA               	addwfc	fsr2h,f,c
  7989  0025EA  0E01               	movlw	1
  7990  0025EC  6EDF               	movwf	indf2,c
  7991                           
  7992                           ; BSR set to: 1
  7993  0025EE  2A70               	incf	__u8BufferSize,f,c
  7994                           
  7995                           ; BSR set to: 1
  7996                           ;ModbusRtu.c: 1190: _au8Buffer[_u8BufferSize++] = 0x01;
  7997  0025F0  0E00               	movlw	low __au8Buffer
  7998  0025F2  2470               	addwf	__u8BufferSize,w,c
  7999  0025F4  6ED9               	movwf	fsr2l,c
  8000  0025F6  6ADA               	clrf	fsr2h,c
  8001  0025F8  0E01               	movlw	high __au8Buffer
  8002  0025FA  22DA               	addwfc	fsr2h,f,c
  8003  0025FC  0E01               	movlw	1
  8004  0025FE  6EDF               	movwf	indf2,c
  8005                           
  8006                           ; BSR set to: 1
  8007  002600  2A70               	incf	__u8BufferSize,f,c
  8008                           
  8009                           ; BSR set to: 1
  8010                           ;ModbusRtu.c: 1191: _au8Buffer[_u8BufferSize++] = 0x01;
  8011  002602  0E00               	movlw	low __au8Buffer
  8012  002604  2470               	addwf	__u8BufferSize,w,c
  8013  002606  6ED9               	movwf	fsr2l,c
  8014  002608  6ADA               	clrf	fsr2h,c
  8015  00260A  0E01               	movlw	high __au8Buffer
  8016  00260C  22DA               	addwfc	fsr2h,f,c
  8017  00260E  0E01               	movlw	1
  8018  002610  6EDF               	movwf	indf2,c
  8019                           
  8020                           ; BSR set to: 1
  8021  002612  2A70               	incf	__u8BufferSize,f,c
  8022                           
  8023                           ; BSR set to: 1
  8024                           ;ModbusRtu.c: 1192: _au8Buffer[_u8BufferSize++] = 0x01;
  8025  002614  0E00               	movlw	low __au8Buffer
  8026  002616  2470               	addwf	__u8BufferSize,w,c
  8027  002618  6ED9               	movwf	fsr2l,c
  8028  00261A  6ADA               	clrf	fsr2h,c
  8029  00261C  0E01               	movlw	high __au8Buffer
  8030  00261E  22DA               	addwfc	fsr2h,f,c
  8031  002620  0E01               	movlw	1
  8032  002622  6EDF               	movwf	indf2,c
  8033                           
  8034                           ; BSR set to: 1
  8035  002624  2A70               	incf	__u8BufferSize,f,c
  8036                           
  8037                           ; BSR set to: 1
  8038                           ;ModbusRtu.c: 1194: _au8Buffer[_u8BufferSize++] = 0xff;
  8039  002626  0E00               	movlw	low __au8Buffer
  8040  002628  2470               	addwf	__u8BufferSize,w,c
  8041  00262A  6ED9               	movwf	fsr2l,c
  8042  00262C  6ADA               	clrf	fsr2h,c
  8043  00262E  0E01               	movlw	high __au8Buffer
  8044  002630  22DA               	addwfc	fsr2h,f,c
  8045  002632  68DF               	setf	indf2,c
  8046                           
  8047                           ; BSR set to: 1
  8048  002634  2A70               	incf	__u8BufferSize,f,c
  8049                           
  8050                           ; BSR set to: 1
  8051                           ;ModbusRtu.c: 1195: uint8_t u8CopyBufferSize = _u8BufferSize;
  8052  002636  C070  F016         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  8053                           
  8054                           ; BSR set to: 1
  8055                           ;ModbusRtu.c: 1196: ModbusSendTxBuffer();
  8056  00263A  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8057                           
  8058                           ;ModbusRtu.c: 1198: return u8CopyBufferSize;
  8059  00263E  5016               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8060  002640  0012               	return		;funcret
  8061  002642  FFFF               	dw	65535	; errata NOP
  8062  002644                     __end_of_ModbusProcess_FC17:
  8063                           	opt stack 0
  8064                           tblptru	equ	0xFF8
  8065                           tblptrh	equ	0xFF7
  8066                           tblptrl	equ	0xFF6
  8067                           tablat	equ	0xFF5
  8068                           prodh	equ	0xFF4
  8069                           prodl	equ	0xFF3
  8070                           intcon	equ	0xFF2
  8071                           postinc0	equ	0xFEE
  8072                           wreg	equ	0xFE8
  8073                           indf1	equ	0xFE7
  8074                           postinc1	equ	0xFE6
  8075                           postdec1	equ	0xFE5
  8076                           fsr1h	equ	0xFE2
  8077                           fsr1l	equ	0xFE1
  8078                           indf2	equ	0xFDF
  8079                           postinc2	equ	0xFDE
  8080                           postdec2	equ	0xFDD
  8081                           fsr2h	equ	0xFDA
  8082                           fsr2l	equ	0xFD9
  8083                           status	equ	0xFD8
  8084                           
  8085 ;; *************** function _ModbusProcess_FC16 *****************
  8086 ;; Defined at:
  8087 ;;		line 1145 in file "ModbusRtu.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8090 ;;		 -> _MODBUSHoldingRegs(30), 
  8091 ;;  u8size          1   23[COMRAM] unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  8094 ;;  temp            2   28[COMRAM] unsigned short 
  8095 ;;  i               1   34[COMRAM] unsigned char 
  8096 ;;  u8regsno        1   33[COMRAM] unsigned char 
  8097 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      unsigned char 
  8100 ;; Registers used:
  8101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : E/1
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8107 ;;      Params:         3       0       0       0       0       0       0
  8108 ;;      Locals:         7       0       0       0       0       0       0
  8109 ;;      Temps:          4       0       0       0       0       0       0
  8110 ;;      Totals:        14       0       0       0       0       0       0
  8111 ;;Total ram usage:       14 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    4
  8114 ;; This function calls:
  8115 ;;		_ModbusSendTxBuffer
  8116 ;; This function is called by:
  8117 ;;		_ModbusPoll
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           	psect	text39
  8122  001CF8                     __ptext39:
  8123                           	opt stack 0
  8124  001CF8                     _ModbusProcess_FC16:
  8125                           	opt stack 25
  8126                           
  8127                           ;incstack = 0
  8128  001CF8  FFFF               	dw	65535
  8129                           
  8130                           ;ModbusRtu.c: 1148: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8131  001CFA  0101               	movlb	1	; () banked
  8132  001CFC  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8133  001CFE  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8134  001D02  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8135  001D04  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8136  001D08  6A19               	clrf	??_ModbusProcess_FC16,c
  8137  001D0A  1019               	iorwf	??_ModbusProcess_FC16,w,c
  8138  001D0C  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8139  001D0E  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8140  001D10  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8141                           
  8142                           ; BSR set to: 1
  8143                           ;ModbusRtu.c: 1149: _lastAddress = u16StartAdd;
  8144  001D12  C020  F0BC         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8145  001D16  C021  F0BD         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8146                           
  8147                           ; BSR set to: 1
  8148                           ;ModbusRtu.c: 1150: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8149  001D1A  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8150                           
  8151                           ; BSR set to: 1
  8152                           ;ModbusRtu.c: 1151: _lastCount = u8regsno;
  8153  001D1E  C022  F0BE         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8154  001D22  0100               	movlb	0	; () banked
  8155  001D24  6BBF               	clrf	(__lastCount+1)& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;ModbusRtu.c: 1152: uint8_t u8CopyBufferSize;
  8159                           ;ModbusRtu.c: 1153: uint8_t i;
  8160                           ;ModbusRtu.c: 1154: uint16_t temp;
  8161                           ;ModbusRtu.c: 1157: _au8Buffer[ NB_HI ] = 0;
  8162  001D26  0101               	movlb	1	; () banked
  8163  001D28  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8164                           
  8165                           ; BSR set to: 1
  8166                           ;ModbusRtu.c: 1158: _au8Buffer[ NB_LO ] = u8regsno;
  8167  001D2A  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8168                           
  8169                           ; BSR set to: 1
  8170                           ;ModbusRtu.c: 1159: _u8BufferSize = RESPONSE_SIZE;
  8171  001D2E  0E06               	movlw	6
  8172  001D30  6E70               	movwf	__u8BufferSize,c
  8173                           
  8174                           ; BSR set to: 1
  8175                           ;ModbusRtu.c: 1162: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8176  001D32  6A23               	clrf	ModbusProcess_FC16@i,c
  8177  001D34  D02C               	goto	l6528
  8178  001D36                     l6522:
  8179                           
  8180                           ; BSR set to: 1
  8181                           ;ModbusRtu.c: 1163: {
  8182                           ;ModbusRtu.c: 1164: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8183  001D36  5023               	movf	ModbusProcess_FC16@i,w,c
  8184  001D38  0D02               	mullw	2
  8185  001D3A  0E08               	movlw	low (__au8Buffer+8)
  8186  001D3C  24F3               	addwf	prodl,w,c
  8187  001D3E  6ED9               	movwf	fsr2l,c
  8188  001D40  0E01               	movlw	high (__au8Buffer+8)
  8189  001D42  20F4               	addwfc	prodh,w,c
  8190  001D44  6EDA               	movwf	fsr2h,c
  8191  001D46  50DF               	movf	indf2,w,c
  8192  001D48  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8193  001D4A  5023               	movf	ModbusProcess_FC16@i,w,c
  8194  001D4C  0D02               	mullw	2
  8195  001D4E  0E07               	movlw	low (__au8Buffer+7)
  8196  001D50  24F3               	addwf	prodl,w,c
  8197  001D52  6ED9               	movwf	fsr2l,c
  8198  001D54  0E01               	movlw	high (__au8Buffer+7)
  8199  001D56  20F4               	addwfc	prodh,w,c
  8200  001D58  6EDA               	movwf	fsr2h,c
  8201  001D5A  50DF               	movf	indf2,w,c
  8202  001D5C  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8203  001D5E  5019               	movf	??_ModbusProcess_FC16,w,c
  8204  001D60  6E1D               	movwf	ModbusProcess_FC16@temp,c
  8205  001D62  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8206                           
  8207                           ; BSR set to: 1
  8208                           ;ModbusRtu.c: 1168: regs[ u16StartAdd + i ] = temp;
  8209  001D66  5023               	movf	ModbusProcess_FC16@i,w,c
  8210  001D68  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8211  001D6A  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8212  001D6C  0E00               	movlw	0
  8213  001D6E  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8214  001D70  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8215  001D72  90D8               	bcf	status,0,c
  8216  001D74  3619               	rlcf	??_ModbusProcess_FC16,f,c
  8217  001D76  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  8218  001D78  5019               	movf	??_ModbusProcess_FC16,w,c
  8219  001D7A  2416               	addwf	ModbusProcess_FC16@regs,w,c
  8220  001D7C  6ED9               	movwf	fsr2l,c
  8221  001D7E  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8222  001D80  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8223  001D82  6EDA               	movwf	fsr2h,c
  8224  001D84  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8225  001D88  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8226                           
  8227                           ; BSR set to: 1
  8228  001D8C  2A23               	incf	ModbusProcess_FC16@i,f,c
  8229  001D8E                     l6528:
  8230  001D8E  FFFF               	dw	65535	; assembler added errata NOP
  8231                           
  8232                           ; BSR set to: 1
  8233  001D90  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  8234  001D92  5C23               	subwf	ModbusProcess_FC16@i,w,c
  8235  001D94  E20E               	bc	l6532
  8236                           
  8237                           ; BSR set to: 1
  8238  001D96  5018               	movf	ModbusProcess_FC16@u8size,w,c
  8239  001D98  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8240  001D9A  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8241  001D9C  5023               	movf	ModbusProcess_FC16@i,w,c
  8242  001D9E  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8243  001DA0  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8244  001DA2  0E00               	movlw	0
  8245  001DA4  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8246  001DA6  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8247  001DA8  5019               	movf	??_ModbusProcess_FC16,w,c
  8248  001DAA  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  8249  001DAC  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8250  001DAE  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  8251  001DB0  E3C2               	bnc	l6522
  8252  001DB2                     l6532:
  8253                           
  8254                           ; BSR set to: 1
  8255                           ;ModbusRtu.c: 1169: }
  8256                           ;ModbusRtu.c: 1170: u8CopyBufferSize = _u8BufferSize + 2;
  8257  001DB2  5070               	movf	__u8BufferSize,w,c
  8258  001DB4  0F02               	addlw	2
  8259  001DB6  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8260                           
  8261                           ; BSR set to: 1
  8262                           ;ModbusRtu.c: 1171: ModbusSendTxBuffer();
  8263  001DB8  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8264                           
  8265                           ;ModbusRtu.c: 1173: return u8CopyBufferSize;
  8266  001DBC  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8267  001DBE  0012               	return		;funcret
  8268  001DC0  FFFF               	dw	65535	; errata NOP
  8269  001DC2                     __end_of_ModbusProcess_FC16:
  8270                           	opt stack 0
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           postinc0	equ	0xFEE
  8279                           wreg	equ	0xFE8
  8280                           indf1	equ	0xFE7
  8281                           postinc1	equ	0xFE6
  8282                           postdec1	equ	0xFE5
  8283                           fsr1h	equ	0xFE2
  8284                           fsr1l	equ	0xFE1
  8285                           indf2	equ	0xFDF
  8286                           postinc2	equ	0xFDE
  8287                           postdec2	equ	0xFDD
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function _ModbusProcess_FC15 *****************
  8293 ;; Defined at:
  8294 ;;		line 1087 in file "ModbusRtu.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  regs            1    wreg     PTR unsigned short 
  8297 ;;		 -> _MODBUSCoils(2), 
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  regs            1   35[COMRAM] PTR unsigned short 
  8300 ;;		 -> _MODBUSCoils(2), 
  8301 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  8302 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  8303 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  8304 ;;  u16coil         2   26[COMRAM] unsigned short 
  8305 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  8306 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  8307 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  8308 ;;  bTemp           1   29[COMRAM] unsigned char 
  8309 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      unsigned char 
  8312 ;; Registers used:
  8313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : E/1
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8319 ;;      Params:         0       0       0       0       0       0       0
  8320 ;;      Locals:        14       0       0       0       0       0       0
  8321 ;;      Temps:          5       0       0       0       0       0       0
  8322 ;;      Totals:        19       0       0       0       0       0       0
  8323 ;;Total ram usage:       19 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    4
  8326 ;; This function calls:
  8327 ;;		_ModbusSendTxBuffer
  8328 ;; This function is called by:
  8329 ;;		_ModbusPoll
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text40
  8334  00191C                     __ptext40:
  8335                           	opt stack 0
  8336  00191C                     _ModbusProcess_FC15:
  8337                           	opt stack 25
  8338                           
  8339                           ;incstack = 0
  8340  00191C  FFFF               	dw	65535
  8341                           
  8342                           ;ModbusProcess_FC15@regs stored from wreg
  8343  00191E  6E24               	movwf	ModbusProcess_FC15@regs,c
  8344                           
  8345                           ;ModbusRtu.c: 1090: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8346                           ;ModbusRtu.c: 1091: uint8_t u8CopyBufferSize;
  8347                           ;ModbusRtu.c: 1092: uint16_t u16currentCoil, u16coil;
  8348                           ;ModbusRtu.c: 1093: boolean bTemp;
  8349                           ;ModbusRtu.c: 1096: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8350  001920  0101               	movlb	1	; () banked
  8351  001922  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8352  001924  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8353  001926  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8354  001928  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8355  00192A  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8356                           
  8357                           ; BSR set to: 1
  8358                           ;ModbusRtu.c: 1097: _lastAddress = u16StartCoil;
  8359  00192E  C020  F0BC         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8360  001932  C021  F0BD         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8361                           
  8362                           ;ModbusRtu.c: 1098: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8363  001936  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8364  001938  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8365  00193A  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8366  00193C  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  8367  00193E  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8368                           
  8369                           ; BSR set to: 1
  8370                           ;ModbusRtu.c: 1099: _lastCount = u16Coilno;
  8371  001942  C022  F0BE         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8372  001946  C023  F0BF         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8373                           
  8374                           ; BSR set to: 1
  8375                           ;ModbusRtu.c: 1102: u8bitsno = 0;
  8376  00194A  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8377                           
  8378                           ;ModbusRtu.c: 1103: u8frameByte = 7;
  8379  00194C  0E07               	movlw	7
  8380  00194E  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  8381                           
  8382                           ; BSR set to: 1
  8383                           ;ModbusRtu.c: 1104: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  8384  001950  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8385  001952  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8386  001954  D058               	goto	l6494
  8387  001956                     l6474:
  8388                           
  8389                           ;ModbusRtu.c: 1105: {
  8390                           ;ModbusRtu.c: 1107: u16coil = u16StartCoil + u16currentCoil;
  8391  001956  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8392  001958  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8393  00195A  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  8394  00195C  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8395  00195E  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8396  001960  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  8397                           
  8398                           ;ModbusRtu.c: 1109: u8currentBit = (uint8_t) u16coil;
  8399  001962  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8400                           
  8401                           ;ModbusRtu.c: 1111: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8402  001966  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8403  00196A  0E00               	movlw	low __au8Buffer
  8404  00196C  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8405  00196E  6ED9               	movwf	fsr2l,c
  8406  001970  6ADA               	clrf	fsr2h,c
  8407  001972  0E01               	movlw	high __au8Buffer
  8408  001974  22DA               	addwfc	fsr2h,f,c
  8409  001976  50DF               	movf	indf2,w,c
  8410  001978  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8411  00197A  2A16               	incf	??_ModbusProcess_FC15,f,c
  8412  00197C  D003               	goto	u5454
  8413  00197E                     u5455:
  8414  00197E  FFFF               	dw	65535	; assembler added errata NOP
  8415  001980  90D8               	bcf	status,0,c
  8416  001982  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  8417  001984                     u5454:
  8418  001984  FFFF               	dw	65535	; assembler added errata NOP
  8419  001986  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8420  001988  D7FA               	goto	u5455
  8421  00198A  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8422  00198C  0B01               	andlw	1
  8423  00198E  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  8424                           
  8425                           ;ModbusRtu.c: 1115: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  8426  001990  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  8427  001992  E016               	bz	l6484
  8428  001994  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8429  001998  0E01               	movlw	1
  8430  00199A  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8431  00199C  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8432  00199E  2A16               	incf	??_ModbusProcess_FC15,f,c
  8433  0019A0  D004               	goto	u5474
  8434  0019A2                     u5475:
  8435  0019A2  FFFF               	dw	65535	; assembler added errata NOP
  8436  0019A4  90D8               	bcf	status,0,c
  8437  0019A6  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8438  0019A8  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8439  0019AA                     u5474:
  8440  0019AA  FFFF               	dw	65535	; assembler added errata NOP
  8441  0019AC  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8442  0019AE  D7F9               	goto	u5475
  8443  0019B0  5024               	movf	ModbusProcess_FC15@regs,w,c
  8444  0019B2  6ED9               	movwf	fsr2l,c
  8445  0019B4  6ADA               	clrf	fsr2h,c
  8446  0019B6  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8447  0019B8  12DE               	iorwf	postinc2,f,c
  8448  0019BA  5018               	movf	??_ModbusProcess_FC15+2,w,c
  8449  0019BC  12DD               	iorwf	postdec2,f,c
  8450  0019BE  D019               	goto	l6486
  8451  0019C0                     l6484:
  8452  0019C0  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8453  0019C4  0E01               	movlw	1
  8454  0019C6  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8455  0019C8  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8456  0019CA  2A16               	incf	??_ModbusProcess_FC15,f,c
  8457  0019CC  D004               	goto	u5484
  8458  0019CE                     u5485:
  8459  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  8460  0019D0  90D8               	bcf	status,0,c
  8461  0019D2  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8462  0019D4  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8463  0019D6                     u5484:
  8464  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  8465  0019D8  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8466  0019DA  D7F9               	goto	u5485
  8467  0019DC  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  8468  0019DE  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  8469  0019E0  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  8470  0019E2  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  8471  0019E4  5024               	movf	ModbusProcess_FC15@regs,w,c
  8472  0019E6  6ED9               	movwf	fsr2l,c
  8473  0019E8  6ADA               	clrf	fsr2h,c
  8474  0019EA  5019               	movf	??_ModbusProcess_FC15+3,w,c
  8475  0019EC  16DE               	andwf	postinc2,f,c
  8476  0019EE  501A               	movf	??_ModbusProcess_FC15+4,w,c
  8477  0019F0  16DD               	andwf	postdec2,f,c
  8478  0019F2                     l6486:
  8479  0019F2  FFFF               	dw	65535	; assembler added errata NOP
  8480                           
  8481                           ;ModbusRtu.c: 1120: u8bitsno++;
  8482  0019F4  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  8483                           
  8484                           ;ModbusRtu.c: 1122: if (u8bitsno > 7)
  8485  0019F6  0E07               	movlw	7
  8486  0019F8  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  8487  0019FA  D002               	goto	l879
  8488                           
  8489                           ;ModbusRtu.c: 1123: {
  8490                           ;ModbusRtu.c: 1124: u8bitsno = 0;
  8491  0019FC  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8492                           
  8493                           ;ModbusRtu.c: 1125: u8frameByte++;
  8494  0019FE  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  8495  001A00                     l879:
  8496  001A00  FFFF               	dw	65535	; assembler added errata NOP
  8497  001A02  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  8498  001A04  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  8499  001A06                     l6494:
  8500  001A06  FFFF               	dw	65535	; assembler added errata NOP
  8501  001A08  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  8502  001A0A  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  8503  001A0C  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  8504  001A0E  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  8505  001A10  E3A2               	bnc	l6474
  8506                           
  8507                           ;ModbusRtu.c: 1126: }
  8508                           ;ModbusRtu.c: 1127: }
  8509                           ;ModbusRtu.c: 1131: _u8BufferSize = 6;
  8510  001A12  0E06               	movlw	6
  8511  001A14  6E70               	movwf	__u8BufferSize,c
  8512                           
  8513                           ;ModbusRtu.c: 1132: u8CopyBufferSize = _u8BufferSize + 2;
  8514  001A16  5070               	movf	__u8BufferSize,w,c
  8515  001A18  0F02               	addlw	2
  8516  001A1A  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  8517                           
  8518                           ;ModbusRtu.c: 1133: ModbusSendTxBuffer();
  8519  001A1C  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8520                           
  8521                           ;ModbusRtu.c: 1134: return u8CopyBufferSize;
  8522  001A20  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  8523  001A22  0012               	return		;funcret
  8524  001A24  FFFF               	dw	65535	; errata NOP
  8525  001A26                     __end_of_ModbusProcess_FC15:
  8526                           	opt stack 0
  8527                           tblptru	equ	0xFF8
  8528                           tblptrh	equ	0xFF7
  8529                           tblptrl	equ	0xFF6
  8530                           tablat	equ	0xFF5
  8531                           prodh	equ	0xFF4
  8532                           prodl	equ	0xFF3
  8533                           intcon	equ	0xFF2
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           indf1	equ	0xFE7
  8537                           postinc1	equ	0xFE6
  8538                           postdec1	equ	0xFE5
  8539                           fsr1h	equ	0xFE2
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function _ModbusProcess_FC102 *****************
  8549 ;; Defined at:
  8550 ;;		line 1389 in file "ModbusRtu.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      unsigned char 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : E/1
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8564 ;;      Params:         0       0       0       0       0       0       0
  8565 ;;      Locals:         1       0       0       0       0       0       0
  8566 ;;      Temps:          0       0       0       0       0       0       0
  8567 ;;      Totals:         1       0       0       0       0       0       0
  8568 ;;Total ram usage:        1 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    4
  8571 ;; This function calls:
  8572 ;;		_ModbusSendTxBuffer
  8573 ;; This function is called by:
  8574 ;;		_ModbusPoll
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text41
  8579  002CFA                     __ptext41:
  8580                           	opt stack 0
  8581  002CFA                     _ModbusProcess_FC102:
  8582                           	opt stack 25
  8583                           
  8584                           ;incstack = 0
  8585  002CFA  FFFF               	dw	65535
  8586                           
  8587                           ;ModbusRtu.c: 1391: _au8Buffer[FUNC + 1] = _deviceStatus;
  8588  002CFC  C0CD  F102         	movff	__deviceStatus,__au8Buffer+2
  8589                           
  8590                           ;ModbusRtu.c: 1392: _u8BufferSize = 3;
  8591  002D00  0E03               	movlw	3
  8592  002D02  6E70               	movwf	__u8BufferSize,c
  8593                           
  8594                           ;ModbusRtu.c: 1393: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  8595  002D04  5070               	movf	__u8BufferSize,w,c
  8596  002D06  0F02               	addlw	2
  8597  002D08  6E16               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
  8598                           
  8599                           ;ModbusRtu.c: 1394: ModbusSendTxBuffer();
  8600  002D0A  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8601                           
  8602                           ;ModbusRtu.c: 1396: return u8CopyBufferSize;
  8603  002D0E  5016               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
  8604  002D10  0012               	return		;funcret
  8605  002D12  FFFF               	dw	65535	; errata NOP
  8606  002D14                     __end_of_ModbusProcess_FC102:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           intcon	equ	0xFF2
  8615                           postinc0	equ	0xFEE
  8616                           wreg	equ	0xFE8
  8617                           indf1	equ	0xFE7
  8618                           postinc1	equ	0xFE6
  8619                           postdec1	equ	0xFE5
  8620                           fsr1h	equ	0xFE2
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _ModbusProcess_FC101 *****************
  8630 ;; Defined at:
  8631 ;;		line 1371 in file "ModbusRtu.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  1    wreg      unsigned char 
  8638 ;; Registers used:
  8639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : E/1
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8645 ;;      Params:         0       0       0       0       0       0       0
  8646 ;;      Locals:         1       0       0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0
  8648 ;;      Totals:         1       0       0       0       0       0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    4
  8652 ;; This function calls:
  8653 ;;		_ModbusSendTxBuffer
  8654 ;; This function is called by:
  8655 ;;		_ModbusPoll
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	text42
  8660  002B86                     __ptext42:
  8661                           	opt stack 0
  8662  002B86                     _ModbusProcess_FC101:
  8663                           	opt stack 25
  8664                           
  8665                           ;incstack = 0
  8666  002B86  FFFF               	dw	65535
  8667                           
  8668                           ;ModbusRtu.c: 1373: _u8BufferSize = 10;
  8669  002B88  0E0A               	movlw	10
  8670  002B8A  6E70               	movwf	__u8BufferSize,c
  8671                           
  8672                           ;ModbusRtu.c: 1374: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
  8673  002B8C  C102  F0E8         	movff	__au8Buffer+2,_ModbusUserCommandId
  8674                           
  8675                           ;ModbusRtu.c: 1375: ModbusUserCommandData = _au8Buffer[COM_DATA];
  8676  002B90  C103  F0E7         	movff	__au8Buffer+3,_ModbusUserCommandData
  8677                           
  8678                           ;ModbusRtu.c: 1376: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
  8679  002B94  C104  F0E1         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
  8680                           
  8681                           ;ModbusRtu.c: 1377: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
  8682  002B98  C105  F0E2         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
  8683                           
  8684                           ;ModbusRtu.c: 1378: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
  8685  002B9C  C106  F0E3         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
  8686                           
  8687                           ;ModbusRtu.c: 1379: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
  8688  002BA0  C107  F0E4         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
  8689                           
  8690                           ;ModbusRtu.c: 1380: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
  8691  002BA4  C108  F0E5         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
  8692                           
  8693                           ;ModbusRtu.c: 1381: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
  8694  002BA8  C109  F0E6         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
  8695                           
  8696                           ;ModbusRtu.c: 1383: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  8697  002BAC  5070               	movf	__u8BufferSize,w,c
  8698  002BAE  0F02               	addlw	2
  8699  002BB0  6E16               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
  8700                           
  8701                           ;ModbusRtu.c: 1384: ModbusSendTxBuffer();
  8702  002BB2  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8703                           
  8704                           ;ModbusRtu.c: 1386: return u8CopyBufferSize;
  8705  002BB6  5016               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
  8706  002BB8  0012               	return		;funcret
  8707  002BBA  FFFF               	dw	65535	; errata NOP
  8708  002BBC                     __end_of_ModbusProcess_FC101:
  8709                           	opt stack 0
  8710                           tblptru	equ	0xFF8
  8711                           tblptrh	equ	0xFF7
  8712                           tblptrl	equ	0xFF6
  8713                           tablat	equ	0xFF5
  8714                           prodh	equ	0xFF4
  8715                           prodl	equ	0xFF3
  8716                           intcon	equ	0xFF2
  8717                           postinc0	equ	0xFEE
  8718                           wreg	equ	0xFE8
  8719                           indf1	equ	0xFE7
  8720                           postinc1	equ	0xFE6
  8721                           postdec1	equ	0xFE5
  8722                           fsr1h	equ	0xFE2
  8723                           fsr1l	equ	0xFE1
  8724                           indf2	equ	0xFDF
  8725                           postinc2	equ	0xFDE
  8726                           postdec2	equ	0xFDD
  8727                           fsr2h	equ	0xFDA
  8728                           fsr2l	equ	0xFD9
  8729                           status	equ	0xFD8
  8730                           
  8731 ;; *************** function _ModbusProcess_FC100 *****************
  8732 ;; Defined at:
  8733 ;;		line 1334 in file "ModbusRtu.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;		None
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;  newTime        18   73[COMRAM] struct tm
  8738 ;;  newRawTime      4   68[COMRAM] long 
  8739 ;;  u8CopyBuffer    1   72[COMRAM] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      unsigned char 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : E/1
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8749 ;;      Params:         0       0       0       0       0       0       0
  8750 ;;      Locals:        23       0       0       0       0       0       0
  8751 ;;      Temps:          0       0       0       0       0       0       0
  8752 ;;      Totals:        23       0       0       0       0       0       0
  8753 ;;Total ram usage:       23 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    6
  8756 ;; This function calls:
  8757 ;;		_ModbusSendTxBuffer
  8758 ;;		_ModbusSetExceptionStatusBit
  8759 ;;		_SetHourMin
  8760 ;;		_SetTime
  8761 ;;		_mktime
  8762 ;; This function is called by:
  8763 ;;		_ModbusPoll
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text43
  8768  002142                     __ptext43:
  8769                           	opt stack 0
  8770  002142                     _ModbusProcess_FC100:
  8771                           	opt stack 23
  8772                           
  8773                           ;incstack = 0
  8774  002142  FFFF               	dw	65535
  8775                           
  8776                           ;ModbusRtu.c: 1336: _u8BufferSize = 10;
  8777  002144  0E0A               	movlw	10
  8778  002146  6E70               	movwf	__u8BufferSize,c
  8779                           
  8780                           ;ModbusRtu.c: 1337: _lastCommand = _au8Buffer[COM_COM_ID];
  8781  002148  C102  F0D2         	movff	__au8Buffer+2,__lastCommand
  8782                           
  8783                           ;ModbusRtu.c: 1338: switch(_lastCommand)
  8784  00214C  D03C               	goto	l6704
  8785  00214E                     l932:
  8786                           
  8787                           ; BSR set to: 0
  8788  00214E  00FF               	reset		; ;# 
  8789                           
  8790                           ;ModbusRtu.c: 1344: break;
  8791  002150  D043               	goto	l6706
  8792  002152                     l6680:
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;ModbusRtu.c: 1348: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
  8796  002152  0E04               	movlw	low (__au8Buffer+4)
  8797  002154  6E0B               	movwf	SetHourMin@newHour,c
  8798  002156  0E01               	movlw	high (__au8Buffer+4)
  8799  002158  6E0C               	movwf	SetHourMin@newHour+1,c
  8800  00215A  0E05               	movlw	low (__au8Buffer+5)
  8801  00215C  6E0D               	movwf	SetHourMin@newMin,c
  8802  00215E  0E01               	movlw	high (__au8Buffer+5)
  8803  002160  6E0E               	movwf	SetHourMin@newMin+1,c
  8804  002162  0E07               	movlw	low (__au8Buffer+7)
  8805  002164  6E0F               	movwf	SetHourMin@sec,c
  8806  002166  0E01               	movlw	high (__au8Buffer+7)
  8807  002168  6E10               	movwf	SetHourMin@sec+1,c
  8808  00216A  EC05  F00C         	call	_SetHourMin	;wreg free
  8809                           
  8810                           ;ModbusRtu.c: 1351: struct tm newTime;
  8811                           ;ModbusRtu.c: 1352: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
  8812  00216E  0E64               	movlw	100
  8813  002170  0101               	movlb	1	; () banked
  8814  002172  2509               	addwf	(__au8Buffer+9)& (0+255),w,b
  8815  002174  6E54               	movwf	ModbusProcess_FC100@newTime+10,c
  8816  002176  6A55               	clrf	ModbusProcess_FC100@newTime+11,c
  8817  002178  0E00               	movlw	0
  8818  00217A  2255               	addwfc	ModbusProcess_FC100@newTime+11,f,c
  8819                           
  8820                           ; BSR set to: 1
  8821                           ;ModbusRtu.c: 1353: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
  8822  00217C  C108  F052         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
  8823  002180  6A53               	clrf	ModbusProcess_FC100@newTime+9,c
  8824                           
  8825                           ; BSR set to: 1
  8826                           ;ModbusRtu.c: 1354: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
  8827  002182  C106  F050         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
  8828  002186  6A51               	clrf	ModbusProcess_FC100@newTime+7,c
  8829                           
  8830                           ; BSR set to: 1
  8831                           ;ModbusRtu.c: 1355: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
  8832  002188  C104  F04E         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
  8833  00218C  6A4F               	clrf	ModbusProcess_FC100@newTime+5,c
  8834                           
  8835                           ; BSR set to: 1
  8836                           ;ModbusRtu.c: 1356: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
  8837  00218E  C105  F04C         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
  8838  002192  6A4D               	clrf	ModbusProcess_FC100@newTime+3,c
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;ModbusRtu.c: 1357: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
  8842  002194  C107  F04A         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
  8843  002198  6A4B               	clrf	ModbusProcess_FC100@newTime+1,c
  8844                           
  8845                           ; BSR set to: 1
  8846                           ;ModbusRtu.c: 1358: time_t newRawTime = mktime(&newTime);
  8847  00219A  0E4A               	movlw	ModbusProcess_FC100@newTime& (0+255)
  8848  00219C  EC2C  F003         	call	_mktime
  8849  0021A0  C02E  F045         	movff	?_mktime,ModbusProcess_FC100@newRawTime
  8850  0021A4  C02F  F046         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
  8851  0021A8  C030  F047         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
  8852  0021AC  C031  F048         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
  8853                           
  8854                           ;ModbusRtu.c: 1359: SetTime(&newRawTime);
  8855  0021B0  0E45               	movlw	ModbusProcess_FC100@newRawTime& (0+255)
  8856  0021B2  EC6E  F016         	call	_SetTime
  8857                           
  8858                           ;ModbusRtu.c: 1361: ((_deviceStatus) |= ((unsigned short)1 << (0x00)));
  8859  0021B6  0100               	movlb	0	; () banked
  8860  0021B8  81CD               	bsf	__deviceStatus& (0+255),0,b
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;ModbusRtu.c: 1362: ModbusSetExceptionStatusBit(0, 1);
  8864  0021BA  0E01               	movlw	1
  8865  0021BC  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  8866  0021BE  0E00               	movlw	0
  8867  0021C0  EC32  F014         	call	_ModbusSetExceptionStatusBit
  8868                           
  8869                           ;ModbusRtu.c: 1363: break;
  8870  0021C4  D009               	goto	l6706
  8871  0021C6                     l6704:
  8872  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  8873  0021C8  0100               	movlb	0	; () banked
  8874  0021CA  51D2               	movf	__lastCommand& (0+255),w,b
  8875                           
  8876                           ; Switch size 1, requested type "speed"
  8877                           ; Number of cases is 3, Range of values is 1 to 127
  8878                           ; switch strategies available:
  8879                           ; Name         Instructions Cycles
  8880                           ; simple_byte           10     6 (average)
  8881                           ;	Chosen strategy is simple_byte
  8882  0021CC  0A01               	xorlw	1	; case 1
  8883  0021CE  E004               	bz	l6706
  8884  0021D0  0A11               	xorlw	17	; case 16
  8885  0021D2  E0BF               	bz	l6680
  8886  0021D4  0A6F               	xorlw	111	; case 127
  8887  0021D6  E0BB               	bz	l932
  8888  0021D8                     l6706:
  8889  0021D8  FFFF               	dw	65535	; assembler added errata NOP
  8890                           
  8891                           ;ModbusRtu.c: 1365: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  8892  0021DA  5070               	movf	__u8BufferSize,w,c
  8893  0021DC  0F02               	addlw	2
  8894  0021DE  6E49               	movwf	ModbusProcess_FC100@u8CopyBufferSize,c
  8895                           
  8896                           ;ModbusRtu.c: 1366: ModbusSendTxBuffer();
  8897  0021E0  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
  8898                           
  8899                           ;ModbusRtu.c: 1368: return u8CopyBufferSize;
  8900  0021E4  5049               	movf	ModbusProcess_FC100@u8CopyBufferSize,w,c
  8901  0021E6  0012               	return		;funcret
  8902  0021E8  FFFF               	dw	65535	; errata NOP
  8903  0021EA                     __end_of_ModbusProcess_FC100:
  8904                           	opt stack 0
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           postinc0	equ	0xFEE
  8913                           wreg	equ	0xFE8
  8914                           indf1	equ	0xFE7
  8915                           postinc1	equ	0xFE6
  8916                           postdec1	equ	0xFE5
  8917                           fsr1h	equ	0xFE2
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           fsr2h	equ	0xFDA
  8923                           fsr2l	equ	0xFD9
  8924                           status	equ	0xFD8
  8925                           
  8926 ;; *************** function _mktime *****************
  8927 ;; Defined at:
  8928 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  timeptr         1    wreg     PTR struct tm
  8931 ;;		 -> ModbusProcess_FC100@newTime(18), 
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  timeptr         1   67[COMRAM] PTR struct tm
  8934 ;;		 -> ModbusProcess_FC100@newTime(18), 
  8935 ;;  tt              4   63[COMRAM] long 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  4   45[COMRAM] long 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8940 ;; Tracked objects:
  8941 ;;		On entry : F/1
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8945 ;;      Params:         4       0       0       0       0       0       0
  8946 ;;      Locals:         5       0       0       0       0       0       0
  8947 ;;      Temps:         14       0       0       0       0       0       0
  8948 ;;      Totals:        23       0       0       0       0       0       0
  8949 ;;Total ram usage:       23 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:    5
  8952 ;; This function calls:
  8953 ;;		_ymd_to_scalar
  8954 ;; This function is called by:
  8955 ;;		_ModbusProcess_FC100
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           	psect	text44
  8960  000658                     __ptext44:
  8961                           	opt stack 0
  8962  000658                     _mktime:
  8963                           	opt stack 23
  8964                           
  8965                           ;incstack = 0
  8966  000658  FFFF               	dw	65535
  8967                           
  8968                           ;mktime@timeptr stored from wreg
  8969  00065A  6E44               	movwf	mktime@timeptr,c
  8970  00065C  5044               	movf	mktime@timeptr,w,c
  8971  00065E  6ED9               	movwf	fsr2l,c
  8972  000660  6ADA               	clrf	fsr2h,c
  8973  000662  0E0A               	movlw	10
  8974  000664  26D9               	addwf	fsr2l,f,c
  8975  000666  0E01               	movlw	1
  8976  000668  BEDB               	btfsc	plusw2,7,c
  8977  00066A  D012               	goto	l1385
  8978  00066C  50DB               	movf	plusw2,w,c
  8979  00066E  E103               	bnz	u4910
  8980  000670  0E46               	movlw	70
  8981  000672  5CDE               	subwf	postinc2,w,c
  8982  000674  E30D               	bnc	l1385
  8983  000676                     u4910:
  8984  000676  5044               	movf	mktime@timeptr,w,c
  8985  000678  6ED9               	movwf	fsr2l,c
  8986  00067A  6ADA               	clrf	fsr2h,c
  8987  00067C  0E0A               	movlw	10
  8988  00067E  26D9               	addwf	fsr2l,f,c
  8989  000680  0E01               	movlw	1
  8990  000682  BEDB               	btfsc	plusw2,7,c
  8991  000684  D00B               	goto	l5986
  8992  000686  50DB               	movf	plusw2,w,c
  8993  000688  E103               	bnz	u4920
  8994  00068A  0E8B               	movlw	139
  8995  00068C  5CDE               	subwf	postinc2,w,c
  8996  00068E  E306               	bnc	l5986
  8997  000690                     u4920:
  8998  000690                     l1385:
  8999  000690  FFFF               	dw	65535	; assembler added errata NOP
  9000  000692  6840               	setf	mktime@tt,c
  9001  000694  6841               	setf	mktime@tt+1,c
  9002  000696  6842               	setf	mktime@tt+2,c
  9003  000698  6843               	setf	mktime@tt+3,c
  9004  00069A  D15C               	goto	l5996
  9005  00069C                     l5986:
  9006  00069C  FFFF               	dw	65535	; assembler added errata NOP
  9007  00069E  5044               	movf	mktime@timeptr,w,c
  9008  0006A0  6ED9               	movwf	fsr2l,c
  9009  0006A2  6ADA               	clrf	fsr2h,c
  9010  0006A4  0E0A               	movlw	10
  9011  0006A6  26D9               	addwf	fsr2l,f,c
  9012  0006A8  CFDE F032          	movff	postinc2,??_mktime
  9013  0006AC  CFDD F033          	movff	postdec2,??_mktime+1
  9014  0006B0  0E6C               	movlw	108
  9015  0006B2  2432               	addwf	??_mktime,w,c
  9016  0006B4  6E1E               	movwf	ymd_to_scalar@yr,c
  9017  0006B6  0E07               	movlw	7
  9018  0006B8  2033               	addwfc	??_mktime+1,w,c
  9019  0006BA  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9020  0006BC  5044               	movf	mktime@timeptr,w,c
  9021  0006BE  6ED9               	movwf	fsr2l,c
  9022  0006C0  6ADA               	clrf	fsr2h,c
  9023  0006C2  0E08               	movlw	8
  9024  0006C4  26D9               	addwf	fsr2l,f,c
  9025  0006C6  CFDE F034          	movff	postinc2,??_mktime+2
  9026  0006CA  CFDD F035          	movff	postdec2,??_mktime+3
  9027  0006CE  2834               	incf	??_mktime+2,w,c
  9028  0006D0  6E20               	movwf	ymd_to_scalar@mo,c
  9029  0006D2  0E00               	movlw	0
  9030  0006D4  2035               	addwfc	??_mktime+3,w,c
  9031  0006D6  6E21               	movwf	ymd_to_scalar@mo+1,c
  9032  0006D8  5044               	movf	mktime@timeptr,w,c
  9033  0006DA  6ED9               	movwf	fsr2l,c
  9034  0006DC  6ADA               	clrf	fsr2h,c
  9035  0006DE  0E06               	movlw	6
  9036  0006E0  26D9               	addwf	fsr2l,f,c
  9037  0006E2  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  9038  0006E6  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  9039  0006EA  ECF5  F010         	call	_ymd_to_scalar	;wreg free
  9040  0006EE  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  9041  0006F2  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  9042  0006F6  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  9043  0006FA  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  9044  0006FE  0E07               	movlw	7
  9045  000700  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9046  000702  0EB2               	movlw	178
  9047  000704  6E1E               	movwf	ymd_to_scalar@yr,c
  9048  000706  6A21               	clrf	ymd_to_scalar@mo+1,c
  9049  000708  0E01               	movlw	1
  9050  00070A  6E20               	movwf	ymd_to_scalar@mo,c
  9051  00070C  6A23               	clrf	ymd_to_scalar@day+1,c
  9052  00070E  6E22               	movwf	ymd_to_scalar@day,c
  9053  000710  ECF5  F010         	call	_ymd_to_scalar	;wreg free
  9054  000714  501E               	movf	?_ymd_to_scalar,w,c
  9055  000716  5E40               	subwf	mktime@tt,f,c
  9056  000718  501F               	movf	?_ymd_to_scalar+1,w,c
  9057  00071A  5A41               	subwfb	mktime@tt+1,f,c
  9058  00071C  5020               	movf	?_ymd_to_scalar+2,w,c
  9059  00071E  5A42               	subwfb	mktime@tt+2,f,c
  9060  000720  5021               	movf	?_ymd_to_scalar+3,w,c
  9061  000722  5A43               	subwfb	mktime@tt+3,f,c
  9062  000724  5044               	movf	mktime@timeptr,w,c
  9063  000726  6ED9               	movwf	fsr2l,c
  9064  000728  6ADA               	clrf	fsr2h,c
  9065  00072A  0E04               	movlw	4
  9066  00072C  26D9               	addwf	fsr2l,f,c
  9067  00072E  CFDE F032          	movff	postinc2,??_mktime
  9068  000732  CFDD F033          	movff	postdec2,??_mktime+1
  9069  000736  C032  F034         	movff	??_mktime,??_mktime+2
  9070  00073A  C033  F035         	movff	??_mktime+1,??_mktime+3
  9071  00073E  0E00               	movlw	0
  9072  000740  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9073  000742  0EFF               	movlw	255
  9074  000744  6E36               	movwf	(??_mktime+4)& (0+255),c
  9075  000746  6E37               	movwf	(??_mktime+5)& (0+255),c
  9076  000748  C040  F038         	movff	mktime@tt,??_mktime+6
  9077  00074C  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9078  000750  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9079  000754  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9080  000758  0E18               	movlw	24
  9081  00075A  0238               	mulwf	(??_mktime+6)& (0+255),c
  9082  00075C  CFF3 F03C          	movff	prodl,??_mktime+10
  9083  000760  CFF4 F03D          	movff	prodh,??_mktime+11
  9084  000764  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9085  000766  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9086  000768  0239               	mulwf	(??_mktime+7)& (0+255),c
  9087  00076A  50F3               	movf	prodl,w,c
  9088  00076C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9089  00076E  50F4               	movf	prodh,w,c
  9090  000770  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9091  000772  0E00               	movlw	0
  9092  000774  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9093  000776  0238               	mulwf	(??_mktime+6)& (0+255),c
  9094  000778  50F3               	movf	prodl,w,c
  9095  00077A  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9096  00077C  50F4               	movf	prodh,w,c
  9097  00077E  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9098  000780  0E00               	movlw	0
  9099  000782  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9100  000784  0E18               	movlw	24
  9101  000786  023A               	mulwf	(??_mktime+8)& (0+255),c
  9102  000788  50F3               	movf	prodl,w,c
  9103  00078A  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9104  00078C  50F4               	movf	prodh,w,c
  9105  00078E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9106  000790  0E00               	movlw	0
  9107  000792  0239               	mulwf	(??_mktime+7)& (0+255),c
  9108  000794  50F3               	movf	prodl,w,c
  9109  000796  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9110  000798  50F4               	movf	prodh,w,c
  9111  00079A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9112  00079C  0E00               	movlw	0
  9113  00079E  0238               	mulwf	(??_mktime+6)& (0+255),c
  9114  0007A0  50F3               	movf	prodl,w,c
  9115  0007A2  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9116  0007A4  50F4               	movf	prodh,w,c
  9117  0007A6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9118  0007A8  0E18               	movlw	24
  9119  0007AA  023B               	mulwf	(??_mktime+9)& (0+255),c
  9120  0007AC  50F3               	movf	prodl,w,c
  9121  0007AE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9122  0007B0  0E00               	movlw	0
  9123  0007B2  023A               	mulwf	(??_mktime+8)& (0+255),c
  9124  0007B4  50F3               	movf	prodl,w,c
  9125  0007B6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9126  0007B8  0E00               	movlw	0
  9127  0007BA  0239               	mulwf	(??_mktime+7)& (0+255),c
  9128  0007BC  50F3               	movf	prodl,w,c
  9129  0007BE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9130  0007C0  0E00               	movlw	0
  9131  0007C2  0238               	mulwf	(??_mktime+6)& (0+255),c
  9132  0007C4  50F3               	movf	prodl,w,c
  9133  0007C6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9134  0007C8  5034               	movf	??_mktime+2,w,c
  9135  0007CA  243C               	addwf	??_mktime+10,w,c
  9136  0007CC  6E40               	movwf	mktime@tt,c
  9137  0007CE  5035               	movf	??_mktime+3,w,c
  9138  0007D0  203D               	addwfc	??_mktime+11,w,c
  9139  0007D2  6E41               	movwf	mktime@tt+1,c
  9140  0007D4  5036               	movf	??_mktime+4,w,c
  9141  0007D6  203E               	addwfc	??_mktime+12,w,c
  9142  0007D8  6E42               	movwf	mktime@tt+2,c
  9143  0007DA  5037               	movf	??_mktime+5,w,c
  9144  0007DC  203F               	addwfc	??_mktime+13,w,c
  9145  0007DE  6E43               	movwf	mktime@tt+3,c
  9146  0007E0  5044               	movf	mktime@timeptr,w,c
  9147  0007E2  6ED9               	movwf	fsr2l,c
  9148  0007E4  6ADA               	clrf	fsr2h,c
  9149  0007E6  0E02               	movlw	2
  9150  0007E8  26D9               	addwf	fsr2l,f,c
  9151  0007EA  CFDE F032          	movff	postinc2,??_mktime
  9152  0007EE  CFDD F033          	movff	postdec2,??_mktime+1
  9153  0007F2  C032  F034         	movff	??_mktime,??_mktime+2
  9154  0007F6  C033  F035         	movff	??_mktime+1,??_mktime+3
  9155  0007FA  0E00               	movlw	0
  9156  0007FC  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9157  0007FE  0EFF               	movlw	255
  9158  000800  6E36               	movwf	(??_mktime+4)& (0+255),c
  9159  000802  6E37               	movwf	(??_mktime+5)& (0+255),c
  9160  000804  C040  F038         	movff	mktime@tt,??_mktime+6
  9161  000808  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9162  00080C  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9163  000810  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9164  000814  0E3C               	movlw	60
  9165  000816  0238               	mulwf	(??_mktime+6)& (0+255),c
  9166  000818  CFF3 F03C          	movff	prodl,??_mktime+10
  9167  00081C  CFF4 F03D          	movff	prodh,??_mktime+11
  9168  000820  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9169  000822  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9170  000824  0239               	mulwf	(??_mktime+7)& (0+255),c
  9171  000826  50F3               	movf	prodl,w,c
  9172  000828  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9173  00082A  50F4               	movf	prodh,w,c
  9174  00082C  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9175  00082E  0E00               	movlw	0
  9176  000830  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9177  000832  0238               	mulwf	(??_mktime+6)& (0+255),c
  9178  000834  50F3               	movf	prodl,w,c
  9179  000836  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9180  000838  50F4               	movf	prodh,w,c
  9181  00083A  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9182  00083C  0E00               	movlw	0
  9183  00083E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9184  000840  0E3C               	movlw	60
  9185  000842  023A               	mulwf	(??_mktime+8)& (0+255),c
  9186  000844  50F3               	movf	prodl,w,c
  9187  000846  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9188  000848  50F4               	movf	prodh,w,c
  9189  00084A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9190  00084C  0E00               	movlw	0
  9191  00084E  0239               	mulwf	(??_mktime+7)& (0+255),c
  9192  000850  50F3               	movf	prodl,w,c
  9193  000852  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9194  000854  50F4               	movf	prodh,w,c
  9195  000856  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9196  000858  0E00               	movlw	0
  9197  00085A  0238               	mulwf	(??_mktime+6)& (0+255),c
  9198  00085C  50F3               	movf	prodl,w,c
  9199  00085E  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9200  000860  50F4               	movf	prodh,w,c
  9201  000862  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9202  000864  0E3C               	movlw	60
  9203  000866  023B               	mulwf	(??_mktime+9)& (0+255),c
  9204  000868  50F3               	movf	prodl,w,c
  9205  00086A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9206  00086C  0E00               	movlw	0
  9207  00086E  023A               	mulwf	(??_mktime+8)& (0+255),c
  9208  000870  50F3               	movf	prodl,w,c
  9209  000872  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9210  000874  0E00               	movlw	0
  9211  000876  0239               	mulwf	(??_mktime+7)& (0+255),c
  9212  000878  50F3               	movf	prodl,w,c
  9213  00087A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9214  00087C  0E00               	movlw	0
  9215  00087E  0238               	mulwf	(??_mktime+6)& (0+255),c
  9216  000880  50F3               	movf	prodl,w,c
  9217  000882  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9218  000884  5034               	movf	??_mktime+2,w,c
  9219  000886  243C               	addwf	??_mktime+10,w,c
  9220  000888  6E40               	movwf	mktime@tt,c
  9221  00088A  5035               	movf	??_mktime+3,w,c
  9222  00088C  203D               	addwfc	??_mktime+11,w,c
  9223  00088E  6E41               	movwf	mktime@tt+1,c
  9224  000890  5036               	movf	??_mktime+4,w,c
  9225  000892  203E               	addwfc	??_mktime+12,w,c
  9226  000894  6E42               	movwf	mktime@tt+2,c
  9227  000896  5037               	movf	??_mktime+5,w,c
  9228  000898  203F               	addwfc	??_mktime+13,w,c
  9229  00089A  6E43               	movwf	mktime@tt+3,c
  9230  00089C  5044               	movf	mktime@timeptr,w,c
  9231  00089E  6ED9               	movwf	fsr2l,c
  9232  0008A0  6ADA               	clrf	fsr2h,c
  9233  0008A2  CFDE F032          	movff	postinc2,??_mktime
  9234  0008A6  CFDD F033          	movff	postdec2,??_mktime+1
  9235  0008AA  C032  F034         	movff	??_mktime,??_mktime+2
  9236  0008AE  C033  F035         	movff	??_mktime+1,??_mktime+3
  9237  0008B2  0E00               	movlw	0
  9238  0008B4  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9239  0008B6  0EFF               	movlw	255
  9240  0008B8  6E36               	movwf	(??_mktime+4)& (0+255),c
  9241  0008BA  6E37               	movwf	(??_mktime+5)& (0+255),c
  9242  0008BC  C040  F038         	movff	mktime@tt,??_mktime+6
  9243  0008C0  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9244  0008C4  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9245  0008C8  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9246  0008CC  0E3C               	movlw	60
  9247  0008CE  0238               	mulwf	(??_mktime+6)& (0+255),c
  9248  0008D0  CFF3 F03C          	movff	prodl,??_mktime+10
  9249  0008D4  CFF4 F03D          	movff	prodh,??_mktime+11
  9250  0008D8  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9251  0008DA  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9252  0008DC  0239               	mulwf	(??_mktime+7)& (0+255),c
  9253  0008DE  50F3               	movf	prodl,w,c
  9254  0008E0  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9255  0008E2  50F4               	movf	prodh,w,c
  9256  0008E4  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9257  0008E6  0E00               	movlw	0
  9258  0008E8  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9259  0008EA  0238               	mulwf	(??_mktime+6)& (0+255),c
  9260  0008EC  50F3               	movf	prodl,w,c
  9261  0008EE  263D               	addwf	(??_mktime+11)& (0+255),f,c
  9262  0008F0  50F4               	movf	prodh,w,c
  9263  0008F2  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  9264  0008F4  0E00               	movlw	0
  9265  0008F6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9266  0008F8  0E3C               	movlw	60
  9267  0008FA  023A               	mulwf	(??_mktime+8)& (0+255),c
  9268  0008FC  50F3               	movf	prodl,w,c
  9269  0008FE  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9270  000900  50F4               	movf	prodh,w,c
  9271  000902  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9272  000904  0E00               	movlw	0
  9273  000906  0239               	mulwf	(??_mktime+7)& (0+255),c
  9274  000908  50F3               	movf	prodl,w,c
  9275  00090A  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9276  00090C  50F4               	movf	prodh,w,c
  9277  00090E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9278  000910  0E00               	movlw	0
  9279  000912  0238               	mulwf	(??_mktime+6)& (0+255),c
  9280  000914  50F3               	movf	prodl,w,c
  9281  000916  263E               	addwf	(??_mktime+12)& (0+255),f,c
  9282  000918  50F4               	movf	prodh,w,c
  9283  00091A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  9284  00091C  0E3C               	movlw	60
  9285  00091E  023B               	mulwf	(??_mktime+9)& (0+255),c
  9286  000920  50F3               	movf	prodl,w,c
  9287  000922  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9288  000924  0E00               	movlw	0
  9289  000926  023A               	mulwf	(??_mktime+8)& (0+255),c
  9290  000928  50F3               	movf	prodl,w,c
  9291  00092A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9292  00092C  0E00               	movlw	0
  9293  00092E  0239               	mulwf	(??_mktime+7)& (0+255),c
  9294  000930  50F3               	movf	prodl,w,c
  9295  000932  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9296  000934  0E00               	movlw	0
  9297  000936  0238               	mulwf	(??_mktime+6)& (0+255),c
  9298  000938  50F3               	movf	prodl,w,c
  9299  00093A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  9300  00093C  5034               	movf	??_mktime+2,w,c
  9301  00093E  243C               	addwf	??_mktime+10,w,c
  9302  000940  6E40               	movwf	mktime@tt,c
  9303  000942  5035               	movf	??_mktime+3,w,c
  9304  000944  203D               	addwfc	??_mktime+11,w,c
  9305  000946  6E41               	movwf	mktime@tt+1,c
  9306  000948  5036               	movf	??_mktime+4,w,c
  9307  00094A  203E               	addwfc	??_mktime+12,w,c
  9308  00094C  6E42               	movwf	mktime@tt+2,c
  9309  00094E  5037               	movf	??_mktime+5,w,c
  9310  000950  203F               	addwfc	??_mktime+13,w,c
  9311  000952  6E43               	movwf	mktime@tt+3,c
  9312  000954                     l5996:
  9313  000954  FFFF               	dw	65535	; assembler added errata NOP
  9314  000956  C040  F02E         	movff	mktime@tt,?_mktime
  9315  00095A  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  9316  00095E  C042  F030         	movff	mktime@tt+2,?_mktime+2
  9317  000962  C043  F031         	movff	mktime@tt+3,?_mktime+3
  9318  000966  0012               	return		;funcret
  9319  000968  FFFF               	dw	65535	; errata NOP
  9320  00096A                     __end_of_mktime:
  9321                           	opt stack 0
  9322                           tblptru	equ	0xFF8
  9323                           tblptrh	equ	0xFF7
  9324                           tblptrl	equ	0xFF6
  9325                           tablat	equ	0xFF5
  9326                           prodh	equ	0xFF4
  9327                           prodl	equ	0xFF3
  9328                           intcon	equ	0xFF2
  9329                           postinc0	equ	0xFEE
  9330                           wreg	equ	0xFE8
  9331                           indf1	equ	0xFE7
  9332                           postinc1	equ	0xFE6
  9333                           postdec1	equ	0xFE5
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           plusw2	equ	0xFDB
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _ymd_to_scalar *****************
  9345 ;; Defined at:
  9346 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  yr              2   29[COMRAM] unsigned int 
  9349 ;;  mo              2   31[COMRAM] unsigned int 
  9350 ;;  day             2   33[COMRAM] unsigned int 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  scalar          4   41[COMRAM] long 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  4   29[COMRAM] long 
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/1
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9362 ;;      Params:         6       0       0       0       0       0       0
  9363 ;;      Locals:         6       0       0       0       0       0       0
  9364 ;;      Temps:          4       0       0       0       0       0       0
  9365 ;;      Totals:        16       0       0       0       0       0       0
  9366 ;;Total ram usage:       16 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    4
  9369 ;; This function calls:
  9370 ;;		_isleap
  9371 ;;		_months_to_days
  9372 ;;		_years_to_days
  9373 ;; This function is called by:
  9374 ;;		_mktime
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text45
  9379  0021EA                     __ptext45:
  9380                           	opt stack 0
  9381  0021EA                     _ymd_to_scalar:
  9382                           	opt stack 23
  9383                           
  9384                           ;incstack = 0
  9385  0021EA  FFFF               	dw	65535
  9386  0021EC  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  9387  0021F0  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  9388  0021F4  ECC5  F014         	call	_months_to_days	;wreg free
  9389  0021F8  5022               	movf	ymd_to_scalar@day,w,c
  9390  0021FA  260E               	addwf	?_months_to_days,f,c
  9391  0021FC  5023               	movf	ymd_to_scalar@day+1,w,c
  9392  0021FE  220F               	addwfc	?_months_to_days+1,f,c
  9393  002200  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  9394  002204  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  9395  002208  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  9396  00220A  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  9397  00220C  5021               	movf	ymd_to_scalar@mo+1,w,c
  9398  00220E  E103               	bnz	u4540
  9399  002210  0E03               	movlw	3
  9400  002212  5C20               	subwf	ymd_to_scalar@mo,w,c
  9401  002214  E321               	bnc	l5746
  9402  002216                     u4540:
  9403  002216  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  9404  00221A  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  9405  00221E  EC0C  F014         	call	_isleap	;wreg free
  9406  002222  500C               	movf	?_isleap,w,c
  9407  002224  100D               	iorwf	?_isleap+1,w,c
  9408  002226  E103               	bnz	l5742
  9409  002228  6A29               	clrf	_ymd_to_scalar$2254+1,c
  9410  00222A  0E02               	movlw	2
  9411  00222C  D002               	goto	L11
  9412  00222E                     l5742:
  9413  00222E  6A29               	clrf	_ymd_to_scalar$2254+1,c
  9414  002230  0E01               	movlw	1
  9415  002232                     L11:
  9416  002232  FFFF               	dw	65535	; assembler added errata NOP
  9417  002234  6E28               	movwf	_ymd_to_scalar$2254,c
  9418  002236  C028  F024         	movff	_ymd_to_scalar$2254,??_ymd_to_scalar
  9419  00223A  C029  F025         	movff	_ymd_to_scalar$2254+1,??_ymd_to_scalar+1
  9420  00223E  0E00               	movlw	0
  9421  002240  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  9422  002242  0EFF               	movlw	255
  9423  002244  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  9424  002246  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  9425  002248  5024               	movf	??_ymd_to_scalar,w,c
  9426  00224A  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  9427  00224C  5025               	movf	??_ymd_to_scalar+1,w,c
  9428  00224E  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  9429  002250  5026               	movf	??_ymd_to_scalar+2,w,c
  9430  002252  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  9431  002254  5027               	movf	??_ymd_to_scalar+3,w,c
  9432  002256  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  9433  002258                     l5746:
  9434  002258  061E               	decf	ymd_to_scalar@yr,f,c
  9435  00225A  A0D8               	btfss	status,0,c
  9436  00225C  061F               	decf	ymd_to_scalar@yr+1,f,c
  9437  00225E  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  9438  002262  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  9439  002266  EC13  F00D         	call	_years_to_days	;wreg free
  9440  00226A  500E               	movf	?_years_to_days,w,c
  9441  00226C  262A               	addwf	ymd_to_scalar@scalar,f,c
  9442  00226E  500F               	movf	?_years_to_days+1,w,c
  9443  002270  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  9444  002272  5010               	movf	?_years_to_days+2,w,c
  9445  002274  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  9446  002276  5011               	movf	?_years_to_days+3,w,c
  9447  002278  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  9448  00227A  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  9449  00227E  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  9450  002282  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  9451  002286  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  9452  00228A  0012               	return		;funcret
  9453  00228C  FFFF               	dw	65535	; errata NOP
  9454  00228E                     __end_of_ymd_to_scalar:
  9455                           	opt stack 0
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           postinc0	equ	0xFEE
  9464                           wreg	equ	0xFE8
  9465                           indf1	equ	0xFE7
  9466                           postinc1	equ	0xFE6
  9467                           postdec1	equ	0xFE5
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           plusw2	equ	0xFDB
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _years_to_days *****************
  9479 ;; Defined at:
  9480 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;  yr              2   13[COMRAM] unsigned int 
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;  ret             4   25[COMRAM] long 
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  4   13[COMRAM] long 
  9487 ;; Registers used:
  9488 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/1
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9494 ;;      Params:         4       0       0       0       0       0       0
  9495 ;;      Locals:         4       0       0       0       0       0       0
  9496 ;;      Temps:          8       0       0       0       0       0       0
  9497 ;;      Totals:        16       0       0       0       0       0       0
  9498 ;;Total ram usage:       16 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    3
  9501 ;; This function calls:
  9502 ;;		___lwdiv
  9503 ;; This function is called by:
  9504 ;;		_ymd_to_scalar
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text46
  9509  001A26                     __ptext46:
  9510                           	opt stack 0
  9511  001A26                     _years_to_days:
  9512                           	opt stack 23
  9513                           
  9514                           ;incstack = 0
  9515  001A26  FFFF               	dw	65535
  9516  001A28  500E               	movf	years_to_days@yr,w,c
  9517  001A2A  6E12               	movwf	??_years_to_days& (0+255),c
  9518  001A2C  500F               	movf	years_to_days@yr+1,w,c
  9519  001A2E  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  9520  001A30  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  9521  001A32  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  9522  001A34  0E6D               	movlw	109
  9523  001A36  0212               	mulwf	??_years_to_days& (0+255),c
  9524  001A38  CFF3 F016          	movff	prodl,??_years_to_days+4
  9525  001A3C  CFF4 F017          	movff	prodh,??_years_to_days+5
  9526  001A40  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  9527  001A42  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  9528  001A44  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9529  001A46  50F3               	movf	prodl,w,c
  9530  001A48  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  9531  001A4A  50F4               	movf	prodh,w,c
  9532  001A4C  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  9533  001A4E  0E00               	movlw	0
  9534  001A50  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9535  001A52  0E01               	movlw	1
  9536  001A54  0212               	mulwf	??_years_to_days& (0+255),c
  9537  001A56  50F3               	movf	prodl,w,c
  9538  001A58  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  9539  001A5A  50F4               	movf	prodh,w,c
  9540  001A5C  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  9541  001A5E  0E00               	movlw	0
  9542  001A60  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9543  001A62  0E6D               	movlw	109
  9544  001A64  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  9545  001A66  50F3               	movf	prodl,w,c
  9546  001A68  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9547  001A6A  50F4               	movf	prodh,w,c
  9548  001A6C  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9549  001A6E  0E01               	movlw	1
  9550  001A70  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9551  001A72  50F3               	movf	prodl,w,c
  9552  001A74  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9553  001A76  50F4               	movf	prodh,w,c
  9554  001A78  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9555  001A7A  0E00               	movlw	0
  9556  001A7C  0212               	mulwf	??_years_to_days& (0+255),c
  9557  001A7E  50F3               	movf	prodl,w,c
  9558  001A80  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  9559  001A82  50F4               	movf	prodh,w,c
  9560  001A84  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  9561  001A86  0E6D               	movlw	109
  9562  001A88  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  9563  001A8A  50F3               	movf	prodl,w,c
  9564  001A8C  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9565  001A8E  0E01               	movlw	1
  9566  001A90  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  9567  001A92  50F3               	movf	prodl,w,c
  9568  001A94  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9569  001A96  0E00               	movlw	0
  9570  001A98  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  9571  001A9A  50F3               	movf	prodl,w,c
  9572  001A9C  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9573  001A9E  0E00               	movlw	0
  9574  001AA0  0212               	mulwf	??_years_to_days& (0+255),c
  9575  001AA2  50F3               	movf	prodl,w,c
  9576  001AA4  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  9577  001AA6  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  9578  001AAA  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  9579  001AAE  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  9580  001AB2  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  9581  001AB6  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  9582  001ABA  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  9583  001ABE  6A0A               	clrf	___lwdiv@divisor+1,c
  9584  001AC0  0E64               	movlw	100
  9585  001AC2  6E09               	movwf	___lwdiv@divisor,c
  9586  001AC4  ECE2  F013         	call	___lwdiv	;wreg free
  9587  001AC8  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  9588  001ACC  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  9589  001AD0  90D8               	bcf	status,0,c
  9590  001AD2  3213               	rrcf	??_years_to_days+1,f,c
  9591  001AD4  3212               	rrcf	??_years_to_days,f,c
  9592  001AD6  90D8               	bcf	status,0,c
  9593  001AD8  3213               	rrcf	??_years_to_days+1,f,c
  9594  001ADA  3212               	rrcf	??_years_to_days,f,c
  9595  001ADC  5007               	movf	?___lwdiv,w,c
  9596  001ADE  5E12               	subwf	??_years_to_days,f,c
  9597  001AE0  5008               	movf	?___lwdiv+1,w,c
  9598  001AE2  5A13               	subwfb	??_years_to_days+1,f,c
  9599  001AE4  5012               	movf	??_years_to_days,w,c
  9600  001AE6  261A               	addwf	years_to_days@ret,f,c
  9601  001AE8  5013               	movf	??_years_to_days+1,w,c
  9602  001AEA  221B               	addwfc	years_to_days@ret+1,f,c
  9603  001AEC  0E00               	movlw	0
  9604  001AEE  221C               	addwfc	years_to_days@ret+2,f,c
  9605  001AF0  221D               	addwfc	years_to_days@ret+3,f,c
  9606  001AF2  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  9607  001AF6  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  9608  001AFA  0E01               	movlw	1
  9609  001AFC  6E0A               	movwf	___lwdiv@divisor+1,c
  9610  001AFE  0E90               	movlw	144
  9611  001B00  6E09               	movwf	___lwdiv@divisor,c
  9612  001B02  ECE2  F013         	call	___lwdiv	;wreg free
  9613  001B06  5007               	movf	?___lwdiv,w,c
  9614  001B08  261A               	addwf	years_to_days@ret,f,c
  9615  001B0A  5008               	movf	?___lwdiv+1,w,c
  9616  001B0C  221B               	addwfc	years_to_days@ret+1,f,c
  9617  001B0E  0E00               	movlw	0
  9618  001B10  221C               	addwfc	years_to_days@ret+2,f,c
  9619  001B12  221D               	addwfc	years_to_days@ret+3,f,c
  9620  001B14  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  9621  001B18  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  9622  001B1C  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  9623  001B20  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  9624  001B24  0C00               	retlw	0	;funcret
  9625  001B26  FFFF               	dw	65535	; errata NOP
  9626  001B28                     __end_of_years_to_days:
  9627                           	opt stack 0
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           postinc0	equ	0xFEE
  9636                           wreg	equ	0xFE8
  9637                           indf1	equ	0xFE7
  9638                           postinc1	equ	0xFE6
  9639                           postdec1	equ	0xFE5
  9640                           fsr1h	equ	0xFE2
  9641                           fsr1l	equ	0xFE1
  9642                           indf2	equ	0xFDF
  9643                           postinc2	equ	0xFDE
  9644                           postdec2	equ	0xFDD
  9645                           plusw2	equ	0xFDB
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8
  9649                           
  9650 ;; *************** function _months_to_days *****************
  9651 ;; Defined at:
  9652 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  month           2   13[COMRAM] unsigned int 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;		None
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  2   13[COMRAM] unsigned int 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/1
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9666 ;;      Params:         2       0       0       0       0       0       0
  9667 ;;      Locals:         0       0       0       0       0       0       0
  9668 ;;      Temps:          4       0       0       0       0       0       0
  9669 ;;      Totals:         6       0       0       0       0       0       0
  9670 ;;Total ram usage:        6 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    3
  9673 ;; This function calls:
  9674 ;;		___lwdiv
  9675 ;; This function is called by:
  9676 ;;		_ymd_to_scalar
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text47
  9681  00298A                     __ptext47:
  9682                           	opt stack 0
  9683  00298A                     _months_to_days:
  9684                           	opt stack 23
  9685                           
  9686                           ;incstack = 0
  9687  00298A  FFFF               	dw	65535
  9688  00298C  0EF1               	movlw	241
  9689  00298E  6E10               	movwf	??_months_to_days& (0+255),c
  9690  002990  0E0B               	movlw	11
  9691  002992  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  9692  002994  5010               	movf	??_months_to_days& (0+255),w,c
  9693  002996  020E               	mulwf	months_to_days@month,c
  9694  002998  CFF3 F012          	movff	prodl,??_months_to_days+2
  9695  00299C  CFF4 F013          	movff	prodh,??_months_to_days+3
  9696  0029A0  020F               	mulwf	months_to_days@month+1,c
  9697  0029A2  50F3               	movf	prodl,w,c
  9698  0029A4  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  9699  0029A6  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  9700  0029A8  020E               	mulwf	months_to_days@month,c
  9701  0029AA  50F3               	movf	prodl,w,c
  9702  0029AC  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  9703  0029AE  0E41               	movlw	65
  9704  0029B0  2412               	addwf	??_months_to_days+2,w,c
  9705  0029B2  6E07               	movwf	___lwdiv@dividend,c
  9706  0029B4  0EF4               	movlw	244
  9707  0029B6  2013               	addwfc	??_months_to_days+3,w,c
  9708  0029B8  6E08               	movwf	___lwdiv@dividend+1,c
  9709  0029BA  6A0A               	clrf	___lwdiv@divisor+1,c
  9710  0029BC  0E64               	movlw	100
  9711  0029BE  6E09               	movwf	___lwdiv@divisor,c
  9712  0029C0  ECE2  F013         	call	___lwdiv	;wreg free
  9713  0029C4  C007  F00E         	movff	?___lwdiv,?_months_to_days
  9714  0029C8  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  9715  0029CC  0012               	return		;funcret
  9716  0029CE  FFFF               	dw	65535	; errata NOP
  9717  0029D0                     __end_of_months_to_days:
  9718                           	opt stack 0
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           postinc0	equ	0xFEE
  9727                           wreg	equ	0xFE8
  9728                           indf1	equ	0xFE7
  9729                           postinc1	equ	0xFE6
  9730                           postdec1	equ	0xFE5
  9731                           fsr1h	equ	0xFE2
  9732                           fsr1l	equ	0xFE1
  9733                           indf2	equ	0xFDF
  9734                           postinc2	equ	0xFDE
  9735                           postdec2	equ	0xFDD
  9736                           plusw2	equ	0xFDB
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function ___lwdiv *****************
  9742 ;; Defined at:
  9743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  dividend        2    6[COMRAM] unsigned int 
  9746 ;;  divisor         2    8[COMRAM] unsigned int 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  quotient        2   11[COMRAM] unsigned int 
  9749 ;;  counter         1   10[COMRAM] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  2    6[COMRAM] unsigned int 
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/1
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9759 ;;      Params:         4       0       0       0       0       0       0
  9760 ;;      Locals:         3       0       0       0       0       0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0
  9762 ;;      Totals:         7       0       0       0       0       0       0
  9763 ;;Total ram usage:        7 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    2
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_months_to_days
  9770 ;;		_years_to_days
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           	psect	text48
  9775  0027C4                     __ptext48:
  9776                           	opt stack 0
  9777  0027C4                     ___lwdiv:
  9778                           	opt stack 23
  9779                           
  9780                           ;incstack = 0
  9781  0027C4  FFFF               	dw	65535
  9782  0027C6  6A0C               	clrf	___lwdiv@quotient,c
  9783  0027C8  6A0D               	clrf	___lwdiv@quotient+1,c
  9784  0027CA  5009               	movf	___lwdiv@divisor,w,c
  9785  0027CC  100A               	iorwf	___lwdiv@divisor+1,w,c
  9786  0027CE  E01E               	bz	l1339
  9787  0027D0  0E01               	movlw	1
  9788  0027D2  6E0B               	movwf	___lwdiv@counter,c
  9789  0027D4  D005               	goto	l5450
  9790  0027D6                     l5448:
  9791  0027D6  FFFF               	dw	65535	; assembler added errata NOP
  9792  0027D8  90D8               	bcf	status,0,c
  9793  0027DA  3609               	rlcf	___lwdiv@divisor,f,c
  9794  0027DC  360A               	rlcf	___lwdiv@divisor+1,f,c
  9795  0027DE  2A0B               	incf	___lwdiv@counter,f,c
  9796  0027E0                     l5450:
  9797  0027E0  FFFF               	dw	65535	; assembler added errata NOP
  9798  0027E2  AE0A               	btfss	___lwdiv@divisor+1,7,c
  9799  0027E4  D7F8               	goto	l5448
  9800  0027E6                     l5452:
  9801  0027E6  FFFF               	dw	65535	; assembler added errata NOP
  9802  0027E8  90D8               	bcf	status,0,c
  9803  0027EA  360C               	rlcf	___lwdiv@quotient,f,c
  9804  0027EC  360D               	rlcf	___lwdiv@quotient+1,f,c
  9805  0027EE  5009               	movf	___lwdiv@divisor,w,c
  9806  0027F0  5C07               	subwf	___lwdiv@dividend,w,c
  9807  0027F2  500A               	movf	___lwdiv@divisor+1,w,c
  9808  0027F4  5808               	subwfb	___lwdiv@dividend+1,w,c
  9809  0027F6  E305               	bnc	l5460
  9810  0027F8  5009               	movf	___lwdiv@divisor,w,c
  9811  0027FA  5E07               	subwf	___lwdiv@dividend,f,c
  9812  0027FC  500A               	movf	___lwdiv@divisor+1,w,c
  9813  0027FE  5A08               	subwfb	___lwdiv@dividend+1,f,c
  9814  002800  800C               	bsf	___lwdiv@quotient,0,c
  9815  002802                     l5460:
  9816  002802  90D8               	bcf	status,0,c
  9817  002804  320A               	rrcf	___lwdiv@divisor+1,f,c
  9818  002806  3209               	rrcf	___lwdiv@divisor,f,c
  9819  002808  2E0B               	decfsz	___lwdiv@counter,f,c
  9820  00280A  D7ED               	goto	l5452
  9821  00280C                     l1339:
  9822  00280C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  9823  002810  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9824  002814  0012               	return		;funcret
  9825  002816  FFFF               	dw	65535	; errata NOP
  9826  002818                     __end_of___lwdiv:
  9827                           	opt stack 0
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           indf1	equ	0xFE7
  9838                           postinc1	equ	0xFE6
  9839                           postdec1	equ	0xFE5
  9840                           fsr1h	equ	0xFE2
  9841                           fsr1l	equ	0xFE1
  9842                           indf2	equ	0xFDF
  9843                           postinc2	equ	0xFDE
  9844                           postdec2	equ	0xFDD
  9845                           plusw2	equ	0xFDB
  9846                           fsr2h	equ	0xFDA
  9847                           fsr2l	equ	0xFD9
  9848                           status	equ	0xFD8
  9849                           
  9850 ;; *************** function _isleap *****************
  9851 ;; Defined at:
  9852 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;  yr              2   11[COMRAM] unsigned int 
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;		None
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  2   11[COMRAM] int 
  9859 ;; Registers used:
  9860 ;;		wreg, status,2, status,0, cstack
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/1
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9866 ;;      Params:         2       0       0       0       0       0       0
  9867 ;;      Locals:         1       0       0       0       0       0       0
  9868 ;;      Temps:          1       0       0       0       0       0       0
  9869 ;;      Totals:         4       0       0       0       0       0       0
  9870 ;;Total ram usage:        4 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    3
  9873 ;; This function calls:
  9874 ;;		___lwmod
  9875 ;; This function is called by:
  9876 ;;		_ymd_to_scalar
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           	psect	text49
  9881  002818                     __ptext49:
  9882                           	opt stack 0
  9883  002818                     _isleap:
  9884                           	opt stack 23
  9885                           
  9886                           ;incstack = 0
  9887  002818  FFFF               	dw	65535
  9888  00281A  0E01               	movlw	1
  9889  00281C  6E0F               	movwf	_isleap$2241,c
  9890  00281E  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  9891  002822  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  9892  002826  6E0A               	movwf	___lwmod@divisor+1,c
  9893  002828  0E90               	movlw	144
  9894  00282A  6E09               	movwf	___lwmod@divisor,c
  9895  00282C  EC7E  F014         	call	___lwmod	;wreg free
  9896  002830  5007               	movf	?___lwmod,w,c
  9897  002832  1008               	iorwf	?___lwmod+1,w,c
  9898  002834  E012               	bz	l1365
  9899  002836  C00C  F00E         	movff	isleap@yr,??_isleap
  9900  00283A  0E03               	movlw	3
  9901  00283C  160E               	andwf	??_isleap,f,c
  9902  00283E  E10C               	bnz	l5430
  9903  002840  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  9904  002844  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  9905  002848  6A0A               	clrf	___lwmod@divisor+1,c
  9906  00284A  0E64               	movlw	100
  9907  00284C  6E09               	movwf	___lwmod@divisor,c
  9908  00284E  EC7E  F014         	call	___lwmod	;wreg free
  9909  002852  5007               	movf	?___lwmod,w,c
  9910  002854  1008               	iorwf	?___lwmod+1,w,c
  9911  002856  E101               	bnz	l1365
  9912  002858                     l5430:
  9913  002858  6A0F               	clrf	_isleap$2241,c
  9914  00285A                     l1365:
  9915  00285A  C00F  F00C         	movff	_isleap$2241,?_isleap
  9916  00285E  6A0D               	clrf	?_isleap+1,c
  9917  002860  0012               	return		;funcret
  9918  002862  FFFF               	dw	65535	; errata NOP
  9919  002864                     __end_of_isleap:
  9920                           	opt stack 0
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           postinc1	equ	0xFE6
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           plusw2	equ	0xFDB
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function ___lwmod *****************
  9944 ;; Defined at:
  9945 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  dividend        2    6[COMRAM] unsigned int 
  9948 ;;  divisor         2    8[COMRAM] unsigned int 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  counter         1   10[COMRAM] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  2    6[COMRAM] unsigned int 
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/1
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9960 ;;      Params:         4       0       0       0       0       0       0
  9961 ;;      Locals:         1       0       0       0       0       0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0
  9963 ;;      Totals:         5       0       0       0       0       0       0
  9964 ;;Total ram usage:        5 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    2
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_isleap
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text50
  9975  0028FC                     __ptext50:
  9976                           	opt stack 0
  9977  0028FC                     ___lwmod:
  9978                           	opt stack 23
  9979                           
  9980                           ;incstack = 0
  9981  0028FC  FFFF               	dw	65535
  9982  0028FE  5009               	movf	___lwmod@divisor,w,c
  9983  002900  100A               	iorwf	___lwmod@divisor+1,w,c
  9984  002902  E01A               	bz	l1349
  9985  002904  0E01               	movlw	1
  9986  002906  6E0B               	movwf	___lwmod@counter,c
  9987  002908  D005               	goto	l5470
  9988  00290A                     l5468:
  9989  00290A  FFFF               	dw	65535	; assembler added errata NOP
  9990  00290C  90D8               	bcf	status,0,c
  9991  00290E  3609               	rlcf	___lwmod@divisor,f,c
  9992  002910  360A               	rlcf	___lwmod@divisor+1,f,c
  9993  002912  2A0B               	incf	___lwmod@counter,f,c
  9994  002914                     l5470:
  9995  002914  FFFF               	dw	65535	; assembler added errata NOP
  9996  002916  AE0A               	btfss	___lwmod@divisor+1,7,c
  9997  002918  D7F8               	goto	l5468
  9998  00291A                     l5472:
  9999  00291A  FFFF               	dw	65535	; assembler added errata NOP
 10000  00291C  5009               	movf	___lwmod@divisor,w,c
 10001  00291E  5C07               	subwf	___lwmod@dividend,w,c
 10002  002920  500A               	movf	___lwmod@divisor+1,w,c
 10003  002922  5808               	subwfb	___lwmod@dividend+1,w,c
 10004  002924  E304               	bnc	l5476
 10005  002926  5009               	movf	___lwmod@divisor,w,c
 10006  002928  5E07               	subwf	___lwmod@dividend,f,c
 10007  00292A  500A               	movf	___lwmod@divisor+1,w,c
 10008  00292C  5A08               	subwfb	___lwmod@dividend+1,f,c
 10009  00292E                     l5476:
 10010  00292E  90D8               	bcf	status,0,c
 10011  002930  320A               	rrcf	___lwmod@divisor+1,f,c
 10012  002932  3209               	rrcf	___lwmod@divisor,f,c
 10013  002934  2E0B               	decfsz	___lwmod@counter,f,c
 10014  002936  D7F1               	goto	l5472
 10015  002938                     l1349:
 10016  002938  C007  F007         	movff	___lwmod@dividend,?___lwmod
 10017  00293C  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
 10018  002940  0012               	return		;funcret
 10019  002942  FFFF               	dw	65535	; errata NOP
 10020  002944                     __end_of___lwmod:
 10021                           	opt stack 0
 10022                           tblptru	equ	0xFF8
 10023                           tblptrh	equ	0xFF7
 10024                           tblptrl	equ	0xFF6
 10025                           tablat	equ	0xFF5
 10026                           prodh	equ	0xFF4
 10027                           prodl	equ	0xFF3
 10028                           intcon	equ	0xFF2
 10029                           postinc0	equ	0xFEE
 10030                           wreg	equ	0xFE8
 10031                           indf1	equ	0xFE7
 10032                           postinc1	equ	0xFE6
 10033                           postdec1	equ	0xFE5
 10034                           fsr1h	equ	0xFE2
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           plusw2	equ	0xFDB
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _SetTime *****************
 10045 ;; Defined at:
 10046 ;;		line 169 in file "user.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  newTime         1    wreg     PTR long 
 10049 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  newTime         1    6[COMRAM] PTR long 
 10052 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, fsr2l, fsr2h, status,2
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/1
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10062 ;;      Params:         0       0       0       0       0       0       0
 10063 ;;      Locals:         1       0       0       0       0       0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0
 10065 ;;      Totals:         1       0       0       0       0       0       0
 10066 ;;Total ram usage:        1 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    2
 10069 ;; This function calls:
 10070 ;;		Nothing
 10071 ;; This function is called by:
 10072 ;;		_ModbusProcess_FC100
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           	psect	text51
 10077  002CDC                     __ptext51:
 10078                           	opt stack 0
 10079  002CDC                     _SetTime:
 10080                           	opt stack 26
 10081                           
 10082                           ;incstack = 0
 10083  002CDC  FFFF               	dw	65535
 10084                           
 10085                           ;SetTime@newTime stored from wreg
 10086  002CDE  6E07               	movwf	SetTime@newTime,c
 10087                           
 10088                           ;user.c: 171: currentTime = *newTime;
 10089  002CE0  5007               	movf	SetTime@newTime,w,c
 10090  002CE2  6ED9               	movwf	fsr2l,c
 10091  002CE4  6ADA               	clrf	fsr2h,c
 10092  002CE6  CFDE F0DB          	movff	postinc2,_currentTime
 10093  002CEA  CFDE F0DC          	movff	postinc2,_currentTime+1
 10094  002CEE  CFDE F0DD          	movff	postinc2,_currentTime+2
 10095  002CF2  CFDE F0DE          	movff	postinc2,_currentTime+3
 10096  002CF6  0012               	return		;funcret
 10097  002CF8  FFFF               	dw	65535	; errata NOP
 10098  002CFA                     __end_of_SetTime:
 10099                           	opt stack 0
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           postinc0	equ	0xFEE
 10108                           wreg	equ	0xFE8
 10109                           indf1	equ	0xFE7
 10110                           postinc1	equ	0xFE6
 10111                           postdec1	equ	0xFE5
 10112                           fsr1h	equ	0xFE2
 10113                           fsr1l	equ	0xFE1
 10114                           indf2	equ	0xFDF
 10115                           postinc2	equ	0xFDE
 10116                           postdec2	equ	0xFDD
 10117                           plusw2	equ	0xFDB
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _SetHourMin *****************
 10123 ;; Defined at:
 10124 ;;		line 277 in file "interrupts.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  newHour         2   10[COMRAM] PTR unsigned char 
 10127 ;;		 -> _au8Buffer(140), 
 10128 ;;  newMin          2   12[COMRAM] PTR unsigned char 
 10129 ;;		 -> _au8Buffer(140), 
 10130 ;;  sec             2   14[COMRAM] PTR unsigned char 
 10131 ;;		 -> _au8Buffer(140), 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;  secToNext6Se    1   29[COMRAM] unsigned char 
 10134 ;;  tmpSec          1   28[COMRAM] unsigned char 
 10135 ;; Return value:  Size  Location     Type
 10136 ;;                  1    wreg      void 
 10137 ;; Registers used:
 10138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10139 ;; Tracked objects:
 10140 ;;		On entry : E/0
 10141 ;;		On exit  : 0/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10144 ;;      Params:         6       0       0       0       0       0       0
 10145 ;;      Locals:         2       0       0       0       0       0       0
 10146 ;;      Temps:         12       0       0       0       0       0       0
 10147 ;;      Totals:        20       0       0       0       0       0       0
 10148 ;;Total ram usage:       20 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    3
 10151 ;; This function calls:
 10152 ;;		___lbdiv
 10153 ;;		___lbmod
 10154 ;; This function is called by:
 10155 ;;		_ModbusProcess_FC100
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text52
 10160  00180A                     __ptext52:
 10161                           	opt stack 0
 10162  00180A                     _SetHourMin:
 10163                           	opt stack 25
 10164                           
 10165                           ;incstack = 0
 10166  00180A  FFFF               	dw	65535
 10167                           
 10168                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 10169  00180C  9ED5               	bcf	4053,7,c	;volatile
 10170                           
 10171                           ;interrupts.c: 281: globalHours = *newHour;
 10172  00180E  C00B  FFD9         	movff	SetHourMin@newHour,fsr2l
 10173  001812  C00C  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 10174  001816  50DF               	movf	indf2,w,c
 10175  001818  6E75               	movwf	_globalHours,c	;volatile
 10176                           
 10177                           ;interrupts.c: 282: globalMinutes = *newMin;
 10178  00181A  C00D  FFD9         	movff	SetHourMin@newMin,fsr2l
 10179  00181E  C00E  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 10180  001822  50DF               	movf	indf2,w,c
 10181  001824  6E72               	movwf	_globalMinutes,c	;volatile
 10182                           
 10183                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 10184  001826  5075               	movf	_globalHours,w,c	;volatile
 10185  001828  0D3C               	mullw	60
 10186  00182A  5072               	movf	_globalMinutes,w,c	;volatile
 10187  00182C  24F3               	addwf	prodl,w,c
 10188  00182E  0100               	movlb	0	; () banked
 10189  001830  6FC2               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 10190  001832  0E00               	movlw	0
 10191  001834  20F4               	addwfc	prodh,w,c
 10192  001836  6FC3               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 10196  001838  C00F  FFD9         	movff	SetHourMin@sec,fsr2l
 10197  00183C  C010  FFDA         	movff	SetHourMin@sec+1,fsr2h
 10198  001840  50DF               	movf	indf2,w,c
 10199  001842  6E1D               	movwf	SetHourMin@tmpSec,c
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 10203  001844  0E06               	movlw	6
 10204  001846  6E07               	movwf	___lbdiv@divisor,c
 10205  001848  501D               	movf	SetHourMin@tmpSec,w,c
 10206  00184A  EC2D  F015         	call	___lbdiv
 10207  00184E  0100               	movlb	0	; () banked
 10208  001850  6FCC               	movwf	__6sCounter& (0+255),b	;volatile
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 10212  001852  0E06               	movlw	6
 10213  001854  6E07               	movwf	___lbmod@divisor,c
 10214  001856  501D               	movf	SetHourMin@tmpSec,w,c
 10215  001858  EC0D  F016         	call	___lbmod
 10216  00185C  6E11               	movwf	??_SetHourMin& (0+255),c
 10217  00185E  5011               	movf	??_SetHourMin,w,c
 10218  001860  0806               	sublw	6
 10219  001862  6E1E               	movwf	SetHourMin@secToNext6Sec,c
 10220                           
 10221                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + - 10) * secToNext6Sec
      +                          )>>8),TMR0L=((0x10000 - (10000000L/4 / 256 + - 10) * secToNext6Sec)&0xFF)));
 10222  001864  C01E  F011         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
 10223  001868  6A12               	clrf	(??_SetHourMin+1)& (0+255),c
 10224  00186A  6A13               	clrf	(??_SetHourMin+2)& (0+255),c
 10225  00186C  6A14               	clrf	(??_SetHourMin+3)& (0+255),c
 10226  00186E  0EE5               	movlw	229
 10227  001870  0211               	mulwf	??_SetHourMin& (0+255),c
 10228  001872  CFF3 F015          	movff	prodl,??_SetHourMin+4
 10229  001876  CFF4 F016          	movff	prodh,??_SetHourMin+5
 10230  00187A  6A17               	clrf	(??_SetHourMin+6)& (0+255),c
 10231  00187C  6A18               	clrf	(??_SetHourMin+7)& (0+255),c
 10232  00187E  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10233  001880  50F3               	movf	prodl,w,c
 10234  001882  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 10235  001884  50F4               	movf	prodh,w,c
 10236  001886  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 10237  001888  0E00               	movlw	0
 10238  00188A  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10239  00188C  0ED9               	movlw	217
 10240  00188E  0211               	mulwf	??_SetHourMin& (0+255),c
 10241  001890  50F3               	movf	prodl,w,c
 10242  001892  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 10243  001894  50F4               	movf	prodh,w,c
 10244  001896  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 10245  001898  0E00               	movlw	0
 10246  00189A  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10247  00189C  0EE5               	movlw	229
 10248  00189E  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 10249  0018A0  50F3               	movf	prodl,w,c
 10250  0018A2  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10251  0018A4  50F4               	movf	prodh,w,c
 10252  0018A6  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10253  0018A8  0ED9               	movlw	217
 10254  0018AA  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10255  0018AC  50F3               	movf	prodl,w,c
 10256  0018AE  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10257  0018B0  50F4               	movf	prodh,w,c
 10258  0018B2  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10259  0018B4  0EFF               	movlw	255
 10260  0018B6  0211               	mulwf	??_SetHourMin& (0+255),c
 10261  0018B8  50F3               	movf	prodl,w,c
 10262  0018BA  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 10263  0018BC  50F4               	movf	prodh,w,c
 10264  0018BE  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 10265  0018C0  0EE5               	movlw	229
 10266  0018C2  0214               	mulwf	(??_SetHourMin+3)& (0+255),c
 10267  0018C4  50F3               	movf	prodl,w,c
 10268  0018C6  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10269  0018C8  0ED9               	movlw	217
 10270  0018CA  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 10271  0018CC  50F3               	movf	prodl,w,c
 10272  0018CE  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10273  0018D0  0EFF               	movlw	255
 10274  0018D2  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 10275  0018D4  50F3               	movf	prodl,w,c
 10276  0018D6  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10277  0018D8  0EFF               	movlw	255
 10278  0018DA  0211               	mulwf	??_SetHourMin& (0+255),c
 10279  0018DC  50F3               	movf	prodl,w,c
 10280  0018DE  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 10281  0018E0  0E00               	movlw	0
 10282  0018E2  2415               	addwf	??_SetHourMin+4,w,c
 10283  0018E4  6E19               	movwf	(??_SetHourMin+8)& (0+255),c
 10284  0018E6  0E00               	movlw	0
 10285  0018E8  2016               	addwfc	??_SetHourMin+5,w,c
 10286  0018EA  6E1A               	movwf	(??_SetHourMin+9)& (0+255),c
 10287  0018EC  0E01               	movlw	1
 10288  0018EE  2017               	addwfc	??_SetHourMin+6,w,c
 10289  0018F0  6E1B               	movwf	(??_SetHourMin+10)& (0+255),c
 10290  0018F2  0E00               	movlw	0
 10291  0018F4  2018               	addwfc	??_SetHourMin+7,w,c
 10292  0018F6  6E1C               	movwf	(??_SetHourMin+11)& (0+255),c
 10293  0018F8  C01A  F019         	movff	??_SetHourMin+9,??_SetHourMin+8
 10294  0018FC  C01B  F01A         	movff	??_SetHourMin+10,??_SetHourMin+9
 10295  001900  C01C  F01B         	movff	??_SetHourMin+11,??_SetHourMin+10
 10296  001904  6A1C               	clrf	??_SetHourMin+11,c
 10297  001906  BE1B               	btfsc	??_SetHourMin+10,7,c
 10298  001908  681C               	setf	??_SetHourMin+11,c
 10299  00190A  5019               	movf	??_SetHourMin+8,w,c
 10300  00190C  6ED7               	movwf	4055,c	;volatile
 10301  00190E  501E               	movf	SetHourMin@secToNext6Sec,w,c
 10302  001910  0DE5               	mullw	229
 10303  001912  CFF3 FFD6          	movff	prodl,4054	;volatile
 10304                           
 10305                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 10306  001916  8ED5               	bsf	4053,7,c	;volatile
 10307  001918  0012               	return		;funcret
 10308  00191A  FFFF               	dw	65535	; errata NOP
 10309  00191C                     __end_of_SetHourMin:
 10310                           	opt stack 0
 10311                           tblptru	equ	0xFF8
 10312                           tblptrh	equ	0xFF7
 10313                           tblptrl	equ	0xFF6
 10314                           tablat	equ	0xFF5
 10315                           prodh	equ	0xFF4
 10316                           prodl	equ	0xFF3
 10317                           intcon	equ	0xFF2
 10318                           postinc0	equ	0xFEE
 10319                           wreg	equ	0xFE8
 10320                           indf1	equ	0xFE7
 10321                           postinc1	equ	0xFE6
 10322                           postdec1	equ	0xFE5
 10323                           fsr1h	equ	0xFE2
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           postdec2	equ	0xFDD
 10328                           plusw2	equ	0xFDB
 10329                           fsr2h	equ	0xFDA
 10330                           fsr2l	equ	0xFD9
 10331                           status	equ	0xFD8
 10332                           
 10333 ;; *************** function ___lbmod *****************
 10334 ;; Defined at:
 10335 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  dividend        1    wreg     unsigned char 
 10338 ;;  divisor         1    6[COMRAM] unsigned char 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  dividend        1    7[COMRAM] unsigned char 
 10341 ;;  rem             1    9[COMRAM] unsigned char 
 10342 ;;  counter         1    8[COMRAM] unsigned char 
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      unsigned char 
 10345 ;; Registers used:
 10346 ;;		wreg, status,2, status,0
 10347 ;; Tracked objects:
 10348 ;;		On entry : F/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10352 ;;      Params:         1       0       0       0       0       0       0
 10353 ;;      Locals:         3       0       0       0       0       0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0
 10355 ;;      Totals:         4       0       0       0       0       0       0
 10356 ;;Total ram usage:        4 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    2
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_SetHourMin
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           	psect	text53
 10367  002C1A                     __ptext53:
 10368                           	opt stack 0
 10369  002C1A                     ___lbmod:
 10370                           	opt stack 25
 10371                           
 10372                           ;incstack = 0
 10373  002C1A  FFFF               	dw	65535
 10374                           
 10375                           ;___lbmod@dividend stored from wreg
 10376  002C1C  6E08               	movwf	___lbmod@dividend,c
 10377  002C1E  0E08               	movlw	8
 10378  002C20  6E09               	movwf	___lbmod@counter,c
 10379  002C22  6A0A               	clrf	___lbmod@rem,c
 10380  002C24                     l5720:
 10381  002C24  FFFF               	dw	65535	; assembler added errata NOP
 10382  002C26  90D8               	bcf	status,0,c
 10383  002C28  3408               	rlcf	___lbmod@dividend,w,c
 10384  002C2A  340A               	rlcf	___lbmod@rem,w,c
 10385  002C2C  6E0A               	movwf	___lbmod@rem,c
 10386  002C2E  90D8               	bcf	status,0,c
 10387  002C30  3608               	rlcf	___lbmod@dividend,f,c
 10388  002C32  5007               	movf	___lbmod@divisor,w,c
 10389  002C34  5C0A               	subwf	___lbmod@rem,w,c
 10390  002C36  E302               	bnc	l5728
 10391  002C38  5007               	movf	___lbmod@divisor,w,c
 10392  002C3A  5E0A               	subwf	___lbmod@rem,f,c
 10393  002C3C                     l5728:
 10394  002C3C  2E09               	decfsz	___lbmod@counter,f,c
 10395  002C3E  D7F2               	goto	l5720
 10396  002C40  500A               	movf	___lbmod@rem,w,c
 10397  002C42  0012               	return		;funcret
 10398  002C44  FFFF               	dw	65535	; errata NOP
 10399  002C46                     __end_of___lbmod:
 10400                           	opt stack 0
 10401                           tblptru	equ	0xFF8
 10402                           tblptrh	equ	0xFF7
 10403                           tblptrl	equ	0xFF6
 10404                           tablat	equ	0xFF5
 10405                           prodh	equ	0xFF4
 10406                           prodl	equ	0xFF3
 10407                           intcon	equ	0xFF2
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           indf1	equ	0xFE7
 10411                           postinc1	equ	0xFE6
 10412                           postdec1	equ	0xFE5
 10413                           fsr1h	equ	0xFE2
 10414                           fsr1l	equ	0xFE1
 10415                           indf2	equ	0xFDF
 10416                           postinc2	equ	0xFDE
 10417                           postdec2	equ	0xFDD
 10418                           plusw2	equ	0xFDB
 10419                           fsr2h	equ	0xFDA
 10420                           fsr2l	equ	0xFD9
 10421                           status	equ	0xFD8
 10422                           
 10423 ;; *************** function ___lbdiv *****************
 10424 ;; Defined at:
 10425 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  dividend        1    wreg     unsigned char 
 10428 ;;  divisor         1    6[COMRAM] unsigned char 
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;  dividend        1    7[COMRAM] unsigned char 
 10431 ;;  quotient        1    9[COMRAM] unsigned char 
 10432 ;;  counter         1    8[COMRAM] unsigned char 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  1    wreg      unsigned char 
 10435 ;; Registers used:
 10436 ;;		wreg, status,2, status,0
 10437 ;; Tracked objects:
 10438 ;;		On entry : F/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10442 ;;      Params:         1       0       0       0       0       0       0
 10443 ;;      Locals:         3       0       0       0       0       0       0
 10444 ;;      Temps:          0       0       0       0       0       0       0
 10445 ;;      Totals:         4       0       0       0       0       0       0
 10446 ;;Total ram usage:        4 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    2
 10449 ;; This function calls:
 10450 ;;		Nothing
 10451 ;; This function is called by:
 10452 ;;		_SetHourMin
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text54
 10457  002A5A                     __ptext54:
 10458                           	opt stack 0
 10459  002A5A                     ___lbdiv:
 10460                           	opt stack 25
 10461                           
 10462                           ;incstack = 0
 10463  002A5A  FFFF               	dw	65535
 10464                           
 10465                           ;___lbdiv@dividend stored from wreg
 10466  002A5C  6E08               	movwf	___lbdiv@dividend,c
 10467  002A5E  6A0A               	clrf	___lbdiv@quotient,c
 10468  002A60  5007               	movf	___lbdiv@divisor,w,c
 10469  002A62  E017               	bz	l5712
 10470  002A64  0E01               	movlw	1
 10471  002A66  6E09               	movwf	___lbdiv@counter,c
 10472  002A68  D004               	goto	l5700
 10473  002A6A                     l5696:
 10474  002A6A  FFFF               	dw	65535	; assembler added errata NOP
 10475  002A6C  90D8               	bcf	status,0,c
 10476  002A6E  3607               	rlcf	___lbdiv@divisor,f,c
 10477  002A70  2A09               	incf	___lbdiv@counter,f,c
 10478  002A72                     l5700:
 10479  002A72  FFFF               	dw	65535	; assembler added errata NOP
 10480  002A74  AE07               	btfss	___lbdiv@divisor,7,c
 10481  002A76  D7F9               	goto	l5696
 10482  002A78                     l5702:
 10483  002A78  FFFF               	dw	65535	; assembler added errata NOP
 10484  002A7A  90D8               	bcf	status,0,c
 10485  002A7C  360A               	rlcf	___lbdiv@quotient,f,c
 10486  002A7E  5007               	movf	___lbdiv@divisor,w,c
 10487  002A80  5C08               	subwf	___lbdiv@dividend,w,c
 10488  002A82  E303               	bnc	l5708
 10489  002A84  5007               	movf	___lbdiv@divisor,w,c
 10490  002A86  5E08               	subwf	___lbdiv@dividend,f,c
 10491  002A88  800A               	bsf	___lbdiv@quotient,0,c
 10492  002A8A                     l5708:
 10493  002A8A  90D8               	bcf	status,0,c
 10494  002A8C  3207               	rrcf	___lbdiv@divisor,f,c
 10495  002A8E  2E09               	decfsz	___lbdiv@counter,f,c
 10496  002A90  D7F3               	goto	l5702
 10497  002A92                     l5712:
 10498  002A92  500A               	movf	___lbdiv@quotient,w,c
 10499  002A94  0012               	return		;funcret
 10500  002A96  FFFF               	dw	65535	; errata NOP
 10501  002A98                     __end_of___lbdiv:
 10502                           	opt stack 0
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           postinc0	equ	0xFEE
 10511                           wreg	equ	0xFE8
 10512                           indf1	equ	0xFE7
 10513                           postinc1	equ	0xFE6
 10514                           postdec1	equ	0xFE5
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _ModbusSetExceptionStatusBit *****************
 10526 ;; Defined at:
 10527 ;;		line 232 in file "ModbusRtu.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  bitNum          1    wreg     unsigned char 
 10530 ;;  value           1    6[COMRAM] unsigned char 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  bitNum          1    9[COMRAM] unsigned char 
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  1    wreg      void 
 10535 ;; Registers used:
 10536 ;;		wreg, status,2, status,0
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : F/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10542 ;;      Params:         1       0       0       0       0       0       0
 10543 ;;      Locals:         1       0       0       0       0       0       0
 10544 ;;      Temps:          2       0       0       0       0       0       0
 10545 ;;      Totals:         4       0       0       0       0       0       0
 10546 ;;Total ram usage:        4 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    2
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		_CommandSetStatusLed
 10553 ;;		_ProcessUserCommands
 10554 ;;		_io_poll
 10555 ;;		_ModbusProcess_FC100
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text55
 10560  002864                     __ptext55:
 10561                           	opt stack 0
 10562  002864                     _ModbusSetExceptionStatusBit:
 10563                           	opt stack 26
 10564                           
 10565                           ;incstack = 0
 10566  002864  FFFF               	dw	65535
 10567                           
 10568                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 10569  002866  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 10570                           
 10571                           ;ModbusRtu.c: 234: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 10572  002868  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
 10573  00286A  E010               	bz	l5648
 10574  00286C  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 10575  002870  0E01               	movlw	1
 10576  002872  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 10577  002874  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 10578  002876  D003               	goto	u4444
 10579  002878                     u4445:
 10580  002878  FFFF               	dw	65535	; assembler added errata NOP
 10581  00287A  90D8               	bcf	status,0,c
 10582  00287C  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 10583  00287E                     u4444:
 10584  00287E  FFFF               	dw	65535	; assembler added errata NOP
 10585  002880  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 10586  002882  D7FA               	goto	u4445
 10587  002884  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 10588  002886  0100               	movlb	0	; () banked
 10589  002888  13CE               	iorwf	__exceptionStatus& (0+255),f,b
 10590  00288A  D00F               	goto	l726
 10591  00288C                     l5648:
 10592  00288C  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 10593  002890  0E01               	movlw	1
 10594  002892  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 10595  002894  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 10596  002896  D003               	goto	u4454
 10597  002898                     u4455:
 10598  002898  FFFF               	dw	65535	; assembler added errata NOP
 10599  00289A  90D8               	bcf	status,0,c
 10600  00289C  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 10601  00289E                     u4454:
 10602  00289E  FFFF               	dw	65535	; assembler added errata NOP
 10603  0028A0  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 10604  0028A2  D7FA               	goto	u4455
 10605  0028A4  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
 10606  0028A6  0100               	movlb	0	; () banked
 10607  0028A8  17CE               	andwf	__exceptionStatus& (0+255),f,b
 10608  0028AA                     l726:
 10609  0028AA  FFFF               	dw	65535	; assembler added errata NOP
 10610                           
 10611                           ; BSR set to: 0
 10612  0028AC  0012               	return		;funcret
 10613  0028AE  FFFF               	dw	65535	; errata NOP
 10614  0028B0                     __end_of_ModbusSetExceptionStatusBit:
 10615                           	opt stack 0
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           postinc0	equ	0xFEE
 10624                           wreg	equ	0xFE8
 10625                           indf1	equ	0xFE7
 10626                           postinc1	equ	0xFE6
 10627                           postdec1	equ	0xFE5
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           plusw2	equ	0xFDB
 10634                           fsr2h	equ	0xFDA
 10635                           fsr2l	equ	0xFD9
 10636                           status	equ	0xFD8
 10637                           
 10638 ;; *************** function _ModbusProcess_FC1 *****************
 10639 ;; Defined at:
 10640 ;;		line 926 in file "ModbusRtu.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  regs            2   21[COMRAM] unsigned short 
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 10645 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 10646 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 10647 ;;  u16coil         2   26[COMRAM] unsigned short 
 10648 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 10649 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 10650 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 10651 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 10652 ;; Return value:  Size  Location     Type
 10653 ;;                  1    wreg      unsigned char 
 10654 ;; Registers used:
 10655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : E/1
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10661 ;;      Params:         2       0       0       0       0       0       0
 10662 ;;      Locals:        12       0       0       0       0       0       0
 10663 ;;      Temps:          3       0       0       0       0       0       0
 10664 ;;      Totals:        17       0       0       0       0       0       0
 10665 ;;Total ram usage:       17 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    4
 10668 ;; This function calls:
 10669 ;;		_ModbusSendTxBuffer
 10670 ;; This function is called by:
 10671 ;;		_ModbusPoll
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text56
 10676  0015C8                     __ptext56:
 10677                           	opt stack 0
 10678  0015C8                     _ModbusProcess_FC1:
 10679                           	opt stack 25
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;incstack = 0
 10683  0015C8  FFFF               	dw	65535
 10684                           
 10685                           ;ModbusRtu.c: 929: uint8_t u8currentBit, u8bytesno, u8bitsno;
 10686                           ;ModbusRtu.c: 930: uint8_t u8CopyBufferSize;
 10687                           ;ModbusRtu.c: 931: uint16_t u16currentCoil, u16coil;
 10688                           ;ModbusRtu.c: 934: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 10689  0015CA  0101               	movlb	1	; () banked
 10690  0015CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 10691  0015CE  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10692  0015D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 10693  0015D2  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 10694  0015D4  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 10695                           
 10696                           ; BSR set to: 1
 10697                           ;ModbusRtu.c: 935: _lastAddress = u16StartCoil;
 10698  0015D8  C020  F0BC         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 10699  0015DC  C021  F0BD         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 10700                           
 10701                           ;ModbusRtu.c: 936: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 10702  0015E0  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 10703  0015E2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 10704  0015E4  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 10705  0015E6  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 10706  0015E8  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 10707                           
 10708                           ; BSR set to: 1
 10709                           ;ModbusRtu.c: 937: _lastCount = u16Coilno;
 10710  0015EC  C025  F0BE         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 10711  0015F0  C026  F0BF         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 10712                           
 10713                           ; BSR set to: 1
 10714                           ;ModbusRtu.c: 939: u8bytesno = (uint8_t) (u16Coilno / 8);
 10715  0015F4  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10716  0015F8  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 10717  0015FC  90D8               	bcf	status,0,c
 10718  0015FE  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10719  001600  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10720  001602  90D8               	bcf	status,0,c
 10721  001604  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10722  001606  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10723  001608  90D8               	bcf	status,0,c
 10724  00160A  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10725  00160C  3218               	rrcf	??_ModbusProcess_FC1,f,c
 10726  00160E  5018               	movf	??_ModbusProcess_FC1,w,c
 10727  001610  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 10728                           
 10729                           ; BSR set to: 1
 10730                           ;ModbusRtu.c: 940: if (u16Coilno % 8 != 0)
 10731  001612  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10732  001616  0E07               	movlw	7
 10733  001618  1618               	andwf	??_ModbusProcess_FC1,f,c
 10734  00161A  E001               	bz	l6346
 10735                           
 10736                           ; BSR set to: 1
 10737                           ;ModbusRtu.c: 941: u8bytesno++;
 10738  00161C  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 10739  00161E                     l6346:
 10740                           
 10741                           ; BSR set to: 1
 10742                           ;ModbusRtu.c: 942: _au8Buffer[ ADD_HI ] = u8bytesno;
 10743  00161E  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 10744                           
 10745                           ; BSR set to: 1
 10746                           ;ModbusRtu.c: 943: _u8BufferSize = ADD_LO;
 10747  001622  0E03               	movlw	3
 10748  001624  6E70               	movwf	__u8BufferSize,c
 10749                           
 10750                           ; BSR set to: 1
 10751                           ;ModbusRtu.c: 946: u8bitsno = 0;
 10752  001626  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10753                           
 10754                           ; BSR set to: 1
 10755                           ;ModbusRtu.c: 948: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 10756  001628  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 10757  00162A  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 10758  00162C  D04F               	goto	l6372
 10759  00162E                     l6354:
 10760                           
 10761                           ;ModbusRtu.c: 949: {
 10762                           ;ModbusRtu.c: 950: u16coil = u16StartCoil + u16currentCoil;
 10763  00162E  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 10764  001630  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 10765  001632  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 10766  001634  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 10767  001636  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 10768  001638  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 10769                           
 10770                           ;ModbusRtu.c: 952: u8currentBit = (uint8_t) u16coil;
 10771  00163A  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 10772                           
 10773                           ;ModbusRtu.c: 954: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 10774  00163E  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 10775  001642  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 10776  001646  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 10777  00164A  2A18               	incf	??_ModbusProcess_FC1,f,c
 10778  00164C  D004               	goto	u5344
 10779  00164E                     u5345:
 10780  00164E  FFFF               	dw	65535	; assembler added errata NOP
 10781  001650  90D8               	bcf	status,0,c
 10782  001652  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 10783  001654  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 10784  001656                     u5344:
 10785  001656  FFFF               	dw	65535	; assembler added errata NOP
 10786  001658  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10787  00165A  D7F9               	goto	u5345
 10788  00165C  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 10789  00165E  D015               	goto	l6362
 10790  001660  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10791  001664  0E01               	movlw	1
 10792  001666  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10793  001668  2A18               	incf	??_ModbusProcess_FC1,f,c
 10794  00166A  D003               	goto	u5364
 10795  00166C                     u5365:
 10796  00166C  FFFF               	dw	65535	; assembler added errata NOP
 10797  00166E  90D8               	bcf	status,0,c
 10798  001670  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10799  001672                     u5364:
 10800  001672  FFFF               	dw	65535	; assembler added errata NOP
 10801  001674  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10802  001676  D7FA               	goto	u5365
 10803  001678  0E00               	movlw	low __au8Buffer
 10804  00167A  2470               	addwf	__u8BufferSize,w,c
 10805  00167C  6ED9               	movwf	fsr2l,c
 10806  00167E  6ADA               	clrf	fsr2h,c
 10807  001680  0E01               	movlw	high __au8Buffer
 10808  001682  22DA               	addwfc	fsr2h,f,c
 10809  001684  5019               	movf	??_ModbusProcess_FC1+1,w,c
 10810  001686  12DF               	iorwf	indf2,f,c
 10811  001688  D017               	goto	l6364
 10812  00168A                     l6362:
 10813  00168A  FFFF               	dw	65535	; assembler added errata NOP
 10814  00168C  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 10815  001690  0E01               	movlw	1
 10816  001692  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 10817  001694  2A18               	incf	??_ModbusProcess_FC1,f,c
 10818  001696  D003               	goto	u5374
 10819  001698                     u5375:
 10820  001698  FFFF               	dw	65535	; assembler added errata NOP
 10821  00169A  90D8               	bcf	status,0,c
 10822  00169C  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 10823  00169E                     u5374:
 10824  00169E  FFFF               	dw	65535	; assembler added errata NOP
 10825  0016A0  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 10826  0016A2  D7FA               	goto	u5375
 10827  0016A4  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 10828  0016A6  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 10829  0016A8  0E00               	movlw	low __au8Buffer
 10830  0016AA  2470               	addwf	__u8BufferSize,w,c
 10831  0016AC  6ED9               	movwf	fsr2l,c
 10832  0016AE  6ADA               	clrf	fsr2h,c
 10833  0016B0  0E01               	movlw	high __au8Buffer
 10834  0016B2  22DA               	addwfc	fsr2h,f,c
 10835  0016B4  501A               	movf	??_ModbusProcess_FC1+2,w,c
 10836  0016B6  16DF               	andwf	indf2,f,c
 10837  0016B8                     l6364:
 10838  0016B8  FFFF               	dw	65535	; assembler added errata NOP
 10839                           
 10840                           ;ModbusRtu.c: 958: u8bitsno++;
 10841  0016BA  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 10842                           
 10843                           ;ModbusRtu.c: 960: if (u8bitsno > 7)
 10844  0016BC  0E07               	movlw	7
 10845  0016BE  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 10846  0016C0  D002               	goto	l848
 10847                           
 10848                           ;ModbusRtu.c: 961: {
 10849                           ;ModbusRtu.c: 962: u8bitsno = 0;
 10850  0016C2  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 10851                           
 10852                           ;ModbusRtu.c: 963: _u8BufferSize++;
 10853  0016C4  2A70               	incf	__u8BufferSize,f,c
 10854  0016C6                     l848:
 10855  0016C6  FFFF               	dw	65535	; assembler added errata NOP
 10856  0016C8  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 10857  0016CA  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 10858  0016CC                     l6372:
 10859  0016CC  FFFF               	dw	65535	; assembler added errata NOP
 10860  0016CE  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 10861  0016D0  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 10862  0016D2  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 10863  0016D4  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 10864  0016D6  E3AB               	bnc	l6354
 10865                           
 10866                           ;ModbusRtu.c: 964: }
 10867                           ;ModbusRtu.c: 965: }
 10868                           ;ModbusRtu.c: 968: if (u16Coilno % 8 != 0)
 10869  0016D8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 10870  0016DC  0E07               	movlw	7
 10871  0016DE  1618               	andwf	??_ModbusProcess_FC1,f,c
 10872  0016E0  E001               	bz	l6378
 10873                           
 10874                           ;ModbusRtu.c: 969: _u8BufferSize++;
 10875  0016E2  2A70               	incf	__u8BufferSize,f,c
 10876  0016E4                     l6378:
 10877                           
 10878                           ;ModbusRtu.c: 970: u8CopyBufferSize = _u8BufferSize + 2;
 10879  0016E4  5070               	movf	__u8BufferSize,w,c
 10880  0016E6  0F02               	addlw	2
 10881  0016E8  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 10882                           
 10883                           ;ModbusRtu.c: 971: ModbusSendTxBuffer();
 10884  0016EA  EC58  F014         	call	_ModbusSendTxBuffer	;wreg free
 10885                           
 10886                           ;ModbusRtu.c: 972: return u8CopyBufferSize;
 10887  0016EE  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 10888  0016F0  0012               	return		;funcret
 10889  0016F2  FFFF               	dw	65535	; errata NOP
 10890  0016F4                     __end_of_ModbusProcess_FC1:
 10891                           	opt stack 0
 10892                           tblptru	equ	0xFF8
 10893                           tblptrh	equ	0xFF7
 10894                           tblptrl	equ	0xFF6
 10895                           tablat	equ	0xFF5
 10896                           prodh	equ	0xFF4
 10897                           prodl	equ	0xFF3
 10898                           intcon	equ	0xFF2
 10899                           postinc0	equ	0xFEE
 10900                           wreg	equ	0xFE8
 10901                           indf1	equ	0xFE7
 10902                           postinc1	equ	0xFE6
 10903                           postdec1	equ	0xFE5
 10904                           fsr1h	equ	0xFE2
 10905                           fsr1l	equ	0xFE1
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           plusw2	equ	0xFDB
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           
 10914 ;; *************** function _ModbusSendTxBuffer *****************
 10915 ;; Defined at:
 10916 ;;		line 634 in file "ModbusRtu.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;		None
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;  u16crc          2   19[COMRAM] unsigned short 
 10921 ;; Return value:  Size  Location     Type
 10922 ;;                  1    wreg      void 
 10923 ;; Registers used:
 10924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10925 ;; Tracked objects:
 10926 ;;		On entry : 0/1
 10927 ;;		On exit  : 0/0
 10928 ;;		Unchanged: 0/0
 10929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10930 ;;      Params:         0       0       0       0       0       0       0
 10931 ;;      Locals:         2       0       0       0       0       0       0
 10932 ;;      Temps:          0       0       0       0       0       0       0
 10933 ;;      Totals:         2       0       0       0       0       0       0
 10934 ;;Total ram usage:        2 bytes
 10935 ;; Hardware stack levels used:    1
 10936 ;; Hardware stack levels required when called:    3
 10937 ;; This function calls:
 10938 ;;		_ModbusCalcCRC
 10939 ;;		_PortWrite
 10940 ;;		_millis
 10941 ;; This function is called by:
 10942 ;;		_ModbusPoll
 10943 ;;		_ModbusProcess_FC1
 10944 ;;		_ModbusProcess_FC3
 10945 ;;		_ModbusProcess_FC5
 10946 ;;		_ModbusProcess_FC6
 10947 ;;		_ModbusProcess_FC7
 10948 ;;		_ModbusProcess_FC15
 10949 ;;		_ModbusProcess_FC16
 10950 ;;		_ModbusProcess_FC17
 10951 ;;		_ModbusProcess_FC21
 10952 ;;		_ModbusProcess_FC43
 10953 ;;		_ModbusProcess_FC100
 10954 ;;		_ModbusProcess_FC101
 10955 ;;		_ModbusProcess_FC102
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text57
 10960  0028B0                     __ptext57:
 10961                           	opt stack 0
 10962  0028B0                     _ModbusSendTxBuffer:
 10963                           	opt stack 26
 10964                           
 10965                           ;incstack = 0
 10966  0028B0  FFFF               	dw	65535
 10967                           
 10968                           ;ModbusRtu.c: 639: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 10969  0028B2  5070               	movf	__u8BufferSize,w,c
 10970  0028B4  ECAF  F012         	call	_ModbusCalcCRC
 10971  0028B8  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 10972  0028BC  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 10973                           
 10974                           ;ModbusRtu.c: 640: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 10975  0028C0  0E00               	movlw	low __au8Buffer
 10976  0028C2  2470               	addwf	__u8BufferSize,w,c
 10977  0028C4  6ED9               	movwf	fsr2l,c
 10978  0028C6  6ADA               	clrf	fsr2h,c
 10979  0028C8  0E01               	movlw	high __au8Buffer
 10980  0028CA  22DA               	addwfc	fsr2h,f,c
 10981  0028CC  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 10982                           
 10983                           ;ModbusRtu.c: 641: _u8BufferSize++;
 10984  0028D0  2A70               	incf	__u8BufferSize,f,c
 10985                           
 10986                           ;ModbusRtu.c: 642: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 10987  0028D2  0E00               	movlw	low __au8Buffer
 10988  0028D4  2470               	addwf	__u8BufferSize,w,c
 10989  0028D6  6ED9               	movwf	fsr2l,c
 10990  0028D8  6ADA               	clrf	fsr2h,c
 10991  0028DA  0E01               	movlw	high __au8Buffer
 10992  0028DC  22DA               	addwfc	fsr2h,f,c
 10993  0028DE  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 10994                           
 10995                           ;ModbusRtu.c: 643: _u8BufferSize++;
 10996  0028E2  2A70               	incf	__u8BufferSize,f,c
 10997                           
 10998                           ;ModbusRtu.c: 647: PortWrite(_au8Buffer, _u8BufferSize);
 10999  0028E4  0E00               	movlw	low __au8Buffer
 11000  0028E6  6E07               	movwf	PortWrite@buf,c
 11001  0028E8  0E01               	movlw	high __au8Buffer
 11002  0028EA  6E08               	movwf	PortWrite@buf+1,c
 11003  0028EC  C070  F009         	movff	__u8BufferSize,PortWrite@buflen
 11004  0028F0  EC4C  F015         	call	_PortWrite	;wreg free
 11005                           
 11006                           ;ModbusRtu.c: 653: _u8BufferSize = 0;
 11007  0028F4  6A70               	clrf	__u8BufferSize,c
 11008                           
 11009                           ;ModbusRtu.c: 659: _u16OutCnt++;
 11010  0028F6  EF23  F016         	goto	_millis	;wreg free
 11011  0028FA  FFFF               	dw	65535	; errata NOP
 11012  0028FC                     __end_of_ModbusSendTxBuffer:
 11013                           	opt stack 0
 11014                           tblptru	equ	0xFF8
 11015                           tblptrh	equ	0xFF7
 11016                           tblptrl	equ	0xFF6
 11017                           tablat	equ	0xFF5
 11018                           prodh	equ	0xFF4
 11019                           prodl	equ	0xFF3
 11020                           intcon	equ	0xFF2
 11021                           postinc0	equ	0xFEE
 11022                           wreg	equ	0xFE8
 11023                           indf1	equ	0xFE7
 11024                           postinc1	equ	0xFE6
 11025                           postdec1	equ	0xFE5
 11026                           fsr1h	equ	0xFE2
 11027                           fsr1l	equ	0xFE1
 11028                           indf2	equ	0xFDF
 11029                           postinc2	equ	0xFDE
 11030                           postdec2	equ	0xFDD
 11031                           plusw2	equ	0xFDB
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _millis *****************
 11037 ;; Defined at:
 11038 ;;		line 247 in file "interrupts.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;		None
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  ret             4   10[COMRAM] unsigned long 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  4    6[COMRAM] unsigned long 
 11045 ;; Registers used:
 11046 ;;		None
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11052 ;;      Params:         4       0       0       0       0       0       0
 11053 ;;      Locals:         4       0       0       0       0       0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0
 11055 ;;      Totals:         8       0       0       0       0       0       0
 11056 ;;Total ram usage:        8 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    2
 11059 ;; This function calls:
 11060 ;;		Nothing
 11061 ;; This function is called by:
 11062 ;;		_SoundPlayNextStep
 11063 ;;		_main
 11064 ;;		_ModbusPoll
 11065 ;;		_ModbusSendTxBuffer
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text58
 11070  002C46                     __ptext58:
 11071                           	opt stack 0
 11072  002C46                     _millis:
 11073                           	opt stack 28
 11074                           
 11075                           ;incstack = 0
 11076  002C46  FFFF               	dw	65535
 11077                           
 11078                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 11079  002C48  9EF2               	bcf	intcon,7,c	;volatile
 11080                           
 11081                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 11082  002C4A  C0B0  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 11083  002C4E  C0B1  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 11084  002C52  C0B2  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 11085  002C56  C0B3  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 11086                           
 11087                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 11088  002C5A  8EF2               	bsf	intcon,7,c	;volatile
 11089                           
 11090                           ;interrupts.c: 253: return ret;
 11091  002C5C  C00B  F007         	movff	millis@ret,?_millis
 11092  002C60  C00C  F008         	movff	millis@ret+1,?_millis+1
 11093  002C64  C00D  F009         	movff	millis@ret+2,?_millis+2
 11094  002C68  C00E  F00A         	movff	millis@ret+3,?_millis+3
 11095  002C6C  0012               	return		;funcret
 11096  002C6E  FFFF               	dw	65535	; errata NOP
 11097  002C70                     __end_of_millis:
 11098                           	opt stack 0
 11099                           tblptru	equ	0xFF8
 11100                           tblptrh	equ	0xFF7
 11101                           tblptrl	equ	0xFF6
 11102                           tablat	equ	0xFF5
 11103                           prodh	equ	0xFF4
 11104                           prodl	equ	0xFF3
 11105                           intcon	equ	0xFF2
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           indf1	equ	0xFE7
 11109                           postinc1	equ	0xFE6
 11110                           postdec1	equ	0xFE5
 11111                           fsr1h	equ	0xFE2
 11112                           fsr1l	equ	0xFE1
 11113                           indf2	equ	0xFDF
 11114                           postinc2	equ	0xFDE
 11115                           postdec2	equ	0xFDD
 11116                           plusw2	equ	0xFDB
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function _PortWrite *****************
 11122 ;; Defined at:
 11123 ;;		line 101 in file "interrupts.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;  buf             2    6[COMRAM] PTR unsigned char 
 11126 ;;		 -> _au8Buffer(140), 
 11127 ;;  buflen          1    8[COMRAM] unsigned char 
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  i               1    9[COMRAM] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/1
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11139 ;;      Params:         3       0       0       0       0       0       0
 11140 ;;      Locals:         1       0       0       0       0       0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0
 11142 ;;      Totals:         4       0       0       0       0       0       0
 11143 ;;Total ram usage:        4 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    2
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_ModbusSendTxBuffer
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text59
 11154  002A98                     __ptext59:
 11155                           	opt stack 0
 11156  002A98                     _PortWrite:
 11157                           	opt stack 26
 11158                           
 11159                           ;incstack = 0
 11160  002A98  FFFF               	dw	65535
 11161                           
 11162                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 11163  002A9A  8A8B               	bsf	3979,5,c	;volatile
 11164                           
 11165                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 11166  002A9C  0E06               	movlw	6
 11167  002A9E                     u6067:
 11168  002A9E  FFFF               	dw	65535	; errata NOP
 11169  002AA0  2EE8               	decfsz	wreg,f,c
 11170  002AA2  D7FD               	goto	u6067
 11171  002AA4  F000               	nop	
 11172                           
 11173                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 11174  002AA6  6A0A               	clrf	PortWrite@i,c
 11175  002AA8  D00C               	goto	l5552
 11176  002AAA                     l74:
 11177  002AAA  FFFF               	dw	65535	; assembler added errata NOP
 11178  002AAC  A2AC               	btfss	4012,1,c	;volatile
 11179  002AAE  D7FD               	goto	l74
 11180                           
 11181                           ;interrupts.c: 108: TXREG = buf[i];
 11182  002AB0  500A               	movf	PortWrite@i,w,c
 11183  002AB2  2407               	addwf	PortWrite@buf,w,c
 11184  002AB4  6ED9               	movwf	fsr2l,c
 11185  002AB6  0E00               	movlw	0
 11186  002AB8  2008               	addwfc	PortWrite@buf+1,w,c
 11187  002ABA  6EDA               	movwf	fsr2h,c
 11188  002ABC  50DF               	movf	indf2,w,c
 11189  002ABE  6EAD               	movwf	4013,c	;volatile
 11190  002AC0  2A0A               	incf	PortWrite@i,f,c
 11191  002AC2                     l5552:
 11192  002AC2  FFFF               	dw	65535	; assembler added errata NOP
 11193  002AC4  5009               	movf	PortWrite@buflen,w,c
 11194  002AC6  5C0A               	subwf	PortWrite@i,w,c
 11195  002AC8  E3F0               	bnc	l74
 11196  002ACA                     l78:
 11197  002ACA  FFFF               	dw	65535	; assembler added errata NOP
 11198  002ACC  A2AC               	btfss	4012,1,c	;volatile
 11199  002ACE  D7FD               	goto	l78
 11200                           
 11201                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 11202  002AD0  9A8B               	bcf	3979,5,c	;volatile
 11203  002AD2  0012               	return		;funcret
 11204  002AD4  FFFF               	dw	65535	; errata NOP
 11205  002AD6                     __end_of_PortWrite:
 11206                           	opt stack 0
 11207                           tblptru	equ	0xFF8
 11208                           tblptrh	equ	0xFF7
 11209                           tblptrl	equ	0xFF6
 11210                           tablat	equ	0xFF5
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           intcon	equ	0xFF2
 11214                           postinc0	equ	0xFEE
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           postinc1	equ	0xFE6
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           plusw2	equ	0xFDB
 11225                           fsr2h	equ	0xFDA
 11226                           fsr2l	equ	0xFD9
 11227                           status	equ	0xFD8
 11228                           
 11229 ;; *************** function _ModbusCalcCRC *****************
 11230 ;; Defined at:
 11231 ;;		line 744 in file "ModbusRtu.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;  u8length        1    wreg     unsigned char 
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;  u8length        1   10[COMRAM] unsigned char 
 11236 ;;  j               1   16[COMRAM] unsigned char 
 11237 ;;  i               1   15[COMRAM] unsigned char 
 11238 ;;  temp            2   17[COMRAM] unsigned int 
 11239 ;;  flag            2   13[COMRAM] unsigned int 
 11240 ;;  temp2           2   11[COMRAM] unsigned int 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  2    6[COMRAM] unsigned short 
 11243 ;; Registers used:
 11244 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11250 ;;      Params:         2       0       0       0       0       0       0
 11251 ;;      Locals:         9       0       0       0       0       0       0
 11252 ;;      Temps:          2       0       0       0       0       0       0
 11253 ;;      Totals:        13       0       0       0       0       0       0
 11254 ;;Total ram usage:       13 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    2
 11257 ;; This function calls:
 11258 ;;		Nothing
 11259 ;; This function is called by:
 11260 ;;		_ModbusSendTxBuffer
 11261 ;;		_ModbusValidateRequest
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text60
 11266  00255E                     __ptext60:
 11267                           	opt stack 0
 11268  00255E                     _ModbusCalcCRC:
 11269                           	opt stack 26
 11270                           
 11271                           ;incstack = 0
 11272  00255E  FFFF               	dw	65535
 11273                           
 11274                           ;ModbusCalcCRC@u8length stored from wreg
 11275  002560  6E0B               	movwf	ModbusCalcCRC@u8length,c
 11276                           
 11277                           ;ModbusRtu.c: 746: unsigned int temp, temp2, flag;
 11278                           ;ModbusRtu.c: 747: temp = 0xFFFF;
 11279  002562  6812               	setf	ModbusCalcCRC@temp,c
 11280  002564  6813               	setf	ModbusCalcCRC@temp+1,c
 11281                           
 11282                           ;ModbusRtu.c: 748: for (uint8_t i = 0; i < u8length; i++)
 11283  002566  6A10               	clrf	ModbusCalcCRC@i,c
 11284  002568  D01E               	goto	l5682
 11285  00256A                     l5660:
 11286                           
 11287                           ;ModbusRtu.c: 749: {
 11288                           ;ModbusRtu.c: 750: temp = temp ^ _au8Buffer[i];
 11289  00256A  0E00               	movlw	low __au8Buffer
 11290  00256C  2410               	addwf	ModbusCalcCRC@i,w,c
 11291  00256E  6ED9               	movwf	fsr2l,c
 11292  002570  6ADA               	clrf	fsr2h,c
 11293  002572  0E01               	movlw	high __au8Buffer
 11294  002574  22DA               	addwfc	fsr2h,f,c
 11295  002576  50DF               	movf	indf2,w,c
 11296  002578  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 11297                           
 11298                           ;ModbusRtu.c: 751: for (uint8_t j = 1; j <= 8; j++)
 11299  00257A  0E01               	movlw	1
 11300  00257C  6E11               	movwf	ModbusCalcCRC@j,c
 11301  00257E                     l5668:
 11302  00257E  FFFF               	dw	65535	; assembler added errata NOP
 11303                           
 11304                           ;ModbusRtu.c: 752: {
 11305                           ;ModbusRtu.c: 753: flag = temp & 0x0001;
 11306  002580  0E01               	movlw	1
 11307  002582  1412               	andwf	ModbusCalcCRC@temp,w,c
 11308  002584  6E0E               	movwf	ModbusCalcCRC@flag,c
 11309  002586  6A0F               	clrf	ModbusCalcCRC@flag+1,c
 11310                           
 11311                           ;ModbusRtu.c: 754: temp >>= 1;
 11312  002588  90D8               	bcf	status,0,c
 11313  00258A  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 11314  00258C  3212               	rrcf	ModbusCalcCRC@temp,f,c
 11315                           
 11316                           ;ModbusRtu.c: 755: if (flag)
 11317  00258E  500E               	movf	ModbusCalcCRC@flag,w,c
 11318  002590  100F               	iorwf	ModbusCalcCRC@flag+1,w,c
 11319  002592  E004               	bz	l5676
 11320                           
 11321                           ;ModbusRtu.c: 756: temp ^= 0xA001;
 11322  002594  0E01               	movlw	1
 11323  002596  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 11324  002598  0EA0               	movlw	160
 11325  00259A  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 11326  00259C                     l5676:
 11327  00259C  2A11               	incf	ModbusCalcCRC@j,f,c
 11328  00259E  0E08               	movlw	8
 11329  0025A0  6411               	cpfsgt	ModbusCalcCRC@j,c
 11330  0025A2  D7ED               	goto	l5668
 11331  0025A4  2A10               	incf	ModbusCalcCRC@i,f,c
 11332  0025A6                     l5682:
 11333  0025A6  FFFF               	dw	65535	; assembler added errata NOP
 11334  0025A8  500B               	movf	ModbusCalcCRC@u8length,w,c
 11335  0025AA  5C10               	subwf	ModbusCalcCRC@i,w,c
 11336  0025AC  E3DE               	bnc	l5660
 11337                           
 11338                           ;ModbusRtu.c: 757: }
 11339                           ;ModbusRtu.c: 758: }
 11340                           ;ModbusRtu.c: 760: temp2 = temp >> 8;
 11341  0025AE  C013  F00C         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 11342  0025B2  6A0D               	clrf	ModbusCalcCRC@temp2+1,c
 11343                           
 11344                           ;ModbusRtu.c: 761: temp = (temp << 8) | temp2;
 11345  0025B4  5012               	movf	ModbusCalcCRC@temp,w,c
 11346  0025B6  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 11347  0025B8  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 11348  0025BA  500C               	movf	ModbusCalcCRC@temp2,w,c
 11349  0025BC  1009               	iorwf	??_ModbusCalcCRC,w,c
 11350  0025BE  6E12               	movwf	ModbusCalcCRC@temp,c
 11351  0025C0  500D               	movf	ModbusCalcCRC@temp2+1,w,c
 11352  0025C2  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 11353  0025C4  6E13               	movwf	ModbusCalcCRC@temp+1,c
 11354                           
 11355                           ;ModbusRtu.c: 765: return temp;
 11356  0025C6  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 11357  0025CA  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 11358  0025CE  0012               	return		;funcret
 11359  0025D0  FFFF               	dw	65535	; errata NOP
 11360  0025D2                     __end_of_ModbusCalcCRC:
 11361                           	opt stack 0
 11362                           tblptru	equ	0xFF8
 11363                           tblptrh	equ	0xFF7
 11364                           tblptrl	equ	0xFF6
 11365                           tablat	equ	0xFF5
 11366                           prodh	equ	0xFF4
 11367                           prodl	equ	0xFF3
 11368                           intcon	equ	0xFF2
 11369                           postinc0	equ	0xFEE
 11370                           wreg	equ	0xFE8
 11371                           indf1	equ	0xFE7
 11372                           postinc1	equ	0xFE6
 11373                           postdec1	equ	0xFE5
 11374                           fsr1h	equ	0xFE2
 11375                           fsr1l	equ	0xFE1
 11376                           indf2	equ	0xFDF
 11377                           postinc2	equ	0xFDE
 11378                           postdec2	equ	0xFDD
 11379                           plusw2	equ	0xFDB
 11380                           fsr2h	equ	0xFDA
 11381                           fsr2l	equ	0xFD9
 11382                           status	equ	0xFD8
 11383                           
 11384 ;; *************** function _ModbusGetRxBufferHeader *****************
 11385 ;; Defined at:
 11386 ;;		line 577 in file "ModbusRtu.c"
 11387 ;; Parameters:    Size  Location     Type
 11388 ;;		None
 11389 ;; Auto vars:     Size  Location     Type
 11390 ;;  i               1    8[COMRAM] unsigned char 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  1    wreg      unsigned char 
 11393 ;; Registers used:
 11394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11395 ;; Tracked objects:
 11396 ;;		On entry : F/0
 11397 ;;		On exit  : F/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11400 ;;      Params:         0       0       0       0       0       0       0
 11401 ;;      Locals:         1       0       0       0       0       0       0
 11402 ;;      Temps:          1       0       0       0       0       0       0
 11403 ;;      Totals:         2       0       0       0       0       0       0
 11404 ;;Total ram usage:        2 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    3
 11407 ;; This function calls:
 11408 ;;		_PortAvailable
 11409 ;;		_PortRead
 11410 ;; This function is called by:
 11411 ;;		_ModbusPoll
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           	psect	text61
 11416  002B12                     __ptext61:
 11417                           	opt stack 0
 11418  002B12                     _ModbusGetRxBufferHeader:
 11419                           	opt stack 26
 11420                           
 11421                           ;incstack = 0
 11422  002B12  FFFF               	dw	65535
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;ModbusRtu.c: 579: _u8BufferSize = 0;
 11426  002B14  6A70               	clrf	__u8BufferSize,c
 11427                           
 11428                           ;ModbusRtu.c: 580: for(uint8_t i = 0; i < 4; i++)
 11429  002B16  6A09               	clrf	ModbusGetRxBufferHeader@i,c
 11430  002B18                     l6130:
 11431  002B18  FFFF               	dw	65535	; assembler added errata NOP
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;ModbusRtu.c: 581: {
 11435                           ;ModbusRtu.c: 582: if(!PortAvailable())
 11436  002B1A  ECDF  F016         	call	_PortAvailable	;wreg free
 11437  002B1E  0900               	iorlw	0
 11438  002B20  E102               	bnz	l6136
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;ModbusRtu.c: 583: return ERR_EXCEPTION;
 11442  002B22  0EFB               	movlw	251
 11443  002B24  D011               	goto	l767
 11444  002B26                     l6136:
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;ModbusRtu.c: 584: _au8Buffer[ _u8BufferSize ] = PortRead();
 11448  002B26  ECA7  F015         	call	_PortRead	;wreg free
 11449  002B2A  6E08               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 11450  002B2C  0E00               	movlw	low __au8Buffer
 11451  002B2E  2470               	addwf	__u8BufferSize,w,c
 11452  002B30  6ED9               	movwf	fsr2l,c
 11453  002B32  6ADA               	clrf	fsr2h,c
 11454  002B34  0E01               	movlw	high __au8Buffer
 11455  002B36  22DA               	addwfc	fsr2h,f,c
 11456  002B38  C008  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;ModbusRtu.c: 585: _u8BufferSize++;
 11460  002B3C  2A70               	incf	__u8BufferSize,f,c
 11461                           
 11462                           ; BSR set to: 0
 11463  002B3E  2A09               	incf	ModbusGetRxBufferHeader@i,f,c
 11464                           
 11465                           ; BSR set to: 0
 11466  002B40  0E03               	movlw	3
 11467  002B42  6409               	cpfsgt	ModbusGetRxBufferHeader@i,c
 11468  002B44  D7E9               	goto	l6130
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;ModbusRtu.c: 586: }
 11472                           ;ModbusRtu.c: 587: return _u8BufferSize;
 11473  002B46  5070               	movf	__u8BufferSize,w,c
 11474  002B48                     l767:
 11475  002B48  FFFF               	dw	65535	; assembler added errata NOP
 11476                           
 11477                           ; BSR set to: 0
 11478  002B4A  0012               	return		;funcret
 11479  002B4C  FFFF               	dw	65535	; errata NOP
 11480  002B4E                     __end_of_ModbusGetRxBufferHeader:
 11481                           	opt stack 0
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           intcon	equ	0xFF2
 11489                           postinc0	equ	0xFEE
 11490                           wreg	equ	0xFE8
 11491                           indf1	equ	0xFE7
 11492                           postinc1	equ	0xFE6
 11493                           postdec1	equ	0xFE5
 11494                           fsr1h	equ	0xFE2
 11495                           fsr1l	equ	0xFE1
 11496                           indf2	equ	0xFDF
 11497                           postinc2	equ	0xFDE
 11498                           postdec2	equ	0xFDD
 11499                           plusw2	equ	0xFDB
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _ModbusGetRxBuffer *****************
 11505 ;; Defined at:
 11506 ;;		line 597 in file "ModbusRtu.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;		None
 11509 ;; Auto vars:     Size  Location     Type
 11510 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 11511 ;; Return value:  Size  Location     Type
 11512 ;;                  1    wreg      unsigned char 
 11513 ;; Registers used:
 11514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11515 ;; Tracked objects:
 11516 ;;		On entry : F/1
 11517 ;;		On exit  : F/0
 11518 ;;		Unchanged: 0/0
 11519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11520 ;;      Params:         0       0       0       0       0       0       0
 11521 ;;      Locals:         1       0       0       0       0       0       0
 11522 ;;      Temps:          1       0       0       0       0       0       0
 11523 ;;      Totals:         2       0       0       0       0       0       0
 11524 ;;Total ram usage:        2 bytes
 11525 ;; Hardware stack levels used:    1
 11526 ;; Hardware stack levels required when called:    3
 11527 ;; This function calls:
 11528 ;;		_PortAvailable
 11529 ;;		_PortRead
 11530 ;; This function is called by:
 11531 ;;		_ModbusPoll
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text62
 11536  0029D0                     __ptext62:
 11537                           	opt stack 0
 11538  0029D0                     _ModbusGetRxBuffer:
 11539                           	opt stack 26
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;incstack = 0
 11543  0029D0  FFFF               	dw	65535
 11544                           
 11545                           ; BSR set to: 1
 11546                           ;ModbusRtu.c: 599: bool bBuffOverflow = 0;
 11547  0029D2  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 11548                           
 11549                           ; BSR set to: 1
 11550                           ;ModbusRtu.c: 604: _u8BufferSize = 4;
 11551  0029D4  0E04               	movlw	4
 11552  0029D6  6E70               	movwf	__u8BufferSize,c
 11553                           
 11554                           ;ModbusRtu.c: 606: while (PortAvailable())
 11555  0029D8  D011               	goto	l6160
 11556  0029DA                     l6152:
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;ModbusRtu.c: 607: {
 11560                           ;ModbusRtu.c: 608: _au8Buffer[ _u8BufferSize ] = PortRead();
 11561  0029DA  ECA7  F015         	call	_PortRead	;wreg free
 11562  0029DE  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 11563  0029E0  0E00               	movlw	low __au8Buffer
 11564  0029E2  2470               	addwf	__u8BufferSize,w,c
 11565  0029E4  6ED9               	movwf	fsr2l,c
 11566  0029E6  6ADA               	clrf	fsr2h,c
 11567  0029E8  0E01               	movlw	high __au8Buffer
 11568  0029EA  22DA               	addwfc	fsr2h,f,c
 11569  0029EC  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;ModbusRtu.c: 609: _u8BufferSize++;
 11573  0029F0  2A70               	incf	__u8BufferSize,f,c
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;ModbusRtu.c: 610: if (_u8BufferSize >= 140)
 11577  0029F2  0E8B               	movlw	139
 11578  0029F4  6470               	cpfsgt	__u8BufferSize,c
 11579  0029F6  D002               	goto	l6160
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;ModbusRtu.c: 611: bBuffOverflow = 1;
 11583  0029F8  0E01               	movlw	1
 11584  0029FA  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 11585  0029FC                     l6160:
 11586  0029FC  FFFF               	dw	65535	; assembler added errata NOP
 11587  0029FE  ECDF  F016         	call	_PortAvailable	;wreg free
 11588  002A02  0900               	iorlw	0
 11589  002A04  E1EA               	bnz	l6152
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;ModbusRtu.c: 615: {
 11593                           ;ModbusRtu.c: 616: _u16errCnt++;
 11594  002A06  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 11595  002A08  E002               	bz	l6168
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;ModbusRtu.c: 617: return ERR_BUFF_OVERFLOW;
 11599  002A0A  0EFD               	movlw	253
 11600  002A0C  D001               	goto	l775
 11601  002A0E                     l6168:
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;ModbusRtu.c: 618: }
 11605                           ;ModbusRtu.c: 619: return _u8BufferSize;
 11606  002A0E  5070               	movf	__u8BufferSize,w,c
 11607  002A10                     l775:
 11608  002A10  FFFF               	dw	65535	; assembler added errata NOP
 11609                           
 11610                           ; BSR set to: 0
 11611  002A12  0012               	return		;funcret
 11612  002A14  FFFF               	dw	65535	; errata NOP
 11613  002A16                     __end_of_ModbusGetRxBuffer:
 11614                           	opt stack 0
 11615                           tblptru	equ	0xFF8
 11616                           tblptrh	equ	0xFF7
 11617                           tblptrl	equ	0xFF6
 11618                           tablat	equ	0xFF5
 11619                           prodh	equ	0xFF4
 11620                           prodl	equ	0xFF3
 11621                           intcon	equ	0xFF2
 11622                           postinc0	equ	0xFEE
 11623                           wreg	equ	0xFE8
 11624                           indf1	equ	0xFE7
 11625                           postinc1	equ	0xFE6
 11626                           postdec1	equ	0xFE5
 11627                           fsr1h	equ	0xFE2
 11628                           fsr1l	equ	0xFE1
 11629                           indf2	equ	0xFDF
 11630                           postinc2	equ	0xFDE
 11631                           postdec2	equ	0xFDD
 11632                           plusw2	equ	0xFDB
 11633                           fsr2h	equ	0xFDA
 11634                           fsr2l	equ	0xFD9
 11635                           status	equ	0xFD8
 11636                           
 11637 ;; *************** function _PortRead *****************
 11638 ;; Defined at:
 11639 ;;		line 57 in file "interrupts.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;		None
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;  ret             1    6[COMRAM] unsigned char 
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  1    wreg      unsigned char 
 11646 ;; Registers used:
 11647 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11648 ;; Tracked objects:
 11649 ;;		On entry : E/0
 11650 ;;		On exit  : F/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11653 ;;      Params:         0       0       0       0       0       0       0
 11654 ;;      Locals:         1       0       0       0       0       0       0
 11655 ;;      Temps:          0       0       0       0       0       0       0
 11656 ;;      Totals:         1       0       0       0       0       0       0
 11657 ;;Total ram usage:        1 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:    2
 11660 ;; This function calls:
 11661 ;;		Nothing
 11662 ;; This function is called by:
 11663 ;;		_ModbusGetRxBufferHeader
 11664 ;;		_ModbusGetRxBuffer
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           	psect	text63
 11669  002B4E                     __ptext63:
 11670                           	opt stack 0
 11671  002B4E                     _PortRead:
 11672                           	opt stack 26
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;incstack = 0
 11676  002B4E  FFFF               	dw	65535
 11677                           
 11678                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 11679  002B50  9EF2               	bcf	intcon,7,c	;volatile
 11680                           
 11681                           ;interrupts.c: 60: if(UartBufferLen > 0)
 11682  002B52  0100               	movlb	0	; () banked
 11683  002B54  51CA               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11684  002B56  E012               	bz	l63
 11685                           
 11686                           ; BSR set to: 0
 11687                           ;interrupts.c: 61: {
 11688                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 11689  002B58  0E00               	movlw	low _UartRingBuffer
 11690  002B5A  25CB               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 11691  002B5C  6ED9               	movwf	fsr2l,c
 11692  002B5E  6ADA               	clrf	fsr2h,c
 11693  002B60  0E02               	movlw	high _UartRingBuffer
 11694  002B62  22DA               	addwfc	fsr2h,f,c
 11695  002B64  50DF               	movf	indf2,w,c
 11696  002B66  6E07               	movwf	PortRead@ret,c
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;interrupts.c: 64: UartBufferLen--;
 11700  002B68  07CA               	decf	_UartBufferLen& (0+255),f,b	;volatile
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 11704  002B6A  29CB               	incf	_UartBufferTail& (0+255),w,b
 11705  002B6C  E102               	bnz	l5772
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;interrupts.c: 66: UartBufferTail = 0;
 11709  002B6E  6BCB               	clrf	_UartBufferTail& (0+255),b	;volatile
 11710  002B70  D001               	goto	l5774
 11711  002B72                     l5772:
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;interrupts.c: 67: else
 11715                           ;interrupts.c: 68: UartBufferTail++;
 11716  002B72  2BCB               	incf	_UartBufferTail& (0+255),f,b	;volatile
 11717  002B74                     l5774:
 11718  002B74  FFFF               	dw	65535	; assembler added errata NOP
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 11722  002B76  8EF2               	bsf	intcon,7,c	;volatile
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;interrupts.c: 70: return ret;
 11726  002B78  5007               	movf	PortRead@ret,w,c
 11727  002B7A  D002               	goto	l66
 11728  002B7C                     l63:
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;interrupts.c: 71: }
 11732                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 11733  002B7C  8EF2               	bsf	intcon,7,c	;volatile
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;interrupts.c: 73: return 0;
 11737  002B7E  0E00               	movlw	0
 11738  002B80                     l66:
 11739  002B80  FFFF               	dw	65535	; assembler added errata NOP
 11740                           
 11741                           ; BSR set to: 0
 11742  002B82  0012               	return		;funcret
 11743  002B84  FFFF               	dw	65535	; errata NOP
 11744  002B86                     __end_of_PortRead:
 11745                           	opt stack 0
 11746                           tblptru	equ	0xFF8
 11747                           tblptrh	equ	0xFF7
 11748                           tblptrl	equ	0xFF6
 11749                           tablat	equ	0xFF5
 11750                           prodh	equ	0xFF4
 11751                           prodl	equ	0xFF3
 11752                           intcon	equ	0xFF2
 11753                           postinc0	equ	0xFEE
 11754                           wreg	equ	0xFE8
 11755                           indf1	equ	0xFE7
 11756                           postinc1	equ	0xFE6
 11757                           postdec1	equ	0xFE5
 11758                           fsr1h	equ	0xFE2
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           plusw2	equ	0xFDB
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function _PortAvailable *****************
 11769 ;; Defined at:
 11770 ;;		line 52 in file "interrupts.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;		None
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;		None
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  1    wreg      unsigned char 
 11777 ;; Registers used:
 11778 ;;		wreg, status,2
 11779 ;; Tracked objects:
 11780 ;;		On entry : E/0
 11781 ;;		On exit  : F/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11784 ;;      Params:         0       0       0       0       0       0       0
 11785 ;;      Locals:         0       0       0       0       0       0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0
 11787 ;;      Totals:         0       0       0       0       0       0       0
 11788 ;;Total ram usage:        0 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    2
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_ModbusPoll
 11795 ;;		_ModbusGetRxBufferHeader
 11796 ;;		_ModbusGetRxBuffer
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text64
 11801  002DBE                     __ptext64:
 11802                           	opt stack 0
 11803  002DBE                     _PortAvailable:
 11804                           	opt stack 27
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;incstack = 0
 11808  002DBE  FFFF               	dw	65535
 11809                           
 11810                           ;interrupts.c: 54: return UartBufferLen;
 11811  002DC0  0100               	movlb	0	; () banked
 11812  002DC2  51CA               	movf	_UartBufferLen& (0+255),w,b	;volatile
 11813                           
 11814                           ; BSR set to: 0
 11815  002DC4  0012               	return		;funcret
 11816  002DC6  FFFF               	dw	65535	; errata NOP
 11817  002DC8                     __end_of_PortAvailable:
 11818                           	opt stack 0
 11819                           tblptru	equ	0xFF8
 11820                           tblptrh	equ	0xFF7
 11821                           tblptrl	equ	0xFF6
 11822                           tablat	equ	0xFF5
 11823                           prodh	equ	0xFF4
 11824                           prodl	equ	0xFF3
 11825                           intcon	equ	0xFF2
 11826                           postinc0	equ	0xFEE
 11827                           wreg	equ	0xFE8
 11828                           indf1	equ	0xFE7
 11829                           postinc1	equ	0xFE6
 11830                           postdec1	equ	0xFE5
 11831                           fsr1h	equ	0xFE2
 11832                           fsr1l	equ	0xFE1
 11833                           indf2	equ	0xFDF
 11834                           postinc2	equ	0xFDE
 11835                           postdec2	equ	0xFDD
 11836                           plusw2	equ	0xFDB
 11837                           fsr2h	equ	0xFDA
 11838                           fsr2l	equ	0xFD9
 11839                           status	equ	0xFD8
 11840                           
 11841 ;; *************** function _ModbusBuildException *****************
 11842 ;; Defined at:
 11843 ;;		line 896 in file "ModbusRtu.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  u8exception     1    wreg     unsigned char 
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;  u8exception     1    6[COMRAM] unsigned char 
 11848 ;;  u8func          1    7[COMRAM] unsigned char 
 11849 ;; Return value:  Size  Location     Type
 11850 ;;                  1    wreg      void 
 11851 ;; Registers used:
 11852 ;;		wreg, status,2, status,0
 11853 ;; Tracked objects:
 11854 ;;		On entry : 0/0
 11855 ;;		On exit  : F/1
 11856 ;;		Unchanged: 0/0
 11857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11858 ;;      Params:         0       0       0       0       0       0       0
 11859 ;;      Locals:         2       0       0       0       0       0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0
 11861 ;;      Totals:         2       0       0       0       0       0       0
 11862 ;;Total ram usage:        2 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:    2
 11865 ;; This function calls:
 11866 ;;		Nothing
 11867 ;; This function is called by:
 11868 ;;		_ModbusPoll
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           	psect	text65
 11873  002CBC                     __ptext65:
 11874                           	opt stack 0
 11875  002CBC                     _ModbusBuildException:
 11876                           	opt stack 27
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;incstack = 0
 11880  002CBC  FFFF               	dw	65535
 11881                           
 11882                           ;ModbusBuildException@u8exception stored from wreg
 11883  002CBE  6E07               	movwf	ModbusBuildException@u8exception,c
 11884                           
 11885                           ;ModbusRtu.c: 898: uint8_t u8func = _au8Buffer[ FUNC ];
 11886  002CC0  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 11887                           
 11888                           ;ModbusRtu.c: 900: _au8Buffer[ ID ] = _u8id;
 11889  002CC4  C0D6  F100         	movff	__u8id,__au8Buffer
 11890                           
 11891                           ;ModbusRtu.c: 901: _au8Buffer[ FUNC ] = u8func + 0x80;
 11892  002CC8  5008               	movf	ModbusBuildException@u8func,w,c
 11893  002CCA  0F80               	addlw	128
 11894  002CCC  0101               	movlb	1	; () banked
 11895  002CCE  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 11896                           
 11897                           ; BSR set to: 1
 11898                           ;ModbusRtu.c: 902: _au8Buffer[ 2 ] = u8exception;
 11899  002CD0  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 11900                           
 11901                           ; BSR set to: 1
 11902                           ;ModbusRtu.c: 903: _u8BufferSize = EXCEPTION_SIZE;
 11903  002CD4  0E03               	movlw	3
 11904  002CD6  6E70               	movwf	__u8BufferSize,c
 11905                           
 11906                           ; BSR set to: 1
 11907  002CD8  0C03               	retlw	3	;funcret
 11908  002CDA  FFFF               	dw	65535	; errata NOP
 11909  002CDC                     __end_of_ModbusBuildException:
 11910                           	opt stack 0
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           intcon	equ	0xFF2
 11918                           postinc0	equ	0xFEE
 11919                           wreg	equ	0xFE8
 11920                           indf1	equ	0xFE7
 11921                           postinc1	equ	0xFE6
 11922                           postdec1	equ	0xFE5
 11923                           fsr1h	equ	0xFE2
 11924                           fsr1l	equ	0xFE1
 11925                           indf2	equ	0xFDF
 11926                           postinc2	equ	0xFDE
 11927                           postdec2	equ	0xFDD
 11928                           plusw2	equ	0xFDB
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function _InitApp *****************
 11934 ;; Defined at:
 11935 ;;		line 66 in file "user.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;		None
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  i               1    6[COMRAM] unsigned char 
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  1    wreg      void 
 11942 ;; Registers used:
 11943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11944 ;; Tracked objects:
 11945 ;;		On entry : 0/0
 11946 ;;		On exit  : 0/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11949 ;;      Params:         0       0       0       0       0       0       0
 11950 ;;      Locals:         1       0       0       0       0       0       0
 11951 ;;      Temps:          0       0       0       0       0       0       0
 11952 ;;      Totals:         1       0       0       0       0       0       0
 11953 ;;Total ram usage:        1 bytes
 11954 ;; Hardware stack levels used:    1
 11955 ;; Hardware stack levels required when called:    3
 11956 ;; This function calls:
 11957 ;;		_InitUartBuffer
 11958 ;;		_PortBegin
 11959 ;; This function is called by:
 11960 ;;		_main
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text66
 11965  00245C                     __ptext66:
 11966                           	opt stack 0
 11967  00245C                     _InitApp:
 11968                           	opt stack 27
 11969                           
 11970                           ; BSR set to: 1
 11971                           ;incstack = 0
 11972  00245C  FFFF               	dw	65535
 11973                           
 11974                           ;user.c: 77: INTCONbits.PEIE = 1;
 11975  00245E  8CF2               	bsf	intcon,6,c	;volatile
 11976                           
 11977                           ;user.c: 78: (INTCONbits.GIE = 1);
 11978  002460  8EF2               	bsf	intcon,7,c	;volatile
 11979                           
 11980                           ;user.c: 79: RCONbits.IPEN = 1;
 11981  002462  8ED0               	bsf	4048,7,c	;volatile
 11982                           
 11983                           ;user.c: 84: T1CONbits.RD16 = 1;
 11984  002464  8ECD               	bsf	4045,7,c	;volatile
 11985                           
 11986                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 11987  002466  94CD               	bcf	4045,2,c	;volatile
 11988                           
 11989                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 11990  002468  92CD               	bcf	4045,1,c	;volatile
 11991                           
 11992                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 11993  00246A  0ECF               	movlw	-49
 11994  00246C  16CD               	andwf	4045,f,c	;volatile
 11995                           
 11996                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 11997  00246E  809D               	bsf	3997,0,c	;volatile
 11998                           
 11999                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 12000  002470  809F               	bsf	3999,0,c	;volatile
 12001                           
 12002                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 12003  002472  0EF6               	movlw	246
 12004  002474  6ECF               	movwf	4047,c	;volatile
 12005  002476  0E3C               	movlw	60
 12006  002478  6ECE               	movwf	4046,c	;volatile
 12007                           
 12008                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 12009  00247A  909E               	bcf	3998,0,c	;volatile
 12010                           
 12011                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 12012  00247C  80CD               	bsf	4045,0,c	;volatile
 12013                           
 12014                           ;user.c: 103: T0CONbits.T08BIT = 0;
 12015  00247E  9CD5               	bcf	4053,6,c	;volatile
 12016                           
 12017                           ;user.c: 104: T0CONbits.T0CS = 0;
 12018  002480  9AD5               	bcf	4053,5,c	;volatile
 12019                           
 12020                           ;user.c: 106: T0CONbits.PSA = 0;
 12021  002482  96D5               	bcf	4053,3,c	;volatile
 12022                           
 12023                           ;user.c: 117: T0CONbits.T0PS = 7;
 12024  002484  0E07               	movlw	7
 12025  002486  12D5               	iorwf	4053,f,c	;volatile
 12026                           
 12027                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 12028  002488  8AF2               	bsf	intcon,5,c	;volatile
 12029                           
 12030                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 12031  00248A  84F1               	bsf	intcon2,2,c	;volatile
 12032                           
 12033                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + - 10) * 6)>>8),TMR0L=((0x10
      +                          000 - (10000000L/4 / 256 + - 10) * 6)&0xFF)));
 12034  00248C  0E1B               	movlw	27
 12035  00248E  6ED7               	movwf	4055,c	;volatile
 12036  002490  0E5E               	movlw	94
 12037  002492  6ED6               	movwf	4054,c	;volatile
 12038                           
 12039                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 12040  002494  94F2               	bcf	intcon,2,c	;volatile
 12041                           
 12042                           ;user.c: 133: InitUartBuffer();
 12043  002496  ECD8  F016         	call	_InitUartBuffer	;wreg free
 12044                           
 12045                           ;user.c: 135: PortBegin();
 12046  00249A  EC8A  F016         	call	_PortBegin	;wreg free
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;user.c: 136: PIE1bits.RCIE = 1;
 12050  00249E  8A9D               	bsf	3997,5,c	;volatile
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;user.c: 138: IPR1bits.RCIP = 0;
 12054  0024A0  9A9F               	bcf	3999,5,c	;volatile
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 12058  0024A2  6A07               	clrf	InitApp@i,c
 12059  0024A4                     l7028:
 12060  0024A4  FFFF               	dw	65535	; assembler added errata NOP
 12061                           
 12062                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 12063  0024A6  5007               	movf	InitApp@i,w,c
 12064  0024A8  0D02               	mullw	2
 12065  0024AA  0EAA               	movlw	low __MODBUSInputRegs
 12066  0024AC  24F3               	addwf	prodl,w,c
 12067  0024AE  6ED9               	movwf	fsr2l,c
 12068  0024B0  0E01               	movlw	high __MODBUSInputRegs
 12069  0024B2  20F4               	addwfc	prodh,w,c
 12070  0024B4  6EDA               	movwf	fsr2h,c
 12071  0024B6  6ADE               	clrf	postinc2,c
 12072  0024B8  6ADD               	clrf	postdec2,c
 12073  0024BA  2A07               	incf	InitApp@i,f,c
 12074  0024BC  0E0E               	movlw	14
 12075  0024BE  6407               	cpfsgt	InitApp@i,c
 12076  0024C0  D7F1               	goto	l7028
 12077                           
 12078                           ;user.c: 149: TRISB = 0;
 12079  0024C2  6A93               	clrf	3987,c	;volatile
 12080                           
 12081                           ;user.c: 152: LATAbits.LATA0 = 0;
 12082  0024C4  9089               	bcf	3977,0,c	;volatile
 12083                           
 12084                           ;user.c: 153: LATAbits.LATA1 = 0;
 12085  0024C6  9289               	bcf	3977,1,c	;volatile
 12086                           
 12087                           ;user.c: 154: LATAbits.LATA2 = 0;
 12088  0024C8  9489               	bcf	3977,2,c	;volatile
 12089                           
 12090                           ;user.c: 155: LATAbits.LATA3 = 0;
 12091  0024CA  9689               	bcf	3977,3,c	;volatile
 12092                           
 12093                           ;user.c: 156: TRISAbits.RA0 = 0;
 12094  0024CC  9092               	bcf	3986,0,c	;volatile
 12095                           
 12096                           ;user.c: 157: TRISAbits.RA1 = 0;
 12097  0024CE  9292               	bcf	3986,1,c	;volatile
 12098                           
 12099                           ;user.c: 158: TRISAbits.RA2 = 0;
 12100  0024D0  9492               	bcf	3986,2,c	;volatile
 12101                           
 12102                           ;user.c: 159: TRISAbits.RA3 = 0;
 12103  0024D2  9692               	bcf	3986,3,c	;volatile
 12104                           
 12105                           ;user.c: 161: TRISCbits.RC3 = 1;
 12106  0024D4  8694               	bsf	3988,3,c	;volatile
 12107                           
 12108                           ;user.c: 162: TRISCbits.RC1 = 1;
 12109  0024D6  8294               	bsf	3988,1,c	;volatile
 12110                           
 12111                           ;user.c: 163: TRISCbits.RC0 = 0;
 12112  0024D8  9094               	bcf	3988,0,c	;volatile
 12113                           
 12114                           ;user.c: 165: LATCbits.LATC2 = 0;
 12115  0024DA  948B               	bcf	3979,2,c	;volatile
 12116  0024DC  0012               	return		;funcret
 12117  0024DE  FFFF               	dw	65535	; errata NOP
 12118  0024E0                     __end_of_InitApp:
 12119                           	opt stack 0
 12120                           tblptru	equ	0xFF8
 12121                           tblptrh	equ	0xFF7
 12122                           tblptrl	equ	0xFF6
 12123                           tablat	equ	0xFF5
 12124                           prodh	equ	0xFF4
 12125                           prodl	equ	0xFF3
 12126                           intcon	equ	0xFF2
 12127                           intcon2	equ	0xFF1
 12128                           postinc0	equ	0xFEE
 12129                           wreg	equ	0xFE8
 12130                           indf1	equ	0xFE7
 12131                           postinc1	equ	0xFE6
 12132                           postdec1	equ	0xFE5
 12133                           fsr1h	equ	0xFE2
 12134                           fsr1l	equ	0xFE1
 12135                           indf2	equ	0xFDF
 12136                           postinc2	equ	0xFDE
 12137                           postdec2	equ	0xFDD
 12138                           plusw2	equ	0xFDB
 12139                           fsr2h	equ	0xFDA
 12140                           fsr2l	equ	0xFD9
 12141                           status	equ	0xFD8
 12142                           
 12143 ;; *************** function _PortBegin *****************
 12144 ;; Defined at:
 12145 ;;		line 48 in file "user.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;		None
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;		None
 12150 ;; Return value:  Size  Location     Type
 12151 ;;                  1    wreg      void 
 12152 ;; Registers used:
 12153 ;;		wreg, status,2
 12154 ;; Tracked objects:
 12155 ;;		On entry : F/0
 12156 ;;		On exit  : F/0
 12157 ;;		Unchanged: F/0
 12158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12159 ;;      Params:         0       0       0       0       0       0       0
 12160 ;;      Locals:         0       0       0       0       0       0       0
 12161 ;;      Temps:          0       0       0       0       0       0       0
 12162 ;;      Totals:         0       0       0       0       0       0       0
 12163 ;;Total ram usage:        0 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:    2
 12166 ;; This function calls:
 12167 ;;		Nothing
 12168 ;; This function is called by:
 12169 ;;		_InitApp
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           	psect	text67
 12174  002D14                     __ptext67:
 12175                           	opt stack 0
 12176  002D14                     _PortBegin:
 12177                           	opt stack 27
 12178                           
 12179                           ;incstack = 0
 12180  002D14  FFFF               	dw	65535
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;user.c: 50: TXSTA = 0;
 12184  002D16  6AAC               	clrf	4012,c	;volatile
 12185                           
 12186                           ;user.c: 51: TXSTAbits.TXEN = 1;
 12187  002D18  8AAC               	bsf	4012,5,c	;volatile
 12188                           
 12189                           ;user.c: 52: TXSTAbits.BRGH = 1;
 12190  002D1A  84AC               	bsf	4012,2,c	;volatile
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 12194  002D1C  0E40               	movlw	64
 12195  002D1E  6EAF               	movwf	4015,c	;volatile
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;user.c: 55: RCSTA = 0;
 12199  002D20  6AAB               	clrf	4011,c	;volatile
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;user.c: 56: RCSTAbits.SPEN = 1;
 12203  002D22  8EAB               	bsf	4011,7,c	;volatile
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;user.c: 57: RCSTAbits.CREN = 1;
 12207  002D24  88AB               	bsf	4011,4,c	;volatile
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;user.c: 59: TRISCbits.RC5 = 0;
 12211  002D26  9A94               	bcf	3988,5,c	;volatile
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;user.c: 60: LATCbits.LATC5 = 0;
 12215  002D28  9A8B               	bcf	3979,5,c	;volatile
 12216                           
 12217                           ; BSR set to: 0
 12218  002D2A  0012               	return		;funcret
 12219  002D2C  FFFF               	dw	65535	; errata NOP
 12220  002D2E                     __end_of_PortBegin:
 12221                           	opt stack 0
 12222                           tblptru	equ	0xFF8
 12223                           tblptrh	equ	0xFF7
 12224                           tblptrl	equ	0xFF6
 12225                           tablat	equ	0xFF5
 12226                           prodh	equ	0xFF4
 12227                           prodl	equ	0xFF3
 12228                           intcon	equ	0xFF2
 12229                           intcon2	equ	0xFF1
 12230                           postinc0	equ	0xFEE
 12231                           wreg	equ	0xFE8
 12232                           indf1	equ	0xFE7
 12233                           postinc1	equ	0xFE6
 12234                           postdec1	equ	0xFE5
 12235                           fsr1h	equ	0xFE2
 12236                           fsr1l	equ	0xFE1
 12237                           indf2	equ	0xFDF
 12238                           postinc2	equ	0xFDE
 12239                           postdec2	equ	0xFDD
 12240                           plusw2	equ	0xFDB
 12241                           fsr2h	equ	0xFDA
 12242                           fsr2l	equ	0xFD9
 12243                           status	equ	0xFD8
 12244                           
 12245 ;; *************** function _InitUartBuffer *****************
 12246 ;; Defined at:
 12247 ;;		line 44 in file "interrupts.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;		None
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;		None
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      void 
 12254 ;; Registers used:
 12255 ;;		None
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : F/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12261 ;;      Params:         0       0       0       0       0       0       0
 12262 ;;      Locals:         0       0       0       0       0       0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0
 12264 ;;      Totals:         0       0       0       0       0       0       0
 12265 ;;Total ram usage:        0 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    2
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		_PortClearReadBuffer
 12272 ;;		_InitApp
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text68
 12277  002DB0                     __ptext68:
 12278                           	opt stack 0
 12279  002DB0                     _InitUartBuffer:
 12280                           	opt stack 26
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;incstack = 0
 12284  002DB0  FFFF               	dw	65535
 12285                           
 12286                           ;interrupts.c: 46: UartBufferHead = 0;
 12287  002DB2  6A6D               	clrf	_UartBufferHead,c	;volatile
 12288                           
 12289                           ;interrupts.c: 47: UartBufferTail = 0;
 12290  002DB4  0100               	movlb	0	; () banked
 12291  002DB6  6BCB               	clrf	_UartBufferTail& (0+255),b	;volatile
 12292                           
 12293                           ;interrupts.c: 48: UartBufferLen = 0;
 12294  002DB8  6BCA               	clrf	_UartBufferLen& (0+255),b	;volatile
 12295                           
 12296                           ; BSR set to: 0
 12297  002DBA  0012               	return		;funcret
 12298  002DBC  FFFF               	dw	65535	; errata NOP
 12299  002DBE                     __end_of_InitUartBuffer:
 12300                           	opt stack 0
 12301                           tblptru	equ	0xFF8
 12302                           tblptrh	equ	0xFF7
 12303                           tblptrl	equ	0xFF6
 12304                           tablat	equ	0xFF5
 12305                           prodh	equ	0xFF4
 12306                           prodl	equ	0xFF3
 12307                           intcon	equ	0xFF2
 12308                           intcon2	equ	0xFF1
 12309                           postinc0	equ	0xFEE
 12310                           wreg	equ	0xFE8
 12311                           indf1	equ	0xFE7
 12312                           postinc1	equ	0xFE6
 12313                           postdec1	equ	0xFE5
 12314                           fsr1h	equ	0xFE2
 12315                           fsr1l	equ	0xFE1
 12316                           indf2	equ	0xFDF
 12317                           postinc2	equ	0xFDE
 12318                           postdec2	equ	0xFDD
 12319                           plusw2	equ	0xFDB
 12320                           fsr2h	equ	0xFDA
 12321                           fsr2l	equ	0xFD9
 12322                           status	equ	0xFD8
 12323                           
 12324 ;; *************** function _ConfigureOscillator *****************
 12325 ;; Defined at:
 12326 ;;		line 86 in file "system.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;		None
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;		None
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  1    wreg      void 
 12333 ;; Registers used:
 12334 ;;		None
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12340 ;;      Params:         0       0       0       0       0       0       0
 12341 ;;      Locals:         0       0       0       0       0       0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0
 12343 ;;      Totals:         0       0       0       0       0       0       0
 12344 ;;Total ram usage:        0 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    2
 12347 ;; This function calls:
 12348 ;;		Nothing
 12349 ;; This function is called by:
 12350 ;;		_main
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           	psect	text69
 12355  002DF0                     __ptext69:
 12356                           	opt stack 0
 12357  002DF0                     _ConfigureOscillator:
 12358                           	opt stack 28
 12359                           
 12360                           ; BSR set to: 0
 12361                           ;incstack = 0
 12362  002DF0  FFFF               	dw	65535
 12363  002DF2  0012               	return		;funcret
 12364  002DF4  FFFF               	dw	65535	; errata NOP
 12365  002DF6                     __end_of_ConfigureOscillator:
 12366                           	opt stack 0
 12367                           tblptru	equ	0xFF8
 12368                           tblptrh	equ	0xFF7
 12369                           tblptrl	equ	0xFF6
 12370                           tablat	equ	0xFF5
 12371                           prodh	equ	0xFF4
 12372                           prodl	equ	0xFF3
 12373                           intcon	equ	0xFF2
 12374                           intcon2	equ	0xFF1
 12375                           postinc0	equ	0xFEE
 12376                           wreg	equ	0xFE8
 12377                           indf1	equ	0xFE7
 12378                           postinc1	equ	0xFE6
 12379                           postdec1	equ	0xFE5
 12380                           fsr1h	equ	0xFE2
 12381                           fsr1l	equ	0xFE1
 12382                           indf2	equ	0xFDF
 12383                           postinc2	equ	0xFDE
 12384                           postdec2	equ	0xFDD
 12385                           plusw2	equ	0xFDB
 12386                           fsr2h	equ	0xFDA
 12387                           fsr2l	equ	0xFD9
 12388                           status	equ	0xFD8
 12389                           
 12390 ;; *************** function _AddSecond *****************
 12391 ;; Defined at:
 12392 ;;		line 180 in file "user.c"
 12393 ;; Parameters:    Size  Location     Type
 12394 ;;		None
 12395 ;; Auto vars:     Size  Location     Type
 12396 ;;		None
 12397 ;; Return value:  Size  Location     Type
 12398 ;;                  1    wreg      void 
 12399 ;; Registers used:
 12400 ;;		wreg, status,2, status,0
 12401 ;; Tracked objects:
 12402 ;;		On entry : F/0
 12403 ;;		On exit  : F/0
 12404 ;;		Unchanged: 0/0
 12405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12406 ;;      Params:         0       0       0       0       0       0       0
 12407 ;;      Locals:         0       0       0       0       0       0       0
 12408 ;;      Temps:          0       0       0       0       0       0       0
 12409 ;;      Totals:         0       0       0       0       0       0       0
 12410 ;;Total ram usage:        0 bytes
 12411 ;; Hardware stack levels used:    1
 12412 ;; Hardware stack levels required when called:    2
 12413 ;; This function calls:
 12414 ;;		Nothing
 12415 ;; This function is called by:
 12416 ;;		_main
 12417 ;; This function uses a non-reentrant model
 12418 ;;
 12419                           
 12420                           	psect	text70
 12421  002D84                     __ptext70:
 12422                           	opt stack 0
 12423  002D84                     _AddSecond:
 12424                           	opt stack 28
 12425                           
 12426                           ;incstack = 0
 12427  002D84  FFFF               	dw	65535
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;user.c: 182: currentTime++;
 12431  002D86  2BDB               	incf	_currentTime& (0+255),f,b
 12432  002D88  0E00               	movlw	0
 12433  002D8A  23DC               	addwfc	(_currentTime+1)& (0+255),f,b
 12434  002D8C  23DD               	addwfc	(_currentTime+2)& (0+255),f,b
 12435  002D8E  23DE               	addwfc	(_currentTime+3)& (0+255),f,b
 12436                           
 12437                           ; BSR set to: 0
 12438  002D90  0C00               	retlw	0	;funcret
 12439  002D92  FFFF               	dw	65535	; errata NOP
 12440  002D94                     __end_of_AddSecond:
 12441                           	opt stack 0
 12442                           tblptru	equ	0xFF8
 12443                           tblptrh	equ	0xFF7
 12444                           tblptrl	equ	0xFF6
 12445                           tablat	equ	0xFF5
 12446                           prodh	equ	0xFF4
 12447                           prodl	equ	0xFF3
 12448                           intcon	equ	0xFF2
 12449                           intcon2	equ	0xFF1
 12450                           postinc0	equ	0xFEE
 12451                           wreg	equ	0xFE8
 12452                           indf1	equ	0xFE7
 12453                           postinc1	equ	0xFE6
 12454                           postdec1	equ	0xFE5
 12455                           fsr1h	equ	0xFE2
 12456                           fsr1l	equ	0xFE1
 12457                           indf2	equ	0xFDF
 12458                           postinc2	equ	0xFDE
 12459                           postdec2	equ	0xFDD
 12460                           plusw2	equ	0xFDB
 12461                           fsr2h	equ	0xFDA
 12462                           fsr2l	equ	0xFD9
 12463                           status	equ	0xFD8
 12464                           
 12465 ;; *************** function _low_isr *****************
 12466 ;; Defined at:
 12467 ;;		line 183 in file "interrupts.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;		None
 12470 ;; Auto vars:     Size  Location     Type
 12471 ;;  c               1    5[COMRAM] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;                  1    wreg      void 
 12474 ;; Registers used:
 12475 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12481 ;;      Params:         0       0       0       0       0       0       0
 12482 ;;      Locals:         1       0       0       0       0       0       0
 12483 ;;      Temps:          5       0       0       0       0       0       0
 12484 ;;      Totals:         6       0       0       0       0       0       0
 12485 ;;Total ram usage:        6 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; Hardware stack levels required when called:    1
 12488 ;; This function calls:
 12489 ;;		Nothing
 12490 ;; This function is called by:
 12491 ;;		Interrupt level 1
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	intcodelo
 12496  000018                     __pintcodelo:
 12497                           	opt stack 0
 12498  000018                     _low_isr:
 12499                           	opt stack 0
 12500  000018  FFFF               	dw	65535	; assembler added errata NOP
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;incstack = 0
 12504  00001A  8076               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12505  00001C  FFFF               	dw	65535	; errata NOP
 12506  00001E  CFD8 F001          	movff	status,??_low_isr
 12507  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 12508  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 12509  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 12510  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 12511                           
 12512                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 12513  000032  BA9E               	btfsc	3998,5,c	;volatile
 12514  000034  AA9D               	btfss	3997,5,c	;volatile
 12515  000036  D016               	goto	i1l97
 12516  000038                     i1l98:
 12517  000038  FFFF               	dw	65535	; assembler added errata NOP
 12518  00003A  AA9E               	btfss	3998,5,c	;volatile
 12519  00003C  D7FD               	goto	i1l98
 12520                           
 12521                           ;interrupts.c: 211: uint8_t c = RCREG;
 12522  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 12523                           
 12524                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 12525  000042  0E00               	movlw	low _UartRingBuffer
 12526  000044  246D               	addwf	_UartBufferHead,w,c	;volatile
 12527  000046  6ED9               	movwf	fsr2l,c
 12528  000048  6ADA               	clrf	fsr2h,c
 12529  00004A  0E02               	movlw	high _UartRingBuffer
 12530  00004C  22DA               	addwfc	fsr2h,f,c
 12531  00004E  C006  FFDF         	movff	low_isr@c,indf2
 12532                           
 12533                           ;interrupts.c: 215: UartBufferLen++;
 12534  000052  0100               	movlb	0	; () banked
 12535  000054  2BCA               	incf	_UartBufferLen& (0+255),f,b	;volatile
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 12539  000056  286D               	incf	_UartBufferHead,w,c
 12540  000058  E102               	bnz	i1l5338
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;interrupts.c: 217: UartBufferHead = 0;
 12544  00005A  6A6D               	clrf	_UartBufferHead,c	;volatile
 12545  00005C  D001               	goto	i1l5340
 12546  00005E                     i1l5338:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;interrupts.c: 218: else
 12550                           ;interrupts.c: 219: UartBufferHead++;
 12551  00005E  2A6D               	incf	_UartBufferHead,f,c	;volatile
 12552  000060                     i1l5340:
 12553  000060  FFFF               	dw	65535	; assembler added errata NOP
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 12557  000062  9A9E               	bcf	3998,5,c	;volatile
 12558  000064                     i1l97:
 12559  000064  FFFF               	dw	65535	; assembler added errata NOP
 12560  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 12561  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 12562  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 12563  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 12564  000076  C001  FFD8         	movff	??_low_isr,status
 12565  00007A  9076               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12566  00007C  0010               	retfie	
 12567  00007E  FFFF               	dw	65535	; errata NOP
 12568  000080                     __end_of_low_isr:
 12569                           	opt stack 0
 12570                           tblptru	equ	0xFF8
 12571                           tblptrh	equ	0xFF7
 12572                           tblptrl	equ	0xFF6
 12573                           tablat	equ	0xFF5
 12574                           prodh	equ	0xFF4
 12575                           prodl	equ	0xFF3
 12576                           intcon	equ	0xFF2
 12577                           intcon2	equ	0xFF1
 12578                           postinc0	equ	0xFEE
 12579                           wreg	equ	0xFE8
 12580                           indf1	equ	0xFE7
 12581                           postinc1	equ	0xFE6
 12582                           postdec1	equ	0xFE5
 12583                           fsr1h	equ	0xFE2
 12584                           fsr1l	equ	0xFE1
 12585                           bsr	equ	0xFE0
 12586                           indf2	equ	0xFDF
 12587                           postinc2	equ	0xFDE
 12588                           postdec2	equ	0xFDD
 12589                           plusw2	equ	0xFDB
 12590                           fsr2h	equ	0xFDA
 12591                           fsr2l	equ	0xFD9
 12592                           status	equ	0xFD8
 12593                           
 12594 ;; *************** function _high_isr *****************
 12595 ;; Defined at:
 12596 ;;		line 122 in file "interrupts.c"
 12597 ;; Parameters:    Size  Location     Type
 12598 ;;		None
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;		None
 12601 ;; Return value:  Size  Location     Type
 12602 ;;                  1    wreg      void 
 12603 ;; Registers used:
 12604 ;;		wreg, status,2, status,0
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12610 ;;      Params:         0       0       0       0       0       0       0
 12611 ;;      Locals:         0       0       0       0       0       0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0
 12613 ;;      Totals:         0       0       0       0       0       0       0
 12614 ;;Total ram usage:        0 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; This function calls:
 12617 ;;		Nothing
 12618 ;; This function is called by:
 12619 ;;		Interrupt level 2
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	intcode
 12624  000008                     __pintcode:
 12625                           	opt stack 0
 12626  000008                     _high_isr:
 12627                           	opt stack 0
 12628  000008  FFFF               	dw	65535	; assembler added errata NOP
 12629                           
 12630                           ;incstack = 0
 12631  00000A  8276               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12632  00000C  FFFF               	dw	65535	; errata NOP
 12633  00000E  EF84  F013         	goto	int_func
 12634                           tblptru	equ	0xFF8
 12635                           tblptrh	equ	0xFF7
 12636                           tblptrl	equ	0xFF6
 12637                           tablat	equ	0xFF5
 12638                           prodh	equ	0xFF4
 12639                           prodl	equ	0xFF3
 12640                           intcon	equ	0xFF2
 12641                           intcon2	equ	0xFF1
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           indf1	equ	0xFE7
 12645                           postinc1	equ	0xFE6
 12646                           postdec1	equ	0xFE5
 12647                           fsr1h	equ	0xFE2
 12648                           fsr1l	equ	0xFE1
 12649                           bsr	equ	0xFE0
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           plusw2	equ	0xFDB
 12654                           fsr2h	equ	0xFDA
 12655                           fsr2l	equ	0xFD9
 12656                           status	equ	0xFD8
 12657                           
 12658                           	psect	intcode_body
 12659  002708                     __pintcode_body:
 12660                           	opt stack 23
 12661  002708                     int_func:
 12662                           	opt stack 23
 12663  002708  FFFF               	dw	65535	; errata NOP
 12664                           
 12665                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 12666  00270A  B09E               	btfsc	3998,0,c	;volatile
 12667  00270C  A09D               	btfss	3997,0,c	;volatile
 12668  00270E  D00C               	goto	i2l84
 12669                           
 12670                           ;interrupts.c: 144: {
 12671                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 12672  002710  909E               	bcf	3998,0,c	;volatile
 12673                           
 12674                           ;interrupts.c: 146: millisecondsFromStart++;
 12675  002712  0100               	movlb	0	; () banked
 12676  002714  2BB0               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 12677  002716  0E00               	movlw	0
 12678  002718  23B1               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 12679  00271A  23B2               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 12680  00271C  23B3               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 12684  00271E  0EF6               	movlw	246
 12685  002720  6ECF               	movwf	4047,c	;volatile
 12686                           
 12687                           ; BSR set to: 0
 12688  002722  0E3C               	movlw	60
 12689  002724  6ECE               	movwf	4046,c	;volatile
 12690  002726  D01C               	goto	i2l85
 12691  002728                     i2l84:
 12692  002728  FFFF               	dw	65535	; assembler added errata NOP
 12693                           
 12694                           ;interrupts.c: 149: }
 12695                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 12696  00272A  A4F2               	btfss	intcon,2,c	;volatile
 12697  00272C  D019               	goto	i2l85
 12698                           
 12699                           ;interrupts.c: 152: {
 12700                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 12701  00272E  94F2               	bcf	intcon,2,c	;volatile
 12702                           
 12703                           ;interrupts.c: 154: _6sCounter++;
 12704  002730  0100               	movlb	0	; () banked
 12705  002732  2BCC               	incf	__6sCounter& (0+255),f,b	;volatile
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;interrupts.c: 155: if(_6sCounter == 10)
 12709  002734  0E0A               	movlw	10
 12710  002736  19CC               	xorwf	__6sCounter& (0+255),w,b	;volatile
 12711  002738  E10F               	bnz	i2l5318
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;interrupts.c: 156: {
 12715                           ;interrupts.c: 157: _6sCounter = 0;
 12716  00273A  6BCC               	clrf	__6sCounter& (0+255),b	;volatile
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;interrupts.c: 158: globalMinutes++;
 12720  00273C  2A72               	incf	_globalMinutes,f,c	;volatile
 12721                           
 12722                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 12723  00273E  4BC2               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 12724  002740  2BC3               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;interrupts.c: 160: if(globalMinutes == 60)
 12728  002742  0E3C               	movlw	60
 12729  002744  1872               	xorwf	_globalMinutes,w,c	;volatile
 12730  002746  E108               	bnz	i2l5318
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;interrupts.c: 161: {
 12734                           ;interrupts.c: 162: globalMinutes = 0;
 12735  002748  6A72               	clrf	_globalMinutes,c	;volatile
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;interrupts.c: 163: globalHours++;
 12739  00274A  2A75               	incf	_globalHours,f,c	;volatile
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;interrupts.c: 164: if(globalHours == 24)
 12743  00274C  0E18               	movlw	24
 12744  00274E  1875               	xorwf	_globalHours,w,c	;volatile
 12745  002750  E103               	bnz	i2l5318
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;interrupts.c: 165: {
 12749                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 12750  002752  6BC2               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 12751  002754  6BC3               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 12752                           
 12753                           ;interrupts.c: 167: globalHours = 0;
 12754  002756  6A75               	clrf	_globalHours,c	;volatile
 12755  002758                     i2l5318:
 12756                           
 12757                           ; BSR set to: 0
 12758                           ;interrupts.c: 168: }
 12759                           ;interrupts.c: 169: }
 12760                           ;interrupts.c: 170: }
 12761                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + - 10) * 6)>>8),TMR0L=
      +                          ((0x10000 - (10000000L/4 / 256 + - 10) * 6)&0xFF)));
 12762  002758  0E1B               	movlw	27
 12763  00275A  6ED7               	movwf	4055,c	;volatile
 12764  00275C  0E5E               	movlw	94
 12765  00275E  6ED6               	movwf	4054,c	;volatile
 12766  002760                     i2l85:
 12767  002760  FFFF               	dw	65535	; assembler added errata NOP
 12768  002762  9276               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12769  002764  0011               	retfie		f
 12770  002766  FFFF               	dw	65535	; errata NOP
 12771  002768                     __end_of_high_isr:
 12772                           	opt stack 0
 12773                           tblptru	equ	0xFF8
 12774                           tblptrh	equ	0xFF7
 12775                           tblptrl	equ	0xFF6
 12776                           tablat	equ	0xFF5
 12777                           prodh	equ	0xFF4
 12778                           prodl	equ	0xFF3
 12779                           intcon	equ	0xFF2
 12780                           intcon2	equ	0xFF1
 12781                           postinc0	equ	0xFEE
 12782                           wreg	equ	0xFE8
 12783                           indf1	equ	0xFE7
 12784                           postinc1	equ	0xFE6
 12785                           postdec1	equ	0xFE5
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           bsr	equ	0xFE0
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           tblptru	equ	0xFF8
 12797                           tblptrh	equ	0xFF7
 12798                           tblptrl	equ	0xFF6
 12799                           tablat	equ	0xFF5
 12800                           prodh	equ	0xFF4
 12801                           prodl	equ	0xFF3
 12802                           intcon	equ	0xFF2
 12803                           intcon2	equ	0xFF1
 12804                           postinc0	equ	0xFEE
 12805                           wreg	equ	0xFE8
 12806                           indf1	equ	0xFE7
 12807                           postinc1	equ	0xFE6
 12808                           postdec1	equ	0xFE5
 12809                           fsr1h	equ	0xFE2
 12810                           fsr1l	equ	0xFE1
 12811                           bsr	equ	0xFE0
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           postdec2	equ	0xFDD
 12815                           plusw2	equ	0xFDB
 12816                           fsr2h	equ	0xFDA
 12817                           fsr2l	equ	0xFD9
 12818                           status	equ	0xFD8
 12819                           
 12820                           	psect	rparam
 12821  0000                     tblptru	equ	0xFF8
 12822                           tblptrh	equ	0xFF7
 12823                           tblptrl	equ	0xFF6
 12824                           tablat	equ	0xFF5
 12825                           prodh	equ	0xFF4
 12826                           prodl	equ	0xFF3
 12827                           intcon	equ	0xFF2
 12828                           intcon2	equ	0xFF1
 12829                           postinc0	equ	0xFEE
 12830                           wreg	equ	0xFE8
 12831                           indf1	equ	0xFE7
 12832                           postinc1	equ	0xFE6
 12833                           postdec1	equ	0xFE5
 12834                           fsr1h	equ	0xFE2
 12835                           fsr1l	equ	0xFE1
 12836                           bsr	equ	0xFE0
 12837                           indf2	equ	0xFDF
 12838                           postinc2	equ	0xFDE
 12839                           postdec2	equ	0xFDD
 12840                           plusw2	equ	0xFDB
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845                           	psect	temp
 12846  000076                     btemp:
 12847                           	opt stack 0
 12848  000076                     	ds	1
 12849  0000                     int$flags	set	btemp
 12850                           tblptru	equ	0xFF8
 12851                           tblptrh	equ	0xFF7
 12852                           tblptrl	equ	0xFF6
 12853                           tablat	equ	0xFF5
 12854                           prodh	equ	0xFF4
 12855                           prodl	equ	0xFF3
 12856                           intcon	equ	0xFF2
 12857                           intcon2	equ	0xFF1
 12858                           postinc0	equ	0xFEE
 12859                           wreg	equ	0xFE8
 12860                           indf1	equ	0xFE7
 12861                           postinc1	equ	0xFE6
 12862                           postdec1	equ	0xFE5
 12863                           fsr1h	equ	0xFE2
 12864                           fsr1l	equ	0xFE1
 12865                           bsr	equ	0xFE0
 12866                           indf2	equ	0xFDF
 12867                           postinc2	equ	0xFDE
 12868                           postdec2	equ	0xFDD
 12869                           plusw2	equ	0xFDB
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    15
    Data        3
    BSS         568
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     117
    BANK0           128     11     117
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> ModbusProcess_FC100@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(1) Largest target is 1
		 -> io_poll@lastCommand(COMRAM[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    io_poll@lastFunction	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandId(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(BANK0[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandData(BANK0[1]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(1) Largest target is 2
		 -> ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_ModbusPoll
    _io_poll->_ProcessUserCommands
    _ProcessUserCommands->_CommandSetStatusLed
    _CommandSetStatusLed->_PlaySound
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _LightLed->_ModbusGetUserCommandAdditional1Hi
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   43383
                                            103 COMRAM     5     5      0
                                              0 BANK0     11    11      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                  _SoundPlayNextStep
                        _StopPlaying
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             11    11      0    9419
                                             32 COMRAM    10    10      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  1     1      0    5877
                                             31 COMRAM     1     1      0
                _CommandSetStatusLed
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  3     3      0    2470
                                             28 COMRAM     3     3      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1080
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     373
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0     951
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2212
                                             16 COMRAM     5     5      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0     126
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3485
                                             28 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                   _SwitchOffAllLeds
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     720
                                             20 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Hi (ARG)
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    6     6      0     238
                                             14 COMRAM     6     6      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LoadNextEvent                                        5     5      0     295
                                              7 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _getTotalMinutes                                      1     1      0      97
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LightLed                                             8     6      2    2144
                                              8 COMRAM     8     6      2
  _ModbusGetUserCommandAdditional1Hi (ARG)
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   25094
                                             91 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0    1187
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1041
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0    1022
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3433
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    2351
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1378
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1060
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1360
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1331
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0    6322
                                             68 COMRAM    23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          20    14      6    1081
                                             10 COMRAM    20    14      6
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     478
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1480
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     763
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     377
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___lbdiv
         ___lbmod
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
       _ModbusGetUserCommandAdditional1Hi (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Hi (ARG)
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _SwitchOffAllLeds
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
       _ModbusGetUserCommandAdditional1Hi (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Hi (ARG)
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _LightLed
         _ModbusGetUserCommandAdditional1Hi (ARG)
       _ModbusGetUserCommandAdditional1Hi
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Hi (ARG)
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      75       5       91.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      75       1       92.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B2      15        0.0%
DATA                 0      0     2B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun May 22 22:10:52 2016

                                             LoadNextEvent@totalMinutes 000A  
                                                         _years_to_days 1A26  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$880 0014  
                                           __end_of_CommandSetStatusLed 255E  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l63 2B7C  
                                                                    l66 2B80  
                                                                    l74 2AAA  
                                                                    l78 2ACA  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001F  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l112 2CA2  
                                                                   l113 2CB6  
                                                   ModbusPoll@inputRegs 005F  
                                                                   l108 2BFA  
                                                                   l109 2C14  
                                                                   l250 2954  
                                                                   l251 295E  
                                                                   l412 179C  
                                                                   l252 2968  
                                                                   l253 2984  
                                                                   l272 0AD2  
                                                                   l264 0C56  
                                                                   l248 294A  
                                                                   l417 1E78  
                                                                   l290 1C18  
                                                                   l444 1E80  
                                                                   l460 2456  
                                                                   l381 1CF4  
                                                                   l374 2090  
                                                                   l446 1E84  
                                                                   l439 2558  
                                                                   l456 1F2C  
                                                                   l377 207C  
                                                                   l730 12E8  
                                                                   l387 1CE8  
                                                                   l804 0ECC  
                                                                   l726 28AA  
                                                                   l398 1804  
                                                                   l761 2D40  
                                                                   l932 214E  
                                                                   l916 15B8  
                                                                   l790 0C9E  
                                                                   l775 2A10  
                                                                   l767 2B48  
                                                                   l791 0ED4  
                                                                   l848 16C6  
                                                                   l795 0CD6  
                                                                   l879 1A00  
                                                                   l898 20EA  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2C96  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 0062  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                    _CopyStringToBuffer 26A8  
                                                                   wreg 000FE8  
                                              __size_of_getTotalMinutes 0026  
                                      ModbusValidateRequest@isSupported 0022  
                                                         _LoadNextEvent 16F4  
                                                         _globalMinutes 0072  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1339 280C  
                                                                  l1349 2938  
                                                                  l1365 285A  
                                                                  l1385 0690  
                                                                  l6010 2972  
                                                                  l6102 2AFE  
                                                                  l6040 239A  
                                                                  l6130 2B18  
                                                                  l6210 0D26  
                                                                  l6202 0CFE  
                                                                  l6106 2B0C  
                                                                  l6300 0E62  
                                                                  l7100 1200  
                                                                  l5430 2858  
                                                                  l6230 0D4E  
                                                                  l6214 0D2C  
                                                                  l6206 0D02  
                                                                  l6152 29DA  
                                                                  l6160 29FC  
                                                                  l6136 2B26  
                                                                  l6240 0D6C  
                                                                  l6232 0D5A  
                                                                  l6224 0D44  
                                                                  l6320 0E84  
                                                                  l7120 124E  
                                                                  l7112 1234  
                                                                  l7104 1214  
                                                                  l6080 1EB6  
                                                                  l5450 27E0  
                                                                  l7042 1164  
                                                                  l5514 2082  
                                                                  l5602 1C4E  
                                                                  l7028 24A4  
                                                                  l5700 2A72  
                                                                  l5460 2802  
                                                                  l5452 27E6  
                                                                  l6404 1FBA  
                                                                  l6308 0E70  
                                                                  l6252 0D9C  
                                                                  l7140 1286  
                                                                  l7132 126E  
                                                                  l7124 1260  
                                                                  l7116 1246  
                                                                  l7108 1222  
                                                                  l5604 1C80  
                                                                  l6092 1F10  
                                                                  l5702 2A78  
                                                                  l5470 2914  
                                                                  l7046 116A  
                                                                  l5614 1CAC  
                                                                  l6086 1EEC  
                                                                  l6078 1EAA  
                                                                  l6168 2A0E  
                                                                  l5552 2AC2  
                                                                  l5712 2A92  
                                                                  l5720 2C24  
                                                                  l5472 291A  
                                                                  l5448 27D6  
                                                                  l6600 2120  
                                                                  l6424 22E8  
                                                                  l6264 0DC2  
                                                                  l6192 0CCC  
                                                                  l6184 0CA2  
                                                                  l7152 1298  
                                                                  l7144 128C  
                                                                  l7136 1280  
                                                                  l7128 1266  
                                                                  l7080 11D4  
                                                                  l7072 11C4  
                                                                  l7056 1194  
                                                                  l6088 1F0A  
                                                                  l6362 168A  
                                                                  l6354 162E  
                                                                  l6346 161E  
                                                                  l6522 1D36  
                                                                  l6602 2122  
                                                                  l6426 231A  
                                                                  l6194 0CD2  
                                                                  l7162 12A4  
                                                                  l5490 201C  
                                                                  l6098 2AEC  
                                                                  l7234 1378  
                                                                  l7218 1332  
                                                                  l5660 256A  
                                                                  l6364 16B8  
                                                                  l6372 16CC  
                                                                  l5708 2A8A  
                                                                  l5476 292E  
                                                                  l5468 290A  
                                                                  l6532 1DB2  
                                                                  l6284 0E44  
                                                                  l6188 0CC4  
                                                                  l7156 129E  
                                                                  l7148 1292  
                                                                  l7068 11BE  
                                                                  l5820 0998  
                                                                  l5900 1790  
                                                                  l5804 2C74  
                                                                  l5572 1B34  
                                                                  l7236 137C  
                                                                  l7228 1368  
                                                                  l5742 222E  
                                                                  l6622 14B0  
                                                                  l6614 147C  
                                                                  l6198 0CDC  
                                                                  l7094 11F6  
                                                                  l5830 0B00  
                                                                  l5822 0A2E  
                                                                  l5814 097C  
                                                                  l5582 1B9E  
                                                                  l7262 141C  
                                                                  l7246 13DA  
                                                                  l5648 288C  
                                                                  l5728 2C3C  
                                                                  l6704 21C6  
                                                                  l6528 1D8E  
                                                                  l6632 14F2  
                                                                  l5904 17A2  
                                                                  l5584 1BBC  
                                                                  l5576 1B5A  
                                                                  l5682 25A6  
                                                                  l6378 16E4  
                                                                  l5746 2258  
                                                                  l6706 21D8  
                                                                  l6474 1956  
                                                                  l6650 1548  
                                                                  l6642 1520  
                                                                  l6634 14F8  
                                                                  l7098 11FA  
                                                                  l5834 0B7E  
                                                                  l5906 17CE  
                                                                  l5578 1B78  
                                                                  l5930 24FC  
                                                                  l7186 242A  
                                                                  l7266 143C  
                                                                  l5772 2B72  
                                                                  l5676 259C  
                                                                  l5668 257E  
                                                                  l6484 19C0  
                                                                  l5844 0C1A  
                                                                  l5828 0AA8  
                                                                  l6820 0FCC  
                                                                  l6812 0FB2  
                                                                  l6804 0F98  
                                                                  l5588 1BEA  
                                                                  l7196 243C  
                                                                  l5774 2B74  
                                                                  l6486 19F2  
                                                                  l6494 1A06  
                                                                  l6398 1F66  
                                                                  l6654 155C  
                                                                  l6646 1534  
                                                                  l6638 150C  
                                                                  l5846 0C36  
                                                                  l5838 0BA4  
                                                                  l5854 0C3E  
                                                                  l5870 1710  
                                                                  l5598 1C3A  
                                                                  l6822 0FD4  
                                                                  l6814 0FBA  
                                                                  l6806 0FA0  
                                                                  l5696 2A6A  
                                                                  l6680 2152  
                                                                  l6664 1584  
                                                                  l5872 1712  
                                                                  l6920 10FC  
                                                                  l6912 10E2  
                                                                  l6904 10CA  
                                                                  l6840 1006  
                                                                  l6832 0FEE  
                                                                  l6658 1570  
                                                                  l5890 176E  
                                                                  l5882 1744  
                                                                  l5866 1708  
                                                                  l6930 111E  
                                                                  l6922 1104  
                                                                  l6914 10EA  
                                                                  l6906 10D0  
                                                                  l6850 1028  
                                                                  l6842 100E  
                                                                  l6834 0FF4  
                                                                  l6826 0FE0  
                                                                  l5938 251C  
                                                                  l5980 26FC  
                                                                  l6668 15A4  
                                                                  l5892 1774  
                                                                  l5974 26D6  
                                                                  l5894 177A  
                                                                  l6870 1062  
                                                                  l6862 104E  
                                                                  l6790 0F72  
                                                                  l5896 1780  
                                                                  l6928 1116  
                                                                  l6856 103A  
                                                                  l6848 1020  
                                                                  l6936 112A  
                                                                  l6784 0F48  
                                                                  l6944 2A24  
                                                                  l5986 069C  
                                                                  l5898 1788  
                                                                  l6858 1042  
                                                                  l6938 1140  
                                                                  l5996 0954  
                                                                  l6980 1E0E  
                                                                  l6892 10A8  
                                                                  l6884 108E  
                                                                  l6876 1074  
                                                                  l6868 105C  
                                                                  l6796 0F80  
                                                                  l6974 1DF0  
                                                                  l6894 10B0  
                                                                  l6886 1096  
                                                                  l6878 107C  
                                                                  l6798 0F86  
                                                                  l6986 1E34  
                                                                  l6898 10BC  
                                                                  STR_1 0648  
                                                                  STR_3 063F  
                                                                  STR_5 064E  
                                                                  STR_7 0624  
                                                                  STR_9 0610  
                                                     _UpdateLedRegister 2944  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u5110 0CFE  
                                                                  u4304 1B4C  
                                                                  u4305 1B46  
                                                                  u5130 0D26  
                                                                  u4314 1B6C  
                                                                  u6010 13A8  
                                                                  u4315 1B66  
                                                                  u5230 0E42  
                                                                  u5070 0C9A  
                                                                  u4334 1B90  
                                                                  u4335 1B8A  
                                                                  u4344 1BB0  
                                                                  u4345 1BAA  
                                                                  u4444 287E  
                                                                  u4540 2216  
                                                                  u4364 1BD8  
                                                                  u4445 2878  
                                                                  u4365 1BD0  
                                                                  u4454 289E  
                                                                  u4614 09AC  
                                                                  u4374 1C00  
                                                                  u4455 2898  
                                                                  u4615 09A6  
                                                                  u4375 1BF8  
                                                                  u5344 1656  
                                                                  u4704 0AE6  
                                                                  u4624 09D4  
                                                                  u5345 164E  
                                                                  u4705 0AE0  
                                                                  u4625 09CE  
                                                   ?_CopyStringToBuffer 0007  
                                                                  u5434 22D2  
                                                                  u4714 0B14  
                                                                  u4634 09FE  
                                                                  u6067 2A9E  
                                                                  u5435 22CA  
                                                                  u4715 0B0E  
                                                                  u4635 09F8  
                                                                  u5364 1672  
                                                                  u5444 22FE  
                                                                  u4804 0C2E  
                                                                  u4724 0B3C  
                                                                  u4644 0A26  
                                                                  _RCIF 007CF5  
                                                                  u5365 166C  
                                                                  u5445 22F6  
                                                                  u4805 0C28  
                                                                  u4725 0B36  
                                                                  u4645 0A20  
                                                                  u5374 169E  
                                                                  u4910 0676  
                                                                  u5454 1984  
                                                                  u4734 0B62  
                                                                  u4654 0A42  
                                                                  u5375 1698  
                                                                  u5455 197E  
                                                                  u4735 0B5C  
                                                                  u4655 0A3C  
                                                                  u4920 0690  
                                                                  u4664 0A66  
                                                                  u4665 0A60  
                                                                  u5474 19AA  
                                                                  u4754 0B90  
                                                                  u5475 19A2  
                                                                  u4755 0B8A  
                                                                  u5484 19D6  
                                                                  u4764 0BB8  
                                                                  u4684 0A94  
                                                                  u5485 19CE  
                                                                  u4765 0BB2  
                                                                  u4685 0A8E  
                                                                  u4774 0BDC  
                                                                  u4694 0ABC  
                                                                  u4775 0BD6  
                                                                  u4695 0AB6  
                                                                  u4935 234A  
                                                                  i1l97 0064  
                                                                  u4945 236C  
                                                                  i1l98 0038  
                                                                  u4794 0C06  
                                                                  u4795 0C00  
                                                                  i2l84 2728  
                                                                  i2l85 2760  
                                                                  u4885 2506  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                  __size_of_ModbusSetExceptionStatusBit 004C  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 12EE  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0076  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2DF0  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0074  
                                                       __end_of_InitApp 24E0  
                                                          _soundTestEnd 00B8  
                                                            __6sCounter 00CC  
                                                  ??_CopyStringToBuffer 0009  
                                                       __end_of_SetTime 2CFA  
                                                  _curEventTotalMinutes 00C8  
                                           getTotalMinutes@totalMinutes 0007  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                       __end_of___lbdiv 2A98  
                                                                 _EEADR 000FA9  
                                                                 STR_11 0653  
                                                                 STR_21 0624  
                                                                 STR_13 0634  
                                                                 STR_15 0648  
                                                                 STR_23 0610  
                                                                 STR_17 063F  
                                                                 STR_25 0653  
                                                                 STR_19 064E  
                                                                 STR_27 0634  
                                                       __end_of___lbmod 2C46  
                                                                 _CARRY 007EC0  
                                                         SetHourMin@sec 000F  
                                                       __end_of___lwdiv 2818  
                                                       __end_of___lwmod 2944  
                                            __end_of_ModbusSendTxBuffer 28FC  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                   _ModbusProcess_FC100 2142  
                                                   _ModbusProcess_FC101 2B86  
                                                   _ModbusProcess_FC102 2CFA  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2DF0  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 2330  
                                                        ?_LoadNextEvent 0001  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00D6  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 298A  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 245C  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 006D  
                                                        _UartBufferTail 00CB  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       ___lbdiv@divisor 0007  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                       ___lbdiv@counter 0009  
                                                  ?_ModbusProcess_FC100 0001  
                                                  ?_ModbusProcess_FC101 0001  
                                                  ?_ModbusProcess_FC102 0001  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2CDC  
                                                       __initialization 2644  
                                                          __end_of_main 1466  
                                     __size_of_ModbusGetUserCommandData 0008  
                                   ModbusProcess_FC100@u8CopyBufferSize 0049  
                                                      __end_of_LightLed 0C5C  
                                             ?_ModbusGetUserCommandData 0007  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                              ??_ModbusGetUserCommandId 0009  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 0068  
                                                       ResetEvent@state 0013  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 23CE  
                                                            _ModbusInit 2D2E  
                                                            _ModbusPoll 114C  
                                                      __end_of_PortRead 2B86  
                                                 _ModbusUserCommandData 00E7  
                                                        _InitUartBuffer 2DB0  
                                                   _ProcessUserCommands 1E7C  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 180A  
                                                        _LightStatusLed 1B28  
                                                                i1l5340 0060  
                                                                i1l5338 005E  
                                                                i2l5318 2758  
                                                     ??_getTotalMinutes 0007  
                                                         _ymd_to_scalar 21EA  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 2A16  
                                                         main@oldMinute 00EE  
                                      ModbusProcess_FC15@u16currentCoil 0026  
                                         ModbusProcess_FC100@newRawTime 0045  
                                                 ??_ModbusProcess_FC100 0045  
                                                 ??_ModbusProcess_FC101 0016  
                                                 ??_ModbusProcess_FC102 0016  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00D8  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2D5E  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 2768  
                                             __playingSoundStartPosInEe 006E  
                                                  ?_ProcessUserCommands 0001  
                                                        _UartRingBuffer 0200  
                                                             ??___lbdiv 0008  
                                                          __lastAddress 00BC  
                                                             ??___lbmod 0008  
                                            ModbusProcess_FC3@u16regsno 001E  
                                                    __size_of_PlaySound 00DA  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 2818  
                                                                _millis 2C46  
                                                                clear_0 264C  
                                                                clear_1 265E  
                                                                clear_2 266A  
                                                     __end_of_AddSecond 2D94  
                                                                _mktime 0658  
                                                          __lastCommand 00D2  
                                                 __end_of_PortAvailable 2DC8  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0021  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0008  
                                                          __pdataCOMRAM 0073  
                                                __end_of_InitUartBuffer 2DBE  
                                                          __MODBUSCoils 00DF  
                                                            PortWrite@i 000A  
                                                   _PortClearReadBuffer 2DA2  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                                    __playingSoundSteps 00D5  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                        _ModbusUserCommandAdditional1Hi 00E1  
                                        _ModbusUserCommandAdditional2Hi 00E3  
                                        _ModbusUserCommandAdditional3Hi 00E5  
                                            __size_of_UpdateLedRegister 0046  
                                        _ModbusUserCommandAdditional1Lo 00E2  
                                                      __end_of_pwm_init 2D84  
                                        _ModbusUserCommandAdditional2Lo 00E4  
                                        _ModbusUserCommandAdditional3Lo 00E6  
                                                __end_of_LightStatusLed 1C1E  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      ___lbdiv@dividend 0008  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00D7  
                                                       ___lbmod@divisor 0007  
                                                            __accesstop 0080  
                                               __end_of__initialization 269A  
                                                       ___lbmod@counter 0009  
                                                         __deviceStatus 00CD  
                                            __end_of_ModbusProcess_FC21 2142  
                                            __end_of_ModbusProcess_FC15 1A26  
                                            __end_of_ModbusProcess_FC16 1DC2  
                                            __end_of_ModbusProcess_FC17 2644  
                                            __end_of_ModbusProcess_FC43 15C8  
                                                       Modbus@u8txenpin 000D  
                                                         ___rparam_used 000001  
                                                  ?_PortClearReadBuffer 0001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 027E  
                                                 ??_ProcessUserCommands 0020  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 0EDA  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 255E  
                                                  __end_of_fctsupported 0610  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                               SetHourMin@secToNext6Sec 001E  
                                                      ___lbdiv@quotient 000A  
                                       __size_of_ModbusGetUserCommandId 0008  
                                          ?_ModbusSetExceptionStatusBit 0007  
                                                   _ModbusUserCommandId 00E8  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 005C  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                  _ModbusBuildException 2CBC  
                                                    ??_SwitchOffAllLeds 0007  
                                                         ??_StopPlaying 0007  
                                                            __lastCount 00BE  
                                                       ?_LightStatusLed 0007  
                                              ?_ModbusGetRxBufferHeader 0001  
                                                           ?_SetHourMin 000B  
                                                     __end_of_PlaySound 1CF8  
                                   ModbusProcess_FC101@u8CopyBufferSize 0016  
                                              ModbusGetRxBufferHeader@i 0009  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0009  
                                                __size_of_SetBuzzerDuty 0032  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2D2E  
                                                 ??_PortClearReadBuffer 0007  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2AD6  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                    ModbusProcess_FC17@u8CopyBufferSize 0016  
                                                 _millisecondsFromStart 00B0  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2BEE  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 000A  
                                          __size_of_CommandSetStatusLed 007E  
                                         ??_ModbusSetExceptionStatusBit 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000C  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B4  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 000B  
                                                _ModbusGetUserCommandId 2DC8  
                                                    _ModbusSendTxBuffer 28B0  
                                      __end_of_ModbusGetUserCommandData 2DD8  
                                                               _GetTime 2DE8  
                                         __size_of_ModbusGetLastCommand 003C  
                                                       __inputRegsCount 00D0  
                                                   __end_of_StopPlaying 2DA2  
                                                               _InitApp 245C  
                                                   LightLed@statusShift 0010  
                                                               __Hparam 0000  
                                                               _SetTime 2CDC  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0018  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 01A2  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 00DA  
                                                   CopyStringToBuffer@i 000B  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                               ___lbdiv 2A5A  
                                                               ___lbmod 2C1A  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 27C4  
                                                               ___lwmod 28FC  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                           __size_of_CopyStringToBuffer 0060  
                                                   __size_of_SetHourMin 0112  
                                                               __pcinit 2644  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 2BBC  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 0071  
                                                       __size_of_mktime 0312  
                                                               __ptext0 12EE  
                                                               __ptext1 2D72  
                                                               __ptext2 23CE  
                                                               __ptext3 1E7C  
                                                               __ptext4 2DC8  
                                                               __ptext5 24E0  
                                                               __ptext6 2DD0  
                                                               __ptext7 2DD8  
                                                               __ptext8 2DE0  
                                                               __ptext9 1B28  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 23CE  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 000B  
                                                   __size_of_ResetEvent 0044  
                                       __end_of_ModbusGetRxBufferHeader 2B4E  
                                                       _getTotalMinutes 2C96  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 005E  
                                               CopyStringToBuffer@objId 000A  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2708  
                                                  end_of_initialization 269A  
                                                         __lastFunction 00E9  
                                                         __Lmediumconst 0000  
                                                               int_func 2708  
                                                   __playingSoundCurPos 00D4  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                             __totalMinutesFromDayStart 00C2  
                                                        ??_ProcessDiary 001D  
                                                   LightLed@ststusIndex 000F  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                            ??_pwm_init 0007  
                                   ModbusProcess_FC102@u8CopyBufferSize 0016  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                     ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                             _PORTCbits 000F82  
                                      ModbusSetExceptionStatusBit@value 0007  
                                                ??_ModbusBuildException 0007  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2D84  
                                                        _months_to_days 298A  
                                                      ___lbmod@dividend 0008  
                                                     _ModbusGetRxBuffer 29D0  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     _SoundPlayNextStep 1FE8  
                                                 ProcessUserCommands@v1 0020  
                                                    ?_ModbusGetRxBuffer 0001  
                                                           _StopPlaying 2D94  
                                           __end_of_ModbusProcess_FC100 21EA  
                                           __end_of_ModbusProcess_FC101 2BBC  
                                           __end_of_ModbusProcess_FC102 2D14  
                                           __end_of_ConfigureOscillator 2DF6  
                                                    ?_SoundPlayNextStep 0001  
                                                          _fctsupported 0601  
                                                           ___lbmod@rem 000A  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00EA  
                                          ModbusValidateRequest@u16regs 0028  
                                                            main@minute 00F4  
                                                   ??_SoundPlayNextStep 000F  
                                             ModbusGetLastCommand@count 0007  
                                              _ModbusGetUserCommandData 2DD0  
                                                 __end_of_years_to_days 1B28  
                                                        __end_of_Modbus 2D72  
                                               __end_of_getTotalMinutes 2CBC  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 2096  
                                                    _ModbusProcess_FC15 191C  
                                                    _ModbusProcess_FC16 1CF8  
                                                    _ModbusProcess_FC17 25D2  
                                                    _ModbusProcess_FC43 1466  
                                                         __pidataCOMRAM 2DF6  
                                              ModbusPoll@discreteInputs 005C  
                                                        __end_of_isleap 2864  
                                                        __end_of_millis 2C70  
                                                __end_of_months_to_days 29D0  
                                             __end_of_ModbusGetRxBuffer 2A16  
                                                        __end_of_mktime 096A  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 00CA  
                                                       ymd_to_scalar@yr 001E  
                                     ModbusSetExceptionStatusBit@bitNum 000A  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0065  
                                             __end_of_SoundPlayNextStep 2096  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2644  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                   ?_ModbusProcess_FC43 0001  
                                                 __end_of_LoadNextEvent 180A  
                                                          ??_SetHourMin 0011  
                                                   __size_of_getHourMin 002C  
                                           __end_of_ProcessUserCommands 1F32  
                                                          ??_ResetEvent 0011  
                                                             _PlaySound 1C1E  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 000A  
                                                     __size_of_LightLed 02F2  
                                                      LightStatusLed@on 0007  
                                                   _CommandSetStatusLed 24E0  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                  ??_ModbusProcess_FC43 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                      __size_of_ModbusGetRxBufferHeader 003C  
                                                    __end_of_ModbusInit 2D46  
                                                    __end_of_ModbusPoll 12EE  
                                                             _PortBegin 2D14  
                                                       ??_SetBuzzerDuty 0009  
                                               ModbusProcess_FC43@objId 0018  
                                                 _ModbusValidateRequest 0C5C  
                                                 CopyStringToBuffer@len 0008  
                                                 CopyStringToBuffer@src 0007  
                                                             _PortWrite 2A98  
                                                     __size_of_PortRead 0038  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 191C  
                                                     __holdingRegsCount 00CF  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                  ?_CommandSetStatusLed 0001  
                                                           __pbssCOMRAM 006D  
                                                    __end_of_ResetEvent 2A5A  
                                                         __pcstackBANK0 00EA  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 1E7C  
                                               ModbusProcess_FC3@u8size 0018  
                                               ?_ModbusGetUserCommandId 0007  
                                           __end_of_PortClearReadBuffer 2DB0  
                                               ModbusProcess_FC6@u8size 0018  
                                                     __size_of_high_isr 2760  
                                                              ?_GetTime 0007  
                                                            ?_PlaySound 0015  
                                                              ?_InitApp 0001  
                                                    PlaySound@soundAddr 001C  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                           ModbusProcess_FC43@devIdCode 0016  
                                        ModbusProcess_FC15@u8currentBit 0025  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                    ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                              ?___lbdiv 0007  
                                                              ?___lbmod 0007  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00C6  
                                                            ?_PortWrite 0007  
                                                      ?_getTotalMinutes 0001  
                                                           __pintcodelo 0018  
                                          __end_of_ModbusGetLastCommand 2B12  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 0061  
                                            __size_of_ModbusGetRxBuffer 0046  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2DBE  
                                                         __playingEndMs 00A0  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                 ??_CommandSetStatusLed 001D  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 0070  
                                                           ??_AddSecond 0007  
                                            __size_of_SoundPlayNextStep 00AE  
                                           ModbusGetLastCommand@command 0008  
                                                    __MODBUSHoldingRegs 018C  
                                        __end_of_ModbusGetUserCommandId 2DD0  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00C4  
                                                   io_poll@lastFunction 002A  
                                                 io_poll@lastEndAddress 0025  
                                                      ___lwdiv@quotient 000C  
                                                      SetHourMin@newMin 000D  
                                                 __end_of_ymd_to_scalar 228E  
                                                      SetHourMin@tmpSec 001D  
                                              ProcessDiary@totalMinutes 0021  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D9  
                                                        LightLed@ledNum 000E  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0066  
                                                           __soundCount 006F  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                            __end_of_CopyStringToBuffer 2708  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000B  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 0073  
                                                       __isSoundPlaying 00D1  
                                                        ?_PortAvailable 0001  
                                   __end_of_ModbusSetExceptionStatusBit 28B0  
                                           _ModbusSetExceptionStatusBit 2864  
                                                __nextEventPlayDuration 00C0  
                                                              InitApp@i 0007  
                                                           _globalHours 0075  
                                                             main@curMs 00F0  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                          ?_StopPlaying 0001  
                                                     _ModbusProcess_FC1 15C8  
                                                     _ModbusProcess_FC3 1F32  
                                                     _ModbusProcess_FC5 228E  
                                                     _ModbusProcess_FC6 2768  
                                                     _ModbusProcess_FC7 2D46  
                                                           _INTCON2bits 000FF1  
                                            ??_ModbusGetUserCommandData 0009  
                                        CommandSetStatusLed@commandData 001E  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                    ?_ModbusProcess_FC7 0001  
                                                              _LightLed 096A  
                                                    __end_of_getHourMin 2C1A  
                                                           ??_PlaySound 0017  
                                                 ModbusPoll@u8exception 0067  
                                                      _SwitchOffAllLeds 2C70  
                                                      __size_of_GetTime 0008  
                                                      __size_of_InitApp 0084  
                                                              __Hrparam 0000  
                                                              __u32time 00A4  
                                               _ModbusGetRxBufferHeader 2B12  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                   ??_ModbusProcess_FC7 0016  
                                                 __end_of_ModbusCalcCRC 25D2  
                                                              __Lrparam 0000  
                                                CommandSetStatusLed@led 001F  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0024  
                                                              _PortRead 2B4E  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00AC  
                                                           ??_PortWrite 000A  
                                                      __size_of___lbdiv 003E  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lbmod 002C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                        ModbusValidateRequest@readDevId 0026  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BA  
                                                           _isleap$2241 000F  
                                                           _currentTime 00DB  
                                                      __size_of_io_poll 008E  
                                                              _diffTime 00A8  
                                            ModbusProcess_FC100@newTime 004A  
                                             __end_of_ModbusProcess_FC1 16F4  
                                             __end_of_ModbusProcess_FC3 1FE8  
                                             __end_of_ModbusProcess_FC5 2330  
                                             __end_of_ModbusProcess_FC6 27C4  
                                             __end_of_ModbusProcess_FC7 2D5E  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 0027  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 2AD6  
                                                              __ptext11 2330  
                                                              __ptext20 1C1E  
                                                              __ptext12 2D5E  
                                                              __ptext21 1FE8  
                                                              __ptext13 2D2E  
                                                              __ptext30 0C5C  
                                                              __ptext22 2D94  
                                                              __ptext14 2BEE  
                                                              __ptext31 2D46  
                                                              __ptext23 2BBC  
                                                              __ptext15 2A16  
                                                              __ptext40 191C  
                                                              __ptext32 2768  
                                                              __ptext24 2DE8  
                                                              __ptext16 0EDA  
                                                              __ptext41 2CFA  
                                                              __ptext33 228E  
                                                              __ptext25 16F4  
                                                              __ptext17 2944  
                                                              __ptext50 28FC  
                                                              __ptext42 2B86  
                                                              __ptext34 1466  
                                                              __ptext26 2C96  
                                                              __ptext18 1DC2  
                                                              __ptext51 2CDC  
                                                              __ptext43 2142  
                                                              __ptext35 26A8  
                                                              __ptext27 096A  
                                                              __ptext19 2C70  
                                                              __ptext60 255E  
                                                              __ptext52 180A  
                                                              __ptext44 0658  
                                                              __ptext36 1F32  
                                                              __ptext28 114C  
                                                              __ptext61 2B12  
                                                              __ptext53 2C1A  
                                                              __ptext45 21EA  
                                                              __ptext37 2096  
                                                              __ptext29 2DA2  
                                                              __ptext70 2D84  
                                                              __ptext62 29D0  
                                                              __ptext54 2A5A  
                                                              __ptext46 1A26  
                                                              __ptext38 25D2  
                                                              __ptext63 2B4E  
                                                              __ptext55 2864  
                                                              __ptext47 298A  
                                                              __ptext39 1CF8  
                                                              __ptext64 2DBE  
                                                              __ptext56 15C8  
                                                              __ptext48 27C4  
                                                              __ptext65 2CBC  
                                                              __ptext57 28B0  
                                                              __ptext49 2818  
                                                              __ptext66 245C  
                                                              __ptext58 2C46  
                                                              __ptext67 2D14  
                                                              __ptext59 2A98  
                                                              __ptext68 2DB0  
                                                              __ptext69 2DF0  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 0029  
                                                         __size_of_main 0178  
                                                  _ModbusGetLastCommand 2AD6  
                                          __size_of_ModbusProcess_FC100 00A8  
                                          __size_of_ModbusProcess_FC101 0036  
                                          __size_of_ModbusProcess_FC102 001A  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 1DC2  
                                                              int$flags 0076  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2D72  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00EF  
                                                      __exceptionStatus 00CE  
                                                      LightLed@ledState 0009  
                                                    _ymd_to_scalar$2254 0028  
                                                            _INTCONbits 000FF2  
                             __end_of_ModbusGetUserCommandAdditional1Hi 2DE8  
                            __size_of_ModbusGetUserCommandAdditional1Hi 0008  
                                   ??_ModbusGetUserCommandAdditional1Hi 0009  
                                    ?_ModbusGetUserCommandAdditional1Hi 0007  
                                     _ModbusGetUserCommandAdditional1Hi 2DE0  
                             __end_of_ModbusGetUserCommandAdditional1Lo 2DE0  
                            __size_of_ModbusGetUserCommandAdditional1Lo 0008  
                                   ??_ModbusGetUserCommandAdditional1Lo 0009  
                                    ?_ModbusGetUserCommandAdditional1Lo 0007  
                                     _ModbusGetUserCommandAdditional1Lo 2DD8  
                                               __size_of_InitFromEeprom 009E  
                                                ProcessLightBlock@curMs 000C  
                                             SoundPlayNextStep@duration 0014  
                                                __size_of_years_to_days 0102  
                                                     __nextEventSoundId 00D3  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2DFA  
                                                              intlevel2 2DFA  
                                                 ModbusProcess_FC5@regs 001E  
                                                 ModbusProcess_FC6@regs 0016  
                                                      PlaySound@soundId 001B  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                             ??_ModbusGetRxBufferHeader 0008  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00AC  
                                           __size_of_ModbusProcess_FC15 010A  
                                           __size_of_ModbusProcess_FC16 00CA  
                                           __size_of_ModbusProcess_FC17 0072  
                                           __size_of_ModbusProcess_FC43 0162  
                                                     _ProcessLightBlock 0EDA  
                                          __size_of_ProcessUserCommands 00B6  
                                                __size_of_LoadNextEvent 0116  
                                                    ?_ProcessLightBlock 0001  
                                                 __end_of_SetBuzzerDuty 2BEE  
                                                   ModbusPoll@u8current 0065  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                            __size_of_ModbusProcess_FC1 012C  
                                            __size_of_ModbusProcess_FC3 00B6  
                                            __size_of_ModbusProcess_FC5 00A2  
                                            __size_of_ModbusProcess_FC6 005C  
                                            __size_of_ModbusProcess_FC7 0018  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000C  
                                           ModbusValidateRequest@u8regs 0027  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                 PlaySound@playDuration 0015  
                                                  __size_of_StopPlaying 000E  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000E  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 114C  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0064  
                                          __size_of_PortClearReadBuffer 000E  
                                            ModbusProcess_FC15@u8bitsno 0028  
